name: Benchmark Result Generator


on:
  schedule:
    - cron: '0/20 * * * *'
  push:
  pull_request:
  workflow_dispatch:

jobs:
  benchmark-run:
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    strategy:
      matrix:
        target: [ "dubbo-fastjson","dubbo-gson","dubbo-grpc","dubbo-hessianlite","dubbo-kryo","dubbo-native-hessian","dubbo-protobuf-json","dubbo-triple" ]
    steps:
      - uses: actions/checkout@v2
        with:
          repository: 'apache/dubbo-benchmark'
          ref: master
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
      - name: Prepare base
        run: mvn clean package -DskipTests=true -pl benchmark-base,client-base,server-base
      - name: Start server
        run: ./benchmark.sh ${{ matrix.target }}-server &
      - name: Wait server ready
        run: sleep 20
      - name: Run benchmark
        run: ./benchmark.sh -a "--warmupIterations=1 --warmupTime=1 --measurementIterations=1 --measurementTime=1" ${{ matrix.target }}-client >> ${{ matrix.target }}-output.txt
      - name: Kill jobs
        run: jobs -p | grep -o -E '\s\d+\s' | xargs kill || true
      - name: Save output
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}-output
          path: ${{ matrix.target }}-output.txt

  merge-result:
    needs: [benchmark-run]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        target: [ "dubbo-fastjson","dubbo-gson","dubbo-grpc","dubbo-hessianlite","dubbo-kryo","dubbo-native-hessian","dubbo-protobuf-json","dubbo-triple" ]
    steps:
      - name: Print Result Header
        run: echo '----------' >> final-output.txt && echo ${{ matrix.target }} >> final-output.txt && echo '----------' >> final-output.txt
      - name: Print Result body
        run: cat ${{ matrix.target }}-output.txt >> final-output.txt

  update-result:
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Setup Docsy
        run: git submodule update --init --recursive && sudo npm install -D --save autoprefixer && sudo npm install -D --save postcss-cli
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true
      - name: Build
        env:
          HUGO_ENV: production
        run: hugo --minify
      - name: Copy other files
        run: cp .htaccess ./public
      - name: Copy benchmark result files
        run: cp final-output.txt ./public
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/master'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: asf-site
          publish_dir: ./public
          keep_files: true


