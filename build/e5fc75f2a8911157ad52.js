webpackJsonp([1],[,,,,,,,,function(n,s,a){"use strict";function e(n){return n&&n.__esModule?n:{default:n}}function t(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}function l(n,s){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!s||"object"!=typeof s&&"function"!=typeof s?n:s}function o(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function, not "+typeof s);n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),s&&(Object.setPrototypeOf?Object.setPrototypeOf(n,s):n.__proto__=s)}Object.defineProperty(s,"__esModule",{value:!0});var r=function(){function n(n,s){for(var a=0;a<s.length;a++){var e=s[a];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(n,e.key,e)}}return function(s,a,e){return a&&n(s.prototype,a),e&&n(s,e),s}}(),p=a(0),i=e(p),c=a(19),u=e(c),d=a(73),h=a(66),g=e(h),m=a(22),b=e(m),f=a(1),j=a(26),y=e(j),v=a(25),w=e(v),k=a(24),S=e(k),x=a(18),C=e(x),E=a(78),I=e(E);a(108);var P=/^#[^\/]/,A=/^((\.{1,2}\/)|([\w-]+[\/.]))/,T=function(n){function s(){return t(this,s),l(this,(s.__proto__||Object.getPrototypeOf(s)).apply(this,arguments))}return o(s,n),r(s,[{key:"componentDidMount",value:function(){if(this.markdownContainer){window.scrollTo&&window.scrollTo(0,0);var n=this.props.match.url.split("?")[0].split("/").slice(2).join("/"),s=n.split("/").slice(0,-1).join("/"),a=window.location.hash.split("?"),e=b.default.parse(a[1]||""),t=e.lang||u.default.get("docsite_language")||C.default.defaultLanguage,l=Array.from(this.markdownContainer.querySelectorAll("img")),o=Array.from(this.markdownContainer.querySelectorAll("a"));l.forEach(function(n){var a=n.getAttribute("src");A.test(a)&&(n.src=window.location.protocol+"//"+window.location.host+g.default.join(window.location.pathname,"./docs",t,s,a))}),o.forEach(function(n){var a=n.getAttribute("href");A.test(a)&&(n.href=window.location.protocol+"//"+window.location.host+window.location.pathname+window.location.search+"#/"+g.default.join("./blog",s,a))}),this.markdownContainer.addEventListener("click",function(n){if("a"===n.target.nodeName.toLowerCase()&&n.target.getAttribute("href")&&P.test(n.target.getAttribute("href"))){n.preventDefault();var s=n.target.getAttribute("href").slice(1);d.scroller.scrollTo(s,{duration:1e3,smooth:"easeInOutQuint"})}})}}},{key:"componentDidUpdate",value:function(){this.componentDidMount()}},{key:"render",value:function(){var n=this,s=window.location.hash.split("?"),a=b.default.parse(s[1]||""),e=a.lang||u.default.get("docsite_language")||C.default.defaultLanguage;if("en-us"!==e&&"zh-cn"!==e&&(e=C.default.defaultLanguage),e!==u.default.get("docsite_language")&&u.default.set("docsite_language",e,{expires:365,path:""}),!a.lang)return i.default.createElement(f.Redirect,{to:this.props.match.url+"?lang="+e});var t=this.props.match.url.split("/").slice(2).join("/"),l=I.default[e].find(function(n){return n.filename===t}),o=l&&l.__html?l.__html:"";return i.default.createElement("div",{className:"blog-detail-page"},i.default.createElement(w.default,{type:"normal",logo:"./img/dubbo_colorful.png",language:e,onLanguageChange:this.onLanguageChange}),i.default.createElement("section",{className:"blog-content markdown-body",ref:function(s){n.markdownContainer=s},dangerouslySetInnerHTML:{__html:o}}),i.default.createElement(S.default,{logo:"./img/dubbo_gray.png"}))}}]),s}(y.default);s.default=T},,,,,,,,function(n,s,a){"use strict";function e(n,s,a,e){a&&Object.defineProperty(n,s,{enumerable:a.enumerable,configurable:a.configurable,writable:a.writable,value:a.initializer?a.initializer.call(e):void 0})}function t(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}function l(n,s,a,e,t){var l={};return Object.keys(e).forEach(function(n){l[n]=e[n]}),l.enumerable=!!l.enumerable,l.configurable=!!l.configurable,("value"in l||l.initializer)&&(l.writable=!0),l=a.slice().reverse().reduce(function(a,e){return e(n,s,a)||a},l),t&&void 0!==l.initializer&&(l.value=l.initializer?l.initializer.call(t):void 0,l.initializer=void 0),void 0===l.initializer&&(Object.defineProperty(n,s,l),l=null),l}function o(n){if(Array.isArray(n)){for(var s=0,a=Array(n.length);s<n.length;s++)a[s]=n[s];return a}return Array.from(n)}function r(n){if(!n||!n.hasOwnProperty)return!1;for(var s=["value","initializer","get","set"],a=0,e=s.length;a<e;a++)if(n.hasOwnProperty(s[a]))return!0;return!1}function p(n,s){return r(s[s.length-1])?n.apply(void 0,o(s).concat([[]])):function(){return n.apply(void 0,o(Array.prototype.slice.call(arguments)).concat([s]))}}function i(n){return!1===n.hasOwnProperty(I)&&k(n,I,{value:new E}),n[I]}function c(n){var s={};return P(n).forEach(function(a){return s[a]=S(n,a)}),s}function u(n){return function(s){return Object.defineProperty(this,n,{configurable:!0,writable:!0,enumerable:!0,value:s}),s}}function d(n,s){return n.bind?n.bind(s):function(){return n.apply(s,arguments)}}function h(n){!0!==T[n]&&(T[n]=!0,A("DEPRECATION: "+n))}s.d=p,s.c=i,a.d(s,"g",function(){return P}),s.f=c,s.e=u,s.a=d,a.d(s,"b",function(){return A}),s.h=h;var g,m,b,f,j,y,v=a(21),w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},k=Object.defineProperty,S=Object.getOwnPropertyDescriptor,x=Object.getOwnPropertyNames,C=Object.getOwnPropertySymbols,E=(g=function n(){t(this,n),e(this,"debounceTimeoutIds",m,this),e(this,"throttleTimeoutIds",b,this),e(this,"throttlePreviousTimestamps",f,this),e(this,"throttleTrailingArgs",j,this),e(this,"profileLastRan",y,this)},m=l(g.prototype,"debounceTimeoutIds",[v.a],{enumerable:!0,initializer:function(){return{}}}),b=l(g.prototype,"throttleTimeoutIds",[v.a],{enumerable:!0,initializer:function(){return{}}}),f=l(g.prototype,"throttlePreviousTimestamps",[v.a],{enumerable:!0,initializer:function(){return{}}}),j=l(g.prototype,"throttleTrailingArgs",[v.a],{enumerable:!0,initializer:function(){return null}}),y=l(g.prototype,"profileLastRan",[v.a],{enumerable:!0,initializer:function(){return null}}),g),I="function"==typeof Symbol?Symbol("__core_decorators__"):"__core_decorators__",P=C?function(n){return x(n).concat(C(n))}:x,A=function(){return"object"===("undefined"==typeof console?"undefined":w(console))&&console&&"function"==typeof console.warn?d(console.warn,console):function(){}}(),T={}},function(n,s,a){"use strict";Object.defineProperty(s,"__esModule",{value:!0});var e=a(38);a.d(s,"override",function(){return e.a});var t=a(31);a.d(s,"deprecate",function(){return t.a}),a.d(s,"deprecated",function(){return t.a});var l=a(41);a.d(s,"suppressWarnings",function(){return l.a});var o=a(34);a.d(s,"memoize",function(){return o.a});var r=a(28);a.d(s,"autobind",function(){return r.a});var p=a(40);a.d(s,"readonly",function(){return p.a});var i=a(32);a.d(s,"enumerable",function(){return i.a});var c=a(37);a.d(s,"nonenumerable",function(){return c.a});var u=a(36);a.d(s,"nonconfigurable",function(){return u.a});var d=a(29);a.d(s,"debounce",function(){return d.a});var h=a(42);a.d(s,"throttle",function(){return h.a});var g=a(30);a.d(s,"decorate",function(){return g.a});var m=a(35);a.d(s,"mixin",function(){return m.a}),a.d(s,"mixins",function(){return m.a});var b=a(21);a.d(s,"lazyInitialize",function(){return b.a});var f=a(43);a.d(s,"time",function(){return f.a});var j=a(33);a.d(s,"extendDescriptor",function(){return j.a});var y=a(39);a.d(s,"profile",function(){return y.a});var v=a(27);a.d(s,"applyDecorators",function(){return v.a})},function(n,s,a){"use strict";Object.defineProperty(s,"__esModule",{value:!0}),s.default={defaultLanguage:"en-us","en-us":{pageMenu:[{text:"HOME",link:"/"},{text:"DOCS",link:"/docs/user/quick-start.md"},{text:"BLOG",link:"/blog"},{text:"COMMUNITY",link:"/community"}],disclaimer:{title:"Disclaimer",content:"Apache Dubbo is an effort undergoing incubation at The Apache Software Foundation (ASF), sponsored by the Incubator. Incubation is required of all newly accepted projects until a further review indicates that the infrastructure, communications, and decision making process have stabilized in a manner consistent with other successful ASF projects. While incubation status is not necessarily a reflection of the completeness or stability of the code, it does indicate that the project has yet to be fully endorsed by the ASF."},documentation:{title:"Documentation",list:[{text:"Quick start",link:"/docs/user/quick-start.md"},{text:"Developer guide",link:"/docs/dev/build.md"},{text:"Admin manual",link:"/docs/admin/ops/dubbo-ops.md"}]},resources:{title:"Resources",list:[{text:"Blog",link:"/blog"},{text:"Community",link:"/community"}]},copyright:"Copyright © 2018 The Apache Software Foundation. Apache and the Apache feather logo are trademarks of The Apache Software Foundation."},"zh-cn":{pageMenu:[{text:"首页",link:"/"},{text:"文档",link:"/docs/user/quick-start.md"},{text:"博客",link:"/blog"},{text:"社区",link:"/community"}],disclaimer:{title:"Disclaimer",content:"Apache Dubbo is an effort undergoing incubation at The Apache Software Foundation (ASF), sponsored by the Incubator. Incubation is required of all newly accepted projects until a further review indicates that the infrastructure, communications, and decision making process have stabilized in a manner consistent with other successful ASF projects. While incubation status is not necessarily a reflection of the completeness or stability of the code, it does indicate that the project has yet to be fully endorsed by the ASF."},documentation:{title:"文档",list:[{text:"快速开始",link:"/docs/user/quick-start.md"},{text:"开发者指南",link:"/docs/dev/build.md"},{text:"运维管理",link:"/docs/admin/ops/dubbo-ops.md"}]},resources:{title:"资源",list:[{text:"博客",link:"/blog"},{text:"社区",link:"/community"}]},copyright:"Copyright © 2018 The Apache Software Foundation. Apache and the Apache feather logo are trademarks of The Apache Software Foundation."}}},function(n,s,a){var e,t;!function(l){var o=!1;if(e=l,void 0!==(t="function"==typeof e?e.call(s,a,s,n):e)&&(n.exports=t),o=!0,n.exports=l(),o=!0,!o){var r=window.Cookies,p=window.Cookies=l();p.noConflict=function(){return window.Cookies=r,p}}}(function(){function n(){for(var n=0,s={};n<arguments.length;n++){var a=arguments[n];for(var e in a)s[e]=a[e]}return s}function s(a){function e(s,t,l){var o;if("undefined"!=typeof document){if(arguments.length>1){if(l=n({path:"/"},e.defaults,l),"number"==typeof l.expires){var r=new Date;r.setMilliseconds(r.getMilliseconds()+864e5*l.expires),l.expires=r}l.expires=l.expires?l.expires.toUTCString():"";try{o=JSON.stringify(t),/^[\{\[]/.test(o)&&(t=o)}catch(n){}t=a.write?a.write(t,s):encodeURIComponent(String(t)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,decodeURIComponent),s=encodeURIComponent(String(s)),s=s.replace(/%(23|24|26|2B|5E|60|7C)/g,decodeURIComponent),s=s.replace(/[\(\)]/g,escape);var p="";for(var i in l)l[i]&&(p+="; "+i,!0!==l[i]&&(p+="="+l[i]));return document.cookie=s+"="+t+p}s||(o={});for(var c=document.cookie?document.cookie.split("; "):[],u=/(%[0-9A-Z]{2})+/g,d=0;d<c.length;d++){var h=c[d].split("="),g=h.slice(1).join("=");this.json||'"'!==g.charAt(0)||(g=g.slice(1,-1));try{var m=h[0].replace(u,decodeURIComponent);if(g=a.read?a.read(g,m):a(g,m)||g.replace(u,decodeURIComponent),this.json)try{g=JSON.parse(g)}catch(n){}if(s===m){o=g;break}s||(o[m]=g)}catch(n){}}return o}}return e.set=e,e.get=function(n){return e.call(e,n)},e.getJSON=function(){return e.apply({json:!0},[].slice.call(arguments))},e.defaults={},e.remove=function(s,a){e(s,"",n(a,{expires:-1}))},e.withConverter=s,e}return s(function(){})})},function(n,s,a){var e,t;/*!
  Copyright (c) 2016 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){"use strict";function a(){for(var n=[],s=0;s<arguments.length;s++){var e=arguments[s];if(e){var t=typeof e;if("string"===t||"number"===t)n.push(e);else if(Array.isArray(e))n.push(a.apply(null,e));else if("object"===t)for(var o in e)l.call(e,o)&&e[o]&&n.push(o)}}return n.join(" ")}var l={}.hasOwnProperty;void 0!==n&&n.exports?n.exports=a:(e=[],void 0!==(t=function(){return a}.apply(s,e))&&(n.exports=t))}()},function(n,s,a){"use strict";function e(n,s,e){var t=e.configurable,r=e.enumerable,p=e.initializer,i=e.value;return{configurable:t,enumerable:r,get:function(){if(this!==n){var a=p?p.call(this):i;return o(this,s,{configurable:t,enumerable:r,writable:!0,value:a}),a}},set:a.i(l.e)(s)}}function t(){for(var n=arguments.length,s=Array(n),t=0;t<n;t++)s[t]=arguments[t];return a.i(l.d)(e,s)}s.a=t;var l=a(16),o=Object.defineProperty},function(n,s,a){"use strict";s.decode=s.parse=a(45),s.encode=s.stringify=a(46)},function(n,s,a){"use strict";Object.defineProperty(s,"__esModule",{value:!0});var e=function(n){if(n=n?0===n.indexOf("#")?n:"#"+n:"",history.pushState){var s=window.location;history.pushState(null,null,n||s.pathname+s.search)}else location.hash=n},t=function(){return window.location.hash.replace(/^#/,"")},l=function(n){return function(s){return n.contains?n!=s&&n.contains(s):!!(16&n.compareDocumentPosition(s))}},o=function(n,s){return n===document?s.getBoundingClientRect().top+(window.scrollY||window.pageYOffset):"relative"===getComputedStyle(n).position?s.offsetTop:s.getBoundingClientRect().top+n.scrollTop};s.default={pushHash:e,getHash:t,filterElementInContainer:l,scrollOffset:o}},function(n,s,a){"use strict";function e(n){return n&&n.__esModule?n:{default:n}}Object.defineProperty(s,"__esModule",{value:!0});var t=a(0),l=e(t),o=a(19),r=e(o),p=a(1),i=a(18),c=e(i);a(50);var u=function(n){var s=r.default.get("docsite_language")||c.default.defaultLanguage,a=c.default[s];return l.default.createElement("footer",{className:"footer-container"},l.default.createElement("div",{className:"footer-body"},l.default.createElement("img",{src:n.logo}),l.default.createElement("img",{className:"apache",src:"./img/apache_logo.png"}),l.default.createElement("div",{className:"cols-container"},l.default.createElement("div",{className:"col col-12"},l.default.createElement("h3",null,a.disclaimer.title),l.default.createElement("p",null,a.disclaimer.content)),l.default.createElement("div",{className:"col col-6"},l.default.createElement("dl",null,l.default.createElement("dt",null,a.documentation.title),a.documentation.list.map(function(n,s){return l.default.createElement("dd",{key:s},l.default.createElement(p.Link,{to:n.link},n.text))}))),l.default.createElement("div",{className:"col col-6"},l.default.createElement("dl",null,l.default.createElement("dt",null,a.resources.title),a.resources.list.map(function(n,s){return l.default.createElement("dd",{key:s},l.default.createElement(p.Link,{to:n.link},n.text))})))),l.default.createElement("div",{className:"copyright"},l.default.createElement("span",null,a.copyright))))};s.default=u},function(n,s,a){"use strict";function e(n){return n&&n.__esModule?n:{default:n}}function t(n,s,a){return s in n?Object.defineProperty(n,s,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[s]=a,n}function l(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}function o(n,s){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!s||"object"!=typeof s&&"function"!=typeof s?n:s}function r(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function, not "+typeof s);n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),s&&(Object.setPrototypeOf?Object.setPrototypeOf(n,s):n.__proto__=s)}function p(n,s,a,e,t){var l={};return Object.keys(e).forEach(function(n){l[n]=e[n]}),l.enumerable=!!l.enumerable,l.configurable=!!l.configurable,("value"in l||l.initializer)&&(l.writable=!0),l=a.slice().reverse().reduce(function(a,e){return e(n,s,a)||a},l),t&&void 0!==l.initializer&&(l.value=l.initializer?l.initializer.call(t):void 0,l.initializer=void 0),void 0===l.initializer&&(Object.defineProperty(n,s,l),l=null),l}Object.defineProperty(s,"__esModule",{value:!0});var i,c=function(){function n(n,s){for(var a=0;a<s.length;a++){var e=s[a];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(n,e.key,e)}}return function(s,a,e){return a&&n(s.prototype,a),e&&n(s,e),s}}(),u=a(0),d=e(u),h=a(1),g=a(20),m=e(g),b=a(17),f=a(18),j=e(f);a(51);var y=[{text:"中",value:"en-us"},{text:"En",value:"zh-cn"}],v=function(){},w={type:"primary",language:"en-us",onLanguageChange:v},k=(i=function(n){function s(n){l(this,s);var a=o(this,(s.__proto__||Object.getPrototypeOf(s)).call(this,n));return a.state={menuBodyVisible:!1,language:n.language},a}return r(s,n),c(s,[{key:"toggleMenu",value:function(){this.setState({menuBodyVisible:!this.state.menuBodyVisible})}},{key:"switchLang",value:function(){var n=void 0;n="zh-cn"===this.state.language?"en-us":"zh-cn",this.setState({language:n}),this.props.onLanguageChange(n)}},{key:"componentWillReceiveProps",value:function(n){this.setState({language:n.language})}},{key:"render",value:function(){var n=this.props,s=n.type,a=n.logo,e=n.onLanguageChange,l=this.state,o=l.menuBodyVisible,r=l.language;return d.default.createElement("header",{className:(0,m.default)(t({"header-container":!0},"header-container-"+s,!0))},d.default.createElement("div",{className:"header-body"},d.default.createElement(h.Link,{to:"/"},d.default.createElement("img",{className:"logo",alt:j.default.name,title:j.default.name,src:a})),e!==v?d.default.createElement("span",{className:(0,m.default)(t({"language-switch":!0},"language-switch-"+s,!0)),onClick:this.switchLang},y.find(function(n){return n.value===r}).text):null,d.default.createElement("div",{className:(0,m.default)({"header-menu":!0,"header-menu-open":o})},d.default.createElement("img",{className:"header-menu-toggle",onClick:this.toggleMenu,src:"primary"===s?"./img/menu_white.png":"./img/menu_gray.png"}),d.default.createElement("ul",null,j.default[r].pageMenu.map(function(n){var a;return d.default.createElement("li",{className:(0,m.default)((a={"menu-item":!0},t(a,"menu-item-"+s,!0),t(a,"menu-item-"+s+"-active",window.location.hash.split("?")[0].slice(1).split("/")[1]===n.link.split("/")[1]),a))},d.default.createElement(h.Link,{to:n.link},n.text))})))))}}]),s}(d.default.Component),p(i.prototype,"toggleMenu",[b.autobind],Object.getOwnPropertyDescriptor(i.prototype,"toggleMenu"),i.prototype),p(i.prototype,"switchLang",[b.autobind],Object.getOwnPropertyDescriptor(i.prototype,"switchLang"),i.prototype),i);k.defaultProps=w,s.default=k},function(n,s,a){"use strict";function e(n){return n&&n.__esModule?n:{default:n}}function t(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}function l(n,s){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!s||"object"!=typeof s&&"function"!=typeof s?n:s}function o(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function, not "+typeof s);n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),s&&(Object.setPrototypeOf?Object.setPrototypeOf(n,s):n.__proto__=s)}Object.defineProperty(s,"__esModule",{value:!0}),s.default=void 0;var r,p=function(){function n(n,s){for(var a=0;a<s.length;a++){var e=s[a];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(n,e.key,e)}}return function(s,a,e){return a&&n(s.prototype,a),e&&n(s,e),s}}(),i=a(0),c=e(i),u=a(17),d=a(19),h=e(d),g=a(22),m=e(g),b=(r=function(n){function s(){return t(this,s),l(this,(s.__proto__||Object.getPrototypeOf(s)).apply(this,arguments))}return o(s,n),p(s,[{key:"onLanguageChange",value:function(n){this.props.location;h.default.set("docsite_language",n,{expires:365,path:""});var s=window.location.hash.split("?");if(s&&s.length){var a=m.default.parse(s[1]||"");a.lang=n,window.location.hash=(s[0]||"")+"?"+m.default.stringify(a)}this.forceUpdate()}}]),s}(c.default.Component),function(n,s,a,e,t){var l={};return Object.keys(e).forEach(function(n){l[n]=e[n]}),l.enumerable=!!l.enumerable,l.configurable=!!l.configurable,("value"in l||l.initializer)&&(l.writable=!0),l=a.slice().reverse().reduce(function(a,e){return e(n,s,a)||a},l),t&&void 0!==l.initializer&&(l.value=l.initializer?l.initializer.call(t):void 0,l.initializer=void 0),void 0===l.initializer&&(Object.defineProperty(n,s,l),l=null),l}(r.prototype,"onLanguageChange",[u.autobind],Object.getOwnPropertyDescriptor(r.prototype,"onLanguageChange"),r.prototype),r);s.default=b},function(n,s,a){"use strict";function e(n,s){var a=n.prototype;for(var e in s)for(var o=s[e],r=0,p=o.length;r<p;r++){var i=o[r];t(a,e,i(a,e,l(a,e)))}return n}s.a=e;var t=Object.defineProperty,l=Object.getOwnPropertyDescriptor},function(n,s,a){"use strict";function e(n){if(Array.isArray(n)){for(var s=0,a=Array(n.length);s<n.length;s++)a[s]=n[s];return a}return Array.from(n)}function t(n,s){if("undefined"==typeof WeakMap)throw new Error("Using @autobind on "+s.name+"() requires WeakMap support due to its use of super."+s.name+"()\n      See https://github.com/jayphelps/core-decorators.js/issues/20");d||(d=new WeakMap),!1===d.has(n)&&d.set(n,new WeakMap);var e=d.get(n);return!1===e.has(s)&&e.set(s,a.i(i.a)(s,n)),e.get(s)}function l(n){for(var s=a.i(i.f)(n.prototype),e=a.i(i.g)(s),t=0,l=e.length;t<l;t++){var r=e[t],p=s[r];"function"==typeof p.value&&"constructor"!==r&&c(n.prototype,r,o(n.prototype,r,p))}}function o(n,s,e){var l=e.value,o=e.configurable,r=e.enumerable;if("function"!=typeof l)throw new SyntaxError("@autobind can only be used on functions, not: "+l);var p=n.constructor;return{configurable:o,enumerable:r,get:function(){if(this===n)return l;if(this.constructor!==p&&u(this).constructor===p)return l;if(this.constructor!==p&&s in this.constructor.prototype)return t(this,l);var e=a.i(i.a)(l,this);return c(this,s,{configurable:!0,writable:!0,enumerable:!1,value:e}),e},set:a.i(i.e)(s)}}function r(n){return 1===n.length?l.apply(void 0,e(n)):o.apply(void 0,e(n))}function p(){for(var n=arguments.length,s=Array(n),a=0;a<n;a++)s[a]=arguments[a];return 0===s.length?function(){return r(arguments)}:r(s)}s.a=p;var i=a(16),c=Object.defineProperty,u=Object.getPrototypeOf,d=void 0},function(n,s,a){"use strict";function e(n,s,e,t){var i=r(t,2),c=i[0],u=void 0===c?p:c,d=i[1],h=void 0!==d&&d,g=e.value;if("function"!=typeof g)throw new SyntaxError("Only functions can be debounced");return o({},e,{value:function(){var n=this,e=a.i(l.c)(this),t=e.debounceTimeoutIds,o=t[s],r=h&&!o,p=arguments;clearTimeout(o),t[s]=setTimeout(function(){delete t[s],h||g.apply(n,p)},u),r&&g.apply(this,p)}})}function t(){a.i(l.h)("@debounce is deprecated and will be removed shortly. Use @debounce from lodash-decorators.\n\n  https://www.npmjs.com/package/lodash-decorators");for(var n=arguments.length,s=Array(n),t=0;t<n;t++)s[t]=arguments[t];return a.i(l.d)(e,s)}s.a=t;var l=a(16),o=Object.assign||function(n){for(var s=1;s<arguments.length;s++){var a=arguments[s];for(var e in a)Object.prototype.hasOwnProperty.call(a,e)&&(n[e]=a[e])}return n},r=function(){function n(n,s){var a=[],e=!0,t=!1,l=void 0;try{for(var o,r=n[Symbol.iterator]();!(e=(o=r.next()).done)&&(a.push(o.value),!s||a.length!==s);e=!0);}catch(n){t=!0,l=n}finally{try{!e&&r.return&&r.return()}finally{if(t)throw l}}return a}return function(s,a){if(Array.isArray(s))return s;if(Symbol.iterator in Object(s))return n(s,a);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),p=300},function(n,s,a){"use strict";function e(n){if(Array.isArray(n)){for(var s=0,a=Array(n.length);s<n.length;s++)a[s]=n[s];return a}return Array.from(n)}function t(n){return Array.isArray(n)?n:Array.from(n)}function l(n,s,l,o){var i=t(o),c=i[0],u=i.slice(1),d=l.configurable,h=l.enumerable,g=l.writable,m=l.get,b=l.set,f=l.value,j=!!m;return{configurable:d,enumerable:h,get:function(){var n=j?m.call(this):f,a=c.call.apply(c,[this,n].concat(e(u)));if(j)return a;var t={configurable:d,enumerable:h};return t.value=a,t.writable=g,p(this,s,t),a},set:j?b:a.i(r.e)()}}function o(){for(var n=arguments.length,s=Array(n),e=0;e<n;e++)s[e]=arguments[e];return a.i(r.d)(l,s)}s.a=o;var r=a(16),p=Object.defineProperty},function(n,s,a){"use strict";function e(n,s,e,t){var i=r(t,2),c=i[0],u=void 0===c?p:c,d=i[1],h=void 0===d?{}:d;if("function"!=typeof e.value)throw new SyntaxError("Only functions can be marked as deprecated");var g=n.constructor.name+"#"+s;return h.url&&(u+="\n\n    See "+h.url+" for more details.\n\n"),o({},e,{value:function(){return a.i(l.b)("DEPRECATION "+g+": "+u),e.value.apply(this,arguments)}})}function t(){for(var n=arguments.length,s=Array(n),t=0;t<n;t++)s[t]=arguments[t];return a.i(l.d)(e,s)}s.a=t;var l=a(16),o=Object.assign||function(n){for(var s=1;s<arguments.length;s++){var a=arguments[s];for(var e in a)Object.prototype.hasOwnProperty.call(a,e)&&(n[e]=a[e])}return n},r=function(){function n(n,s){var a=[],e=!0,t=!1,l=void 0;try{for(var o,r=n[Symbol.iterator]();!(e=(o=r.next()).done)&&(a.push(o.value),!s||a.length!==s);e=!0);}catch(n){t=!0,l=n}finally{try{!e&&r.return&&r.return()}finally{if(t)throw l}}return a}return function(s,a){if(Array.isArray(s))return s;if(Symbol.iterator in Object(s))return n(s,a);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),p="This function will be removed in future versions."},function(n,s,a){"use strict";function e(n,s,a){return a.enumerable=!0,a}function t(){for(var n=arguments.length,s=Array(n),t=0;t<n;t++)s[t]=arguments[t];return a.i(l.d)(e,s)}s.a=t;var l=a(16)},function(n,s,a){"use strict";function e(n,s,a){var e=r(n),t=p(e,s);return o({},t,{value:a.value,initializer:a.initializer,get:a.get||t.get,set:a.set||t.set})}function t(){for(var n=arguments.length,s=Array(n),t=0;t<n;t++)s[t]=arguments[t];return a.i(l.d)(e,s)}s.a=t;var l=a(16),o=Object.assign||function(n){for(var s=1;s<arguments.length;s++){var a=arguments[s];for(var e in a)Object.prototype.hasOwnProperty.call(a,e)&&(n[e]=a[e])}return n},r=Object.getPrototypeOf,p=Object.getOwnPropertyDescriptor},function(n,s,a){"use strict";function e(n,s,a){return s in n?Object.defineProperty(n,s,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[s]=a,n}function t(n,s){return s===Object(s)?s:n[s]||(n[s]={})}function l(n,s,a,e,t){var l=s.apply(n,a);return e[t]=l,l}function o(n){var s=void 0,a=void 0;return n.value?(s=n.value,a="value"):n.get?(s=n.get,a="get"):n.set&&(s=n.set,a="set"),{fn:s,wrapKey:a}}function r(n,s,a){var r=o(a),p=r.fn,i=r.wrapKey,u=new WeakMap,d=Object.create(null),h=Object.create(null),g=0;return c({},a,e({},i,function(){for(var n=arguments.length,s=Array(n),a=0;a<n;a++)s[a]=arguments[a];for(var e="0",o=0,r=s.length;o<r;o++){var i=s[o],c=t(h,i),m=u.get(c);void 0===m&&(m=++g,u.set(c,m)),e+=m}return d[e]||l(this,p,arguments,d,e)}))}function p(){a.i(i.h)("@memoize is deprecated and will be removed shortly. Use @memoize from lodash-decorators.\n\n  https://www.npmjs.com/package/lodash-decorators");for(var n=arguments.length,s=Array(n),e=0;e<n;e++)s[e]=arguments[e];return a.i(i.d)(r,s)}s.a=p;var i=a(16),c=Object.assign||function(n){for(var s=1;s<arguments.length;s++){var a=arguments[s];for(var e in a)Object.prototype.hasOwnProperty.call(a,e)&&(n[e]=a[e])}return n}},function(n,s,a){"use strict";function e(n){return"[object Symbol]"===Object.prototype.toString.call(n)&&"object"===(void 0===n?"undefined":p(n))}function t(n,s){if(e(n)){do{if(s===Object.prototype)return void 0!==s[n];if(s.hasOwnProperty(n))return!0}while(s=c(s));return!1}return n in s}function l(n,s){if(!s.length)throw new SyntaxError("@mixin() class "+n.name+" requires at least one mixin as an argument");for(var e=0,l=s.length;e<l;e++)for(var o=a.i(r.f)(s[e]),p=a.i(r.g)(o),c=0,u=p.length;c<u;c++){var d=p[c];t(d,n.prototype)||i(n.prototype,d,o[d])}}function o(){for(var n=arguments.length,s=Array(n),e=0;e<n;e++)s[e]=arguments[e];return a.i(r.h)("@mixin is deprecated and will be removed shortly. Use @mixin from lodash-decorators.\n\n  https://www.npmjs.com/package/lodash-decorators"),"function"==typeof s[0]?l(s[0],[]):function(n){return l(n,s)}}s.a=o;var r=a(16),p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},i=Object.defineProperty,c=Object.getPrototypeOf},function(n,s,a){"use strict";function e(n,s,a){return a.configurable=!1,a}function t(){for(var n=arguments.length,s=Array(n),t=0;t<n;t++)s[t]=arguments[t];return a.i(l.d)(e,s)}s.a=t;var l=a(16)},function(n,s,a){"use strict";function e(n,s,a){return a.enumerable=!1,a}function t(){for(var n=arguments.length,s=Array(n),t=0;t<n;t++)s[t]=arguments[t];return a.i(l.d)(e,s)}s.a=t;var l=a(16)},function(n,s,a){"use strict";function e(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}function t(n){return n.hasOwnProperty("value")?"data":n.hasOwnProperty("get")||n.hasOwnProperty("set")?"accessor":"data"}function l(n,s,a){a.assert(n.length===s.length)}function o(n,s,a){var e=h(n.value),t=h(s.value);if("undefined"===e&&"undefined"===t&&a.error("descriptor values are both undefined. (class properties are are not currently supported)'"),e!==t){("function"===t&&void 0===e||void 0!==e)&&a.error('value types do not match. {parent} is "'+e+'", {child} is "'+t+'"')}switch(t){case"function":l(n.value,s.value,a);break;default:a.error('Unexpected error. Please file a bug with: {parent} is "'+e+'", {child} is "'+t+'"')}}function r(n,s,a){var e="function"==typeof n.get,t="function"==typeof s.get,o="function"==typeof n.set,r="function"==typeof s.set;(e||t)&&(!e&&o&&a.error("{parent} is setter but {child} is getter"),!t&&r&&a.error("{parent} is getter but {child} is setter"),l(n.get,s.get,a)),(o||r)&&(!o&&e&&a.error("{parent} is getter but {child} is setter"),!r&&t&&a.error("{parent} is setter but {child} is getter"),l(n.set,s.set,a))}function p(n,s,a){var e=t(n),l=t(s);switch(e!==l&&a.error('descriptor types do not match. {parent} is "'+e+'", {child} is "'+l+'"'),l){case"data":o(n,s,a);break;case"accessor":r(n,s,a)}}function i(n,s){for(var a=0,e=f.length;a<e;a++){var t=f[a],l=t(s);if(l in n)return l}return null}function c(n,s,a){a.key=s;var e=Object.getPrototypeOf(n),t=Object.getOwnPropertyDescriptor(e,s),l=new b(e,n,t,a);if(void 0===t){var o=i(e,s),r=o?'\n\n  Did you mean "'+o+'"?':"";l.error("No descriptor matching {child} was found on the prototype chain."+r)}return p(t,a,l),a}function u(){for(var n=arguments.length,s=Array(n),e=0;e<n;e++)s[e]=arguments[e];return a.i(d.d)(c,s)}s.a=u;var d=a(16),h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},g=function(){function n(n,s){for(var a=0;a<s.length;a++){var e=s[a];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(n,e.key,e)}}return function(s,a,e){return a&&n(s.prototype,a),e&&n(s,e),s}}(),m=/^function ([_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*)?(\([^\)]*\))[\s\S]+$/,b=function(){function n(s,a,t,l){e(this,n),this.parentKlass=s,this.childKlass=a,this.parentDescriptor=t,this.childDescriptor=l}return g(n,[{key:"_getTopic",value:function(n){return void 0===n?null:"value"in n?n.value:"get"in n?n.get:"set"in n?n.set:void 0}},{key:"_extractTopicSignature",value:function(n){switch(void 0===n?"undefined":h(n)){case"function":return this._extractFunctionSignature(n);default:return this.key}}},{key:"_extractFunctionSignature",value:function(n){var s=this;return n.toString().replace(m,function(n){return(arguments.length>1&&void 0!==arguments[1]?arguments[1]:s.key)+arguments[2]})}},{key:"key",get:function(){return this.childDescriptor.key}},{key:"parentNotation",get:function(){return this.parentKlass.constructor.name+"#"+this.parentPropertySignature}},{key:"childNotation",get:function(){return this.childKlass.constructor.name+"#"+this.childPropertySignature}},{key:"parentTopic",get:function(){return this._getTopic(this.parentDescriptor)}},{key:"childTopic",get:function(){return this._getTopic(this.childDescriptor)}},{key:"parentPropertySignature",get:function(){return this._extractTopicSignature(this.parentTopic)}},{key:"childPropertySignature",get:function(){return this._extractTopicSignature(this.childTopic)}}]),g(n,[{key:"assert",value:function(n){var s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";!0!==n&&this.error("{child} does not properly override {parent}"+s)}},{key:"error",value:function(n){var s=this;throw n=n.replace("{parent}",function(n){return s.parentNotation}).replace("{child}",function(n){return s.childNotation}),new SyntaxError(n)}}]),n}(),f=[function(n){return n.toLowerCase()},function(n){return n.toUpperCase()},function(n){return n+"s"},function(n){return n.slice(0,-1)},function(n){return n.slice(1,n.length)}]},function(n,s,a){"use strict";function e(n,s,e,i){var c=r(i,3),u=c[0],d=void 0===u?null:u,h=c[1],g=void 0!==h&&h,m=c[2],b=void 0===m?p:m;if(!t.__enabled)return t.__warned||(b.warn("console.profile is not supported. All @profile decorators are disabled."),t.__warned=!0),e;var f=e.value;if(null===d&&(d=n.constructor.name+"."+s),"function"!=typeof f)throw new SyntaxError("@profile can only be used on functions, not: "+f);return o({},e,{value:function(){var n=Date.now(),s=a.i(l.c)(this);(!0===g&&!s.profileLastRan||!1===g||"number"==typeof g&&n-s.profileLastRan>g||"function"==typeof g&&g.apply(this,arguments))&&(b.profile(d),s.profileLastRan=n);try{return f.apply(this,arguments)}finally{b.profileEnd(d)}}})}function t(){for(var n=arguments.length,s=Array(n),t=0;t<n;t++)s[t]=arguments[t];return a.i(l.d)(e,s)}s.a=t;var l=a(16),o=Object.assign||function(n){for(var s=1;s<arguments.length;s++){var a=arguments[s];for(var e in a)Object.prototype.hasOwnProperty.call(a,e)&&(n[e]=a[e])}return n},r=function(){function n(n,s){var a=[],e=!0,t=!1,l=void 0;try{for(var o,r=n[Symbol.iterator]();!(e=(o=r.next()).done)&&(a.push(o.value),!s||a.length!==s);e=!0);}catch(n){t=!0,l=n}finally{try{!e&&r.return&&r.return()}finally{if(t)throw l}}return a}return function(s,a){if(Array.isArray(s))return s;if(Symbol.iterator in Object(s))return n(s,a);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),p=(console,{profile:console.profile?a.i(l.a)(console.profile,console):function(){},profileEnd:console.profileEnd?a.i(l.a)(console.profileEnd,console):function(){},warn:l.b});t.__enabled=!!console.profile,t.__warned=!1},function(n,s,a){"use strict";function e(n,s,a){return a.writable=!1,a}function t(){for(var n=arguments.length,s=Array(n),t=0;t<n;t++)s[t]=arguments[t];return a.i(l.d)(e,s)}s.a=t;var l=a(16)},function(n,s,a){"use strict";function e(){}function t(n,s,a){if("object"===("undefined"==typeof console?"undefined":i(console))){var t=console.warn;console.warn=e;var l=s.apply(n,a);return console.warn=t,l}return s.apply(n,a)}function l(n,s,a){return p({},a,{value:function(){return t(this,a.value,arguments)}})}function o(){for(var n=arguments.length,s=Array(n),e=0;e<n;e++)s[e]=arguments[e];return a.i(r.d)(l,s)}s.a=o;var r=a(16),p=Object.assign||function(n){for(var s=1;s<arguments.length;s++){var a=arguments[s];for(var e in a)Object.prototype.hasOwnProperty.call(a,e)&&(n[e]=a[e])}return n},i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n}},function(n,s,a){"use strict";function e(n,s,e,t){var i=r(t,2),c=i[0],u=void 0===c?p:c,d=i[1],h=void 0===d?{}:d,g=e.value;if("function"!=typeof g)throw new SyntaxError("Only functions can be throttled");return!1!==h.leading&&(h.leading=!0),!1!==h.trailing&&(h.trailing=!0),o({},e,{value:function(){var n=this,e=a.i(l.c)(this),t=e.throttleTimeoutIds,o=e.throttlePreviousTimestamps,r=t[s],p=o[s]||0,i=Date.now();h.trailing&&(e.throttleTrailingArgs=arguments),p||!1!==h.leading||(p=i);var c=u-(i-p);c<=0?(clearTimeout(r),delete t[s],o[s]=i,g.apply(this,arguments)):!r&&h.trailing&&(t[s]=setTimeout(function(){o[s]=!1===h.leading?0:Date.now(),delete t[s],g.apply(n,e.throttleTrailingArgs),e.throttleTrailingArgs=null},c))}})}function t(){a.i(l.h)("@throttle is deprecated and will be removed shortly. Use @throttle from lodash-decorators.\n\n  https://www.npmjs.com/package/lodash-decorators");for(var n=arguments.length,s=Array(n),t=0;t<n;t++)s[t]=arguments[t];return a.i(l.d)(e,s)}s.a=t;var l=a(16),o=Object.assign||function(n){for(var s=1;s<arguments.length;s++){var a=arguments[s];for(var e in a)Object.prototype.hasOwnProperty.call(a,e)&&(n[e]=a[e])}return n},r=function(){function n(n,s){var a=[],e=!0,t=!1,l=void 0;try{for(var o,r=n[Symbol.iterator]();!(e=(o=r.next()).done)&&(a.push(o.value),!s||a.length!==s);e=!0);}catch(n){t=!0,l=n}finally{try{!e&&r.return&&r.return()}finally{if(t)throw l}}return a}return function(s,a){if(Array.isArray(s))return s;if(Symbol.iterator in Object(s))return n(s,a);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),p=300},function(n,s,a){"use strict";function e(n,s,a,e){var t=r(e,2),l=t[0],p=void 0===l?null:l,u=t[1],d=void 0===u?i:u,h=a.value;if(null===p&&(p=n.constructor.name+"."+s),"function"!=typeof h)throw new SyntaxError("@time can only be used on functions, not: "+h);return o({},a,{value:function(){var n=p+"-"+c;c++,d.time(n);try{return h.apply(this,arguments)}finally{d.timeEnd(n)}}})}function t(){for(var n=arguments.length,s=Array(n),t=0;t<n;t++)s[t]=arguments[t];return a.i(l.d)(e,s)}s.a=t;var l=a(16),o=Object.assign||function(n){for(var s=1;s<arguments.length;s++){var a=arguments[s];for(var e in a)Object.prototype.hasOwnProperty.call(a,e)&&(n[e]=a[e])}return n},r=function(){function n(n,s){var a=[],e=!0,t=!1,l=void 0;try{for(var o,r=n[Symbol.iterator]();!(e=(o=r.next()).done)&&(a.push(o.value),!s||a.length!==s);e=!0);}catch(n){t=!0,l=n}finally{try{!e&&r.return&&r.return()}finally{if(t)throw l}}return a}return function(s,a){if(Array.isArray(s))return s;if(Symbol.iterator in Object(s))return n(s,a);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),p={},i={time:console.time?console.time.bind(console):function(n){p[n]=new Date},timeEnd:console.timeEnd?console.timeEnd.bind(console):function(n){var s=new Date,a=s-p[n];delete p[n],console.log(n+": "+a+"ms")}},c=0},function(n,s,a){n.exports=a(68)()},function(n,s,a){"use strict";function e(n,s){return Object.prototype.hasOwnProperty.call(n,s)}n.exports=function(n,s,a,l){s=s||"&",a=a||"=";var o={};if("string"!=typeof n||0===n.length)return o;var r=/\+/g;n=n.split(s);var p=1e3;l&&"number"==typeof l.maxKeys&&(p=l.maxKeys);var i=n.length;p>0&&i>p&&(i=p);for(var c=0;c<i;++c){var u,d,h,g,m=n[c].replace(r,"%20"),b=m.indexOf(a);b>=0?(u=m.substr(0,b),d=m.substr(b+1)):(u=m,d=""),h=decodeURIComponent(u),g=decodeURIComponent(d),e(o,h)?t(o[h])?o[h].push(g):o[h]=[o[h],g]:o[h]=g}return o};var t=Array.isArray||function(n){return"[object Array]"===Object.prototype.toString.call(n)}},function(n,s,a){"use strict";function e(n,s){if(n.map)return n.map(s);for(var a=[],e=0;e<n.length;e++)a.push(s(n[e],e));return a}var t=function(n){switch(typeof n){case"string":return n;case"boolean":return n?"true":"false";case"number":return isFinite(n)?n:"";default:return""}};n.exports=function(n,s,a,r){return s=s||"&",a=a||"=",null===n&&(n=void 0),"object"==typeof n?e(o(n),function(o){var r=encodeURIComponent(t(o))+a;return l(n[o])?e(n[o],function(n){return r+encodeURIComponent(t(n))}).join(s):r+encodeURIComponent(t(n[o]))}).join(s):r?encodeURIComponent(t(r))+a+encodeURIComponent(t(n)):""};var l=Array.isArray||function(n){return"[object Array]"===Object.prototype.toString.call(n)},o=Object.keys||function(n){var s=[];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&s.push(a);return s}},function(n,s){n.exports=".footer-container {\n  background: #F8F8F8; }\n  .footer-container .footer-body {\n    max-width: 1280px;\n    margin: 0 auto;\n    box-sizing: border-box;\n    padding: 40px 40px 0; }\n    @media screen and (max-width: 640px) {\n      .footer-container .footer-body {\n        padding-left: 20px;\n        padding-right: 20px; } }\n    .footer-container .footer-body img {\n      width: 125px;\n      height: 26px;\n      margin-bottom: 28px;\n      margin-right: 20px;\n      vertical-align: middle; }\n    .footer-container .footer-body .apache {\n      width: 50px;\n      height: 50px; }\n    .footer-container .footer-body .cols-container .col {\n      display: inline-block;\n      box-sizing: border-box;\n      vertical-align: top; }\n    .footer-container .footer-body .cols-container .col-12 {\n      width: 50%;\n      padding-right: 125px; }\n    .footer-container .footer-body .cols-container .col-6 {\n      width: 25%; }\n    .footer-container .footer-body .cols-container h3 {\n      font-family: Avenir-Heavy;\n      font-size: 18px;\n      color: #333;\n      line-height: 18px; }\n    .footer-container .footer-body .cols-container p {\n      font-family: Avenir-Medium;\n      font-size: 12px;\n      color: #999;\n      line-height: 18px; }\n    .footer-container .footer-body .cols-container dl {\n      font-family: Avenir-Heavy;\n      line-height: 18px; }\n    .footer-container .footer-body .cols-container dt {\n      font-weight: bold;\n      font-size: 18px;\n      color: #333;\n      margin-bottom: 20px; }\n    .footer-container .footer-body .cols-container dd {\n      padding: 0;\n      margin: 0; }\n      .footer-container .footer-body .cols-container dd a {\n        text-decoration: none;\n        display: block;\n        font-size: 14px;\n        color: #999;\n        margin: 10px 0; }\n      .footer-container .footer-body .cols-container dd a:hover {\n        color: #2DACEC; }\n    .footer-container .footer-body .copyright {\n      border-top: 1px solid #ccc;\n      min-height: 60px;\n      line-height: 20px;\n      text-align: center;\n      font-family: Avenir-Medium;\n      font-size: 12px;\n      color: #999;\n      display: flex;\n      align-items: center; }\n      .footer-container .footer-body .copyright span {\n        display: inline-block;\n        margin: 0 auto; }\n\n@media screen and (max-width: 640px) {\n  .footer-container .footer-body .cols-container .col {\n    width: 100%;\n    text-align: center;\n    padding: 0; } }\n"},function(n,s){n.exports=".header-container {\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  z-index: 1000;\n  background-color: #fff; }\n  .header-container-primary {\n    background-color: transparent; }\n  .header-container-normal {\n    background-color: #fff;\n    box-shadow: 0 2px 10px 0 rgba(0, 0, 0, 0.08); }\n  .header-container .header-body {\n    max-width: 1280px;\n    margin: 0 auto;\n    height: 66px;\n    line-height: 66px; }\n    .header-container .header-body .logo {\n      margin-left: 40px;\n      width: 96px;\n      vertical-align: sub; }\n    .header-container .header-body .header-menu {\n      float: right; }\n      .header-container .header-body .header-menu .header-menu-toggle {\n        display: none;\n        width: 19px;\n        margin-right: 40px;\n        margin-top: 18px;\n        cursor: pointer; }\n    .header-container .header-body ul {\n      padding: 0;\n      margin: 0; }\n    .header-container .header-body li {\n      display: inline-block;\n      margin-right: 40px; }\n    .header-container .header-body .menu-item {\n      font-family: Avenir-Heavy;\n      font-size: 14px; }\n    .header-container .header-body .menu-item-primary a {\n      color: #fff;\n      opacity: 0.6;\n      font-family: Avenir-Medium; }\n    .header-container .header-body .menu-item-primary:hover a {\n      opacity: 1; }\n    .header-container .header-body .menu-item-primary-active a {\n      opacity: 1; }\n    .header-container .header-body .menu-item-normal a {\n      color: #333;\n      opacity: 0.6;\n      font-family: Avenir-Medium; }\n    .header-container .header-body .menu-item-normal:hover a {\n      opacity: 1; }\n    .header-container .header-body .menu-item-normal-active a {\n      opacity: 1; }\n    .header-container .header-body .language-switch {\n      float: right;\n      display: inline-block;\n      box-sizing: border-box;\n      width: 24px;\n      height: 24px;\n      line-height: 20px;\n      margin-top: 21px;\n      margin-right: 40px;\n      text-align: center;\n      border-radius: 2px;\n      cursor: pointer;\n      font-family: PingFangSC-Medium;\n      font-size: 14px;\n      opacity: 0.6; }\n      .header-container .header-body .language-switch:hover {\n        opacity: 1; }\n    .header-container .header-body .language-switch-primary {\n      border: 1px solid #FFF;\n      color: #FFF; }\n    .header-container .header-body .language-switch-normal {\n      border: 1px solid #333;\n      color: #333; }\n\n@media screen and (max-width: 640px) {\n  .header-container .header-body .logo {\n    margin-left: 20px; }\n  .header-container .header-body .language-switch {\n    margin-right: 20px; }\n  .header-container .header-body .header-menu ul {\n    display: none; }\n  .header-container .header-body .header-menu .header-menu-toggle {\n    display: inline-block;\n    margin-right: 20px; }\n  .header-container .header-body .header-menu-open ul {\n    background-color: #f8f8f8;\n    display: inline-block;\n    position: absolute;\n    right: 0;\n    top: 66px;\n    z-index: 100; }\n  .header-container .header-body .header-menu-open li {\n    width: 200px;\n    display: list-item;\n    padding-left: 30px;\n    list-style: none;\n    line-height: 40px;\n    margin-right: 0; }\n    .header-container .header-body .header-menu-open li a {\n      color: #333;\n      display: inline-block;\n      width: 100%; }\n    .header-container .header-body .header-menu-open li:hover {\n      background: #8755FF; }\n      .header-container .header-body .header-menu-open li:hover a {\n        color: #fff;\n        opactiy: 1; }\n  .header-container .header-body .header-menu-open .menu-item-primary-active, .header-container .header-body .header-menu-open .menu-item-normal-active {\n    background: #8755FF; }\n    .header-container .header-body .header-menu-open .menu-item-primary-active a, .header-container .header-body .header-menu-open .menu-item-normal-active a {\n      color: #fff;\n      opactiy: 1; } }\n"},function(n,s,a){"use strict";function e(n){return n&&n.__esModule?n:{default:n}}Object.defineProperty(s,"__esModule",{value:!0});var t=Object.assign||function(n){for(var s=1;s<arguments.length;s++){var a=arguments[s];for(var e in a)Object.prototype.hasOwnProperty.call(a,e)&&(n[e]=a[e])}return n},l=a(23),o=e(l),r=a(59),p=e(r),i=a(53),c=e(i),u={},d=void 0;s.default={unmount:function(){u={}},register:function(n,s){u[n]=s},unregister:function(n){delete u[n]},get:function(n){return u[n]||document.getElementById(n)||document.getElementsByName(n)[0]||document.getElementsByClassName(n)[0]},setActiveLink:function(n){return d=n},getActiveLink:function(){return d},scrollTo:function(n,s){var a=this.get(n);if(!a)return void console.warn("target Element not found");s=t({},s,{absolute:!1});var e=s.containerId,l=s.container,r=void 0;r=e?document.getElementById(e):l&&l.nodeType?l:document,c.default.registered.begin&&c.default.registered.begin(n,a),s.absolute=!0;var i=o.default.scrollOffset(r,a)+(s.offset||0);if(!s.smooth)return r===document?window.scrollTo(0,i):r.scrollTop=i,void(c.default.registered.end&&c.default.registered.end(n,a));p.default.animateTopScroll(i,s,n,a)}}},function(n,s,a){a(5)(a(47))},function(n,s,a){a(5)(a(48))},function(n,s,a){"use strict";Object.defineProperty(s,"__esModule",{value:!0});s.addPassiveEventListener=function(n,s,a){var e=function(){var n=!1;try{var s=Object.defineProperty({},"passive",{get:function(){n=!0}});window.addEventListener("test",null,s)}catch(n){}return n}();n.addEventListener(s,a,!!e&&{passive:!0})},s.removePassiveEventListener=function(n,s,a){n.removeEventListener(s,a)}},function(n,s,a){"use strict";Object.defineProperty(s,"__esModule",{value:!0});var e={registered:{},scrollEvent:{register:function(n,s){e.registered[n]=s},remove:function(n){e.registered[n]=null}}};s.default=e},function(n,s,a){"use strict";function e(n){return n&&n.__esModule?n:{default:n}}function t(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}function l(n,s){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!s||"object"!=typeof s&&"function"!=typeof s?n:s}function o(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function, not "+typeof s);n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),s&&(Object.setPrototypeOf?Object.setPrototypeOf(n,s):n.__proto__=s)}Object.defineProperty(s,"__esModule",{value:!0});var r=Object.assign||function(n){for(var s=1;s<arguments.length;s++){var a=arguments[s];for(var e in a)Object.prototype.hasOwnProperty.call(a,e)&&(n[e]=a[e])}return n},p=function(){function n(n,s){for(var a=0;a<s.length;a++){var e=s[a];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(n,e.key,e)}}return function(s,a,e){return a&&n(s.prototype,a),e&&n(s,e),s}}(),i=a(0),c=e(i),u=a(2),d=(e(u),a(23)),h=(e(d),a(55)),g=e(h),m=a(49),b=e(m),f=a(44),j=e(f),y=a(61),v=e(y),w={to:j.default.string.isRequired,containerId:j.default.string,container:j.default.object,activeClass:j.default.string,spy:j.default.bool,smooth:j.default.oneOfType([j.default.bool,j.default.string]),offset:j.default.number,delay:j.default.number,isDynamic:j.default.bool,onClick:j.default.func,duration:j.default.oneOfType([j.default.number,j.default.func]),absolute:j.default.bool,onSetActive:j.default.func,onSetInactive:j.default.func,ignoreCancelEvents:j.default.bool,hashSpy:j.default.bool};s.default=function(n,s){var a=s||b.default,e=function(s){function e(n){t(this,e);var s=l(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,n));return i.call(s),s.state={active:!1},s}return o(e,s),p(e,[{key:"getScrollSpyContainer",value:function(){var n=this.props.containerId,s=this.props.container;return n&&!s?document.getElementById(n):s&&s.nodeType?s:document}},{key:"componentDidMount",value:function(){if(this.props.spy||this.props.hashSpy){var n=this.getScrollSpyContainer();g.default.isMounted(n)||g.default.mount(n),this.props.hashSpy&&(v.default.isMounted()||v.default.mount(a),v.default.mapContainer(this.props.to,n)),g.default.addSpyHandler(this.spyHandler,n),this.setState({container:n})}}},{key:"componentWillUnmount",value:function(){g.default.unmount(this.stateHandler,this.spyHandler)}},{key:"render",value:function(){var s="";s=this.state&&this.state.active?((this.props.className||"")+" "+(this.props.activeClass||"active")).trim():this.props.className;var a=r({},this.props);for(var e in w)a.hasOwnProperty(e)&&delete a[e];return a.className=s,a.onClick=this.handleClick,c.default.createElement(n,a)}}]),e}(c.default.PureComponent),i=function(){var n=this;this.scrollTo=function(s,e){a.scrollTo(s,r({},n.state,e))},this.handleClick=function(s){n.props.onClick&&n.props.onClick(s),s.stopPropagation&&s.stopPropagation(),s.preventDefault&&s.preventDefault(),n.scrollTo(n.props.to,n.props)},this.spyHandler=function(s){var e=n.getScrollSpyContainer();if(!v.default.isMounted()||v.default.isInitialized()){var t=n.props.to,l=null,o=0,r=0,p=0;if(e.getBoundingClientRect){p=e.getBoundingClientRect().top}if(!l||n.props.isDynamic){if(!(l=a.get(t)))return;var i=l.getBoundingClientRect();o=i.top-p+s,r=o+i.height}var c=s-n.props.offset,u=c>=Math.floor(o)&&c<Math.floor(r),d=c<Math.floor(o)||c>=Math.floor(r),h=a.getActiveLink();d&&(t===h&&a.setActiveLink(void 0),n.props.hashSpy&&v.default.getHash()===t&&v.default.changeHash(),n.props.spy&&n.state.active&&(n.setState({active:!1}),n.props.onSetInactive&&n.props.onSetInactive(t,l))),!u||h===t&&!1!==n.state.active||(a.setActiveLink(t),n.props.hashSpy&&v.default.changeHash(t),n.props.spy&&(n.setState({active:!0}),n.props.onSetActive&&n.props.onSetActive(t,l)))}}};return e.propTypes=w,e.defaultProps={offset:0},e}},function(n,s,a){"use strict";Object.defineProperty(s,"__esModule",{value:!0});var e=a(65),t=function(n){return n&&n.__esModule?n:{default:n}}(e),l=a(52),o=function(n){return(0,t.default)(n,66)},r={spyCallbacks:[],spySetState:[],scrollSpyContainers:[],mount:function(n){if(n){var s=o(function(s){r.scrollHandler(n)});r.scrollSpyContainers.push(n),(0,l.addPassiveEventListener)(n,"scroll",s)}},isMounted:function(n){return-1!==r.scrollSpyContainers.indexOf(n)},currentPositionY:function(n){if(n===document){var s=void 0!==window.pageXOffset,a="CSS1Compat"===(document.compatMode||"");return s?window.pageYOffset:a?document.documentElement.scrollTop:document.body.scrollTop}return n.scrollTop},scrollHandler:function(n){(r.scrollSpyContainers[r.scrollSpyContainers.indexOf(n)].spyCallbacks||[]).forEach(function(s){return s(r.currentPositionY(n))})},addStateHandler:function(n){r.spySetState.push(n)},addSpyHandler:function(n,s){var a=r.scrollSpyContainers[r.scrollSpyContainers.indexOf(s)];a.spyCallbacks||(a.spyCallbacks=[]),a.spyCallbacks.push(n),n(r.currentPositionY(s))},updateStates:function(){r.spySetState.forEach(function(n){return n()})},unmount:function(n,s){r.scrollSpyContainers.forEach(function(n){return n.spyCallbacks&&n.spyCallbacks.length&&n.spyCallbacks.splice(n.spyCallbacks.indexOf(s),1)}),r.spySetState&&r.spySetState.length&&r.spySetState.splice(r.spySetState.indexOf(n),1),document.removeEventListener("scroll",r.scrollHandler)},update:function(){return r.scrollSpyContainers.forEach(function(n){return r.scrollHandler(n)})}};s.default=r},,,,function(n,s,a){"use strict";function e(n){return n&&n.__esModule?n:{default:n}}Object.defineProperty(s,"__esModule",{value:!0});var t=Object.assign||function(n){for(var s=1;s<arguments.length;s++){var a=arguments[s];for(var e in a)Object.prototype.hasOwnProperty.call(a,e)&&(n[e]=a[e])}return n},l=a(23),o=(e(l),a(76)),r=e(o),p=a(75),i=e(p),c=a(53),u=e(c),d=function(n){return r.default[n.smooth]||r.default.defaultEasing},h=function(n){return"function"==typeof n?n:function(){return n}},g=function(){if("undefined"!=typeof window)return window.requestAnimationFrame||window.webkitRequestAnimationFrame},m=function(){return g()||function(n,s,a){window.setTimeout(n,a||1e3/60,(new Date).getTime())}}(),b=function(){return{currentPositionY:0,startPositionY:0,targetPositionY:0,progress:0,duration:0,cancel:!1,target:null,containerElement:null,to:null,start:null,deltaTop:null,percent:null,delayTimeout:null}},f=function(n){var s=n.data.containerElement;if(s&&s!==document&&s!==document.body)return s.scrollTop;var a=void 0!==window.pageXOffset,e="CSS1Compat"===(document.compatMode||"");return a?window.pageYOffset:e?document.documentElement.scrollTop:document.body.scrollTop},j=function(n){var s=n.data.containerElement;if(s&&s!==document&&s!==document.body)return Math.max(s.scrollHeight,s.offsetHeight,s.clientHeight);var a=document.body,e=document.documentElement;return Math.max(a.scrollHeight,a.offsetHeight,e.clientHeight,e.scrollHeight,e.offsetHeight)},y=function n(s,a,e){var t=a.data;if(!a.ignoreCancelEvents&&t.cancel)return void(u.default.registered.end&&u.default.registered.end(t.to,t.target,t.currentPositionY));if(t.deltaTop=Math.round(t.targetPositionY-t.startPositionY),null===t.start&&(t.start=e),t.progress=e-t.start,t.percent=t.progress>=t.duration?1:s(t.progress/t.duration),t.currentPositionY=t.startPositionY+Math.ceil(t.deltaTop*t.percent),t.containerElement&&t.containerElement!==document&&t.containerElement!==document.body?t.containerElement.scrollTop=t.currentPositionY:window.scrollTo(0,t.currentPositionY),t.percent<1){var l=n.bind(null,s,a);return void m.call(window,l)}u.default.registered.end&&u.default.registered.end(t.to,t.target,t.currentPositionY)},v=function(n){n.data.containerElement=n?n.containerId?document.getElementById(n.containerId):n.container&&n.container.nodeType?n.container:document:null},w=function(n,s,a,e){if(s.data=s.data||b(),window.clearTimeout(s.data.delayTimeout),i.default.subscribe(function(){s.data.cancel=!0}),v(s),s.data.start=null,s.data.cancel=!1,s.data.startPositionY=f(s),s.data.targetPositionY=s.absolute?n:n+s.data.startPositionY,s.data.startPositionY===s.data.targetPositionY)return void(u.default.registered.end&&u.default.registered.end(s.data.to,s.data.target,s.data.currentPositionY));s.data.deltaTop=Math.round(s.data.targetPositionY-s.data.startPositionY),s.data.duration=h(s.duration)(s.data.deltaTop),s.data.duration=isNaN(parseFloat(s.data.duration))?1e3:parseFloat(s.data.duration),s.data.to=a,s.data.target=e;var t=d(s),l=y.bind(null,t,s);if(s&&s.delay>0)return void(s.data.delayTimeout=window.setTimeout(function(){m.call(window,l)},s.delay));m.call(window,l)},k=function(n){return n=t({},n),n.data=n.data||b(),n.absolute=!0,n},S=function(n){w(0,k(n))},x=function(n,s){w(n,k(s))},C=function(n){n=k(n),v(n),w(j(n),n)},E=function(n,s){s=k(s),v(s),w(f(s)+n,s)};s.default={animateTopScroll:w,getAnimationType:d,scrollToTop:S,scrollToBottom:C,scrollTo:x,scrollMore:E}},function(n,s,a){"use strict";function e(n){return n&&n.__esModule?n:{default:n}}function t(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}function l(n,s){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!s||"object"!=typeof s&&"function"!=typeof s?n:s}function o(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function, not "+typeof s);n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),s&&(Object.setPrototypeOf?Object.setPrototypeOf(n,s):n.__proto__=s)}Object.defineProperty(s,"__esModule",{value:!0});var r=Object.assign||function(n){for(var s=1;s<arguments.length;s++){var a=arguments[s];for(var e in a)Object.prototype.hasOwnProperty.call(a,e)&&(n[e]=a[e])}return n},p=function(){function n(n,s){for(var a=0;a<s.length;a++){var e=s[a];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(n,e.key,e)}}return function(s,a,e){return a&&n(s.prototype,a),e&&n(s,e),s}}(),i=a(0),c=e(i),u=a(2),d=(e(u),a(49)),h=e(d),g=a(44),m=e(g);s.default=function(n){var s=function(s){function a(n){t(this,a);var s=l(this,(a.__proto__||Object.getPrototypeOf(a)).call(this,n));return s.childBindings={domNode:null},s}return o(a,s),p(a,[{key:"componentDidMount",value:function(){if("undefined"==typeof window)return!1;this.registerElems(this.props.name)}},{key:"componentWillReceiveProps",value:function(n){this.props.name!==n.name&&this.registerElems(n.name)}},{key:"componentWillUnmount",value:function(){if("undefined"==typeof window)return!1;h.default.unregister(this.props.name)}},{key:"registerElems",value:function(n){h.default.register(n,this.childBindings.domNode)}},{key:"render",value:function(){return c.default.createElement(n,r({},this.props,{parentBindings:this.childBindings}))}}]),a}(c.default.Component);return s.propTypes={name:m.default.string,id:m.default.string},s}},function(n,s,a){"use strict";Object.defineProperty(s,"__esModule",{value:!0});var e=(a(52),a(23)),t=function(n){return n&&n.__esModule?n:{default:n}}(e),l={mountFlag:!1,initialized:!1,scroller:null,containers:{},mount:function(n){this.scroller=n,this.handleHashChange=this.handleHashChange.bind(this),window.addEventListener("hashchange",this.handleHashChange),this.initStateFromHash(),this.mountFlag=!0},mapContainer:function(n,s){this.containers[n]=s},isMounted:function(){return this.mountFlag},isInitialized:function(){return this.initialized},initStateFromHash:function(){var n=this,s=this.getHash();s?window.setTimeout(function(){n.scrollTo(s,!0),n.initialized=!0},10):this.initialized=!0},scrollTo:function(n,s){var a=this.scroller;if(a.get(n)&&(s||n!==a.getActiveLink())){var e=this.containers[n]||document;a.scrollTo(n,{container:e})}},getHash:function(){return t.default.getHash()},changeHash:function(n){this.isInitialized()&&t.default.pushHash(n)},handleHashChange:function(){this.scrollTo(this.getHash())},unmount:function(){this.scroller=null,this.containers=null,window.removeEventListener("hashchange",this.handleHashChange)}};s.default=l},,function(n,s,a){"use strict";function e(n){return function(){return n}}var t=function(){};t.thatReturns=e,t.thatReturnsFalse=e(!1),t.thatReturnsTrue=e(!0),t.thatReturnsNull=e(null),t.thatReturnsThis=function(){return this},t.thatReturnsArgument=function(n){return n},n.exports=t},function(n,s,a){"use strict";function e(n,s,a,e,l,o,r,p){if(t(s),!n){var i;if(void 0===s)i=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[a,e,l,o,r,p],u=0;i=new Error(s.replace(/%s/g,function(){return c[u++]})),i.name="Invariant Violation"}throw i.framesToPop=1,i}}var t=function(n){};n.exports=e},function(n,s,a){(function(s){function a(n,s,a){function e(s){var a=m,e=b;return m=b=void 0,x=s,j=n.apply(e,a)}function l(n){return x=n,y=setTimeout(c,s),C?e(n):j}function o(n){var a=n-v,e=n-x,t=s-a;return E?k(t,f-e):t}function i(n){var a=n-v,e=n-x;return void 0===v||a>=s||a<0||E&&e>=f}function c(){var n=S();if(i(n))return u(n);y=setTimeout(c,o(n))}function u(n){return y=void 0,I&&m?e(n):(m=b=void 0,j)}function d(){void 0!==y&&clearTimeout(y),x=0,m=v=b=y=void 0}function h(){return void 0===y?j:u(S())}function g(){var n=S(),a=i(n);if(m=arguments,b=this,v=n,a){if(void 0===y)return l(v);if(E)return y=setTimeout(c,s),e(v)}return void 0===y&&(y=setTimeout(c,s)),j}var m,b,f,j,y,v,x=0,C=!1,E=!1,I=!0;if("function"!=typeof n)throw new TypeError(p);return s=r(s)||0,t(a)&&(C=!!a.leading,E="maxWait"in a,f=E?w(r(a.maxWait)||0,s):f,I="trailing"in a?!!a.trailing:I),g.cancel=d,g.flush=h,g}function e(n,s,e){var l=!0,o=!0;if("function"!=typeof n)throw new TypeError(p);return t(e)&&(l="leading"in e?!!e.leading:l,o="trailing"in e?!!e.trailing:o),a(n,s,{leading:l,maxWait:s,trailing:o})}function t(n){var s=typeof n;return!!n&&("object"==s||"function"==s)}function l(n){return!!n&&"object"==typeof n}function o(n){return"symbol"==typeof n||l(n)&&v.call(n)==c}function r(n){if("number"==typeof n)return n;if(o(n))return i;if(t(n)){var s="function"==typeof n.valueOf?n.valueOf():n;n=t(s)?s+"":s}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(u,"");var a=h.test(n);return a||g.test(n)?m(n.slice(2),a?2:8):d.test(n)?i:+n}var p="Expected a function",i=NaN,c="[object Symbol]",u=/^\s+|\s+$/g,d=/^[-+]0x[0-9a-f]+$/i,h=/^0b[01]+$/i,g=/^0o[0-7]+$/i,m=parseInt,b="object"==typeof s&&s&&s.Object===Object&&s,f="object"==typeof self&&self&&self.Object===Object&&self,j=b||f||Function("return this")(),y=Object.prototype,v=y.toString,w=Math.max,k=Math.min,S=function(){return j.Date.now()};n.exports=e}).call(s,a(77))},function(n,s,a){(function(n){function a(n,s){for(var a=0,e=n.length-1;e>=0;e--){var t=n[e];"."===t?n.splice(e,1):".."===t?(n.splice(e,1),a++):a&&(n.splice(e,1),a--)}if(s)for(;a--;a)n.unshift("..");return n}function e(n,s){if(n.filter)return n.filter(s);for(var a=[],e=0;e<n.length;e++)s(n[e],e,n)&&a.push(n[e]);return a}var t=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,l=function(n){return t.exec(n).slice(1)};s.resolve=function(){for(var s="",t=!1,l=arguments.length-1;l>=-1&&!t;l--){var o=l>=0?arguments[l]:n.cwd();if("string"!=typeof o)throw new TypeError("Arguments to path.resolve must be strings");o&&(s=o+"/"+s,t="/"===o.charAt(0))}return s=a(e(s.split("/"),function(n){return!!n}),!t).join("/"),(t?"/":"")+s||"."},s.normalize=function(n){var t=s.isAbsolute(n),l="/"===o(n,-1);return n=a(e(n.split("/"),function(n){return!!n}),!t).join("/"),n||t||(n="."),n&&l&&(n+="/"),(t?"/":"")+n},s.isAbsolute=function(n){return"/"===n.charAt(0)},s.join=function(){var n=Array.prototype.slice.call(arguments,0);return s.normalize(e(n,function(n,s){if("string"!=typeof n)throw new TypeError("Arguments to path.join must be strings");return n}).join("/"))},s.relative=function(n,a){function e(n){for(var s=0;s<n.length&&""===n[s];s++);for(var a=n.length-1;a>=0&&""===n[a];a--);return s>a?[]:n.slice(s,a-s+1)}n=s.resolve(n).substr(1),a=s.resolve(a).substr(1);for(var t=e(n.split("/")),l=e(a.split("/")),o=Math.min(t.length,l.length),r=o,p=0;p<o;p++)if(t[p]!==l[p]){r=p;break}for(var i=[],p=r;p<t.length;p++)i.push("..");return i=i.concat(l.slice(r)),i.join("/")},s.sep="/",s.delimiter=":",s.dirname=function(n){var s=l(n),a=s[0],e=s[1];return a||e?(e&&(e=e.substr(0,e.length-1)),a+e):"."},s.basename=function(n,s){var a=l(n)[2];return s&&a.substr(-1*s.length)===s&&(a=a.substr(0,a.length-s.length)),a},s.extname=function(n){return l(n)[3]};var o="b"==="ab".substr(-1)?function(n,s,a){return n.substr(s,a)}:function(n,s,a){return s<0&&(s=n.length+s),n.substr(s,a)}}).call(s,a(67))},function(n,s){function a(){throw new Error("setTimeout has not been defined")}function e(){throw new Error("clearTimeout has not been defined")}function t(n){if(c===setTimeout)return setTimeout(n,0);if((c===a||!c)&&setTimeout)return c=setTimeout,setTimeout(n,0);try{return c(n,0)}catch(s){try{return c.call(null,n,0)}catch(s){return c.call(this,n,0)}}}function l(n){if(u===clearTimeout)return clearTimeout(n);if((u===e||!u)&&clearTimeout)return u=clearTimeout,clearTimeout(n);try{return u(n)}catch(s){try{return u.call(null,n)}catch(s){return u.call(this,n)}}}function o(){m&&h&&(m=!1,h.length?g=h.concat(g):b=-1,g.length&&r())}function r(){if(!m){var n=t(o);m=!0;for(var s=g.length;s;){for(h=g,g=[];++b<s;)h&&h[b].run();b=-1,s=g.length}h=null,m=!1,l(n)}}function p(n,s){this.fun=n,this.array=s}function i(){}var c,u,d=n.exports={};!function(){try{c="function"==typeof setTimeout?setTimeout:a}catch(n){c=a}try{u="function"==typeof clearTimeout?clearTimeout:e}catch(n){u=e}}();var h,g=[],m=!1,b=-1;d.nextTick=function(n){var s=new Array(arguments.length-1);if(arguments.length>1)for(var a=1;a<arguments.length;a++)s[a-1]=arguments[a];g.push(new p(n,s)),1!==g.length||m||t(r)},p.prototype.run=function(){this.fun.apply(null,this.array)},d.title="browser",d.browser=!0,d.env={},d.argv=[],d.version="",d.versions={},d.on=i,d.addListener=i,d.once=i,d.off=i,d.removeListener=i,d.removeAllListeners=i,d.emit=i,d.prependListener=i,d.prependOnceListener=i,d.listeners=function(n){return[]},d.binding=function(n){throw new Error("process.binding is not supported")},d.cwd=function(){return"/"},d.chdir=function(n){throw new Error("process.chdir is not supported")},d.umask=function(){return 0}},function(n,s,a){"use strict";var e=a(63),t=a(64),l=a(69);n.exports=function(){function n(n,s,a,e,o,r){r!==l&&t(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function s(){return n}n.isRequired=n;var a={array:n,bool:n,func:n,number:n,object:n,string:n,symbol:n,any:n,arrayOf:s,element:n,instanceOf:s,node:n,objectOf:s,oneOf:s,oneOfType:s,shape:s,exact:s};return a.checkPropTypes=e,a.PropTypes=a,a}},function(n,s,a){"use strict";n.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(n,s,a){"use strict";function e(n){return n&&n.__esModule?n:{default:n}}function t(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}function l(n,s){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!s||"object"!=typeof s&&"function"!=typeof s?n:s}function o(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function, not "+typeof s);n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),s&&(Object.setPrototypeOf?Object.setPrototypeOf(n,s):n.__proto__=s)}Object.defineProperty(s,"__esModule",{value:!0});var r=function(){function n(n,s){for(var a=0;a<s.length;a++){var e=s[a];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(n,e.key,e)}}return function(s,a,e){return a&&n(s.prototype,a),e&&n(s,e),s}}(),p=a(0),i=e(p),c=a(54),u=e(c),d=function(n){function s(){return t(this,s),l(this,(s.__proto__||Object.getPrototypeOf(s)).apply(this,arguments))}return o(s,n),r(s,[{key:"render",value:function(){return i.default.createElement("input",this.props,this.props.children)}}]),s}(i.default.Component);s.default=(0,u.default)(d)},function(n,s,a){"use strict";function e(n){return n&&n.__esModule?n:{default:n}}function t(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}function l(n,s){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!s||"object"!=typeof s&&"function"!=typeof s?n:s}function o(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function, not "+typeof s);n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),s&&(Object.setPrototypeOf?Object.setPrototypeOf(n,s):n.__proto__=s)}Object.defineProperty(s,"__esModule",{value:!0});var r=Object.assign||function(n){for(var s=1;s<arguments.length;s++){var a=arguments[s];for(var e in a)Object.prototype.hasOwnProperty.call(a,e)&&(n[e]=a[e])}return n},p=function(){function n(n,s){for(var a=0;a<s.length;a++){var e=s[a];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(n,e.key,e)}}return function(s,a,e){return a&&n(s.prototype,a),e&&n(s,e),s}}(),i=a(0),c=e(i),u=a(60),d=e(u),h=a(44),g=e(h),m=function(n){function s(){return t(this,s),l(this,(s.__proto__||Object.getPrototypeOf(s)).apply(this,arguments))}return o(s,n),p(s,[{key:"render",value:function(){var n=this,s=r({},this.props);return s.parentBindings&&delete s.parentBindings,c.default.createElement("div",r({},s,{ref:function(s){n.props.parentBindings.domNode=s}}),this.props.children)}}]),s}(c.default.Component);m.propTypes={name:g.default.string,id:g.default.string},s.default=(0,d.default)(m)},function(n,s,a){"use strict";function e(n){return n&&n.__esModule?n:{default:n}}function t(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}function l(n,s){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!s||"object"!=typeof s&&"function"!=typeof s?n:s}function o(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function, not "+typeof s);n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),s&&(Object.setPrototypeOf?Object.setPrototypeOf(n,s):n.__proto__=s)}Object.defineProperty(s,"__esModule",{value:!0});var r=a(0),p=e(r),i=a(54),c=e(i),u=function(n){function s(){var n,a,e,o;t(this,s);for(var r=arguments.length,i=Array(r),c=0;c<r;c++)i[c]=arguments[c];return a=e=l(this,(n=s.__proto__||Object.getPrototypeOf(s)).call.apply(n,[this].concat(i))),e.render=function(){return p.default.createElement("a",e.props,e.props.children)},o=a,l(e,o)}return o(s,n),s}(p.default.Component);s.default=(0,c.default)(u)},function(n,s,a){"use strict";function e(n){return n&&n.__esModule?n:{default:n}}Object.defineProperty(s,"__esModule",{value:!0}),s.Helpers=s.ScrollElement=s.ScrollLink=s.animateScroll=s.scrollSpy=s.Events=s.scroller=s.Element=s.Button=s.Link=void 0;var t=a(72),l=e(t),o=a(70),r=e(o),p=a(71),i=e(p),c=a(49),u=e(c),d=a(53),h=e(d),g=a(55),m=e(g),b=a(59),f=e(b),j=a(54),y=e(j),v=a(60),w=e(v),k=a(74),S=e(k);s.Link=l.default,s.Button=r.default,s.Element=i.default,s.scroller=u.default,s.Events=h.default,s.scrollSpy=m.default,s.animateScroll=f.default,s.ScrollLink=y.default,s.ScrollElement=w.default,s.Helpers=S.default,s.default={Link:l.default,Button:r.default,Element:i.default,scroller:u.default,Events:h.default,scrollSpy:m.default,animateScroll:f.default,ScrollLink:y.default,ScrollElement:w.default,Helpers:S.default}},function(n,s,a){"use strict";function e(n,s){if(!(n instanceof s))throw new TypeError("Cannot call a class as a function")}function t(n,s){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!s||"object"!=typeof s&&"function"!=typeof s?n:s}function l(n,s){if("function"!=typeof s&&null!==s)throw new TypeError("Super expression must either be null or a function, not "+typeof s);n.prototype=Object.create(s&&s.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),s&&(Object.setPrototypeOf?Object.setPrototypeOf(n,s):n.__proto__=s)}var o=Object.assign||function(n){for(var s=1;s<arguments.length;s++){var a=arguments[s];for(var e in a)Object.prototype.hasOwnProperty.call(a,e)&&(n[e]=a[e])}return n},r=function(){function n(n,s){for(var a=0;a<s.length;a++){var e=s[a];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(n,e.key,e)}}return function(s,a,e){return a&&n(s.prototype,a),e&&n(s,e),s}}(),p=a(0),i=(a(2),a(23),a(55)),c=a(49),u=a(44),d=a(61),h={to:u.string.isRequired,containerId:u.string,container:u.object,activeClass:u.string,spy:u.bool,smooth:u.oneOfType([u.bool,u.string]),offset:u.number,delay:u.number,isDynamic:u.bool,onClick:u.func,duration:u.oneOfType([u.number,u.func]),absolute:u.bool,onSetActive:u.func,onSetInactive:u.func,ignoreCancelEvents:u.bool,hashSpy:u.bool},g={Scroll:function(n,s){console.warn("Helpers.Scroll is deprecated since v1.7.0");var a=s||c,u=function(s){function c(n){e(this,c);var s=t(this,(c.__proto__||Object.getPrototypeOf(c)).call(this,n));return g.call(s),s.state={active:!1},s}return l(c,s),r(c,[{key:"getScrollSpyContainer",value:function(){var n=this.props.containerId,s=this.props.container;return n?document.getElementById(n):s&&s.nodeType?s:document}},{key:"componentDidMount",value:function(){if(this.props.spy||this.props.hashSpy){var n=this.getScrollSpyContainer();i.isMounted(n)||i.mount(n),this.props.hashSpy&&(d.isMounted()||d.mount(a),d.mapContainer(this.props.to,n)),this.props.spy&&i.addStateHandler(this.stateHandler),i.addSpyHandler(this.spyHandler,n),this.setState({container:n})}}},{key:"componentWillUnmount",value:function(){i.unmount(this.stateHandler,this.spyHandler)}},{key:"render",value:function(){var s="";s=this.state&&this.state.active?((this.props.className||"")+" "+(this.props.activeClass||"active")).trim():this.props.className;var a=o({},this.props);for(var e in h)a.hasOwnProperty(e)&&delete a[e];return a.className=s,a.onClick=this.handleClick,p.createElement(n,a)}}]),c}(p.Component),g=function(){var n=this;this.scrollTo=function(s,e){a.scrollTo(s,o({},n.state,e))},this.handleClick=function(s){n.props.onClick&&n.props.onClick(s),s.stopPropagation&&s.stopPropagation(),s.preventDefault&&s.preventDefault(),n.scrollTo(n.props.to,n.props)},this.stateHandler=function(){a.getActiveLink()!==n.props.to&&(null!==n.state&&n.state.active&&n.props.onSetInactive&&n.props.onSetInactive(),n.setState({active:!1}))},this.spyHandler=function(s){var e=n.getScrollSpyContainer();if(!d.isMounted()||d.isInitialized()){var t=n.props.to,l=null,o=0,r=0,p=0;if(e.getBoundingClientRect){p=e.getBoundingClientRect().top}if(!l||n.props.isDynamic){if(!(l=a.get(t)))return;var c=l.getBoundingClientRect();o=c.top-p+s,r=o+c.height}var u=s-n.props.offset,h=u>=Math.floor(o)&&u<Math.floor(r),g=u<Math.floor(o)||u>=Math.floor(r),m=a.getActiveLink();return g?(t===m&&a.setActiveLink(void 0),n.props.hashSpy&&d.getHash()===t&&d.changeHash(),n.props.spy&&n.state.active&&(n.setState({active:!1}),n.props.onSetInactive&&n.props.onSetInactive()),i.updateStates()):h&&m!==t?(a.setActiveLink(t),n.props.hashSpy&&d.changeHash(t),n.props.spy&&(n.setState({active:!0}),n.props.onSetActive&&n.props.onSetActive(t)),i.updateStates()):void 0}}};return u.propTypes=h,u.defaultProps={offset:0},u},Element:function(n){console.warn("Helpers.Element is deprecated since v1.7.0");var s=function(s){function a(n){e(this,a);var s=t(this,(a.__proto__||Object.getPrototypeOf(a)).call(this,n));return s.childBindings={domNode:null},s}return l(a,s),r(a,[{key:"componentDidMount",value:function(){if("undefined"==typeof window)return!1;this.registerElems(this.props.name)}},{key:"componentWillReceiveProps",value:function(n){this.props.name!==n.name&&this.registerElems(n.name)}},{key:"componentWillUnmount",value:function(){if("undefined"==typeof window)return!1;c.unregister(this.props.name)}},{key:"registerElems",value:function(n){c.register(n,this.childBindings.domNode)}},{key:"render",value:function(){return p.createElement(n,o({},this.props,{parentBindings:this.childBindings}))}}]),a}(p.Component);return s.propTypes={name:u.string,id:u.string},s}};n.exports=g},function(n,s,a){"use strict";Object.defineProperty(s,"__esModule",{value:!0});var e=a(52),t=["mousedown","mousewheel","touchmove","keydown"];s.default={subscribe:function(n){return"undefined"!=typeof document&&t.forEach(function(s){return(0,e.addPassiveEventListener)(document,s,n)})}}},function(n,s,a){"use strict";Object.defineProperty(s,"__esModule",{value:!0}),s.default={defaultEasing:function(n){return n<.5?Math.pow(2*n,2)/2:1-Math.pow(2*(1-n),2)/2},linear:function(n){return n},easeInQuad:function(n){return n*n},easeOutQuad:function(n){return n*(2-n)},easeInOutQuad:function(n){return n<.5?2*n*n:(4-2*n)*n-1},easeInCubic:function(n){return n*n*n},easeOutCubic:function(n){return--n*n*n+1},easeInOutCubic:function(n){return n<.5?4*n*n*n:(n-1)*(2*n-2)*(2*n-2)+1},easeInQuart:function(n){return n*n*n*n},easeOutQuart:function(n){return 1- --n*n*n*n},easeInOutQuart:function(n){return n<.5?8*n*n*n*n:1-8*--n*n*n*n},easeInQuint:function(n){return n*n*n*n*n},easeOutQuint:function(n){return 1+--n*n*n*n*n},easeInOutQuint:function(n){return n<.5?16*n*n*n*n*n:1+16*--n*n*n*n*n}}},function(n,s){var a;a=function(){return this}();try{a=a||Function("return this")()||(0,eval)("this")}catch(n){"object"==typeof window&&(a=window)}n.exports=a},function(n,s,a){"use strict";n.exports={"zh-cn":[{filename:"dubbo-101.md",__html:'<h1>第一个 Dubbo 应用</h1>\n<h2>Java RMI 简介</h2>\n<p>Java RMI （Remote Method Invocation）- 远程方法调用，能够让客户端像使用本地调用一样调用服务端 Java 虚拟机中的对象方法。RMI 是面向对象语言领域对 RPC （Remote Procedure Call）的完善，用户无需依靠 IDL 的帮助来完成分布式调用，而是通过依赖接口这种更简单自然的方式。</p>\n<h3>Java RMI 工作原理</h3>\n<p>一个典型的 RMI 调用如下图所示：</p>\n<ol>\n<li>服务端向 RMI 注册服务绑定自己的地址，</li>\n<li>客户端通过 RMI 注册服务获取目标地址，</li>\n<li>客户端调用本地的 Stub 对象上的方法，和调用本地对象上的方法一致，</li>\n<li>本地存根对象将调用信息打包，通过网络发送到服务端，</li>\n<li>服务端的 Skeleton 对象收到网络请求之后，将调用信息解包，</li>\n<li>然后找到真正的服务对象发起调用，并将返回结果打包通过网络发送回客户端。</li>\n</ol>\n<p><img src="../../img/blog/rmi-flow.png" alt="RMI Flow"></p>\n<p>(来源：<a href="https://www.cs.rutgers.edu/~pxk/417/notes/images/rpc-rmi_flow.png">https://www.cs.rutgers.edu/~pxk/417/notes/images/rpc-rmi_flow.png</a>)</p>\n<h3>Java RMI 基本概念</h3>\n<p>Java RMI 是 Java 领域创建分布式应用的技术基石。后续的 EJB 技术，以及现代的分布式服务框架，其中的基本理念依旧是 Java RMI 的延续。在 RMI 调用中，有以下几个核心的概念：</p>\n<ol>\n<li>\n<p>通过<strong>接口</strong>进行远程调用</p>\n</li>\n<li>\n<p>通过客户端的 <strong>Stub 对象</strong>和服务端的 <strong>Skeleton 对象</strong>的帮助将远程调用伪装成本地调用</p>\n</li>\n<li>\n<p>通过 <strong>RMI 注册服务</strong>完成服务的注册和发现</p>\n</li>\n</ol>\n<p>对于第一点，客户端需要依赖接口，而服务端需要提供该接口的实现。</p>\n<p>对于第二点，在 J2SE 1.5 版本之前需要通过 rmic 预先编译好客户端的 Stub 对象和服务端的 Skeleton 对象。在之后的版本中，不再需要事先生成 Stub 和 Skeleton 对象。</p>\n<p>下面通过示例代码简单的展示 RMI 中的服务注册和发现</p>\n<h4>服务端的服务注册</h4>\n<pre><code class="language-java">Hello obj = <span class="hljs-keyword">new</span> HelloImpl(); <span class="hljs-comment">// #1</span>\nHello stub = (Hello) UnicastRemoteObject.exportObject(obj, <span class="hljs-number">0</span>); <span class="hljs-comment">// #2</span>\nRegistry registry = LocateRegistry.createRegistry(<span class="hljs-number">1099</span>); <span class="hljs-comment">// #3</span>\nregistry.rebind(<span class="hljs-string">"Hello"</span>, stub); <span class="hljs-comment">// #4</span>\n</code></pre>\n<p>说明：</p>\n<ol>\n<li>初始化服务对象实例，</li>\n<li>通过 <em>UnicastRemoteObject.exportObject</em> 生成可以与服务端通讯的 Stub 对象，</li>\n<li>创建一个本地的 RMI 注册服务，监听端口为 1099。该注册服务运行在服务端，也可以单独启动一个注册服务的进程，</li>\n<li>将 Stub 对象绑定到注册服务上，这样，客户端可以通过 <em>Hello</em> 这个名字查找到该远程对象。</li>\n</ol>\n<h4>客户端的服务发现</h4>\n<pre><code class="language-java">Registry registry = LocateRegistry.getRegistry(); <span class="hljs-comment">// #1</span>\nHello stub = (Hello) registry.lookup(<span class="hljs-string">"Hello"</span>); <span class="hljs-comment">// #2</span>\nString response = stub.sayHello(); <span class="hljs-comment">// #3</span>\n</code></pre>\n<p>说明：</p>\n<ol>\n<li>获取注册服务实例，在本例中，由于没有传入任何参数，假定要获取的注册服务实例部署在本机，并监听在 1099 端口上，</li>\n<li>从注册服务中查找服务名为 <em>Hello</em> 的远程对象，</li>\n<li>通过获取的 Stub 对象发起一次 RMI 调用并获得结果。</li>\n</ol>\n<p>理解 RMI 的工作原理和基本概念，对掌握现代分布式服务框架很有帮助，建议进一步的阅读 RMI 官方教材 <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。</p>\n<h2>Dubbo 基本概念</h2>\n<p>现代的分布式服务框架的基本概念与 RMI 是类似的，同样是使用 Java 的 Interface 作为服务契约，通过注册中心来完成服务的注册和发现，远程通讯的细节也是通过代理类来屏蔽。具体来说，Dubbo 在工作时有以下四个角色参与：</p>\n<ol>\n<li>服务提供者 - 启动时在指定端口上暴露服务，并将服务地址和端口注册到注册中心上</li>\n<li>服务消费者 - 启动时向注册中心订阅自己感兴趣的服务，以便获得服务提供方的地址列表</li>\n<li>注册中心 - 负责服务的注册和发现，负责保存服务提供方上报的地址信息，并向服务消费方推送</li>\n<li>监控中心 - 负责收集服务提供方和消费方的运行状态，比如服务调用次数、延迟等，用于监控</li>\n<li>运行容器 - 负责服务提供方的初始化、加载以及运行的生命周期管理</li>\n</ol>\n<p><img src="../../img/blog/dubbo-architecture.png" alt="dubbo-architecture"></p>\n<p><strong>部署阶段</strong></p>\n<ul>\n<li>服务提供者在指定端口暴露服务，并向注册中心注册服务信息。</li>\n<li>服务消费者向注册中心发起服务地址列表的订阅。</li>\n</ul>\n<p><strong>运行阶段</strong></p>\n<ul>\n<li>注册中心向服务消费者推送地址列表信息。</li>\n<li>服务消费者收到地址列表后，从其中选取一个向目标服务发起调用。</li>\n<li>调用过程服务消费者和服务提供者的运行状态上报给监控中心。</li>\n</ul>\n<h2>基于 API 的 Dubbo 应用</h2>\n<p>Dubbo 的应用一般都是通过 Spring 来组装的。为了快速获得一个可以工作的 Dubbo 应用，这里的示例摒弃了复杂的配置，而改用面向 Dubbo API 的方式来构建服务提供者和消费者，另外，注册中心和监控中心在本示例中也不需要安装和配置。</p>\n<p>在生产环境，Dubbo 的服务需要一个分布式的服务注册中心与之配合，比如，ZooKeeper。为了方便开发，Dubbo 提供了直连<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>以及组播<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>两种方式，从而避免额外搭建注册中心的工作。在本例中，将使用组播的方式来完成服务的注册和发现。</p>\n<h3>定义服务契约</h3>\n<pre><code class="language-java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">GreetingsService</span> </span>{\n    <span class="hljs-function">String <span class="hljs-title">sayHi</span><span class="hljs-params">(String name)</span></span>; <span class="hljs-comment">// #1</span>\n}\n</code></pre>\n<p><strong>说明</strong>：</p>\n<ol>\n<li>定义了一个简单的服务契约 <em>GreetingsService</em>，其中只有一个方法 <em>sayHi</em> 可供调用，入参是 <em>String</em> 类型，返回值也是 <em>String</em> 类型。</li>\n</ol>\n<h3>提供契约的实现</h3>\n<pre><code class="language-java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GreetingsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">GreetingsService</span> </span>{ <span class="hljs-comment">// #1</span>\n    <span class="hljs-meta">@Override</span>\n    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHi</span><span class="hljs-params">(String name)</span> </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-string">"hi, "</span> + name; <span class="hljs-comment">// #2</span>\n    }\n}\n</code></pre>\n<p><strong>说明</strong>：</p>\n<ol>\n<li>服务提供者需要实现服务契约 <em>GreetingsService</em> 接口。</li>\n<li>该实现简单的返回一个欢迎信息，如果入参是 <em>dubbo</em>，则返回 <em>hi, dubbo</em>。</li>\n</ol>\n<h3>实现 Dubbo 服务提供方</h3>\n<pre><code class="language-java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>{\n    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>{\n        ServiceConfig&lt;GreetingsService&gt; service = <span class="hljs-keyword">new</span> ServiceConfig&lt;&gt;(); <span class="hljs-comment">// #1</span>\n        service.setApplication(<span class="hljs-keyword">new</span> ApplicationConfig(<span class="hljs-string">"first-dubbo-provider"</span>)); <span class="hljs-comment">// #2</span>\n        service.setRegistry(<span class="hljs-keyword">new</span> RegistryConfig(<span class="hljs-string">"multicast://224.5.6.7:1234"</span>)); <span class="hljs-comment">// #3</span>\n        service.setInterface(GreetingsService.class); <span class="hljs-comment">// #4</span>\n        service.setRef(<span class="hljs-keyword">new</span> GreetingsServiceImpl()); <span class="hljs-comment">// #5</span>\n        service.export(); <span class="hljs-comment">// #6</span>\n        System.in.read(); <span class="hljs-comment">// #7</span>\n    }\n}\n</code></pre>\n<p><strong>说明</strong>：</p>\n<ol>\n<li>创建一个 <em>ServiceConfig</em> 的实例，泛型参数信息是服务接口类型，即 <em>GreetingsService</em>。</li>\n<li>生成一个 <em>AplicatonConfig</em> 的实例，并将其装配进 <em>ServiceConfig</em>。</li>\n<li>生成一个 <em>RegistryConfig</em> 实例，并将其装配进 <em>ServiceConfig</em>，这里使用的是组播方式，参数是 <code>multicast://224.5.6.7:1234</code>。合法的组播地址范围为：<em>224.0.0.0 - 239.255.255.255</em></li>\n<li>将服务契约 <em>GreetingsService</em> 装配进 <em>ServiceConfig</em>。</li>\n<li>将服务提供者提供的实现 <em>GreetingsServiceImpl</em> 的实例装配进 <em>ServiceConfig</em>。</li>\n<li><em>ServiceConfig</em> 已经具备足够的信息，开始对外暴露服务，默认监听端口是 <em>20880</em>。</li>\n<li>为了防止服务端退出，按任意键或者 <em>ctrl-c</em> 退出。</li>\n</ol>\n<h3>实现 Dubbo 服务调用方</h3>\n<pre><code class="language-java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>{\n    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{\n        ReferenceConfig&lt;GreetingsService&gt; reference = <span class="hljs-keyword">new</span> ReferenceConfig&lt;&gt;(); <span class="hljs-comment">// #1</span>\n        reference.setApplication(<span class="hljs-keyword">new</span> ApplicationConfig(<span class="hljs-string">"first-dubbo-client"</span>)); <span class="hljs-comment">// #2</span>\n        reference.setRegistry(<span class="hljs-keyword">new</span> RegistryConfig(<span class="hljs-string">"multicast://224.5.6.7:1234"</span>)); <span class="hljs-comment">// #3</span>\n        reference.setInterface(GreetingsService.class); <span class="hljs-comment">// #4</span>\n        GreetingsService greetingsService = reference.get(); <span class="hljs-comment">// #5</span>\n        String message = greetingsService.sayHi(<span class="hljs-string">"dubbo"</span>); <span class="hljs-comment">// #6</span>\n        System.out.println(message); <span class="hljs-comment">// #7</span>\n    }\n}\n</code></pre>\n<p><strong>说明</strong>：</p>\n<ol>\n<li>创建一个 <em>ReferenceConfig</em> 的实例，同样，泛型参数信息是服务接口类型，即 <em>GreetingService</em>。</li>\n<li>生成一个 <em>AplicatonConfig</em> 的实例，并将其装配进 <em>ReferenceConfig</em>。</li>\n<li>生成一个 <em>RegistryConfig</em> 实例，并将其装配进 <em>ReferenceConfig</em>，注意这里的组播地址信息需要与服务提供方的相同。</li>\n<li>将服务契约 <em>GreetingsService</em> 装配进 <em>ReferenceConfig</em>。</li>\n<li>从 <em>ReferenceConfig</em> 中获取到 <em>GreetingService</em> 的代理。</li>\n<li>通过 <em>GreetingService</em> 的代理发起远程调用，传入的参数为 <em>dubbo</em>。</li>\n<li>打印返回结果 <em>hi, dubbo</em>。</li>\n</ol>\n<h3>运行</h3>\n<p>完整的示例在 <a href="https://github.com/dubbo/dubbo-samples/tree/master/dubbo-samples-api">https://github.com/dubbo/dubbo-samples/tree/master/dubbo-samples-api</a> 上提供。在完整的示例中，由于配置了 <em>exec-maven-plugin</em>，可以很方便的在命令行下通过 maven 的方式执行。当然，您也可以在 IDE 里直接执行，但是需要注意的是，由于使用了组播的方式来发现服务，运行时需要指定 <em>-Djava.net.preferIPv4Stack=true</em>。</p>\n<h4>构建示例</h4>\n<p>通过以下的命令来同步示例代码并完成构建：</p>\n<ol>\n<li>同步代码：git clone <a href="https://github.com/dubbo/dubbo-samples.git">https://github.com/dubbo/dubbo-samples.git</a></li>\n<li>构建：mvn clean package</li>\n</ol>\n<pre><code class="language-bash">$ git <span class="hljs-built_in">clone</span> https://github.com/dubbo/dubbo-samples.git\n$ <span class="hljs-built_in">cd</span> dubbo-samples/dubbo-samples-api/\n$ mvn clean package\nINFO] Scanning <span class="hljs-keyword">for</span> projects...\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Building dubbo-samples-api 1.0-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO]\n[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ dubbo-samples-api ---\n...\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 2.182 s\n[INFO] Finished at: 2018-05-28T14:56:08+08:00\n[INFO] Final Memory: 20M/353M\n[INFO] ------------------------------------------------------------------------\n</code></pre>\n<p>当看到 <em>BUILD SUCCESS</em> 的时候表明构建完成，下面就可以开始进入运行阶段了。</p>\n<h4>运行服务端</h4>\n<p>通过运行以下的 maven 命令来启动服务提供者：</p>\n<pre><code class="language-bash">$ mvn -Djava.net.preferIPv4Stack=<span class="hljs-literal">true</span> -Dexec.mainClass=com.alibaba.dubbo.samples.server.Application <span class="hljs-built_in">exec</span>:java\n[INFO] Scanning <span class="hljs-keyword">for</span> projects...\n[INFO]                                                                         \n[INFO] ------------------------------------------------------------------------\n[INFO] Building dubbo-samples-api 1.0-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO] \n[INFO] --- <span class="hljs-built_in">exec</span>-maven-plugin:1.6.0:java (default-cli) @ dubbo-samples-api ---\nlog4j:WARN No appenders could be found <span class="hljs-keyword">for</span> logger (com.alibaba.dubbo.common.logger.LoggerFactory).\nlog4j:WARN Please initialize the log4j system properly.\nlog4j:WARN See http://logging.apache.org/log4j/1.2/faq.html<span class="hljs-comment">#noconfig for more info.</span>\nfirst-dubbo-provider is running.\n</code></pre>\n<p>当 <em>first-dubbo-provider is running.</em> 出现时，代表服务提供者已经启动就绪，等待客户端的调用。</p>\n<h4>运行客户端</h4>\n<p>通过运行以下的 maven 命令来调用服务：</p>\n<pre><code class="language-bash">$ mvn -Djava.net.preferIPv4Stack=<span class="hljs-literal">true</span> -Dexec.mainClass=com.alibaba.dubbo.samples.client.Application <span class="hljs-built_in">exec</span>:java\n[INFO] Scanning <span class="hljs-keyword">for</span> projects...\n[INFO]                                                                         \n[INFO] ------------------------------------------------------------------------\n[INFO] Building dubbo-samples-api 1.0-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO] \n[INFO] --- <span class="hljs-built_in">exec</span>-maven-plugin:1.6.0:java (default-cli) @ dubbo-samples-api ---\nlog4j:WARN No appenders could be found <span class="hljs-keyword">for</span> logger (com.alibaba.dubbo.common.logger.LoggerFactory).\nlog4j:WARN Please initialize the log4j system properly.\nlog4j:WARN See http://logging.apache.org/log4j/1.2/faq.html<span class="hljs-comment">#noconfig for more info.</span>\nhi, dubbo\n</code></pre>\n<p>可以看到， <em>hi, dubbo</em> 是从服务提供者返回的执行结果。</p>\n<h2>快速生成 Dubbo 应用</h2>\n<p>Dubbo 还提供了一个公共服务快速搭建基于 Spring Boot 的 Dubbo 应用。访问 <a href="http://start.dubbo.io">http://start.dubbo.io</a> 并按照下图所示来生成示例工程：</p>\n<p><img src="../../img/blog/dubbo-initializr.png" alt="dubbo initializr"></p>\n<p><strong>说明</strong>：</p>\n<ol>\n<li>在 <em>Group</em> 中提供 maven groupId，默认值是 <em>com.example</em>。</li>\n<li>在 <em>Artifact</em> 中提供 maven artifactId，默认值是 <em>demo</em>。</li>\n<li>在 <em>DubboServiceName</em> 中提供服务名，默认值是 <em>com.example.HelloService</em>。</li>\n<li>在 <em>DubboServiceVersion</em> 中提供服务的版本，默认值是 <em>1.0.0</em>。</li>\n<li>在 <em>Client/Server</em> 中选取本次构建的工程是服务提供者 (Server) 还是服务消费者 (Client)，默认值是 <em>server</em>。</li>\n<li>使用 <em>embeddedZookeeper</em> 作为服务注册发现，默认为勾选。</li>\n<li>是否激活 qos 端口，默认为不勾选，如果勾选可以通过 <em>22222</em> 端口访问。</li>\n<li>点击 <em>Generate Project</em> 即可下载生成好的工程。</li>\n</ol>\n<p>在本例中展示的是服务提供者，同样的，通过在生成界面选取 <em>client</em> 来生成对应的服务消费者。</p>\n<h3>运行</h3>\n<p>用 IDE 打开生成好的工程，可以发现应用是一个典型的 Spring Boot 应用。程序的入口如下所示：</p>\n<pre><code class="language-java"><span class="hljs-meta">@SpringBootApplication</span>\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoApplication</span> </span>{\n\t<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{\n\t\t<span class="hljs-keyword">new</span> EmbeddedZooKeeper(<span class="hljs-number">2181</span>, <span class="hljs-keyword">false</span>).start();  <span class="hljs-comment">// #1</span>\n\t\tSpringApplication.run(DemoApplication.class, args); <span class="hljs-comment">// #2</span>\n\t}\n}\n</code></pre>\n<p><strong>说明</strong>：</p>\n<ol>\n<li>在 <em>2181</em> 端口上启动嵌入式 <em>ZooKeeper</em>。</li>\n<li>启动 <em>Spring Boot</em> 上下文。</li>\n</ol>\n<p>可以直接在 IDE 中运行，输出结果如下：</p>\n<pre><code class="language-bash">2018-05-28 16:59:38.072  INFO 59943 --- [           main] a.b.d.c.e.WelcomeLogoApplicationListener : \n\n  ████████▄  ███    █▄  ▀█████████▄  ▀█████████▄   ▄██████▄  \n  ███   ▀███ ███    ███   ███    ███   ███    ███ ███    ███ \n  ███    ███ ███    ███   ███    ███   ███    ███ ███    ███ \n  ███    ███ ███    ███  ▄███▄▄▄██▀   ▄███▄▄▄██▀  ███    ███ \n  ███    ███ ███    ███ ▀▀███▀▀▀██▄  ▀▀███▀▀▀██▄  ███    ███ \n  ███    ███ ███    ███   ███    ██▄   ███    ██▄ ███    ███ \n  ███   ▄███ ███    ███   ███    ███   ███    ███ ███    ███ \n  ████████▀  ████████▀  ▄█████████▀  ▄█████████▀   ▀██████▀  \n                                                             \n\n :: Dubbo Spring Boot (v0.1.0) : https://github.com/dubbo/dubbo-spring-boot-project\n :: Dubbo (v2.0.1) : https://github.com/alibaba/dubbo\n :: Google group : http://groups.google.com/group/dubbo\n\n2018-05-28 16:59:38.079  INFO 59943 --- [           main] e.OverrideDubboConfigApplicationListener : Dubbo Config was overridden by externalized configuration {dubbo.application.name=dubbo-demo-server, dubbo.application.qosAcceptForeignIp=<span class="hljs-literal">false</span>, dubbo.application.qosEnable=<span class="hljs-literal">true</span>, dubbo.application.qosPort=22222, dubbo.registry.address=zookeeper://localhost:2181?client=curator, dubbo.registry.id=my-registry, dubbo.scan.basePackages=com.example} <span class="hljs-comment">#1</span>\n\n...\n\n2018-05-28 16:59:39.624  INFO 59943 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication <span class="hljs-keyword">in</span> 1.746 seconds (JVM running <span class="hljs-keyword">for</span> 2.963)\n</code></pre>\n<p><strong>说明</strong>：</p>\n<ol>\n<li>输出中打印的以 <em>dubbo.</em> 开头的配置信息，定义在 <em>main/resources/application.properties</em> 中。</li>\n</ol>\n<h3>通过 Telnet 管理服务</h3>\n<p>生成工程的时候如果选择了激活 <em>qos</em> 的话，就可以通过 <em>telnet</em> 或者 <em>nc</em> 来管理服务、查看服务状态。</p>\n<pre><code class="language-bash">$ telnet localhost 22222\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is <span class="hljs-string">\'^]\'</span>.\n  ████████▄  ███    █▄  ▀█████████▄  ▀█████████▄   ▄██████▄  \n  ███   ▀███ ███    ███   ███    ███   ███    ███ ███    ███ \n  ███    ███ ███    ███   ███    ███   ███    ███ ███    ███ \n  ███    ███ ███    ███  ▄███▄▄▄██▀   ▄███▄▄▄██▀  ███    ███ \n  ███    ███ ███    ███ ▀▀███▀▀▀██▄  ▀▀███▀▀▀██▄  ███    ███ \n  ███    ███ ███    ███   ███    ██▄   ███    ██▄ ███    ███ \n  ███   ▄███ ███    ███   ███    ███   ███    ███ ███    ███ \n  ████████▀  ████████▀  ▄█████████▀  ▄█████████▀   ▀██████▀  \n                                                             \n\ndubbo&gt;\ndubbo&gt;ls\nAs Provider side:\n+------------------------------+---+\n|     Provider Service Name    |PUB|\n+------------------------------+---+\n|com.example.HelloService:1.0.0| Y |\n+------------------------------+---+\nAs Consumer side:\n+---------------------+---+\n|Consumer Service Name|NUM|\n+---------------------+---+\n</code></pre>\n<p>目前 <em>qos</em> 支持以下几个命令，更详细的信息请查阅官方文档<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>：</p>\n<ul>\n<li><em>ls</em>：列出消费者、提供者信息</li>\n<li><em>online</em>：上线服务</li>\n<li><em>offline</em>：下线服务</li>\n<li><em>help</em>：联机帮助</li>\n</ul>\n<h2>总结</h2>\n<p>在本文中，从 RMI 开始，介绍了 Java 领域分布式调用的基本概念，也就是基于接口编程、通过代理将远程调用伪装成本地、通过注册中心完成服务的注册和发现。</p>\n<p>然后为了简单起见，使用简单的组播注册方式和直接面向 Dubbo API 编程的方式介绍了如何开发一个 Dubbo 的完整应用。深入的了解 <em>ServiceConfig</em> 和 <em>ReferenceConfig</em> 的用法，对于进一步的使用 Spring XML 配置、乃至 Spring Boot 的编程方式有这很大的帮助。</p>\n<p>最后，简单的介绍了如何通过 Dubbo 团队提供的公共服务 <a href="http://start.dubbo.io">start.dubbo.io</a> 快速搭建基于 Spring Boot 的 Dubbo 应用，并通过 <em>qos</em> 来做 Dubbo 服务的简单运维。</p>\n<hr class="footnotes-sep">\n<section class="footnotes">\n<ol class="footnotes-list">\n<li id="fn1" class="footnote-item"><p><a href="https://docs.oracle.com/javase/6/docs/technotes/guides/rmi/hello/hello-world.html">Getting Started Using JavaTM RMI</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn2" class="footnote-item"><p><a href="http://dubbo.apache.org/books/dubbo-user-book/demos/explicit-target.html">直连提供者</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn3" class="footnote-item"><p><a href="http://dubbo.apache.org/books/dubbo-user-book/references/registry/multicast.html">Multicast 注册中心</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn4" class="footnote-item"><p><a href="http://dubbo.apache.org/books/dubbo-user-book/references/qos.html">在线运维命令</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p>\n</li>\n</ol>\n</section>\n'},{filename:"dubbo-basic-usage-dubbo-provider-configuration.md",__html:'<h2>Dubbo基本用法-Dubbo Provider配置</h2>\n<h1>Dubbo基本用法</h1>\n<p>本章节主要讲述如何配置dubbo，按照配置方式上分，可以分为：XML配置，properties方式配置，注解方式配置，API调用方式配置。\n按照功能角度进行划分，可以分为Dubbo Provider和Dubbo Consumer。接下来章节中，分别对dubbo provider和Dubbo consumer进行讲解。</p>\n<h2>Dubbo Provider配置</h2>\n<h3>Provider 配置详解</h3>\n<p>配置Dubbo Provider有4种方式：XML配置，properties方式配置，API调用方式配置，注解方式配置。</p>\n<h4>XML配置</h4>\n<h6>最简单的配置的样例：</h6>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n    xmlns:dubbo=&quot;http://dubbo.apache.org/schema/dubbo&quot;\n    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;&gt;  \n    &lt;dubbo:application name=&quot;hello-world-app&quot; /&gt;  \n    &lt;dubbo:registry address=&quot;multicast://224.5.6.7:1234&quot; /&gt;  \n    &lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot; /&gt;  \n    &lt;dubbo:service interface=&quot;com.alibaba.dubbo.demo.DemoService&quot; ref=&quot;demoServiceLocal&quot; /&gt;  \n    &lt;dubbo:reference id=&quot;demoServiceRemote&quot; interface=&quot;com.alibaba.dubbo.demo.DemoService&quot; /&gt;  \n&lt;/beans&gt;\n</code></pre>\n<p>上面样例中，注意下dubbo schema的写法：</p>\n<pre><code>&lt;beans xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n       xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot;\n       xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd\n       http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&gt;\n</code></pre>\n<h6>支持的配置标签</h6>\n<table>\n<thead>\n<tr>\n<th>标签</th>\n<th>用途</th>\n<th style="text-align:left">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&lt;dubbo:service/&gt;</td>\n<td>服务配置</td>\n<td style="text-align:left">用于暴露一个服务，定义服务的元信息，一个服务可以用多个协议暴露，一个服务也可以注册到多个注册中心</td>\n</tr>\n<tr>\n<td>&lt;dubbo:reference/&gt;</td>\n<td>引用配置</td>\n<td style="text-align:left">用于创建一个远程服务代理，一个引用可以指向多个注册中心</td>\n</tr>\n<tr>\n<td>&lt;dubbo:protocol/&gt;</td>\n<td>协议配置</td>\n<td style="text-align:left">用于配置提供服务的协议信息，协议由提供方指定，消费方被动接受</td>\n</tr>\n<tr>\n<td>&lt;dubbo:application/&gt;</td>\n<td>应用配置</td>\n<td style="text-align:left">用于配置当前应用信息，不管该应用是提供者还是消费者</td>\n</tr>\n<tr>\n<td>&lt;dubbo:module/&gt;</td>\n<td>模块配置</td>\n<td style="text-align:left">用于配置当前模块信息，可选</td>\n</tr>\n<tr>\n<td>&lt;dubbo:registry/&gt;</td>\n<td>注册中心配置</td>\n<td style="text-align:left">用于配置连接注册中心相关信息</td>\n</tr>\n<tr>\n<td>&lt;dubbo:monitor/&gt;</td>\n<td>监控中心配置</td>\n<td style="text-align:left">用于配置连接监控中心相关信息，可选</td>\n</tr>\n<tr>\n<td>&lt;dubbo:provider/&gt;</td>\n<td>提供方配置</td>\n<td style="text-align:left">当 ProtocolConfig 和 ServiceConfig 某属性没有配置时，采用此缺省值，可选</td>\n</tr>\n<tr>\n<td>&lt;dubbo:consumer/&gt;</td>\n<td>消费方配置</td>\n<td style="text-align:left">当 ReferenceConfig 某属性没有配置时，采用此缺省值，可选</td>\n</tr>\n<tr>\n<td>&lt;dubbo:method/&gt;</td>\n<td>方法配置</td>\n<td style="text-align:left">用于 ServiceConfig 和 ReferenceConfig 指定方法级的配置信息</td>\n</tr>\n<tr>\n<td>&lt;dubbo:argument/&gt;</td>\n<td>参数配置</td>\n<td style="text-align:left">用于指定方法参数配置</td>\n</tr>\n</tbody>\n</table>\n<p><img src="https://cdn.yuque.com/lark/0/2018/png/15841/1527849348155-8423d401-9ea4-4dc6-8720-d9e3d90963b6.png" alt="undefined"></p>\n <center>配置之间关系图</center>\n<h6>配置项详解</h6>\n<ul>\n<li>\n<p>&lt;dubbo:application name=&quot;hello-world-app&quot; /&gt;<br>\n用于指定应用名，这里需要保证应用名唯一，这个应用名在后续的console admin中可以在列表中显示，方便管理。</p>\n</li>\n<li>\n<p>&lt;dubbo:registry address=&quot;multicast://224.5.6.7:1234&quot; /&gt;<br>\n注册中心配置，和服务发现的具体机制有关系。可以是zookeeper地质，也可以eureka地质。上面这个是广播地址，在本地服务调用的测试过程中非常方便。</p>\n</li>\n<li>\n<p>&lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot; /&gt;<br>\n这里是传输的协议和默认端口，一般不需要更改。</p>\n</li>\n</ul>\n<blockquote>\n<p>接下来重点讲解下&lt;dubbo:service/&gt;的配置。</p>\n</blockquote>\n<ul>\n<li>&lt;dubbo:service/&gt;支持的主要属性列表：\n| 属性名 | 说明 |\n| -------- | ----- |\n| version | 版本号 |\n| scope | 服务可见性, 值为：local 或者 remote，默认为remote |\n| actives | 最大的激活的请求数 |\n| async | 方法调用是否异步，默认为false |\n| cache | 服务缓存，可选值：lru/threadlocal/jcache |\n| callbacks | callback实例的限制 |\n| generic | 泛化调用，可以绕过 |\n| class | Service的实现的类名 |\n| connections | 这个服务里的连接数 |\n| delay | 发布服务延迟的毫秒数 |\n| executes | 服务执行的请求上限 |\n| retries | 超时重试次数 |\n| timeout | 调用超时时间 |</li>\n</ul>\n<p>其他配置属性请参考xsd：<a href="http://dubbo.apache.org/schema/dubbo/dubbo.xsd">http://dubbo.apache.org/schema/dubbo/dubbo.xsd</a></p>\n<ul>\n<li>&lt;dubbo:method/&gt;作为&lt;dubbo:service/&gt;的子元素，它可以针对方法进行配置。比较常用的属性有：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>executes</td>\n<td>服务执行的请求上限</td>\n</tr>\n<tr>\n<td>retries</td>\n<td>超时重试次数</td>\n</tr>\n<tr>\n<td>timeout</td>\n<td>调用超时时间</td>\n</tr>\n</tbody>\n</table>\n<p>其他属性，可以参考上面的xsd。</p>\n<h6>配置的覆盖关系</h6>\n<p><img src="https://cdn.yuque.com/lark/0/2018/png/15841/1527849374313-94a5ea24-0e72-4d83-871b-e0e95eab646a.png" alt="undefined"></p>\n<center>配置的覆盖关系图</center>\n<p>这里的覆盖关系包含了Provider和Consumer两端的配置，如果对consumer有疑问，可以参考后一章节的consumer章节之后再来理解。</p>\n<h4>dubbo.properties方式配置</h4>\n<blockquote>\n<p>如果公共配置很简单，没有多注册中心，多协议等情况，或者想多个 Spring 容器想共享配置，可以使用 dubbo.properties 作为缺省配置。</p>\n</blockquote>\n<p>Dubbo 将自动加载 classpath 根目录下的 dubbo.properties，可以通过JVM启动参数 -Ddubbo.properties.file=xxx.properties 改变缺省配置位置。</p>\n<h6>dubbo.properties配置样例</h6>\n<pre><code># 应用名\ndubbo.application.name=dubbodemo-provider\n# 注册中心地址\ndubbo.registry.address=zookeeper://localhost:2181\n# 广播的注册中心样例\n#dubbo.registry.address=multicast://224.5.6.7:1234\n# 调用协议地址\ndubbo.protocol.name=dubbo\ndubbo.protocol.port=28080\n</code></pre>\n<h6>映射规则</h6>\n<p>将 XML 配置的标签名，加属性名，用点分隔，多个属性拆成多行</p>\n<ul>\n<li>比如：dubbo.application.name=foo等价于&lt;dubbo:application name=&quot;foo&quot; /&gt;</li>\n<li>比如：dubbo.registry.address=10.20.153.10:9090等价于&lt;dubbo:registry address=&quot;10.20.153.10:9090&quot; /&gt;</li>\n</ul>\n<p>如果 XML 有多行同名标签配置，可用 id 号区分，如果没有 id 号将对所有同名标签生效</p>\n<ul>\n<li>比如：dubbo.protocol.rmi.port=1234等价于&lt;dubbo:protocol id=&quot;rmi&quot; name=&quot;rmi&quot; port=&quot;1099&quot; /&gt; 2</li>\n<li>比如：dubbo.registry.china.address=10.20.153.10:9090等价于&lt;dubbo:registry id=&quot;china&quot; address=&quot;10.20.153.10:9090&quot; /&gt;</li>\n</ul>\n<h6>覆盖策略</h6>\n<p><img src="https://cdn.yuque.com/lark/0/2018/png/15841/1527849393591-2c3de248-1b3d-47d3-bd10-8b415e9fcd39.png" alt="undefined"></p>\n<ul>\n<li>JVM 启动 -D 参数优先，这样可以使用户在部署和启动时进行参数重写，比如在启动时需改变协议的端口。</li>\n<li>XML 次之，如果在 XML 中有配置，则 dubbo.properties 中的相应配置项无效。</li>\n<li>Properties 最后，相当于缺省值，只有 XML 没有配置时，dubbo.properties 的相应配置项才会生效，通常用于共享公共配置，比如应用名。</li>\n</ul>\n<blockquote>\n<p>注意：</p>\n</blockquote>\n<ol>\n<li>如果 classpath 根目录下存在多个 dubbo.properties，比如多个 jar 包中有 dubbo.properties，Dubbo 会任意加载，并打印 Error 日志，后续可能改为抛异常。 ↩</li>\n<li>协议的 id 没配时，缺省使用协议名作为 id</li>\n</ol>\n<h4>annotation</h4>\n<h6>Service注解暴露服务</h6>\n<pre><code>import com.alibaba.dubbo.config.annotation.Service;\n\n@Service(timeout = 5000)\npublic class AnnotateServiceImpl implements AnnotateService { \n    // ...\n}\n</code></pre>\n<h6>javaconfig形式配置公共模块</h6>\n<pre><code>@Configuration\npublic class DubboConfiguration {\n\n    @Bean\n    public ApplicationConfig applicationConfig() {\n        ApplicationConfig applicationConfig = new ApplicationConfig();\n        applicationConfig.setName(&quot;provider-test&quot;);\n        return applicationConfig;\n    }\n\n    @Bean\n    public RegistryConfig registryConfig() {\n        RegistryConfig registryConfig = new RegistryConfig();\n        registryConfig.setAddress(&quot;zookeeper://127.0.0.1:2181&quot;);\n        registryConfig.setClient(&quot;curator&quot;);\n        return registryConfig;\n    }\n}\n</code></pre>\n<p>这种方式的配置和前面用xml配置的方式是一样的效果。</p>\n<h6>指定dubbo扫描路径</h6>\n<pre><code>@SpringBootApplication\n@DubboComponentScan(basePackages = &quot;com.alibaba.dubbo.test.service.impl&quot;)\npublic class ProviderTestApp {\n    // ...\n}\n</code></pre>\n<p>或者使用spring bean xml配置方式：</p>\n<pre><code>&lt;dubbo:annotation package=&quot;com.chanshuyi.service.impl&quot; /&gt;\n</code></pre>\n<h4>api直接触发</h4>\n<pre><code>import com.alibaba.dubbo.rpc.config.ApplicationConfig;\nimport com.alibaba.dubbo.rpc.config.RegistryConfig;\nimport com.alibaba.dubbo.rpc.config.ProviderConfig;\nimport com.alibaba.dubbo.rpc.config.ServiceConfig;\nimport com.xxx.XxxService;\nimport com.xxx.XxxServiceImpl;\n\n// 服务实现\nXxxService xxxService = new XxxServiceImpl();\n\n// 当前应用配置\nApplicationConfig application = new ApplicationConfig();\napplication.setName(&quot;xxx&quot;);\n\n// 连接注册中心配置\nRegistryConfig registry = new RegistryConfig();\nregistry.setAddress(&quot;10.20.130.230:9090&quot;);\nregistry.setUsername(&quot;aaa&quot;);\nregistry.setPassword(&quot;bbb&quot;);\n\n// 服务提供者协议配置\nProtocolConfig protocol = new ProtocolConfig();\nprotocol.setName(&quot;dubbo&quot;);\nprotocol.setPort(12345);\nprotocol.setThreads(200);\n\n// 注意：ServiceConfig为重对象，内部封装了与注册中心的连接，以及开启服务端口\n\n// 服务提供者暴露服务配置\nServiceConfig&lt;XxxService&gt; service = new ServiceConfig&lt;XxxService&gt;(); // 此实例很重，封装了与注册中心的连接，请自行缓存，否则可能造成内存和连接泄漏\nservice.setApplication(application);\nservice.setRegistry(registry); // 多个注册中心可以用setRegistries()\nservice.setProtocol(protocol); // 多个协议可以用setProtocols()\nservice.setInterface(XxxService.class);\nservice.setRef(xxxService);\nservice.setVersion(&quot;1.0.0&quot;);\n\n// 暴露及注册服务\nservice.export();\n</code></pre>\n<p>一般在spring应用中，不推荐使用这种方式。 具体的含义这里不做解释，可以通过github查看源码。</p>\n<h3>Provider 接口和实现</h3>\n<p>上面章节更多从配置角度出发，接下来通过一个完整的例子，来讲解下dubbo provider的完整使用。</p>\n<p>这个例子中只有一个服务UserReadService，有一个方法 getUserById。 需要将这个服务通过Dubbo暴露给远程的服务。具体的步骤如下：</p>\n<p>1.创建工程\n如果本来已经有工程，可以忽略。创建一个spring boot工程，可以通过 <a href="https://start.spring.io/">https://start.spring.io/</a> 创建。\n2.定义接口\n定义接口：UserReadService</p>\n<pre><code>public interface UserReadService{\npublic User getUserById(Long userId);\n}\n</code></pre>\n<p>这个接口一般来说会放到独立的jar包里，作为client包。 其他应用要消费这个服务的时候，一般来说需要应用引用这个client包。(除了泛化调用)\n3.实现接口\n实现UserReadService, 当前实现部署在Provider的应用中。</p>\n<pre><code>public UserReadServiceImpl implements UserReadService{\n    public User getUserById(Long userId){\n        return xxx;\n    }\n}\n</code></pre>\n<p>4.Dubbo配置</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n    xmlns:dubbo=&quot;http://dubbo.apache.org/schema/dubbo&quot;\n    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;&gt;  \n    &lt;dubbo:application name=&quot;hello-world-app&quot; /&gt;  \n    &lt;dubbo:registry address=&quot;multicast://224.5.6.7:1234&quot; /&gt;  \n    &lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot; /&gt;  \n    &lt;bean id=&quot;userReadService&quot; class=&quot;com.package.UserReadServiceImpl&quot;/&gt;\n    &lt;dubbo:service interface=&quot;com.package.UserReadService&quot; ref=&quot;userReadService&quot; /&gt;  \n&lt;/beans&gt;\n</code></pre>\n<p>Dubbo配置的其他方式可以参考上一章节的相关配置，或者使用集成dubbo spring boot starter方式。</p>\n'},{filename:"dubbo-invoke.md",__html:'<h1>Dubbo 关于同步/异步调用的几种方式</h1>\n<p>我们知道，Dubbo 缺省协议采用单一长连接，底层实现是 Netty 的 NIO 异步通讯机制；基于这种机制，Dubbo 实现了以下几种调用方式：</p>\n<ul>\n<li>同步调用</li>\n<li>异步调用</li>\n<li>参数回调</li>\n<li>事件通知</li>\n</ul>\n<h3>同步调用</h3>\n<p>同步调用是一种阻塞式的调用方式，即 Consumer 端代码一直阻塞等待，直到 Provider 端返回为止；</p>\n<p>通常，一个典型的同步调用过程如下：</p>\n<ol>\n<li>Consumer 业务线程调用远程接口，向 Provider 发送请求，同时当前线程处于<code>阻塞</code>状态；</li>\n<li>Provider 接到 Consumer 的请求后，开始处理请求，将结果返回给 Consumer；</li>\n<li>Consumer 收到结果后，当前线程继续往后执行。</li>\n</ol>\n<p>这里有 2 个问题：</p>\n<ol>\n<li>Consumer 业务线程是怎么进入<code>阻塞</code>状态的？</li>\n<li>Consumer 收到结果后，如果唤醒业务线程往后执行的？</li>\n</ol>\n<p>其实，Dubbo 的底层 IO 操作都是异步的。Consumer 端发起调用后，得到一个 Future 对象。对于同步调用，业务线程通过<code>Future#get(timeout)</code>，阻塞等待 Provider 端将结果返回；<code>timeout</code>则是 Consumer 端定义的超时时间。当结果返回后，会设置到此 Future，并唤醒阻塞的业务线程；当超时时间到结果还未返回时，业务线程将会异常返回。</p>\n<h3>异步调用</h3>\n<p>基于 Dubbo 底层的异步 NIO 实现异步调用，对于 Provider 响应时间较长的场景是必须的，它能有效利用 Consumer 端的资源，相对于 Consumer 端使用多线程来说开销较小。</p>\n<p>异步调用，对于 Provider 端不需要做特别的配置。下面的例子中，Provider 端接口定义如下：</p>\n<pre><code class="language-java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AsyncService</span> </span>{\n    <span class="hljs-function">String <span class="hljs-title">goodbye</span><span class="hljs-params">(String name)</span></span>;\n}\n</code></pre>\n<h5>Consumer 配置</h5>\n<pre><code class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"asyncService"</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">"com.alibaba.dubbo.samples.async.api.AsyncService"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"goodbye"</span> <span class="hljs-attr">async</span>=<span class="hljs-string">"true"</span>/&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">dubbo:reference</span>&gt;</span>\n</code></pre>\n<p>需要异步调用的方法，均需要使用 <code>&lt;dubbo:method/&gt;</code>标签进行描述。</p>\n<h5>Consumer 端发起调用</h5>\n<pre><code class="language-java">AsyncService service = ...;\nString result = service.goodbye(<span class="hljs-string">"samples"</span>);<span class="hljs-comment">// 这里的返回值为空，请不要使用</span>\nFuture&lt;String&gt; future = RpcContext.getContext().getFuture();\n... <span class="hljs-comment">// 业务线程可以开始做其他事情</span>\nresult = future.get(); <span class="hljs-comment">// 阻塞需要获取异步结果时，也可以使用 get(timeout, unit) 设置超时时间</span>\n</code></pre>\n<p>Dubbo Consumer 端发起调用后，同时通过<code>RpcContext.getContext().getFuture()</code>获取跟返回结果关联的<code>Future</code>对象，然后就可以开始处理其他任务；当需要这次异步调用的结果时，可以在任意时刻通过<code>future.get(timeout)</code>来获取。</p>\n<p>一些特殊场景下，为了尽快调用返回，可以设置是否等待消息发出：</p>\n<ul>\n<li><code>sent=&quot;true&quot;</code> 等待消息发出，消息发送失败将抛出异常；</li>\n<li><code>sent=&quot;false&quot;</code> 不等待消息发出，将消息放入 IO 队列，即刻返回。</li>\n</ul>\n<p>默认为<code>fase</code>。配置方式如下：</p>\n<pre><code class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"goodbye"</span> <span class="hljs-attr">async</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">sent</span>=<span class="hljs-string">"true"</span> /&gt;</span>\n</code></pre>\n<p>如果你只是想异步，完全忽略返回值，可以配置 <code>return=&quot;false&quot;</code>，以减少 Future 对象的创建和管理成本：</p>\n<pre><code class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"goodbye"</span> <span class="hljs-attr">async</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">return</span>=<span class="hljs-string">"false"</span>/&gt;</span>\n</code></pre>\n<p>此时，<code>RpcContext.getContext().getFuture()</code>将返回<code>null</code>。</p>\n<p>整个异步调用的时序图如下：</p>\n<p><img src="../../img/blog/dubbo-async.svg" alt="异步调用"></p>\n<p>此示例代码位于：<a href="https://github.com/dubbo/dubbo-samples/tree/master/dubbo-samples-async">https://github.com/dubbo/dubbo-samples/tree/master/dubbo-samples-async</a></p>\n<h3>参数回调</h3>\n<p>参数回调有点类似于本地 Callback 机制，但 Callback 并不是 Dubbo 内部的类或接口，而是由 Provider 端自定义的；Dubbo 将基于长连接生成反向代理，从而实现从 Provider 端调用 Consumer 端的逻辑。</p>\n<h5>Provider 端定义 Service 和 Callback</h5>\n<pre><code class="language-java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CallbackService</span> </span>{\n    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addListener</span><span class="hljs-params">(String key, CallbackListener listener)</span></span>;\n}\n\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CallbackListener</span> </span>{\n    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">changed</span><span class="hljs-params">(String msg)</span></span>;\n}\n</code></pre>\n<h5>Provider 端 Service 实现</h5>\n<pre><code class="language-java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CallbackServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CallbackService</span> </span>{\n\n    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, CallbackListener&gt; listeners = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;String, CallbackListener&gt;();\n\n    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CallbackServiceImpl</span><span class="hljs-params">()</span> </span>{\n        Thread t = <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() {\n            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>{\n                <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) {\n                    <span class="hljs-keyword">try</span> {\n                        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, CallbackListener&gt; entry : listeners.entrySet()) {\n                            <span class="hljs-keyword">try</span> {\n                                entry.getValue().changed(getChanged(entry.getKey()));\n                            } <span class="hljs-keyword">catch</span> (Throwable t) {\n                                listeners.remove(entry.getKey());\n                            }\n                        }\n                        Thread.sleep(<span class="hljs-number">5000</span>); <span class="hljs-comment">// timely trigger change event</span>\n                    } <span class="hljs-keyword">catch</span> (Throwable t) {\n                        t.printStackTrace();\n                    }\n                }\n            }\n        });\n        t.setDaemon(<span class="hljs-keyword">true</span>);\n        t.start();\n    }\n\n    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addListener</span><span class="hljs-params">(String key, CallbackListener listener)</span> </span>{\n        listeners.put(key, listener);\n        listener.changed(getChanged(key)); <span class="hljs-comment">// send notification for change</span>\n    }\n\n    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getChanged</span><span class="hljs-params">(String key)</span> </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-string">"Changed: "</span> + <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span>).format(<span class="hljs-keyword">new</span> Date());\n    }\n}\n</code></pre>\n<h5>Provider 端暴露服务</h5>\n<pre><code class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"callbackService"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.alibaba.dubbo.samples.callback.impl.CallbackServiceImpl"</span>/&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">dubbo:service</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">"com.alibaba.dubbo.samples.callback.api.CallbackService"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"callbackService"</span> <span class="hljs-attr">connections</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">callbacks</span>=<span class="hljs-string">"1000"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"addListener"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:argument</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">callback</span>=<span class="hljs-string">"true"</span>/&gt;</span>\n        <span class="hljs-comment">&lt;!--&lt;dubbo:argument type="com.demo.CallbackListener" callback="true" /&gt;--&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">dubbo:method</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">dubbo:service</span>&gt;</span>\n</code></pre>\n<p>这里，Provider 需要在方法中声明哪个参数是 Callback 参数。</p>\n<h5>Consumer 端实现 Callback 接口</h5>\n<pre><code class="language-java">CallbackService callbackService = ...;\ncallbackService.addListener(<span class="hljs-string">"foo.bar"</span>, <span class="hljs-keyword">new</span> CallbackListener() {\n        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">changed</span><span class="hljs-params">(String msg)</span> </span>{\n            System.out.println(<span class="hljs-string">"callback1:"</span> + msg);\n        }\n});\n</code></pre>\n<p>Callback 接口的实现类在 Consumer 端，当方法发生调用时，Consumer 端会自动 export 一个 Callback 服务。而 Provider 端在处理调用时，判断如果参数是 Callback，则生成了一个 proxy，因此服务实现类里在调用 Callback 方法的时候，会被传递到 Consumer 端执行 Callback 实现类的代码。</p>\n<p>上述示例代码位于：此示例代码位于：<a href="https://github.com/dubbo/dubbo-samples/tree/master/dubbo-samples-callback">https://github.com/dubbo/dubbo-samples/tree/master/dubbo-samples-callback</a></p>\n<p>这种调用方式有点像消息的发布和订阅，但又有区别。比如当 Consumer 端 完成了Callback 服务的 export 后，如果后续重启了，这时 Provider 端就会调不通；同时 Provider 端如何清理掉这个 proxy 也是一个问题。</p>\n<h3>事件通知</h3>\n<p>事件通知允许 Consumer 端在调用之前、调用正常返回之后或调用出现异常时，触发 <code>oninvoke</code>、<code>onreturn</code>、<code>onthrow</code> 三个事件。</p>\n<p>可以通过在配置 Consumer 时，指定事件需要通知的方法，如：</p>\n<pre><code class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"demoCallback"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.alibaba.dubbo.samples.notify.impl.NotifyImpl"</span> /&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"demoService"</span> <span class="hljs-attr">check</span>=<span class="hljs-string">"false"</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">"com.alibaba.dubbo.samples.notify.api.DemoService"</span> <span class="hljs-attr">version</span>=<span class="hljs-string">"1.0.0"</span> <span class="hljs-attr">group</span>=<span class="hljs-string">"cn"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sayHello"</span> <span class="hljs-attr">onreturn</span>=<span class="hljs-string">"demoCallback.onreturn"</span> <span class="hljs-attr">onthrow</span>=<span class="hljs-string">"demoCallback.onthrow"</span>/&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">dubbo:reference</span>&gt;</span>\n</code></pre>\n<p>其中，NotifyImpl 的代码如下：</p>\n<pre><code class="language-java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NotifyImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Notify</span></span>{\n\n    <span class="hljs-keyword">public</span> Map&lt;Integer, String&gt; ret = <span class="hljs-keyword">new</span> HashMap&lt;Integer, String&gt;();\n    \n    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onreturn</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> id)</span> </span>{\n        ret.put(id, name);\n        System.out.println(<span class="hljs-string">"onreturn: "</span> + name);\n    }\n\n    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onthrow</span><span class="hljs-params">(Throwable ex, String name, <span class="hljs-keyword">int</span> id)</span> </span>{\n        System.out.println(<span class="hljs-string">"onthrow: "</span> + name);\n    }\n}\n</code></pre>\n<p>这里要强调一点，自定义 Notify 接口中的三个方法的参数规则如下：</p>\n<ul>\n<li><code>oninvoke</code> 方法参数与调用方法的参数相同；</li>\n<li><code>onreturn</code>方法第一个参数为调用方法的返回值，其余为调用方法的参数；</li>\n<li><code>onthrow</code>方法第一个参数为调用异常，其余为调用方法的参数。</li>\n</ul>\n<p>上述配置中，<code>sayHello</code>方法为同步调用，因此事件通知方法的执行也是同步执行。可以配置 <code>async=true</code>让方法调用为异步，这时事件通知的方法也是异步执行的。特别强调一下，<code>oninvoke</code>方法不管是否异步调用，都是同步执行的。</p>\n<p>事件通知的示例代码请参考：<a href="https://github.com/dubbo/dubbo-samples/tree/master/dubbo-samples-notify">https://github.com/dubbo/dubbo-samples/tree/master/dubbo-samples-notify</a></p>\n'},{filename:"dubbo-meetup-shanghai-jun-23rd-2018.md",__html:'<h2>第二届Dubbo开发者沙龙在上海成功举办</h2>\n<p>第二届Dubbo开发者沙龙在上海成功举办，超过700位开发者报名，现场参与人数300+，通过阿里云天池、云栖社区、大咖说引导线上直播观看次数10000+</p>\n<p>分享嘉宾及PPT:</p>\n<ul>\n<li>朱勇: Dubbo开源现状与未来规划 (中文) <a href="https://github.com/dubbo/awesome-dubbo/blob/master/slides/meetup/201806%40Shanghai/dubbo-status-and-roadmap.pdf">slides</a></li>\n<li>小马哥: Dubbo Cloud Native 之路的实践与思考 (中文) <a href="https://github.com/dubbo/awesome-dubbo/blob/master/slides/meetup/201806%40Shanghai/dubbo-cloud-native-practices-and-thoughts.pdf">slides</a></li>\n<li>郭平: Nacos - 贡献Dubbo生态，阿里巴巴注册中心和配置中心开源计划 (中文) <a href="https://github.com/dubbo/awesome-dubbo/blob/master/slides/meetup/201806%40Shanghai/nacos-open-source-initiative.pdf">slides</a></li>\n<li>潘志伟: Dubbo在互金行业的应用场景 (中文) <a href="https://github.com/dubbo/awesome-dubbo/blob/master/slides/meetup/201806%40Shanghai/dubbo-practices-on-internet-finance-industries.pdf">slides</a></li>\n</ul>\n'},{filename:"introduction-to-dubbo-spi-2.md",__html:'<h1>Dubbo可扩展机制源码解析</h1>\n<hr>\n<p>在<a href="#/blog/introduction-to-dubbo-spi.md">Dubbo可扩展机制实战</a>中，我们了解了Dubbo扩展机制的一些概念，初探了Dubbo中LoadBalance的实现，并自己实现了一个LoadBalance。是不是觉得Dubbo的扩展机制很不错呀，接下来，我们就深入Dubbo的源码，一睹庐山真面目。</p>\n<h1>ExtensionLoader</h1>\n<p>ExtentionLoader是最核心的类，负责扩展点的加载和生命周期管理。我们就以这个类开始吧。\nExtension的方法比较多，比较常用的方法有:</p>\n<ul>\n<li><code>public static &lt;T&gt; ExtensionLoader&lt;T&gt; getExtensionLoader(Class&lt;T&gt; type)</code></li>\n<li><code>public T getExtension(String name)</code></li>\n<li><code>public T getAdaptiveExtension()</code></li>\n</ul>\n<p>比较常见的用法有:</p>\n<ul>\n<li><code>LoadBalance lb = ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension(loadbalanceName)</code></li>\n<li><code>RouterFactory routerFactory = ExtensionLoader.getExtensionLoader(RouterFactory.class).getAdaptiveExtension()</code></li>\n</ul>\n<p>说明：在接下来展示的源码中，我会将无关的代码(比如日志，异常捕获等)去掉，方便大家阅读和理解。</p>\n<ol>\n<li>getExtensionLoader方法\n这是一个静态工厂方法，入参是一个可扩展的接口，返回一个该接口的ExtensionLoader实体类。通过这个实体类，可以根据name获得具体的扩展，也可以获得一个自适应扩展。</li>\n</ol>\n<pre><code class="language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">ExtensionLoader&lt;T&gt; <span class="hljs-title">getExtensionLoader</span><span class="hljs-params">(Class&lt;T&gt; type)</span> </span>{\n        <span class="hljs-comment">// 扩展点必须是接口</span>\n        <span class="hljs-keyword">if</span> (!type.isInterface()) {\n            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">"Extension type("</span> + type + <span class="hljs-string">") is not interface!"</span>);\n        }\n        <span class="hljs-comment">// 必须要有@SPI注解</span>\n        <span class="hljs-keyword">if</span> (!withExtensionAnnotation(type)) {\n            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">"Extension type without @SPI Annotation!"</span>);\n        }\n        <span class="hljs-comment">// 从缓存中根据接口获取对应的ExtensionLoader</span>\n        <span class="hljs-comment">// 每个扩展只会被加载一次</span>\n        ExtensionLoader&lt;T&gt; loader = (ExtensionLoader&lt;T&gt;) EXTENSION_LOADERS.get(type);\n        <span class="hljs-keyword">if</span> (loader == <span class="hljs-keyword">null</span>) {\n            <span class="hljs-comment">// 初始化扩展</span>\n            EXTENSION_LOADERS.putIfAbsent(type, <span class="hljs-keyword">new</span> ExtensionLoader&lt;T&gt;(type));\n            loader = (ExtensionLoader&lt;T&gt;) EXTENSION_LOADERS.get(type);\n        }\n        <span class="hljs-keyword">return</span> loader;\n    }\n    \n<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">ExtensionLoader</span><span class="hljs-params">(Class&lt;?&gt; type)</span> </span>{\n        <span class="hljs-keyword">this</span>.type = type;\n        objectFactory = (type == ExtensionFactory.class ? <span class="hljs-keyword">null</span> : ExtensionLoader.getExtensionLoader(ExtensionFactory.class).getAdaptiveExtension());\n    }\n</code></pre>\n<ol start="2">\n<li>getExtension方法</li>\n</ol>\n<pre><code class="language-java"><span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getExtension</span><span class="hljs-params">(String name)</span> </span>{\n        Holder&lt;Object&gt; holder = cachedInstances.get(name);\n        <span class="hljs-keyword">if</span> (holder == <span class="hljs-keyword">null</span>) {\n            cachedInstances.putIfAbsent(name, <span class="hljs-keyword">new</span> Holder&lt;Object&gt;());\n            holder = cachedInstances.get(name);\n        }\n        Object instance = holder.get();\n        <span class="hljs-comment">// 从缓存中获取，如果不存在就创建</span>\n        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) {\n            <span class="hljs-keyword">synchronized</span> (holder) {\n                instance = holder.get();\n                <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) {\n                    instance = createExtension(name);\n                    holder.set(instance);\n                }\n            }\n        }\n        <span class="hljs-keyword">return</span> (T) instance;\n    }\n</code></pre>\n<p>getExtention方法中做了一些判断和缓存，主要的逻辑在createExtension方法中。我们继续看createExtention方法。</p>\n<pre><code class="language-java"><span class="hljs-function"><span class="hljs-keyword">private</span> T <span class="hljs-title">createExtension</span><span class="hljs-params">(String name)</span> </span>{\n        <span class="hljs-comment">// 根据扩展点名称得到扩展类，比如对于LoadBalance，根据random得到RandomLoadBalance类</span>\n        Class&lt;?&gt; clazz = getExtensionClasses().get(name);\n        \n        T instance = (T) EXTENSION_INSTANCES.get(clazz);\n        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) {\n              <span class="hljs-comment">// 使用反射调用nesInstance来创建扩展类的一个示例</span>\n            EXTENSION_INSTANCES.putIfAbsent(clazz, (T) clazz.newInstance());\n            instance = (T) EXTENSION_INSTANCES.get(clazz);\n        }\n        <span class="hljs-comment">// 对扩展类示例进行依赖注入</span>\n        injectExtension(instance);\n        <span class="hljs-comment">// 如果有wrapper，添加wrapper</span>\n        Set&lt;Class&lt;?&gt;&gt; wrapperClasses = cachedWrapperClasses;\n        <span class="hljs-keyword">if</span> (wrapperClasses != <span class="hljs-keyword">null</span> &amp;&amp; !wrapperClasses.isEmpty()) {\n            <span class="hljs-keyword">for</span> (Class&lt;?&gt; wrapperClass : wrapperClasses) {\n                instance = injectExtension((T) wrapperClass.getConstructor(type).newInstance(instance));\n            }\n        }\n        <span class="hljs-keyword">return</span> instance;\n}\n</code></pre>\n<p>createExtension方法做了以下事情:</p>\n<ol>\n<li>先根据name来得到对应的扩展类。从ClassPath下<code>META-INF</code>文件夹下读取扩展点配置文件。</li>\n<li>使用反射创建一个扩展类的实例</li>\n<li>对扩展类实例的属性进行依赖注入，即IoC。</li>\n<li>如果有wrapper，添加wrapper。即AoP。</li>\n</ol>\n<p>下面我们来重点看下这4个过程</p>\n<ol>\n<li>根据name获取对应的扩展类\n先看代码:</li>\n</ol>\n<pre><code class="language-java"><span class="hljs-keyword">private</span> Map&lt;String, Class&lt;?&gt;&gt; getExtensionClasses() {\n        Map&lt;String, Class&lt;?&gt;&gt; classes = cachedClasses.get();\n        <span class="hljs-keyword">if</span> (classes == <span class="hljs-keyword">null</span>) {\n            <span class="hljs-keyword">synchronized</span> (cachedClasses) {\n                classes = cachedClasses.get();\n                <span class="hljs-keyword">if</span> (classes == <span class="hljs-keyword">null</span>) {\n                    classes = loadExtensionClasses();\n                    cachedClasses.set(classes);\n                }\n            }\n        }\n        <span class="hljs-keyword">return</span> classes;\n    }\n\n    <span class="hljs-comment">// synchronized in getExtensionClasses</span>\n    <span class="hljs-keyword">private</span> Map&lt;String, Class&lt;?&gt;&gt; loadExtensionClasses() {\n        <span class="hljs-keyword">final</span> SPI defaultAnnotation = type.getAnnotation(SPI.class);\n        <span class="hljs-keyword">if</span> (defaultAnnotation != <span class="hljs-keyword">null</span>) {\n            String value = defaultAnnotation.value();\n            <span class="hljs-keyword">if</span> (value != <span class="hljs-keyword">null</span> &amp;&amp; (value = value.trim()).length() &gt; <span class="hljs-number">0</span>) {\n                String[] names = NAME_SEPARATOR.split(value);\n                <span class="hljs-keyword">if</span> (names.length &gt; <span class="hljs-number">1</span>) {\n                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">"more than 1 default extension name on extension "</span> + type.getName());\n                }\n                <span class="hljs-keyword">if</span> (names.length == <span class="hljs-number">1</span>) cachedDefaultName = names[<span class="hljs-number">0</span>];\n            }\n        }\n\n        Map&lt;String, Class&lt;?&gt;&gt; extensionClasses = <span class="hljs-keyword">new</span> HashMap&lt;String, Class&lt;?&gt;&gt;();\n        loadFile(extensionClasses, DUBBO_INTERNAL_DIRECTORY);\n        loadFile(extensionClasses, DUBBO_DIRECTORY);\n        loadFile(extensionClasses, SERVICES_DIRECTORY);\n        <span class="hljs-keyword">return</span> extensionClasses;\n    }\n</code></pre>\n<p>过程很简单，先从缓存中获取，如果没有，就从配置文件中加载。配置文件的路径就是之前提到的:</p>\n<ul>\n<li><code>META-INF/dubbo/internal</code></li>\n<li><code>META-INF/dubbo</code></li>\n<li><code>META-INF/services</code></li>\n</ul>\n<ol start="2">\n<li>使用反射创建扩展实例\n这个过程很简单，使用<code>clazz.newInstance())</code>来完成。创建的扩展实例的属性都是空值。</li>\n<li>扩展实例自动装配\n在实际的场景中，类之间都是有依赖的。扩展实例中也会引用一些依赖，比如简单的Java类，另一个Dubbo的扩展或一个Spring Bean等。依赖的情况很复杂，Dubbo的处理也相对复杂些。我们稍后会有专门的章节对其进行说明，现在，我们只需要知道，Dubbo可以正确的注入扩展点中的普通依赖，Dubbo扩展依赖或Spring依赖等。</li>\n<li>扩展实例自动包装\n自动包装就是要实现类似于Spring的AOP功能。Dubbo利用它在内部实现一些通用的功能，比如日志，监控等。关于扩展实例自动包装的内容，也会在后面单独讲解。</li>\n</ol>\n<p>经过上面的4步，Dubbo就创建并初始化了一个扩展实例。这个实例的依赖被注入了，也根据需要被包装了。到此为止，这个扩展实例就可以被使用了。</p>\n<h1>Dubbo SPI高级用法之自动装配</h1>\n<p>自动装配的相关代码在injectExtension方法中:</p>\n<pre><code class="language-java"><span class="hljs-function"><span class="hljs-keyword">private</span> T <span class="hljs-title">injectExtension</span><span class="hljs-params">(T instance)</span> </span>{\n    <span class="hljs-keyword">for</span> (Method method : instance.getClass().getMethods()) {\n        <span class="hljs-keyword">if</span> (method.getName().startsWith(<span class="hljs-string">"set"</span>)\n                &amp;&amp; method.getParameterTypes().length == <span class="hljs-number">1</span>\n                &amp;&amp; Modifier.isPublic(method.getModifiers())) {\n            Class&lt;?&gt; pt = method.getParameterTypes()[<span class="hljs-number">0</span>];\n          \n            String property = method.getName().length() &gt; <span class="hljs-number">3</span> ? method.getName().substring(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>).toLowerCase() + method.getName().substring(<span class="hljs-number">4</span>) : <span class="hljs-string">""</span>;\n            Object object = objectFactory.getExtension(pt, property);\n            <span class="hljs-keyword">if</span> (object != <span class="hljs-keyword">null</span>) {\n                method.invoke(instance, object);\n            }\n        }\n    }\n    <span class="hljs-keyword">return</span> instance;\n}\n</code></pre>\n<p>要实现对扩展实例的依赖的自动装配，首先需要知道有哪些依赖，这些依赖的类型是什么。Dubbo的方案是查找Java标准的setter方法。即方法名以set开始，只有一个参数。如果扩展类中有这样的set方法，Dubbo会对其进行依赖注入，类似于Spring的set方法注入。\n但是Dubbo中的依赖注入比Spring要复杂，因为Spring注入的都是Spring bean，都是由Spring容器来管理的。而Dubbo的依赖注入中，需要注入的可能是另一个Dubbo的扩展，也可能是一个Spring Bean，或是Google guice的组件，或其他任何一个框架中的组件。Dubbo需要能够从任何一个场景中加载扩展。在injectExtension方法中，是用<code>Object object = objectFactory.getExtension(pt, property)</code>来实现的。objectFactory是ExtensionFactory类型的，在创建ExtensionLoader时被初始化:</p>\n<pre><code class="language-java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">ExtensionLoader</span><span class="hljs-params">(Class&lt;?&gt; type)</span> </span>{\n        <span class="hljs-keyword">this</span>.type = type;\n        objectFactory = (type == ExtensionFactory.class ? <span class="hljs-keyword">null</span> : ExtensionLoader.getExtensionLoader(ExtensionFactory.class).getAdaptiveExtension());\n    }\n</code></pre>\n<p>objectFacory本身也是一个扩展，通过<code>ExtensionLoader.getExtensionLoader(ExtensionFactory.class).getAdaptiveExtension())</code>来获取。</p>\n<p><img src="https://raw.githubusercontent.com/vangoleo/wiki/master/dubbo/dubbo-extensionfactory.png" alt="Dubbo-ExtensionFactory | left"></p>\n<p>ExtensionLoader有三个实现：</p>\n<ol>\n<li>SpiExtensionLoader：Dubbo自己的Spi去加载Extension</li>\n<li>SpringExtensionLoader：从Spring容器中去加载Extension</li>\n<li>AdaptiveExtensionLoader: 自适应的AdaptiveExtensionLoader</li>\n</ol>\n<p>这里要注意AdaptiveExtensionLoader，源码如下:</p>\n<pre><code class="language-java"><span class="hljs-meta">@Adaptive</span>\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdaptiveExtensionFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ExtensionFactory</span> </span>{\n\n    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;ExtensionFactory&gt; factories;\n\n    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AdaptiveExtensionFactory</span><span class="hljs-params">()</span> </span>{\n        ExtensionLoader&lt;ExtensionFactory&gt; loader = ExtensionLoader.getExtensionLoader(ExtensionFactory.class);\n        List&lt;ExtensionFactory&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;ExtensionFactory&gt;();\n        <span class="hljs-keyword">for</span> (String name : loader.getSupportedExtensions()) {\n            list.add(loader.getExtension(name));\n        }\n        factories = Collections.unmodifiableList(list);\n    }\n\n    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getExtension</span><span class="hljs-params">(Class&lt;T&gt; type, String name)</span> </span>{\n        <span class="hljs-keyword">for</span> (ExtensionFactory factory : factories) {\n            T extension = factory.getExtension(type, name);\n            <span class="hljs-keyword">if</span> (extension != <span class="hljs-keyword">null</span>) {\n                <span class="hljs-keyword">return</span> extension;\n            }\n        }\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;\n    }\n}\n</code></pre>\n<p>AdaptiveExtensionLoader类有@Adaptive注解。前面提到了，Dubbo会为每一个扩展创建一个自适应实例。如果扩展类上有@Adaptive，会使用该类作为自适应类。如果没有，Dubbo会为我们创建一个。所以<code>ExtensionLoader.getExtensionLoader(ExtensionFactory.class).getAdaptiveExtension())</code>会返回一个AdaptiveExtensionLoader实例，作为自适应扩展实例。\nAdaptiveExtentionLoader会遍历所有的ExtensionFactory实现，尝试着去加载扩展。如果找到了，返回。如果没有，在下一个ExtensionFactory中继续找。Dubbo内置了两个ExtensionFactory，分别从Dubbo自身的扩展机制和Spring容器中去寻找。由于ExtensionFactory本身也是一个扩展点，我们可以实现自己的ExtensionFactory，让Dubbo的自动装配支持我们自定义的组件。比如，我们在项目中使用了Google的guice这个IoC容器。我们可以实现自己的GuiceExtensionFactory，让Dubbo支持从guice容器中加载扩展。</p>\n<h1>Dubbo SPI高级用法之AoP</h1>\n<p>在用Spring的时候，我们经常会用到AOP功能。在目标类的方法前后插入其他逻辑。比如通常使用Spring AOP来实现日志，监控和鉴权等功能。\nDubbo的扩展机制，是否也支持类似的功能呢？答案是yes。在Dubbo中，有一种特殊的类，被称为Wrapper类。通过装饰者模式，使用包装类包装原始的扩展点实例。在原始扩展点实现前后插入其他逻辑，实现AOP功能。</p>\n<h3>什么是Wrapper类</h3>\n<p>那什么样类的才是Dubbo扩展机制中的Wrapper类呢？Wrapper类是一个有复制构造函数的类，也是典型的装饰者模式。下面就是一个Wrapper类:</p>\n<pre><code class="language-java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>{\n    <span class="hljs-keyword">private</span> A a;\n    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">A</span><span class="hljs-params">(A a)</span></span>{\n        <span class="hljs-keyword">this</span>.a = a;\n    }\n}\n</code></pre>\n<p>类A有一个构造函数<code>public A(A a)</code>，构造函数的参数是A本身。这样的类就可以成为Dubbo扩展机制中的一个Wrapper类。Dubbo中这样的Wrapper类有ProtocolFilterWrapper, ProtocolListenerWrapper等, 大家可以查看源码加深理解。</p>\n<h3>怎么配置Wrapper类</h3>\n<p>在Dubbo中Wrapper类也是一个扩展点，和其他的扩展点一样，也是在<code>META-INF</code>文件夹中配置的。比如前面举例的ProtocolFilterWrapper和ProtocolListenerWrapper就是在路径<code>dubbo-rpc/dubbo-rpc-api/src/main/resources/META-INF/dubbo/internal/com.alibaba.dubbo.rpc.Protocol</code>中配置的:</p>\n<pre><code class="language-text">filter=com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper\nlistener=com.alibaba.dubbo.rpc.protocol.ProtocolListenerWrapper\nmock=com.alibaba.dubbo.rpc.support.MockProtocol\n</code></pre>\n<p>在Dubbo加载扩展配置文件时，有一段如下的代码:</p>\n<pre><code class="language-java"><span class="hljs-keyword">try</span> {  \n  clazz.getConstructor(type);    \n  Set&lt;Class&lt;?&gt;&gt; wrappers = cachedWrapperClasses;\n  <span class="hljs-keyword">if</span> (wrappers == <span class="hljs-keyword">null</span>) {\n    cachedWrapperClasses = <span class="hljs-keyword">new</span> ConcurrentHashSet&lt;Class&lt;?&gt;&gt;();\n    wrappers = cachedWrapperClasses;\n  }\n  wrappers.add(clazz);\n} <span class="hljs-keyword">catch</span> (NoSuchMethodException e) {}\n</code></pre>\n<p>这段代码的意思是，如果扩展类有复制构造函数，就把该类存起来，供以后使用。有复制构造函数的类就是Wrapper类。通过<code>clazz.getConstructor(type)</code>来获取参数是扩展点接口的构造函数。注意构造函数的参数类型是扩展点接口，而不是扩展类。\n以Protocol为例。配置文件<code>dubbo-rpc/dubbo-rpc-api/src/main/resources/META-INF/dubbo/internal/com.alibaba.dubbo.rpc.Protocol</code>中定义了<code>filter=com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper</code>。\nProtocolFilterWrapper代码如下：</p>\n<pre><code class="language-java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProtocolFilterWrapper</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Protocol</span> </span>{\n\n    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Protocol protocol;\n\n    <span class="hljs-comment">// 有一个参数是Protocol的复制构造函数</span>\n    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ProtocolFilterWrapper</span><span class="hljs-params">(Protocol protocol)</span> </span>{\n        <span class="hljs-keyword">if</span> (protocol == <span class="hljs-keyword">null</span>) {\n            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">"protocol == null"</span>);\n        }\n        <span class="hljs-keyword">this</span>.protocol = protocol;\n    }\n</code></pre>\n<p>ProtocolFilterWrapper有一个构造函数<code>public ProtocolFilterWrapper(Protocol protocol)</code>，参数是扩展点Protocol，所以它是一个Dubbo扩展机制中的Wrapper类。ExtensionLoader会把它缓存起来，供以后创建Extension实例的时候，使用这些包装类依次包装原始扩展点。</p>\n<h1>扩展点自适应</h1>\n<p>前面讲到过，Dubbo需要在运行时根据方法参数来决定该使用哪个扩展，所以有了扩展点自适应实例。其实是一个扩展点的代理，将扩展的选择从Dubbo启动时，延迟到RPC调用时。Dubbo中每一个扩展点都有一个自适应类，如果没有显式提供，Dubbo会自动为我们创建一个，默认使用Javaassist。\n先来看下创建自适应扩展类的代码:</p>\n<pre><code class="language-java"><span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getAdaptiveExtension</span><span class="hljs-params">()</span> </span>{\n    Object instance = cachedAdaptiveInstance.get();\n    <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) {\n            <span class="hljs-keyword">synchronized</span> (cachedAdaptiveInstance) {\n                instance = cachedAdaptiveInstance.get();\n                <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) {\n                      instance = createAdaptiveExtension();\n                      cachedAdaptiveInstance.set(instance); \n                }\n            }        \n    }\n\n    <span class="hljs-keyword">return</span> (T) instance;\n}\n</code></pre>\n<p>继续看createAdaptiveExtension方法</p>\n<pre><code class="language-java"><span class="hljs-function"><span class="hljs-keyword">private</span> T <span class="hljs-title">createAdaptiveExtension</span><span class="hljs-params">()</span> </span>{        \n    <span class="hljs-keyword">return</span> injectExtension((T) getAdaptiveExtensionClass().newInstance());\n}\n</code></pre>\n<p>继续看getAdaptiveExtensionClass方法</p>\n<pre><code class="language-java"><span class="hljs-keyword">private</span> Class&lt;?&gt; getAdaptiveExtensionClass() {\n        getExtensionClasses();\n        <span class="hljs-keyword">if</span> (cachedAdaptiveClass != <span class="hljs-keyword">null</span>) {\n            <span class="hljs-keyword">return</span> cachedAdaptiveClass;\n        }\n        <span class="hljs-keyword">return</span> cachedAdaptiveClass = createAdaptiveExtensionClass();\n    }\n</code></pre>\n<p>继续看createAdaptiveExtensionClass方法，绕了一大圈，终于来到了具体的实现了。看这个createAdaptiveExtensionClass方法，它首先会生成自适应类的Java源码，然后再将源码编译成Java的字节码，加载到JVM中。</p>\n<pre><code class="language-java"><span class="hljs-keyword">private</span> Class&lt;?&gt; createAdaptiveExtensionClass() {\n        String code = createAdaptiveExtensionClassCode();\n        ClassLoader classLoader = findClassLoader();\n        com.alibaba.dubbo.common.compiler.Compiler compiler = ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.compiler.Compiler.class).getAdaptiveExtension();\n        <span class="hljs-keyword">return</span> compiler.compile(code, classLoader);\n    }\n</code></pre>\n<p>Compiler的代码，默认实现是javassist。</p>\n<pre><code class="language-java"><span class="hljs-meta">@SPI</span>(<span class="hljs-string">"javassist"</span>)\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Compiler</span> </span>{\n    Class&lt;?&gt; compile(String code, ClassLoader classLoader);\n}\n</code></pre>\n<p>createAdaptiveExtensionClassCode()方法中使用一个StringBuilder来构建自适应类的Java源码。方法实现比较长，这里就不贴代码了。这种生成字节码的方式也挺有意思的，先生成Java源代码，然后编译，加载到jvm中。通过这种方式，可以更好的控制生成的Java类。而且这样也不用care各个字节码生成框架的api等。因为xxx.java文件是Java通用的，也是我们最熟悉的。只是代码的可读性不强，需要一点一点构建xx.java的内容。\n下面是使用createAdaptiveExtensionClassCode方法为Protocol创建的自适应类的Java代码范例:</p>\n<pre><code class="language-java"><span class="hljs-keyword">package</span> com.alibaba.dubbo.rpc;\n\n<span class="hljs-keyword">import</span> com.alibaba.dubbo.common.extension.ExtensionLoader;\n\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Protocol</span>$<span class="hljs-title">Adpative</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">com</span>.<span class="hljs-title">alibaba</span>.<span class="hljs-title">dubbo</span>.<span class="hljs-title">rpc</span>.<span class="hljs-title">Protocol</span> </span>{\n    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>{\n        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnsupportedOperationException(<span class="hljs-string">"method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!"</span>);\n    }\n\n    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getDefaultPort</span><span class="hljs-params">()</span> </span>{\n        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnsupportedOperationException(<span class="hljs-string">"method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!"</span>);\n    }\n\n    <span class="hljs-keyword">public</span> com.alibaba.dubbo.rpc.<span class="hljs-function">Exporter <span class="hljs-title">export</span><span class="hljs-params">(com.alibaba.dubbo.rpc.Invoker arg0)</span> <span class="hljs-keyword">throws</span> com.alibaba.dubbo.rpc.RpcException </span>{\n        <span class="hljs-keyword">if</span> (arg0 == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">"com.alibaba.dubbo.rpc.Invoker argument == null"</span>);\n        <span class="hljs-keyword">if</span> (arg0.getUrl() == <span class="hljs-keyword">null</span>)\n            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">"com.alibaba.dubbo.rpc.Invoker argument getUrl() == null"</span>);\n        com.alibaba.dubbo.common.URL url = arg0.getUrl();\n        String extName = (url.getProtocol() == <span class="hljs-keyword">null</span> ? <span class="hljs-string">"dubbo"</span> : url.getProtocol());\n        <span class="hljs-keyword">if</span> (extName == <span class="hljs-keyword">null</span>)\n            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">"Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url("</span> + url.toString() + <span class="hljs-string">") use keys([protocol])"</span>);\n        com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol) ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);\n        <span class="hljs-keyword">return</span> extension.export(arg0);\n    }\n\n    <span class="hljs-keyword">public</span> com.alibaba.dubbo.rpc.<span class="hljs-function">Invoker <span class="hljs-title">refer</span><span class="hljs-params">(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1)</span> <span class="hljs-keyword">throws</span> com.alibaba.dubbo.rpc.RpcException </span>{\n        <span class="hljs-keyword">if</span> (arg1 == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">"url == null"</span>);\n        com.alibaba.dubbo.common.URL url = arg1;\n        String extName = (url.getProtocol() == <span class="hljs-keyword">null</span> ? <span class="hljs-string">"dubbo"</span> : url.getProtocol());\n        <span class="hljs-keyword">if</span> (extName == <span class="hljs-keyword">null</span>)\n            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">"Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url("</span> + url.toString() + <span class="hljs-string">") use keys([protocol])"</span>);\n        com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol) ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);\n        <span class="hljs-keyword">return</span> extension.refer(arg0, arg1);\n    }\n}\n</code></pre>\n<p>大致的逻辑和开始说的一样，通过url解析出参数，解析的逻辑由@Adaptive的value参数控制，然后再根据得到的扩展点名获取扩展点实现，然后进行调用。如果大家想知道具体的构建.java代码的逻辑，可以看<code>createAdaptiveExtensionClassCode</code>的完整实现。\n在生成的Protocol$Adpative中，发现getDefaultPort和destroy方法都是直接抛出异常的，这是为什么呢？来看看Protocol的源码</p>\n<pre><code class="language-java"><span class="hljs-meta">@SPI</span>(<span class="hljs-string">"dubbo"</span>)\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Protocol</span> </span>{\n\n    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getDefaultPort</span><span class="hljs-params">()</span></span>;\n\n    <span class="hljs-meta">@Adaptive</span>\n    &lt;T&gt; <span class="hljs-function">Exporter&lt;T&gt; <span class="hljs-title">export</span><span class="hljs-params">(Invoker&lt;T&gt; invoker)</span> <span class="hljs-keyword">throws</span> RpcException</span>;\n\n    <span class="hljs-meta">@Adaptive</span>\n    &lt;T&gt; <span class="hljs-function">Invoker&lt;T&gt; <span class="hljs-title">refer</span><span class="hljs-params">(Class&lt;T&gt; type, URL url)</span> <span class="hljs-keyword">throws</span> RpcException</span>;\n\n    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span></span>;\n</code></pre>\n<p>可以看到Protocol接口中有4个方法，但只有export和refer两个方法使用了@Adaptive注解。Dubbo自动生成的自适应实例，只有@Adaptive修饰的方法才有具体的实现。所以，Protocol$Adpative类中，也只有export和refer这两个方法有具体的实现，其余方法都是抛出异常。</p>\n'},{filename:"introduction-to-dubbo-spi.md",__html:'<h2>Dubbo可扩展机制实战</h2>\n<h1>1. Dubbo的扩展机制</h1>\n<p>在Dubbo的官网上，Dubbo描述自己是一个高性能的RPC框架。今天我想聊聊Dubbo的另一个很棒的特性, 就是它的可扩展性。\n如同罗马不是一天建成的，任何系统都一定是从小系统不断发展成为大系统的，想要从一开始就把系统设计的足够完善是不可能的，相反的，我们应该关注当下的需求，然后再不断地对系统进行迭代。在代码层面，要求我们适当的对关注点进行抽象和隔离，在软件不断添加功能和特性时，依然能保持良好的结构和可维护性，同时允许第三方开发者对其功能进行扩展。在某些时候，软件设计者对扩展性的追求甚至超过了性能。</p>\n<p>在谈到软件设计时，可扩展性一直被谈起，那到底什么才是可扩展性，什么样的框架才算有良好的可扩展性呢？它必须要做到以下两点:</p>\n<ol>\n<li>作为框架的维护者，在添加一个新功能时，只需要添加一些新代码，而不用大量的修改现有的代码，即符合开闭原则。</li>\n<li>作为框架的使用者，在添加一个新功能时，不需要去修改框架的源码，在自己的工程中添加代码即可。</li>\n</ol>\n<p>Dubbo很好的做到了上面两点。这要得益于Dubbo的微内核+插件的机制。接下来的章节中我们会慢慢揭开Dubbo扩展机制的神秘面纱。</p>\n<h1>2. 可扩展的几种解决方案</h1>\n<p>通常可扩展的实现有下面几种:</p>\n<ul>\n<li>Factory模式</li>\n<li>IoC容器</li>\n<li>OSGI容器</li>\n</ul>\n<p>Dubbo作为一个框架，不希望强依赖其他的IoC容器，比如Spring，Guice。OSGI也是一个很重的实现，不适合Dubbo。最终Dubbo的实现参考了Java原生的SPI机制，但对其进行了一些扩展，以满足Dubbo的需求。</p>\n<h1>3. Java SPI机制</h1>\n<p>既然Dubbo的扩展机制是基于Java原生的SPI机制，那么我们就先来了解下Java SPI吧。了解了Java的SPI，也就是对Dubbo的扩展机制有一个基本的了解。如果对Java SPI比较了解的同学，可以跳过。</p>\n<p>Java SPI(Service Provider Interface)是JDK内置的一种动态加载扩展点的实现。在ClassPath的<code>META-INF/services</code>目录下放置一个与接口同名的文本文件，文件的内容为接口的实现类，多个实现类用换行符分隔。JDK中使用<code>java.util.ServiceLoader</code>来加载具体的实现。\n让我们通过一个简单的例子，来看看Java SPI是如何工作的。</p>\n<ol>\n<li>定义一个接口IRepository用于实现数据储存</li>\n</ol>\n<pre><code class="language-java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IRepository</span> </span>{\n    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(String data)</span></span>;\n}\n</code></pre>\n<ol start="2">\n<li>提供IRepository的实现\nIRepository有两个实现。MysqlRepository和MongoRepository。</li>\n</ol>\n<pre><code class="language-java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MysqlRepository</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IRepository</span> </span>{\n    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(String data)</span> </span>{\n        System.out.println(<span class="hljs-string">"Save "</span> + data + <span class="hljs-string">" to Mysql"</span>);\n    }\n}\n</code></pre>\n<pre><code class="language-java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MongoRepository</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IRepository</span> </span>{\n    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(String data)</span> </span>{\n        System.out.println(<span class="hljs-string">"Save "</span> + data + <span class="hljs-string">" to Mongo"</span>);\n    }\n}\n</code></pre>\n<ol start="3">\n<li>添加配置文件\n在<code>META-INF/services</code>目录添加一个文件，文件名和接口全名称相同，所以文件是<code>META-INF/services/com.demo.IRepository</code>。文件内容为:</li>\n</ol>\n<pre><code class="language-text">com.demo.MongoRepository\ncom.demo.MysqlRepository\n</code></pre>\n<ol start="4">\n<li>通过ServiceLoader加载IRepository实现</li>\n</ol>\n<pre><code class="language-java">ServiceLoader&lt;IRepository&gt; serviceLoader = ServiceLoader.load(IRepository.class);\nIterator&lt;IRepository&gt; it = serviceLoader.iterator();\n<span class="hljs-keyword">while</span> (it != <span class="hljs-keyword">null</span> &amp;&amp; it.hasNext()){\n    IRepository demoService = it.next();\n    System.out.println(<span class="hljs-string">"class:"</span> + demoService.getClass().getName());\n    demoService.save(<span class="hljs-string">"tom"</span>);\n}\n</code></pre>\n<p>在上面的例子中，我们定义了一个扩展点和它的两个实现。在ClassPath中添加了扩展的配置文件，最后使用ServiceLoader来加载所有的扩展点。\n最终的输出结果为：\nclass:testDubbo.MongoRepository\nSave tom to Mongo\nclass:testDubbo.MysqlRepository\nSave tom to Mysql</p>\n<h1>4. Dubbo的SPI机制</h1>\n<p>Java SPI的使用很简单。也做到了基本的加载扩展点的功能。但Java SPI有以下的不足:</p>\n<ul>\n<li>需要遍历所有的实现，并实例化，然后我们在循环中才能找到我们需要的实现。</li>\n<li>配置文件中只是简单的列出了所有的扩展实现，而没有给他们命名。导致在程序中很难去准确的引用它们。</li>\n<li>扩展如果依赖其他的扩展，做不到自动注入和装配</li>\n<li>不提供类似于Spring的IOC和AOP功能</li>\n<li>扩展很难和其他的框架集成，比如扩展里面依赖了一个Spring bean，原生的Java SPI不支持</li>\n</ul>\n<p>所以Java SPI应付一些简单的场景是可以的，但对于Dubbo，它的功能还是比较弱的。Dubbo对原生SPI机制进行了一些扩展。接下来，我们就更深入地了解下Dubbo的SPI机制。</p>\n<h1>5. Dubbo扩展点机制基本概念</h1>\n<p>在深入学习Dubbo的扩展机制之前，我们先明确Dubbo SPI中的一些基本概念。在接下来的内容中，我们会多次用到这些术语。</p>\n<h3>5.1 扩展点(Extension Point)</h3>\n<p>是一个Java的接口。</p>\n<h3>5.2 扩展(Extension)</h3>\n<p>扩展点的实现类。</p>\n<h3>5.3 扩展实例(Extension Instance)</h3>\n<p>扩展点实现类的实例。</p>\n<h3>5.4 扩展自适应实例(Extension Adaptive Instance)</h3>\n<p>第一次接触这个概念时，可能不太好理解(我第一次也是这样的...)。如果称它为扩展代理类，可能更好理解些。扩展的自适应实例其实就是一个Extension的代理，它实现了扩展点接口。在调用扩展点的接口方法时，会根据实际的参数来决定要使用哪个扩展。比如一个IRepository的扩展点，有一个save方法。有两个实现MysqlRepository和MongoRepository。IRepository的自适应实例在调用接口方法的时候，会根据save方法中的参数，来决定要调用哪个IRepository的实现。如果方法参数中有repository=mysql，那么就调用MysqlRepository的save方法。如果repository=mongo，就调用MongoRepository的save方法。和面向对象的延迟绑定很类似。为什么Dubbo会引入扩展自适应实例的概念呢？</p>\n<ul>\n<li>Dubbo中的配置有两种，一种是固定的系统级别的配置，在Dubbo启动之后就不会再改了。还有一种是运行时的配置，可能对于每一次的RPC，这些配置都不同。比如在xml文件中配置了超时时间是10秒钟，这个配置在Dubbo启动之后，就不会改变了。但针对某一次的RPC调用，可以设置它的超时时间是30秒钟，以覆盖系统级别的配置。对于Dubbo而言，每一次的RPC调用的参数都是未知的。只有在运行时，根据这些参数才能做出正确的决定。</li>\n<li>很多时候，我们的类都是一个单例的，比如Spring的bean，在Spring bean都实例化时，如果它依赖某个扩展点，但是在bean实例化时，是不知道究竟该使用哪个具体的扩展实现的。这时候就需要一个代理模式了，它实现了扩展点接口，方法内部可以根据运行时参数，动态的选择合适的扩展实现。而这个代理就是自适应实例。\n自适应扩展实例在Dubbo中的使用非常广泛，Dubbo中，每一个扩展都会有一个自适应类，如果我们没有提供，Dubbo会使用字节码工具为我们自动生成一个。所以我们基本感觉不到自适应类的存在。后面会有例子说明自适应类是怎么工作的。</li>\n</ul>\n<h3>5.5 @SPI</h3>\n<p>@SPI注解作用于扩展点的接口上，表明该接口是一个扩展点。可以被Dubbo的ExtentionLoader加载。如果没有此ExtensionLoader调用会异常。</p>\n<h3>5.6 @Adaptive</h3>\n<p>@Adaptive注解用在扩展接口的方法上。表示该方法是一个自适应方法。Dubbo在为扩展点生成自适应实例时，如果方法有@Adaptive注解，会为该方法生成对应的代码。方法内部会根据方法的参数，来决定使用哪个扩展。\n@Adaptive注解用在类上代表实现一个装饰类，类似于设计模式中的装饰模式，它主要作用是返回指定类，目前在整个系统中AdaptiveCompiler、AdaptiveExtensionFactory这两个类拥有该注解。</p>\n<h3>5.7 ExtentionLoader</h3>\n<p>类似于Java SPI的ServiceLoader，负责扩展的加载和生命周期维护。</p>\n<h3>5.8 扩展别名</h3>\n<p>和Java SPI不同，Dubbo中的扩展都有一个别名，用于在应用中引用它们。比如</p>\n<pre><code class="language-bash">random=com.alibaba.dubbo.rpc.cluster.loadbalance.RandomLoadBalance\nroundrobin=com.alibaba.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance\n</code></pre>\n<p>其中的random，roundrobin就是对应扩展的别名。这样我们在配置文件中使用random或roundrobin就可以了。</p>\n<h3>5.9 一些路径</h3>\n<p>和Java SPI从<code>/META-INF/services</code>目录加载扩展配置类似，Dubbo也会从以下路径去加载扩展配置文件:</p>\n<ul>\n<li><code>META-INF/dubbo/internal</code></li>\n<li><code>META-INF/dubbo</code></li>\n<li><code>META-INF/services</code></li>\n</ul>\n<h1>6. Dubbo的LoadBalance扩展点解读</h1>\n<p>在了解了Dubbo的一些基本概念后，让我们一起来看一个Dubbo中实际的扩展点，对这些概念有一个更直观的认识。</p>\n<p>我们选择的是Dubbo中的LoadBalance扩展点。Dubbo中的一个服务，通常有多个Provider，consumer调用服务时，需要在多个Provider中选择一个。这就是一个LoadBalance。我们一起来看看在Dubbo中，LoadBalance是如何成为一个扩展点的。</p>\n<h3>6.1 LoadBalance接口</h3>\n<pre><code class="language-java"><span class="hljs-meta">@SPI</span>(RandomLoadBalance.NAME)\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">LoadBalance</span> </span>{\n\n    <span class="hljs-meta">@Adaptive</span>(<span class="hljs-string">"loadbalance"</span>)\n    &lt;T&gt; <span class="hljs-function">Invoker&lt;T&gt; <span class="hljs-title">select</span><span class="hljs-params">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> <span class="hljs-keyword">throws</span> RpcException</span>;\n}\n</code></pre>\n<p>LoadBalance接口只有一个select方法。select方法从多个invoker中选择其中一个。上面代码中和Dubbo SPI相关的元素有:</p>\n<ul>\n<li>@SPI(<a href="http://RandomLoadBalance.NAME">RandomLoadBalance.NAME</a>)\n@SPI作用于LoadBalance接口，表示接口LoadBalance是一个扩展点。如果没有@SPI注解，试图去加载扩展时，会抛出异常。@SPI注解有一个参数，该参数表示该扩展点的默认实现的别名。如果没有显示的指定扩展，就使用默认实现。<code>RandomLoadBalance.NAME</code>是一个常量，值是&quot;random&quot;，是一个随机负载均衡的实现。\nrandom的定义在配置文件<code>META-INF/dubbo/internal/com.alibaba.dubbo.rpc.cluster.LoadBalance</code>中:</li>\n</ul>\n<pre><code class="language-bash">random=com.alibaba.dubbo.rpc.cluster.loadbalance.RandomLoadBalance\nroundrobin=com.alibaba.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance\nleastactive=com.alibaba.dubbo.rpc.cluster.loadbalance.LeastActiveLoadBalance\nconsistenthash=com.alibaba.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance\n</code></pre>\n<p>可以看到文件中定义了4个LoadBalance的扩展实现。由于负载均衡的实现不是本次的内容，这里就不过多说明。只用知道Dubbo提供了4种负载均衡的实现，我们可以通过xml文件，properties文件，JVM参数显式的指定一个实现。如果没有，默认使用随机。</p>\n<p><img src="https://raw.githubusercontent.com/vangoleo/wiki/master/dubbo/dubbo_loadbalance.png" alt="dubbo-loadbalance | left"></p>\n<ul>\n<li>@Adaptive(&quot;loadbalance&quot;)\n@Adaptive注解修饰select方法，表明方法select方法是一个可自适应的方法。Dubbo会自动生成该方法对应的代码。当调用select方法时，会根据具体的方法参数来决定调用哪个扩展实现的select方法。@Adaptive注解的参数<code>loadbalance</code>表示方法参数中的loadbalance的值作为实际要调用的扩展实例。\n但奇怪的是，我们发现select的方法中并没有loadbalance参数，那怎么获取loadbalance的值呢？select方法中还有一个URL类型的参数，Dubbo就是从URL中获取loadbalance的值的。这里涉及到Dubbo的URL总线模式，简单说，URL中包含了RPC调用中的所有参数。URL类中有一个<code>Map&lt;String, String&gt; parameters</code>字段，parameters中就包含了loadbalance。</li>\n</ul>\n<h3>6.2 获取LoadBalance扩展</h3>\n<p>Dubbo中获取LoadBalance的代码如下:</p>\n<pre><code class="language-java">LoadBalance lb = ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension(loadbalanceName);\n</code></pre>\n<p>使用ExtensionLoader.getExtensionLoader(LoadBalance.class)方法获取一个ExtensionLoader的实例，然后调用getExtension，传入一个扩展的别名来获取对应的扩展实例。</p>\n<h1>7. 自定义一个LoadBalance扩展</h1>\n<p>本节中，我们通过一个简单的例子，来自己实现一个LoadBalance，并把它集成到Dubbo中。我会列出一些关键的步骤和代码，也可以从这个地址(<a href="https://github.com/vangoleo/dubbo-spi-demo">https://github.com/vangoleo/dubbo-spi-demo</a>)下载完整的demo。</p>\n<h3>7.1 实现LoadBalance接口</h3>\n<p>首先，编写一个自己实现的LoadBalance，因为是为了演示Dubbo的扩展机制，而不是LoadBalance的实现，所以这里LoadBalance的实现非常简单，选择第一个invoker，并在控制台输出一条日志。</p>\n<pre><code class="language-java"><span class="hljs-keyword">package</span> com.dubbo.spi.demo.consumer;\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoLoadBalance</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">LoadBalance</span> </span>{\n    <span class="hljs-meta">@Override</span>\n    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">Invoker&lt;T&gt; <span class="hljs-title">select</span><span class="hljs-params">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> <span class="hljs-keyword">throws</span> RpcException </span>{\n        System.out.println(<span class="hljs-string">"DemoLoadBalance: Select the first invoker..."</span>);\n        <span class="hljs-keyword">return</span> invokers.get(<span class="hljs-number">0</span>);\n    }\n}\n</code></pre>\n<h3>7.2 添加扩展配置文件</h3>\n<p>添加文件:<code>META-INF/dubbo/com.alibaba.dubbo.rpc.cluster.LoadBalance</code>。文件内容如下:</p>\n<pre><code class="language-bash">demo=com.dubbo.spi.demo.consumer.DemoLoadBalance\n</code></pre>\n<h3>7.3 配置使用自定义LoadBalance</h3>\n<p>通过上面的两步，已经添加了一个名字为demo的LoadBalance实现，并在配置文件中进行了相应的配置。接下来，需要显式的告诉Dubbo使用demo的负载均衡实现。如果是通过spring的方式使用Dubbo，可以在xml文件中进行设置。</p>\n<pre><code class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"helloService"</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">"com.dubbo.spi.demo.api.IHelloService"</span> <span class="hljs-attr">loadbalance</span>=<span class="hljs-string">"demo"</span> /&gt;</span>\n</code></pre>\n<p>在consumer端的<a href="dubbo:reference">dubbo:reference</a>中配置&lt;loadbalance=&quot;demo&quot;&gt;</p>\n<h3>7.4 启动Dubbo</h3>\n<p>启动Dubbo，调用一次IHelloService，可以看到控制台会输出一条<code>DemoLoadBalance: Select the first invoker...</code>日志。说明Dubbo的确是使用了我们自定义的LoadBalance。</p>\n<h1>总结</h1>\n<p>到此，我们从Java SPI开始，了解了Dubbo SPI 的基本概念，并结合了Dubbo中的LoadBalance加深了理解。最后，我们还实践了一下，创建了一个自定义LoadBalance，并集成到Dubbo中。相信通过这里理论和实践的结合，大家对Dubbo的可扩展有更深入的理解。\n总结一下，Dubbo SPI有以下的特点:</p>\n<ul>\n<li>对Dubbo进行扩展，不需要改动Dubbo的源码</li>\n<li>自定义的Dubbo的扩展点实现，是一个普通的Java类，Dubbo没有引入任何Dubbo特有的元素，对代码侵入性几乎为零。</li>\n<li>将扩展注册到Dubbo中，只需要在ClassPath中添加配置文件。使用简单。而且不会对现有代码造成影响。符合开闭原则。</li>\n<li>dubbo的扩展机制设计默认值：@SPI(&quot;dubbo&quot;) 代表默认的spi对象</li>\n<li>Dubbo的扩展机制支持IoC,AoP等高级功能</li>\n<li>Dubbo的扩展机制能很好的支持第三方IoC容器，默认支持Spring Bean，可自己扩展来支持其他容器，比如Google的Guice。</li>\n<li>切换扩展点的实现，只需要在配置文件中修改具体的实现，不需要改代码。使用方便。</li>\n</ul>\n<p>下一篇，我们将会一起深入Dubbo的源码，更深入的了解Dubbo的可扩展机制。</p>\n'},{filename:"optimization-branch-prediction.md",__html:'<h1>优化技巧：提前if判断帮助CPU分支预测</h1>\n<hr>\n<h2>分支预测</h2>\n<p>在stackoverflow上有一个非常有名的问题：<a href="https://stackoverflow.com/questions/11227809/why-is-it-faster-to-process-a-sorted-array-than-an-unsorted-array">为什么处理有序数组要比非有序数组快？</a>，可见分支预测对代码运行效率有非常大的影响。</p>\n<p>现代CPU都支持分支预测(branch prediction)和指令流水线(instruction pipeline)，这两个结合可以极大提高CPU效率。对于像简单的if跳转，CPU是可以比较好地做分支预测的。但是对于switch跳转，CPU则没有太多的办法。switch本质上是据索引，从地址数组里取地址再跳转。</p>\n<p>要提高代码执行效率，一个重要的原则就是尽量避免CPU把流水线清空，那么提高分支预测的成功率就非常重要。</p>\n<p>那么对于代码里，如果某个switch分支概率很高，是否可以考虑代码层面帮CPU把判断提前，来提高代码执行效率呢？</p>\n<h2>Dubbo里ChannelEventRunnable的switch判断</h2>\n<p>在<code>ChannelEventRunnable</code>里有一个switch来判断channel state，然后做对应的逻辑：<a href="https://github.com/hengyunabc/incubator-dubbo/blob/dubbo-2.6.1/dubbo-remoting/dubbo-remoting-api/src/main/java/com/alibaba/dubbo/remoting/transport/dispatcher/ChannelEventRunnable.java#L54">查看</a></p>\n<p>一个channel建立起来之后，超过99.9%情况它的state都是<code>ChannelState.RECEIVED</code>，那么可以考虑把这个判断提前。</p>\n<h2>benchmark验证</h2>\n<p>下面通过jmh来验证下：</p>\n<pre><code class="language-java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestBenchMarks</span> </span>{\n\t<span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> ChannelState {\n\t\tCONNECTED, DISCONNECTED, SENT, RECEIVED, CAUGHT\n\t}\n\n\t<span class="hljs-meta">@State</span>(Scope.Benchmark)\n\t<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExecutionPlan</span> </span>{\n\t\t<span class="hljs-meta">@Param</span>({ <span class="hljs-string">"1000000"</span> })\n\t\t<span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> size;\n\t\t<span class="hljs-keyword">public</span> ChannelState[] states = <span class="hljs-keyword">null</span>;\n\n\t\t<span class="hljs-meta">@Setup</span>\n\t\t<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUp</span><span class="hljs-params">()</span> </span>{\n\t\t\tChannelState[] values = ChannelState.values();\n\t\t\tstates = <span class="hljs-keyword">new</span> ChannelState[size];\n\t\t\tRandom random = <span class="hljs-keyword">new</span> Random(<span class="hljs-keyword">new</span> Date().getTime());\n\t\t\t<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) {\n\t\t\t\t<span class="hljs-keyword">int</span> nextInt = random.nextInt(<span class="hljs-number">1000000</span>);\n\t\t\t\t<span class="hljs-keyword">if</span> (nextInt &gt; <span class="hljs-number">100</span>) {\n\t\t\t\t\tstates[i] = ChannelState.RECEIVED;\n\t\t\t\t} <span class="hljs-keyword">else</span> {\n\t\t\t\t\tstates[i] = values[nextInt % values.length];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t<span class="hljs-meta">@Fork</span>(value = <span class="hljs-number">5</span>)\n\t<span class="hljs-meta">@Benchmark</span>\n\t<span class="hljs-meta">@BenchmarkMode</span>(Mode.Throughput)\n\t<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">benchSiwtch</span><span class="hljs-params">(ExecutionPlan plan, Blackhole bh)</span> </span>{\n\t\t<span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;\n\t\t<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; plan.size; ++i) {\n\t\t\t<span class="hljs-keyword">switch</span> (plan.states[i]) {\n\t\t\t<span class="hljs-keyword">case</span> CONNECTED:\n\t\t\t\tresult += ChannelState.CONNECTED.ordinal();\n\t\t\t\t<span class="hljs-keyword">break</span>;\n\t\t\t<span class="hljs-keyword">case</span> DISCONNECTED:\n\t\t\t\tresult += ChannelState.DISCONNECTED.ordinal();\n\t\t\t\t<span class="hljs-keyword">break</span>;\n\t\t\t<span class="hljs-keyword">case</span> SENT:\n\t\t\t\tresult += ChannelState.SENT.ordinal();\n\t\t\t\t<span class="hljs-keyword">break</span>;\n\t\t\t<span class="hljs-keyword">case</span> RECEIVED:\n\t\t\t\tresult += ChannelState.RECEIVED.ordinal();\n\t\t\t\t<span class="hljs-keyword">break</span>;\n\t\t\t<span class="hljs-keyword">case</span> CAUGHT:\n\t\t\t\tresult += ChannelState.CAUGHT.ordinal();\n\t\t\t\t<span class="hljs-keyword">break</span>;\n\t\t\t}\n\t\t}\n\t\tbh.consume(result);\n\t}\n\n\t<span class="hljs-meta">@Fork</span>(value = <span class="hljs-number">5</span>)\n\t<span class="hljs-meta">@Benchmark</span>\n\t<span class="hljs-meta">@BenchmarkMode</span>(Mode.Throughput)\n\t<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">benchIfAndSwitch</span><span class="hljs-params">(ExecutionPlan plan, Blackhole bh)</span> </span>{\n\t\t<span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;\n\t\t<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; plan.size; ++i) {\n\t\t\tChannelState state = plan.states[i];\n\t\t\t<span class="hljs-keyword">if</span> (state == ChannelState.RECEIVED) {\n\t\t\t\tresult += ChannelState.RECEIVED.ordinal();\n\t\t\t} <span class="hljs-keyword">else</span> {\n\t\t\t\t<span class="hljs-keyword">switch</span> (state) {\n\t\t\t\t<span class="hljs-keyword">case</span> CONNECTED:\n\t\t\t\t\tresult += ChannelState.CONNECTED.ordinal();\n\t\t\t\t\t<span class="hljs-keyword">break</span>;\n\t\t\t\t<span class="hljs-keyword">case</span> SENT:\n\t\t\t\t\tresult += ChannelState.SENT.ordinal();\n\t\t\t\t\t<span class="hljs-keyword">break</span>;\n\t\t\t\t<span class="hljs-keyword">case</span> DISCONNECTED:\n\t\t\t\t\tresult += ChannelState.DISCONNECTED.ordinal();\n\t\t\t\t\t<span class="hljs-keyword">break</span>;\n\t\t\t\t<span class="hljs-keyword">case</span> CAUGHT:\n\t\t\t\t\tresult += ChannelState.CAUGHT.ordinal();\n\t\t\t\t\t<span class="hljs-keyword">break</span>;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tbh.consume(result);\n\t}\n}\n</code></pre>\n<ul>\n<li>benchSiwtch里是纯switch判断</li>\n<li>benchIfAndSwitch 里用一个if提前判断state是否<code>ChannelState.RECEIVED</code></li>\n</ul>\n<p>benchmark结果是：</p>\n<pre><code>Result &quot;io.github.hengyunabc.jmh.TestBenchMarks.benchSiwtch&quot;:\n  576.745 ±(99.9%) 6.806 ops/s [Average]\n  (min, avg, max) = (490.348, 576.745, 618.360), stdev = 20.066\n  CI (99.9%): [569.939, 583.550] (assumes normal distribution)\n\n\n# Run complete. Total time: 00:06:48\n\nBenchmark                         (size)   Mode  Cnt     Score    Error  Units\nTestBenchMarks.benchIfAndSwitch  1000000  thrpt  100  1535.867 ± 61.212  ops/s\nTestBenchMarks.benchSiwtch       1000000  thrpt  100   576.745 ±  6.806  ops/s\n</code></pre>\n<p>可以看到提前if判断的确提高了代码效率，这种技巧可以放在性能要求严格的地方。</p>\n<p>Benchmark代码：<a href="https://github.com/hengyunabc/jmh-demo">https://github.com/hengyunabc/jmh-demo</a></p>\n<h2>总结</h2>\n<ul>\n<li>switch对于CPU来说难以做分支预测</li>\n<li>某些switch条件如果概率比较高，可以考虑单独提前if判断，充分利用CPU的分支预测机制</li>\n</ul>\n'},{filename:"pinpoint.md",__html:'<h1>使用Pinpoint做分布式跟踪</h1>\n<p>在使用Dubbo进行服务化或者整合应用后，假设某个服务后台日志显示有异常，这个服务又被多个应用调用的情况下，我们通常很难判断是哪个应用调用的，问题的起因是什么，因此我们需要一套分布式跟踪系统来快速定位问题，Pinpoint可以帮助我们快速定位问题（当然，解决方案也不止这一种）。</p>\n<h2>什么是Pinpoint(摘自<a href="https://skyao.gitbooks.io/learning-pinpoint/">Pinpoint学习笔记</a>)</h2>\n<p><a href="https://github.com/naver/pinpoint">Pinpoint</a>是一个开源的 APM (Application Performance Management/应用性能管理)工具，用于基于java的大规模分布式系统。\n仿照Google Dapper，Pinpoint通过跟踪分布式应用之间的调用来提供解决方案，以帮助分析系统的总体结构和内部模块之间如何相互联系。</p>\n<blockquote>\n<p>注：对于各个模块之间的通讯英文原文中用的是transaction一词，但是我觉得如果翻译为&quot;事务&quot;容易引起误解，所以替换为&quot;交互&quot;或者&quot;调用&quot;这种比较直白的字眼。</p>\n</blockquote>\n<p>在使用上力图简单高效：</p>\n<ul>\n<li>安装agent，不需要修改哪怕一行代码</li>\n<li>最小化性能损失</li>\n</ul>\n<h3>服务器地图(ServerMap)</h3>\n<p>通过可视化分布式系统的模块和他们之间的相互联系来理解系统拓扑。点击某个节点会展示这个模块的详情，比如它当前的状态和请求数量。</p>\n<h3>实时活动线程图表(Realtime Active Thread Chart)</h3>\n<p>实时监控应用内部的活动线程。</p>\n<h3>请求/应答分布图表(Request/Response Scatter Chart)</h3>\n<p>长期可视化请求数量和应答模式来定位潜在问题。通过在图表上拉拽可以选择请求查看更多的详细信息。</p>\n<h3>调用栈(CallStack)</h3>\n<p>在分布式环境中为每个调用生成代码级别的可视图，在单个视图中定位瓶颈和失败点。</p>\n<h3>巡查(Inspector)</h3>\n<p>查看应用上的其他详细信息，比如CPU使用率，内存/垃圾回收，TPS，和JVM参数。</p>\n<h3>支持模块</h3>\n<ul>\n<li>JDK 6+</li>\n<li>Tomcat 6/7/8, Jetty 8/9, JBoss EAP 6, Resin 4, Websphere 6/7/8, Vertx 3.3/3.4/3.5</li>\n<li>Spring, Spring Boot (Embedded Tomcat, Jetty)</li>\n<li>Apache HTTP Client 3.x/4.x, JDK HttpConnector, GoogleHttpClient, OkHttpClient, NingAsyncHttpClient</li>\n<li>Thrift Client, Thrift Service, DUBBO PROVIDER, DUBBO CONSUMER</li>\n<li>ActiveMQ, RabbitMQ</li>\n<li>MySQL, Oracle, MSSQL, CUBRID,POSTGRESQL, MARIA</li>\n<li>Arcus, Memcached, Redis, CASSANDRA</li>\n<li>iBATIS, MyBatis</li>\n<li>DBCP, DBCP2, HIKARICP</li>\n<li>gson, Jackson, Json Lib</li>\n<li>log4j, Logback</li>\n<li>自定义模块</li>\n</ul>\n<h2>Pinpoint与Dubbo的结合</h2>\n<h3>启动Pinpoint</h3>\n<p>参考Pinpoint的<a href="http://naver.github.io/pinpoint/quickstart.html">Quick start</a>搭建环境（不需要启动TestApp）</p>\n<h3>准备Dubbo示例程序</h3>\n<h4>创建API包</h4>\n<p>pom.xml</p>\n<pre><code class="language-xml"><span class="php"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span><span class="hljs-meta">?&gt;</span></span>\n<span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span>\n         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span>\n         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span>\n</code></pre>\n<p>新建API接口：</p>\n<pre><code>package com.example.demoapi;\n\npublic interface HelloService {\n    String sayHello(String name);\n}\n</code></pre>\n<h4>实现 Dubbo 服务提供方</h4>\n<p>pom.xml</p>\n<pre><code class="language-xml"><span class="php"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span><span class="hljs-meta">?&gt;</span></span>\n<span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span>\n\t<span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>\n\t<span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>\n\n\t<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n\t<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo-provider<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n\t<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>\n\t<span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span>\n\n\t<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>demo-provider<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>\n\n\t<span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span>\n\t<span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>\n\n\t<span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span>\n\t<span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>\n\n\t<span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>sonatype-nexus-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span>\n\t\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span>\n\t\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span>\n\t<span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span>\n\n\t<span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>\n\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>\n\t<span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>\n\n\t<span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>\n\t\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n\t\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>\n\t<span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span>\n\n<span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span>\n</code></pre>\n<ol>\n<li>实现 <code>HelloService</code> 接口：</li>\n</ol>\n<pre><code class="language-java"><span class="hljs-keyword">package</span> com.example.demoprovider.provider;\n\n<span class="hljs-keyword">import</span> com.alibaba.dubbo.config.annotation.Service;\n<span class="hljs-keyword">import</span> com.example.demoapi.HelloService;\n\n<span class="hljs-meta">@Service</span>(version = <span class="hljs-string">"${demo.service.version}"</span>,\n        application = <span class="hljs-string">"${dubbo.application.id}"</span>,\n        protocol = <span class="hljs-string">"${dubbo.protocol.id}"</span>,\n        registry = <span class="hljs-string">"${dubbo.registry.id}"</span>)\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HelloService</span> </span>{\n    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;\n    <span class="hljs-meta">@Override</span>\n    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello</span><span class="hljs-params">(String name)</span> </span>{\n        i++;\n        <span class="hljs-keyword">if</span> (i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) {\n            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">"ex"</span>);\n        }\n        <span class="hljs-keyword">return</span> <span class="hljs-string">"Hello "</span> + name + <span class="hljs-string">"!"</span>;\n    }\n}\n</code></pre>\n<ol start="2">\n<li>编写 Spring Boot 引导程序：</li>\n</ol>\n<pre><code class="language-java"><span class="hljs-keyword">package</span> com.example.demoprovider;\n\n<span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;\n<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;\n\n<span class="hljs-meta">@SpringBootApplication</span>\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoProviderApplication</span> </span>{\n\n\t<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{\n\t\tSpringApplication.run(DemoProviderApplication.class, args);\n\t}\n}\n</code></pre>\n<ol start="3">\n<li>配置 <code>application.properties</code>：</li>\n</ol>\n<pre><code class="language-properties"># Spring boot application\nspring.application.name = dubbo-provider-demo\nserver.port = 9090\nmanagement.port = 9091\n\n# Service version\ndemo.service.version = 1.0.0\n\n# Base packages to scan Dubbo Components (e.g @Service , @Reference)\ndubbo.scan.basePackages  = com.example.demoprovider\n\n# Dubbo Config properties\n## ApplicationConfig Bean\ndubbo.application.id = dubbo-provider-demo\ndubbo.application.name = dubbo-provider-demo\n\n## ProtocolConfig Bean\ndubbo.protocol.id = dubbo\ndubbo.protocol.name = dubbo\ndubbo.protocol.port = 12345\n\n## RegistryConfig Bean\ndubbo.registry.id = my-registry\ndubbo.registry.address = N/A\n</code></pre>\n<h4>实现 Dubbo 服务消费方</h4>\n<p>pom.xml</p>\n<pre><code class="language-xml"><span class="php"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span><span class="hljs-meta">?&gt;</span></span>\n<span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span>\n\t<span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>\n\t<span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>\n\n\t<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n\t<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo-consumer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n\t<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>\n\t<span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span>\n\n\t<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>demo-consumer<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>\n\n\t<span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span>\n\t<span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>\n\n\t<span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span>\n\t<span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>\n\n\t<span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>sonatype-nexus-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span>\n\t\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span>\n\t\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span>\n\t<span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span>\n\n\t<span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>\n\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>\n\t<span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>\n\n\t<span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>\n\t\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n\t\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n\t\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>\n\t\t\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">classifier</span>&gt;</span>exec<span class="hljs-tag">&lt;/<span class="hljs-name">classifier</span>&gt;</span>\n\t\t\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>\n\t<span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span>\n\n<span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span>\n</code></pre>\n<ol>\n<li>通过 <code>@Reference</code> 注入 <code>HelloService</code></li>\n</ol>\n<pre><code class="language-java"><span class="hljs-keyword">package</span> com.example.democonsumer.controller;\n\n<span class="hljs-keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;\n<span class="hljs-keyword">import</span> com.example.demoapi.HelloService;\n<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;\n<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;\n<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;\n\n<span class="hljs-meta">@RestController</span>\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoConsumerController</span> </span>{\n    <span class="hljs-meta">@Reference</span>(version = <span class="hljs-string">"${demo.service.version}"</span>,\n            application = <span class="hljs-string">"${dubbo.application.id}"</span>,\n            url = <span class="hljs-string">"dubbo://&lt;注意，这里填写具体IP&gt;:12345"</span>)\n    <span class="hljs-keyword">private</span> HelloService helloService;\n\n    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/sayHello"</span>)\n    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello</span><span class="hljs-params">(@RequestParam String name)</span> </span>{\n        <span class="hljs-keyword">return</span> helloService.sayHello(name);\n    }\n}\n</code></pre>\n<blockquote>\n<p>直连提供者调用需要填写具体IP地址，如果写localhost也可以，但是会被Pinpoint额外识别为一个未知服务</p>\n</blockquote>\n<ol start="2">\n<li>编写 Spring Boot 引导程序（Web 应用）：</li>\n</ol>\n<pre><code class="language-java"><span class="hljs-keyword">package</span> com.example.democonsumer;\n\n<span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;\n<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;\n\n<span class="hljs-meta">@SpringBootApplication</span>\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoConsumerApplication</span> </span>{\n\n\t<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{\n\t\tSpringApplication.run(DemoConsumerApplication.class, args);\n\t}\n}\n</code></pre>\n<ol start="3">\n<li>配置 <code>application.properties</code>：</li>\n</ol>\n<pre><code class="language-properties"># Spring boot application\nspring.application.name=dubbo-consumer-demo\nserver.port=8080\nmanagement.port=8081\n\n# Service Version\ndemo.service.version=1.0.0\n\n# Dubbo Config properties\n## ApplicationConfig Bean\ndubbo.application.id=dubbo-consumer-demo\ndubbo.application.name=dubbo-consumer-demo\n\n## ProtocolConfig Bean\ndubbo.protocol.id=dubbo\ndubbo.protocol.name=dubbo\ndubbo.protocol.port=12345\n</code></pre>\n<h3>使用Pinpoint-agent启动服务提供方和服务消费方</h3>\n<h4>启动服务提供方</h4>\n<ol>\n<li>编译打包</li>\n</ol>\n<pre><code>mvn clean package\n</code></pre>\n<ol start="2">\n<li>附加参数启动服务提供方</li>\n</ol>\n<pre><code>java -jar -javaagent:$AGENT_PATH/pinpoint-bootstrap-$VERSION.jar -Dpinpoint.agentId=demo-provider -Dpinpoint.applicationName=DP target/demo-provider-0.0.1-SNAPSHOT.jar\n</code></pre>\n<ol start="3">\n<li>附加参数启动服务消费方</li>\n</ol>\n<pre><code>java -jar -javaagent:$AGENT_PATH/pinpoint-bootstrap-$VERSION.jar -Dpinpoint.agentId=demo-consumer -Dpinpoint.applicationName=DC target/demo-comsumer-0.0.1-SNAPSHOT-exec.jar\n</code></pre>\n<ol start="4">\n<li>访问消费方地址模拟用户请求</li>\n</ol>\n<p><code>http://localhost:8080/sayHello?name=ABC</code></p>\n<h2>使用Pinpoint快速定位问题</h2>\n<h3>首页</h3>\n<p><img src="../../img/blog/pinpoint-home.png" alt="/admin-guide/images/pinpoint-home.png"></p>\n<blockquote>\n<p>这里的用户请求是请求DubboProvider数量的双倍，原因是记录了favicon.ico图标请求导致的</p>\n</blockquote>\n<h3>调用树</h3>\n<p><img src="../../img/blog/pinpoint-calltree.png" alt="/admin-guide/images/pinpoint-calltree.png"></p>\n<h3>深入跟踪</h3>\n<p><img src="../../img/blog/pinpoint-mixedview.png" alt="/admin-guide/images/pinpoint-mixedview.png"></p>\n<h3>其他</h3>\n<p>示例简单的模拟了Dubbo的提供和调用，并没有进行数据库等其他中间件的应用，详细使用请参照Pinpoint文档。</p>\n'},{filename:"sentinel-introduction-for-dubbo.md",__html:'<h1>Sentinel: Dubbo 服务的流量哨兵</h1>\n<p>在复杂的生产环境下可能部署着成千上万的 Dubbo 服务实例，流量持续不断地进入，服务之间进行相互调用。但是分布式系统中可能会因流量激增、系统负载过高、网络延迟等一系列问题，导致某些服务不可用，如果不进行相应的控制可能导致级联故障，影响服务的可用性，因此我们需要一个能够保障服务稳定性的利器 —— Sentinel，来为 Dubbo 服务保驾护航。</p>\n<h2>Sentinel 介绍</h2>\n<p><a href="https://github.com/alibaba/Sentinel">Sentinel</a> 是阿里中间件团队开源的，面向分布式服务架构的轻量级流量控制产品，主要以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度来帮助用户保护服务的稳定性。</p>\n<p>Sentinel 主要功能有三部分：</p>\n<ul>\n<li>流量控制：Sentinel 可以针对不同的调用关系，以不同的运行指标（如 QPS、线程数、系统负载等）为基准，对资源调用进行流量控制，将随机的请求调整成合适的形状。</li>\n<li>熔断降级：当调用链路中某个资源出现不稳定的情况，如平均 RT 增高、异常比例升高的时候，Sentinel 会使对此资源的调用请求快速失败，避免影响其它的资源，导致级联失败。</li>\n<li>系统负载保护：Sentinel 对系统的维度提供保护。当系统负载较高的时候，如果仍持续让请求进入，可能会导致系统崩溃，无法响应。在集群环境下，网络负载均衡会把本应这台机器承载的流量转发到其它的机器上去。如果这个时候其它的机器也处在一个边缘状态的时候，这个增加的流量就会导致这台机器也崩溃，最后导致整个集群不可用。针对这个情况，Sentinel 提供了对应的保护机制，让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请求。</li>\n</ul>\n<p>目前业界常用的熔断降级/隔离的库是 Netflix 的 <a href="https://github.com/Netflix/Hystrix">Hystrix</a>。Hystrix 注重隔离的概念，通过线程池或信号量的方式来对依赖（即 Sentinel 中对应的资源）进行隔离。Hystrix 线程池隔离的好处是比较彻底，但是不足之处在于要开很多线程池，还要预先去划分依赖，并给每个依赖分配线程池。Sentinel 为资源隔离提供了另一种思路：通过并发线程数进行控制。这样用户就不需要预先指定线程池的大小，而且没有线程切换的损耗。当资源处于不稳定状态时，响应时间变长，线程数逐步增加。当某个资源的线程数飙高到设定的阈值时，会触发对此资源请求的限流，直到堆积的线程完成任务后再继续接收请求。</p>\n<p>Hystrix 熔断降级功能采用熔断器模式，在某个服务失败比率高时自动进行熔断。Sentinel 的熔断降级功能更为通用，支持平均响应时间与失败比率两个指标。Sentinel 还提供各种调用链路关系和流量控制效果支持，同时还可以根据系统负载去实时地调整流量来保护系统，应用场景更为丰富。同时，Sentinel 还提供了实时的监控 API 和控制台，可以方便用户快速了解目前系统的状态，对服务的稳定性了如指掌。</p>\n<h2>Sentinel 与 Dubbo 整合的最佳实践</h2>\n<p>Sentinel 提供了与 Dubbo 整合的模块 - <a href="https://github.com/sczyh30/alibaba-sentinel-dubbo-adapter">Sentinel Dubbo Adapter</a>，主要包括针对 Service Provider 和 Service Consumer 实现的 Filter。使用时用户只需引入以下模块（以 Maven 为例）：</p>\n<pre><code class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.csp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sentinel-dubbo-adapter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>x.y.z<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>\n</code></pre>\n<p>引入此依赖后，Dubbo 的服务接口和方法（包括调用端和服务端）就会成为 Sentinel 中的资源，在配置了规则后就可以自动享受到 Sentinel 的防护能力。若不希望开启 Sentinel Dubbo Adapter 中的某个 Filter，可以手动关闭对应的 Filter，比如：</p>\n<pre><code class="language-java"><span class="hljs-meta">@Bean</span>\n<span class="hljs-function"><span class="hljs-keyword">public</span> ConsumerConfig <span class="hljs-title">consumerConfig</span><span class="hljs-params">()</span> </span>{\n    ConsumerConfig consumerConfig = <span class="hljs-keyword">new</span> ConsumerConfig();\n    consumerConfig.setFilter(<span class="hljs-string">"-sentinel.dubbo.consumer.filter"</span>);\n    <span class="hljs-keyword">return</span> consumerConfig;\n}\n</code></pre>\n<p>我们还提供了几个具体的 Demo，具体代码请见 <a href="https://github.com/alibaba/Sentinel/tree/master/sentinel-demo/sentinel-demo-dubbo">sentinel-demo-dubbo</a>。</p>\n<h2>Service Provider</h2>\n<p>Service Provider 用于向外界提供服务，处理各个消费者的调用请求。为了保护 Provider 不被激增的流量拖垮影响稳定性，可以给 Provider 配置 <strong>QPS 模式</strong>的限流，这样当每秒的请求量超过设定的阈值时会自动拒绝多的请求。限流粒度可以是服务接口和服务方法两种粒度。若希望整个服务接口的 QPS 不超过一定数值，则可以为对应服务接口资源（resourceName 为<strong>接口全限定名</strong>）配置 QPS 阈值；若希望服务的某个方法的 QPS 不超过一定数值，则可以为对应服务方法资源（resourceName 为<strong>接口全限定名:方法签名</strong>）配置 QPS 阈值。有关配置详情请参考 <a href="https://github.com/alibaba/Sentinel/wiki/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6">流量控制 | Sentinel</a>。</p>\n<p>我们看一下这种模式的限流产生的效果。假设我们已经定义了某个服务接口 <code>com.alibaba.csp.sentinel.demo.dubbo.FooService</code>，其中有一个方法 <code>sayHello(java.lang.String)</code>，Provider 端该方法设定 QPS 阈值为 10。在 Consumer 端在 1s 之内连续发起 15 次调用，可以通过日志文件看到 Provider 端被限流。拦截日志统一记录在 <code>~/logs/csp/sentinel-block.log</code> 中：</p>\n<pre><code>2018-07-24 17:13:43|1|com.alibaba.csp.sentinel.demo.dubbo.FooService:sayHello(java.lang.String),FlowException,default,|5,0\n</code></pre>\n<p>在 Provider 对应的 metrics 日志中也有记录：</p>\n<pre><code>1532423623000|2018-07-24 17:13:43|com.alibaba.csp.sentinel.demo.dubbo.FooService|15|0|15|0|3\n1532423623000|2018-07-24 17:13:43|com.alibaba.csp.sentinel.demo.dubbo.FooService:sayHello(java.lang.String)|10|5|10|0|0\n</code></pre>\n<h2>Service Consumer</h2>\n<p>Service Consumer 作为客户端去调用远程服务。每一个服务都可能会依赖几个下游服务，若某个服务 A 依赖的下游服务 B 出现了不稳定的情况，服务 A 请求 服务 B 的响应时间变长，从而服务 A 调用服务 B 的线程就会产生堆积，最终可能耗尽服务 A 的线程数。我们通过用并发线程数来控制对下游服务 B 的访问，来保证下游服务不可靠的时候，不会拖垮服务自身。基于这种场景，推荐给 Consumer 配置<strong>线程数模式</strong>的限流，来保证自身不被不稳定服务所影响。限流粒度同样可以是服务接口和服务方法两种粒度。</p>\n<p>采用基于线程数的限流模式后，我们不需要再显式地去进行线程池隔离，Sentinel 会控制资源的线程数，超出的请求直接拒绝，直到堆积的线程处理完成。</p>\n<p>我们看一下这种模式的效果。假设当前服务 A 依赖两个远程服务方法 <code>sayHello(java.lang.String)</code> 和 <code>doAnother()</code>。前者远程调用的响应时间 为 1s-1.5s之间，后者 RT 非常小（30 ms 左右）。服务 A 端设两个远程方法 thread count 为 5。然后每隔 50 ms 左右向线程池投入两个任务，作为消费者分别远程调用对应方法，持续 10 次。可以看到 <code>sayHello</code> 方法被限流 5 次，因为后面调用的时候前面的远程调用还未返回（RT 高）；而 <code>doAnother()</code> 调用则不受影响。线程数目超出时快速失败能够有效地防止自己被慢调用所影响。</p>\n<h2>Sentinel Dashboard</h2>\n<p>Sentinel 还提供 API 用于获取实时的监控信息，对应文档见<a href="https://github.com/alibaba/Sentinel/wiki/%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7">此处</a>。为了便于使用，Sentinel 还提供了一个控制台（Dashboard）用于配置规则、查看监控、机器发现等功能。我们只需要按照 <a href="https://github.com/alibaba/Sentinel/wiki/%E6%8E%A7%E5%88%B6%E5%8F%B0">Sentinel 控制台文档</a> 启动控制台，然后给对应的应用程序添加相应参数并启动即可。比如本文中 Service Provider 示例的启动参数：</p>\n<pre><code class="language-bash">-Djava.net.preferIPv4Stack=<span class="hljs-literal">true</span> -Dcsp.sentinel.api.port=8720 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=dubbo-provider-demo\n</code></pre>\n<p>这样在启动 Service Provider 示例以后，就可以在 Sentinel 控制台中找到我们的应用了。可以很方便地在控制台中配置限流规则：</p>\n<p><img src="../../img/blog/sentinel-dashboard-view-rules.png" alt="规则配置"></p>\n<p>或者查看实时监控数据：</p>\n<p><img src="../../img/blog/sentinel-dashboard-metrics.png" alt="秒级实时监控"></p>\n<h2>总结</h2>\n<p>以上介绍的只是 Sentinel 的一个最简单的场景 —— 限流。Sentinel 还可以处理更复杂的各种情况，比如超时熔断、冷启动、请求匀速等。可以参考 <a href="https://github.com/alibaba/Sentinel/wiki/%E4%B8%BB%E9%A1%B5">Sentinel 文档</a>，更多的场景等待你去挖掘！</p>\n'},{filename:"spring-boot-dubbo-start-stop-analysis.md",__html:'<h1>Spring-boot+Dubbo应用启停源码分析</h1>\n<h3>背景介绍</h3>\n<p><a href="https://github.com/apache/incubator-dubbo-spring-boot-project">Dubbo Spring Boot</a> 工程致力于简化 Dubbo RPC 框架在Spring Boot应用场景的开发。同时也整合了 Spring Boot 特性：</p>\n<ul>\n<li><a href="https://github.com/apache/incubator-dubbo-spring-boot-project/blob/master/dubbo-spring-boot-autoconfigure">自动装配</a> (比如： 注解驱动, 自动装配等).</li>\n<li><a href="https://github.com/apache/incubator-dubbo-spring-boot-project/blob/master/dubbo-spring-boot-actuator">Production-Ready</a> (比如： 安全, 健康检查, 外部化配置等).</li>\n</ul>\n<h3>DubboConsumer启动分析</h3>\n<p>你有没有想过一个问题？<code>incubator-dubbo-spring-boot-project</code>中的<code>DubboConsumerDemo</code>应用就一行代码，<code>main</code>方法执行完之后，为什么不会直接退出呢？</p>\n<pre><code class="language-java"><span class="hljs-meta">@SpringBootApplication</span>(scanBasePackages = <span class="hljs-string">"com.alibaba.boot.dubbo.demo.consumer.controller"</span>)\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DubboConsumerDemo</span> </span>{\n\n    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{\n        SpringApplication.run(DubboConsumerDemo.class,args);\n    }\n\n}\n</code></pre>\n<p>其实要回答这样一个问题，我们首先需要把这个问题进行一个抽象，即一个JVM进程，在什么情况下会退出？</p>\n<p>以Java 8为例，通过查阅JVM语言规范[1]，在12.8章节中有清晰的描述：</p>\n<p>A program terminates all its activity and <em>exits</em> when one of two things happens:</p>\n<ul>\n<li>All the threads that are not daemon threads terminate.</li>\n<li>Some thread invokes the <code>exit</code> method of class <code>Runtime</code> or class <code>System</code>, and the <code>exit</code> operation is not forbidden by the security manager.</li>\n</ul>\n<p>也就是说，导致JVM的退出只有2种情况：</p>\n<ol>\n<li>所有的非daemon进程完全终止</li>\n<li>某个线程调用了<code>System.exit()</code>或<code>Runtime.exit()</code></li>\n</ol>\n<p>因此针对上面的情况，我们判断，一定是有某个非daemon线程没有退出导致。我们知道，通过jstack可以看到所有的线程信息，包括他们是否是daemon线程，可以通过jstack找出那些是非deamon的线程。</p>\n<pre><code class="language-sh">➜  jstack 57785 | grep tid | grep -v <span class="hljs-string">"daemon"</span>\n<span class="hljs-string">"container-0"</span> <span class="hljs-comment">#37 prio=5 os_prio=31 tid=0x00007fbe312f5800 nid=0x7103 waiting on condition  [0x0000700010144000]</span>\n<span class="hljs-string">"container-1"</span> <span class="hljs-comment">#49 prio=5 os_prio=31 tid=0x00007fbe3117f800 nid=0x7b03 waiting on condition  [0x0000700010859000]</span>\n<span class="hljs-string">"DestroyJavaVM"</span> <span class="hljs-comment">#83 prio=5 os_prio=31 tid=0x00007fbe30011000 nid=0x2703 waiting on condition  [0x0000000000000000]</span>\n<span class="hljs-string">"VM Thread"</span> os_prio=31 tid=0x00007fbe3005e800 nid=0x3703 runnable\n<span class="hljs-string">"GC Thread#0"</span> os_prio=31 tid=0x00007fbe30013800 nid=0x5403 runnable\n<span class="hljs-string">"GC Thread#1"</span> os_prio=31 tid=0x00007fbe30021000 nid=0x5303 runnable\n<span class="hljs-string">"GC Thread#2"</span> os_prio=31 tid=0x00007fbe30021800 nid=0x2d03 runnable\n<span class="hljs-string">"GC Thread#3"</span> os_prio=31 tid=0x00007fbe30022000 nid=0x2f03 runnable\n<span class="hljs-string">"G1 Main Marker"</span> os_prio=31 tid=0x00007fbe30040800 nid=0x5203 runnable\n<span class="hljs-string">"G1 Conc#0"</span> os_prio=31 tid=0x00007fbe30041000 nid=0x4f03 runnable\n<span class="hljs-string">"G1 Refine#0"</span> os_prio=31 tid=0x00007fbe31044800 nid=0x4e03 runnable\n<span class="hljs-string">"G1 Refine#1"</span> os_prio=31 tid=0x00007fbe31045800 nid=0x4d03 runnable\n<span class="hljs-string">"G1 Refine#2"</span> os_prio=31 tid=0x00007fbe31046000 nid=0x4c03 runnable\n<span class="hljs-string">"G1 Refine#3"</span> os_prio=31 tid=0x00007fbe31047000 nid=0x4b03 runnable\n<span class="hljs-string">"G1 Young RemSet Sampling"</span> os_prio=31 tid=0x00007fbe31047800 nid=0x3603 runnable\n<span class="hljs-string">"VM Periodic Task Thread"</span> os_prio=31 tid=0x00007fbe31129000 nid=0x6703 waiting on condition\n\n</code></pre>\n<blockquote>\n<p>此处通过grep tid 找出所有的线程摘要，通过grep -v找出不包含daemon关键字的行</p>\n</blockquote>\n<p>通过上面的结果，我们发现了一些信息：</p>\n<ul>\n<li>有两个线程<code>container-0</code>, <code>container-1</code>非常可疑，他们是非daemon线程，处于wait状态</li>\n<li>有一些GC相关的线程，和VM打头的线程，也是非daemon线程，但他们很有可能是JVM自己的线程，在此暂时忽略。</li>\n</ul>\n<p>综上，我们可以推断，很可能是因为<code>container-0</code>和<code>container-1</code>导致JVM没有退出。现在我们通过源码，搜索一下到底是谁创建的这两个线程。</p>\n<p>通过对spring-boot的源码分析，我们在<code>org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer</code>的<code>startDaemonAwaitThread</code>找到了如下代码</p>\n<pre><code class="language-java">\t<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">startDaemonAwaitThread</span><span class="hljs-params">()</span> </span>{\n\t\tThread awaitThread = <span class="hljs-keyword">new</span> Thread(<span class="hljs-string">"container-"</span> + (containerCounter.get())) {\n\n\t\t\t<span class="hljs-meta">@Override</span>\n\t\t\t<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>{\n\t\t\t\tTomcatEmbeddedServletContainer.<span class="hljs-keyword">this</span>.tomcat.getServer().await();\n\t\t\t}\n\n\t\t};\n\t\tawaitThread.setContextClassLoader(getClass().getClassLoader());\n\t\tawaitThread.setDaemon(<span class="hljs-keyword">false</span>);\n\t\tawaitThread.start();\n\t}\n</code></pre>\n<p>在这个方法加个断点，看下调用堆栈：</p>\n<pre><code>initialize:115, TomcatEmbeddedServletContainer (org.springframework.boot.context.embedded.tomcat)\n&lt;init&gt;:84, TomcatEmbeddedServletContainer (org.springframework.boot.context.embedded.tomcat)\ngetTomcatEmbeddedServletContainer:554, TomcatEmbeddedServletContainerFactory (org.springframework.boot.context.embedded.tomcat)\ngetEmbeddedServletContainer:179, TomcatEmbeddedServletContainerFactory (org.springframework.boot.context.embedded.tomcat)\ncreateEmbeddedServletContainer:164, EmbeddedWebApplicationContext (org.springframework.boot.context.embedded)\nonRefresh:134, EmbeddedWebApplicationContext (org.springframework.boot.context.embedded)\nrefresh:537, AbstractApplicationContext (org.springframework.context.support)\nrefresh:122, EmbeddedWebApplicationContext (org.springframework.boot.context.embedded)\nrefresh:693, SpringApplication (org.springframework.boot)\nrefreshContext:360, SpringApplication (org.springframework.boot)\nrun:303, SpringApplication (org.springframework.boot)\nrun:1118, SpringApplication (org.springframework.boot)\nrun:1107, SpringApplication (org.springframework.boot)\nmain:35, DubboConsumerDemo (com.alibaba.boot.dubbo.demo.consumer.bootstrap)\n</code></pre>\n<p>可以看到，spring-boot应用在启动的过程中，由于默认启动了Tomcat暴露HTTP服务，所以执行到了上述方法，而Tomcat启动的所有的线程，默认都是daemon线程，例如监听请求的Acceptor，工作线程池等等，如果这里不加控制的话，启动完成之后JVM也会退出。因此需要显示的启动一个线程，在某个条件下进行持续等待，从而避免线程退出。</p>\n<p>下面我们在深挖一下，在Tomcat的<code>this.tomcat.getServer().await()</code>这个方法中，线程是如何实现不退出的。这里为了阅读方便，去掉了不相关的代码。</p>\n<pre><code class="language-java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">await</span><span class="hljs-params">()</span> </span>{\n    \t<span class="hljs-comment">// ...</span>\n        <span class="hljs-keyword">if</span>( port==-<span class="hljs-number">1</span> ) {\n            <span class="hljs-keyword">try</span> {\n                awaitThread = Thread.currentThread();\n                <span class="hljs-keyword">while</span>(!stopAwait) {\n                    <span class="hljs-keyword">try</span> {\n                        Thread.sleep( <span class="hljs-number">10000</span> );\n                    } <span class="hljs-keyword">catch</span>( InterruptedException ex ) {\n                        <span class="hljs-comment">// continue and check the flag</span>\n                    }\n                }\n            } <span class="hljs-keyword">finally</span> {\n                awaitThread = <span class="hljs-keyword">null</span>;\n            }\n            <span class="hljs-keyword">return</span>;\n        }\n\t\t<span class="hljs-comment">// ...</span>\n    }\n</code></pre>\n<p>在await方法中，实际上当前线程在一个while循环中每10秒检查一次 <code>stopAwait</code>这个变量，它是一个<code>volatile</code>类型变量，用于确保被另一个线程修改后，当前线程能够立即看到这个变化。如果没有变化，就会一直处于while循环中。这就是该线程不退出的原因，也就是整个spring-boot应用不退出的原因。</p>\n<p>因为Springboot应用同时启动了8080和8081(management port)两个端口，实际是启动了两个Tomcat，因此会有两个线程<code>container-0</code>和<code>container-1</code>。</p>\n<p>接下来，我们再看看，这个Spring-boot应用又是如何退出的呢？</p>\n<h3>DubboConsumer退出分析</h3>\n<p>在前面的描述中提到，有一个线程持续的在检查<code>stopAwait</code>这个变量，那么我们自然想到，在Stop的时候，应该会有一个线程去修改<code>stopAwait</code>，打破这个while循环，那又是谁在修改这个变量呢？</p>\n<p>通过对源码分析，可以看到只有一个方法修改了<code>stopAwait</code>,即<code>org.apache.catalina.core.StandardServer#stopAwait</code>，我们在此处加个断点，看看是谁在调用。</p>\n<blockquote>\n<p>注意，当我们在Intellij IDEA的Debug模式，加上一个断点后，需要在命令行下使用<code>kill -s INT $PID</code>或者<code>kill -s TERM $PID</code>才能触发断点，点击IDE上的Stop按钮，不会触发断点。这是IDEA的bug</p>\n</blockquote>\n<p>可以看到有一个名为<code>Thread-3</code>的线程调用了该方法：</p>\n<pre><code class="language-java">stopAwait:<span class="hljs-number">390</span>, StandardServer (org.apache.catalina.core)\nstopInternal:<span class="hljs-number">819</span>, StandardServer (org.apache.catalina.core)\nstop:<span class="hljs-number">226</span>, LifecycleBase (org.apache.catalina.util)\nstop:<span class="hljs-number">377</span>, Tomcat (org.apache.catalina.startup)\nstopTomcat:<span class="hljs-number">241</span>, TomcatEmbeddedServletContainer (org.springframework.boot.context.embedded.tomcat)\nstop:<span class="hljs-number">295</span>, TomcatEmbeddedServletContainer (org.springframework.boot.context.embedded.tomcat)\nstopAndReleaseEmbeddedServletContainer:<span class="hljs-number">306</span>, EmbeddedWebApplicationContext (org.springframework.boot.context.embedded)\nonClose:<span class="hljs-number">155</span>, EmbeddedWebApplicationContext (org.springframework.boot.context.embedded)\ndoClose:<span class="hljs-number">1014</span>, AbstractApplicationContext (org.springframework.context.support)\nrun:<span class="hljs-number">929</span>, AbstractApplicationContext$<span class="hljs-number">2</span> (org.springframework.context.support)\n</code></pre>\n<p>通过源码分析，原来是通过Spring注册的<code>ShutdownHook</code>来执行的</p>\n<pre><code class="language-java">\t<span class="hljs-meta">@Override</span>\n\t<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerShutdownHook</span><span class="hljs-params">()</span> </span>{\n\t\t<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.shutdownHook == <span class="hljs-keyword">null</span>) {\n\t\t\t<span class="hljs-comment">// No shutdown hook registered yet.</span>\n\t\t\t<span class="hljs-keyword">this</span>.shutdownHook = <span class="hljs-keyword">new</span> Thread() {\n\t\t\t\t<span class="hljs-meta">@Override</span>\n\t\t\t\t<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>{\n\t\t\t\t\t<span class="hljs-keyword">synchronized</span> (startupShutdownMonitor) {\n\t\t\t\t\t\tdoClose();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tRuntime.getRuntime().addShutdownHook(<span class="hljs-keyword">this</span>.shutdownHook);\n\t\t}\n\t}\n</code></pre>\n<p>通过查阅Java的API文档[2], 我们可以知道ShutdownHook将在下面两种情况下执行</p>\n<blockquote>\n<p>The Java virtual machine <em>shuts down</em> in response to two kinds of events:</p>\n<ul>\n<li>The program <em>exits</em> normally, when the last non-daemon thread exits or when the <code>exit</code> (equivalently, <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#exit-int-"><code>System.exit</code></a>) method is invoked, or</li>\n<li>The virtual machine is <em>terminated</em> in response to a user interrupt, such as typing <code>^C</code>, or a system-wide event, such as user logoff or system shutdown.</li>\n</ul>\n</blockquote>\n<ol>\n<li>调用了System.exit()方法</li>\n<li>响应外部的信号，例如Ctrl+C（其实发送的是SIGINT信号），或者是<code>SIGTERM</code>信号（默认<code>kill $PID</code>发送的是<code>SIGTERM</code>信号）</li>\n</ol>\n<p>因此，正常的应用在停止过程中(<code>kill -9 $PID</code>除外)，都会执行上述ShutdownHook，它的作用不仅仅是关闭tomcat，还有进行其他的清理工作，在此不再赘述。</p>\n<h3>总结</h3>\n<ol>\n<li>在<code>DubboConsumer</code>启动的过程中，通过启动一个独立的非daemon线程循环检查变量的状态，确保进程不退出</li>\n<li>在<code>DubboConsumer</code>停止的过程中，通过执行spring容器的shutdownhook，修改了变量的状态，使得程序正常退出</li>\n</ol>\n<h3>问题</h3>\n<p>在DubboProvider的例子中，我们看到Provider并没有启动Tomcat提供HTTP服务，那又是如何实现不退出的呢？我们将在下一篇文章中回答这个问题。</p>\n<h4>彩蛋</h4>\n<p>在<code>Intellij IDEA</code>中运行了如下的单元测试，创建一个线程执行睡眠1000秒的操作，我们惊奇的发现，代码并没有线程执行完就退出了，这又是为什么呢？（被创建的线程是非daemon线程）</p>\n<pre><code class="language-java">    <span class="hljs-meta">@Test</span>\n    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>{\n        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() {\n            <span class="hljs-meta">@Override</span>\n            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>{\n                <span class="hljs-keyword">try</span> {\n                    Thread.sleep(<span class="hljs-number">1000000</span>);\n                } <span class="hljs-keyword">catch</span> (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }).start();\n    }\n</code></pre>\n<p>[1] <a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.8">https://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.8</a></p>\n<p>[2] <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Runtime.html#addShutdownHook">https://docs.oracle.com/javase/8/docs/api/java/lang/Runtime.html#addShutdownHook</a></p>\n'}],"en-us":[{filename:"apachecon-na-2018.md",__html:'<h2>The ApacheCon NA schedule has been announced</h2>\n<p>Ian Luo(PPMC) and Jun Liu(PPMC) will talk about &quot;Introducing Apache Dubbo(Incubating): What is Dubbo and How it Works&quot; at ApacheCon NA this year in Montréal! Please check out the schedule <a href="https://apachecon.dukecon.org/acna/2018/#/scheduledEvent/b8db9dc580d85853f">here</a> and register <a href="https://www.eventbrite.com/e/apachecon-north-america-2018-registration-43200327342">here</a>.</p>\n'},{filename:"dubbo-meetup-beijing-may-12th-2018.md",__html:'<h2>The first Dubbo meetup has been held in Beijing</h2>\n<p>The first Dubbo meetup has successfully been held in Beijing, over 400+ people were present. What a great event!</p>\n<p>Please enjoy the slides of the topics:</p>\n<ul>\n<li>Ian Luo: Dubbo\'s present and future (Chinese) <a href="https://github.com/dubbo/awesome-dubbo/raw/master/slides/meetup/201805%40Beijing/dubbo-present-and-future.pdf">slides</a></li>\n<li>Jun Liu: Introduction to the 4th Aliware Performance Challenge (Chinese) <a href="https://github.com/dubbo/awesome-dubbo/raw/master/slides/meetup/201805%40Beijing/introduction-to-4th-aliware-performance-challenge.pdf">slides</a></li>\n<li>Zhixuan Chen: Quickly building Microservice with Dubbo and Spring-boot (Chinese) <a href="https://github.com/dubbo/awesome-dubbo/raw/master/slides/meetup/201805%40Beijing/quickly-building-microservice-with-dubbo-and-springboot.pdf">slides</a></li>\n<li>Xin Wang: Dubbo and Weidian\'s Practice on Microservice Architecture (Chinese) <a href="https://github.com/dubbo/awesome-dubbo/raw/master/slides/meetup/201805%40Beijing/dubbo-and-weidian\'s-practice-on-microservice-architecture.pdf">slides</a></li>\n</ul>\n'},{filename:"dubbo-meetup-shanghai-jun-23rd-2018.md",__html:'<h2>Dubbo Shanghai meetup has been held successfully</h2>\n<p>The sencond Dubbo meetup has successfully been held in Shanghai, over 700 people submitted registration, and over 300 were present, more than 10,000 watched the live online. A great event again!</p>\n<p>Please enjoy the slides of the topics:</p>\n<ul>\n<li>Jerrick Zhu: Dubbo Status and Roadmap (Chinese) <a href="https://github.com/dubbo/awesome-dubbo/blob/master/slides/meetup/201806%40Shanghai/dubbo-status-and-roadmap.pdf">slides</a></li>\n<li>Mercy Ma: Dubbo Cloud Native Practices and Thoughts (Chinese) <a href="https://github.com/dubbo/awesome-dubbo/blob/master/slides/meetup/201806%40Shanghai/dubbo-cloud-native-practices-and-thoughts.pdf">slides</a></li>\n<li>Ping Guo: Nacos Open Source Initiative (Chinese) <a href="https://github.com/dubbo/awesome-dubbo/blob/master/slides/meetup/201806%40Shanghai/nacos-open-source-initiative.pdf">slides</a></li>\n<li>Zhiwei Pan: Dubbo Practices on Internet Finance Industries (Chinese) <a href="https://github.com/dubbo/awesome-dubbo/blob/master/slides/meetup/201806%40Shanghai/dubbo-practices-on-internet-finance-industries.pdf">slides</a></li>\n</ul>\n'},{filename:"gsoc-2018.md",__html:'<h2>The GSoC(Google Summer of Code) 2018 projects has been announced</h2>\n<p>The GSoC(Google Summer of Code) 2018 projects has been announced, Raghu Reddy\'s project &quot;Extending Serialization protocols support for Apache Dubbo&quot; has been <a href="https://summerofcode.withgoogle.com/projects/#4747840161579008">accepted</a>! Congratulations!</p>\n'},{filename:"pinpoint.md",__html:'<h1>Tracking with Pinpoint</h1>\n<p>After using Dubbo to serve or integrate applications, assuming that a service backstage log shows an exception and that the service is invoked by multiple applications, it is often difficult to determine which application is called, and what is the cause of the problem, so we need a set of distributed tracking systems to quickly locate the problem. Pinpoint can help us quickly locate problems (of course, there are more than one solution).</p>\n<h2>What is Pinpoint</h2>\n<p><a href="https://github.com/naver/pinpoint">Pinpoint</a> is an APM (Application Performance Management) tool for large-scale distributed systems written in Java. Inspired by Dapper, Pinpoint provides a solution to help analyze the overall structure of the system and how components within them are interconnected by tracing transactions across distributed applications.</p>\n<p>You should definitely check Pinpoint out If you want to</p>\n<p>understand your application topology at a glance\nmonitor your application in Real-Time\ngain code-level visibility to every transaction\ninstall APM Agents without changing a single line of code\nhave minimal impact on the performance (approximately 3% increase in resource usage)</p>\n<h3>ServerMap</h3>\n<p>Understand the topology of any distributed systems by visualizing how their components are interconnected. Clicking on a node reveals details about the component, such as its current status, and transaction count.</p>\n<h3>Realtime Active Thread Chart</h3>\n<p>Monitor active threads inside applications in real-time.</p>\n<h3>Request/Response Scatter Chart</h3>\n<p>Visualize request count and response patterns over time to identify potential problems. Transactions can be selected for additional detail by dragging over the chart.</p>\n<h3>CallStack</h3>\n<p>Gain code-level visibility to every transaction in a distributed environment, identifying bottlenecks and points of failure in a single view.</p>\n<h3>Inspector</h3>\n<p>View additional details on the application such as CPU usage, Memory/Garbage Collection, TPS, and JVM arguments.</p>\n<h3>Supported Modules (last updated 2018/04/01)</h3>\n<ul>\n<li>JDK 6+</li>\n<li>Tomcat 6/7/8, Jetty 8/9, JBoss EAP 6, Resin 4, Websphere 6/7/8, Vertx 3.3/3.4/3.5</li>\n<li>Spring, Spring Boot (Embedded Tomcat, Jetty)</li>\n<li>Apache HTTP Client 3.x/4.x, JDK HttpConnector, GoogleHttpClient, OkHttpClient, NingAsyncHttpClient</li>\n<li>Thrift Client, Thrift Service, DUBBO PROVIDER, DUBBO CONSUMER</li>\n<li>ActiveMQ, RabbitMQ</li>\n<li>MySQL, Oracle, MSSQL, CUBRID,POSTGRESQL, MARIA</li>\n<li>Arcus, Memcached, Redis, CASSANDRA</li>\n<li>iBATIS, MyBatis</li>\n<li>DBCP, DBCP2, HIKARICP</li>\n<li>gson, Jackson, Json Lib</li>\n<li>log4j, Logback</li>\n</ul>\n<h2>Pinpoint and Dubbo</h2>\n<h3>Quickstart Pinpoint</h3>\n<p><a href="http://naver.github.io/pinpoint/quickstart.html">Quick start</a>（No neet to start TestApp）</p>\n<h3>Dubbo demo</h3>\n<h4>Create API module</h4>\n<p>pom.xml</p>\n<pre><code class="language-xml"><span class="php"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span><span class="hljs-meta">?&gt;</span></span>\n<span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span>\n         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span>\n         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span>\n</code></pre>\n<p>Create API interface：</p>\n<pre><code>package com.example.demoapi;\n\npublic interface HelloService {\n    String sayHello(String name);\n}\n</code></pre>\n<h4>Dubbo provider</h4>\n<p>pom.xml</p>\n<pre><code class="language-xml"><span class="php"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span><span class="hljs-meta">?&gt;</span></span>\n<span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span>\n\t<span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>\n\t<span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>\n\n\t<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n\t<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo-provider<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n\t<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>\n\t<span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span>\n\n\t<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>demo-provider<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>\n\n\t<span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span>\n\t<span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>\n\n\t<span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span>\n\t<span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>\n\n\t<span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>sonatype-nexus-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span>\n\t\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span>\n\t\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span>\n\t<span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span>\n\n\t<span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>\n\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>\n\t<span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>\n\n\t<span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>\n\t\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n\t\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>\n\t<span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span>\n\n<span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span>\n</code></pre>\n<ol>\n<li><code>HelloService</code> interface：</li>\n</ol>\n<pre><code class="language-java"><span class="hljs-keyword">package</span> com.example.demoprovider.provider;\n\n<span class="hljs-keyword">import</span> com.alibaba.dubbo.config.annotation.Service;\n<span class="hljs-keyword">import</span> com.example.demoapi.HelloService;\n\n<span class="hljs-meta">@Service</span>(version = <span class="hljs-string">"${demo.service.version}"</span>,\n        application = <span class="hljs-string">"${dubbo.application.id}"</span>,\n        protocol = <span class="hljs-string">"${dubbo.protocol.id}"</span>,\n        registry = <span class="hljs-string">"${dubbo.registry.id}"</span>)\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HelloService</span> </span>{\n    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;\n    <span class="hljs-meta">@Override</span>\n    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello</span><span class="hljs-params">(String name)</span> </span>{\n        i++;\n        <span class="hljs-keyword">if</span> (i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) {\n            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">"ex"</span>);\n        }\n        <span class="hljs-keyword">return</span> <span class="hljs-string">"Hello "</span> + name + <span class="hljs-string">"!"</span>;\n    }\n}\n</code></pre>\n<ol start="2">\n<li>Spring Boot bootstrap：</li>\n</ol>\n<pre><code class="language-java"><span class="hljs-keyword">package</span> com.example.demoprovider;\n\n<span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;\n<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;\n\n<span class="hljs-meta">@SpringBootApplication</span>\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoProviderApplication</span> </span>{\n\n\t<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{\n\t\tSpringApplication.run(DemoProviderApplication.class, args);\n\t}\n}\n</code></pre>\n<ol start="3">\n<li><code>application.properties</code>：</li>\n</ol>\n<pre><code class="language-properties"># Spring boot application\nspring.application.name = dubbo-provider-demo\nserver.port = 9090\nmanagement.port = 9091\n\n# Service version\ndemo.service.version = 1.0.0\n\n# Base packages to scan Dubbo Components (e.g @Service , @Reference)\ndubbo.scan.basePackages  = com.example.demoprovider\n\n# Dubbo Config properties\n## ApplicationConfig Bean\ndubbo.application.id = dubbo-provider-demo\ndubbo.application.name = dubbo-provider-demo\n\n## ProtocolConfig Bean\ndubbo.protocol.id = dubbo\ndubbo.protocol.name = dubbo\ndubbo.protocol.port = 12345\n\n## RegistryConfig Bean\ndubbo.registry.id = my-registry\ndubbo.registry.address = N/A\n</code></pre>\n<h4>Dubbo consumer</h4>\n<p>pom.xml</p>\n<pre><code class="language-xml"><span class="php"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span><span class="hljs-meta">?&gt;</span></span>\n<span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span>\n\t<span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>\n\t<span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>\n\n\t<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n\t<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo-consumer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n\t<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>\n\t<span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span>\n\n\t<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>demo-consumer<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>\n\n\t<span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span>\n\t<span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>\n\n\t<span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span>\n\t<span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>\n\n\t<span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>sonatype-nexus-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span>\n\t\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span>\n\t\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span>\n\t<span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span>\n\n\t<span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>\n\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>\n\t<span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>\n\n\t<span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>\n\t\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\n\t\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\n\t\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>\n\t\t\t\t\t<span class="hljs-tag">&lt;<span class="hljs-name">classifier</span>&gt;</span>exec<span class="hljs-tag">&lt;/<span class="hljs-name">classifier</span>&gt;</span>\n\t\t\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>\n\t\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>\n\t\t<span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>\n\t<span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span>\n\n<span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span>\n</code></pre>\n<ol>\n<li><code>@Reference</code> injection <code>HelloService</code></li>\n</ol>\n<pre><code class="language-java"><span class="hljs-keyword">package</span> com.example.democonsumer.controller;\n\n<span class="hljs-keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;\n<span class="hljs-keyword">import</span> com.example.demoapi.HelloService;\n<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;\n<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;\n<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;\n\n<span class="hljs-meta">@RestController</span>\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoConsumerController</span> </span>{\n    <span class="hljs-meta">@Reference</span>(version = <span class="hljs-string">"${demo.service.version}"</span>,\n            application = <span class="hljs-string">"${dubbo.application.id}"</span>,\n            url = <span class="hljs-string">"dubbo://&lt;Real IP Address&gt;:12345"</span>)\n    <span class="hljs-keyword">private</span> HelloService helloService;\n\n    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/sayHello"</span>)\n    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello</span><span class="hljs-params">(@RequestParam String name)</span> </span>{\n        <span class="hljs-keyword">return</span> helloService.sayHello(name);\n    }\n}\n</code></pre>\n<ol start="2">\n<li>Spring Boot bootstrap:</li>\n</ol>\n<pre><code class="language-java"><span class="hljs-keyword">package</span> com.example.democonsumer;\n\n<span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;\n<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;\n\n<span class="hljs-meta">@SpringBootApplication</span>\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoConsumerApplication</span> </span>{\n\n\t<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{\n\t\tSpringApplication.run(DemoConsumerApplication.class, args);\n\t}\n}\n</code></pre>\n<ol start="3">\n<li><code>application.properties</code>:</li>\n</ol>\n<pre><code class="language-properties"># Spring boot application\nspring.application.name=dubbo-consumer-demo\nserver.port=8080\nmanagement.port=8081\n\n# Service Version\ndemo.service.version=1.0.0\n\n# Dubbo Config properties\n## ApplicationConfig Bean\ndubbo.application.id=dubbo-consumer-demo\ndubbo.application.name=dubbo-consumer-demo\n\n## ProtocolConfig Bean\ndubbo.protocol.id=dubbo\ndubbo.protocol.name=dubbo\ndubbo.protocol.port=12345\n</code></pre>\n<h3>Using Pinpoint-agent to start <code>Dubbo provider</code> and <code>Dubbo consumer</code></h3>\n<ol>\n<li>Maven clean package</li>\n</ol>\n<pre><code>mvn clean package\n</code></pre>\n<ol start="2">\n<li>Start provider</li>\n</ol>\n<pre><code>java -jar -javaagent:$AGENT_PATH/pinpoint-bootstrap-$VERSION.jar -Dpinpoint.agentId=demo-provider -Dpinpoint.applicationName=DP target/demo-provider-0.0.1-SNAPSHOT.jar\n</code></pre>\n<ol start="3">\n<li>Start consumer</li>\n</ol>\n<pre><code>java -jar -javaagent:$AGENT_PATH/pinpoint-bootstrap-$VERSION.jar -Dpinpoint.agentId=demo-consumer -Dpinpoint.applicationName=DC target/demo-comsumer-0.0.1-SNAPSHOT-exec.jar\n</code></pre>\n<ol start="4">\n<li>Access the consumer address to simulate user requests</li>\n</ol>\n<p><code>http://localhost:8080/sayHello?name=ABC</code></p>\n<h2>Using Pinpoint locate problems</h2>\n<h3>Homepage</h3>\n<p><img src="../../img/blog/en_pinpoint-home.png" alt="/admin-guide/images/pinpoint-home.png"></p>\n<blockquote>\n<p>The user request here is double the number of requests for DubboProvider, because the favicon.ico icon request is recorded.</p>\n</blockquote>\n<h3>Call tree</h3>\n<p><img src="../../img/blog/en_pinpoint-calltree.png" alt="/admin-guide/images/pinpoint-calltree.png"></p>\n<h3>Mixed view</h3>\n<p><img src="../../img/blog/en_pinpoint-mixedview.png" alt="/admin-guide/images/pinpoint-mixedview.png"></p>\n<h3>Other</h3>\n<p>The example simply simulates the provision and call of Dubbo, and does not carry out the application of other middleware such as database. For detailed use, please refer to the Pinpoint document.</p>\n'},{filename:"qcon-beijing-2018.md",__html:'<h2>Dubbo roadmap is announced in QCon Beijing 2018</h2>\n<p>Ian Luo has delivered a great talk at QCon Beijing 2018, where the roadmap of Dubbo has also be announced. Please enjoy the <a href="https://github.com/dubbo/awesome-dubbo/raw/master/slides/qcon2018/dubbo-present-and-future.pdf">slides</a>!</p>\n'}]}},,,,,,,,,,,,,,,,,,,,,function(n,s){n.exports=".blog-detail-page .blog-content {\n  padding: 80px 20%;\n  margin: 66px auto 0;\n  max-width: 735px; }\n"},,,,,,,,,function(n,s,a){a(5)(a(99))}]);