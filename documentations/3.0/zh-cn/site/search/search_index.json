{"config":{"lang":["en"],"min_search_length":2,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"Dubbo Overview The core mission of Dubbo 3.0 is to embrace Cloud Native, makes Dubbo easy to use in building Cloud Native services. Dubbo 3.0 will provide the following features: Optimized Service Discovery Model Being able to support larger-scale cluster with millions of instances Interact with other Microservices stacks, e.g., SpringCloud, ... The next generation RPC protocol based on HTTP/2 Reactive Stream Backpressure HTTP/2 Routing Rule Support Kubernetes Native Service Work seamlessly with Service Mesh architecture Basic Architecture Features Transparent interface based RPC Intelligent load balancing Automatic service registration and discovery High extensibility Runtime traffic routing Visualized service governance","title":"Dubbo Overview"},{"location":"#dubbo-overview","text":"The core mission of Dubbo 3.0 is to embrace Cloud Native, makes Dubbo easy to use in building Cloud Native services. Dubbo 3.0 will provide the following features: Optimized Service Discovery Model Being able to support larger-scale cluster with millions of instances Interact with other Microservices stacks, e.g., SpringCloud, ... The next generation RPC protocol based on HTTP/2 Reactive Stream Backpressure HTTP/2 Routing Rule Support Kubernetes Native Service Work seamlessly with Service Mesh architecture","title":"Dubbo Overview"},{"location":"#basic-architecture","text":"","title":"Basic Architecture"},{"location":"#features","text":"Transparent interface based RPC Intelligent load balancing Automatic service registration and discovery High extensibility Runtime traffic routing Visualized service governance","title":"Features"},{"location":"admin/","text":"\u8fd9\u7bc7\u6587\u6863\u8be6\u7ec6\u8bb2\u8ff0\u4e86 Dubbo Admin\u7684\u7ed3\u6784\uff0c\u90e8\u7f72\u65b9\u5f0f\u548c\u529f\u80fd\u4ecb\u7ecd","title":"Home"},{"location":"admin/SUMMARY/","text":"1 Dubbo Admin\u4ecb\u7ecd 1.1 \u670d\u52a1\u641c\u7d22\u548c\u8be6\u60c5 1.2 \u670d\u52a1\u6cbb\u7406 1.3 \u670d\u52a1\u6d4b\u8bd5","title":"SUMMARY"},{"location":"admin/introduction/","text":"Dubbo\u7ba1\u7406\u63a7\u5236\u53f0\u4ecb\u7ecd \u76ee\u524d\u7684\u7ba1\u7406\u63a7\u5236\u53f0\u5df2\u7ecf\u53d1\u5e030.1\u7248\u672c\uff0c\u7ed3\u6784\u4e0a\u91c7\u53d6\u4e86\u524d\u540e\u7aef\u5206\u79bb\u7684\u65b9\u5f0f\uff0c\u524d\u7aef\u4f7f\u7528Vue\u548cVuetify\u5206\u522b\u4f5c\u4e3aJavascript\u6846\u67b6\u548cUI\u6846\u67b6\uff0c\u540e\u7aef\u91c7\u7528Spring Boot\u6846\u67b6\u3002\u65e2\u53ef\u4ee5\u6309\u7167\u6807\u51c6\u7684Maven\u65b9\u5f0f\u8fdb\u884c\u6253\u5305\uff0c\u90e8\u7f72\uff0c\u4e5f\u53ef\u4ee5\u91c7\u7528\u524d\u540e\u7aef\u5206\u79bb\u7684\u90e8\u7f72\u65b9\u5f0f\uff0c\u65b9\u4fbf\u5f00\u53d1\uff0c\u529f\u80fd\u4e0a\uff0c\u76ee\u524d\u5177\u5907\u4e86\u670d\u52a1\u67e5\u8be2\uff0c\u670d\u52a1\u6cbb\u7406(\u5305\u62ecDubbo2.7\u4e2d\u65b0\u589e\u7684\u6cbb\u7406\u89c4\u5219)\u4ee5\u53ca\u670d\u52a1\u6d4b\u8bd5\u4e09\u90e8\u5206\u5185\u5bb9\u3002 Maven\u65b9\u5f0f\u90e8\u7f72 \u5b89\u88c5 git clone https://github.com/apache/dubbo-admin.git cd dubbo-admin mvn clean package cd dubbo-admin-distribution/target java -jar dubbo-admin-0.1.jar \u8bbf\u95ee http://localhost:8080 \u524d\u540e\u7aef\u5206\u79bb\u90e8\u7f72 \u524d\u7aef cd dubbo-admin-ui npm install npm run dev \u540e\u7aef cd dubbo-admin-server mvn clean package cd target java -jar dubbo-admin-server-0.1.jar \u8bbf\u95ee http://localhost:8081 \u524d\u540e\u7aef\u5206\u79bb\u6a21\u5f0f\u4e0b\uff0c\u524d\u7aef\u7684\u4fee\u6539\u53ef\u4ee5\u5b9e\u65f6\u751f\u6548 \u914d\u7f6e: ^1 \u914d\u7f6e\u6587\u4ef6\u4e3a\uff1a dubbo-admin-server/src/main/resources/application.properties \u4e3b\u8981\u7684\u914d\u7f6e\u6709\uff1a admin.config-center=zookeeper://127.0.0.1:2181 admin.registry.address=zookeeper://127.0.0.1:2181 admin.metadata-report.address=zookeeper://127.0.0.1:2181 \u4e09\u4e2a\u914d\u7f6e\u9879\u5206\u522b\u6307\u5b9a\u4e86\u914d\u7f6e\u4e2d\u5fc3\uff0c\u6ce8\u518c\u4e2d\u5fc3\u548c\u5143\u6570\u636e\u4e2d\u5fc3\u7684\u5730\u5740\uff0c\u5173\u4e8e\u8fd9\u4e09\u4e2a\u4e2d\u5fc3\u7684\u8be6\u7ec6\u8bf4\u660e\uff0c\u53ef\u4ee5\u53c2\u8003 \u8fd9\u91cc \u3002 \u4e5f\u53ef\u4ee5\u548cDubbo2.7\u4e00\u6837\uff0c\u5728\u914d\u7f6e\u4e2d\u5fc3\u6307\u5b9a\u5143\u6570\u636e\u548c\u6ce8\u518c\u4e2d\u5fc3\u7684\u5730\u5740\uff0c\u4ee5zookeeper\u4e3a\u4f8b\uff0c\u914d\u7f6e\u7684\u8def\u5f84\u548c\u5185\u5bb9\u5982\u4e0b: # /dubbo/config/dubbo/dubbo.properties dubbo.registry.address=zookeeper://127.0.0.1:2181 dubbo.metadata-report.address=zookeeper://127.0.0.1:2181 \u914d\u7f6e\u4e2d\u5fc3\u91cc\u7684\u5730\u5740\u4f1a\u8986\u76d6\u6389\u672c\u5730 application.properties \u7684\u914d\u7f6e \u5176\u4ed6\u914d\u7f6e\u8bf7\u8bbf\u95eegithub\u4e2d\u7684\u6587\u6863: https://github.com/apache/dubbo-admin","title":"Dubbo Admin\u4ecb\u7ecd"},{"location":"admin/introduction/#dubbo","text":"\u76ee\u524d\u7684\u7ba1\u7406\u63a7\u5236\u53f0\u5df2\u7ecf\u53d1\u5e030.1\u7248\u672c\uff0c\u7ed3\u6784\u4e0a\u91c7\u53d6\u4e86\u524d\u540e\u7aef\u5206\u79bb\u7684\u65b9\u5f0f\uff0c\u524d\u7aef\u4f7f\u7528Vue\u548cVuetify\u5206\u522b\u4f5c\u4e3aJavascript\u6846\u67b6\u548cUI\u6846\u67b6\uff0c\u540e\u7aef\u91c7\u7528Spring Boot\u6846\u67b6\u3002\u65e2\u53ef\u4ee5\u6309\u7167\u6807\u51c6\u7684Maven\u65b9\u5f0f\u8fdb\u884c\u6253\u5305\uff0c\u90e8\u7f72\uff0c\u4e5f\u53ef\u4ee5\u91c7\u7528\u524d\u540e\u7aef\u5206\u79bb\u7684\u90e8\u7f72\u65b9\u5f0f\uff0c\u65b9\u4fbf\u5f00\u53d1\uff0c\u529f\u80fd\u4e0a\uff0c\u76ee\u524d\u5177\u5907\u4e86\u670d\u52a1\u67e5\u8be2\uff0c\u670d\u52a1\u6cbb\u7406(\u5305\u62ecDubbo2.7\u4e2d\u65b0\u589e\u7684\u6cbb\u7406\u89c4\u5219)\u4ee5\u53ca\u670d\u52a1\u6d4b\u8bd5\u4e09\u90e8\u5206\u5185\u5bb9\u3002","title":"Dubbo\u7ba1\u7406\u63a7\u5236\u53f0\u4ecb\u7ecd"},{"location":"admin/introduction/#maven","text":"\u5b89\u88c5 git clone https://github.com/apache/dubbo-admin.git cd dubbo-admin mvn clean package cd dubbo-admin-distribution/target java -jar dubbo-admin-0.1.jar \u8bbf\u95ee http://localhost:8080","title":"Maven\u65b9\u5f0f\u90e8\u7f72"},{"location":"admin/introduction/#_1","text":"\u524d\u7aef cd dubbo-admin-ui npm install npm run dev \u540e\u7aef cd dubbo-admin-server mvn clean package cd target java -jar dubbo-admin-server-0.1.jar \u8bbf\u95ee http://localhost:8081 \u524d\u540e\u7aef\u5206\u79bb\u6a21\u5f0f\u4e0b\uff0c\u524d\u7aef\u7684\u4fee\u6539\u53ef\u4ee5\u5b9e\u65f6\u751f\u6548","title":"\u524d\u540e\u7aef\u5206\u79bb\u90e8\u7f72"},{"location":"admin/introduction/#1","text":"\u914d\u7f6e\u6587\u4ef6\u4e3a\uff1a dubbo-admin-server/src/main/resources/application.properties \u4e3b\u8981\u7684\u914d\u7f6e\u6709\uff1a admin.config-center=zookeeper://127.0.0.1:2181 admin.registry.address=zookeeper://127.0.0.1:2181 admin.metadata-report.address=zookeeper://127.0.0.1:2181 \u4e09\u4e2a\u914d\u7f6e\u9879\u5206\u522b\u6307\u5b9a\u4e86\u914d\u7f6e\u4e2d\u5fc3\uff0c\u6ce8\u518c\u4e2d\u5fc3\u548c\u5143\u6570\u636e\u4e2d\u5fc3\u7684\u5730\u5740\uff0c\u5173\u4e8e\u8fd9\u4e09\u4e2a\u4e2d\u5fc3\u7684\u8be6\u7ec6\u8bf4\u660e\uff0c\u53ef\u4ee5\u53c2\u8003 \u8fd9\u91cc \u3002 \u4e5f\u53ef\u4ee5\u548cDubbo2.7\u4e00\u6837\uff0c\u5728\u914d\u7f6e\u4e2d\u5fc3\u6307\u5b9a\u5143\u6570\u636e\u548c\u6ce8\u518c\u4e2d\u5fc3\u7684\u5730\u5740\uff0c\u4ee5zookeeper\u4e3a\u4f8b\uff0c\u914d\u7f6e\u7684\u8def\u5f84\u548c\u5185\u5bb9\u5982\u4e0b: # /dubbo/config/dubbo/dubbo.properties dubbo.registry.address=zookeeper://127.0.0.1:2181 dubbo.metadata-report.address=zookeeper://127.0.0.1:2181 \u914d\u7f6e\u4e2d\u5fc3\u91cc\u7684\u5730\u5740\u4f1a\u8986\u76d6\u6389\u672c\u5730 application.properties \u7684\u914d\u7f6e \u5176\u4ed6\u914d\u7f6e\u8bf7\u8bbf\u95eegithub\u4e2d\u7684\u6587\u6863: https://github.com/apache/dubbo-admin","title":"\u914d\u7f6e: ^1"},{"location":"admin/serviceGovernance/","text":"\u670d\u52a1\u6cbb\u7406\u548c\u914d\u7f6e\u7ba1\u7406 \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u6cbb\u7406\u4e3b\u8981\u4f5c\u7528\u662f\u6539\u53d8\u8fd0\u884c\u65f6\u670d\u52a1\u7684\u884c\u4e3a\u548c\u9009\u5740\u903b\u8f91\uff0c\u8fbe\u5230\u9650\u6d41\uff0c\u6743\u91cd\u914d\u7f6e\u7b49\u76ee\u7684\uff0c\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u4e2a\u529f\u80fd\uff1a \u5e94\u7528\u7ea7\u522b\u7684\u670d\u52a1\u6cbb\u7406 \u5728Dubbo2.6\u53ca\u66f4\u65e9\u7248\u672c\u4e2d\uff0c\u6240\u6709\u7684\u670d\u52a1\u6cbb\u7406\u89c4\u5219\u90fd\u53ea\u9488\u5bf9\u670d\u52a1\u7c92\u5ea6\uff0c\u5982\u679c\u8981\u628a\u67d0\u6761\u89c4\u5219\u4f5c\u7528\u5230\u5e94\u7528\u7c92\u5ea6\u4e0a\uff0c\u9700\u8981\u4e3a\u5e94\u7528\u4e0b\u7684\u6240\u6709\u670d\u52a1\u914d\u5408\u76f8\u540c\u7684\u89c4\u5219\uff0c\u53d8\u66f4\uff0c\u5220\u9664\u7684\u65f6\u5019\u4e5f\u9700\u8981\u5bf9\u5e94\u7684\u64cd\u4f5c\uff0c\u8fd9\u6837\u7684\u64cd\u4f5c\u5f88\u4e0d\u53cb\u597d\uff0c\u56e0\u6b64Dubbo2.7\u7248\u672c\u4e2d\u589e\u52a0\u4e86\u5e94\u7528\u7c92\u5ea6\u7684\u670d\u52a1\u6cbb\u7406\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u6761\u4ef6\u8def\u7531(\u5305\u62ec\u9ed1\u767d\u540d\u5355)\uff0c\u52a8\u6001\u914d\u7f6e(\u5305\u62ec\u6743\u91cd\uff0c\u8d1f\u8f7d\u5747\u8861)\u90fd\u53ef\u4ee5\u505a\u5e94\u7528\u7ea7\u522b\u7684\u914d\u7f6e\uff1a \u4e0a\u56fe\u662f\u6761\u4ef6\u8def\u7531\u7684\u914d\u7f6e\uff0c\u53ef\u4ee5\u6309\u7167\u5e94\u7528\u540d\uff0c\u670d\u52a1\u540d\u4e24\u4e2a\u7ef4\u5ea6\u6765\u586b\u5199\uff0c\u4e5f\u53ef\u4ee5\u6309\u7167\u8fd9\u4e24\u4e2a\u7ef4\u5ea6\u6765\u67e5\u8be2\u3002 \u6807\u7b7e\u8def\u7531 \u6807\u7b7e\u8def\u7531\u662fDubbo2.7\u5f15\u5165\u7684\u65b0\u529f\u80fd\uff0c\u914d\u7f6e\u4ee5\u5e94\u7528\u4f5c\u4e3a\u7ef4\u5ea6\uff0c\u7ed9\u4e0d\u540c\u7684\u670d\u52a1\u5668\u6253\u4e0a\u4e0d\u540c\u540d\u5b57\u7684\u6807\u7b7e\uff0c\u914d\u7f6e\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u8c03\u7528\u7684\u65f6\u5019\uff0c\u5ba2\u6237\u7aef\u53ef\u4ee5\u901a\u8fc7 setAttachment \u7684\u65b9\u5f0f\uff0c\u6765\u8bbe\u7f6e\u4e0d\u540c\u7684\u6807\u7b7e\u540d\u79f0\uff0c\u6bd4\u5982\u672c\u4f8b\u4e2d\uff0c setAttachment(tag1) \uff0c\u5ba2\u6237\u7aef\u7684\u9009\u5740\u8303\u56f4\u5c31\u5728\u5982\u56fe\u6240\u793a\u7684\u4e09\u53f0\u673a\u5668\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u6765\u5b9e\u73b0\u6d41\u91cf\u9694\u79bb\uff0c\u7070\u5ea6\u53d1\u5e03\u7b49\u529f\u80fd\u3002 \u6761\u4ef6\u8def\u7531 \u6761\u4ef6\u8def\u7531\u662fDubbo\u4e00\u76f4\u4ee5\u6765\u5c31\u6709\u7684\u529f\u80fd\uff0c\u76ee\u524d\u53ef\u4ee5\u914d\u7f6e\u670d\u52a1\u548c\u5e94\u7528\u4e24\u4e2a\u7ef4\u5ea6\uff0c\u6761\u4ef6\u8def\u7531\u4e3a yaml \u683c\u5f0f\uff0c\u5177\u4f53\u7684\u89c4\u5219\u4f53\u4ee5\u53ca\u5404\u79cd\u9002\u7528\u573a\u666f\uff0c\u8bf7\u53c2\u8003 \u8fd9\u91cc \u9ed1\u767d\u540d\u5355 \u9ed1\u767d\u540d\u5355\u662f\u6761\u4ef6\u8def\u7531\u7684\u4e00\u90e8\u5206\uff0c\u89c4\u5219\u5b58\u50a8\u548c\u6761\u4ef6\u8def\u7531\u653e\u5728\u4e00\u8d77\uff0c\u4e3a\u4e86\u65b9\u4fbf\u914d\u7f6e\u6240\u4ee5\u5355\u72ec\u62ff\u51fa\u6765\uff0c\u540c\u6837\u53ef\u4ee5\u901a\u8fc7\u670d\u52a1\u548c\u5e94\u7528\u4e24\u4e2a\u7ef4\u5ea6\uff0c\u6307\u5b9a\u9ed1\u540d\u5355\u548c\u767d\u540d\u5355: \u52a8\u6001\u914d\u7f6e \u52a8\u6001\u914d\u7f6e\u662f\u548c\u8def\u7531\u89c4\u5219\u5e73\u884c\u7684\u53e6\u4e00\u7c7b\u670d\u52a1\u6cbb\u7406\u6cbb\u7406\u529f\u80fd\uff0c\u4e3b\u8981\u4f5c\u7528\u662f\u5728\u4e0d\u91cd\u542f\u670d\u52a1\u7684\u60c5\u51b5\u4e0b\uff0c\u52a8\u6001\u6539\u53d8\u8c03\u7528\u884c\u4e3a\uff0c\u4eceDubbo2.7\u7248\u672c\u5f00\u59cb\uff0c\u652f\u6301\u670d\u52a1\u548c\u5e94\u7528\u4e24\u4e2a\u7ef4\u5ea6\u7684\u914d\u7f6e\uff0c\u91c7\u7528 yaml \u683c\u5f0f\uff0c\u754c\u9762\u5982\u4e0b\uff1a \u5177\u4f53\u7684\u89c4\u5219\u4f53\u8bf4\u660e\u8bf7\u53c2\u8003 \u8fd9\u91cc \u6743\u91cd\u8c03\u8282 \u6743\u91cd\u8c03\u8282\u662f\u52a8\u6001\u914d\u7f6e\u7684\u5b50\u529f\u80fd\uff0c\u4e3b\u8981\u4f5c\u7528\u662f\u6539\u53d8\u670d\u52a1\u7aef\u7684\u6743\u91cd\uff0c\u66f4\u5927\u7684\u6743\u91cd\u4f1a\u6709\u66f4\u5927\u7684\u51e0\u7387\u88ab\u5ba2\u6237\u7aef\u9009\u4e2d\u4f5c\u4e3a\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u4ece\u800c\u8fbe\u5230\u6d41\u91cf\u5206\u914d\u7684\u76ee\u7684\uff1a \u8d1f\u8f7d\u5747\u8861 \u8d1f\u8f7d\u5747\u8861\u4e5f\u662f\u52a8\u6001\u914d\u7f6e\u7684\u5b50\u529f\u80fd\uff0c\u4e3b\u8981\u4f5c\u7528\u662f\u8c03\u6574\u5ba2\u6237\u7aef\u7684\u9009\u5740\u903b\u8f91\uff0c\u76ee\u524d\u53ef\u9009\u7684\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\u6709\u968f\u673a\uff0c\u8f6e\u8bad\u548c\u6700\u5c0f\u6d3b\u8dc3\uff0c\u5173\u4e8e\u5404\u4e2a\u7b56\u7565\u7684\u89e3\u91ca\u8bf7\u53c2\u8003 \u8fd9\u91cc \u914d\u7f6e\u7ba1\u7406 \u914d\u7f6e\u7ba1\u7406\u4e5f\u662f\u914d\u5408Dubbo2.7\u65b0\u589e\u7684\u529f\u80fd\uff0c\u5728Dubbo2.7\u4e2d\uff0c\u589e\u52a0\u4e86\u5168\u5c40\u548c\u5e94\u7528\u7ef4\u5ea6\u7684\u914d\u7f6e\uff0c\u5206\u522b\u5728\u5168\u5c40\u548c\u5e94\u7528\u8303\u56f4\u5185\u751f\u6548\uff0c\u5176\u4e2d\u5e94\u7528\u914d\u7f6e\u4e5f\u53ef\u4ee5\u6307\u5b9a\u8be5\u5e94\u7528\u4e2d\u7684\u670d\u52a1\u7ea7\u522b\u7684\u914d\u7f6e\uff0c\u53ef\u4ee5\u5728\u63a7\u5236\u53f0\u4e2d\u67e5\u770b\uff0c\u4fee\u6539\u914d\u7f6e\u89c4\u5219\uff0c\u9ed8\u8ba4\u5c55\u793a\u5168\u5c40\u7ef4\u5ea6\u7684\u914d\u7f6e\u3002 * \u5168\u5c40\u914d\u7f6e\uff1a \u5168\u5c40\u914d\u7f6e\u91cc\u53ef\u4ee5\u6307\u5b9a\u6ce8\u518c\u4e2d\u5fc3\uff0c\u5143\u6570\u636e\u4e2d\u5fc3\u7684\u5730\u5740\uff0c\u670d\u52a1\u7aef\u548c\u5ba2\u6237\u7aef\u7684\u8d85\u65f6\u65f6\u95f4\u7b49\uff0c\u8fd9\u4e9b\u914d\u7f6e\u5728\u5168\u5c40\u5185\u751f\u6548\u3002\u9664\u4e86\u914d\u7f6e\u5199\u5165\uff0c\u4e5f\u53ef\u4ee5\u7528\u6765\u67e5\u770b\u3002\u5982\u679c\u4f7f\u7528zookeeper\u4f5c\u4e3a\u6ce8\u518c\u4e2d\u5fc3\u548c\u5143\u6570\u636e\u4e2d\u5fc3\uff0c\u8fd8\u53ef\u4ee5\u770b\u5230\u914d\u7f6e\u6587\u4ef6\u6240\u5728\u4f4d\u7f6e\u7684\u76ee\u5f55\u7ed3\u6784\u3002 \u5e94\u7528\uff0c \u670d\u52a1\u914d\u7f6e \u5e94\u7528\u7ea7\u522b\u7684\u914d\u7f6e\u53ef\u4ee5\u4e3a\u5e94\u7528\u6216\u8005\u5e94\u7528\u5185\u7684\u670d\u52a1\u6307\u5b9a\u914d\u7f6e\uff0c\u5728\u670d\u52a1\u7ef4\u5ea6\u4e0a\uff0c\u9700\u8981\u533a\u5206\u63d0\u4f9b\u8005\u548c\u6d88\u8d39\u8005\u3002 dubbo.reference.{serviceName} \u8868\u793a\u4f5c\u4e3a\u8be5\u670d\u52a1\u6d88\u8d39\u8005\u7684\u914d\u7f6e\uff0c dubbo.provider.{servcieName} \u8868\u793a\u4f5c\u4e3a\u8be5\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u914d\u7f6e\u3002\u5176\u4e2d\u6ce8\u518c\u4e2d\u5fc3\u548c\u5143\u6570\u636e\u4e2d\u5fc3\u7684\u5730\u5740\uff0c\u53ea\u80fd\u5728\u5168\u5c40\u914d\u7f6e\u4e2d\u6307\u5b9a\uff0c\u8fd9\u4e5f\u662fDubbo2.7\u4e2d\u63a8\u8350\u7684\u4f7f\u7528\u65b9\u5f0f\u3002 \u4f18\u5148\u7ea7\uff1a \u670d\u52a1\u914d\u7f6e \u5e94\u7528\u914d\u7f6e \u5168\u5c40\u914d\u7f6e","title":"\u670d\u52a1\u6cbb\u7406"},{"location":"admin/serviceGovernance/#_1","text":"","title":"\u670d\u52a1\u6cbb\u7406\u548c\u914d\u7f6e\u7ba1\u7406"},{"location":"admin/serviceGovernance/#_2","text":"\u670d\u52a1\u6cbb\u7406\u4e3b\u8981\u4f5c\u7528\u662f\u6539\u53d8\u8fd0\u884c\u65f6\u670d\u52a1\u7684\u884c\u4e3a\u548c\u9009\u5740\u903b\u8f91\uff0c\u8fbe\u5230\u9650\u6d41\uff0c\u6743\u91cd\u914d\u7f6e\u7b49\u76ee\u7684\uff0c\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u4e2a\u529f\u80fd\uff1a","title":"\u670d\u52a1\u6cbb\u7406"},{"location":"admin/serviceGovernance/#_3","text":"\u5728Dubbo2.6\u53ca\u66f4\u65e9\u7248\u672c\u4e2d\uff0c\u6240\u6709\u7684\u670d\u52a1\u6cbb\u7406\u89c4\u5219\u90fd\u53ea\u9488\u5bf9\u670d\u52a1\u7c92\u5ea6\uff0c\u5982\u679c\u8981\u628a\u67d0\u6761\u89c4\u5219\u4f5c\u7528\u5230\u5e94\u7528\u7c92\u5ea6\u4e0a\uff0c\u9700\u8981\u4e3a\u5e94\u7528\u4e0b\u7684\u6240\u6709\u670d\u52a1\u914d\u5408\u76f8\u540c\u7684\u89c4\u5219\uff0c\u53d8\u66f4\uff0c\u5220\u9664\u7684\u65f6\u5019\u4e5f\u9700\u8981\u5bf9\u5e94\u7684\u64cd\u4f5c\uff0c\u8fd9\u6837\u7684\u64cd\u4f5c\u5f88\u4e0d\u53cb\u597d\uff0c\u56e0\u6b64Dubbo2.7\u7248\u672c\u4e2d\u589e\u52a0\u4e86\u5e94\u7528\u7c92\u5ea6\u7684\u670d\u52a1\u6cbb\u7406\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u6761\u4ef6\u8def\u7531(\u5305\u62ec\u9ed1\u767d\u540d\u5355)\uff0c\u52a8\u6001\u914d\u7f6e(\u5305\u62ec\u6743\u91cd\uff0c\u8d1f\u8f7d\u5747\u8861)\u90fd\u53ef\u4ee5\u505a\u5e94\u7528\u7ea7\u522b\u7684\u914d\u7f6e\uff1a \u4e0a\u56fe\u662f\u6761\u4ef6\u8def\u7531\u7684\u914d\u7f6e\uff0c\u53ef\u4ee5\u6309\u7167\u5e94\u7528\u540d\uff0c\u670d\u52a1\u540d\u4e24\u4e2a\u7ef4\u5ea6\u6765\u586b\u5199\uff0c\u4e5f\u53ef\u4ee5\u6309\u7167\u8fd9\u4e24\u4e2a\u7ef4\u5ea6\u6765\u67e5\u8be2\u3002","title":"\u5e94\u7528\u7ea7\u522b\u7684\u670d\u52a1\u6cbb\u7406"},{"location":"admin/serviceGovernance/#_4","text":"\u6807\u7b7e\u8def\u7531\u662fDubbo2.7\u5f15\u5165\u7684\u65b0\u529f\u80fd\uff0c\u914d\u7f6e\u4ee5\u5e94\u7528\u4f5c\u4e3a\u7ef4\u5ea6\uff0c\u7ed9\u4e0d\u540c\u7684\u670d\u52a1\u5668\u6253\u4e0a\u4e0d\u540c\u540d\u5b57\u7684\u6807\u7b7e\uff0c\u914d\u7f6e\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u8c03\u7528\u7684\u65f6\u5019\uff0c\u5ba2\u6237\u7aef\u53ef\u4ee5\u901a\u8fc7 setAttachment \u7684\u65b9\u5f0f\uff0c\u6765\u8bbe\u7f6e\u4e0d\u540c\u7684\u6807\u7b7e\u540d\u79f0\uff0c\u6bd4\u5982\u672c\u4f8b\u4e2d\uff0c setAttachment(tag1) \uff0c\u5ba2\u6237\u7aef\u7684\u9009\u5740\u8303\u56f4\u5c31\u5728\u5982\u56fe\u6240\u793a\u7684\u4e09\u53f0\u673a\u5668\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u6765\u5b9e\u73b0\u6d41\u91cf\u9694\u79bb\uff0c\u7070\u5ea6\u53d1\u5e03\u7b49\u529f\u80fd\u3002","title":"\u6807\u7b7e\u8def\u7531"},{"location":"admin/serviceGovernance/#_5","text":"\u6761\u4ef6\u8def\u7531\u662fDubbo\u4e00\u76f4\u4ee5\u6765\u5c31\u6709\u7684\u529f\u80fd\uff0c\u76ee\u524d\u53ef\u4ee5\u914d\u7f6e\u670d\u52a1\u548c\u5e94\u7528\u4e24\u4e2a\u7ef4\u5ea6\uff0c\u6761\u4ef6\u8def\u7531\u4e3a yaml \u683c\u5f0f\uff0c\u5177\u4f53\u7684\u89c4\u5219\u4f53\u4ee5\u53ca\u5404\u79cd\u9002\u7528\u573a\u666f\uff0c\u8bf7\u53c2\u8003 \u8fd9\u91cc","title":"\u6761\u4ef6\u8def\u7531"},{"location":"admin/serviceGovernance/#_6","text":"\u9ed1\u767d\u540d\u5355\u662f\u6761\u4ef6\u8def\u7531\u7684\u4e00\u90e8\u5206\uff0c\u89c4\u5219\u5b58\u50a8\u548c\u6761\u4ef6\u8def\u7531\u653e\u5728\u4e00\u8d77\uff0c\u4e3a\u4e86\u65b9\u4fbf\u914d\u7f6e\u6240\u4ee5\u5355\u72ec\u62ff\u51fa\u6765\uff0c\u540c\u6837\u53ef\u4ee5\u901a\u8fc7\u670d\u52a1\u548c\u5e94\u7528\u4e24\u4e2a\u7ef4\u5ea6\uff0c\u6307\u5b9a\u9ed1\u540d\u5355\u548c\u767d\u540d\u5355:","title":"\u9ed1\u767d\u540d\u5355"},{"location":"admin/serviceGovernance/#_7","text":"\u52a8\u6001\u914d\u7f6e\u662f\u548c\u8def\u7531\u89c4\u5219\u5e73\u884c\u7684\u53e6\u4e00\u7c7b\u670d\u52a1\u6cbb\u7406\u6cbb\u7406\u529f\u80fd\uff0c\u4e3b\u8981\u4f5c\u7528\u662f\u5728\u4e0d\u91cd\u542f\u670d\u52a1\u7684\u60c5\u51b5\u4e0b\uff0c\u52a8\u6001\u6539\u53d8\u8c03\u7528\u884c\u4e3a\uff0c\u4eceDubbo2.7\u7248\u672c\u5f00\u59cb\uff0c\u652f\u6301\u670d\u52a1\u548c\u5e94\u7528\u4e24\u4e2a\u7ef4\u5ea6\u7684\u914d\u7f6e\uff0c\u91c7\u7528 yaml \u683c\u5f0f\uff0c\u754c\u9762\u5982\u4e0b\uff1a \u5177\u4f53\u7684\u89c4\u5219\u4f53\u8bf4\u660e\u8bf7\u53c2\u8003 \u8fd9\u91cc","title":"\u52a8\u6001\u914d\u7f6e"},{"location":"admin/serviceGovernance/#_8","text":"\u6743\u91cd\u8c03\u8282\u662f\u52a8\u6001\u914d\u7f6e\u7684\u5b50\u529f\u80fd\uff0c\u4e3b\u8981\u4f5c\u7528\u662f\u6539\u53d8\u670d\u52a1\u7aef\u7684\u6743\u91cd\uff0c\u66f4\u5927\u7684\u6743\u91cd\u4f1a\u6709\u66f4\u5927\u7684\u51e0\u7387\u88ab\u5ba2\u6237\u7aef\u9009\u4e2d\u4f5c\u4e3a\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u4ece\u800c\u8fbe\u5230\u6d41\u91cf\u5206\u914d\u7684\u76ee\u7684\uff1a","title":"\u6743\u91cd\u8c03\u8282"},{"location":"admin/serviceGovernance/#_9","text":"\u8d1f\u8f7d\u5747\u8861\u4e5f\u662f\u52a8\u6001\u914d\u7f6e\u7684\u5b50\u529f\u80fd\uff0c\u4e3b\u8981\u4f5c\u7528\u662f\u8c03\u6574\u5ba2\u6237\u7aef\u7684\u9009\u5740\u903b\u8f91\uff0c\u76ee\u524d\u53ef\u9009\u7684\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\u6709\u968f\u673a\uff0c\u8f6e\u8bad\u548c\u6700\u5c0f\u6d3b\u8dc3\uff0c\u5173\u4e8e\u5404\u4e2a\u7b56\u7565\u7684\u89e3\u91ca\u8bf7\u53c2\u8003 \u8fd9\u91cc","title":"\u8d1f\u8f7d\u5747\u8861"},{"location":"admin/serviceGovernance/#_10","text":"\u914d\u7f6e\u7ba1\u7406\u4e5f\u662f\u914d\u5408Dubbo2.7\u65b0\u589e\u7684\u529f\u80fd\uff0c\u5728Dubbo2.7\u4e2d\uff0c\u589e\u52a0\u4e86\u5168\u5c40\u548c\u5e94\u7528\u7ef4\u5ea6\u7684\u914d\u7f6e\uff0c\u5206\u522b\u5728\u5168\u5c40\u548c\u5e94\u7528\u8303\u56f4\u5185\u751f\u6548\uff0c\u5176\u4e2d\u5e94\u7528\u914d\u7f6e\u4e5f\u53ef\u4ee5\u6307\u5b9a\u8be5\u5e94\u7528\u4e2d\u7684\u670d\u52a1\u7ea7\u522b\u7684\u914d\u7f6e\uff0c\u53ef\u4ee5\u5728\u63a7\u5236\u53f0\u4e2d\u67e5\u770b\uff0c\u4fee\u6539\u914d\u7f6e\u89c4\u5219\uff0c\u9ed8\u8ba4\u5c55\u793a\u5168\u5c40\u7ef4\u5ea6\u7684\u914d\u7f6e\u3002 * \u5168\u5c40\u914d\u7f6e\uff1a \u5168\u5c40\u914d\u7f6e\u91cc\u53ef\u4ee5\u6307\u5b9a\u6ce8\u518c\u4e2d\u5fc3\uff0c\u5143\u6570\u636e\u4e2d\u5fc3\u7684\u5730\u5740\uff0c\u670d\u52a1\u7aef\u548c\u5ba2\u6237\u7aef\u7684\u8d85\u65f6\u65f6\u95f4\u7b49\uff0c\u8fd9\u4e9b\u914d\u7f6e\u5728\u5168\u5c40\u5185\u751f\u6548\u3002\u9664\u4e86\u914d\u7f6e\u5199\u5165\uff0c\u4e5f\u53ef\u4ee5\u7528\u6765\u67e5\u770b\u3002\u5982\u679c\u4f7f\u7528zookeeper\u4f5c\u4e3a\u6ce8\u518c\u4e2d\u5fc3\u548c\u5143\u6570\u636e\u4e2d\u5fc3\uff0c\u8fd8\u53ef\u4ee5\u770b\u5230\u914d\u7f6e\u6587\u4ef6\u6240\u5728\u4f4d\u7f6e\u7684\u76ee\u5f55\u7ed3\u6784\u3002 \u5e94\u7528\uff0c \u670d\u52a1\u914d\u7f6e \u5e94\u7528\u7ea7\u522b\u7684\u914d\u7f6e\u53ef\u4ee5\u4e3a\u5e94\u7528\u6216\u8005\u5e94\u7528\u5185\u7684\u670d\u52a1\u6307\u5b9a\u914d\u7f6e\uff0c\u5728\u670d\u52a1\u7ef4\u5ea6\u4e0a\uff0c\u9700\u8981\u533a\u5206\u63d0\u4f9b\u8005\u548c\u6d88\u8d39\u8005\u3002 dubbo.reference.{serviceName} \u8868\u793a\u4f5c\u4e3a\u8be5\u670d\u52a1\u6d88\u8d39\u8005\u7684\u914d\u7f6e\uff0c dubbo.provider.{servcieName} \u8868\u793a\u4f5c\u4e3a\u8be5\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u914d\u7f6e\u3002\u5176\u4e2d\u6ce8\u518c\u4e2d\u5fc3\u548c\u5143\u6570\u636e\u4e2d\u5fc3\u7684\u5730\u5740\uff0c\u53ea\u80fd\u5728\u5168\u5c40\u914d\u7f6e\u4e2d\u6307\u5b9a\uff0c\u8fd9\u4e5f\u662fDubbo2.7\u4e2d\u63a8\u8350\u7684\u4f7f\u7528\u65b9\u5f0f\u3002 \u4f18\u5148\u7ea7\uff1a \u670d\u52a1\u914d\u7f6e \u5e94\u7528\u914d\u7f6e \u5168\u5c40\u914d\u7f6e","title":"\u914d\u7f6e\u7ba1\u7406"},{"location":"admin/serviceSearch/","text":"\u670d\u52a1\u67e5\u8be2\u548c\u8be6\u60c5\u5c55\u793a \u670d\u52a1\u67e5\u8be2\u662fDubbo OPS\u6700\u57fa\u672c\u7684\u529f\u80fd\uff0c\u76ee\u524d\u652f\u6301\u670d\u52a1\uff0c\u5e94\u7528\u548cIP\u4e09\u4e2a\u7ef4\u5ea6\u7684\u67e5\u8be2\uff0c\u5e76\u4e14\u670d\u52a1\u548c\u5e94\u7528\u652f\u6301\u6a21\u7cca\u67e5\u8be2\u548c\u81ea\u52a8\u63d0\u793a: \u5176\u4e2d\u8be6\u60c5\u9875\u5c55\u793a\u4e86\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u6d88\u8d39\u8005\u7b49\u4fe1\u606f\uff0c\u5143\u6570\u636e\u4fe1\u606f\u9700\u8981\u5728Dubbo2.7\u53ca\u4e4b\u540e\u7684\u7248\u672c\u624d\u4f1a\u5c55\u793a:","title":"\u670d\u52a1\u641c\u7d22\u548c\u8be6\u60c5"},{"location":"admin/serviceSearch/#_1","text":"\u670d\u52a1\u67e5\u8be2\u662fDubbo OPS\u6700\u57fa\u672c\u7684\u529f\u80fd\uff0c\u76ee\u524d\u652f\u6301\u670d\u52a1\uff0c\u5e94\u7528\u548cIP\u4e09\u4e2a\u7ef4\u5ea6\u7684\u67e5\u8be2\uff0c\u5e76\u4e14\u670d\u52a1\u548c\u5e94\u7528\u652f\u6301\u6a21\u7cca\u67e5\u8be2\u548c\u81ea\u52a8\u63d0\u793a: \u5176\u4e2d\u8be6\u60c5\u9875\u5c55\u793a\u4e86\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u6d88\u8d39\u8005\u7b49\u4fe1\u606f\uff0c\u5143\u6570\u636e\u4fe1\u606f\u9700\u8981\u5728Dubbo2.7\u53ca\u4e4b\u540e\u7684\u7248\u672c\u624d\u4f1a\u5c55\u793a:","title":"\u670d\u52a1\u67e5\u8be2\u548c\u8be6\u60c5\u5c55\u793a"},{"location":"admin/serviceTest/","text":"\u8bf7\u53c2\u8003\u8fd9\u7bc7 \u535a\u5ba2","title":"\u670d\u52a1\u6d4b\u8bd5"},{"location":"admin/install/admin-console/","text":"\u7ba1\u7406\u63a7\u5236\u53f0\u5b89\u88c5 \u76ee\u524d\u7248\u672c\u7684\u7ba1\u7406\u63a7\u5236\u53f0\u6b63\u5728\u5f00\u53d1\u4e2d\uff0c\u5df2\u7ecf\u5b8c\u6210\u4e86\u670d\u52a1\u67e5\u8be2\u548c\u670d\u52a1\u6cbb\u7406\u7684\u529f\u80fd\uff0c\u91c7\u7528\u524d\u540e\u7aef\u5206\u79bb\u7684\u6a21\u5f0f\uff0c\u5177\u4f53\u7684\u5b89\u88c5\u548c\u4f7f\u7528\u6b65\u9aa4\u5982\u4e0b\uff1a \u5b89\u88c5: git clone https://github.com/apache/dubbo-admin.git /var/tmp/dubbo-admin cd /var/tmp/dubbo-admin mvn clean package \u914d\u7f6e ^1 : \u914d\u7f6e\u6587\u4ef6\u4e3a\uff1a dubbo-admin-backend/src/main/resources/application.properties \u4e3b\u8981\u7684\u914d\u7f6e\u6709\uff1a dubbo.registry.address=zookeeper://127.0.0.1:2181 \u542f\u52a8: mvn --projects dubbo-admin-backend spring-boot:run \u5176\u4ed6\u914d\u7f6e\u8bf7\u8bbf\u95eegithub\u4e2d\u7684\u6587\u6863: https://github.com/apache/dubbo-admin \u8bbf\u95ee: http://127.0.0.1:8080","title":"Admin console"},{"location":"admin/install/admin-console/#_1","text":"\u76ee\u524d\u7248\u672c\u7684\u7ba1\u7406\u63a7\u5236\u53f0\u6b63\u5728\u5f00\u53d1\u4e2d\uff0c\u5df2\u7ecf\u5b8c\u6210\u4e86\u670d\u52a1\u67e5\u8be2\u548c\u670d\u52a1\u6cbb\u7406\u7684\u529f\u80fd\uff0c\u91c7\u7528\u524d\u540e\u7aef\u5206\u79bb\u7684\u6a21\u5f0f\uff0c\u5177\u4f53\u7684\u5b89\u88c5\u548c\u4f7f\u7528\u6b65\u9aa4\u5982\u4e0b\uff1a \u5b89\u88c5: git clone https://github.com/apache/dubbo-admin.git /var/tmp/dubbo-admin cd /var/tmp/dubbo-admin mvn clean package \u914d\u7f6e ^1 : \u914d\u7f6e\u6587\u4ef6\u4e3a\uff1a dubbo-admin-backend/src/main/resources/application.properties \u4e3b\u8981\u7684\u914d\u7f6e\u6709\uff1a dubbo.registry.address=zookeeper://127.0.0.1:2181 \u542f\u52a8: mvn --projects dubbo-admin-backend spring-boot:run \u5176\u4ed6\u914d\u7f6e\u8bf7\u8bbf\u95eegithub\u4e2d\u7684\u6587\u6863: https://github.com/apache/dubbo-admin \u8bbf\u95ee: http://127.0.0.1:8080","title":"\u7ba1\u7406\u63a7\u5236\u53f0\u5b89\u88c5"},{"location":"admin/install/consumer-demo/","text":"\u793a\u4f8b\u6d88\u8d39\u8005\u5b89\u88c5 \u5b89\u88c5: git clone https://github.com/apache/dubbo.git cd dubbo/dubbo-demo/dubbo-demo-xml \u8fd0\u884c dubbo-demo-xml-consumer\u4e2d\u7684org.apache.dubbo.demo.consumer.Application \u8bf7\u786e\u4fdd\u5148\u542f\u52a8Provider \u5982\u679c\u4f7f\u7528Intellij Idea \u8bf7\u52a0\u4e0a-Djava.net.preferIPv4Stack=true \u914d\u7f6e: resources/spring/dubbo-consumer.xml \u4fee\u6539\u5176\u4e2d\u7684dubbo:registry\uff0c\u66ff\u6362\u6210Provider\u63d0\u4f9b\u7684\u6ce8\u518c\u4e2d\u5fc3\u5730\u5740, \u5982\uff1a dubbo:registry address= zookeeper://127.0.0.1:2181 /","title":"\u793a\u4f8b\u6d88\u8d39\u8005\u5b89\u88c5"},{"location":"admin/install/consumer-demo/#_1","text":"\u5b89\u88c5: git clone https://github.com/apache/dubbo.git cd dubbo/dubbo-demo/dubbo-demo-xml \u8fd0\u884c dubbo-demo-xml-consumer\u4e2d\u7684org.apache.dubbo.demo.consumer.Application \u8bf7\u786e\u4fdd\u5148\u542f\u52a8Provider \u5982\u679c\u4f7f\u7528Intellij Idea \u8bf7\u52a0\u4e0a-Djava.net.preferIPv4Stack=true \u914d\u7f6e: resources/spring/dubbo-consumer.xml \u4fee\u6539\u5176\u4e2d\u7684dubbo:registry\uff0c\u66ff\u6362\u6210Provider\u63d0\u4f9b\u7684\u6ce8\u518c\u4e2d\u5fc3\u5730\u5740, \u5982\uff1a dubbo:registry address= zookeeper://127.0.0.1:2181 /","title":"\u793a\u4f8b\u6d88\u8d39\u8005\u5b89\u88c5"},{"location":"admin/install/introduction/","text":"\u5b89\u88c5\u624b\u518c \u4f60\u53ef\u4ee5\u53ea\u8fd0\u884c Demo Provider \u548c Demo Consumer\uff0c\u5b83\u4eec\u7f3a\u7701\u914d\u7f6e\u4e3a\u901a\u8fc7 Multicast [^1] \u6ce8\u518c\u4e2d\u5fc3\u5e7f\u64ad\u4e92\u76f8\u53d1\u73b0\uff0c\u5efa\u8bae\u5728\u4e0d\u540c\u673a\u5668\u4e0a\u8fd0\u884c\uff0c\u5982\u679c\u5728\u540c\u4e00\u673a\u5668\u4e0a\uff0c\u9700\u8bbe\u7f6e unicast=false \uff1a\u5373\uff1a multicast://224.5.6.7:1234?unicast=false \uff0c\u5426\u5219\u53d1\u7ed9\u6d88\u8d39\u8005\u7684\u5355\u64ad\u6d88\u606f\u53ef\u80fd\u88ab\u63d0\u4f9b\u8005\u62a2\u5360\uff0c\u4e24\u4e2a\u6d88\u8d39\u8005\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e5f\u4e00\u6837\uff0c\u53ea\u6709 multicast \u6ce8\u518c\u4e2d\u5fc3\u6709\u6b64\u95ee\u9898\u3002 \u4f60\u4e5f\u53ef\u4ee5\u8fd0\u884c\u591a\u4e2a Demo Provider \u548c Demo Consumer\uff0c\u6765\u9a8c\u8bc1\u8f6f\u8d1f\u8f7d\u5747\u8861\uff0cDemo Consumer \u53ef\u4ee5\u76f4\u63a5\u542f\u52a8\u591a\u4e2a\u5b9e\u4f8b\uff0c\u800c\u591a\u4e2a Demo Provider \u56e0\u6709\u7aef\u53e3\u51b2\u7a81\uff0c\u53ef\u5728\u4e0d\u540c\u673a\u5668\u4e0a\u8fd0\u884c\uff0c\u6216\u8005\u4fee\u6539 Demo Provider \u5b89\u88c5\u76ee\u5f55\u4e0b conf/dubbo.properties \u914d\u7f6e\u4e2d\u7684 dubbo.protocol.port \u7684\u503c\u3002 \u4f60\u4e5f\u53ef\u4ee5\u589e\u52a0\u8fd0\u884c Simple Monitor \u76d1\u63a7\u4e2d\u5fc3\uff0c\u5b83\u7f3a\u7701\u914d\u7f6e\u4e3a\u901a\u8fc7 Multicast \u6ce8\u518c\u4e2d\u5fc3\u5e7f\u64ad\u53d1\u73b0 Provider \u548c Consumer\uff0c\u5e76\u5c55\u793a\u51fa\u5b83\u4eec\u7684\u4f9d\u8d56\u5173\u7cfb\uff0c\u4ee5\u53ca\u5b83\u4eec\u4e4b\u95f4\u8c03\u7528\u7684\u6b21\u6570\u548c\u65f6\u95f4\u3002 \u4f60\u4e5f\u53ef\u4ee5\u5c06 Multicast \u6ce8\u518c\u4e2d\u5fc3\u6362\u6210 Zookeeper \u6ce8\u518c\u4e2d\u5fc3\uff0c\u5b89\u88c5 Zookeeper Registry \u540e\uff0c\u4fee\u6539 Demo Proivder\uff0cDemo Consumer\uff0cSimple Monitor \u4e09\u8005\u5b89\u88c5\u76ee\u5f55\u4e0b\u7684 conf/dubbo.properties \uff0c\u5c06 dubbo.registry.address \u7684\u503c\u6539\u4e3a zookeeper://127.0.0.1:2181 \uff0c\u540c\u7406\uff0c\u5982\u679c\u6362\u6210 Redis Registry\uff0c\u503c\u6539\u4e3a redis://127.0.0.1:6379 \uff0c\u5982\u679c\u6362\u6210 Simple Registry\uff0c\u503c\u6539\u4e3a dubbo://127.0.0.1:9090 \u63a8\u8350\u4f7f\u7528 Zookeeper \u6ce8\u518c\u4e2d\u5fc3 [^1]: \u6ce8\u610f\uff1amulticast \u5730\u5740\u4e0d\u80fd\u914d\u6210 127.0.0.1\uff0c\u4e5f\u4e0d\u80fd\u914d\u6210\u673a\u5668\u7684 IP \u5730\u5740\uff0c\u5fc5\u987b\u662f D \u6bb5\u5e7f\u64ad\u5730\u5740\uff0c\u4e5f\u5c31\u662f\uff1a224.0.0.0 \u5230 239.255.255.255 \u4e4b\u95f4\u7684\u4efb\u610f\u5730\u5740","title":"\u5b89\u88c5\u624b\u518c"},{"location":"admin/install/introduction/#_1","text":"\u4f60\u53ef\u4ee5\u53ea\u8fd0\u884c Demo Provider \u548c Demo Consumer\uff0c\u5b83\u4eec\u7f3a\u7701\u914d\u7f6e\u4e3a\u901a\u8fc7 Multicast [^1] \u6ce8\u518c\u4e2d\u5fc3\u5e7f\u64ad\u4e92\u76f8\u53d1\u73b0\uff0c\u5efa\u8bae\u5728\u4e0d\u540c\u673a\u5668\u4e0a\u8fd0\u884c\uff0c\u5982\u679c\u5728\u540c\u4e00\u673a\u5668\u4e0a\uff0c\u9700\u8bbe\u7f6e unicast=false \uff1a\u5373\uff1a multicast://224.5.6.7:1234?unicast=false \uff0c\u5426\u5219\u53d1\u7ed9\u6d88\u8d39\u8005\u7684\u5355\u64ad\u6d88\u606f\u53ef\u80fd\u88ab\u63d0\u4f9b\u8005\u62a2\u5360\uff0c\u4e24\u4e2a\u6d88\u8d39\u8005\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e5f\u4e00\u6837\uff0c\u53ea\u6709 multicast \u6ce8\u518c\u4e2d\u5fc3\u6709\u6b64\u95ee\u9898\u3002 \u4f60\u4e5f\u53ef\u4ee5\u8fd0\u884c\u591a\u4e2a Demo Provider \u548c Demo Consumer\uff0c\u6765\u9a8c\u8bc1\u8f6f\u8d1f\u8f7d\u5747\u8861\uff0cDemo Consumer \u53ef\u4ee5\u76f4\u63a5\u542f\u52a8\u591a\u4e2a\u5b9e\u4f8b\uff0c\u800c\u591a\u4e2a Demo Provider \u56e0\u6709\u7aef\u53e3\u51b2\u7a81\uff0c\u53ef\u5728\u4e0d\u540c\u673a\u5668\u4e0a\u8fd0\u884c\uff0c\u6216\u8005\u4fee\u6539 Demo Provider \u5b89\u88c5\u76ee\u5f55\u4e0b conf/dubbo.properties \u914d\u7f6e\u4e2d\u7684 dubbo.protocol.port \u7684\u503c\u3002 \u4f60\u4e5f\u53ef\u4ee5\u589e\u52a0\u8fd0\u884c Simple Monitor \u76d1\u63a7\u4e2d\u5fc3\uff0c\u5b83\u7f3a\u7701\u914d\u7f6e\u4e3a\u901a\u8fc7 Multicast \u6ce8\u518c\u4e2d\u5fc3\u5e7f\u64ad\u53d1\u73b0 Provider \u548c Consumer\uff0c\u5e76\u5c55\u793a\u51fa\u5b83\u4eec\u7684\u4f9d\u8d56\u5173\u7cfb\uff0c\u4ee5\u53ca\u5b83\u4eec\u4e4b\u95f4\u8c03\u7528\u7684\u6b21\u6570\u548c\u65f6\u95f4\u3002 \u4f60\u4e5f\u53ef\u4ee5\u5c06 Multicast \u6ce8\u518c\u4e2d\u5fc3\u6362\u6210 Zookeeper \u6ce8\u518c\u4e2d\u5fc3\uff0c\u5b89\u88c5 Zookeeper Registry \u540e\uff0c\u4fee\u6539 Demo Proivder\uff0cDemo Consumer\uff0cSimple Monitor \u4e09\u8005\u5b89\u88c5\u76ee\u5f55\u4e0b\u7684 conf/dubbo.properties \uff0c\u5c06 dubbo.registry.address \u7684\u503c\u6539\u4e3a zookeeper://127.0.0.1:2181 \uff0c\u540c\u7406\uff0c\u5982\u679c\u6362\u6210 Redis Registry\uff0c\u503c\u6539\u4e3a redis://127.0.0.1:6379 \uff0c\u5982\u679c\u6362\u6210 Simple Registry\uff0c\u503c\u6539\u4e3a dubbo://127.0.0.1:9090 \u63a8\u8350\u4f7f\u7528 Zookeeper \u6ce8\u518c\u4e2d\u5fc3 [^1]: \u6ce8\u610f\uff1amulticast \u5730\u5740\u4e0d\u80fd\u914d\u6210 127.0.0.1\uff0c\u4e5f\u4e0d\u80fd\u914d\u6210\u673a\u5668\u7684 IP \u5730\u5740\uff0c\u5fc5\u987b\u662f D \u6bb5\u5e7f\u64ad\u5730\u5740\uff0c\u4e5f\u5c31\u662f\uff1a224.0.0.0 \u5230 239.255.255.255 \u4e4b\u95f4\u7684\u4efb\u610f\u5730\u5740","title":"\u5b89\u88c5\u624b\u518c"},{"location":"admin/install/provider-demo/","text":"\u793a\u4f8b\u63d0\u4f9b\u8005\u5b89\u88c5 \u5b89\u88c5\uff1a git clone https://github.com/apache/dubbo.git cd dubbo/dubbo-demo/dubbo-demo-xml \u8fd0\u884c dubbo-demo-xml-provider\u4e2d\u7684org.apache.dubbo.demo.provider.Application \u5982\u679c\u4f7f\u7528Intellij Idea \u8bf7\u52a0\u4e0a-Djava.net.preferIPv4Stack=true \u914d\u7f6e\uff1a resources/spring/dubbo-provider.xml \u4fee\u6539\u5176\u4e2d\u7684dubbo:registry\uff0c\u66ff\u6362\u6210\u771f\u5b9e\u7684\u6ce8\u518c\u4e2d\u5fc3\u5730\u5740\uff0c\u63a8\u8350\u4f7f\u7528zookeeper\uff0c\u5982\uff1a dubbo:registry address= zookeeper://127.0.0.1:2181 /","title":"\u793a\u4f8b\u63d0\u4f9b\u8005\u5b89\u88c5"},{"location":"admin/install/provider-demo/#_1","text":"\u5b89\u88c5\uff1a git clone https://github.com/apache/dubbo.git cd dubbo/dubbo-demo/dubbo-demo-xml \u8fd0\u884c dubbo-demo-xml-provider\u4e2d\u7684org.apache.dubbo.demo.provider.Application \u5982\u679c\u4f7f\u7528Intellij Idea \u8bf7\u52a0\u4e0a-Djava.net.preferIPv4Stack=true \u914d\u7f6e\uff1a resources/spring/dubbo-provider.xml \u4fee\u6539\u5176\u4e2d\u7684dubbo:registry\uff0c\u66ff\u6362\u6210\u771f\u5b9e\u7684\u6ce8\u518c\u4e2d\u5fc3\u5730\u5740\uff0c\u63a8\u8350\u4f7f\u7528zookeeper\uff0c\u5982\uff1a dubbo:registry address= zookeeper://127.0.0.1:2181 /","title":"\u793a\u4f8b\u63d0\u4f9b\u8005\u5b89\u88c5"},{"location":"admin/install/redis/","text":"Redis \u6ce8\u518c\u4e2d\u5fc3\u5b89\u88c5 Redis [^1] \u4f7f\u7528\u65b9\u5f0f\u53c2\u89c1: Redis \u6ce8\u518c\u4e2d\u5fc3\u53c2\u8003\u624b\u518c \u3002 \u53ea\u9700\u642d\u4e00\u4e2a\u539f\u751f\u7684 Redis \u670d\u52a1\u5668\uff0c\u5e76\u5c06 \u5feb\u901f\u542f\u52a8 \u4e2d Provider \u548c Consumer \u91cc\u7684 conf/dubbo.properties \u4e2d\u7684 dubbo.registry.address \u7684\u503c\u6539\u4e3a redis://127.0.0.1:6379 \u5373\u53ef\u4f7f\u7528\u3002 Redis \u6ce8\u518c\u4e2d\u5fc3\u96c6\u7fa4 [^2] \u91c7\u7528\u5728\u5ba2\u6237\u7aef\u540c\u65f6\u5199\u5165\u591a\u4e2a\u670d\u52a1\u5668\uff0c\u8bfb\u53d6\u5355\u4e2a\u670d\u52a1\u5668\u7684\u7b56\u7565\u5b9e\u73b0\u3002 \u5b89\u88c5: wget http://redis.googlecode.com/files/redis-2.4.8.tar.gz tar xzf redis-2.4.8.tar.gz cd redis-2.4.8 make \u914d\u7f6e: vi redis.conf \u542f\u52a8: nohup ./src/redis-server redis.conf \u505c\u6b62: killall redis-server \u547d\u4ee4\u884c [^3]: ./src/redis-cli hgetall /dubbo/com.foo.BarService/providers \u6216\u8005\uff1a telnet 127.0.0.1 6379 hgetall /dubbo/com.foo.BarService/providers [^1]: Redis \u662f\u4e00\u4e2a\u9ad8\u6548\u7684 KV \u5b58\u50a8\u670d\u52a1\u5668\uff0c\u53c2\u89c1\uff1ahttp://redis.io/topics/quickstart [^2]: 2.1.0 \u4ee5\u4e0a\u7248\u672c\u652f\u6301 [^3]: \u53c2\u89c1: http://redis.io/commands","title":"Redis \u6ce8\u518c\u4e2d\u5fc3\u5b89\u88c5"},{"location":"admin/install/redis/#redis","text":"Redis [^1] \u4f7f\u7528\u65b9\u5f0f\u53c2\u89c1: Redis \u6ce8\u518c\u4e2d\u5fc3\u53c2\u8003\u624b\u518c \u3002 \u53ea\u9700\u642d\u4e00\u4e2a\u539f\u751f\u7684 Redis \u670d\u52a1\u5668\uff0c\u5e76\u5c06 \u5feb\u901f\u542f\u52a8 \u4e2d Provider \u548c Consumer \u91cc\u7684 conf/dubbo.properties \u4e2d\u7684 dubbo.registry.address \u7684\u503c\u6539\u4e3a redis://127.0.0.1:6379 \u5373\u53ef\u4f7f\u7528\u3002 Redis \u6ce8\u518c\u4e2d\u5fc3\u96c6\u7fa4 [^2] \u91c7\u7528\u5728\u5ba2\u6237\u7aef\u540c\u65f6\u5199\u5165\u591a\u4e2a\u670d\u52a1\u5668\uff0c\u8bfb\u53d6\u5355\u4e2a\u670d\u52a1\u5668\u7684\u7b56\u7565\u5b9e\u73b0\u3002 \u5b89\u88c5: wget http://redis.googlecode.com/files/redis-2.4.8.tar.gz tar xzf redis-2.4.8.tar.gz cd redis-2.4.8 make \u914d\u7f6e: vi redis.conf \u542f\u52a8: nohup ./src/redis-server redis.conf \u505c\u6b62: killall redis-server \u547d\u4ee4\u884c [^3]: ./src/redis-cli hgetall /dubbo/com.foo.BarService/providers \u6216\u8005\uff1a telnet 127.0.0.1 6379 hgetall /dubbo/com.foo.BarService/providers [^1]: Redis \u662f\u4e00\u4e2a\u9ad8\u6548\u7684 KV \u5b58\u50a8\u670d\u52a1\u5668\uff0c\u53c2\u89c1\uff1ahttp://redis.io/topics/quickstart [^2]: 2.1.0 \u4ee5\u4e0a\u7248\u672c\u652f\u6301 [^3]: \u53c2\u89c1: http://redis.io/commands","title":"Redis \u6ce8\u518c\u4e2d\u5fc3\u5b89\u88c5"},{"location":"admin/install/simple-monitor-center/","text":"Simple \u76d1\u63a7\u4e2d\u5fc3\u5b89\u88c5 \u4e0d\u518d\u5355\u72ec\u63d0\u4f9b\u76d1\u63a7\u4e2d\u5fc3\uff0c\u529f\u80fd\u4f1a\u6574\u5408\u5230\u8fd0\u7ef4\u63a7\u5236\u53f0\uff0c\u57fa\u4e8eMetrics\u63d0\u4f9b\u66f4\u4e30\u5bcc\uff0c\u5b9e\u65f6\u7684\u4fe1\u606f\u5c55\u793a\uff0c\u656c\u8bf7\u671f\u5f85","title":"Simple \u76d1\u63a7\u4e2d\u5fc3\u5b89\u88c5"},{"location":"admin/install/simple-monitor-center/#simple","text":"","title":"Simple \u76d1\u63a7\u4e2d\u5fc3\u5b89\u88c5"},{"location":"admin/install/simple-monitor-center/#metrics","text":"","title":"\u4e0d\u518d\u5355\u72ec\u63d0\u4f9b\u76d1\u63a7\u4e2d\u5fc3\uff0c\u529f\u80fd\u4f1a\u6574\u5408\u5230\u8fd0\u7ef4\u63a7\u5236\u53f0\uff0c\u57fa\u4e8eMetrics\u63d0\u4f9b\u66f4\u4e30\u5bcc\uff0c\u5b9e\u65f6\u7684\u4fe1\u606f\u5c55\u793a\uff0c\u656c\u8bf7\u671f\u5f85"},{"location":"admin/install/simple-registry-center/","text":"Simple \u6ce8\u518c\u4e2d\u5fc3\u5b89\u88c5","title":"Simple \u6ce8\u518c\u4e2d\u5fc3\u5b89\u88c5"},{"location":"admin/install/simple-registry-center/#simple","text":"","title":"Simple \u6ce8\u518c\u4e2d\u5fc3\u5b89\u88c5"},{"location":"admin/install/zookeeper/","text":"Zookeeper \u6ce8\u518c\u4e2d\u5fc3\u5b89\u88c5 \u5efa\u8bae\u4f7f\u7528 dubbo-2.3.3 \u4ee5\u4e0a\u7248\u672c\u7684 zookeeper [^1] \u6ce8\u518c\u4e2d\u5fc3\u5ba2\u6237\u7aef\u3002 Dubbo \u672a\u5bf9 Zookeeper \u670d\u52a1\u5668\u7aef\u505a\u4efb\u4f55\u4fb5\u5165\u4fee\u6539\uff0c\u53ea\u9700\u5b89\u88c5\u539f\u751f\u7684 Zookeeper \u670d\u52a1\u5668\u5373\u53ef\uff0c\u6240\u6709\u6ce8\u518c\u4e2d\u5fc3\u903b\u8f91\u9002\u914d\u90fd\u5728\u8c03\u7528 Zookeeper \u5ba2\u6237\u7aef\u65f6\u5b8c\u6210\u3002 \u5b89\u88c5: wget http://archive.apache.org/dist/zookeeper/zookeeper-3.3.3/zookeeper-3.3.3.tar.gz tar zxvf zookeeper-3.3.3.tar.gz cd zookeeper-3.3.3 cp conf/zoo_sample.cfg conf/zoo.cfg \u914d\u7f6e: vi conf/zoo.cfg \u5982\u679c\u4e0d\u9700\u8981\u96c6\u7fa4\uff0c zoo.cfg \u7684\u5185\u5bb9\u5982\u4e0b [^2]\uff1a tickTime=2000 initLimit=10 syncLimit=5 dataDir=/home/dubbo/zookeeper-3.3.3/data clientPort=2181 \u5982\u679c\u9700\u8981\u96c6\u7fa4\uff0c zoo.cfg \u7684\u5185\u5bb9\u5982\u4e0b [^3]\uff1a tickTime=2000 initLimit=10 syncLimit=5 dataDir=/home/dubbo/zookeeper-3.3.3/data clientPort=2181 server.1=10.20.153.10:2555:3555 server.2=10.20.153.11:2555:3555 \u5e76\u5728 data \u76ee\u5f55 [^4] \u4e0b\u653e\u7f6e myid \u6587\u4ef6\uff1a mkdir data vi myid myid \u6307\u660e\u81ea\u5df1\u7684 id\uff0c\u5bf9\u5e94\u4e0a\u9762 zoo.cfg \u4e2d server. \u540e\u7684\u6570\u5b57\uff0c\u7b2c\u4e00\u53f0\u7684\u5185\u5bb9\u4e3a 1\uff0c\u7b2c\u4e8c\u53f0\u7684\u5185\u5bb9\u4e3a 2\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a 1 \u542f\u52a8: ./bin/zkServer.sh start \u505c\u6b62: ./bin/zkServer.sh stop \u547d\u4ee4\u884c ^5 : telnet 127.0.0.1 2181 dump \u6216\u8005: echo dump | nc 127.0.0.1 2181 \u7528\u6cd5: dubbo.registry.address=zookeeper://10.20.153.10:2181?backup=10.20.153.11:2181 \u6216\u8005: dubbo:registry protocol= zookeeper address= 10.20.153.10:2181,10.20.153.11:2181 / [^1]: Zookeeper\u662f Apache Hadoop \u7684\u5b50\u9879\u76ee\uff0c\u5f3a\u5ea6\u76f8\u5bf9\u8f83\u597d\uff0c\u5efa\u8bae\u751f\u4ea7\u73af\u5883\u4f7f\u7528\u8be5\u6ce8\u518c\u4e2d\u5fc3 [^2]: \u5176\u4e2d data \u76ee\u5f55\u9700\u6539\u6210\u4f60\u771f\u5b9e\u8f93\u51fa\u76ee\u5f55 [^3]: \u5176\u4e2d data \u76ee\u5f55\u548c server \u5730\u5740\u9700\u6539\u6210\u4f60\u771f\u5b9e\u90e8\u7f72\u673a\u5668\u7684\u4fe1\u606f [^4]: \u4e0a\u9762 zoo.cfg \u4e2d\u7684 dataDir","title":"Zookeeper \u6ce8\u518c\u4e2d\u5fc3\u5b89\u88c5"},{"location":"admin/install/zookeeper/#zookeeper","text":"\u5efa\u8bae\u4f7f\u7528 dubbo-2.3.3 \u4ee5\u4e0a\u7248\u672c\u7684 zookeeper [^1] \u6ce8\u518c\u4e2d\u5fc3\u5ba2\u6237\u7aef\u3002 Dubbo \u672a\u5bf9 Zookeeper \u670d\u52a1\u5668\u7aef\u505a\u4efb\u4f55\u4fb5\u5165\u4fee\u6539\uff0c\u53ea\u9700\u5b89\u88c5\u539f\u751f\u7684 Zookeeper \u670d\u52a1\u5668\u5373\u53ef\uff0c\u6240\u6709\u6ce8\u518c\u4e2d\u5fc3\u903b\u8f91\u9002\u914d\u90fd\u5728\u8c03\u7528 Zookeeper \u5ba2\u6237\u7aef\u65f6\u5b8c\u6210\u3002 \u5b89\u88c5: wget http://archive.apache.org/dist/zookeeper/zookeeper-3.3.3/zookeeper-3.3.3.tar.gz tar zxvf zookeeper-3.3.3.tar.gz cd zookeeper-3.3.3 cp conf/zoo_sample.cfg conf/zoo.cfg \u914d\u7f6e: vi conf/zoo.cfg \u5982\u679c\u4e0d\u9700\u8981\u96c6\u7fa4\uff0c zoo.cfg \u7684\u5185\u5bb9\u5982\u4e0b [^2]\uff1a tickTime=2000 initLimit=10 syncLimit=5 dataDir=/home/dubbo/zookeeper-3.3.3/data clientPort=2181 \u5982\u679c\u9700\u8981\u96c6\u7fa4\uff0c zoo.cfg \u7684\u5185\u5bb9\u5982\u4e0b [^3]\uff1a tickTime=2000 initLimit=10 syncLimit=5 dataDir=/home/dubbo/zookeeper-3.3.3/data clientPort=2181 server.1=10.20.153.10:2555:3555 server.2=10.20.153.11:2555:3555 \u5e76\u5728 data \u76ee\u5f55 [^4] \u4e0b\u653e\u7f6e myid \u6587\u4ef6\uff1a mkdir data vi myid myid \u6307\u660e\u81ea\u5df1\u7684 id\uff0c\u5bf9\u5e94\u4e0a\u9762 zoo.cfg \u4e2d server. \u540e\u7684\u6570\u5b57\uff0c\u7b2c\u4e00\u53f0\u7684\u5185\u5bb9\u4e3a 1\uff0c\u7b2c\u4e8c\u53f0\u7684\u5185\u5bb9\u4e3a 2\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a 1 \u542f\u52a8: ./bin/zkServer.sh start \u505c\u6b62: ./bin/zkServer.sh stop \u547d\u4ee4\u884c ^5 : telnet 127.0.0.1 2181 dump \u6216\u8005: echo dump | nc 127.0.0.1 2181 \u7528\u6cd5: dubbo.registry.address=zookeeper://10.20.153.10:2181?backup=10.20.153.11:2181 \u6216\u8005: dubbo:registry protocol= zookeeper address= 10.20.153.10:2181,10.20.153.11:2181 / [^1]: Zookeeper\u662f Apache Hadoop \u7684\u5b50\u9879\u76ee\uff0c\u5f3a\u5ea6\u76f8\u5bf9\u8f83\u597d\uff0c\u5efa\u8bae\u751f\u4ea7\u73af\u5883\u4f7f\u7528\u8be5\u6ce8\u518c\u4e2d\u5fc3 [^2]: \u5176\u4e2d data \u76ee\u5f55\u9700\u6539\u6210\u4f60\u771f\u5b9e\u8f93\u51fa\u76ee\u5f55 [^3]: \u5176\u4e2d data \u76ee\u5f55\u548c server \u5730\u5740\u9700\u6539\u6210\u4f60\u771f\u5b9e\u90e8\u7f72\u673a\u5668\u7684\u4fe1\u606f [^4]: \u4e0a\u9762 zoo.cfg \u4e2d\u7684 dataDir","title":"Zookeeper \u6ce8\u518c\u4e2d\u5fc3\u5b89\u88c5"},{"location":"admin/ops/dubbo-ops/","text":"\u7ba1\u7406\u63a7\u5236\u53f0\u8fd0\u7ef4 \u641c\u7d22\u9875\u9762 \u5f53\u4f60\u9700\u8981\u7ba1\u7406 Dubbo \u7684\u670d\u52a1\u65f6\uff0c\u9996\u5148\u8981\u641c\u7d22\u5230\u8fd9\u4e2a\u670d\u52a1\uff0c\u7136\u540e\u6253\u5f00\u5b83\u7684\u7ba1\u7406\u9875\u9762 \u670d\u52a1\u63d0\u4f9b\u8005\u9875\u9762 \u670d\u52a1\u6d88\u8d39\u8005\u9875\u9762 \u6dfb\u52a0\u8def\u7531\u89c4\u5219\u9875\u9762 \u6dfb\u52a0\u52a8\u6001\u914d\u7f6e\u9875\u9762","title":"\u7ba1\u7406\u63a7\u5236\u53f0\u8fd0\u7ef4"},{"location":"admin/ops/dubbo-ops/#_1","text":"","title":"\u7ba1\u7406\u63a7\u5236\u53f0\u8fd0\u7ef4"},{"location":"admin/ops/dubbo-ops/#_2","text":"\u5f53\u4f60\u9700\u8981\u7ba1\u7406 Dubbo \u7684\u670d\u52a1\u65f6\uff0c\u9996\u5148\u8981\u641c\u7d22\u5230\u8fd9\u4e2a\u670d\u52a1\uff0c\u7136\u540e\u6253\u5f00\u5b83\u7684\u7ba1\u7406\u9875\u9762","title":"\u641c\u7d22\u9875\u9762"},{"location":"admin/ops/dubbo-ops/#_3","text":"","title":"\u670d\u52a1\u63d0\u4f9b\u8005\u9875\u9762"},{"location":"admin/ops/dubbo-ops/#_4","text":"","title":"\u670d\u52a1\u6d88\u8d39\u8005\u9875\u9762"},{"location":"admin/ops/dubbo-ops/#_5","text":"","title":"\u6dfb\u52a0\u8def\u7531\u89c4\u5219\u9875\u9762"},{"location":"admin/ops/dubbo-ops/#_6","text":"","title":"\u6dfb\u52a0\u52a8\u6001\u914d\u7f6e\u9875\u9762"},{"location":"admin/ops/introduction/","text":"\u8fd0\u7ef4\u624b\u518c","title":"\u8fd0\u7ef4\u624b\u518c"},{"location":"admin/ops/introduction/#_1","text":"","title":"\u8fd0\u7ef4\u624b\u518c"},{"location":"admin/ops/pinpoint/","text":"\u4f7f\u7528Pinpoint\u505a\u5206\u5e03\u5f0f\u8ddf\u8e2a \u5728\u4f7f\u7528Dubbo\u8fdb\u884c\u670d\u52a1\u5316\u6216\u8005\u6574\u5408\u5e94\u7528\u540e\uff0c\u5047\u8bbe\u67d0\u4e2a\u670d\u52a1\u540e\u53f0\u65e5\u5fd7\u663e\u793a\u6709\u5f02\u5e38\uff0c\u8fd9\u4e2a\u670d\u52a1\u53c8\u88ab\u591a\u4e2a\u5e94\u7528\u8c03\u7528\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u901a\u5e38\u5f88\u96be\u5224\u65ad\u662f\u54ea\u4e2a\u5e94\u7528\u8c03\u7528\u7684\uff0c\u95ee\u9898\u7684\u8d77\u56e0\u662f\u4ec0\u4e48\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4e00\u5957\u5206\u5e03\u5f0f\u8ddf\u8e2a\u7cfb\u7edf\u6765\u5feb\u901f\u5b9a\u4f4d\u95ee\u9898\uff0cPinpoint\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5feb\u901f\u5b9a\u4f4d\u95ee\u9898\uff08\u5f53\u7136\uff0c\u89e3\u51b3\u65b9\u6848\u4e5f\u4e0d\u6b62\u8fd9\u4e00\u79cd\uff09\u3002 \u4ec0\u4e48\u662fPinpoint(\u6458\u81ea Pinpoint\u5b66\u4e60\u7b14\u8bb0 ) Pinpoint \u662f\u4e00\u4e2a\u5f00\u6e90\u7684 APM (Application Performance Management/\u5e94\u7528\u6027\u80fd\u7ba1\u7406)\u5de5\u5177\uff0c\u7528\u4e8e\u57fa\u4e8ejava\u7684\u5927\u89c4\u6a21\u5206\u5e03\u5f0f\u7cfb\u7edf\u3002 \u4eff\u7167Google Dapper\uff0cPinpoint\u901a\u8fc7\u8ddf\u8e2a\u5206\u5e03\u5f0f\u5e94\u7528\u4e4b\u95f4\u7684\u8c03\u7528\u6765\u63d0\u4f9b\u89e3\u51b3\u65b9\u6848\uff0c\u4ee5\u5e2e\u52a9\u5206\u6790\u7cfb\u7edf\u7684\u603b\u4f53\u7ed3\u6784\u548c\u5185\u90e8\u6a21\u5757\u4e4b\u95f4\u5982\u4f55\u76f8\u4e92\u8054\u7cfb\u3002 \u6ce8\uff1a\u5bf9\u4e8e\u5404\u4e2a\u6a21\u5757\u4e4b\u95f4\u7684\u901a\u8baf\u82f1\u6587\u539f\u6587\u4e2d\u7528\u7684\u662ftransaction\u4e00\u8bcd\uff0c\u4f46\u662f\u6211\u89c9\u5f97\u5982\u679c\u7ffb\u8bd1\u4e3a\"\u4e8b\u52a1\"\u5bb9\u6613\u5f15\u8d77\u8bef\u89e3\uff0c\u6240\u4ee5\u66ff\u6362\u4e3a\"\u4ea4\u4e92\"\u6216\u8005\"\u8c03\u7528\"\u8fd9\u79cd\u6bd4\u8f83\u76f4\u767d\u7684\u5b57\u773c\u3002 \u5728\u4f7f\u7528\u4e0a\u529b\u56fe\u7b80\u5355\u9ad8\u6548\uff1a \u5b89\u88c5agent\uff0c\u4e0d\u9700\u8981\u4fee\u6539\u54ea\u6015\u4e00\u884c\u4ee3\u7801 \u6700\u5c0f\u5316\u6027\u80fd\u635f\u5931 \u670d\u52a1\u5668\u5730\u56fe(ServerMap) \u901a\u8fc7\u53ef\u89c6\u5316\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u6a21\u5757\u548c\u4ed6\u4eec\u4e4b\u95f4\u7684\u76f8\u4e92\u8054\u7cfb\u6765\u7406\u89e3\u7cfb\u7edf\u62d3\u6251\u3002\u70b9\u51fb\u67d0\u4e2a\u8282\u70b9\u4f1a\u5c55\u793a\u8fd9\u4e2a\u6a21\u5757\u7684\u8be6\u60c5\uff0c\u6bd4\u5982\u5b83\u5f53\u524d\u7684\u72b6\u6001\u548c\u8bf7\u6c42\u6570\u91cf\u3002 \u5b9e\u65f6\u6d3b\u52a8\u7ebf\u7a0b\u56fe\u8868(Realtime Active Thread Chart) \u5b9e\u65f6\u76d1\u63a7\u5e94\u7528\u5185\u90e8\u7684\u6d3b\u52a8\u7ebf\u7a0b\u3002 \u8bf7\u6c42/\u5e94\u7b54\u5206\u5e03\u56fe\u8868(Request/Response Scatter Chart) \u957f\u671f\u53ef\u89c6\u5316\u8bf7\u6c42\u6570\u91cf\u548c\u5e94\u7b54\u6a21\u5f0f\u6765\u5b9a\u4f4d\u6f5c\u5728\u95ee\u9898\u3002\u901a\u8fc7\u5728\u56fe\u8868\u4e0a\u62c9\u62fd\u53ef\u4ee5\u9009\u62e9\u8bf7\u6c42\u67e5\u770b\u66f4\u591a\u7684\u8be6\u7ec6\u4fe1\u606f\u3002 \u8c03\u7528\u6808(CallStack) \u5728\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\u4e3a\u6bcf\u4e2a\u8c03\u7528\u751f\u6210\u4ee3\u7801\u7ea7\u522b\u7684\u53ef\u89c6\u56fe\uff0c\u5728\u5355\u4e2a\u89c6\u56fe\u4e2d\u5b9a\u4f4d\u74f6\u9888\u548c\u5931\u8d25\u70b9\u3002 \u5de1\u67e5(Inspector) \u67e5\u770b\u5e94\u7528\u4e0a\u7684\u5176\u4ed6\u8be6\u7ec6\u4fe1\u606f\uff0c\u6bd4\u5982CPU\u4f7f\u7528\u7387\uff0c\u5185\u5b58/\u5783\u573e\u56de\u6536\uff0cTPS\uff0c\u548cJVM\u53c2\u6570\u3002 \u652f\u6301\u6a21\u5757 JDK 6+ Tomcat 6/7/8, Jetty 8/9, JBoss EAP 6, Resin 4, Websphere 6/7/8, Vertx 3.3/3.4/3.5 Spring, Spring Boot (Embedded Tomcat, Jetty) Apache HTTP Client 3.x/4.x, JDK HttpConnector, GoogleHttpClient, OkHttpClient, NingAsyncHttpClient Thrift Client, Thrift Service, DUBBO PROVIDER, DUBBO CONSUMER ActiveMQ, RabbitMQ MySQL, Oracle, MSSQL, CUBRID,POSTGRESQL, MARIA Arcus, Memcached, Redis, CASSANDRA iBATIS, MyBatis DBCP, DBCP2, HIKARICP gson, Jackson, Json Lib log4j, Logback \u81ea\u5b9a\u4e49\u6a21\u5757 Pinpoint\u4e0eDubbo\u7684\u7ed3\u5408 \u542f\u52a8Pinpoint \u53c2\u8003Pinpoint\u7684 Quick start \u642d\u5efa\u73af\u5883\uff08\u4e0d\u9700\u8981\u542f\u52a8TestApp\uff09 \u51c6\u5907Dubbo\u793a\u4f8b\u7a0b\u5e8f \u521b\u5efaAPI\u5305 pom.xml ?xml version= 1.0 encoding= UTF-8 ? project xmlns= http://maven.apache.org/POM/4.0.0 xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd modelVersion 4.0.0 /modelVersion groupId com.example /groupId artifactId demo-api /artifactId version 0.0.1-SNAPSHOT /version /project \u65b0\u5efaAPI\u63a5\u53e3\uff1a package com.example.demoapi; public interface HelloService { String sayHello(String name); } \u5b9e\u73b0 Dubbo \u670d\u52a1\u63d0\u4f9b\u65b9 pom.xml ?xml version= 1.0 encoding= UTF-8 ? project xmlns= http://maven.apache.org/POM/4.0.0 xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd modelVersion 4.0.0 /modelVersion groupId com.example /groupId artifactId demo-provider /artifactId version 0.0.1-SNAPSHOT /version packaging jar /packaging name demo-provider /name parent groupId org.springframework.boot /groupId artifactId spring-boot-starter-parent /artifactId version 2.0.3.RELEASE /version relativePath/ !-- lookup parent from repository -- /parent properties project.build.sourceEncoding UTF-8 /project.build.sourceEncoding project.reporting.outputEncoding UTF-8 /project.reporting.outputEncoding java.version 1.8 /java.version /properties repositories repository id sonatype-nexus-snapshots /id url https://oss.sonatype.org/content/repositories/snapshots /url releases enabled false /enabled /releases snapshots enabled true /enabled /snapshots /repository /repositories dependencies dependency groupId org.springframework.boot /groupId artifactId spring-boot-starter /artifactId /dependency dependency groupId com.alibaba.boot /groupId artifactId dubbo-spring-boot-starter /artifactId version 0.2.0 /version /dependency dependency groupId com.example /groupId artifactId demo-api /artifactId version 0.0.1-SNAPSHOT /version /dependency dependency groupId org.springframework.boot /groupId artifactId spring-boot-starter-test /artifactId scope test /scope /dependency /dependencies build plugins plugin groupId org.springframework.boot /groupId artifactId spring-boot-maven-plugin /artifactId /plugin /plugins /build /project \u5b9e\u73b0 HelloService \u63a5\u53e3\uff1a package com.example.demoprovider.provider; import org.apache.dubbo.config.annotation.Service; import com.example.demoapi.HelloService; @Service(version = ${demo.service.version} , application = ${dubbo.application.id} , protocol = ${dubbo.protocol.id} , registry = ${dubbo.registry.id} ) public class HelloServiceImpl implements HelloService { static int i = 0; @Override public String sayHello(String name) { i++; if (i % 3 == 0) { throw new RuntimeException( ex ); } return Hello + name + ! ; } } \u7f16\u5199 Spring Boot \u5f15\u5bfc\u7a0b\u5e8f\uff1a package com.example.demoprovider; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class DemoProviderApplication { public static void main(String[] args) { SpringApplication.run(DemoProviderApplication.class, args); } } \u914d\u7f6e application.properties \uff1a # Spring boot application spring.application.name = dubbo-provider-demo server.port = 9090 management.port = 9091 # Service version demo.service.version = 1.0.0 # Base packages to scan Dubbo Components (e.g @Service , @Reference) dubbo.scan.basePackages = com.example.demoprovider # Dubbo Config properties ## ApplicationConfig Bean dubbo.application.id = dubbo-provider-demo dubbo.application.name = dubbo-provider-demo ## ProtocolConfig Bean dubbo.protocol.id = dubbo dubbo.protocol.name = dubbo dubbo.protocol.port = 12345 ## RegistryConfig Bean dubbo.registry.id = my-registry dubbo.registry.address = N/A \u5b9e\u73b0 Dubbo \u670d\u52a1\u6d88\u8d39\u65b9 pom.xml ?xml version= 1.0 encoding= UTF-8 ? project xmlns= http://maven.apache.org/POM/4.0.0 xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd modelVersion 4.0.0 /modelVersion groupId com.example /groupId artifactId demo-consumer /artifactId version 0.0.1-SNAPSHOT /version packaging jar /packaging name demo-consumer /name parent groupId org.springframework.boot /groupId artifactId spring-boot-starter-parent /artifactId version 2.0.3.RELEASE /version relativePath/ !-- lookup parent from repository -- /parent properties project.build.sourceEncoding UTF-8 /project.build.sourceEncoding project.reporting.outputEncoding UTF-8 /project.reporting.outputEncoding java.version 1.8 /java.version /properties repositories repository id sonatype-nexus-snapshots /id url https://oss.sonatype.org/content/repositories/snapshots /url releases enabled false /enabled /releases snapshots enabled true /enabled /snapshots /repository /repositories dependencies dependency groupId org.springframework.boot /groupId artifactId spring-boot-starter-web /artifactId /dependency dependency groupId com.alibaba.boot /groupId artifactId dubbo-spring-boot-starter /artifactId version 0.2.0 /version /dependency dependency groupId com.example /groupId artifactId demo-api /artifactId version 0.0.1-SNAPSHOT /version /dependency dependency groupId org.springframework.boot /groupId artifactId spring-boot-starter-test /artifactId scope test /scope /dependency /dependencies build plugins plugin groupId org.springframework.boot /groupId artifactId spring-boot-maven-plugin /artifactId configuration classifier exec /classifier /configuration /plugin /plugins /build /project \u901a\u8fc7 @Reference \u6ce8\u5165 HelloService package com.example.democonsumer.controller; import org.apache.dubbo.config.annotation.Reference; import com.example.demoapi.HelloService; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; @RestController public class DemoConsumerController { @Reference(version = ${demo.service.version} , application = ${dubbo.application.id} , url = dubbo:// \u6ce8\u610f\uff0c\u8fd9\u91cc\u586b\u5199\u5177\u4f53IP :12345 ) private HelloService helloService; @RequestMapping( /sayHello ) public String sayHello(@RequestParam String name) { return helloService.sayHello(name); } } \u76f4\u8fde\u63d0\u4f9b\u8005\u8c03\u7528\u9700\u8981\u586b\u5199\u5177\u4f53IP\u5730\u5740\uff0c\u5982\u679c\u5199localhost\u4e5f\u53ef\u4ee5\uff0c\u4f46\u662f\u4f1a\u88abPinpoint\u989d\u5916\u8bc6\u522b\u4e3a\u4e00\u4e2a\u672a\u77e5\u670d\u52a1 \u7f16\u5199 Spring Boot \u5f15\u5bfc\u7a0b\u5e8f\uff08Web \u5e94\u7528\uff09\uff1a package com.example.democonsumer; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class DemoConsumerApplication { public static void main(String[] args) { SpringApplication.run(DemoConsumerApplication.class, args); } } \u914d\u7f6e application.properties \uff1a # Spring boot application spring.application.name=dubbo-consumer-demo server.port=8080 management.port=8081 # Service Version demo.service.version=1.0.0 # Dubbo Config properties ## ApplicationConfig Bean dubbo.application.id=dubbo-consumer-demo dubbo.application.name=dubbo-consumer-demo ## ProtocolConfig Bean dubbo.protocol.id=dubbo dubbo.protocol.name=dubbo dubbo.protocol.port=12345 \u4f7f\u7528Pinpoint-agent\u542f\u52a8\u670d\u52a1\u63d0\u4f9b\u65b9\u548c\u670d\u52a1\u6d88\u8d39\u65b9 \u542f\u52a8\u670d\u52a1\u63d0\u4f9b\u65b9 \u7f16\u8bd1\u6253\u5305 mvn clean package \u9644\u52a0\u53c2\u6570\u542f\u52a8\u670d\u52a1\u63d0\u4f9b\u65b9 java -jar -javaagent:$AGENT_PATH/pinpoint-bootstrap-$VERSION.jar -Dpinpoint.agentId=demo-provider -Dpinpoint.applicationName=DP target/demo-provider-0.0.1-SNAPSHOT.jar \u9644\u52a0\u53c2\u6570\u542f\u52a8\u670d\u52a1\u6d88\u8d39\u65b9 java -jar -javaagent:$AGENT_PATH/pinpoint-bootstrap-$VERSION.jar -Dpinpoint.agentId=demo-consumer -Dpinpoint.applicationName=DC target/demo-comsumer-0.0.1-SNAPSHOT-exec.jar \u8bbf\u95ee\u6d88\u8d39\u65b9\u5730\u5740\u6a21\u62df\u7528\u6237\u8bf7\u6c42 http://localhost:8080/sayHello?name=ABC \u4f7f\u7528Pinpoint\u5feb\u901f\u5b9a\u4f4d\u95ee\u9898 \u9996\u9875 \u8fd9\u91cc\u7684\u7528\u6237\u8bf7\u6c42\u662f\u8bf7\u6c42DubboProvider\u6570\u91cf\u7684\u53cc\u500d\uff0c\u539f\u56e0\u662f\u8bb0\u5f55\u4e86favicon.ico\u56fe\u6807\u8bf7\u6c42\u5bfc\u81f4\u7684 \u8c03\u7528\u6811 \u6df1\u5165\u8ddf\u8e2a \u5176\u4ed6 \u793a\u4f8b\u7b80\u5355\u7684\u6a21\u62df\u4e86Dubbo\u7684\u63d0\u4f9b\u548c\u8c03\u7528\uff0c\u5e76\u6ca1\u6709\u8fdb\u884c\u6570\u636e\u5e93\u7b49\u5176\u4ed6\u4e2d\u95f4\u4ef6\u7684\u5e94\u7528\uff0c\u8be6\u7ec6\u4f7f\u7528\u8bf7\u53c2\u7167Pinpoint\u6587\u6863\u3002","title":"\u4f7f\u7528Pinpoint\u505a\u5206\u5e03\u5f0f\u8ddf\u8e2a"},{"location":"admin/ops/pinpoint/#pinpoint","text":"\u5728\u4f7f\u7528Dubbo\u8fdb\u884c\u670d\u52a1\u5316\u6216\u8005\u6574\u5408\u5e94\u7528\u540e\uff0c\u5047\u8bbe\u67d0\u4e2a\u670d\u52a1\u540e\u53f0\u65e5\u5fd7\u663e\u793a\u6709\u5f02\u5e38\uff0c\u8fd9\u4e2a\u670d\u52a1\u53c8\u88ab\u591a\u4e2a\u5e94\u7528\u8c03\u7528\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u901a\u5e38\u5f88\u96be\u5224\u65ad\u662f\u54ea\u4e2a\u5e94\u7528\u8c03\u7528\u7684\uff0c\u95ee\u9898\u7684\u8d77\u56e0\u662f\u4ec0\u4e48\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4e00\u5957\u5206\u5e03\u5f0f\u8ddf\u8e2a\u7cfb\u7edf\u6765\u5feb\u901f\u5b9a\u4f4d\u95ee\u9898\uff0cPinpoint\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5feb\u901f\u5b9a\u4f4d\u95ee\u9898\uff08\u5f53\u7136\uff0c\u89e3\u51b3\u65b9\u6848\u4e5f\u4e0d\u6b62\u8fd9\u4e00\u79cd\uff09\u3002","title":"\u4f7f\u7528Pinpoint\u505a\u5206\u5e03\u5f0f\u8ddf\u8e2a"},{"location":"admin/ops/pinpoint/#pinpointpinpoint","text":"Pinpoint \u662f\u4e00\u4e2a\u5f00\u6e90\u7684 APM (Application Performance Management/\u5e94\u7528\u6027\u80fd\u7ba1\u7406)\u5de5\u5177\uff0c\u7528\u4e8e\u57fa\u4e8ejava\u7684\u5927\u89c4\u6a21\u5206\u5e03\u5f0f\u7cfb\u7edf\u3002 \u4eff\u7167Google Dapper\uff0cPinpoint\u901a\u8fc7\u8ddf\u8e2a\u5206\u5e03\u5f0f\u5e94\u7528\u4e4b\u95f4\u7684\u8c03\u7528\u6765\u63d0\u4f9b\u89e3\u51b3\u65b9\u6848\uff0c\u4ee5\u5e2e\u52a9\u5206\u6790\u7cfb\u7edf\u7684\u603b\u4f53\u7ed3\u6784\u548c\u5185\u90e8\u6a21\u5757\u4e4b\u95f4\u5982\u4f55\u76f8\u4e92\u8054\u7cfb\u3002 \u6ce8\uff1a\u5bf9\u4e8e\u5404\u4e2a\u6a21\u5757\u4e4b\u95f4\u7684\u901a\u8baf\u82f1\u6587\u539f\u6587\u4e2d\u7528\u7684\u662ftransaction\u4e00\u8bcd\uff0c\u4f46\u662f\u6211\u89c9\u5f97\u5982\u679c\u7ffb\u8bd1\u4e3a\"\u4e8b\u52a1\"\u5bb9\u6613\u5f15\u8d77\u8bef\u89e3\uff0c\u6240\u4ee5\u66ff\u6362\u4e3a\"\u4ea4\u4e92\"\u6216\u8005\"\u8c03\u7528\"\u8fd9\u79cd\u6bd4\u8f83\u76f4\u767d\u7684\u5b57\u773c\u3002 \u5728\u4f7f\u7528\u4e0a\u529b\u56fe\u7b80\u5355\u9ad8\u6548\uff1a \u5b89\u88c5agent\uff0c\u4e0d\u9700\u8981\u4fee\u6539\u54ea\u6015\u4e00\u884c\u4ee3\u7801 \u6700\u5c0f\u5316\u6027\u80fd\u635f\u5931","title":"\u4ec0\u4e48\u662fPinpoint(\u6458\u81eaPinpoint\u5b66\u4e60\u7b14\u8bb0)"},{"location":"admin/ops/pinpoint/#servermap","text":"\u901a\u8fc7\u53ef\u89c6\u5316\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u6a21\u5757\u548c\u4ed6\u4eec\u4e4b\u95f4\u7684\u76f8\u4e92\u8054\u7cfb\u6765\u7406\u89e3\u7cfb\u7edf\u62d3\u6251\u3002\u70b9\u51fb\u67d0\u4e2a\u8282\u70b9\u4f1a\u5c55\u793a\u8fd9\u4e2a\u6a21\u5757\u7684\u8be6\u60c5\uff0c\u6bd4\u5982\u5b83\u5f53\u524d\u7684\u72b6\u6001\u548c\u8bf7\u6c42\u6570\u91cf\u3002","title":"\u670d\u52a1\u5668\u5730\u56fe(ServerMap)"},{"location":"admin/ops/pinpoint/#realtime-active-thread-chart","text":"\u5b9e\u65f6\u76d1\u63a7\u5e94\u7528\u5185\u90e8\u7684\u6d3b\u52a8\u7ebf\u7a0b\u3002","title":"\u5b9e\u65f6\u6d3b\u52a8\u7ebf\u7a0b\u56fe\u8868(Realtime Active Thread Chart)"},{"location":"admin/ops/pinpoint/#requestresponse-scatter-chart","text":"\u957f\u671f\u53ef\u89c6\u5316\u8bf7\u6c42\u6570\u91cf\u548c\u5e94\u7b54\u6a21\u5f0f\u6765\u5b9a\u4f4d\u6f5c\u5728\u95ee\u9898\u3002\u901a\u8fc7\u5728\u56fe\u8868\u4e0a\u62c9\u62fd\u53ef\u4ee5\u9009\u62e9\u8bf7\u6c42\u67e5\u770b\u66f4\u591a\u7684\u8be6\u7ec6\u4fe1\u606f\u3002","title":"\u8bf7\u6c42/\u5e94\u7b54\u5206\u5e03\u56fe\u8868(Request/Response Scatter Chart)"},{"location":"admin/ops/pinpoint/#callstack","text":"\u5728\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\u4e3a\u6bcf\u4e2a\u8c03\u7528\u751f\u6210\u4ee3\u7801\u7ea7\u522b\u7684\u53ef\u89c6\u56fe\uff0c\u5728\u5355\u4e2a\u89c6\u56fe\u4e2d\u5b9a\u4f4d\u74f6\u9888\u548c\u5931\u8d25\u70b9\u3002","title":"\u8c03\u7528\u6808(CallStack)"},{"location":"admin/ops/pinpoint/#inspector","text":"\u67e5\u770b\u5e94\u7528\u4e0a\u7684\u5176\u4ed6\u8be6\u7ec6\u4fe1\u606f\uff0c\u6bd4\u5982CPU\u4f7f\u7528\u7387\uff0c\u5185\u5b58/\u5783\u573e\u56de\u6536\uff0cTPS\uff0c\u548cJVM\u53c2\u6570\u3002","title":"\u5de1\u67e5(Inspector)"},{"location":"admin/ops/pinpoint/#_1","text":"JDK 6+ Tomcat 6/7/8, Jetty 8/9, JBoss EAP 6, Resin 4, Websphere 6/7/8, Vertx 3.3/3.4/3.5 Spring, Spring Boot (Embedded Tomcat, Jetty) Apache HTTP Client 3.x/4.x, JDK HttpConnector, GoogleHttpClient, OkHttpClient, NingAsyncHttpClient Thrift Client, Thrift Service, DUBBO PROVIDER, DUBBO CONSUMER ActiveMQ, RabbitMQ MySQL, Oracle, MSSQL, CUBRID,POSTGRESQL, MARIA Arcus, Memcached, Redis, CASSANDRA iBATIS, MyBatis DBCP, DBCP2, HIKARICP gson, Jackson, Json Lib log4j, Logback \u81ea\u5b9a\u4e49\u6a21\u5757","title":"\u652f\u6301\u6a21\u5757"},{"location":"admin/ops/pinpoint/#pinpointdubbo","text":"","title":"Pinpoint\u4e0eDubbo\u7684\u7ed3\u5408"},{"location":"admin/ops/pinpoint/#pinpoint_1","text":"\u53c2\u8003Pinpoint\u7684 Quick start \u642d\u5efa\u73af\u5883\uff08\u4e0d\u9700\u8981\u542f\u52a8TestApp\uff09","title":"\u542f\u52a8Pinpoint"},{"location":"admin/ops/pinpoint/#dubbo","text":"","title":"\u51c6\u5907Dubbo\u793a\u4f8b\u7a0b\u5e8f"},{"location":"admin/ops/pinpoint/#api","text":"pom.xml ?xml version= 1.0 encoding= UTF-8 ? project xmlns= http://maven.apache.org/POM/4.0.0 xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd modelVersion 4.0.0 /modelVersion groupId com.example /groupId artifactId demo-api /artifactId version 0.0.1-SNAPSHOT /version /project \u65b0\u5efaAPI\u63a5\u53e3\uff1a package com.example.demoapi; public interface HelloService { String sayHello(String name); }","title":"\u521b\u5efaAPI\u5305"},{"location":"admin/ops/pinpoint/#dubbo_1","text":"pom.xml ?xml version= 1.0 encoding= UTF-8 ? project xmlns= http://maven.apache.org/POM/4.0.0 xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd modelVersion 4.0.0 /modelVersion groupId com.example /groupId artifactId demo-provider /artifactId version 0.0.1-SNAPSHOT /version packaging jar /packaging name demo-provider /name parent groupId org.springframework.boot /groupId artifactId spring-boot-starter-parent /artifactId version 2.0.3.RELEASE /version relativePath/ !-- lookup parent from repository -- /parent properties project.build.sourceEncoding UTF-8 /project.build.sourceEncoding project.reporting.outputEncoding UTF-8 /project.reporting.outputEncoding java.version 1.8 /java.version /properties repositories repository id sonatype-nexus-snapshots /id url https://oss.sonatype.org/content/repositories/snapshots /url releases enabled false /enabled /releases snapshots enabled true /enabled /snapshots /repository /repositories dependencies dependency groupId org.springframework.boot /groupId artifactId spring-boot-starter /artifactId /dependency dependency groupId com.alibaba.boot /groupId artifactId dubbo-spring-boot-starter /artifactId version 0.2.0 /version /dependency dependency groupId com.example /groupId artifactId demo-api /artifactId version 0.0.1-SNAPSHOT /version /dependency dependency groupId org.springframework.boot /groupId artifactId spring-boot-starter-test /artifactId scope test /scope /dependency /dependencies build plugins plugin groupId org.springframework.boot /groupId artifactId spring-boot-maven-plugin /artifactId /plugin /plugins /build /project \u5b9e\u73b0 HelloService \u63a5\u53e3\uff1a package com.example.demoprovider.provider; import org.apache.dubbo.config.annotation.Service; import com.example.demoapi.HelloService; @Service(version = ${demo.service.version} , application = ${dubbo.application.id} , protocol = ${dubbo.protocol.id} , registry = ${dubbo.registry.id} ) public class HelloServiceImpl implements HelloService { static int i = 0; @Override public String sayHello(String name) { i++; if (i % 3 == 0) { throw new RuntimeException( ex ); } return Hello + name + ! ; } } \u7f16\u5199 Spring Boot \u5f15\u5bfc\u7a0b\u5e8f\uff1a package com.example.demoprovider; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class DemoProviderApplication { public static void main(String[] args) { SpringApplication.run(DemoProviderApplication.class, args); } } \u914d\u7f6e application.properties \uff1a # Spring boot application spring.application.name = dubbo-provider-demo server.port = 9090 management.port = 9091 # Service version demo.service.version = 1.0.0 # Base packages to scan Dubbo Components (e.g @Service , @Reference) dubbo.scan.basePackages = com.example.demoprovider # Dubbo Config properties ## ApplicationConfig Bean dubbo.application.id = dubbo-provider-demo dubbo.application.name = dubbo-provider-demo ## ProtocolConfig Bean dubbo.protocol.id = dubbo dubbo.protocol.name = dubbo dubbo.protocol.port = 12345 ## RegistryConfig Bean dubbo.registry.id = my-registry dubbo.registry.address = N/A","title":"\u5b9e\u73b0 Dubbo \u670d\u52a1\u63d0\u4f9b\u65b9"},{"location":"admin/ops/pinpoint/#dubbo_2","text":"pom.xml ?xml version= 1.0 encoding= UTF-8 ? project xmlns= http://maven.apache.org/POM/4.0.0 xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd modelVersion 4.0.0 /modelVersion groupId com.example /groupId artifactId demo-consumer /artifactId version 0.0.1-SNAPSHOT /version packaging jar /packaging name demo-consumer /name parent groupId org.springframework.boot /groupId artifactId spring-boot-starter-parent /artifactId version 2.0.3.RELEASE /version relativePath/ !-- lookup parent from repository -- /parent properties project.build.sourceEncoding UTF-8 /project.build.sourceEncoding project.reporting.outputEncoding UTF-8 /project.reporting.outputEncoding java.version 1.8 /java.version /properties repositories repository id sonatype-nexus-snapshots /id url https://oss.sonatype.org/content/repositories/snapshots /url releases enabled false /enabled /releases snapshots enabled true /enabled /snapshots /repository /repositories dependencies dependency groupId org.springframework.boot /groupId artifactId spring-boot-starter-web /artifactId /dependency dependency groupId com.alibaba.boot /groupId artifactId dubbo-spring-boot-starter /artifactId version 0.2.0 /version /dependency dependency groupId com.example /groupId artifactId demo-api /artifactId version 0.0.1-SNAPSHOT /version /dependency dependency groupId org.springframework.boot /groupId artifactId spring-boot-starter-test /artifactId scope test /scope /dependency /dependencies build plugins plugin groupId org.springframework.boot /groupId artifactId spring-boot-maven-plugin /artifactId configuration classifier exec /classifier /configuration /plugin /plugins /build /project \u901a\u8fc7 @Reference \u6ce8\u5165 HelloService package com.example.democonsumer.controller; import org.apache.dubbo.config.annotation.Reference; import com.example.demoapi.HelloService; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; @RestController public class DemoConsumerController { @Reference(version = ${demo.service.version} , application = ${dubbo.application.id} , url = dubbo:// \u6ce8\u610f\uff0c\u8fd9\u91cc\u586b\u5199\u5177\u4f53IP :12345 ) private HelloService helloService; @RequestMapping( /sayHello ) public String sayHello(@RequestParam String name) { return helloService.sayHello(name); } } \u76f4\u8fde\u63d0\u4f9b\u8005\u8c03\u7528\u9700\u8981\u586b\u5199\u5177\u4f53IP\u5730\u5740\uff0c\u5982\u679c\u5199localhost\u4e5f\u53ef\u4ee5\uff0c\u4f46\u662f\u4f1a\u88abPinpoint\u989d\u5916\u8bc6\u522b\u4e3a\u4e00\u4e2a\u672a\u77e5\u670d\u52a1 \u7f16\u5199 Spring Boot \u5f15\u5bfc\u7a0b\u5e8f\uff08Web \u5e94\u7528\uff09\uff1a package com.example.democonsumer; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class DemoConsumerApplication { public static void main(String[] args) { SpringApplication.run(DemoConsumerApplication.class, args); } } \u914d\u7f6e application.properties \uff1a # Spring boot application spring.application.name=dubbo-consumer-demo server.port=8080 management.port=8081 # Service Version demo.service.version=1.0.0 # Dubbo Config properties ## ApplicationConfig Bean dubbo.application.id=dubbo-consumer-demo dubbo.application.name=dubbo-consumer-demo ## ProtocolConfig Bean dubbo.protocol.id=dubbo dubbo.protocol.name=dubbo dubbo.protocol.port=12345","title":"\u5b9e\u73b0 Dubbo \u670d\u52a1\u6d88\u8d39\u65b9"},{"location":"admin/ops/pinpoint/#pinpoint-agent","text":"","title":"\u4f7f\u7528Pinpoint-agent\u542f\u52a8\u670d\u52a1\u63d0\u4f9b\u65b9\u548c\u670d\u52a1\u6d88\u8d39\u65b9"},{"location":"admin/ops/pinpoint/#_2","text":"\u7f16\u8bd1\u6253\u5305 mvn clean package \u9644\u52a0\u53c2\u6570\u542f\u52a8\u670d\u52a1\u63d0\u4f9b\u65b9 java -jar -javaagent:$AGENT_PATH/pinpoint-bootstrap-$VERSION.jar -Dpinpoint.agentId=demo-provider -Dpinpoint.applicationName=DP target/demo-provider-0.0.1-SNAPSHOT.jar \u9644\u52a0\u53c2\u6570\u542f\u52a8\u670d\u52a1\u6d88\u8d39\u65b9 java -jar -javaagent:$AGENT_PATH/pinpoint-bootstrap-$VERSION.jar -Dpinpoint.agentId=demo-consumer -Dpinpoint.applicationName=DC target/demo-comsumer-0.0.1-SNAPSHOT-exec.jar \u8bbf\u95ee\u6d88\u8d39\u65b9\u5730\u5740\u6a21\u62df\u7528\u6237\u8bf7\u6c42 http://localhost:8080/sayHello?name=ABC","title":"\u542f\u52a8\u670d\u52a1\u63d0\u4f9b\u65b9"},{"location":"admin/ops/pinpoint/#pinpoint_2","text":"","title":"\u4f7f\u7528Pinpoint\u5feb\u901f\u5b9a\u4f4d\u95ee\u9898"},{"location":"admin/ops/pinpoint/#_3","text":"\u8fd9\u91cc\u7684\u7528\u6237\u8bf7\u6c42\u662f\u8bf7\u6c42DubboProvider\u6570\u91cf\u7684\u53cc\u500d\uff0c\u539f\u56e0\u662f\u8bb0\u5f55\u4e86favicon.ico\u56fe\u6807\u8bf7\u6c42\u5bfc\u81f4\u7684","title":"\u9996\u9875"},{"location":"admin/ops/pinpoint/#_4","text":"","title":"\u8c03\u7528\u6811"},{"location":"admin/ops/pinpoint/#_5","text":"","title":"\u6df1\u5165\u8ddf\u8e2a"},{"location":"admin/ops/pinpoint/#_6","text":"\u793a\u4f8b\u7b80\u5355\u7684\u6a21\u62df\u4e86Dubbo\u7684\u63d0\u4f9b\u548c\u8c03\u7528\uff0c\u5e76\u6ca1\u6709\u8fdb\u884c\u6570\u636e\u5e93\u7b49\u5176\u4ed6\u4e2d\u95f4\u4ef6\u7684\u5e94\u7528\uff0c\u8be6\u7ec6\u4f7f\u7528\u8bf7\u53c2\u7167Pinpoint\u6587\u6863\u3002","title":"\u5176\u4ed6"},{"location":"admin/ops/skywalking/","text":"\u4f7f\u7528Apache Skywalking (Incubator) \u505a\u5206\u5e03\u5f0f\u8ddf\u8e2a Apache Skywalking(Incubator)\u7b80\u4ecb Apache Skywalking(Incubator) \u4e13\u95e8\u4e3a\u5fae\u670d\u52a1\u67b6\u6784\u548c\u4e91\u539f\u751f\u67b6\u6784\u7cfb\u7edf\u800c\u8bbe\u8ba1\u5e76\u4e14\u652f\u6301\u5206\u5e03\u5f0f\u94fe\u8def\u8ffd\u8e2a\u7684APM\u7cfb\u7edf\u3002 Apache Skywalking(Incubator) \u901a\u8fc7\u52a0\u8f7d\u63a2\u9488\u7684\u65b9\u5f0f\u6536\u96c6\u5e94\u7528\u8c03\u7528\u94fe\u8def\u4fe1\u606f\uff0c\u5e76\u5bf9\u91c7\u96c6\u7684\u8c03\u7528\u94fe\u8def\u4fe1\u606f\u8fdb\u884c\u5206\u6790\uff0c\u751f\u6210\u5e94\u7528\u95f4\u5173\u7cfb\u548c\u670d\u52a1\u95f4\u5173\u7cfb\u4ee5\u53ca\u670d\u52a1\u6307\u6807\u3002 Apache Skywalking (Incubating) \u76ee\u524d\u652f\u6301\u591a\u79cd\u8bed\u8a00\uff0c\u5176\u4e2d\u5305\u62ec Java \uff0c .Net Core \uff0c Node.js \u548c Go \u8bed\u8a00\u3002 \u76ee\u524dSkywalking\u5df2\u7ecf\u652f\u6301\u4ece6\u4e2a\u53ef\u89c6\u5316\u7ef4\u5ea6\u5256\u6790\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u8fd0\u884c\u60c5\u51b5\u3002\u603b\u89c8\u89c6\u56fe\u662f\u5e94\u7528\u548c\u7ec4\u4ef6\u7684\u5168\u5c40\u89c6\u56fe\uff0c\u5176\u4e2d\u5305\u62ec\u7ec4\u4ef6\u548c\u5e94\u7528\u6570\u91cf\uff0c\u5e94\u7528\u7684\u544a\u8b66\u6ce2\u52a8\uff0c\u6162\u670d\u52a1\u5217\u8868\u4ee5\u53ca\u5e94\u7528\u541e\u5410\u91cf\uff1b\u62d3\u6251\u56fe\u4ece\u5e94\u7528\u4f9d\u8d56\u5173\u7cfb\u51fa\u53d1\uff0c\u5c55\u73b0\u6574\u4e2a\u5e94\u7528\u7684\u62d3\u6251\u5173\u7cfb\uff1b\u5e94\u7528\u89c6\u56fe\u5219\u662f\u4ece\u5355\u4e2a\u5e94\u7528\u7684\u89d2\u5ea6\uff0c\u5c55\u73b0\u5e94\u7528\u7684\u4e0a\u4e0b\u6e38\u5173\u7cfb\uff0cTopN\u7684\u670d\u52a1\u548c\u670d\u52a1\u5668\uff0cJVM\u7684\u76f8\u5173\u4fe1\u606f\u4ee5\u53ca\u5bf9\u5e94\u7684\u4e3b\u673a\u4fe1\u606f\u3002\u670d\u52a1\u89c6\u56fe\u5173\u6ce8\u5355\u4e2a\u670d\u52a1\u5165\u53e3\u7684\u8fd0\u884c\u60c5\u51b5\u4ee5\u53ca\u6b64\u670d\u52a1\u7684\u4e0a\u4e0b\u6e38\u4f9d\u8d56\u5173\u7cfb\uff0c\u4f9d\u8d56\u5ea6\uff0c\u5e2e\u52a9\u7528\u6237\u9488\u5bf9\u5355\u4e2a\u670d\u52a1\u7684\u4f18\u5316\u548c\u76d1\u63a7\uff1b\u8c03\u7528\u94fe\u5c55\u73b0\u4e86\u8c03\u7528\u7684\u5355\u6b21\u8bf7\u6c42\u7ecf\u8fc7\u7684\u6240\u6709\u57cb\u70b9\u4ee5\u53ca\u6bcf\u4e2a\u57cb\u70b9\u7684\u6267\u884c\u65f6\u957f\uff1b\u544a\u8b66\u89c6\u56fe\u6839\u636e\u914d\u7f6e\u9608\u503c\u9488\u5bf9\u5e94\u7528\u3001\u670d\u52a1\u5668\u3001\u670d\u52a1\u8fdb\u884c\u5b9e\u65f6\u544a\u8b66\u3002 Dubbo\u4e0eApache Skywalking(Incubator) \u7f16\u5199Dubbo\u793a\u4f8b\u7a0b\u5e8f Dubbo\u5b9e\u4f8b\u7a0b\u5e8f\u5df2\u4e0a\u4f20\u5230 Github\u4ed3\u5e93 \u4e2d\u3002\u65b9\u4fbf\u5927\u5bb6\u4e0b\u8f7d\u4f7f\u7528\u3002 API\u5de5\u7a0b \u670d\u52a1\u63a5\u53e3\uff1a package org.apache.skywalking.demo.interfaces; public interface HelloService { String sayHello(String name); } Dubbo\u670d\u52a1\u63d0\u4f9b\u5de5\u7a0b package org.apache.skywalking.demo.provider; @Service(version = ${demo.service.version} , application = ${dubbo.application.id} , protocol = ${dubbo.protocol.id} , registry = ${dubbo.registry.id} , timeout = 60000) public class HelloServiceImpl implements HelloService { public String sayHello(String name) { LockSupport.parkNanos(TimeUnit.SECONDS.toNanos(1)); return Hello, + name; } } Consumer\u5de5\u7a0b package org.apache.skywalking.demo.consumer; @RestController public class ConsumerController { private static int COUNT = 0; @Reference(version = ${demo.service.version} , application = ${dubbo.application.id} , url = dubbo://localhost:20880 , timeout = 60000) private HelloService helloService; @GetMapping( /sayHello/{name} ) public String sayHello(@PathVariable(name = name ) String name) { if ((COUNT++) % 3 == 0){ throw new RuntimeException(); } LockSupport.parkNanos(TimeUnit.SECONDS.toNanos(2)); return helloService.sayHello(name); } } \u90e8\u7f72Apache Skywalking(Incubator) Apache Skywalking(Incubator\uff09\u5171\u63d0\u4f9b\u4e24\u79cd\u90e8\u7f72\u6a21\u5f0f\uff1a\u5355\u8282\u70b9\u6a21\u5f0f\u548c\u96c6\u7fa4\u6a21\u5f0f\uff0c\u4ee5\u4e0b\u4e3a\u5355\u8282\u70b9\u6a21\u5f0f\u90e8\u7f72\u6b65\u9aa4\uff0c\u96c6\u7fa4\u6a21\u5f0f\u90e8\u7f72\u8be6\u60c5\u53c2\u8003 \u6587\u6863 \u3002 \u4f9d\u8d56\u7b2c\u4e09\u65b9\u7ec4\u4ef6 JDK8+ Elasticsearch 5.x \u90e8\u7f72\u6b65\u9aa4 \u4e0b\u8f7d Apache Skywalking Collector \u90e8\u7f72ElasticSearch \u4fee\u6539elasticsearch.yml\u6587\u4ef6\uff0c\u5e76\u8bbe\u7f6e cluster.name \u8bbe\u7f6e\u6210 CollectorDBCluster \u3002\u6b64\u540d\u79f0\u9700\u8981\u548ccollector\u914d\u7f6e\u6587\u4ef6\u4e00\u81f4\u3002 \u4fee\u6539ES\u914d\u7f6e network.host \u503c\uff0c\u5c06 network.host \u7684\u503c\u4fee\u6539\u6210 0.0.0.0 \u3002 \u542f\u52a8Elasticsearch \u89e3\u538b\u5e76\u542f\u52a8Skywalking Collector\u3002\u8fd0\u884c bin/startup.sh \u547d\u4ee4\u5373\u53ef\u542f\u52a8Skywalking Collector \u542f\u52a8\u793a\u4f8b\u7a0b\u5e8f \u5728\u542f\u52a8\u793a\u4f8b\u7a0b\u5e8f\u4e4b\u524d\uff0c\u6267\u884c\u7f16\u8bd1\u6253\u5305\u7684\u547d\u4ee4: ./mvnw clean package \u542f\u52a8\u670d\u52a1\u63d0\u4f9b\u7aef java -jar -javaagent:$AGENT_PATH/skywalking-agent.jar -Dskywalking.agent.application_code=dubbo-provider -Dskywalking.collector.servers=localhost:10800 dubbo-provider/target/dubbo-provider.jar \u542f\u52a8\u670d\u52a1\u6d88\u8d39\u7aef java -jar -javaagent:$AGENT_PATH/skywalking-agent.jar -Dskywalking.agent.application_code=dubbo-consumer -Dskywalking.collector.servers=localhost:10800 dubbo-consumer/target/dubbo-consumer.jar \u8bbf\u95ee\u6d88\u8d39\u7aef\u63d0\u4f9b\u7684\u670d\u52a1 curl http://localhost:8080/sayHello/test Skywalking\u76d1\u63a7\u622a\u56fe\uff1a \u9996\u9875 \u62d3\u6251\u56fe \u5e94\u7528\u89c6\u56fe JVM\u4fe1\u606f \u670d\u52a1\u89c6\u56fe \u670d\u52a1\u6d88\u8d39\u7aef\uff1a \u670d\u52a1\u63d0\u4f9b\u7aef\uff1a Trace\u89c6\u56fe Span\u4fe1\u606f\uff1a \u544a\u8b66\u89c6\u56fe","title":"\u4f7f\u7528Apache Skywalking (Incubator) \u505a\u5206\u5e03\u5f0f\u8ddf\u8e2a"},{"location":"admin/ops/skywalking/#apache-skywalking-incubator","text":"","title":"\u4f7f\u7528Apache Skywalking (Incubator) \u505a\u5206\u5e03\u5f0f\u8ddf\u8e2a"},{"location":"admin/ops/skywalking/#apache-skywalkingincubator","text":"Apache Skywalking(Incubator) \u4e13\u95e8\u4e3a\u5fae\u670d\u52a1\u67b6\u6784\u548c\u4e91\u539f\u751f\u67b6\u6784\u7cfb\u7edf\u800c\u8bbe\u8ba1\u5e76\u4e14\u652f\u6301\u5206\u5e03\u5f0f\u94fe\u8def\u8ffd\u8e2a\u7684APM\u7cfb\u7edf\u3002 Apache Skywalking(Incubator) \u901a\u8fc7\u52a0\u8f7d\u63a2\u9488\u7684\u65b9\u5f0f\u6536\u96c6\u5e94\u7528\u8c03\u7528\u94fe\u8def\u4fe1\u606f\uff0c\u5e76\u5bf9\u91c7\u96c6\u7684\u8c03\u7528\u94fe\u8def\u4fe1\u606f\u8fdb\u884c\u5206\u6790\uff0c\u751f\u6210\u5e94\u7528\u95f4\u5173\u7cfb\u548c\u670d\u52a1\u95f4\u5173\u7cfb\u4ee5\u53ca\u670d\u52a1\u6307\u6807\u3002 Apache Skywalking (Incubating) \u76ee\u524d\u652f\u6301\u591a\u79cd\u8bed\u8a00\uff0c\u5176\u4e2d\u5305\u62ec Java \uff0c .Net Core \uff0c Node.js \u548c Go \u8bed\u8a00\u3002 \u76ee\u524dSkywalking\u5df2\u7ecf\u652f\u6301\u4ece6\u4e2a\u53ef\u89c6\u5316\u7ef4\u5ea6\u5256\u6790\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u8fd0\u884c\u60c5\u51b5\u3002\u603b\u89c8\u89c6\u56fe\u662f\u5e94\u7528\u548c\u7ec4\u4ef6\u7684\u5168\u5c40\u89c6\u56fe\uff0c\u5176\u4e2d\u5305\u62ec\u7ec4\u4ef6\u548c\u5e94\u7528\u6570\u91cf\uff0c\u5e94\u7528\u7684\u544a\u8b66\u6ce2\u52a8\uff0c\u6162\u670d\u52a1\u5217\u8868\u4ee5\u53ca\u5e94\u7528\u541e\u5410\u91cf\uff1b\u62d3\u6251\u56fe\u4ece\u5e94\u7528\u4f9d\u8d56\u5173\u7cfb\u51fa\u53d1\uff0c\u5c55\u73b0\u6574\u4e2a\u5e94\u7528\u7684\u62d3\u6251\u5173\u7cfb\uff1b\u5e94\u7528\u89c6\u56fe\u5219\u662f\u4ece\u5355\u4e2a\u5e94\u7528\u7684\u89d2\u5ea6\uff0c\u5c55\u73b0\u5e94\u7528\u7684\u4e0a\u4e0b\u6e38\u5173\u7cfb\uff0cTopN\u7684\u670d\u52a1\u548c\u670d\u52a1\u5668\uff0cJVM\u7684\u76f8\u5173\u4fe1\u606f\u4ee5\u53ca\u5bf9\u5e94\u7684\u4e3b\u673a\u4fe1\u606f\u3002\u670d\u52a1\u89c6\u56fe\u5173\u6ce8\u5355\u4e2a\u670d\u52a1\u5165\u53e3\u7684\u8fd0\u884c\u60c5\u51b5\u4ee5\u53ca\u6b64\u670d\u52a1\u7684\u4e0a\u4e0b\u6e38\u4f9d\u8d56\u5173\u7cfb\uff0c\u4f9d\u8d56\u5ea6\uff0c\u5e2e\u52a9\u7528\u6237\u9488\u5bf9\u5355\u4e2a\u670d\u52a1\u7684\u4f18\u5316\u548c\u76d1\u63a7\uff1b\u8c03\u7528\u94fe\u5c55\u73b0\u4e86\u8c03\u7528\u7684\u5355\u6b21\u8bf7\u6c42\u7ecf\u8fc7\u7684\u6240\u6709\u57cb\u70b9\u4ee5\u53ca\u6bcf\u4e2a\u57cb\u70b9\u7684\u6267\u884c\u65f6\u957f\uff1b\u544a\u8b66\u89c6\u56fe\u6839\u636e\u914d\u7f6e\u9608\u503c\u9488\u5bf9\u5e94\u7528\u3001\u670d\u52a1\u5668\u3001\u670d\u52a1\u8fdb\u884c\u5b9e\u65f6\u544a\u8b66\u3002","title":"Apache Skywalking(Incubator)\u7b80\u4ecb"},{"location":"admin/ops/skywalking/#dubboapache-skywalkingincubator","text":"","title":"Dubbo\u4e0eApache Skywalking(Incubator)"},{"location":"admin/ops/skywalking/#dubbo","text":"Dubbo\u5b9e\u4f8b\u7a0b\u5e8f\u5df2\u4e0a\u4f20\u5230 Github\u4ed3\u5e93 \u4e2d\u3002\u65b9\u4fbf\u5927\u5bb6\u4e0b\u8f7d\u4f7f\u7528\u3002","title":"\u7f16\u5199Dubbo\u793a\u4f8b\u7a0b\u5e8f"},{"location":"admin/ops/skywalking/#api","text":"\u670d\u52a1\u63a5\u53e3\uff1a package org.apache.skywalking.demo.interfaces; public interface HelloService { String sayHello(String name); }","title":"API\u5de5\u7a0b"},{"location":"admin/ops/skywalking/#dubbo_1","text":"package org.apache.skywalking.demo.provider; @Service(version = ${demo.service.version} , application = ${dubbo.application.id} , protocol = ${dubbo.protocol.id} , registry = ${dubbo.registry.id} , timeout = 60000) public class HelloServiceImpl implements HelloService { public String sayHello(String name) { LockSupport.parkNanos(TimeUnit.SECONDS.toNanos(1)); return Hello, + name; } }","title":"Dubbo\u670d\u52a1\u63d0\u4f9b\u5de5\u7a0b"},{"location":"admin/ops/skywalking/#consumer","text":"package org.apache.skywalking.demo.consumer; @RestController public class ConsumerController { private static int COUNT = 0; @Reference(version = ${demo.service.version} , application = ${dubbo.application.id} , url = dubbo://localhost:20880 , timeout = 60000) private HelloService helloService; @GetMapping( /sayHello/{name} ) public String sayHello(@PathVariable(name = name ) String name) { if ((COUNT++) % 3 == 0){ throw new RuntimeException(); } LockSupport.parkNanos(TimeUnit.SECONDS.toNanos(2)); return helloService.sayHello(name); } }","title":"Consumer\u5de5\u7a0b"},{"location":"admin/ops/skywalking/#apache-skywalkingincubator_1","text":"Apache Skywalking(Incubator\uff09\u5171\u63d0\u4f9b\u4e24\u79cd\u90e8\u7f72\u6a21\u5f0f\uff1a\u5355\u8282\u70b9\u6a21\u5f0f\u548c\u96c6\u7fa4\u6a21\u5f0f\uff0c\u4ee5\u4e0b\u4e3a\u5355\u8282\u70b9\u6a21\u5f0f\u90e8\u7f72\u6b65\u9aa4\uff0c\u96c6\u7fa4\u6a21\u5f0f\u90e8\u7f72\u8be6\u60c5\u53c2\u8003 \u6587\u6863 \u3002","title":"\u90e8\u7f72Apache Skywalking(Incubator)"},{"location":"admin/ops/skywalking/#_1","text":"JDK8+ Elasticsearch 5.x","title":"\u4f9d\u8d56\u7b2c\u4e09\u65b9\u7ec4\u4ef6"},{"location":"admin/ops/skywalking/#_2","text":"\u4e0b\u8f7d Apache Skywalking Collector \u90e8\u7f72ElasticSearch \u4fee\u6539elasticsearch.yml\u6587\u4ef6\uff0c\u5e76\u8bbe\u7f6e cluster.name \u8bbe\u7f6e\u6210 CollectorDBCluster \u3002\u6b64\u540d\u79f0\u9700\u8981\u548ccollector\u914d\u7f6e\u6587\u4ef6\u4e00\u81f4\u3002 \u4fee\u6539ES\u914d\u7f6e network.host \u503c\uff0c\u5c06 network.host \u7684\u503c\u4fee\u6539\u6210 0.0.0.0 \u3002 \u542f\u52a8Elasticsearch \u89e3\u538b\u5e76\u542f\u52a8Skywalking Collector\u3002\u8fd0\u884c bin/startup.sh \u547d\u4ee4\u5373\u53ef\u542f\u52a8Skywalking Collector","title":"\u90e8\u7f72\u6b65\u9aa4"},{"location":"admin/ops/skywalking/#_3","text":"\u5728\u542f\u52a8\u793a\u4f8b\u7a0b\u5e8f\u4e4b\u524d\uff0c\u6267\u884c\u7f16\u8bd1\u6253\u5305\u7684\u547d\u4ee4: ./mvnw clean package","title":"\u542f\u52a8\u793a\u4f8b\u7a0b\u5e8f"},{"location":"admin/ops/skywalking/#_4","text":"java -jar -javaagent:$AGENT_PATH/skywalking-agent.jar -Dskywalking.agent.application_code=dubbo-provider -Dskywalking.collector.servers=localhost:10800 dubbo-provider/target/dubbo-provider.jar","title":"\u542f\u52a8\u670d\u52a1\u63d0\u4f9b\u7aef"},{"location":"admin/ops/skywalking/#_5","text":"java -jar -javaagent:$AGENT_PATH/skywalking-agent.jar -Dskywalking.agent.application_code=dubbo-consumer -Dskywalking.collector.servers=localhost:10800 dubbo-consumer/target/dubbo-consumer.jar","title":"\u542f\u52a8\u670d\u52a1\u6d88\u8d39\u7aef"},{"location":"admin/ops/skywalking/#_6","text":"curl http://localhost:8080/sayHello/test","title":"\u8bbf\u95ee\u6d88\u8d39\u7aef\u63d0\u4f9b\u7684\u670d\u52a1"},{"location":"admin/ops/skywalking/#skywalking","text":"","title":"Skywalking\u76d1\u63a7\u622a\u56fe\uff1a"},{"location":"admin/ops/skywalking/#_7","text":"","title":"\u9996\u9875"},{"location":"admin/ops/skywalking/#_8","text":"","title":"\u62d3\u6251\u56fe"},{"location":"admin/ops/skywalking/#_9","text":"JVM\u4fe1\u606f","title":"\u5e94\u7528\u89c6\u56fe"},{"location":"admin/ops/skywalking/#_10","text":"\u670d\u52a1\u6d88\u8d39\u7aef\uff1a \u670d\u52a1\u63d0\u4f9b\u7aef\uff1a","title":"\u670d\u52a1\u89c6\u56fe"},{"location":"admin/ops/skywalking/#trace","text":"Span\u4fe1\u606f\uff1a","title":"Trace\u89c6\u56fe"},{"location":"admin/ops/skywalking/#_11","text":"","title":"\u544a\u8b66\u89c6\u56fe"},{"location":"dev/","text":"\u8fd9\u7bc7\u6587\u6863\u7684\u76ee\u6807\u8bfb\u8005\u662f\u5bf9 dubbo \u6e90\u7801\u3001\u8bbe\u8ba1\u6709\u5174\u8da3\u7684\uff0c\u6216\u8005\u6709\u610f\u613f\u52a0\u5165 dubbo \u5f00\u53d1\u7684\u4eba\u7fa4\u3002\u4e3b\u8981\u6db5\u76d6\u4e86 dubbo \u7684\u6846\u67b6\u8bbe\u8ba1\u3001\u6269\u5c55\u673a\u5236\u3001\u7f16\u7801\u89c4\u8303\u3001\u7248\u672c\u7ba1\u7406\u3001\u6784\u5efa\u7b49\u8bdd\u9898\u3002","title":"Home"},{"location":"dev/SPI/","text":"\u6269\u5c55\u70b9\u52a0\u8f7d \u6269\u5c55\u70b9\u914d\u7f6e \u6765\u6e90\uff1a Dubbo \u7684\u6269\u5c55\u70b9\u52a0\u8f7d\u4ece JDK \u6807\u51c6\u7684 SPI (Service Provider Interface) \u6269\u5c55\u70b9\u53d1\u73b0\u673a\u5236\u52a0\u5f3a\u800c\u6765\u3002 Dubbo \u6539\u8fdb\u4e86 JDK \u6807\u51c6\u7684 SPI \u7684\u4ee5\u4e0b\u95ee\u9898\uff1a JDK \u6807\u51c6\u7684 SPI \u4f1a\u4e00\u6b21\u6027\u5b9e\u4f8b\u5316\u6269\u5c55\u70b9\u6240\u6709\u5b9e\u73b0\uff0c\u5982\u679c\u6709\u6269\u5c55\u5b9e\u73b0\u521d\u59cb\u5316\u5f88\u8017\u65f6\uff0c\u4f46\u5982\u679c\u6ca1\u7528\u4e0a\u4e5f\u52a0\u8f7d\uff0c\u4f1a\u5f88\u6d6a\u8d39\u8d44\u6e90\u3002 \u5982\u679c\u6269\u5c55\u70b9\u52a0\u8f7d\u5931\u8d25\uff0c\u8fde\u6269\u5c55\u70b9\u7684\u540d\u79f0\u90fd\u62ff\u4e0d\u5230\u4e86\u3002\u6bd4\u5982\uff1aJDK \u6807\u51c6\u7684 ScriptEngine\uff0c\u901a\u8fc7 getName() \u83b7\u53d6\u811a\u672c\u7c7b\u578b\u7684\u540d\u79f0\uff0c\u4f46\u5982\u679c RubyScriptEngine \u56e0\u4e3a\u6240\u4f9d\u8d56\u7684 jruby.jar \u4e0d\u5b58\u5728\uff0c\u5bfc\u81f4 RubyScriptEngine \u7c7b\u52a0\u8f7d\u5931\u8d25\uff0c\u8fd9\u4e2a\u5931\u8d25\u539f\u56e0\u88ab\u5403\u6389\u4e86\uff0c\u548c ruby \u5bf9\u5e94\u4e0d\u8d77\u6765\uff0c\u5f53\u7528\u6237\u6267\u884c ruby \u811a\u672c\u65f6\uff0c\u4f1a\u62a5\u4e0d\u652f\u6301 ruby\uff0c\u800c\u4e0d\u662f\u771f\u6b63\u5931\u8d25\u7684\u539f\u56e0\u3002 \u589e\u52a0\u4e86\u5bf9\u6269\u5c55\u70b9 IoC \u548c AOP \u7684\u652f\u6301\uff0c\u4e00\u4e2a\u6269\u5c55\u70b9\u53ef\u4ee5\u76f4\u63a5 setter \u6ce8\u5165\u5176\u5b83\u6269\u5c55\u70b9\u3002 \u7ea6\u5b9a\uff1a \u5728\u6269\u5c55\u7c7b\u7684 jar \u5305\u5185 [^1]\uff0c\u653e\u7f6e\u6269\u5c55\u70b9\u914d\u7f6e\u6587\u4ef6 META-INF/dubbo/\u63a5\u53e3\u5168\u9650\u5b9a\u540d \uff0c\u5185\u5bb9\u4e3a\uff1a \u914d\u7f6e\u540d=\u6269\u5c55\u5b9e\u73b0\u7c7b\u5168\u9650\u5b9a\u540d \uff0c\u591a\u4e2a\u5b9e\u73b0\u7c7b\u7528\u6362\u884c\u7b26\u5206\u9694\u3002 \u793a\u4f8b\uff1a \u4ee5\u6269\u5c55 Dubbo \u7684\u534f\u8bae\u4e3a\u4f8b\uff0c\u5728\u534f\u8bae\u7684\u5b9e\u73b0 jar \u5305\u5185\u653e\u7f6e\u6587\u672c\u6587\u4ef6\uff1a META-INF/dubbo/org.apache.dubbo.rpc.Protocol \uff0c\u5185\u5bb9\u4e3a\uff1a xxx=com.alibaba.xxx.XxxProtocol \u5b9e\u73b0\u7c7b\u5185\u5bb9 [^2]\uff1a package com.alibaba.xxx; import org.apache.dubbo.rpc.Protocol; public class XxxProtocol implements Protocol { // ... } \u914d\u7f6e\u6a21\u5757\u4e2d\u7684\u914d\u7f6e Dubbo \u914d\u7f6e\u6a21\u5757\u4e2d\uff0c\u6269\u5c55\u70b9\u5747\u6709\u5bf9\u5e94\u914d\u7f6e\u5c5e\u6027\u6216\u6807\u7b7e\uff0c\u901a\u8fc7\u914d\u7f6e\u6307\u5b9a\u4f7f\u7528\u54ea\u4e2a\u6269\u5c55\u5b9e\u73b0\u3002\u6bd4\u5982\uff1a dubbo:protocol name= xxx / \u6269\u5c55\u70b9\u7279\u6027 \u6269\u5c55\u70b9\u81ea\u52a8\u5305\u88c5 \u81ea\u52a8\u5305\u88c5\u6269\u5c55\u70b9\u7684 Wrapper \u7c7b\u3002 ExtensionLoader \u5728\u52a0\u8f7d\u6269\u5c55\u70b9\u65f6\uff0c\u5982\u679c\u52a0\u8f7d\u5230\u7684\u6269\u5c55\u70b9\u6709\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u5219\u5224\u5b9a\u4e3a\u6269\u5c55\u70b9 Wrapper \u7c7b\u3002 Wrapper\u7c7b\u5185\u5bb9\uff1a package com.alibaba.xxx; import org.apache.dubbo.rpc.Protocol; public class XxxProtocolWrapper implements Protocol { Protocol impl; public XxxProtocolWrapper(Protocol protocol) { impl = protocol; } // \u63a5\u53e3\u65b9\u6cd5\u505a\u4e00\u4e2a\u64cd\u4f5c\u540e\uff0c\u518d\u8c03\u7528extension\u7684\u65b9\u6cd5 public void refer() { //... \u4e00\u4e9b\u64cd\u4f5c impl.refer(); // ... \u4e00\u4e9b\u64cd\u4f5c } // ... } Wrapper \u7c7b\u540c\u6837\u5b9e\u73b0\u4e86\u6269\u5c55\u70b9\u63a5\u53e3\uff0c\u4f46\u662f Wrapper \u4e0d\u662f\u6269\u5c55\u70b9\u7684\u771f\u6b63\u5b9e\u73b0\u3002\u5b83\u7684\u7528\u9014\u4e3b\u8981\u662f\u7528\u4e8e\u4ece ExtensionLoader \u8fd4\u56de\u6269\u5c55\u70b9\u65f6\uff0c\u5305\u88c5\u5728\u771f\u6b63\u7684\u6269\u5c55\u70b9\u5b9e\u73b0\u5916\u3002\u5373\u4ece ExtensionLoader \u4e2d\u8fd4\u56de\u7684\u5b9e\u9645\u4e0a\u662f Wrapper \u7c7b\u7684\u5b9e\u4f8b\uff0cWrapper \u6301\u6709\u4e86\u5b9e\u9645\u7684\u6269\u5c55\u70b9\u5b9e\u73b0\u7c7b\u3002 \u6269\u5c55\u70b9\u7684 Wrapper \u7c7b\u53ef\u4ee5\u6709\u591a\u4e2a\uff0c\u4e5f\u53ef\u4ee5\u6839\u636e\u9700\u8981\u65b0\u589e\u3002 \u901a\u8fc7 Wrapper \u7c7b\u53ef\u4ee5\u628a\u6240\u6709\u6269\u5c55\u70b9\u516c\u5171\u903b\u8f91\u79fb\u81f3 Wrapper \u4e2d\u3002\u65b0\u52a0\u7684 Wrapper \u5728\u6240\u6709\u7684\u6269\u5c55\u70b9\u4e0a\u6dfb\u52a0\u4e86\u903b\u8f91\uff0c\u6709\u4e9b\u7c7b\u4f3c AOP\uff0c\u5373 Wrapper \u4ee3\u7406\u4e86\u6269\u5c55\u70b9\u3002 \u6269\u5c55\u70b9\u81ea\u52a8\u88c5\u914d \u52a0\u8f7d\u6269\u5c55\u70b9\u65f6\uff0c\u81ea\u52a8\u6ce8\u5165\u4f9d\u8d56\u7684\u6269\u5c55\u70b9\u3002\u52a0\u8f7d\u6269\u5c55\u70b9\u65f6\uff0c\u6269\u5c55\u70b9\u5b9e\u73b0\u7c7b\u7684\u6210\u5458\u5982\u679c\u4e3a\u5176\u5b83\u6269\u5c55\u70b9\u7c7b\u578b\uff0c ExtensionLoader \u5728\u4f1a\u81ea\u52a8\u6ce8\u5165\u4f9d\u8d56\u7684\u6269\u5c55\u70b9\u3002 ExtensionLoader \u901a\u8fc7\u626b\u63cf\u6269\u5c55\u70b9\u5b9e\u73b0\u7c7b\u7684\u6240\u6709 setter \u65b9\u6cd5\u6765\u5224\u5b9a\u5176\u6210\u5458\u3002\u5373 ExtensionLoader \u4f1a\u6267\u884c\u6269\u5c55\u70b9\u7684\u62fc\u88c5\u64cd\u4f5c\u3002 \u793a\u4f8b\uff1a\u6709\u4e24\u4e2a\u4e3a\u6269\u5c55\u70b9 CarMaker \uff08\u9020\u8f66\u8005\uff09\u3001 WheelMaker (\u9020\u8f6e\u8005) \u63a5\u53e3\u7c7b\u5982\u4e0b\uff1a public interface CarMaker { Car makeCar(); } public interface WheelMaker { Wheel makeWheel(); } CarMaker \u7684\u4e00\u4e2a\u5b9e\u73b0\u7c7b\uff1a public class RaceCarMaker implements CarMaker { WheelMaker wheelMaker; public setWheelMaker(WheelMaker wheelMaker) { this.wheelMaker = wheelMaker; } public Car makeCar() { // ... Wheel wheel = wheelMaker.makeWheel(); // ... return new RaceCar(wheel, ...); } } ExtensionLoader \u52a0\u8f7d CarMaker \u7684\u6269\u5c55\u70b9\u5b9e\u73b0 RaceCarMaker \u65f6\uff0c setWheelMaker \u65b9\u6cd5\u7684 WheelMaker \u4e5f\u662f\u6269\u5c55\u70b9\u5219\u4f1a\u6ce8\u5165 WheelMaker \u7684\u5b9e\u73b0\u3002 \u8fd9\u91cc\u5e26\u6765\u53e6\u4e00\u4e2a\u95ee\u9898\uff0c ExtensionLoader \u8981\u6ce8\u5165\u4f9d\u8d56\u6269\u5c55\u70b9\u65f6\uff0c\u5982\u4f55\u51b3\u5b9a\u8981\u6ce8\u5165\u4f9d\u8d56\u6269\u5c55\u70b9\u7684\u54ea\u4e2a\u5b9e\u73b0\u3002\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u5373\u662f\u5728\u591a\u4e2a WheelMaker \u7684\u5b9e\u73b0\u4e2d\u8981\u6ce8\u5165\u54ea\u4e2a\u3002 \u8fd9\u4e2a\u95ee\u9898\u5728\u4e0b\u9762\u4e00\u70b9 \u6269\u5c55\u70b9\u81ea\u9002\u5e94 \u4e2d\u8bf4\u660e\u3002 \u6269\u5c55\u70b9\u81ea\u9002\u5e94 ExtensionLoader \u6ce8\u5165\u7684\u4f9d\u8d56\u6269\u5c55\u70b9\u662f\u4e00\u4e2a Adaptive \u5b9e\u4f8b\uff0c\u76f4\u5230\u6269\u5c55\u70b9\u65b9\u6cd5\u6267\u884c\u65f6\u624d\u51b3\u5b9a\u8c03\u7528\u662f\u54ea\u4e00\u4e2a\u6269\u5c55\u70b9\u5b9e\u73b0\u3002 Dubbo \u4f7f\u7528 URL \u5bf9\u8c61\uff08\u5305\u542b\u4e86Key-Value\uff09\u4f20\u9012\u914d\u7f6e\u4fe1\u606f\u3002 \u6269\u5c55\u70b9\u65b9\u6cd5\u8c03\u7528\u4f1a\u6709URL\u53c2\u6570\uff08\u6216\u662f\u53c2\u6570\u6709URL\u6210\u5458\uff09 \u8fd9\u6837\u4f9d\u8d56\u7684\u6269\u5c55\u70b9\u4e5f\u53ef\u4ee5\u4eceURL\u62ff\u5230\u914d\u7f6e\u4fe1\u606f\uff0c\u6240\u6709\u7684\u6269\u5c55\u70b9\u81ea\u5df1\u5b9a\u597d\u914d\u7f6e\u7684Key\u540e\uff0c\u914d\u7f6e\u4fe1\u606f\u4eceURL\u4e0a\u4ece\u6700\u5916\u5c42\u4f20\u5165\u3002URL\u5728\u914d\u7f6e\u4f20\u9012\u4e0a\u5373\u662f\u4e00\u6761\u603b\u7ebf\u3002 \u793a\u4f8b\uff1a\u6709\u4e24\u4e2a\u4e3a\u6269\u5c55\u70b9 CarMaker \u3001 WheelMaker \u63a5\u53e3\u7c7b\u5982\u4e0b\uff1a public interface CarMaker { Car makeCar(URL url); } public interface WheelMaker { Wheel makeWheel(URL url); } CarMaker \u7684\u4e00\u4e2a\u5b9e\u73b0\u7c7b\uff1a public class RaceCarMaker implements CarMaker { WheelMaker wheelMaker; public setWheelMaker(WheelMaker wheelMaker) { this.wheelMaker = wheelMaker; } public Car makeCar(URL url) { // ... Wheel wheel = wheelMaker.makeWheel(url); // ... return new RaceCar(wheel, ...); } } \u5f53\u4e0a\u9762\u6267\u884c // ... Wheel wheel = wheelMaker.makeWheel(url); // ... \u65f6\uff0c\u6ce8\u5165\u7684 Adaptive \u5b9e\u4f8b\u53ef\u4ee5\u63d0\u53d6\u7ea6\u5b9a Key \u6765\u51b3\u5b9a\u4f7f\u7528\u54ea\u4e2a WheelMaker \u5b9e\u73b0\u6765\u8c03\u7528\u5bf9\u5e94\u5b9e\u73b0\u7684\u771f\u6b63\u7684 makeWheel \u65b9\u6cd5\u3002\u5982\u63d0\u53d6 wheel.type , key \u5373 url.get(\"wheel.type\") \u6765\u51b3\u5b9a WheelMake \u5b9e\u73b0\u3002 Adaptive \u5b9e\u4f8b\u7684\u903b\u8f91\u662f\u56fa\u5b9a\uff0c\u6307\u5b9a\u63d0\u53d6\u7684 URL \u7684 Key\uff0c\u5373\u53ef\u4ee5\u4ee3\u7406\u771f\u6b63\u7684\u5b9e\u73b0\u7c7b\u4e0a\uff0c\u53ef\u4ee5\u52a8\u6001\u751f\u6210\u3002 \u5728 Dubbo \u7684 ExtensionLoader \u7684\u6269\u5c55\u70b9\u7c7b\u5bf9\u5e94\u7684 Adaptive \u5b9e\u73b0\u662f\u5728\u52a0\u8f7d\u6269\u5c55\u70b9\u91cc\u52a8\u6001\u751f\u6210\u3002\u6307\u5b9a\u63d0\u53d6\u7684 URL \u7684 Key \u901a\u8fc7 @Adaptive \u6ce8\u89e3\u5728\u63a5\u53e3\u65b9\u6cd5\u4e0a\u63d0\u4f9b\u3002 \u4e0b\u9762\u662f Dubbo \u7684 Transporter \u6269\u5c55\u70b9\u7684\u4ee3\u7801\uff1a public interface Transporter { @Adaptive({ server , transport }) Server bind(URL url, ChannelHandler handler) throws RemotingException; @Adaptive({ client , transport }) Client connect(URL url, ChannelHandler handler) throws RemotingException; } \u5bf9\u4e8e bind() \u65b9\u6cd5\uff0cAdaptive \u5b9e\u73b0\u5148\u67e5\u627e server key\uff0c\u5982\u679c\u8be5 Key \u6ca1\u6709\u503c\u5219\u627e transport key \u503c\uff0c\u6765\u51b3\u5b9a\u4ee3\u7406\u5230\u54ea\u4e2a\u5b9e\u9645\u6269\u5c55\u70b9\u3002 \u6269\u5c55\u70b9\u81ea\u52a8\u6fc0\u6d3b \u5bf9\u4e8e\u96c6\u5408\u7c7b\u6269\u5c55\u70b9\uff0c\u6bd4\u5982\uff1a Filter , InvokerListener , ExportListener , TelnetHandler , StatusChecker \u7b49\uff0c\u53ef\u4ee5\u540c\u65f6\u52a0\u8f7d\u591a\u4e2a\u5b9e\u73b0\uff0c\u6b64\u65f6\uff0c\u53ef\u4ee5\u7528\u81ea\u52a8\u6fc0\u6d3b\u6765\u7b80\u5316\u914d\u7f6e\uff0c\u5982\uff1a import org.apache.dubbo.common.extension.Activate; import org.apache.dubbo.rpc.Filter; @Activate // \u65e0\u6761\u4ef6\u81ea\u52a8\u6fc0\u6d3b public class XxxFilter implements Filter { // ... } \u6216\uff1a import org.apache.dubbo.common.extension.Activate; import org.apache.dubbo.rpc.Filter; @Activate( xxx ) // \u5f53\u914d\u7f6e\u4e86xxx\u53c2\u6570\uff0c\u5e76\u4e14\u53c2\u6570\u4e3a\u6709\u6548\u503c\u65f6\u6fc0\u6d3b\uff0c\u6bd4\u5982\u914d\u4e86cache= lru \uff0c\u81ea\u52a8\u6fc0\u6d3bCacheFilter\u3002 public class XxxFilter implements Filter { // ... } \u6216\uff1a import org.apache.dubbo.common.extension.Activate; import org.apache.dubbo.rpc.Filter; @Activate(group = provider , value = xxx ) // \u53ea\u5bf9\u63d0\u4f9b\u65b9\u6fc0\u6d3b\uff0cgroup\u53ef\u9009 provider \u6216 consumer public class XxxFilter implements Filter { // ... } [^1]: \u6ce8\u610f\uff1a\u8fd9\u91cc\u7684\u914d\u7f6e\u6587\u4ef6\u662f\u653e\u5728\u4f60\u81ea\u5df1\u7684 jar \u5305\u5185\uff0c\u4e0d\u662f dubbo \u672c\u8eab\u7684 jar \u5305\u5185\uff0cDubbo \u4f1a\u5168 ClassPath \u626b\u63cf\u6240\u6709 jar \u5305\u5185\u540c\u540d\u7684\u8fd9\u4e2a\u6587\u4ef6\uff0c\u7136\u540e\u8fdb\u884c\u5408\u5e76 [^2]: \u6ce8\u610f\uff1a\u6269\u5c55\u70b9\u4f7f\u7528\u5355\u4e00\u5b9e\u4f8b\u52a0\u8f7d\uff08\u8bf7\u786e\u4fdd\u6269\u5c55\u5b9e\u73b0\u7684\u7ebf\u7a0b\u5b89\u5168\u6027\uff09\uff0c\u7f13\u5b58\u5728 ExtensionLoader \u4e2d","title":"\u6269\u5c55\u70b9\u52a0\u8f7d"},{"location":"dev/SPI/#_1","text":"","title":"\u6269\u5c55\u70b9\u52a0\u8f7d"},{"location":"dev/SPI/#_2","text":"","title":"\u6269\u5c55\u70b9\u914d\u7f6e"},{"location":"dev/SPI/#_3","text":"Dubbo \u7684\u6269\u5c55\u70b9\u52a0\u8f7d\u4ece JDK \u6807\u51c6\u7684 SPI (Service Provider Interface) \u6269\u5c55\u70b9\u53d1\u73b0\u673a\u5236\u52a0\u5f3a\u800c\u6765\u3002 Dubbo \u6539\u8fdb\u4e86 JDK \u6807\u51c6\u7684 SPI \u7684\u4ee5\u4e0b\u95ee\u9898\uff1a JDK \u6807\u51c6\u7684 SPI \u4f1a\u4e00\u6b21\u6027\u5b9e\u4f8b\u5316\u6269\u5c55\u70b9\u6240\u6709\u5b9e\u73b0\uff0c\u5982\u679c\u6709\u6269\u5c55\u5b9e\u73b0\u521d\u59cb\u5316\u5f88\u8017\u65f6\uff0c\u4f46\u5982\u679c\u6ca1\u7528\u4e0a\u4e5f\u52a0\u8f7d\uff0c\u4f1a\u5f88\u6d6a\u8d39\u8d44\u6e90\u3002 \u5982\u679c\u6269\u5c55\u70b9\u52a0\u8f7d\u5931\u8d25\uff0c\u8fde\u6269\u5c55\u70b9\u7684\u540d\u79f0\u90fd\u62ff\u4e0d\u5230\u4e86\u3002\u6bd4\u5982\uff1aJDK \u6807\u51c6\u7684 ScriptEngine\uff0c\u901a\u8fc7 getName() \u83b7\u53d6\u811a\u672c\u7c7b\u578b\u7684\u540d\u79f0\uff0c\u4f46\u5982\u679c RubyScriptEngine \u56e0\u4e3a\u6240\u4f9d\u8d56\u7684 jruby.jar \u4e0d\u5b58\u5728\uff0c\u5bfc\u81f4 RubyScriptEngine \u7c7b\u52a0\u8f7d\u5931\u8d25\uff0c\u8fd9\u4e2a\u5931\u8d25\u539f\u56e0\u88ab\u5403\u6389\u4e86\uff0c\u548c ruby \u5bf9\u5e94\u4e0d\u8d77\u6765\uff0c\u5f53\u7528\u6237\u6267\u884c ruby \u811a\u672c\u65f6\uff0c\u4f1a\u62a5\u4e0d\u652f\u6301 ruby\uff0c\u800c\u4e0d\u662f\u771f\u6b63\u5931\u8d25\u7684\u539f\u56e0\u3002 \u589e\u52a0\u4e86\u5bf9\u6269\u5c55\u70b9 IoC \u548c AOP \u7684\u652f\u6301\uff0c\u4e00\u4e2a\u6269\u5c55\u70b9\u53ef\u4ee5\u76f4\u63a5 setter \u6ce8\u5165\u5176\u5b83\u6269\u5c55\u70b9\u3002","title":"\u6765\u6e90\uff1a"},{"location":"dev/SPI/#_4","text":"\u5728\u6269\u5c55\u7c7b\u7684 jar \u5305\u5185 [^1]\uff0c\u653e\u7f6e\u6269\u5c55\u70b9\u914d\u7f6e\u6587\u4ef6 META-INF/dubbo/\u63a5\u53e3\u5168\u9650\u5b9a\u540d \uff0c\u5185\u5bb9\u4e3a\uff1a \u914d\u7f6e\u540d=\u6269\u5c55\u5b9e\u73b0\u7c7b\u5168\u9650\u5b9a\u540d \uff0c\u591a\u4e2a\u5b9e\u73b0\u7c7b\u7528\u6362\u884c\u7b26\u5206\u9694\u3002","title":"\u7ea6\u5b9a\uff1a"},{"location":"dev/SPI/#_5","text":"\u4ee5\u6269\u5c55 Dubbo \u7684\u534f\u8bae\u4e3a\u4f8b\uff0c\u5728\u534f\u8bae\u7684\u5b9e\u73b0 jar \u5305\u5185\u653e\u7f6e\u6587\u672c\u6587\u4ef6\uff1a META-INF/dubbo/org.apache.dubbo.rpc.Protocol \uff0c\u5185\u5bb9\u4e3a\uff1a xxx=com.alibaba.xxx.XxxProtocol \u5b9e\u73b0\u7c7b\u5185\u5bb9 [^2]\uff1a package com.alibaba.xxx; import org.apache.dubbo.rpc.Protocol; public class XxxProtocol implements Protocol { // ... }","title":"\u793a\u4f8b\uff1a"},{"location":"dev/SPI/#_6","text":"Dubbo \u914d\u7f6e\u6a21\u5757\u4e2d\uff0c\u6269\u5c55\u70b9\u5747\u6709\u5bf9\u5e94\u914d\u7f6e\u5c5e\u6027\u6216\u6807\u7b7e\uff0c\u901a\u8fc7\u914d\u7f6e\u6307\u5b9a\u4f7f\u7528\u54ea\u4e2a\u6269\u5c55\u5b9e\u73b0\u3002\u6bd4\u5982\uff1a dubbo:protocol name= xxx /","title":"\u914d\u7f6e\u6a21\u5757\u4e2d\u7684\u914d\u7f6e"},{"location":"dev/SPI/#_7","text":"","title":"\u6269\u5c55\u70b9\u7279\u6027"},{"location":"dev/SPI/#_8","text":"\u81ea\u52a8\u5305\u88c5\u6269\u5c55\u70b9\u7684 Wrapper \u7c7b\u3002 ExtensionLoader \u5728\u52a0\u8f7d\u6269\u5c55\u70b9\u65f6\uff0c\u5982\u679c\u52a0\u8f7d\u5230\u7684\u6269\u5c55\u70b9\u6709\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u5219\u5224\u5b9a\u4e3a\u6269\u5c55\u70b9 Wrapper \u7c7b\u3002 Wrapper\u7c7b\u5185\u5bb9\uff1a package com.alibaba.xxx; import org.apache.dubbo.rpc.Protocol; public class XxxProtocolWrapper implements Protocol { Protocol impl; public XxxProtocolWrapper(Protocol protocol) { impl = protocol; } // \u63a5\u53e3\u65b9\u6cd5\u505a\u4e00\u4e2a\u64cd\u4f5c\u540e\uff0c\u518d\u8c03\u7528extension\u7684\u65b9\u6cd5 public void refer() { //... \u4e00\u4e9b\u64cd\u4f5c impl.refer(); // ... \u4e00\u4e9b\u64cd\u4f5c } // ... } Wrapper \u7c7b\u540c\u6837\u5b9e\u73b0\u4e86\u6269\u5c55\u70b9\u63a5\u53e3\uff0c\u4f46\u662f Wrapper \u4e0d\u662f\u6269\u5c55\u70b9\u7684\u771f\u6b63\u5b9e\u73b0\u3002\u5b83\u7684\u7528\u9014\u4e3b\u8981\u662f\u7528\u4e8e\u4ece ExtensionLoader \u8fd4\u56de\u6269\u5c55\u70b9\u65f6\uff0c\u5305\u88c5\u5728\u771f\u6b63\u7684\u6269\u5c55\u70b9\u5b9e\u73b0\u5916\u3002\u5373\u4ece ExtensionLoader \u4e2d\u8fd4\u56de\u7684\u5b9e\u9645\u4e0a\u662f Wrapper \u7c7b\u7684\u5b9e\u4f8b\uff0cWrapper \u6301\u6709\u4e86\u5b9e\u9645\u7684\u6269\u5c55\u70b9\u5b9e\u73b0\u7c7b\u3002 \u6269\u5c55\u70b9\u7684 Wrapper \u7c7b\u53ef\u4ee5\u6709\u591a\u4e2a\uff0c\u4e5f\u53ef\u4ee5\u6839\u636e\u9700\u8981\u65b0\u589e\u3002 \u901a\u8fc7 Wrapper \u7c7b\u53ef\u4ee5\u628a\u6240\u6709\u6269\u5c55\u70b9\u516c\u5171\u903b\u8f91\u79fb\u81f3 Wrapper \u4e2d\u3002\u65b0\u52a0\u7684 Wrapper \u5728\u6240\u6709\u7684\u6269\u5c55\u70b9\u4e0a\u6dfb\u52a0\u4e86\u903b\u8f91\uff0c\u6709\u4e9b\u7c7b\u4f3c AOP\uff0c\u5373 Wrapper \u4ee3\u7406\u4e86\u6269\u5c55\u70b9\u3002","title":"\u6269\u5c55\u70b9\u81ea\u52a8\u5305\u88c5"},{"location":"dev/SPI/#_9","text":"\u52a0\u8f7d\u6269\u5c55\u70b9\u65f6\uff0c\u81ea\u52a8\u6ce8\u5165\u4f9d\u8d56\u7684\u6269\u5c55\u70b9\u3002\u52a0\u8f7d\u6269\u5c55\u70b9\u65f6\uff0c\u6269\u5c55\u70b9\u5b9e\u73b0\u7c7b\u7684\u6210\u5458\u5982\u679c\u4e3a\u5176\u5b83\u6269\u5c55\u70b9\u7c7b\u578b\uff0c ExtensionLoader \u5728\u4f1a\u81ea\u52a8\u6ce8\u5165\u4f9d\u8d56\u7684\u6269\u5c55\u70b9\u3002 ExtensionLoader \u901a\u8fc7\u626b\u63cf\u6269\u5c55\u70b9\u5b9e\u73b0\u7c7b\u7684\u6240\u6709 setter \u65b9\u6cd5\u6765\u5224\u5b9a\u5176\u6210\u5458\u3002\u5373 ExtensionLoader \u4f1a\u6267\u884c\u6269\u5c55\u70b9\u7684\u62fc\u88c5\u64cd\u4f5c\u3002 \u793a\u4f8b\uff1a\u6709\u4e24\u4e2a\u4e3a\u6269\u5c55\u70b9 CarMaker \uff08\u9020\u8f66\u8005\uff09\u3001 WheelMaker (\u9020\u8f6e\u8005) \u63a5\u53e3\u7c7b\u5982\u4e0b\uff1a public interface CarMaker { Car makeCar(); } public interface WheelMaker { Wheel makeWheel(); } CarMaker \u7684\u4e00\u4e2a\u5b9e\u73b0\u7c7b\uff1a public class RaceCarMaker implements CarMaker { WheelMaker wheelMaker; public setWheelMaker(WheelMaker wheelMaker) { this.wheelMaker = wheelMaker; } public Car makeCar() { // ... Wheel wheel = wheelMaker.makeWheel(); // ... return new RaceCar(wheel, ...); } } ExtensionLoader \u52a0\u8f7d CarMaker \u7684\u6269\u5c55\u70b9\u5b9e\u73b0 RaceCarMaker \u65f6\uff0c setWheelMaker \u65b9\u6cd5\u7684 WheelMaker \u4e5f\u662f\u6269\u5c55\u70b9\u5219\u4f1a\u6ce8\u5165 WheelMaker \u7684\u5b9e\u73b0\u3002 \u8fd9\u91cc\u5e26\u6765\u53e6\u4e00\u4e2a\u95ee\u9898\uff0c ExtensionLoader \u8981\u6ce8\u5165\u4f9d\u8d56\u6269\u5c55\u70b9\u65f6\uff0c\u5982\u4f55\u51b3\u5b9a\u8981\u6ce8\u5165\u4f9d\u8d56\u6269\u5c55\u70b9\u7684\u54ea\u4e2a\u5b9e\u73b0\u3002\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u5373\u662f\u5728\u591a\u4e2a WheelMaker \u7684\u5b9e\u73b0\u4e2d\u8981\u6ce8\u5165\u54ea\u4e2a\u3002 \u8fd9\u4e2a\u95ee\u9898\u5728\u4e0b\u9762\u4e00\u70b9 \u6269\u5c55\u70b9\u81ea\u9002\u5e94 \u4e2d\u8bf4\u660e\u3002","title":"\u6269\u5c55\u70b9\u81ea\u52a8\u88c5\u914d"},{"location":"dev/SPI/#_10","text":"ExtensionLoader \u6ce8\u5165\u7684\u4f9d\u8d56\u6269\u5c55\u70b9\u662f\u4e00\u4e2a Adaptive \u5b9e\u4f8b\uff0c\u76f4\u5230\u6269\u5c55\u70b9\u65b9\u6cd5\u6267\u884c\u65f6\u624d\u51b3\u5b9a\u8c03\u7528\u662f\u54ea\u4e00\u4e2a\u6269\u5c55\u70b9\u5b9e\u73b0\u3002 Dubbo \u4f7f\u7528 URL \u5bf9\u8c61\uff08\u5305\u542b\u4e86Key-Value\uff09\u4f20\u9012\u914d\u7f6e\u4fe1\u606f\u3002 \u6269\u5c55\u70b9\u65b9\u6cd5\u8c03\u7528\u4f1a\u6709URL\u53c2\u6570\uff08\u6216\u662f\u53c2\u6570\u6709URL\u6210\u5458\uff09 \u8fd9\u6837\u4f9d\u8d56\u7684\u6269\u5c55\u70b9\u4e5f\u53ef\u4ee5\u4eceURL\u62ff\u5230\u914d\u7f6e\u4fe1\u606f\uff0c\u6240\u6709\u7684\u6269\u5c55\u70b9\u81ea\u5df1\u5b9a\u597d\u914d\u7f6e\u7684Key\u540e\uff0c\u914d\u7f6e\u4fe1\u606f\u4eceURL\u4e0a\u4ece\u6700\u5916\u5c42\u4f20\u5165\u3002URL\u5728\u914d\u7f6e\u4f20\u9012\u4e0a\u5373\u662f\u4e00\u6761\u603b\u7ebf\u3002 \u793a\u4f8b\uff1a\u6709\u4e24\u4e2a\u4e3a\u6269\u5c55\u70b9 CarMaker \u3001 WheelMaker \u63a5\u53e3\u7c7b\u5982\u4e0b\uff1a public interface CarMaker { Car makeCar(URL url); } public interface WheelMaker { Wheel makeWheel(URL url); } CarMaker \u7684\u4e00\u4e2a\u5b9e\u73b0\u7c7b\uff1a public class RaceCarMaker implements CarMaker { WheelMaker wheelMaker; public setWheelMaker(WheelMaker wheelMaker) { this.wheelMaker = wheelMaker; } public Car makeCar(URL url) { // ... Wheel wheel = wheelMaker.makeWheel(url); // ... return new RaceCar(wheel, ...); } } \u5f53\u4e0a\u9762\u6267\u884c // ... Wheel wheel = wheelMaker.makeWheel(url); // ... \u65f6\uff0c\u6ce8\u5165\u7684 Adaptive \u5b9e\u4f8b\u53ef\u4ee5\u63d0\u53d6\u7ea6\u5b9a Key \u6765\u51b3\u5b9a\u4f7f\u7528\u54ea\u4e2a WheelMaker \u5b9e\u73b0\u6765\u8c03\u7528\u5bf9\u5e94\u5b9e\u73b0\u7684\u771f\u6b63\u7684 makeWheel \u65b9\u6cd5\u3002\u5982\u63d0\u53d6 wheel.type , key \u5373 url.get(\"wheel.type\") \u6765\u51b3\u5b9a WheelMake \u5b9e\u73b0\u3002 Adaptive \u5b9e\u4f8b\u7684\u903b\u8f91\u662f\u56fa\u5b9a\uff0c\u6307\u5b9a\u63d0\u53d6\u7684 URL \u7684 Key\uff0c\u5373\u53ef\u4ee5\u4ee3\u7406\u771f\u6b63\u7684\u5b9e\u73b0\u7c7b\u4e0a\uff0c\u53ef\u4ee5\u52a8\u6001\u751f\u6210\u3002 \u5728 Dubbo \u7684 ExtensionLoader \u7684\u6269\u5c55\u70b9\u7c7b\u5bf9\u5e94\u7684 Adaptive \u5b9e\u73b0\u662f\u5728\u52a0\u8f7d\u6269\u5c55\u70b9\u91cc\u52a8\u6001\u751f\u6210\u3002\u6307\u5b9a\u63d0\u53d6\u7684 URL \u7684 Key \u901a\u8fc7 @Adaptive \u6ce8\u89e3\u5728\u63a5\u53e3\u65b9\u6cd5\u4e0a\u63d0\u4f9b\u3002 \u4e0b\u9762\u662f Dubbo \u7684 Transporter \u6269\u5c55\u70b9\u7684\u4ee3\u7801\uff1a public interface Transporter { @Adaptive({ server , transport }) Server bind(URL url, ChannelHandler handler) throws RemotingException; @Adaptive({ client , transport }) Client connect(URL url, ChannelHandler handler) throws RemotingException; } \u5bf9\u4e8e bind() \u65b9\u6cd5\uff0cAdaptive \u5b9e\u73b0\u5148\u67e5\u627e server key\uff0c\u5982\u679c\u8be5 Key \u6ca1\u6709\u503c\u5219\u627e transport key \u503c\uff0c\u6765\u51b3\u5b9a\u4ee3\u7406\u5230\u54ea\u4e2a\u5b9e\u9645\u6269\u5c55\u70b9\u3002","title":"\u6269\u5c55\u70b9\u81ea\u9002\u5e94"},{"location":"dev/SPI/#_11","text":"\u5bf9\u4e8e\u96c6\u5408\u7c7b\u6269\u5c55\u70b9\uff0c\u6bd4\u5982\uff1a Filter , InvokerListener , ExportListener , TelnetHandler , StatusChecker \u7b49\uff0c\u53ef\u4ee5\u540c\u65f6\u52a0\u8f7d\u591a\u4e2a\u5b9e\u73b0\uff0c\u6b64\u65f6\uff0c\u53ef\u4ee5\u7528\u81ea\u52a8\u6fc0\u6d3b\u6765\u7b80\u5316\u914d\u7f6e\uff0c\u5982\uff1a import org.apache.dubbo.common.extension.Activate; import org.apache.dubbo.rpc.Filter; @Activate // \u65e0\u6761\u4ef6\u81ea\u52a8\u6fc0\u6d3b public class XxxFilter implements Filter { // ... } \u6216\uff1a import org.apache.dubbo.common.extension.Activate; import org.apache.dubbo.rpc.Filter; @Activate( xxx ) // \u5f53\u914d\u7f6e\u4e86xxx\u53c2\u6570\uff0c\u5e76\u4e14\u53c2\u6570\u4e3a\u6709\u6548\u503c\u65f6\u6fc0\u6d3b\uff0c\u6bd4\u5982\u914d\u4e86cache= lru \uff0c\u81ea\u52a8\u6fc0\u6d3bCacheFilter\u3002 public class XxxFilter implements Filter { // ... } \u6216\uff1a import org.apache.dubbo.common.extension.Activate; import org.apache.dubbo.rpc.Filter; @Activate(group = provider , value = xxx ) // \u53ea\u5bf9\u63d0\u4f9b\u65b9\u6fc0\u6d3b\uff0cgroup\u53ef\u9009 provider \u6216 consumer public class XxxFilter implements Filter { // ... } [^1]: \u6ce8\u610f\uff1a\u8fd9\u91cc\u7684\u914d\u7f6e\u6587\u4ef6\u662f\u653e\u5728\u4f60\u81ea\u5df1\u7684 jar \u5305\u5185\uff0c\u4e0d\u662f dubbo \u672c\u8eab\u7684 jar \u5305\u5185\uff0cDubbo \u4f1a\u5168 ClassPath \u626b\u63cf\u6240\u6709 jar \u5305\u5185\u540c\u540d\u7684\u8fd9\u4e2a\u6587\u4ef6\uff0c\u7136\u540e\u8fdb\u884c\u5408\u5e76 [^2]: \u6ce8\u610f\uff1a\u6269\u5c55\u70b9\u4f7f\u7528\u5355\u4e00\u5b9e\u4f8b\u52a0\u8f7d\uff08\u8bf7\u786e\u4fdd\u6269\u5c55\u5b9e\u73b0\u7684\u7ebf\u7a0b\u5b89\u5168\u6027\uff09\uff0c\u7f13\u5b58\u5728 ExtensionLoader \u4e2d","title":"\u6269\u5c55\u70b9\u81ea\u52a8\u6fc0\u6d3b"},{"location":"dev/SUMMARY/","text":"Summary 1 \u6e90\u7801\u6784\u5efa 2 \u6846\u67b6\u8bbe\u8ba1 3 \u6269\u5c55\u70b9\u52a0\u8f7d 4 \u5b9e\u73b0\u7ec6\u8282 5 SPI \u6269\u5c55\u5b9e\u73b0 5.1 \u534f\u8bae\u6269\u5c55 5.2 \u8c03\u7528\u62e6\u622a\u6269\u5c55 5.3 \u5f15\u7528\u76d1\u542c\u6269\u5c55 5.4 \u66b4\u9732\u76d1\u542c\u6269\u5c55 5.5 \u96c6\u7fa4\u6269\u5c55 5.6 \u8def\u7531\u6269\u5c55 5.7 \u8d1f\u8f7d\u5747\u8861\u6269\u5c55 5.8 \u5408\u5e76\u7ed3\u679c\u6269\u5c55 5.9 \u6ce8\u518c\u4e2d\u5fc3\u6269\u5c55 5.10 \u76d1\u63a7\u4e2d\u5fc3\u6269\u5c55 5.11 \u6269\u5c55\u70b9\u52a0\u8f7d\u6269\u5c55 5.12 \u52a8\u6001\u4ee3\u7406\u6269\u5c55 5.13 \u7f16\u8bd1\u5668\u6269\u5c55 5.14 \u6d88\u606f\u6d3e\u53d1\u6269\u5c55 5.15 \u7ebf\u7a0b\u6c60\u6269\u5c55 5.16 \u5e8f\u5217\u5316\u6269\u5c55 5.17 \u7f51\u7edc\u4f20\u8f93\u6269\u5c55 5.18 \u4fe1\u606f\u4ea4\u6362\u6269\u5c55 5.19 \u7ec4\u7f51\u6269\u5c55 5.20 Telnet \u547d\u4ee4\u6269\u5c55 5.21 \u72b6\u6001\u68c0\u67e5\u6269\u5c55 5.22 \u5bb9\u5668\u6269\u5c55 5.23 \u9875\u9762\u6269\u5c55 5.24 \u7f13\u5b58\u6269\u5c55 5.25 \u9a8c\u8bc1\u6269\u5c55 5.26 \u65e5\u5fd7\u9002\u914d\u6269\u5c55 5.26 \u914d\u7f6e\u4e2d\u5fc3 6 \u516c\u5171\u5951\u7ea6 7 \u7f16\u7801\u7ea6\u5b9a 8 \u8bbe\u8ba1\u539f\u5219 8.1 \u9b54\u9b3c\u5728\u7ec6\u8282 8.2 \u4e00\u4e9b\u8bbe\u8ba1\u4e0a\u7684\u57fa\u672c\u5e38\u8bc6 8.3 \u8c08\u8c08\u6269\u5145\u5f0f\u6269\u5c55\u4e0e\u589e\u91cf\u5f0f\u6269\u5c55 8.4 \u914d\u7f6e\u8bbe\u8ba1 8.5 \u8bbe\u8ba1\u5b9e\u73b0\u7684\u5065\u58ee\u6027 8.6 \u9632\u75f4\u5446\u8bbe\u8ba1 8.7 \u6269\u5c55\u70b9\u91cd\u6784 9 \u7248\u672c\u7ba1\u7406 10 \u8d21\u732e 11 \u68c0\u67e5\u5217\u8868 12 \u574f\u5473\u9053 13 \u6280\u672f\u517c\u5bb9\u6027\u6d4b\u8bd5","title":"Summary"},{"location":"dev/SUMMARY/#summary","text":"1 \u6e90\u7801\u6784\u5efa 2 \u6846\u67b6\u8bbe\u8ba1 3 \u6269\u5c55\u70b9\u52a0\u8f7d 4 \u5b9e\u73b0\u7ec6\u8282 5 SPI \u6269\u5c55\u5b9e\u73b0 5.1 \u534f\u8bae\u6269\u5c55 5.2 \u8c03\u7528\u62e6\u622a\u6269\u5c55 5.3 \u5f15\u7528\u76d1\u542c\u6269\u5c55 5.4 \u66b4\u9732\u76d1\u542c\u6269\u5c55 5.5 \u96c6\u7fa4\u6269\u5c55 5.6 \u8def\u7531\u6269\u5c55 5.7 \u8d1f\u8f7d\u5747\u8861\u6269\u5c55 5.8 \u5408\u5e76\u7ed3\u679c\u6269\u5c55 5.9 \u6ce8\u518c\u4e2d\u5fc3\u6269\u5c55 5.10 \u76d1\u63a7\u4e2d\u5fc3\u6269\u5c55 5.11 \u6269\u5c55\u70b9\u52a0\u8f7d\u6269\u5c55 5.12 \u52a8\u6001\u4ee3\u7406\u6269\u5c55 5.13 \u7f16\u8bd1\u5668\u6269\u5c55 5.14 \u6d88\u606f\u6d3e\u53d1\u6269\u5c55 5.15 \u7ebf\u7a0b\u6c60\u6269\u5c55 5.16 \u5e8f\u5217\u5316\u6269\u5c55 5.17 \u7f51\u7edc\u4f20\u8f93\u6269\u5c55 5.18 \u4fe1\u606f\u4ea4\u6362\u6269\u5c55 5.19 \u7ec4\u7f51\u6269\u5c55 5.20 Telnet \u547d\u4ee4\u6269\u5c55 5.21 \u72b6\u6001\u68c0\u67e5\u6269\u5c55 5.22 \u5bb9\u5668\u6269\u5c55 5.23 \u9875\u9762\u6269\u5c55 5.24 \u7f13\u5b58\u6269\u5c55 5.25 \u9a8c\u8bc1\u6269\u5c55 5.26 \u65e5\u5fd7\u9002\u914d\u6269\u5c55 5.26 \u914d\u7f6e\u4e2d\u5fc3 6 \u516c\u5171\u5951\u7ea6 7 \u7f16\u7801\u7ea6\u5b9a 8 \u8bbe\u8ba1\u539f\u5219 8.1 \u9b54\u9b3c\u5728\u7ec6\u8282 8.2 \u4e00\u4e9b\u8bbe\u8ba1\u4e0a\u7684\u57fa\u672c\u5e38\u8bc6 8.3 \u8c08\u8c08\u6269\u5145\u5f0f\u6269\u5c55\u4e0e\u589e\u91cf\u5f0f\u6269\u5c55 8.4 \u914d\u7f6e\u8bbe\u8ba1 8.5 \u8bbe\u8ba1\u5b9e\u73b0\u7684\u5065\u58ee\u6027 8.6 \u9632\u75f4\u5446\u8bbe\u8ba1 8.7 \u6269\u5c55\u70b9\u91cd\u6784 9 \u7248\u672c\u7ba1\u7406 10 \u8d21\u732e 11 \u68c0\u67e5\u5217\u8868 12 \u574f\u5473\u9053 13 \u6280\u672f\u517c\u5bb9\u6027\u6d4b\u8bd5","title":"Summary"},{"location":"dev/TCK/","text":"\u6280\u672f\u517c\u5bb9\u6027\u6d4b\u8bd5 Dubbo \u7684\u534f\u8bae\uff0c\u901a\u8baf\uff0c\u5e8f\u5217\u5316\uff0c\u6ce8\u518c\u4e2d\u5fc3\uff0c\u8d1f\u8f7d\u5747\u7b56\u7b49\u6269\u5c55\u70b9\uff0c\u90fd\u6709\u591a\u79cd\u53ef\u9009\u7b56\u7565\uff0c\u4ee5\u5e94\u5bf9\u4e0d\u540c\u5e94\u7528\u573a\u666f\uff0c\u800c\u6211\u4eec\u7684\u6d4b\u8bd5\u7528\u4f8b\u5f88\u5206\u6563\uff0c\u5f53\u7528\u6237\u81ea\u5df1\u9700\u8981\u52a0\u4e00\u79cd\u65b0\u7684\u5b9e\u73b0\u65f6\uff0c\u603b\u662f\u4e0d\u786e\u5b9a\u80fd\u5426\u6ee1\u8db3\u6269\u5c55\u70b9\u7684\u5b8c\u6574\u5951\u7ea6\u3002 \u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u6838\u5fc3\u6269\u5c55\u70b9\u5199 TCK (Technology Compatibility Kit)\uff0c\u7528\u6237\u589e\u52a0\u4e00\u79cd\u6269\u5c55\u5b9e\u73b0\uff0c\u53ea\u9700\u901a\u8fc7 TCK\uff0c\u5373\u53ef\u786e\u4fdd\u4e0e\u6846\u67b6\u7684\u5176\u5b83\u90e8\u5206\u517c\u5bb9\u8fd0\u884c\uff0c\u53ef\u4ee5\u6709\u6548\u63d0\u9ad8\u6574\u4f53\u5065\u58ee\u6027\uff0c\u4e5f\u65b9\u4fbf\u7b2c\u4e09\u65b9\u6269\u5c55\u8005\u63a5\u5165\uff0c\u52a0\u901f\u5f00\u6e90\u793e\u533a\u7684\u6210\u719f\u3002 \u5f00\u6e90\u793e\u533a\u7684\u884c\u77e5\u540c\u5b66\u5df2\u7740\u624b\u7814\u7a76\u8fd9\u4e00\u5757\uff0c\u4ed6\u7684\u521d\u6b65\u60f3\u6cd5\u662f\u501f\u9274 JBoss \u7684 CDI-TCK\uff0c\u505a\u4e00\u4e2a Dubbo \u7684 TCK \u57fa\u7840\u6846\u67b6\uff0c\u5728\u6b64\u4e4b\u4e0a\u5b9e\u73b0 Dubbo \u7684\u6269\u5c55\u70b9 TCK \u7528\u4f8b\u3002 \u53c2\u89c1\uff1ahttp://docs.jboss.org/cdi/tck/reference/1.0.1-Final/html/introduction.html \u5982\u679c\u5927\u5bb6\u6709\u5174\u8da3\uff0c\u4e5f\u53ef\u4ee5\u4e00\u8d77\u7814\u7a76\uff0c\u548c\u884c\u77e5\u4e00\u5757\u8ba8\u8bba\u3002 Protocol TCK TODO Registry TCK TODO","title":"\u517c\u5bb9\u6027\u6d4b\u8bd5"},{"location":"dev/TCK/#_1","text":"Dubbo \u7684\u534f\u8bae\uff0c\u901a\u8baf\uff0c\u5e8f\u5217\u5316\uff0c\u6ce8\u518c\u4e2d\u5fc3\uff0c\u8d1f\u8f7d\u5747\u7b56\u7b49\u6269\u5c55\u70b9\uff0c\u90fd\u6709\u591a\u79cd\u53ef\u9009\u7b56\u7565\uff0c\u4ee5\u5e94\u5bf9\u4e0d\u540c\u5e94\u7528\u573a\u666f\uff0c\u800c\u6211\u4eec\u7684\u6d4b\u8bd5\u7528\u4f8b\u5f88\u5206\u6563\uff0c\u5f53\u7528\u6237\u81ea\u5df1\u9700\u8981\u52a0\u4e00\u79cd\u65b0\u7684\u5b9e\u73b0\u65f6\uff0c\u603b\u662f\u4e0d\u786e\u5b9a\u80fd\u5426\u6ee1\u8db3\u6269\u5c55\u70b9\u7684\u5b8c\u6574\u5951\u7ea6\u3002 \u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u6838\u5fc3\u6269\u5c55\u70b9\u5199 TCK (Technology Compatibility Kit)\uff0c\u7528\u6237\u589e\u52a0\u4e00\u79cd\u6269\u5c55\u5b9e\u73b0\uff0c\u53ea\u9700\u901a\u8fc7 TCK\uff0c\u5373\u53ef\u786e\u4fdd\u4e0e\u6846\u67b6\u7684\u5176\u5b83\u90e8\u5206\u517c\u5bb9\u8fd0\u884c\uff0c\u53ef\u4ee5\u6709\u6548\u63d0\u9ad8\u6574\u4f53\u5065\u58ee\u6027\uff0c\u4e5f\u65b9\u4fbf\u7b2c\u4e09\u65b9\u6269\u5c55\u8005\u63a5\u5165\uff0c\u52a0\u901f\u5f00\u6e90\u793e\u533a\u7684\u6210\u719f\u3002 \u5f00\u6e90\u793e\u533a\u7684\u884c\u77e5\u540c\u5b66\u5df2\u7740\u624b\u7814\u7a76\u8fd9\u4e00\u5757\uff0c\u4ed6\u7684\u521d\u6b65\u60f3\u6cd5\u662f\u501f\u9274 JBoss \u7684 CDI-TCK\uff0c\u505a\u4e00\u4e2a Dubbo \u7684 TCK \u57fa\u7840\u6846\u67b6\uff0c\u5728\u6b64\u4e4b\u4e0a\u5b9e\u73b0 Dubbo \u7684\u6269\u5c55\u70b9 TCK \u7528\u4f8b\u3002 \u53c2\u89c1\uff1ahttp://docs.jboss.org/cdi/tck/reference/1.0.1-Final/html/introduction.html \u5982\u679c\u5927\u5bb6\u6709\u5174\u8da3\uff0c\u4e5f\u53ef\u4ee5\u4e00\u8d77\u7814\u7a76\uff0c\u548c\u884c\u77e5\u4e00\u5757\u8ba8\u8bba\u3002","title":"\u6280\u672f\u517c\u5bb9\u6027\u6d4b\u8bd5"},{"location":"dev/TCK/#protocol-tck","text":"TODO","title":"Protocol TCK"},{"location":"dev/TCK/#registry-tck","text":"TODO","title":"Registry TCK"},{"location":"dev/build/","text":"\u6e90\u7801\u6784\u5efa \u4ee3\u7801\u7b7e\u51fa \u901a\u8fc7\u4ee5\u4e0b\u7684\u8fd9\u4e2a\u547d\u4ee4\u7b7e\u51fa\u6700\u65b0\u7684\u9879\u76ee\u6e90\u7801 [^1]\uff1a git clone https://github.com/apache/dubbo.git dubbo \u5206\u652f \u6211\u4eec\u4f7f\u7528 master \u4f5c\u4e3a\u4e3b\u5e72\u7248\u672c\u7684\u5f00\u53d1\uff0c\u4f7f\u7528\u5206\u652f\u4f5c\u4e3a\u7ef4\u62a4\u7248\u672c\u3002\u53ef\u4ee5\u901a\u8fc7 https://github.com/apache/dubbo/tags \u6765\u67e5\u770b\u6240\u6709\u7248\u672c\u7684\u6807\u7b7e\u3002 \u6784\u5efa Dubbo \u4f7f\u7528 maven \u4f5c\u4e3a\u6784\u5efa\u5de5\u5177\u3002 \u8981\u6c42 Java 1.5 \u4ee5\u4e0a\u7684\u7248\u672c Maven 2.2.1 \u6216\u8005\u4ee5\u4e0a\u7684\u7248\u672c \u6784\u5efa\u4e4b\u524d\u9700\u8981\u914d\u7f6e\u4ee5\u4e0b\u7684 MAVEN_OPTS export MAVEN_OPTS=-Xmx1024m -XX:MaxPermSize=512m \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u505a\u4e00\u6b21\u6784\u5efa mvn clean install \u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u7684\u6784\u5efa\u547d\u4ee4\u6765\u8df3\u8fc7\u5355\u5143\u6d4b\u8bd5 mvn install -Dmaven.test.skip \u6784\u5efa\u6e90\u4ee3\u7801 jar \u5305 \u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u4ee5\u6784\u5efa Dubbo \u7684\u6e90\u4ee3\u7801 jar \u5305 mvn clean source:jar install -Dmaven.test.skip \u5e76\u4e14\u4fee\u6539\u4f60\u7684\u6837\u4f8b\u9879\u76ee\u4e2d\u7684dubbo\u4f9d\u8d56\u4e3a\u672c\u5730\u4ed3\u5e93\u7684SANPSHOT\u7248\u672c\uff0c\u7136\u540e\u4f7f\u7528\u8fdc\u7a0bdebug\u6765\u8c03\u8bd5dubbo\u3002 IDE \u652f\u6301 \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u6765\u751f\u6210 IDE \u7684\u5de5\u7a0b Intellij Idea mvn idea:idea eclipse mvn eclipse:eclipse \u5728 eclipse \u4e2d\u5bfc\u5165 \u9996\u5148\uff0c\u9700\u8981\u5728 eclipse \u4e2d\u914d\u7f6e maven \u4ed3\u5e93\u3002\u901a\u8fc7 Preferences - Java - Build Path - Classpath \u5b9a\u4e49 M2_REPO \u7684 classpath \u53d8\u91cf\u6307\u5411\u672c\u5730\u7684 maven \u4ed3\u5e93\u3002 [^2] \u4e5f\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u7684 maven \u547d\u4ee4\u914d\u7f6e\uff1a mvn eclipse:configure-workspace -Declipse.workspace=/path/to/the/workspace/ [^1]: \u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728 https://github.com/apache/dubbo \u4e0a\u6d4f\u89c8\u6e90\u4ee3\u7801 [^2]: UNIX \u4e0b\u7684\u8def\u5f84\u662f ${HOME}/.m2/repository, Windows \u4e0b\u7684\u8def\u5f84\u662f C:\\Documents and Settings\\ .m2\\repository","title":"\u6e90\u7801\u6784\u5efa"},{"location":"dev/build/#_1","text":"","title":"\u6e90\u7801\u6784\u5efa"},{"location":"dev/build/#_2","text":"\u901a\u8fc7\u4ee5\u4e0b\u7684\u8fd9\u4e2a\u547d\u4ee4\u7b7e\u51fa\u6700\u65b0\u7684\u9879\u76ee\u6e90\u7801 [^1]\uff1a git clone https://github.com/apache/dubbo.git dubbo","title":"\u4ee3\u7801\u7b7e\u51fa"},{"location":"dev/build/#_3","text":"\u6211\u4eec\u4f7f\u7528 master \u4f5c\u4e3a\u4e3b\u5e72\u7248\u672c\u7684\u5f00\u53d1\uff0c\u4f7f\u7528\u5206\u652f\u4f5c\u4e3a\u7ef4\u62a4\u7248\u672c\u3002\u53ef\u4ee5\u901a\u8fc7 https://github.com/apache/dubbo/tags \u6765\u67e5\u770b\u6240\u6709\u7248\u672c\u7684\u6807\u7b7e\u3002","title":"\u5206\u652f"},{"location":"dev/build/#_4","text":"Dubbo \u4f7f\u7528 maven \u4f5c\u4e3a\u6784\u5efa\u5de5\u5177\u3002 \u8981\u6c42 Java 1.5 \u4ee5\u4e0a\u7684\u7248\u672c Maven 2.2.1 \u6216\u8005\u4ee5\u4e0a\u7684\u7248\u672c \u6784\u5efa\u4e4b\u524d\u9700\u8981\u914d\u7f6e\u4ee5\u4e0b\u7684 MAVEN_OPTS export MAVEN_OPTS=-Xmx1024m -XX:MaxPermSize=512m \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u505a\u4e00\u6b21\u6784\u5efa mvn clean install \u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u7684\u6784\u5efa\u547d\u4ee4\u6765\u8df3\u8fc7\u5355\u5143\u6d4b\u8bd5 mvn install -Dmaven.test.skip","title":"\u6784\u5efa"},{"location":"dev/build/#jar","text":"\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u4ee5\u6784\u5efa Dubbo \u7684\u6e90\u4ee3\u7801 jar \u5305 mvn clean source:jar install -Dmaven.test.skip \u5e76\u4e14\u4fee\u6539\u4f60\u7684\u6837\u4f8b\u9879\u76ee\u4e2d\u7684dubbo\u4f9d\u8d56\u4e3a\u672c\u5730\u4ed3\u5e93\u7684SANPSHOT\u7248\u672c\uff0c\u7136\u540e\u4f7f\u7528\u8fdc\u7a0bdebug\u6765\u8c03\u8bd5dubbo\u3002","title":"\u6784\u5efa\u6e90\u4ee3\u7801 jar \u5305"},{"location":"dev/build/#ide","text":"\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u6765\u751f\u6210 IDE \u7684\u5de5\u7a0b","title":"IDE \u652f\u6301"},{"location":"dev/build/#intellij-idea","text":"mvn idea:idea","title":"Intellij Idea"},{"location":"dev/build/#eclipse","text":"mvn eclipse:eclipse \u5728 eclipse \u4e2d\u5bfc\u5165 \u9996\u5148\uff0c\u9700\u8981\u5728 eclipse \u4e2d\u914d\u7f6e maven \u4ed3\u5e93\u3002\u901a\u8fc7 Preferences - Java - Build Path - Classpath \u5b9a\u4e49 M2_REPO \u7684 classpath \u53d8\u91cf\u6307\u5411\u672c\u5730\u7684 maven \u4ed3\u5e93\u3002 [^2] \u4e5f\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u7684 maven \u547d\u4ee4\u914d\u7f6e\uff1a mvn eclipse:configure-workspace -Declipse.workspace=/path/to/the/workspace/ [^1]: \u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728 https://github.com/apache/dubbo \u4e0a\u6d4f\u89c8\u6e90\u4ee3\u7801 [^2]: UNIX \u4e0b\u7684\u8def\u5f84\u662f ${HOME}/.m2/repository, Windows \u4e0b\u7684\u8def\u5f84\u662f C:\\Documents and Settings\\ .m2\\repository","title":"eclipse"},{"location":"dev/checklist/","text":"\u68c0\u67e5\u5217\u8868 \u53d1\u5e03\u524d checklist jira ticket \u8fc7\u4e00\u904d svn change list ticket \u5173\u8054 code test code find bugs \u4fee\u590d\u65f6 checklist \u4fee\u590d\u4ee3\u7801\u524d\u5148\u5efa ticket \u4fee\u590d\u4ee3\u7801\u524d\u5148\u5199\u6d4b\u8bd5\u7528\u4f8b \u9700\u8981\u4f19\u4f34\u68c0\u67e5 test code(\u6b63\u5e38\u6d41\u7a0b/\u5f02\u5e38\u6d41\u7a0b) \u8bb2\u4e00\u904d\u903b\u8f91 \u5951\u7ea6\u6587\u6863\u5316 \u4ee5\u4e0a\u5185\u5bb9\u90fd\u5199\u5230ticket\u7684\u8bc4\u8bba\u4e0a \u4ee3\u7801\u6ce8\u91ca\u5199\u6e05\u695a\uff0c\u7528\u4e2d\u6587\u65e0\u59a8 \u6bcf\u4e2a\u7248\u672c\u8981\u6709 owner\uff0c\u786e\u4fdd scope \u548c check Partner Check Partner \u4ee5\u7528\u6237\u7684\u65b9\u5f0f\u8fd0\u884c\u4e00\u4e0b\u529f\u80fd Partner \u53d1\u73b0\u95ee\u9898\u3001\u6dfb\u52a0\u6d4b\u8bd5\uff08\u96c6\u6210\u6d4b\u8bd5\uff09\u76f4\u5230\u4e0d\u518d\u590d\u73b0\uff1bOwner \u5b8c\u6210\u5b9e\u73b0\u3002\uff08\u4fdd\u8bc1\u4e24\u65b9\u5728Partner Check\u4e0a\u7684\u65f6\u95f4\u6295\u5165\uff09 Owner \u5411 Partner \u8bb2\u8ff0\u4e00\u904d\u5b9e\u73b0\u3002","title":"\u68c0\u67e5\u5217\u8868"},{"location":"dev/checklist/#_1","text":"","title":"\u68c0\u67e5\u5217\u8868"},{"location":"dev/checklist/#checklist","text":"jira ticket \u8fc7\u4e00\u904d svn change list ticket \u5173\u8054 code test code find bugs","title":"\u53d1\u5e03\u524d checklist"},{"location":"dev/checklist/#checklist_1","text":"\u4fee\u590d\u4ee3\u7801\u524d\u5148\u5efa ticket \u4fee\u590d\u4ee3\u7801\u524d\u5148\u5199\u6d4b\u8bd5\u7528\u4f8b \u9700\u8981\u4f19\u4f34\u68c0\u67e5 test code(\u6b63\u5e38\u6d41\u7a0b/\u5f02\u5e38\u6d41\u7a0b) \u8bb2\u4e00\u904d\u903b\u8f91 \u5951\u7ea6\u6587\u6863\u5316 \u4ee5\u4e0a\u5185\u5bb9\u90fd\u5199\u5230ticket\u7684\u8bc4\u8bba\u4e0a \u4ee3\u7801\u6ce8\u91ca\u5199\u6e05\u695a\uff0c\u7528\u4e2d\u6587\u65e0\u59a8 \u6bcf\u4e2a\u7248\u672c\u8981\u6709 owner\uff0c\u786e\u4fdd scope \u548c check","title":"\u4fee\u590d\u65f6 checklist"},{"location":"dev/checklist/#partner-check","text":"Partner \u4ee5\u7528\u6237\u7684\u65b9\u5f0f\u8fd0\u884c\u4e00\u4e0b\u529f\u80fd Partner \u53d1\u73b0\u95ee\u9898\u3001\u6dfb\u52a0\u6d4b\u8bd5\uff08\u96c6\u6210\u6d4b\u8bd5\uff09\u76f4\u5230\u4e0d\u518d\u590d\u73b0\uff1bOwner \u5b8c\u6210\u5b9e\u73b0\u3002\uff08\u4fdd\u8bc1\u4e24\u65b9\u5728Partner Check\u4e0a\u7684\u65f6\u95f4\u6295\u5165\uff09 Owner \u5411 Partner \u8bb2\u8ff0\u4e00\u904d\u5b9e\u73b0\u3002","title":"Partner Check"},{"location":"dev/code-smell/","text":"\u574f\u5473\u9053 \u8fd9\u91cc\u8bb0\u5f55\u7684\u662f Dubbo \u8bbe\u8ba1\u6216\u5b9e\u73b0\u4e0d\u4f18\u96c5\u7684\u5730\u65b9\u3002 URL \u8f6c\u6362 1. \u70b9\u5bf9\u70b9\u66b4\u9732\u548c\u5f15\u7528\u670d\u52a1 \u76f4\u63a5\u66b4\u9732\u670d\u52a1\uff1a EXPORT(dubbo://provider-address/com.xxx.XxxService?version=1.0.0 ) \u70b9\u5bf9\u70b9\u76f4\u8fde\u670d\u52a1\uff1a REFER(dubbo://provider-address/com.xxx.XxxService?version=1.0.0) 2. \u901a\u8fc7\u6ce8\u518c\u4e2d\u5fc3\u66b4\u9732\u670d\u52a1 \u5411\u6ce8\u518c\u4e2d\u5fc3\u66b4\u9732\u670d\u52a1\uff1a EXPORT(registry://registry-address/org.apache.dubbo.registry.RegistrySerevice?registry=dubbo export=ENCODE(dubbo://provider-address/com.xxx.XxxService?version=1.0.0)) \u83b7\u53d6\u6ce8\u518c\u4e2d\u5fc3\uff1a url.setProtocol(url.getParameter( registry , dubbo )) GETREGISTRY(dubbo://registry-address/org.apache.dubbo.registry.RegistrySerevice) \u6ce8\u518c\u670d\u52a1\u5730\u5740\uff1a url.getParameterAndDecoded( export )) REGISTER(dubbo://provider-address/com.xxx.XxxService?version=1.0.0) 3. \u901a\u8fc7\u6ce8\u518c\u4e2d\u5fc3\u5f15\u7528\u670d\u52a1 \u4ece\u6ce8\u518c\u4e2d\u5fc3\u8ba2\u9605\u670d\u52a1\uff1a REFER(registry://registry-address/org.apache.dubbo.registry.RegistrySerevice?registry=dubbo refer=ENCODE(version=1.0.0)) \u83b7\u53d6\u6ce8\u518c\u4e2d\u5fc3\uff1a url.setProtocol(url.getParameter( registry , dubbo )) GETREGISTRY(dubbo://registry-address/org.apache.dubbo.registry.RegistrySerevice) \u8ba2\u9605\u670d\u52a1\u5730\u5740\uff1a url.addParameters(url.getParameterAndDecoded( refer )) SUBSCRIBE(dubbo://registry-address/com.xxx.XxxService?version=1.0.0) \u901a\u77e5\u670d\u52a1\u5730\u5740\uff1a url.addParameters(url.getParameterAndDecoded( refer )) NOTIFY(dubbo://provider-address/com.xxx.XxxService?version=1.0.0) 4. \u6ce8\u518c\u4e2d\u5fc3\u63a8\u9001\u8def\u7531\u89c4\u5219 \u6ce8\u518c\u4e2d\u5fc3\u8def\u7531\u89c4\u5219\u63a8\u9001\uff1a NOTIFY(route://registry-address/com.xxx.XxxService?router=script type=js rule=ENCODE(function{...})) \u83b7\u53d6\u8def\u7531\u5668\uff1a url.setProtocol(url.getParameter( router , script )) GETROUTE(script://registry-address/com.xxx.XxxService?type=js rule=ENCODE(function{...})) 5. \u4ece\u6587\u4ef6\u52a0\u8f7d\u8def\u7531\u89c4\u5219 \u4ece\u6587\u4ef6\u52a0\u8f7d\u8def\u7531\u89c4\u5219\uff1a GETROUTE(file://path/file.js?router=script) \u83b7\u53d6\u8def\u7531\u5668\uff1a url.setProtocol(url.getParameter( router , script )).addParameter( type , SUFFIX(file)).addParameter( rule , READ(file)) GETROUTE(script://path/file.js?type=js rule=ENCODE(function{...})) \u8c03\u7528\u53c2\u6570 path \u670d\u52a1\u8def\u5f84 group \u670d\u52a1\u5206\u7ec4 version \u670d\u52a1\u7248\u672c dubbo \u4f7f\u7528\u7684 dubbo \u7248\u672c token \u9a8c\u8bc1\u4ee4\u724c timeout \u8c03\u7528\u8d85\u65f6 \u6269\u5c55\u70b9\u7684\u52a0\u8f7d 1. \u81ea\u9002\u5e94\u6269\u5c55\u70b9 ExtensionLoader \u52a0\u8f7d\u6269\u5c55\u70b9\u65f6\uff0c\u4f1a\u68c0\u67e5\u6269\u5c55\u70b9\u7684\u5c5e\u6027\uff08\u901a\u8fc7set\u65b9\u6cd5\u5224\u65ad\uff09\uff0c\u5982\u8be5\u5c5e\u6027\u662f\u6269\u5c55\u70b9\u7c7b\u578b\uff0c\u5219\u4f1a\u6ce8\u5165\u6269\u5c55\u70b9\u5bf9\u8c61\u3002\u56e0\u4e3a\u6ce8\u5165\u65f6\u4e0d\u80fd\u786e\u5b9a\u4f7f\u7528\u54ea\u4e2a\u6269\u5c55\u70b9\uff08\u5728\u4f7f\u7528\u65f6\u786e\u5b9a\uff09\uff0c\u6240\u4ee5\u6ce8\u5165\u7684\u662f\u4e00\u4e2a\u81ea\u9002\u5e94\u6269\u5c55\uff08\u4e00\u4e2a\u4ee3\u7406\uff09\u3002\u81ea\u9002\u5e94\u6269\u5c55\u70b9\u8c03\u7528\u65f6\uff0c\u9009\u53d6\u4e00\u4e2a\u771f\u6b63\u7684\u6269\u5c55\u70b9\uff0c\u5e76\u4ee3\u7406\u5230\u5176\u4e0a\u5b8c\u6210\u8c03\u7528\u3002Dubbo \u662f\u6839\u636e\u8c03\u7528\u65b9\u6cd5\u53c2\u6570\uff08\u4e0a\u9762\u6709\u8c03\u7528\u54ea\u4e2a\u6269\u5c55\u70b9\u7684\u4fe1\u606f\uff09\u6765\u9009\u53d6\u4e00\u4e2a\u771f\u6b63\u7684\u6269\u5c55\u70b9\u3002 \u5728 Dubbo \u7ed9\u5b9a\u6240\u6709\u7684\u6269\u5c55\u70b9\u4e0a\u8c03\u7528\u90fd\u6709 URL \u53c2\u6570\uff08\u6574\u4e2a\u6269\u5c55\u70b9\u7f51\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\uff09\u3002\u81ea\u9002\u5e94\u6269\u5c55\u5373\u662f\u4ece URL \u786e\u5b9a\u8981\u8c03\u7528\u54ea\u4e2a\u6269\u5c55\u70b9\u5b9e\u73b0\u3002URL \u54ea\u4e2a Key \u7684 Value \u7528\u6765\u786e\u5b9a\u4f7f\u7528\u54ea\u4e2a\u6269\u5c55\u70b9\uff0c\u8fd9\u4e2a\u4fe1\u606f\u901a\u8fc7\u7684 @Adaptive \u6ce8\u89e3\u5728\u65b9\u6cd5\u4e0a\u8bf4\u660e\u3002 @Extension public interface Car { @Adaptive({ http://10.20.160.198/wiki/display/dubbo/car.type , http://10.20.160.198/wiki/display/dubbo/transport.type }) public run(URL url, Type1 arg1, Type2 arg2); } \u7531\u4e8e\u81ea\u9002\u5e94\u6269\u5c55\u70b9\u7684\u4e0a\u9762\u7684\u7ea6\u5b9a\uff0cExtensionLoader \u4f1a\u4e3a\u6269\u5c55\u70b9\u81ea\u52a8\u751f\u6210\u81ea\u9002\u5e94\u6269\u5c55\u70b9\u7c7b(\u901a\u8fc7\u5b57\u8282\u7801)\uff0c\u5e76\u5c06\u5176\u5b9e\u4f8b\u6ce8\u5165\u3002 ExtensionLoader \u751f\u6210\u7684\u81ea\u9002\u5e94\u6269\u5c55\u70b9\u7c7b\u5982\u4e0b\uff1a package \u6269\u5c55\u70b9\u63a5\u53e3\u6240\u5728\u5305 ; public class \u6269\u5c55\u70b9\u63a5\u53e3\u540d $Adpative implements \u6269\u5c55\u70b9\u63a5\u53e3 { public \u6709@Adaptive\u6ce8\u89e3\u7684\u63a5\u53e3\u65b9\u6cd5 ( \u65b9\u6cd5\u53c2\u6570 ) { if(\u662f\u5426\u6709URL\u7c7b\u578b\u65b9\u6cd5\u53c2\u6570?) \u4f7f\u7528\u8be5URL\u53c2\u6570 else if(\u662f\u5426\u6709\u65b9\u6cd5\u7c7b\u578b\u4e0a\u6709URL\u5c5e\u6027) \u4f7f\u7528\u8be5URL\u5c5e\u6027 # else \u5728\u52a0\u8f7d\u6269\u5c55\u70b9\u751f\u6210\u81ea\u9002\u5e94\u6269\u5c55\u70b9\u7c7b\u65f6\u629b\u5f02\u5e38\uff0c\u5373\u52a0\u8f7d\u6269\u5c55\u70b9\u5931\u8d25\uff01 if(\u83b7\u53d6\u7684URL == null) { throw new IllegalArgumentException( url == null ); } \u6839\u636e@Adaptive\u6ce8\u89e3\u4e0a\u58f0\u660e\u7684Key\u7684\u987a\u5e8f\uff0c\u4eceURL\u83b7\u81f4Value\uff0c\u4f5c\u4e3a\u5b9e\u9645\u6269\u5c55\u70b9\u540d\u3002 \u5982URL\u6ca1\u6709Value\uff0c\u5219\u4f7f\u7528\u7f3a\u7701\u6269\u5c55\u70b9\u5b9e\u73b0\u3002\u5982\u6ca1\u6709\u6269\u5c55\u70b9\uff0c throw new IllegalStateException( Fail to get extension ); \u5728\u6269\u5c55\u70b9\u5b9e\u73b0\u8c03\u7528\u8be5\u65b9\u6cd5\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\u3002 } public \u6709@Adaptive\u6ce8\u89e3\u7684\u63a5\u53e3\u65b9\u6cd5 ( \u65b9\u6cd5\u53c2\u6570 ) { throw new UnsupportedOperationException( is not adaptive method! ); } } @Adaptive \u6ce8\u89e3\u4f7f\u7528\u5982\u4e0b\uff1a \u5982\u679c URL \u8fd9\u4e9b Key \u90fd\u6ca1\u6709 Value\uff0c\u4f7f\u7528\u7f3a\u7701\u7684\u6269\u5c55\uff08\u5728\u63a5\u53e3\u7684 Default \u4e2d\u8bbe\u5b9a\u7684\u503c\uff09\u3002\u6bd4\u5982\uff0cString[] {\"key1\", \"key2\"}\uff0c\u8868\u793a\u5148\u5728 URL \u4e0a\u627e key1 \u7684 Value \u4f5c\u4e3a\u8981 Adapt \u6210\u7684 Extension \u540d\uff1bkey1 \u6ca1\u6709 Value\uff0c\u5219\u4f7f\u7528 key2 \u7684 Value \u4f5c\u4e3a\u8981 Adapt \u6210\u7684 Extension \u540d\u3002 key2 \u6ca1\u6709 Value\uff0c\u4f7f\u7528\u7f3a\u7701\u7684\u6269\u5c55\u3002\u5982\u679c\u6ca1\u6709\u8bbe\u5b9a\u7f3a\u7701\u6269\u5c55\uff0c\u5219\u65b9\u6cd5\u8c03\u7528\u4f1a\u629b\u51fa IllegalStateException\u3002\u5982\u679c\u4e0d\u8bbe\u7f6e\u5219\u7f3a\u7701\u4f7f\u7528 Extension \u63a5\u53e3\u7c7b\u540d\u7684\u70b9\u5206\u9694\u5c0f\u5199\u5b57\u4e32\u3002\u5373\u5bf9\u4e8e Extension \u63a5\u53e3 org.apache.dubbo.xxx.YyyInvokerWrapper \u7684\u7f3a\u7701\u503c\u4e3a new String[] {\"yyy.invoker.wrapper\"} Callback \u529f\u80fd 1. \u53c2\u6570\u56de\u8c03 \u4e3b\u8981\u539f\u7406: \u5728\u4e00\u4e2a consumer- provider \u7684\u957f\u8fde\u63a5\u4e0a\uff0c\u81ea\u52a8\u5728 Consumer \u7aef\u66b4\u9732\u4e00\u4e2a\u670d\u52a1\uff08\u5b9e\u73b0\u65b9\u6cd5\u53c2\u6570\u4e0a\u58f0\u660e\u7684\u63a5\u53e3A\uff09\uff0cprovider \u7aef\u4fbf\u53ef\u53cd\u5411\u8c03\u7528\u5230 consumer \u7aef\u7684\u63a5\u53e3\u5b9e\u4f8b\u3002 \u5b9e\u73b0\u7ec6\u8282\uff1a \u4e3a\u4e86\u5728\u4f20\u8f93\u65f6\u80fd\u591f\u5bf9\u56de\u8c03\u63a5\u53e3\u5b9e\u4f8b\u8fdb\u884c\u8f6c\u6362\uff0c\u81ea\u52a8\u66b4\u9732\u4e0e\u81ea\u52a8\u5f15\u7528\u76ee\u524d\u5728 DubboCodec \u4e2d\u5b9e\u73b0\u3002\u6b64\u5904\u9700\u8981\u8003\u8651\u5c06\u6b64\u903b\u8f91\u4e0e codec \u903b\u8f91\u5206\u79bb\u3002 \u5728\u6839\u636e invocation \u4fe1\u606f\u83b7\u53d6 exporter \u65f6\uff0c\u9700\u8981\u5224\u65ad\u662f\u5426\u662f\u56de\u8c03\uff0c\u5982\u679c\u662f\u56de\u8c03\uff0c\u4f1a\u4ece attachments \u4e2d\u53d6\u5f97\u56de\u8c03\u670d\u52a1\u5b9e\u4f8b\u7684 id\uff0c\u5728\u83b7\u53d6 exporter\uff0c\u6b64\u5904\u7528\u4e8e consumer \u7aef\u53ef\u4ee5\u5bf9\u540c\u4e00\u4e2a callback \u63a5\u53e3\u505a\u4e0d\u540c\u7684\u5b9e\u73b0\u3002 2. \u4e8b\u4ef6\u901a\u77e5 \u4e3b\u8981\u539f\u7406\uff1aConsumer \u5728 invoke \u65b9\u6cd5\u65f6\uff0c\u5224\u65ad\u5982\u679c\u6709\u914d\u7f6e onreturn/onerror... \u5219\u5c06 onreturn \u5bf9\u5e94\u7684\u53c2\u6570\u503c(\u5b9e\u4f8b\u65b9\u6cd5)\u52a0\u5165\u5230\u5f02\u6b65\u8c03\u7528\u7684\u56de\u8c03\u5217\u8868\u4e2d\u3002 \u5b9e\u73b0\u7ec6\u8282\uff1a\u53c2\u6570\u7684\u4f20\u9012\u91c7\u7528 URL\uff0c\u4f46 URL \u4e2d\u6ca1\u6709\u652f\u6301 string-object\uff0c\u6240\u4ee5\u5c06\u5b9e\u4f8b\u65b9\u6cd5\u5b58\u50a8\u5728 staticMap \u4e2d\uff0c\u6b64\u5904\u5b9e\u73b0\u9700\u8981\u8fdb\u884c\u6539\u9020\u3002 Lazy\u8fde\u63a5 DubboProtocol \u7279\u6709\u529f\u80fd\uff0c\u9ed8\u8ba4\u5173\u95ed\u3002 \u5f53\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u7aef\u521b\u5efa\u4ee3\u7406\u65f6\uff0c\u6682\u4e0d\u5efa\u7acb tcp \u957f\u8fde\u63a5\uff0c\u5f53\u6709\u6570\u636e\u8bf7\u6c42\u65f6\u518d\u505a\u8fde\u63a5\u521d\u59cb\u5316\u3002 \u6b64\u9879\u529f\u80fd\u81ea\u52a8\u5173\u95ed\u8fde\u63a5\u91cd\u8bd5\u529f\u80fd\uff0c\u5f00\u542f\u53d1\u9001\u91cd\u8bd5\u529f\u80fd\uff08\u5373\u53d1\u9001\u6570\u636e\u65f6\u5982\u679c\u8fde\u63a5\u5df2\u65ad\u5f00\uff0c\u5c1d\u8bd5\u91cd\u65b0\u5efa\u7acb\u8fde\u63a5\uff09 \u5171\u4eab\u8fde\u63a5 DubboProtocol \u7279\u6709\u529f\u80fd\uff0c\u9ed8\u8ba4\u5f00\u542f\u3002 JVM A \u66b4\u9732\u4e86\u591a\u4e2a\u670d\u52a1\uff0cJVM B \u5f15\u7528\u4e86 A \u4e2d\u7684\u591a\u4e2a\u670d\u52a1\uff0c\u5171\u4eab\u8fde\u63a5\u662f\u8bf4 A \u4e0e B \u591a\u4e2a\u670d\u52a1\u8c03\u7528\u662f\u901a\u8fc7\u540c\u4e00\u4e2a TCP \u957f\u8fde\u63a5\u8fdb\u884c\u6570\u636e\u4f20\u8f93\uff0c\u5df2\u8fbe\u5230\u51cf\u5c11\u670d\u52a1\u7aef\u8fde\u63a5\u6570\u7684\u76ee\u7684. \u5b9e\u73b0\u7ec6\u8282\uff1a\u5bf9\u4e8e\u540c\u4e00\u4e2a\u5730\u5740\u7531\u4e8e\u4f7f\u7528\u4e86\u5171\u4eab\u8fde\u63a5\uff0c\u90a3 invoker \u7684 destroy \u5c31\u9700\u8981\u7279\u522b\u6ce8\u610f\uff0c\u4e00\u65b9\u9762\u8981\u6ee1\u8db3\u5bf9\u540c\u4e00\u4e2a\u5730\u5740 refer \u7684 invoker \u5168\u90e8 destroy \u540e\uff0c\u8fde\u63a5\u9700\u8981\u5173\u95ed\uff0c\u53e6\u4e00\u65b9\u9762\u8fd8\u9700\u8981\u6ce8\u610f\u5982\u4f55\u907f\u514d\u90e8\u5206 invoker destroy \u65f6\u4e0d\u80fd\u5173\u95ed\u8fde\u63a5\u3002\u5728\u5b9e\u73b0\u4e2d\u91c7\u7528\u4e86\u5f15\u7528\u8ba1\u6570\u7684\u65b9\u6848\uff0c\u4f46\u4e3a\u4e86\u9632\u8303\uff0c\u5728\u8fde\u63a5\u5173\u95ed\u65f6\uff0c\u91cd\u65b0\u5efa\u7acb\u4e86\u4e00\u4e2a Lazy connection (\u79f0\u4e3a\u5e7d\u7075\u8fde\u63a5), \u7528\u4e8e\u5f53\u51fa\u73b0\u5f02\u5e38\u573a\u666f\u65f6\uff0c\u907f\u514d\u5f71\u54cd\u4e1a\u52a1\u903b\u8f91\u7684\u6b63\u5e38\u8c03\u7528. sticky \u7b56\u7565 \u6709\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u60c5\u51b5\u4e0b\uff0c\u914d\u7f6e\u4e86 sticky \u540e\uff0c\u5728\u63d0\u4f9b\u8005\u53ef\u7528\u7684\u60c5\u51b5\u4e0b\uff0c\u8c03\u7528\u4f1a\u7ee7\u7eed\u53d1\u9001\u5230\u4e0a\u4e00\u6b21\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u3002sticky \u7b56\u7565\u9ed8\u8ba4\u5f00\u542f\u4e86\u8fde\u63a5\u7684 lazy \u9009\u9879, \u7528\u4e8e\u907f\u514d\u5f00\u542f\u65e0\u7528\u7684\u8fde\u63a5. \u670d\u52a1\u63d0\u4f9b\u8005\u9009\u62e9\u903b\u8f91 \u5b58\u5728\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u60c5\u51b5\u4e0b\uff0c\u9996\u5148\u6839\u636e Loadbalance \u8fdb\u884c\u9009\u62e9\uff0c\u5982\u679c\u9009\u62e9\u7684 provider \u5904\u4e8e\u53ef\u7528\u72b6\u6001\uff0c\u5219\u8fdb\u884c\u540e\u7eed\u8c03\u7528 \u5982\u679c\u7b2c\u4e00\u6b65\u9009\u62e9\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u4e0d\u53ef\u7528\uff0c\u5219\u4ece\u5269\u4f59\u670d\u52a1\u63d0\u4f9b\u8005\u5217\u8868\u4e2d\u7ee7\u7eed\u9009\u62e9\uff0c\u5982\u679c\u53ef\u7528\uff0c\u8fdb\u884c\u540e\u7eed\u8c03\u7528 \u5982\u679c\u6240\u6709\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u90fd\u4e0d\u53ef\u7528\uff0c\u91cd\u65b0\u904d\u5386\u6574\u4e2a\u5217\u8868\uff08\u4f18\u5148\u4ece\u6ca1\u6709\u9009\u8fc7\u7684\u5217\u8868\u4e2d\u9009\u62e9\uff09\uff0c\u5224\u65ad\u662f\u5426\u6709\u53ef\u7528\u7684\u670d\u52a1\u63d0\u4f9b\u8005\uff08\u9009\u62e9\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u53ef\u7528\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u53ef\u80fd\u4f1a\u6062\u590d\u5230\u53ef\u7528\u72b6\u6001\uff09\uff0c\u5982\u679c\u6709\uff0c\u5219\u8fdb\u884c\u540e\u7eed\u8c03\u7528 \u5982\u679c\u7b2c\u4e09\u6b65\u6ca1\u6709\u9009\u62e9\u51fa\u53ef\u7528\u7684\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u4f1a\u9009\u7b2c\u4e00\u6b65\u9009\u51fa\u7684 invoker \u4e2d\u7684\u4e0b\u4e00\u4e2a\uff08\u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\uff09\uff0c\u907f\u514d\u78b0\u649e\u3002","title":"\u574f\u5473\u9053"},{"location":"dev/code-smell/#_1","text":"\u8fd9\u91cc\u8bb0\u5f55\u7684\u662f Dubbo \u8bbe\u8ba1\u6216\u5b9e\u73b0\u4e0d\u4f18\u96c5\u7684\u5730\u65b9\u3002","title":"\u574f\u5473\u9053"},{"location":"dev/code-smell/#url","text":"","title":"URL \u8f6c\u6362"},{"location":"dev/code-smell/#1","text":"\u76f4\u63a5\u66b4\u9732\u670d\u52a1\uff1a EXPORT(dubbo://provider-address/com.xxx.XxxService?version=1.0.0 ) \u70b9\u5bf9\u70b9\u76f4\u8fde\u670d\u52a1\uff1a REFER(dubbo://provider-address/com.xxx.XxxService?version=1.0.0)","title":"1. \u70b9\u5bf9\u70b9\u66b4\u9732\u548c\u5f15\u7528\u670d\u52a1"},{"location":"dev/code-smell/#2","text":"\u5411\u6ce8\u518c\u4e2d\u5fc3\u66b4\u9732\u670d\u52a1\uff1a EXPORT(registry://registry-address/org.apache.dubbo.registry.RegistrySerevice?registry=dubbo export=ENCODE(dubbo://provider-address/com.xxx.XxxService?version=1.0.0)) \u83b7\u53d6\u6ce8\u518c\u4e2d\u5fc3\uff1a url.setProtocol(url.getParameter( registry , dubbo )) GETREGISTRY(dubbo://registry-address/org.apache.dubbo.registry.RegistrySerevice) \u6ce8\u518c\u670d\u52a1\u5730\u5740\uff1a url.getParameterAndDecoded( export )) REGISTER(dubbo://provider-address/com.xxx.XxxService?version=1.0.0)","title":"2. \u901a\u8fc7\u6ce8\u518c\u4e2d\u5fc3\u66b4\u9732\u670d\u52a1"},{"location":"dev/code-smell/#3","text":"\u4ece\u6ce8\u518c\u4e2d\u5fc3\u8ba2\u9605\u670d\u52a1\uff1a REFER(registry://registry-address/org.apache.dubbo.registry.RegistrySerevice?registry=dubbo refer=ENCODE(version=1.0.0)) \u83b7\u53d6\u6ce8\u518c\u4e2d\u5fc3\uff1a url.setProtocol(url.getParameter( registry , dubbo )) GETREGISTRY(dubbo://registry-address/org.apache.dubbo.registry.RegistrySerevice) \u8ba2\u9605\u670d\u52a1\u5730\u5740\uff1a url.addParameters(url.getParameterAndDecoded( refer )) SUBSCRIBE(dubbo://registry-address/com.xxx.XxxService?version=1.0.0) \u901a\u77e5\u670d\u52a1\u5730\u5740\uff1a url.addParameters(url.getParameterAndDecoded( refer )) NOTIFY(dubbo://provider-address/com.xxx.XxxService?version=1.0.0)","title":"3. \u901a\u8fc7\u6ce8\u518c\u4e2d\u5fc3\u5f15\u7528\u670d\u52a1"},{"location":"dev/code-smell/#4","text":"\u6ce8\u518c\u4e2d\u5fc3\u8def\u7531\u89c4\u5219\u63a8\u9001\uff1a NOTIFY(route://registry-address/com.xxx.XxxService?router=script type=js rule=ENCODE(function{...})) \u83b7\u53d6\u8def\u7531\u5668\uff1a url.setProtocol(url.getParameter( router , script )) GETROUTE(script://registry-address/com.xxx.XxxService?type=js rule=ENCODE(function{...}))","title":"4. \u6ce8\u518c\u4e2d\u5fc3\u63a8\u9001\u8def\u7531\u89c4\u5219"},{"location":"dev/code-smell/#5","text":"\u4ece\u6587\u4ef6\u52a0\u8f7d\u8def\u7531\u89c4\u5219\uff1a GETROUTE(file://path/file.js?router=script) \u83b7\u53d6\u8def\u7531\u5668\uff1a url.setProtocol(url.getParameter( router , script )).addParameter( type , SUFFIX(file)).addParameter( rule , READ(file)) GETROUTE(script://path/file.js?type=js rule=ENCODE(function{...}))","title":"5. \u4ece\u6587\u4ef6\u52a0\u8f7d\u8def\u7531\u89c4\u5219"},{"location":"dev/code-smell/#_2","text":"path \u670d\u52a1\u8def\u5f84 group \u670d\u52a1\u5206\u7ec4 version \u670d\u52a1\u7248\u672c dubbo \u4f7f\u7528\u7684 dubbo \u7248\u672c token \u9a8c\u8bc1\u4ee4\u724c timeout \u8c03\u7528\u8d85\u65f6","title":"\u8c03\u7528\u53c2\u6570"},{"location":"dev/code-smell/#_3","text":"","title":"\u6269\u5c55\u70b9\u7684\u52a0\u8f7d"},{"location":"dev/code-smell/#1_1","text":"ExtensionLoader \u52a0\u8f7d\u6269\u5c55\u70b9\u65f6\uff0c\u4f1a\u68c0\u67e5\u6269\u5c55\u70b9\u7684\u5c5e\u6027\uff08\u901a\u8fc7set\u65b9\u6cd5\u5224\u65ad\uff09\uff0c\u5982\u8be5\u5c5e\u6027\u662f\u6269\u5c55\u70b9\u7c7b\u578b\uff0c\u5219\u4f1a\u6ce8\u5165\u6269\u5c55\u70b9\u5bf9\u8c61\u3002\u56e0\u4e3a\u6ce8\u5165\u65f6\u4e0d\u80fd\u786e\u5b9a\u4f7f\u7528\u54ea\u4e2a\u6269\u5c55\u70b9\uff08\u5728\u4f7f\u7528\u65f6\u786e\u5b9a\uff09\uff0c\u6240\u4ee5\u6ce8\u5165\u7684\u662f\u4e00\u4e2a\u81ea\u9002\u5e94\u6269\u5c55\uff08\u4e00\u4e2a\u4ee3\u7406\uff09\u3002\u81ea\u9002\u5e94\u6269\u5c55\u70b9\u8c03\u7528\u65f6\uff0c\u9009\u53d6\u4e00\u4e2a\u771f\u6b63\u7684\u6269\u5c55\u70b9\uff0c\u5e76\u4ee3\u7406\u5230\u5176\u4e0a\u5b8c\u6210\u8c03\u7528\u3002Dubbo \u662f\u6839\u636e\u8c03\u7528\u65b9\u6cd5\u53c2\u6570\uff08\u4e0a\u9762\u6709\u8c03\u7528\u54ea\u4e2a\u6269\u5c55\u70b9\u7684\u4fe1\u606f\uff09\u6765\u9009\u53d6\u4e00\u4e2a\u771f\u6b63\u7684\u6269\u5c55\u70b9\u3002 \u5728 Dubbo \u7ed9\u5b9a\u6240\u6709\u7684\u6269\u5c55\u70b9\u4e0a\u8c03\u7528\u90fd\u6709 URL \u53c2\u6570\uff08\u6574\u4e2a\u6269\u5c55\u70b9\u7f51\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\uff09\u3002\u81ea\u9002\u5e94\u6269\u5c55\u5373\u662f\u4ece URL \u786e\u5b9a\u8981\u8c03\u7528\u54ea\u4e2a\u6269\u5c55\u70b9\u5b9e\u73b0\u3002URL \u54ea\u4e2a Key \u7684 Value \u7528\u6765\u786e\u5b9a\u4f7f\u7528\u54ea\u4e2a\u6269\u5c55\u70b9\uff0c\u8fd9\u4e2a\u4fe1\u606f\u901a\u8fc7\u7684 @Adaptive \u6ce8\u89e3\u5728\u65b9\u6cd5\u4e0a\u8bf4\u660e\u3002 @Extension public interface Car { @Adaptive({ http://10.20.160.198/wiki/display/dubbo/car.type , http://10.20.160.198/wiki/display/dubbo/transport.type }) public run(URL url, Type1 arg1, Type2 arg2); } \u7531\u4e8e\u81ea\u9002\u5e94\u6269\u5c55\u70b9\u7684\u4e0a\u9762\u7684\u7ea6\u5b9a\uff0cExtensionLoader \u4f1a\u4e3a\u6269\u5c55\u70b9\u81ea\u52a8\u751f\u6210\u81ea\u9002\u5e94\u6269\u5c55\u70b9\u7c7b(\u901a\u8fc7\u5b57\u8282\u7801)\uff0c\u5e76\u5c06\u5176\u5b9e\u4f8b\u6ce8\u5165\u3002 ExtensionLoader \u751f\u6210\u7684\u81ea\u9002\u5e94\u6269\u5c55\u70b9\u7c7b\u5982\u4e0b\uff1a package \u6269\u5c55\u70b9\u63a5\u53e3\u6240\u5728\u5305 ; public class \u6269\u5c55\u70b9\u63a5\u53e3\u540d $Adpative implements \u6269\u5c55\u70b9\u63a5\u53e3 { public \u6709@Adaptive\u6ce8\u89e3\u7684\u63a5\u53e3\u65b9\u6cd5 ( \u65b9\u6cd5\u53c2\u6570 ) { if(\u662f\u5426\u6709URL\u7c7b\u578b\u65b9\u6cd5\u53c2\u6570?) \u4f7f\u7528\u8be5URL\u53c2\u6570 else if(\u662f\u5426\u6709\u65b9\u6cd5\u7c7b\u578b\u4e0a\u6709URL\u5c5e\u6027) \u4f7f\u7528\u8be5URL\u5c5e\u6027 # else \u5728\u52a0\u8f7d\u6269\u5c55\u70b9\u751f\u6210\u81ea\u9002\u5e94\u6269\u5c55\u70b9\u7c7b\u65f6\u629b\u5f02\u5e38\uff0c\u5373\u52a0\u8f7d\u6269\u5c55\u70b9\u5931\u8d25\uff01 if(\u83b7\u53d6\u7684URL == null) { throw new IllegalArgumentException( url == null ); } \u6839\u636e@Adaptive\u6ce8\u89e3\u4e0a\u58f0\u660e\u7684Key\u7684\u987a\u5e8f\uff0c\u4eceURL\u83b7\u81f4Value\uff0c\u4f5c\u4e3a\u5b9e\u9645\u6269\u5c55\u70b9\u540d\u3002 \u5982URL\u6ca1\u6709Value\uff0c\u5219\u4f7f\u7528\u7f3a\u7701\u6269\u5c55\u70b9\u5b9e\u73b0\u3002\u5982\u6ca1\u6709\u6269\u5c55\u70b9\uff0c throw new IllegalStateException( Fail to get extension ); \u5728\u6269\u5c55\u70b9\u5b9e\u73b0\u8c03\u7528\u8be5\u65b9\u6cd5\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\u3002 } public \u6709@Adaptive\u6ce8\u89e3\u7684\u63a5\u53e3\u65b9\u6cd5 ( \u65b9\u6cd5\u53c2\u6570 ) { throw new UnsupportedOperationException( is not adaptive method! ); } } @Adaptive \u6ce8\u89e3\u4f7f\u7528\u5982\u4e0b\uff1a \u5982\u679c URL \u8fd9\u4e9b Key \u90fd\u6ca1\u6709 Value\uff0c\u4f7f\u7528\u7f3a\u7701\u7684\u6269\u5c55\uff08\u5728\u63a5\u53e3\u7684 Default \u4e2d\u8bbe\u5b9a\u7684\u503c\uff09\u3002\u6bd4\u5982\uff0cString[] {\"key1\", \"key2\"}\uff0c\u8868\u793a\u5148\u5728 URL \u4e0a\u627e key1 \u7684 Value \u4f5c\u4e3a\u8981 Adapt \u6210\u7684 Extension \u540d\uff1bkey1 \u6ca1\u6709 Value\uff0c\u5219\u4f7f\u7528 key2 \u7684 Value \u4f5c\u4e3a\u8981 Adapt \u6210\u7684 Extension \u540d\u3002 key2 \u6ca1\u6709 Value\uff0c\u4f7f\u7528\u7f3a\u7701\u7684\u6269\u5c55\u3002\u5982\u679c\u6ca1\u6709\u8bbe\u5b9a\u7f3a\u7701\u6269\u5c55\uff0c\u5219\u65b9\u6cd5\u8c03\u7528\u4f1a\u629b\u51fa IllegalStateException\u3002\u5982\u679c\u4e0d\u8bbe\u7f6e\u5219\u7f3a\u7701\u4f7f\u7528 Extension \u63a5\u53e3\u7c7b\u540d\u7684\u70b9\u5206\u9694\u5c0f\u5199\u5b57\u4e32\u3002\u5373\u5bf9\u4e8e Extension \u63a5\u53e3 org.apache.dubbo.xxx.YyyInvokerWrapper \u7684\u7f3a\u7701\u503c\u4e3a new String[] {\"yyy.invoker.wrapper\"}","title":"1. \u81ea\u9002\u5e94\u6269\u5c55\u70b9"},{"location":"dev/code-smell/#callback","text":"","title":"Callback \u529f\u80fd"},{"location":"dev/code-smell/#1_2","text":"\u4e3b\u8981\u539f\u7406: \u5728\u4e00\u4e2a consumer- provider \u7684\u957f\u8fde\u63a5\u4e0a\uff0c\u81ea\u52a8\u5728 Consumer \u7aef\u66b4\u9732\u4e00\u4e2a\u670d\u52a1\uff08\u5b9e\u73b0\u65b9\u6cd5\u53c2\u6570\u4e0a\u58f0\u660e\u7684\u63a5\u53e3A\uff09\uff0cprovider \u7aef\u4fbf\u53ef\u53cd\u5411\u8c03\u7528\u5230 consumer \u7aef\u7684\u63a5\u53e3\u5b9e\u4f8b\u3002 \u5b9e\u73b0\u7ec6\u8282\uff1a \u4e3a\u4e86\u5728\u4f20\u8f93\u65f6\u80fd\u591f\u5bf9\u56de\u8c03\u63a5\u53e3\u5b9e\u4f8b\u8fdb\u884c\u8f6c\u6362\uff0c\u81ea\u52a8\u66b4\u9732\u4e0e\u81ea\u52a8\u5f15\u7528\u76ee\u524d\u5728 DubboCodec \u4e2d\u5b9e\u73b0\u3002\u6b64\u5904\u9700\u8981\u8003\u8651\u5c06\u6b64\u903b\u8f91\u4e0e codec \u903b\u8f91\u5206\u79bb\u3002 \u5728\u6839\u636e invocation \u4fe1\u606f\u83b7\u53d6 exporter \u65f6\uff0c\u9700\u8981\u5224\u65ad\u662f\u5426\u662f\u56de\u8c03\uff0c\u5982\u679c\u662f\u56de\u8c03\uff0c\u4f1a\u4ece attachments \u4e2d\u53d6\u5f97\u56de\u8c03\u670d\u52a1\u5b9e\u4f8b\u7684 id\uff0c\u5728\u83b7\u53d6 exporter\uff0c\u6b64\u5904\u7528\u4e8e consumer \u7aef\u53ef\u4ee5\u5bf9\u540c\u4e00\u4e2a callback \u63a5\u53e3\u505a\u4e0d\u540c\u7684\u5b9e\u73b0\u3002","title":"1. \u53c2\u6570\u56de\u8c03"},{"location":"dev/code-smell/#2_1","text":"\u4e3b\u8981\u539f\u7406\uff1aConsumer \u5728 invoke \u65b9\u6cd5\u65f6\uff0c\u5224\u65ad\u5982\u679c\u6709\u914d\u7f6e onreturn/onerror... \u5219\u5c06 onreturn \u5bf9\u5e94\u7684\u53c2\u6570\u503c(\u5b9e\u4f8b\u65b9\u6cd5)\u52a0\u5165\u5230\u5f02\u6b65\u8c03\u7528\u7684\u56de\u8c03\u5217\u8868\u4e2d\u3002 \u5b9e\u73b0\u7ec6\u8282\uff1a\u53c2\u6570\u7684\u4f20\u9012\u91c7\u7528 URL\uff0c\u4f46 URL \u4e2d\u6ca1\u6709\u652f\u6301 string-object\uff0c\u6240\u4ee5\u5c06\u5b9e\u4f8b\u65b9\u6cd5\u5b58\u50a8\u5728 staticMap \u4e2d\uff0c\u6b64\u5904\u5b9e\u73b0\u9700\u8981\u8fdb\u884c\u6539\u9020\u3002","title":"2. \u4e8b\u4ef6\u901a\u77e5"},{"location":"dev/code-smell/#lazy","text":"DubboProtocol \u7279\u6709\u529f\u80fd\uff0c\u9ed8\u8ba4\u5173\u95ed\u3002 \u5f53\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u7aef\u521b\u5efa\u4ee3\u7406\u65f6\uff0c\u6682\u4e0d\u5efa\u7acb tcp \u957f\u8fde\u63a5\uff0c\u5f53\u6709\u6570\u636e\u8bf7\u6c42\u65f6\u518d\u505a\u8fde\u63a5\u521d\u59cb\u5316\u3002 \u6b64\u9879\u529f\u80fd\u81ea\u52a8\u5173\u95ed\u8fde\u63a5\u91cd\u8bd5\u529f\u80fd\uff0c\u5f00\u542f\u53d1\u9001\u91cd\u8bd5\u529f\u80fd\uff08\u5373\u53d1\u9001\u6570\u636e\u65f6\u5982\u679c\u8fde\u63a5\u5df2\u65ad\u5f00\uff0c\u5c1d\u8bd5\u91cd\u65b0\u5efa\u7acb\u8fde\u63a5\uff09","title":"Lazy\u8fde\u63a5"},{"location":"dev/code-smell/#_4","text":"DubboProtocol \u7279\u6709\u529f\u80fd\uff0c\u9ed8\u8ba4\u5f00\u542f\u3002 JVM A \u66b4\u9732\u4e86\u591a\u4e2a\u670d\u52a1\uff0cJVM B \u5f15\u7528\u4e86 A \u4e2d\u7684\u591a\u4e2a\u670d\u52a1\uff0c\u5171\u4eab\u8fde\u63a5\u662f\u8bf4 A \u4e0e B \u591a\u4e2a\u670d\u52a1\u8c03\u7528\u662f\u901a\u8fc7\u540c\u4e00\u4e2a TCP \u957f\u8fde\u63a5\u8fdb\u884c\u6570\u636e\u4f20\u8f93\uff0c\u5df2\u8fbe\u5230\u51cf\u5c11\u670d\u52a1\u7aef\u8fde\u63a5\u6570\u7684\u76ee\u7684. \u5b9e\u73b0\u7ec6\u8282\uff1a\u5bf9\u4e8e\u540c\u4e00\u4e2a\u5730\u5740\u7531\u4e8e\u4f7f\u7528\u4e86\u5171\u4eab\u8fde\u63a5\uff0c\u90a3 invoker \u7684 destroy \u5c31\u9700\u8981\u7279\u522b\u6ce8\u610f\uff0c\u4e00\u65b9\u9762\u8981\u6ee1\u8db3\u5bf9\u540c\u4e00\u4e2a\u5730\u5740 refer \u7684 invoker \u5168\u90e8 destroy \u540e\uff0c\u8fde\u63a5\u9700\u8981\u5173\u95ed\uff0c\u53e6\u4e00\u65b9\u9762\u8fd8\u9700\u8981\u6ce8\u610f\u5982\u4f55\u907f\u514d\u90e8\u5206 invoker destroy \u65f6\u4e0d\u80fd\u5173\u95ed\u8fde\u63a5\u3002\u5728\u5b9e\u73b0\u4e2d\u91c7\u7528\u4e86\u5f15\u7528\u8ba1\u6570\u7684\u65b9\u6848\uff0c\u4f46\u4e3a\u4e86\u9632\u8303\uff0c\u5728\u8fde\u63a5\u5173\u95ed\u65f6\uff0c\u91cd\u65b0\u5efa\u7acb\u4e86\u4e00\u4e2a Lazy connection (\u79f0\u4e3a\u5e7d\u7075\u8fde\u63a5), \u7528\u4e8e\u5f53\u51fa\u73b0\u5f02\u5e38\u573a\u666f\u65f6\uff0c\u907f\u514d\u5f71\u54cd\u4e1a\u52a1\u903b\u8f91\u7684\u6b63\u5e38\u8c03\u7528.","title":"\u5171\u4eab\u8fde\u63a5"},{"location":"dev/code-smell/#sticky","text":"\u6709\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u60c5\u51b5\u4e0b\uff0c\u914d\u7f6e\u4e86 sticky \u540e\uff0c\u5728\u63d0\u4f9b\u8005\u53ef\u7528\u7684\u60c5\u51b5\u4e0b\uff0c\u8c03\u7528\u4f1a\u7ee7\u7eed\u53d1\u9001\u5230\u4e0a\u4e00\u6b21\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u3002sticky \u7b56\u7565\u9ed8\u8ba4\u5f00\u542f\u4e86\u8fde\u63a5\u7684 lazy \u9009\u9879, \u7528\u4e8e\u907f\u514d\u5f00\u542f\u65e0\u7528\u7684\u8fde\u63a5.","title":"sticky \u7b56\u7565"},{"location":"dev/code-smell/#_5","text":"\u5b58\u5728\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u60c5\u51b5\u4e0b\uff0c\u9996\u5148\u6839\u636e Loadbalance \u8fdb\u884c\u9009\u62e9\uff0c\u5982\u679c\u9009\u62e9\u7684 provider \u5904\u4e8e\u53ef\u7528\u72b6\u6001\uff0c\u5219\u8fdb\u884c\u540e\u7eed\u8c03\u7528 \u5982\u679c\u7b2c\u4e00\u6b65\u9009\u62e9\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u4e0d\u53ef\u7528\uff0c\u5219\u4ece\u5269\u4f59\u670d\u52a1\u63d0\u4f9b\u8005\u5217\u8868\u4e2d\u7ee7\u7eed\u9009\u62e9\uff0c\u5982\u679c\u53ef\u7528\uff0c\u8fdb\u884c\u540e\u7eed\u8c03\u7528 \u5982\u679c\u6240\u6709\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u90fd\u4e0d\u53ef\u7528\uff0c\u91cd\u65b0\u904d\u5386\u6574\u4e2a\u5217\u8868\uff08\u4f18\u5148\u4ece\u6ca1\u6709\u9009\u8fc7\u7684\u5217\u8868\u4e2d\u9009\u62e9\uff09\uff0c\u5224\u65ad\u662f\u5426\u6709\u53ef\u7528\u7684\u670d\u52a1\u63d0\u4f9b\u8005\uff08\u9009\u62e9\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u53ef\u7528\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u53ef\u80fd\u4f1a\u6062\u590d\u5230\u53ef\u7528\u72b6\u6001\uff09\uff0c\u5982\u679c\u6709\uff0c\u5219\u8fdb\u884c\u540e\u7eed\u8c03\u7528 \u5982\u679c\u7b2c\u4e09\u6b65\u6ca1\u6709\u9009\u62e9\u51fa\u53ef\u7528\u7684\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u4f1a\u9009\u7b2c\u4e00\u6b65\u9009\u51fa\u7684 invoker \u4e2d\u7684\u4e0b\u4e00\u4e2a\uff08\u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\uff09\uff0c\u907f\u514d\u78b0\u649e\u3002","title":"\u670d\u52a1\u63d0\u4f9b\u8005\u9009\u62e9\u903b\u8f91"},{"location":"dev/coding/","text":"\u7f16\u7801\u7ea6\u5b9a \u4ee3\u7801\u98ce\u683c Dubbo \u7684\u6e90\u4ee3\u7801\u548c JavaDoc \u9075\u5faa\u4ee5\u4e0b\u7684\u89c4\u8303\uff1a Code Conventions for the Java Programming Language How to Write Doc Comments for the Javadoc Tool \u5f02\u5e38\u548c\u65e5\u5fd7 \u5c3d\u53ef\u80fd\u643a\u5e26\u5b8c\u6574\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u6bd4\u5982\u51fa\u9519\u539f\u56e0\uff0c\u51fa\u9519\u7684\u673a\u5668\u5730\u5740\uff0c\u8c03\u7528\u5bf9\u65b9\u7684\u5730\u5740\uff0c\u8fde\u7684\u6ce8\u518c\u4e2d\u5fc3\u5730\u5740\uff0c\u4f7f\u7528 Dubbo \u7684\u7248\u672c\u7b49\u3002 \u5c3d\u91cf\u5c06\u76f4\u63a5\u539f\u56e0\u5199\u5728\u6700\u524d\u9762\uff0c\u6240\u6709\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u5728\u539f\u56e0\u540e\u7528\u952e\u503c\u5bf9\u663e\u793a\u3002 \u629b\u51fa\u5f02\u5e38\u7684\u5730\u65b9\u4e0d\u7528\u6253\u5370\u65e5\u5fd7\uff0c\u7531\u6700\u7ec8\u5904\u7406\u5f02\u5e38\u8005\u51b3\u5b9a\u6253\u5370\u65e5\u5fd7\u7684\u7ea7\u522b\uff0c\u5403\u6389\u5f02\u5e38\u5fc5\u9700\u6253\u5370\u65e5\u5fd7\u3002 \u6253\u5370 ERROR \u65e5\u5fd7\u8868\u793a\u9700\u8981\u62a5\u8b66\uff0c\u6253\u5370 WARN \u65e5\u5fd7\u8868\u793a\u53ef\u4ee5\u81ea\u52a8\u6062\u590d\uff0c\u6253\u5370 INFO \u8868\u793a\u6b63\u5e38\u4fe1\u606f\u6216\u5b8c\u5168\u4e0d\u5f71\u54cd\u8fd0\u884c\u3002 \u5efa\u8bae\u5e94\u7528\u65b9\u5728\u76d1\u63a7\u4e2d\u5fc3\u914d\u7f6e ERROR \u65e5\u5fd7\u5b9e\u65f6\u62a5\u8b66\uff0c WARN \u65e5\u5fd7\u6bcf\u5468\u6c47\u603b\u53d1\u9001\u901a\u77e5\u3002 RpcException \u662f Dubbo \u5bf9\u5916\u7684\u552f\u4e00\u5f02\u5e38\u7c7b\u578b\uff0c\u6240\u6709\u5185\u90e8\u5f02\u5e38\uff0c\u5982\u679c\u8981\u629b\u51fa\u7ed9\u7528\u6237\uff0c\u5fc5\u987b\u8f6c\u4e3a RpcException \u3002 RpcException \u4e0d\u80fd\u6709\u5b50\u7c7b\u578b\uff0c\u6240\u6709\u7c7b\u578b\u4fe1\u606f\u7528 ErrorCode \u6807\u8bc6\uff0c\u4ee5\u4fbf\u4fdd\u6301\u517c\u5bb9\u3002 \u914d\u7f6e\u548c URL \u914d\u7f6e\u5bf9\u8c61\u5c5e\u6027\u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u591a\u4e2a\u5355\u8bcd\u7528\u9a7c\u5cf0\u547d\u540d [^1]\u3002 \u914d\u7f6e\u5c5e\u6027\u5168\u90e8\u7528\u5c0f\u5199\uff0c\u591a\u4e2a\u5355\u8bcd\u7528\"-\"\u53f7\u5206\u9694 [^2]\u3002 URL\u53c2\u6570\u5168\u90e8\u7528\u5c0f\u5199\uff0c\u591a\u4e2a\u5355\u8bcd\u7528\".\"\u53f7\u5206\u9694 [^3]\u3002 \u5c3d\u53ef\u80fd\u7528 URL \u4f20\u53c2\uff0c\u4e0d\u8981\u81ea\u5b9a\u4e49 Map \u6216\u5176\u5b83\u4e0a\u4e0b\u6587\u683c\u5f0f\uff0c\u914d\u7f6e\u4fe1\u606f\u4e5f\u8f6c\u6210 URL \u683c\u5f0f\u4f7f\u7528\u3002 \u5c3d\u91cf\u51cf\u5c11 URL \u5d4c\u5957\uff0c\u4fdd\u6301 URL \u7684\u7b80\u6d01\u6027\u3002 \u5355\u5143\u548c\u96c6\u6210\u6d4b\u8bd5 \u5355\u5143\u6d4b\u8bd5\u7edf\u4e00\u7528 JUnit \u548c EasyMock\uff0c\u96c6\u6210\u6d4b\u8bd5\u7528 TestNG\uff0c\u6570\u636e\u5e93\u6d4b\u8bd5\u7528 DBUnit\u3002 \u4fdd\u6301\u5355\u5143\u6d4b\u8bd5\u7528\u4f8b\u7684\u8fd0\u884c\u901f\u5ea6\uff0c\u4e0d\u8981\u5c06\u6027\u80fd\u548c\u5927\u7684\u96c6\u6210\u7528\u4f8b\u653e\u5728\u5355\u5143\u6d4b\u8bd5\u4e2d\u3002 \u4fdd\u6301\u5355\u5143\u6d4b\u8bd5\u7684\u6bcf\u4e2a\u7528\u4f8b\u90fd\u7528 try...finally \u6216 tearDown \u91ca\u653e\u8d44\u6e90\u3002 \u51cf\u5c11 while \u5faa\u73af\u7b49\u5f85\u7ed3\u679c\u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u5bf9\u5b9a\u65f6\u5668\u548c\u7f51\u7edc\u7684\u6d4b\u8bd5\uff0c\u7528\u4ee5\u5c06\u5b9a\u65f6\u5668\u4e2d\u7684\u903b\u8f91\u62bd\u4e3a\u65b9\u6cd5\u6d4b\u8bd5\u3002 \u5bf9\u4e8e\u5bb9\u9519\u884c\u4e3a\u7684\u6d4b\u8bd5\uff0c\u6bd4\u5982 failsafe \u7684\u6d4b\u8bd5\uff0c\u7edf\u4e00\u7528 LogUtil \u65ad\u8a00\u65e5\u5fd7\u8f93\u51fa\u3002 \u6269\u5c55\u70b9\u57fa\u7c7b\u4e0e AOP AOP \u7c7b\u90fd\u547d\u540d\u4e3a XxxWrapper \uff0c\u57fa\u7c7b\u90fd\u547d\u540d\u4e3a AbstractXxx \u3002 \u6269\u5c55\u70b9\u4e4b\u95f4\u7684\u7ec4\u5408\u5c06\u5173\u7cfb\u7531 AOP \u5b8c\u6210\uff0c ExtensionLoader \u53ea\u8d1f\u8f7d\u52a0\u8f7d\u6269\u5c55\u70b9\uff0c\u5305\u62ec AOP \u6269\u5c55\u3002 \u5c3d\u91cf\u91c7\u7528 IoC \u6ce8\u5165\u6269\u5c55\u70b9\u4e4b\u95f4\u7684\u4f9d\u8d56\uff0c\u4e0d\u8981\u76f4\u63a5\u4f9d\u8d56 ExtensionLoader \u7684\u5de5\u5382\u65b9\u6cd5\u3002 \u5c3d\u91cf\u91c7\u7528 AOP \u5b9e\u73b0\u6269\u5c55\u70b9\u7684\u901a\u7528\u884c\u4e3a\uff0c\u800c\u4e0d\u8981\u7528\u57fa\u7c7b\uff0c\u6bd4\u5982\u8d1f\u8f7d\u5747\u8861\u4e4b\u524d\u7684 isAvailable \u68c0\u67e5\uff0c\u5b83\u662f\u72ec\u7acb\u4e8e\u8d1f\u8f7d\u5747\u8861\u4e4b\u5916\u7684\uff0c\u4e0d\u9700\u8981\u68c0\u67e5\u7684\u662fURL\u53c2\u6570\u5173\u95ed\u3002 \u5bf9\u591a\u79cd\u76f8\u4f3c\u7c7b\u578b\u7684\u62bd\u8c61\uff0c\u7528\u57fa\u7c7b\u5b9e\u73b0\uff0c\u6bd4\u5982 RMI, Hessian \u7b49\u7b2c\u4e09\u65b9\u534f\u8bae\u90fd\u5df2\u751f\u6210\u4e86\u63a5\u53e3\u4ee3\u7406\uff0c\u53ea\u9700\u5c06\u5c06\u63a5\u53e3\u4ee3\u7406\u8f6c\u6210 Invoker \u5373\u53ef\u5b8c\u6210\u6865\u63a5\uff0c\u5b83\u4eec\u53ef\u4ee5\u7528\u516c\u5171\u57fa\u7c7b\u5b9e\u73b0\u6b64\u903b\u8f91\u3002 \u57fa\u7c7b\u4e5f\u662f SPI \u7684\u4e00\u90e8\u5206\uff0c\u6bcf\u4e2a\u6269\u5c55\u70b9\u90fd\u5e94\u8be5\u6709\u65b9\u4fbf\u4f7f\u7528\u7684\u57fa\u7c7b\u652f\u6301\u3002 \u6a21\u5757\u4e0e\u5206\u5305 \u57fa\u4e8e\u590d\u7528\u5ea6\u5206\u5305\uff0c\u603b\u662f\u4e00\u8d77\u4f7f\u7528\u7684\u653e\u5728\u540c\u4e00\u5305\u4e0b\uff0c\u5c06\u63a5\u53e3\u548c\u57fa\u7c7b\u5206\u6210\u72ec\u7acb\u6a21\u5757\uff0c\u5927\u7684\u5b9e\u73b0\u4e5f\u4f7f\u7528\u72ec\u7acb\u6a21\u5757\u3002 \u6240\u6709\u63a5\u53e3\u90fd\u653e\u5728\u6a21\u5757\u7684\u6839\u5305\u4e0b\uff0c\u57fa\u7c7b\u653e\u5728 support \u5b50\u5305\u4e0b\uff0c\u4e0d\u540c\u5b9e\u73b0\u7528\u653e\u5728\u4ee5\u6269\u5c55\u70b9\u540d\u5b57\u547d\u540d\u7684\u5b50\u5305\u4e0b\u3002 \u5c3d\u91cf\u4fdd\u6301\u5b50\u5305\u4f9d\u8d56\u7236\u5305\uff0c\u800c\u4e0d\u8981\u53cd\u5411\u3002 [^1]: Java \u7ea6\u5b9a [^2]: Spring \u7ea6\u5b9a [^3]: Dubbo \u7ea6\u5b9a","title":"\u7f16\u7801\u7ea6\u5b9a"},{"location":"dev/coding/#_1","text":"","title":"\u7f16\u7801\u7ea6\u5b9a"},{"location":"dev/coding/#_2","text":"Dubbo \u7684\u6e90\u4ee3\u7801\u548c JavaDoc \u9075\u5faa\u4ee5\u4e0b\u7684\u89c4\u8303\uff1a Code Conventions for the Java Programming Language How to Write Doc Comments for the Javadoc Tool","title":"\u4ee3\u7801\u98ce\u683c"},{"location":"dev/coding/#_3","text":"\u5c3d\u53ef\u80fd\u643a\u5e26\u5b8c\u6574\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u6bd4\u5982\u51fa\u9519\u539f\u56e0\uff0c\u51fa\u9519\u7684\u673a\u5668\u5730\u5740\uff0c\u8c03\u7528\u5bf9\u65b9\u7684\u5730\u5740\uff0c\u8fde\u7684\u6ce8\u518c\u4e2d\u5fc3\u5730\u5740\uff0c\u4f7f\u7528 Dubbo \u7684\u7248\u672c\u7b49\u3002 \u5c3d\u91cf\u5c06\u76f4\u63a5\u539f\u56e0\u5199\u5728\u6700\u524d\u9762\uff0c\u6240\u6709\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u5728\u539f\u56e0\u540e\u7528\u952e\u503c\u5bf9\u663e\u793a\u3002 \u629b\u51fa\u5f02\u5e38\u7684\u5730\u65b9\u4e0d\u7528\u6253\u5370\u65e5\u5fd7\uff0c\u7531\u6700\u7ec8\u5904\u7406\u5f02\u5e38\u8005\u51b3\u5b9a\u6253\u5370\u65e5\u5fd7\u7684\u7ea7\u522b\uff0c\u5403\u6389\u5f02\u5e38\u5fc5\u9700\u6253\u5370\u65e5\u5fd7\u3002 \u6253\u5370 ERROR \u65e5\u5fd7\u8868\u793a\u9700\u8981\u62a5\u8b66\uff0c\u6253\u5370 WARN \u65e5\u5fd7\u8868\u793a\u53ef\u4ee5\u81ea\u52a8\u6062\u590d\uff0c\u6253\u5370 INFO \u8868\u793a\u6b63\u5e38\u4fe1\u606f\u6216\u5b8c\u5168\u4e0d\u5f71\u54cd\u8fd0\u884c\u3002 \u5efa\u8bae\u5e94\u7528\u65b9\u5728\u76d1\u63a7\u4e2d\u5fc3\u914d\u7f6e ERROR \u65e5\u5fd7\u5b9e\u65f6\u62a5\u8b66\uff0c WARN \u65e5\u5fd7\u6bcf\u5468\u6c47\u603b\u53d1\u9001\u901a\u77e5\u3002 RpcException \u662f Dubbo \u5bf9\u5916\u7684\u552f\u4e00\u5f02\u5e38\u7c7b\u578b\uff0c\u6240\u6709\u5185\u90e8\u5f02\u5e38\uff0c\u5982\u679c\u8981\u629b\u51fa\u7ed9\u7528\u6237\uff0c\u5fc5\u987b\u8f6c\u4e3a RpcException \u3002 RpcException \u4e0d\u80fd\u6709\u5b50\u7c7b\u578b\uff0c\u6240\u6709\u7c7b\u578b\u4fe1\u606f\u7528 ErrorCode \u6807\u8bc6\uff0c\u4ee5\u4fbf\u4fdd\u6301\u517c\u5bb9\u3002","title":"\u5f02\u5e38\u548c\u65e5\u5fd7"},{"location":"dev/coding/#url","text":"\u914d\u7f6e\u5bf9\u8c61\u5c5e\u6027\u9996\u5b57\u6bcd\u5c0f\u5199\uff0c\u591a\u4e2a\u5355\u8bcd\u7528\u9a7c\u5cf0\u547d\u540d [^1]\u3002 \u914d\u7f6e\u5c5e\u6027\u5168\u90e8\u7528\u5c0f\u5199\uff0c\u591a\u4e2a\u5355\u8bcd\u7528\"-\"\u53f7\u5206\u9694 [^2]\u3002 URL\u53c2\u6570\u5168\u90e8\u7528\u5c0f\u5199\uff0c\u591a\u4e2a\u5355\u8bcd\u7528\".\"\u53f7\u5206\u9694 [^3]\u3002 \u5c3d\u53ef\u80fd\u7528 URL \u4f20\u53c2\uff0c\u4e0d\u8981\u81ea\u5b9a\u4e49 Map \u6216\u5176\u5b83\u4e0a\u4e0b\u6587\u683c\u5f0f\uff0c\u914d\u7f6e\u4fe1\u606f\u4e5f\u8f6c\u6210 URL \u683c\u5f0f\u4f7f\u7528\u3002 \u5c3d\u91cf\u51cf\u5c11 URL \u5d4c\u5957\uff0c\u4fdd\u6301 URL \u7684\u7b80\u6d01\u6027\u3002","title":"\u914d\u7f6e\u548c URL"},{"location":"dev/coding/#_4","text":"\u5355\u5143\u6d4b\u8bd5\u7edf\u4e00\u7528 JUnit \u548c EasyMock\uff0c\u96c6\u6210\u6d4b\u8bd5\u7528 TestNG\uff0c\u6570\u636e\u5e93\u6d4b\u8bd5\u7528 DBUnit\u3002 \u4fdd\u6301\u5355\u5143\u6d4b\u8bd5\u7528\u4f8b\u7684\u8fd0\u884c\u901f\u5ea6\uff0c\u4e0d\u8981\u5c06\u6027\u80fd\u548c\u5927\u7684\u96c6\u6210\u7528\u4f8b\u653e\u5728\u5355\u5143\u6d4b\u8bd5\u4e2d\u3002 \u4fdd\u6301\u5355\u5143\u6d4b\u8bd5\u7684\u6bcf\u4e2a\u7528\u4f8b\u90fd\u7528 try...finally \u6216 tearDown \u91ca\u653e\u8d44\u6e90\u3002 \u51cf\u5c11 while \u5faa\u73af\u7b49\u5f85\u7ed3\u679c\u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u5bf9\u5b9a\u65f6\u5668\u548c\u7f51\u7edc\u7684\u6d4b\u8bd5\uff0c\u7528\u4ee5\u5c06\u5b9a\u65f6\u5668\u4e2d\u7684\u903b\u8f91\u62bd\u4e3a\u65b9\u6cd5\u6d4b\u8bd5\u3002 \u5bf9\u4e8e\u5bb9\u9519\u884c\u4e3a\u7684\u6d4b\u8bd5\uff0c\u6bd4\u5982 failsafe \u7684\u6d4b\u8bd5\uff0c\u7edf\u4e00\u7528 LogUtil \u65ad\u8a00\u65e5\u5fd7\u8f93\u51fa\u3002","title":"\u5355\u5143\u548c\u96c6\u6210\u6d4b\u8bd5"},{"location":"dev/coding/#aop","text":"AOP \u7c7b\u90fd\u547d\u540d\u4e3a XxxWrapper \uff0c\u57fa\u7c7b\u90fd\u547d\u540d\u4e3a AbstractXxx \u3002 \u6269\u5c55\u70b9\u4e4b\u95f4\u7684\u7ec4\u5408\u5c06\u5173\u7cfb\u7531 AOP \u5b8c\u6210\uff0c ExtensionLoader \u53ea\u8d1f\u8f7d\u52a0\u8f7d\u6269\u5c55\u70b9\uff0c\u5305\u62ec AOP \u6269\u5c55\u3002 \u5c3d\u91cf\u91c7\u7528 IoC \u6ce8\u5165\u6269\u5c55\u70b9\u4e4b\u95f4\u7684\u4f9d\u8d56\uff0c\u4e0d\u8981\u76f4\u63a5\u4f9d\u8d56 ExtensionLoader \u7684\u5de5\u5382\u65b9\u6cd5\u3002 \u5c3d\u91cf\u91c7\u7528 AOP \u5b9e\u73b0\u6269\u5c55\u70b9\u7684\u901a\u7528\u884c\u4e3a\uff0c\u800c\u4e0d\u8981\u7528\u57fa\u7c7b\uff0c\u6bd4\u5982\u8d1f\u8f7d\u5747\u8861\u4e4b\u524d\u7684 isAvailable \u68c0\u67e5\uff0c\u5b83\u662f\u72ec\u7acb\u4e8e\u8d1f\u8f7d\u5747\u8861\u4e4b\u5916\u7684\uff0c\u4e0d\u9700\u8981\u68c0\u67e5\u7684\u662fURL\u53c2\u6570\u5173\u95ed\u3002 \u5bf9\u591a\u79cd\u76f8\u4f3c\u7c7b\u578b\u7684\u62bd\u8c61\uff0c\u7528\u57fa\u7c7b\u5b9e\u73b0\uff0c\u6bd4\u5982 RMI, Hessian \u7b49\u7b2c\u4e09\u65b9\u534f\u8bae\u90fd\u5df2\u751f\u6210\u4e86\u63a5\u53e3\u4ee3\u7406\uff0c\u53ea\u9700\u5c06\u5c06\u63a5\u53e3\u4ee3\u7406\u8f6c\u6210 Invoker \u5373\u53ef\u5b8c\u6210\u6865\u63a5\uff0c\u5b83\u4eec\u53ef\u4ee5\u7528\u516c\u5171\u57fa\u7c7b\u5b9e\u73b0\u6b64\u903b\u8f91\u3002 \u57fa\u7c7b\u4e5f\u662f SPI \u7684\u4e00\u90e8\u5206\uff0c\u6bcf\u4e2a\u6269\u5c55\u70b9\u90fd\u5e94\u8be5\u6709\u65b9\u4fbf\u4f7f\u7528\u7684\u57fa\u7c7b\u652f\u6301\u3002","title":"\u6269\u5c55\u70b9\u57fa\u7c7b\u4e0e AOP"},{"location":"dev/coding/#_5","text":"\u57fa\u4e8e\u590d\u7528\u5ea6\u5206\u5305\uff0c\u603b\u662f\u4e00\u8d77\u4f7f\u7528\u7684\u653e\u5728\u540c\u4e00\u5305\u4e0b\uff0c\u5c06\u63a5\u53e3\u548c\u57fa\u7c7b\u5206\u6210\u72ec\u7acb\u6a21\u5757\uff0c\u5927\u7684\u5b9e\u73b0\u4e5f\u4f7f\u7528\u72ec\u7acb\u6a21\u5757\u3002 \u6240\u6709\u63a5\u53e3\u90fd\u653e\u5728\u6a21\u5757\u7684\u6839\u5305\u4e0b\uff0c\u57fa\u7c7b\u653e\u5728 support \u5b50\u5305\u4e0b\uff0c\u4e0d\u540c\u5b9e\u73b0\u7528\u653e\u5728\u4ee5\u6269\u5c55\u70b9\u540d\u5b57\u547d\u540d\u7684\u5b50\u5305\u4e0b\u3002 \u5c3d\u91cf\u4fdd\u6301\u5b50\u5305\u4f9d\u8d56\u7236\u5305\uff0c\u800c\u4e0d\u8981\u53cd\u5411\u3002 [^1]: Java \u7ea6\u5b9a [^2]: Spring \u7ea6\u5b9a [^3]: Dubbo \u7ea6\u5b9a","title":"\u6a21\u5757\u4e0e\u5206\u5305"},{"location":"dev/contract/","text":"\u516c\u5171\u5951\u7ea6 \u8fd9\u91cc\u8bb0\u5f55\u7684\u662f Dubbo \u516c\u5171\u5951\u7ea6\uff0c\u5e0c\u671b\u6240\u6709\u6269\u5c55\u70b9\u9075\u5b88\u3002 URL \u6240\u6709\u6269\u5c55\u70b9\u53c2\u6570\u90fd\u5305\u542b URL \u53c2\u6570\uff0cURL \u4f5c\u4e3a\u4e0a\u4e0b\u6587\u4fe1\u606f\u8d2f\u7a7f\u6574\u4e2a\u6269\u5c55\u70b9\u8bbe\u8ba1\u4f53\u7cfb\u3002 URL \u91c7\u7528\u6807\u51c6\u683c\u5f0f\uff1a protocol://username:password@host:port/path?key=value key=value \u65e5\u5fd7 \u5982\u679c\u4e0d\u53ef\u6062\u590d\u6216\u9700\u8981\u62a5\u8b66\uff0c\u6253\u5370 ERROR \u65e5\u5fd7\u3002 \u5982\u679c\u53ef\u6062\u590d\u5f02\u5e38\uff0c\u6216\u77ac\u65f6\u7684\u72b6\u6001\u4e0d\u4e00\u81f4\uff0c\u6253\u5370 WARN \u65e5\u5fd7\u3002 \u6b63\u5e38\u8fd0\u884c\u65f6\u7684\u4e2d\u95f4\u72b6\u6001\u63d0\u793a\uff0c\u6253\u5370 INFO \u65e5\u5fd7\u3002","title":"\u516c\u5171\u5951\u7ea6"},{"location":"dev/contract/#_1","text":"\u8fd9\u91cc\u8bb0\u5f55\u7684\u662f Dubbo \u516c\u5171\u5951\u7ea6\uff0c\u5e0c\u671b\u6240\u6709\u6269\u5c55\u70b9\u9075\u5b88\u3002","title":"\u516c\u5171\u5951\u7ea6"},{"location":"dev/contract/#url","text":"\u6240\u6709\u6269\u5c55\u70b9\u53c2\u6570\u90fd\u5305\u542b URL \u53c2\u6570\uff0cURL \u4f5c\u4e3a\u4e0a\u4e0b\u6587\u4fe1\u606f\u8d2f\u7a7f\u6574\u4e2a\u6269\u5c55\u70b9\u8bbe\u8ba1\u4f53\u7cfb\u3002 URL \u91c7\u7528\u6807\u51c6\u683c\u5f0f\uff1a protocol://username:password@host:port/path?key=value key=value","title":"URL"},{"location":"dev/contract/#_2","text":"\u5982\u679c\u4e0d\u53ef\u6062\u590d\u6216\u9700\u8981\u62a5\u8b66\uff0c\u6253\u5370 ERROR \u65e5\u5fd7\u3002 \u5982\u679c\u53ef\u6062\u590d\u5f02\u5e38\uff0c\u6216\u77ac\u65f6\u7684\u72b6\u6001\u4e0d\u4e00\u81f4\uff0c\u6253\u5370 WARN \u65e5\u5fd7\u3002 \u6b63\u5e38\u8fd0\u884c\u65f6\u7684\u4e2d\u95f4\u72b6\u6001\u63d0\u793a\uff0c\u6253\u5370 INFO \u65e5\u5fd7\u3002","title":"\u65e5\u5fd7"},{"location":"dev/contribution/","text":"\u8d21\u732e \u6d41\u7a0b \u5982\u679c\u662f\u6269\u5c55\u529f\u80fd\uff0c\u76f4\u63a5\u65b0\u589e\u5de5\u7a0b\uff0c\u9ed1\u76d2\u4f9d\u8d56 Dubbo \u8fdb\u884c\u6269\u5c55\u3002 \u5982\u679c\u662f\u6539 BUG\uff0c\u6216\u4fee\u6539\u6846\u67b6\u672c\u8eab\uff0c\u53ef\u4ee5\u4ece Dubbo \u7684 GitHub \u4e0a Fork \u5de5\u7a0b\u3002 \u4fee\u6539\u540e\u901a\u8fc7 Push Request \u53cd\u9988\u4fee\u6539\u3002 \u4efb\u52a1 \u529f\u80fd \u5206\u7c7b \u4f18\u5148\u7ea7 \u72b6\u6001 \u8ba4\u9886\u8005 \u8ba1\u5212\u5b8c\u6210\u65f6\u95f4 \u8fdb\u5ea6 \u300a\u7528\u6237\u6307\u5357\u300b\u7ffb\u8bd1 \u6587\u6863 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% \u300a\u5f00\u53d1\u6307\u5357\u300b\u7ffb\u8bd1 \u6587\u6863 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% \u6269\u5c55\u70b9\u517c\u5bb9\u6027\u6d4b\u8bd5 \u6d4b\u8bd5 \u9ad8 \u5df2\u8ba4\u9886 \u7f57\u7acb\u6811 \u5f85\u5b9a 0% \u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5 \u6d4b\u8bd5 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% \u529f\u80fd\u5355\u5143\u6d4b\u8bd5 \u6d4b\u8bd5 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% JTA/XA\u5206\u5e03\u5f0f\u4e8b\u52a1 \u62e6\u622a\u6269\u5c55 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% Thrift \u534f\u8bae\u6269\u5c55 \u9ad8 \u5f00\u53d1\u5b8c\u6210 \u95fe\u521a 2012-04-27 90% ICE \u534f\u8bae\u6269\u5c55 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% ACE \u534f\u8bae\u6269\u5c55 \u4f4e \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% JSON-RPC \u534f\u8bae\u6269\u5c55 \u4f4e \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% XML-RPC \u534f\u8bae\u6269\u5c55 \u4f4e \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% JSR181 CXF(WebService) \u534f\u8bae\u6269\u5c55 \u9ad8 \u5f00\u53d1\u5b8c\u6210 \u767d\u6587\u5fd7 2012-04-27 90% JSR311 JSR339(RestfulWebService) \u534f\u8bae\u6269\u5c55 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% JMS ActiveMQ \u534f\u8bae\u6269\u5c55 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% Protobuf \u5e8f\u5217\u5316\u6269\u5c55 \u9ad8 \u8c03\u7814 \u6731\u542f\u6052 2012-02-30 20% Avro \u5e8f\u5217\u5316\u6269\u5c55 \u4f4e \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% XSocket \u4f20\u8f93\u6269\u5c55 \u4f4e \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% CGLib \u52a8\u6001\u4ee3\u7406\u6269\u5c55 \u4f4e \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% JNDI \u6ce8\u518c\u4e2d\u5fc3\u6269\u5c55 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% LDAP \u6ce8\u518c\u4e2d\u5fc3\u6269\u5c55 \u4f4e \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% JSR140 SLP \u6ce8\u518c\u4e2d\u5fc3\u6269\u5c55 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% UDDI \u6ce8\u518c\u4e2d\u5fc3\u6269\u5c55 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% JMX \u76d1\u63a7\u4e2d\u5fc3\u6269\u5c55 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% SNMP \u76d1\u63a7\u4e2d\u5fc3\u6269\u5c55 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% Cacti \u76d1\u63a7\u4e2d\u5fc3\u6269\u5c55 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% Nagios \u76d1\u63a7\u4e2d\u5fc3\u6269\u5c55 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% Logstash \u76d1\u63a7\u4e2d\u5fc3\u6269\u5c55 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% JRobin \u76d1\u63a7\u4e2d\u5fc3\u6269\u5c55 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% Maven \u670d\u52a1\u5b89\u88c5\u5305\u4ed3\u5e93 \u4f4e \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% Subversion \u670d\u52a1\u5b89\u88c5\u5305\u4ed3\u5e93 \u4f4e \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% JCR/JSR283 \u670d\u52a1\u5b89\u88c5\u5305\u4ed3\u5e93 \u4f4e \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% SimpleDeployer \u672c\u5730\u90e8\u7f72\u4ee3\u7406 \u4f4e \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% SimpleScheduler \u8d44\u6e90\u8c03\u5ea6\u5668 \u4f4e \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0%","title":"\u8d21\u732e\u4ee3\u7801"},{"location":"dev/contribution/#_1","text":"","title":"\u8d21\u732e"},{"location":"dev/contribution/#_2","text":"\u5982\u679c\u662f\u6269\u5c55\u529f\u80fd\uff0c\u76f4\u63a5\u65b0\u589e\u5de5\u7a0b\uff0c\u9ed1\u76d2\u4f9d\u8d56 Dubbo \u8fdb\u884c\u6269\u5c55\u3002 \u5982\u679c\u662f\u6539 BUG\uff0c\u6216\u4fee\u6539\u6846\u67b6\u672c\u8eab\uff0c\u53ef\u4ee5\u4ece Dubbo \u7684 GitHub \u4e0a Fork \u5de5\u7a0b\u3002 \u4fee\u6539\u540e\u901a\u8fc7 Push Request \u53cd\u9988\u4fee\u6539\u3002","title":"\u6d41\u7a0b"},{"location":"dev/contribution/#_3","text":"\u529f\u80fd \u5206\u7c7b \u4f18\u5148\u7ea7 \u72b6\u6001 \u8ba4\u9886\u8005 \u8ba1\u5212\u5b8c\u6210\u65f6\u95f4 \u8fdb\u5ea6 \u300a\u7528\u6237\u6307\u5357\u300b\u7ffb\u8bd1 \u6587\u6863 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% \u300a\u5f00\u53d1\u6307\u5357\u300b\u7ffb\u8bd1 \u6587\u6863 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% \u6269\u5c55\u70b9\u517c\u5bb9\u6027\u6d4b\u8bd5 \u6d4b\u8bd5 \u9ad8 \u5df2\u8ba4\u9886 \u7f57\u7acb\u6811 \u5f85\u5b9a 0% \u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5 \u6d4b\u8bd5 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% \u529f\u80fd\u5355\u5143\u6d4b\u8bd5 \u6d4b\u8bd5 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% JTA/XA\u5206\u5e03\u5f0f\u4e8b\u52a1 \u62e6\u622a\u6269\u5c55 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% Thrift \u534f\u8bae\u6269\u5c55 \u9ad8 \u5f00\u53d1\u5b8c\u6210 \u95fe\u521a 2012-04-27 90% ICE \u534f\u8bae\u6269\u5c55 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% ACE \u534f\u8bae\u6269\u5c55 \u4f4e \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% JSON-RPC \u534f\u8bae\u6269\u5c55 \u4f4e \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% XML-RPC \u534f\u8bae\u6269\u5c55 \u4f4e \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% JSR181 CXF(WebService) \u534f\u8bae\u6269\u5c55 \u9ad8 \u5f00\u53d1\u5b8c\u6210 \u767d\u6587\u5fd7 2012-04-27 90% JSR311 JSR339(RestfulWebService) \u534f\u8bae\u6269\u5c55 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% JMS ActiveMQ \u534f\u8bae\u6269\u5c55 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% Protobuf \u5e8f\u5217\u5316\u6269\u5c55 \u9ad8 \u8c03\u7814 \u6731\u542f\u6052 2012-02-30 20% Avro \u5e8f\u5217\u5316\u6269\u5c55 \u4f4e \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% XSocket \u4f20\u8f93\u6269\u5c55 \u4f4e \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% CGLib \u52a8\u6001\u4ee3\u7406\u6269\u5c55 \u4f4e \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% JNDI \u6ce8\u518c\u4e2d\u5fc3\u6269\u5c55 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% LDAP \u6ce8\u518c\u4e2d\u5fc3\u6269\u5c55 \u4f4e \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% JSR140 SLP \u6ce8\u518c\u4e2d\u5fc3\u6269\u5c55 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% UDDI \u6ce8\u518c\u4e2d\u5fc3\u6269\u5c55 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% JMX \u76d1\u63a7\u4e2d\u5fc3\u6269\u5c55 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% SNMP \u76d1\u63a7\u4e2d\u5fc3\u6269\u5c55 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% Cacti \u76d1\u63a7\u4e2d\u5fc3\u6269\u5c55 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% Nagios \u76d1\u63a7\u4e2d\u5fc3\u6269\u5c55 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% Logstash \u76d1\u63a7\u4e2d\u5fc3\u6269\u5c55 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% JRobin \u76d1\u63a7\u4e2d\u5fc3\u6269\u5c55 \u9ad8 \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% Maven \u670d\u52a1\u5b89\u88c5\u5305\u4ed3\u5e93 \u4f4e \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% Subversion \u670d\u52a1\u5b89\u88c5\u5305\u4ed3\u5e93 \u4f4e \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% JCR/JSR283 \u670d\u52a1\u5b89\u88c5\u5305\u4ed3\u5e93 \u4f4e \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% SimpleDeployer \u672c\u5730\u90e8\u7f72\u4ee3\u7406 \u4f4e \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0% SimpleScheduler \u8d44\u6e90\u8c03\u5ea6\u5668 \u4f4e \u672a\u8ba4\u9886 \u5f85\u5b9a \u5f85\u5b9a 0%","title":"\u4efb\u52a1"},{"location":"dev/design/","text":"\u6846\u67b6\u8bbe\u8ba1 \u6574\u4f53\u8bbe\u8ba1 \u56fe\u4f8b\u8bf4\u660e\uff1a \u56fe\u4e2d\u5de6\u8fb9\u6de1\u84dd\u80cc\u666f\u7684\u4e3a\u670d\u52a1\u6d88\u8d39\u65b9\u4f7f\u7528\u7684\u63a5\u53e3\uff0c\u53f3\u8fb9\u6de1\u7eff\u8272\u80cc\u666f\u7684\u4e3a\u670d\u52a1\u63d0\u4f9b\u65b9\u4f7f\u7528\u7684\u63a5\u53e3\uff0c\u4f4d\u4e8e\u4e2d\u8f74\u7ebf\u4e0a\u7684\u4e3a\u53cc\u65b9\u90fd\u7528\u5230\u7684\u63a5\u53e3\u3002 \u56fe\u4e2d\u4ece\u4e0b\u81f3\u4e0a\u5206\u4e3a\u5341\u5c42\uff0c\u5404\u5c42\u5747\u4e3a\u5355\u5411\u4f9d\u8d56\uff0c\u53f3\u8fb9\u7684\u9ed1\u8272\u7bad\u5934\u4ee3\u8868\u5c42\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\uff0c\u6bcf\u4e00\u5c42\u90fd\u53ef\u4ee5\u5265\u79bb\u4e0a\u5c42\u88ab\u590d\u7528\uff0c\u5176\u4e2d\uff0cService \u548c Config \u5c42\u4e3a API\uff0c\u5176\u5b83\u5404\u5c42\u5747\u4e3a SPI\u3002 \u56fe\u4e2d\u7eff\u8272\u5c0f\u5757\u7684\u4e3a\u6269\u5c55\u63a5\u53e3\uff0c\u84dd\u8272\u5c0f\u5757\u4e3a\u5b9e\u73b0\u7c7b\uff0c\u56fe\u4e2d\u53ea\u663e\u793a\u7528\u4e8e\u5173\u8054\u5404\u5c42\u7684\u5b9e\u73b0\u7c7b\u3002 \u56fe\u4e2d\u84dd\u8272\u865a\u7ebf\u4e3a\u521d\u59cb\u5316\u8fc7\u7a0b\uff0c\u5373\u542f\u52a8\u65f6\u7ec4\u88c5\u94fe\uff0c\u7ea2\u8272\u5b9e\u7ebf\u4e3a\u65b9\u6cd5\u8c03\u7528\u8fc7\u7a0b\uff0c\u5373\u8fd0\u884c\u65f6\u8c03\u65f6\u94fe\uff0c\u7d2b\u8272\u4e09\u89d2\u7bad\u5934\u4e3a\u7ee7\u627f\uff0c\u53ef\u4ee5\u628a\u5b50\u7c7b\u770b\u4f5c\u7236\u7c7b\u7684\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u7ebf\u4e0a\u7684\u6587\u5b57\u4e3a\u8c03\u7528\u7684\u65b9\u6cd5\u3002 \u5404\u5c42\u8bf4\u660e config \u914d\u7f6e\u5c42 \uff1a\u5bf9\u5916\u914d\u7f6e\u63a5\u53e3\uff0c\u4ee5 ServiceConfig , ReferenceConfig \u4e3a\u4e2d\u5fc3\uff0c\u53ef\u4ee5\u76f4\u63a5\u521d\u59cb\u5316\u914d\u7f6e\u7c7b\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 spring \u89e3\u6790\u914d\u7f6e\u751f\u6210\u914d\u7f6e\u7c7b proxy \u670d\u52a1\u4ee3\u7406\u5c42 \uff1a\u670d\u52a1\u63a5\u53e3\u900f\u660e\u4ee3\u7406\uff0c\u751f\u6210\u670d\u52a1\u7684\u5ba2\u6237\u7aef Stub \u548c\u670d\u52a1\u5668\u7aef Skeleton, \u4ee5 ServiceProxy \u4e3a\u4e2d\u5fc3\uff0c\u6269\u5c55\u63a5\u53e3\u4e3a ProxyFactory registry \u6ce8\u518c\u4e2d\u5fc3\u5c42 \uff1a\u5c01\u88c5\u670d\u52a1\u5730\u5740\u7684\u6ce8\u518c\u4e0e\u53d1\u73b0\uff0c\u4ee5\u670d\u52a1 URL \u4e3a\u4e2d\u5fc3\uff0c\u6269\u5c55\u63a5\u53e3\u4e3a RegistryFactory , Registry , RegistryService cluster \u8def\u7531\u5c42 \uff1a\u5c01\u88c5\u591a\u4e2a\u63d0\u4f9b\u8005\u7684\u8def\u7531\u53ca\u8d1f\u8f7d\u5747\u8861\uff0c\u5e76\u6865\u63a5\u6ce8\u518c\u4e2d\u5fc3\uff0c\u4ee5 Invoker \u4e3a\u4e2d\u5fc3\uff0c\u6269\u5c55\u63a5\u53e3\u4e3a Cluster , Directory , Router , LoadBalance monitor \u76d1\u63a7\u5c42 \uff1aRPC \u8c03\u7528\u6b21\u6570\u548c\u8c03\u7528\u65f6\u95f4\u76d1\u63a7\uff0c\u4ee5 Statistics \u4e3a\u4e2d\u5fc3\uff0c\u6269\u5c55\u63a5\u53e3\u4e3a MonitorFactory , Monitor , MonitorService protocol \u8fdc\u7a0b\u8c03\u7528\u5c42 \uff1a\u5c01\u88c5 RPC \u8c03\u7528\uff0c\u4ee5 Invocation , Result \u4e3a\u4e2d\u5fc3\uff0c\u6269\u5c55\u63a5\u53e3\u4e3a Protocol , Invoker , Exporter exchange \u4fe1\u606f\u4ea4\u6362\u5c42 \uff1a\u5c01\u88c5\u8bf7\u6c42\u54cd\u5e94\u6a21\u5f0f\uff0c\u540c\u6b65\u8f6c\u5f02\u6b65\uff0c\u4ee5 Request , Response \u4e3a\u4e2d\u5fc3\uff0c\u6269\u5c55\u63a5\u53e3\u4e3a Exchanger , ExchangeChannel , ExchangeClient , ExchangeServer transport \u7f51\u7edc\u4f20\u8f93\u5c42 \uff1a\u62bd\u8c61 mina \u548c netty \u4e3a\u7edf\u4e00\u63a5\u53e3\uff0c\u4ee5 Message \u4e3a\u4e2d\u5fc3\uff0c\u6269\u5c55\u63a5\u53e3\u4e3a Channel , Transporter , Client , Server , Codec serialize \u6570\u636e\u5e8f\u5217\u5316\u5c42 \uff1a\u53ef\u590d\u7528\u7684\u4e00\u4e9b\u5de5\u5177\uff0c\u6269\u5c55\u63a5\u53e3\u4e3a Serialization , ObjectInput , ObjectOutput , ThreadPool \u5173\u7cfb\u8bf4\u660e \u5728 RPC \u4e2d\uff0cProtocol \u662f\u6838\u5fc3\u5c42\uff0c\u4e5f\u5c31\u662f\u53ea\u8981\u6709 Protocol + Invoker + Exporter \u5c31\u53ef\u4ee5\u5b8c\u6210\u975e\u900f\u660e\u7684 RPC \u8c03\u7528\uff0c\u7136\u540e\u5728 Invoker \u7684\u4e3b\u8fc7\u7a0b\u4e0a Filter \u62e6\u622a\u70b9\u3002 \u56fe\u4e2d\u7684 Consumer \u548c Provider \u662f\u62bd\u8c61\u6982\u5ff5\uff0c\u53ea\u662f\u60f3\u8ba9\u770b\u56fe\u8005\u66f4\u76f4\u89c2\u7684\u4e86\u89e3\u54ea\u4e9b\u7c7b\u5206\u5c5e\u4e8e\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u5668\u7aef\uff0c\u4e0d\u7528 Client \u548c Server \u7684\u539f\u56e0\u662f Dubbo \u5728\u5f88\u591a\u573a\u666f\u4e0b\u90fd\u4f7f\u7528 Provider, Consumer, Registry, Monitor \u5212\u5206\u903b\u8f91\u62d3\u666e\u8282\u70b9\uff0c\u4fdd\u6301\u7edf\u4e00\u6982\u5ff5\u3002 \u800c Cluster \u662f\u5916\u56f4\u6982\u5ff5\uff0c\u6240\u4ee5 Cluster \u7684\u76ee\u7684\u662f\u5c06\u591a\u4e2a Invoker \u4f2a\u88c5\u6210\u4e00\u4e2a Invoker\uff0c\u8fd9\u6837\u5176\u5b83\u4eba\u53ea\u8981\u5173\u6ce8 Protocol \u5c42 Invoker \u5373\u53ef\uff0c\u52a0\u4e0a Cluster \u6216\u8005\u53bb\u6389 Cluster \u5bf9\u5176\u5b83\u5c42\u90fd\u4e0d\u4f1a\u9020\u6210\u5f71\u54cd\uff0c\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u63d0\u4f9b\u8005\u65f6\uff0c\u662f\u4e0d\u9700\u8981 Cluster \u7684\u3002 Proxy \u5c42\u5c01\u88c5\u4e86\u6240\u6709\u63a5\u53e3\u7684\u900f\u660e\u5316\u4ee3\u7406\uff0c\u800c\u5728\u5176\u5b83\u5c42\u90fd\u4ee5 Invoker \u4e3a\u4e2d\u5fc3\uff0c\u53ea\u6709\u5230\u4e86\u66b4\u9732\u7ed9\u7528\u6237\u4f7f\u7528\u65f6\uff0c\u624d\u7528 Proxy \u5c06 Invoker \u8f6c\u6210\u63a5\u53e3\uff0c\u6216\u5c06\u63a5\u53e3\u5b9e\u73b0\u8f6c\u6210 Invoker\uff0c\u4e5f\u5c31\u662f\u53bb\u6389 Proxy \u5c42 RPC \u662f\u53ef\u4ee5 Run \u7684\uff0c\u53ea\u662f\u4e0d\u90a3\u4e48\u900f\u660e\uff0c\u4e0d\u90a3\u4e48\u770b\u8d77\u6765\u50cf\u8c03\u672c\u5730\u670d\u52a1\u4e00\u6837\u8c03\u8fdc\u7a0b\u670d\u52a1\u3002 \u800c Remoting \u5b9e\u73b0\u662f Dubbo \u534f\u8bae\u7684\u5b9e\u73b0\uff0c\u5982\u679c\u4f60\u9009\u62e9 RMI \u534f\u8bae\uff0c\u6574\u4e2a Remoting \u90fd\u4e0d\u4f1a\u7528\u4e0a\uff0cRemoting \u5185\u90e8\u518d\u5212\u4e3a Transport \u4f20\u8f93\u5c42\u548c Exchange \u4fe1\u606f\u4ea4\u6362\u5c42\uff0cTransport \u5c42\u53ea\u8d1f\u8d23\u5355\u5411\u6d88\u606f\u4f20\u8f93\uff0c\u662f\u5bf9 Mina, Netty, Grizzly \u7684\u62bd\u8c61\uff0c\u5b83\u4e5f\u53ef\u4ee5\u6269\u5c55 UDP \u4f20\u8f93\uff0c\u800c Exchange \u5c42\u662f\u5728\u4f20\u8f93\u5c42\u4e4b\u4e0a\u5c01\u88c5\u4e86 Request-Response \u8bed\u4e49\u3002 Registry \u548c Monitor \u5b9e\u9645\u4e0a\u4e0d\u7b97\u4e00\u5c42\uff0c\u800c\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u8282\u70b9\uff0c\u53ea\u662f\u4e3a\u4e86\u5168\u5c40\u6982\u89c8\uff0c\u7528\u5c42\u7684\u65b9\u5f0f\u753b\u5728\u4e00\u8d77\u3002 \u6a21\u5757\u5206\u5305 \u6a21\u5757\u8bf4\u660e\uff1a dubbo-common \u516c\u5171\u903b\u8f91\u6a21\u5757 \uff1a\u5305\u62ec Util \u7c7b\u548c\u901a\u7528\u6a21\u578b\u3002 dubbo-remoting \u8fdc\u7a0b\u901a\u8baf\u6a21\u5757 \uff1a\u76f8\u5f53\u4e8e Dubbo \u534f\u8bae\u7684\u5b9e\u73b0\uff0c\u5982\u679c RPC \u7528 RMI\u534f\u8bae\u5219\u4e0d\u9700\u8981\u4f7f\u7528\u6b64\u5305\u3002 dubbo-rpc \u8fdc\u7a0b\u8c03\u7528\u6a21\u5757 \uff1a\u62bd\u8c61\u5404\u79cd\u534f\u8bae\uff0c\u4ee5\u53ca\u52a8\u6001\u4ee3\u7406\uff0c\u53ea\u5305\u542b\u4e00\u5bf9\u4e00\u7684\u8c03\u7528\uff0c\u4e0d\u5173\u5fc3\u96c6\u7fa4\u7684\u7ba1\u7406\u3002 dubbo-cluster \u96c6\u7fa4\u6a21\u5757 \uff1a\u5c06\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u65b9\u4f2a\u88c5\u4e3a\u4e00\u4e2a\u63d0\u4f9b\u65b9\uff0c\u5305\u62ec\uff1a\u8d1f\u8f7d\u5747\u8861, \u5bb9\u9519\uff0c\u8def\u7531\u7b49\uff0c\u96c6\u7fa4\u7684\u5730\u5740\u5217\u8868\u53ef\u4ee5\u662f\u9759\u6001\u914d\u7f6e\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u7531\u6ce8\u518c\u4e2d\u5fc3\u4e0b\u53d1\u3002 dubbo-registry \u6ce8\u518c\u4e2d\u5fc3\u6a21\u5757 \uff1a\u57fa\u4e8e\u6ce8\u518c\u4e2d\u5fc3\u4e0b\u53d1\u5730\u5740\u7684\u96c6\u7fa4\u65b9\u5f0f\uff0c\u4ee5\u53ca\u5bf9\u5404\u79cd\u6ce8\u518c\u4e2d\u5fc3\u7684\u62bd\u8c61\u3002 dubbo-monitor \u76d1\u63a7\u6a21\u5757 \uff1a\u7edf\u8ba1\u670d\u52a1\u8c03\u7528\u6b21\u6570\uff0c\u8c03\u7528\u65f6\u95f4\u7684\uff0c\u8c03\u7528\u94fe\u8ddf\u8e2a\u7684\u670d\u52a1\u3002 dubbo-config \u914d\u7f6e\u6a21\u5757 \uff1a\u662f Dubbo \u5bf9\u5916\u7684 API\uff0c\u7528\u6237\u901a\u8fc7 Config \u4f7f\u7528Dubbo\uff0c\u9690\u85cf Dubbo \u6240\u6709\u7ec6\u8282\u3002 dubbo-container \u5bb9\u5668\u6a21\u5757 \uff1a\u662f\u4e00\u4e2a Standlone \u7684\u5bb9\u5668\uff0c\u4ee5\u7b80\u5355\u7684 Main \u52a0\u8f7d Spring \u542f\u52a8\uff0c\u56e0\u4e3a\u670d\u52a1\u901a\u5e38\u4e0d\u9700\u8981 Tomcat/JBoss \u7b49 Web \u5bb9\u5668\u7684\u7279\u6027\uff0c\u6ca1\u5fc5\u8981\u7528 Web \u5bb9\u5668\u53bb\u52a0\u8f7d\u670d\u52a1\u3002 \u6574\u4f53\u4e0a\u6309\u7167\u5206\u5c42\u7ed3\u6784\u8fdb\u884c\u5206\u5305\uff0c\u4e0e\u5206\u5c42\u7684\u4e0d\u540c\u70b9\u5728\u4e8e\uff1a container \u4e3a\u670d\u52a1\u5bb9\u5668\uff0c\u7528\u4e8e\u90e8\u7f72\u8fd0\u884c\u670d\u52a1\uff0c\u6ca1\u6709\u5728\u5c42\u4e2d\u753b\u51fa\u3002 protocol \u5c42\u548c proxy \u5c42\u90fd\u653e\u5728 rpc \u6a21\u5757\u4e2d\uff0c\u8fd9\u4e24\u5c42\u662f rpc \u7684\u6838\u5fc3\uff0c\u5728\u4e0d\u9700\u8981\u96c6\u7fa4\u4e5f\u5c31\u662f\u53ea\u6709\u4e00\u4e2a\u63d0\u4f9b\u8005\u65f6\uff0c\u53ef\u4ee5\u53ea\u4f7f\u7528\u8fd9\u4e24\u5c42\u5b8c\u6210 rpc \u8c03\u7528\u3002 transport \u5c42\u548c exchange \u5c42\u90fd\u653e\u5728 remoting \u6a21\u5757\u4e2d\uff0c\u4e3a rpc \u8c03\u7528\u7684\u901a\u8baf\u57fa\u7840\u3002 serialize \u5c42\u653e\u5728 common \u6a21\u5757\u4e2d\uff0c\u4ee5\u4fbf\u66f4\u5927\u7a0b\u5ea6\u590d\u7528\u3002 \u4f9d\u8d56\u5173\u7cfb \u56fe\u4f8b\u8bf4\u660e\uff1a \u56fe\u4e2d\u5c0f\u65b9\u5757 Protocol, Cluster, Proxy, Service, Container, Registry, Monitor \u4ee3\u8868\u5c42\u6216\u6a21\u5757\uff0c\u84dd\u8272\u7684\u8868\u793a\u4e0e\u4e1a\u52a1\u6709\u4ea4\u4e92\uff0c\u7eff\u8272\u7684\u8868\u793a\u53ea\u5bf9 Dubbo \u5185\u90e8\u4ea4\u4e92\u3002 \u56fe\u4e2d\u80cc\u666f\u65b9\u5757 Consumer, Provider, Registry, Monitor \u4ee3\u8868\u90e8\u7f72\u903b\u8f91\u62d3\u6251\u8282\u70b9\u3002 \u56fe\u4e2d\u84dd\u8272\u865a\u7ebf\u4e3a\u521d\u59cb\u5316\u65f6\u8c03\u7528\uff0c\u7ea2\u8272\u865a\u7ebf\u4e3a\u8fd0\u884c\u65f6\u5f02\u6b65\u8c03\u7528\uff0c\u7ea2\u8272\u5b9e\u7ebf\u4e3a\u8fd0\u884c\u65f6\u540c\u6b65\u8c03\u7528\u3002 \u56fe\u4e2d\u53ea\u5305\u542b RPC \u7684\u5c42\uff0c\u4e0d\u5305\u542b Remoting \u7684\u5c42\uff0cRemoting \u6574\u4f53\u90fd\u9690\u542b\u5728 Protocol \u4e2d\u3002 \u8c03\u7528\u94fe \u5c55\u5f00\u603b\u8bbe\u8ba1\u56fe\u7684\u7ea2\u8272\u8c03\u7528\u94fe\uff0c\u5982\u4e0b\uff1a \u66b4\u9732\u670d\u52a1\u65f6\u5e8f \u5c55\u5f00\u603b\u8bbe\u8ba1\u56fe\u5de6\u8fb9\u670d\u52a1\u63d0\u4f9b\u65b9\u66b4\u9732\u670d\u52a1\u7684\u84dd\u8272\u521d\u59cb\u5316\u94fe\uff0c\u65f6\u5e8f\u56fe\u5982\u4e0b\uff1a \u5f15\u7528\u670d\u52a1\u65f6\u5e8f \u5c55\u5f00\u603b\u8bbe\u8ba1\u56fe\u53f3\u8fb9\u670d\u52a1\u6d88\u8d39\u65b9\u5f15\u7528\u670d\u52a1\u7684\u84dd\u8272\u521d\u59cb\u5316\u94fe\uff0c\u65f6\u5e8f\u56fe\u5982\u4e0b\uff1a \u9886\u57df\u6a21\u578b \u5728 Dubbo \u7684\u6838\u5fc3\u9886\u57df\u6a21\u578b\u4e2d\uff1a Protocol \u662f\u670d\u52a1\u57df\uff0c\u5b83\u662f Invoker \u66b4\u9732\u548c\u5f15\u7528\u7684\u4e3b\u529f\u80fd\u5165\u53e3\uff0c\u5b83\u8d1f\u8d23 Invoker \u7684\u751f\u547d\u5468\u671f\u7ba1\u7406\u3002 Invoker \u662f\u5b9e\u4f53\u57df\uff0c\u5b83\u662f Dubbo \u7684\u6838\u5fc3\u6a21\u578b\uff0c\u5176\u5b83\u6a21\u578b\u90fd\u5411\u5b83\u9760\u6270\uff0c\u6216\u8f6c\u6362\u6210\u5b83\uff0c\u5b83\u4ee3\u8868\u4e00\u4e2a\u53ef\u6267\u884c\u4f53\uff0c\u53ef\u5411\u5b83\u53d1\u8d77 invoke \u8c03\u7528\uff0c\u5b83\u6709\u53ef\u80fd\u662f\u4e00\u4e2a\u672c\u5730\u7684\u5b9e\u73b0\uff0c\u4e5f\u53ef\u80fd\u662f\u4e00\u4e2a\u8fdc\u7a0b\u7684\u5b9e\u73b0\uff0c\u4e5f\u53ef\u80fd\u4e00\u4e2a\u96c6\u7fa4\u5b9e\u73b0\u3002 Invocation \u662f\u4f1a\u8bdd\u57df\uff0c\u5b83\u6301\u6709\u8c03\u7528\u8fc7\u7a0b\u4e2d\u7684\u53d8\u91cf\uff0c\u6bd4\u5982\u65b9\u6cd5\u540d\uff0c\u53c2\u6570\u7b49\u3002 \u57fa\u672c\u8bbe\u8ba1\u539f\u5219 \u91c7\u7528 Microkernel + Plugin \u6a21\u5f0f\uff0cMicrokernel \u53ea\u8d1f\u8d23\u7ec4\u88c5 Plugin\uff0cDubbo \u81ea\u8eab\u7684\u529f\u80fd\u4e5f\u662f\u901a\u8fc7\u6269\u5c55\u70b9\u5b9e\u73b0\u7684\uff0c\u4e5f\u5c31\u662f Dubbo \u7684\u6240\u6709\u529f\u80fd\u70b9\u90fd\u53ef\u88ab\u7528\u6237\u81ea\u5b9a\u4e49\u6269\u5c55\u6240\u66ff\u6362\u3002 \u91c7\u7528 URL \u4f5c\u4e3a\u914d\u7f6e\u4fe1\u606f\u7684\u7edf\u4e00\u683c\u5f0f\uff0c\u6240\u6709\u6269\u5c55\u70b9\u90fd\u901a\u8fc7\u4f20\u9012 URL \u643a\u5e26\u914d\u7f6e\u4fe1\u606f\u3002 \u66f4\u591a\u8bbe\u8ba1\u539f\u5219\u53c2\u89c1\uff1a \u6846\u67b6\u8bbe\u8ba1\u539f\u5219","title":"\u6846\u67b6\u8bbe\u8ba1"},{"location":"dev/design/#_1","text":"","title":"\u6846\u67b6\u8bbe\u8ba1"},{"location":"dev/design/#_2","text":"\u56fe\u4f8b\u8bf4\u660e\uff1a \u56fe\u4e2d\u5de6\u8fb9\u6de1\u84dd\u80cc\u666f\u7684\u4e3a\u670d\u52a1\u6d88\u8d39\u65b9\u4f7f\u7528\u7684\u63a5\u53e3\uff0c\u53f3\u8fb9\u6de1\u7eff\u8272\u80cc\u666f\u7684\u4e3a\u670d\u52a1\u63d0\u4f9b\u65b9\u4f7f\u7528\u7684\u63a5\u53e3\uff0c\u4f4d\u4e8e\u4e2d\u8f74\u7ebf\u4e0a\u7684\u4e3a\u53cc\u65b9\u90fd\u7528\u5230\u7684\u63a5\u53e3\u3002 \u56fe\u4e2d\u4ece\u4e0b\u81f3\u4e0a\u5206\u4e3a\u5341\u5c42\uff0c\u5404\u5c42\u5747\u4e3a\u5355\u5411\u4f9d\u8d56\uff0c\u53f3\u8fb9\u7684\u9ed1\u8272\u7bad\u5934\u4ee3\u8868\u5c42\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\uff0c\u6bcf\u4e00\u5c42\u90fd\u53ef\u4ee5\u5265\u79bb\u4e0a\u5c42\u88ab\u590d\u7528\uff0c\u5176\u4e2d\uff0cService \u548c Config \u5c42\u4e3a API\uff0c\u5176\u5b83\u5404\u5c42\u5747\u4e3a SPI\u3002 \u56fe\u4e2d\u7eff\u8272\u5c0f\u5757\u7684\u4e3a\u6269\u5c55\u63a5\u53e3\uff0c\u84dd\u8272\u5c0f\u5757\u4e3a\u5b9e\u73b0\u7c7b\uff0c\u56fe\u4e2d\u53ea\u663e\u793a\u7528\u4e8e\u5173\u8054\u5404\u5c42\u7684\u5b9e\u73b0\u7c7b\u3002 \u56fe\u4e2d\u84dd\u8272\u865a\u7ebf\u4e3a\u521d\u59cb\u5316\u8fc7\u7a0b\uff0c\u5373\u542f\u52a8\u65f6\u7ec4\u88c5\u94fe\uff0c\u7ea2\u8272\u5b9e\u7ebf\u4e3a\u65b9\u6cd5\u8c03\u7528\u8fc7\u7a0b\uff0c\u5373\u8fd0\u884c\u65f6\u8c03\u65f6\u94fe\uff0c\u7d2b\u8272\u4e09\u89d2\u7bad\u5934\u4e3a\u7ee7\u627f\uff0c\u53ef\u4ee5\u628a\u5b50\u7c7b\u770b\u4f5c\u7236\u7c7b\u7684\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u7ebf\u4e0a\u7684\u6587\u5b57\u4e3a\u8c03\u7528\u7684\u65b9\u6cd5\u3002","title":"\u6574\u4f53\u8bbe\u8ba1"},{"location":"dev/design/#_3","text":"config \u914d\u7f6e\u5c42 \uff1a\u5bf9\u5916\u914d\u7f6e\u63a5\u53e3\uff0c\u4ee5 ServiceConfig , ReferenceConfig \u4e3a\u4e2d\u5fc3\uff0c\u53ef\u4ee5\u76f4\u63a5\u521d\u59cb\u5316\u914d\u7f6e\u7c7b\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 spring \u89e3\u6790\u914d\u7f6e\u751f\u6210\u914d\u7f6e\u7c7b proxy \u670d\u52a1\u4ee3\u7406\u5c42 \uff1a\u670d\u52a1\u63a5\u53e3\u900f\u660e\u4ee3\u7406\uff0c\u751f\u6210\u670d\u52a1\u7684\u5ba2\u6237\u7aef Stub \u548c\u670d\u52a1\u5668\u7aef Skeleton, \u4ee5 ServiceProxy \u4e3a\u4e2d\u5fc3\uff0c\u6269\u5c55\u63a5\u53e3\u4e3a ProxyFactory registry \u6ce8\u518c\u4e2d\u5fc3\u5c42 \uff1a\u5c01\u88c5\u670d\u52a1\u5730\u5740\u7684\u6ce8\u518c\u4e0e\u53d1\u73b0\uff0c\u4ee5\u670d\u52a1 URL \u4e3a\u4e2d\u5fc3\uff0c\u6269\u5c55\u63a5\u53e3\u4e3a RegistryFactory , Registry , RegistryService cluster \u8def\u7531\u5c42 \uff1a\u5c01\u88c5\u591a\u4e2a\u63d0\u4f9b\u8005\u7684\u8def\u7531\u53ca\u8d1f\u8f7d\u5747\u8861\uff0c\u5e76\u6865\u63a5\u6ce8\u518c\u4e2d\u5fc3\uff0c\u4ee5 Invoker \u4e3a\u4e2d\u5fc3\uff0c\u6269\u5c55\u63a5\u53e3\u4e3a Cluster , Directory , Router , LoadBalance monitor \u76d1\u63a7\u5c42 \uff1aRPC \u8c03\u7528\u6b21\u6570\u548c\u8c03\u7528\u65f6\u95f4\u76d1\u63a7\uff0c\u4ee5 Statistics \u4e3a\u4e2d\u5fc3\uff0c\u6269\u5c55\u63a5\u53e3\u4e3a MonitorFactory , Monitor , MonitorService protocol \u8fdc\u7a0b\u8c03\u7528\u5c42 \uff1a\u5c01\u88c5 RPC \u8c03\u7528\uff0c\u4ee5 Invocation , Result \u4e3a\u4e2d\u5fc3\uff0c\u6269\u5c55\u63a5\u53e3\u4e3a Protocol , Invoker , Exporter exchange \u4fe1\u606f\u4ea4\u6362\u5c42 \uff1a\u5c01\u88c5\u8bf7\u6c42\u54cd\u5e94\u6a21\u5f0f\uff0c\u540c\u6b65\u8f6c\u5f02\u6b65\uff0c\u4ee5 Request , Response \u4e3a\u4e2d\u5fc3\uff0c\u6269\u5c55\u63a5\u53e3\u4e3a Exchanger , ExchangeChannel , ExchangeClient , ExchangeServer transport \u7f51\u7edc\u4f20\u8f93\u5c42 \uff1a\u62bd\u8c61 mina \u548c netty \u4e3a\u7edf\u4e00\u63a5\u53e3\uff0c\u4ee5 Message \u4e3a\u4e2d\u5fc3\uff0c\u6269\u5c55\u63a5\u53e3\u4e3a Channel , Transporter , Client , Server , Codec serialize \u6570\u636e\u5e8f\u5217\u5316\u5c42 \uff1a\u53ef\u590d\u7528\u7684\u4e00\u4e9b\u5de5\u5177\uff0c\u6269\u5c55\u63a5\u53e3\u4e3a Serialization , ObjectInput , ObjectOutput , ThreadPool","title":"\u5404\u5c42\u8bf4\u660e"},{"location":"dev/design/#_4","text":"\u5728 RPC \u4e2d\uff0cProtocol \u662f\u6838\u5fc3\u5c42\uff0c\u4e5f\u5c31\u662f\u53ea\u8981\u6709 Protocol + Invoker + Exporter \u5c31\u53ef\u4ee5\u5b8c\u6210\u975e\u900f\u660e\u7684 RPC \u8c03\u7528\uff0c\u7136\u540e\u5728 Invoker \u7684\u4e3b\u8fc7\u7a0b\u4e0a Filter \u62e6\u622a\u70b9\u3002 \u56fe\u4e2d\u7684 Consumer \u548c Provider \u662f\u62bd\u8c61\u6982\u5ff5\uff0c\u53ea\u662f\u60f3\u8ba9\u770b\u56fe\u8005\u66f4\u76f4\u89c2\u7684\u4e86\u89e3\u54ea\u4e9b\u7c7b\u5206\u5c5e\u4e8e\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u5668\u7aef\uff0c\u4e0d\u7528 Client \u548c Server \u7684\u539f\u56e0\u662f Dubbo \u5728\u5f88\u591a\u573a\u666f\u4e0b\u90fd\u4f7f\u7528 Provider, Consumer, Registry, Monitor \u5212\u5206\u903b\u8f91\u62d3\u666e\u8282\u70b9\uff0c\u4fdd\u6301\u7edf\u4e00\u6982\u5ff5\u3002 \u800c Cluster \u662f\u5916\u56f4\u6982\u5ff5\uff0c\u6240\u4ee5 Cluster \u7684\u76ee\u7684\u662f\u5c06\u591a\u4e2a Invoker \u4f2a\u88c5\u6210\u4e00\u4e2a Invoker\uff0c\u8fd9\u6837\u5176\u5b83\u4eba\u53ea\u8981\u5173\u6ce8 Protocol \u5c42 Invoker \u5373\u53ef\uff0c\u52a0\u4e0a Cluster \u6216\u8005\u53bb\u6389 Cluster \u5bf9\u5176\u5b83\u5c42\u90fd\u4e0d\u4f1a\u9020\u6210\u5f71\u54cd\uff0c\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u63d0\u4f9b\u8005\u65f6\uff0c\u662f\u4e0d\u9700\u8981 Cluster \u7684\u3002 Proxy \u5c42\u5c01\u88c5\u4e86\u6240\u6709\u63a5\u53e3\u7684\u900f\u660e\u5316\u4ee3\u7406\uff0c\u800c\u5728\u5176\u5b83\u5c42\u90fd\u4ee5 Invoker \u4e3a\u4e2d\u5fc3\uff0c\u53ea\u6709\u5230\u4e86\u66b4\u9732\u7ed9\u7528\u6237\u4f7f\u7528\u65f6\uff0c\u624d\u7528 Proxy \u5c06 Invoker \u8f6c\u6210\u63a5\u53e3\uff0c\u6216\u5c06\u63a5\u53e3\u5b9e\u73b0\u8f6c\u6210 Invoker\uff0c\u4e5f\u5c31\u662f\u53bb\u6389 Proxy \u5c42 RPC \u662f\u53ef\u4ee5 Run \u7684\uff0c\u53ea\u662f\u4e0d\u90a3\u4e48\u900f\u660e\uff0c\u4e0d\u90a3\u4e48\u770b\u8d77\u6765\u50cf\u8c03\u672c\u5730\u670d\u52a1\u4e00\u6837\u8c03\u8fdc\u7a0b\u670d\u52a1\u3002 \u800c Remoting \u5b9e\u73b0\u662f Dubbo \u534f\u8bae\u7684\u5b9e\u73b0\uff0c\u5982\u679c\u4f60\u9009\u62e9 RMI \u534f\u8bae\uff0c\u6574\u4e2a Remoting \u90fd\u4e0d\u4f1a\u7528\u4e0a\uff0cRemoting \u5185\u90e8\u518d\u5212\u4e3a Transport \u4f20\u8f93\u5c42\u548c Exchange \u4fe1\u606f\u4ea4\u6362\u5c42\uff0cTransport \u5c42\u53ea\u8d1f\u8d23\u5355\u5411\u6d88\u606f\u4f20\u8f93\uff0c\u662f\u5bf9 Mina, Netty, Grizzly \u7684\u62bd\u8c61\uff0c\u5b83\u4e5f\u53ef\u4ee5\u6269\u5c55 UDP \u4f20\u8f93\uff0c\u800c Exchange \u5c42\u662f\u5728\u4f20\u8f93\u5c42\u4e4b\u4e0a\u5c01\u88c5\u4e86 Request-Response \u8bed\u4e49\u3002 Registry \u548c Monitor \u5b9e\u9645\u4e0a\u4e0d\u7b97\u4e00\u5c42\uff0c\u800c\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u8282\u70b9\uff0c\u53ea\u662f\u4e3a\u4e86\u5168\u5c40\u6982\u89c8\uff0c\u7528\u5c42\u7684\u65b9\u5f0f\u753b\u5728\u4e00\u8d77\u3002","title":"\u5173\u7cfb\u8bf4\u660e"},{"location":"dev/design/#_5","text":"\u6a21\u5757\u8bf4\u660e\uff1a dubbo-common \u516c\u5171\u903b\u8f91\u6a21\u5757 \uff1a\u5305\u62ec Util \u7c7b\u548c\u901a\u7528\u6a21\u578b\u3002 dubbo-remoting \u8fdc\u7a0b\u901a\u8baf\u6a21\u5757 \uff1a\u76f8\u5f53\u4e8e Dubbo \u534f\u8bae\u7684\u5b9e\u73b0\uff0c\u5982\u679c RPC \u7528 RMI\u534f\u8bae\u5219\u4e0d\u9700\u8981\u4f7f\u7528\u6b64\u5305\u3002 dubbo-rpc \u8fdc\u7a0b\u8c03\u7528\u6a21\u5757 \uff1a\u62bd\u8c61\u5404\u79cd\u534f\u8bae\uff0c\u4ee5\u53ca\u52a8\u6001\u4ee3\u7406\uff0c\u53ea\u5305\u542b\u4e00\u5bf9\u4e00\u7684\u8c03\u7528\uff0c\u4e0d\u5173\u5fc3\u96c6\u7fa4\u7684\u7ba1\u7406\u3002 dubbo-cluster \u96c6\u7fa4\u6a21\u5757 \uff1a\u5c06\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u65b9\u4f2a\u88c5\u4e3a\u4e00\u4e2a\u63d0\u4f9b\u65b9\uff0c\u5305\u62ec\uff1a\u8d1f\u8f7d\u5747\u8861, \u5bb9\u9519\uff0c\u8def\u7531\u7b49\uff0c\u96c6\u7fa4\u7684\u5730\u5740\u5217\u8868\u53ef\u4ee5\u662f\u9759\u6001\u914d\u7f6e\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u7531\u6ce8\u518c\u4e2d\u5fc3\u4e0b\u53d1\u3002 dubbo-registry \u6ce8\u518c\u4e2d\u5fc3\u6a21\u5757 \uff1a\u57fa\u4e8e\u6ce8\u518c\u4e2d\u5fc3\u4e0b\u53d1\u5730\u5740\u7684\u96c6\u7fa4\u65b9\u5f0f\uff0c\u4ee5\u53ca\u5bf9\u5404\u79cd\u6ce8\u518c\u4e2d\u5fc3\u7684\u62bd\u8c61\u3002 dubbo-monitor \u76d1\u63a7\u6a21\u5757 \uff1a\u7edf\u8ba1\u670d\u52a1\u8c03\u7528\u6b21\u6570\uff0c\u8c03\u7528\u65f6\u95f4\u7684\uff0c\u8c03\u7528\u94fe\u8ddf\u8e2a\u7684\u670d\u52a1\u3002 dubbo-config \u914d\u7f6e\u6a21\u5757 \uff1a\u662f Dubbo \u5bf9\u5916\u7684 API\uff0c\u7528\u6237\u901a\u8fc7 Config \u4f7f\u7528Dubbo\uff0c\u9690\u85cf Dubbo \u6240\u6709\u7ec6\u8282\u3002 dubbo-container \u5bb9\u5668\u6a21\u5757 \uff1a\u662f\u4e00\u4e2a Standlone \u7684\u5bb9\u5668\uff0c\u4ee5\u7b80\u5355\u7684 Main \u52a0\u8f7d Spring \u542f\u52a8\uff0c\u56e0\u4e3a\u670d\u52a1\u901a\u5e38\u4e0d\u9700\u8981 Tomcat/JBoss \u7b49 Web \u5bb9\u5668\u7684\u7279\u6027\uff0c\u6ca1\u5fc5\u8981\u7528 Web \u5bb9\u5668\u53bb\u52a0\u8f7d\u670d\u52a1\u3002 \u6574\u4f53\u4e0a\u6309\u7167\u5206\u5c42\u7ed3\u6784\u8fdb\u884c\u5206\u5305\uff0c\u4e0e\u5206\u5c42\u7684\u4e0d\u540c\u70b9\u5728\u4e8e\uff1a container \u4e3a\u670d\u52a1\u5bb9\u5668\uff0c\u7528\u4e8e\u90e8\u7f72\u8fd0\u884c\u670d\u52a1\uff0c\u6ca1\u6709\u5728\u5c42\u4e2d\u753b\u51fa\u3002 protocol \u5c42\u548c proxy \u5c42\u90fd\u653e\u5728 rpc \u6a21\u5757\u4e2d\uff0c\u8fd9\u4e24\u5c42\u662f rpc \u7684\u6838\u5fc3\uff0c\u5728\u4e0d\u9700\u8981\u96c6\u7fa4\u4e5f\u5c31\u662f\u53ea\u6709\u4e00\u4e2a\u63d0\u4f9b\u8005\u65f6\uff0c\u53ef\u4ee5\u53ea\u4f7f\u7528\u8fd9\u4e24\u5c42\u5b8c\u6210 rpc \u8c03\u7528\u3002 transport \u5c42\u548c exchange \u5c42\u90fd\u653e\u5728 remoting \u6a21\u5757\u4e2d\uff0c\u4e3a rpc \u8c03\u7528\u7684\u901a\u8baf\u57fa\u7840\u3002 serialize \u5c42\u653e\u5728 common \u6a21\u5757\u4e2d\uff0c\u4ee5\u4fbf\u66f4\u5927\u7a0b\u5ea6\u590d\u7528\u3002","title":"\u6a21\u5757\u5206\u5305"},{"location":"dev/design/#_6","text":"\u56fe\u4f8b\u8bf4\u660e\uff1a \u56fe\u4e2d\u5c0f\u65b9\u5757 Protocol, Cluster, Proxy, Service, Container, Registry, Monitor \u4ee3\u8868\u5c42\u6216\u6a21\u5757\uff0c\u84dd\u8272\u7684\u8868\u793a\u4e0e\u4e1a\u52a1\u6709\u4ea4\u4e92\uff0c\u7eff\u8272\u7684\u8868\u793a\u53ea\u5bf9 Dubbo \u5185\u90e8\u4ea4\u4e92\u3002 \u56fe\u4e2d\u80cc\u666f\u65b9\u5757 Consumer, Provider, Registry, Monitor \u4ee3\u8868\u90e8\u7f72\u903b\u8f91\u62d3\u6251\u8282\u70b9\u3002 \u56fe\u4e2d\u84dd\u8272\u865a\u7ebf\u4e3a\u521d\u59cb\u5316\u65f6\u8c03\u7528\uff0c\u7ea2\u8272\u865a\u7ebf\u4e3a\u8fd0\u884c\u65f6\u5f02\u6b65\u8c03\u7528\uff0c\u7ea2\u8272\u5b9e\u7ebf\u4e3a\u8fd0\u884c\u65f6\u540c\u6b65\u8c03\u7528\u3002 \u56fe\u4e2d\u53ea\u5305\u542b RPC \u7684\u5c42\uff0c\u4e0d\u5305\u542b Remoting \u7684\u5c42\uff0cRemoting \u6574\u4f53\u90fd\u9690\u542b\u5728 Protocol \u4e2d\u3002","title":"\u4f9d\u8d56\u5173\u7cfb"},{"location":"dev/design/#_7","text":"\u5c55\u5f00\u603b\u8bbe\u8ba1\u56fe\u7684\u7ea2\u8272\u8c03\u7528\u94fe\uff0c\u5982\u4e0b\uff1a","title":"\u8c03\u7528\u94fe"},{"location":"dev/design/#_8","text":"\u5c55\u5f00\u603b\u8bbe\u8ba1\u56fe\u5de6\u8fb9\u670d\u52a1\u63d0\u4f9b\u65b9\u66b4\u9732\u670d\u52a1\u7684\u84dd\u8272\u521d\u59cb\u5316\u94fe\uff0c\u65f6\u5e8f\u56fe\u5982\u4e0b\uff1a","title":"\u66b4\u9732\u670d\u52a1\u65f6\u5e8f"},{"location":"dev/design/#_9","text":"\u5c55\u5f00\u603b\u8bbe\u8ba1\u56fe\u53f3\u8fb9\u670d\u52a1\u6d88\u8d39\u65b9\u5f15\u7528\u670d\u52a1\u7684\u84dd\u8272\u521d\u59cb\u5316\u94fe\uff0c\u65f6\u5e8f\u56fe\u5982\u4e0b\uff1a","title":"\u5f15\u7528\u670d\u52a1\u65f6\u5e8f"},{"location":"dev/design/#_10","text":"\u5728 Dubbo \u7684\u6838\u5fc3\u9886\u57df\u6a21\u578b\u4e2d\uff1a Protocol \u662f\u670d\u52a1\u57df\uff0c\u5b83\u662f Invoker \u66b4\u9732\u548c\u5f15\u7528\u7684\u4e3b\u529f\u80fd\u5165\u53e3\uff0c\u5b83\u8d1f\u8d23 Invoker \u7684\u751f\u547d\u5468\u671f\u7ba1\u7406\u3002 Invoker \u662f\u5b9e\u4f53\u57df\uff0c\u5b83\u662f Dubbo \u7684\u6838\u5fc3\u6a21\u578b\uff0c\u5176\u5b83\u6a21\u578b\u90fd\u5411\u5b83\u9760\u6270\uff0c\u6216\u8f6c\u6362\u6210\u5b83\uff0c\u5b83\u4ee3\u8868\u4e00\u4e2a\u53ef\u6267\u884c\u4f53\uff0c\u53ef\u5411\u5b83\u53d1\u8d77 invoke \u8c03\u7528\uff0c\u5b83\u6709\u53ef\u80fd\u662f\u4e00\u4e2a\u672c\u5730\u7684\u5b9e\u73b0\uff0c\u4e5f\u53ef\u80fd\u662f\u4e00\u4e2a\u8fdc\u7a0b\u7684\u5b9e\u73b0\uff0c\u4e5f\u53ef\u80fd\u4e00\u4e2a\u96c6\u7fa4\u5b9e\u73b0\u3002 Invocation \u662f\u4f1a\u8bdd\u57df\uff0c\u5b83\u6301\u6709\u8c03\u7528\u8fc7\u7a0b\u4e2d\u7684\u53d8\u91cf\uff0c\u6bd4\u5982\u65b9\u6cd5\u540d\uff0c\u53c2\u6570\u7b49\u3002","title":"\u9886\u57df\u6a21\u578b"},{"location":"dev/design/#_11","text":"\u91c7\u7528 Microkernel + Plugin \u6a21\u5f0f\uff0cMicrokernel \u53ea\u8d1f\u8d23\u7ec4\u88c5 Plugin\uff0cDubbo \u81ea\u8eab\u7684\u529f\u80fd\u4e5f\u662f\u901a\u8fc7\u6269\u5c55\u70b9\u5b9e\u73b0\u7684\uff0c\u4e5f\u5c31\u662f Dubbo \u7684\u6240\u6709\u529f\u80fd\u70b9\u90fd\u53ef\u88ab\u7528\u6237\u81ea\u5b9a\u4e49\u6269\u5c55\u6240\u66ff\u6362\u3002 \u91c7\u7528 URL \u4f5c\u4e3a\u914d\u7f6e\u4fe1\u606f\u7684\u7edf\u4e00\u683c\u5f0f\uff0c\u6240\u6709\u6269\u5c55\u70b9\u90fd\u901a\u8fc7\u4f20\u9012 URL \u643a\u5e26\u914d\u7f6e\u4fe1\u606f\u3002 \u66f4\u591a\u8bbe\u8ba1\u539f\u5219\u53c2\u89c1\uff1a \u6846\u67b6\u8bbe\u8ba1\u539f\u5219","title":"\u57fa\u672c\u8bbe\u8ba1\u539f\u5219"},{"location":"dev/implementation/","text":"\u5b9e\u73b0\u7ec6\u8282 \u521d\u59cb\u5316\u8fc7\u7a0b\u7ec6\u8282 \u89e3\u6790\u670d\u52a1 \u57fa\u4e8e dubbo.jar \u5185\u7684 META-INF/spring.handlers \u914d\u7f6e\uff0cSpring \u5728\u9047\u5230 dubbo \u540d\u79f0\u7a7a\u95f4\u65f6\uff0c\u4f1a\u56de\u8c03 DubboNamespaceHandler \u3002 \u6240\u6709 dubbo \u7684\u6807\u7b7e\uff0c\u90fd\u7edf\u4e00\u7528 DubboBeanDefinitionParser \u8fdb\u884c\u89e3\u6790\uff0c\u57fa\u4e8e\u4e00\u5bf9\u4e00\u5c5e\u6027\u6620\u5c04\uff0c\u5c06 XML \u6807\u7b7e\u89e3\u6790\u4e3a Bean \u5bf9\u8c61\u3002 \u5728 ServiceConfig.export() \u6216 ReferenceConfig.get() \u521d\u59cb\u5316\u65f6\uff0c\u5c06 Bean \u5bf9\u8c61\u8f6c\u6362 URL \u683c\u5f0f\uff0c\u6240\u6709 Bean \u5c5e\u6027\u8f6c\u6210 URL \u7684\u53c2\u6570\u3002 \u7136\u540e\u5c06 URL \u4f20\u7ed9 \u534f\u8bae\u6269\u5c55\u70b9 \uff0c\u57fa\u4e8e\u6269\u5c55\u70b9\u7684 \u6269\u5c55\u70b9\u81ea\u9002\u5e94\u673a\u5236 \uff0c\u6839\u636e URL \u7684\u534f\u8bae\u5934\uff0c\u8fdb\u884c\u4e0d\u540c\u534f\u8bae\u7684\u670d\u52a1\u66b4\u9732\u6216\u5f15\u7528\u3002 \u66b4\u9732\u670d\u52a1 1. \u53ea\u66b4\u9732\u670d\u52a1\u7aef\u53e3\uff1a \u5728\u6ca1\u6709\u6ce8\u518c\u4e2d\u5fc3\uff0c\u76f4\u63a5\u66b4\u9732\u63d0\u4f9b\u8005\u7684\u60c5\u51b5\u4e0b [^1]\uff0c ServiceConfig \u89e3\u6790\u51fa\u7684 URL \u7684\u683c\u5f0f\u4e3a\uff1a dubbo://service-host/com.foo.FooService?version=1.0.0 \u3002 \u57fa\u4e8e\u6269\u5c55\u70b9\u81ea\u9002\u5e94\u673a\u5236\uff0c\u901a\u8fc7 URL \u7684 dubbo:// \u534f\u8bae\u5934\u8bc6\u522b\uff0c\u76f4\u63a5\u8c03\u7528 DubboProtocol \u7684 export() \u65b9\u6cd5\uff0c\u6253\u5f00\u670d\u52a1\u7aef\u53e3\u3002 2. \u5411\u6ce8\u518c\u4e2d\u5fc3\u66b4\u9732\u670d\u52a1\uff1a \u5728\u6709\u6ce8\u518c\u4e2d\u5fc3\uff0c\u9700\u8981\u6ce8\u518c\u63d0\u4f9b\u8005\u5730\u5740\u7684\u60c5\u51b5\u4e0b [^2]\uff0c ServiceConfig \u89e3\u6790\u51fa\u7684 URL \u7684\u683c\u5f0f\u4e3a: registry://registry-host/org.apache.dubbo.registry.RegistryService?export=URL.encode(\"dubbo://service-host/com.foo.FooService?version=1.0.0\") \uff0c \u57fa\u4e8e\u6269\u5c55\u70b9\u81ea\u9002\u5e94\u673a\u5236\uff0c\u901a\u8fc7 URL \u7684 registry:// \u534f\u8bae\u5934\u8bc6\u522b\uff0c\u5c31\u4f1a\u8c03\u7528 RegistryProtocol \u7684 export() \u65b9\u6cd5\uff0c\u5c06 export \u53c2\u6570\u4e2d\u7684\u63d0\u4f9b\u8005 URL\uff0c\u5148\u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3\u3002 \u518d\u91cd\u65b0\u4f20\u7ed9 Protocol \u6269\u5c55\u70b9\u8fdb\u884c\u66b4\u9732\uff1a dubbo://service-host/com.foo.FooService?version=1.0.0 \uff0c\u7136\u540e\u57fa\u4e8e\u6269\u5c55\u70b9\u81ea\u9002\u5e94\u673a\u5236\uff0c\u901a\u8fc7\u63d0\u4f9b\u8005 URL \u7684 dubbo:// \u534f\u8bae\u5934\u8bc6\u522b\uff0c\u5c31\u4f1a\u8c03\u7528 DubboProtocol \u7684 export() \u65b9\u6cd5\uff0c\u6253\u5f00\u670d\u52a1\u7aef\u53e3\u3002 \u5f15\u7528\u670d\u52a1 1. \u76f4\u8fde\u5f15\u7528\u670d\u52a1\uff1a \u5728\u6ca1\u6709\u6ce8\u518c\u4e2d\u5fc3\uff0c\u76f4\u8fde\u63d0\u4f9b\u8005\u7684\u60c5\u51b5\u4e0b [^3]\uff0c ReferenceConfig \u89e3\u6790\u51fa\u7684 URL \u7684\u683c\u5f0f\u4e3a\uff1a dubbo://service-host/com.foo.FooService?version=1.0.0 \u3002 \u57fa\u4e8e\u6269\u5c55\u70b9\u81ea\u9002\u5e94\u673a\u5236\uff0c\u901a\u8fc7 URL \u7684 dubbo:// \u534f\u8bae\u5934\u8bc6\u522b\uff0c\u76f4\u63a5\u8c03\u7528 DubboProtocol \u7684 refer() \u65b9\u6cd5\uff0c\u8fd4\u56de\u63d0\u4f9b\u8005\u5f15\u7528\u3002 2. \u4ece\u6ce8\u518c\u4e2d\u5fc3\u53d1\u73b0\u5f15\u7528\u670d\u52a1\uff1a \u5728\u6709\u6ce8\u518c\u4e2d\u5fc3\uff0c\u901a\u8fc7\u6ce8\u518c\u4e2d\u5fc3\u53d1\u73b0\u63d0\u4f9b\u8005\u5730\u5740\u7684\u60c5\u51b5\u4e0b [^4]\uff0c ReferenceConfig \u89e3\u6790\u51fa\u7684 URL \u7684\u683c\u5f0f\u4e3a\uff1a registry://registry-host/org.apache.dubbo.registry.RegistryService?refer=URL.encode(\"consumer://consumer-host/com.foo.FooService?version=1.0.0\") \u3002 \u57fa\u4e8e\u6269\u5c55\u70b9\u81ea\u9002\u5e94\u673a\u5236\uff0c\u901a\u8fc7 URL \u7684 registry:// \u534f\u8bae\u5934\u8bc6\u522b\uff0c\u5c31\u4f1a\u8c03\u7528 RegistryProtocol \u7684 refer() \u65b9\u6cd5\uff0c\u57fa\u4e8e refer \u53c2\u6570\u4e2d\u7684\u6761\u4ef6\uff0c\u67e5\u8be2\u63d0\u4f9b\u8005 URL\uff0c\u5982\uff1a dubbo://service-host/com.foo.FooService?version=1.0.0 \u3002 \u57fa\u4e8e\u6269\u5c55\u70b9\u81ea\u9002\u5e94\u673a\u5236\uff0c\u901a\u8fc7\u63d0\u4f9b\u8005 URL \u7684 dubbo:// \u534f\u8bae\u5934\u8bc6\u522b\uff0c\u5c31\u4f1a\u8c03\u7528 DubboProtocol \u7684 refer() \u65b9\u6cd5\uff0c\u5f97\u5230\u63d0\u4f9b\u8005\u5f15\u7528\u3002 \u7136\u540e RegistryProtocol \u5c06\u591a\u4e2a\u63d0\u4f9b\u8005\u5f15\u7528\uff0c\u901a\u8fc7 Cluster \u6269\u5c55\u70b9\uff0c\u4f2a\u88c5\u6210\u5355\u4e2a\u63d0\u4f9b\u8005\u5f15\u7528\u8fd4\u56de\u3002 \u62e6\u622a\u670d\u52a1 \u57fa\u4e8e\u6269\u5c55\u70b9\u81ea\u9002\u5e94\u673a\u5236\uff0c\u6240\u6709\u7684 Protocol \u6269\u5c55\u70b9\u90fd\u4f1a\u81ea\u52a8\u5957\u4e0a Wrapper \u7c7b\u3002 \u57fa\u4e8e ProtocolFilterWrapper \u7c7b\uff0c\u5c06\u6240\u6709 Filter \u7ec4\u88c5\u6210\u94fe\uff0c\u5728\u94fe\u7684\u6700\u540e\u4e00\u8282\u8c03\u7528\u771f\u5b9e\u7684\u5f15\u7528\u3002 \u57fa\u4e8e ProtocolListenerWrapper \u7c7b\uff0c\u5c06\u6240\u6709 InvokerListener \u548c ExporterListener \u7ec4\u88c5\u96c6\u5408\uff0c\u5728\u66b4\u9732\u548c\u5f15\u7528\u524d\u540e\uff0c\u8fdb\u884c\u56de\u8c03\u3002 \u5305\u62ec\u76d1\u63a7\u5728\u5185\uff0c\u6240\u6709\u9644\u52a0\u529f\u80fd\uff0c\u5168\u90e8\u901a\u8fc7 Filter \u62e6\u622a\u5b9e\u73b0\u3002 \u8fdc\u7a0b\u8c03\u7528\u7ec6\u8282 \u670d\u52a1\u63d0\u4f9b\u8005\u66b4\u9732\u4e00\u4e2a\u670d\u52a1\u7684\u8be6\u7ec6\u8fc7\u7a0b \u4e0a\u56fe\u662f\u670d\u52a1\u63d0\u4f9b\u8005\u66b4\u9732\u670d\u52a1\u7684\u4e3b\u8fc7\u7a0b\uff1a \u9996\u5148 ServiceConfig \u7c7b\u62ff\u5230\u5bf9\u5916\u63d0\u4f9b\u670d\u52a1\u7684\u5b9e\u9645\u7c7b ref(\u5982\uff1aHelloWorldImpl),\u7136\u540e\u901a\u8fc7 ProxyFactory \u7c7b\u7684 getInvoker \u65b9\u6cd5\u4f7f\u7528 ref \u751f\u6210\u4e00\u4e2a AbstractProxyInvoker \u5b9e\u4f8b\uff0c\u5230\u8fd9\u4e00\u6b65\u5c31\u5b8c\u6210\u5177\u4f53\u670d\u52a1\u5230 Invoker \u7684\u8f6c\u5316\u3002\u63a5\u4e0b\u6765\u5c31\u662f Invoker \u8f6c\u6362\u5230 Exporter \u7684\u8fc7\u7a0b\u3002 Dubbo \u5904\u7406\u670d\u52a1\u66b4\u9732\u7684\u5173\u952e\u5c31\u5728 Invoker \u8f6c\u6362\u5230 Exporter \u7684\u8fc7\u7a0b\uff0c\u4e0a\u56fe\u4e2d\u7684\u7ea2\u8272\u90e8\u5206\u3002\u4e0b\u9762\u6211\u4eec\u4ee5 Dubbo \u548c RMI \u8fd9\u4e24\u79cd\u5178\u578b\u534f\u8bae\u7684\u5b9e\u73b0\u6765\u8fdb\u884c\u8bf4\u660e\uff1a Dubbo \u7684\u5b9e\u73b0 Dubbo \u534f\u8bae\u7684 Invoker \u8f6c\u4e3a Exporter \u53d1\u751f\u5728 DubboProtocol \u7c7b\u7684 export \u65b9\u6cd5\uff0c\u5b83\u4e3b\u8981\u662f\u6253\u5f00 socket \u4fa6\u542c\u670d\u52a1\uff0c\u5e76\u63a5\u6536\u5ba2\u6237\u7aef\u53d1\u6765\u7684\u5404\u79cd\u8bf7\u6c42\uff0c\u901a\u8baf\u7ec6\u8282\u7531 Dubbo \u81ea\u5df1\u5b9e\u73b0\u3002 RMI \u7684\u5b9e\u73b0 RMI \u534f\u8bae\u7684 Invoker \u8f6c\u4e3a Exporter \u53d1\u751f\u5728 RmiProtocol \u7c7b\u7684 export \u65b9\u6cd5\uff0c\u5b83\u901a\u8fc7 Spring \u6216 Dubbo \u6216 JDK \u6765\u5b9e\u73b0 RMI \u670d\u52a1\uff0c\u901a\u8baf\u7ec6\u8282\u8fd9\u4e00\u5757\u7531 JDK \u5e95\u5c42\u6765\u5b9e\u73b0\uff0c\u8fd9\u5c31\u7701\u4e86\u4e0d\u5c11\u5de5\u4f5c\u91cf\u3002 \u670d\u52a1\u6d88\u8d39\u8005\u6d88\u8d39\u4e00\u4e2a\u670d\u52a1\u7684\u8be6\u7ec6\u8fc7\u7a0b \u4e0a\u56fe\u662f\u670d\u52a1\u6d88\u8d39\u7684\u4e3b\u8fc7\u7a0b\uff1a \u9996\u5148 ReferenceConfig \u7c7b\u7684 init \u65b9\u6cd5\u8c03\u7528 Protocol \u7684 refer \u65b9\u6cd5\u751f\u6210 Invoker \u5b9e\u4f8b(\u5982\u4e0a\u56fe\u4e2d\u7684\u7ea2\u8272\u90e8\u5206)\uff0c\u8fd9\u662f\u670d\u52a1\u6d88\u8d39\u7684\u5173\u952e\u3002\u63a5\u4e0b\u6765\u628a Invoker \u8f6c\u6362\u4e3a\u5ba2\u6237\u7aef\u9700\u8981\u7684\u63a5\u53e3(\u5982\uff1aHelloWorld)\u3002 \u5173\u4e8e\u6bcf\u79cd\u534f\u8bae\u5982 RMI/Dubbo/Web service \u7b49\u5b83\u4eec\u5728\u8c03\u7528 refer \u65b9\u6cd5\u751f\u6210 Invoker \u5b9e\u4f8b\u7684\u7ec6\u8282\u548c\u4e0a\u4e00\u7ae0\u8282\u6240\u63cf\u8ff0\u7684\u7c7b\u4f3c\u3002 \u6ee1\u773c\u90fd\u662f Invoker \u7531\u4e8e Invoker \u662f Dubbo \u9886\u57df\u6a21\u578b\u4e2d\u975e\u5e38\u91cd\u8981\u7684\u4e00\u4e2a\u6982\u5ff5\uff0c\u5f88\u591a\u8bbe\u8ba1\u601d\u8def\u90fd\u662f\u5411\u5b83\u9760\u62e2\u3002\u8fd9\u5c31\u4f7f\u5f97 Invoker \u6e17\u900f\u5728\u6574\u4e2a\u5b9e\u73b0\u4ee3\u7801\u91cc\uff0c\u5bf9\u4e8e\u521a\u5f00\u59cb\u63a5\u89e6 Dubbo \u7684\u4eba\uff0c\u786e\u5b9e\u5bb9\u6613\u7ed9\u641e\u6df7\u4e86\u3002 \u4e0b\u9762\u6211\u4eec\u7528\u4e00\u4e2a\u7cbe\u7b80\u7684\u56fe\u6765\u8bf4\u660e\u6700\u91cd\u8981\u7684\u4e24\u79cd Invoker \uff1a\u670d\u52a1\u63d0\u4f9b Invoker \u548c\u670d\u52a1\u6d88\u8d39 Invoker \uff1a \u4e3a\u4e86\u66f4\u597d\u7684\u89e3\u91ca\u4e0a\u9762\u8fd9\u5f20\u56fe\uff0c\u6211\u4eec\u7ed3\u5408\u670d\u52a1\u6d88\u8d39\u548c\u63d0\u4f9b\u8005\u7684\u4ee3\u7801\u793a\u4f8b\u6765\u8fdb\u884c\u8bf4\u660e\uff1a \u670d\u52a1\u6d88\u8d39\u8005\u4ee3\u7801\uff1a public class DemoClientAction { private DemoService demoService; public void setDemoService(DemoService demoService) { this.demoService = demoService; } public void start() { String hello = demoService.sayHello( world ); } } \u4e0a\u9762\u4ee3\u7801\u4e2d\u7684 DemoService \u5c31\u662f\u4e0a\u56fe\u4e2d\u670d\u52a1\u6d88\u8d39\u7aef\u7684 proxy\uff0c\u7528\u6237\u4ee3\u7801\u901a\u8fc7\u8fd9\u4e2a proxy \u8c03\u7528\u5176\u5bf9\u5e94\u7684 Invoker [^5]\uff0c\u800c\u8be5 Invoker \u5b9e\u73b0\u4e86\u771f\u6b63\u7684\u8fdc\u7a0b\u670d\u52a1\u8c03\u7528\u3002 \u670d\u52a1\u63d0\u4f9b\u8005\u4ee3\u7801\uff1a public class DemoServiceImpl implements DemoService { public String sayHello(String name) throws RemoteException { return Hello + name; } } \u4e0a\u9762\u8fd9\u4e2a\u7c7b\u4f1a\u88ab\u5c01\u88c5\u6210\u4e3a\u4e00\u4e2a AbstractProxyInvoker \u5b9e\u4f8b\uff0c\u5e76\u65b0\u751f\u6210\u4e00\u4e2a Exporter \u5b9e\u4f8b\u3002\u8fd9\u6837\u5f53\u7f51\u7edc\u901a\u8baf\u5c42\u6536\u5230\u4e00\u4e2a\u8bf7\u6c42\u540e\uff0c\u4f1a\u627e\u5230\u5bf9\u5e94\u7684 Exporter \u5b9e\u4f8b\uff0c\u5e76\u8c03\u7528\u5b83\u6240\u5bf9\u5e94\u7684 AbstractProxyInvoker \u5b9e\u4f8b\uff0c\u4ece\u800c\u771f\u6b63\u8c03\u7528\u4e86\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u4ee3\u7801\u3002Dubbo \u91cc\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684 Invoker \u7c7b\uff0c\u4f46\u4e0a\u9762\u4e24\u79cd\u662f\u6700\u91cd\u8981\u7684\u3002 \u8fdc\u7a0b\u901a\u8baf\u7ec6\u8282 \u534f\u8bae\u5934\u7ea6\u5b9a Magic - Magic High Magic Low (16 bits) Identifies dubbo protocol with value: 0xdabb Req/Res (1 bit) Identifies this is a request or response. Request - 1; Response - 0. 2 Way (1 bit) Only useful when Req/Res is 1 (Request), expect for a return value from server or not. Set to 1 if need a return value from server. Event (1 bit) Identifies an event message or not, for example, heartbeat event. Set to 1 if this is an event. Serialization ID (5 bit) Identifies serialization type: the value for fastjson is 6. Status (8 bits) Only useful when Req/Res is 0 (Response), identifies the status of response 20 - OK 30 - CLIENT_TIMEOUT 31 - SERVER_TIMEOUT 40 - BAD_REQUEST 50 - BAD_RESPONSE 60 - SERVICE_NOT_FOUND 70 - SERVICE_ERROR 80 - SERVER_ERROR 90 - CLIENT_ERROR 100 - SERVER_THREADPOOL_EXHAUSTED_ERROR Request ID (64 bits) Identifies an unique request. Numeric (long). Data Length (32) Length of the content (the variable part) after serialization, counted by bytes. Numeric (integer). Variable Part Each part is a byte[] after serialization with specific serialization type, identifies by Serialization ID. Every part is a byte[] after serialization with specific serialization type, identifies by Serialization ID If the content is a Request (Req/Res = 1), each part consists of the content, in turn is: Dubbo version Service name Service version Method name Method parameter types Method arguments Attachments If the content is a Response (Req/Res = 0), each part consists of the content, in turn is: Return value type, identifies what kind of value returns from server side: RESPONSE_NULL_VALUE - 2, RESPONSE_VALUE - 1, RESPONSE_WITH_EXCEPTION - 0. Return value, the real value returns from server. \u6ce8\u610f\uff1a \u5bf9\u4e8e(Variable Part)\u53d8\u957f\u90e8\u5206\uff0c\u5f53\u524d\u7248\u672c\u7684dubbo\u6846\u67b6\u4f7f\u7528json\u5e8f\u5217\u5316\u65f6\uff0c\u5728\u6bcf\u90e8\u5206\u5185\u5bb9\u95f4\u989d\u5916\u589e\u52a0\u4e86\u6362\u884c\u7b26\u4f5c\u4e3a\u5206\u9694\uff0c\u8bf7\u9009\u624b\u5728Variable Part\u7684\u6bcf\u4e2apart\u540e\u989d\u5916\u589e\u52a0\u6362\u884c\u7b26\uff0c \u5982\uff1a Dubbo version bytes (\u6362\u884c\u7b26) Service name bytes (\u6362\u884c\u7b26) ... \u7ebf\u7a0b\u6d3e\u53d1\u6a21\u578b Dispather: all , direct , message , execution , connection ThreadPool: fixed , cached [^1]: \u5373\uff1a dubbo:service regisrty=\"N/A\" / \u6216\u8005 dubbo:registry address=\"N/A\" / [^2]: \u5373: dubbo:registry address=\"zookeeper://10.20.153.10:2181\" / [^3]: \u5373\uff1a dubbo:reference url=\"dubbo://service-host/com.foo.FooService?version=1.0.0\" / [^4]: \u5373\uff1a dubbo:registry address=\"zookeeper://10.20.153.10:2181\" / [^5]: DubboInvoker \u3001 HessianRpcInvoker \u3001 InjvmInvoker \u3001 RmiInvoker \u3001 WebServiceInvoker \u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a","title":"\u5b9e\u73b0\u7ec6\u8282"},{"location":"dev/implementation/#_1","text":"","title":"\u5b9e\u73b0\u7ec6\u8282"},{"location":"dev/implementation/#_2","text":"","title":"\u521d\u59cb\u5316\u8fc7\u7a0b\u7ec6\u8282"},{"location":"dev/implementation/#_3","text":"\u57fa\u4e8e dubbo.jar \u5185\u7684 META-INF/spring.handlers \u914d\u7f6e\uff0cSpring \u5728\u9047\u5230 dubbo \u540d\u79f0\u7a7a\u95f4\u65f6\uff0c\u4f1a\u56de\u8c03 DubboNamespaceHandler \u3002 \u6240\u6709 dubbo \u7684\u6807\u7b7e\uff0c\u90fd\u7edf\u4e00\u7528 DubboBeanDefinitionParser \u8fdb\u884c\u89e3\u6790\uff0c\u57fa\u4e8e\u4e00\u5bf9\u4e00\u5c5e\u6027\u6620\u5c04\uff0c\u5c06 XML \u6807\u7b7e\u89e3\u6790\u4e3a Bean \u5bf9\u8c61\u3002 \u5728 ServiceConfig.export() \u6216 ReferenceConfig.get() \u521d\u59cb\u5316\u65f6\uff0c\u5c06 Bean \u5bf9\u8c61\u8f6c\u6362 URL \u683c\u5f0f\uff0c\u6240\u6709 Bean \u5c5e\u6027\u8f6c\u6210 URL \u7684\u53c2\u6570\u3002 \u7136\u540e\u5c06 URL \u4f20\u7ed9 \u534f\u8bae\u6269\u5c55\u70b9 \uff0c\u57fa\u4e8e\u6269\u5c55\u70b9\u7684 \u6269\u5c55\u70b9\u81ea\u9002\u5e94\u673a\u5236 \uff0c\u6839\u636e URL \u7684\u534f\u8bae\u5934\uff0c\u8fdb\u884c\u4e0d\u540c\u534f\u8bae\u7684\u670d\u52a1\u66b4\u9732\u6216\u5f15\u7528\u3002","title":"\u89e3\u6790\u670d\u52a1"},{"location":"dev/implementation/#_4","text":"","title":"\u66b4\u9732\u670d\u52a1"},{"location":"dev/implementation/#1","text":"\u5728\u6ca1\u6709\u6ce8\u518c\u4e2d\u5fc3\uff0c\u76f4\u63a5\u66b4\u9732\u63d0\u4f9b\u8005\u7684\u60c5\u51b5\u4e0b [^1]\uff0c ServiceConfig \u89e3\u6790\u51fa\u7684 URL \u7684\u683c\u5f0f\u4e3a\uff1a dubbo://service-host/com.foo.FooService?version=1.0.0 \u3002 \u57fa\u4e8e\u6269\u5c55\u70b9\u81ea\u9002\u5e94\u673a\u5236\uff0c\u901a\u8fc7 URL \u7684 dubbo:// \u534f\u8bae\u5934\u8bc6\u522b\uff0c\u76f4\u63a5\u8c03\u7528 DubboProtocol \u7684 export() \u65b9\u6cd5\uff0c\u6253\u5f00\u670d\u52a1\u7aef\u53e3\u3002","title":"1. \u53ea\u66b4\u9732\u670d\u52a1\u7aef\u53e3\uff1a"},{"location":"dev/implementation/#2","text":"\u5728\u6709\u6ce8\u518c\u4e2d\u5fc3\uff0c\u9700\u8981\u6ce8\u518c\u63d0\u4f9b\u8005\u5730\u5740\u7684\u60c5\u51b5\u4e0b [^2]\uff0c ServiceConfig \u89e3\u6790\u51fa\u7684 URL \u7684\u683c\u5f0f\u4e3a: registry://registry-host/org.apache.dubbo.registry.RegistryService?export=URL.encode(\"dubbo://service-host/com.foo.FooService?version=1.0.0\") \uff0c \u57fa\u4e8e\u6269\u5c55\u70b9\u81ea\u9002\u5e94\u673a\u5236\uff0c\u901a\u8fc7 URL \u7684 registry:// \u534f\u8bae\u5934\u8bc6\u522b\uff0c\u5c31\u4f1a\u8c03\u7528 RegistryProtocol \u7684 export() \u65b9\u6cd5\uff0c\u5c06 export \u53c2\u6570\u4e2d\u7684\u63d0\u4f9b\u8005 URL\uff0c\u5148\u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3\u3002 \u518d\u91cd\u65b0\u4f20\u7ed9 Protocol \u6269\u5c55\u70b9\u8fdb\u884c\u66b4\u9732\uff1a dubbo://service-host/com.foo.FooService?version=1.0.0 \uff0c\u7136\u540e\u57fa\u4e8e\u6269\u5c55\u70b9\u81ea\u9002\u5e94\u673a\u5236\uff0c\u901a\u8fc7\u63d0\u4f9b\u8005 URL \u7684 dubbo:// \u534f\u8bae\u5934\u8bc6\u522b\uff0c\u5c31\u4f1a\u8c03\u7528 DubboProtocol \u7684 export() \u65b9\u6cd5\uff0c\u6253\u5f00\u670d\u52a1\u7aef\u53e3\u3002","title":"2. \u5411\u6ce8\u518c\u4e2d\u5fc3\u66b4\u9732\u670d\u52a1\uff1a"},{"location":"dev/implementation/#_5","text":"","title":"\u5f15\u7528\u670d\u52a1"},{"location":"dev/implementation/#1_1","text":"\u5728\u6ca1\u6709\u6ce8\u518c\u4e2d\u5fc3\uff0c\u76f4\u8fde\u63d0\u4f9b\u8005\u7684\u60c5\u51b5\u4e0b [^3]\uff0c ReferenceConfig \u89e3\u6790\u51fa\u7684 URL \u7684\u683c\u5f0f\u4e3a\uff1a dubbo://service-host/com.foo.FooService?version=1.0.0 \u3002 \u57fa\u4e8e\u6269\u5c55\u70b9\u81ea\u9002\u5e94\u673a\u5236\uff0c\u901a\u8fc7 URL \u7684 dubbo:// \u534f\u8bae\u5934\u8bc6\u522b\uff0c\u76f4\u63a5\u8c03\u7528 DubboProtocol \u7684 refer() \u65b9\u6cd5\uff0c\u8fd4\u56de\u63d0\u4f9b\u8005\u5f15\u7528\u3002","title":"1. \u76f4\u8fde\u5f15\u7528\u670d\u52a1\uff1a"},{"location":"dev/implementation/#2_1","text":"\u5728\u6709\u6ce8\u518c\u4e2d\u5fc3\uff0c\u901a\u8fc7\u6ce8\u518c\u4e2d\u5fc3\u53d1\u73b0\u63d0\u4f9b\u8005\u5730\u5740\u7684\u60c5\u51b5\u4e0b [^4]\uff0c ReferenceConfig \u89e3\u6790\u51fa\u7684 URL \u7684\u683c\u5f0f\u4e3a\uff1a registry://registry-host/org.apache.dubbo.registry.RegistryService?refer=URL.encode(\"consumer://consumer-host/com.foo.FooService?version=1.0.0\") \u3002 \u57fa\u4e8e\u6269\u5c55\u70b9\u81ea\u9002\u5e94\u673a\u5236\uff0c\u901a\u8fc7 URL \u7684 registry:// \u534f\u8bae\u5934\u8bc6\u522b\uff0c\u5c31\u4f1a\u8c03\u7528 RegistryProtocol \u7684 refer() \u65b9\u6cd5\uff0c\u57fa\u4e8e refer \u53c2\u6570\u4e2d\u7684\u6761\u4ef6\uff0c\u67e5\u8be2\u63d0\u4f9b\u8005 URL\uff0c\u5982\uff1a dubbo://service-host/com.foo.FooService?version=1.0.0 \u3002 \u57fa\u4e8e\u6269\u5c55\u70b9\u81ea\u9002\u5e94\u673a\u5236\uff0c\u901a\u8fc7\u63d0\u4f9b\u8005 URL \u7684 dubbo:// \u534f\u8bae\u5934\u8bc6\u522b\uff0c\u5c31\u4f1a\u8c03\u7528 DubboProtocol \u7684 refer() \u65b9\u6cd5\uff0c\u5f97\u5230\u63d0\u4f9b\u8005\u5f15\u7528\u3002 \u7136\u540e RegistryProtocol \u5c06\u591a\u4e2a\u63d0\u4f9b\u8005\u5f15\u7528\uff0c\u901a\u8fc7 Cluster \u6269\u5c55\u70b9\uff0c\u4f2a\u88c5\u6210\u5355\u4e2a\u63d0\u4f9b\u8005\u5f15\u7528\u8fd4\u56de\u3002","title":"2. \u4ece\u6ce8\u518c\u4e2d\u5fc3\u53d1\u73b0\u5f15\u7528\u670d\u52a1\uff1a"},{"location":"dev/implementation/#_6","text":"\u57fa\u4e8e\u6269\u5c55\u70b9\u81ea\u9002\u5e94\u673a\u5236\uff0c\u6240\u6709\u7684 Protocol \u6269\u5c55\u70b9\u90fd\u4f1a\u81ea\u52a8\u5957\u4e0a Wrapper \u7c7b\u3002 \u57fa\u4e8e ProtocolFilterWrapper \u7c7b\uff0c\u5c06\u6240\u6709 Filter \u7ec4\u88c5\u6210\u94fe\uff0c\u5728\u94fe\u7684\u6700\u540e\u4e00\u8282\u8c03\u7528\u771f\u5b9e\u7684\u5f15\u7528\u3002 \u57fa\u4e8e ProtocolListenerWrapper \u7c7b\uff0c\u5c06\u6240\u6709 InvokerListener \u548c ExporterListener \u7ec4\u88c5\u96c6\u5408\uff0c\u5728\u66b4\u9732\u548c\u5f15\u7528\u524d\u540e\uff0c\u8fdb\u884c\u56de\u8c03\u3002 \u5305\u62ec\u76d1\u63a7\u5728\u5185\uff0c\u6240\u6709\u9644\u52a0\u529f\u80fd\uff0c\u5168\u90e8\u901a\u8fc7 Filter \u62e6\u622a\u5b9e\u73b0\u3002","title":"\u62e6\u622a\u670d\u52a1"},{"location":"dev/implementation/#_7","text":"","title":"\u8fdc\u7a0b\u8c03\u7528\u7ec6\u8282"},{"location":"dev/implementation/#_8","text":"\u4e0a\u56fe\u662f\u670d\u52a1\u63d0\u4f9b\u8005\u66b4\u9732\u670d\u52a1\u7684\u4e3b\u8fc7\u7a0b\uff1a \u9996\u5148 ServiceConfig \u7c7b\u62ff\u5230\u5bf9\u5916\u63d0\u4f9b\u670d\u52a1\u7684\u5b9e\u9645\u7c7b ref(\u5982\uff1aHelloWorldImpl),\u7136\u540e\u901a\u8fc7 ProxyFactory \u7c7b\u7684 getInvoker \u65b9\u6cd5\u4f7f\u7528 ref \u751f\u6210\u4e00\u4e2a AbstractProxyInvoker \u5b9e\u4f8b\uff0c\u5230\u8fd9\u4e00\u6b65\u5c31\u5b8c\u6210\u5177\u4f53\u670d\u52a1\u5230 Invoker \u7684\u8f6c\u5316\u3002\u63a5\u4e0b\u6765\u5c31\u662f Invoker \u8f6c\u6362\u5230 Exporter \u7684\u8fc7\u7a0b\u3002 Dubbo \u5904\u7406\u670d\u52a1\u66b4\u9732\u7684\u5173\u952e\u5c31\u5728 Invoker \u8f6c\u6362\u5230 Exporter \u7684\u8fc7\u7a0b\uff0c\u4e0a\u56fe\u4e2d\u7684\u7ea2\u8272\u90e8\u5206\u3002\u4e0b\u9762\u6211\u4eec\u4ee5 Dubbo \u548c RMI \u8fd9\u4e24\u79cd\u5178\u578b\u534f\u8bae\u7684\u5b9e\u73b0\u6765\u8fdb\u884c\u8bf4\u660e\uff1a","title":"\u670d\u52a1\u63d0\u4f9b\u8005\u66b4\u9732\u4e00\u4e2a\u670d\u52a1\u7684\u8be6\u7ec6\u8fc7\u7a0b"},{"location":"dev/implementation/#dubbo","text":"Dubbo \u534f\u8bae\u7684 Invoker \u8f6c\u4e3a Exporter \u53d1\u751f\u5728 DubboProtocol \u7c7b\u7684 export \u65b9\u6cd5\uff0c\u5b83\u4e3b\u8981\u662f\u6253\u5f00 socket \u4fa6\u542c\u670d\u52a1\uff0c\u5e76\u63a5\u6536\u5ba2\u6237\u7aef\u53d1\u6765\u7684\u5404\u79cd\u8bf7\u6c42\uff0c\u901a\u8baf\u7ec6\u8282\u7531 Dubbo \u81ea\u5df1\u5b9e\u73b0\u3002","title":"Dubbo \u7684\u5b9e\u73b0"},{"location":"dev/implementation/#rmi","text":"RMI \u534f\u8bae\u7684 Invoker \u8f6c\u4e3a Exporter \u53d1\u751f\u5728 RmiProtocol \u7c7b\u7684 export \u65b9\u6cd5\uff0c\u5b83\u901a\u8fc7 Spring \u6216 Dubbo \u6216 JDK \u6765\u5b9e\u73b0 RMI \u670d\u52a1\uff0c\u901a\u8baf\u7ec6\u8282\u8fd9\u4e00\u5757\u7531 JDK \u5e95\u5c42\u6765\u5b9e\u73b0\uff0c\u8fd9\u5c31\u7701\u4e86\u4e0d\u5c11\u5de5\u4f5c\u91cf\u3002","title":"RMI \u7684\u5b9e\u73b0"},{"location":"dev/implementation/#_9","text":"\u4e0a\u56fe\u662f\u670d\u52a1\u6d88\u8d39\u7684\u4e3b\u8fc7\u7a0b\uff1a \u9996\u5148 ReferenceConfig \u7c7b\u7684 init \u65b9\u6cd5\u8c03\u7528 Protocol \u7684 refer \u65b9\u6cd5\u751f\u6210 Invoker \u5b9e\u4f8b(\u5982\u4e0a\u56fe\u4e2d\u7684\u7ea2\u8272\u90e8\u5206)\uff0c\u8fd9\u662f\u670d\u52a1\u6d88\u8d39\u7684\u5173\u952e\u3002\u63a5\u4e0b\u6765\u628a Invoker \u8f6c\u6362\u4e3a\u5ba2\u6237\u7aef\u9700\u8981\u7684\u63a5\u53e3(\u5982\uff1aHelloWorld)\u3002 \u5173\u4e8e\u6bcf\u79cd\u534f\u8bae\u5982 RMI/Dubbo/Web service \u7b49\u5b83\u4eec\u5728\u8c03\u7528 refer \u65b9\u6cd5\u751f\u6210 Invoker \u5b9e\u4f8b\u7684\u7ec6\u8282\u548c\u4e0a\u4e00\u7ae0\u8282\u6240\u63cf\u8ff0\u7684\u7c7b\u4f3c\u3002","title":"\u670d\u52a1\u6d88\u8d39\u8005\u6d88\u8d39\u4e00\u4e2a\u670d\u52a1\u7684\u8be6\u7ec6\u8fc7\u7a0b"},{"location":"dev/implementation/#invoker","text":"\u7531\u4e8e Invoker \u662f Dubbo \u9886\u57df\u6a21\u578b\u4e2d\u975e\u5e38\u91cd\u8981\u7684\u4e00\u4e2a\u6982\u5ff5\uff0c\u5f88\u591a\u8bbe\u8ba1\u601d\u8def\u90fd\u662f\u5411\u5b83\u9760\u62e2\u3002\u8fd9\u5c31\u4f7f\u5f97 Invoker \u6e17\u900f\u5728\u6574\u4e2a\u5b9e\u73b0\u4ee3\u7801\u91cc\uff0c\u5bf9\u4e8e\u521a\u5f00\u59cb\u63a5\u89e6 Dubbo \u7684\u4eba\uff0c\u786e\u5b9e\u5bb9\u6613\u7ed9\u641e\u6df7\u4e86\u3002 \u4e0b\u9762\u6211\u4eec\u7528\u4e00\u4e2a\u7cbe\u7b80\u7684\u56fe\u6765\u8bf4\u660e\u6700\u91cd\u8981\u7684\u4e24\u79cd Invoker \uff1a\u670d\u52a1\u63d0\u4f9b Invoker \u548c\u670d\u52a1\u6d88\u8d39 Invoker \uff1a \u4e3a\u4e86\u66f4\u597d\u7684\u89e3\u91ca\u4e0a\u9762\u8fd9\u5f20\u56fe\uff0c\u6211\u4eec\u7ed3\u5408\u670d\u52a1\u6d88\u8d39\u548c\u63d0\u4f9b\u8005\u7684\u4ee3\u7801\u793a\u4f8b\u6765\u8fdb\u884c\u8bf4\u660e\uff1a \u670d\u52a1\u6d88\u8d39\u8005\u4ee3\u7801\uff1a public class DemoClientAction { private DemoService demoService; public void setDemoService(DemoService demoService) { this.demoService = demoService; } public void start() { String hello = demoService.sayHello( world ); } } \u4e0a\u9762\u4ee3\u7801\u4e2d\u7684 DemoService \u5c31\u662f\u4e0a\u56fe\u4e2d\u670d\u52a1\u6d88\u8d39\u7aef\u7684 proxy\uff0c\u7528\u6237\u4ee3\u7801\u901a\u8fc7\u8fd9\u4e2a proxy \u8c03\u7528\u5176\u5bf9\u5e94\u7684 Invoker [^5]\uff0c\u800c\u8be5 Invoker \u5b9e\u73b0\u4e86\u771f\u6b63\u7684\u8fdc\u7a0b\u670d\u52a1\u8c03\u7528\u3002 \u670d\u52a1\u63d0\u4f9b\u8005\u4ee3\u7801\uff1a public class DemoServiceImpl implements DemoService { public String sayHello(String name) throws RemoteException { return Hello + name; } } \u4e0a\u9762\u8fd9\u4e2a\u7c7b\u4f1a\u88ab\u5c01\u88c5\u6210\u4e3a\u4e00\u4e2a AbstractProxyInvoker \u5b9e\u4f8b\uff0c\u5e76\u65b0\u751f\u6210\u4e00\u4e2a Exporter \u5b9e\u4f8b\u3002\u8fd9\u6837\u5f53\u7f51\u7edc\u901a\u8baf\u5c42\u6536\u5230\u4e00\u4e2a\u8bf7\u6c42\u540e\uff0c\u4f1a\u627e\u5230\u5bf9\u5e94\u7684 Exporter \u5b9e\u4f8b\uff0c\u5e76\u8c03\u7528\u5b83\u6240\u5bf9\u5e94\u7684 AbstractProxyInvoker \u5b9e\u4f8b\uff0c\u4ece\u800c\u771f\u6b63\u8c03\u7528\u4e86\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u4ee3\u7801\u3002Dubbo \u91cc\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684 Invoker \u7c7b\uff0c\u4f46\u4e0a\u9762\u4e24\u79cd\u662f\u6700\u91cd\u8981\u7684\u3002","title":"\u6ee1\u773c\u90fd\u662f Invoker"},{"location":"dev/implementation/#_10","text":"","title":"\u8fdc\u7a0b\u901a\u8baf\u7ec6\u8282"},{"location":"dev/implementation/#_11","text":"Magic - Magic High Magic Low (16 bits) Identifies dubbo protocol with value: 0xdabb Req/Res (1 bit) Identifies this is a request or response. Request - 1; Response - 0. 2 Way (1 bit) Only useful when Req/Res is 1 (Request), expect for a return value from server or not. Set to 1 if need a return value from server. Event (1 bit) Identifies an event message or not, for example, heartbeat event. Set to 1 if this is an event. Serialization ID (5 bit) Identifies serialization type: the value for fastjson is 6. Status (8 bits) Only useful when Req/Res is 0 (Response), identifies the status of response 20 - OK 30 - CLIENT_TIMEOUT 31 - SERVER_TIMEOUT 40 - BAD_REQUEST 50 - BAD_RESPONSE 60 - SERVICE_NOT_FOUND 70 - SERVICE_ERROR 80 - SERVER_ERROR 90 - CLIENT_ERROR 100 - SERVER_THREADPOOL_EXHAUSTED_ERROR Request ID (64 bits) Identifies an unique request. Numeric (long). Data Length (32) Length of the content (the variable part) after serialization, counted by bytes. Numeric (integer). Variable Part Each part is a byte[] after serialization with specific serialization type, identifies by Serialization ID. Every part is a byte[] after serialization with specific serialization type, identifies by Serialization ID If the content is a Request (Req/Res = 1), each part consists of the content, in turn is: Dubbo version Service name Service version Method name Method parameter types Method arguments Attachments If the content is a Response (Req/Res = 0), each part consists of the content, in turn is: Return value type, identifies what kind of value returns from server side: RESPONSE_NULL_VALUE - 2, RESPONSE_VALUE - 1, RESPONSE_WITH_EXCEPTION - 0. Return value, the real value returns from server. \u6ce8\u610f\uff1a \u5bf9\u4e8e(Variable Part)\u53d8\u957f\u90e8\u5206\uff0c\u5f53\u524d\u7248\u672c\u7684dubbo\u6846\u67b6\u4f7f\u7528json\u5e8f\u5217\u5316\u65f6\uff0c\u5728\u6bcf\u90e8\u5206\u5185\u5bb9\u95f4\u989d\u5916\u589e\u52a0\u4e86\u6362\u884c\u7b26\u4f5c\u4e3a\u5206\u9694\uff0c\u8bf7\u9009\u624b\u5728Variable Part\u7684\u6bcf\u4e2apart\u540e\u989d\u5916\u589e\u52a0\u6362\u884c\u7b26\uff0c \u5982\uff1a Dubbo version bytes (\u6362\u884c\u7b26) Service name bytes (\u6362\u884c\u7b26) ...","title":"\u534f\u8bae\u5934\u7ea6\u5b9a"},{"location":"dev/implementation/#_12","text":"Dispather: all , direct , message , execution , connection ThreadPool: fixed , cached [^1]: \u5373\uff1a dubbo:service regisrty=\"N/A\" / \u6216\u8005 dubbo:registry address=\"N/A\" / [^2]: \u5373: dubbo:registry address=\"zookeeper://10.20.153.10:2181\" / [^3]: \u5373\uff1a dubbo:reference url=\"dubbo://service-host/com.foo.FooService?version=1.0.0\" / [^4]: \u5373\uff1a dubbo:registry address=\"zookeeper://10.20.153.10:2181\" / [^5]: DubboInvoker \u3001 HessianRpcInvoker \u3001 InjvmInvoker \u3001 RmiInvoker \u3001 WebServiceInvoker \u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a","title":"\u7ebf\u7a0b\u6d3e\u53d1\u6a21\u578b"},{"location":"dev/introduction/","text":"\u8fd9\u91cc\u589e\u52a0\u300a\u5f00\u53d1\u6307\u5357\u300b\u7684\u5185\u5bb9","title":"Introduction"},{"location":"dev/release/","text":"\u7248\u672c\u7ba1\u7406 \u65b0\u529f\u80fd\u7684\u5f00\u53d1 \u548c \u7a33\u5b9a\u6027\u7684\u63d0\u9ad8 \u5bf9\u4ea7\u54c1\u90fd\u5f88\u91cd\u8981\u3002\u4f46\u662f\u6dfb\u52a0\u65b0\u529f\u80fd\u4f1a\u5f71\u54cd\u7a33\u5b9a\u6027\uff0cDubbo \u4f7f\u7528\u5982\u4e0b\u7684\u7248\u672c\u5f00\u53d1\u6a21\u5f0f\u6765\u4fdd\u969c\u4e24\u8005\u3002 2 \u4e2a\u7248\u672c\u5e76\u884c\u5f00\u53d1 BugFix \u7248\u672c\uff1a\u4f4e\u7248\u672c\uff0c\u6bd4\u5982 2.4.x \u3002\u662f GA \u7248\u672c\uff0c\u7ebf\u4e0a\u4f7f\u7528\u7684\u7248\u672c\uff0c\u53ea\u4f1a BugFix\uff0c\u5347\u7ea7\u7b2c\u4e09\u4f4d\u7248\u672c\u53f7\u3002 \u65b0\u529f\u80fd\u7248\u672c\uff1a\u9ad8\u7248\u672c\uff0c\u6bd4\u5982 2.5.x \u3002\u52a0\u65b0\u529f\u80fd\u7684\u7248\u672c\uff0c\u4f1a\u7ed9\u5bf9\u65b0\u529f\u80fd\u6709\u9700\u6c42\u7684\u5e94\u7528\u8bd5\u7528\u3002 2.5.x \u7684\u65b0\u529f\u80fd\u57fa\u672c\u7a33\u5b9a\u540e\uff0c\u8fdb\u5165 2.5.x \u8bd5\u7528\u9636\u6bb5\u3002\u627e\u8db3\u591f\u591a\u7684\u5e94\u7528\u8bd5\u7528 2.5.x \u7248\u672c\u3002 \u5728 2.5.x \u591f\u7a33\u5b9a\u540e\uff1a 2.5.x \u6210\u4e3a GA \u7248\u672c\uff0c\u53ea BugFix\uff0c\u63a8\u5e7f\u4f7f\u7528\u6b64\u7248\u672c\u3002\u5982\u679c\u7248\u672c\u53ef\u7528\uff0c\u53ef\u4ee5\u63a8\u8fdb\u5e94\u7528\u5728\u671f\u671b\u7684\u65f6\u95f4\u70b9\u5185\u5347\u7ea7\u5230 GA \u7248\u672c\u3002 2.4.x \u4e0d\u518d\u5f00\u53d1\uff0c\u5e94\u7528\u78b0\u5230 Bug \u8ba9\u76f4\u63a5\u5347\u7ea7\u3002\uff08\u8fd9\u4e2a\u79f0\u4e3a\u201c\u5915\u9633\u6761\u6b3e\u201d\uff09 \u4ece 2.5.x \u62c9\u6210\u5206\u652f 2.6.0 \uff0c\u4f5c\u4e3a\u65b0\u529f\u80fd\u5f00\u53d1\u7248\u672c\u3002 \u4f18\u52bf \u4fdd\u8bc1 GA \u7248\u672c\u662f\u7a33\u5b9a\u7684\uff01\u56e0\u4e3a\uff1a \u53ea\u4f1a\u4f5c BugFix \u6210\u4e3a GA \u7248\u672c\u524d\u6709\u8bd5\u7528\u9636\u6bb5 \u65b0\u529f\u80fd\u53ef\u4ee5\u5728\u9ad8\u7248\u672c\u4e2d\u5feb\u901f\u54cd\u5e94\uff0c\u5e76\u8ba9\u5e94\u7528\u80fd\u8bd5\u7528\u65b0\u529f\u80fd\u3002 \u4e0d\u4f1a\u7248\u672c\u8fc7\u591a\uff0c\u5bfc\u81f4\u5f00\u53d1\u548c\u7ef4\u62a4\u6210\u672c\u5267\u589e \u7528\u6237\u8981\u914d\u5408\u7684\u804c\u8d23 \u7531\u4e8e\u5f00\u53d1\u53ea\u4f1a BugFix GA \u7248\u672c\uff0c\u6240\u4ee5\u7528\u6237\u9700\u8981\u79ef\u6781\u8ddf\u8fdb\u5347\u7ea7\u5230 GA \u7248\u672c\uff0c\u4ee5 Fix \u53d1\u73b0\u7684\u95ee\u9898\u3002 \u5b9a\u671f\u5347\u7ea7\u7248\u672c\u7ed9\u7528\u6237\u5e26\u6765\u4e86\u4e0d\u5b89\u3002\u8fd9\u662f\u4e00\u4e2a\u5047\u547d\u9898\uff0c\u8bf4\u660e\u5982\u4e0b\uff1a GA \u7ecf\u8fc7\u4e00\u4e2a\u8bd5\u7528\u9636\u6bb5\u4fdd\u6301\u7a33\u5b9a\u3002 GA \u7248\u672c\u6709 Bug \u4f1a\u706b\u901f Fix \u76f8\u5bf9\u51fa\u95ee\u9898\u624d\u5347\u7ea7\u5230 GA \u7248\u672c\uff08\u53ef\u80fd\u8de8\u4e86\u591a\u4e2a\u7248\u672c\uff09\u5b9a\u671f\u5347\u7ea7\u5e73\u644a\u98ce\u9669\uff08\u7c7b\u4f3c\u5c0f\u6b65\u5feb\u8dd1\uff09\u3002\u7ecf\u5386\u8fc7\u5468\u671f\u957f\u7684\u5927\u9879\u76ee\u7684\u540c\u5b66\u4f1a\u6709\u8fd9\u6837\u7684\u7ecf\u5386\uff0c\u4e09\u65b9\u5e93\u7248\u672c\u957f\u65f6\u95f4\u4e0d\u5347\u7ea7\uff0c\u7ed3\u679c\u51fa\u4e86\u95ee\u9898\u4e0d\u5f97\u4e0d\u5347\u7ea7\u5230\u65b0\u7248\u672c\uff08\u8de8\u4e86\u591a\u4e2a\u7248\u672c\uff09\u98ce\u9669\u5de8\u5927\u3002","title":"\u7248\u672c\u53d1\u5e03"},{"location":"dev/release/#_1","text":"\u65b0\u529f\u80fd\u7684\u5f00\u53d1 \u548c \u7a33\u5b9a\u6027\u7684\u63d0\u9ad8 \u5bf9\u4ea7\u54c1\u90fd\u5f88\u91cd\u8981\u3002\u4f46\u662f\u6dfb\u52a0\u65b0\u529f\u80fd\u4f1a\u5f71\u54cd\u7a33\u5b9a\u6027\uff0cDubbo \u4f7f\u7528\u5982\u4e0b\u7684\u7248\u672c\u5f00\u53d1\u6a21\u5f0f\u6765\u4fdd\u969c\u4e24\u8005\u3002","title":"\u7248\u672c\u7ba1\u7406"},{"location":"dev/release/#2","text":"BugFix \u7248\u672c\uff1a\u4f4e\u7248\u672c\uff0c\u6bd4\u5982 2.4.x \u3002\u662f GA \u7248\u672c\uff0c\u7ebf\u4e0a\u4f7f\u7528\u7684\u7248\u672c\uff0c\u53ea\u4f1a BugFix\uff0c\u5347\u7ea7\u7b2c\u4e09\u4f4d\u7248\u672c\u53f7\u3002 \u65b0\u529f\u80fd\u7248\u672c\uff1a\u9ad8\u7248\u672c\uff0c\u6bd4\u5982 2.5.x \u3002\u52a0\u65b0\u529f\u80fd\u7684\u7248\u672c\uff0c\u4f1a\u7ed9\u5bf9\u65b0\u529f\u80fd\u6709\u9700\u6c42\u7684\u5e94\u7528\u8bd5\u7528\u3002 2.5.x \u7684\u65b0\u529f\u80fd\u57fa\u672c\u7a33\u5b9a\u540e\uff0c\u8fdb\u5165 2.5.x \u8bd5\u7528\u9636\u6bb5\u3002\u627e\u8db3\u591f\u591a\u7684\u5e94\u7528\u8bd5\u7528 2.5.x \u7248\u672c\u3002 \u5728 2.5.x \u591f\u7a33\u5b9a\u540e\uff1a 2.5.x \u6210\u4e3a GA \u7248\u672c\uff0c\u53ea BugFix\uff0c\u63a8\u5e7f\u4f7f\u7528\u6b64\u7248\u672c\u3002\u5982\u679c\u7248\u672c\u53ef\u7528\uff0c\u53ef\u4ee5\u63a8\u8fdb\u5e94\u7528\u5728\u671f\u671b\u7684\u65f6\u95f4\u70b9\u5185\u5347\u7ea7\u5230 GA \u7248\u672c\u3002 2.4.x \u4e0d\u518d\u5f00\u53d1\uff0c\u5e94\u7528\u78b0\u5230 Bug \u8ba9\u76f4\u63a5\u5347\u7ea7\u3002\uff08\u8fd9\u4e2a\u79f0\u4e3a\u201c\u5915\u9633\u6761\u6b3e\u201d\uff09 \u4ece 2.5.x \u62c9\u6210\u5206\u652f 2.6.0 \uff0c\u4f5c\u4e3a\u65b0\u529f\u80fd\u5f00\u53d1\u7248\u672c\u3002","title":"2 \u4e2a\u7248\u672c\u5e76\u884c\u5f00\u53d1"},{"location":"dev/release/#_2","text":"\u4fdd\u8bc1 GA \u7248\u672c\u662f\u7a33\u5b9a\u7684\uff01\u56e0\u4e3a\uff1a \u53ea\u4f1a\u4f5c BugFix \u6210\u4e3a GA \u7248\u672c\u524d\u6709\u8bd5\u7528\u9636\u6bb5 \u65b0\u529f\u80fd\u53ef\u4ee5\u5728\u9ad8\u7248\u672c\u4e2d\u5feb\u901f\u54cd\u5e94\uff0c\u5e76\u8ba9\u5e94\u7528\u80fd\u8bd5\u7528\u65b0\u529f\u80fd\u3002 \u4e0d\u4f1a\u7248\u672c\u8fc7\u591a\uff0c\u5bfc\u81f4\u5f00\u53d1\u548c\u7ef4\u62a4\u6210\u672c\u5267\u589e","title":"\u4f18\u52bf"},{"location":"dev/release/#_3","text":"\u7531\u4e8e\u5f00\u53d1\u53ea\u4f1a BugFix GA \u7248\u672c\uff0c\u6240\u4ee5\u7528\u6237\u9700\u8981\u79ef\u6781\u8ddf\u8fdb\u5347\u7ea7\u5230 GA \u7248\u672c\uff0c\u4ee5 Fix \u53d1\u73b0\u7684\u95ee\u9898\u3002 \u5b9a\u671f\u5347\u7ea7\u7248\u672c\u7ed9\u7528\u6237\u5e26\u6765\u4e86\u4e0d\u5b89\u3002\u8fd9\u662f\u4e00\u4e2a\u5047\u547d\u9898\uff0c\u8bf4\u660e\u5982\u4e0b\uff1a GA \u7ecf\u8fc7\u4e00\u4e2a\u8bd5\u7528\u9636\u6bb5\u4fdd\u6301\u7a33\u5b9a\u3002 GA \u7248\u672c\u6709 Bug \u4f1a\u706b\u901f Fix \u76f8\u5bf9\u51fa\u95ee\u9898\u624d\u5347\u7ea7\u5230 GA \u7248\u672c\uff08\u53ef\u80fd\u8de8\u4e86\u591a\u4e2a\u7248\u672c\uff09\u5b9a\u671f\u5347\u7ea7\u5e73\u644a\u98ce\u9669\uff08\u7c7b\u4f3c\u5c0f\u6b65\u5feb\u8dd1\uff09\u3002\u7ecf\u5386\u8fc7\u5468\u671f\u957f\u7684\u5927\u9879\u76ee\u7684\u540c\u5b66\u4f1a\u6709\u8fd9\u6837\u7684\u7ecf\u5386\uff0c\u4e09\u65b9\u5e93\u7248\u672c\u957f\u65f6\u95f4\u4e0d\u5347\u7ea7\uff0c\u7ed3\u679c\u51fa\u4e86\u95ee\u9898\u4e0d\u5f97\u4e0d\u5347\u7ea7\u5230\u65b0\u7248\u672c\uff08\u8de8\u4e86\u591a\u4e2a\u7248\u672c\uff09\u98ce\u9669\u5de8\u5927\u3002","title":"\u7528\u6237\u8981\u914d\u5408\u7684\u804c\u8d23"},{"location":"dev/impls/cache/","text":"\u7f13\u5b58\u6269\u5c55 \u6269\u5c55\u8bf4\u660e \u7528\u8bf7\u6c42\u53c2\u6570\u4f5c\u4e3a key\uff0c\u7f13\u5b58\u8fd4\u56de\u7ed3\u679c\u3002 \u6269\u5c55\u63a5\u53e3 org.apache.dubbo.cache.CacheFactory \u6269\u5c55\u914d\u7f6e dubbo:service cache= lru / !-- \u65b9\u6cd5\u7ea7\u7f13\u5b58 -- dubbo:service dubbo:method cache= lru / /dubbo:service !-- \u7f3a\u7701\u503c\u8bbe\u7f6e\uff0c\u5f53 dubbo:service \u6ca1\u6709\u914d\u7f6ecache\u5c5e\u6027\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider cache= xxx,yyy / \u5df2\u77e5\u6269\u5c55 org.apache.dubbo.cache.support.lru.LruCacheFactory org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory org.apache.dubbo.cache.support.jcache.JCacheFactory \u6269\u5c55\u793a\u4f8b Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxCacheFactory.java (\u5b9e\u73b0StatusChecker\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.cache.CacheFactory (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxCacheFactory) XxxCacheFactory.java\uff1a package com.xxx; import org.apache.dubbo.cache.CacheFactory; public class XxxCacheFactory implements CacheFactory { public Cache getCache(URL url, String name) { return new XxxCache(url, name); } } XxxCacheFactory.java\uff1a package com.xxx; import org.apache.dubbo.cache.Cache; public class XxxCache implements Cache { public Cache(URL url, String name) { // ... } public void put(Object key, Object value) { // ... } public Object get(Object key) { // ... } } META-INF/dubbo/org.apache.dubbo.cache.CacheFactory\uff1a xxx=com.xxx.XxxCacheFactory","title":"\u7f13\u5b58\u6269\u5c55"},{"location":"dev/impls/cache/#_1","text":"","title":"\u7f13\u5b58\u6269\u5c55"},{"location":"dev/impls/cache/#_2","text":"\u7528\u8bf7\u6c42\u53c2\u6570\u4f5c\u4e3a key\uff0c\u7f13\u5b58\u8fd4\u56de\u7ed3\u679c\u3002","title":"\u6269\u5c55\u8bf4\u660e"},{"location":"dev/impls/cache/#_3","text":"org.apache.dubbo.cache.CacheFactory","title":"\u6269\u5c55\u63a5\u53e3"},{"location":"dev/impls/cache/#_4","text":"dubbo:service cache= lru / !-- \u65b9\u6cd5\u7ea7\u7f13\u5b58 -- dubbo:service dubbo:method cache= lru / /dubbo:service !-- \u7f3a\u7701\u503c\u8bbe\u7f6e\uff0c\u5f53 dubbo:service \u6ca1\u6709\u914d\u7f6ecache\u5c5e\u6027\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider cache= xxx,yyy /","title":"\u6269\u5c55\u914d\u7f6e"},{"location":"dev/impls/cache/#_5","text":"org.apache.dubbo.cache.support.lru.LruCacheFactory org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory org.apache.dubbo.cache.support.jcache.JCacheFactory","title":"\u5df2\u77e5\u6269\u5c55"},{"location":"dev/impls/cache/#_6","text":"Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxCacheFactory.java (\u5b9e\u73b0StatusChecker\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.cache.CacheFactory (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxCacheFactory) XxxCacheFactory.java\uff1a package com.xxx; import org.apache.dubbo.cache.CacheFactory; public class XxxCacheFactory implements CacheFactory { public Cache getCache(URL url, String name) { return new XxxCache(url, name); } } XxxCacheFactory.java\uff1a package com.xxx; import org.apache.dubbo.cache.Cache; public class XxxCache implements Cache { public Cache(URL url, String name) { // ... } public void put(Object key, Object value) { // ... } public Object get(Object key) { // ... } } META-INF/dubbo/org.apache.dubbo.cache.CacheFactory\uff1a xxx=com.xxx.XxxCacheFactory","title":"\u6269\u5c55\u793a\u4f8b"},{"location":"dev/impls/cluster/","text":"\u96c6\u7fa4\u6269\u5c55 \u6269\u5c55\u8bf4\u660e \u5f53\u6709\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u65b9\u65f6\uff0c\u5c06\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u65b9\u7ec4\u7ec7\u6210\u4e00\u4e2a\u96c6\u7fa4\uff0c\u5e76\u4f2a\u88c5\u6210\u4e00\u4e2a\u63d0\u4f9b\u65b9\u3002 \u6269\u5c55\u63a5\u53e3 org.apache.dubbo.rpc.cluster.Cluster \u6269\u5c55\u914d\u7f6e dubbo:protocol cluster= xxx / !-- \u7f3a\u7701\u503c\u914d\u7f6e\uff0c\u5982\u679c dubbo:protocol \u6ca1\u6709\u914d\u7f6ecluster\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider cluster= xxx / \u5df2\u77e5\u6269\u5c55 org.apache.dubbo.rpc.cluster.support.FailoverCluster org.apache.dubbo.rpc.cluster.support.FailfastCluster org.apache.dubbo.rpc.cluster.support.FailsafeCluster org.apache.dubbo.rpc.cluster.support.FailbackCluster org.apache.dubbo.rpc.cluster.support.ForkingCluster org.apache.dubbo.rpc.cluster.support.AvailableCluster \u6269\u5c55\u793a\u4f8b Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxCluster.java (\u5b9e\u73b0Cluster\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.cluster.Cluster (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxCluster) XxxCluster.java\uff1a package com.xxx; import org.apache.dubbo.rpc.cluster.Cluster; import org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker; import org.apache.dubbo.rpc.cluster.Directory; import org.apache.dubbo.rpc.cluster.LoadBalance; import org.apache.dubbo.rpc.Invoker; import org.apache.dubbo.rpc.Invocation; import org.apache.dubbo.rpc.Result; import org.apache.dubbo.rpc.RpcException; public class XxxCluster implements Cluster { public T Invoker T merge(Directory T directory) throws RpcException { return new AbstractClusterInvoker T (directory) { public Result doInvoke(Invocation invocation, List Invoker T invokers, LoadBalance loadbalance) throws RpcException { // ... } }; } } META-INF/dubbo/org.apache.dubbo.rpc.cluster.Cluster\uff1a xxx=com.xxx.XxxCluster","title":"\u96c6\u7fa4\u6269\u5c55"},{"location":"dev/impls/cluster/#_1","text":"","title":"\u96c6\u7fa4\u6269\u5c55"},{"location":"dev/impls/cluster/#_2","text":"\u5f53\u6709\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u65b9\u65f6\uff0c\u5c06\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u65b9\u7ec4\u7ec7\u6210\u4e00\u4e2a\u96c6\u7fa4\uff0c\u5e76\u4f2a\u88c5\u6210\u4e00\u4e2a\u63d0\u4f9b\u65b9\u3002","title":"\u6269\u5c55\u8bf4\u660e"},{"location":"dev/impls/cluster/#_3","text":"org.apache.dubbo.rpc.cluster.Cluster","title":"\u6269\u5c55\u63a5\u53e3"},{"location":"dev/impls/cluster/#_4","text":"dubbo:protocol cluster= xxx / !-- \u7f3a\u7701\u503c\u914d\u7f6e\uff0c\u5982\u679c dubbo:protocol \u6ca1\u6709\u914d\u7f6ecluster\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider cluster= xxx /","title":"\u6269\u5c55\u914d\u7f6e"},{"location":"dev/impls/cluster/#_5","text":"org.apache.dubbo.rpc.cluster.support.FailoverCluster org.apache.dubbo.rpc.cluster.support.FailfastCluster org.apache.dubbo.rpc.cluster.support.FailsafeCluster org.apache.dubbo.rpc.cluster.support.FailbackCluster org.apache.dubbo.rpc.cluster.support.ForkingCluster org.apache.dubbo.rpc.cluster.support.AvailableCluster","title":"\u5df2\u77e5\u6269\u5c55"},{"location":"dev/impls/cluster/#_6","text":"Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxCluster.java (\u5b9e\u73b0Cluster\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.cluster.Cluster (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxCluster) XxxCluster.java\uff1a package com.xxx; import org.apache.dubbo.rpc.cluster.Cluster; import org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker; import org.apache.dubbo.rpc.cluster.Directory; import org.apache.dubbo.rpc.cluster.LoadBalance; import org.apache.dubbo.rpc.Invoker; import org.apache.dubbo.rpc.Invocation; import org.apache.dubbo.rpc.Result; import org.apache.dubbo.rpc.RpcException; public class XxxCluster implements Cluster { public T Invoker T merge(Directory T directory) throws RpcException { return new AbstractClusterInvoker T (directory) { public Result doInvoke(Invocation invocation, List Invoker T invokers, LoadBalance loadbalance) throws RpcException { // ... } }; } } META-INF/dubbo/org.apache.dubbo.rpc.cluster.Cluster\uff1a xxx=com.xxx.XxxCluster","title":"\u6269\u5c55\u793a\u4f8b"},{"location":"dev/impls/compiler/","text":"\u7f16\u8bd1\u5668\u6269\u5c55 \u6269\u5c55\u8bf4\u660e Java \u4ee3\u7801\u7f16\u8bd1\u5668\uff0c\u7528\u4e8e\u52a8\u6001\u751f\u6210\u5b57\u8282\u7801\uff0c\u52a0\u901f\u8c03\u7528\u3002 \u6269\u5c55\u63a5\u53e3 org.apache.dubbo.common.compiler.Compiler \u6269\u5c55\u914d\u7f6e \u81ea\u52a8\u52a0\u8f7d \u5df2\u77e5\u6269\u5c55 org.apache.dubbo.common.compiler.support.JdkCompiler org.apache.dubbo.common.compiler.support.JavassistCompiler \u6269\u5c55\u793a\u4f8b Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxCompiler.java (\u5b9e\u73b0Compiler\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.compiler.Compiler (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxCompiler) XxxCompiler.java\uff1a package com.xxx; import org.apache.dubbo.common.compiler.Compiler; public class XxxCompiler implements Compiler { public Object getExtension(Class ? type, String name) { // ... } } META-INF/dubbo/org.apache.dubbo.common.compiler.Compiler\uff1a xxx=com.xxx.XxxCompiler","title":"\u7f16\u8bd1\u5668\u6269\u5c55"},{"location":"dev/impls/compiler/#_1","text":"","title":"\u7f16\u8bd1\u5668\u6269\u5c55"},{"location":"dev/impls/compiler/#_2","text":"Java \u4ee3\u7801\u7f16\u8bd1\u5668\uff0c\u7528\u4e8e\u52a8\u6001\u751f\u6210\u5b57\u8282\u7801\uff0c\u52a0\u901f\u8c03\u7528\u3002","title":"\u6269\u5c55\u8bf4\u660e"},{"location":"dev/impls/compiler/#_3","text":"org.apache.dubbo.common.compiler.Compiler","title":"\u6269\u5c55\u63a5\u53e3"},{"location":"dev/impls/compiler/#_4","text":"\u81ea\u52a8\u52a0\u8f7d","title":"\u6269\u5c55\u914d\u7f6e"},{"location":"dev/impls/compiler/#_5","text":"org.apache.dubbo.common.compiler.support.JdkCompiler org.apache.dubbo.common.compiler.support.JavassistCompiler","title":"\u5df2\u77e5\u6269\u5c55"},{"location":"dev/impls/compiler/#_6","text":"Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxCompiler.java (\u5b9e\u73b0Compiler\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.compiler.Compiler (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxCompiler) XxxCompiler.java\uff1a package com.xxx; import org.apache.dubbo.common.compiler.Compiler; public class XxxCompiler implements Compiler { public Object getExtension(Class ? type, String name) { // ... } } META-INF/dubbo/org.apache.dubbo.common.compiler.Compiler\uff1a xxx=com.xxx.XxxCompiler","title":"\u6269\u5c55\u793a\u4f8b"},{"location":"dev/impls/config-center/","text":"Dubbo\u914d\u7f6e\u4e2d\u5fc3 \u8bbe\u8ba1\u76ee\u7684 \u914d\u7f6e\u4e2d\u5fc3\u7684\u6838\u5fc3\u529f\u80fd\u662f\u4f5c\u4e3aKey-Value\u5b58\u50a8\uff0cDubbo\u6846\u67b6\u544a\u77e5\u914d\u7f6e\u4e2d\u5fc3\u5176\u5173\u5fc3\u7684key\uff0c\u914d\u7f6e\u4e2d\u5fc3\u8fd4\u56de\u8be5key\u5bf9\u5e94\u7684value\u503c\u3002 \u6309\u7167\u5e94\u7528\u573a\u666f\u5212\u5206\uff0c\u914d\u7f6e\u4e2d\u5fc3\u5728Dubbo\u6846\u67b6\u4e2d\u4e3b\u8981\u627f\u62c5\u4ee5\u4e0b\u804c\u8d23\uff1a \u4f5c\u4e3a\u5916\u90e8\u5316\u914d\u7f6e\u4e2d\u5fc3\uff0c\u5373\u5b58\u50a8dubbo.properties\u914d\u7f6e\u6587\u4ef6\uff0c\u6b64\u65f6\uff0ckey\u503c\u901a\u5e38\u4e3a\u6587\u4ef6\u540d\u5982dubbo.properties\uff0cvalue\u5219\u4e3a\u914d\u7f6e\u6587\u4ef6\u5185\u5bb9\u3002 \u5b58\u50a8\u5355\u4e2a\u914d\u7f6e\u9879\uff0c\u5982\u5404\u79cd\u5f00\u5173\u9879\u3001\u5e38\u91cf\u503c\u7b49\u3002 \u5b58\u50a8\u670d\u52a1\u6cbb\u7406\u89c4\u5219\uff0c\u6b64\u65f6key\u901a\u5e38\u6309\u7167\"\u670d\u52a1\u540d+\u89c4\u5219\u7c7b\u578b\"\u7684\u683c\u5f0f\u6765\u7ec4\u7ec7\uff0c\u800cvalue\u5219\u4e3a\u5177\u4f53\u7684\u6cbb\u7406\u89c4\u5219\u3002 \u4e3a\u4e86\u8fdb\u4e00\u6b65\u5b9e\u73b0\u5bf9key-value\u7684\u5206\u7ec4\u7ba1\u7406\uff0cDubbo\u7684\u914d\u7f6e\u4e2d\u5fc3\u8fd8\u52a0\u5165\u4e86namespace\u3001group\u7684\u6982\u5ff5\uff0c\u8fd9\u4e9b\u6982\u5ff5\u5728\u5f88\u591a\u4e13\u4e1a\u7684\u7b2c\u4e09\u65b9\u914d\u7f6e\u4e2d\u5fc3\u4e2d\u90fd\u6709\u4f53\u73b0\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\uff0cnamespace\u7528\u6765\u9694\u79bb\u4e0d\u540c\u7684\u79df\u6237\uff0cgroup\u7528\u6765\u5bf9\u540c\u4e00\u79df\u6237\u7684key\u96c6\u5408\u505a\u5206\u7ec4\u3002 \u5f53\u524d\uff0cDubbo\u914d\u7f6e\u4e2d\u5fc3\u5b9e\u73b0\u4e86\u5bf9Zookeeper\u3001Nacos\u3001Etcd\u3001Consul\u3001Apollo\u7684\u5bf9\u63a5\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5177\u4f53\u770b\u4e00\u4e0bDubbo\u62bd\u8c61\u7684\u914d\u7f6e\u4e2d\u5fc3\u662f\u600e\u4e48\u6620\u5c04\u5230\u5177\u4f53\u7684\u7b2c\u4e09\u65b9\u5b9e\u73b0\u4e2d\u7684\u3002 \u6269\u5c55\u63a5\u53e3 org.apache.dubbo.configcenter.DynamicConfigurationFactory org.apache.dubbo.configcenter.DynamicConfiguration \u5df2\u77e5\u6269\u5c55 org.apache.dubbo.configcenter.support.zookeeper.ZookeeperDynamicConfigurationFactory org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfigurationFactory org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfigurationFactory org.apache.dubbo.configcenter.consul.ConsulDynamicConfigurationFactory org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfigurationFactory \u5b9e\u73b0\u539f\u7406 Zookeeper zookeeper\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6811\u72b6\u7684\u5b58\u50a8\u6a21\u578b\uff0c\u5176\u5b9e\u73b0\u539f\u7406\u5982\u4e0b\uff1a namespace, group, key\u7b49\u5206\u522b\u5bf9\u5e94\u4e0d\u540c\u5c42\u7ea7\u7684ZNode\u8282\u70b9\uff0c\u800cvalue\u5219\u4f5c\u4e3a\u6839ZNode\u8282\u70b9\u7684\u503c\u5b58\u50a8\u3002 \u5916\u90e8\u5316\u914d\u7f6e\u4e2d\u5fc3 dubbo.properties \u4e0a\u56fe\u5c55\u793a\u4e86\u4e24\u4e2a\u4e0d\u540c\u4f5c\u7528\u57df\u7684dubbo.properties\u6587\u4ef6\u5728zookeeper\u4e2d\u7684\u5b58\u50a8\u7ed3\u6784\uff1a - \u547d\u540d\u7a7a\u95f4namespace\u90fd\u4e3a\uff1adubbo - \u5206\u7ec4group\uff1a\u5168\u5c40\u7ea7\u522b\u4e3adubbo\uff0c\u6240\u6709\u5e94\u7528\u5171\u4eab\uff1b\u5e94\u7528\u7ea7\u522b\u4e3a\u5e94\u7528\u540ddemo-provider\uff0c\u53ea\u5bf9\u8be5\u5e94\u7528\u751f\u6548 - key\uff1adubbo.properties \u5355\u4e2a\u914d\u7f6e\u9879 \u8bbe\u7f6e\u4f18\u96c5\u505c\u673a\u4e8b\u4ef6\u4e3a15000\uff1a - \u547d\u540d\u7a7a\u95f4namespace\uff1adubbo - \u5206\u7ec4group\uff1adubbo - key\uff1adubbo.service.shutdown.wait - value\uff1a15000 \u670d\u52a1\u6cbb\u7406\u89c4\u5219 \u4e0a\u56fe\u5c55\u793a\u4e86\u4e00\u6761\u5e94\u7528\u7ea7\u522b\u7684\u6761\u4ef6\u8def\u7531\u89c4\u5219\uff1a \u547d\u540d\u7a7a\u95f4namespace\uff1adubbo \u5206\u7ec4group\uff1adubbo key\uff1agovernance-conditionrouter-consumer.condition-router\uff0c\u5176\u4e2dgovernance-conditionrouter-consumer\u4e3a\u5e94\u7528\u540d\uff0ccondition-router\u4ee3\u8868\u6761\u4ef6\u8def\u7531 \u6ce8\u610f: Dubbo\u540c\u65f6\u652f\u6301\u5e94\u7528\u3001\u670d\u52a1\u4e24\u79cd\u7c92\u5ea6\u7684\u670d\u52a1\u6cbb\u7406\u89c4\u5219\uff0c\u5bf9\u4e8e\u8fd9\u4e24\u79cd\u7c92\u5ea6\uff0c\u5176key\u53d6\u503c\u89c4\u5219\u5982\u4e0b\uff1a * \u5e94\u7528\u7c92\u5ea6 {\u5e94\u7528\u540d + \u89c4\u5219\u540e\u7f00}\u3002\u5982: demo-application.configurators \u3001 demo-application.tag-router \u7b49 * \u670d\u52a1\u7c92\u5ea6 {\u670d\u52a1\u63a5\u53e3\u540d:[\u670d\u52a1\u7248\u672c]:[\u670d\u52a1\u5206\u7ec4] + \u89c4\u5219\u540e\u7f00}\uff0c\u5176\u4e2d\u670d\u52a1\u7248\u672c\u3001\u670d\u52a1\u5206\u7ec4\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u5b83\u4eec\u6709\u914d\u7f6e\u5219\u5728key\u4e2d\u4f53\u73b0\uff0c\u6ca1\u88ab\u914d\u7f6e\u5219\u7528\":\"\u5360\u4f4d\u3002\u5982 org.apache.dubbo.demo.DemoService::.configurators \u3001 org.apache.dubbo.demo.DemoService:1.0.0:group1.configurators Etcd Consul Etcd\u548cConsul\u672c\u8d28\u4e0a\u4e5f\u662f\u4e00\u79cd\u7c7b\u4f3czookeeper\u7684\u6811\u72b6\u5b58\u50a8\u7ed3\u6784\uff0c\u5b9e\u73b0\u8bf7\u53c2\u8003zookeeper\u3002 Nacos Nacos\u4f5c\u4e3a\u4e00\u4e2a\u4e13\u4e1a\u7684\u7b2c\u4e09\u65b9\u914d\u7f6e\u4e2d\u5fc3\uff0c\u62e5\u6709\u4e13\u95e8\u4e3a\u914d\u7f6e\u4e2d\u5fc3\u8bbe\u8ba1\u7684\u5b58\u50a8\u7ed3\u6784\uff0c\u5305\u62ec\u5185\u7f6e\u7684namespace\u3001group\u3001dataid\u7b49\u6982\u5ff5\u3002\u5e76\u4e14\u8fd9\u51e0\u4e2a\u6982\u5ff5\u57fa\u672c\u4e0a\u4e0eDubbo\u6846\u67b6\u62bd\u8c61\u7684\u914d\u7f6e\u4e2d\u5fc3\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002 \u4e0eZookeeper\u5b9e\u73b0\u7684\u5bf9\u5e94\u5173\u7cfb\u5982\u4e0b\uff1a \u53c2\u8003\u4e0a\u6587\u5173\u4e8ezookeeper\u5b9e\u73b0\u4e2d\u63cf\u8ff0\u7684\u793a\u4f8b\uff0c\u8fd9\u91cc\u7684dataid\u53ef\u80fd\u4e3a\uff1a * \u5916\u90e8\u5316\u914d\u7f6e\u4e2d\u5fc3\uff1adubbo.properties * \u5355\u4e2a\u914d\u7f6e\u9879\uff1adubbo.service.shutdown.wait * \u670d\u52a1\u6cbb\u7406\u89c4\u5219\uff1aorg.apache.dubbo.demo.DemoService:1.0.0:group1.configurators Apollo Apollo\u4e0eNacos\u7c7b\u4f3c\uff0c\u8bf7\u53c2\u8003\u52a8\u6001\u914d\u7f6e\u4e2d\u5fc3\u4f7f\u7528\u6587\u6863\u4e2d\u5173\u4e8eApollo\u90e8\u5206\u7684\u63cf\u8ff0\u3002","title":"\u914d\u7f6e\u4e2d\u5fc3"},{"location":"dev/impls/config-center/#dubbo","text":"","title":"Dubbo\u914d\u7f6e\u4e2d\u5fc3"},{"location":"dev/impls/config-center/#_1","text":"\u914d\u7f6e\u4e2d\u5fc3\u7684\u6838\u5fc3\u529f\u80fd\u662f\u4f5c\u4e3aKey-Value\u5b58\u50a8\uff0cDubbo\u6846\u67b6\u544a\u77e5\u914d\u7f6e\u4e2d\u5fc3\u5176\u5173\u5fc3\u7684key\uff0c\u914d\u7f6e\u4e2d\u5fc3\u8fd4\u56de\u8be5key\u5bf9\u5e94\u7684value\u503c\u3002 \u6309\u7167\u5e94\u7528\u573a\u666f\u5212\u5206\uff0c\u914d\u7f6e\u4e2d\u5fc3\u5728Dubbo\u6846\u67b6\u4e2d\u4e3b\u8981\u627f\u62c5\u4ee5\u4e0b\u804c\u8d23\uff1a \u4f5c\u4e3a\u5916\u90e8\u5316\u914d\u7f6e\u4e2d\u5fc3\uff0c\u5373\u5b58\u50a8dubbo.properties\u914d\u7f6e\u6587\u4ef6\uff0c\u6b64\u65f6\uff0ckey\u503c\u901a\u5e38\u4e3a\u6587\u4ef6\u540d\u5982dubbo.properties\uff0cvalue\u5219\u4e3a\u914d\u7f6e\u6587\u4ef6\u5185\u5bb9\u3002 \u5b58\u50a8\u5355\u4e2a\u914d\u7f6e\u9879\uff0c\u5982\u5404\u79cd\u5f00\u5173\u9879\u3001\u5e38\u91cf\u503c\u7b49\u3002 \u5b58\u50a8\u670d\u52a1\u6cbb\u7406\u89c4\u5219\uff0c\u6b64\u65f6key\u901a\u5e38\u6309\u7167\"\u670d\u52a1\u540d+\u89c4\u5219\u7c7b\u578b\"\u7684\u683c\u5f0f\u6765\u7ec4\u7ec7\uff0c\u800cvalue\u5219\u4e3a\u5177\u4f53\u7684\u6cbb\u7406\u89c4\u5219\u3002 \u4e3a\u4e86\u8fdb\u4e00\u6b65\u5b9e\u73b0\u5bf9key-value\u7684\u5206\u7ec4\u7ba1\u7406\uff0cDubbo\u7684\u914d\u7f6e\u4e2d\u5fc3\u8fd8\u52a0\u5165\u4e86namespace\u3001group\u7684\u6982\u5ff5\uff0c\u8fd9\u4e9b\u6982\u5ff5\u5728\u5f88\u591a\u4e13\u4e1a\u7684\u7b2c\u4e09\u65b9\u914d\u7f6e\u4e2d\u5fc3\u4e2d\u90fd\u6709\u4f53\u73b0\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\uff0cnamespace\u7528\u6765\u9694\u79bb\u4e0d\u540c\u7684\u79df\u6237\uff0cgroup\u7528\u6765\u5bf9\u540c\u4e00\u79df\u6237\u7684key\u96c6\u5408\u505a\u5206\u7ec4\u3002 \u5f53\u524d\uff0cDubbo\u914d\u7f6e\u4e2d\u5fc3\u5b9e\u73b0\u4e86\u5bf9Zookeeper\u3001Nacos\u3001Etcd\u3001Consul\u3001Apollo\u7684\u5bf9\u63a5\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5177\u4f53\u770b\u4e00\u4e0bDubbo\u62bd\u8c61\u7684\u914d\u7f6e\u4e2d\u5fc3\u662f\u600e\u4e48\u6620\u5c04\u5230\u5177\u4f53\u7684\u7b2c\u4e09\u65b9\u5b9e\u73b0\u4e2d\u7684\u3002","title":"\u8bbe\u8ba1\u76ee\u7684"},{"location":"dev/impls/config-center/#_2","text":"org.apache.dubbo.configcenter.DynamicConfigurationFactory org.apache.dubbo.configcenter.DynamicConfiguration","title":"\u6269\u5c55\u63a5\u53e3"},{"location":"dev/impls/config-center/#_3","text":"org.apache.dubbo.configcenter.support.zookeeper.ZookeeperDynamicConfigurationFactory org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfigurationFactory org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfigurationFactory org.apache.dubbo.configcenter.consul.ConsulDynamicConfigurationFactory org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfigurationFactory","title":"\u5df2\u77e5\u6269\u5c55"},{"location":"dev/impls/config-center/#_4","text":"","title":"\u5b9e\u73b0\u539f\u7406"},{"location":"dev/impls/config-center/#zookeeper","text":"zookeeper\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6811\u72b6\u7684\u5b58\u50a8\u6a21\u578b\uff0c\u5176\u5b9e\u73b0\u539f\u7406\u5982\u4e0b\uff1a namespace, group, key\u7b49\u5206\u522b\u5bf9\u5e94\u4e0d\u540c\u5c42\u7ea7\u7684ZNode\u8282\u70b9\uff0c\u800cvalue\u5219\u4f5c\u4e3a\u6839ZNode\u8282\u70b9\u7684\u503c\u5b58\u50a8\u3002 \u5916\u90e8\u5316\u914d\u7f6e\u4e2d\u5fc3 dubbo.properties \u4e0a\u56fe\u5c55\u793a\u4e86\u4e24\u4e2a\u4e0d\u540c\u4f5c\u7528\u57df\u7684dubbo.properties\u6587\u4ef6\u5728zookeeper\u4e2d\u7684\u5b58\u50a8\u7ed3\u6784\uff1a - \u547d\u540d\u7a7a\u95f4namespace\u90fd\u4e3a\uff1adubbo - \u5206\u7ec4group\uff1a\u5168\u5c40\u7ea7\u522b\u4e3adubbo\uff0c\u6240\u6709\u5e94\u7528\u5171\u4eab\uff1b\u5e94\u7528\u7ea7\u522b\u4e3a\u5e94\u7528\u540ddemo-provider\uff0c\u53ea\u5bf9\u8be5\u5e94\u7528\u751f\u6548 - key\uff1adubbo.properties \u5355\u4e2a\u914d\u7f6e\u9879 \u8bbe\u7f6e\u4f18\u96c5\u505c\u673a\u4e8b\u4ef6\u4e3a15000\uff1a - \u547d\u540d\u7a7a\u95f4namespace\uff1adubbo - \u5206\u7ec4group\uff1adubbo - key\uff1adubbo.service.shutdown.wait - value\uff1a15000 \u670d\u52a1\u6cbb\u7406\u89c4\u5219 \u4e0a\u56fe\u5c55\u793a\u4e86\u4e00\u6761\u5e94\u7528\u7ea7\u522b\u7684\u6761\u4ef6\u8def\u7531\u89c4\u5219\uff1a \u547d\u540d\u7a7a\u95f4namespace\uff1adubbo \u5206\u7ec4group\uff1adubbo key\uff1agovernance-conditionrouter-consumer.condition-router\uff0c\u5176\u4e2dgovernance-conditionrouter-consumer\u4e3a\u5e94\u7528\u540d\uff0ccondition-router\u4ee3\u8868\u6761\u4ef6\u8def\u7531 \u6ce8\u610f: Dubbo\u540c\u65f6\u652f\u6301\u5e94\u7528\u3001\u670d\u52a1\u4e24\u79cd\u7c92\u5ea6\u7684\u670d\u52a1\u6cbb\u7406\u89c4\u5219\uff0c\u5bf9\u4e8e\u8fd9\u4e24\u79cd\u7c92\u5ea6\uff0c\u5176key\u53d6\u503c\u89c4\u5219\u5982\u4e0b\uff1a * \u5e94\u7528\u7c92\u5ea6 {\u5e94\u7528\u540d + \u89c4\u5219\u540e\u7f00}\u3002\u5982: demo-application.configurators \u3001 demo-application.tag-router \u7b49 * \u670d\u52a1\u7c92\u5ea6 {\u670d\u52a1\u63a5\u53e3\u540d:[\u670d\u52a1\u7248\u672c]:[\u670d\u52a1\u5206\u7ec4] + \u89c4\u5219\u540e\u7f00}\uff0c\u5176\u4e2d\u670d\u52a1\u7248\u672c\u3001\u670d\u52a1\u5206\u7ec4\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u5b83\u4eec\u6709\u914d\u7f6e\u5219\u5728key\u4e2d\u4f53\u73b0\uff0c\u6ca1\u88ab\u914d\u7f6e\u5219\u7528\":\"\u5360\u4f4d\u3002\u5982 org.apache.dubbo.demo.DemoService::.configurators \u3001 org.apache.dubbo.demo.DemoService:1.0.0:group1.configurators","title":"Zookeeper"},{"location":"dev/impls/config-center/#etcd-consul","text":"Etcd\u548cConsul\u672c\u8d28\u4e0a\u4e5f\u662f\u4e00\u79cd\u7c7b\u4f3czookeeper\u7684\u6811\u72b6\u5b58\u50a8\u7ed3\u6784\uff0c\u5b9e\u73b0\u8bf7\u53c2\u8003zookeeper\u3002","title":"Etcd &amp; Consul"},{"location":"dev/impls/config-center/#nacos","text":"Nacos\u4f5c\u4e3a\u4e00\u4e2a\u4e13\u4e1a\u7684\u7b2c\u4e09\u65b9\u914d\u7f6e\u4e2d\u5fc3\uff0c\u62e5\u6709\u4e13\u95e8\u4e3a\u914d\u7f6e\u4e2d\u5fc3\u8bbe\u8ba1\u7684\u5b58\u50a8\u7ed3\u6784\uff0c\u5305\u62ec\u5185\u7f6e\u7684namespace\u3001group\u3001dataid\u7b49\u6982\u5ff5\u3002\u5e76\u4e14\u8fd9\u51e0\u4e2a\u6982\u5ff5\u57fa\u672c\u4e0a\u4e0eDubbo\u6846\u67b6\u62bd\u8c61\u7684\u914d\u7f6e\u4e2d\u5fc3\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002 \u4e0eZookeeper\u5b9e\u73b0\u7684\u5bf9\u5e94\u5173\u7cfb\u5982\u4e0b\uff1a \u53c2\u8003\u4e0a\u6587\u5173\u4e8ezookeeper\u5b9e\u73b0\u4e2d\u63cf\u8ff0\u7684\u793a\u4f8b\uff0c\u8fd9\u91cc\u7684dataid\u53ef\u80fd\u4e3a\uff1a * \u5916\u90e8\u5316\u914d\u7f6e\u4e2d\u5fc3\uff1adubbo.properties * \u5355\u4e2a\u914d\u7f6e\u9879\uff1adubbo.service.shutdown.wait * \u670d\u52a1\u6cbb\u7406\u89c4\u5219\uff1aorg.apache.dubbo.demo.DemoService:1.0.0:group1.configurators","title":"Nacos"},{"location":"dev/impls/config-center/#apollo","text":"Apollo\u4e0eNacos\u7c7b\u4f3c\uff0c\u8bf7\u53c2\u8003\u52a8\u6001\u914d\u7f6e\u4e2d\u5fc3\u4f7f\u7528\u6587\u6863\u4e2d\u5173\u4e8eApollo\u90e8\u5206\u7684\u63cf\u8ff0\u3002","title":"Apollo"},{"location":"dev/impls/container/","text":"\u5bb9\u5668\u6269\u5c55 \u6269\u5c55\u8bf4\u660e \u670d\u52a1\u5bb9\u5668\u6269\u5c55\uff0c\u7528\u4e8e\u81ea\u5b9a\u4e49\u52a0\u8f7d\u5185\u5bb9\u3002 \u6269\u5c55\u63a5\u53e3 org.apache.dubbo.container.Container \u6269\u5c55\u914d\u7f6e java org.apache.dubbo.container.Main spring jetty log4j \u5df2\u77e5\u6269\u5c55 org.apache.dubbo.container.spring.SpringContainer org.apache.dubbo.container.spring.JettyContainer org.apache.dubbo.container.spring.Log4jContainer \u6269\u5c55\u793a\u4f8b Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxContainer.java (\u5b9e\u73b0Container\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.container.Container (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxContainer) XxxContainer.java\uff1a package com.xxx; org.apache.dubbo.container.Container; public class XxxContainer implements Container { public Status start() { // ... } public Status stop() { // ... } } META-INF/dubbo/org.apache.dubbo.container.Container\uff1a xxx=com.xxx.XxxContainer","title":"\u5bb9\u5668\u6269\u5c55"},{"location":"dev/impls/container/#_1","text":"","title":"\u5bb9\u5668\u6269\u5c55"},{"location":"dev/impls/container/#_2","text":"\u670d\u52a1\u5bb9\u5668\u6269\u5c55\uff0c\u7528\u4e8e\u81ea\u5b9a\u4e49\u52a0\u8f7d\u5185\u5bb9\u3002","title":"\u6269\u5c55\u8bf4\u660e"},{"location":"dev/impls/container/#_3","text":"org.apache.dubbo.container.Container","title":"\u6269\u5c55\u63a5\u53e3"},{"location":"dev/impls/container/#_4","text":"java org.apache.dubbo.container.Main spring jetty log4j","title":"\u6269\u5c55\u914d\u7f6e"},{"location":"dev/impls/container/#_5","text":"org.apache.dubbo.container.spring.SpringContainer org.apache.dubbo.container.spring.JettyContainer org.apache.dubbo.container.spring.Log4jContainer","title":"\u5df2\u77e5\u6269\u5c55"},{"location":"dev/impls/container/#_6","text":"Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxContainer.java (\u5b9e\u73b0Container\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.container.Container (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxContainer) XxxContainer.java\uff1a package com.xxx; org.apache.dubbo.container.Container; public class XxxContainer implements Container { public Status start() { // ... } public Status stop() { // ... } } META-INF/dubbo/org.apache.dubbo.container.Container\uff1a xxx=com.xxx.XxxContainer","title":"\u6269\u5c55\u793a\u4f8b"},{"location":"dev/impls/dispatcher/","text":"\u6d88\u606f\u6d3e\u53d1\u6269\u5c55 \u6269\u5c55\u8bf4\u660e \u901a\u9053\u4fe1\u606f\u6d3e\u53d1\u5668\uff0c\u7528\u4e8e\u6307\u5b9a\u7ebf\u7a0b\u6c60\u6a21\u578b\u3002 \u6269\u5c55\u63a5\u53e3 org.apache.dubbo.remoting.Dispatcher \u6269\u5c55\u914d\u7f6e dubbo:protocol dispatcher= xxx / !-- \u7f3a\u7701\u503c\u8bbe\u7f6e\uff0c\u5f53 dubbo:protocol \u6ca1\u6709\u914d\u7f6edispatcher\u5c5e\u6027\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider dispatcher= xxx / \u5df2\u77e5\u6269\u5c55 org.apache.dubbo.remoting.transport.dispatcher.all.AllDispatcher org.apache.dubbo.remoting.transport.dispatcher.direct.DirectDispatcher org.apache.dubbo.remoting.transport.dispatcher.message.MessageOnlyDispatcher org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedDispatcher \u6269\u5c55\u793a\u4f8b Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxDispatcher.java (\u5b9e\u73b0Dispatcher\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.remoting.Dispatcher (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxDispatcher) XxxDispatcher.java\uff1a package com.xxx; import org.apache.dubbo.remoting.Dispatcher; public class XxxDispatcher implements Dispatcher { public Group lookup(URL url) { // ... } } META-INF/dubbo/org.apache.dubbo.remoting.Dispatcher\uff1a xxx=com.xxx.XxxDispatcher","title":"\u6d88\u606f\u6d3e\u53d1\u6269\u5c55"},{"location":"dev/impls/dispatcher/#_1","text":"","title":"\u6d88\u606f\u6d3e\u53d1\u6269\u5c55"},{"location":"dev/impls/dispatcher/#_2","text":"\u901a\u9053\u4fe1\u606f\u6d3e\u53d1\u5668\uff0c\u7528\u4e8e\u6307\u5b9a\u7ebf\u7a0b\u6c60\u6a21\u578b\u3002","title":"\u6269\u5c55\u8bf4\u660e"},{"location":"dev/impls/dispatcher/#_3","text":"org.apache.dubbo.remoting.Dispatcher","title":"\u6269\u5c55\u63a5\u53e3"},{"location":"dev/impls/dispatcher/#_4","text":"dubbo:protocol dispatcher= xxx / !-- \u7f3a\u7701\u503c\u8bbe\u7f6e\uff0c\u5f53 dubbo:protocol \u6ca1\u6709\u914d\u7f6edispatcher\u5c5e\u6027\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider dispatcher= xxx /","title":"\u6269\u5c55\u914d\u7f6e"},{"location":"dev/impls/dispatcher/#_5","text":"org.apache.dubbo.remoting.transport.dispatcher.all.AllDispatcher org.apache.dubbo.remoting.transport.dispatcher.direct.DirectDispatcher org.apache.dubbo.remoting.transport.dispatcher.message.MessageOnlyDispatcher org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedDispatcher","title":"\u5df2\u77e5\u6269\u5c55"},{"location":"dev/impls/dispatcher/#_6","text":"Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxDispatcher.java (\u5b9e\u73b0Dispatcher\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.remoting.Dispatcher (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxDispatcher) XxxDispatcher.java\uff1a package com.xxx; import org.apache.dubbo.remoting.Dispatcher; public class XxxDispatcher implements Dispatcher { public Group lookup(URL url) { // ... } } META-INF/dubbo/org.apache.dubbo.remoting.Dispatcher\uff1a xxx=com.xxx.XxxDispatcher","title":"\u6269\u5c55\u793a\u4f8b"},{"location":"dev/impls/exchanger/","text":"\u4fe1\u606f\u4ea4\u6362\u6269\u5c55 \u6269\u5c55\u8bf4\u660e \u57fa\u4e8e\u4f20\u8f93\u5c42\u4e4b\u4e0a\uff0c\u5b9e\u73b0 Request-Response \u4fe1\u606f\u4ea4\u6362\u8bed\u4e49\u3002 \u6269\u5c55\u63a5\u53e3 org.apache.dubbo.remoting.exchange.Exchanger org.apache.dubbo.remoting.exchange.ExchangeServer org.apache.dubbo.remoting.exchange.ExchangeClient \u6269\u5c55\u914d\u7f6e dubbo:protocol exchanger= xxx / !-- \u7f3a\u7701\u503c\u8bbe\u7f6e\uff0c\u5f53 dubbo:protocol \u6ca1\u6709\u914d\u7f6eexchanger\u5c5e\u6027\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider exchanger= xxx / \u5df2\u77e5\u6269\u5c55 org.apache.dubbo.remoting.exchange.exchanger.HeaderExchanger \u6269\u5c55\u793a\u4f8b Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxExchanger.java (\u5b9e\u73b0Exchanger\u63a5\u53e3) |-XxxExchangeServer.java (\u5b9e\u73b0ExchangeServer\u63a5\u53e3) |-XxxExchangeClient.java (\u5b9e\u73b0ExchangeClient\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.remoting.exchange.Exchanger (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxExchanger) XxxExchanger.java\uff1a package com.xxx; import org.apache.dubbo.remoting.exchange.Exchanger; public class XxxExchanger implements Exchanger { public ExchangeServer bind(URL url, ExchangeHandler handler) throws RemotingException { return new XxxExchangeServer(url, handler); } public ExchangeClient connect(URL url, ExchangeHandler handler) throws RemotingException { return new XxxExchangeClient(url, handler); } } XxxExchangeServer.java\uff1a package com.xxx; import org.apache.dubbo.remoting.exchange.ExchangeServer; public class XxxExchangeServer impelements ExchangeServer { // ... } XxxExchangeClient.java\uff1a package com.xxx; import org.apache.dubbo.remoting.exchange.ExchangeClient; public class XxxExchangeClient impelments ExchangeClient { // ... } META-INF/dubbo/org.apache.dubbo.remoting.exchange.Exchanger\uff1a xxx=com.xxx.XxxExchanger","title":"\u4fe1\u606f\u4ea4\u6362\u6269\u5c55"},{"location":"dev/impls/exchanger/#_1","text":"","title":"\u4fe1\u606f\u4ea4\u6362\u6269\u5c55"},{"location":"dev/impls/exchanger/#_2","text":"\u57fa\u4e8e\u4f20\u8f93\u5c42\u4e4b\u4e0a\uff0c\u5b9e\u73b0 Request-Response \u4fe1\u606f\u4ea4\u6362\u8bed\u4e49\u3002","title":"\u6269\u5c55\u8bf4\u660e"},{"location":"dev/impls/exchanger/#_3","text":"org.apache.dubbo.remoting.exchange.Exchanger org.apache.dubbo.remoting.exchange.ExchangeServer org.apache.dubbo.remoting.exchange.ExchangeClient","title":"\u6269\u5c55\u63a5\u53e3"},{"location":"dev/impls/exchanger/#_4","text":"dubbo:protocol exchanger= xxx / !-- \u7f3a\u7701\u503c\u8bbe\u7f6e\uff0c\u5f53 dubbo:protocol \u6ca1\u6709\u914d\u7f6eexchanger\u5c5e\u6027\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider exchanger= xxx /","title":"\u6269\u5c55\u914d\u7f6e"},{"location":"dev/impls/exchanger/#_5","text":"org.apache.dubbo.remoting.exchange.exchanger.HeaderExchanger","title":"\u5df2\u77e5\u6269\u5c55"},{"location":"dev/impls/exchanger/#_6","text":"Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxExchanger.java (\u5b9e\u73b0Exchanger\u63a5\u53e3) |-XxxExchangeServer.java (\u5b9e\u73b0ExchangeServer\u63a5\u53e3) |-XxxExchangeClient.java (\u5b9e\u73b0ExchangeClient\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.remoting.exchange.Exchanger (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxExchanger) XxxExchanger.java\uff1a package com.xxx; import org.apache.dubbo.remoting.exchange.Exchanger; public class XxxExchanger implements Exchanger { public ExchangeServer bind(URL url, ExchangeHandler handler) throws RemotingException { return new XxxExchangeServer(url, handler); } public ExchangeClient connect(URL url, ExchangeHandler handler) throws RemotingException { return new XxxExchangeClient(url, handler); } } XxxExchangeServer.java\uff1a package com.xxx; import org.apache.dubbo.remoting.exchange.ExchangeServer; public class XxxExchangeServer impelements ExchangeServer { // ... } XxxExchangeClient.java\uff1a package com.xxx; import org.apache.dubbo.remoting.exchange.ExchangeClient; public class XxxExchangeClient impelments ExchangeClient { // ... } META-INF/dubbo/org.apache.dubbo.remoting.exchange.Exchanger\uff1a xxx=com.xxx.XxxExchanger","title":"\u6269\u5c55\u793a\u4f8b"},{"location":"dev/impls/exporter-listener/","text":"\u66b4\u9732\u76d1\u542c\u6269\u5c55 \u6269\u5c55\u8bf4\u660e \u5f53\u6709\u670d\u52a1\u66b4\u9732\u65f6\uff0c\u89e6\u53d1\u8be5\u4e8b\u4ef6\u3002 \u6269\u5c55\u63a5\u53e3 org.apache.dubbo.rpc.ExporterListener \u6269\u5c55\u914d\u7f6e !-- \u66b4\u9732\u670d\u52a1\u76d1\u542c -- dubbo:service listener= xxx,yyy / !-- \u66b4\u9732\u670d\u52a1\u7f3a\u7701\u76d1\u542c\u5668 -- dubbo:provider listener= xxx,yyy / \u5df2\u77e5\u6269\u5c55 org.apache.dubbo.registry.directory.RegistryExporterListener \u6269\u5c55\u793a\u4f8b Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxExporterListener.java (\u5b9e\u73b0ExporterListener\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.ExporterListener (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxExporterListener) XxxExporterListener.java\uff1a package com.xxx; import org.apache.dubbo.rpc.ExporterListener; import org.apache.dubbo.rpc.Exporter; import org.apache.dubbo.rpc.RpcException; public class XxxExporterListener implements ExporterListener { public void exported(Exporter ? exporter) throws RpcException { // ... } public void unexported(Exporter ? exporter) throws RpcException { // ... } } META-INF/dubbo/org.apache.dubbo.rpc.ExporterListener\uff1a xxx=com.xxx.XxxExporterListener","title":"\u66b4\u9732\u76d1\u542c\u6269\u5c55"},{"location":"dev/impls/exporter-listener/#_1","text":"","title":"\u66b4\u9732\u76d1\u542c\u6269\u5c55"},{"location":"dev/impls/exporter-listener/#_2","text":"\u5f53\u6709\u670d\u52a1\u66b4\u9732\u65f6\uff0c\u89e6\u53d1\u8be5\u4e8b\u4ef6\u3002","title":"\u6269\u5c55\u8bf4\u660e"},{"location":"dev/impls/exporter-listener/#_3","text":"org.apache.dubbo.rpc.ExporterListener","title":"\u6269\u5c55\u63a5\u53e3"},{"location":"dev/impls/exporter-listener/#_4","text":"!-- \u66b4\u9732\u670d\u52a1\u76d1\u542c -- dubbo:service listener= xxx,yyy / !-- \u66b4\u9732\u670d\u52a1\u7f3a\u7701\u76d1\u542c\u5668 -- dubbo:provider listener= xxx,yyy /","title":"\u6269\u5c55\u914d\u7f6e"},{"location":"dev/impls/exporter-listener/#_5","text":"org.apache.dubbo.registry.directory.RegistryExporterListener","title":"\u5df2\u77e5\u6269\u5c55"},{"location":"dev/impls/exporter-listener/#_6","text":"Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxExporterListener.java (\u5b9e\u73b0ExporterListener\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.ExporterListener (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxExporterListener) XxxExporterListener.java\uff1a package com.xxx; import org.apache.dubbo.rpc.ExporterListener; import org.apache.dubbo.rpc.Exporter; import org.apache.dubbo.rpc.RpcException; public class XxxExporterListener implements ExporterListener { public void exported(Exporter ? exporter) throws RpcException { // ... } public void unexported(Exporter ? exporter) throws RpcException { // ... } } META-INF/dubbo/org.apache.dubbo.rpc.ExporterListener\uff1a xxx=com.xxx.XxxExporterListener","title":"\u6269\u5c55\u793a\u4f8b"},{"location":"dev/impls/extension-factory/","text":"\u6269\u5c55\u70b9\u52a0\u8f7d\u6269\u5c55 \u6269\u5c55\u8bf4\u660e \u6269\u5c55\u70b9\u672c\u8eab\u7684\u52a0\u8f7d\u5bb9\u5668\uff0c\u53ef\u4ece\u4e0d\u540c\u5bb9\u5668\u52a0\u8f7d\u6269\u5c55\u70b9\u3002 \u6269\u5c55\u63a5\u53e3 org.apache.dubbo.common.extension.ExtensionFactory \u6269\u5c55\u914d\u7f6e dubbo:application compiler= jdk / \u5df2\u77e5\u6269\u5c55 org.apache.dubbo.common.extension.factory.SpiExtensionFactory org.apache.dubbo.config.spring.extension.SpringExtensionFactory \u6269\u5c55\u793a\u4f8b Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxExtensionFactory.java (\u5b9e\u73b0ExtensionFactory\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.extension.ExtensionFactory (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxExtensionFactory) XxxExtensionFactory.java\uff1a package com.xxx; import org.apache.dubbo.common.extension.ExtensionFactory; public class XxxExtensionFactory implements ExtensionFactory { public Object getExtension(Class ? type, String name) { // ... } } META-INF/dubbo/org.apache.dubbo.common.extension.ExtensionFactory\uff1a xxx=com.xxx.XxxExtensionFactory","title":"\u6269\u5c55\u70b9\u52a0\u8f7d\u6269\u5c55"},{"location":"dev/impls/extension-factory/#_1","text":"","title":"\u6269\u5c55\u70b9\u52a0\u8f7d\u6269\u5c55"},{"location":"dev/impls/extension-factory/#_2","text":"\u6269\u5c55\u70b9\u672c\u8eab\u7684\u52a0\u8f7d\u5bb9\u5668\uff0c\u53ef\u4ece\u4e0d\u540c\u5bb9\u5668\u52a0\u8f7d\u6269\u5c55\u70b9\u3002","title":"\u6269\u5c55\u8bf4\u660e"},{"location":"dev/impls/extension-factory/#_3","text":"org.apache.dubbo.common.extension.ExtensionFactory","title":"\u6269\u5c55\u63a5\u53e3"},{"location":"dev/impls/extension-factory/#_4","text":"dubbo:application compiler= jdk /","title":"\u6269\u5c55\u914d\u7f6e"},{"location":"dev/impls/extension-factory/#_5","text":"org.apache.dubbo.common.extension.factory.SpiExtensionFactory org.apache.dubbo.config.spring.extension.SpringExtensionFactory","title":"\u5df2\u77e5\u6269\u5c55"},{"location":"dev/impls/extension-factory/#_6","text":"Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxExtensionFactory.java (\u5b9e\u73b0ExtensionFactory\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.extension.ExtensionFactory (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxExtensionFactory) XxxExtensionFactory.java\uff1a package com.xxx; import org.apache.dubbo.common.extension.ExtensionFactory; public class XxxExtensionFactory implements ExtensionFactory { public Object getExtension(Class ? type, String name) { // ... } } META-INF/dubbo/org.apache.dubbo.common.extension.ExtensionFactory\uff1a xxx=com.xxx.XxxExtensionFactory","title":"\u6269\u5c55\u793a\u4f8b"},{"location":"dev/impls/filter/","text":"\u8c03\u7528\u62e6\u622a\u6269\u5c55 \u6269\u5c55\u8bf4\u660e \u670d\u52a1\u63d0\u4f9b\u65b9\u548c\u670d\u52a1\u6d88\u8d39\u65b9\u8c03\u7528\u8fc7\u7a0b\u62e6\u622a\uff0cDubbo \u672c\u8eab\u7684\u5927\u591a\u529f\u80fd\u5747\u57fa\u4e8e\u6b64\u6269\u5c55\u70b9\u5b9e\u73b0\uff0c\u6bcf\u6b21\u8fdc\u7a0b\u65b9\u6cd5\u6267\u884c\uff0c\u8be5\u62e6\u622a\u90fd\u4f1a\u88ab\u6267\u884c\uff0c\u8bf7\u6ce8\u610f\u5bf9\u6027\u80fd\u7684\u5f71\u54cd\u3002 \u7ea6\u5b9a\uff1a \u7528\u6237\u81ea\u5b9a\u4e49 filter \u9ed8\u8ba4\u5728\u5185\u7f6e filter \u4e4b\u540e\u3002 \u7279\u6b8a\u503c default \uff0c\u8868\u793a\u7f3a\u7701\u6269\u5c55\u70b9\u63d2\u5165\u7684\u4f4d\u7f6e\u3002\u6bd4\u5982\uff1a filter=\"xxx,default,yyy\" \uff0c\u8868\u793a xxx \u5728\u7f3a\u7701 filter \u4e4b\u524d\uff0c yyy \u5728\u7f3a\u7701 filter \u4e4b\u540e\u3002 \u7279\u6b8a\u7b26\u53f7 - \uff0c\u8868\u793a\u5254\u9664\u3002\u6bd4\u5982\uff1a filter=\"-foo1\" \uff0c\u5254\u9664\u6dfb\u52a0\u7f3a\u7701\u6269\u5c55\u70b9 foo1 \u3002\u6bd4\u5982\uff1a filter=\"-default\" \uff0c\u5254\u9664\u6dfb\u52a0\u6240\u6709\u7f3a\u7701\u6269\u5c55\u70b9\u3002 provider \u548c service \u540c\u65f6\u914d\u7f6e\u7684 filter \u65f6\uff0c\u7d2f\u52a0\u6240\u6709 filter\uff0c\u800c\u4e0d\u662f\u8986\u76d6\u3002\u6bd4\u5982\uff1a dubbo:provider filter=\"xxx,yyy\"/ \u548c dubbo:service filter=\"aaa,bbb\" / \uff0c\u5219 xxx , yyy , aaa , bbb \u5747\u4f1a\u751f\u6548\u3002\u5982\u679c\u8981\u8986\u76d6\uff0c\u9700\u914d\u7f6e\uff1a dubbo:service filter=\"-xxx,-yyy,aaa,bbb\" / \u6269\u5c55\u63a5\u53e3 org.apache.dubbo.rpc.Filter \u6269\u5c55\u914d\u7f6e !-- \u6d88\u8d39\u65b9\u8c03\u7528\u8fc7\u7a0b\u62e6\u622a -- dubbo:reference filter= xxx,yyy / !-- \u6d88\u8d39\u65b9\u8c03\u7528\u8fc7\u7a0b\u7f3a\u7701\u62e6\u622a\u5668\uff0c\u5c06\u62e6\u622a\u6240\u6709reference -- dubbo:consumer filter= xxx,yyy / !-- \u63d0\u4f9b\u65b9\u8c03\u7528\u8fc7\u7a0b\u62e6\u622a -- dubbo:service filter= xxx,yyy / !-- \u63d0\u4f9b\u65b9\u8c03\u7528\u8fc7\u7a0b\u7f3a\u7701\u62e6\u622a\u5668\uff0c\u5c06\u62e6\u622a\u6240\u6709service -- dubbo:provider filter= xxx,yyy / \u5df2\u77e5\u6269\u5c55 org.apache.dubbo.rpc.filter.EchoFilter org.apache.dubbo.rpc.filter.GenericFilter org.apache.dubbo.rpc.filter.GenericImplFilter org.apache.dubbo.rpc.filter.TokenFilter org.apache.dubbo.rpc.filter.AccessLogFilter org.apache.dubbo.rpc.filter.CountFilter org.apache.dubbo.rpc.filter.ActiveLimitFilter org.apache.dubbo.rpc.filter.ClassLoaderFilter org.apache.dubbo.rpc.filter.ContextFilter org.apache.dubbo.rpc.filter.ConsumerContextFilter org.apache.dubbo.rpc.filter.ExceptionFilter org.apache.dubbo.rpc.filter.ExecuteLimitFilter org.apache.dubbo.rpc.filter.DeprecatedFilter \u6269\u5c55\u793a\u4f8b Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxFilter.java (\u5b9e\u73b0Filter\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.Filter (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxFilter) XxxFilter.java\uff1a package com.xxx; import org.apache.dubbo.rpc.Filter; import org.apache.dubbo.rpc.Invoker; import org.apache.dubbo.rpc.Invocation; import org.apache.dubbo.rpc.Result; import org.apache.dubbo.rpc.RpcException; public class XxxFilter implements Filter { public Result invoke(Invoker ? invoker, Invocation invocation) throws RpcException { // before filter ... Result result = invoker.invoke(invocation); // after filter ... return result; } } META-INF/dubbo/org.apache.dubbo.rpc.Filter\uff1a xxx=com.xxx.XxxFilter","title":"\u8c03\u7528\u62e6\u622a\u6269\u5c55"},{"location":"dev/impls/filter/#_1","text":"","title":"\u8c03\u7528\u62e6\u622a\u6269\u5c55"},{"location":"dev/impls/filter/#_2","text":"\u670d\u52a1\u63d0\u4f9b\u65b9\u548c\u670d\u52a1\u6d88\u8d39\u65b9\u8c03\u7528\u8fc7\u7a0b\u62e6\u622a\uff0cDubbo \u672c\u8eab\u7684\u5927\u591a\u529f\u80fd\u5747\u57fa\u4e8e\u6b64\u6269\u5c55\u70b9\u5b9e\u73b0\uff0c\u6bcf\u6b21\u8fdc\u7a0b\u65b9\u6cd5\u6267\u884c\uff0c\u8be5\u62e6\u622a\u90fd\u4f1a\u88ab\u6267\u884c\uff0c\u8bf7\u6ce8\u610f\u5bf9\u6027\u80fd\u7684\u5f71\u54cd\u3002 \u7ea6\u5b9a\uff1a \u7528\u6237\u81ea\u5b9a\u4e49 filter \u9ed8\u8ba4\u5728\u5185\u7f6e filter \u4e4b\u540e\u3002 \u7279\u6b8a\u503c default \uff0c\u8868\u793a\u7f3a\u7701\u6269\u5c55\u70b9\u63d2\u5165\u7684\u4f4d\u7f6e\u3002\u6bd4\u5982\uff1a filter=\"xxx,default,yyy\" \uff0c\u8868\u793a xxx \u5728\u7f3a\u7701 filter \u4e4b\u524d\uff0c yyy \u5728\u7f3a\u7701 filter \u4e4b\u540e\u3002 \u7279\u6b8a\u7b26\u53f7 - \uff0c\u8868\u793a\u5254\u9664\u3002\u6bd4\u5982\uff1a filter=\"-foo1\" \uff0c\u5254\u9664\u6dfb\u52a0\u7f3a\u7701\u6269\u5c55\u70b9 foo1 \u3002\u6bd4\u5982\uff1a filter=\"-default\" \uff0c\u5254\u9664\u6dfb\u52a0\u6240\u6709\u7f3a\u7701\u6269\u5c55\u70b9\u3002 provider \u548c service \u540c\u65f6\u914d\u7f6e\u7684 filter \u65f6\uff0c\u7d2f\u52a0\u6240\u6709 filter\uff0c\u800c\u4e0d\u662f\u8986\u76d6\u3002\u6bd4\u5982\uff1a dubbo:provider filter=\"xxx,yyy\"/ \u548c dubbo:service filter=\"aaa,bbb\" / \uff0c\u5219 xxx , yyy , aaa , bbb \u5747\u4f1a\u751f\u6548\u3002\u5982\u679c\u8981\u8986\u76d6\uff0c\u9700\u914d\u7f6e\uff1a dubbo:service filter=\"-xxx,-yyy,aaa,bbb\" /","title":"\u6269\u5c55\u8bf4\u660e"},{"location":"dev/impls/filter/#_3","text":"org.apache.dubbo.rpc.Filter","title":"\u6269\u5c55\u63a5\u53e3"},{"location":"dev/impls/filter/#_4","text":"!-- \u6d88\u8d39\u65b9\u8c03\u7528\u8fc7\u7a0b\u62e6\u622a -- dubbo:reference filter= xxx,yyy / !-- \u6d88\u8d39\u65b9\u8c03\u7528\u8fc7\u7a0b\u7f3a\u7701\u62e6\u622a\u5668\uff0c\u5c06\u62e6\u622a\u6240\u6709reference -- dubbo:consumer filter= xxx,yyy / !-- \u63d0\u4f9b\u65b9\u8c03\u7528\u8fc7\u7a0b\u62e6\u622a -- dubbo:service filter= xxx,yyy / !-- \u63d0\u4f9b\u65b9\u8c03\u7528\u8fc7\u7a0b\u7f3a\u7701\u62e6\u622a\u5668\uff0c\u5c06\u62e6\u622a\u6240\u6709service -- dubbo:provider filter= xxx,yyy /","title":"\u6269\u5c55\u914d\u7f6e"},{"location":"dev/impls/filter/#_5","text":"org.apache.dubbo.rpc.filter.EchoFilter org.apache.dubbo.rpc.filter.GenericFilter org.apache.dubbo.rpc.filter.GenericImplFilter org.apache.dubbo.rpc.filter.TokenFilter org.apache.dubbo.rpc.filter.AccessLogFilter org.apache.dubbo.rpc.filter.CountFilter org.apache.dubbo.rpc.filter.ActiveLimitFilter org.apache.dubbo.rpc.filter.ClassLoaderFilter org.apache.dubbo.rpc.filter.ContextFilter org.apache.dubbo.rpc.filter.ConsumerContextFilter org.apache.dubbo.rpc.filter.ExceptionFilter org.apache.dubbo.rpc.filter.ExecuteLimitFilter org.apache.dubbo.rpc.filter.DeprecatedFilter","title":"\u5df2\u77e5\u6269\u5c55"},{"location":"dev/impls/filter/#_6","text":"Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxFilter.java (\u5b9e\u73b0Filter\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.Filter (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxFilter) XxxFilter.java\uff1a package com.xxx; import org.apache.dubbo.rpc.Filter; import org.apache.dubbo.rpc.Invoker; import org.apache.dubbo.rpc.Invocation; import org.apache.dubbo.rpc.Result; import org.apache.dubbo.rpc.RpcException; public class XxxFilter implements Filter { public Result invoke(Invoker ? invoker, Invocation invocation) throws RpcException { // before filter ... Result result = invoker.invoke(invocation); // after filter ... return result; } } META-INF/dubbo/org.apache.dubbo.rpc.Filter\uff1a xxx=com.xxx.XxxFilter","title":"\u6269\u5c55\u793a\u4f8b"},{"location":"dev/impls/introduction/","text":"SPI \u6269\u5c55\u5b9e\u73b0 SPI \u6269\u5c55\u63a5\u53e3\u4ec5\u7528\u4e8e\u7cfb\u7edf\u96c6\u6210\uff0c\u6216 Contributor \u6269\u5c55\u529f\u80fd\u63d2\u4ef6\u3002","title":"SPI \u6269\u5c55\u5b9e\u73b0"},{"location":"dev/impls/introduction/#spi","text":"SPI \u6269\u5c55\u63a5\u53e3\u4ec5\u7528\u4e8e\u7cfb\u7edf\u96c6\u6210\uff0c\u6216 Contributor \u6269\u5c55\u529f\u80fd\u63d2\u4ef6\u3002","title":"SPI \u6269\u5c55\u5b9e\u73b0"},{"location":"dev/impls/invoker-listener/","text":"\u5f15\u7528\u76d1\u542c\u6269\u5c55 \u6269\u5c55\u8bf4\u660e \u5f53\u6709\u670d\u52a1\u5f15\u7528\u65f6\uff0c\u89e6\u53d1\u8be5\u4e8b\u4ef6\u3002 \u6269\u5c55\u63a5\u53e3 org.apache.dubbo.rpc.InvokerListener \u6269\u5c55\u914d\u7f6e !-- \u5f15\u7528\u670d\u52a1\u76d1\u542c -- dubbo:reference listener= xxx,yyy / !-- \u5f15\u7528\u670d\u52a1\u7f3a\u7701\u76d1\u542c\u5668 -- dubbo:consumer listener= xxx,yyy / \u5df2\u77e5\u6269\u5c55 org.apache.dubbo.rpc.listener.DeprecatedInvokerListener \u6269\u5c55\u793a\u4f8b Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxInvokerListener.java (\u5b9e\u73b0InvokerListener\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.InvokerListener (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxInvokerListener) XxxInvokerListener.java\uff1a package com.xxx; import org.apache.dubbo.rpc.InvokerListener; import org.apache.dubbo.rpc.Invoker; import org.apache.dubbo.rpc.RpcException; public class XxxInvokerListener implements InvokerListener { public void referred(Invoker ? invoker) throws RpcException { // ... } public void destroyed(Invoker ? invoker) throws RpcException { // ... } } META-INF/dubbo/org.apache.dubbo.rpc.InvokerListener\uff1a xxx=com.xxx.XxxInvokerListener","title":"\u5f15\u7528\u76d1\u542c\u6269\u5c55"},{"location":"dev/impls/invoker-listener/#_1","text":"","title":"\u5f15\u7528\u76d1\u542c\u6269\u5c55"},{"location":"dev/impls/invoker-listener/#_2","text":"\u5f53\u6709\u670d\u52a1\u5f15\u7528\u65f6\uff0c\u89e6\u53d1\u8be5\u4e8b\u4ef6\u3002","title":"\u6269\u5c55\u8bf4\u660e"},{"location":"dev/impls/invoker-listener/#_3","text":"org.apache.dubbo.rpc.InvokerListener","title":"\u6269\u5c55\u63a5\u53e3"},{"location":"dev/impls/invoker-listener/#_4","text":"!-- \u5f15\u7528\u670d\u52a1\u76d1\u542c -- dubbo:reference listener= xxx,yyy / !-- \u5f15\u7528\u670d\u52a1\u7f3a\u7701\u76d1\u542c\u5668 -- dubbo:consumer listener= xxx,yyy /","title":"\u6269\u5c55\u914d\u7f6e"},{"location":"dev/impls/invoker-listener/#_5","text":"org.apache.dubbo.rpc.listener.DeprecatedInvokerListener","title":"\u5df2\u77e5\u6269\u5c55"},{"location":"dev/impls/invoker-listener/#_6","text":"Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxInvokerListener.java (\u5b9e\u73b0InvokerListener\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.InvokerListener (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxInvokerListener) XxxInvokerListener.java\uff1a package com.xxx; import org.apache.dubbo.rpc.InvokerListener; import org.apache.dubbo.rpc.Invoker; import org.apache.dubbo.rpc.RpcException; public class XxxInvokerListener implements InvokerListener { public void referred(Invoker ? invoker) throws RpcException { // ... } public void destroyed(Invoker ? invoker) throws RpcException { // ... } } META-INF/dubbo/org.apache.dubbo.rpc.InvokerListener\uff1a xxx=com.xxx.XxxInvokerListener","title":"\u6269\u5c55\u793a\u4f8b"},{"location":"dev/impls/load-balance/","text":"\u8d1f\u8f7d\u5747\u8861\u6269\u5c55 \u6269\u5c55\u8bf4\u660e \u4ece\u591a\u4e2a\u670d\u52a1\u63d0\u8005\u65b9\u4e2d\u9009\u62e9\u4e00\u4e2a\u8fdb\u884c\u8c03\u7528 \u6269\u5c55\u63a5\u53e3 org.apache.dubbo.rpc.cluster.LoadBalance \u6269\u5c55\u914d\u7f6e dubbo:protocol loadbalance= xxx / !-- \u7f3a\u7701\u503c\u8bbe\u7f6e\uff0c\u5f53 dubbo:protocol \u6ca1\u6709\u914d\u7f6eloadbalance\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider loadbalance= xxx / \u5df2\u77e5\u6269\u5c55 org.apache.dubbo.rpc.cluster.loadbalance.RandomLoadBalance org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance org.apache.dubbo.rpc.cluster.loadbalance.LeastActiveLoadBalance \u6269\u5c55\u793a\u4f8b Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxLoadBalance.java (\u5b9e\u73b0LoadBalance\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.cluster.LoadBalance (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxLoadBalance) XxxLoadBalance.java\uff1a package com.xxx; import org.apache.dubbo.rpc.cluster.LoadBalance; import org.apache.dubbo.rpc.Invoker; import org.apache.dubbo.rpc.Invocation; import org.apache.dubbo.rpc.RpcException; public class XxxLoadBalance implements LoadBalance { public T Invoker T select(List Invoker T invokers, Invocation invocation) throws RpcException { // ... } } META-INF/dubbo/org.apache.dubbo.rpc.cluster.LoadBalance\uff1a xxx=com.xxx.XxxLoadBalance","title":"\u8d1f\u8f7d\u5747\u8861\u6269\u5c55"},{"location":"dev/impls/load-balance/#_1","text":"","title":"\u8d1f\u8f7d\u5747\u8861\u6269\u5c55"},{"location":"dev/impls/load-balance/#_2","text":"\u4ece\u591a\u4e2a\u670d\u52a1\u63d0\u8005\u65b9\u4e2d\u9009\u62e9\u4e00\u4e2a\u8fdb\u884c\u8c03\u7528","title":"\u6269\u5c55\u8bf4\u660e"},{"location":"dev/impls/load-balance/#_3","text":"org.apache.dubbo.rpc.cluster.LoadBalance","title":"\u6269\u5c55\u63a5\u53e3"},{"location":"dev/impls/load-balance/#_4","text":"dubbo:protocol loadbalance= xxx / !-- \u7f3a\u7701\u503c\u8bbe\u7f6e\uff0c\u5f53 dubbo:protocol \u6ca1\u6709\u914d\u7f6eloadbalance\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider loadbalance= xxx /","title":"\u6269\u5c55\u914d\u7f6e"},{"location":"dev/impls/load-balance/#_5","text":"org.apache.dubbo.rpc.cluster.loadbalance.RandomLoadBalance org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance org.apache.dubbo.rpc.cluster.loadbalance.LeastActiveLoadBalance","title":"\u5df2\u77e5\u6269\u5c55"},{"location":"dev/impls/load-balance/#_6","text":"Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxLoadBalance.java (\u5b9e\u73b0LoadBalance\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.cluster.LoadBalance (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxLoadBalance) XxxLoadBalance.java\uff1a package com.xxx; import org.apache.dubbo.rpc.cluster.LoadBalance; import org.apache.dubbo.rpc.Invoker; import org.apache.dubbo.rpc.Invocation; import org.apache.dubbo.rpc.RpcException; public class XxxLoadBalance implements LoadBalance { public T Invoker T select(List Invoker T invokers, Invocation invocation) throws RpcException { // ... } } META-INF/dubbo/org.apache.dubbo.rpc.cluster.LoadBalance\uff1a xxx=com.xxx.XxxLoadBalance","title":"\u6269\u5c55\u793a\u4f8b"},{"location":"dev/impls/logger-adapter/","text":"\u65e5\u5fd7\u9002\u914d\u6269\u5c55 \u6269\u5c55\u8bf4\u660e \u65e5\u5fd7\u8f93\u51fa\u9002\u914d\u6269\u5c55\u70b9\u3002 \u6269\u5c55\u63a5\u53e3 org.apache.dubbo.common.logger.LoggerAdapter \u6269\u5c55\u914d\u7f6e dubbo:application logger= xxx / \u6216\u8005\uff1a -Ddubbo:application.logger=xxx \u5df2\u77e5\u6269\u5c55 org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter org.apache.dubbo.common.logger.jcl.JclLoggerAdapter org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter org.apache.dubbo.common.logger.jdk.JdkLoggerAdapter \u6269\u5c55\u793a\u4f8b Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxLoggerAdapter.java (\u5b9e\u73b0LoggerAdapter\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.logger.LoggerAdapter (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxLoggerAdapter) XxxLoggerAdapter.java\uff1a package com.xxx; import org.apache.dubbo.common.logger.LoggerAdapter; public class XxxLoggerAdapter implements LoggerAdapter { public Logger getLogger(URL url) { // ... } } XxxLogger.java\uff1a package com.xxx; import org.apache.dubbo.common.logger.Logger; public class XxxLogger implements Logger { public XxxLogger(URL url) { // ... } public void info(String msg) { // ... } // ... } META-INF/dubbo/org.apache.dubbo.common.logger.LoggerAdapter\uff1a xxx=com.xxx.XxxLoggerAdapter","title":"\u65e5\u5fd7\u9002\u914d\u6269\u5c55"},{"location":"dev/impls/logger-adapter/#_1","text":"","title":"\u65e5\u5fd7\u9002\u914d\u6269\u5c55"},{"location":"dev/impls/logger-adapter/#_2","text":"\u65e5\u5fd7\u8f93\u51fa\u9002\u914d\u6269\u5c55\u70b9\u3002","title":"\u6269\u5c55\u8bf4\u660e"},{"location":"dev/impls/logger-adapter/#_3","text":"org.apache.dubbo.common.logger.LoggerAdapter","title":"\u6269\u5c55\u63a5\u53e3"},{"location":"dev/impls/logger-adapter/#_4","text":"dubbo:application logger= xxx / \u6216\u8005\uff1a -Ddubbo:application.logger=xxx","title":"\u6269\u5c55\u914d\u7f6e"},{"location":"dev/impls/logger-adapter/#_5","text":"org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter org.apache.dubbo.common.logger.jcl.JclLoggerAdapter org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter org.apache.dubbo.common.logger.jdk.JdkLoggerAdapter","title":"\u5df2\u77e5\u6269\u5c55"},{"location":"dev/impls/logger-adapter/#_6","text":"Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxLoggerAdapter.java (\u5b9e\u73b0LoggerAdapter\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.logger.LoggerAdapter (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxLoggerAdapter) XxxLoggerAdapter.java\uff1a package com.xxx; import org.apache.dubbo.common.logger.LoggerAdapter; public class XxxLoggerAdapter implements LoggerAdapter { public Logger getLogger(URL url) { // ... } } XxxLogger.java\uff1a package com.xxx; import org.apache.dubbo.common.logger.Logger; public class XxxLogger implements Logger { public XxxLogger(URL url) { // ... } public void info(String msg) { // ... } // ... } META-INF/dubbo/org.apache.dubbo.common.logger.LoggerAdapter\uff1a xxx=com.xxx.XxxLoggerAdapter","title":"\u6269\u5c55\u793a\u4f8b"},{"location":"dev/impls/merger/","text":"\u5408\u5e76\u7ed3\u679c\u6269\u5c55 \u6269\u5c55\u8bf4\u660e \u5408\u5e76\u8fd4\u56de\u7ed3\u679c\uff0c\u7528\u4e8e\u5206\u7ec4\u805a\u5408\u3002 \u6269\u5c55\u63a5\u53e3 org.apache.dubbo.rpc.cluster.Merger \u6269\u5c55\u914d\u7f6e dubbo:method merger= xxx / \u5df2\u77e5\u6269\u5c55 org.apache.dubbo.rpc.cluster.merger.ArrayMerger org.apache.dubbo.rpc.cluster.merger.ListMerger org.apache.dubbo.rpc.cluster.merger.SetMerger org.apache.dubbo.rpc.cluster.merger.MapMerger \u6269\u5c55\u793a\u4f8b Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxMerger.java (\u5b9e\u73b0Merger\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.cluster.Merger (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxMerger) XxxMerger.java\uff1a package com.xxx; import org.apache.dubbo.rpc.cluster.Merger; public class XxxMerger T implements Merger T { public T merge(T... results) { // ... } } META-INF/dubbo/org.apache.dubbo.rpc.cluster.Merger\uff1a xxx=com.xxx.XxxMerger","title":"\u5408\u5e76\u7ed3\u679c\u6269\u5c55"},{"location":"dev/impls/merger/#_1","text":"","title":"\u5408\u5e76\u7ed3\u679c\u6269\u5c55"},{"location":"dev/impls/merger/#_2","text":"\u5408\u5e76\u8fd4\u56de\u7ed3\u679c\uff0c\u7528\u4e8e\u5206\u7ec4\u805a\u5408\u3002","title":"\u6269\u5c55\u8bf4\u660e"},{"location":"dev/impls/merger/#_3","text":"org.apache.dubbo.rpc.cluster.Merger","title":"\u6269\u5c55\u63a5\u53e3"},{"location":"dev/impls/merger/#_4","text":"dubbo:method merger= xxx /","title":"\u6269\u5c55\u914d\u7f6e"},{"location":"dev/impls/merger/#_5","text":"org.apache.dubbo.rpc.cluster.merger.ArrayMerger org.apache.dubbo.rpc.cluster.merger.ListMerger org.apache.dubbo.rpc.cluster.merger.SetMerger org.apache.dubbo.rpc.cluster.merger.MapMerger","title":"\u5df2\u77e5\u6269\u5c55"},{"location":"dev/impls/merger/#_6","text":"Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxMerger.java (\u5b9e\u73b0Merger\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.cluster.Merger (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxMerger) XxxMerger.java\uff1a package com.xxx; import org.apache.dubbo.rpc.cluster.Merger; public class XxxMerger T implements Merger T { public T merge(T... results) { // ... } } META-INF/dubbo/org.apache.dubbo.rpc.cluster.Merger\uff1a xxx=com.xxx.XxxMerger","title":"\u6269\u5c55\u793a\u4f8b"},{"location":"dev/impls/monitor/","text":"\u76d1\u63a7\u4e2d\u5fc3\u6269\u5c55 \u6269\u5c55\u8bf4\u660e \u8d1f\u8d23\u670d\u52a1\u8c03\u7528\u6b21\u548c\u8c03\u7528\u65f6\u95f4\u7684\u76d1\u63a7\u3002 \u6269\u5c55\u63a5\u53e3 org.apache.dubbo.monitor.MonitorFactory org.apache.dubbo.monitor.Monitor \u6269\u5c55\u914d\u7f6e !-- \u5b9a\u4e49\u76d1\u63a7\u4e2d\u5fc3 -- dubbo:monitor address= xxx://ip:port / \u5df2\u77e5\u6269\u5c55 org.apache.dubbo.monitor.support.dubbo.DubboMonitorFactory \u6269\u5c55\u793a\u4f8b Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxMonitorFactoryjava (\u5b9e\u73b0MonitorFactory\u63a5\u53e3) |-XxxMonitor.java (\u5b9e\u73b0Monitor\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.monitor.MonitorFactory (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxMonitorFactory) XxxMonitorFactory.java\uff1a package com.xxx; import org.apache.dubbo.monitor.MonitorFactory; import org.apache.dubbo.monitor.Monitor; import org.apache.dubbo.common.URL; public class XxxMonitorFactory implements MonitorFactory { public Monitor getMonitor(URL url) { return new XxxMonitor(url); } } XxxMonitor.java\uff1a package com.xxx; import org.apache.dubbo.monitor.Monitor; public class XxxMonitor implements Monitor { public void count(URL statistics) { // ... } } META-INF/dubbo/org.apache.dubbo.monitor.MonitorFactory\uff1a xxx=com.xxx.XxxMonitorFactory","title":"\u76d1\u63a7\u4e2d\u5fc3\u6269\u5c55"},{"location":"dev/impls/monitor/#_1","text":"","title":"\u76d1\u63a7\u4e2d\u5fc3\u6269\u5c55"},{"location":"dev/impls/monitor/#_2","text":"\u8d1f\u8d23\u670d\u52a1\u8c03\u7528\u6b21\u548c\u8c03\u7528\u65f6\u95f4\u7684\u76d1\u63a7\u3002","title":"\u6269\u5c55\u8bf4\u660e"},{"location":"dev/impls/monitor/#_3","text":"org.apache.dubbo.monitor.MonitorFactory org.apache.dubbo.monitor.Monitor","title":"\u6269\u5c55\u63a5\u53e3"},{"location":"dev/impls/monitor/#_4","text":"!-- \u5b9a\u4e49\u76d1\u63a7\u4e2d\u5fc3 -- dubbo:monitor address= xxx://ip:port /","title":"\u6269\u5c55\u914d\u7f6e"},{"location":"dev/impls/monitor/#_5","text":"org.apache.dubbo.monitor.support.dubbo.DubboMonitorFactory","title":"\u5df2\u77e5\u6269\u5c55"},{"location":"dev/impls/monitor/#_6","text":"Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxMonitorFactoryjava (\u5b9e\u73b0MonitorFactory\u63a5\u53e3) |-XxxMonitor.java (\u5b9e\u73b0Monitor\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.monitor.MonitorFactory (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxMonitorFactory) XxxMonitorFactory.java\uff1a package com.xxx; import org.apache.dubbo.monitor.MonitorFactory; import org.apache.dubbo.monitor.Monitor; import org.apache.dubbo.common.URL; public class XxxMonitorFactory implements MonitorFactory { public Monitor getMonitor(URL url) { return new XxxMonitor(url); } } XxxMonitor.java\uff1a package com.xxx; import org.apache.dubbo.monitor.Monitor; public class XxxMonitor implements Monitor { public void count(URL statistics) { // ... } } META-INF/dubbo/org.apache.dubbo.monitor.MonitorFactory\uff1a xxx=com.xxx.XxxMonitorFactory","title":"\u6269\u5c55\u793a\u4f8b"},{"location":"dev/impls/networker/","text":"\u7ec4\u7f51\u6269\u5c55 \u6269\u5c55\u8bf4\u660e \u5bf9\u7b49\u7f51\u7edc\u8282\u70b9\u7ec4\u7f51\u5668\u3002 \u6269\u5c55\u63a5\u53e3 org.apache.dubbo.remoting.p2p.Networker \u6269\u5c55\u914d\u7f6e dubbo:protocol networker= xxx / !-- \u7f3a\u7701\u503c\u8bbe\u7f6e\uff0c\u5f53 dubbo:protocol \u6ca1\u6709\u914d\u7f6enetworker\u5c5e\u6027\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider networker= xxx / \u5df2\u77e5\u6269\u5c55 org.apache.dubbo.remoting.p2p.support.MulticastNetworker org.apache.dubbo.remoting.p2p.support.FileNetworker \u6269\u5c55\u793a\u4f8b Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxNetworker.java (\u5b9e\u73b0Networker\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.remoting.p2p.Networker (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxNetworker) XxxNetworker.java\uff1a package com.xxx; import org.apache.dubbo.remoting.p2p.Networker; public class XxxNetworker implements Networker { public Group lookup(URL url) { // ... } } META-INF/dubbo/org.apache.dubbo.remoting.p2p.Networker\uff1a xxx=com.xxx.XxxNetworker","title":"\u7ec4\u7f51\u6269\u5c55"},{"location":"dev/impls/networker/#_1","text":"","title":"\u7ec4\u7f51\u6269\u5c55"},{"location":"dev/impls/networker/#_2","text":"\u5bf9\u7b49\u7f51\u7edc\u8282\u70b9\u7ec4\u7f51\u5668\u3002","title":"\u6269\u5c55\u8bf4\u660e"},{"location":"dev/impls/networker/#_3","text":"org.apache.dubbo.remoting.p2p.Networker","title":"\u6269\u5c55\u63a5\u53e3"},{"location":"dev/impls/networker/#_4","text":"dubbo:protocol networker= xxx / !-- \u7f3a\u7701\u503c\u8bbe\u7f6e\uff0c\u5f53 dubbo:protocol \u6ca1\u6709\u914d\u7f6enetworker\u5c5e\u6027\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider networker= xxx /","title":"\u6269\u5c55\u914d\u7f6e"},{"location":"dev/impls/networker/#_5","text":"org.apache.dubbo.remoting.p2p.support.MulticastNetworker org.apache.dubbo.remoting.p2p.support.FileNetworker","title":"\u5df2\u77e5\u6269\u5c55"},{"location":"dev/impls/networker/#_6","text":"Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxNetworker.java (\u5b9e\u73b0Networker\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.remoting.p2p.Networker (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxNetworker) XxxNetworker.java\uff1a package com.xxx; import org.apache.dubbo.remoting.p2p.Networker; public class XxxNetworker implements Networker { public Group lookup(URL url) { // ... } } META-INF/dubbo/org.apache.dubbo.remoting.p2p.Networker\uff1a xxx=com.xxx.XxxNetworker","title":"\u6269\u5c55\u793a\u4f8b"},{"location":"dev/impls/page/","text":"\u9875\u9762\u6269\u5c55 \u6269\u5c55\u8bf4\u660e \u5bf9\u7b49\u7f51\u7edc\u8282\u70b9\u7ec4\u7f51\u5668\u3002 \u6269\u5c55\u63a5\u53e3 org.apache.dubbo.container.page.PageHandler \u6269\u5c55\u914d\u7f6e dubbo:protocol page= xxx,yyy / !-- \u7f3a\u7701\u503c\u8bbe\u7f6e\uff0c\u5f53 dubbo:protocol \u6ca1\u6709\u914d\u7f6epage\u5c5e\u6027\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider page= xxx,yyy / \u5df2\u77e5\u6269\u5c55 org.apache.dubbo.container.page.pages.HomePageHandler org.apache.dubbo.container.page.pages.StatusPageHandler org.apache.dubbo.container.page.pages.LogPageHandler org.apache.dubbo.container.page.pages.SystemPageHandler \u6269\u5c55\u793a\u4f8b Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxPageHandler.java (\u5b9e\u73b0PageHandler\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.container.page.PageHandler (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxPageHandler) XxxPageHandler.java\uff1a package com.xxx; import org.apache.dubbo.container.page.PageHandler; public class XxxPageHandler implements PageHandler { public Group lookup(URL url) { // ... } } META-INF/dubbo/org.apache.dubbo.container.page.PageHandler\uff1a xxx=com.xxx.XxxPageHandler","title":"\u9875\u9762\u6269\u5c55"},{"location":"dev/impls/page/#_1","text":"","title":"\u9875\u9762\u6269\u5c55"},{"location":"dev/impls/page/#_2","text":"\u5bf9\u7b49\u7f51\u7edc\u8282\u70b9\u7ec4\u7f51\u5668\u3002","title":"\u6269\u5c55\u8bf4\u660e"},{"location":"dev/impls/page/#_3","text":"org.apache.dubbo.container.page.PageHandler","title":"\u6269\u5c55\u63a5\u53e3"},{"location":"dev/impls/page/#_4","text":"dubbo:protocol page= xxx,yyy / !-- \u7f3a\u7701\u503c\u8bbe\u7f6e\uff0c\u5f53 dubbo:protocol \u6ca1\u6709\u914d\u7f6epage\u5c5e\u6027\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider page= xxx,yyy /","title":"\u6269\u5c55\u914d\u7f6e"},{"location":"dev/impls/page/#_5","text":"org.apache.dubbo.container.page.pages.HomePageHandler org.apache.dubbo.container.page.pages.StatusPageHandler org.apache.dubbo.container.page.pages.LogPageHandler org.apache.dubbo.container.page.pages.SystemPageHandler","title":"\u5df2\u77e5\u6269\u5c55"},{"location":"dev/impls/page/#_6","text":"Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxPageHandler.java (\u5b9e\u73b0PageHandler\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.container.page.PageHandler (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxPageHandler) XxxPageHandler.java\uff1a package com.xxx; import org.apache.dubbo.container.page.PageHandler; public class XxxPageHandler implements PageHandler { public Group lookup(URL url) { // ... } } META-INF/dubbo/org.apache.dubbo.container.page.PageHandler\uff1a xxx=com.xxx.XxxPageHandler","title":"\u6269\u5c55\u793a\u4f8b"},{"location":"dev/impls/protocol/","text":"\u534f\u8bae\u6269\u5c55 \u6269\u5c55\u8bf4\u660e RPC \u534f\u8bae\u6269\u5c55\uff0c\u5c01\u88c5\u8fdc\u7a0b\u8c03\u7528\u7ec6\u8282\u3002 \u5951\u7ea6\uff1a \u5f53\u7528\u6237\u8c03\u7528 refer() \u6240\u8fd4\u56de\u7684 Invoker \u5bf9\u8c61\u7684 invoke() \u65b9\u6cd5\u65f6\uff0c\u534f\u8bae\u9700\u76f8\u5e94\u6267\u884c\u540c URL \u8fdc\u7aef export() \u4f20\u5165\u7684 Invoker \u5bf9\u8c61\u7684 invoke() \u65b9\u6cd5\u3002 \u5176\u4e2d\uff0c refer() \u8fd4\u56de\u7684 Invoker \u7531\u534f\u8bae\u5b9e\u73b0\uff0c\u534f\u8bae\u901a\u5e38\u9700\u8981\u5728\u6b64 Invoker \u4e2d\u53d1\u9001\u8fdc\u7a0b\u8bf7\u6c42\uff0c export() \u4f20\u5165\u7684 Invoker \u7531\u6846\u67b6\u5b9e\u73b0\u5e76\u4f20\u5165\uff0c\u534f\u8bae\u4e0d\u9700\u8981\u5173\u5fc3\u3002 \u6ce8\u610f\uff1a \u534f\u8bae\u4e0d\u5173\u5fc3\u4e1a\u52a1\u63a5\u53e3\u7684\u900f\u660e\u4ee3\u7406\uff0c\u4ee5 Invoker \u4e3a\u4e2d\u5fc3\uff0c\u7531\u5916\u5c42\u5c06 Invoker \u8f6c\u6362\u4e3a\u4e1a\u52a1\u63a5\u53e3\u3002 \u534f\u8bae\u4e0d\u4e00\u5b9a\u8981\u662f TCP \u7f51\u7edc\u901a\u8baf\uff0c\u6bd4\u5982\u901a\u8fc7\u5171\u4eab\u6587\u4ef6\uff0cIPC \u8fdb\u7a0b\u95f4\u901a\u8baf\u7b49\u3002 \u6269\u5c55\u63a5\u53e3 org.apache.dubbo.rpc.Protocol org.apache.dubbo.rpc.Exporter org.apache.dubbo.rpc.Invoker public interface Protocol { /** * \u66b4\u9732\u8fdc\u7a0b\u670d\u52a1\uff1a br * 1. \u534f\u8bae\u5728\u63a5\u6536\u8bf7\u6c42\u65f6\uff0c\u5e94\u8bb0\u5f55\u8bf7\u6c42\u6765\u6e90\u65b9\u5730\u5740\u4fe1\u606f\uff1aRpcContext.getContext().setRemoteAddress(); br * 2. export()\u5fc5\u987b\u662f\u5e42\u7b49\u7684\uff0c\u4e5f\u5c31\u662f\u66b4\u9732\u540c\u4e00\u4e2aURL\u7684Invoker\u4e24\u6b21\uff0c\u548c\u66b4\u9732\u4e00\u6b21\u6ca1\u6709\u533a\u522b\u3002 br * 3. export()\u4f20\u5165\u7684Invoker\u7531\u6846\u67b6\u5b9e\u73b0\u5e76\u4f20\u5165\uff0c\u534f\u8bae\u4e0d\u9700\u8981\u5173\u5fc3\u3002 br * * @param T \u670d\u52a1\u7684\u7c7b\u578b * @param invoker \u670d\u52a1\u7684\u6267\u884c\u4f53 * @return exporter \u66b4\u9732\u670d\u52a1\u7684\u5f15\u7528\uff0c\u7528\u4e8e\u53d6\u6d88\u66b4\u9732 * @throws RpcException \u5f53\u66b4\u9732\u670d\u52a1\u51fa\u9519\u65f6\u629b\u51fa\uff0c\u6bd4\u5982\u7aef\u53e3\u5df2\u5360\u7528 */ T Exporter T export(Invoker T invoker) throws RpcException; /** * \u5f15\u7528\u8fdc\u7a0b\u670d\u52a1\uff1a br * 1. \u5f53\u7528\u6237\u8c03\u7528refer()\u6240\u8fd4\u56de\u7684Invoker\u5bf9\u8c61\u7684invoke()\u65b9\u6cd5\u65f6\uff0c\u534f\u8bae\u9700\u76f8\u5e94\u6267\u884c\u540cURL\u8fdc\u7aefexport()\u4f20\u5165\u7684Invoker\u5bf9\u8c61\u7684invoke()\u65b9\u6cd5\u3002 br * 2. refer()\u8fd4\u56de\u7684Invoker\u7531\u534f\u8bae\u5b9e\u73b0\uff0c\u534f\u8bae\u901a\u5e38\u9700\u8981\u5728\u6b64Invoker\u4e2d\u53d1\u9001\u8fdc\u7a0b\u8bf7\u6c42\u3002 br * 3. \u5f53url\u4e2d\u6709\u8bbe\u7f6echeck=false\u65f6\uff0c\u8fde\u63a5\u5931\u8d25\u4e0d\u80fd\u629b\u51fa\u5f02\u5e38\uff0c\u9700\u5185\u90e8\u81ea\u52a8\u6062\u590d\u3002 br * * @param T \u670d\u52a1\u7684\u7c7b\u578b * @param type \u670d\u52a1\u7684\u7c7b\u578b * @param url \u8fdc\u7a0b\u670d\u52a1\u7684URL\u5730\u5740 * @return invoker \u670d\u52a1\u7684\u672c\u5730\u4ee3\u7406 * @throws RpcException \u5f53\u8fde\u63a5\u670d\u52a1\u63d0\u4f9b\u65b9\u5931\u8d25\u65f6\u629b\u51fa */ T Invoker T refer(Class T type, URL url) throws RpcException; } \u6269\u5c55\u914d\u7f6e !-- \u58f0\u660e\u534f\u8bae\uff0c\u5982\u679c\u6ca1\u6709\u914d\u7f6eid\uff0c\u5c06\u4ee5name\u4e3aid -- dubbo:protocol id= xxx1 name= xxx / !-- \u5f15\u7528\u534f\u8bae\uff0c\u5982\u679c\u6ca1\u6709\u914d\u7f6eprotocol\u5c5e\u6027\uff0c\u5c06\u5728ApplicationContext\u4e2d\u81ea\u52a8\u626b\u63cfprotocol\u914d\u7f6e -- dubbo:service protocol= xxx1 / !-- \u5f15\u7528\u534f\u8bae\u7f3a\u7701\u503c\uff0c\u5f53 dubbo:service \u6ca1\u6709\u914d\u7f6eprototol\u5c5e\u6027\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider protocol= xxx1 / \u5df2\u77e5\u6269\u5c55 org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol org.apache.dubbo.rpc.protocol.rmi.RmiProtocol org.apache.dubbo.rpc.protocol.http.HttpProtocol org.apache.dubbo.rpc.protocol.http.hessian.HessianProtocol \u6269\u5c55\u793a\u4f8b Maven\u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxProtocol.java (\u5b9e\u73b0Protocol\u63a5\u53e3) |-XxxExporter.java (\u5b9e\u73b0Exporter\u63a5\u53e3) |-XxxInvoker.java (\u5b9e\u73b0Invoker\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.Protocol (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxProtocol) XxxProtocol.java\uff1a package com.xxx; import org.apache.dubbo.rpc.Protocol; public class XxxProtocol implements Protocol { public T Exporter T export(Invoker T invoker) throws RpcException { return new XxxExporter(invoker); } public T Invoker T refer(Class T type, URL url) throws RpcException { return new XxxInvoker(type, url); } } XxxExporter.java\uff1a package com.xxx; import org.apache.dubbo.rpc.support.AbstractExporter; public class XxxExporter T extends AbstractExporter T { public XxxExporter(Invoker T invoker) throws RemotingException{ super(invoker); // ... } public void unexport() { super.unexport(); // ... } } XxxInvoker.java\uff1a package com.xxx; import org.apache.dubbo.rpc.support.AbstractInvoker; public class XxxInvoker T extends AbstractInvoker T { public XxxInvoker(Class T type, URL url) throws RemotingException{ super(type, url); } protected abstract Object doInvoke(Invocation invocation) throws Throwable { // ... } } META-INF/dubbo/org.apache.dubbo.rpc.Protocol\uff1a xxx=com.xxx.XxxProtocol","title":"\u534f\u8bae\u6269\u5c55"},{"location":"dev/impls/protocol/#_1","text":"","title":"\u534f\u8bae\u6269\u5c55"},{"location":"dev/impls/protocol/#_2","text":"RPC \u534f\u8bae\u6269\u5c55\uff0c\u5c01\u88c5\u8fdc\u7a0b\u8c03\u7528\u7ec6\u8282\u3002 \u5951\u7ea6\uff1a \u5f53\u7528\u6237\u8c03\u7528 refer() \u6240\u8fd4\u56de\u7684 Invoker \u5bf9\u8c61\u7684 invoke() \u65b9\u6cd5\u65f6\uff0c\u534f\u8bae\u9700\u76f8\u5e94\u6267\u884c\u540c URL \u8fdc\u7aef export() \u4f20\u5165\u7684 Invoker \u5bf9\u8c61\u7684 invoke() \u65b9\u6cd5\u3002 \u5176\u4e2d\uff0c refer() \u8fd4\u56de\u7684 Invoker \u7531\u534f\u8bae\u5b9e\u73b0\uff0c\u534f\u8bae\u901a\u5e38\u9700\u8981\u5728\u6b64 Invoker \u4e2d\u53d1\u9001\u8fdc\u7a0b\u8bf7\u6c42\uff0c export() \u4f20\u5165\u7684 Invoker \u7531\u6846\u67b6\u5b9e\u73b0\u5e76\u4f20\u5165\uff0c\u534f\u8bae\u4e0d\u9700\u8981\u5173\u5fc3\u3002 \u6ce8\u610f\uff1a \u534f\u8bae\u4e0d\u5173\u5fc3\u4e1a\u52a1\u63a5\u53e3\u7684\u900f\u660e\u4ee3\u7406\uff0c\u4ee5 Invoker \u4e3a\u4e2d\u5fc3\uff0c\u7531\u5916\u5c42\u5c06 Invoker \u8f6c\u6362\u4e3a\u4e1a\u52a1\u63a5\u53e3\u3002 \u534f\u8bae\u4e0d\u4e00\u5b9a\u8981\u662f TCP \u7f51\u7edc\u901a\u8baf\uff0c\u6bd4\u5982\u901a\u8fc7\u5171\u4eab\u6587\u4ef6\uff0cIPC \u8fdb\u7a0b\u95f4\u901a\u8baf\u7b49\u3002","title":"\u6269\u5c55\u8bf4\u660e"},{"location":"dev/impls/protocol/#_3","text":"org.apache.dubbo.rpc.Protocol org.apache.dubbo.rpc.Exporter org.apache.dubbo.rpc.Invoker public interface Protocol { /** * \u66b4\u9732\u8fdc\u7a0b\u670d\u52a1\uff1a br * 1. \u534f\u8bae\u5728\u63a5\u6536\u8bf7\u6c42\u65f6\uff0c\u5e94\u8bb0\u5f55\u8bf7\u6c42\u6765\u6e90\u65b9\u5730\u5740\u4fe1\u606f\uff1aRpcContext.getContext().setRemoteAddress(); br * 2. export()\u5fc5\u987b\u662f\u5e42\u7b49\u7684\uff0c\u4e5f\u5c31\u662f\u66b4\u9732\u540c\u4e00\u4e2aURL\u7684Invoker\u4e24\u6b21\uff0c\u548c\u66b4\u9732\u4e00\u6b21\u6ca1\u6709\u533a\u522b\u3002 br * 3. export()\u4f20\u5165\u7684Invoker\u7531\u6846\u67b6\u5b9e\u73b0\u5e76\u4f20\u5165\uff0c\u534f\u8bae\u4e0d\u9700\u8981\u5173\u5fc3\u3002 br * * @param T \u670d\u52a1\u7684\u7c7b\u578b * @param invoker \u670d\u52a1\u7684\u6267\u884c\u4f53 * @return exporter \u66b4\u9732\u670d\u52a1\u7684\u5f15\u7528\uff0c\u7528\u4e8e\u53d6\u6d88\u66b4\u9732 * @throws RpcException \u5f53\u66b4\u9732\u670d\u52a1\u51fa\u9519\u65f6\u629b\u51fa\uff0c\u6bd4\u5982\u7aef\u53e3\u5df2\u5360\u7528 */ T Exporter T export(Invoker T invoker) throws RpcException; /** * \u5f15\u7528\u8fdc\u7a0b\u670d\u52a1\uff1a br * 1. \u5f53\u7528\u6237\u8c03\u7528refer()\u6240\u8fd4\u56de\u7684Invoker\u5bf9\u8c61\u7684invoke()\u65b9\u6cd5\u65f6\uff0c\u534f\u8bae\u9700\u76f8\u5e94\u6267\u884c\u540cURL\u8fdc\u7aefexport()\u4f20\u5165\u7684Invoker\u5bf9\u8c61\u7684invoke()\u65b9\u6cd5\u3002 br * 2. refer()\u8fd4\u56de\u7684Invoker\u7531\u534f\u8bae\u5b9e\u73b0\uff0c\u534f\u8bae\u901a\u5e38\u9700\u8981\u5728\u6b64Invoker\u4e2d\u53d1\u9001\u8fdc\u7a0b\u8bf7\u6c42\u3002 br * 3. \u5f53url\u4e2d\u6709\u8bbe\u7f6echeck=false\u65f6\uff0c\u8fde\u63a5\u5931\u8d25\u4e0d\u80fd\u629b\u51fa\u5f02\u5e38\uff0c\u9700\u5185\u90e8\u81ea\u52a8\u6062\u590d\u3002 br * * @param T \u670d\u52a1\u7684\u7c7b\u578b * @param type \u670d\u52a1\u7684\u7c7b\u578b * @param url \u8fdc\u7a0b\u670d\u52a1\u7684URL\u5730\u5740 * @return invoker \u670d\u52a1\u7684\u672c\u5730\u4ee3\u7406 * @throws RpcException \u5f53\u8fde\u63a5\u670d\u52a1\u63d0\u4f9b\u65b9\u5931\u8d25\u65f6\u629b\u51fa */ T Invoker T refer(Class T type, URL url) throws RpcException; }","title":"\u6269\u5c55\u63a5\u53e3"},{"location":"dev/impls/protocol/#_4","text":"!-- \u58f0\u660e\u534f\u8bae\uff0c\u5982\u679c\u6ca1\u6709\u914d\u7f6eid\uff0c\u5c06\u4ee5name\u4e3aid -- dubbo:protocol id= xxx1 name= xxx / !-- \u5f15\u7528\u534f\u8bae\uff0c\u5982\u679c\u6ca1\u6709\u914d\u7f6eprotocol\u5c5e\u6027\uff0c\u5c06\u5728ApplicationContext\u4e2d\u81ea\u52a8\u626b\u63cfprotocol\u914d\u7f6e -- dubbo:service protocol= xxx1 / !-- \u5f15\u7528\u534f\u8bae\u7f3a\u7701\u503c\uff0c\u5f53 dubbo:service \u6ca1\u6709\u914d\u7f6eprototol\u5c5e\u6027\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider protocol= xxx1 /","title":"\u6269\u5c55\u914d\u7f6e"},{"location":"dev/impls/protocol/#_5","text":"org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol org.apache.dubbo.rpc.protocol.rmi.RmiProtocol org.apache.dubbo.rpc.protocol.http.HttpProtocol org.apache.dubbo.rpc.protocol.http.hessian.HessianProtocol","title":"\u5df2\u77e5\u6269\u5c55"},{"location":"dev/impls/protocol/#_6","text":"Maven\u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxProtocol.java (\u5b9e\u73b0Protocol\u63a5\u53e3) |-XxxExporter.java (\u5b9e\u73b0Exporter\u63a5\u53e3) |-XxxInvoker.java (\u5b9e\u73b0Invoker\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.Protocol (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxProtocol) XxxProtocol.java\uff1a package com.xxx; import org.apache.dubbo.rpc.Protocol; public class XxxProtocol implements Protocol { public T Exporter T export(Invoker T invoker) throws RpcException { return new XxxExporter(invoker); } public T Invoker T refer(Class T type, URL url) throws RpcException { return new XxxInvoker(type, url); } } XxxExporter.java\uff1a package com.xxx; import org.apache.dubbo.rpc.support.AbstractExporter; public class XxxExporter T extends AbstractExporter T { public XxxExporter(Invoker T invoker) throws RemotingException{ super(invoker); // ... } public void unexport() { super.unexport(); // ... } } XxxInvoker.java\uff1a package com.xxx; import org.apache.dubbo.rpc.support.AbstractInvoker; public class XxxInvoker T extends AbstractInvoker T { public XxxInvoker(Class T type, URL url) throws RemotingException{ super(type, url); } protected abstract Object doInvoke(Invocation invocation) throws Throwable { // ... } } META-INF/dubbo/org.apache.dubbo.rpc.Protocol\uff1a xxx=com.xxx.XxxProtocol","title":"\u6269\u5c55\u793a\u4f8b"},{"location":"dev/impls/proxy-factory/","text":"\u52a8\u6001\u4ee3\u7406\u6269\u5c55 \u6269\u5c55\u8bf4\u660e \u5c06 Invoker \u63a5\u53e3\u8f6c\u6362\u6210\u4e1a\u52a1\u63a5\u53e3\u3002 \u6269\u5c55\u63a5\u53e3 org.apache.dubbo.rpc.ProxyFactory \u6269\u5c55\u914d\u7f6e dubbo:protocol proxy= xxx / !-- \u7f3a\u7701\u503c\u914d\u7f6e\uff0c\u5f53 dubbo:protocol \u6ca1\u6709\u914d\u7f6eproxy\u5c5e\u6027\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider proxy= xxx / \u5df2\u77e5\u6269\u5c55 org.apache.dubbo.rpc.proxy.JdkProxyFactory org.apache.dubbo.rpc.proxy.JavassistProxyFactory \u6269\u5c55\u793a\u4f8b Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxProxyFactory.java (\u5b9e\u73b0ProxyFactory\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.ProxyFactory (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxProxyFactory) XxxProxyFactory.java\uff1a package com.xxx; import org.apache.dubbo.rpc.ProxyFactory; import org.apache.dubbo.rpc.Invoker; import org.apache.dubbo.rpc.RpcException; public class XxxProxyFactory implements ProxyFactory { public T T getProxy(Invoker T invoker) throws RpcException { // ... } public T Invoker T getInvoker(T proxy, Class T type, URL url) throws RpcException { // ... } } META-INF/dubbo/org.apache.dubbo.rpc.ProxyFactory\uff1a xxx=com.xxx.XxxProxyFactory","title":"\u52a8\u6001\u4ee3\u7406\u6269\u5c55"},{"location":"dev/impls/proxy-factory/#_1","text":"","title":"\u52a8\u6001\u4ee3\u7406\u6269\u5c55"},{"location":"dev/impls/proxy-factory/#_2","text":"\u5c06 Invoker \u63a5\u53e3\u8f6c\u6362\u6210\u4e1a\u52a1\u63a5\u53e3\u3002","title":"\u6269\u5c55\u8bf4\u660e"},{"location":"dev/impls/proxy-factory/#_3","text":"org.apache.dubbo.rpc.ProxyFactory","title":"\u6269\u5c55\u63a5\u53e3"},{"location":"dev/impls/proxy-factory/#_4","text":"dubbo:protocol proxy= xxx / !-- \u7f3a\u7701\u503c\u914d\u7f6e\uff0c\u5f53 dubbo:protocol \u6ca1\u6709\u914d\u7f6eproxy\u5c5e\u6027\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider proxy= xxx /","title":"\u6269\u5c55\u914d\u7f6e"},{"location":"dev/impls/proxy-factory/#_5","text":"org.apache.dubbo.rpc.proxy.JdkProxyFactory org.apache.dubbo.rpc.proxy.JavassistProxyFactory","title":"\u5df2\u77e5\u6269\u5c55"},{"location":"dev/impls/proxy-factory/#_6","text":"Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxProxyFactory.java (\u5b9e\u73b0ProxyFactory\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.ProxyFactory (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxProxyFactory) XxxProxyFactory.java\uff1a package com.xxx; import org.apache.dubbo.rpc.ProxyFactory; import org.apache.dubbo.rpc.Invoker; import org.apache.dubbo.rpc.RpcException; public class XxxProxyFactory implements ProxyFactory { public T T getProxy(Invoker T invoker) throws RpcException { // ... } public T Invoker T getInvoker(T proxy, Class T type, URL url) throws RpcException { // ... } } META-INF/dubbo/org.apache.dubbo.rpc.ProxyFactory\uff1a xxx=com.xxx.XxxProxyFactory","title":"\u6269\u5c55\u793a\u4f8b"},{"location":"dev/impls/registry/","text":"\u6ce8\u518c\u4e2d\u5fc3\u6269\u5c55 \u6269\u5c55\u8bf4\u660e \u8d1f\u8d23\u670d\u52a1\u7684\u6ce8\u518c\u4e0e\u53d1\u73b0\u3002 \u6269\u5c55\u63a5\u53e3 org.apache.dubbo.registry.RegistryFactory org.apache.dubbo.registry.Registry \u6269\u5c55\u914d\u7f6e !-- \u5b9a\u4e49\u6ce8\u518c\u4e2d\u5fc3 -- dubbo:registry id= xxx1 address= xxx://ip:port / !-- \u5f15\u7528\u6ce8\u518c\u4e2d\u5fc3\uff0c\u5982\u679c\u6ca1\u6709\u914d\u7f6eregistry\u5c5e\u6027\uff0c\u5c06\u5728ApplicationContext\u4e2d\u81ea\u52a8\u626b\u63cfregistry\u914d\u7f6e -- dubbo:service registry= xxx1 / !-- \u5f15\u7528\u6ce8\u518c\u4e2d\u5fc3\u7f3a\u7701\u503c\uff0c\u5f53 dubbo:service \u6ca1\u6709\u914d\u7f6eregistry\u5c5e\u6027\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider registry= xxx1 / \u6269\u5c55\u5951\u7ea6 RegistryFactory.java\uff1a public interface RegistryFactory { /** * \u8fde\u63a5\u6ce8\u518c\u4e2d\u5fc3. * * \u8fde\u63a5\u6ce8\u518c\u4e2d\u5fc3\u9700\u5904\u7406\u5951\u7ea6\uff1a br * 1. \u5f53\u8bbe\u7f6echeck=false\u65f6\u8868\u793a\u4e0d\u68c0\u67e5\u8fde\u63a5\uff0c\u5426\u5219\u5728\u8fde\u63a5\u4e0d\u4e0a\u65f6\u629b\u51fa\u5f02\u5e38\u3002 br * 2. \u652f\u6301URL\u4e0a\u7684username:password\u6743\u9650\u8ba4\u8bc1\u3002 br * 3. \u652f\u6301backup=10.20.153.10\u5907\u9009\u6ce8\u518c\u4e2d\u5fc3\u96c6\u7fa4\u5730\u5740\u3002 br * 4. \u652f\u6301file=registry.cache\u672c\u5730\u78c1\u76d8\u6587\u4ef6\u7f13\u5b58\u3002 br * 5. \u652f\u6301timeout=1000\u8bf7\u6c42\u8d85\u65f6\u8bbe\u7f6e\u3002 br * 6. \u652f\u6301session=60000\u4f1a\u8bdd\u8d85\u65f6\u6216\u8fc7\u671f\u8bbe\u7f6e\u3002 br * * @param url \u6ce8\u518c\u4e2d\u5fc3\u5730\u5740\uff0c\u4e0d\u5141\u8bb8\u4e3a\u7a7a * @return \u6ce8\u518c\u4e2d\u5fc3\u5f15\u7528\uff0c\u603b\u4e0d\u8fd4\u56de\u7a7a */ Registry getRegistry(URL url); } RegistryService.java\uff1a public interface RegistryService { // Registry extends RegistryService /** * \u6ce8\u518c\u670d\u52a1. * * \u6ce8\u518c\u9700\u5904\u7406\u5951\u7ea6\uff1a br * 1. \u5f53URL\u8bbe\u7f6e\u4e86check=false\u65f6\uff0c\u6ce8\u518c\u5931\u8d25\u540e\u4e0d\u62a5\u9519\uff0c\u5728\u540e\u53f0\u5b9a\u65f6\u91cd\u8bd5\uff0c\u5426\u5219\u629b\u51fa\u5f02\u5e38\u3002 br * 2. \u5f53URL\u8bbe\u7f6e\u4e86dynamic=false\u53c2\u6570\uff0c\u5219\u9700\u6301\u4e45\u5b58\u50a8\uff0c\u5426\u5219\uff0c\u5f53\u6ce8\u518c\u8005\u51fa\u73b0\u65ad\u7535\u7b49\u60c5\u51b5\u5f02\u5e38\u9000\u51fa\u65f6\uff0c\u9700\u81ea\u52a8\u5220\u9664\u3002 br * 3. \u5f53URL\u8bbe\u7f6e\u4e86category=overrides\u65f6\uff0c\u8868\u793a\u5206\u7c7b\u5b58\u50a8\uff0c\u7f3a\u7701\u7c7b\u522b\u4e3aproviders\uff0c\u53ef\u6309\u5206\u7c7b\u90e8\u5206\u901a\u77e5\u6570\u636e\u3002 br * 4. \u5f53\u6ce8\u518c\u4e2d\u5fc3\u91cd\u542f\uff0c\u7f51\u7edc\u6296\u52a8\uff0c\u4e0d\u80fd\u4e22\u5931\u6570\u636e\uff0c\u5305\u62ec\u65ad\u7ebf\u81ea\u52a8\u5220\u9664\u6570\u636e\u3002 br * 5. \u5141\u8bb8URI\u76f8\u540c\u4f46\u53c2\u6570\u4e0d\u540c\u7684URL\u5e76\u5b58\uff0c\u4e0d\u80fd\u8986\u76d6\u3002 br * * @param url \u6ce8\u518c\u4fe1\u606f\uff0c\u4e0d\u5141\u8bb8\u4e3a\u7a7a\uff0c\u5982\uff1adubbo://10.20.153.10/com.alibaba.foo.BarService?version=1.0.0 application=kylin */ void register(URL url); /** * \u53d6\u6d88\u6ce8\u518c\u670d\u52a1. * * \u53d6\u6d88\u6ce8\u518c\u9700\u5904\u7406\u5951\u7ea6\uff1a br * 1. \u5982\u679c\u662fdynamic=false\u7684\u6301\u4e45\u5b58\u50a8\u6570\u636e\uff0c\u627e\u4e0d\u5230\u6ce8\u518c\u6570\u636e\uff0c\u5219\u629bIllegalStateException\uff0c\u5426\u5219\u5ffd\u7565\u3002 br * 2. \u6309\u5168URL\u5339\u914d\u53d6\u6d88\u6ce8\u518c\u3002 br * * @param url \u6ce8\u518c\u4fe1\u606f\uff0c\u4e0d\u5141\u8bb8\u4e3a\u7a7a\uff0c\u5982\uff1adubbo://10.20.153.10/com.alibaba.foo.BarService?version=1.0.0 application=kylin */ void unregister(URL url); /** * \u8ba2\u9605\u670d\u52a1. * * \u8ba2\u9605\u9700\u5904\u7406\u5951\u7ea6\uff1a br * 1. \u5f53URL\u8bbe\u7f6e\u4e86check=false\u65f6\uff0c\u8ba2\u9605\u5931\u8d25\u540e\u4e0d\u62a5\u9519\uff0c\u5728\u540e\u53f0\u5b9a\u65f6\u91cd\u8bd5\u3002 br * 2. \u5f53URL\u8bbe\u7f6e\u4e86category=overrides\uff0c\u53ea\u901a\u77e5\u6307\u5b9a\u5206\u7c7b\u7684\u6570\u636e\uff0c\u591a\u4e2a\u5206\u7c7b\u7528\u9017\u53f7\u5206\u9694\uff0c\u5e76\u5141\u8bb8\u661f\u53f7\u901a\u914d\uff0c\u8868\u793a\u8ba2\u9605\u6240\u6709\u5206\u7c7b\u6570\u636e\u3002 br * 3. \u5141\u8bb8\u4ee5interface,group,version,classifier\u4f5c\u4e3a\u6761\u4ef6\u67e5\u8be2\uff0c\u5982\uff1ainterface=com.alibaba.foo.BarService version=1.0.0 br * 4. \u5e76\u4e14\u67e5\u8be2\u6761\u4ef6\u5141\u8bb8\u661f\u53f7\u901a\u914d\uff0c\u8ba2\u9605\u6240\u6709\u63a5\u53e3\u7684\u6240\u6709\u5206\u7ec4\u7684\u6240\u6709\u7248\u672c\uff0c\u6216\uff1ainterface=* group=* version=* classifier=* br * 5. \u5f53\u6ce8\u518c\u4e2d\u5fc3\u91cd\u542f\uff0c\u7f51\u7edc\u6296\u52a8\uff0c\u9700\u81ea\u52a8\u6062\u590d\u8ba2\u9605\u8bf7\u6c42\u3002 br * 6. \u5141\u8bb8URI\u76f8\u540c\u4f46\u53c2\u6570\u4e0d\u540c\u7684URL\u5e76\u5b58\uff0c\u4e0d\u80fd\u8986\u76d6\u3002 br * 7. \u5fc5\u987b\u963b\u585e\u8ba2\u9605\u8fc7\u7a0b\uff0c\u7b49\u7b2c\u4e00\u6b21\u901a\u77e5\u5b8c\u540e\u518d\u8fd4\u56de\u3002 br * * @param url \u8ba2\u9605\u6761\u4ef6\uff0c\u4e0d\u5141\u8bb8\u4e3a\u7a7a\uff0c\u5982\uff1aconsumer://10.20.153.10/com.alibaba.foo.BarService?version=1.0.0 application=kylin * @param listener \u53d8\u66f4\u4e8b\u4ef6\u76d1\u542c\u5668\uff0c\u4e0d\u5141\u8bb8\u4e3a\u7a7a */ void subscribe(URL url, NotifyListener listener); /** * \u53d6\u6d88\u8ba2\u9605\u670d\u52a1. * * \u53d6\u6d88\u8ba2\u9605\u9700\u5904\u7406\u5951\u7ea6\uff1a br * 1. \u5982\u679c\u6ca1\u6709\u8ba2\u9605\uff0c\u76f4\u63a5\u5ffd\u7565\u3002 br * 2. \u6309\u5168URL\u5339\u914d\u53d6\u6d88\u8ba2\u9605\u3002 br * * @param url \u8ba2\u9605\u6761\u4ef6\uff0c\u4e0d\u5141\u8bb8\u4e3a\u7a7a\uff0c\u5982\uff1aconsumer://10.20.153.10/com.alibaba.foo.BarService?version=1.0.0 application=kylin * @param listener \u53d8\u66f4\u4e8b\u4ef6\u76d1\u542c\u5668\uff0c\u4e0d\u5141\u8bb8\u4e3a\u7a7a */ void unsubscribe(URL url, NotifyListener listener); /** * \u67e5\u8be2\u6ce8\u518c\u5217\u8868\uff0c\u4e0e\u8ba2\u9605\u7684\u63a8\u6a21\u5f0f\u76f8\u5bf9\u5e94\uff0c\u8fd9\u91cc\u4e3a\u62c9\u6a21\u5f0f\uff0c\u53ea\u8fd4\u56de\u4e00\u6b21\u7ed3\u679c\u3002 * * @see org.apache.dubbo.registry.NotifyListener#notify(List) * @param url \u67e5\u8be2\u6761\u4ef6\uff0c\u4e0d\u5141\u8bb8\u4e3a\u7a7a\uff0c\u5982\uff1aconsumer://10.20.153.10/com.alibaba.foo.BarService?version=1.0.0 application=kylin * @return \u5df2\u6ce8\u518c\u4fe1\u606f\u5217\u8868\uff0c\u53ef\u80fd\u4e3a\u7a7a\uff0c\u542b\u4e49\u540c{@link org.apache.dubbo.registry.NotifyListener#notify(List URL )}\u7684\u53c2\u6570\u3002 */ List URL lookup(URL url); } NotifyListener.java\uff1a public interface NotifyListener { /** * \u5f53\u6536\u5230\u670d\u52a1\u53d8\u66f4\u901a\u77e5\u65f6\u89e6\u53d1\u3002 * * \u901a\u77e5\u9700\u5904\u7406\u5951\u7ea6\uff1a br * 1. \u603b\u662f\u4ee5\u670d\u52a1\u63a5\u53e3\u548c\u6570\u636e\u7c7b\u578b\u4e3a\u7ef4\u5ea6\u5168\u91cf\u901a\u77e5\uff0c\u5373\u4e0d\u4f1a\u901a\u77e5\u4e00\u4e2a\u670d\u52a1\u7684\u540c\u7c7b\u578b\u7684\u90e8\u5206\u6570\u636e\uff0c\u7528\u6237\u4e0d\u9700\u8981\u5bf9\u6bd4\u4e0a\u4e00\u6b21\u901a\u77e5\u7ed3\u679c\u3002 br * 2. \u8ba2\u9605\u65f6\u7684\u7b2c\u4e00\u6b21\u901a\u77e5\uff0c\u5fc5\u987b\u662f\u4e00\u4e2a\u670d\u52a1\u7684\u6240\u6709\u7c7b\u578b\u6570\u636e\u7684\u5168\u91cf\u901a\u77e5\u3002 br * 3. \u4e2d\u9014\u53d8\u66f4\u65f6\uff0c\u5141\u8bb8\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u5206\u5f00\u901a\u77e5\uff0c\u6bd4\u5982\uff1aproviders, consumers, routes, overrides\uff0c\u5141\u8bb8\u53ea\u901a\u77e5\u5176\u4e2d\u4e00\u79cd\u7c7b\u578b\uff0c\u4f46\u8be5\u7c7b\u578b\u7684\u6570\u636e\u5fc5\u987b\u662f\u5168\u91cf\u7684\uff0c\u4e0d\u662f\u589e\u91cf\u7684\u3002 br * 4. \u5982\u679c\u4e00\u79cd\u7c7b\u578b\u7684\u6570\u636e\u4e3a\u7a7a\uff0c\u9700\u901a\u77e5\u4e00\u4e2aempty\u534f\u8bae\u5e76\u5e26category\u53c2\u6570\u7684\u6807\u8bc6\u6027URL\u6570\u636e\u3002 br * 5. \u901a\u77e5\u8005(\u5373\u6ce8\u518c\u4e2d\u5fc3\u5b9e\u73b0)\u9700\u4fdd\u8bc1\u901a\u77e5\u7684\u987a\u5e8f\uff0c\u6bd4\u5982\uff1a\u5355\u7ebf\u7a0b\u63a8\u9001\uff0c\u961f\u5217\u4e32\u884c\u5316\uff0c\u5e26\u7248\u672c\u5bf9\u6bd4\u3002 br * * @param urls \u5df2\u6ce8\u518c\u4fe1\u606f\u5217\u8868\uff0c\u603b\u4e0d\u4e3a\u7a7a\uff0c\u542b\u4e49\u540c{@link org.apache.dubbo.registry.RegistryService#lookup(URL)}\u7684\u8fd4\u56de\u503c\u3002 */ void notify(List URL urls); } \u5df2\u77e5\u6269\u5c55 org.apache.dubbo.registry.support.dubbo.DubboRegistryFactory \u6269\u5c55\u793a\u4f8b Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxRegistryFactoryjava (\u5b9e\u73b0RegistryFactory\u63a5\u53e3) |-XxxRegistry.java (\u5b9e\u73b0Registry\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.registry.RegistryFactory (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxRegistryFactory) XxxRegistryFactory.java\uff1a package com.xxx; import org.apache.dubbo.registry.RegistryFactory; import org.apache.dubbo.registry.Registry; import org.apache.dubbo.common.URL; public class XxxRegistryFactory implements RegistryFactory { public Registry getRegistry(URL url) { return new XxxRegistry(url); } } XxxRegistry.java\uff1a package com.xxx; import org.apache.dubbo.registry.Registry; import org.apache.dubbo.registry.NotifyListener; import org.apache.dubbo.common.URL; public class XxxRegistry implements Registry { public void register(URL url) { // ... } public void unregister(URL url) { // ... } public void subscribe(URL url, NotifyListener listener) { // ... } public void unsubscribe(URL url, NotifyListener listener) { // ... } } META-INF/dubbo/org.apache.dubbo.registry.RegistryFactory\uff1a xxx=com.xxx.XxxRegistryFactory","title":"\u6ce8\u518c\u4e2d\u5fc3\u6269\u5c55"},{"location":"dev/impls/registry/#_1","text":"","title":"\u6ce8\u518c\u4e2d\u5fc3\u6269\u5c55"},{"location":"dev/impls/registry/#_2","text":"\u8d1f\u8d23\u670d\u52a1\u7684\u6ce8\u518c\u4e0e\u53d1\u73b0\u3002","title":"\u6269\u5c55\u8bf4\u660e"},{"location":"dev/impls/registry/#_3","text":"org.apache.dubbo.registry.RegistryFactory org.apache.dubbo.registry.Registry","title":"\u6269\u5c55\u63a5\u53e3"},{"location":"dev/impls/registry/#_4","text":"!-- \u5b9a\u4e49\u6ce8\u518c\u4e2d\u5fc3 -- dubbo:registry id= xxx1 address= xxx://ip:port / !-- \u5f15\u7528\u6ce8\u518c\u4e2d\u5fc3\uff0c\u5982\u679c\u6ca1\u6709\u914d\u7f6eregistry\u5c5e\u6027\uff0c\u5c06\u5728ApplicationContext\u4e2d\u81ea\u52a8\u626b\u63cfregistry\u914d\u7f6e -- dubbo:service registry= xxx1 / !-- \u5f15\u7528\u6ce8\u518c\u4e2d\u5fc3\u7f3a\u7701\u503c\uff0c\u5f53 dubbo:service \u6ca1\u6709\u914d\u7f6eregistry\u5c5e\u6027\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider registry= xxx1 /","title":"\u6269\u5c55\u914d\u7f6e"},{"location":"dev/impls/registry/#_5","text":"RegistryFactory.java\uff1a public interface RegistryFactory { /** * \u8fde\u63a5\u6ce8\u518c\u4e2d\u5fc3. * * \u8fde\u63a5\u6ce8\u518c\u4e2d\u5fc3\u9700\u5904\u7406\u5951\u7ea6\uff1a br * 1. \u5f53\u8bbe\u7f6echeck=false\u65f6\u8868\u793a\u4e0d\u68c0\u67e5\u8fde\u63a5\uff0c\u5426\u5219\u5728\u8fde\u63a5\u4e0d\u4e0a\u65f6\u629b\u51fa\u5f02\u5e38\u3002 br * 2. \u652f\u6301URL\u4e0a\u7684username:password\u6743\u9650\u8ba4\u8bc1\u3002 br * 3. \u652f\u6301backup=10.20.153.10\u5907\u9009\u6ce8\u518c\u4e2d\u5fc3\u96c6\u7fa4\u5730\u5740\u3002 br * 4. \u652f\u6301file=registry.cache\u672c\u5730\u78c1\u76d8\u6587\u4ef6\u7f13\u5b58\u3002 br * 5. \u652f\u6301timeout=1000\u8bf7\u6c42\u8d85\u65f6\u8bbe\u7f6e\u3002 br * 6. \u652f\u6301session=60000\u4f1a\u8bdd\u8d85\u65f6\u6216\u8fc7\u671f\u8bbe\u7f6e\u3002 br * * @param url \u6ce8\u518c\u4e2d\u5fc3\u5730\u5740\uff0c\u4e0d\u5141\u8bb8\u4e3a\u7a7a * @return \u6ce8\u518c\u4e2d\u5fc3\u5f15\u7528\uff0c\u603b\u4e0d\u8fd4\u56de\u7a7a */ Registry getRegistry(URL url); } RegistryService.java\uff1a public interface RegistryService { // Registry extends RegistryService /** * \u6ce8\u518c\u670d\u52a1. * * \u6ce8\u518c\u9700\u5904\u7406\u5951\u7ea6\uff1a br * 1. \u5f53URL\u8bbe\u7f6e\u4e86check=false\u65f6\uff0c\u6ce8\u518c\u5931\u8d25\u540e\u4e0d\u62a5\u9519\uff0c\u5728\u540e\u53f0\u5b9a\u65f6\u91cd\u8bd5\uff0c\u5426\u5219\u629b\u51fa\u5f02\u5e38\u3002 br * 2. \u5f53URL\u8bbe\u7f6e\u4e86dynamic=false\u53c2\u6570\uff0c\u5219\u9700\u6301\u4e45\u5b58\u50a8\uff0c\u5426\u5219\uff0c\u5f53\u6ce8\u518c\u8005\u51fa\u73b0\u65ad\u7535\u7b49\u60c5\u51b5\u5f02\u5e38\u9000\u51fa\u65f6\uff0c\u9700\u81ea\u52a8\u5220\u9664\u3002 br * 3. \u5f53URL\u8bbe\u7f6e\u4e86category=overrides\u65f6\uff0c\u8868\u793a\u5206\u7c7b\u5b58\u50a8\uff0c\u7f3a\u7701\u7c7b\u522b\u4e3aproviders\uff0c\u53ef\u6309\u5206\u7c7b\u90e8\u5206\u901a\u77e5\u6570\u636e\u3002 br * 4. \u5f53\u6ce8\u518c\u4e2d\u5fc3\u91cd\u542f\uff0c\u7f51\u7edc\u6296\u52a8\uff0c\u4e0d\u80fd\u4e22\u5931\u6570\u636e\uff0c\u5305\u62ec\u65ad\u7ebf\u81ea\u52a8\u5220\u9664\u6570\u636e\u3002 br * 5. \u5141\u8bb8URI\u76f8\u540c\u4f46\u53c2\u6570\u4e0d\u540c\u7684URL\u5e76\u5b58\uff0c\u4e0d\u80fd\u8986\u76d6\u3002 br * * @param url \u6ce8\u518c\u4fe1\u606f\uff0c\u4e0d\u5141\u8bb8\u4e3a\u7a7a\uff0c\u5982\uff1adubbo://10.20.153.10/com.alibaba.foo.BarService?version=1.0.0 application=kylin */ void register(URL url); /** * \u53d6\u6d88\u6ce8\u518c\u670d\u52a1. * * \u53d6\u6d88\u6ce8\u518c\u9700\u5904\u7406\u5951\u7ea6\uff1a br * 1. \u5982\u679c\u662fdynamic=false\u7684\u6301\u4e45\u5b58\u50a8\u6570\u636e\uff0c\u627e\u4e0d\u5230\u6ce8\u518c\u6570\u636e\uff0c\u5219\u629bIllegalStateException\uff0c\u5426\u5219\u5ffd\u7565\u3002 br * 2. \u6309\u5168URL\u5339\u914d\u53d6\u6d88\u6ce8\u518c\u3002 br * * @param url \u6ce8\u518c\u4fe1\u606f\uff0c\u4e0d\u5141\u8bb8\u4e3a\u7a7a\uff0c\u5982\uff1adubbo://10.20.153.10/com.alibaba.foo.BarService?version=1.0.0 application=kylin */ void unregister(URL url); /** * \u8ba2\u9605\u670d\u52a1. * * \u8ba2\u9605\u9700\u5904\u7406\u5951\u7ea6\uff1a br * 1. \u5f53URL\u8bbe\u7f6e\u4e86check=false\u65f6\uff0c\u8ba2\u9605\u5931\u8d25\u540e\u4e0d\u62a5\u9519\uff0c\u5728\u540e\u53f0\u5b9a\u65f6\u91cd\u8bd5\u3002 br * 2. \u5f53URL\u8bbe\u7f6e\u4e86category=overrides\uff0c\u53ea\u901a\u77e5\u6307\u5b9a\u5206\u7c7b\u7684\u6570\u636e\uff0c\u591a\u4e2a\u5206\u7c7b\u7528\u9017\u53f7\u5206\u9694\uff0c\u5e76\u5141\u8bb8\u661f\u53f7\u901a\u914d\uff0c\u8868\u793a\u8ba2\u9605\u6240\u6709\u5206\u7c7b\u6570\u636e\u3002 br * 3. \u5141\u8bb8\u4ee5interface,group,version,classifier\u4f5c\u4e3a\u6761\u4ef6\u67e5\u8be2\uff0c\u5982\uff1ainterface=com.alibaba.foo.BarService version=1.0.0 br * 4. \u5e76\u4e14\u67e5\u8be2\u6761\u4ef6\u5141\u8bb8\u661f\u53f7\u901a\u914d\uff0c\u8ba2\u9605\u6240\u6709\u63a5\u53e3\u7684\u6240\u6709\u5206\u7ec4\u7684\u6240\u6709\u7248\u672c\uff0c\u6216\uff1ainterface=* group=* version=* classifier=* br * 5. \u5f53\u6ce8\u518c\u4e2d\u5fc3\u91cd\u542f\uff0c\u7f51\u7edc\u6296\u52a8\uff0c\u9700\u81ea\u52a8\u6062\u590d\u8ba2\u9605\u8bf7\u6c42\u3002 br * 6. \u5141\u8bb8URI\u76f8\u540c\u4f46\u53c2\u6570\u4e0d\u540c\u7684URL\u5e76\u5b58\uff0c\u4e0d\u80fd\u8986\u76d6\u3002 br * 7. \u5fc5\u987b\u963b\u585e\u8ba2\u9605\u8fc7\u7a0b\uff0c\u7b49\u7b2c\u4e00\u6b21\u901a\u77e5\u5b8c\u540e\u518d\u8fd4\u56de\u3002 br * * @param url \u8ba2\u9605\u6761\u4ef6\uff0c\u4e0d\u5141\u8bb8\u4e3a\u7a7a\uff0c\u5982\uff1aconsumer://10.20.153.10/com.alibaba.foo.BarService?version=1.0.0 application=kylin * @param listener \u53d8\u66f4\u4e8b\u4ef6\u76d1\u542c\u5668\uff0c\u4e0d\u5141\u8bb8\u4e3a\u7a7a */ void subscribe(URL url, NotifyListener listener); /** * \u53d6\u6d88\u8ba2\u9605\u670d\u52a1. * * \u53d6\u6d88\u8ba2\u9605\u9700\u5904\u7406\u5951\u7ea6\uff1a br * 1. \u5982\u679c\u6ca1\u6709\u8ba2\u9605\uff0c\u76f4\u63a5\u5ffd\u7565\u3002 br * 2. \u6309\u5168URL\u5339\u914d\u53d6\u6d88\u8ba2\u9605\u3002 br * * @param url \u8ba2\u9605\u6761\u4ef6\uff0c\u4e0d\u5141\u8bb8\u4e3a\u7a7a\uff0c\u5982\uff1aconsumer://10.20.153.10/com.alibaba.foo.BarService?version=1.0.0 application=kylin * @param listener \u53d8\u66f4\u4e8b\u4ef6\u76d1\u542c\u5668\uff0c\u4e0d\u5141\u8bb8\u4e3a\u7a7a */ void unsubscribe(URL url, NotifyListener listener); /** * \u67e5\u8be2\u6ce8\u518c\u5217\u8868\uff0c\u4e0e\u8ba2\u9605\u7684\u63a8\u6a21\u5f0f\u76f8\u5bf9\u5e94\uff0c\u8fd9\u91cc\u4e3a\u62c9\u6a21\u5f0f\uff0c\u53ea\u8fd4\u56de\u4e00\u6b21\u7ed3\u679c\u3002 * * @see org.apache.dubbo.registry.NotifyListener#notify(List) * @param url \u67e5\u8be2\u6761\u4ef6\uff0c\u4e0d\u5141\u8bb8\u4e3a\u7a7a\uff0c\u5982\uff1aconsumer://10.20.153.10/com.alibaba.foo.BarService?version=1.0.0 application=kylin * @return \u5df2\u6ce8\u518c\u4fe1\u606f\u5217\u8868\uff0c\u53ef\u80fd\u4e3a\u7a7a\uff0c\u542b\u4e49\u540c{@link org.apache.dubbo.registry.NotifyListener#notify(List URL )}\u7684\u53c2\u6570\u3002 */ List URL lookup(URL url); } NotifyListener.java\uff1a public interface NotifyListener { /** * \u5f53\u6536\u5230\u670d\u52a1\u53d8\u66f4\u901a\u77e5\u65f6\u89e6\u53d1\u3002 * * \u901a\u77e5\u9700\u5904\u7406\u5951\u7ea6\uff1a br * 1. \u603b\u662f\u4ee5\u670d\u52a1\u63a5\u53e3\u548c\u6570\u636e\u7c7b\u578b\u4e3a\u7ef4\u5ea6\u5168\u91cf\u901a\u77e5\uff0c\u5373\u4e0d\u4f1a\u901a\u77e5\u4e00\u4e2a\u670d\u52a1\u7684\u540c\u7c7b\u578b\u7684\u90e8\u5206\u6570\u636e\uff0c\u7528\u6237\u4e0d\u9700\u8981\u5bf9\u6bd4\u4e0a\u4e00\u6b21\u901a\u77e5\u7ed3\u679c\u3002 br * 2. \u8ba2\u9605\u65f6\u7684\u7b2c\u4e00\u6b21\u901a\u77e5\uff0c\u5fc5\u987b\u662f\u4e00\u4e2a\u670d\u52a1\u7684\u6240\u6709\u7c7b\u578b\u6570\u636e\u7684\u5168\u91cf\u901a\u77e5\u3002 br * 3. \u4e2d\u9014\u53d8\u66f4\u65f6\uff0c\u5141\u8bb8\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u5206\u5f00\u901a\u77e5\uff0c\u6bd4\u5982\uff1aproviders, consumers, routes, overrides\uff0c\u5141\u8bb8\u53ea\u901a\u77e5\u5176\u4e2d\u4e00\u79cd\u7c7b\u578b\uff0c\u4f46\u8be5\u7c7b\u578b\u7684\u6570\u636e\u5fc5\u987b\u662f\u5168\u91cf\u7684\uff0c\u4e0d\u662f\u589e\u91cf\u7684\u3002 br * 4. \u5982\u679c\u4e00\u79cd\u7c7b\u578b\u7684\u6570\u636e\u4e3a\u7a7a\uff0c\u9700\u901a\u77e5\u4e00\u4e2aempty\u534f\u8bae\u5e76\u5e26category\u53c2\u6570\u7684\u6807\u8bc6\u6027URL\u6570\u636e\u3002 br * 5. \u901a\u77e5\u8005(\u5373\u6ce8\u518c\u4e2d\u5fc3\u5b9e\u73b0)\u9700\u4fdd\u8bc1\u901a\u77e5\u7684\u987a\u5e8f\uff0c\u6bd4\u5982\uff1a\u5355\u7ebf\u7a0b\u63a8\u9001\uff0c\u961f\u5217\u4e32\u884c\u5316\uff0c\u5e26\u7248\u672c\u5bf9\u6bd4\u3002 br * * @param urls \u5df2\u6ce8\u518c\u4fe1\u606f\u5217\u8868\uff0c\u603b\u4e0d\u4e3a\u7a7a\uff0c\u542b\u4e49\u540c{@link org.apache.dubbo.registry.RegistryService#lookup(URL)}\u7684\u8fd4\u56de\u503c\u3002 */ void notify(List URL urls); }","title":"\u6269\u5c55\u5951\u7ea6"},{"location":"dev/impls/registry/#_6","text":"org.apache.dubbo.registry.support.dubbo.DubboRegistryFactory","title":"\u5df2\u77e5\u6269\u5c55"},{"location":"dev/impls/registry/#_7","text":"Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxRegistryFactoryjava (\u5b9e\u73b0RegistryFactory\u63a5\u53e3) |-XxxRegistry.java (\u5b9e\u73b0Registry\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.registry.RegistryFactory (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxRegistryFactory) XxxRegistryFactory.java\uff1a package com.xxx; import org.apache.dubbo.registry.RegistryFactory; import org.apache.dubbo.registry.Registry; import org.apache.dubbo.common.URL; public class XxxRegistryFactory implements RegistryFactory { public Registry getRegistry(URL url) { return new XxxRegistry(url); } } XxxRegistry.java\uff1a package com.xxx; import org.apache.dubbo.registry.Registry; import org.apache.dubbo.registry.NotifyListener; import org.apache.dubbo.common.URL; public class XxxRegistry implements Registry { public void register(URL url) { // ... } public void unregister(URL url) { // ... } public void subscribe(URL url, NotifyListener listener) { // ... } public void unsubscribe(URL url, NotifyListener listener) { // ... } } META-INF/dubbo/org.apache.dubbo.registry.RegistryFactory\uff1a xxx=com.xxx.XxxRegistryFactory","title":"\u6269\u5c55\u793a\u4f8b"},{"location":"dev/impls/remoting/","text":"\u7f51\u7edc\u4f20\u8f93\u6269\u5c55 \u6269\u5c55\u8bf4\u660e \u8fdc\u7a0b\u901a\u8baf\u7684\u670d\u52a1\u5668\u53ca\u5ba2\u6237\u7aef\u4f20\u8f93\u5b9e\u73b0\u3002 \u6269\u5c55\u63a5\u53e3 org.apache.dubbo.remoting.Transporter org.apache.dubbo.remoting.Server org.apache.dubbo.remoting.Client \u6269\u5c55\u914d\u7f6e !-- \u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u4f7f\u7528\u76f8\u540c\u7684\u4f20\u8f93\u5b9e\u73b0 -- dubbo:protocol transporter= xxx / !-- \u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u4f7f\u7528\u4e0d\u540c\u7684\u4f20\u8f93\u5b9e\u73b0 -- dubbo:protocol server= xxx client= xxx / !-- \u7f3a\u7701\u503c\u8bbe\u7f6e\uff0c\u5f53 dubbo:protocol \u6ca1\u6709\u914d\u7f6etransporter/server/client\u5c5e\u6027\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider transporter= xxx server= xxx client= xxx / \u5df2\u77e5\u6269\u5c55 org.apache.dubbo.remoting.transport.transporter.netty.NettyTransporter org.apache.dubbo.remoting.transport.transporter.mina.MinaTransporter org.apache.dubbo.remoting.transport.transporter.grizzly.GrizzlyTransporter \u6269\u5c55\u793a\u4f8b Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxTransporter.java (\u5b9e\u73b0Transporter\u63a5\u53e3) |-XxxServer.java (\u5b9e\u73b0Server\u63a5\u53e3) |-XxxClient.java (\u5b9e\u73b0Client\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.remoting.Transporter (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxTransporter) XxxTransporter.java\uff1a package com.xxx; import org.apache.dubbo.remoting.Transporter; public class XxxTransporter implements Transporter { public Server bind(URL url, ChannelHandler handler) throws RemotingException { return new XxxServer(url, handler); } public Client connect(URL url, ChannelHandler handler) throws RemotingException { return new XxxClient(url, handler); } } XxxServer.java\uff1a package com.xxx; import org.apache.dubbo.remoting.transport.transporter.AbstractServer; public class XxxServer extends AbstractServer { public XxxServer(URL url, ChannelHandler handler) throws RemotingException{ super(url, handler); } protected void doOpen() throws Throwable { // ... } protected void doClose() throws Throwable { // ... } public Collection Channel getChannels() { // ... } public Channel getChannel(InetSocketAddress remoteAddress) { // ... } } XxxClient.java\uff1a package com.xxx; import org.apache.dubbo.remoting.transport.transporter.AbstractClient; public class XxxClient extends AbstractClient { public XxxServer(URL url, ChannelHandler handler) throws RemotingException{ super(url, handler); } protected void doOpen() throws Throwable { // ... } protected void doClose() throws Throwable { // ... } protected void doConnect() throws Throwable { // ... } public Channel getChannel() { // ... } } META-INF/dubbo/org.apache.dubbo.remoting.Transporter\uff1a xxx=com.xxx.XxxTransporter","title":"\u7f51\u7edc\u4f20\u8f93\u6269\u5c55"},{"location":"dev/impls/remoting/#_1","text":"","title":"\u7f51\u7edc\u4f20\u8f93\u6269\u5c55"},{"location":"dev/impls/remoting/#_2","text":"\u8fdc\u7a0b\u901a\u8baf\u7684\u670d\u52a1\u5668\u53ca\u5ba2\u6237\u7aef\u4f20\u8f93\u5b9e\u73b0\u3002","title":"\u6269\u5c55\u8bf4\u660e"},{"location":"dev/impls/remoting/#_3","text":"org.apache.dubbo.remoting.Transporter org.apache.dubbo.remoting.Server org.apache.dubbo.remoting.Client","title":"\u6269\u5c55\u63a5\u53e3"},{"location":"dev/impls/remoting/#_4","text":"!-- \u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u4f7f\u7528\u76f8\u540c\u7684\u4f20\u8f93\u5b9e\u73b0 -- dubbo:protocol transporter= xxx / !-- \u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u4f7f\u7528\u4e0d\u540c\u7684\u4f20\u8f93\u5b9e\u73b0 -- dubbo:protocol server= xxx client= xxx / !-- \u7f3a\u7701\u503c\u8bbe\u7f6e\uff0c\u5f53 dubbo:protocol \u6ca1\u6709\u914d\u7f6etransporter/server/client\u5c5e\u6027\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider transporter= xxx server= xxx client= xxx /","title":"\u6269\u5c55\u914d\u7f6e"},{"location":"dev/impls/remoting/#_5","text":"org.apache.dubbo.remoting.transport.transporter.netty.NettyTransporter org.apache.dubbo.remoting.transport.transporter.mina.MinaTransporter org.apache.dubbo.remoting.transport.transporter.grizzly.GrizzlyTransporter","title":"\u5df2\u77e5\u6269\u5c55"},{"location":"dev/impls/remoting/#_6","text":"Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxTransporter.java (\u5b9e\u73b0Transporter\u63a5\u53e3) |-XxxServer.java (\u5b9e\u73b0Server\u63a5\u53e3) |-XxxClient.java (\u5b9e\u73b0Client\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.remoting.Transporter (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxTransporter) XxxTransporter.java\uff1a package com.xxx; import org.apache.dubbo.remoting.Transporter; public class XxxTransporter implements Transporter { public Server bind(URL url, ChannelHandler handler) throws RemotingException { return new XxxServer(url, handler); } public Client connect(URL url, ChannelHandler handler) throws RemotingException { return new XxxClient(url, handler); } } XxxServer.java\uff1a package com.xxx; import org.apache.dubbo.remoting.transport.transporter.AbstractServer; public class XxxServer extends AbstractServer { public XxxServer(URL url, ChannelHandler handler) throws RemotingException{ super(url, handler); } protected void doOpen() throws Throwable { // ... } protected void doClose() throws Throwable { // ... } public Collection Channel getChannels() { // ... } public Channel getChannel(InetSocketAddress remoteAddress) { // ... } } XxxClient.java\uff1a package com.xxx; import org.apache.dubbo.remoting.transport.transporter.AbstractClient; public class XxxClient extends AbstractClient { public XxxServer(URL url, ChannelHandler handler) throws RemotingException{ super(url, handler); } protected void doOpen() throws Throwable { // ... } protected void doClose() throws Throwable { // ... } protected void doConnect() throws Throwable { // ... } public Channel getChannel() { // ... } } META-INF/dubbo/org.apache.dubbo.remoting.Transporter\uff1a xxx=com.xxx.XxxTransporter","title":"\u6269\u5c55\u793a\u4f8b"},{"location":"dev/impls/router/","text":"\u8def\u7531\u6269\u5c55 \u6269\u5c55\u8bf4\u660e \u4ece\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u65b9\u4e2d\u9009\u62e9\u4e00\u4e2a\u8fdb\u884c\u8c03\u7528\u3002 \u6269\u5c55\u63a5\u53e3 org.apache.dubbo.rpc.cluster.RouterFactory org.apache.dubbo.rpc.cluster.Router \u5df2\u77e5\u6269\u5c55 org.apache.dubbo.rpc.cluster.router.ScriptRouterFactory org.apache.dubbo.rpc.cluster.router.FileRouterFactory \u6269\u5c55\u793a\u4f8b Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxRouterFactory.java (\u5b9e\u73b0RouterFactory\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.cluster.RouterFactory (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxRouterFactory) XxxRouterFactory.java\uff1a package com.xxx; import org.apache.dubbo.rpc.cluster.RouterFactory; import org.apache.dubbo.rpc.Invoker; import org.apache.dubbo.rpc.Invocation; import org.apache.dubbo.rpc.RpcException; public class XxxRouterFactory implements RouterFactory { public T List Invoker T select(List Invoker T invokers, Invocation invocation) throws RpcException { // ... } } META-INF/dubbo/org.apache.dubbo.rpc.cluster.RouterFactory\uff1a xxx=com.xxx.XxxRouterFactory","title":"\u8def\u7531\u6269\u5c55"},{"location":"dev/impls/router/#_1","text":"","title":"\u8def\u7531\u6269\u5c55"},{"location":"dev/impls/router/#_2","text":"\u4ece\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u65b9\u4e2d\u9009\u62e9\u4e00\u4e2a\u8fdb\u884c\u8c03\u7528\u3002","title":"\u6269\u5c55\u8bf4\u660e"},{"location":"dev/impls/router/#_3","text":"org.apache.dubbo.rpc.cluster.RouterFactory org.apache.dubbo.rpc.cluster.Router","title":"\u6269\u5c55\u63a5\u53e3"},{"location":"dev/impls/router/#_4","text":"org.apache.dubbo.rpc.cluster.router.ScriptRouterFactory org.apache.dubbo.rpc.cluster.router.FileRouterFactory","title":"\u5df2\u77e5\u6269\u5c55"},{"location":"dev/impls/router/#_5","text":"Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxRouterFactory.java (\u5b9e\u73b0RouterFactory\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.cluster.RouterFactory (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxRouterFactory) XxxRouterFactory.java\uff1a package com.xxx; import org.apache.dubbo.rpc.cluster.RouterFactory; import org.apache.dubbo.rpc.Invoker; import org.apache.dubbo.rpc.Invocation; import org.apache.dubbo.rpc.RpcException; public class XxxRouterFactory implements RouterFactory { public T List Invoker T select(List Invoker T invokers, Invocation invocation) throws RpcException { // ... } } META-INF/dubbo/org.apache.dubbo.rpc.cluster.RouterFactory\uff1a xxx=com.xxx.XxxRouterFactory","title":"\u6269\u5c55\u793a\u4f8b"},{"location":"dev/impls/serialize/","text":"\u5e8f\u5217\u5316\u6269\u5c55 \u6269\u5c55\u8bf4\u660e \u5c06\u5bf9\u8c61\u8f6c\u6210\u5b57\u8282\u6d41\uff0c\u7528\u4e8e\u7f51\u7edc\u4f20\u8f93\uff0c\u4ee5\u53ca\u5c06\u5b57\u8282\u6d41\u8f6c\u4e3a\u5bf9\u8c61\uff0c\u7528\u4e8e\u5728\u6536\u5230\u5b57\u8282\u6d41\u6570\u636e\u540e\u8fd8\u539f\u6210\u5bf9\u8c61\u3002 \u6269\u5c55\u63a5\u53e3 org.apache.dubbo.common.serialize.Serialization org.apache.dubbo.common.serialize.ObjectInput org.apache.dubbo.common.serialize.ObjectOutput \u6269\u5c55\u914d\u7f6e !-- \u534f\u8bae\u7684\u5e8f\u5217\u5316\u65b9\u5f0f -- dubbo:protocol serialization= xxx / !-- \u7f3a\u7701\u503c\u8bbe\u7f6e\uff0c\u5f53 dubbo:protocol \u6ca1\u6709\u914d\u7f6eserialization\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider serialization= xxx / \u5df2\u77e5\u6269\u5c55 org.apache.dubbo.common.serialize.dubbo.DubboSerialization org.apache.dubbo.common.serialize.hessian.Hessian2Serialization org.apache.dubbo.common.serialize.java.JavaSerialization org.apache.dubbo.common.serialize.java.CompactedJavaSerialization \u6269\u5c55\u793a\u4f8b Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxSerialization.java (\u5b9e\u73b0Serialization\u63a5\u53e3) |-XxxObjectInput.java (\u5b9e\u73b0ObjectInput\u63a5\u53e3) |-XxxObjectOutput.java (\u5b9e\u73b0ObjectOutput\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.serialize.Serialization (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxSerialization) XxxSerialization.java\uff1a package com.xxx; import org.apache.dubbo.common.serialize.Serialization; import org.apache.dubbo.common.serialize.ObjectInput; import org.apache.dubbo.common.serialize.ObjectOutput; public class XxxSerialization implements Serialization { public ObjectOutput serialize(Parameters parameters, OutputStream output) throws IOException { return new XxxObjectOutput(output); } public ObjectInput deserialize(Parameters parameters, InputStream input) throws IOException { return new XxxObjectInput(input); } } META-INF/dubbo/org.apache.dubbo.common.serialize.Serialization\uff1a xxx=com.xxx.XxxSerialization","title":"\u5e8f\u5217\u5316\u6269\u5c55"},{"location":"dev/impls/serialize/#_1","text":"","title":"\u5e8f\u5217\u5316\u6269\u5c55"},{"location":"dev/impls/serialize/#_2","text":"\u5c06\u5bf9\u8c61\u8f6c\u6210\u5b57\u8282\u6d41\uff0c\u7528\u4e8e\u7f51\u7edc\u4f20\u8f93\uff0c\u4ee5\u53ca\u5c06\u5b57\u8282\u6d41\u8f6c\u4e3a\u5bf9\u8c61\uff0c\u7528\u4e8e\u5728\u6536\u5230\u5b57\u8282\u6d41\u6570\u636e\u540e\u8fd8\u539f\u6210\u5bf9\u8c61\u3002","title":"\u6269\u5c55\u8bf4\u660e"},{"location":"dev/impls/serialize/#_3","text":"org.apache.dubbo.common.serialize.Serialization org.apache.dubbo.common.serialize.ObjectInput org.apache.dubbo.common.serialize.ObjectOutput","title":"\u6269\u5c55\u63a5\u53e3"},{"location":"dev/impls/serialize/#_4","text":"!-- \u534f\u8bae\u7684\u5e8f\u5217\u5316\u65b9\u5f0f -- dubbo:protocol serialization= xxx / !-- \u7f3a\u7701\u503c\u8bbe\u7f6e\uff0c\u5f53 dubbo:protocol \u6ca1\u6709\u914d\u7f6eserialization\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider serialization= xxx /","title":"\u6269\u5c55\u914d\u7f6e"},{"location":"dev/impls/serialize/#_5","text":"org.apache.dubbo.common.serialize.dubbo.DubboSerialization org.apache.dubbo.common.serialize.hessian.Hessian2Serialization org.apache.dubbo.common.serialize.java.JavaSerialization org.apache.dubbo.common.serialize.java.CompactedJavaSerialization","title":"\u5df2\u77e5\u6269\u5c55"},{"location":"dev/impls/serialize/#_6","text":"Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxSerialization.java (\u5b9e\u73b0Serialization\u63a5\u53e3) |-XxxObjectInput.java (\u5b9e\u73b0ObjectInput\u63a5\u53e3) |-XxxObjectOutput.java (\u5b9e\u73b0ObjectOutput\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.serialize.Serialization (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxSerialization) XxxSerialization.java\uff1a package com.xxx; import org.apache.dubbo.common.serialize.Serialization; import org.apache.dubbo.common.serialize.ObjectInput; import org.apache.dubbo.common.serialize.ObjectOutput; public class XxxSerialization implements Serialization { public ObjectOutput serialize(Parameters parameters, OutputStream output) throws IOException { return new XxxObjectOutput(output); } public ObjectInput deserialize(Parameters parameters, InputStream input) throws IOException { return new XxxObjectInput(input); } } META-INF/dubbo/org.apache.dubbo.common.serialize.Serialization\uff1a xxx=com.xxx.XxxSerialization","title":"\u6269\u5c55\u793a\u4f8b"},{"location":"dev/impls/status-checker/","text":"\u72b6\u6001\u68c0\u67e5\u6269\u5c55 \u6269\u5c55\u8bf4\u660e \u68c0\u67e5\u670d\u52a1\u4f9d\u8d56\u5404\u79cd\u8d44\u6e90\u7684\u72b6\u6001\uff0c\u6b64\u72b6\u6001\u68c0\u67e5\u53ef\u540c\u65f6\u7528\u4e8e telnet \u7684 status \u547d\u4ee4\u548c hosting \u7684 status \u9875\u9762\u3002 \u6269\u5c55\u63a5\u53e3 org.apache.dubbo.common.status.StatusChecker \u6269\u5c55\u914d\u7f6e dubbo:protocol status= xxx,yyy / !-- \u7f3a\u7701\u503c\u8bbe\u7f6e\uff0c\u5f53 dubbo:protocol \u6ca1\u6709\u914d\u7f6estatus\u5c5e\u6027\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider status= xxx,yyy / \u5df2\u77e5\u6269\u5c55 org.apache.dubbo.common.status.support.MemoryStatusChecker org.apache.dubbo.common.status.support.LoadStatusChecker org.apache.dubbo.rpc.dubbo.status.ServerStatusChecker org.apache.dubbo.rpc.dubbo.status.ThreadPoolStatusChecker org.apache.dubbo.registry.directory.RegistryStatusChecker org.apache.dubbo.rpc.config.spring.status.SpringStatusChecker org.apache.dubbo.rpc.config.spring.status.DataSourceStatusChecker \u6269\u5c55\u793a\u4f8b Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxStatusChecker.java (\u5b9e\u73b0StatusChecker\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.status.StatusChecker (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxStatusChecker) XxxStatusChecker.java\uff1a package com.xxx; import org.apache.dubbo.common.status.StatusChecker; public class XxxStatusChecker implements StatusChecker { public Status check() { // ... } } META-INF/dubbo/org.apache.dubbo.common.status.StatusChecker\uff1a xxx=com.xxx.XxxStatusChecker","title":"\u72b6\u6001\u68c0\u67e5\u6269\u5c55"},{"location":"dev/impls/status-checker/#_1","text":"","title":"\u72b6\u6001\u68c0\u67e5\u6269\u5c55"},{"location":"dev/impls/status-checker/#_2","text":"\u68c0\u67e5\u670d\u52a1\u4f9d\u8d56\u5404\u79cd\u8d44\u6e90\u7684\u72b6\u6001\uff0c\u6b64\u72b6\u6001\u68c0\u67e5\u53ef\u540c\u65f6\u7528\u4e8e telnet \u7684 status \u547d\u4ee4\u548c hosting \u7684 status \u9875\u9762\u3002","title":"\u6269\u5c55\u8bf4\u660e"},{"location":"dev/impls/status-checker/#_3","text":"org.apache.dubbo.common.status.StatusChecker","title":"\u6269\u5c55\u63a5\u53e3"},{"location":"dev/impls/status-checker/#_4","text":"dubbo:protocol status= xxx,yyy / !-- \u7f3a\u7701\u503c\u8bbe\u7f6e\uff0c\u5f53 dubbo:protocol \u6ca1\u6709\u914d\u7f6estatus\u5c5e\u6027\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider status= xxx,yyy /","title":"\u6269\u5c55\u914d\u7f6e"},{"location":"dev/impls/status-checker/#_5","text":"org.apache.dubbo.common.status.support.MemoryStatusChecker org.apache.dubbo.common.status.support.LoadStatusChecker org.apache.dubbo.rpc.dubbo.status.ServerStatusChecker org.apache.dubbo.rpc.dubbo.status.ThreadPoolStatusChecker org.apache.dubbo.registry.directory.RegistryStatusChecker org.apache.dubbo.rpc.config.spring.status.SpringStatusChecker org.apache.dubbo.rpc.config.spring.status.DataSourceStatusChecker","title":"\u5df2\u77e5\u6269\u5c55"},{"location":"dev/impls/status-checker/#_6","text":"Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxStatusChecker.java (\u5b9e\u73b0StatusChecker\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.status.StatusChecker (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxStatusChecker) XxxStatusChecker.java\uff1a package com.xxx; import org.apache.dubbo.common.status.StatusChecker; public class XxxStatusChecker implements StatusChecker { public Status check() { // ... } } META-INF/dubbo/org.apache.dubbo.common.status.StatusChecker\uff1a xxx=com.xxx.XxxStatusChecker","title":"\u6269\u5c55\u793a\u4f8b"},{"location":"dev/impls/telnet-handler/","text":"Telnet \u547d\u4ee4\u6269\u5c55 \u6269\u5c55\u8bf4\u660e \u6240\u6709\u670d\u52a1\u5668\u5747\u652f\u6301 telnet \u8bbf\u95ee\uff0c\u7528\u4e8e\u4eba\u5de5\u5e72\u9884\u3002 \u6269\u5c55\u63a5\u53e3 org.apache.dubbo.remoting.telnet.TelnetHandler \u6269\u5c55\u914d\u7f6e dubbo:protocol telnet= xxx,yyy / !-- \u7f3a\u7701\u503c\u8bbe\u7f6e\uff0c\u5f53 dubbo:protocol \u6ca1\u6709\u914d\u7f6etelnet\u5c5e\u6027\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider telnet= xxx,yyy / \u5df2\u77e5\u6269\u5c55 org.apache.dubbo.remoting.telnet.support.ClearTelnetHandler org.apache.dubbo.remoting.telnet.support.ExitTelnetHandler org.apache.dubbo.remoting.telnet.support.HelpTelnetHandler org.apache.dubbo.remoting.telnet.support.StatusTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.ListTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.ChangeTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.CurrentTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.InvokeTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.TraceTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.CountTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.PortTelnetHandler \u6269\u5c55\u793a\u4f8b Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxTelnetHandler.java (\u5b9e\u73b0TelnetHandler\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.remoting.telnet.TelnetHandler (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxTelnetHandler) XxxTelnetHandler.java\uff1a package com.xxx; import org.apache.dubbo.remoting.telnet.TelnetHandler; @Help(parameter= ... , summary= ... , detail= ... ) public class XxxTelnetHandler implements TelnetHandler { public String telnet(Channel channel, String message) throws RemotingException { // ... } } META-INF/dubbo/org.apache.dubbo.remoting.telnet.TelnetHandler\uff1a xxx=com.xxx.XxxTelnetHandler \u7528\u6cd5 telnet 127.0.0.1 20880 dubbo xxx args","title":"Telnet \u547d\u4ee4\u6269\u5c55"},{"location":"dev/impls/telnet-handler/#telnet","text":"","title":"Telnet \u547d\u4ee4\u6269\u5c55"},{"location":"dev/impls/telnet-handler/#_1","text":"\u6240\u6709\u670d\u52a1\u5668\u5747\u652f\u6301 telnet \u8bbf\u95ee\uff0c\u7528\u4e8e\u4eba\u5de5\u5e72\u9884\u3002","title":"\u6269\u5c55\u8bf4\u660e"},{"location":"dev/impls/telnet-handler/#_2","text":"org.apache.dubbo.remoting.telnet.TelnetHandler","title":"\u6269\u5c55\u63a5\u53e3"},{"location":"dev/impls/telnet-handler/#_3","text":"dubbo:protocol telnet= xxx,yyy / !-- \u7f3a\u7701\u503c\u8bbe\u7f6e\uff0c\u5f53 dubbo:protocol \u6ca1\u6709\u914d\u7f6etelnet\u5c5e\u6027\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider telnet= xxx,yyy /","title":"\u6269\u5c55\u914d\u7f6e"},{"location":"dev/impls/telnet-handler/#_4","text":"org.apache.dubbo.remoting.telnet.support.ClearTelnetHandler org.apache.dubbo.remoting.telnet.support.ExitTelnetHandler org.apache.dubbo.remoting.telnet.support.HelpTelnetHandler org.apache.dubbo.remoting.telnet.support.StatusTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.ListTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.ChangeTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.CurrentTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.InvokeTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.TraceTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.CountTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.PortTelnetHandler","title":"\u5df2\u77e5\u6269\u5c55"},{"location":"dev/impls/telnet-handler/#_5","text":"Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxTelnetHandler.java (\u5b9e\u73b0TelnetHandler\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.remoting.telnet.TelnetHandler (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxTelnetHandler) XxxTelnetHandler.java\uff1a package com.xxx; import org.apache.dubbo.remoting.telnet.TelnetHandler; @Help(parameter= ... , summary= ... , detail= ... ) public class XxxTelnetHandler implements TelnetHandler { public String telnet(Channel channel, String message) throws RemotingException { // ... } } META-INF/dubbo/org.apache.dubbo.remoting.telnet.TelnetHandler\uff1a xxx=com.xxx.XxxTelnetHandler","title":"\u6269\u5c55\u793a\u4f8b"},{"location":"dev/impls/telnet-handler/#_6","text":"telnet 127.0.0.1 20880 dubbo xxx args","title":"\u7528\u6cd5"},{"location":"dev/impls/threadpool/","text":"\u7ebf\u7a0b\u6c60\u6269\u5c55 \u6269\u5c55\u8bf4\u660e \u670d\u52a1\u63d0\u4f9b\u65b9\u7ebf\u7a0b\u6c60\u5b9e\u73b0\u7b56\u7565\uff0c\u5f53\u670d\u52a1\u5668\u6536\u5230\u4e00\u4e2a\u8bf7\u6c42\u65f6\uff0c\u9700\u8981\u5728\u7ebf\u7a0b\u6c60\u4e2d\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u53bb\u6267\u884c\u670d\u52a1\u63d0\u4f9b\u65b9\u4e1a\u52a1\u903b\u8f91\u3002 \u6269\u5c55\u63a5\u53e3 org.apache.dubbo.common.threadpool.ThreadPool \u6269\u5c55\u914d\u7f6e dubbo:protocol threadpool= xxx / !-- \u7f3a\u7701\u503c\u8bbe\u7f6e\uff0c\u5f53 dubbo:protocol \u6ca1\u6709\u914d\u7f6ethreadpool\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider threadpool= xxx / \u5df2\u77e5\u6269\u5c55 org.apache.dubbo.common.threadpool.FixedThreadPool org.apache.dubbo.common.threadpool.CachedThreadPool \u6269\u5c55\u793a\u4f8b Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxThreadPool.java (\u5b9e\u73b0ThreadPool\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.threadpool.ThreadPool (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxThreadPool) XxxThreadPool.java\uff1a package com.xxx; import org.apache.dubbo.common.threadpool.ThreadPool; import java.util.concurrent.Executor; public class XxxThreadPool implements ThreadPool { public Executor getExecutor() { // ... } } META-INF/dubbo/org.apache.dubbo.common.threadpool.ThreadPool\uff1a xxx=com.xxx.XxxThreadPool","title":"\u7ebf\u7a0b\u6c60\u6269\u5c55"},{"location":"dev/impls/threadpool/#_1","text":"","title":"\u7ebf\u7a0b\u6c60\u6269\u5c55"},{"location":"dev/impls/threadpool/#_2","text":"\u670d\u52a1\u63d0\u4f9b\u65b9\u7ebf\u7a0b\u6c60\u5b9e\u73b0\u7b56\u7565\uff0c\u5f53\u670d\u52a1\u5668\u6536\u5230\u4e00\u4e2a\u8bf7\u6c42\u65f6\uff0c\u9700\u8981\u5728\u7ebf\u7a0b\u6c60\u4e2d\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u53bb\u6267\u884c\u670d\u52a1\u63d0\u4f9b\u65b9\u4e1a\u52a1\u903b\u8f91\u3002","title":"\u6269\u5c55\u8bf4\u660e"},{"location":"dev/impls/threadpool/#_3","text":"org.apache.dubbo.common.threadpool.ThreadPool","title":"\u6269\u5c55\u63a5\u53e3"},{"location":"dev/impls/threadpool/#_4","text":"dubbo:protocol threadpool= xxx / !-- \u7f3a\u7701\u503c\u8bbe\u7f6e\uff0c\u5f53 dubbo:protocol \u6ca1\u6709\u914d\u7f6ethreadpool\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider threadpool= xxx /","title":"\u6269\u5c55\u914d\u7f6e"},{"location":"dev/impls/threadpool/#_5","text":"org.apache.dubbo.common.threadpool.FixedThreadPool org.apache.dubbo.common.threadpool.CachedThreadPool","title":"\u5df2\u77e5\u6269\u5c55"},{"location":"dev/impls/threadpool/#_6","text":"Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxThreadPool.java (\u5b9e\u73b0ThreadPool\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.threadpool.ThreadPool (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxThreadPool) XxxThreadPool.java\uff1a package com.xxx; import org.apache.dubbo.common.threadpool.ThreadPool; import java.util.concurrent.Executor; public class XxxThreadPool implements ThreadPool { public Executor getExecutor() { // ... } } META-INF/dubbo/org.apache.dubbo.common.threadpool.ThreadPool\uff1a xxx=com.xxx.XxxThreadPool","title":"\u6269\u5c55\u793a\u4f8b"},{"location":"dev/impls/validation/","text":"\u9a8c\u8bc1\u6269\u5c55 \u6269\u5c55\u8bf4\u660e \u53c2\u6570\u9a8c\u8bc1\u6269\u5c55\u70b9\u3002 \u6269\u5c55\u63a5\u53e3 org.apache.dubbo.validation.Validation \u6269\u5c55\u914d\u7f6e dubbo:service validation= xxx,yyy / !-- \u7f3a\u7701\u503c\u8bbe\u7f6e\uff0c\u5f53 dubbo:service \u6ca1\u6709\u914d\u7f6evalidation\u5c5e\u6027\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider validation= xxx,yyy / \u5df2\u77e5\u6269\u5c55 org.apache.dubbo.validation.support.jvalidation.JValidation \u6269\u5c55\u793a\u4f8b Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxValidation.java (\u5b9e\u73b0Validation\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.validation.Validation (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxValidation) XxxValidation.java\uff1a package com.xxx; import org.apache.dubbo.validation.Validation; public class XxxValidation implements Validation { public Object getValidator(URL url) { // ... } } XxxValidator.java\uff1a package com.xxx; import org.apache.dubbo.validation.Validator; public class XxxValidator implements Validator { public XxxValidator(URL url) { // ... } public void validate(Invocation invocation) throws Exception { // ... } } META-INF/dubbo/org.apache.dubbo.validation.Validation\uff1a xxx=com.xxx.XxxValidation","title":"\u9a8c\u8bc1\u6269\u5c55"},{"location":"dev/impls/validation/#_1","text":"","title":"\u9a8c\u8bc1\u6269\u5c55"},{"location":"dev/impls/validation/#_2","text":"\u53c2\u6570\u9a8c\u8bc1\u6269\u5c55\u70b9\u3002","title":"\u6269\u5c55\u8bf4\u660e"},{"location":"dev/impls/validation/#_3","text":"org.apache.dubbo.validation.Validation","title":"\u6269\u5c55\u63a5\u53e3"},{"location":"dev/impls/validation/#_4","text":"dubbo:service validation= xxx,yyy / !-- \u7f3a\u7701\u503c\u8bbe\u7f6e\uff0c\u5f53 dubbo:service \u6ca1\u6709\u914d\u7f6evalidation\u5c5e\u6027\u65f6\uff0c\u4f7f\u7528\u6b64\u914d\u7f6e -- dubbo:provider validation= xxx,yyy /","title":"\u6269\u5c55\u914d\u7f6e"},{"location":"dev/impls/validation/#_5","text":"org.apache.dubbo.validation.support.jvalidation.JValidation","title":"\u5df2\u77e5\u6269\u5c55"},{"location":"dev/impls/validation/#_6","text":"Maven \u9879\u76ee\u7ed3\u6784\uff1a src |-main |-java |-com |-xxx |-XxxValidation.java (\u5b9e\u73b0Validation\u63a5\u53e3) |-resources |-META-INF |-dubbo |-org.apache.dubbo.validation.Validation (\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1axxx=com.xxx.XxxValidation) XxxValidation.java\uff1a package com.xxx; import org.apache.dubbo.validation.Validation; public class XxxValidation implements Validation { public Object getValidator(URL url) { // ... } } XxxValidator.java\uff1a package com.xxx; import org.apache.dubbo.validation.Validator; public class XxxValidator implements Validator { public XxxValidator(URL url) { // ... } public void validate(Invocation invocation) throws Exception { // ... } } META-INF/dubbo/org.apache.dubbo.validation.Validation\uff1a xxx=com.xxx.XxxValidation","title":"\u6269\u5c55\u793a\u4f8b"},{"location":"dev/principals/code-detail/","text":"\u9b54\u9b3c\u5728\u7ec6\u8282 http://javatar.iteye.com/blog/1056664 \u6700\u8fd1\u4e00\u76f4\u62c5\u5fc3\u5982\u679c Dubbo \u5206\u5e03\u5f0f\u670d\u52a1\u6846\u67b6\u7ef4\u62a4\u4eba\u5458\u589e\u591a\u6216\u53d8\u66f4\uff0c\u4f1a\u51fa\u73b0\u8d28\u91cf\u7684\u4e0b\u964d\u7684\u95ee\u9898\uff0c \u6211\u5728\u60f3\uff0c\u6709\u6ca1\u6709\u4ec0\u4e48\u89c4\u5219\u662f\u9700\u8981\u5927\u5bb6\u5171\u540c\u9075\u5b88\u7684\u3002\u6839\u636e\u5e73\u65f6\u5199\u4ee3\u7801\u65f6\u7684\u4e00\u4e60\u60ef\uff0c\u603b\u7ed3\u4e86\u4ee5\u4e0b\u5728\u5199\u4ee3\u7801\u8fc7\u7a0b\u4e2d\uff0c\u5c24\u5176\u662f\u6846\u67b6\u4ee3\u7801\uff0c\u8981\u65f6\u523b\u7262\u8bb0\u7684\u7ec6\u8282\u3002\u53ef\u80fd\u4e0b\u9762\u8981\u8bb2\u7684\u8fd9\u4e9b\uff0c\u5927\u5bb6\u90fd\u4f1a\u89c9\u5f97\u5f88\u7b80\u5355\uff0c\u5f88\u57fa\u7840\uff0c\u4f46\u8981\u505a\u5230\u65f6\u523b\u7262\u8bb0\u3002\u5728\u6bcf\u4e00\u884c\u4ee3\u7801\u4e2d\u90fd\u8003\u8651\u8fd9\u4e9b\u56e0\u7d20\uff0c\u662f\u9700\u8981\u5f88\u5927\u8010\u5fc3\u7684\uff0c \u5927\u5bb6\u7ecf\u5e38\u8bf4\uff0c\u9b54\u9b3c\u5728\u7ec6\u8282\u4e2d\uff0c\u786e\u5b9e\u5982\u6b64\u3002 \u9632\u6b62\u7a7a\u6307\u9488\u548c\u4e0b\u6807\u8d8a\u754c \u8fd9\u662f\u6211\u6700\u4e0d\u559c\u6b22\u770b\u5230\u7684\u5f02\u5e38\uff0c\u5c24\u5176\u5728\u6838\u5fc3\u6846\u67b6\u4e2d\uff0c\u6211\u66f4\u613f\u770b\u5230\u4fe1\u606f\u8be6\u7ec6\u7684\u53c2\u6570\u4e0d\u5408\u6cd5\u5f02\u5e38\u3002\u8fd9\u4e5f\u662f\u4e00\u4e2a\u7f16\u5199\u5065\u58ee\u7a0b\u5e8f\u7684\u5f00\u53d1\u4eba\u5458\uff0c\u5728\u5199\u6bcf\u4e00\u884c\u4ee3\u7801\u90fd\u5e94\u5728\u6f5c\u610f\u8bc6\u4e2d\u9632\u6b62\u7684\u5f02\u5e38\u3002\u57fa\u672c\u4e0a\u8981\u80fd\u786e\u4fdd\u6bcf\u4e00\u6b21\u5199\u5b8c\u7684\u4ee3\u7801\uff0c\u5728\u4e0d\u6d4b\u8bd5\u7684\u60c5\u51b5\u4e0b\uff0c\u90fd\u4e0d\u4f1a\u51fa\u73b0\u8fd9\u4e24\u4e2a\u5f02\u5e38\u624d\u7b97\u5408\u683c\u3002 \u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\u6027\u548c\u53ef\u89c1\u6027 \u5bf9\u4e8e\u6846\u67b6\u7684\u5f00\u53d1\u4eba\u5458\uff0c\u5bf9\u7ebf\u7a0b\u5b89\u5168\u6027\u548c\u53ef\u89c1\u6027\u7684\u6df1\u5165\u7406\u89e3\u662f\u6700\u57fa\u672c\u7684\u8981\u6c42\u3002\u9700\u8981\u5f00\u53d1\u4eba\u5458\uff0c\u5728\u5199\u6bcf\u4e00\u884c\u4ee3\u7801\u65f6\u90fd\u5e94\u5728\u6f5c\u610f\u8bc6\u4e2d\u786e\u4fdd\u5176\u6b63\u786e\u6027\u3002\u56e0\u4e3a\u8fd9\u79cd\u4ee3\u7801\uff0c\u5728\u5c0f\u5e76\u53d1\u4e0b\u505a\u529f\u80fd\u6d4b\u8bd5\u65f6\uff0c\u4f1a\u663e\u5f97\u5f88\u6b63\u5e38\u3002\u4f46\u5728\u9ad8\u5e76\u53d1\u4e0b\u5c31\u4f1a\u51fa\u73b0\u83ab\u660e\u5176\u5999\u7684\u95ee\u9898\uff0c\u800c\u4e14\u573a\u666f\u5f88\u96be\u91cd\u73b0\uff0c\u6781\u96be\u6392\u67e5\u3002 \u5c3d\u65e9\u5931\u8d25\u548c\u524d\u7f6e\u65ad\u8a00 \u5c3d\u65e9\u5931\u8d25\u4e5f\u5e94\u8be5\u6210\u4e3a\u6f5c\u610f\u8bc6\uff0c\u5728\u6709\u4f20\u5165\u53c2\u6570\u548c\u72b6\u6001\u53d8\u5316\u65f6\uff0c\u5747\u5728\u5165\u53e3\u5904\u5168\u90e8\u65ad\u8a00\u3002\u4e00\u4e2a\u4e0d\u5408\u6cd5\u7684\u503c\u548c\u72b6\u6001\uff0c\u5728\u7b2c\u4e00\u65f6\u95f4\u5c31\u5e94\u62a5\u9519\uff0c\u800c\u4e0d\u662f\u7b49\u5230\u8981\u7528\u65f6\u624d\u62a5\u9519\u3002\u56e0\u4e3a\u7b49\u5230\u8981\u7528\u65f6\uff0c\u53ef\u80fd\u524d\u9762\u5df2\u7ecf\u4fee\u6539\u5176\u5b83\u76f8\u5173\u72b6\u6001\uff0c\u800c\u5728\u7a0b\u5e8f\u4e2d\u5f88\u5c11\u6709\u4eba\u53bb\u5904\u7406\u56de\u6eda\u903b\u8f91\u3002\u8fd9\u6837\u62a5\u9519\u540e\uff0c\u5176\u5b9e\u5185\u90e8\u72b6\u6001\u53ef\u80fd\u5df2\u7ecf\u6df7\u4e71\uff0c\u6781\u6613\u5728\u4e00\u4e2a\u9690\u853d\u5206\u652f\u4e0a\u5f15\u53d1\u7a0b\u5e8f\u4e0d\u53ef\u6062\u590d\u3002 \u5206\u79bb\u53ef\u9760\u64cd\u4f5c\u548c\u4e0d\u53ef\u9760\u64cd\u4f5c \u8fd9\u91cc\u7684\u53ef\u9760\u662f\u72ed\u4e49\u7684\u6307\u662f\u5426\u4f1a\u629b\u51fa\u5f02\u5e38\u6216\u5f15\u8d77\u72b6\u6001\u4e0d\u4e00\u81f4\uff0c\u6bd4\u5982\uff0c\u5199\u5165\u4e00\u4e2a\u7ebf\u7a0b\u5b89\u5168\u7684 Map\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u662f\u53ef\u9760\u7684\uff0c\u800c\u5199\u5165\u6570\u636e\u5e93\u7b49\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e0d\u53ef\u9760\u7684\u3002\u5f00\u53d1\u4eba\u5458\u5fc5\u987b\u5728\u5199\u6bcf\u4e00\u884c\u4ee3\u7801\u65f6\uff0c\u90fd\u6ce8\u610f\u5b83\u7684\u53ef\u9760\u6027\u4e0e\u5426\uff0c\u5728\u4ee3\u7801\u4e2d\u5c3d\u91cf\u5212\u5206\u5f00\uff0c\u5e76\u5bf9\u5931\u8d25\u505a\u5f02\u5e38\u5904\u7406\uff0c\u5e76\u4e3a\u5bb9\u9519\uff0c\u81ea\u6211\u4fdd\u62a4\uff0c\u81ea\u52a8\u6062\u590d\u6216\u5207\u6362\u7b49\u8865\u507f\u903b\u8f91\u63d0\u4f9b\u6e05\u6670\u7684\u5207\u5165\u70b9\uff0c\u4fdd\u8bc1\u540e\u7eed\u589e\u52a0\u7684\u4ee3\u7801\u4e0d\u81f3\u4e8e\u653e\u9519\u4f4d\u7f6e\uff0c\u800c\u5bfc\u81f4\u539f\u5148\u7684\u5bb9\u9519\u5904\u7406\u9677\u5165\u6df7\u4e71\u3002 \u5f02\u5e38\u9632\u5fa1\uff0c\u4f46\u4e0d\u5ffd\u7565\u5f02\u5e38 \u8fd9\u91cc\u8bb2\u7684\u5f02\u5e38\u9632\u5fa1\uff0c\u6307\u7684\u662f\u5bf9\u975e\u5fc5\u987b\u9014\u5f84\u4e0a\u7684\u4ee3\u7801\u8fdb\u884c\u6700\u5927\u9650\u5ea6\u7684\u5bb9\u5fcd\uff0c\u5305\u62ec\u7a0b\u5e8f\u4e0a\u7684 BUG\uff0c\u6bd4\u5982\uff1a\u83b7\u53d6\u7a0b\u5e8f\u7684\u7248\u672c\u53f7\uff0c\u4f1a\u901a\u8fc7\u626b\u63cf Manifest \u548c jar \u5305\u540d\u79f0\u6293\u53d6\u7248\u672c\u53f7\uff0c\u8fd9\u4e2a\u903b\u8f91\u662f\u8f85\u52a9\u6027\u7684\uff0c\u4f46\u4ee3\u7801\u5374\u4e0d\u5c11\uff0c\u521d\u6b65\u6d4b\u8bd5\u4e5f\u6ca1\u5565\u95ee\u9898\uff0c\u4f46\u5e94\u8be5\u5728\u6574\u4e2a getVersion() \u4e2d\u52a0\u4e0a\u4e00\u4e2a\u5168\u51fd\u6570\u7684 try-catch \u6253\u5370\u9519\u8bef\u65e5\u5fd7\uff0c\u5e76\u8fd4\u56de\u57fa\u672c\u7248\u672c\uff0c\u56e0\u4e3a getVersion() \u53ef\u80fd\u5b58\u5728\u672a\u77e5\u7279\u5b9a\u573a\u666f\u5f02\u5e38\uff0c\u6216\u88ab\u5176\u4ed6\u7684\u5f00\u53d1\u4eba\u5458\u8bef\u4fee\u6539\u903b\u8f91(\u4f46\u4e00\u822c\u4eba\u5458\u4e0d\u4f1a\u53bb\u6389 try-catch)\uff0c\u800c\u5982\u679c\u5b83\u629b\u51fa\u5f02\u5e38\u4f1a\u5bfc\u81f4\u4e3b\u6d41\u7a0b\u5f02\u5e38\uff0c\u8fd9\u662f\u6211\u4eec\u4e0d\u5e0c\u671b\u770b\u5230\u7684\u3002\u4f46\u8fd9\u91cc\u8981\u63a7\u5236\u4e2a\u5ea6\uff0c\u4e0d\u8981\u968f\u610f try-catch\uff0c\u66f4\u4e0d\u8981\u65e0\u58f0\u65e0\u606f\u7684\u5403\u6389\u5f02\u5e38\u3002 \u7f29\u5c0f\u53ef\u53d8\u57df\u548c\u5c3d\u91cf final \u5982\u679c\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u6210\u4e3a\u4e0d\u53d8\u7c7b(Immutable Class)\uff0c\u5c31\u4f18\u5148\u5c06\u5b83\u8bbe\u8ba1\u6210\u4e0d\u53d8\u7c7b\u3002\u4e0d\u53d8\u7c7b\u6709\u5929\u7136\u7684\u5e76\u53d1\u5171\u4eab\u4f18\u52bf\uff0c\u51cf\u5c11\u540c\u6b65\u6216\u590d\u5236\uff0c\u800c\u4e14\u53ef\u4ee5\u6709\u6548\u5e2e\u5fd9\u5206\u6790\u7ebf\u7a0b\u5b89\u5168\u7684\u8303\u56f4\u3002\u5c31\u7b97\u662f\u53ef\u53d8\u7c7b\uff0c\u5bf9\u4e8e\u4ece\u6784\u9020\u51fd\u6570\u4f20\u5165\u7684\u5f15\u7528\uff0c\u5728\u7c7b\u4e2d\u6301\u6709\u65f6\uff0c\u6700\u597d\u5c06\u5b57\u6bb5 final\uff0c\u4ee5\u514d\u88ab\u4e2d\u9014\u8bef\u4fee\u6539\u5f15\u7528\u3002\u4e0d\u8981\u4ee5\u4e3a\u8fd9\u4e2a\u5b57\u6bb5\u662f\u79c1\u6709\u7684\uff0c\u8fd9\u4e2a\u7c7b\u7684\u4ee3\u7801\u90fd\u662f\u6211\u81ea\u5df1\u5199\u7684\uff0c\u4e0d\u4f1a\u51fa\u73b0\u5bf9\u8fd9\u4e2a\u5b57\u6bb5\u7684\u91cd\u65b0\u8d4b\u503c\u3002\u8981\u8003\u8651\u7684\u4e00\u4e2a\u56e0\u7d20\u662f\uff0c\u8fd9\u4e2a\u4ee3\u7801\u53ef\u80fd\u88ab\u5176\u4ed6\u4eba\u4fee\u6539\uff0c\u4ed6\u4e0d\u77e5\u9053\u4f60\u7684\u8fd9\u4e2a\u5f31\u7ea6\u5b9a\uff0cfinal \u5c31\u662f\u4e00\u4e2a\u4e0d\u53d8\u5951\u7ea6\u3002 \u964d\u4f4e\u4fee\u6539\u65f6\u7684\u8bef\u89e3\u6027\uff0c\u4e0d\u57cb\u96f7 \u524d\u9762\u4e0d\u505c\u7684\u63d0\u5230\u4ee3\u7801\u88ab\u5176\u4ed6\u4eba\u4fee\u6539\uff0c\u8fd9\u4e5f\u5f00\u53d1\u4eba\u5458\u8981\u968f\u65f6\u7d27\u8bb0\u7684\u3002\u8fd9\u4e2a\u5176\u4ed6\u4eba\u5305\u62ec\u672a\u6765\u7684\u81ea\u5df1\uff0c\u4f60\u8981\u603b\u60f3\u7740\u8fd9\u4e2a\u4ee3\u7801\u53ef\u80fd\u4f1a\u6709\u4eba\u53bb\u6539\u5b83\u3002\u6211\u5e94\u8be5\u7ed9\u4fee\u6539\u7684\u4eba\u4e00\u70b9\u4ec0\u4e48\u63d0\u793a\uff0c\u8ba9\u4ed6\u77e5\u9053\u6211\u73b0\u5728\u7684\u8bbe\u8ba1\u610f\u56fe\uff0c\u800c\u4e0d\u8981\u5728\u7a0b\u5e8f\u91cc\u9762\u52a0\u6f5c\u89c4\u5219\uff0c\u6216\u57cb\u4e00\u4e9b\u5bb9\u6613\u5ffd\u89c6\u7684\u96f7\uff0c\u6bd4\u5982\uff1a\u4f60\u7528 null \u8868\u793a\u4e0d\u53ef\u7528\uff0csize \u7b49\u4e8e 0 \u8868\u793a\u9ed1\u540d\u5355\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u96f7\uff0c\u4e0b\u4e00\u4e2a\u4fee\u6539\u8005\uff0c\u5305\u62ec\u4f60\u81ea\u5df1\uff0c\u90fd\u4e0d\u4f1a\u8bb0\u5f97\u6709\u8fd9\u6837\u7684\u7ea6\u5b9a\uff0c\u53ef\u80fd\u540e\u9762\u4e3a\u4e86\u6539\u67d0\u4e2a\u5176\u5b83 BUG\uff0c\u4e0d\u5c0f\u5fc3\u6539\u5230\u4e86\u8fd9\u91cc\uff0c\u76f4\u63a5\u5f15\u7206\u6545\u969c\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u4e00\u4e2a\u539f\u5219\u5c31\u662f\u6c38\u8fdc\u4e0d\u8981\u533a\u5206 null \u5f15\u7528\u548c empty \u503c\u3002 \u63d0\u9ad8\u4ee3\u7801\u7684\u53ef\u6d4b\u6027 \u8fd9\u91cc\u7684\u53ef\u6d4b\u6027\u4e3b\u8981\u6307 Mock \u7684\u5bb9\u6613\u7a0b\u5ea6\uff0c\u548c\u6d4b\u8bd5\u7684\u9694\u79bb\u6027\u3002\u81f3\u4e8e\u6d4b\u8bd5\u7684\u81ea\u52a8\u6027\uff0c\u53ef\u91cd\u590d\u6027\uff0c\u975e\u5076\u7136\u6027\uff0c\u65e0\u5e8f\u6027\uff0c\u5b8c\u5907\u6027(\u5168\u8986\u76d6)\uff0c\u8f7b\u91cf\u6027(\u53ef\u5feb\u901f\u6267\u884c)\uff0c\u4e00\u822c\u5f00\u53d1\u4eba\u5458\uff0c\u52a0\u4e0a JUnit \u7b49\u5de5\u5177\u7684\u8f85\u52a9\u57fa\u672c\u90fd\u80fd\u505a\u5230\uff0c\u4e5f\u80fd\u7406\u89e3\u5b83\u7684\u597d\u5904\uff0c\u53ea\u662f\u5de5\u4f5c\u91cf\u95ee\u9898\u3002\u8fd9\u91cc\u8981\u7279\u522b\u5f3a\u8c03\u7684\u662f\u6d4b\u8bd5\u7528\u4f8b\u7684\u5355\u4e00\u6027(\u53ea\u6d4b\u76ee\u6807\u7c7b\u672c\u8eab)\u548c\u9694\u79bb\u6027(\u4e0d\u4f20\u67d3\u5931\u8d25)\u3002\u73b0\u5728\u7684\u6d4b\u8bd5\u4ee3\u7801\uff0c\u8fc7\u4e8e\u5f3a\u8c03\u5b8c\u5907\u6027\uff0c\u5927\u91cf\u91cd\u590d\u4ea4\u53c9\u6d4b\u8bd5\uff0c\u770b\u8d77\u6765\u6ca1\u5565\u574f\u5904\uff0c\u4f46\u6d4b\u8bd5\u4ee3\u7801\u8d8a\u591a\uff0c\u7ef4\u62a4\u4ee3\u4ef7\u8d8a\u9ad8\u3002\u7ecf\u5e38\u51fa\u73b0\u7684\u95ee\u9898\u662f\uff0c\u4fee\u6539\u4e00\u884c\u4ee3\u7801\u6216\u52a0\u4e00\u4e2a\u5224\u65ad\u6761\u4ef6\uff0c\u5f15\u8d77 100 \u591a\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4e0d\u901a\u8fc7\u3002\u65f6\u95f4\u4e00\u7d27\uff0c\u8c01\u6709\u8fd9\u4e2a\u95f2\u529f\u592b\u53bb\u6539\u8fd9\u4e48\u591a\u5f62\u6001\u5404\u5f02\u7684\u6d4b\u8bd5\u7528\u4f8b\uff1f\u4e45\u800c\u4e45\u4e4b\uff0c\u8fd9\u4e2a\u6d4b\u8bd5\u4ee3\u7801\u5c31\u5df2\u7ecf\u4e0d\u80fd\u771f\u5b9e\u53cd\u5e94\u4ee3\u7801\u73b0\u5728\u7684\u72b6\u51b5\uff0c\u5f88\u591a\u65f6\u5019\u4f1a\u88ab\u8feb\u7ed5\u8fc7\u3002\u6700\u597d\u7684\u60c5\u51b5\u662f\uff0c\u4fee\u6539\u4e00\u884c\u4ee3\u7801\uff0c\u6709\u4e14\u53ea\u6709\u4e00\u884c\u6d4b\u8bd5\u4ee3\u7801\u4e0d\u901a\u8fc7\u3002\u5982\u679c\u4fee\u6539\u4e86\u4ee3\u7801\u800c\u6d4b\u8bd5\u7528\u4f8b\u8fd8\u80fd\u901a\u8fc7\uff0c\u90a3\u4e5f\u4e0d\u884c\uff0c\u8868\u793a\u6d4b\u8bd5\u6ca1\u6709\u8986\u76d6\u5230\u3002\u53e6\u5916\uff0c\u53ef Mock \u6027\u662f\u9694\u79bb\u7684\u57fa\u7840\uff0c\u628a\u95f4\u63a5\u4f9d\u8d56\u7684\u903b\u8f91\u5c4f\u853d\u6389\u3002\u53ef Mock \u6027\u7684\u4e00\u4e2a\u6700\u5927\u7684\u6740\u624b\u5c31\u662f\u9759\u6001\u65b9\u6cd5\uff0c\u5c3d\u91cf\u5c11\u7528\u3002","title":"\u9b54\u9b3c\u5728\u7ec6\u8282"},{"location":"dev/principals/code-detail/#_1","text":"http://javatar.iteye.com/blog/1056664 \u6700\u8fd1\u4e00\u76f4\u62c5\u5fc3\u5982\u679c Dubbo \u5206\u5e03\u5f0f\u670d\u52a1\u6846\u67b6\u7ef4\u62a4\u4eba\u5458\u589e\u591a\u6216\u53d8\u66f4\uff0c\u4f1a\u51fa\u73b0\u8d28\u91cf\u7684\u4e0b\u964d\u7684\u95ee\u9898\uff0c \u6211\u5728\u60f3\uff0c\u6709\u6ca1\u6709\u4ec0\u4e48\u89c4\u5219\u662f\u9700\u8981\u5927\u5bb6\u5171\u540c\u9075\u5b88\u7684\u3002\u6839\u636e\u5e73\u65f6\u5199\u4ee3\u7801\u65f6\u7684\u4e00\u4e60\u60ef\uff0c\u603b\u7ed3\u4e86\u4ee5\u4e0b\u5728\u5199\u4ee3\u7801\u8fc7\u7a0b\u4e2d\uff0c\u5c24\u5176\u662f\u6846\u67b6\u4ee3\u7801\uff0c\u8981\u65f6\u523b\u7262\u8bb0\u7684\u7ec6\u8282\u3002\u53ef\u80fd\u4e0b\u9762\u8981\u8bb2\u7684\u8fd9\u4e9b\uff0c\u5927\u5bb6\u90fd\u4f1a\u89c9\u5f97\u5f88\u7b80\u5355\uff0c\u5f88\u57fa\u7840\uff0c\u4f46\u8981\u505a\u5230\u65f6\u523b\u7262\u8bb0\u3002\u5728\u6bcf\u4e00\u884c\u4ee3\u7801\u4e2d\u90fd\u8003\u8651\u8fd9\u4e9b\u56e0\u7d20\uff0c\u662f\u9700\u8981\u5f88\u5927\u8010\u5fc3\u7684\uff0c \u5927\u5bb6\u7ecf\u5e38\u8bf4\uff0c\u9b54\u9b3c\u5728\u7ec6\u8282\u4e2d\uff0c\u786e\u5b9e\u5982\u6b64\u3002","title":"\u9b54\u9b3c\u5728\u7ec6\u8282"},{"location":"dev/principals/code-detail/#_2","text":"\u8fd9\u662f\u6211\u6700\u4e0d\u559c\u6b22\u770b\u5230\u7684\u5f02\u5e38\uff0c\u5c24\u5176\u5728\u6838\u5fc3\u6846\u67b6\u4e2d\uff0c\u6211\u66f4\u613f\u770b\u5230\u4fe1\u606f\u8be6\u7ec6\u7684\u53c2\u6570\u4e0d\u5408\u6cd5\u5f02\u5e38\u3002\u8fd9\u4e5f\u662f\u4e00\u4e2a\u7f16\u5199\u5065\u58ee\u7a0b\u5e8f\u7684\u5f00\u53d1\u4eba\u5458\uff0c\u5728\u5199\u6bcf\u4e00\u884c\u4ee3\u7801\u90fd\u5e94\u5728\u6f5c\u610f\u8bc6\u4e2d\u9632\u6b62\u7684\u5f02\u5e38\u3002\u57fa\u672c\u4e0a\u8981\u80fd\u786e\u4fdd\u6bcf\u4e00\u6b21\u5199\u5b8c\u7684\u4ee3\u7801\uff0c\u5728\u4e0d\u6d4b\u8bd5\u7684\u60c5\u51b5\u4e0b\uff0c\u90fd\u4e0d\u4f1a\u51fa\u73b0\u8fd9\u4e24\u4e2a\u5f02\u5e38\u624d\u7b97\u5408\u683c\u3002","title":"\u9632\u6b62\u7a7a\u6307\u9488\u548c\u4e0b\u6807\u8d8a\u754c"},{"location":"dev/principals/code-detail/#_3","text":"\u5bf9\u4e8e\u6846\u67b6\u7684\u5f00\u53d1\u4eba\u5458\uff0c\u5bf9\u7ebf\u7a0b\u5b89\u5168\u6027\u548c\u53ef\u89c1\u6027\u7684\u6df1\u5165\u7406\u89e3\u662f\u6700\u57fa\u672c\u7684\u8981\u6c42\u3002\u9700\u8981\u5f00\u53d1\u4eba\u5458\uff0c\u5728\u5199\u6bcf\u4e00\u884c\u4ee3\u7801\u65f6\u90fd\u5e94\u5728\u6f5c\u610f\u8bc6\u4e2d\u786e\u4fdd\u5176\u6b63\u786e\u6027\u3002\u56e0\u4e3a\u8fd9\u79cd\u4ee3\u7801\uff0c\u5728\u5c0f\u5e76\u53d1\u4e0b\u505a\u529f\u80fd\u6d4b\u8bd5\u65f6\uff0c\u4f1a\u663e\u5f97\u5f88\u6b63\u5e38\u3002\u4f46\u5728\u9ad8\u5e76\u53d1\u4e0b\u5c31\u4f1a\u51fa\u73b0\u83ab\u660e\u5176\u5999\u7684\u95ee\u9898\uff0c\u800c\u4e14\u573a\u666f\u5f88\u96be\u91cd\u73b0\uff0c\u6781\u96be\u6392\u67e5\u3002","title":"\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\u6027\u548c\u53ef\u89c1\u6027"},{"location":"dev/principals/code-detail/#_4","text":"\u5c3d\u65e9\u5931\u8d25\u4e5f\u5e94\u8be5\u6210\u4e3a\u6f5c\u610f\u8bc6\uff0c\u5728\u6709\u4f20\u5165\u53c2\u6570\u548c\u72b6\u6001\u53d8\u5316\u65f6\uff0c\u5747\u5728\u5165\u53e3\u5904\u5168\u90e8\u65ad\u8a00\u3002\u4e00\u4e2a\u4e0d\u5408\u6cd5\u7684\u503c\u548c\u72b6\u6001\uff0c\u5728\u7b2c\u4e00\u65f6\u95f4\u5c31\u5e94\u62a5\u9519\uff0c\u800c\u4e0d\u662f\u7b49\u5230\u8981\u7528\u65f6\u624d\u62a5\u9519\u3002\u56e0\u4e3a\u7b49\u5230\u8981\u7528\u65f6\uff0c\u53ef\u80fd\u524d\u9762\u5df2\u7ecf\u4fee\u6539\u5176\u5b83\u76f8\u5173\u72b6\u6001\uff0c\u800c\u5728\u7a0b\u5e8f\u4e2d\u5f88\u5c11\u6709\u4eba\u53bb\u5904\u7406\u56de\u6eda\u903b\u8f91\u3002\u8fd9\u6837\u62a5\u9519\u540e\uff0c\u5176\u5b9e\u5185\u90e8\u72b6\u6001\u53ef\u80fd\u5df2\u7ecf\u6df7\u4e71\uff0c\u6781\u6613\u5728\u4e00\u4e2a\u9690\u853d\u5206\u652f\u4e0a\u5f15\u53d1\u7a0b\u5e8f\u4e0d\u53ef\u6062\u590d\u3002","title":"\u5c3d\u65e9\u5931\u8d25\u548c\u524d\u7f6e\u65ad\u8a00"},{"location":"dev/principals/code-detail/#_5","text":"\u8fd9\u91cc\u7684\u53ef\u9760\u662f\u72ed\u4e49\u7684\u6307\u662f\u5426\u4f1a\u629b\u51fa\u5f02\u5e38\u6216\u5f15\u8d77\u72b6\u6001\u4e0d\u4e00\u81f4\uff0c\u6bd4\u5982\uff0c\u5199\u5165\u4e00\u4e2a\u7ebf\u7a0b\u5b89\u5168\u7684 Map\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u662f\u53ef\u9760\u7684\uff0c\u800c\u5199\u5165\u6570\u636e\u5e93\u7b49\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e0d\u53ef\u9760\u7684\u3002\u5f00\u53d1\u4eba\u5458\u5fc5\u987b\u5728\u5199\u6bcf\u4e00\u884c\u4ee3\u7801\u65f6\uff0c\u90fd\u6ce8\u610f\u5b83\u7684\u53ef\u9760\u6027\u4e0e\u5426\uff0c\u5728\u4ee3\u7801\u4e2d\u5c3d\u91cf\u5212\u5206\u5f00\uff0c\u5e76\u5bf9\u5931\u8d25\u505a\u5f02\u5e38\u5904\u7406\uff0c\u5e76\u4e3a\u5bb9\u9519\uff0c\u81ea\u6211\u4fdd\u62a4\uff0c\u81ea\u52a8\u6062\u590d\u6216\u5207\u6362\u7b49\u8865\u507f\u903b\u8f91\u63d0\u4f9b\u6e05\u6670\u7684\u5207\u5165\u70b9\uff0c\u4fdd\u8bc1\u540e\u7eed\u589e\u52a0\u7684\u4ee3\u7801\u4e0d\u81f3\u4e8e\u653e\u9519\u4f4d\u7f6e\uff0c\u800c\u5bfc\u81f4\u539f\u5148\u7684\u5bb9\u9519\u5904\u7406\u9677\u5165\u6df7\u4e71\u3002","title":"\u5206\u79bb\u53ef\u9760\u64cd\u4f5c\u548c\u4e0d\u53ef\u9760\u64cd\u4f5c"},{"location":"dev/principals/code-detail/#_6","text":"\u8fd9\u91cc\u8bb2\u7684\u5f02\u5e38\u9632\u5fa1\uff0c\u6307\u7684\u662f\u5bf9\u975e\u5fc5\u987b\u9014\u5f84\u4e0a\u7684\u4ee3\u7801\u8fdb\u884c\u6700\u5927\u9650\u5ea6\u7684\u5bb9\u5fcd\uff0c\u5305\u62ec\u7a0b\u5e8f\u4e0a\u7684 BUG\uff0c\u6bd4\u5982\uff1a\u83b7\u53d6\u7a0b\u5e8f\u7684\u7248\u672c\u53f7\uff0c\u4f1a\u901a\u8fc7\u626b\u63cf Manifest \u548c jar \u5305\u540d\u79f0\u6293\u53d6\u7248\u672c\u53f7\uff0c\u8fd9\u4e2a\u903b\u8f91\u662f\u8f85\u52a9\u6027\u7684\uff0c\u4f46\u4ee3\u7801\u5374\u4e0d\u5c11\uff0c\u521d\u6b65\u6d4b\u8bd5\u4e5f\u6ca1\u5565\u95ee\u9898\uff0c\u4f46\u5e94\u8be5\u5728\u6574\u4e2a getVersion() \u4e2d\u52a0\u4e0a\u4e00\u4e2a\u5168\u51fd\u6570\u7684 try-catch \u6253\u5370\u9519\u8bef\u65e5\u5fd7\uff0c\u5e76\u8fd4\u56de\u57fa\u672c\u7248\u672c\uff0c\u56e0\u4e3a getVersion() \u53ef\u80fd\u5b58\u5728\u672a\u77e5\u7279\u5b9a\u573a\u666f\u5f02\u5e38\uff0c\u6216\u88ab\u5176\u4ed6\u7684\u5f00\u53d1\u4eba\u5458\u8bef\u4fee\u6539\u903b\u8f91(\u4f46\u4e00\u822c\u4eba\u5458\u4e0d\u4f1a\u53bb\u6389 try-catch)\uff0c\u800c\u5982\u679c\u5b83\u629b\u51fa\u5f02\u5e38\u4f1a\u5bfc\u81f4\u4e3b\u6d41\u7a0b\u5f02\u5e38\uff0c\u8fd9\u662f\u6211\u4eec\u4e0d\u5e0c\u671b\u770b\u5230\u7684\u3002\u4f46\u8fd9\u91cc\u8981\u63a7\u5236\u4e2a\u5ea6\uff0c\u4e0d\u8981\u968f\u610f try-catch\uff0c\u66f4\u4e0d\u8981\u65e0\u58f0\u65e0\u606f\u7684\u5403\u6389\u5f02\u5e38\u3002","title":"\u5f02\u5e38\u9632\u5fa1\uff0c\u4f46\u4e0d\u5ffd\u7565\u5f02\u5e38"},{"location":"dev/principals/code-detail/#final","text":"\u5982\u679c\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u6210\u4e3a\u4e0d\u53d8\u7c7b(Immutable Class)\uff0c\u5c31\u4f18\u5148\u5c06\u5b83\u8bbe\u8ba1\u6210\u4e0d\u53d8\u7c7b\u3002\u4e0d\u53d8\u7c7b\u6709\u5929\u7136\u7684\u5e76\u53d1\u5171\u4eab\u4f18\u52bf\uff0c\u51cf\u5c11\u540c\u6b65\u6216\u590d\u5236\uff0c\u800c\u4e14\u53ef\u4ee5\u6709\u6548\u5e2e\u5fd9\u5206\u6790\u7ebf\u7a0b\u5b89\u5168\u7684\u8303\u56f4\u3002\u5c31\u7b97\u662f\u53ef\u53d8\u7c7b\uff0c\u5bf9\u4e8e\u4ece\u6784\u9020\u51fd\u6570\u4f20\u5165\u7684\u5f15\u7528\uff0c\u5728\u7c7b\u4e2d\u6301\u6709\u65f6\uff0c\u6700\u597d\u5c06\u5b57\u6bb5 final\uff0c\u4ee5\u514d\u88ab\u4e2d\u9014\u8bef\u4fee\u6539\u5f15\u7528\u3002\u4e0d\u8981\u4ee5\u4e3a\u8fd9\u4e2a\u5b57\u6bb5\u662f\u79c1\u6709\u7684\uff0c\u8fd9\u4e2a\u7c7b\u7684\u4ee3\u7801\u90fd\u662f\u6211\u81ea\u5df1\u5199\u7684\uff0c\u4e0d\u4f1a\u51fa\u73b0\u5bf9\u8fd9\u4e2a\u5b57\u6bb5\u7684\u91cd\u65b0\u8d4b\u503c\u3002\u8981\u8003\u8651\u7684\u4e00\u4e2a\u56e0\u7d20\u662f\uff0c\u8fd9\u4e2a\u4ee3\u7801\u53ef\u80fd\u88ab\u5176\u4ed6\u4eba\u4fee\u6539\uff0c\u4ed6\u4e0d\u77e5\u9053\u4f60\u7684\u8fd9\u4e2a\u5f31\u7ea6\u5b9a\uff0cfinal \u5c31\u662f\u4e00\u4e2a\u4e0d\u53d8\u5951\u7ea6\u3002","title":"\u7f29\u5c0f\u53ef\u53d8\u57df\u548c\u5c3d\u91cf final"},{"location":"dev/principals/code-detail/#_7","text":"\u524d\u9762\u4e0d\u505c\u7684\u63d0\u5230\u4ee3\u7801\u88ab\u5176\u4ed6\u4eba\u4fee\u6539\uff0c\u8fd9\u4e5f\u5f00\u53d1\u4eba\u5458\u8981\u968f\u65f6\u7d27\u8bb0\u7684\u3002\u8fd9\u4e2a\u5176\u4ed6\u4eba\u5305\u62ec\u672a\u6765\u7684\u81ea\u5df1\uff0c\u4f60\u8981\u603b\u60f3\u7740\u8fd9\u4e2a\u4ee3\u7801\u53ef\u80fd\u4f1a\u6709\u4eba\u53bb\u6539\u5b83\u3002\u6211\u5e94\u8be5\u7ed9\u4fee\u6539\u7684\u4eba\u4e00\u70b9\u4ec0\u4e48\u63d0\u793a\uff0c\u8ba9\u4ed6\u77e5\u9053\u6211\u73b0\u5728\u7684\u8bbe\u8ba1\u610f\u56fe\uff0c\u800c\u4e0d\u8981\u5728\u7a0b\u5e8f\u91cc\u9762\u52a0\u6f5c\u89c4\u5219\uff0c\u6216\u57cb\u4e00\u4e9b\u5bb9\u6613\u5ffd\u89c6\u7684\u96f7\uff0c\u6bd4\u5982\uff1a\u4f60\u7528 null \u8868\u793a\u4e0d\u53ef\u7528\uff0csize \u7b49\u4e8e 0 \u8868\u793a\u9ed1\u540d\u5355\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u96f7\uff0c\u4e0b\u4e00\u4e2a\u4fee\u6539\u8005\uff0c\u5305\u62ec\u4f60\u81ea\u5df1\uff0c\u90fd\u4e0d\u4f1a\u8bb0\u5f97\u6709\u8fd9\u6837\u7684\u7ea6\u5b9a\uff0c\u53ef\u80fd\u540e\u9762\u4e3a\u4e86\u6539\u67d0\u4e2a\u5176\u5b83 BUG\uff0c\u4e0d\u5c0f\u5fc3\u6539\u5230\u4e86\u8fd9\u91cc\uff0c\u76f4\u63a5\u5f15\u7206\u6545\u969c\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u4e00\u4e2a\u539f\u5219\u5c31\u662f\u6c38\u8fdc\u4e0d\u8981\u533a\u5206 null \u5f15\u7528\u548c empty \u503c\u3002","title":"\u964d\u4f4e\u4fee\u6539\u65f6\u7684\u8bef\u89e3\u6027\uff0c\u4e0d\u57cb\u96f7"},{"location":"dev/principals/code-detail/#_8","text":"\u8fd9\u91cc\u7684\u53ef\u6d4b\u6027\u4e3b\u8981\u6307 Mock \u7684\u5bb9\u6613\u7a0b\u5ea6\uff0c\u548c\u6d4b\u8bd5\u7684\u9694\u79bb\u6027\u3002\u81f3\u4e8e\u6d4b\u8bd5\u7684\u81ea\u52a8\u6027\uff0c\u53ef\u91cd\u590d\u6027\uff0c\u975e\u5076\u7136\u6027\uff0c\u65e0\u5e8f\u6027\uff0c\u5b8c\u5907\u6027(\u5168\u8986\u76d6)\uff0c\u8f7b\u91cf\u6027(\u53ef\u5feb\u901f\u6267\u884c)\uff0c\u4e00\u822c\u5f00\u53d1\u4eba\u5458\uff0c\u52a0\u4e0a JUnit \u7b49\u5de5\u5177\u7684\u8f85\u52a9\u57fa\u672c\u90fd\u80fd\u505a\u5230\uff0c\u4e5f\u80fd\u7406\u89e3\u5b83\u7684\u597d\u5904\uff0c\u53ea\u662f\u5de5\u4f5c\u91cf\u95ee\u9898\u3002\u8fd9\u91cc\u8981\u7279\u522b\u5f3a\u8c03\u7684\u662f\u6d4b\u8bd5\u7528\u4f8b\u7684\u5355\u4e00\u6027(\u53ea\u6d4b\u76ee\u6807\u7c7b\u672c\u8eab)\u548c\u9694\u79bb\u6027(\u4e0d\u4f20\u67d3\u5931\u8d25)\u3002\u73b0\u5728\u7684\u6d4b\u8bd5\u4ee3\u7801\uff0c\u8fc7\u4e8e\u5f3a\u8c03\u5b8c\u5907\u6027\uff0c\u5927\u91cf\u91cd\u590d\u4ea4\u53c9\u6d4b\u8bd5\uff0c\u770b\u8d77\u6765\u6ca1\u5565\u574f\u5904\uff0c\u4f46\u6d4b\u8bd5\u4ee3\u7801\u8d8a\u591a\uff0c\u7ef4\u62a4\u4ee3\u4ef7\u8d8a\u9ad8\u3002\u7ecf\u5e38\u51fa\u73b0\u7684\u95ee\u9898\u662f\uff0c\u4fee\u6539\u4e00\u884c\u4ee3\u7801\u6216\u52a0\u4e00\u4e2a\u5224\u65ad\u6761\u4ef6\uff0c\u5f15\u8d77 100 \u591a\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4e0d\u901a\u8fc7\u3002\u65f6\u95f4\u4e00\u7d27\uff0c\u8c01\u6709\u8fd9\u4e2a\u95f2\u529f\u592b\u53bb\u6539\u8fd9\u4e48\u591a\u5f62\u6001\u5404\u5f02\u7684\u6d4b\u8bd5\u7528\u4f8b\uff1f\u4e45\u800c\u4e45\u4e4b\uff0c\u8fd9\u4e2a\u6d4b\u8bd5\u4ee3\u7801\u5c31\u5df2\u7ecf\u4e0d\u80fd\u771f\u5b9e\u53cd\u5e94\u4ee3\u7801\u73b0\u5728\u7684\u72b6\u51b5\uff0c\u5f88\u591a\u65f6\u5019\u4f1a\u88ab\u8feb\u7ed5\u8fc7\u3002\u6700\u597d\u7684\u60c5\u51b5\u662f\uff0c\u4fee\u6539\u4e00\u884c\u4ee3\u7801\uff0c\u6709\u4e14\u53ea\u6709\u4e00\u884c\u6d4b\u8bd5\u4ee3\u7801\u4e0d\u901a\u8fc7\u3002\u5982\u679c\u4fee\u6539\u4e86\u4ee3\u7801\u800c\u6d4b\u8bd5\u7528\u4f8b\u8fd8\u80fd\u901a\u8fc7\uff0c\u90a3\u4e5f\u4e0d\u884c\uff0c\u8868\u793a\u6d4b\u8bd5\u6ca1\u6709\u8986\u76d6\u5230\u3002\u53e6\u5916\uff0c\u53ef Mock \u6027\u662f\u9694\u79bb\u7684\u57fa\u7840\uff0c\u628a\u95f4\u63a5\u4f9d\u8d56\u7684\u903b\u8f91\u5c4f\u853d\u6389\u3002\u53ef Mock \u6027\u7684\u4e00\u4e2a\u6700\u5927\u7684\u6740\u624b\u5c31\u662f\u9759\u6001\u65b9\u6cd5\uff0c\u5c3d\u91cf\u5c11\u7528\u3002","title":"\u63d0\u9ad8\u4ee3\u7801\u7684\u53ef\u6d4b\u6027"},{"location":"dev/principals/configuration/","text":"\u914d\u7f6e\u8bbe\u8ba1 http://javatar.iteye.com/blog/949527 Dubbo \u73b0\u5728\u7684\u8bbe\u8ba1\u662f\u5b8c\u5168\u65e0\u4fb5\u5165\uff0c\u4e5f\u5c31\u662f\u4f7f\u7528\u8005\u53ea\u4f9d\u8d56\u4e8e\u914d\u7f6e\u5951\u7ea6\u3002\u7ecf\u8fc7\u591a\u4e2a\u7248\u672c\u7684\u53d1\u5c55\uff0c\u4e3a\u4e86\u6ee1\u8db3\u5404\u79cd\u9700\u6c42\u573a\u666f\uff0c\u914d\u7f6e\u8d8a\u6765\u8d8a\u591a\u3002\u4e3a\u4e86\u4fdd\u6301\u517c\u5bb9\uff0c\u914d\u7f6e\u53ea\u589e\u4e0d\u51cf\uff0c\u91cc\u9762\u6f5c\u4f0f\u7740\u5404\u79cd\u98ce\u683c\uff0c\u7ea6\u5b9a\uff0c\u89c4\u5219\u3002\u65b0\u7248\u672c\u4e5f\u5c06\u914d\u7f6e\u505a\u4e86\u4e00\u6b21\u8c03\u6574\uff0c\u5c06\u60f3\u5230\u7684\u4e00\u4e9b\u8bb0\u5728\u8fd9\uff0c\u5907\u5fd8\u3002 \u914d\u7f6e\u5206\u7c7b \u9996\u5148\uff0c\u914d\u7f6e\u7684\u7528\u9014\u662f\u6709\u591a\u79cd\u7684\uff0c\u5927\u81f4\u53ef\u4ee5\u5206\u4e3a\uff1a \u73af\u5883\u914d\u7f6e\uff0c\u6bd4\u5982\uff1a\u8fde\u63a5\u6570\uff0c\u8d85\u65f6\u7b49\u914d\u7f6e\u3002 \u63cf\u8ff0\u914d\u7f6e\uff0c\u6bd4\u5982\uff1a\u670d\u52a1\u63a5\u53e3\u63cf\u8ff0\uff0c\u670d\u52a1\u7248\u672c\u7b49\u3002 \u6269\u5c55\u914d\u7f6e\uff0c\u6bd4\u5982\uff1a\u534f\u8bae\u6269\u5c55\uff0c\u7b56\u7565\u6269\u5c55\u7b49\u3002 \u914d\u7f6e\u683c\u5f0f \u901a\u5e38\u73af\u5883\u914d\u7f6e\uff0c\u7528 properties \u914d\u7f6e\u4f1a\u6bd4\u8f83\u65b9\u4fbf\uff0c\u56e0\u4e3a\u90fd\u662f\u4e00\u4e9b\u79bb\u6563\u7684\u7b80\u5355\u503c\uff0c\u7528 key-value \u914d\u7f6e\u53ef\u4ee5\u51cf\u5c11\u914d\u7f6e\u7684\u5b66\u4e60\u6210\u672c\u3002 \u800c\u63cf\u8ff0\u914d\u7f6e\uff0c\u901a\u5e38\u4fe1\u606f\u6bd4\u8f83\u591a\uff0c\u751a\u81f3\u6709\u5c42\u6b21\u5173\u7cfb\uff0c\u7528 xml \u914d\u7f6e\u4f1a\u6bd4\u8f83\u65b9\u4fbf\uff0c\u56e0\u4e3a\u6811\u7ed3\u6784\u7684\u914d\u7f6e\u8868\u73b0\u529b\u66f4\u5f3a\u3002\u5982\u679c\u975e\u5e38\u590d\u6742\uff0c\u4e5f\u53ef\u4ee5\u8003\u81ea\u5b9a\u4e49 DSL \u505a\u4e3a\u914d\u7f6e\u3002\u6709\u65f6\u5019\u8fd9\u7c7b\u914d\u7f6e\u4e5f\u53ef\u4ee5\u7528 Annotation \u4ee3\u66ff\uff0c \u56e0\u4e3a\u8fd9\u4e9b\u914d\u7f6e\u548c\u4e1a\u52a1\u903b\u8f91\u76f8\u5173\uff0c\u653e\u5728\u4ee3\u7801\u91cc\u4e5f\u662f\u5408\u7406\u7684\u3002 \u53e6\u5916\u6269\u5c55\u914d\u7f6e\uff0c\u53ef\u80fd\u4e0d\u5c3d\u76f8\u540c\u3002\u5982\u679c\u53ea\u662f\u7b56\u7565\u63a5\u53e3\u5b9e\u73b0\u7c7b\u66ff\u6362\uff0c\u53ef\u4ee5\u8003\u8651 properties \u7b49\u7ed3\u6784\u3002\u5982\u679c\u6709\u590d\u6742\u7684\u751f\u547d\u5468\u671f\u7ba1\u7406\uff0c\u53ef\u80fd\u9700\u8981 XML \u7b49\u914d\u7f6e\u3002\u6709\u65f6\u5019\u6269\u5c55\u4f1a\u901a\u8fc7\u6ce8\u518c\u63a5\u53e3\u7684\u65b9\u5f0f\u63d0\u4f9b\u3002 \u914d\u7f6e\u52a0\u8f7d \u5bf9\u4e8e\u73af\u5883\u914d\u7f6e\uff0c\u5728 java \u4e16\u754c\u91cc\uff0c\u6bd4\u8f83\u5e38\u89c4\u7684\u505a\u6cd5\uff0c\u662f\u5728 classpath \u4e0b\u7ea6\u5b9a\u4e00\u4e2a\u4ee5\u9879\u76ee\u4e3a\u540d\u79f0\u7684 properties \u914d\u7f6e\uff0c\u6bd4\u5982\uff1alog4j.properties\uff0cvelocity.properties\u7b49\u3002\u4ea7\u54c1\u5728\u521d\u59cb\u5316\u65f6\uff0c\u81ea\u52a8\u4ece classpath \u4e0b\u52a0\u8f7d\u8be5\u914d\u7f6e\u3002\u6211\u4eec\u5e73\u53f0\u7684\u5f88\u591a\u9879\u76ee\u4e5f\u4f7f\u7528\u7c7b\u4f3c\u7b56\u7565\uff0c\u5982\uff1adubbo.properties\uff0ccomsat.xml \u7b49\u3002\u8fd9\u6837\u6709\u5b83\u7684\u4f18\u52bf\uff0c\u5c31\u662f\u57fa\u4e8e\u7ea6\u5b9a\uff0c\u7b80\u5316\u4e86\u7528\u6237\u5bf9\u914d\u7f6e\u52a0\u8f7d\u8fc7\u7a0b\u7684\u5e72\u9884\u3002\u4f46\u540c\u6837\u6709\u5b83\u7684\u7f3a\u70b9\uff0c\u5f53 classpath \u5b58\u5728\u540c\u6837\u7684\u914d\u7f6e\u65f6\uff0c\u53ef\u80fd\u8bef\u52a0\u8f7d\uff0c\u4ee5\u53ca\u5728 ClassLoader \u9694\u79bb\u65f6\uff0c\u53ef\u80fd\u627e\u4e0d\u5230\u914d\u7f6e\uff0c\u5e76\u4e14\uff0c\u5f53\u7528\u6237\u5e0c\u671b\u5c06\u914d\u7f6e\u653e\u5230\u7edf\u4e00\u7684\u76ee\u5f55\u65f6\uff0c\u4e0d\u592a\u65b9\u4fbf\u3002 \u800c\u5bf9\u4e8e\u63cf\u8ff0\u914d\u7f6e\uff0c\u56e0\u4e3a\u8981\u53c2\u4e0e\u4e1a\u52a1\u903b\u8f91\uff0c\u901a\u5e38\u4f1a\u5d4c\u5230\u5e94\u7528\u7684\u751f\u547d\u5468\u671f\u7ba1\u7406\u4e2d\u3002\u73b0\u5728\u4f7f\u7528 spring \u7684\u9879\u76ee\u8d8a\u6765\u8d8a\u591a\uff0c\u76f4\u63a5\u4f7f\u7528 spring \u914d\u7f6e\u7684\u6bd4\u8f83\u666e\u904d\uff0c\u800c\u4e14 spring \u5141\u8bb8\u81ea\u5b9a\u4e49 schema\uff0c\u914d\u7f6e\u7b80\u5316\u540e\u5f88\u65b9\u4fbf\u3002\u5f53\u7136\uff0c\u4e5f\u6709\u5b83\u7684\u7f3a\u70b9\uff0c\u5c31\u662f\u5f3a\u4f9d\u8d56 spring\uff0c\u53ef\u4ee5\u63d0\u7f16\u7a0b\u63a5\u53e3\u505a\u4e86\u914d\u5957\u65b9\u6848\u3002 \u5728 Dubbo \u65e2\u5b58\u5728\u63cf\u8ff0\u914d\u7f6e\u4e5f\u6709\u73af\u5883\u914d\u7f6e\u3002\u4e00\u90e8\u5206\u7528 spring \u7684 schema \u505a\u914d\u7f6e\u52a0\u8f7d\uff0c\u4e00\u90e8\u5206\u4ece classpath \u626b\u63cf properties \u505a\u914d\u7f6e\u52a0\u8f7d\u3002\u5728\u65b0\u7248\u672c\u4e2d\u505a\u4e86\u4e00\u4e2a\u4f18\u5148\u7ea7\u7ea6\u5b9a\uff0c\u7edf\u4e00\u4ee5 spring \u7684 schema \u9a71\u52a8\u914d\u7f6e\u52a0\u8f7d\uff0cdubbo.properties\u4f5c\u4e3a\u914d\u7f6e\u8865\u5145\u3002 \u540c\u65f6\uff0c\u5728 Spring \u7684\u573a\u666f\u4e0b\uff0c\u9664\u4e86\u4f7f\u7528 schema \u5916\uff0c\u8fd8\u652f\u6301\u5b8c\u5168\u4ee5 application.properties \u7684\u65b9\u5f0f\u914d\u7f6e\uff1a # Dubbo Application ## The default value of dubbo.application.name is ${spring.application.name} ## dubbo.application.name=${spring.application.name} # Dubbo Protocol dubbo.protocol.name=dubbo dubbo.protocol.port=12345 ## Dubbo Registry dubbo.registry.address=N/A \u6269\u5c55\u914d\u7f6e\uff0c\u901a\u5e38\u5bf9\u914d\u7f6e\u7684\u805a\u5408\u8981\u6c42\u6bd4\u8f83\u9ad8\u3002\u56e0\u4e3a\u4ea7\u54c1\u9700\u8981\u53d1\u73b0\u7b2c\u4e09\u65b9\u5b9e\u73b0\uff0c\u5c06\u5176\u52a0\u5165\u4ea7\u54c1\u5185\u90e8\u3002\u5728 java \u4e16\u754c\u91cc\uff0c\u901a\u5e38\u662f\u7ea6\u5b9a\u5728\u6bcf\u4e2a jar \u5305\u4e0b\u653e\u4e00\u4e2a\u6307\u5b9a\u6587\u4ef6\u52a0\u8f7d\uff0c\u6bd4\u5982\uff1aeclipse \u7684 plugin.xml\uff0cstruts2 \u7684 struts-plugin.xml \u7b49\uff0c\u8fd9\u7c7b\u914d\u7f6e\u53ef\u4ee5\u8003\u8651 java \u6807\u51c6\u7684\u670d\u52a1\u53d1\u73b0\u673a\u5236\uff0c\u5373\u5728 jar \u5305\u7684 META-INF/services \u4e0b\u653e\u7f6e\u63a5\u53e3\u7c7b\u5168\u540d\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\u6bcf\u884c\u4e00\u4e2a\u5b9e\u73b0\u7c7b\u7c7b\u540d\uff0c\u5c31\u50cf jdk \u4e2d\u7684\u52a0\u5bc6\u7b97\u6cd5\u6269\u5c55\uff0c\u811a\u672c\u5f15\u64ce\u6269\u5c55\uff0c\u65b0\u7684 JDBC \u9a71\u52a8\u7b49\uff0c\u90fd\u662f\u91c7\u7528\u8fd9\u79cd\u65b9\u5f0f\u3002\u53c2\u89c1\uff1a ServiceProvider \u89c4\u8303 \u3002 Dubbo \u65e7\u7248\u672c\u901a\u8fc7\u7ea6\u5b9a\u5728\u6bcf\u4e2a jar \u5305\u4e0b\uff0c\u653e\u7f6e\u540d\u4e3a dubbo-context.xml \u7684 spring \u914d\u7f6e\u8fdb\u884c\u6269\u5c55\u4e0e\u96c6\u6210\uff0c\u65b0\u7248\u672c\u6539\u6210\u7528 jdk \u81ea\u5e26\u7684 META-INF/services \u65b9\u5f0f\uff0c\u53bb\u6389\u8fc7\u591a\u7684 spring \u4f9d\u8d56\u3002 \u53ef\u7f16\u7a0b\u914d\u7f6e \u914d\u7f6e\u7684\u53ef\u7f16\u7a0b\u6027\u662f\u975e\u5e38\u5fc5\u8981\u7684\uff0c\u4e0d\u7ba1\u4f60\u4ee5\u4f55\u79cd\u65b9\u5f0f\u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6\uff0c\u90fd\u5e94\u8be5\u63d0\u4f9b\u4e00\u4e2a\u7f16\u7a0b\u7684\u914d\u7f6e\u65b9\u5f0f\uff0c\u5141\u8bb8\u7528\u6237\u4e0d\u4f7f\u7528\u914d\u7f6e\u6587\u4ef6\uff0c\u76f4\u63a5\u7528\u4ee3\u7801\u5b8c\u6210\u914d\u7f6e\u8fc7\u7a0b\u3002\u56e0\u4e3a\u4e00\u4e2a\u4ea7\u54c1\uff0c\u5c24\u5176\u662f\u7ec4\u4ef6\u7c7b\u4ea7\u54c1\uff0c\u901a\u5e38\u9700\u8981\u548c\u5176\u5b83\u4ea7\u54c1\u534f\u4f5c\u4f7f\u7528\uff0c\u5f53\u7528\u6237\u96c6\u6210\u4f60\u7684\u4ea7\u54c1\u65f6\uff0c\u53ef\u80fd\u9700\u8981\u9002\u914d\u914d\u7f6e\u65b9\u5f0f\u3002 Dubbo \u65b0\u7248\u672c\u63d0\u4f9b\u4e86\u4e0e xml \u914d\u7f6e\u4e00\u5bf9\u4e00\u7684\u914d\u7f6e\u7c7b\uff0c\u5982\uff1aServiceConfig \u5bf9\u5e94 dubbo:service / \uff0c\u5e76\u4e14\u5c5e\u6027\u4e5f\u4e00\u5bf9\u4e00\uff0c\u8fd9\u6837\u6709\u5229\u4e8e\u6587\u4ef6\u914d\u7f6e\u4e0e\u7f16\u7a0b\u914d\u7f6e\u7684\u4e00\u81f4\u6027\u7406\u89e3\uff0c\u51cf\u5c11\u5b66\u4e60\u6210\u672c\u3002 \u914d\u7f6e\u7f3a\u7701\u503c \u914d\u7f6e\u7684\u7f3a\u7701\u503c\uff0c\u901a\u5e38\u662f\u8bbe\u7f6e\u4e00\u4e2a\u5e38\u89c4\u73af\u5883\u7684\u5408\u7406\u503c\uff0c\u8fd9\u6837\u53ef\u4ee5\u51cf\u5c11\u7528\u6237\u7684\u914d\u7f6e\u91cf\u3002\u901a\u5e38\u5efa\u8bae\u4ee5\u7ebf\u4e0a\u73af\u5883\u4e3a\u53c2\u8003\u503c\uff0c\u5f00\u53d1\u73af\u5883\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u914d\u7f6e\u9002\u5e94\u3002\u7f3a\u7701\u503c\u7684\u8bbe\u7f6e\uff0c\u6700\u597d\u5728\u6700\u5916\u5c42\u7684\u914d\u7f6e\u52a0\u8f7d\u5c31\u505a\u5904\u7406\u3002\u7a0b\u5e8f\u5e95\u5c42\u5982\u679c\u53d1\u73b0\u914d\u7f6e\u4e0d\u6b63\u786e\uff0c\u5c31\u5e94\u8be5\u76f4\u63a5\u62a5\u9519\uff0c\u5bb9\u9519\u5728\u6700\u5916\u5c42\u505a\u3002\u5982\u679c\u5728\u7a0b\u5e8f\u5e95\u5c42\u4f7f\u7528\u65f6\uff0c\u53d1\u73b0\u914d\u7f6e\u503c\u4e0d\u5408\u7406\uff0c\u5c31\u586b\u4e00\u4e2a\u7f3a\u7701\u503c\uff0c\u5f88\u5bb9\u6613\u63a9\u76d6\u8868\u9762\u95ee\u9898\uff0c\u800c\u5f15\u53d1\u66f4\u6df1\u5c42\u6b21\u7684\u95ee\u9898\u3002\u5e76\u4e14\u914d\u7f6e\u7684\u4e2d\u95f4\u4f20\u9012\u5c42\uff0c\u5f88\u53ef\u80fd\u5e76\u4e0d\u77e5\u9053\u5e95\u5c42\u4f7f\u7528\u4e86\u4e00\u4e2a\u7f3a\u7701\u503c\uff0c\u4e00\u4e9b\u4e2d\u95f4\u7684\u68c0\u6d4b\u6761\u4ef6\u5c31\u53ef\u80fd\u5931\u6548\u3002Dubbo \u5c31\u51fa\u73b0\u8fc7\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u4e2d\u95f4\u5c42\u7528\u201c\u5730\u5740\u201d\u505a\u4e3a\u7f13\u5b58 Key\uff0c \u800c\u5e95\u5c42\uff0c\u7ed9\u201c\u5730\u5740\u201d\u52a0\u4e86\u4e00\u4e2a\u7f3a\u7701\u7aef\u53e3\u53f7\uff0c\u5bfc\u81f4\u4e0d\u52a0\u7aef\u53e3\u53f7\u7684\u201c\u5730\u5740\u201d\u548c\u52a0\u4e86\u7f3a\u7701\u7aef\u53e3\u7684\u201c\u5730\u5740\u201d\u5e76\u6ca1\u6709\u4f7f\u7528\u76f8\u540c\u7684\u7f13\u5b58\u3002 \u914d\u7f6e\u4e00\u81f4\u6027 \u914d\u7f6e\u603b\u4f1a\u9690\u542b\u4e00\u4e9b\u98ce\u683c\u6216\u6f5c\u89c4\u5219\uff0c\u5e94\u5c3d\u53ef\u80fd\u4fdd\u6301\u5176\u4e00\u81f4\u6027\u3002\u6bd4\u5982\uff1a\u5f88\u591a\u529f\u80fd\u90fd\u6709\u5f00\u5173\uff0c\u7136\u540e\u6709\u4e00\u4e2a\u914d\u7f6e\u503c\uff1a \u662f\u5426\u4f7f\u7528\u6ce8\u518c\u4e2d\u5fc3\uff0c\u6ce8\u518c\u4e2d\u5fc3\u5730\u5740\u3002 \u662f\u5426\u5141\u8bb8\u91cd\u8bd5\uff0c\u91cd\u8bd5\u6b21\u6570\u3002 \u4f60\u53ef\u4ee5\u7ea6\u5b9a\uff1a \u6bcf\u4e2a\u90fd\u662f\u5148\u914d\u7f6e\u4e00\u4e2a boolean \u7c7b\u578b\u7684\u5f00\u5173\uff0c\u518d\u914d\u7f6e\u4e00\u4e2a\u503c\u3002 \u7528\u4e00\u4e2a\u65e0\u6548\u503c\u4ee3\u8868\u5173\u95ed\uff0cN/A\u5730\u5740\uff0c0\u91cd\u8bd5\u6b21\u6570\u7b49\u3002 \u4e0d\u7ba1\u9009\u54ea\u79cd\u65b9\u5f0f\uff0c\u6240\u6709\u914d\u7f6e\u9879\uff0c\u90fd\u5e94\u4fdd\u6301\u540c\u4e00\u98ce\u683c\uff0cDubbo \u9009\u7684\u662f\u7b2c\u4e8c\u79cd\u3002\u76f8\u4f3c\u7684\u8fd8\u6709\uff0c\u8d85\u65f6\u65f6\u95f4\uff0c\u91cd\u8bd5\u65f6\u95f4\uff0c\u5b9a\u65f6\u5668\u95f4\u9694\u65f6\u95f4\u3002\u5982\u679c\u4e00\u4e2a\u5355\u4f4d\u662f\u79d2\uff0c\u53e6\u4e00\u4e2a\u5355\u4f4d\u662f\u6beb\u79d2(C3P0\u7684\u914d\u7f6e\u9879\u5c31\u662f\u8fd9\u6837)\uff0c\u914d\u7f6e\u4eba\u5458\u4f1a\u75af\u6389\u3002 \u914d\u7f6e\u8986\u76d6 \u63d0\u4f9b\u914d\u7f6e\u65f6\uff0c\u8981\u540c\u65f6\u8003\u8651\u5f00\u53d1\u4eba\u5458\uff0c\u6d4b\u8bd5\u4eba\u5458\uff0c\u914d\u7ba1\u4eba\u5458\uff0c\u7cfb\u7edf\u7ba1\u7406\u5458\u3002\u6d4b\u8bd5\u4eba\u5458\u662f\u4e0d\u80fd\u4fee\u6539\u4ee3\u7801\u7684\uff0c\u800c\u6d4b\u8bd5\u7684\u73af\u5883\u5f88\u53ef\u80fd\u8f83\u4e3a\u590d\u6742\uff0c\u9700\u8981\u4e3a\u6d4b\u8bd5\u4eba\u5458\u7559\u4e00\u4e9b\u201c\u540e\u95e8\u201d\uff0c\u53ef\u4ee5\u5728\u5916\u56f4\u4fee\u6539\u914d\u7f6e\u9879\u3002\u5c31\u50cf spring \u7684 PropertyPlaceholderConfigurer \u914d\u7f6e\uff0c\u652f\u6301 SYSTEM_PROPERTIES_MODE_OVERRIDE \uff0c\u53ef\u4ee5\u901a\u8fc7 JVM \u7684 -D \u53c2\u6570\uff0c\u6216\u8005\u50cf hosts \u4e00\u6837\u7ea6\u5b9a\u4e00\u4e2a\u8986\u76d6\u914d\u7f6e\u6587\u4ef6\uff0c\u5728\u7a0b\u5e8f\u5916\u90e8\uff0c\u4fee\u6539\u90e8\u5206\u914d\u7f6e\uff0c\u4fbf\u4e8e\u6d4b\u8bd5\u3002 Dubbo \u652f\u6301\u901a\u8fc7 JVM \u53c2\u6570 -Dcom.xxx.XxxService=dubbo://10.1.1.1:1234 \u76f4\u63a5\u4f7f\u8fdc\u7a0b\u670d\u52a1\u8c03\u7528\u7ed5\u8fc7\u6ce8\u518c\u4e2d\u5fc3\uff0c\u8fdb\u884c\u70b9\u5bf9\u70b9\u6d4b\u8bd5\u3002\u8fd8\u6709\u4e00\u79cd\u60c5\u51b5\uff0c\u5f00\u53d1\u4eba\u5458\u589e\u52a0\u914d\u7f6e\u65f6\uff0c\u90fd\u4f1a\u6309\u7ebf\u4e0a\u7684\u90e8\u7f72\u60c5\u51b5\u505a\u914d\u7f6e\uff0c\u5982\uff1a dubbo:registry address=\"${dubbo.registry.address}\" / \u56e0\u4e3a\u7ebf\u4e0a\u53ea\u6709\u4e00\u4e2a\u6ce8\u518c\u4e2d\u5fc3\uff0c\u8fd9\u6837\u7684\u914d\u7f6e\u662f\u6ca1\u6709\u95ee\u9898\u7684\uff0c\u800c\u6d4b\u8bd5\u73af\u5883\u53ef\u80fd\u6709\u4e24\u4e2a\u6ce8\u518c\u4e2d\u5fc3\uff0c\u6d4b\u8bd5\u4eba\u5458\u4e0d\u53ef\u80fd\u53bb\u4fee\u6539\u914d\u7f6e\uff0c\u6539\u4e3a\uff1a dubbo:registry address=\"${dubbo.registry.address1}\" / \uff0c dubbo:registry address=\"${dubbo.registry.address2}\" / \uff0c\u6240\u4ee5\u8fd9\u4e2a\u5730\u65b9\uff0cDubbo \u652f\u6301\u5728 ${dubbo.registry.address} \u7684\u503c\u4e2d\uff0c\u901a\u8fc7\u7ad6\u53f7\u5206\u9694\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u5730\u5740\uff0c\u7528\u4e8e\u8868\u793a\u591a\u6ce8\u518c\u4e2d\u5fc3\u5730\u5740\u3002 \u914d\u7f6e\u7ee7\u627f \u914d\u7f6e\u4e5f\u5b58\u5728\u201c\u91cd\u590d\u4ee3\u7801\u201d\uff0c\u4e5f\u5b58\u5728\u201c\u6cdb\u5316\u4e0e\u7cbe\u5316\u201d\u7684\u95ee\u9898\u3002\u6bd4\u5982\uff1aDubbo \u7684\u8d85\u65f6\u65f6\u95f4\u8bbe\u7f6e\uff0c\u6bcf\u4e2a\u670d\u52a1\uff0c\u6bcf\u4e2a\u65b9\u6cd5\uff0c\u90fd\u5e94\u8be5\u53ef\u4ee5\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\u3002\u4f46\u5f88\u591a\u670d\u52a1\u4e0d\u5173\u5fc3\u8d85\u65f6\uff0c\u5982\u679c\u8981\u6c42\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u914d\u7f6e\uff0c\u662f\u4e0d\u73b0\u5b9e\u7684\u3002\u6240\u4ee5 Dubbo \u91c7\u7528\u4e86\u65b9\u6cd5\u8d85\u65f6\u7ee7\u627f\u670d\u52a1\u8d85\u65f6\uff0c\u670d\u52a1\u8d85\u65f6\u518d\u7ee7\u627f\u7f3a\u7701\u8d85\u65f6\uff0c\u6ca1\u914d\u7f6e\u65f6\uff0c\u4e00\u5c42\u5c42\u5411\u4e0a\u67e5\u627e\u3002 \u53e6\u5916\uff0cDubbo \u65e7\u7248\u672c\u6240\u6709\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u91cd\u8bd5\u6b21\u6570\uff0c\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\u7b49\u90fd\u53ea\u80fd\u5728\u670d\u52a1\u6d88\u8d39\u65b9\u914d\u7f6e\u3002\u4f46\u5b9e\u9645\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u53d1\u73b0\uff0c\u670d\u52a1\u63d0\u4f9b\u65b9\u6bd4\u6d88\u8d39\u65b9\u66f4\u6e05\u695a\uff0c\u4f46\u8fd9\u4e9b\u914d\u7f6e\u9879\u662f\u5728\u6d88\u8d39\u65b9\u6267\u884c\u65f6\u624d\u7528\u5230\u7684\u3002\u65b0\u7248\u672c\uff0c\u5c31\u52a0\u5165\u4e86\u5728\u670d\u52a1\u63d0\u4f9b\u65b9\u4e5f\u80fd\u914d\u8fd9\u4e9b\u53c2\u6570\uff0c\u901a\u8fc7\u6ce8\u518c\u4e2d\u5fc3\u4f20\u9012\u5230\u6d88\u8d39\u65b9\uff0c \u505a\u4e3a\u53c2\u8003\u503c\uff0c\u5982\u679c\u6d88\u8d39\u65b9\u6ca1\u6709\u914d\u7f6e\uff0c\u5c31\u4ee5\u63d0\u4f9b\u65b9\u7684\u914d\u7f6e\u4e3a\u51c6\uff0c\u76f8\u5f53\u4e8e\u6d88\u8d39\u65b9\u7ee7\u627f\u4e86\u63d0\u4f9b\u65b9\u7684\u5efa\u8bae\u914d\u7f6e\u503c\u3002\u800c\u6ce8\u518c\u4e2d\u5fc3\u5728\u4f20\u9012\u914d\u7f6e\u65f6\uff0c\u4e5f\u53ef\u4ee5\u5728\u4e2d\u9014\u4fee\u6539\u914d\u7f6e\uff0c\u8fd9\u6837\u5c31\u8fbe\u5230\u4e86\u6cbb\u7406\u7684\u76ee\u7684\uff0c\u7ee7\u627f\u5173\u7cfb\u76f8\u5f53\u4e8e\uff1a\u670d\u52a1\u6d88\u8d39\u8005 -- \u6ce8\u518c\u4e2d\u5fc3 -- \u670d\u52a1\u63d0\u4f9b\u8005 \u914d\u7f6e\u5411\u540e\u517c\u5bb9 \u5411\u524d\u517c\u5bb9\u5f88\u597d\u529e\uff0c\u4f60\u53ea\u8981\u4fdd\u8bc1\u914d\u7f6e\u53ea\u589e\u4e0d\u51cf\uff0c\u5c31\u57fa\u672c\u4e0a\u80fd\u4fdd\u8bc1\u5411\u524d\u517c\u5bb9\u3002\u4f46\u5411\u540e\u517c\u5bb9\uff0c\u4e5f\u662f\u8981\u6ce8\u610f\u7684\uff0c\u8981\u4e3a\u540e\u7eed\u52a0\u5165\u65b0\u7684\u914d\u7f6e\u9879\u505a\u597d\u51c6\u5907\u3002\u5982\u679c\u914d\u7f6e\u51fa\u73b0\u4e00\u4e2a\u7279\u6b8a\u914d\u7f6e\uff0c\u5c31\u5e94\u8be5\u4e3a\u8fd9\u4e2a\u201c\u7279\u6b8a\u201d\u60c5\u51b5\u7ea6\u5b9a\u4e00\u4e2a\u517c\u5bb9\u89c4\u5219\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u7279\u6b8a\u60c5\u51b5\uff0c\u5f88\u6709\u53ef\u80fd\u5728\u4ee5\u540e\u8fd8\u4f1a\u53d1\u751f\u3002\u6bd4\u5982\uff1a\u6709\u4e00\u4e2a\u914d\u7f6e\u6587\u4ef6\u662f\u4fdd\u5b58\u201c\u670d\u52a1=\u5730\u5740\u201d\u6620\u5c04\u5173\u7cfb\u7684\uff0c\u5176\u4e2d\u6709\u4e00\u884c\u7279\u6b8a\uff0c\u4fdd\u5b58\u7684\u662f\u201c\u6ce8\u518c\u4e2d\u5fc3=\u5730\u5740\u201d\u3002\u73b0\u5728\u7a0b\u5e8f\u52a0\u8f7d\u65f6\uff0c\u7ea6\u5b9a\u201c\u6ce8\u518c\u4e2d\u5fc3\u201d\u8fd9\u4e2aKey\u662f\u7279\u6b8a\u7684\uff0c\u505a\u7279\u522b\u5904\u7406\uff0c\u5176\u5b83\u7684\u90fd\u662f\u201c\u670d\u52a1\u201d\u3002\u7136\u800c\uff0c\u65b0\u7248\u672c\u53d1\u73b0\uff0c\u8981\u52a0\u4e00\u9879\u201c\u76d1\u63a7\u4e2d\u5fc3=\u5730\u5740\u201d\uff0c\u8fd9\u65f6\uff0c\u65e7\u7248\u672c\u7684\u7a0b\u5e8f\u4f1a\u628a\u201c\u76d1\u63a7\u4e2d\u5fc3\u201d\u505a\u4e3a\u201c\u670d\u52a1\u201d\u5904\u7406\uff0c\u56e0\u4e3a\u65e7\u4ee3\u7801\u662f\u4e0d\u80fd\u6539\u7684\uff0c\u517c\u5bb9\u6027\u5c31\u5f88\u4f1a\u5f88\u9ebb\u70e6\u3002\u5982\u679c\u5148\u524d\u7ea6\u5b9a\u201c\u7279\u6b8a\u6807\u8bc6+XXX\u201d\u4e3a\u7279\u6b8a\u5904\u7406\uff0c\u540e\u7eed\u5c31\u4f1a\u65b9\u4fbf\u5f88\u591a\u3002 \u5411\u540e\u517c\u5bb9\u6027\uff0c\u53ef\u4ee5\u591a\u5411HTML5\u5b66\u4e60\uff0c\u53c2\u89c1\uff1a HTML5\u8bbe\u8ba1\u539f\u7406","title":"\u914d\u7f6e\u8bbe\u8ba1"},{"location":"dev/principals/configuration/#_1","text":"http://javatar.iteye.com/blog/949527 Dubbo \u73b0\u5728\u7684\u8bbe\u8ba1\u662f\u5b8c\u5168\u65e0\u4fb5\u5165\uff0c\u4e5f\u5c31\u662f\u4f7f\u7528\u8005\u53ea\u4f9d\u8d56\u4e8e\u914d\u7f6e\u5951\u7ea6\u3002\u7ecf\u8fc7\u591a\u4e2a\u7248\u672c\u7684\u53d1\u5c55\uff0c\u4e3a\u4e86\u6ee1\u8db3\u5404\u79cd\u9700\u6c42\u573a\u666f\uff0c\u914d\u7f6e\u8d8a\u6765\u8d8a\u591a\u3002\u4e3a\u4e86\u4fdd\u6301\u517c\u5bb9\uff0c\u914d\u7f6e\u53ea\u589e\u4e0d\u51cf\uff0c\u91cc\u9762\u6f5c\u4f0f\u7740\u5404\u79cd\u98ce\u683c\uff0c\u7ea6\u5b9a\uff0c\u89c4\u5219\u3002\u65b0\u7248\u672c\u4e5f\u5c06\u914d\u7f6e\u505a\u4e86\u4e00\u6b21\u8c03\u6574\uff0c\u5c06\u60f3\u5230\u7684\u4e00\u4e9b\u8bb0\u5728\u8fd9\uff0c\u5907\u5fd8\u3002","title":"\u914d\u7f6e\u8bbe\u8ba1"},{"location":"dev/principals/configuration/#_2","text":"\u9996\u5148\uff0c\u914d\u7f6e\u7684\u7528\u9014\u662f\u6709\u591a\u79cd\u7684\uff0c\u5927\u81f4\u53ef\u4ee5\u5206\u4e3a\uff1a \u73af\u5883\u914d\u7f6e\uff0c\u6bd4\u5982\uff1a\u8fde\u63a5\u6570\uff0c\u8d85\u65f6\u7b49\u914d\u7f6e\u3002 \u63cf\u8ff0\u914d\u7f6e\uff0c\u6bd4\u5982\uff1a\u670d\u52a1\u63a5\u53e3\u63cf\u8ff0\uff0c\u670d\u52a1\u7248\u672c\u7b49\u3002 \u6269\u5c55\u914d\u7f6e\uff0c\u6bd4\u5982\uff1a\u534f\u8bae\u6269\u5c55\uff0c\u7b56\u7565\u6269\u5c55\u7b49\u3002","title":"\u914d\u7f6e\u5206\u7c7b"},{"location":"dev/principals/configuration/#_3","text":"\u901a\u5e38\u73af\u5883\u914d\u7f6e\uff0c\u7528 properties \u914d\u7f6e\u4f1a\u6bd4\u8f83\u65b9\u4fbf\uff0c\u56e0\u4e3a\u90fd\u662f\u4e00\u4e9b\u79bb\u6563\u7684\u7b80\u5355\u503c\uff0c\u7528 key-value \u914d\u7f6e\u53ef\u4ee5\u51cf\u5c11\u914d\u7f6e\u7684\u5b66\u4e60\u6210\u672c\u3002 \u800c\u63cf\u8ff0\u914d\u7f6e\uff0c\u901a\u5e38\u4fe1\u606f\u6bd4\u8f83\u591a\uff0c\u751a\u81f3\u6709\u5c42\u6b21\u5173\u7cfb\uff0c\u7528 xml \u914d\u7f6e\u4f1a\u6bd4\u8f83\u65b9\u4fbf\uff0c\u56e0\u4e3a\u6811\u7ed3\u6784\u7684\u914d\u7f6e\u8868\u73b0\u529b\u66f4\u5f3a\u3002\u5982\u679c\u975e\u5e38\u590d\u6742\uff0c\u4e5f\u53ef\u4ee5\u8003\u81ea\u5b9a\u4e49 DSL \u505a\u4e3a\u914d\u7f6e\u3002\u6709\u65f6\u5019\u8fd9\u7c7b\u914d\u7f6e\u4e5f\u53ef\u4ee5\u7528 Annotation \u4ee3\u66ff\uff0c \u56e0\u4e3a\u8fd9\u4e9b\u914d\u7f6e\u548c\u4e1a\u52a1\u903b\u8f91\u76f8\u5173\uff0c\u653e\u5728\u4ee3\u7801\u91cc\u4e5f\u662f\u5408\u7406\u7684\u3002 \u53e6\u5916\u6269\u5c55\u914d\u7f6e\uff0c\u53ef\u80fd\u4e0d\u5c3d\u76f8\u540c\u3002\u5982\u679c\u53ea\u662f\u7b56\u7565\u63a5\u53e3\u5b9e\u73b0\u7c7b\u66ff\u6362\uff0c\u53ef\u4ee5\u8003\u8651 properties \u7b49\u7ed3\u6784\u3002\u5982\u679c\u6709\u590d\u6742\u7684\u751f\u547d\u5468\u671f\u7ba1\u7406\uff0c\u53ef\u80fd\u9700\u8981 XML \u7b49\u914d\u7f6e\u3002\u6709\u65f6\u5019\u6269\u5c55\u4f1a\u901a\u8fc7\u6ce8\u518c\u63a5\u53e3\u7684\u65b9\u5f0f\u63d0\u4f9b\u3002","title":"\u914d\u7f6e\u683c\u5f0f"},{"location":"dev/principals/configuration/#_4","text":"\u5bf9\u4e8e\u73af\u5883\u914d\u7f6e\uff0c\u5728 java \u4e16\u754c\u91cc\uff0c\u6bd4\u8f83\u5e38\u89c4\u7684\u505a\u6cd5\uff0c\u662f\u5728 classpath \u4e0b\u7ea6\u5b9a\u4e00\u4e2a\u4ee5\u9879\u76ee\u4e3a\u540d\u79f0\u7684 properties \u914d\u7f6e\uff0c\u6bd4\u5982\uff1alog4j.properties\uff0cvelocity.properties\u7b49\u3002\u4ea7\u54c1\u5728\u521d\u59cb\u5316\u65f6\uff0c\u81ea\u52a8\u4ece classpath \u4e0b\u52a0\u8f7d\u8be5\u914d\u7f6e\u3002\u6211\u4eec\u5e73\u53f0\u7684\u5f88\u591a\u9879\u76ee\u4e5f\u4f7f\u7528\u7c7b\u4f3c\u7b56\u7565\uff0c\u5982\uff1adubbo.properties\uff0ccomsat.xml \u7b49\u3002\u8fd9\u6837\u6709\u5b83\u7684\u4f18\u52bf\uff0c\u5c31\u662f\u57fa\u4e8e\u7ea6\u5b9a\uff0c\u7b80\u5316\u4e86\u7528\u6237\u5bf9\u914d\u7f6e\u52a0\u8f7d\u8fc7\u7a0b\u7684\u5e72\u9884\u3002\u4f46\u540c\u6837\u6709\u5b83\u7684\u7f3a\u70b9\uff0c\u5f53 classpath \u5b58\u5728\u540c\u6837\u7684\u914d\u7f6e\u65f6\uff0c\u53ef\u80fd\u8bef\u52a0\u8f7d\uff0c\u4ee5\u53ca\u5728 ClassLoader \u9694\u79bb\u65f6\uff0c\u53ef\u80fd\u627e\u4e0d\u5230\u914d\u7f6e\uff0c\u5e76\u4e14\uff0c\u5f53\u7528\u6237\u5e0c\u671b\u5c06\u914d\u7f6e\u653e\u5230\u7edf\u4e00\u7684\u76ee\u5f55\u65f6\uff0c\u4e0d\u592a\u65b9\u4fbf\u3002 \u800c\u5bf9\u4e8e\u63cf\u8ff0\u914d\u7f6e\uff0c\u56e0\u4e3a\u8981\u53c2\u4e0e\u4e1a\u52a1\u903b\u8f91\uff0c\u901a\u5e38\u4f1a\u5d4c\u5230\u5e94\u7528\u7684\u751f\u547d\u5468\u671f\u7ba1\u7406\u4e2d\u3002\u73b0\u5728\u4f7f\u7528 spring \u7684\u9879\u76ee\u8d8a\u6765\u8d8a\u591a\uff0c\u76f4\u63a5\u4f7f\u7528 spring \u914d\u7f6e\u7684\u6bd4\u8f83\u666e\u904d\uff0c\u800c\u4e14 spring \u5141\u8bb8\u81ea\u5b9a\u4e49 schema\uff0c\u914d\u7f6e\u7b80\u5316\u540e\u5f88\u65b9\u4fbf\u3002\u5f53\u7136\uff0c\u4e5f\u6709\u5b83\u7684\u7f3a\u70b9\uff0c\u5c31\u662f\u5f3a\u4f9d\u8d56 spring\uff0c\u53ef\u4ee5\u63d0\u7f16\u7a0b\u63a5\u53e3\u505a\u4e86\u914d\u5957\u65b9\u6848\u3002 \u5728 Dubbo \u65e2\u5b58\u5728\u63cf\u8ff0\u914d\u7f6e\u4e5f\u6709\u73af\u5883\u914d\u7f6e\u3002\u4e00\u90e8\u5206\u7528 spring \u7684 schema \u505a\u914d\u7f6e\u52a0\u8f7d\uff0c\u4e00\u90e8\u5206\u4ece classpath \u626b\u63cf properties \u505a\u914d\u7f6e\u52a0\u8f7d\u3002\u5728\u65b0\u7248\u672c\u4e2d\u505a\u4e86\u4e00\u4e2a\u4f18\u5148\u7ea7\u7ea6\u5b9a\uff0c\u7edf\u4e00\u4ee5 spring \u7684 schema \u9a71\u52a8\u914d\u7f6e\u52a0\u8f7d\uff0cdubbo.properties\u4f5c\u4e3a\u914d\u7f6e\u8865\u5145\u3002 \u540c\u65f6\uff0c\u5728 Spring \u7684\u573a\u666f\u4e0b\uff0c\u9664\u4e86\u4f7f\u7528 schema \u5916\uff0c\u8fd8\u652f\u6301\u5b8c\u5168\u4ee5 application.properties \u7684\u65b9\u5f0f\u914d\u7f6e\uff1a # Dubbo Application ## The default value of dubbo.application.name is ${spring.application.name} ## dubbo.application.name=${spring.application.name} # Dubbo Protocol dubbo.protocol.name=dubbo dubbo.protocol.port=12345 ## Dubbo Registry dubbo.registry.address=N/A \u6269\u5c55\u914d\u7f6e\uff0c\u901a\u5e38\u5bf9\u914d\u7f6e\u7684\u805a\u5408\u8981\u6c42\u6bd4\u8f83\u9ad8\u3002\u56e0\u4e3a\u4ea7\u54c1\u9700\u8981\u53d1\u73b0\u7b2c\u4e09\u65b9\u5b9e\u73b0\uff0c\u5c06\u5176\u52a0\u5165\u4ea7\u54c1\u5185\u90e8\u3002\u5728 java \u4e16\u754c\u91cc\uff0c\u901a\u5e38\u662f\u7ea6\u5b9a\u5728\u6bcf\u4e2a jar \u5305\u4e0b\u653e\u4e00\u4e2a\u6307\u5b9a\u6587\u4ef6\u52a0\u8f7d\uff0c\u6bd4\u5982\uff1aeclipse \u7684 plugin.xml\uff0cstruts2 \u7684 struts-plugin.xml \u7b49\uff0c\u8fd9\u7c7b\u914d\u7f6e\u53ef\u4ee5\u8003\u8651 java \u6807\u51c6\u7684\u670d\u52a1\u53d1\u73b0\u673a\u5236\uff0c\u5373\u5728 jar \u5305\u7684 META-INF/services \u4e0b\u653e\u7f6e\u63a5\u53e3\u7c7b\u5168\u540d\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\u6bcf\u884c\u4e00\u4e2a\u5b9e\u73b0\u7c7b\u7c7b\u540d\uff0c\u5c31\u50cf jdk \u4e2d\u7684\u52a0\u5bc6\u7b97\u6cd5\u6269\u5c55\uff0c\u811a\u672c\u5f15\u64ce\u6269\u5c55\uff0c\u65b0\u7684 JDBC \u9a71\u52a8\u7b49\uff0c\u90fd\u662f\u91c7\u7528\u8fd9\u79cd\u65b9\u5f0f\u3002\u53c2\u89c1\uff1a ServiceProvider \u89c4\u8303 \u3002 Dubbo \u65e7\u7248\u672c\u901a\u8fc7\u7ea6\u5b9a\u5728\u6bcf\u4e2a jar \u5305\u4e0b\uff0c\u653e\u7f6e\u540d\u4e3a dubbo-context.xml \u7684 spring \u914d\u7f6e\u8fdb\u884c\u6269\u5c55\u4e0e\u96c6\u6210\uff0c\u65b0\u7248\u672c\u6539\u6210\u7528 jdk \u81ea\u5e26\u7684 META-INF/services \u65b9\u5f0f\uff0c\u53bb\u6389\u8fc7\u591a\u7684 spring \u4f9d\u8d56\u3002","title":"\u914d\u7f6e\u52a0\u8f7d"},{"location":"dev/principals/configuration/#_5","text":"\u914d\u7f6e\u7684\u53ef\u7f16\u7a0b\u6027\u662f\u975e\u5e38\u5fc5\u8981\u7684\uff0c\u4e0d\u7ba1\u4f60\u4ee5\u4f55\u79cd\u65b9\u5f0f\u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6\uff0c\u90fd\u5e94\u8be5\u63d0\u4f9b\u4e00\u4e2a\u7f16\u7a0b\u7684\u914d\u7f6e\u65b9\u5f0f\uff0c\u5141\u8bb8\u7528\u6237\u4e0d\u4f7f\u7528\u914d\u7f6e\u6587\u4ef6\uff0c\u76f4\u63a5\u7528\u4ee3\u7801\u5b8c\u6210\u914d\u7f6e\u8fc7\u7a0b\u3002\u56e0\u4e3a\u4e00\u4e2a\u4ea7\u54c1\uff0c\u5c24\u5176\u662f\u7ec4\u4ef6\u7c7b\u4ea7\u54c1\uff0c\u901a\u5e38\u9700\u8981\u548c\u5176\u5b83\u4ea7\u54c1\u534f\u4f5c\u4f7f\u7528\uff0c\u5f53\u7528\u6237\u96c6\u6210\u4f60\u7684\u4ea7\u54c1\u65f6\uff0c\u53ef\u80fd\u9700\u8981\u9002\u914d\u914d\u7f6e\u65b9\u5f0f\u3002 Dubbo \u65b0\u7248\u672c\u63d0\u4f9b\u4e86\u4e0e xml \u914d\u7f6e\u4e00\u5bf9\u4e00\u7684\u914d\u7f6e\u7c7b\uff0c\u5982\uff1aServiceConfig \u5bf9\u5e94 dubbo:service / \uff0c\u5e76\u4e14\u5c5e\u6027\u4e5f\u4e00\u5bf9\u4e00\uff0c\u8fd9\u6837\u6709\u5229\u4e8e\u6587\u4ef6\u914d\u7f6e\u4e0e\u7f16\u7a0b\u914d\u7f6e\u7684\u4e00\u81f4\u6027\u7406\u89e3\uff0c\u51cf\u5c11\u5b66\u4e60\u6210\u672c\u3002","title":"\u53ef\u7f16\u7a0b\u914d\u7f6e"},{"location":"dev/principals/configuration/#_6","text":"\u914d\u7f6e\u7684\u7f3a\u7701\u503c\uff0c\u901a\u5e38\u662f\u8bbe\u7f6e\u4e00\u4e2a\u5e38\u89c4\u73af\u5883\u7684\u5408\u7406\u503c\uff0c\u8fd9\u6837\u53ef\u4ee5\u51cf\u5c11\u7528\u6237\u7684\u914d\u7f6e\u91cf\u3002\u901a\u5e38\u5efa\u8bae\u4ee5\u7ebf\u4e0a\u73af\u5883\u4e3a\u53c2\u8003\u503c\uff0c\u5f00\u53d1\u73af\u5883\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u914d\u7f6e\u9002\u5e94\u3002\u7f3a\u7701\u503c\u7684\u8bbe\u7f6e\uff0c\u6700\u597d\u5728\u6700\u5916\u5c42\u7684\u914d\u7f6e\u52a0\u8f7d\u5c31\u505a\u5904\u7406\u3002\u7a0b\u5e8f\u5e95\u5c42\u5982\u679c\u53d1\u73b0\u914d\u7f6e\u4e0d\u6b63\u786e\uff0c\u5c31\u5e94\u8be5\u76f4\u63a5\u62a5\u9519\uff0c\u5bb9\u9519\u5728\u6700\u5916\u5c42\u505a\u3002\u5982\u679c\u5728\u7a0b\u5e8f\u5e95\u5c42\u4f7f\u7528\u65f6\uff0c\u53d1\u73b0\u914d\u7f6e\u503c\u4e0d\u5408\u7406\uff0c\u5c31\u586b\u4e00\u4e2a\u7f3a\u7701\u503c\uff0c\u5f88\u5bb9\u6613\u63a9\u76d6\u8868\u9762\u95ee\u9898\uff0c\u800c\u5f15\u53d1\u66f4\u6df1\u5c42\u6b21\u7684\u95ee\u9898\u3002\u5e76\u4e14\u914d\u7f6e\u7684\u4e2d\u95f4\u4f20\u9012\u5c42\uff0c\u5f88\u53ef\u80fd\u5e76\u4e0d\u77e5\u9053\u5e95\u5c42\u4f7f\u7528\u4e86\u4e00\u4e2a\u7f3a\u7701\u503c\uff0c\u4e00\u4e9b\u4e2d\u95f4\u7684\u68c0\u6d4b\u6761\u4ef6\u5c31\u53ef\u80fd\u5931\u6548\u3002Dubbo \u5c31\u51fa\u73b0\u8fc7\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u4e2d\u95f4\u5c42\u7528\u201c\u5730\u5740\u201d\u505a\u4e3a\u7f13\u5b58 Key\uff0c \u800c\u5e95\u5c42\uff0c\u7ed9\u201c\u5730\u5740\u201d\u52a0\u4e86\u4e00\u4e2a\u7f3a\u7701\u7aef\u53e3\u53f7\uff0c\u5bfc\u81f4\u4e0d\u52a0\u7aef\u53e3\u53f7\u7684\u201c\u5730\u5740\u201d\u548c\u52a0\u4e86\u7f3a\u7701\u7aef\u53e3\u7684\u201c\u5730\u5740\u201d\u5e76\u6ca1\u6709\u4f7f\u7528\u76f8\u540c\u7684\u7f13\u5b58\u3002","title":"\u914d\u7f6e\u7f3a\u7701\u503c"},{"location":"dev/principals/configuration/#_7","text":"\u914d\u7f6e\u603b\u4f1a\u9690\u542b\u4e00\u4e9b\u98ce\u683c\u6216\u6f5c\u89c4\u5219\uff0c\u5e94\u5c3d\u53ef\u80fd\u4fdd\u6301\u5176\u4e00\u81f4\u6027\u3002\u6bd4\u5982\uff1a\u5f88\u591a\u529f\u80fd\u90fd\u6709\u5f00\u5173\uff0c\u7136\u540e\u6709\u4e00\u4e2a\u914d\u7f6e\u503c\uff1a \u662f\u5426\u4f7f\u7528\u6ce8\u518c\u4e2d\u5fc3\uff0c\u6ce8\u518c\u4e2d\u5fc3\u5730\u5740\u3002 \u662f\u5426\u5141\u8bb8\u91cd\u8bd5\uff0c\u91cd\u8bd5\u6b21\u6570\u3002 \u4f60\u53ef\u4ee5\u7ea6\u5b9a\uff1a \u6bcf\u4e2a\u90fd\u662f\u5148\u914d\u7f6e\u4e00\u4e2a boolean \u7c7b\u578b\u7684\u5f00\u5173\uff0c\u518d\u914d\u7f6e\u4e00\u4e2a\u503c\u3002 \u7528\u4e00\u4e2a\u65e0\u6548\u503c\u4ee3\u8868\u5173\u95ed\uff0cN/A\u5730\u5740\uff0c0\u91cd\u8bd5\u6b21\u6570\u7b49\u3002 \u4e0d\u7ba1\u9009\u54ea\u79cd\u65b9\u5f0f\uff0c\u6240\u6709\u914d\u7f6e\u9879\uff0c\u90fd\u5e94\u4fdd\u6301\u540c\u4e00\u98ce\u683c\uff0cDubbo \u9009\u7684\u662f\u7b2c\u4e8c\u79cd\u3002\u76f8\u4f3c\u7684\u8fd8\u6709\uff0c\u8d85\u65f6\u65f6\u95f4\uff0c\u91cd\u8bd5\u65f6\u95f4\uff0c\u5b9a\u65f6\u5668\u95f4\u9694\u65f6\u95f4\u3002\u5982\u679c\u4e00\u4e2a\u5355\u4f4d\u662f\u79d2\uff0c\u53e6\u4e00\u4e2a\u5355\u4f4d\u662f\u6beb\u79d2(C3P0\u7684\u914d\u7f6e\u9879\u5c31\u662f\u8fd9\u6837)\uff0c\u914d\u7f6e\u4eba\u5458\u4f1a\u75af\u6389\u3002","title":"\u914d\u7f6e\u4e00\u81f4\u6027"},{"location":"dev/principals/configuration/#_8","text":"\u63d0\u4f9b\u914d\u7f6e\u65f6\uff0c\u8981\u540c\u65f6\u8003\u8651\u5f00\u53d1\u4eba\u5458\uff0c\u6d4b\u8bd5\u4eba\u5458\uff0c\u914d\u7ba1\u4eba\u5458\uff0c\u7cfb\u7edf\u7ba1\u7406\u5458\u3002\u6d4b\u8bd5\u4eba\u5458\u662f\u4e0d\u80fd\u4fee\u6539\u4ee3\u7801\u7684\uff0c\u800c\u6d4b\u8bd5\u7684\u73af\u5883\u5f88\u53ef\u80fd\u8f83\u4e3a\u590d\u6742\uff0c\u9700\u8981\u4e3a\u6d4b\u8bd5\u4eba\u5458\u7559\u4e00\u4e9b\u201c\u540e\u95e8\u201d\uff0c\u53ef\u4ee5\u5728\u5916\u56f4\u4fee\u6539\u914d\u7f6e\u9879\u3002\u5c31\u50cf spring \u7684 PropertyPlaceholderConfigurer \u914d\u7f6e\uff0c\u652f\u6301 SYSTEM_PROPERTIES_MODE_OVERRIDE \uff0c\u53ef\u4ee5\u901a\u8fc7 JVM \u7684 -D \u53c2\u6570\uff0c\u6216\u8005\u50cf hosts \u4e00\u6837\u7ea6\u5b9a\u4e00\u4e2a\u8986\u76d6\u914d\u7f6e\u6587\u4ef6\uff0c\u5728\u7a0b\u5e8f\u5916\u90e8\uff0c\u4fee\u6539\u90e8\u5206\u914d\u7f6e\uff0c\u4fbf\u4e8e\u6d4b\u8bd5\u3002 Dubbo \u652f\u6301\u901a\u8fc7 JVM \u53c2\u6570 -Dcom.xxx.XxxService=dubbo://10.1.1.1:1234 \u76f4\u63a5\u4f7f\u8fdc\u7a0b\u670d\u52a1\u8c03\u7528\u7ed5\u8fc7\u6ce8\u518c\u4e2d\u5fc3\uff0c\u8fdb\u884c\u70b9\u5bf9\u70b9\u6d4b\u8bd5\u3002\u8fd8\u6709\u4e00\u79cd\u60c5\u51b5\uff0c\u5f00\u53d1\u4eba\u5458\u589e\u52a0\u914d\u7f6e\u65f6\uff0c\u90fd\u4f1a\u6309\u7ebf\u4e0a\u7684\u90e8\u7f72\u60c5\u51b5\u505a\u914d\u7f6e\uff0c\u5982\uff1a dubbo:registry address=\"${dubbo.registry.address}\" / \u56e0\u4e3a\u7ebf\u4e0a\u53ea\u6709\u4e00\u4e2a\u6ce8\u518c\u4e2d\u5fc3\uff0c\u8fd9\u6837\u7684\u914d\u7f6e\u662f\u6ca1\u6709\u95ee\u9898\u7684\uff0c\u800c\u6d4b\u8bd5\u73af\u5883\u53ef\u80fd\u6709\u4e24\u4e2a\u6ce8\u518c\u4e2d\u5fc3\uff0c\u6d4b\u8bd5\u4eba\u5458\u4e0d\u53ef\u80fd\u53bb\u4fee\u6539\u914d\u7f6e\uff0c\u6539\u4e3a\uff1a dubbo:registry address=\"${dubbo.registry.address1}\" / \uff0c dubbo:registry address=\"${dubbo.registry.address2}\" / \uff0c\u6240\u4ee5\u8fd9\u4e2a\u5730\u65b9\uff0cDubbo \u652f\u6301\u5728 ${dubbo.registry.address} \u7684\u503c\u4e2d\uff0c\u901a\u8fc7\u7ad6\u53f7\u5206\u9694\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u5730\u5740\uff0c\u7528\u4e8e\u8868\u793a\u591a\u6ce8\u518c\u4e2d\u5fc3\u5730\u5740\u3002","title":"\u914d\u7f6e\u8986\u76d6"},{"location":"dev/principals/configuration/#_9","text":"\u914d\u7f6e\u4e5f\u5b58\u5728\u201c\u91cd\u590d\u4ee3\u7801\u201d\uff0c\u4e5f\u5b58\u5728\u201c\u6cdb\u5316\u4e0e\u7cbe\u5316\u201d\u7684\u95ee\u9898\u3002\u6bd4\u5982\uff1aDubbo \u7684\u8d85\u65f6\u65f6\u95f4\u8bbe\u7f6e\uff0c\u6bcf\u4e2a\u670d\u52a1\uff0c\u6bcf\u4e2a\u65b9\u6cd5\uff0c\u90fd\u5e94\u8be5\u53ef\u4ee5\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\u3002\u4f46\u5f88\u591a\u670d\u52a1\u4e0d\u5173\u5fc3\u8d85\u65f6\uff0c\u5982\u679c\u8981\u6c42\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u914d\u7f6e\uff0c\u662f\u4e0d\u73b0\u5b9e\u7684\u3002\u6240\u4ee5 Dubbo \u91c7\u7528\u4e86\u65b9\u6cd5\u8d85\u65f6\u7ee7\u627f\u670d\u52a1\u8d85\u65f6\uff0c\u670d\u52a1\u8d85\u65f6\u518d\u7ee7\u627f\u7f3a\u7701\u8d85\u65f6\uff0c\u6ca1\u914d\u7f6e\u65f6\uff0c\u4e00\u5c42\u5c42\u5411\u4e0a\u67e5\u627e\u3002 \u53e6\u5916\uff0cDubbo \u65e7\u7248\u672c\u6240\u6709\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u91cd\u8bd5\u6b21\u6570\uff0c\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\u7b49\u90fd\u53ea\u80fd\u5728\u670d\u52a1\u6d88\u8d39\u65b9\u914d\u7f6e\u3002\u4f46\u5b9e\u9645\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u53d1\u73b0\uff0c\u670d\u52a1\u63d0\u4f9b\u65b9\u6bd4\u6d88\u8d39\u65b9\u66f4\u6e05\u695a\uff0c\u4f46\u8fd9\u4e9b\u914d\u7f6e\u9879\u662f\u5728\u6d88\u8d39\u65b9\u6267\u884c\u65f6\u624d\u7528\u5230\u7684\u3002\u65b0\u7248\u672c\uff0c\u5c31\u52a0\u5165\u4e86\u5728\u670d\u52a1\u63d0\u4f9b\u65b9\u4e5f\u80fd\u914d\u8fd9\u4e9b\u53c2\u6570\uff0c\u901a\u8fc7\u6ce8\u518c\u4e2d\u5fc3\u4f20\u9012\u5230\u6d88\u8d39\u65b9\uff0c \u505a\u4e3a\u53c2\u8003\u503c\uff0c\u5982\u679c\u6d88\u8d39\u65b9\u6ca1\u6709\u914d\u7f6e\uff0c\u5c31\u4ee5\u63d0\u4f9b\u65b9\u7684\u914d\u7f6e\u4e3a\u51c6\uff0c\u76f8\u5f53\u4e8e\u6d88\u8d39\u65b9\u7ee7\u627f\u4e86\u63d0\u4f9b\u65b9\u7684\u5efa\u8bae\u914d\u7f6e\u503c\u3002\u800c\u6ce8\u518c\u4e2d\u5fc3\u5728\u4f20\u9012\u914d\u7f6e\u65f6\uff0c\u4e5f\u53ef\u4ee5\u5728\u4e2d\u9014\u4fee\u6539\u914d\u7f6e\uff0c\u8fd9\u6837\u5c31\u8fbe\u5230\u4e86\u6cbb\u7406\u7684\u76ee\u7684\uff0c\u7ee7\u627f\u5173\u7cfb\u76f8\u5f53\u4e8e\uff1a\u670d\u52a1\u6d88\u8d39\u8005 -- \u6ce8\u518c\u4e2d\u5fc3 -- \u670d\u52a1\u63d0\u4f9b\u8005","title":"\u914d\u7f6e\u7ee7\u627f"},{"location":"dev/principals/configuration/#_10","text":"\u5411\u524d\u517c\u5bb9\u5f88\u597d\u529e\uff0c\u4f60\u53ea\u8981\u4fdd\u8bc1\u914d\u7f6e\u53ea\u589e\u4e0d\u51cf\uff0c\u5c31\u57fa\u672c\u4e0a\u80fd\u4fdd\u8bc1\u5411\u524d\u517c\u5bb9\u3002\u4f46\u5411\u540e\u517c\u5bb9\uff0c\u4e5f\u662f\u8981\u6ce8\u610f\u7684\uff0c\u8981\u4e3a\u540e\u7eed\u52a0\u5165\u65b0\u7684\u914d\u7f6e\u9879\u505a\u597d\u51c6\u5907\u3002\u5982\u679c\u914d\u7f6e\u51fa\u73b0\u4e00\u4e2a\u7279\u6b8a\u914d\u7f6e\uff0c\u5c31\u5e94\u8be5\u4e3a\u8fd9\u4e2a\u201c\u7279\u6b8a\u201d\u60c5\u51b5\u7ea6\u5b9a\u4e00\u4e2a\u517c\u5bb9\u89c4\u5219\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u7279\u6b8a\u60c5\u51b5\uff0c\u5f88\u6709\u53ef\u80fd\u5728\u4ee5\u540e\u8fd8\u4f1a\u53d1\u751f\u3002\u6bd4\u5982\uff1a\u6709\u4e00\u4e2a\u914d\u7f6e\u6587\u4ef6\u662f\u4fdd\u5b58\u201c\u670d\u52a1=\u5730\u5740\u201d\u6620\u5c04\u5173\u7cfb\u7684\uff0c\u5176\u4e2d\u6709\u4e00\u884c\u7279\u6b8a\uff0c\u4fdd\u5b58\u7684\u662f\u201c\u6ce8\u518c\u4e2d\u5fc3=\u5730\u5740\u201d\u3002\u73b0\u5728\u7a0b\u5e8f\u52a0\u8f7d\u65f6\uff0c\u7ea6\u5b9a\u201c\u6ce8\u518c\u4e2d\u5fc3\u201d\u8fd9\u4e2aKey\u662f\u7279\u6b8a\u7684\uff0c\u505a\u7279\u522b\u5904\u7406\uff0c\u5176\u5b83\u7684\u90fd\u662f\u201c\u670d\u52a1\u201d\u3002\u7136\u800c\uff0c\u65b0\u7248\u672c\u53d1\u73b0\uff0c\u8981\u52a0\u4e00\u9879\u201c\u76d1\u63a7\u4e2d\u5fc3=\u5730\u5740\u201d\uff0c\u8fd9\u65f6\uff0c\u65e7\u7248\u672c\u7684\u7a0b\u5e8f\u4f1a\u628a\u201c\u76d1\u63a7\u4e2d\u5fc3\u201d\u505a\u4e3a\u201c\u670d\u52a1\u201d\u5904\u7406\uff0c\u56e0\u4e3a\u65e7\u4ee3\u7801\u662f\u4e0d\u80fd\u6539\u7684\uff0c\u517c\u5bb9\u6027\u5c31\u5f88\u4f1a\u5f88\u9ebb\u70e6\u3002\u5982\u679c\u5148\u524d\u7ea6\u5b9a\u201c\u7279\u6b8a\u6807\u8bc6+XXX\u201d\u4e3a\u7279\u6b8a\u5904\u7406\uff0c\u540e\u7eed\u5c31\u4f1a\u65b9\u4fbf\u5f88\u591a\u3002 \u5411\u540e\u517c\u5bb9\u6027\uff0c\u53ef\u4ee5\u591a\u5411HTML5\u5b66\u4e60\uff0c\u53c2\u89c1\uff1a HTML5\u8bbe\u8ba1\u539f\u7406","title":"\u914d\u7f6e\u5411\u540e\u517c\u5bb9"},{"location":"dev/principals/dummy/","text":"\u9632\u75f4\u5446\u8bbe\u8ba1 http://javatar.iteye.com/blog/804187 \u6700\u8fd1\u6709\u70b9\u75f4\u5446\uff0c\u56e0\u4e3a\u89e3\u51b3\u4e86\u592a\u591a\u7684\u75f4\u5446\u95ee\u9898\u3002\u670d\u52a1\u6846\u67b6\u5b9e\u65bd\u9762\u8d8a\u6765\u8d8a\u5e7f\uff0c\u5df2\u6709 50 \u591a\u4e2a\u9879\u76ee\u5728\u4f7f\u7528\uff0c\u6bcf\u5929\u90fd\u8981\u53bb\u5e2e\u5e94\u7528\u67e5\u95ee\u9898\uff0c\u6765\u6765\u56de\u56de\uff0c\u53d1\u73b0\u5927\u90e8\u5206\u90fd\u662f\u914d\u7f6e\u9519\u8bef\uff0c\u6216\u8005\u91cd\u590d\u7684\u6587\u4ef6\u6216\u7c7b\uff0c\u6216\u8005\u7f51\u7edc\u4e0d\u901a\u7b49\uff0c\u6240\u4ee5\u51c6\u5907\u5728\u65b0\u7248\u672c\u4e2d\u52a0\u5165\u9632\u75f4\u5446\u8bbe\u8ba1\u3002\u4f30\u4e14\u8fd9\u4e48\u53eb\u5427\uff0c\u53ef\u80fd\u5f88\u7b80\u5355\uff0c\u4f46\u5bf9\u6392\u9519\u901f\u5ea6\u8fd8\u662f\u6709\u70b9\u5e2e\u52a9\uff0c\u5e0c\u671b\u80fd\u629b\u7816\u5f15\u7389\uff0c\u4e5f\u5e0c\u671b\u5927\u5bb6\u591a\u7ed9\u529b\uff0c\u60f3\u51fa\u66f4\u591a\u7684\u9632\u8303\u63aa\u65bd\u5171\u4eab\u51fa\u6765\u3002 \u68c0\u67e5\u91cd\u590d\u7684jar\u5305 \u6700\u75f4\u5446\u7684\u95ee\u9898\uff0c\u5c31\u662f\u6709\u591a\u4e2a\u7248\u672c\u7684\u76f8\u540cjar\u5305\uff0c\u4f1a\u51fa\u73b0\u65b0\u7248\u672c\u7684 A \u7c7b\uff0c\u8c03\u7528\u4e86\u65e7\u7248\u672c\u7684 B \u7c7b\uff0c\u800c\u4e14\u548cJVM\u52a0\u8f7d\u987a\u5e8f\u6709\u5173\uff0c\u95ee\u9898\u5e26\u6709\u5076\u7136\u6027\uff0c\u8bef\u5bfc\u6027\uff0c\u9047\u5230\u8fd9\u79cd\u83ab\u540d\u5176\u5999\u7684\u95ee\u9898\uff0c\u6700\u5934\u75bc\uff0c\u6240\u4ee5\uff0c\u7b2c\u4e00\u6761\uff0c\u5148\u628a\u5b83\u9632\u4f4f\uff0c\u5728\u6bcf\u4e2a jar \u5305\u4e2d\u6311\u4e00\u4e2a\u4e00\u5b9a\u4f1a\u52a0\u8f7d\u7684\u7c7b\uff0c\u52a0\u4e0a\u91cd\u590d\u7c7b\u68c0\u67e5\uff0c\u7ed9\u4e2a\u793a\u4f8b\uff1a static { Duplicate.checkDuplicate(Xxx.class); } \u68c0\u67e5\u91cd\u590d\u5de5\u5177\u7c7b\uff1a public final class Duplicate { private Duplicate() {} public static void checkDuplicate(Class cls) { checkDuplicate(cls.getName().replace('.', '/') + .class ); } public static void checkDuplicate(String path) { try { // \u5728ClassPath\u641c\u6587\u4ef6 Enumeration urls = Thread.currentThread().getContextClassLoader().getResources(path); Set files = new HashSet(); while (urls.hasMoreElements()) { URL url = urls.nextElement(); if (url != null) { String file = url.getFile(); if (file != null amp; amp; file.length() gt; 0) { files.add(file); } } } // \u5982\u679c\u6709\u591a\u4e2a\uff0c\u5c31\u8868\u793a\u91cd\u590d if (files.size() gt; 1) { logger.error( Duplicate class + path + in + files.size() + jar + files); } } catch (Throwable e) { // \u9632\u5fa1\u6027\u5bb9\u9519 logger.error(e.getMessage(), e); } } } \u68c0\u67e5\u91cd\u590d\u7684\u914d\u7f6e\u6587\u4ef6 \u914d\u7f6e\u6587\u4ef6\u52a0\u8f7d\u9519\uff0c\u4e5f\u662f\u7ecf\u5e38\u78b0\u5230\u7684\u95ee\u9898\u3002\u7528\u6237\u901a\u5e38\u4f1a\u548c\u4f60\u8bf4\uff1a\u201c\u6211\u914d\u7f6e\u7684\u5f88\u6b63\u786e\u554a\uff0c\u4e0d\u4fe1\u6211\u53d1\u7ed9\u4f60\u770b\u4e0b\uff0c\u4f46\u5c31\u662f\u62a5\u9519\u201d\u3002\u7136\u540e\u67e5\u4e00\u5708\u4e0b\u6765\uff0c\u539f\u6765\u4ed6\u53d1\u8fc7\u6765\u7684\u914d\u7f6e\u6839\u672c\u6ca1\u52a0\u8f7d\uff0c\u5e73\u53f0\u5f88\u591a\u4ea7\u54c1\u90fd\u4f1a\u5728 classpath \u4e0b\u653e\u4e00\u4e2a\u7ea6\u5b9a\u7684\u914d\u7f6e\uff0c\u5982\u679c\u9879\u76ee\u4e2d\u6709\u591a\u4e2a\uff0c\u901a\u5e38\u4f1a\u53d6JVM\u52a0\u8f7d\u7684\u7b2c\u4e00\u4e2a\uff0c\u4e3a\u4e86\u4e0d\u88ab\u8fd9\u4e48\u4f4e\u7ea7\u7684\u95ee\u9898\u6298\u817e\uff0c\u548c\u4e0a\u9762\u7684\u91cd\u590djar\u5305\u4e00\u6837\uff0c\u5728\u914d\u7f6e\u52a0\u8f7d\u7684\u5730\u65b9\uff0c\u52a0\u4e0a\uff1a Duplicate.checkDuplicate( xxx.properties ); \u68c0\u67e5\u6240\u6709\u53ef\u9009\u914d\u7f6e \u5fc5\u586b\u914d\u7f6e\u4f30\u8ba1\u5927\u5bb6\u90fd\u4f1a\u68c0\u67e5\uff0c\u56e0\u4e3a\u6ca1\u6709\u7684\u8bdd\uff0c\u6839\u672c\u6ca1\u6cd5\u8fd0\u884c\u3002\u4f46\u5bf9\u4e00\u4e9b\u53ef\u9009\u53c2\u6570\uff0c\u4e5f\u5e94\u8be5\u505a\u4e00\u4e9b\u68c0\u67e5\uff0c\u6bd4\u5982\uff1a\u670d\u52a1\u6846\u67b6\u5141\u8bb8\u901a\u8fc7\u6ce8\u518c\u4e2d\u5fc3\u5173\u8054\u670d\u52a1\u6d88\u8d39\u8005\u548c\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u4e5f\u5141\u8bb8\u76f4\u63a5\u914d\u7f6e\u670d\u52a1\u63d0\u4f9b\u8005\u5730\u5740\u70b9\u5bf9\u70b9\u76f4\u8fde\uff0c\u8fd9\u65f6\u5019\uff0c\u6ce8\u518c\u4e2d\u5fc3\u5730\u5740\u662f\u53ef\u9009\u7684\uff0c\u4f46\u5982\u679c\u6ca1\u6709\u914d\u70b9\u5bf9\u70b9\u76f4\u8fde\u914d\u7f6e\uff0c\u6ce8\u518c\u4e2d\u5fc3\u5730\u5740\u5c31\u4e00\u5b9a\u8981\u914d\uff0c\u8fd9\u65f6\u5019\u4e5f\u8981\u505a\u76f8\u5e94\u68c0\u67e5\u3002 \u5f02\u5e38\u4fe1\u606f\u7ed9\u51fa\u89e3\u51b3\u65b9\u6848 \u5728\u7ed9\u5e94\u7528\u6392\u9519\u65f6\uff0c\u6700\u6015\u7684\u5c31\u662f\u90a3\u79cd\u53ea\u6709\u7b80\u5355\u7684\u4e00\u53e5\u9519\u8bef\u63cf\u8ff0\uff0c\u5565\u4fe1\u606f\u90fd\u6ca1\u6709\u7684\u5f02\u5e38\u4fe1\u606f\u3002\u6bd4\u5982\u4e0a\u6b21\u78b0\u5230\u4e00\u4e2a Failed to get session \u5f02\u5e38\uff0c\u5c31\u8fd9\u51e0\u4e2a\u5355\u8bcd\uff0c\u5565\u90fd\u6ca1\u6709\uff0c\u54ea\u4e2a session \u51fa\u9519? \u4ec0\u4e48\u539f\u56e0 Failed? \u770b\u4e86\u90fd\u5feb\u75af\u6389\uff0c\u56e0\u662f\u7ebf\u4e0a\u73af\u5883\u4e0d\u597d\u8c03\u8bd5\uff0c\u800c\u4e14\u6709\u4e9b\u573a\u666f\u4e0d\u662f\u6bcf\u6b21\u90fd\u80fd\u91cd\u73b0\u3002\u5f02\u5e38\u6700\u57fa\u672c\u8981\u5e26\u6709\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u5305\u62ec\u64cd\u4f5c\u8005\uff0c\u64cd\u4f5c\u76ee\u6807\uff0c\u539f\u56e0\u7b49\uff0c\u6700\u597d\u7684\u5f02\u5e38\u4fe1\u606f\uff0c\u5e94\u7ed9\u51fa\u89e3\u51b3\u65b9\u6848\uff0c\u6bd4\u5982\u4e0a\u9762\u53ef\u4ee5\u7ed9\u51fa\uff1a\"\u4ece 10.20.16.3 \u5230 10.20.130.20:20880 \u4e4b\u95f4\u7684\u7f51\u7edc\u4e0d\u901a\uff0c\u8bf7\u5728 10.20.16.3 \u4f7f\u7528 telnet 10.20.130.20 20880 \u6d4b\u8bd5\u4e00\u4e0b\u7f51\u7edc\uff0c\u5982\u679c\u662f\u8de8\u673a\u623f\u8c03\u7528\uff0c\u53ef\u80fd\u662f\u9632\u706b\u5899\u963b\u6321\uff0c\u8bf7\u8054\u7cfb SA \u5f00\u901a\u8bbf\u95ee\u6743\u9650\" \u7b49\u7b49\uff0c\u4e0a\u9762\u751a\u81f3\u53ef\u4ee5\u6839\u636e IP \u6bb5\u5224\u65ad\u662f\u4e0d\u662f\u8de8\u673a\u623f\u3002\u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\uff0c\u662f spring-web \u7684 context \u52a0\u8f7d\uff0c\u5982\u679c\u5728 getBean \u65f6 spring \u6ca1\u6709\u88ab\u542f\u52a8\uff0cspring \u4f1a\u62a5\u4e00\u4e2a\u9519\uff0c\u9519\u8bef\u4fe1\u606f\u5199\u7740\uff1a\u8bf7\u5728 web.xml \u4e2d\u52a0\u5165: listener ... init-param ... \uff0c\u591a\u597d\u7684\u540c\u5b66\uff0c\u770b\u5230\u9519\u8bef\u7684\u4eba\u590d\u5236\u4e00\u4e0b\u5c31\u5b8c\u4e8b\u4e86\uff0c\u6211\u4eec\u8be5\u5b66\u5b66\u3002\u53ef\u4ee5\u628a\u5e38\u89c1\u7684\u9519\u8bef\u6545\u610f\u72af\u4e00\u904d\uff0c\u770b\u770b\u9519\u8bef\u4fe1\u606f\u80fd\u5426\u81ea\u6211\u641e\u5b9a\u95ee\u9898\uff0c \u6216\u8005\u628a\u5e73\u65f6\u652f\u6301\u5e94\u7528\u65f6\u9047\u5230\u7684\u95ee\u9898\u53ca\u89e3\u51b3\u529e\u6cd5\u90fd\u5199\u5230\u5f02\u5e38\u4fe1\u606f\u91cc\u3002 \u65e5\u5fd7\u4fe1\u606f\u5305\u542b\u73af\u5883\u4fe1\u606f \u6bcf\u6b21\u5e94\u7528\u4e00\u51fa\u9519\uff0c\u5e94\u7528\u7684\u5f00\u53d1\u6216\u6d4b\u8bd5\u5c31\u4f1a\u628a\u51fa\u9519\u4fe1\u606f\u53d1\u8fc7\u6765\uff0c\u8be2\u95ee\u539f\u56e0\uff0c\u8fd9\u65f6\u5019\u6211\u90fd\u4f1a\u95ee\u4e00\u5927\u5806\u5957\u8bdd\uff0c\u7528\u7684\u54ea\u4e2a\u7248\u672c\u5440\uff1f\u662f\u751f\u4ea7\u73af\u5883\u8fd8\u662f\u5f00\u53d1\u6d4b\u8bd5\u73af\u5883\uff1f\u54ea\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u5440\uff1f\u54ea\u4e2a\u9879\u76ee\u4e2d\u7684\uff1f\u54ea\u53f0\u673a\u5668\u5440\uff1f\u54ea\u4e2a\u670d\u52a1? \u7d2f\u554a\uff0c\u6700\u4e3b\u8981\u7684\u662f\uff0c\u6709\u4e9b\u5f00\u53d1\u6216\u6d4b\u8bd5\u4eba\u5458\u6839\u672c\u5206\u4e0d\u6e05\uff0c\u6ca1\u529e\u6cd5\uff0c\u53ea\u597d\u63d0\u4f9b\u4e0a\u95e8\u670d\u52a1\uff0c\u6d6a\u8d39\u7684\u65f6\u95f4\u53ef\u4e0d\u662f\u6d6e\u4e91\uff0c\u6240\u4ee5\uff0c\u65e5\u5fd7\u4e2d\u6700\u597d\u628a\u9700\u8981\u7684\u73af\u5883\u4fe1\u606f\u4e00\u5e76\u6253\u8fdb\u53bb\uff0c\u6700\u597d\u7ed9\u65e5\u5fd7\u8f93\u51fa\u505a\u4e2a\u5305\u88c5\uff0c\u7edf\u4e00\u5904\u7406\u6389\uff0c\u514d\u5f97\u5fd8\u4e86\u3002\u5305\u88c5Logger\u63a5\u53e3\u5982\uff1a public void error(String msg, Throwable e) { delegate.error(msg + on server + InetAddress.getLocalHost() + using version + Version.getVersion(), e); } \u83b7\u53d6\u7248\u672c\u53f7\u5de5\u5177\u7c7b\uff1a public final class Version { private Version() {} private static final Logger logger = LoggerFactory.getLogger(Version.class); private static final Pattern VERSION_PATTERN = Pattern.compile( ([0-9][0-9\\\\.\\\\-]*)\\\\.jar ); private static final String VERSION = getVersion(Version.class, 2.0.0 ); public static String getVersion(){ return VERSION; } public static String getVersion(Class cls, String defaultVersion) { try { // \u9996\u5148\u67e5\u627eMANIFEST.MF\u89c4\u8303\u4e2d\u7684\u7248\u672c\u53f7 String version = cls.getPackage().getImplementationVersion(); if (version == null || version.length() == 0) { version = cls.getPackage().getSpecificationVersion(); } if (version == null || version.length() == 0) { // \u5982\u679cMANIFEST.MF\u89c4\u8303\u4e2d\u6ca1\u6709\u7248\u672c\u53f7\uff0c\u57fa\u4e8ejar\u5305\u540d\u83b7\u53d6\u7248\u672c\u53f7 String file = cls.getProtectionDomain().getCodeSource().getLocation().getFile(); if (file != null file.length() 0 file.endsWith( .jar )) { Matcher matcher = VERSION_PATTERN.matcher(file); while (matcher.find() matcher.groupCount() 0) { version = matcher.group(1); } } } // \u8fd4\u56de\u7248\u672c\u53f7\uff0c\u5982\u679c\u4e3a\u7a7a\u8fd4\u56de\u7f3a\u7701\u7248\u672c\u53f7 return version == null || version.length() == 0 ? defaultVersion : version; } catch (Throwable e) { // \u9632\u5fa1\u6027\u5bb9\u9519 // \u5ffd\u7565\u5f02\u5e38\uff0c\u8fd4\u56de\u7f3a\u7701\u7248\u672c\u53f7 logger.error(e.getMessage(), e); return defaultVersion; } } } kill \u4e4b\u524d\u5148 dump \u6bcf\u6b21\u7ebf\u4e0a\u73af\u5883\u4e00\u51fa\u95ee\u9898\uff0c\u5927\u5bb6\u5c31\u614c\u4e86\uff0c\u901a\u5e38\u6700\u76f4\u63a5\u7684\u529e\u6cd5\u56de\u6eda\u91cd\u542f\uff0c\u4ee5\u51cf\u5c11\u6545\u969c\u65f6\u95f4\uff0c\u8fd9\u6837\u73b0\u573a\u5c31\u88ab\u7834\u574f\u4e86\uff0c\u8981\u60f3\u4e8b\u540e\u67e5\u95ee\u9898\u5c31\u9ebb\u70e6\u4e86\uff0c\u6709\u4e9b\u95ee\u9898\u5fc5\u987b\u5728\u7ebf\u4e0a\u7684\u5927\u538b\u529b\u4e0b\u624d\u4f1a\u53d1\u751f\uff0c\u7ebf\u4e0b\u6d4b\u8bd5\u73af\u5883\u5f88\u96be\u91cd\u73b0\uff0c\u4e0d\u592a\u53ef\u80fd\u8ba9\u5f00\u53d1\u6216 Appops \u5728\u91cd\u542f\u524d\uff0c\u5148\u624b\u5de5\u5c06\u51fa\u9519\u73b0\u573a\u6240\u6709\u6570\u636e\u5907\u4efd\u4e00\u4e0b\uff0c\u6240\u4ee5\u6700\u597d\u5728 kill \u811a\u672c\u4e4b\u524d\u8c03\u7528 dump\uff0c\u8fdb\u884c\u81ea\u52a8\u5907\u4efd\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u6709\u4eba\u4e3a\u758f\u5ffd\u3002dump\u811a\u672c\u793a\u4f8b\uff1a JAVA_HOME=/usr/java OUTPUT_HOME=~/output DEPLOY_HOME=`dirname $0` HOST_NAME=`hostname` DUMP_PIDS=`ps --no-heading -C java -f --width 1000 | grep $DEPLOY_HOME |awk '{print $2}'` if [ -z $DUMP_PIDS ]; then echo The server $HOST_NAME is not started! exit 1; fi DUMP_ROOT=$OUTPUT_HOME/dump if [ ! -d $DUMP_ROOT ]; then mkdir $DUMP_ROOT fi DUMP_DATE=`date +%Y%m%d%H%M%S` DUMP_DIR=$DUMP_ROOT/dump-$DUMP_DATE if [ ! -d $DUMP_DIR ]; then mkdir $DUMP_DIR fi echo -e Dumping the server $HOST_NAME ...\\c for PID in $DUMP_PIDS ; do $JAVA_HOME/bin/jstack $PID $DUMP_DIR/jstack-$PID.dump 2 1 echo -e .\\c $JAVA_HOME/bin/jinfo $PID $DUMP_DIR/jinfo-$PID.dump 2 1 echo -e .\\c $JAVA_HOME/bin/jstat -gcutil $PID $DUMP_DIR/jstat-gcutil-$PID.dump 2 1 echo -e .\\c $JAVA_HOME/bin/jstat -gccapacity $PID $DUMP_DIR/jstat-gccapacity-$PID.dump 2 1 echo -e .\\c $JAVA_HOME/bin/jmap $PID $DUMP_DIR/jmap-$PID.dump 2 1 echo -e .\\c $JAVA_HOME/bin/jmap -heap $PID $DUMP_DIR/jmap-heap-$PID.dump 2 1 echo -e .\\c $JAVA_HOME/bin/jmap -histo $PID $DUMP_DIR/jmap-histo-$PID.dump 2 1 echo -e .\\c if [ -r /usr/sbin/lsof ]; then /usr/sbin/lsof -p $PID $DUMP_DIR/lsof-$PID.dump echo -e .\\c fi done if [ -r /usr/bin/sar ]; then /usr/bin/sar $DUMP_DIR/sar.dump echo -e .\\c fi if [ -r /usr/bin/uptime ]; then /usr/bin/uptime $DUMP_DIR/uptime.dump echo -e .\\c fi if [ -r /usr/bin/free ]; then /usr/bin/free -t $DUMP_DIR/free.dump echo -e .\\c fi if [ -r /usr/bin/vmstat ]; then /usr/bin/vmstat $DUMP_DIR/vmstat.dump echo -e .\\c fi if [ -r /usr/bin/mpstat ]; then /usr/bin/mpstat $DUMP_DIR/mpstat.dump echo -e .\\c fi if [ -r /usr/bin/iostat ]; then /usr/bin/iostat $DUMP_DIR/iostat.dump echo -e .\\c fi if [ -r /bin/netstat ]; then /bin/netstat $DUMP_DIR/netstat.dump echo -e .\\c fi echo OK!","title":"\u9632\u75f4\u5446\u8bbe\u8ba1"},{"location":"dev/principals/dummy/#_1","text":"http://javatar.iteye.com/blog/804187 \u6700\u8fd1\u6709\u70b9\u75f4\u5446\uff0c\u56e0\u4e3a\u89e3\u51b3\u4e86\u592a\u591a\u7684\u75f4\u5446\u95ee\u9898\u3002\u670d\u52a1\u6846\u67b6\u5b9e\u65bd\u9762\u8d8a\u6765\u8d8a\u5e7f\uff0c\u5df2\u6709 50 \u591a\u4e2a\u9879\u76ee\u5728\u4f7f\u7528\uff0c\u6bcf\u5929\u90fd\u8981\u53bb\u5e2e\u5e94\u7528\u67e5\u95ee\u9898\uff0c\u6765\u6765\u56de\u56de\uff0c\u53d1\u73b0\u5927\u90e8\u5206\u90fd\u662f\u914d\u7f6e\u9519\u8bef\uff0c\u6216\u8005\u91cd\u590d\u7684\u6587\u4ef6\u6216\u7c7b\uff0c\u6216\u8005\u7f51\u7edc\u4e0d\u901a\u7b49\uff0c\u6240\u4ee5\u51c6\u5907\u5728\u65b0\u7248\u672c\u4e2d\u52a0\u5165\u9632\u75f4\u5446\u8bbe\u8ba1\u3002\u4f30\u4e14\u8fd9\u4e48\u53eb\u5427\uff0c\u53ef\u80fd\u5f88\u7b80\u5355\uff0c\u4f46\u5bf9\u6392\u9519\u901f\u5ea6\u8fd8\u662f\u6709\u70b9\u5e2e\u52a9\uff0c\u5e0c\u671b\u80fd\u629b\u7816\u5f15\u7389\uff0c\u4e5f\u5e0c\u671b\u5927\u5bb6\u591a\u7ed9\u529b\uff0c\u60f3\u51fa\u66f4\u591a\u7684\u9632\u8303\u63aa\u65bd\u5171\u4eab\u51fa\u6765\u3002","title":"\u9632\u75f4\u5446\u8bbe\u8ba1"},{"location":"dev/principals/dummy/#jar","text":"\u6700\u75f4\u5446\u7684\u95ee\u9898\uff0c\u5c31\u662f\u6709\u591a\u4e2a\u7248\u672c\u7684\u76f8\u540cjar\u5305\uff0c\u4f1a\u51fa\u73b0\u65b0\u7248\u672c\u7684 A \u7c7b\uff0c\u8c03\u7528\u4e86\u65e7\u7248\u672c\u7684 B \u7c7b\uff0c\u800c\u4e14\u548cJVM\u52a0\u8f7d\u987a\u5e8f\u6709\u5173\uff0c\u95ee\u9898\u5e26\u6709\u5076\u7136\u6027\uff0c\u8bef\u5bfc\u6027\uff0c\u9047\u5230\u8fd9\u79cd\u83ab\u540d\u5176\u5999\u7684\u95ee\u9898\uff0c\u6700\u5934\u75bc\uff0c\u6240\u4ee5\uff0c\u7b2c\u4e00\u6761\uff0c\u5148\u628a\u5b83\u9632\u4f4f\uff0c\u5728\u6bcf\u4e2a jar \u5305\u4e2d\u6311\u4e00\u4e2a\u4e00\u5b9a\u4f1a\u52a0\u8f7d\u7684\u7c7b\uff0c\u52a0\u4e0a\u91cd\u590d\u7c7b\u68c0\u67e5\uff0c\u7ed9\u4e2a\u793a\u4f8b\uff1a static { Duplicate.checkDuplicate(Xxx.class); } \u68c0\u67e5\u91cd\u590d\u5de5\u5177\u7c7b\uff1a public final class Duplicate { private Duplicate() {} public static void checkDuplicate(Class cls) { checkDuplicate(cls.getName().replace('.', '/') + .class ); } public static void checkDuplicate(String path) { try { // \u5728ClassPath\u641c\u6587\u4ef6 Enumeration urls = Thread.currentThread().getContextClassLoader().getResources(path); Set files = new HashSet(); while (urls.hasMoreElements()) { URL url = urls.nextElement(); if (url != null) { String file = url.getFile(); if (file != null amp; amp; file.length() gt; 0) { files.add(file); } } } // \u5982\u679c\u6709\u591a\u4e2a\uff0c\u5c31\u8868\u793a\u91cd\u590d if (files.size() gt; 1) { logger.error( Duplicate class + path + in + files.size() + jar + files); } } catch (Throwable e) { // \u9632\u5fa1\u6027\u5bb9\u9519 logger.error(e.getMessage(), e); } } }","title":"\u68c0\u67e5\u91cd\u590d\u7684jar\u5305"},{"location":"dev/principals/dummy/#_2","text":"\u914d\u7f6e\u6587\u4ef6\u52a0\u8f7d\u9519\uff0c\u4e5f\u662f\u7ecf\u5e38\u78b0\u5230\u7684\u95ee\u9898\u3002\u7528\u6237\u901a\u5e38\u4f1a\u548c\u4f60\u8bf4\uff1a\u201c\u6211\u914d\u7f6e\u7684\u5f88\u6b63\u786e\u554a\uff0c\u4e0d\u4fe1\u6211\u53d1\u7ed9\u4f60\u770b\u4e0b\uff0c\u4f46\u5c31\u662f\u62a5\u9519\u201d\u3002\u7136\u540e\u67e5\u4e00\u5708\u4e0b\u6765\uff0c\u539f\u6765\u4ed6\u53d1\u8fc7\u6765\u7684\u914d\u7f6e\u6839\u672c\u6ca1\u52a0\u8f7d\uff0c\u5e73\u53f0\u5f88\u591a\u4ea7\u54c1\u90fd\u4f1a\u5728 classpath \u4e0b\u653e\u4e00\u4e2a\u7ea6\u5b9a\u7684\u914d\u7f6e\uff0c\u5982\u679c\u9879\u76ee\u4e2d\u6709\u591a\u4e2a\uff0c\u901a\u5e38\u4f1a\u53d6JVM\u52a0\u8f7d\u7684\u7b2c\u4e00\u4e2a\uff0c\u4e3a\u4e86\u4e0d\u88ab\u8fd9\u4e48\u4f4e\u7ea7\u7684\u95ee\u9898\u6298\u817e\uff0c\u548c\u4e0a\u9762\u7684\u91cd\u590djar\u5305\u4e00\u6837\uff0c\u5728\u914d\u7f6e\u52a0\u8f7d\u7684\u5730\u65b9\uff0c\u52a0\u4e0a\uff1a Duplicate.checkDuplicate( xxx.properties );","title":"\u68c0\u67e5\u91cd\u590d\u7684\u914d\u7f6e\u6587\u4ef6"},{"location":"dev/principals/dummy/#_3","text":"\u5fc5\u586b\u914d\u7f6e\u4f30\u8ba1\u5927\u5bb6\u90fd\u4f1a\u68c0\u67e5\uff0c\u56e0\u4e3a\u6ca1\u6709\u7684\u8bdd\uff0c\u6839\u672c\u6ca1\u6cd5\u8fd0\u884c\u3002\u4f46\u5bf9\u4e00\u4e9b\u53ef\u9009\u53c2\u6570\uff0c\u4e5f\u5e94\u8be5\u505a\u4e00\u4e9b\u68c0\u67e5\uff0c\u6bd4\u5982\uff1a\u670d\u52a1\u6846\u67b6\u5141\u8bb8\u901a\u8fc7\u6ce8\u518c\u4e2d\u5fc3\u5173\u8054\u670d\u52a1\u6d88\u8d39\u8005\u548c\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u4e5f\u5141\u8bb8\u76f4\u63a5\u914d\u7f6e\u670d\u52a1\u63d0\u4f9b\u8005\u5730\u5740\u70b9\u5bf9\u70b9\u76f4\u8fde\uff0c\u8fd9\u65f6\u5019\uff0c\u6ce8\u518c\u4e2d\u5fc3\u5730\u5740\u662f\u53ef\u9009\u7684\uff0c\u4f46\u5982\u679c\u6ca1\u6709\u914d\u70b9\u5bf9\u70b9\u76f4\u8fde\u914d\u7f6e\uff0c\u6ce8\u518c\u4e2d\u5fc3\u5730\u5740\u5c31\u4e00\u5b9a\u8981\u914d\uff0c\u8fd9\u65f6\u5019\u4e5f\u8981\u505a\u76f8\u5e94\u68c0\u67e5\u3002","title":"\u68c0\u67e5\u6240\u6709\u53ef\u9009\u914d\u7f6e"},{"location":"dev/principals/dummy/#_4","text":"\u5728\u7ed9\u5e94\u7528\u6392\u9519\u65f6\uff0c\u6700\u6015\u7684\u5c31\u662f\u90a3\u79cd\u53ea\u6709\u7b80\u5355\u7684\u4e00\u53e5\u9519\u8bef\u63cf\u8ff0\uff0c\u5565\u4fe1\u606f\u90fd\u6ca1\u6709\u7684\u5f02\u5e38\u4fe1\u606f\u3002\u6bd4\u5982\u4e0a\u6b21\u78b0\u5230\u4e00\u4e2a Failed to get session \u5f02\u5e38\uff0c\u5c31\u8fd9\u51e0\u4e2a\u5355\u8bcd\uff0c\u5565\u90fd\u6ca1\u6709\uff0c\u54ea\u4e2a session \u51fa\u9519? \u4ec0\u4e48\u539f\u56e0 Failed? \u770b\u4e86\u90fd\u5feb\u75af\u6389\uff0c\u56e0\u662f\u7ebf\u4e0a\u73af\u5883\u4e0d\u597d\u8c03\u8bd5\uff0c\u800c\u4e14\u6709\u4e9b\u573a\u666f\u4e0d\u662f\u6bcf\u6b21\u90fd\u80fd\u91cd\u73b0\u3002\u5f02\u5e38\u6700\u57fa\u672c\u8981\u5e26\u6709\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u5305\u62ec\u64cd\u4f5c\u8005\uff0c\u64cd\u4f5c\u76ee\u6807\uff0c\u539f\u56e0\u7b49\uff0c\u6700\u597d\u7684\u5f02\u5e38\u4fe1\u606f\uff0c\u5e94\u7ed9\u51fa\u89e3\u51b3\u65b9\u6848\uff0c\u6bd4\u5982\u4e0a\u9762\u53ef\u4ee5\u7ed9\u51fa\uff1a\"\u4ece 10.20.16.3 \u5230 10.20.130.20:20880 \u4e4b\u95f4\u7684\u7f51\u7edc\u4e0d\u901a\uff0c\u8bf7\u5728 10.20.16.3 \u4f7f\u7528 telnet 10.20.130.20 20880 \u6d4b\u8bd5\u4e00\u4e0b\u7f51\u7edc\uff0c\u5982\u679c\u662f\u8de8\u673a\u623f\u8c03\u7528\uff0c\u53ef\u80fd\u662f\u9632\u706b\u5899\u963b\u6321\uff0c\u8bf7\u8054\u7cfb SA \u5f00\u901a\u8bbf\u95ee\u6743\u9650\" \u7b49\u7b49\uff0c\u4e0a\u9762\u751a\u81f3\u53ef\u4ee5\u6839\u636e IP \u6bb5\u5224\u65ad\u662f\u4e0d\u662f\u8de8\u673a\u623f\u3002\u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\uff0c\u662f spring-web \u7684 context \u52a0\u8f7d\uff0c\u5982\u679c\u5728 getBean \u65f6 spring \u6ca1\u6709\u88ab\u542f\u52a8\uff0cspring \u4f1a\u62a5\u4e00\u4e2a\u9519\uff0c\u9519\u8bef\u4fe1\u606f\u5199\u7740\uff1a\u8bf7\u5728 web.xml \u4e2d\u52a0\u5165: listener ... init-param ... \uff0c\u591a\u597d\u7684\u540c\u5b66\uff0c\u770b\u5230\u9519\u8bef\u7684\u4eba\u590d\u5236\u4e00\u4e0b\u5c31\u5b8c\u4e8b\u4e86\uff0c\u6211\u4eec\u8be5\u5b66\u5b66\u3002\u53ef\u4ee5\u628a\u5e38\u89c1\u7684\u9519\u8bef\u6545\u610f\u72af\u4e00\u904d\uff0c\u770b\u770b\u9519\u8bef\u4fe1\u606f\u80fd\u5426\u81ea\u6211\u641e\u5b9a\u95ee\u9898\uff0c \u6216\u8005\u628a\u5e73\u65f6\u652f\u6301\u5e94\u7528\u65f6\u9047\u5230\u7684\u95ee\u9898\u53ca\u89e3\u51b3\u529e\u6cd5\u90fd\u5199\u5230\u5f02\u5e38\u4fe1\u606f\u91cc\u3002","title":"\u5f02\u5e38\u4fe1\u606f\u7ed9\u51fa\u89e3\u51b3\u65b9\u6848"},{"location":"dev/principals/dummy/#_5","text":"\u6bcf\u6b21\u5e94\u7528\u4e00\u51fa\u9519\uff0c\u5e94\u7528\u7684\u5f00\u53d1\u6216\u6d4b\u8bd5\u5c31\u4f1a\u628a\u51fa\u9519\u4fe1\u606f\u53d1\u8fc7\u6765\uff0c\u8be2\u95ee\u539f\u56e0\uff0c\u8fd9\u65f6\u5019\u6211\u90fd\u4f1a\u95ee\u4e00\u5927\u5806\u5957\u8bdd\uff0c\u7528\u7684\u54ea\u4e2a\u7248\u672c\u5440\uff1f\u662f\u751f\u4ea7\u73af\u5883\u8fd8\u662f\u5f00\u53d1\u6d4b\u8bd5\u73af\u5883\uff1f\u54ea\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u5440\uff1f\u54ea\u4e2a\u9879\u76ee\u4e2d\u7684\uff1f\u54ea\u53f0\u673a\u5668\u5440\uff1f\u54ea\u4e2a\u670d\u52a1? \u7d2f\u554a\uff0c\u6700\u4e3b\u8981\u7684\u662f\uff0c\u6709\u4e9b\u5f00\u53d1\u6216\u6d4b\u8bd5\u4eba\u5458\u6839\u672c\u5206\u4e0d\u6e05\uff0c\u6ca1\u529e\u6cd5\uff0c\u53ea\u597d\u63d0\u4f9b\u4e0a\u95e8\u670d\u52a1\uff0c\u6d6a\u8d39\u7684\u65f6\u95f4\u53ef\u4e0d\u662f\u6d6e\u4e91\uff0c\u6240\u4ee5\uff0c\u65e5\u5fd7\u4e2d\u6700\u597d\u628a\u9700\u8981\u7684\u73af\u5883\u4fe1\u606f\u4e00\u5e76\u6253\u8fdb\u53bb\uff0c\u6700\u597d\u7ed9\u65e5\u5fd7\u8f93\u51fa\u505a\u4e2a\u5305\u88c5\uff0c\u7edf\u4e00\u5904\u7406\u6389\uff0c\u514d\u5f97\u5fd8\u4e86\u3002\u5305\u88c5Logger\u63a5\u53e3\u5982\uff1a public void error(String msg, Throwable e) { delegate.error(msg + on server + InetAddress.getLocalHost() + using version + Version.getVersion(), e); } \u83b7\u53d6\u7248\u672c\u53f7\u5de5\u5177\u7c7b\uff1a public final class Version { private Version() {} private static final Logger logger = LoggerFactory.getLogger(Version.class); private static final Pattern VERSION_PATTERN = Pattern.compile( ([0-9][0-9\\\\.\\\\-]*)\\\\.jar ); private static final String VERSION = getVersion(Version.class, 2.0.0 ); public static String getVersion(){ return VERSION; } public static String getVersion(Class cls, String defaultVersion) { try { // \u9996\u5148\u67e5\u627eMANIFEST.MF\u89c4\u8303\u4e2d\u7684\u7248\u672c\u53f7 String version = cls.getPackage().getImplementationVersion(); if (version == null || version.length() == 0) { version = cls.getPackage().getSpecificationVersion(); } if (version == null || version.length() == 0) { // \u5982\u679cMANIFEST.MF\u89c4\u8303\u4e2d\u6ca1\u6709\u7248\u672c\u53f7\uff0c\u57fa\u4e8ejar\u5305\u540d\u83b7\u53d6\u7248\u672c\u53f7 String file = cls.getProtectionDomain().getCodeSource().getLocation().getFile(); if (file != null file.length() 0 file.endsWith( .jar )) { Matcher matcher = VERSION_PATTERN.matcher(file); while (matcher.find() matcher.groupCount() 0) { version = matcher.group(1); } } } // \u8fd4\u56de\u7248\u672c\u53f7\uff0c\u5982\u679c\u4e3a\u7a7a\u8fd4\u56de\u7f3a\u7701\u7248\u672c\u53f7 return version == null || version.length() == 0 ? defaultVersion : version; } catch (Throwable e) { // \u9632\u5fa1\u6027\u5bb9\u9519 // \u5ffd\u7565\u5f02\u5e38\uff0c\u8fd4\u56de\u7f3a\u7701\u7248\u672c\u53f7 logger.error(e.getMessage(), e); return defaultVersion; } } }","title":"\u65e5\u5fd7\u4fe1\u606f\u5305\u542b\u73af\u5883\u4fe1\u606f"},{"location":"dev/principals/dummy/#kill-dump","text":"\u6bcf\u6b21\u7ebf\u4e0a\u73af\u5883\u4e00\u51fa\u95ee\u9898\uff0c\u5927\u5bb6\u5c31\u614c\u4e86\uff0c\u901a\u5e38\u6700\u76f4\u63a5\u7684\u529e\u6cd5\u56de\u6eda\u91cd\u542f\uff0c\u4ee5\u51cf\u5c11\u6545\u969c\u65f6\u95f4\uff0c\u8fd9\u6837\u73b0\u573a\u5c31\u88ab\u7834\u574f\u4e86\uff0c\u8981\u60f3\u4e8b\u540e\u67e5\u95ee\u9898\u5c31\u9ebb\u70e6\u4e86\uff0c\u6709\u4e9b\u95ee\u9898\u5fc5\u987b\u5728\u7ebf\u4e0a\u7684\u5927\u538b\u529b\u4e0b\u624d\u4f1a\u53d1\u751f\uff0c\u7ebf\u4e0b\u6d4b\u8bd5\u73af\u5883\u5f88\u96be\u91cd\u73b0\uff0c\u4e0d\u592a\u53ef\u80fd\u8ba9\u5f00\u53d1\u6216 Appops \u5728\u91cd\u542f\u524d\uff0c\u5148\u624b\u5de5\u5c06\u51fa\u9519\u73b0\u573a\u6240\u6709\u6570\u636e\u5907\u4efd\u4e00\u4e0b\uff0c\u6240\u4ee5\u6700\u597d\u5728 kill \u811a\u672c\u4e4b\u524d\u8c03\u7528 dump\uff0c\u8fdb\u884c\u81ea\u52a8\u5907\u4efd\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u6709\u4eba\u4e3a\u758f\u5ffd\u3002dump\u811a\u672c\u793a\u4f8b\uff1a JAVA_HOME=/usr/java OUTPUT_HOME=~/output DEPLOY_HOME=`dirname $0` HOST_NAME=`hostname` DUMP_PIDS=`ps --no-heading -C java -f --width 1000 | grep $DEPLOY_HOME |awk '{print $2}'` if [ -z $DUMP_PIDS ]; then echo The server $HOST_NAME is not started! exit 1; fi DUMP_ROOT=$OUTPUT_HOME/dump if [ ! -d $DUMP_ROOT ]; then mkdir $DUMP_ROOT fi DUMP_DATE=`date +%Y%m%d%H%M%S` DUMP_DIR=$DUMP_ROOT/dump-$DUMP_DATE if [ ! -d $DUMP_DIR ]; then mkdir $DUMP_DIR fi echo -e Dumping the server $HOST_NAME ...\\c for PID in $DUMP_PIDS ; do $JAVA_HOME/bin/jstack $PID $DUMP_DIR/jstack-$PID.dump 2 1 echo -e .\\c $JAVA_HOME/bin/jinfo $PID $DUMP_DIR/jinfo-$PID.dump 2 1 echo -e .\\c $JAVA_HOME/bin/jstat -gcutil $PID $DUMP_DIR/jstat-gcutil-$PID.dump 2 1 echo -e .\\c $JAVA_HOME/bin/jstat -gccapacity $PID $DUMP_DIR/jstat-gccapacity-$PID.dump 2 1 echo -e .\\c $JAVA_HOME/bin/jmap $PID $DUMP_DIR/jmap-$PID.dump 2 1 echo -e .\\c $JAVA_HOME/bin/jmap -heap $PID $DUMP_DIR/jmap-heap-$PID.dump 2 1 echo -e .\\c $JAVA_HOME/bin/jmap -histo $PID $DUMP_DIR/jmap-histo-$PID.dump 2 1 echo -e .\\c if [ -r /usr/sbin/lsof ]; then /usr/sbin/lsof -p $PID $DUMP_DIR/lsof-$PID.dump echo -e .\\c fi done if [ -r /usr/bin/sar ]; then /usr/bin/sar $DUMP_DIR/sar.dump echo -e .\\c fi if [ -r /usr/bin/uptime ]; then /usr/bin/uptime $DUMP_DIR/uptime.dump echo -e .\\c fi if [ -r /usr/bin/free ]; then /usr/bin/free -t $DUMP_DIR/free.dump echo -e .\\c fi if [ -r /usr/bin/vmstat ]; then /usr/bin/vmstat $DUMP_DIR/vmstat.dump echo -e .\\c fi if [ -r /usr/bin/mpstat ]; then /usr/bin/mpstat $DUMP_DIR/mpstat.dump echo -e .\\c fi if [ -r /usr/bin/iostat ]; then /usr/bin/iostat $DUMP_DIR/iostat.dump echo -e .\\c fi if [ -r /bin/netstat ]; then /bin/netstat $DUMP_DIR/netstat.dump echo -e .\\c fi echo OK!","title":"kill \u4e4b\u524d\u5148 dump"},{"location":"dev/principals/expansibility/","text":"\u8c08\u8c08\u6269\u5145\u5f0f\u6269\u5c55\u4e0e\u589e\u91cf\u5f0f\u6269\u5c55 http://javatar.iteye.com/blog/690845 \u6211\u4eec\u5e73\u53f0\u7684\u4ea7\u54c1\u8d8a\u6765\u8d8a\u591a\uff0c\u4ea7\u54c1\u7684\u529f\u80fd\u4e5f\u8d8a\u6765\u8d8a\u591a\u3002\u5e73\u53f0\u7684\u4ea7\u54c1\u4e3a\u4e86\u9002\u5e94\u5404 BU \u548c\u90e8\u95e8\u4ee5\u53ca\u4ea7\u54c1\u7ebf\u7684\u9700\u6c42\uff0c\u52bf\u5fc5\u4f1a\u5c06\u5f88\u591a\u4e0d\u76f8\u5e72\u7684\u529f\u80fd\u51d1\u5728\u4e00\u8d77\uff0c\u5ba2\u6237\u53ef\u4ee5\u9009\u62e9\u6027\u7684\u4f7f\u7528\u3002\u4e3a\u4e86\u517c\u5bb9\u66f4\u591a\u7684\u9700\u6c42\uff0c\u6bcf\u4e2a\u4ea7\u54c1\uff0c\u6bcf\u4e2a\u6846\u67b6\uff0c\u90fd\u5728\u4e0d\u505c\u7684\u6269\u5c55\uff0c\u800c\u6211\u4eec\u7ecf\u5e38\u4f1a\u9009\u62e9\u4e00\u4e9b\u6269\u5c55\u7684\u6269\u5c55\u65b9\u5f0f\uff0c\u4e5f\u5c31\u662f\u5c06\u65b0\u65e7\u529f\u80fd\u6269\u5c55\u6210\u4e00\u4e2a\u901a\u7528\u5b9e\u73b0\u3002\u6211\u60f3\u8ba8\u8bba\u662f\uff0c\u6709\u4e9b\u60c5\u51b5\u4e0b\u4e5f\u53ef\u4ee5\u8003\u8651\u589e\u91cf\u5f0f\u7684\u6269\u5c55\u65b9\u5f0f\uff0c\u4e5f\u5c31\u662f\u4fdd\u7559\u539f\u529f\u80fd\u7684\u7b80\u5355\u6027\uff0c\u65b0\u529f\u80fd\u72ec\u7acb\u5b9e\u73b0\u3002\u6211\u6700\u8fd1\u4e00\u76f4\u505a\u5206\u5e03\u5f0f\u670d\u52a1\u6846\u67b6\u7684\u5f00\u53d1\uff0c\u5c31\u62ff\u6211\u4eec\u9879\u76ee\u4e2d\u7684\u95ee\u9898\u5f00\u6dae\u5427\u3002 \u6bd4\u5982\uff1a\u8fdc\u7a0b\u8c03\u7528\u6846\u67b6\uff0c\u80af\u5b9a\u5c11\u4e0d\u4e86\u5e8f\u5217\u5316\u529f\u80fd\uff0c\u529f\u80fd\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u628a\u6d41\u8f6c\u6210\u5bf9\u8c61\uff0c\u5bf9\u8c61\u8f6c\u6210\u6d41\u3002\u4f46\u56e0\u6709\u4e9b\u5730\u65b9\u53ef\u80fd\u4f1a\u4f7f\u7528 osgi\uff0c\u8fd9\u6837\u5e8f\u5217\u5316\u65f6\uff0cIO \u6240\u5728\u7684 ClassLoader \u53ef\u80fd\u548c\u4e1a\u52a1\u65b9\u7684 ClassLoader \u662f\u9694\u79bb\u7684\u3002\u9700\u8981\u5c06\u6d41\u8f6c\u6362\u6210 byte[] \u6570\u7ec4\uff0c\u7136\u540e\u4f20\u7ed9\u4e1a\u52a1\u65b9\u7684 ClassLoader \u8fdb\u884c\u5e8f\u5217\u5316\u3002\u4e3a\u4e86\u9002\u5e94 osgi \u9700\u6c42\uff0c\u628a\u539f\u6765\u975e osgi \u4e0e osgi \u7684\u573a\u666f\u6269\u5c55\u4e86\u4e00\u4e0b\uff0c\u8fd9\u6837\uff0c\u4e0d\u7ba1\u662f\u4e0d\u662f osgi \u73af\u5883\uff0c\u90fd\u5148\u5c06\u6d41\u8f6c\u6210 byte[] \u6570\u7ec4\uff0c\u62f7\u8d1d\u4e00\u6b21\u3002\u7136\u800c\uff0c\u5927\u90e8\u5206\u573a\u666f\u90fd\u7528\u4e0d\u4e0a osgi\uff0c\u5374\u4e3a osgi \u4ed8\u51fa\u4e86\u4ee3\u4ef7\u3002\u800c\u5982\u679c\u91c7\u7528\u589e\u91cf\u5f0f\u6269\u5c55\u65b9\u5f0f\uff0c\u975e osgi \u7684\u4ee3\u7801\u539f\u5c01\u4e0d\u52a8\uff0c\u518d\u52a0\u4e00\u4e2a osgi \u7684\u5b9e\u73b0\uff0c\u8981\u7528 osgi \u7684\u65f6\u5019\uff0c\u76f4\u63a5\u4f9d\u8d56 osgi \u5b9e\u73b0\u5373\u53ef\u3002 \u518d\u6bd4\u5982\uff1a\u6700\u5f00\u59cb\uff0c\u8fdc\u7a0b\u670d\u52a1\u90fd\u662f\u57fa\u4e8e\u63a5\u53e3\u65b9\u6cd5\uff0c\u8fdb\u884c\u900f\u660e\u5316\u8c03\u7528\u7684\u3002\u8fd9\u6837\uff0c\u6269\u5c55\u63a5\u53e3\u5c31\u662f\uff0c invoke(Method method, Object[] args)\uff0c\u540e\u6765\uff0c\u6709\u4e86\u65e0\u63a5\u53e3\u8c03\u7528\u7684\u9700\u6c42\uff0c\u5c31\u662f\u6ca1\u6709\u63a5\u53e3\u65b9\u6cd5\u4e5f\u80fd\u8c03\u7528\uff0c\u5e76\u5c06 POJO \u5bf9\u8c61\u90fd\u8f6c\u6362\u6210 Map \u8868\u793a\u3002\u56e0\u4e3a Method \u5bf9\u8c61\u662f\u4e0d\u80fd\u76f4\u63a5 new \u51fa\u6765\u7684\uff0c\u6211\u4eec\u4e0d\u81ea\u89c9\u9009\u4e86\u4e00\u4e2a\u6269\u5c55\u5f0f\u6269\u5c55\uff0c\u628a\u6269\u5c55\u63a5\u53e3\u6539\u6210\u4e86 invoke(String methodName, String[] parameterTypes, String returnTypes, Object[] args)\uff0c\u5bfc\u81f4\u4e0d\u7ba1\u662f\u4e0d\u662f\u65e0\u63a5\u53e3\u8c03\u7528\uff0c\u90fd\u5f97\u628a parameterTypes \u4ece Class[] \u8f6c\u6210 String[]\u3002\u5982\u679c\u9009\u7528\u589e\u91cf\u5f0f\u6269\u5c55\uff0c\u5e94\u8be5\u662f\u4fdd\u6301\u539f\u6709\u63a5\u53e3\u4e0d\u53d8\uff0c\u589e\u52a0\u4e00\u4e2a GeneralService \u63a5\u53e3\uff0c\u91cc\u9762\u6709\u4e00\u4e2a\u901a\u7528\u7684 invoke() \u65b9\u6cd5\uff0c\u548c\u5176\u5b83\u6b63\u5e38\u4e1a\u52a1\u4e0a\u7684\u63a5\u53e3\u4e00\u6837\u7684\u8c03\u7528\u65b9\u5f0f\uff0c\u6269\u5c55\u63a5\u53e3\u4e5f\u4e0d\u7528\u53d8\uff0c\u53ea\u662f GeneralServiceImpl \u7684 invoke() \u5b9e\u73b0\u4f1a\u5c06\u6536\u5230\u7684\u8c03\u7528\u8f6c\u7ed9\u76ee\u6807\u63a5\u53e3\uff0c\u8fd9\u6837\u5c31\u80fd\u5c06\u65b0\u529f\u80fd\u589e\u91cf\u5230\u65e7\u529f\u80fd\u4e0a\uff0c\u5e76\u4fdd\u6301\u539f\u6765\u7ed3\u6784\u7684\u7b80\u5355\u6027\u3002 \u518d\u518d\u6bd4\u5982\uff1a\u65e0\u72b6\u6001\u6d88\u606f\u53d1\u9001\uff0c\u5f88\u7b80\u5355\uff0c\u5e8f\u5217\u5316\u4e00\u4e2a\u5bf9\u8c61\u53d1\u8fc7\u53bb\u5c31\u884c\u3002\u540e\u6765\u6709\u4e86\u540c\u6b65\u6d88\u606f\u53d1\u9001\u9700\u6c42\uff0c\u9700\u8981\u4e00\u4e2a Request/Response \u8fdb\u884c\u914d\u5bf9\uff0c\u91c7\u7528\u6269\u5c55\u5f0f\u6269\u5c55\uff0c\u81ea\u7136\u60f3\u5230\uff0c\u65e0\u72b6\u6001\u6d88\u606f\u5176\u5b9e\u662f\u4e00\u4e2a\u6ca1\u6709 Response \u7684 Request\uff0c\u6240\u4ee5\u5728 Request \u91cc\u52a0\u4e00\u4e2a boolean \u72b6\u6001\uff0c\u8868\u793a\u8981\u4e0d\u8981\u8fd4\u56de Response\u3002\u5982\u679c\u518d\u6765\u4e00\u4e2a\u4f1a\u8bdd\u6d88\u606f\u53d1\u9001\u9700\u6c42\uff0c\u90a3\u5c31\u518d\u52a0\u4e00\u4e2a Session \u4ea4\u4e92\uff0c\u7136\u540e\u53d1\u73b0\uff0c\u539f\u6765\u540c\u6b65\u6d88\u606f\u53d1\u9001\u662f\u4f1a\u8bdd\u6d88\u606f\u7684\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u6240\u6709\u573a\u666f\u90fd\u4f20 Session\uff0c\u4e0d\u9700\u8981 Session \u7684\u5730\u65b9\u65e0\u89c6\u5373\u53ef\u3002 \u5982\u679c\u91c7\u7528\u589e\u91cf\u5f0f\u6269\u5c55\uff0c\u65e0\u72b6\u6001\u6d88\u606f\u53d1\u9001\u539f\u5c01\u4e0d\u52a8\uff0c\u540c\u6b65\u6d88\u606f\u53d1\u9001\uff0c\u5728\u65e0\u72b6\u6001\u6d88\u606f\u57fa\u7840\u4e0a\u52a0\u4e00\u4e2a Request/Response \u5904\u7406\uff0c\u4f1a\u8bdd\u6d88\u606f\u53d1\u9001\uff0c\u518d\u52a0\u4e00\u4e2a SessionRequest/SessionResponse \u5904\u7406\u3002","title":"\u8c08\u8c08\u6269\u5145\u5f0f\u6269\u5c55\u4e0e\u589e\u91cf\u5f0f\u6269\u5c55"},{"location":"dev/principals/expansibility/#_1","text":"http://javatar.iteye.com/blog/690845 \u6211\u4eec\u5e73\u53f0\u7684\u4ea7\u54c1\u8d8a\u6765\u8d8a\u591a\uff0c\u4ea7\u54c1\u7684\u529f\u80fd\u4e5f\u8d8a\u6765\u8d8a\u591a\u3002\u5e73\u53f0\u7684\u4ea7\u54c1\u4e3a\u4e86\u9002\u5e94\u5404 BU \u548c\u90e8\u95e8\u4ee5\u53ca\u4ea7\u54c1\u7ebf\u7684\u9700\u6c42\uff0c\u52bf\u5fc5\u4f1a\u5c06\u5f88\u591a\u4e0d\u76f8\u5e72\u7684\u529f\u80fd\u51d1\u5728\u4e00\u8d77\uff0c\u5ba2\u6237\u53ef\u4ee5\u9009\u62e9\u6027\u7684\u4f7f\u7528\u3002\u4e3a\u4e86\u517c\u5bb9\u66f4\u591a\u7684\u9700\u6c42\uff0c\u6bcf\u4e2a\u4ea7\u54c1\uff0c\u6bcf\u4e2a\u6846\u67b6\uff0c\u90fd\u5728\u4e0d\u505c\u7684\u6269\u5c55\uff0c\u800c\u6211\u4eec\u7ecf\u5e38\u4f1a\u9009\u62e9\u4e00\u4e9b\u6269\u5c55\u7684\u6269\u5c55\u65b9\u5f0f\uff0c\u4e5f\u5c31\u662f\u5c06\u65b0\u65e7\u529f\u80fd\u6269\u5c55\u6210\u4e00\u4e2a\u901a\u7528\u5b9e\u73b0\u3002\u6211\u60f3\u8ba8\u8bba\u662f\uff0c\u6709\u4e9b\u60c5\u51b5\u4e0b\u4e5f\u53ef\u4ee5\u8003\u8651\u589e\u91cf\u5f0f\u7684\u6269\u5c55\u65b9\u5f0f\uff0c\u4e5f\u5c31\u662f\u4fdd\u7559\u539f\u529f\u80fd\u7684\u7b80\u5355\u6027\uff0c\u65b0\u529f\u80fd\u72ec\u7acb\u5b9e\u73b0\u3002\u6211\u6700\u8fd1\u4e00\u76f4\u505a\u5206\u5e03\u5f0f\u670d\u52a1\u6846\u67b6\u7684\u5f00\u53d1\uff0c\u5c31\u62ff\u6211\u4eec\u9879\u76ee\u4e2d\u7684\u95ee\u9898\u5f00\u6dae\u5427\u3002 \u6bd4\u5982\uff1a\u8fdc\u7a0b\u8c03\u7528\u6846\u67b6\uff0c\u80af\u5b9a\u5c11\u4e0d\u4e86\u5e8f\u5217\u5316\u529f\u80fd\uff0c\u529f\u80fd\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u628a\u6d41\u8f6c\u6210\u5bf9\u8c61\uff0c\u5bf9\u8c61\u8f6c\u6210\u6d41\u3002\u4f46\u56e0\u6709\u4e9b\u5730\u65b9\u53ef\u80fd\u4f1a\u4f7f\u7528 osgi\uff0c\u8fd9\u6837\u5e8f\u5217\u5316\u65f6\uff0cIO \u6240\u5728\u7684 ClassLoader \u53ef\u80fd\u548c\u4e1a\u52a1\u65b9\u7684 ClassLoader \u662f\u9694\u79bb\u7684\u3002\u9700\u8981\u5c06\u6d41\u8f6c\u6362\u6210 byte[] \u6570\u7ec4\uff0c\u7136\u540e\u4f20\u7ed9\u4e1a\u52a1\u65b9\u7684 ClassLoader \u8fdb\u884c\u5e8f\u5217\u5316\u3002\u4e3a\u4e86\u9002\u5e94 osgi \u9700\u6c42\uff0c\u628a\u539f\u6765\u975e osgi \u4e0e osgi \u7684\u573a\u666f\u6269\u5c55\u4e86\u4e00\u4e0b\uff0c\u8fd9\u6837\uff0c\u4e0d\u7ba1\u662f\u4e0d\u662f osgi \u73af\u5883\uff0c\u90fd\u5148\u5c06\u6d41\u8f6c\u6210 byte[] \u6570\u7ec4\uff0c\u62f7\u8d1d\u4e00\u6b21\u3002\u7136\u800c\uff0c\u5927\u90e8\u5206\u573a\u666f\u90fd\u7528\u4e0d\u4e0a osgi\uff0c\u5374\u4e3a osgi \u4ed8\u51fa\u4e86\u4ee3\u4ef7\u3002\u800c\u5982\u679c\u91c7\u7528\u589e\u91cf\u5f0f\u6269\u5c55\u65b9\u5f0f\uff0c\u975e osgi \u7684\u4ee3\u7801\u539f\u5c01\u4e0d\u52a8\uff0c\u518d\u52a0\u4e00\u4e2a osgi \u7684\u5b9e\u73b0\uff0c\u8981\u7528 osgi \u7684\u65f6\u5019\uff0c\u76f4\u63a5\u4f9d\u8d56 osgi \u5b9e\u73b0\u5373\u53ef\u3002 \u518d\u6bd4\u5982\uff1a\u6700\u5f00\u59cb\uff0c\u8fdc\u7a0b\u670d\u52a1\u90fd\u662f\u57fa\u4e8e\u63a5\u53e3\u65b9\u6cd5\uff0c\u8fdb\u884c\u900f\u660e\u5316\u8c03\u7528\u7684\u3002\u8fd9\u6837\uff0c\u6269\u5c55\u63a5\u53e3\u5c31\u662f\uff0c invoke(Method method, Object[] args)\uff0c\u540e\u6765\uff0c\u6709\u4e86\u65e0\u63a5\u53e3\u8c03\u7528\u7684\u9700\u6c42\uff0c\u5c31\u662f\u6ca1\u6709\u63a5\u53e3\u65b9\u6cd5\u4e5f\u80fd\u8c03\u7528\uff0c\u5e76\u5c06 POJO \u5bf9\u8c61\u90fd\u8f6c\u6362\u6210 Map \u8868\u793a\u3002\u56e0\u4e3a Method \u5bf9\u8c61\u662f\u4e0d\u80fd\u76f4\u63a5 new \u51fa\u6765\u7684\uff0c\u6211\u4eec\u4e0d\u81ea\u89c9\u9009\u4e86\u4e00\u4e2a\u6269\u5c55\u5f0f\u6269\u5c55\uff0c\u628a\u6269\u5c55\u63a5\u53e3\u6539\u6210\u4e86 invoke(String methodName, String[] parameterTypes, String returnTypes, Object[] args)\uff0c\u5bfc\u81f4\u4e0d\u7ba1\u662f\u4e0d\u662f\u65e0\u63a5\u53e3\u8c03\u7528\uff0c\u90fd\u5f97\u628a parameterTypes \u4ece Class[] \u8f6c\u6210 String[]\u3002\u5982\u679c\u9009\u7528\u589e\u91cf\u5f0f\u6269\u5c55\uff0c\u5e94\u8be5\u662f\u4fdd\u6301\u539f\u6709\u63a5\u53e3\u4e0d\u53d8\uff0c\u589e\u52a0\u4e00\u4e2a GeneralService \u63a5\u53e3\uff0c\u91cc\u9762\u6709\u4e00\u4e2a\u901a\u7528\u7684 invoke() \u65b9\u6cd5\uff0c\u548c\u5176\u5b83\u6b63\u5e38\u4e1a\u52a1\u4e0a\u7684\u63a5\u53e3\u4e00\u6837\u7684\u8c03\u7528\u65b9\u5f0f\uff0c\u6269\u5c55\u63a5\u53e3\u4e5f\u4e0d\u7528\u53d8\uff0c\u53ea\u662f GeneralServiceImpl \u7684 invoke() \u5b9e\u73b0\u4f1a\u5c06\u6536\u5230\u7684\u8c03\u7528\u8f6c\u7ed9\u76ee\u6807\u63a5\u53e3\uff0c\u8fd9\u6837\u5c31\u80fd\u5c06\u65b0\u529f\u80fd\u589e\u91cf\u5230\u65e7\u529f\u80fd\u4e0a\uff0c\u5e76\u4fdd\u6301\u539f\u6765\u7ed3\u6784\u7684\u7b80\u5355\u6027\u3002 \u518d\u518d\u6bd4\u5982\uff1a\u65e0\u72b6\u6001\u6d88\u606f\u53d1\u9001\uff0c\u5f88\u7b80\u5355\uff0c\u5e8f\u5217\u5316\u4e00\u4e2a\u5bf9\u8c61\u53d1\u8fc7\u53bb\u5c31\u884c\u3002\u540e\u6765\u6709\u4e86\u540c\u6b65\u6d88\u606f\u53d1\u9001\u9700\u6c42\uff0c\u9700\u8981\u4e00\u4e2a Request/Response \u8fdb\u884c\u914d\u5bf9\uff0c\u91c7\u7528\u6269\u5c55\u5f0f\u6269\u5c55\uff0c\u81ea\u7136\u60f3\u5230\uff0c\u65e0\u72b6\u6001\u6d88\u606f\u5176\u5b9e\u662f\u4e00\u4e2a\u6ca1\u6709 Response \u7684 Request\uff0c\u6240\u4ee5\u5728 Request \u91cc\u52a0\u4e00\u4e2a boolean \u72b6\u6001\uff0c\u8868\u793a\u8981\u4e0d\u8981\u8fd4\u56de Response\u3002\u5982\u679c\u518d\u6765\u4e00\u4e2a\u4f1a\u8bdd\u6d88\u606f\u53d1\u9001\u9700\u6c42\uff0c\u90a3\u5c31\u518d\u52a0\u4e00\u4e2a Session \u4ea4\u4e92\uff0c\u7136\u540e\u53d1\u73b0\uff0c\u539f\u6765\u540c\u6b65\u6d88\u606f\u53d1\u9001\u662f\u4f1a\u8bdd\u6d88\u606f\u7684\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u6240\u6709\u573a\u666f\u90fd\u4f20 Session\uff0c\u4e0d\u9700\u8981 Session \u7684\u5730\u65b9\u65e0\u89c6\u5373\u53ef\u3002 \u5982\u679c\u91c7\u7528\u589e\u91cf\u5f0f\u6269\u5c55\uff0c\u65e0\u72b6\u6001\u6d88\u606f\u53d1\u9001\u539f\u5c01\u4e0d\u52a8\uff0c\u540c\u6b65\u6d88\u606f\u53d1\u9001\uff0c\u5728\u65e0\u72b6\u6001\u6d88\u606f\u57fa\u7840\u4e0a\u52a0\u4e00\u4e2a Request/Response \u5904\u7406\uff0c\u4f1a\u8bdd\u6d88\u606f\u53d1\u9001\uff0c\u518d\u52a0\u4e00\u4e2a SessionRequest/SessionResponse \u5904\u7406\u3002","title":"\u8c08\u8c08\u6269\u5145\u5f0f\u6269\u5c55\u4e0e\u589e\u91cf\u5f0f\u6269\u5c55"},{"location":"dev/principals/extension/","text":"\u6269\u5c55\u70b9\u91cd\u6784 http://javatar.iteye.com/blog/1041832 \u968f\u7740\u670d\u52a1\u5316\u7684\u63a8\u5e7f\uff0c\u7f51\u7ad9\u5bf9Dubbo\u670d\u52a1\u6846\u67b6\u7684\u9700\u6c42\u9010\u6e10\u589e\u591a\uff0cDubbo \u7684\u73b0\u6709\u5f00\u53d1\u4eba\u5458\u80fd\u5b9e\u73b0\u7684\u9700\u6c42\u6709\u9650\uff0c\u5f88\u591a\u9700\u6c42\u90fd\u88ab delay\uff0c\u800c\u7f51\u7ad9\u7684\u540c\u5b66\u4e5f\u5e0c\u671b\u53c2\u4e0e\u8fdb\u6765\uff0c\u52a0\u4e0a\u9886\u57df\u7684\u63a8\u52a8\uff0c\u6240\u4ee5\u5e73\u53f0\u8ba1\u5212\u5c06\u90e8\u5206\u9879\u76ee\u5bf9\u516c\u53f8\u5185\u90e8\u5f00\u653e\uff0c\u8ba9\u5927\u5bb6\u4e00\u8d77\u6765\u5b9e\u73b0\uff0cDubbo \u4e3a\u8bd5\u70b9\u9879\u76ee\u4e4b\u4e00\u3002 \u65e2\u7136\u8981\u5f00\u653e\uff0c\u90a3 Dubbo \u5c31\u8981\u7559\u4e00\u4e9b\u6269\u5c55\u70b9\uff0c\u8ba9\u53c2\u4e0e\u8005\u5c3d\u91cf\u9ed1\u76d2\u6269\u5c55\uff0c\u800c\u4e0d\u662f\u767d\u76d2\u7684\u4fee\u6539\u4ee3\u7801\uff0c\u5426\u5219\u5206\u652f\uff0c\u8d28\u91cf\uff0c\u5408\u5e76\uff0c\u51b2\u7a81\u90fd\u4f1a\u5f88\u96be\u7ba1\u7406\u3002 \u5148\u770b\u4e00\u4e0b Dubbo \u73b0\u6709\u7684\u8bbe\u8ba1\uff1a \u8fd9\u91cc\u9762\u867d\u7136\u6709\u90e8\u5206\u6269\u5c55\u63a5\u53e3\uff0c\u4f46\u5e76\u4e0d\u80fd\u5f88\u597d\u7684\u534f\u4f5c\uff0c\u800c\u4e14\u6269\u5c55\u70b9\u7684\u52a0\u8f7d\u548c\u914d\u7f6e\u90fd\u6ca1\u6709\u7edf\u4e00\u5904\u7406\uff0c\u6240\u4ee5\u4e0b\u9762\u5bf9\u5b83\u8fdb\u884c\u91cd\u6784\u3002 \u7b2c\u4e00\u6b65\uff0c\u5fae\u6838\u5fc3\uff0c\u63d2\u4ef6\u5f0f\uff0c\u5e73\u7b49\u5bf9\u5f85\u7b2c\u4e09\u65b9 \u5373\u7136\u8981\u6269\u5c55\uff0c\u6269\u5c55\u70b9\u7684\u52a0\u8f7d\u65b9\u5f0f\uff0c\u9996\u5148\u8981\u7edf\u4e00\uff0c\u5fae\u6838\u5fc3+\u63d2\u4ef6\u5f0f\uff0c\u662f\u6bd4\u8f83\u80fd\u8fbe\u5230 OCP \u539f\u5219\u7684\u601d\u8def\u3002 \u7531\u4e00\u4e2a\u63d2\u4ef6\u751f\u547d\u5468\u671f\u7ba1\u7406\u5bb9\u5668\uff0c\u6784\u6210\u5fae\u6838\u5fc3\uff0c\u6838\u5fc3\u4e0d\u5305\u62ec\u4efb\u4f55\u529f\u80fd\uff0c\u8fd9\u6837\u53ef\u4ee5\u786e\u4fdd\u6240\u6709\u529f\u80fd\u90fd\u80fd\u88ab\u66ff\u6362\uff0c\u5e76\u4e14\uff0c\u6846\u67b6\u4f5c\u8005\u80fd\u505a\u5230\u7684\u529f\u80fd\uff0c\u6269\u5c55\u8005\u4e5f\u4e00\u5b9a\u8981\u80fd\u505a\u5230\uff0c\u4ee5\u4fdd\u8bc1\u5e73\u7b49\u5bf9\u5f85\u7b2c\u4e09\u65b9\uff0c\u6240\u4ee5\uff0c\u6846\u67b6\u81ea\u8eab\u7684\u529f\u80fd\u4e5f\u8981\u7528\u63d2\u4ef6\u7684\u65b9\u5f0f\u5b9e\u73b0\uff0c\u4e0d\u80fd\u6709\u4efb\u4f55\u786c\u7f16\u7801\u3002 \u901a\u5e38\u5fae\u6838\u5fc3\u90fd\u4f1a\u91c7\u7528 Factory\u3001IoC\u3001OSGi \u7b49\u65b9\u5f0f\u7ba1\u7406\u63d2\u4ef6\u751f\u547d\u5468\u671f\u3002\u8003\u8651 Dubbo \u7684\u9002\u7528\u9762\uff0c\u4e0d\u60f3\u5f3a\u4f9d\u8d56 Spring \u7b49 IoC \u5bb9\u5668\u3002\u81ea\u5df2\u9020\u4e00\u4e2a\u5c0f\u7684 IoC \u5bb9\u5668\uff0c\u4e5f\u89c9\u5f97\u6709\u70b9\u8fc7\u5ea6\u8bbe\u8ba1\uff0c\u6240\u4ee5\u6253\u7b97\u91c7\u7528\u6700\u7b80\u5355\u7684 Factory \u65b9\u5f0f\u7ba1\u7406\u63d2\u4ef6\u3002 \u6700\u7ec8\u51b3\u5b9a\u91c7\u7528\u7684\u662f JDK \u6807\u51c6\u7684 SPI \u6269\u5c55\u673a\u5236\uff0c\u53c2\u89c1\uff1a java.util.ServiceLoader \uff0c\u4e5f\u5c31\u662f\u6269\u5c55\u8005\u5728 jar \u5305\u7684 META-INF/services/ \u76ee\u5f55\u4e0b\u653e\u7f6e\u4e0e\u63a5\u53e3\u540c\u540d\u7684\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\u63a5\u53e3\u5b9e\u73b0\u7c7b\u540d\uff0c\u591a\u4e2a\u5b9e\u73b0\u7c7b\u540d\u7528\u6362\u884c\u7b26\u5206\u9694\u3002\u6bd4\u5982\uff0c\u9700\u8981\u6269\u5c55 Dubbo \u7684\u534f\u8bae\uff0c\u53ea\u9700\u5728 xxx.jar \u4e2d\u653e\u7f6e\u6587\u4ef6\uff1a META-INF/services/org.apache.dubbo.rpc.Protocol \uff0c\u5185\u5bb9\u4e3a com.alibaba.xxx.XxxProtocol \u3002Dubbo \u901a\u8fc7 ServiceLoader \u626b\u63cf\u5230\u6240\u6709 Protocol \u5b9e\u73b0\u3002 \u5e76\u7ea6\u5b9a\u6240\u6709\u63d2\u4ef6\uff0c\u90fd\u5fc5\u987b\u6807\u6ce8\uff1a @Extension(\"name\") \uff0c\u4f5c\u4e3a\u52a0\u8f7d\u540e\u7684\u6807\u8bc6\u6027\u540d\u79f0\uff0c\u7528\u4e8e\u914d\u7f6e\u9009\u62e9\u3002 \u7b2c\u4e8c\u6b65\uff0c\u6bcf\u4e2a\u6269\u5c55\u70b9\u53ea\u5c01\u88c5\u4e00\u4e2a\u53d8\u5316\u56e0\u5b50\uff0c\u6700\u5927\u5316\u590d\u7528 \u6bcf\u4e2a\u6269\u5c55\u70b9\u7684\u5b9e\u73b0\u8005\uff0c\u5f80\u5f80\u90fd\u53ea\u662f\u5173\u5fc3\u4e00\u4ef6\u4e8b\uff0c\u73b0\u5728\u7684\u6269\u5c55\u70b9\uff0c\u5e76\u6ca1\u6709\u5b8c\u5168\u5206\u79bb\u3002\u6bd4\u5982\uff1aFailover, Route, LoadBalance, Directory \u6ca1\u6709\u5b8c\u5168\u5206\u5f00\uff0c\u5168\u7531 RoutingInvokerGroup \u5199\u6b7b\u4e86\u3002 \u518d\u6bd4\u5982\uff0c\u534f\u8bae\u6269\u5c55\uff0c\u6269\u5c55\u8005\u53ef\u80fd\u53ea\u662f\u60f3\u66ff\u6362\u5e8f\u5217\u5316\u65b9\u5f0f\uff0c\u6216\u8005\u53ea\u66ff\u6362\u4f20\u8f93\u65b9\u5f0f\uff0c\u5e76\u4e14 Remoting \u548c Http \u4e5f\u80fd\u590d\u7528\u5e8f\u5217\u5316\u7b49\u5b9e\u73b0\u3002\u8fd9\u6837\uff0c\u9700\u4e3a\u4f20\u8f93\u65b9\u5f0f\uff0c\u5ba2\u6237\u7aef\u5b9e\u73b0\uff0c\u670d\u52a1\u5668\u7aef\u5b9e\u73b0\uff0c\u534f\u8bae\u5934\u89e3\u6790\uff0c\u6570\u636e\u5e8f\u5217\u5316\uff0c\u90fd\u7559\u51fa\u4e0d\u540c\u6269\u5c55\u70b9\u3002 \u62c6\u5206\u540e\uff0c\u8bbe\u8ba1\u5982\u4e0b\uff1a \u7b2c\u4e09\u6b65\uff0c\u5168\u7ba1\u9053\u5f0f\u8bbe\u8ba1\uff0c\u6846\u67b6\u81ea\u8eab\u903b\u8f91\uff0c\u5747\u4f7f\u7528\u622a\u9762\u62e6\u622a\u5b9e\u73b0 \u73b0\u5728\u5f88\u591a\u7684\u903b\u8f91\uff0c\u90fd\u662f\u653e\u5728\u57fa\u7c7b\u4e2d\u5b9e\u73b0\uff0c\u7136\u540e\u901a\u8fc7\u6a21\u677f\u65b9\u6cd5\u56de\u8c03\u5b50\u7c7b\u7684\u5b9e\u73b0\uff0c\u5305\u62ec\uff1alocal, mock, generic, echo, token, accesslog, monitor, count, limit \u7b49\u7b49\uff0c\u53ef\u4ee5\u5168\u90e8\u62c6\u5206\u4f7f\u7528 Filter \u5b9e\u73b0\uff0c\u6bcf\u4e2a\u529f\u80fd\u90fd\u662f\u8c03\u7528\u94fe\u4e0a\u7684\u4e00\u73af\u3002 \u6bd4\u5982\uff1a(\u57fa\u7c7b\u6a21\u677f\u65b9\u6cd5) public abstract AbstractInvoker implements Invoker { public Result invoke(Invocation inv) throws RpcException { // \u4f2a\u4ee3\u7801 active ++; if (active max) wait(); doInvoke(inv); active --; notify(); } protected abstract Result doInvoke(Invocation inv) throws RpcException } \u6539\u6210\uff1a(\u94fe\u5f0f\u8fc7\u6ee4\u5668) public abstract LimitFilter implements Filter { public Result invoke(Invoker chain, Invocation inv) throws RpcException { // \u4f2a\u4ee3\u7801 active ++; if (active max) wait(); chain.invoke(inv); active --; notify(); } } \u7b2c\u56db\u6b65\uff0c\u6700\u5c11\u6982\u5ff5\uff0c\u4e00\u81f4\u6027\u6982\u5ff5\u6a21\u578b \u4fdd\u6301\u5c3d\u53ef\u80fd\u5c11\u7684\u6982\u5ff5\uff0c\u6709\u52a9\u4e8e\u7406\u89e3\uff0c\u5bf9\u4e8e\u5f00\u653e\u7684\u7cfb\u7edf\u5c24\u5176\u91cd\u8981\u3002\u53e6\u5916\uff0c\u5404\u63a5\u53e3\u90fd\u4f7f\u7528\u4e00\u81f4\u7684\u6982\u5ff5\u6a21\u578b\uff0c\u80fd\u76f8\u4e92\u6307\u5f15\uff0c\u5e76\u51cf\u5c11\u6a21\u578b\u8f6c\u6362\uff0c \u6bd4\u5982\uff0cInvoker \u7684\u65b9\u6cd5\u7b7e\u540d\u4e3a: Result invoke(Invocation invocation) throws RpcException; \u800c Exporter \u7684\u65b9\u6cd5\u7b7e\u540d\u4e3a: Object invoke(Method method, Object[] args) throws Throwable; \u4f46\u5b83\u4eec\u7684\u4f5c\u7528\u662f\u4e00\u6837\u7684\uff0c\u53ea\u662f\u4e00\u4e2a\u5728\u5ba2\u6237\u7aef\uff0c\u4e00\u4e2a\u5728\u670d\u52a1\u5668\u7aef\uff0c\u5374\u91c7\u7528\u4e86\u4e0d\u4e00\u6837\u7684\u6a21\u578b\u7c7b\u3002 \u518d\u6bd4\u5982\uff0cURL \u4ee5\u5b57\u7b26\u4e32\u4f20\u9012\uff0c\u4e0d\u505c\u7684\u89e3\u6790\u548c\u62fc\u88c5\uff0c\u6ca1\u6709\u4e00\u4e2a URL \u6a21\u578b\u7c7b\uff0c \u800c URL \u7684\u53c2\u6570\uff0c\u5374\u65f6\u800c Map, \u65f6\u800c Parameters \u7c7b\u5305\u88c5\uff0c export(String url) createExporter(String host, int port, Parameters params); \u4f7f\u7528\u4e00\u81f4\u6a21\u578b\uff1a export(URL url) createExporter(URL url); \u518d\u6bd4\u5982\uff0c\u73b0\u6709\u7684\uff1aInvoker, Exporter, InvocationHandler, FilterChain \u5176\u5b9e\u90fd\u662f invoke \u884c\u4e3a\u7684\u4e0d\u540c\u9636\u6bb5\uff0c\u5b8c\u5168\u53ef\u4ee5\u62bd\u8c61\u6389\uff0c\u7edf\u4e00\u4e3a Invoker\uff0c\u51cf\u5c11\u6982\u5ff5\u3002 \u7b2c\u4e94\u6b65\uff0c\u5206\u5c42\uff0c\u7ec4\u5408\u5f0f\u6269\u5c55\uff0c\u800c\u4e0d\u662f\u6cdb\u5316\u5f0f\u6269\u5c55 \u539f\u56e0\u53c2\u89c1\uff1a \u8c08\u8c08\u6269\u5145\u5f0f\u6269\u5c55\u4e0e\u589e\u91cf\u5f0f\u6269\u5c55 \u3002 \u6cdb\u5316\u5f0f\u6269\u5c55\u6307\uff1a\u5c06\u6269\u5c55\u70b9\u9010\u6e10\u62bd\u8c61\uff0c\u53d6\u6240\u6709\u529f\u80fd\u5e76\u96c6\uff0c\u65b0\u52a0\u529f\u80fd\u603b\u662f\u5957\u5165\u5e76\u6269\u5145\u65e7\u529f\u80fd\u7684\u6982\u5ff5\u3002 \u7ec4\u5408\u5f0f\u6269\u5c55\u6307\uff1a\u5c06\u6269\u5c55\u70b9\u6b63\u4ea4\u5206\u89e3\uff0c\u53d6\u6240\u6709\u529f\u80fd\u4ea4\u96c6\uff0c\u65b0\u52a0\u529f\u80fd\u603b\u662f\u57fa\u4e8e\u65e7\u529f\u80fd\u4e4b\u4e0a\u5b9e\u73b0\u3002 \u4e0a\u9762\u7684\u8bbe\u8ba1\uff0c\u4e0d\u81ea\u89c9\u7684\u5c31\u5c06 Dubbo \u73b0\u6709\u529f\u80fd\u90fd\u5f53\u6210\u4e86\u6838\u5fc3\u529f\u80fd\u3002\u4e0a\u9762\u7684\u6982\u5ff5\u5305\u542b\u4e86 Dubbo \u73b0\u6709 RPC \u7684\u6240\u6709\u529f\u80fd\uff0c\u5305\u62ec\uff1aProxy, Router, Failover, LoadBalance, Subscriber, Publisher, Invoker, Exporter, Filter \u7b49\uff0c \u4f46\u8fd9\u4e9b\u90fd\u662f\u6838\u5fc3\u5417\uff1f\u8e22\u6389\u54ea\u4e9b\uff0cRPC \u4e00\u6837\u53ef\u4ee5 Run\uff1f\u800c\u54ea\u4e9b\u53c8\u662f\u4e0d\u80fd\u8e22\u6389\u7684\uff1f\u57fa\u4e8e\u8fd9\u6837\u8003\u8651\uff0c\u53ef\u4ee5\u5c06 RPC \u5206\u89e3\u6210\u4e24\u4e2a\u5c42\u6b21\uff0c\u53ea\u662f Protocol \u548c Invoker \u624d\u662f RPC \u7684\u6838\u5fc3\u3002\u5176\u5b83\uff0c\u5305\u62ec Router, Failover, Loadbalance, Subscriber, Publisher \u90fd\u4e0d\u6838\u5fc3\uff0c\u800c\u662f Routing\u3002\u6240\u4ee5\uff0c\u5c06 Routing \u4f5c\u4e3a Rpc \u6838\u5fc3\u7684\u4e00\u4e2a\u6269\u5c55\uff0c\u8bbe\u8ba1\u5982\u4e0b\uff1a \u7b2c\u516d\u6b65\uff0c\u6574\u7406\uff0c\u68b3\u7406\u5173\u7cfb \u6574\u7406\u540e\uff0c\u8bbe\u8ba1\u5982\u4e0b\uff1a","title":"\u6269\u5c55\u70b9\u91cd\u6784"},{"location":"dev/principals/extension/#_1","text":"http://javatar.iteye.com/blog/1041832 \u968f\u7740\u670d\u52a1\u5316\u7684\u63a8\u5e7f\uff0c\u7f51\u7ad9\u5bf9Dubbo\u670d\u52a1\u6846\u67b6\u7684\u9700\u6c42\u9010\u6e10\u589e\u591a\uff0cDubbo \u7684\u73b0\u6709\u5f00\u53d1\u4eba\u5458\u80fd\u5b9e\u73b0\u7684\u9700\u6c42\u6709\u9650\uff0c\u5f88\u591a\u9700\u6c42\u90fd\u88ab delay\uff0c\u800c\u7f51\u7ad9\u7684\u540c\u5b66\u4e5f\u5e0c\u671b\u53c2\u4e0e\u8fdb\u6765\uff0c\u52a0\u4e0a\u9886\u57df\u7684\u63a8\u52a8\uff0c\u6240\u4ee5\u5e73\u53f0\u8ba1\u5212\u5c06\u90e8\u5206\u9879\u76ee\u5bf9\u516c\u53f8\u5185\u90e8\u5f00\u653e\uff0c\u8ba9\u5927\u5bb6\u4e00\u8d77\u6765\u5b9e\u73b0\uff0cDubbo \u4e3a\u8bd5\u70b9\u9879\u76ee\u4e4b\u4e00\u3002 \u65e2\u7136\u8981\u5f00\u653e\uff0c\u90a3 Dubbo \u5c31\u8981\u7559\u4e00\u4e9b\u6269\u5c55\u70b9\uff0c\u8ba9\u53c2\u4e0e\u8005\u5c3d\u91cf\u9ed1\u76d2\u6269\u5c55\uff0c\u800c\u4e0d\u662f\u767d\u76d2\u7684\u4fee\u6539\u4ee3\u7801\uff0c\u5426\u5219\u5206\u652f\uff0c\u8d28\u91cf\uff0c\u5408\u5e76\uff0c\u51b2\u7a81\u90fd\u4f1a\u5f88\u96be\u7ba1\u7406\u3002 \u5148\u770b\u4e00\u4e0b Dubbo \u73b0\u6709\u7684\u8bbe\u8ba1\uff1a \u8fd9\u91cc\u9762\u867d\u7136\u6709\u90e8\u5206\u6269\u5c55\u63a5\u53e3\uff0c\u4f46\u5e76\u4e0d\u80fd\u5f88\u597d\u7684\u534f\u4f5c\uff0c\u800c\u4e14\u6269\u5c55\u70b9\u7684\u52a0\u8f7d\u548c\u914d\u7f6e\u90fd\u6ca1\u6709\u7edf\u4e00\u5904\u7406\uff0c\u6240\u4ee5\u4e0b\u9762\u5bf9\u5b83\u8fdb\u884c\u91cd\u6784\u3002","title":"\u6269\u5c55\u70b9\u91cd\u6784"},{"location":"dev/principals/extension/#_2","text":"\u5373\u7136\u8981\u6269\u5c55\uff0c\u6269\u5c55\u70b9\u7684\u52a0\u8f7d\u65b9\u5f0f\uff0c\u9996\u5148\u8981\u7edf\u4e00\uff0c\u5fae\u6838\u5fc3+\u63d2\u4ef6\u5f0f\uff0c\u662f\u6bd4\u8f83\u80fd\u8fbe\u5230 OCP \u539f\u5219\u7684\u601d\u8def\u3002 \u7531\u4e00\u4e2a\u63d2\u4ef6\u751f\u547d\u5468\u671f\u7ba1\u7406\u5bb9\u5668\uff0c\u6784\u6210\u5fae\u6838\u5fc3\uff0c\u6838\u5fc3\u4e0d\u5305\u62ec\u4efb\u4f55\u529f\u80fd\uff0c\u8fd9\u6837\u53ef\u4ee5\u786e\u4fdd\u6240\u6709\u529f\u80fd\u90fd\u80fd\u88ab\u66ff\u6362\uff0c\u5e76\u4e14\uff0c\u6846\u67b6\u4f5c\u8005\u80fd\u505a\u5230\u7684\u529f\u80fd\uff0c\u6269\u5c55\u8005\u4e5f\u4e00\u5b9a\u8981\u80fd\u505a\u5230\uff0c\u4ee5\u4fdd\u8bc1\u5e73\u7b49\u5bf9\u5f85\u7b2c\u4e09\u65b9\uff0c\u6240\u4ee5\uff0c\u6846\u67b6\u81ea\u8eab\u7684\u529f\u80fd\u4e5f\u8981\u7528\u63d2\u4ef6\u7684\u65b9\u5f0f\u5b9e\u73b0\uff0c\u4e0d\u80fd\u6709\u4efb\u4f55\u786c\u7f16\u7801\u3002 \u901a\u5e38\u5fae\u6838\u5fc3\u90fd\u4f1a\u91c7\u7528 Factory\u3001IoC\u3001OSGi \u7b49\u65b9\u5f0f\u7ba1\u7406\u63d2\u4ef6\u751f\u547d\u5468\u671f\u3002\u8003\u8651 Dubbo \u7684\u9002\u7528\u9762\uff0c\u4e0d\u60f3\u5f3a\u4f9d\u8d56 Spring \u7b49 IoC \u5bb9\u5668\u3002\u81ea\u5df2\u9020\u4e00\u4e2a\u5c0f\u7684 IoC \u5bb9\u5668\uff0c\u4e5f\u89c9\u5f97\u6709\u70b9\u8fc7\u5ea6\u8bbe\u8ba1\uff0c\u6240\u4ee5\u6253\u7b97\u91c7\u7528\u6700\u7b80\u5355\u7684 Factory \u65b9\u5f0f\u7ba1\u7406\u63d2\u4ef6\u3002 \u6700\u7ec8\u51b3\u5b9a\u91c7\u7528\u7684\u662f JDK \u6807\u51c6\u7684 SPI \u6269\u5c55\u673a\u5236\uff0c\u53c2\u89c1\uff1a java.util.ServiceLoader \uff0c\u4e5f\u5c31\u662f\u6269\u5c55\u8005\u5728 jar \u5305\u7684 META-INF/services/ \u76ee\u5f55\u4e0b\u653e\u7f6e\u4e0e\u63a5\u53e3\u540c\u540d\u7684\u6587\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\u63a5\u53e3\u5b9e\u73b0\u7c7b\u540d\uff0c\u591a\u4e2a\u5b9e\u73b0\u7c7b\u540d\u7528\u6362\u884c\u7b26\u5206\u9694\u3002\u6bd4\u5982\uff0c\u9700\u8981\u6269\u5c55 Dubbo \u7684\u534f\u8bae\uff0c\u53ea\u9700\u5728 xxx.jar \u4e2d\u653e\u7f6e\u6587\u4ef6\uff1a META-INF/services/org.apache.dubbo.rpc.Protocol \uff0c\u5185\u5bb9\u4e3a com.alibaba.xxx.XxxProtocol \u3002Dubbo \u901a\u8fc7 ServiceLoader \u626b\u63cf\u5230\u6240\u6709 Protocol \u5b9e\u73b0\u3002 \u5e76\u7ea6\u5b9a\u6240\u6709\u63d2\u4ef6\uff0c\u90fd\u5fc5\u987b\u6807\u6ce8\uff1a @Extension(\"name\") \uff0c\u4f5c\u4e3a\u52a0\u8f7d\u540e\u7684\u6807\u8bc6\u6027\u540d\u79f0\uff0c\u7528\u4e8e\u914d\u7f6e\u9009\u62e9\u3002","title":"\u7b2c\u4e00\u6b65\uff0c\u5fae\u6838\u5fc3\uff0c\u63d2\u4ef6\u5f0f\uff0c\u5e73\u7b49\u5bf9\u5f85\u7b2c\u4e09\u65b9"},{"location":"dev/principals/extension/#_3","text":"\u6bcf\u4e2a\u6269\u5c55\u70b9\u7684\u5b9e\u73b0\u8005\uff0c\u5f80\u5f80\u90fd\u53ea\u662f\u5173\u5fc3\u4e00\u4ef6\u4e8b\uff0c\u73b0\u5728\u7684\u6269\u5c55\u70b9\uff0c\u5e76\u6ca1\u6709\u5b8c\u5168\u5206\u79bb\u3002\u6bd4\u5982\uff1aFailover, Route, LoadBalance, Directory \u6ca1\u6709\u5b8c\u5168\u5206\u5f00\uff0c\u5168\u7531 RoutingInvokerGroup \u5199\u6b7b\u4e86\u3002 \u518d\u6bd4\u5982\uff0c\u534f\u8bae\u6269\u5c55\uff0c\u6269\u5c55\u8005\u53ef\u80fd\u53ea\u662f\u60f3\u66ff\u6362\u5e8f\u5217\u5316\u65b9\u5f0f\uff0c\u6216\u8005\u53ea\u66ff\u6362\u4f20\u8f93\u65b9\u5f0f\uff0c\u5e76\u4e14 Remoting \u548c Http \u4e5f\u80fd\u590d\u7528\u5e8f\u5217\u5316\u7b49\u5b9e\u73b0\u3002\u8fd9\u6837\uff0c\u9700\u4e3a\u4f20\u8f93\u65b9\u5f0f\uff0c\u5ba2\u6237\u7aef\u5b9e\u73b0\uff0c\u670d\u52a1\u5668\u7aef\u5b9e\u73b0\uff0c\u534f\u8bae\u5934\u89e3\u6790\uff0c\u6570\u636e\u5e8f\u5217\u5316\uff0c\u90fd\u7559\u51fa\u4e0d\u540c\u6269\u5c55\u70b9\u3002 \u62c6\u5206\u540e\uff0c\u8bbe\u8ba1\u5982\u4e0b\uff1a","title":"\u7b2c\u4e8c\u6b65\uff0c\u6bcf\u4e2a\u6269\u5c55\u70b9\u53ea\u5c01\u88c5\u4e00\u4e2a\u53d8\u5316\u56e0\u5b50\uff0c\u6700\u5927\u5316\u590d\u7528"},{"location":"dev/principals/extension/#_4","text":"\u73b0\u5728\u5f88\u591a\u7684\u903b\u8f91\uff0c\u90fd\u662f\u653e\u5728\u57fa\u7c7b\u4e2d\u5b9e\u73b0\uff0c\u7136\u540e\u901a\u8fc7\u6a21\u677f\u65b9\u6cd5\u56de\u8c03\u5b50\u7c7b\u7684\u5b9e\u73b0\uff0c\u5305\u62ec\uff1alocal, mock, generic, echo, token, accesslog, monitor, count, limit \u7b49\u7b49\uff0c\u53ef\u4ee5\u5168\u90e8\u62c6\u5206\u4f7f\u7528 Filter \u5b9e\u73b0\uff0c\u6bcf\u4e2a\u529f\u80fd\u90fd\u662f\u8c03\u7528\u94fe\u4e0a\u7684\u4e00\u73af\u3002 \u6bd4\u5982\uff1a(\u57fa\u7c7b\u6a21\u677f\u65b9\u6cd5) public abstract AbstractInvoker implements Invoker { public Result invoke(Invocation inv) throws RpcException { // \u4f2a\u4ee3\u7801 active ++; if (active max) wait(); doInvoke(inv); active --; notify(); } protected abstract Result doInvoke(Invocation inv) throws RpcException } \u6539\u6210\uff1a(\u94fe\u5f0f\u8fc7\u6ee4\u5668) public abstract LimitFilter implements Filter { public Result invoke(Invoker chain, Invocation inv) throws RpcException { // \u4f2a\u4ee3\u7801 active ++; if (active max) wait(); chain.invoke(inv); active --; notify(); } }","title":"\u7b2c\u4e09\u6b65\uff0c\u5168\u7ba1\u9053\u5f0f\u8bbe\u8ba1\uff0c\u6846\u67b6\u81ea\u8eab\u903b\u8f91\uff0c\u5747\u4f7f\u7528\u622a\u9762\u62e6\u622a\u5b9e\u73b0"},{"location":"dev/principals/extension/#_5","text":"\u4fdd\u6301\u5c3d\u53ef\u80fd\u5c11\u7684\u6982\u5ff5\uff0c\u6709\u52a9\u4e8e\u7406\u89e3\uff0c\u5bf9\u4e8e\u5f00\u653e\u7684\u7cfb\u7edf\u5c24\u5176\u91cd\u8981\u3002\u53e6\u5916\uff0c\u5404\u63a5\u53e3\u90fd\u4f7f\u7528\u4e00\u81f4\u7684\u6982\u5ff5\u6a21\u578b\uff0c\u80fd\u76f8\u4e92\u6307\u5f15\uff0c\u5e76\u51cf\u5c11\u6a21\u578b\u8f6c\u6362\uff0c \u6bd4\u5982\uff0cInvoker \u7684\u65b9\u6cd5\u7b7e\u540d\u4e3a: Result invoke(Invocation invocation) throws RpcException; \u800c Exporter \u7684\u65b9\u6cd5\u7b7e\u540d\u4e3a: Object invoke(Method method, Object[] args) throws Throwable; \u4f46\u5b83\u4eec\u7684\u4f5c\u7528\u662f\u4e00\u6837\u7684\uff0c\u53ea\u662f\u4e00\u4e2a\u5728\u5ba2\u6237\u7aef\uff0c\u4e00\u4e2a\u5728\u670d\u52a1\u5668\u7aef\uff0c\u5374\u91c7\u7528\u4e86\u4e0d\u4e00\u6837\u7684\u6a21\u578b\u7c7b\u3002 \u518d\u6bd4\u5982\uff0cURL \u4ee5\u5b57\u7b26\u4e32\u4f20\u9012\uff0c\u4e0d\u505c\u7684\u89e3\u6790\u548c\u62fc\u88c5\uff0c\u6ca1\u6709\u4e00\u4e2a URL \u6a21\u578b\u7c7b\uff0c \u800c URL \u7684\u53c2\u6570\uff0c\u5374\u65f6\u800c Map, \u65f6\u800c Parameters \u7c7b\u5305\u88c5\uff0c export(String url) createExporter(String host, int port, Parameters params); \u4f7f\u7528\u4e00\u81f4\u6a21\u578b\uff1a export(URL url) createExporter(URL url); \u518d\u6bd4\u5982\uff0c\u73b0\u6709\u7684\uff1aInvoker, Exporter, InvocationHandler, FilterChain \u5176\u5b9e\u90fd\u662f invoke \u884c\u4e3a\u7684\u4e0d\u540c\u9636\u6bb5\uff0c\u5b8c\u5168\u53ef\u4ee5\u62bd\u8c61\u6389\uff0c\u7edf\u4e00\u4e3a Invoker\uff0c\u51cf\u5c11\u6982\u5ff5\u3002","title":"\u7b2c\u56db\u6b65\uff0c\u6700\u5c11\u6982\u5ff5\uff0c\u4e00\u81f4\u6027\u6982\u5ff5\u6a21\u578b"},{"location":"dev/principals/extension/#_6","text":"\u539f\u56e0\u53c2\u89c1\uff1a \u8c08\u8c08\u6269\u5145\u5f0f\u6269\u5c55\u4e0e\u589e\u91cf\u5f0f\u6269\u5c55 \u3002 \u6cdb\u5316\u5f0f\u6269\u5c55\u6307\uff1a\u5c06\u6269\u5c55\u70b9\u9010\u6e10\u62bd\u8c61\uff0c\u53d6\u6240\u6709\u529f\u80fd\u5e76\u96c6\uff0c\u65b0\u52a0\u529f\u80fd\u603b\u662f\u5957\u5165\u5e76\u6269\u5145\u65e7\u529f\u80fd\u7684\u6982\u5ff5\u3002 \u7ec4\u5408\u5f0f\u6269\u5c55\u6307\uff1a\u5c06\u6269\u5c55\u70b9\u6b63\u4ea4\u5206\u89e3\uff0c\u53d6\u6240\u6709\u529f\u80fd\u4ea4\u96c6\uff0c\u65b0\u52a0\u529f\u80fd\u603b\u662f\u57fa\u4e8e\u65e7\u529f\u80fd\u4e4b\u4e0a\u5b9e\u73b0\u3002 \u4e0a\u9762\u7684\u8bbe\u8ba1\uff0c\u4e0d\u81ea\u89c9\u7684\u5c31\u5c06 Dubbo \u73b0\u6709\u529f\u80fd\u90fd\u5f53\u6210\u4e86\u6838\u5fc3\u529f\u80fd\u3002\u4e0a\u9762\u7684\u6982\u5ff5\u5305\u542b\u4e86 Dubbo \u73b0\u6709 RPC \u7684\u6240\u6709\u529f\u80fd\uff0c\u5305\u62ec\uff1aProxy, Router, Failover, LoadBalance, Subscriber, Publisher, Invoker, Exporter, Filter \u7b49\uff0c \u4f46\u8fd9\u4e9b\u90fd\u662f\u6838\u5fc3\u5417\uff1f\u8e22\u6389\u54ea\u4e9b\uff0cRPC \u4e00\u6837\u53ef\u4ee5 Run\uff1f\u800c\u54ea\u4e9b\u53c8\u662f\u4e0d\u80fd\u8e22\u6389\u7684\uff1f\u57fa\u4e8e\u8fd9\u6837\u8003\u8651\uff0c\u53ef\u4ee5\u5c06 RPC \u5206\u89e3\u6210\u4e24\u4e2a\u5c42\u6b21\uff0c\u53ea\u662f Protocol \u548c Invoker \u624d\u662f RPC \u7684\u6838\u5fc3\u3002\u5176\u5b83\uff0c\u5305\u62ec Router, Failover, Loadbalance, Subscriber, Publisher \u90fd\u4e0d\u6838\u5fc3\uff0c\u800c\u662f Routing\u3002\u6240\u4ee5\uff0c\u5c06 Routing \u4f5c\u4e3a Rpc \u6838\u5fc3\u7684\u4e00\u4e2a\u6269\u5c55\uff0c\u8bbe\u8ba1\u5982\u4e0b\uff1a","title":"\u7b2c\u4e94\u6b65\uff0c\u5206\u5c42\uff0c\u7ec4\u5408\u5f0f\u6269\u5c55\uff0c\u800c\u4e0d\u662f\u6cdb\u5316\u5f0f\u6269\u5c55"},{"location":"dev/principals/extension/#_7","text":"\u6574\u7406\u540e\uff0c\u8bbe\u8ba1\u5982\u4e0b\uff1a","title":"\u7b2c\u516d\u6b65\uff0c\u6574\u7406\uff0c\u68b3\u7406\u5173\u7cfb"},{"location":"dev/principals/general-knowledge/","text":"\u4e00\u4e9b\u8bbe\u8ba1\u4e0a\u7684\u57fa\u672c\u5e38\u8bc6 http://javatar.iteye.com/blog/706098 \u6700\u8fd1\u7ed9\u56e2\u961f\u65b0\u4eba\u8bb2\u4e86\u4e00\u4e9b\u8bbe\u8ba1\u4e0a\u7684\u5e38\u8bc6\uff0c\u53ef\u80fd\u4f1a\u5bf9\u5176\u5b83\u7684\u65b0\u4eba\u4e5f\u6709\u4e9b\u5e2e\u52a9\uff0c\u628a\u6682\u65f6\u60f3\u5230\u7684\u51e0\u6761\uff0c\u5148\u8bb0\u5728\u8fd9\u91cc\u3002 API \u4e0e SPI \u5206\u79bb \u6846\u67b6\u6216\u7ec4\u4ef6\u901a\u5e38\u6709\u4e24\u7c7b\u5ba2\u6237\uff0c\u4e00\u4e2a\u662f\u4f7f\u7528\u8005\uff0c\u4e00\u4e2a\u662f\u6269\u5c55\u8005\u3002API (Application Programming Interface) \u662f\u7ed9\u4f7f\u7528\u8005\u7528\u7684\uff0c\u800c SPI (Service Provide Interface) \u662f\u7ed9\u6269\u5c55\u8005\u7528\u7684\u3002\u5728\u8bbe\u8ba1\u65f6\uff0c\u5c3d\u91cf\u628a\u5b83\u4eec\u9694\u79bb\u5f00\uff0c\u800c\u4e0d\u8981\u6df7\u5728\u4e00\u8d77\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f7f\u7528\u8005\u662f\u770b\u4e0d\u5230\u6269\u5c55\u8005\u5199\u7684\u5b9e\u73b0\u7684\u3002 \u6bd4\u5982\uff1a\u4e00\u4e2a Web \u6846\u67b6\uff0c\u5b83\u6709\u4e00\u4e2a API \u63a5\u53e3\u53eb Action\uff0c\u91cc\u9762\u6709\u4e2a execute() \u65b9\u6cd5\uff0c\u662f\u7ed9\u4f7f\u7528\u8005\u7528\u6765\u5199\u4e1a\u52a1\u903b\u8f91\u7684\u3002\u7136\u540e\uff0cWeb \u6846\u67b6\u6709\u4e00\u4e2a SPI \u63a5\u53e3\u7ed9\u6269\u5c55\u8005\u63a7\u5236\u8f93\u51fa\u65b9\u5f0f\uff0c\u6bd4\u5982\u7528 velocity \u6a21\u677f\u8f93\u51fa\u8fd8\u662f\u7528 json \u8f93\u51fa\u7b49\u3002\u5982\u679c\u8fd9\u4e2a Web \u6846\u67b6\u4f7f\u7528\u4e00\u4e2a\u90fd\u7ee7\u627f Action \u7684 VelocityAction \u548c\u4e00\u4e2a JsonAction \u505a\u4e3a\u6269\u5c55\u65b9\u5f0f\uff0c\u8981\u7528 velocity \u6a21\u677f\u8f93\u51fa\u7684\u5c31\u7ee7\u627f VelocityAction\uff0c\u8981\u7528 json \u8f93\u51fa\u7684\u5c31\u7ee7\u627f JsonAction\uff0c\u8fd9\u5c31\u662f API \u548c SPI \u6ca1\u6709\u5206\u79bb\u7684\u53cd\u9762\u4f8b\u5b50\uff0cSPI \u63a5\u53e3\u6df7\u5728\u4e86 API \u63a5\u53e3\u4e2d\u3002 \u5408\u7406\u7684\u65b9\u5f0f\u662f\uff0c\u6709\u4e00\u4e2a\u5355\u72ec\u7684 Renderer \u63a5\u53e3\uff0c\u6709 VelocityRenderer \u548c JsonRenderer \u5b9e\u73b0\uff0cWeb \u6846\u67b6\u5c06 Action \u7684\u8f93\u51fa\u8f6c\u4ea4\u7ed9 Renderer \u63a5\u53e3\u505a\u6e32\u67d3\u8f93\u51fa\u3002 \u670d\u52a1\u57df/\u5b9e\u4f53\u57df/\u4f1a\u8bdd\u57df\u5206\u79bb \u4efb\u4f55\u6846\u67b6\u6216\u7ec4\u4ef6\uff0c\u603b\u4f1a\u6709\u6838\u5fc3\u9886\u57df\u6a21\u578b\uff0c\u6bd4\u5982\uff1aSpring \u7684 Bean\uff0cStruts \u7684 Action\uff0cDubbo \u7684 Service\uff0cNapoli \u7684 Queue \u7b49\u7b49\u3002\u8fd9\u4e2a\u6838\u5fc3\u9886\u57df\u6a21\u578b\u53ca\u5176\u7ec4\u6210\u90e8\u5206\u79f0\u4e3a\u5b9e\u4f53\u57df\uff0c\u5b83\u4ee3\u8868\u7740\u6211\u4eec\u8981\u64cd\u4f5c\u7684\u76ee\u6807\u672c\u8eab\u3002\u5b9e\u4f53\u57df\u901a\u5e38\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u4e0d\u7ba1\u662f\u901a\u8fc7\u4e0d\u53d8\u7c7b\uff0c\u540c\u6b65\u72b6\u6001\uff0c\u6216\u590d\u5236\u7684\u65b9\u5f0f\u3002 \u670d\u52a1\u57df\u4e5f\u5c31\u662f\u884c\u4e3a\u57df\uff0c\u5b83\u662f\u7ec4\u4ef6\u7684\u529f\u80fd\u96c6\uff0c\u540c\u65f6\u4e5f\u8d1f\u8d23\u5b9e\u4f53\u57df\u548c\u4f1a\u8bdd\u57df\u7684\u751f\u547d\u5468\u671f\u7ba1\u7406\uff0c \u6bd4\u5982 Spring \u7684 ApplicationContext\uff0cDubbo \u7684 ServiceManager \u7b49\u3002\u670d\u52a1\u57df\u7684\u5bf9\u8c61\u901a\u5e38\u4f1a\u6bd4\u8f83\u91cd\uff0c\u800c\u4e14\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u5e76\u4ee5\u5355\u4e00\u5b9e\u4f8b\u670d\u52a1\u4e8e\u6240\u6709\u8c03\u7528\u3002 \u4ec0\u4e48\u662f\u4f1a\u8bdd\uff1f\u5c31\u662f\u4e00\u6b21\u4ea4\u4e92\u8fc7\u7a0b\u3002\u4f1a\u8bdd\u4e2d\u91cd\u8981\u7684\u6982\u5ff5\u662f\u4e0a\u4e0b\u6587\uff0c\u4ec0\u4e48\u662f\u4e0a\u4e0b\u6587\uff1f\u6bd4\u5982\u6211\u4eec\u8bf4\uff1a\u201c\u8001\u5730\u65b9\u89c1\u201d\uff0c\u8fd9\u91cc\u7684\u201c\u8001\u5730\u65b9\u201d\u5c31\u662f\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002\u4e3a\u4ec0\u4e48\u8bf4\u201c\u8001\u5730\u65b9\u201d\u5bf9\u65b9\u4f1a\u77e5\u9053\uff0c\u56e0\u4e3a\u6211\u4eec\u524d\u9762\u5b9a\u4e49\u4e86\u201c\u8001\u5730\u65b9\u201d\u7684\u5177\u4f53\u5185\u5bb9\u3002\u6240\u4ee5\u8bf4\uff0c\u4e0a\u4e0b\u6587\u901a\u5e38\u6301\u6709\u4ea4\u4e92\u8fc7\u7a0b\u4e2d\u7684\u72b6\u6001\u53d8\u91cf\u7b49\u3002\u4f1a\u8bdd\u5bf9\u8c61\u901a\u5e38\u8f83\u8f7b\uff0c\u6bcf\u6b21\u8bf7\u6c42\u90fd\u91cd\u65b0\u521b\u5efa\u5b9e\u4f8b\uff0c\u8bf7\u6c42\u7ed3\u675f\u540e\u9500\u6bc1\u3002\u7b80\u800c\u8a00\u4e4b\uff1a\u628a\u5143\u4fe1\u606f\u4ea4\u7531\u5b9e\u4f53\u57df\u6301\u6709\uff0c\u628a\u4e00\u6b21\u8bf7\u6c42\u4e2d\u7684\u4e34\u65f6\u72b6\u6001\u7531\u4f1a\u8bdd\u57df\u6301\u6709\uff0c\u7531\u670d\u52a1\u57df\u8d2f\u7a7f\u6574\u4e2a\u8fc7\u7a0b\u3002 \u5728\u91cd\u8981\u7684\u8fc7\u7a0b\u4e0a\u8bbe\u7f6e\u62e6\u622a\u63a5\u53e3 \u5982\u679c\u4f60\u8981\u5199\u4e2a\u8fdc\u7a0b\u8c03\u7528\u6846\u67b6\uff0c\u90a3\u8fdc\u7a0b\u8c03\u7528\u7684\u8fc7\u7a0b\u5e94\u8be5\u6709\u4e00\u4e2a\u7edf\u4e00\u7684\u62e6\u622a\u63a5\u53e3\u3002\u5982\u679c\u4f60\u8981\u5199\u4e00\u4e2a ORM \u6846\u67b6\uff0c\u90a3\u81f3\u5c11 SQL \u7684\u6267\u884c\u8fc7\u7a0b\uff0cMapping \u8fc7\u7a0b\u8981\u6709\u62e6\u622a\u63a5\u53e3\uff1b\u5982\u679c\u4f60\u8981\u5199\u4e00\u4e2a Web \u6846\u67b6\uff0c\u90a3\u8bf7\u6c42\u7684\u6267\u884c\u8fc7\u7a0b\u5e94\u8be5\u8981\u6709\u62e6\u622a\u63a5\u53e3\uff0c\u7b49\u7b49\u3002\u6ca1\u6709\u54ea\u4e2a\u516c\u7528\u7684\u6846\u67b6\u53ef\u4ee5 Cover \u4f4f\u6240\u6709\u9700\u6c42\uff0c\u5141\u8bb8\u5916\u7f6e\u884c\u4e3a\uff0c\u662f\u6846\u67b6\u7684\u57fa\u672c\u6269\u5c55\u65b9\u5f0f\u3002\u8fd9\u6837\uff0c\u5982\u679c\u6709\u4eba\u60f3\u5728\u8fdc\u7a0b\u8c03\u7528\u524d\uff0c\u9a8c\u8bc1\u4e0b\u4ee4\u724c\uff0c\u9a8c\u8bc1\u4e0b\u9ed1\u767d\u540d\u5355\uff0c\u7edf\u8ba1\u4e0b\u65e5\u5fd7\uff1b\u5982\u679c\u6709\u4eba\u60f3\u5728 SQL \u6267\u884c\u524d\u52a0\u4e0b\u5206\u9875\u5305\u88c5\uff0c\u505a\u4e0b\u6570\u636e\u6743\u9650\u63a7\u5236\uff0c\u7edf\u8ba1\u4e0b SQL \u6267\u884c\u65f6\u95f4\uff1b\u5982\u679c\u6709\u4eba\u60f3\u5728\u8bf7\u6c42\u6267\u884c\u524d\u68c0\u67e5\u4e0b\u89d2\u8272\uff0c\u5305\u88c5\u4e0b\u8f93\u5165\u8f93\u51fa\u6d41\uff0c\u7edf\u8ba1\u4e0b\u8bf7\u6c42\u91cf\uff0c\u7b49\u7b49\uff0c\u5c31\u53ef\u4ee5\u81ea\u884c\u5b8c\u6210\uff0c\u800c\u4e0d\u7528\u4fb5\u5165\u6846\u67b6\u5185\u90e8\u3002\u62e6\u622a\u63a5\u53e3\uff0c\u901a\u5e38\u662f\u628a\u8fc7\u7a0b\u672c\u8eab\u7528\u4e00\u4e2a\u5bf9\u8c61\u5c01\u88c5\u8d77\u6765\uff0c\u4f20\u7ed9\u62e6\u622a\u5668\u94fe\uff0c\u6bd4\u5982\uff1a\u8fdc\u7a0b\u8c03\u7528\u4e3b\u8fc7\u7a0b\u4e3a invoke()\uff0c\u90a3\u62e6\u622a\u5668\u63a5\u53e3\u901a\u5e38\u4e3a invoke(Invocation)\uff0cInvocation \u5bf9\u8c61\u5c01\u88c5\u4e86\u672c\u6765\u8981\u6267\u884c\u8fc7\u7a0b\u7684\u4e0a\u4e0b\u6587\uff0c\u5e76\u4e14 Invocation \u91cc\u6709\u4e00\u4e2a invoke() \u65b9\u6cd5\uff0c\u7531\u62e6\u622a\u5668\u51b3\u5b9a\u4ec0\u4e48\u65f6\u5019\u6267\u884c\uff0c\u540c\u65f6\uff0cInvocation \u4e5f\u4ee3\u8868\u62e6\u622a\u5668\u884c\u4e3a\u672c\u8eab\uff0c\u8fd9\u6837\u4e0a\u4e00\u62e6\u622a\u5668\u7684 Invocation \u5176\u5b9e\u662f\u5305\u88c5\u7684\u4e0b\u4e00\u62e6\u622a\u5668\u7684\u8fc7\u7a0b\uff0c\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u62e6\u622a\u5668\u7684 Invocation \u662f\u5305\u88c5\u7684\u6700\u7ec8\u7684 invoke() \u8fc7\u7a0b\uff1b\u540c\u7406\uff0cSQL \u4e3b\u8fc7\u7a0b\u4e3a execute()\uff0c\u90a3\u62e6\u622a\u5668\u63a5\u53e3\u901a\u5e38\u4e3a execute(Execution)\uff0c\u539f\u7406\u4e00\u6837\u3002\u5f53\u7136\uff0c\u5b9e\u73b0\u65b9\u5f0f\u53ef\u4ee5\u4efb\u610f\uff0c\u4e0a\u9762\u53ea\u662f\u4e3e\u4f8b\u3002 \u91cd\u8981\u7684\u72b6\u6001\u7684\u53d8\u66f4\u53d1\u9001\u4e8b\u4ef6\u5e76\u7559\u51fa\u76d1\u542c\u63a5\u53e3 \u8fd9\u91cc\u5148\u8981\u8bb2\u4e00\u4e2a\u4e8b\u4ef6\u548c\u4e0a\u9762\u62e6\u622a\u5668\u7684\u533a\u522b\uff0c\u62e6\u622a\u5668\u662f\u5e72\u9884\u8fc7\u7a0b\u7684\uff0c\u5b83\u662f\u8fc7\u7a0b\u7684\u4e00\u90e8\u5206\uff0c\u662f\u57fa\u4e8e\u8fc7\u7a0b\u884c\u4e3a\u7684\uff0c\u800c\u4e8b\u4ef6\u662f\u57fa\u4e8e\u72b6\u6001\u6570\u636e\u7684\uff0c\u4efb\u4f55\u884c\u4e3a\u6539\u53d8\u7684\u76f8\u540c\u72b6\u6001\uff0c\u5bf9\u4e8b\u4ef6\u5e94\u8be5\u662f\u4e00\u81f4\u7684\u3002\u4e8b\u4ef6\u901a\u5e38\u662f\u4e8b\u540e\u901a\u77e5\uff0c\u662f\u4e00\u4e2a Callback \u63a5\u53e3\uff0c\u65b9\u6cd5\u540d\u901a\u5e38\u662f\u8fc7\u53bb\u5f0f\u7684\uff0c\u6bd4\u5982 onChanged()\u3002\u6bd4\u5982\u8fdc\u7a0b\u8c03\u7528\u6846\u67b6\uff0c\u5f53\u7f51\u7edc\u65ad\u5f00\u6216\u8fde\u4e0a\u5e94\u8be5\u53d1\u51fa\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u5f53\u51fa\u73b0\u9519\u8bef\u4e5f\u53ef\u4ee5\u8003\u8651\u53d1\u51fa\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u8fd9\u6837\u5916\u56f4\u5e94\u7528\u5c31\u6709\u53ef\u80fd\u89c2\u5bdf\u5230\u6846\u67b6\u5185\u90e8\u7684\u53d8\u5316\uff0c\u505a\u76f8\u5e94\u9002\u5e94\u3002 \u6269\u5c55\u63a5\u53e3\u804c\u8d23\u5c3d\u53ef\u80fd\u5355\u4e00\uff0c\u5177\u6709\u53ef\u7ec4\u5408\u6027 \u6bd4\u5982\uff0c\u8fdc\u7a0b\u8c03\u7528\u6846\u67b6\u5b83\u7684\u534f\u8bae\u662f\u53ef\u4ee5\u66ff\u6362\u7684\u3002\u5982\u679c\u53ea\u63d0\u4f9b\u4e00\u4e2a\u603b\u7684\u6269\u5c55\u63a5\u53e3\uff0c\u5f53\u7136\u53ef\u4ee5\u505a\u5230\u5207\u6362\u534f\u8bae\uff0c\u4f46\u534f\u8bae\u652f\u6301\u662f\u53ef\u4ee5\u7ec6\u5206\u4e3a\u5e95\u5c42\u901a\u8baf\uff0c\u5e8f\u5217\u5316\uff0c\u52a8\u6001\u4ee3\u7406\u65b9\u5f0f\u7b49\u7b49\u3002\u5982\u679c\u5c06\u63a5\u53e3\u62c6\u7ec6\uff0c\u6b63\u4ea4\u5206\u89e3\uff0c\u4f1a\u66f4\u4fbf\u4e8e\u6269\u5c55\u8005\u590d\u7528\u5df2\u6709\u903b\u8f91\uff0c\u800c\u53ea\u662f\u66ff\u6362\u67d0\u90e8\u5206\u5b9e\u73b0\u7b56\u7565\u3002\u5f53\u7136\u8fd9\u4e2a\u5206\u89e3\u7684\u7c92\u5ea6\u9700\u8981\u628a\u63e1\u597d\u3002 \u5fae\u6838\u63d2\u4ef6\u5f0f\uff0c\u5e73\u7b49\u5bf9\u5f85\u7b2c\u4e09\u65b9 \u5927\u51e1\u53d1\u5c55\u7684\u6bd4\u8f83\u597d\u7684\u6846\u67b6\uff0c\u90fd\u9075\u5b88\u5fae\u6838\u7684\u7406\u5ff5\u3002Eclipse \u7684\u5fae\u6838\u662f OSGi\uff0c Spring \u7684\u5fae\u6838\u662f BeanFactory\uff0cMaven \u7684\u5fae\u6838\u662f Plexus\u3002\u901a\u5e38\u6838\u5fc3\u662f\u4e0d\u5e94\u8be5\u5e26\u6709\u529f\u80fd\u6027\u7684\uff0c\u800c\u662f\u4e00\u4e2a\u751f\u547d\u5468\u671f\u548c\u96c6\u6210\u5bb9\u5668\uff0c\u8fd9\u6837\u5404\u529f\u80fd\u53ef\u4ee5\u901a\u8fc7\u76f8\u540c\u7684\u65b9\u5f0f\u4ea4\u4e92\u53ca\u6269\u5c55\uff0c\u5e76\u4e14\u4efb\u4f55\u529f\u80fd\u90fd\u53ef\u4ee5\u88ab\u66ff\u6362\u3002\u5982\u679c\u505a\u4e0d\u5230\u5fae\u6838\uff0c\u81f3\u5c11\u8981\u5e73\u7b49\u5bf9\u5f85\u7b2c\u4e09\u65b9\uff0c\u5373\u539f\u4f5c\u8005\u80fd\u5b9e\u73b0\u7684\u529f\u80fd\uff0c\u6269\u5c55\u8005\u5e94\u8be5\u53ef\u4ee5\u901a\u8fc7\u6269\u5c55\u7684\u65b9\u5f0f\u5168\u90e8\u505a\u5230\u3002\u539f\u4f5c\u8005\u8981\u628a\u81ea\u5df1\u4e5f\u5f53\u4f5c\u6269\u5c55\u8005\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\u6846\u67b6\u7684\u53ef\u6301\u7eed\u6027\u53ca\u7531\u5185\u5411\u5916\u7684\u7a33\u5b9a\u6027\u3002 \u4e0d\u8981\u63a7\u5236\u5916\u90e8\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f \u6bd4\u5982\u4e0a\u9762\u8bf4\u7684 Action \u4f7f\u7528\u63a5\u53e3\u548c Renderer \u6269\u5c55\u63a5\u53e3\u3002\u6846\u67b6\u5982\u679c\u8ba9\u4f7f\u7528\u8005\u6216\u6269\u5c55\u8005\u628a Action \u6216 Renderer \u5b9e\u73b0\u7c7b\u7684\u7c7b\u540d\u6216\u7c7b\u5143\u4fe1\u606f\u62a5\u4e0a\u6765\uff0c\u7136\u540e\u5728\u5185\u90e8\u901a\u8fc7\u53cd\u5c04 newInstance() \u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u8fd9\u6837\u6846\u67b6\u5c31\u63a7\u5236\u4e86 Action \u6216 Renderer \u5b9e\u73b0\u7c7b\u7684\u751f\u547d\u5468\u671f\uff0cAction \u6216 Renderer \u7684\u751f\u8001\u75c5\u6b7b\uff0c\u6846\u67b6\u90fd\u81ea\u5df1\u505a\u4e86\uff0c\u5916\u90e8\u6269\u5c55\u6216\u96c6\u6210\u90fd\u65e0\u80fd\u4e3a\u529b\u3002\u597d\u7684\u529e\u6cd5\u662f\u8ba9\u4f7f\u7528\u8005\u6216\u6269\u5c55\u8005\u628a Action \u6216 Renderer \u5b9e\u73b0\u7c7b\u7684\u5b9e\u4f8b\u62a5\u4e0a\u6765\uff0c\u6846\u67b6\u53ea\u662f\u4f7f\u7528\u8fd9\u4e9b\u5b9e\u4f8b\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u662f\u600e\u4e48\u521b\u5efa\u7684\uff0c\u600e\u4e48\u9500\u6bc1\u7684\uff0c\u90fd\u548c\u6846\u67b6\u65e0\u5173\uff0c\u6846\u67b6\u6700\u591a\u63d0\u4f9b\u5de5\u5177\u7c7b\u8f85\u52a9\u7ba1\u7406\uff0c\u800c\u4e0d\u662f\u7edd\u5bf9\u63a7\u5236\u3002 \u53ef\u914d\u7f6e\u4e00\u5b9a\u53ef\u7f16\u7a0b\uff0c\u5e76\u4fdd\u6301\u53cb\u597d\u7684 CoC \u7ea6\u5b9a \u56e0\u4e3a\u4f7f\u7528\u73af\u5883\u7684\u4e0d\u786e\u5b9a\u56e0\u7d20\u5f88\u591a\uff0c\u6846\u67b6\u603b\u4f1a\u6709\u4e00\u4e9b\u914d\u7f6e\uff0c\u4e00\u822c\u90fd\u4f1a\u5230 classpath \u76f4\u626b\u67d0\u4e2a\u6307\u5b9a\u540d\u79f0\u7684\u914d\u7f6e\uff0c\u6216\u8005\u542f\u52a8\u65f6\u5141\u8bb8\u6307\u5b9a\u914d\u7f6e\u8def\u5f84\u3002\u505a\u4e3a\u4e00\u4e2a\u901a\u7528\u6846\u67b6\uff0c\u5e94\u8be5\u505a\u5230\u51e1\u662f\u80fd\u914d\u7f6e\u6587\u4ef6\u505a\u7684\u4e00\u5b9a\u8981\u80fd\u901a\u8fc7\u7f16\u7a0b\u65b9\u5f0f\u8fdb\u884c\uff0c\u5426\u5219\u5f53\u4f7f\u7528\u8005\u9700\u8981\u5c06\u4f60\u7684\u6846\u67b6\u4e0e\u53e6\u4e00\u4e2a\u6846\u67b6\u96c6\u6210\u65f6\u5c31\u4f1a\u5e26\u6765\u5f88\u591a\u4e0d\u5fc5\u8981\u7684\u9ebb\u70e6\u3002 \u53e6\u5916\uff0c\u5c3d\u53ef\u80fd\u505a\u4e00\u4e2a\u6807\u51c6\u7ea6\u5b9a\uff0c\u5982\u679c\u7528\u6237\u6309\u67d0\u79cd\u7ea6\u5b9a\u505a\u4e8b\u65f6\uff0c\u5c31\u4e0d\u9700\u8981\u8be5\u914d\u7f6e\u9879\u3002\u6bd4\u5982\uff1a\u914d\u7f6e\u6a21\u677f\u4f4d\u7f6e\uff0c\u4f60\u53ef\u4ee5\u7ea6\u5b9a\uff0c\u5982\u679c\u653e\u5728 templates \u76ee\u5f55\u4e0b\u5c31\u4e0d\u7528\u914d\u4e86\uff0c\u5982\u679c\u4f60\u60f3\u6362\u4e2a\u76ee\u5f55\uff0c\u5c31\u914d\u7f6e\u4e0b\u3002 \u533a\u5206\u547d\u4ee4\u4e0e\u67e5\u8be2\uff0c\u660e\u786e\u524d\u7f6e\u6761\u4ef6\u4e0e\u540e\u7f6e\u6761\u4ef6 \u8fd9\u4e2a\u662f\u5951\u7ea6\u5f0f\u8bbe\u8ba1\u7684\u4e00\u90e8\u5206\uff0c\u5c3d\u91cf\u9075\u5b88\u6709\u8fd4\u56de\u503c\u7684\u65b9\u6cd5\u662f\u67e5\u8be2\u65b9\u6cd5\uff0cvoid \u8fd4\u56de\u7684\u65b9\u6cd5\u662f\u547d\u4ee4\u3002\u67e5\u8be2\u65b9\u6cd5\u901a\u5e38\u662f\u5e42\u7b49\u6027\u7684\uff0c\u65e0\u526f\u4f5c\u7528\u7684\uff0c\u4e5f\u5c31\u662f\u4e0d\u6539\u53d8\u4efb\u4f55\u72b6\u6001\uff0c\u8c03 n \u6b21\u7ed3\u679c\u90fd\u662f\u4e00\u6837\u7684\uff0c\u6bd4\u5982 get \u67d0\u4e2a\u5c5e\u6027\u503c\uff0c\u6216\u67e5\u8be2\u4e00\u6761\u6570\u636e\u5e93\u8bb0\u5f55\u3002\u547d\u4ee4\u662f\u6307\u6709\u526f\u4f5c\u7528\u7684\uff0c\u4e5f\u5c31\u662f\u4f1a\u4fee\u6539\u72b6\u6001\uff0c\u6bd4\u5982 set \u67d0\u4e2a\u503c\uff0c\u6216 update \u67d0\u6761\u6570\u636e\u5e93\u8bb0\u5f55\u3002\u5982\u679c\u4f60\u7684\u65b9\u6cd5\u5373\u505a\u4e86\u4fee\u6539\u72b6\u6001\u7684\u64cd\u4f5c\uff0c\u53c8\u505a\u4e86\u67e5\u8be2\u8fd4\u56de\uff0c\u5982\u679c\u53ef\u80fd\uff0c\u5c06\u5176\u62c6\u6210\u5199\u8bfb\u5206\u79bb\u7684\u4e24\u4e2a\u65b9\u6cd5\uff0c\u6bd4\u5982\uff1aUser deleteUser(id)\uff0c\u5220\u9664\u7528\u6237\u5e76\u8fd4\u56de\u88ab\u5220\u9664\u7684\u7528\u6237\uff0c\u8003\u8651\u6539\u4e3a getUser() \u548c void \u7684 deleteUser()\u3002 \u53e6\u5916\uff0c\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u5c3d\u91cf\u524d\u7f6e\u65ad\u8a00\u4f20\u5165\u53c2\u6570\u7684\u5408\u6cd5\u6027\uff0c\u540e\u7f6e\u65ad\u8a00\u8fd4\u56de\u7ed3\u679c\u7684\u5408\u6cd5\u6027\uff0c\u5e76\u6587\u6863\u5316\u3002 \u589e\u91cf\u5f0f\u6269\u5c55\uff0c\u800c\u4e0d\u8981\u6269\u5145\u539f\u59cb\u6838\u5fc3\u6982\u5ff5 \u53c2\u89c1\uff1a \u8c08\u8c08\u6269\u5145\u5f0f\u6269\u5c55\u4e0e\u589e\u91cf\u5f0f\u6269\u5c55","title":"\u4e00\u4e9b\u8bbe\u8ba1\u4e0a\u7684\u57fa\u672c\u5e38\u8bc6"},{"location":"dev/principals/general-knowledge/#_1","text":"http://javatar.iteye.com/blog/706098 \u6700\u8fd1\u7ed9\u56e2\u961f\u65b0\u4eba\u8bb2\u4e86\u4e00\u4e9b\u8bbe\u8ba1\u4e0a\u7684\u5e38\u8bc6\uff0c\u53ef\u80fd\u4f1a\u5bf9\u5176\u5b83\u7684\u65b0\u4eba\u4e5f\u6709\u4e9b\u5e2e\u52a9\uff0c\u628a\u6682\u65f6\u60f3\u5230\u7684\u51e0\u6761\uff0c\u5148\u8bb0\u5728\u8fd9\u91cc\u3002","title":"\u4e00\u4e9b\u8bbe\u8ba1\u4e0a\u7684\u57fa\u672c\u5e38\u8bc6"},{"location":"dev/principals/general-knowledge/#api-spi","text":"\u6846\u67b6\u6216\u7ec4\u4ef6\u901a\u5e38\u6709\u4e24\u7c7b\u5ba2\u6237\uff0c\u4e00\u4e2a\u662f\u4f7f\u7528\u8005\uff0c\u4e00\u4e2a\u662f\u6269\u5c55\u8005\u3002API (Application Programming Interface) \u662f\u7ed9\u4f7f\u7528\u8005\u7528\u7684\uff0c\u800c SPI (Service Provide Interface) \u662f\u7ed9\u6269\u5c55\u8005\u7528\u7684\u3002\u5728\u8bbe\u8ba1\u65f6\uff0c\u5c3d\u91cf\u628a\u5b83\u4eec\u9694\u79bb\u5f00\uff0c\u800c\u4e0d\u8981\u6df7\u5728\u4e00\u8d77\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f7f\u7528\u8005\u662f\u770b\u4e0d\u5230\u6269\u5c55\u8005\u5199\u7684\u5b9e\u73b0\u7684\u3002 \u6bd4\u5982\uff1a\u4e00\u4e2a Web \u6846\u67b6\uff0c\u5b83\u6709\u4e00\u4e2a API \u63a5\u53e3\u53eb Action\uff0c\u91cc\u9762\u6709\u4e2a execute() \u65b9\u6cd5\uff0c\u662f\u7ed9\u4f7f\u7528\u8005\u7528\u6765\u5199\u4e1a\u52a1\u903b\u8f91\u7684\u3002\u7136\u540e\uff0cWeb \u6846\u67b6\u6709\u4e00\u4e2a SPI \u63a5\u53e3\u7ed9\u6269\u5c55\u8005\u63a7\u5236\u8f93\u51fa\u65b9\u5f0f\uff0c\u6bd4\u5982\u7528 velocity \u6a21\u677f\u8f93\u51fa\u8fd8\u662f\u7528 json \u8f93\u51fa\u7b49\u3002\u5982\u679c\u8fd9\u4e2a Web \u6846\u67b6\u4f7f\u7528\u4e00\u4e2a\u90fd\u7ee7\u627f Action \u7684 VelocityAction \u548c\u4e00\u4e2a JsonAction \u505a\u4e3a\u6269\u5c55\u65b9\u5f0f\uff0c\u8981\u7528 velocity \u6a21\u677f\u8f93\u51fa\u7684\u5c31\u7ee7\u627f VelocityAction\uff0c\u8981\u7528 json \u8f93\u51fa\u7684\u5c31\u7ee7\u627f JsonAction\uff0c\u8fd9\u5c31\u662f API \u548c SPI \u6ca1\u6709\u5206\u79bb\u7684\u53cd\u9762\u4f8b\u5b50\uff0cSPI \u63a5\u53e3\u6df7\u5728\u4e86 API \u63a5\u53e3\u4e2d\u3002 \u5408\u7406\u7684\u65b9\u5f0f\u662f\uff0c\u6709\u4e00\u4e2a\u5355\u72ec\u7684 Renderer \u63a5\u53e3\uff0c\u6709 VelocityRenderer \u548c JsonRenderer \u5b9e\u73b0\uff0cWeb \u6846\u67b6\u5c06 Action \u7684\u8f93\u51fa\u8f6c\u4ea4\u7ed9 Renderer \u63a5\u53e3\u505a\u6e32\u67d3\u8f93\u51fa\u3002","title":"API \u4e0e SPI \u5206\u79bb"},{"location":"dev/principals/general-knowledge/#_2","text":"\u4efb\u4f55\u6846\u67b6\u6216\u7ec4\u4ef6\uff0c\u603b\u4f1a\u6709\u6838\u5fc3\u9886\u57df\u6a21\u578b\uff0c\u6bd4\u5982\uff1aSpring \u7684 Bean\uff0cStruts \u7684 Action\uff0cDubbo \u7684 Service\uff0cNapoli \u7684 Queue \u7b49\u7b49\u3002\u8fd9\u4e2a\u6838\u5fc3\u9886\u57df\u6a21\u578b\u53ca\u5176\u7ec4\u6210\u90e8\u5206\u79f0\u4e3a\u5b9e\u4f53\u57df\uff0c\u5b83\u4ee3\u8868\u7740\u6211\u4eec\u8981\u64cd\u4f5c\u7684\u76ee\u6807\u672c\u8eab\u3002\u5b9e\u4f53\u57df\u901a\u5e38\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u4e0d\u7ba1\u662f\u901a\u8fc7\u4e0d\u53d8\u7c7b\uff0c\u540c\u6b65\u72b6\u6001\uff0c\u6216\u590d\u5236\u7684\u65b9\u5f0f\u3002 \u670d\u52a1\u57df\u4e5f\u5c31\u662f\u884c\u4e3a\u57df\uff0c\u5b83\u662f\u7ec4\u4ef6\u7684\u529f\u80fd\u96c6\uff0c\u540c\u65f6\u4e5f\u8d1f\u8d23\u5b9e\u4f53\u57df\u548c\u4f1a\u8bdd\u57df\u7684\u751f\u547d\u5468\u671f\u7ba1\u7406\uff0c \u6bd4\u5982 Spring \u7684 ApplicationContext\uff0cDubbo \u7684 ServiceManager \u7b49\u3002\u670d\u52a1\u57df\u7684\u5bf9\u8c61\u901a\u5e38\u4f1a\u6bd4\u8f83\u91cd\uff0c\u800c\u4e14\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u5e76\u4ee5\u5355\u4e00\u5b9e\u4f8b\u670d\u52a1\u4e8e\u6240\u6709\u8c03\u7528\u3002 \u4ec0\u4e48\u662f\u4f1a\u8bdd\uff1f\u5c31\u662f\u4e00\u6b21\u4ea4\u4e92\u8fc7\u7a0b\u3002\u4f1a\u8bdd\u4e2d\u91cd\u8981\u7684\u6982\u5ff5\u662f\u4e0a\u4e0b\u6587\uff0c\u4ec0\u4e48\u662f\u4e0a\u4e0b\u6587\uff1f\u6bd4\u5982\u6211\u4eec\u8bf4\uff1a\u201c\u8001\u5730\u65b9\u89c1\u201d\uff0c\u8fd9\u91cc\u7684\u201c\u8001\u5730\u65b9\u201d\u5c31\u662f\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002\u4e3a\u4ec0\u4e48\u8bf4\u201c\u8001\u5730\u65b9\u201d\u5bf9\u65b9\u4f1a\u77e5\u9053\uff0c\u56e0\u4e3a\u6211\u4eec\u524d\u9762\u5b9a\u4e49\u4e86\u201c\u8001\u5730\u65b9\u201d\u7684\u5177\u4f53\u5185\u5bb9\u3002\u6240\u4ee5\u8bf4\uff0c\u4e0a\u4e0b\u6587\u901a\u5e38\u6301\u6709\u4ea4\u4e92\u8fc7\u7a0b\u4e2d\u7684\u72b6\u6001\u53d8\u91cf\u7b49\u3002\u4f1a\u8bdd\u5bf9\u8c61\u901a\u5e38\u8f83\u8f7b\uff0c\u6bcf\u6b21\u8bf7\u6c42\u90fd\u91cd\u65b0\u521b\u5efa\u5b9e\u4f8b\uff0c\u8bf7\u6c42\u7ed3\u675f\u540e\u9500\u6bc1\u3002\u7b80\u800c\u8a00\u4e4b\uff1a\u628a\u5143\u4fe1\u606f\u4ea4\u7531\u5b9e\u4f53\u57df\u6301\u6709\uff0c\u628a\u4e00\u6b21\u8bf7\u6c42\u4e2d\u7684\u4e34\u65f6\u72b6\u6001\u7531\u4f1a\u8bdd\u57df\u6301\u6709\uff0c\u7531\u670d\u52a1\u57df\u8d2f\u7a7f\u6574\u4e2a\u8fc7\u7a0b\u3002","title":"\u670d\u52a1\u57df/\u5b9e\u4f53\u57df/\u4f1a\u8bdd\u57df\u5206\u79bb"},{"location":"dev/principals/general-knowledge/#_3","text":"\u5982\u679c\u4f60\u8981\u5199\u4e2a\u8fdc\u7a0b\u8c03\u7528\u6846\u67b6\uff0c\u90a3\u8fdc\u7a0b\u8c03\u7528\u7684\u8fc7\u7a0b\u5e94\u8be5\u6709\u4e00\u4e2a\u7edf\u4e00\u7684\u62e6\u622a\u63a5\u53e3\u3002\u5982\u679c\u4f60\u8981\u5199\u4e00\u4e2a ORM \u6846\u67b6\uff0c\u90a3\u81f3\u5c11 SQL \u7684\u6267\u884c\u8fc7\u7a0b\uff0cMapping \u8fc7\u7a0b\u8981\u6709\u62e6\u622a\u63a5\u53e3\uff1b\u5982\u679c\u4f60\u8981\u5199\u4e00\u4e2a Web \u6846\u67b6\uff0c\u90a3\u8bf7\u6c42\u7684\u6267\u884c\u8fc7\u7a0b\u5e94\u8be5\u8981\u6709\u62e6\u622a\u63a5\u53e3\uff0c\u7b49\u7b49\u3002\u6ca1\u6709\u54ea\u4e2a\u516c\u7528\u7684\u6846\u67b6\u53ef\u4ee5 Cover \u4f4f\u6240\u6709\u9700\u6c42\uff0c\u5141\u8bb8\u5916\u7f6e\u884c\u4e3a\uff0c\u662f\u6846\u67b6\u7684\u57fa\u672c\u6269\u5c55\u65b9\u5f0f\u3002\u8fd9\u6837\uff0c\u5982\u679c\u6709\u4eba\u60f3\u5728\u8fdc\u7a0b\u8c03\u7528\u524d\uff0c\u9a8c\u8bc1\u4e0b\u4ee4\u724c\uff0c\u9a8c\u8bc1\u4e0b\u9ed1\u767d\u540d\u5355\uff0c\u7edf\u8ba1\u4e0b\u65e5\u5fd7\uff1b\u5982\u679c\u6709\u4eba\u60f3\u5728 SQL \u6267\u884c\u524d\u52a0\u4e0b\u5206\u9875\u5305\u88c5\uff0c\u505a\u4e0b\u6570\u636e\u6743\u9650\u63a7\u5236\uff0c\u7edf\u8ba1\u4e0b SQL \u6267\u884c\u65f6\u95f4\uff1b\u5982\u679c\u6709\u4eba\u60f3\u5728\u8bf7\u6c42\u6267\u884c\u524d\u68c0\u67e5\u4e0b\u89d2\u8272\uff0c\u5305\u88c5\u4e0b\u8f93\u5165\u8f93\u51fa\u6d41\uff0c\u7edf\u8ba1\u4e0b\u8bf7\u6c42\u91cf\uff0c\u7b49\u7b49\uff0c\u5c31\u53ef\u4ee5\u81ea\u884c\u5b8c\u6210\uff0c\u800c\u4e0d\u7528\u4fb5\u5165\u6846\u67b6\u5185\u90e8\u3002\u62e6\u622a\u63a5\u53e3\uff0c\u901a\u5e38\u662f\u628a\u8fc7\u7a0b\u672c\u8eab\u7528\u4e00\u4e2a\u5bf9\u8c61\u5c01\u88c5\u8d77\u6765\uff0c\u4f20\u7ed9\u62e6\u622a\u5668\u94fe\uff0c\u6bd4\u5982\uff1a\u8fdc\u7a0b\u8c03\u7528\u4e3b\u8fc7\u7a0b\u4e3a invoke()\uff0c\u90a3\u62e6\u622a\u5668\u63a5\u53e3\u901a\u5e38\u4e3a invoke(Invocation)\uff0cInvocation \u5bf9\u8c61\u5c01\u88c5\u4e86\u672c\u6765\u8981\u6267\u884c\u8fc7\u7a0b\u7684\u4e0a\u4e0b\u6587\uff0c\u5e76\u4e14 Invocation \u91cc\u6709\u4e00\u4e2a invoke() \u65b9\u6cd5\uff0c\u7531\u62e6\u622a\u5668\u51b3\u5b9a\u4ec0\u4e48\u65f6\u5019\u6267\u884c\uff0c\u540c\u65f6\uff0cInvocation \u4e5f\u4ee3\u8868\u62e6\u622a\u5668\u884c\u4e3a\u672c\u8eab\uff0c\u8fd9\u6837\u4e0a\u4e00\u62e6\u622a\u5668\u7684 Invocation \u5176\u5b9e\u662f\u5305\u88c5\u7684\u4e0b\u4e00\u62e6\u622a\u5668\u7684\u8fc7\u7a0b\uff0c\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u62e6\u622a\u5668\u7684 Invocation \u662f\u5305\u88c5\u7684\u6700\u7ec8\u7684 invoke() \u8fc7\u7a0b\uff1b\u540c\u7406\uff0cSQL \u4e3b\u8fc7\u7a0b\u4e3a execute()\uff0c\u90a3\u62e6\u622a\u5668\u63a5\u53e3\u901a\u5e38\u4e3a execute(Execution)\uff0c\u539f\u7406\u4e00\u6837\u3002\u5f53\u7136\uff0c\u5b9e\u73b0\u65b9\u5f0f\u53ef\u4ee5\u4efb\u610f\uff0c\u4e0a\u9762\u53ea\u662f\u4e3e\u4f8b\u3002","title":"\u5728\u91cd\u8981\u7684\u8fc7\u7a0b\u4e0a\u8bbe\u7f6e\u62e6\u622a\u63a5\u53e3"},{"location":"dev/principals/general-knowledge/#_4","text":"\u8fd9\u91cc\u5148\u8981\u8bb2\u4e00\u4e2a\u4e8b\u4ef6\u548c\u4e0a\u9762\u62e6\u622a\u5668\u7684\u533a\u522b\uff0c\u62e6\u622a\u5668\u662f\u5e72\u9884\u8fc7\u7a0b\u7684\uff0c\u5b83\u662f\u8fc7\u7a0b\u7684\u4e00\u90e8\u5206\uff0c\u662f\u57fa\u4e8e\u8fc7\u7a0b\u884c\u4e3a\u7684\uff0c\u800c\u4e8b\u4ef6\u662f\u57fa\u4e8e\u72b6\u6001\u6570\u636e\u7684\uff0c\u4efb\u4f55\u884c\u4e3a\u6539\u53d8\u7684\u76f8\u540c\u72b6\u6001\uff0c\u5bf9\u4e8b\u4ef6\u5e94\u8be5\u662f\u4e00\u81f4\u7684\u3002\u4e8b\u4ef6\u901a\u5e38\u662f\u4e8b\u540e\u901a\u77e5\uff0c\u662f\u4e00\u4e2a Callback \u63a5\u53e3\uff0c\u65b9\u6cd5\u540d\u901a\u5e38\u662f\u8fc7\u53bb\u5f0f\u7684\uff0c\u6bd4\u5982 onChanged()\u3002\u6bd4\u5982\u8fdc\u7a0b\u8c03\u7528\u6846\u67b6\uff0c\u5f53\u7f51\u7edc\u65ad\u5f00\u6216\u8fde\u4e0a\u5e94\u8be5\u53d1\u51fa\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u5f53\u51fa\u73b0\u9519\u8bef\u4e5f\u53ef\u4ee5\u8003\u8651\u53d1\u51fa\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u8fd9\u6837\u5916\u56f4\u5e94\u7528\u5c31\u6709\u53ef\u80fd\u89c2\u5bdf\u5230\u6846\u67b6\u5185\u90e8\u7684\u53d8\u5316\uff0c\u505a\u76f8\u5e94\u9002\u5e94\u3002","title":"\u91cd\u8981\u7684\u72b6\u6001\u7684\u53d8\u66f4\u53d1\u9001\u4e8b\u4ef6\u5e76\u7559\u51fa\u76d1\u542c\u63a5\u53e3"},{"location":"dev/principals/general-knowledge/#_5","text":"\u6bd4\u5982\uff0c\u8fdc\u7a0b\u8c03\u7528\u6846\u67b6\u5b83\u7684\u534f\u8bae\u662f\u53ef\u4ee5\u66ff\u6362\u7684\u3002\u5982\u679c\u53ea\u63d0\u4f9b\u4e00\u4e2a\u603b\u7684\u6269\u5c55\u63a5\u53e3\uff0c\u5f53\u7136\u53ef\u4ee5\u505a\u5230\u5207\u6362\u534f\u8bae\uff0c\u4f46\u534f\u8bae\u652f\u6301\u662f\u53ef\u4ee5\u7ec6\u5206\u4e3a\u5e95\u5c42\u901a\u8baf\uff0c\u5e8f\u5217\u5316\uff0c\u52a8\u6001\u4ee3\u7406\u65b9\u5f0f\u7b49\u7b49\u3002\u5982\u679c\u5c06\u63a5\u53e3\u62c6\u7ec6\uff0c\u6b63\u4ea4\u5206\u89e3\uff0c\u4f1a\u66f4\u4fbf\u4e8e\u6269\u5c55\u8005\u590d\u7528\u5df2\u6709\u903b\u8f91\uff0c\u800c\u53ea\u662f\u66ff\u6362\u67d0\u90e8\u5206\u5b9e\u73b0\u7b56\u7565\u3002\u5f53\u7136\u8fd9\u4e2a\u5206\u89e3\u7684\u7c92\u5ea6\u9700\u8981\u628a\u63e1\u597d\u3002","title":"\u6269\u5c55\u63a5\u53e3\u804c\u8d23\u5c3d\u53ef\u80fd\u5355\u4e00\uff0c\u5177\u6709\u53ef\u7ec4\u5408\u6027"},{"location":"dev/principals/general-knowledge/#_6","text":"\u5927\u51e1\u53d1\u5c55\u7684\u6bd4\u8f83\u597d\u7684\u6846\u67b6\uff0c\u90fd\u9075\u5b88\u5fae\u6838\u7684\u7406\u5ff5\u3002Eclipse \u7684\u5fae\u6838\u662f OSGi\uff0c Spring \u7684\u5fae\u6838\u662f BeanFactory\uff0cMaven \u7684\u5fae\u6838\u662f Plexus\u3002\u901a\u5e38\u6838\u5fc3\u662f\u4e0d\u5e94\u8be5\u5e26\u6709\u529f\u80fd\u6027\u7684\uff0c\u800c\u662f\u4e00\u4e2a\u751f\u547d\u5468\u671f\u548c\u96c6\u6210\u5bb9\u5668\uff0c\u8fd9\u6837\u5404\u529f\u80fd\u53ef\u4ee5\u901a\u8fc7\u76f8\u540c\u7684\u65b9\u5f0f\u4ea4\u4e92\u53ca\u6269\u5c55\uff0c\u5e76\u4e14\u4efb\u4f55\u529f\u80fd\u90fd\u53ef\u4ee5\u88ab\u66ff\u6362\u3002\u5982\u679c\u505a\u4e0d\u5230\u5fae\u6838\uff0c\u81f3\u5c11\u8981\u5e73\u7b49\u5bf9\u5f85\u7b2c\u4e09\u65b9\uff0c\u5373\u539f\u4f5c\u8005\u80fd\u5b9e\u73b0\u7684\u529f\u80fd\uff0c\u6269\u5c55\u8005\u5e94\u8be5\u53ef\u4ee5\u901a\u8fc7\u6269\u5c55\u7684\u65b9\u5f0f\u5168\u90e8\u505a\u5230\u3002\u539f\u4f5c\u8005\u8981\u628a\u81ea\u5df1\u4e5f\u5f53\u4f5c\u6269\u5c55\u8005\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\u6846\u67b6\u7684\u53ef\u6301\u7eed\u6027\u53ca\u7531\u5185\u5411\u5916\u7684\u7a33\u5b9a\u6027\u3002","title":"\u5fae\u6838\u63d2\u4ef6\u5f0f\uff0c\u5e73\u7b49\u5bf9\u5f85\u7b2c\u4e09\u65b9"},{"location":"dev/principals/general-knowledge/#_7","text":"\u6bd4\u5982\u4e0a\u9762\u8bf4\u7684 Action \u4f7f\u7528\u63a5\u53e3\u548c Renderer \u6269\u5c55\u63a5\u53e3\u3002\u6846\u67b6\u5982\u679c\u8ba9\u4f7f\u7528\u8005\u6216\u6269\u5c55\u8005\u628a Action \u6216 Renderer \u5b9e\u73b0\u7c7b\u7684\u7c7b\u540d\u6216\u7c7b\u5143\u4fe1\u606f\u62a5\u4e0a\u6765\uff0c\u7136\u540e\u5728\u5185\u90e8\u901a\u8fc7\u53cd\u5c04 newInstance() \u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u8fd9\u6837\u6846\u67b6\u5c31\u63a7\u5236\u4e86 Action \u6216 Renderer \u5b9e\u73b0\u7c7b\u7684\u751f\u547d\u5468\u671f\uff0cAction \u6216 Renderer \u7684\u751f\u8001\u75c5\u6b7b\uff0c\u6846\u67b6\u90fd\u81ea\u5df1\u505a\u4e86\uff0c\u5916\u90e8\u6269\u5c55\u6216\u96c6\u6210\u90fd\u65e0\u80fd\u4e3a\u529b\u3002\u597d\u7684\u529e\u6cd5\u662f\u8ba9\u4f7f\u7528\u8005\u6216\u6269\u5c55\u8005\u628a Action \u6216 Renderer \u5b9e\u73b0\u7c7b\u7684\u5b9e\u4f8b\u62a5\u4e0a\u6765\uff0c\u6846\u67b6\u53ea\u662f\u4f7f\u7528\u8fd9\u4e9b\u5b9e\u4f8b\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u662f\u600e\u4e48\u521b\u5efa\u7684\uff0c\u600e\u4e48\u9500\u6bc1\u7684\uff0c\u90fd\u548c\u6846\u67b6\u65e0\u5173\uff0c\u6846\u67b6\u6700\u591a\u63d0\u4f9b\u5de5\u5177\u7c7b\u8f85\u52a9\u7ba1\u7406\uff0c\u800c\u4e0d\u662f\u7edd\u5bf9\u63a7\u5236\u3002","title":"\u4e0d\u8981\u63a7\u5236\u5916\u90e8\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f"},{"location":"dev/principals/general-knowledge/#coc","text":"\u56e0\u4e3a\u4f7f\u7528\u73af\u5883\u7684\u4e0d\u786e\u5b9a\u56e0\u7d20\u5f88\u591a\uff0c\u6846\u67b6\u603b\u4f1a\u6709\u4e00\u4e9b\u914d\u7f6e\uff0c\u4e00\u822c\u90fd\u4f1a\u5230 classpath \u76f4\u626b\u67d0\u4e2a\u6307\u5b9a\u540d\u79f0\u7684\u914d\u7f6e\uff0c\u6216\u8005\u542f\u52a8\u65f6\u5141\u8bb8\u6307\u5b9a\u914d\u7f6e\u8def\u5f84\u3002\u505a\u4e3a\u4e00\u4e2a\u901a\u7528\u6846\u67b6\uff0c\u5e94\u8be5\u505a\u5230\u51e1\u662f\u80fd\u914d\u7f6e\u6587\u4ef6\u505a\u7684\u4e00\u5b9a\u8981\u80fd\u901a\u8fc7\u7f16\u7a0b\u65b9\u5f0f\u8fdb\u884c\uff0c\u5426\u5219\u5f53\u4f7f\u7528\u8005\u9700\u8981\u5c06\u4f60\u7684\u6846\u67b6\u4e0e\u53e6\u4e00\u4e2a\u6846\u67b6\u96c6\u6210\u65f6\u5c31\u4f1a\u5e26\u6765\u5f88\u591a\u4e0d\u5fc5\u8981\u7684\u9ebb\u70e6\u3002 \u53e6\u5916\uff0c\u5c3d\u53ef\u80fd\u505a\u4e00\u4e2a\u6807\u51c6\u7ea6\u5b9a\uff0c\u5982\u679c\u7528\u6237\u6309\u67d0\u79cd\u7ea6\u5b9a\u505a\u4e8b\u65f6\uff0c\u5c31\u4e0d\u9700\u8981\u8be5\u914d\u7f6e\u9879\u3002\u6bd4\u5982\uff1a\u914d\u7f6e\u6a21\u677f\u4f4d\u7f6e\uff0c\u4f60\u53ef\u4ee5\u7ea6\u5b9a\uff0c\u5982\u679c\u653e\u5728 templates \u76ee\u5f55\u4e0b\u5c31\u4e0d\u7528\u914d\u4e86\uff0c\u5982\u679c\u4f60\u60f3\u6362\u4e2a\u76ee\u5f55\uff0c\u5c31\u914d\u7f6e\u4e0b\u3002","title":"\u53ef\u914d\u7f6e\u4e00\u5b9a\u53ef\u7f16\u7a0b\uff0c\u5e76\u4fdd\u6301\u53cb\u597d\u7684 CoC \u7ea6\u5b9a"},{"location":"dev/principals/general-knowledge/#_8","text":"\u8fd9\u4e2a\u662f\u5951\u7ea6\u5f0f\u8bbe\u8ba1\u7684\u4e00\u90e8\u5206\uff0c\u5c3d\u91cf\u9075\u5b88\u6709\u8fd4\u56de\u503c\u7684\u65b9\u6cd5\u662f\u67e5\u8be2\u65b9\u6cd5\uff0cvoid \u8fd4\u56de\u7684\u65b9\u6cd5\u662f\u547d\u4ee4\u3002\u67e5\u8be2\u65b9\u6cd5\u901a\u5e38\u662f\u5e42\u7b49\u6027\u7684\uff0c\u65e0\u526f\u4f5c\u7528\u7684\uff0c\u4e5f\u5c31\u662f\u4e0d\u6539\u53d8\u4efb\u4f55\u72b6\u6001\uff0c\u8c03 n \u6b21\u7ed3\u679c\u90fd\u662f\u4e00\u6837\u7684\uff0c\u6bd4\u5982 get \u67d0\u4e2a\u5c5e\u6027\u503c\uff0c\u6216\u67e5\u8be2\u4e00\u6761\u6570\u636e\u5e93\u8bb0\u5f55\u3002\u547d\u4ee4\u662f\u6307\u6709\u526f\u4f5c\u7528\u7684\uff0c\u4e5f\u5c31\u662f\u4f1a\u4fee\u6539\u72b6\u6001\uff0c\u6bd4\u5982 set \u67d0\u4e2a\u503c\uff0c\u6216 update \u67d0\u6761\u6570\u636e\u5e93\u8bb0\u5f55\u3002\u5982\u679c\u4f60\u7684\u65b9\u6cd5\u5373\u505a\u4e86\u4fee\u6539\u72b6\u6001\u7684\u64cd\u4f5c\uff0c\u53c8\u505a\u4e86\u67e5\u8be2\u8fd4\u56de\uff0c\u5982\u679c\u53ef\u80fd\uff0c\u5c06\u5176\u62c6\u6210\u5199\u8bfb\u5206\u79bb\u7684\u4e24\u4e2a\u65b9\u6cd5\uff0c\u6bd4\u5982\uff1aUser deleteUser(id)\uff0c\u5220\u9664\u7528\u6237\u5e76\u8fd4\u56de\u88ab\u5220\u9664\u7684\u7528\u6237\uff0c\u8003\u8651\u6539\u4e3a getUser() \u548c void \u7684 deleteUser()\u3002 \u53e6\u5916\uff0c\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u5c3d\u91cf\u524d\u7f6e\u65ad\u8a00\u4f20\u5165\u53c2\u6570\u7684\u5408\u6cd5\u6027\uff0c\u540e\u7f6e\u65ad\u8a00\u8fd4\u56de\u7ed3\u679c\u7684\u5408\u6cd5\u6027\uff0c\u5e76\u6587\u6863\u5316\u3002","title":"\u533a\u5206\u547d\u4ee4\u4e0e\u67e5\u8be2\uff0c\u660e\u786e\u524d\u7f6e\u6761\u4ef6\u4e0e\u540e\u7f6e\u6761\u4ef6"},{"location":"dev/principals/general-knowledge/#_9","text":"\u53c2\u89c1\uff1a \u8c08\u8c08\u6269\u5145\u5f0f\u6269\u5c55\u4e0e\u589e\u91cf\u5f0f\u6269\u5c55","title":"\u589e\u91cf\u5f0f\u6269\u5c55\uff0c\u800c\u4e0d\u8981\u6269\u5145\u539f\u59cb\u6838\u5fc3\u6982\u5ff5"},{"location":"dev/principals/introduction/","text":"\u8bbe\u8ba1\u539f\u5219 \u672c\u7ae0\u8282\u7684\u8bbe\u8ba1\u539f\u5219\u6458\u5f55\u81ea\u6881\u98de\u5728 javaeye \u4e0a\u53d1\u8868\u7684\u7cfb\u5217\u6587\u7ae0\u3002","title":"\u8bbe\u8ba1\u539f\u5219"},{"location":"dev/principals/introduction/#_1","text":"\u672c\u7ae0\u8282\u7684\u8bbe\u8ba1\u539f\u5219\u6458\u5f55\u81ea\u6881\u98de\u5728 javaeye \u4e0a\u53d1\u8868\u7684\u7cfb\u5217\u6587\u7ae0\u3002","title":"\u8bbe\u8ba1\u539f\u5219"},{"location":"dev/principals/robustness/","text":"\u8bbe\u8ba1\u5b9e\u73b0\u7684\u5065\u58ee\u6027 http://oldratlee.com/380/tech/java/robustness-of-implement.html Dubbo \u4f5c\u4e3a\u8fdc\u7a0b\u670d\u52a1\u66b4\u9732\u3001\u8c03\u7528\u548c\u6cbb\u7406\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u662f\u5e94\u7528\u8fd0\u8f6c\u7684\u7ecf\u7edc\uff0c\u5176\u672c\u8eab\u5b9e\u73b0\u5065\u58ee\u6027\u7684\u91cd\u8981\u7a0b\u5ea6\u662f\u4e0d\u8a00\u800c\u55bb\u7684\u3002 \u8fd9\u91cc\u5217\u51fa\u4e00\u4e9b Dubbo \u7528\u5230\u7684\u539f\u5219\u548c\u65b9\u6cd5\u3002 \u65e5\u5fd7 \u65e5\u5fd7\u662f\u53d1\u73b0\u95ee\u9898\u3001\u67e5\u770b\u95ee\u9898\u4e00\u4e2a\u6700\u5e38\u7528\u7684\u624b\u6bb5\u3002\u65e5\u5fd7\u8d28\u91cf\u5f80\u5f80\u88ab\u5ffd\u89c6\uff0c\u6ca1\u6709\u65e5\u5fd7\u4f7f\u7528\u4e0a\u7684\u660e\u786e\u7ea6\u5b9a\u3002\u91cd\u89c6 Log \u7684\u4f7f\u7528\uff0c\u63d0\u9ad8 Log \u7684\u4fe1\u606f\u6d53\u5ea6\u3002\u65e5\u5fd7\u8fc7\u591a\u3001\u8fc7\u4e8e\u6df7\u4e71\uff0c\u4f1a\u5bfc\u81f4\u6709\u7528\u7684\u4fe1\u606f\u88ab\u6df9\u6ca1\u3002 \u8981\u6709\u6548\u5229\u7528\u8fd9\u4e2a\u5de5\u5177\u8981\u6ce8\u610f\uff1a \u4e25\u683c\u7ea6\u5b9aWARN\u3001ERROR\u7ea7\u522b\u8bb0\u5f55\u7684\u5185\u5bb9 WARN \u8868\u793a\u53ef\u4ee5\u6062\u590d\u7684\u95ee\u9898\uff0c\u65e0\u9700\u4eba\u5de5\u4ecb\u5165\u3002 ERROR \u8868\u793a\u9700\u8981\u4eba\u5de5\u4ecb\u5165\u95ee\u9898\u3002 \u6709\u4e86\u8fd9\u6837\u7684\u7ea6\u5b9a\uff0c\u76d1\u7ba1\u7cfb\u7edf\u53d1\u73b0\u65e5\u5fd7\u6587\u4ef6\u7684\u4e2d\u51fa\u73b0 ERROR \u5b57\u4e32\u5c31\u62a5\u8b66\uff0c\u53c8\u5c3d\u91cf\u51cf\u5c11\u4e86\u53d1\u751f\u3002\u8fc7\u591a\u7684\u62a5\u8b66\u4f1a\u8ba9\u4eba\u75b2\u5026\uff0c\u4f7f\u4eba\u5bf9\u62a5\u8b66\u5931\u53bb\u8b66\u60d5\u6027\uff0c\u4f7f ERROR \u65e5\u5fd7\u5931\u53bb\u610f\u4e49\u3002\u518d\u8f85\u4ee5\u4eba\u5de5\u5b9a\u671f\u67e5\u770b WARN \u7ea7\u522b\u4fe1\u606f\uff0c\u4ee5\u8bc4\u4f30\u7cfb\u7edf\u7684\u201c\u4e9a\u5065\u5eb7\u201d\u7a0b\u5ea6\u3002 \u65e5\u5fd7\u4e2d\uff0c\u5c3d\u91cf\u591a\u7684\u6536\u96c6\u5173\u952e\u4fe1\u606f \u54ea\u4e9b\u662f\u5173\u952e\u4fe1\u606f\u5462\uff1f \u51fa\u95ee\u9898\u65f6\u7684\u73b0\u573a\u4fe1\u606f\uff0c\u5373\u6392\u67e5\u95ee\u9898\u8981\u7528\u5230\u7684\u4fe1\u606f\u3002\u5982\u670d\u52a1\u8c03\u7528\u5931\u8d25\u65f6\uff0c\u8981\u7ed9\u51fa\u4f7f\u7528 Dubbo \u7684\u7248\u672c\u3001\u670d\u52a1\u63d0\u4f9b\u8005\u7684 IP\u3001\u4f7f\u7528\u7684\u662f\u54ea\u4e2a\u6ce8\u518c\u4e2d\u5fc3\uff1b\u8c03\u7528\u7684\u662f\u54ea\u4e2a\u670d\u52a1\u3001\u54ea\u4e2a\u65b9\u6cd5\u7b49\u7b49\u3002\u8fd9\u4e9b\u4fe1\u606f\u5982\u679c\u4e0d\u7ed9\u51fa\uff0c\u90a3\u4e48\u4e8b\u540e\u4eba\u5de5\u6536\u96c6\u7684\uff0c\u95ee\u9898\u8fc7\u540e\u73b0\u573a\u53ef\u80fd\u5df2\u7ecf\u4e0d\u80fd\u590d\u539f\uff0c\u52a0\u5927\u6392\u67e5\u95ee\u9898\u7684\u96be\u5ea6\u3002 \u5982\u679c\u53ef\u80fd\uff0c\u7ed9\u51fa\u95ee\u9898\u7684\u539f\u56e0\u548c\u89e3\u51b3\u65b9\u6cd5\u3002\u8fd9\u8ba9\u7ef4\u62a4\u548c\u95ee\u9898\u89e3\u51b3\u53d8\u5f97\u7b80\u5355\uff0c\u800c\u4e0d\u662f\u5bfb\u6c42\u7cbe\u901a\u8005\uff08\u5f80\u5f80\u662f\u5b9e\u73b0\u8005\uff09\u7684\u5e2e\u52a9\u3002 \u540c\u4e00\u4e2a\u6216\u662f\u4e00\u7c7b\u95ee\u9898\u4e0d\u8981\u91cd\u590d\u8bb0\u5f55\u591a\u6b21 \u540c\u4e00\u4e2a\u6216\u662f\u4e00\u7c7b\u5f02\u5e38\u65e5\u5fd7\u8fde\u7eed\u51fa\u73b0\u51e0\u5341\u904d\u7684\u60c5\u51b5\uff0c\u8fd8\u662f\u5e38\u5e38\u80fd\u770b\u5230\u7684\u3002\u4eba\u773c\u5f88\u5bb9\u6613\u6f0f\u6389\u6df9\u6ca1\u5728\u5176\u4e2d\u4e0d\u4e00\u6837\u7684\u91cd\u8981\u65e5\u5fd7\u4fe1\u606f\u3002\u8981\u5c3d\u91cf\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\u3002\u5728\u53ef\u4ee5\u9884\u89c1\u4f1a\u51fa\u73b0\u7684\u60c5\u51b5\uff0c\u6709\u5fc5\u8981\u52a0\u4e00\u4e9b\u903b\u8f91\u6765\u907f\u514d\u3002 \u5982\u4e3a\u4e00\u4e2a\u95ee\u9898\u51c6\u5907\u4e00\u4e2a\u6807\u5fd7\uff0c\u51fa\u95ee\u9898\u540e\u6253\u65e5\u5fd7\u540e\u8bbe\u7f6e\u6807\u5fd7\uff0c\u907f\u514d\u91cd\u590d\u6253\u65e5\u5fd7\u3002\u95ee\u9898\u6062\u590d\u540e\u6e05\u9664\u6807\u5fd7\u3002 \u867d\u7136\u6709\u70b9\u9ebb\u70e6\uff0c\u4f46\u662f\u8fd9\u6837\u505a\u4fdd\u8bc1\u65e5\u5fd7\u4fe1\u606f\u6d53\u5ea6\uff0c\u8ba9\u76d1\u63a7\u66f4\u6709\u6548\u3002 \u754c\u9650\u8bbe\u7f6e \u8d44\u6e90\u662f\u6709\u9650\u7684\uff0cCPU\u3001\u5185\u5b58\u3001IO \u7b49\u7b49\u3002\u4e0d\u8981\u56e0\u4e3a\u5916\u90e8\u7684\u8bf7\u6c42\u3001\u6570\u636e\u4e0d\u53d7\u9650\u7684\u800c\u5d29\u6e83\u3002 \u7ebf\u7a0b\u6c60(ExectorService)\u7684\u5927\u5c0f\u548c\u9971\u548c\u7b56\u7565 Server \u7aef\u7528\u4e8e\u5904\u7406\u8bf7\u6c42\u7684 ExectorService \u8bbe\u7f6e\u4e0a\u9650\u3002ExecutorService \u7684\u4efb\u52a1\u7b49\u5f85\u961f\u5217\u4f7f\u7528\u6709\u9650\u961f\u5217\uff0c\u907f\u514d\u8d44\u6e90\u8017\u5c3d\u3002\u5f53\u4efb\u52a1\u7b49\u5f85\u961f\u5217\u9971\u548c\u65f6\uff0c\u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684\u9971\u548c\u7b56\u7565\u3002\u8fd9\u6837\u4fdd\u8bc1\u5e73\u6ed1\u52a3\u5316\u3002 \u5728 Dubbo \u4e2d\uff0c\u9971\u548c\u7b56\u7565\u662f\u4e22\u5f03\u6570\u636e\uff0c\u7b49\u5f85\u7ed3\u679c\u4e5f\u53ea\u662f\u8bf7\u6c42\u7684\u8d85\u65f6\u3002 \u8fbe\u5230\u9971\u548c\u65f6\uff0c\u8bf4\u660e\u5df2\u7ecf\u8fbe\u5230\u670d\u52a1\u63d0\u4f9b\u65b9\u7684\u8d1f\u8377\u4e0a\u9650\uff0c\u8981\u5728\u9971\u548c\u7b56\u7565\u7684\u64cd\u4f5c\u4e2d\u65e5\u5fd7\u8bb0\u5f55\u8fd9\u4e2a\u95ee\u9898\uff0c\u4ee5\u53d1\u51fa\u76d1\u63a7\u8b66\u62a5\u3002\u8bb0\u5f97\u6ce8\u610f\u4e0d\u8981\u91cd\u590d\u591a\u6b21\u8bb0\u5f55\u54e6\u3002\uff08\u6ce8\u610f\uff0c\u7f3a\u7701\u7684\u9971\u548c\u7b56\u7565\u4e0d\u4f1a\u6709\u8fd9\u4e9b\u9644\u52a0\u7684\u64cd\u4f5c\u3002\uff09\u6839\u636e\u8b66\u62a5\u7684\u9891\u7387\uff0c\u5df2\u7ecf\u51b3\u5b9a\u6269\u5bb9\u8c03\u6574\u7b49\u7b49\uff0c\u907f\u514d\u7cfb\u7edf\u95ee\u9898\u88ab\u5ffd\u7565\u3002 \u96c6\u5408\u5bb9\u91cf \u5982\u679c\u786e\u4fdd\u8fdb\u5165\u96c6\u5408\u7684\u5143\u7d20\u662f\u53ef\u63a7\u7684\u4e14\u662f\u8db3\u591f\u5c11\uff0c\u5219\u53ef\u4ee5\u653e\u5fc3\u4f7f\u7528\u3002\u8fd9\u662f\u5927\u90e8\u5206\u7684\u60c5\u51b5\u3002\u5982\u679c\u4e0d\u80fd\u4fdd\u8bc1\uff0c\u5219\u4f7f\u7528\u6709\u6709\u754c\u7684\u96c6\u5408\u3002\u5f53\u5230\u8fbe\u754c\u9650\u65f6\uff0c\u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684\u4e22\u5f03\u7b56\u7565\u3002 \u5bb9\u9519-\u91cd\u8bd5-\u6062\u590d \u9ad8\u53ef\u7528\u7ec4\u4ef6\u8981\u5bb9\u5fcd\u5176\u4f9d\u8d56\u7ec4\u4ef6\u7684\u5931\u8d25\u3002 Dubbo \u7684\u670d\u52a1\u6ce8\u518c\u4e2d\u5fc3 \u76ee\u524d\u670d\u52a1\u6ce8\u518c\u4e2d\u5fc3\u4f7f\u7528\u4e86\u6570\u636e\u5e93\u6765\u4fdd\u5b58\u670d\u52a1\u63d0\u4f9b\u8005\u548c\u6d88\u8d39\u8005\u7684\u4fe1\u606f\u3002\u6ce8\u518c\u4e2d\u5fc3\u96c6\u7fa4\u4e0d\u540c\u6ce8\u518c\u4e2d\u5fc3\u4e5f\u901a\u8fc7\u6570\u636e\u5e93\u6765\u8fdb\u884c\u540c\u6b65\u6570\u636e\uff0c\u4ee5\u611f\u77e5\u5176\u5b83\u6ce8\u518c\u4e2d\u5fc3\u4e0a\u63d0\u4f9b\u8005\u7684\u53d8\u5316\u3002\u6ce8\u518c\u4e2d\u5fc3\u4f1a\u5728\u5185\u5b58\u4e2d\u4fdd\u5b58\u4e00\u4efd\u63d0\u4f9b\u8005\u548c\u6d88\u8d39\u8005\u6570\u636e\uff0c\u6570\u636e\u5e93\u4e0d\u53ef\u7528\u65f6\uff0c\u6ce8\u518c\u4e2d\u5fc3\u72ec\u7acb\u5bf9\u5916\u63d0\u4f9b\u670d\u52a1\u4ee5\u4fdd\u8bc1\u6b63\u5e38\u8fd0\u8f6c\uff0c\u53ea\u662f\u62ff\u4e0d\u5230\u5176\u5b83\u6ce8\u518c\u4e2d\u5fc3\u7684\u6570\u636e\u3002\u5f53\u6570\u636e\u5e93\u6062\u590d\u65f6\uff0c\u91cd\u8bd5\u903b\u8f91\u4f1a\u5c06\u5185\u5b58\u4e2d\u4fee\u6539\u7684\u6570\u636e\u5199\u56de\u6570\u636e\u5e93\uff0c\u5e76\u62ff\u5230\u6570\u636e\u5e93\u4e2d\u65b0\u6570\u636e\u3002 \u670d\u52a1\u7684\u6d88\u8d39\u8005 \u670d\u52a1\u6d88\u8d39\u8005\u4ece\u6ce8\u518c\u4e2d\u5fc3\u62ff\u5230\u63d0\u4f9b\u8005\u5217\u8868\u540e\uff0c\u4f1a\u4fdd\u5b58\u63d0\u4f9b\u8005\u5217\u8868\u5230\u5185\u5b58\u548c\u78c1\u76d8\u6587\u4ef6\u4e2d\u3002\u8fd9\u6837\u6ce8\u518c\u4e2d\u5fc3\u5b95\u673a\u540e\u6d88\u8d39\u8005\u53ef\u4ee5\u6b63\u5e38\u8fd0\u8f6c\uff0c\u751a\u81f3\u53ef\u4ee5\u5728\u6ce8\u518c\u4e2d\u5fc3\u5b95\u673a\u8fc7\u7a0b\u4e2d\u91cd\u542f\u6d88\u8d39\u8005\u3002\u6d88\u8d39\u8005\u542f\u52a8\u65f6\uff0c\u53d1\u73b0\u6ce8\u518c\u4e2d\u5fc3\u4e0d\u53ef\u7528\uff0c\u4f1a\u8bfb\u53d6\u4fdd\u5b58\u5728\u78c1\u76d8\u6587\u4ef6\u4e2d\u63d0\u4f9b\u8005\u5217\u8868\u3002\u91cd\u8bd5\u903b\u8f91\u4fdd\u8bc1\u6ce8\u518c\u4e2d\u5fc3\u6062\u590d\u540e\uff0c\u66f4\u65b0\u4fe1\u606f\u3002 \u91cd\u8bd5\u5ef6\u8fdf\u7b56\u7565 \u4e0a\u4e00\u70b9\u7684\u5b50\u95ee\u9898\u3002Dubbo \u4e2d\u78b0\u5230\u6709\u4e24\u4e2a\u76f8\u5173\u7684\u573a\u666f\u3002 \u6570\u636e\u5e93\u4e0a\u7684\u6d3b\u9501 \u6ce8\u518c\u4e2d\u5fc3\u4f1a\u5b9a\u65f6\u66f4\u65b0\u6570\u636e\u5e93\u4e00\u6761\u8bb0\u5f55\u7684\u65f6\u95f4\u6233\uff0c\u8fd9\u6837\u96c6\u7fa4\u4e2d\u5176\u5b83\u7684\u6ce8\u518c\u4e2d\u5fc3\u611f\u77e5\u5b83\u662f\u5b58\u6d3b\u3002\u8fc7\u671f\u6ce8\u518c\u4e2d\u5fc3\u548c\u5b83\u7684\u76f8\u5173\u6570\u636e \u4f1a\u88ab\u6e05\u9664\u3002\u6570\u636e\u5e93\u6b63\u5e38\u65f6\uff0c\u8fd9\u4e2a\u673a\u5236\u8fd0\u884c\u826f\u597d\u3002\u4f46\u662f\u6570\u636e\u5e93\u8d1f\u8377\u9ad8\u65f6\uff0c\u5176\u4e0a\u7684\u6bcf\u4e2a\u64cd\u4f5c\u90fd\u4f1a\u5f88\u6162\u3002\u8fd9\u5c31\u51fa\u73b0\uff1a A \u6ce8\u518c\u4e2d\u5fc3\u8ba4\u4e3a B \u8fc7\u671f\uff0c\u5220\u9664 B \u7684\u6570\u636e\u3002 B \u53d1\u73b0\u81ea\u5df1\u7684\u6570\u636e\u6ca1\u6709\u4e86\uff0c\u91cd\u65b0\u5199\u5165\u81ea\u5df1\u7684\u6570\u636e\u7684\u53cd\u590d\u64cd\u4f5c\u3002\u8fd9\u4e9b\u53cd\u590d\u7684\u64cd\u4f5c\u53c8\u52a0\u91cd\u4e86\u6570\u636e\u5e93\u7684\u8d1f\u8377\uff0c\u6076\u5316\u95ee\u9898\u3002 \u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u903b\u8f91\uff1a \u5f53 B \u53d1\u73b0\u81ea\u5df1\u6570\u636e\u88ab\u5220\u9664\u65f6\uff08\u5199\u5165\u5931\u8d25\uff09\uff0c\u9009\u62e9\u7b49\u5f85\u8fd9\u6bb5\u65f6\u95f4\u518d\u91cd\u8bd5\u3002\u91cd\u8bd5\u65f6\u95f4\u53ef\u4ee5\u9009\u62e9\u6307\u6570\u7ea7\u589e\u957f\uff0c\u5982\u7b2c\u4e00\u6b21\u7b49 1 \u5206\u949f\uff0c\u7b2c\u4e8c\u6b21 10 \u5206\u949f\u3001\u7b2c\u4e09\u6b21 100 \u5206\u949f\u3002 \u8fd9\u6837\u64cd\u4f5c\u51cf\u5c11\u540e\uff0c\u4fdd\u8bc1\u6570\u636e\u5e93\u53ef\u4ee5\u51b7\u5374\uff08Cool Down\uff09\u4e0b\u6765\u3002 Client \u91cd\u8fde\u6ce8\u518c\u4e2d\u5fc3 \u5f53\u4e00\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u505c\u673a\u65f6\uff0c\u5176\u5b83\u7684 Client \u4f1a\u540c\u65f6\u63a5\u6536\u4e8b\u4ef6\uff0c\u800c\u53bb\u91cd\u8fde\u53e6\u4e00\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u3002Client \u6570\u91cf\u76f8\u5bf9\u6bd4\u8f83\u591a\uff0c\u4f1a\u5bf9\u6ce8\u518c\u4e2d\u5fc3\u9020\u6210\u51b2\u51fb\u3002\u907f\u514d\u65b9\u6cd5\u53ef\u4ee5\u662f Client \u91cd\u8fde\u65f6\u968f\u673a\u5ef6\u65f6 3 \u5206\u949f\uff0c\u628a\u91cd\u8fde\u5206\u6563\u5f00\u3002","title":"\u8bbe\u8ba1\u5b9e\u73b0\u7684\u5065\u58ee\u6027"},{"location":"dev/principals/robustness/#_1","text":"http://oldratlee.com/380/tech/java/robustness-of-implement.html Dubbo \u4f5c\u4e3a\u8fdc\u7a0b\u670d\u52a1\u66b4\u9732\u3001\u8c03\u7528\u548c\u6cbb\u7406\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u662f\u5e94\u7528\u8fd0\u8f6c\u7684\u7ecf\u7edc\uff0c\u5176\u672c\u8eab\u5b9e\u73b0\u5065\u58ee\u6027\u7684\u91cd\u8981\u7a0b\u5ea6\u662f\u4e0d\u8a00\u800c\u55bb\u7684\u3002 \u8fd9\u91cc\u5217\u51fa\u4e00\u4e9b Dubbo \u7528\u5230\u7684\u539f\u5219\u548c\u65b9\u6cd5\u3002","title":"\u8bbe\u8ba1\u5b9e\u73b0\u7684\u5065\u58ee\u6027"},{"location":"dev/principals/robustness/#_2","text":"\u65e5\u5fd7\u662f\u53d1\u73b0\u95ee\u9898\u3001\u67e5\u770b\u95ee\u9898\u4e00\u4e2a\u6700\u5e38\u7528\u7684\u624b\u6bb5\u3002\u65e5\u5fd7\u8d28\u91cf\u5f80\u5f80\u88ab\u5ffd\u89c6\uff0c\u6ca1\u6709\u65e5\u5fd7\u4f7f\u7528\u4e0a\u7684\u660e\u786e\u7ea6\u5b9a\u3002\u91cd\u89c6 Log \u7684\u4f7f\u7528\uff0c\u63d0\u9ad8 Log \u7684\u4fe1\u606f\u6d53\u5ea6\u3002\u65e5\u5fd7\u8fc7\u591a\u3001\u8fc7\u4e8e\u6df7\u4e71\uff0c\u4f1a\u5bfc\u81f4\u6709\u7528\u7684\u4fe1\u606f\u88ab\u6df9\u6ca1\u3002 \u8981\u6709\u6548\u5229\u7528\u8fd9\u4e2a\u5de5\u5177\u8981\u6ce8\u610f\uff1a","title":"\u65e5\u5fd7"},{"location":"dev/principals/robustness/#warnerror","text":"WARN \u8868\u793a\u53ef\u4ee5\u6062\u590d\u7684\u95ee\u9898\uff0c\u65e0\u9700\u4eba\u5de5\u4ecb\u5165\u3002 ERROR \u8868\u793a\u9700\u8981\u4eba\u5de5\u4ecb\u5165\u95ee\u9898\u3002 \u6709\u4e86\u8fd9\u6837\u7684\u7ea6\u5b9a\uff0c\u76d1\u7ba1\u7cfb\u7edf\u53d1\u73b0\u65e5\u5fd7\u6587\u4ef6\u7684\u4e2d\u51fa\u73b0 ERROR \u5b57\u4e32\u5c31\u62a5\u8b66\uff0c\u53c8\u5c3d\u91cf\u51cf\u5c11\u4e86\u53d1\u751f\u3002\u8fc7\u591a\u7684\u62a5\u8b66\u4f1a\u8ba9\u4eba\u75b2\u5026\uff0c\u4f7f\u4eba\u5bf9\u62a5\u8b66\u5931\u53bb\u8b66\u60d5\u6027\uff0c\u4f7f ERROR \u65e5\u5fd7\u5931\u53bb\u610f\u4e49\u3002\u518d\u8f85\u4ee5\u4eba\u5de5\u5b9a\u671f\u67e5\u770b WARN \u7ea7\u522b\u4fe1\u606f\uff0c\u4ee5\u8bc4\u4f30\u7cfb\u7edf\u7684\u201c\u4e9a\u5065\u5eb7\u201d\u7a0b\u5ea6\u3002","title":"\u4e25\u683c\u7ea6\u5b9aWARN\u3001ERROR\u7ea7\u522b\u8bb0\u5f55\u7684\u5185\u5bb9"},{"location":"dev/principals/robustness/#_3","text":"\u54ea\u4e9b\u662f\u5173\u952e\u4fe1\u606f\u5462\uff1f \u51fa\u95ee\u9898\u65f6\u7684\u73b0\u573a\u4fe1\u606f\uff0c\u5373\u6392\u67e5\u95ee\u9898\u8981\u7528\u5230\u7684\u4fe1\u606f\u3002\u5982\u670d\u52a1\u8c03\u7528\u5931\u8d25\u65f6\uff0c\u8981\u7ed9\u51fa\u4f7f\u7528 Dubbo \u7684\u7248\u672c\u3001\u670d\u52a1\u63d0\u4f9b\u8005\u7684 IP\u3001\u4f7f\u7528\u7684\u662f\u54ea\u4e2a\u6ce8\u518c\u4e2d\u5fc3\uff1b\u8c03\u7528\u7684\u662f\u54ea\u4e2a\u670d\u52a1\u3001\u54ea\u4e2a\u65b9\u6cd5\u7b49\u7b49\u3002\u8fd9\u4e9b\u4fe1\u606f\u5982\u679c\u4e0d\u7ed9\u51fa\uff0c\u90a3\u4e48\u4e8b\u540e\u4eba\u5de5\u6536\u96c6\u7684\uff0c\u95ee\u9898\u8fc7\u540e\u73b0\u573a\u53ef\u80fd\u5df2\u7ecf\u4e0d\u80fd\u590d\u539f\uff0c\u52a0\u5927\u6392\u67e5\u95ee\u9898\u7684\u96be\u5ea6\u3002 \u5982\u679c\u53ef\u80fd\uff0c\u7ed9\u51fa\u95ee\u9898\u7684\u539f\u56e0\u548c\u89e3\u51b3\u65b9\u6cd5\u3002\u8fd9\u8ba9\u7ef4\u62a4\u548c\u95ee\u9898\u89e3\u51b3\u53d8\u5f97\u7b80\u5355\uff0c\u800c\u4e0d\u662f\u5bfb\u6c42\u7cbe\u901a\u8005\uff08\u5f80\u5f80\u662f\u5b9e\u73b0\u8005\uff09\u7684\u5e2e\u52a9\u3002","title":"\u65e5\u5fd7\u4e2d\uff0c\u5c3d\u91cf\u591a\u7684\u6536\u96c6\u5173\u952e\u4fe1\u606f"},{"location":"dev/principals/robustness/#_4","text":"\u540c\u4e00\u4e2a\u6216\u662f\u4e00\u7c7b\u5f02\u5e38\u65e5\u5fd7\u8fde\u7eed\u51fa\u73b0\u51e0\u5341\u904d\u7684\u60c5\u51b5\uff0c\u8fd8\u662f\u5e38\u5e38\u80fd\u770b\u5230\u7684\u3002\u4eba\u773c\u5f88\u5bb9\u6613\u6f0f\u6389\u6df9\u6ca1\u5728\u5176\u4e2d\u4e0d\u4e00\u6837\u7684\u91cd\u8981\u65e5\u5fd7\u4fe1\u606f\u3002\u8981\u5c3d\u91cf\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\u3002\u5728\u53ef\u4ee5\u9884\u89c1\u4f1a\u51fa\u73b0\u7684\u60c5\u51b5\uff0c\u6709\u5fc5\u8981\u52a0\u4e00\u4e9b\u903b\u8f91\u6765\u907f\u514d\u3002 \u5982\u4e3a\u4e00\u4e2a\u95ee\u9898\u51c6\u5907\u4e00\u4e2a\u6807\u5fd7\uff0c\u51fa\u95ee\u9898\u540e\u6253\u65e5\u5fd7\u540e\u8bbe\u7f6e\u6807\u5fd7\uff0c\u907f\u514d\u91cd\u590d\u6253\u65e5\u5fd7\u3002\u95ee\u9898\u6062\u590d\u540e\u6e05\u9664\u6807\u5fd7\u3002 \u867d\u7136\u6709\u70b9\u9ebb\u70e6\uff0c\u4f46\u662f\u8fd9\u6837\u505a\u4fdd\u8bc1\u65e5\u5fd7\u4fe1\u606f\u6d53\u5ea6\uff0c\u8ba9\u76d1\u63a7\u66f4\u6709\u6548\u3002","title":"\u540c\u4e00\u4e2a\u6216\u662f\u4e00\u7c7b\u95ee\u9898\u4e0d\u8981\u91cd\u590d\u8bb0\u5f55\u591a\u6b21"},{"location":"dev/principals/robustness/#_5","text":"\u8d44\u6e90\u662f\u6709\u9650\u7684\uff0cCPU\u3001\u5185\u5b58\u3001IO \u7b49\u7b49\u3002\u4e0d\u8981\u56e0\u4e3a\u5916\u90e8\u7684\u8bf7\u6c42\u3001\u6570\u636e\u4e0d\u53d7\u9650\u7684\u800c\u5d29\u6e83\u3002","title":"\u754c\u9650\u8bbe\u7f6e"},{"location":"dev/principals/robustness/#exectorservice","text":"Server \u7aef\u7528\u4e8e\u5904\u7406\u8bf7\u6c42\u7684 ExectorService \u8bbe\u7f6e\u4e0a\u9650\u3002ExecutorService \u7684\u4efb\u52a1\u7b49\u5f85\u961f\u5217\u4f7f\u7528\u6709\u9650\u961f\u5217\uff0c\u907f\u514d\u8d44\u6e90\u8017\u5c3d\u3002\u5f53\u4efb\u52a1\u7b49\u5f85\u961f\u5217\u9971\u548c\u65f6\uff0c\u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684\u9971\u548c\u7b56\u7565\u3002\u8fd9\u6837\u4fdd\u8bc1\u5e73\u6ed1\u52a3\u5316\u3002 \u5728 Dubbo \u4e2d\uff0c\u9971\u548c\u7b56\u7565\u662f\u4e22\u5f03\u6570\u636e\uff0c\u7b49\u5f85\u7ed3\u679c\u4e5f\u53ea\u662f\u8bf7\u6c42\u7684\u8d85\u65f6\u3002 \u8fbe\u5230\u9971\u548c\u65f6\uff0c\u8bf4\u660e\u5df2\u7ecf\u8fbe\u5230\u670d\u52a1\u63d0\u4f9b\u65b9\u7684\u8d1f\u8377\u4e0a\u9650\uff0c\u8981\u5728\u9971\u548c\u7b56\u7565\u7684\u64cd\u4f5c\u4e2d\u65e5\u5fd7\u8bb0\u5f55\u8fd9\u4e2a\u95ee\u9898\uff0c\u4ee5\u53d1\u51fa\u76d1\u63a7\u8b66\u62a5\u3002\u8bb0\u5f97\u6ce8\u610f\u4e0d\u8981\u91cd\u590d\u591a\u6b21\u8bb0\u5f55\u54e6\u3002\uff08\u6ce8\u610f\uff0c\u7f3a\u7701\u7684\u9971\u548c\u7b56\u7565\u4e0d\u4f1a\u6709\u8fd9\u4e9b\u9644\u52a0\u7684\u64cd\u4f5c\u3002\uff09\u6839\u636e\u8b66\u62a5\u7684\u9891\u7387\uff0c\u5df2\u7ecf\u51b3\u5b9a\u6269\u5bb9\u8c03\u6574\u7b49\u7b49\uff0c\u907f\u514d\u7cfb\u7edf\u95ee\u9898\u88ab\u5ffd\u7565\u3002","title":"\u7ebf\u7a0b\u6c60(ExectorService)\u7684\u5927\u5c0f\u548c\u9971\u548c\u7b56\u7565"},{"location":"dev/principals/robustness/#_6","text":"\u5982\u679c\u786e\u4fdd\u8fdb\u5165\u96c6\u5408\u7684\u5143\u7d20\u662f\u53ef\u63a7\u7684\u4e14\u662f\u8db3\u591f\u5c11\uff0c\u5219\u53ef\u4ee5\u653e\u5fc3\u4f7f\u7528\u3002\u8fd9\u662f\u5927\u90e8\u5206\u7684\u60c5\u51b5\u3002\u5982\u679c\u4e0d\u80fd\u4fdd\u8bc1\uff0c\u5219\u4f7f\u7528\u6709\u6709\u754c\u7684\u96c6\u5408\u3002\u5f53\u5230\u8fbe\u754c\u9650\u65f6\uff0c\u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684\u4e22\u5f03\u7b56\u7565\u3002","title":"\u96c6\u5408\u5bb9\u91cf"},{"location":"dev/principals/robustness/#-","text":"\u9ad8\u53ef\u7528\u7ec4\u4ef6\u8981\u5bb9\u5fcd\u5176\u4f9d\u8d56\u7ec4\u4ef6\u7684\u5931\u8d25\u3002","title":"\u5bb9\u9519-\u91cd\u8bd5-\u6062\u590d"},{"location":"dev/principals/robustness/#dubbo","text":"\u76ee\u524d\u670d\u52a1\u6ce8\u518c\u4e2d\u5fc3\u4f7f\u7528\u4e86\u6570\u636e\u5e93\u6765\u4fdd\u5b58\u670d\u52a1\u63d0\u4f9b\u8005\u548c\u6d88\u8d39\u8005\u7684\u4fe1\u606f\u3002\u6ce8\u518c\u4e2d\u5fc3\u96c6\u7fa4\u4e0d\u540c\u6ce8\u518c\u4e2d\u5fc3\u4e5f\u901a\u8fc7\u6570\u636e\u5e93\u6765\u8fdb\u884c\u540c\u6b65\u6570\u636e\uff0c\u4ee5\u611f\u77e5\u5176\u5b83\u6ce8\u518c\u4e2d\u5fc3\u4e0a\u63d0\u4f9b\u8005\u7684\u53d8\u5316\u3002\u6ce8\u518c\u4e2d\u5fc3\u4f1a\u5728\u5185\u5b58\u4e2d\u4fdd\u5b58\u4e00\u4efd\u63d0\u4f9b\u8005\u548c\u6d88\u8d39\u8005\u6570\u636e\uff0c\u6570\u636e\u5e93\u4e0d\u53ef\u7528\u65f6\uff0c\u6ce8\u518c\u4e2d\u5fc3\u72ec\u7acb\u5bf9\u5916\u63d0\u4f9b\u670d\u52a1\u4ee5\u4fdd\u8bc1\u6b63\u5e38\u8fd0\u8f6c\uff0c\u53ea\u662f\u62ff\u4e0d\u5230\u5176\u5b83\u6ce8\u518c\u4e2d\u5fc3\u7684\u6570\u636e\u3002\u5f53\u6570\u636e\u5e93\u6062\u590d\u65f6\uff0c\u91cd\u8bd5\u903b\u8f91\u4f1a\u5c06\u5185\u5b58\u4e2d\u4fee\u6539\u7684\u6570\u636e\u5199\u56de\u6570\u636e\u5e93\uff0c\u5e76\u62ff\u5230\u6570\u636e\u5e93\u4e2d\u65b0\u6570\u636e\u3002","title":"Dubbo \u7684\u670d\u52a1\u6ce8\u518c\u4e2d\u5fc3"},{"location":"dev/principals/robustness/#_7","text":"\u670d\u52a1\u6d88\u8d39\u8005\u4ece\u6ce8\u518c\u4e2d\u5fc3\u62ff\u5230\u63d0\u4f9b\u8005\u5217\u8868\u540e\uff0c\u4f1a\u4fdd\u5b58\u63d0\u4f9b\u8005\u5217\u8868\u5230\u5185\u5b58\u548c\u78c1\u76d8\u6587\u4ef6\u4e2d\u3002\u8fd9\u6837\u6ce8\u518c\u4e2d\u5fc3\u5b95\u673a\u540e\u6d88\u8d39\u8005\u53ef\u4ee5\u6b63\u5e38\u8fd0\u8f6c\uff0c\u751a\u81f3\u53ef\u4ee5\u5728\u6ce8\u518c\u4e2d\u5fc3\u5b95\u673a\u8fc7\u7a0b\u4e2d\u91cd\u542f\u6d88\u8d39\u8005\u3002\u6d88\u8d39\u8005\u542f\u52a8\u65f6\uff0c\u53d1\u73b0\u6ce8\u518c\u4e2d\u5fc3\u4e0d\u53ef\u7528\uff0c\u4f1a\u8bfb\u53d6\u4fdd\u5b58\u5728\u78c1\u76d8\u6587\u4ef6\u4e2d\u63d0\u4f9b\u8005\u5217\u8868\u3002\u91cd\u8bd5\u903b\u8f91\u4fdd\u8bc1\u6ce8\u518c\u4e2d\u5fc3\u6062\u590d\u540e\uff0c\u66f4\u65b0\u4fe1\u606f\u3002","title":"\u670d\u52a1\u7684\u6d88\u8d39\u8005"},{"location":"dev/principals/robustness/#_8","text":"\u4e0a\u4e00\u70b9\u7684\u5b50\u95ee\u9898\u3002Dubbo \u4e2d\u78b0\u5230\u6709\u4e24\u4e2a\u76f8\u5173\u7684\u573a\u666f\u3002","title":"\u91cd\u8bd5\u5ef6\u8fdf\u7b56\u7565"},{"location":"dev/principals/robustness/#_9","text":"\u6ce8\u518c\u4e2d\u5fc3\u4f1a\u5b9a\u65f6\u66f4\u65b0\u6570\u636e\u5e93\u4e00\u6761\u8bb0\u5f55\u7684\u65f6\u95f4\u6233\uff0c\u8fd9\u6837\u96c6\u7fa4\u4e2d\u5176\u5b83\u7684\u6ce8\u518c\u4e2d\u5fc3\u611f\u77e5\u5b83\u662f\u5b58\u6d3b\u3002\u8fc7\u671f\u6ce8\u518c\u4e2d\u5fc3\u548c\u5b83\u7684\u76f8\u5173\u6570\u636e \u4f1a\u88ab\u6e05\u9664\u3002\u6570\u636e\u5e93\u6b63\u5e38\u65f6\uff0c\u8fd9\u4e2a\u673a\u5236\u8fd0\u884c\u826f\u597d\u3002\u4f46\u662f\u6570\u636e\u5e93\u8d1f\u8377\u9ad8\u65f6\uff0c\u5176\u4e0a\u7684\u6bcf\u4e2a\u64cd\u4f5c\u90fd\u4f1a\u5f88\u6162\u3002\u8fd9\u5c31\u51fa\u73b0\uff1a A \u6ce8\u518c\u4e2d\u5fc3\u8ba4\u4e3a B \u8fc7\u671f\uff0c\u5220\u9664 B \u7684\u6570\u636e\u3002 B \u53d1\u73b0\u81ea\u5df1\u7684\u6570\u636e\u6ca1\u6709\u4e86\uff0c\u91cd\u65b0\u5199\u5165\u81ea\u5df1\u7684\u6570\u636e\u7684\u53cd\u590d\u64cd\u4f5c\u3002\u8fd9\u4e9b\u53cd\u590d\u7684\u64cd\u4f5c\u53c8\u52a0\u91cd\u4e86\u6570\u636e\u5e93\u7684\u8d1f\u8377\uff0c\u6076\u5316\u95ee\u9898\u3002 \u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u903b\u8f91\uff1a \u5f53 B \u53d1\u73b0\u81ea\u5df1\u6570\u636e\u88ab\u5220\u9664\u65f6\uff08\u5199\u5165\u5931\u8d25\uff09\uff0c\u9009\u62e9\u7b49\u5f85\u8fd9\u6bb5\u65f6\u95f4\u518d\u91cd\u8bd5\u3002\u91cd\u8bd5\u65f6\u95f4\u53ef\u4ee5\u9009\u62e9\u6307\u6570\u7ea7\u589e\u957f\uff0c\u5982\u7b2c\u4e00\u6b21\u7b49 1 \u5206\u949f\uff0c\u7b2c\u4e8c\u6b21 10 \u5206\u949f\u3001\u7b2c\u4e09\u6b21 100 \u5206\u949f\u3002 \u8fd9\u6837\u64cd\u4f5c\u51cf\u5c11\u540e\uff0c\u4fdd\u8bc1\u6570\u636e\u5e93\u53ef\u4ee5\u51b7\u5374\uff08Cool Down\uff09\u4e0b\u6765\u3002","title":"\u6570\u636e\u5e93\u4e0a\u7684\u6d3b\u9501"},{"location":"dev/principals/robustness/#client","text":"\u5f53\u4e00\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u505c\u673a\u65f6\uff0c\u5176\u5b83\u7684 Client \u4f1a\u540c\u65f6\u63a5\u6536\u4e8b\u4ef6\uff0c\u800c\u53bb\u91cd\u8fde\u53e6\u4e00\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u3002Client \u6570\u91cf\u76f8\u5bf9\u6bd4\u8f83\u591a\uff0c\u4f1a\u5bf9\u6ce8\u518c\u4e2d\u5fc3\u9020\u6210\u51b2\u51fb\u3002\u907f\u514d\u65b9\u6cd5\u53ef\u4ee5\u662f Client \u91cd\u8fde\u65f6\u968f\u673a\u5ef6\u65f6 3 \u5206\u949f\uff0c\u628a\u91cd\u8fde\u5206\u6563\u5f00\u3002","title":"Client \u91cd\u8fde\u6ce8\u518c\u4e2d\u5fc3"},{"location":"developers/developers_dev/","text":"\u5f00\u53d1\u4eba\u5458 \u672c\u9875\u9762\u5c55\u793a\u4e86Dubbo\u7684\u5f00\u53d1\u56e2\u961f\u3002\u8bf7\u901a\u8fc7\u63d0\u4ea4PR\u7684\u65b9\u5f0f\u628a\u81ea\u5df1\u7684\u4fe1\u606f\u6dfb\u52a0\u5230\u5217\u8868\u4e0a\u3002\u6ce8\uff1a\u6392\u540d\u4e0d\u5206\u5148\u540e \u63d0\u4ea4\u8005 Apache ID Name Organization Role TimeZone jmclean Justin Mclean Apache Mentor +11 markt Mark Thomas Apache Mentor +0 wave Dave Fisher Apache Mentor johndament John D. Ament retired Mentor jfclere Jean-Frederic Clere retired Mentor huxing Huxing Zhang Alibaba PMC +8 vongosling Von Gosling Alibaba PMC +8 iluo Ian Luo Alibaba PMC +8 liujun Jun Liu Alibaba PMC +8 zhangliang Liang Zhang Jingdong PMC +8 liujieqin Liujie Qin Alibaba PMC +8 mercyblitz Mercy Ma Alibaba PMC +8 wangxin Xin Wang Weidian PMC +8 yiji Shang Zonghai Youzan PMC +8 jerrick Yong Zhu Alibaba PMC +8 carryxyh Yuhang Xiu Netease PMC +8 hyunkun YunKun Huang Meituan-Dianping PMC +8 min Minxuan Zhuang Alibaba PMC +8 kimmking Kimm King Rongguan PMC +8 leonleeldc Dingcheng Li Alibaba Committer +8 yuyijq Zhaohui Yu Qunar Committer +8 mjk Jinkai Ma Handuyishe Committer +8 yizhenqiang Zhenqiang Yi Didi Committer +8 victory Victory Cao Alibaba Committer +8 purpleforce Liandong Chen Alibaba Committer +8 jefflv Jeff Lv Alibaba Committer +8 tswstarplanet Taosheng Wei NetsUnion Committer +8 kexianjun Xianjun Ke Caocaokeji Committer +8 songkun Kun Song Huawei Committer +8 lixiaojie Xiaojie Li GomeFinance Committer +8 biyuhao Yuhao Bi Asiainfo-sec Committer +8 crazyhzm Zhongming Hua iFlytek Committer +8 kezhenxu94 Zhenxu Ke Lizhi FM Committer +8 LiZhenNet Zhen Li Keep Committer +8 lexburner Jingfeng Xu Alibaba Committer +8 khanimteyaz Imteyaz Khan Committer xxz Xiaoxiang Zhai Souche Committer +8 codingsinger Zechao Zheng iQIYI Committer +8 zouyx Yixian Zou Shein Committer +8 baze Chao Jiang Biosan Committer +8 \u8d21\u732e\u8005 Github ID Github URL \u7ec4\u7ec7 \u65f6\u533a leyou240 https://github.com/leyou240 +8 chenzhiguo https://github.com/chenzhiguo +8 huyuechy https://github.com/huyuechy +8 caojiele https://github.com/caojiele +8","title":"Developers dev"},{"location":"developers/developers_dev/#_1","text":"\u672c\u9875\u9762\u5c55\u793a\u4e86Dubbo\u7684\u5f00\u53d1\u56e2\u961f\u3002\u8bf7\u901a\u8fc7\u63d0\u4ea4PR\u7684\u65b9\u5f0f\u628a\u81ea\u5df1\u7684\u4fe1\u606f\u6dfb\u52a0\u5230\u5217\u8868\u4e0a\u3002\u6ce8\uff1a\u6392\u540d\u4e0d\u5206\u5148\u540e","title":"\u5f00\u53d1\u4eba\u5458"},{"location":"developers/developers_dev/#_2","text":"Apache ID Name Organization Role TimeZone jmclean Justin Mclean Apache Mentor +11 markt Mark Thomas Apache Mentor +0 wave Dave Fisher Apache Mentor johndament John D. Ament retired Mentor jfclere Jean-Frederic Clere retired Mentor huxing Huxing Zhang Alibaba PMC +8 vongosling Von Gosling Alibaba PMC +8 iluo Ian Luo Alibaba PMC +8 liujun Jun Liu Alibaba PMC +8 zhangliang Liang Zhang Jingdong PMC +8 liujieqin Liujie Qin Alibaba PMC +8 mercyblitz Mercy Ma Alibaba PMC +8 wangxin Xin Wang Weidian PMC +8 yiji Shang Zonghai Youzan PMC +8 jerrick Yong Zhu Alibaba PMC +8 carryxyh Yuhang Xiu Netease PMC +8 hyunkun YunKun Huang Meituan-Dianping PMC +8 min Minxuan Zhuang Alibaba PMC +8 kimmking Kimm King Rongguan PMC +8 leonleeldc Dingcheng Li Alibaba Committer +8 yuyijq Zhaohui Yu Qunar Committer +8 mjk Jinkai Ma Handuyishe Committer +8 yizhenqiang Zhenqiang Yi Didi Committer +8 victory Victory Cao Alibaba Committer +8 purpleforce Liandong Chen Alibaba Committer +8 jefflv Jeff Lv Alibaba Committer +8 tswstarplanet Taosheng Wei NetsUnion Committer +8 kexianjun Xianjun Ke Caocaokeji Committer +8 songkun Kun Song Huawei Committer +8 lixiaojie Xiaojie Li GomeFinance Committer +8 biyuhao Yuhao Bi Asiainfo-sec Committer +8 crazyhzm Zhongming Hua iFlytek Committer +8 kezhenxu94 Zhenxu Ke Lizhi FM Committer +8 LiZhenNet Zhen Li Keep Committer +8 lexburner Jingfeng Xu Alibaba Committer +8 khanimteyaz Imteyaz Khan Committer xxz Xiaoxiang Zhai Souche Committer +8 codingsinger Zechao Zheng iQIYI Committer +8 zouyx Yixian Zou Shein Committer +8 baze Chao Jiang Biosan Committer +8","title":"\u63d0\u4ea4\u8005"},{"location":"developers/developers_dev/#_3","text":"Github ID Github URL \u7ec4\u7ec7 \u65f6\u533a leyou240 https://github.com/leyou240 +8 chenzhiguo https://github.com/chenzhiguo +8 huyuechy https://github.com/huyuechy +8 caojiele https://github.com/caojiele +8","title":"\u8d21\u732e\u8005"},{"location":"developers/guide_dev/","text":"\u4e3aDubbo\u505a\u8d21\u732e Dubbo\u662f\u5728\u975e\u9650\u5236\u6027\u7684Apache 2.0\u8bb8\u53ef\u4e0b\u53d1\u5e03\u7684\uff0c\u9075\u5faa\u6807\u51c6\u7684Github\u5f00\u53d1\u6d41\u7a0b\uff0c\u4f7f\u7528Github\u8ffd\u8e2a\u5904\u7406\u95ee\u9898\uff0c\u5e76\u5c06pull request\u5408\u5e76\u5230master\u4e2d\u3002\u5982\u679c\u60a8\u60f3\u4e3aDubbo \u505a\u8d21\u732e\uff08\u5373\u4fbf\u662f\u4e00\u4e9b\u5fae\u5c0f\u7684\uff09\uff0c\u8bf7\u4e0d\u8981\u72b9\u8c6b\uff0c\u9075\u5faa\u4e0b\u9762\u7684\u6307\u5bfc\u65b9\u9488\u3002 \u7b7e\u7f72\u8d21\u732e\u8005\u8bb8\u53ef\u534f\u8bae \u5728\u6211\u4eec\u63a5\u53d7\u4e00\u4e2a\u8865\u4e01\u6216pull request\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u60a8\u7b7e\u7f72\u8d21\u732e\u8005\u8bb8\u53ef\u534f\u8bae\u3002\u7b7e\u7f72\u8d21\u732e\u8005\u534f\u8bae\u5e76\u4e0d\u6388\u4e88\u4efb\u4f55\u4eba\u5bf9\u4ee3\u7801\u4ed3\u5e93\u7684\u63d0\u4ea4\u6743\u9650\uff0c\u4f46\u662f\u5b83\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u63a5\u53d7\u60a8\u7684\u8d21\u732e\uff0c\u5e76\u4e14\u5982\u679c\u6211\u4eec\u8fd9\u6837\u505a\uff0c\u60a8\u5c06\u83b7\u5f97\u4e00\u4e2a\u4f5c\u8005\u6807\u6ce8\u3002\u4e3b\u52a8\u8d21\u732e\u8005\u53ef\u80fd\u4f1a\u88ab\u9080\u8bf7\u52a0\u5165\u6838\u5fc3\u56e2\u961f\uff0c\u5e76\u6709\u6743\u9650\u5408\u5e76pull request\u3002 \u8054\u7cfb\u6211\u4eec \u90ae\u4ef6\u5217\u8868 \u90ae\u4ef6\u5217\u8868\u662f\u8ba8\u8bba\u51e0\u4e4e\u6240\u6709\u4e0eDubbo\u6709\u5173\u4e8b\u60c5\u7684\u63a8\u8350\u65b9\u5f0f\u3002\u6709\u5173\u5982\u4f55\u8ba2\u9605\u7684\u8be6\u7ec6\u6587\u6863\uff0c\u8bf7\u53c2\u9605 \u6307\u5357 \u3002 dev@dubbo.apache.org : \u5f00\u53d1\u90ae\u4ef6\u5217\u8868\uff0c\u5982\u679c\u60a8\u5728\u4f7f\u7528\u6216\u5f00\u53d1Dubbo\u65f6\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u60a8\u53ef\u4ee5\u5728\u6b64\u63d0\u51fa\u95ee\u9898\u3002 commits@dubbo.apache.org : \u6240\u6709\u63d0\u4ea4\u5c06\u88ab\u53d1\u9001\u5230\u8fd9\u4e2a\u90ae\u4ef6\u5217\u8868\u3002\u5982\u679c\u60a8\u5bf9Dubbo\u7684\u53d1\u5c55\u611f\u5174\u8da3\uff0c\u60a8\u53ef\u4ee5\u8ba2\u9605\u5b83\u3002 notification@dubbo.apache.org : \u6240\u6709Github issue \u548c pull request \u7684\u66f4\u65b0\u90fd\u4f1a\u88ab\u53d1\u9001\u5230\u8fd9\u4e2a\u90ae\u4ef6\u5217\u8868\u3002 \u62a5\u544a\u95ee\u9898 \u5728\u62a5\u544a\u4efb\u4f55\u95ee\u9898\u65f6\u8bf7\u9075\u5faa \u6a21\u7248 \u3002 \u4ee3\u7801\u7ea6\u5b9a \u6211\u4eec\u7684\u4ee3\u7801\u98ce\u683c\u51e0\u4e4e\u548c\u6807\u51c6Java\u7ea6\u5b9a\u4e00\u81f4\uff08\u6d41\u884cIDE\u7684\u9ed8\u8ba4\u8bbe\u7f6e\u6ee1\u8db3\u8fd9\u4e00\u70b9\uff09\uff0c\u4e3b\u8981\u6709\u4ee5\u4e0b\u9644\u52a0\u9650\u5236\uff1a \u5982\u679c\u5f53\u524d\u884c\u4e2d\u6709\u8d85\u8fc7120\u4e2a\u5b57\u7b26\uff0c\u5219\u8d77\u4e00\u4e2a\u65b0\u7684\u884c\u3002 \u786e\u4fdd\u6240\u6709\u65b0\u7684.java\u6587\u4ef6\u90fd\u6709\u4e00\u4e2a\u7b80\u5355\u7684JavaDoc\u7c7b\u6ce8\u91ca\uff0c\u5176\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u6807\u8bc6\u521b\u5efa\u65e5\u671f\u7684\u6807\u7b7e\uff0c\u6700\u597d\u81f3\u5c11\u6709\u4e00\u4e2a\u5173\u4e8e\u8be5\u7c7b\u7684\u89e3\u91ca\u8bf4\u660e\u3002 \u5c06ASF\u8bb8\u53ef\u6ce8\u91ca\u6dfb\u52a0\u5230\u6240\u6709\u65b0\u7684.java\u6587\u4ef6\uff08\u4ece\u9879\u76ee\u4e2d\u7684\u73b0\u6709\u6587\u4ef6\u590d\u5236\uff09 \u8bf7\u786e\u4fdd\u6ca1\u6709\u5c06@author\u6807\u8bb0\u6dfb\u52a0\u5230\u60a8\u6240\u8d21\u732e\u7684\u6587\u4ef6\u4e2d\uff0c\u56e0\u4e3aApache\u4e0d\u4f7f\u7528@author\u6807\u8bb0\uff0c\u5176\u4ed6\u65b9\u5f0f\uff08\u5982cvs\uff09\u5c06\u516c\u5e73\u5730\u8bb0\u5f55\u6240\u6709\u60a8\u7684\u8d21\u732e\u3002 \u4e3a\u4ee3\u7801\u6dfb\u52a0\u4e00\u4e9bJavaDoc\uff0c\u5982\u679c\u60a8\u66f4\u6539\u547d\u540d\u7a7a\u95f4\uff0c\u5219\u9700\u8981\u4e00\u4e9bXSD DOC\u5143\u7d20\u3002 \u5bf9\u4e8e\u65b0\u7684\u7279\u5f81\u6216\u91cd\u8981\u7684\u4fee\u590d\u7a0b\u5e8f\uff0c\u5e94\u8be5\u6dfb\u52a0\u5355\u5143\u6d4b\u8bd5\u3002 \u5982\u679c\u6ca1\u6709\u5176\u4ed6\u4eba\u4f7f\u7528\u60a8\u7684\u5206\u652f\uff0c\u8bf7\u5c06\u5b83\u4e0emaster\uff08\u6216\u4e3b\u9879\u76ee\u4e2d\u7684\u5176\u4ed6\u76ee\u6807\u5206\u652f\uff09\u540c\u6b65\u3002 \u5f53\u7f16\u5199\u63d0\u4ea4\u6d88\u606f\u65f6\uff0c\u8bf7\u9075\u5faa\u8fd9\u4e9b\u7ea6\u5b9a\uff0c\u5982\u679c\u60a8\u6b63\u5728\u4fee\u590d\u4e00\u4e2a\u73b0\u6709\u95ee\u9898\uff0c\u8bf7\u5728\u63d0\u4ea4\u6d88\u606f\u7684\u672b\u5c3e\u6dfb\u52a0Fixes XXX\uff08\u5176\u4e2dXXX\u662f\u95ee\u9898\u7f16\u53f7\uff09\u3002 \u8d21\u732e\u6d41\u7a0b \u8fd9\u662f\u4e00\u4e2a\u8d21\u732e\u8005\u5de5\u4f5c\u6d41\u7a0b\u7684\u5927\u81f4\u8bf4\u660e\uff1a \u514b\u9686\u5f53\u524d\u9879\u76ee \u4ece\u5e0c\u671b\u8d21\u732e\u7684\u5206\u652f\u4e0a\u521b\u65b0\u65b0\u7684\u5206\u652f\uff0c\u901a\u5e38\u662fmaster\u5206\u652f\u3002 \u63d0\u4ea4\u60a8\u7684\u66f4\u6539\u3002 \u786e\u4fdd\u63d0\u4ea4\u6d88\u606f\u7684\u683c\u5f0f\u6b63\u786e\u3002 \u5c06\u65b0\u5206\u652f\u63a8\u9001\u5230\u60a8\u514b\u9686\u7684\u4ee3\u7801\u5e93\u4e2d\u3002 \u6267\u884c\u68c0\u67e5\u8868 pull request\u6a21\u7248 \u3002 \u5728\u63d0\u4ea4pull requsest\u8bf7\u6c42\u524d, \u8bf7\u5c06\u60a8\u514b\u9686\u7684\u4ee3\u7801\u548c\u8fdc\u7a0b\u4ee3\u7801\u5e93\u540c\u6b65\uff0c\u8fd9\u6837\u60a8\u7684pull request\u4f1a\u7b80\u5355\u6e05\u6670\u3002\u5177\u4f53\u64cd\u4f5c\u5982\u4e0b\uff1a git remote add upstream git@github.com:apache/dubbo.git git fetch upstream git rebase upstream/master git checkout -b your_awesome_patch ... add some work git push origin your_awesome_patch \u63d0\u4ea4pull request\u8bf7\u6c42\u5230apache/dubbo\u5e76\u7b49\u5f85\u56de\u590d\u3002 \u8c22\u8c22\u60a8\u7684\u8d21\u732e\uff01 \u4ee3\u7801\u98ce\u683c \u6211\u4eec\u63d0\u4f9b\u4e86IntelliJ idea\u7684\u6a21\u7248\u6587\u4ef6 dubbo_codestyle_for_idea.xml \uff0c\u60a8\u53ef\u4ee5\u5c06\u5b83\u5bfc\u5165\u5230IDE\u3002 \u5982\u679c\u4f7f\u7528Eclipse\uff0c\u53ef\u4ee5\u901a\u8fc7\u53c2\u8003\u8be5\u6587\u4ef6\u624b\u52a8\u914d\u7f6e\u3002 \u6ce8\u610f\u4e8b\u9879 \u4f7f\u7528 dubbo_codestyle_for_idea.xml \u4e3a\u4f60\u7684 IDEA \u8bbe\u7f6e\u4ee3\u7801\u683c\u5f0f\u662f\u8d21\u732e\u4ee3\u7801\u524d\u81f3\u5173\u91cd\u8981\u7684\u4e00\u4e2a\u6b65\u9aa4\uff0c\u5426\u5219\u4f60\u5c06\u4f1a\u65e0\u6cd5\u901a\u8fc7 Travis CI \u7684\u4ee3\u7801\u98ce\u683c\u6821\u9a8c\uff0c\u4e0b\u9762\u51e0\u4e2a\u6b65\u9aa4\u7ed9\u4f60\u6f14\u793a\u4e86\u5982\u4f55\u914d\u7f6e\u4ee3\u7801\u683c\u5f0f\uff1a \u8fdb\u5165\u83dc\u5355\u9875 Editor Code Style \u5728 Code Style \u9875\u9762\u7684 scheme \u83dc\u5355\u4e2d\u70b9\u51fb \u9009\u9879 \u5728\u4e0b\u62c9\u5217\u8868\u4e2d\u9009\u62e9 Import Scheme , \u63a5\u7740\u9009\u62e9 IntelliJ IDEA code style XML \u5bfc\u5165 xml \u6587\u4ef6 \u8f93\u5165\u4f60\u7684\u683c\u5f0f\u540d\u79f0\uff0c\u65b9\u4fbf\u5728\u4e0d\u540c\u5de5\u7a0b\u4e4b\u95f4\u8fdb\u884c\u8bc6\u522b\uff0c\u6700\u540e\u522b\u5fd8\u4e86 \u23ce \u6765\u4fdd\u5b58\u66f4\u6539. \u8bbe\u7f6e\u5b8c\u6210\u540e\uff0cIDEA \u4f1a\u5e2e\u52a9\u4f60\u81ea\u52a8 reformat \u4ee3\u7801","title":"Guide dev"},{"location":"developers/guide_dev/#dubbo","text":"Dubbo\u662f\u5728\u975e\u9650\u5236\u6027\u7684Apache 2.0\u8bb8\u53ef\u4e0b\u53d1\u5e03\u7684\uff0c\u9075\u5faa\u6807\u51c6\u7684Github\u5f00\u53d1\u6d41\u7a0b\uff0c\u4f7f\u7528Github\u8ffd\u8e2a\u5904\u7406\u95ee\u9898\uff0c\u5e76\u5c06pull request\u5408\u5e76\u5230master\u4e2d\u3002\u5982\u679c\u60a8\u60f3\u4e3aDubbo \u505a\u8d21\u732e\uff08\u5373\u4fbf\u662f\u4e00\u4e9b\u5fae\u5c0f\u7684\uff09\uff0c\u8bf7\u4e0d\u8981\u72b9\u8c6b\uff0c\u9075\u5faa\u4e0b\u9762\u7684\u6307\u5bfc\u65b9\u9488\u3002","title":"\u4e3aDubbo\u505a\u8d21\u732e"},{"location":"developers/guide_dev/#_1","text":"\u5728\u6211\u4eec\u63a5\u53d7\u4e00\u4e2a\u8865\u4e01\u6216pull request\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u60a8\u7b7e\u7f72\u8d21\u732e\u8005\u8bb8\u53ef\u534f\u8bae\u3002\u7b7e\u7f72\u8d21\u732e\u8005\u534f\u8bae\u5e76\u4e0d\u6388\u4e88\u4efb\u4f55\u4eba\u5bf9\u4ee3\u7801\u4ed3\u5e93\u7684\u63d0\u4ea4\u6743\u9650\uff0c\u4f46\u662f\u5b83\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u63a5\u53d7\u60a8\u7684\u8d21\u732e\uff0c\u5e76\u4e14\u5982\u679c\u6211\u4eec\u8fd9\u6837\u505a\uff0c\u60a8\u5c06\u83b7\u5f97\u4e00\u4e2a\u4f5c\u8005\u6807\u6ce8\u3002\u4e3b\u52a8\u8d21\u732e\u8005\u53ef\u80fd\u4f1a\u88ab\u9080\u8bf7\u52a0\u5165\u6838\u5fc3\u56e2\u961f\uff0c\u5e76\u6709\u6743\u9650\u5408\u5e76pull request\u3002","title":"\u7b7e\u7f72\u8d21\u732e\u8005\u8bb8\u53ef\u534f\u8bae"},{"location":"developers/guide_dev/#_2","text":"","title":"\u8054\u7cfb\u6211\u4eec"},{"location":"developers/guide_dev/#_3","text":"\u90ae\u4ef6\u5217\u8868\u662f\u8ba8\u8bba\u51e0\u4e4e\u6240\u6709\u4e0eDubbo\u6709\u5173\u4e8b\u60c5\u7684\u63a8\u8350\u65b9\u5f0f\u3002\u6709\u5173\u5982\u4f55\u8ba2\u9605\u7684\u8be6\u7ec6\u6587\u6863\uff0c\u8bf7\u53c2\u9605 \u6307\u5357 \u3002 dev@dubbo.apache.org : \u5f00\u53d1\u90ae\u4ef6\u5217\u8868\uff0c\u5982\u679c\u60a8\u5728\u4f7f\u7528\u6216\u5f00\u53d1Dubbo\u65f6\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u60a8\u53ef\u4ee5\u5728\u6b64\u63d0\u51fa\u95ee\u9898\u3002 commits@dubbo.apache.org : \u6240\u6709\u63d0\u4ea4\u5c06\u88ab\u53d1\u9001\u5230\u8fd9\u4e2a\u90ae\u4ef6\u5217\u8868\u3002\u5982\u679c\u60a8\u5bf9Dubbo\u7684\u53d1\u5c55\u611f\u5174\u8da3\uff0c\u60a8\u53ef\u4ee5\u8ba2\u9605\u5b83\u3002 notification@dubbo.apache.org : \u6240\u6709Github issue \u548c pull request \u7684\u66f4\u65b0\u90fd\u4f1a\u88ab\u53d1\u9001\u5230\u8fd9\u4e2a\u90ae\u4ef6\u5217\u8868\u3002","title":"\u90ae\u4ef6\u5217\u8868"},{"location":"developers/guide_dev/#_4","text":"\u5728\u62a5\u544a\u4efb\u4f55\u95ee\u9898\u65f6\u8bf7\u9075\u5faa \u6a21\u7248 \u3002","title":"\u62a5\u544a\u95ee\u9898"},{"location":"developers/guide_dev/#_5","text":"\u6211\u4eec\u7684\u4ee3\u7801\u98ce\u683c\u51e0\u4e4e\u548c\u6807\u51c6Java\u7ea6\u5b9a\u4e00\u81f4\uff08\u6d41\u884cIDE\u7684\u9ed8\u8ba4\u8bbe\u7f6e\u6ee1\u8db3\u8fd9\u4e00\u70b9\uff09\uff0c\u4e3b\u8981\u6709\u4ee5\u4e0b\u9644\u52a0\u9650\u5236\uff1a \u5982\u679c\u5f53\u524d\u884c\u4e2d\u6709\u8d85\u8fc7120\u4e2a\u5b57\u7b26\uff0c\u5219\u8d77\u4e00\u4e2a\u65b0\u7684\u884c\u3002 \u786e\u4fdd\u6240\u6709\u65b0\u7684.java\u6587\u4ef6\u90fd\u6709\u4e00\u4e2a\u7b80\u5355\u7684JavaDoc\u7c7b\u6ce8\u91ca\uff0c\u5176\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u6807\u8bc6\u521b\u5efa\u65e5\u671f\u7684\u6807\u7b7e\uff0c\u6700\u597d\u81f3\u5c11\u6709\u4e00\u4e2a\u5173\u4e8e\u8be5\u7c7b\u7684\u89e3\u91ca\u8bf4\u660e\u3002 \u5c06ASF\u8bb8\u53ef\u6ce8\u91ca\u6dfb\u52a0\u5230\u6240\u6709\u65b0\u7684.java\u6587\u4ef6\uff08\u4ece\u9879\u76ee\u4e2d\u7684\u73b0\u6709\u6587\u4ef6\u590d\u5236\uff09 \u8bf7\u786e\u4fdd\u6ca1\u6709\u5c06@author\u6807\u8bb0\u6dfb\u52a0\u5230\u60a8\u6240\u8d21\u732e\u7684\u6587\u4ef6\u4e2d\uff0c\u56e0\u4e3aApache\u4e0d\u4f7f\u7528@author\u6807\u8bb0\uff0c\u5176\u4ed6\u65b9\u5f0f\uff08\u5982cvs\uff09\u5c06\u516c\u5e73\u5730\u8bb0\u5f55\u6240\u6709\u60a8\u7684\u8d21\u732e\u3002 \u4e3a\u4ee3\u7801\u6dfb\u52a0\u4e00\u4e9bJavaDoc\uff0c\u5982\u679c\u60a8\u66f4\u6539\u547d\u540d\u7a7a\u95f4\uff0c\u5219\u9700\u8981\u4e00\u4e9bXSD DOC\u5143\u7d20\u3002 \u5bf9\u4e8e\u65b0\u7684\u7279\u5f81\u6216\u91cd\u8981\u7684\u4fee\u590d\u7a0b\u5e8f\uff0c\u5e94\u8be5\u6dfb\u52a0\u5355\u5143\u6d4b\u8bd5\u3002 \u5982\u679c\u6ca1\u6709\u5176\u4ed6\u4eba\u4f7f\u7528\u60a8\u7684\u5206\u652f\uff0c\u8bf7\u5c06\u5b83\u4e0emaster\uff08\u6216\u4e3b\u9879\u76ee\u4e2d\u7684\u5176\u4ed6\u76ee\u6807\u5206\u652f\uff09\u540c\u6b65\u3002 \u5f53\u7f16\u5199\u63d0\u4ea4\u6d88\u606f\u65f6\uff0c\u8bf7\u9075\u5faa\u8fd9\u4e9b\u7ea6\u5b9a\uff0c\u5982\u679c\u60a8\u6b63\u5728\u4fee\u590d\u4e00\u4e2a\u73b0\u6709\u95ee\u9898\uff0c\u8bf7\u5728\u63d0\u4ea4\u6d88\u606f\u7684\u672b\u5c3e\u6dfb\u52a0Fixes XXX\uff08\u5176\u4e2dXXX\u662f\u95ee\u9898\u7f16\u53f7\uff09\u3002","title":"\u4ee3\u7801\u7ea6\u5b9a"},{"location":"developers/guide_dev/#_6","text":"\u8fd9\u662f\u4e00\u4e2a\u8d21\u732e\u8005\u5de5\u4f5c\u6d41\u7a0b\u7684\u5927\u81f4\u8bf4\u660e\uff1a \u514b\u9686\u5f53\u524d\u9879\u76ee \u4ece\u5e0c\u671b\u8d21\u732e\u7684\u5206\u652f\u4e0a\u521b\u65b0\u65b0\u7684\u5206\u652f\uff0c\u901a\u5e38\u662fmaster\u5206\u652f\u3002 \u63d0\u4ea4\u60a8\u7684\u66f4\u6539\u3002 \u786e\u4fdd\u63d0\u4ea4\u6d88\u606f\u7684\u683c\u5f0f\u6b63\u786e\u3002 \u5c06\u65b0\u5206\u652f\u63a8\u9001\u5230\u60a8\u514b\u9686\u7684\u4ee3\u7801\u5e93\u4e2d\u3002 \u6267\u884c\u68c0\u67e5\u8868 pull request\u6a21\u7248 \u3002 \u5728\u63d0\u4ea4pull requsest\u8bf7\u6c42\u524d, \u8bf7\u5c06\u60a8\u514b\u9686\u7684\u4ee3\u7801\u548c\u8fdc\u7a0b\u4ee3\u7801\u5e93\u540c\u6b65\uff0c\u8fd9\u6837\u60a8\u7684pull request\u4f1a\u7b80\u5355\u6e05\u6670\u3002\u5177\u4f53\u64cd\u4f5c\u5982\u4e0b\uff1a git remote add upstream git@github.com:apache/dubbo.git git fetch upstream git rebase upstream/master git checkout -b your_awesome_patch ... add some work git push origin your_awesome_patch \u63d0\u4ea4pull request\u8bf7\u6c42\u5230apache/dubbo\u5e76\u7b49\u5f85\u56de\u590d\u3002 \u8c22\u8c22\u60a8\u7684\u8d21\u732e\uff01","title":"\u8d21\u732e\u6d41\u7a0b"},{"location":"developers/guide_dev/#_7","text":"\u6211\u4eec\u63d0\u4f9b\u4e86IntelliJ idea\u7684\u6a21\u7248\u6587\u4ef6 dubbo_codestyle_for_idea.xml \uff0c\u60a8\u53ef\u4ee5\u5c06\u5b83\u5bfc\u5165\u5230IDE\u3002 \u5982\u679c\u4f7f\u7528Eclipse\uff0c\u53ef\u4ee5\u901a\u8fc7\u53c2\u8003\u8be5\u6587\u4ef6\u624b\u52a8\u914d\u7f6e\u3002 \u6ce8\u610f\u4e8b\u9879 \u4f7f\u7528 dubbo_codestyle_for_idea.xml \u4e3a\u4f60\u7684 IDEA \u8bbe\u7f6e\u4ee3\u7801\u683c\u5f0f\u662f\u8d21\u732e\u4ee3\u7801\u524d\u81f3\u5173\u91cd\u8981\u7684\u4e00\u4e2a\u6b65\u9aa4\uff0c\u5426\u5219\u4f60\u5c06\u4f1a\u65e0\u6cd5\u901a\u8fc7 Travis CI \u7684\u4ee3\u7801\u98ce\u683c\u6821\u9a8c\uff0c\u4e0b\u9762\u51e0\u4e2a\u6b65\u9aa4\u7ed9\u4f60\u6f14\u793a\u4e86\u5982\u4f55\u914d\u7f6e\u4ee3\u7801\u683c\u5f0f\uff1a \u8fdb\u5165\u83dc\u5355\u9875 Editor Code Style \u5728 Code Style \u9875\u9762\u7684 scheme \u83dc\u5355\u4e2d\u70b9\u51fb \u9009\u9879 \u5728\u4e0b\u62c9\u5217\u8868\u4e2d\u9009\u62e9 Import Scheme , \u63a5\u7740\u9009\u62e9 IntelliJ IDEA code style XML \u5bfc\u5165 xml \u6587\u4ef6 \u8f93\u5165\u4f60\u7684\u683c\u5f0f\u540d\u79f0\uff0c\u65b9\u4fbf\u5728\u4e0d\u540c\u5de5\u7a0b\u4e4b\u95f4\u8fdb\u884c\u8bc6\u522b\uff0c\u6700\u540e\u522b\u5fd8\u4e86 \u23ce \u6765\u4fdd\u5b58\u66f4\u6539. \u8bbe\u7f6e\u5b8c\u6210\u540e\uff0cIDEA \u4f1a\u5e2e\u52a9\u4f60\u81ea\u52a8 reformat \u4ee3\u7801","title":"\u4ee3\u7801\u98ce\u683c"},{"location":"developers/committer-guide/apache-dubbo-page_dev/","text":"Apache\u5b98\u65b9Dubbo\u4e3b\u9875\u7684\u7ef4\u62a4 Apache\u6709\u4e00\u4e2a\u5b98\u65b9\u7684\u7f51\u7ad9\uff0c\u7528\u6765\u7ef4\u62a4\u6240\u6709\u7684\u5b75\u5316\u9879\u76ee\u7684\u4fe1\u606f\u3002\u6bcf\u4e00\u4e2a\u5b75\u5316\u9879\u76ee\u5728\u8fd9\u4e2a\u7f51\u7ad9\u4e0b\u90fd\u6709\u4e00\u4e2a\u4fe1\u606f\u9875\u3002 Dubbo\u7684\u4fe1\u606f\u9875\u5730\u5740\u662f https://incubator.apache.org/projects/dubbo.html \u3002 \u5f53\u9879\u76ee\u53d1\u751f\u6bd4\u8f83\u5927\u7684\u53d8\u5316\uff0c\u6bd4\u5982\u65b0\u7684committer\u7684\u52a0\u5165\uff0c\u65b0\u7684PMC\u7684\u5f53\u9009\uff0c\u6216\u662f\u65b0\u7248\u672c\u7684Release\u7b49\uff0c\u90fd\u9700\u8981\u5c06\u8fd9\u4e9b\u66f4\u65b0\u4fe1\u606f\u7ef4\u62a4\u5230\u8fd9\u4e2a\u9875\u9762\u3002 \u8fd9\u4e2a\u5b98\u65b9\u7f51\u7ad9\u7684\u9879\u76ee\u5730\u5740\u662f https://svn.apache.org/repos/asf/incubator/public/trunk \u3002 \u7ef4\u62a4\u8fd9\u4e2a\u9875\u9762\u7684\u65b9\u6cd5\u5982\u4e0b\uff1a 1.\u5b89\u88c5SVN\u3002\u82e5\u662fMac OS X\u7cfb\u7edf\u6216\u662fLinux\u7cfb\u7edf\uff0c\u5219\u81ea\u5e26\u4e86SVN\u3002\u82e5\u662fWindows\u7cfb\u7edf\uff0c\u5219\u8bf7\u9996\u5148\u81ea\u884c\u5b89\u88c5SVN\u3002 2.\u7528SVN\u5c06\u8fd9\u4e2a \u9879\u76ee checkout\u4e0b\u6765 \u3002 3.\u4fee\u6539content/projects/dubbo.xml\u6587\u4ef6\uff0c\u5e76\u4fdd\u5b58\u3002 4.\u5b89\u88c5ANT\u3002\u6267\u884ctrunk\u76ee\u5f55\u4e0b\u7684build.sh\u6216\u8005build.bat\u811a\u672c\u6784\u5efa\u9879\u76ee\u3002 5.\u6784\u5efa\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u7528\u6d4f\u89c8\u5668\u6253\u5f00target/site/projects/dubbo.html\u6587\u4ef6\uff0c\u9884\u89c8\u4fee\u6539\u662f\u5426\u751f\u6548\u3002 6.\u7528SVN\u7684commit\u547d\u4ee4\u5c06dubbo.xml\u6587\u4ef6\u63d0\u4ea4\u5230\u670d\u52a1\u5668\uff0c\u5e76\u4e14\u4e0d\u8981\u63d0\u4ea4dubbo.html\u6587\u4ef6\uff08\u56e0\u4e3a\u670d\u52a1\u5668\u7aef\u4f1a\u5b9a\u65f6\u81ea\u52a8\u6784\u5efa\uff09\u3002 \u6b64\u8fc7\u7a0b\u4f1a\u8981\u6c42\u8f93\u5165Apache id\u548c\u5bc6\u7801\u3002 \u53c2\u8003: 1.http://incubator.apache.org/guides/website.html 2.https://svn.apache.org/repos/asf/incubator/public/trunk/README.txt","title":"Apache\u5b98\u65b9Dubbo\u4e3b\u9875\u7684\u7ef4\u62a4"},{"location":"developers/committer-guide/apache-dubbo-page_dev/#apachedubbo","text":"Apache\u6709\u4e00\u4e2a\u5b98\u65b9\u7684\u7f51\u7ad9\uff0c\u7528\u6765\u7ef4\u62a4\u6240\u6709\u7684\u5b75\u5316\u9879\u76ee\u7684\u4fe1\u606f\u3002\u6bcf\u4e00\u4e2a\u5b75\u5316\u9879\u76ee\u5728\u8fd9\u4e2a\u7f51\u7ad9\u4e0b\u90fd\u6709\u4e00\u4e2a\u4fe1\u606f\u9875\u3002 Dubbo\u7684\u4fe1\u606f\u9875\u5730\u5740\u662f https://incubator.apache.org/projects/dubbo.html \u3002 \u5f53\u9879\u76ee\u53d1\u751f\u6bd4\u8f83\u5927\u7684\u53d8\u5316\uff0c\u6bd4\u5982\u65b0\u7684committer\u7684\u52a0\u5165\uff0c\u65b0\u7684PMC\u7684\u5f53\u9009\uff0c\u6216\u662f\u65b0\u7248\u672c\u7684Release\u7b49\uff0c\u90fd\u9700\u8981\u5c06\u8fd9\u4e9b\u66f4\u65b0\u4fe1\u606f\u7ef4\u62a4\u5230\u8fd9\u4e2a\u9875\u9762\u3002 \u8fd9\u4e2a\u5b98\u65b9\u7f51\u7ad9\u7684\u9879\u76ee\u5730\u5740\u662f https://svn.apache.org/repos/asf/incubator/public/trunk \u3002 \u7ef4\u62a4\u8fd9\u4e2a\u9875\u9762\u7684\u65b9\u6cd5\u5982\u4e0b\uff1a 1.\u5b89\u88c5SVN\u3002\u82e5\u662fMac OS X\u7cfb\u7edf\u6216\u662fLinux\u7cfb\u7edf\uff0c\u5219\u81ea\u5e26\u4e86SVN\u3002\u82e5\u662fWindows\u7cfb\u7edf\uff0c\u5219\u8bf7\u9996\u5148\u81ea\u884c\u5b89\u88c5SVN\u3002 2.\u7528SVN\u5c06\u8fd9\u4e2a \u9879\u76ee checkout\u4e0b\u6765 \u3002 3.\u4fee\u6539content/projects/dubbo.xml\u6587\u4ef6\uff0c\u5e76\u4fdd\u5b58\u3002 4.\u5b89\u88c5ANT\u3002\u6267\u884ctrunk\u76ee\u5f55\u4e0b\u7684build.sh\u6216\u8005build.bat\u811a\u672c\u6784\u5efa\u9879\u76ee\u3002 5.\u6784\u5efa\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u7528\u6d4f\u89c8\u5668\u6253\u5f00target/site/projects/dubbo.html\u6587\u4ef6\uff0c\u9884\u89c8\u4fee\u6539\u662f\u5426\u751f\u6548\u3002 6.\u7528SVN\u7684commit\u547d\u4ee4\u5c06dubbo.xml\u6587\u4ef6\u63d0\u4ea4\u5230\u670d\u52a1\u5668\uff0c\u5e76\u4e14\u4e0d\u8981\u63d0\u4ea4dubbo.html\u6587\u4ef6\uff08\u56e0\u4e3a\u670d\u52a1\u5668\u7aef\u4f1a\u5b9a\u65f6\u81ea\u52a8\u6784\u5efa\uff09\u3002 \u6b64\u8fc7\u7a0b\u4f1a\u8981\u6c42\u8f93\u5165Apache id\u548c\u5bc6\u7801\u3002 \u53c2\u8003: 1.http://incubator.apache.org/guides/website.html 2.https://svn.apache.org/repos/asf/incubator/public/trunk/README.txt","title":"Apache\u5b98\u65b9Dubbo\u4e3b\u9875\u7684\u7ef4\u62a4"},{"location":"developers/committer-guide/label-an-issue-guide_dev/","text":"\u7ed9\u95ee\u9898\u6253\u6807\u7b7e \u5982\u679c\u60a8\u6b63\u5728\u5904\u7406\u4e00\u4e2a\u95ee\u9898\uff0c\u8bf7\u8bb0\u5f97 \u7ed9\u8fd9\u4e2a\u95ee\u9898\u6807\u8bb0\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u60a8\u8ba4\u4e3a\u6709\u610f\u4e49\u7684\u6807\u7b7e \u3002\u6709\u4e86\u6807\u7b7e\uff0c\u5176\u4ed6\u5f00\u53d1\u4eba\u5458\u5c31\u4f1a\u5f88\u8f7b\u677e\u5730\u8bc6\u522b\u51fa\u95ee\u9898\uff0c\u4ee5\u4fbf\u5bf9\u5176\u8fdb\u884c\u5206\u7c7b\u5e76\u8ddf\u8e2a\u8fdb\u5ea6\u3002 \u5bf9\u4e8e\u9700\u8981\u7f16\u7801\u548c\u53d1\u7248\u4fee\u590d\u7684issues\u548cpull requests\uff0c\u9700\u8981\u60a8 \u5c06\u5176\u6807\u8bb0\u4e3a milestone \u3002 \u4e00\u4e9b\u5e38\u7528\u7684\u6807\u7b7e\uff1a \u8bf7\u6c42\u5e2e\u52a9 help wanted good first issue \u4f18\u5148\u7ea7 priority/blocker priority/high priority/low priority/normal \u72b6\u6001 status/need-triage status/DO-NOT-MERGE status/READY-TO-MERGE status/invalid status/wontfix \u7c7b\u578b type/bug type/documentation type/enhancement type/feature","title":"\u7ed9\u95ee\u9898\u6253\u6807\u7b7e"},{"location":"developers/committer-guide/label-an-issue-guide_dev/#_1","text":"\u5982\u679c\u60a8\u6b63\u5728\u5904\u7406\u4e00\u4e2a\u95ee\u9898\uff0c\u8bf7\u8bb0\u5f97 \u7ed9\u8fd9\u4e2a\u95ee\u9898\u6807\u8bb0\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u60a8\u8ba4\u4e3a\u6709\u610f\u4e49\u7684\u6807\u7b7e \u3002\u6709\u4e86\u6807\u7b7e\uff0c\u5176\u4ed6\u5f00\u53d1\u4eba\u5458\u5c31\u4f1a\u5f88\u8f7b\u677e\u5730\u8bc6\u522b\u51fa\u95ee\u9898\uff0c\u4ee5\u4fbf\u5bf9\u5176\u8fdb\u884c\u5206\u7c7b\u5e76\u8ddf\u8e2a\u8fdb\u5ea6\u3002 \u5bf9\u4e8e\u9700\u8981\u7f16\u7801\u548c\u53d1\u7248\u4fee\u590d\u7684issues\u548cpull requests\uff0c\u9700\u8981\u60a8 \u5c06\u5176\u6807\u8bb0\u4e3a milestone \u3002 \u4e00\u4e9b\u5e38\u7528\u7684\u6807\u7b7e\uff1a \u8bf7\u6c42\u5e2e\u52a9 help wanted good first issue \u4f18\u5148\u7ea7 priority/blocker priority/high priority/low priority/normal \u72b6\u6001 status/need-triage status/DO-NOT-MERGE status/READY-TO-MERGE status/invalid status/wontfix \u7c7b\u578b type/bug type/documentation type/enhancement type/feature","title":"\u7ed9\u95ee\u9898\u6253\u6807\u7b7e"},{"location":"developers/committer-guide/new-committer-guide_dev/","text":"Apache \u63d0\u4ea4\u8005\u6ce8\u518c\u6d41\u7a0b \u4e00\u3001Apache \u63d0\u4ea4\u8005\u7684\u4ea7\u751f \u9879\u76ee\u5b75\u5316\u521d\u59cb\u5316\u63d0\u4ea4\u8005 \u9879\u76ee\u5b75\u5316\u9636\u6bb5\uff0c\u5728\u5b75\u5316\u9879\u76ee\u63d0\u6848\u4e2d\uff0c\u4f1a\u6709\u521d\u59cb\u5316\u63d0\u4ea4\u8005\u5217\u8868\u8fd9\u4e00\u9009\u9879\u3002\u786e\u8ba4\u4f60\u662f\u521d\u59cb\u5316\u63d0\u4ea4\u8005\u7684\u4e00\u5458\u3002\u9879\u76ee\u5728 apache \u5b75\u5316\u5668\u793e\u533a\u6295\u7968\u901a\u8fc7\u540e\uff0c\u63d0\u4ea4\u8005\u53ef\u4ee5\u5f00\u59cb\u51c6\u5907\u6ce8\u518c\u8d26\u6237\u4e86\u3002\u53ef\u4ee5\u53c2\u770b \u5b75\u5316\u5668 wiki \u6d3b\u8dc3\u7684\u8d21\u732e\u8005\u88ab\u9009\u4e3e\u4e3a\u63d0\u4ea4\u8005 \u5728\u540e\u671f\u7684\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u6d3b\u8dc3\u7684\u8d21\u732e\u8005\u53ef\u4ee5\u88ab\u9009\u4e3e\u4e3a\u63d0\u4ea4\u8005\u3002\u89c1 \u5982\u4f55\u6210\u4e3a committer \u4e8c\u3001\u4e2a\u4eba\u5f00\u53d1\u8005\u63d0\u4ea4 ICLA 1\u3001\u9009\u62e9 apache id \u5728 apache \u63d0\u4ea4\u8005\u5217\u8868\u9875 \u67e5\u770b\u5df2\u7ecf\u6ce8\u518c\u8fc7\u7684 apache id\uff0c 2\u3001\u4e2a\u4eba\u63d0\u4ea4\u8005\u6388\u6743\u534f\u8bae\uff08ICLA\uff09\uff1a \u4e0b\u8f7d ICLA \u6a21\u677f \uff0c\u67e5\u627e\u53ef\u7528\u7684 id\u3002\u5c06 icla.pdf \u4e2a\u4eba\u4fe1\u606f\u586b\u5199\u6b63\u786e\u540e\u6253\u5370,\u7b7e\u540d\u3001\u626b\u63cf\u3001\u5e76\u5f53\u505a\u9644\u4ef6\u53d1\u9001\u90ae\u4ef6\u7ed9\u79d8\u4e66 secretary@apache.org\uff0c\u79d8\u4e66\u4f1a\u5e2e\u5fd9\u521b\u5efa apache \u7528\u6237 id\u3002\u540c\u65f6\u4f1a\u521b\u5efa\u4e00\u4e2a your_id@apache.org \u7684\u90ae\u7bb1\uff0c\u53ef\u4ee5\u5728 apache \u63d0\u4ea4\u8005\u5217\u8868\u9875 \u67e5\u770b\u67e5\u627e\u7528\u6237\u662f\u5426\u5df2\u7ecf\u521b\u5efa\u3002 3\u3001\u5bfc\u5e08\u5e2e\u52a9\u63d0\u4ea4\u7528\u6237id\u521b\u5efa\u8bf7\u6c42 \u5bfc\u5e08\u5c06\u5e2e\u52a9\u63d0\u4ea4 apache \u8d26\u6237\u521b\u5efa\u8bf7\u6c42\u7ed9 root \u90ae\u4ef6\u7ec4\uff0c\u4f1a\u6709\u4eba\u5e2e\u52a9\u5efa\u7acb id\u3002\u4e00\u822c\u9700\u89812\u5929\u65f6\u95f4\u8d26\u6237\u4f1a\u5efa\u7acb\uff0c\u8bf7\u7b49\u5f85\u5e76\u5728 apache \u63d0\u4ea4\u8005\u5217\u8868\u9875 \u67e5\u770b\u67e5\u627e\u7528\u6237\u662f\u5426\u5df2\u7ecf\u521b\u5efa\u3002 \u4e09\u3001\u52a0\u5165apache\u5f00\u53d1\u8005\u7ec4 1\u3001\u767b\u9646 Apache \u8d26\u6237\u5de5\u5177 \uff0c\u5728\u767b\u9646\u9875\u9762\u70b9\u51fb\"\u5fd8\u8bb0\u5bc6\u7801\"\u8bbe\u7f6e\u59cb\u5316\u5bc6\u7801\uff0c\u4f1a\u6709\u4e00\u5c01\u5bc6\u7801\u91cd\u7f6e\u90ae\u4ef6\u53d1\u9001\u5230 forward \u90ae\u7bb1(\u5728\u5b75\u5316\u9879\u76ee\u63d0\u6848\u4e2d\u63d0\u4ea4\u7684\u5f00\u53d1\u8005\u90ae\u4ef6) 2\u3001\u5173\u4e8e apache \u90ae\u7bb1\uff1aapache.org \u90ae\u7bb1\u5e76\u6ca1\u6709\u81ea\u5df1\u7684\u90ae\u4ef6\u5185\u5bb9\u5b58\u50a8\u670d\u52a1\u5668\u3002\u5b83\u9700\u8981\u501f\u7528\u5176\u4ed6\u90ae\u4ef6\u63d0\u4f9b\u5546\u7684\u90ae\u4ef6\u5185\u5bb9\u5b58\u50a8\u3001\u5206\u53d1\u529f\u80fd\u3002\u5728\u5f88\u591a\u6295\u7968\u73af\u8282\u662f\u5efa\u8bae\u4f7f\u7528 apache \u90ae\u7bb1\u7684\u3002 \u8fd9\u91cc\u5c31\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u600e\u4e48\u5728\u5176\u5b83\u90ae\u7bb1\u91cc\u9762\u914d\u7f6e apache.org \u90ae\u7bb1\u8f6c\u53d1\u529f\u80fd\uff1a 1\uff09\u6536\u4ef6\u7bb1\uff1a\u6536\u53d6\u53d1\u9001\u5230 apache.org \u7684\u90ae\u4ef6\u3002\u8fd9\u4e2a\u5728\u7b2c\u4e00\u6b65\u914d\u7f6e\u597d Apache \u8d26\u6237\u5de5\u5177\u7684 forward \u90ae\u7bb1\u5c31\u53ef\u4ee5\u7528 forward \u90ae\u7bb1\u6536\u53d6\u90ae\u4ef6\u4e86 2\uff09\u53d1\u4ef6\u7bb1\uff1a\u5c06\u53d1\u51fa\u7684\u90ae\u4ef6\u663e\u793a\u53d1\u4ef6\u90ae\u7bb1\u4e3a apache.org \u90ae\u7bb1\u3002\u8bf7\u53c2\u8003\uff1a \u8bbe\u7f6e apache \u90ae\u7bb1\u6307\u5357 \u548c gmail \u90ae\u7bb1\u8bbe\u7f6e\u65b9\u5f0f \u3002 \u5176\u4ed6\u90ae\u7bb1\u670d\u52a1\u7684\u8bbe\u7f6e\u65b9\u5f0f\u4e0d\u65b9\u4fbf\u627e\u5230\uff0cgmail \u7684\u6700\u65b9\u4fbf\uff0c\u5efa\u8bae\u6362\u6210 gmail \u90ae\u7bb1(\u4e0d\u662f\u5e7f\u544a)\u3002 3\u3001\u4fee\u6539\u7f16\u8f91\u9875\u9762\u7684 homepage url\uff0c apache \u63d0\u4ea4\u8005\u5217\u8868\u9875 \u4e2d\u4f60\u7684\u8d26\u6237\u80fd\u52a0\u4e3b\u9875\u94fe\u63a5\u3002 4\u3001\u4fee\u6539\u7f16\u8f91\u9875\u9762\u7684 github \u8d26\u6237(username)\uff0c\u63d0\u4ea4\u786e\u8ba4\u540e\u4e24\u4e2a\u5c0f\u65f6\u5185\u4f1a\u6709\u90ae\u4ef6\u9080\u8bf7\u4f60\u52a0\u5165 github.com/apache-committers \u7ec4\u3002\u8fd9\u671f\u95f4\u53ef\u4ee5\u9605\u8bfb ASF \u5de5\u4f5c\u65b9\u5f0f \u4ee5\u5bf9 ASF \u5f00\u53d1\u505a\u4e00\u4e9b\u57fa\u672c\u4e86\u89e3\u3002 \u56db\u3001\u63d0\u4ea4\u8005\u83b7\u5f97\u5bf9\u9879\u76ee\u7684\u5199\u6743\u9650 GitBox \u8d26\u6237\u94fe\u63a5\u5de5\u5177 \u7684\u64cd\u4f5c 1\u3001Apache\u8d26\u6237\u6388\u6743 \u6309\u7167\u63d0\u793a\u6388\u6743\u5bf9 Apache \u8d26\u6237\u7684 OAuth \u534f\u8bae\u767b\u5165 2\u3001Github\u8d26\u6237\u6388\u6743 \u6309\u7167\u63d0\u793a\u6388\u6743\u5bf9 github \u8d26\u6237\u7684 OAuth \u534f\u8bae\u767b\u5165 3\u3001\u5728 github.com \u8bbe\u7f6e github \u8d26\u6237\u4e24\u56e0\u7d20\u6388\u6743\uff082FA\uff09 \u6309\u7167 \u6388\u6743 GitHub 2FA wiki \u64cd\u4f5c\u5982\u4e0b\uff1a * 1)\u3001\u5728\u624b\u673a\u5b89\u88c5 \u201cgoogle \u8eab\u4efd\u9a8c\u8bc1\u5668\u201d app * 2)\u3001\u6309\u7167 \u6388\u6743 GitHub 2FA wiki \u4e00\u6b65\u4e00\u6b65\u64cd\u4f5c\u3002 \u5728 \u4e24\u56e0\u7d20\u6388\u6743\u9a8c\u8bc1 \u754c\u9762\uff0c\u4e0d\u5efa\u8bae\u9009\u62e9\u7528\u624b\u673a\u626b\u63cf\u4e8c\u7ef4\u7801\uff0c\u56e0\u4e3a\u6709\u4e9b\u624b\u673a\u4f1a\u626b\u63cf\u4e0d\u51fa\u6765\u3002 \u8bf7\u6253\u5f00\u624b\u673a \u201cgoogle \u8eab\u4efd\u9a8c\u8bc1\u5668\u201d app\uff0c\u70b9\u201c+\u201d\u9009\u62e9\u201c\u8f93\u5165\u63d0\u4f9b\u7684\u79d8\u94a5\u201d\uff1a \u5728\u201c\u8d26\u6237\u540d\u201d input \u6846\u5199\u5165 github \u8d26\u6237\u3002\u5728\u201c\u60a8\u7684\u79d8\u94a5\u201d input \u6846\u5199\u5165:\u6253\u5f00\u7684\u7f51\u9875\u4e2d \"enter this text code\" \u94fe\u63a5\u91cc\u9762\u7684\u6587\u672c\u3002\u5728 app \u4e2d\u70b9\u51fb\"\u6dfb\u52a0\" \u540e\uff0c\u5c06\u4e3a\u6b64\u8d26\u6237\u751f\u62106\u4f4d\u6570\u5b57\u52a8\u6001\u3002\u5c06\u6b646\u4f4d\u6570\u5b57\u5199\u5165\u7f51\u9875\u4e2d\u7684\u6587\u672c\u6846\uff0c\u7136\u540e\u70b9 \u201cEnable\u201d\u3002\u8fd9\u6837 2FA \u5c31\u8bbe\u7f6e\u6210\u529f\u4e86\u3002 3)\u3001\u9000\u51fa\u5e76\u91cd\u65b0\u767b\u9646 github\uff0c\u8f93\u5165\u7528\u6237\u540d\u3001\u5bc6\u7801\u540e\u4f1a\u591a\u4e00\u6b65\u52a8\u6001\u5bc6\u7801\u7684\u586b\u5199\uff0c\u8be5\u52a8\u6001\u5bc6\u7801\u5c31\u662f google \u8eab\u4efd\u9a8c\u8bc1\u5668\u4e0a\u9762\u7684\u52a8\u6001\u5bc6\u7801 4)\u3001\u5927\u6982\u9700\u8981\u534a\u4e2a\u5c0f\u65f6,\u4f1a\u6709\u90ae\u4ef6\u901a\u77e5\u4f60\u5df2\u7ecf\u52a0\u5165\u4e86 xx project-committers \u5f00\u53d1\u8005\u7ec4\u3002\u4f60\u4e5f\u53ef\u4ee5\u8fdb\u5165 apache teams \u9875\u9762\u67e5\u770b\u3002 5)\u30012FA \u63d0\u4ea4\u540e\uff0c\u4f60\u5df2\u7ecf clone \u7684\u9879\u76ee\u4f1a\u6709\u6743\u9650\u6821\u9a8c\u95ee\u9898\uff0c\u89e3\u51b3\u65b9\u6cd5\u4e3a\u4e0b\u9762\u4e8c\u9009\u4e00\uff1a a. \u7533\u8bf7 Access Token\uff1a \u5728 github \u4e0a\u751f\u6210 access token \u540e\uff0c\u6307\u4ee4\u884c\u9700\u8981\u5bc6\u7801\u7684\u5730\u65b9\u5c31\u7c98\u8d34token\u3002 \u53c2\u8003\u5b98\u7f51 \u5e2e\u52a9\u94fe\u63a5\u4e00 \u548c \u5e2e\u52a9\u94fe\u63a5\u4e8c b. \u6539\u7528 ssh\uff1a \u5728\u547d\u4ee4\u884c\u6267\u884c ssh-keygen \u547d\u4ee4\uff0c \u7136\u540e\u628apub\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u7c98\u8d34\u5230 github \u4e0a \u6ce8\u610f\uff1a\u4e00\u5b9a\u8981\u4fdd\u8bc1 github \u7684 2FA \u4e3a \"enable\" \u72b6\u6001\u3002\u5f53\u4f60\u5c06 2FA \u8bbe\u7f6e\u4e3a \"off\" \u65f6\u5019\uff0c\u5c06\u4f1a\u88ab\u5bf9\u5e94\u7684 apache committer \u5199\u6743\u9650\u7ec4\u9664\u540d\uff0c\u76f4\u5230\u4f60\u518d\u6b21\u8bbe\u7f6e\u6210\u529f\u4e3a\u6b62\u3002 \u4e94\u3001\u5176\u4ed6 The Apache Way \u8be6\u60c5\u8bf7\u53c2\u8003 wiki \u793e\u533a\u91cd\u4e8e\u4ee3\u7801\uff0c\u5982\u679c\u67d0\u95ee\u9898\u6216\u8005\u65b9\u6848\u6ca1\u6709\u5728\u793e\u533a(\u90ae\u4ef6\u5217\u8868)\u8ba8\u8bba\u8fc7\uff0c\u5c31\u5f53\u6ca1\u6709\u53d1\u751f\u8fc7 \u6dfb\u52a0\u4f60\u7684\u540d\u5b57 \u8bf7\u8bbf\u95ee\u5b75\u5316\u5668 \u4e3b\u9875 \u5c06\u4f60\u7684\u540d\u5b57\u6dfb\u52a0\u5230\u4e0a\u9762. \u5177\u4f53\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e2a \u6587\u6863 . \u8bf7\u8bbf\u95eeDubbo \u5b98\u65b9\u7f51\u7ad9 \u5c06\u4f60\u7684\u540d\u5b57\u6dfb\u52a0\u5230\u4e0a\u9762. \u5c0f\u798f\u5229 Jetbrains \u7ed9 apache \u63d0\u4ea4\u8005\u4e00\u4e2a\u5c0f\u798f\u5229\uff0c\u5c31\u662f\u53ef\u4ee5\u514d\u8d39\u4f7f\u7528 idea \u7684\u5168\u4ea7\u54c1\u7cfb\u5217\u3002\u5177\u4f53\u6ce8\u518c\u5730\u5740\u4e3a\uff1ahttps://www.jetbrains.com/shop/eform/apache?product=ALL \u76f8\u5173 wiki https://www.apache.org/dev/new-committers-guide.html","title":"Apache \u63d0\u4ea4\u8005\u6ce8\u518c\u6d41\u7a0b"},{"location":"developers/committer-guide/new-committer-guide_dev/#apache","text":"","title":"Apache \u63d0\u4ea4\u8005\u6ce8\u518c\u6d41\u7a0b"},{"location":"developers/committer-guide/new-committer-guide_dev/#apache_1","text":"","title":"\u4e00\u3001Apache \u63d0\u4ea4\u8005\u7684\u4ea7\u751f"},{"location":"developers/committer-guide/new-committer-guide_dev/#_1","text":"\u9879\u76ee\u5b75\u5316\u9636\u6bb5\uff0c\u5728\u5b75\u5316\u9879\u76ee\u63d0\u6848\u4e2d\uff0c\u4f1a\u6709\u521d\u59cb\u5316\u63d0\u4ea4\u8005\u5217\u8868\u8fd9\u4e00\u9009\u9879\u3002\u786e\u8ba4\u4f60\u662f\u521d\u59cb\u5316\u63d0\u4ea4\u8005\u7684\u4e00\u5458\u3002\u9879\u76ee\u5728 apache \u5b75\u5316\u5668\u793e\u533a\u6295\u7968\u901a\u8fc7\u540e\uff0c\u63d0\u4ea4\u8005\u53ef\u4ee5\u5f00\u59cb\u51c6\u5907\u6ce8\u518c\u8d26\u6237\u4e86\u3002\u53ef\u4ee5\u53c2\u770b \u5b75\u5316\u5668 wiki","title":"\u9879\u76ee\u5b75\u5316\u521d\u59cb\u5316\u63d0\u4ea4\u8005"},{"location":"developers/committer-guide/new-committer-guide_dev/#_2","text":"\u5728\u540e\u671f\u7684\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u6d3b\u8dc3\u7684\u8d21\u732e\u8005\u53ef\u4ee5\u88ab\u9009\u4e3e\u4e3a\u63d0\u4ea4\u8005\u3002\u89c1 \u5982\u4f55\u6210\u4e3a committer","title":"\u6d3b\u8dc3\u7684\u8d21\u732e\u8005\u88ab\u9009\u4e3e\u4e3a\u63d0\u4ea4\u8005"},{"location":"developers/committer-guide/new-committer-guide_dev/#icla","text":"","title":"\u4e8c\u3001\u4e2a\u4eba\u5f00\u53d1\u8005\u63d0\u4ea4 ICLA"},{"location":"developers/committer-guide/new-committer-guide_dev/#1-apache-id","text":"\u5728 apache \u63d0\u4ea4\u8005\u5217\u8868\u9875 \u67e5\u770b\u5df2\u7ecf\u6ce8\u518c\u8fc7\u7684 apache id\uff0c","title":"1\u3001\u9009\u62e9 apache id"},{"location":"developers/committer-guide/new-committer-guide_dev/#2icla","text":"\u4e0b\u8f7d ICLA \u6a21\u677f \uff0c\u67e5\u627e\u53ef\u7528\u7684 id\u3002\u5c06 icla.pdf \u4e2a\u4eba\u4fe1\u606f\u586b\u5199\u6b63\u786e\u540e\u6253\u5370,\u7b7e\u540d\u3001\u626b\u63cf\u3001\u5e76\u5f53\u505a\u9644\u4ef6\u53d1\u9001\u90ae\u4ef6\u7ed9\u79d8\u4e66 secretary@apache.org\uff0c\u79d8\u4e66\u4f1a\u5e2e\u5fd9\u521b\u5efa apache \u7528\u6237 id\u3002\u540c\u65f6\u4f1a\u521b\u5efa\u4e00\u4e2a your_id@apache.org \u7684\u90ae\u7bb1\uff0c\u53ef\u4ee5\u5728 apache \u63d0\u4ea4\u8005\u5217\u8868\u9875 \u67e5\u770b\u67e5\u627e\u7528\u6237\u662f\u5426\u5df2\u7ecf\u521b\u5efa\u3002","title":"2\u3001\u4e2a\u4eba\u63d0\u4ea4\u8005\u6388\u6743\u534f\u8bae\uff08ICLA\uff09\uff1a"},{"location":"developers/committer-guide/new-committer-guide_dev/#3id","text":"\u5bfc\u5e08\u5c06\u5e2e\u52a9\u63d0\u4ea4 apache \u8d26\u6237\u521b\u5efa\u8bf7\u6c42\u7ed9 root \u90ae\u4ef6\u7ec4\uff0c\u4f1a\u6709\u4eba\u5e2e\u52a9\u5efa\u7acb id\u3002\u4e00\u822c\u9700\u89812\u5929\u65f6\u95f4\u8d26\u6237\u4f1a\u5efa\u7acb\uff0c\u8bf7\u7b49\u5f85\u5e76\u5728 apache \u63d0\u4ea4\u8005\u5217\u8868\u9875 \u67e5\u770b\u67e5\u627e\u7528\u6237\u662f\u5426\u5df2\u7ecf\u521b\u5efa\u3002","title":"3\u3001\u5bfc\u5e08\u5e2e\u52a9\u63d0\u4ea4\u7528\u6237id\u521b\u5efa\u8bf7\u6c42"},{"location":"developers/committer-guide/new-committer-guide_dev/#apache_2","text":"1\u3001\u767b\u9646 Apache \u8d26\u6237\u5de5\u5177 \uff0c\u5728\u767b\u9646\u9875\u9762\u70b9\u51fb\"\u5fd8\u8bb0\u5bc6\u7801\"\u8bbe\u7f6e\u59cb\u5316\u5bc6\u7801\uff0c\u4f1a\u6709\u4e00\u5c01\u5bc6\u7801\u91cd\u7f6e\u90ae\u4ef6\u53d1\u9001\u5230 forward \u90ae\u7bb1(\u5728\u5b75\u5316\u9879\u76ee\u63d0\u6848\u4e2d\u63d0\u4ea4\u7684\u5f00\u53d1\u8005\u90ae\u4ef6) 2\u3001\u5173\u4e8e apache \u90ae\u7bb1\uff1aapache.org \u90ae\u7bb1\u5e76\u6ca1\u6709\u81ea\u5df1\u7684\u90ae\u4ef6\u5185\u5bb9\u5b58\u50a8\u670d\u52a1\u5668\u3002\u5b83\u9700\u8981\u501f\u7528\u5176\u4ed6\u90ae\u4ef6\u63d0\u4f9b\u5546\u7684\u90ae\u4ef6\u5185\u5bb9\u5b58\u50a8\u3001\u5206\u53d1\u529f\u80fd\u3002\u5728\u5f88\u591a\u6295\u7968\u73af\u8282\u662f\u5efa\u8bae\u4f7f\u7528 apache \u90ae\u7bb1\u7684\u3002 \u8fd9\u91cc\u5c31\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u600e\u4e48\u5728\u5176\u5b83\u90ae\u7bb1\u91cc\u9762\u914d\u7f6e apache.org \u90ae\u7bb1\u8f6c\u53d1\u529f\u80fd\uff1a 1\uff09\u6536\u4ef6\u7bb1\uff1a\u6536\u53d6\u53d1\u9001\u5230 apache.org \u7684\u90ae\u4ef6\u3002\u8fd9\u4e2a\u5728\u7b2c\u4e00\u6b65\u914d\u7f6e\u597d Apache \u8d26\u6237\u5de5\u5177\u7684 forward \u90ae\u7bb1\u5c31\u53ef\u4ee5\u7528 forward \u90ae\u7bb1\u6536\u53d6\u90ae\u4ef6\u4e86 2\uff09\u53d1\u4ef6\u7bb1\uff1a\u5c06\u53d1\u51fa\u7684\u90ae\u4ef6\u663e\u793a\u53d1\u4ef6\u90ae\u7bb1\u4e3a apache.org \u90ae\u7bb1\u3002\u8bf7\u53c2\u8003\uff1a \u8bbe\u7f6e apache \u90ae\u7bb1\u6307\u5357 \u548c gmail \u90ae\u7bb1\u8bbe\u7f6e\u65b9\u5f0f \u3002 \u5176\u4ed6\u90ae\u7bb1\u670d\u52a1\u7684\u8bbe\u7f6e\u65b9\u5f0f\u4e0d\u65b9\u4fbf\u627e\u5230\uff0cgmail \u7684\u6700\u65b9\u4fbf\uff0c\u5efa\u8bae\u6362\u6210 gmail \u90ae\u7bb1(\u4e0d\u662f\u5e7f\u544a)\u3002 3\u3001\u4fee\u6539\u7f16\u8f91\u9875\u9762\u7684 homepage url\uff0c apache \u63d0\u4ea4\u8005\u5217\u8868\u9875 \u4e2d\u4f60\u7684\u8d26\u6237\u80fd\u52a0\u4e3b\u9875\u94fe\u63a5\u3002 4\u3001\u4fee\u6539\u7f16\u8f91\u9875\u9762\u7684 github \u8d26\u6237(username)\uff0c\u63d0\u4ea4\u786e\u8ba4\u540e\u4e24\u4e2a\u5c0f\u65f6\u5185\u4f1a\u6709\u90ae\u4ef6\u9080\u8bf7\u4f60\u52a0\u5165 github.com/apache-committers \u7ec4\u3002\u8fd9\u671f\u95f4\u53ef\u4ee5\u9605\u8bfb ASF \u5de5\u4f5c\u65b9\u5f0f \u4ee5\u5bf9 ASF \u5f00\u53d1\u505a\u4e00\u4e9b\u57fa\u672c\u4e86\u89e3\u3002","title":"\u4e09\u3001\u52a0\u5165apache\u5f00\u53d1\u8005\u7ec4"},{"location":"developers/committer-guide/new-committer-guide_dev/#_3","text":"GitBox \u8d26\u6237\u94fe\u63a5\u5de5\u5177 \u7684\u64cd\u4f5c","title":"\u56db\u3001\u63d0\u4ea4\u8005\u83b7\u5f97\u5bf9\u9879\u76ee\u7684\u5199\u6743\u9650"},{"location":"developers/committer-guide/new-committer-guide_dev/#1apache","text":"\u6309\u7167\u63d0\u793a\u6388\u6743\u5bf9 Apache \u8d26\u6237\u7684 OAuth \u534f\u8bae\u767b\u5165","title":"1\u3001Apache\u8d26\u6237\u6388\u6743"},{"location":"developers/committer-guide/new-committer-guide_dev/#2github","text":"\u6309\u7167\u63d0\u793a\u6388\u6743\u5bf9 github \u8d26\u6237\u7684 OAuth \u534f\u8bae\u767b\u5165","title":"2\u3001Github\u8d26\u6237\u6388\u6743"},{"location":"developers/committer-guide/new-committer-guide_dev/#3-githubcom-github-2fa","text":"\u6309\u7167 \u6388\u6743 GitHub 2FA wiki \u64cd\u4f5c\u5982\u4e0b\uff1a * 1)\u3001\u5728\u624b\u673a\u5b89\u88c5 \u201cgoogle \u8eab\u4efd\u9a8c\u8bc1\u5668\u201d app * 2)\u3001\u6309\u7167 \u6388\u6743 GitHub 2FA wiki \u4e00\u6b65\u4e00\u6b65\u64cd\u4f5c\u3002 \u5728 \u4e24\u56e0\u7d20\u6388\u6743\u9a8c\u8bc1 \u754c\u9762\uff0c\u4e0d\u5efa\u8bae\u9009\u62e9\u7528\u624b\u673a\u626b\u63cf\u4e8c\u7ef4\u7801\uff0c\u56e0\u4e3a\u6709\u4e9b\u624b\u673a\u4f1a\u626b\u63cf\u4e0d\u51fa\u6765\u3002 \u8bf7\u6253\u5f00\u624b\u673a \u201cgoogle \u8eab\u4efd\u9a8c\u8bc1\u5668\u201d app\uff0c\u70b9\u201c+\u201d\u9009\u62e9\u201c\u8f93\u5165\u63d0\u4f9b\u7684\u79d8\u94a5\u201d\uff1a \u5728\u201c\u8d26\u6237\u540d\u201d input \u6846\u5199\u5165 github \u8d26\u6237\u3002\u5728\u201c\u60a8\u7684\u79d8\u94a5\u201d input \u6846\u5199\u5165:\u6253\u5f00\u7684\u7f51\u9875\u4e2d \"enter this text code\" \u94fe\u63a5\u91cc\u9762\u7684\u6587\u672c\u3002\u5728 app \u4e2d\u70b9\u51fb\"\u6dfb\u52a0\" \u540e\uff0c\u5c06\u4e3a\u6b64\u8d26\u6237\u751f\u62106\u4f4d\u6570\u5b57\u52a8\u6001\u3002\u5c06\u6b646\u4f4d\u6570\u5b57\u5199\u5165\u7f51\u9875\u4e2d\u7684\u6587\u672c\u6846\uff0c\u7136\u540e\u70b9 \u201cEnable\u201d\u3002\u8fd9\u6837 2FA \u5c31\u8bbe\u7f6e\u6210\u529f\u4e86\u3002 3)\u3001\u9000\u51fa\u5e76\u91cd\u65b0\u767b\u9646 github\uff0c\u8f93\u5165\u7528\u6237\u540d\u3001\u5bc6\u7801\u540e\u4f1a\u591a\u4e00\u6b65\u52a8\u6001\u5bc6\u7801\u7684\u586b\u5199\uff0c\u8be5\u52a8\u6001\u5bc6\u7801\u5c31\u662f google \u8eab\u4efd\u9a8c\u8bc1\u5668\u4e0a\u9762\u7684\u52a8\u6001\u5bc6\u7801 4)\u3001\u5927\u6982\u9700\u8981\u534a\u4e2a\u5c0f\u65f6,\u4f1a\u6709\u90ae\u4ef6\u901a\u77e5\u4f60\u5df2\u7ecf\u52a0\u5165\u4e86 xx project-committers \u5f00\u53d1\u8005\u7ec4\u3002\u4f60\u4e5f\u53ef\u4ee5\u8fdb\u5165 apache teams \u9875\u9762\u67e5\u770b\u3002 5)\u30012FA \u63d0\u4ea4\u540e\uff0c\u4f60\u5df2\u7ecf clone \u7684\u9879\u76ee\u4f1a\u6709\u6743\u9650\u6821\u9a8c\u95ee\u9898\uff0c\u89e3\u51b3\u65b9\u6cd5\u4e3a\u4e0b\u9762\u4e8c\u9009\u4e00\uff1a a. \u7533\u8bf7 Access Token\uff1a \u5728 github \u4e0a\u751f\u6210 access token \u540e\uff0c\u6307\u4ee4\u884c\u9700\u8981\u5bc6\u7801\u7684\u5730\u65b9\u5c31\u7c98\u8d34token\u3002 \u53c2\u8003\u5b98\u7f51 \u5e2e\u52a9\u94fe\u63a5\u4e00 \u548c \u5e2e\u52a9\u94fe\u63a5\u4e8c b. \u6539\u7528 ssh\uff1a \u5728\u547d\u4ee4\u884c\u6267\u884c ssh-keygen \u547d\u4ee4\uff0c \u7136\u540e\u628apub\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u7c98\u8d34\u5230 github \u4e0a \u6ce8\u610f\uff1a\u4e00\u5b9a\u8981\u4fdd\u8bc1 github \u7684 2FA \u4e3a \"enable\" \u72b6\u6001\u3002\u5f53\u4f60\u5c06 2FA \u8bbe\u7f6e\u4e3a \"off\" \u65f6\u5019\uff0c\u5c06\u4f1a\u88ab\u5bf9\u5e94\u7684 apache committer \u5199\u6743\u9650\u7ec4\u9664\u540d\uff0c\u76f4\u5230\u4f60\u518d\u6b21\u8bbe\u7f6e\u6210\u529f\u4e3a\u6b62\u3002","title":"3\u3001\u5728 github.com \u8bbe\u7f6e github \u8d26\u6237\u4e24\u56e0\u7d20\u6388\u6743\uff082FA\uff09"},{"location":"developers/committer-guide/new-committer-guide_dev/#_4","text":"","title":"\u4e94\u3001\u5176\u4ed6"},{"location":"developers/committer-guide/new-committer-guide_dev/#the-apache-way","text":"\u8be6\u60c5\u8bf7\u53c2\u8003 wiki \u793e\u533a\u91cd\u4e8e\u4ee3\u7801\uff0c\u5982\u679c\u67d0\u95ee\u9898\u6216\u8005\u65b9\u6848\u6ca1\u6709\u5728\u793e\u533a(\u90ae\u4ef6\u5217\u8868)\u8ba8\u8bba\u8fc7\uff0c\u5c31\u5f53\u6ca1\u6709\u53d1\u751f\u8fc7","title":"The Apache Way"},{"location":"developers/committer-guide/new-committer-guide_dev/#_5","text":"\u8bf7\u8bbf\u95ee\u5b75\u5316\u5668 \u4e3b\u9875 \u5c06\u4f60\u7684\u540d\u5b57\u6dfb\u52a0\u5230\u4e0a\u9762. \u5177\u4f53\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e2a \u6587\u6863 . \u8bf7\u8bbf\u95eeDubbo \u5b98\u65b9\u7f51\u7ad9 \u5c06\u4f60\u7684\u540d\u5b57\u6dfb\u52a0\u5230\u4e0a\u9762.","title":"\u6dfb\u52a0\u4f60\u7684\u540d\u5b57"},{"location":"developers/committer-guide/new-committer-guide_dev/#_6","text":"Jetbrains \u7ed9 apache \u63d0\u4ea4\u8005\u4e00\u4e2a\u5c0f\u798f\u5229\uff0c\u5c31\u662f\u53ef\u4ee5\u514d\u8d39\u4f7f\u7528 idea \u7684\u5168\u4ea7\u54c1\u7cfb\u5217\u3002\u5177\u4f53\u6ce8\u518c\u5730\u5740\u4e3a\uff1ahttps://www.jetbrains.com/shop/eform/apache?product=ALL","title":"\u5c0f\u798f\u5229"},{"location":"developers/committer-guide/new-committer-guide_dev/#wiki","text":"https://www.apache.org/dev/new-committers-guide.html","title":"\u76f8\u5173 wiki"},{"location":"developers/committer-guide/release-guide_dev/","text":"\u5982\u4f55\u51c6\u5907Apache Release \u7406\u89e3Apache\u53d1\u5e03\u7684\u5185\u5bb9\u548c\u6d41\u7a0b \u603b\u7684\u6765\u8bf4\uff0cSource Release\u662fApache\u5173\u6ce8\u7684\u91cd\u70b9\uff0c\u4e5f\u662f\u53d1\u5e03\u7684\u5fc5\u987b\u5185\u5bb9\uff1b\u800cBinary Release\u662f\u53ef\u9009\u9879\uff0cDubbo\u53ef\u4ee5\u9009\u62e9\u662f\u5426\u53d1\u5e03\u4e8c\u8fdb\u5236\u5305\u5230Apache\u4ed3\u5e93\u6216\u8005\u53d1\u5e03\u5230Maven\u4e2d\u592e\u4ed3\u5e93\u3002 \u8bf7\u53c2\u8003\u4ee5\u4e0b\u94fe\u63a5\uff0c\u627e\u5230\u66f4\u591a\u5173\u4e8eASF\u7684\u53d1\u5e03\u6307\u5357: Apache Release Guide Apache Release Policy Maven Release Info \u672c\u5730\u6784\u5efa\u73af\u5883\u51c6\u5907 \u4e3b\u8981\u5305\u62ec\u7b7e\u540d\u5de5\u5177\u3001Maven\u4ed3\u5e93\u8ba4\u8bc1\u76f8\u5173\u51c6\u5907 \u5b89\u88c5GPG \u8be6\u7ec6\u6587\u6863\u8bf7\u53c2\u89c1 \u8fd9\u91cc , Mac OS\u4e0b\u914d\u7f6e\u5982\u4e0b $ brew install gpg $ gpg --version #\u68c0\u67e5\u7248\u672c\uff0c\u5e94\u8be5\u4e3a2.x \u7528gpg\u751f\u6210key \u6839\u636e\u63d0\u793a\uff0c\u751f\u6210key ```shell $ gpg --full-gen-key gpg (GnuPG) 2.0.12; Copyright (C) 2009 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Please select what kind of key you want: (1) RSA and RSA (default) (2) DSA and Elgamal (3) DSA (sign only) (4) RSA (sign only) Your selection? 1 RSA keys may be between 1024 and 4096 bits long. What keysize do you want? (2048) 4096 Requested keysize is 4096 bits Please specify how long the key should be valid. 0 = key does not expire = key expires in n days w = key expires in n weeks m = key expires in n months y = key expires in n years Key is valid for? (0) Key does not expire at all Is this correct? (y/N) y GnuPG needs to construct a user ID to identify your key. Real name: Robert Burrell Donkin Email address: rdonkin@apache.org Comment: CODE SIGNING KEY You selected this USER-ID: \"Robert Burrell Donkin (CODE SIGNING KEY) \" Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O You need a Passphrase to protect your secret key. # \u586b\u5165\u5bc6\u7801\uff0c\u4ee5\u540e\u6253\u5305\u8fc7\u7a0b\u4e2d\u4f1a\u7ecf\u5e38\u7528\u5230 ``` \u67e5\u770bkey id $ gpg --list-keys pub rsa4096/28681CB1 2018-04-26 # 28681CB1\u5c31\u662fkey id uid [ultimate] liujun (apache-dubbo) liujun@apache.org sub rsa4096/D3D6984B 2018-04-26 # \u901a\u8fc7key id\u53d1\u9001public key\u5230keyserver $ gpg --keyserver pgpkeys.mit.edu --send-key 28681CB1 # \u5176\u4e2d\uff0cpgpkeys.mit.edu\u4e3a\u968f\u610f\u6311\u9009\u7684keyserver\uff0ckeyserver\u5217\u8868\u4e3a\uff1ahttps://sks-keyservers.net/status/\uff0c\u4e3a\u76f8\u4e92\u4e4b\u95f4\u662f\u81ea\u52a8\u540c\u6b65\u7684\uff0c\u9009\u4efb\u610f\u4e00\u4e2a\u90fd\u53ef\u4ee5\u3002 \u5982\u679c\u6709\u591a\u4e2apublic key\uff0c\u8bbe\u7f6e\u9ed8\u8ba4key\u3002\u4fee\u6539 ~/.gnupg/gpg.conf # If you have more than 1 secret key in your keyring, you may want to # uncomment the following option and set your preferred keyid. default-key 28681CB1 \u5982\u679c\u6709\u591a\u4e2apublic key, \u4e5f\u53ef\u4ee5\u5220\u9664\u65e0\u7528\u7684key\uff1a ### \u5148\u5220\u9664\u79c1\u94a5\uff0c\u518d\u5220\u9664\u516c\u94a5 $ gpg --yes --delete-secret-keys shenglicao2@gmail.com ###\u8001\u7684\u79c1\u94a5\uff0c\u6307\u660e\u90ae\u7bb1\u5373\u53ef $ gpg --delete-keys 1808C6444C781C0AEA0AAD4C4D6A8007D20DB8A4 PS: \u6700\u65b0\u7248\u672c\u7ecf\u8fc7\u5b9e\u6d4b\uff0c\u672c\u5730\u6ca1\u6709gpg.conf\u8fd9\u4e2a\u6587\u4ef6\uff0c\u56e0\u6b64\u5982\u679c\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u9047\u5230\u7b7e\u540d\u5931\u8d25\uff0c\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e2a\u6587\u7ae0\uff1ahttps://blog.csdn.net/wenbo20182/article/details/72850810 \u6216 https://d.sb/2016/11/gpg-inappropriate-ioctl-for-device-errors \u7531\u4e8e\u516c\u94a5\u670d\u52a1\u5668\u6ca1\u6709\u68c0\u67e5\u673a\u5236\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u7528\u4f60\u7684\u540d\u4e49\u4e0a\u4f20\u516c\u94a5\uff0c\u6240\u4ee5\u6ca1\u6709\u529e\u6cd5\u4fdd\u8bc1\u670d\u52a1\u5668\u4e0a\u7684\u516c\u94a5\u7684\u53ef\u9760\u6027\u3002 \u901a\u5e38\uff0c\u4f60\u53ef\u4ee5\u5728\u7f51\u7ad9\u4e0a\u516c\u5e03\u4e00\u4e2a\u516c\u94a5\u6307\u7eb9\uff0c\u8ba9\u5176\u4ed6\u4eba\u6838\u5bf9\u4e0b\u8f7d\u5230\u7684\u516c\u94a5\u662f\u5426\u4e3a\u771f\u3002 # fingerprint\u53c2\u6570\u751f\u6210\u516c\u94a5\u6307\u7eb9\uff1a $ gpg --fingerprint liujun pub rsa4096 2019-10-17 [SC] 1376 A2FF 67E4 C477 5739 09BD 7DB6 8550 D366 E4C0 uid [ultimate] liujun (CODE SIGNING KEY) liujun@apache.org sub rsa4096 2019-10-17 [E] \u767b\u5f55 https://id.apache.org, \u5c06\u4e0a\u9762\u7684 fingerprint \uff08\u5373 1376 A2FF 67E4 C477 5739 09BD 7DB6 8550 D366 E4C0\uff09 \u7c98\u8d34\u5230\u81ea\u5df1\u7684\u7528\u6237\u4fe1\u606f\u4e2d OpenPGP Public Key Primary Fingerprint \u8bbe\u7f6eApache\u4e2d\u592e\u4ed3\u5e93 Dubbo\u9879\u76ee\u7684\u7236pom\u4e3aApache pom(2.7.0\u4ee5\u4e0a\u7248\u672c\u9700\u8981\uff0c2.6.x\u53d1\u5e03\u7248\u672c\u4e0d\u9700\u8981\u6b64\u64cd\u4f5c) parent groupId org.apache /groupId artifactId apache /artifactId version 19 /version /parent \u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\u5230.m2/settings.xml \u6240\u6709\u5bc6\u7801\u8bf7\u4f7f\u7528 maven-encryption-plugin \u52a0\u5bc6\u540e\u518d\u586b\u5165 settings ... servers !-- To publish a snapshot of some part of Maven -- server id apache.snapshots.https /id username !-- YOUR APACHE LDAP USERNAME -- /username password !-- YOUR APACHE LDAP PASSWORD (encrypted) -- /password /server !-- To stage a release of some part of Maven -- server id apache.releases.https /id username !-- YOUR APACHE LDAP USERNAME -- /username password !-- YOUR APACHE LDAP PASSWORD (encrypted) -- /password /server ... !-- gpg passphrase used when generate key -- server id gpg.passphrase /id passphrase !-- yourKeyPassword -- /passphrase /server /servers /settings \u6253\u5305 \u4e0a\u4f20 \u51c6\u5907\u5206\u652f \u4ece\u4e3b\u5e72\u5206\u652f\u62c9\u53d6\u65b0\u5206\u652f\u4f5c\u4e3a\u53d1\u5e03\u5206\u652f\uff0c\u5982\u73b0\u5728\u8981\u53d1\u5e03$ {release_version} \u7248\u672c\uff0c\u5219\u4ece2.6.x\u62c9\u51fa\u65b0\u5206\u652f ${release_version}-release \uff0c\u6b64\u540e ${release_version} Release Candidates\u6d89\u53ca\u7684\u4fee\u6539\u53ca\u6253\u6807\u7b7e\u7b49\u90fd\u5728 ${release_version}-release \u5206\u652f\u8fdb\u884c\uff0c\u6700\u7ec8\u53d1\u5e03\u5b8c\u6210\u540e\u5408\u5165\u4e3b\u5e72\u5206\u652f\u3002 \u7f16\u8bd1\u6253\u5305 \u9996\u5148\uff0c\u5728 ${release_version}-release \u5206\u652f\u9a8c\u8bc1maven\u7ec4\u4ef6\u6253\u5305\u3001source\u6e90\u7801\u6253\u5305\u3001\u7b7e\u540d\u7b49\u662f\u5426\u90fd\u6b63\u5e38\u5de5\u4f5c\u3002 2.6.x\u8bb0\u5f97\u8981\u4f7f\u75281.6\u8fdb\u884c\u7f16\u8bd1\u6253\u5305 $ mvn clean install -Prelease $ mvn deploy \u4e0a\u8ff0\u547d\u4ee4\u5c06snapshot\u5305\u63a8\u9001\u5230maven\u4e2d\u592e\u4ed3\u5e93 ~~\u7528maven-release-plugin\u53d1\u5e03~~ ( \u5e9f\u5f03 \uff0c\u53c2\u8003\u540e\u4e00\u6b65) ~~\u5148\u7528dryRun\u9a8c\u8bc1\u662f\u5426ok~~ $ mvn release:prepare -Prelease -Darguments= -DskipTests -DautoVersionSubmodules=true -Dusername=YOUR GITHUB ID-DdryRun=true ~~\u9a8c\u8bc1\u901a\u8fc7\u540e\uff0c\u6267\u884crelease:prepare~~ $ mvn release:clean $ mvn release:prepare -Prelease -Darguments= -DskipTests -DautoVersionSubmodules=true -Dusername=YOUR GITHUB ID -DpushChanges=false \u6267\u884crelease\u63d2\u4ef6\u65f6\uff0c\u5982\u679c\u6307\u5b9a\u4e86 -DpushChanges=true , \u63d2\u4ef6\u4f1a\u81ea\u52a8\u63d0\u4ea4\u5230\u8fdc\u7aef\u7684GitHub\u4ed3\u5e93\u4e2d\uff0c\u6b64\u65f6\u5c31\u9700\u8981\u8f93\u5165GitHub\u7684\u5bc6\u7801\uff0c\u6ce8\u610f\u4e0d\u662f\u8f93\u5165web\u9875\u9762\u7684\u767b\u5f55\u5bc6\u7801\uff0c\u800c\u662f\u4e00\u4e2a Personal access tokens \uff0c\u83b7\u53d6\u65b9\u5f0f\u8be6\u89c1 \u8fd9\u91cc \u8fd9\u91cc\u6709\u4e00\u70b9\u8981\u6ce8\u610f\u7684\u662ftag\uff0c \u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u9009\u62e9\u53d1\u5e03\u7684artifactId, \u4e0b\u4e00\u4e2a\u7248\u672cartifactId\u4ee5\u53ca\u53d1\u5e03\u7248\u672c\u7684tag, tag\u9ed8\u8ba4\u7684\u662fdubbo-parent-xxxx\uff0c\u9700\u8981\u6539\u6210dubbo-xxxx \u6267\u884c\u5b8c\u4e0a\u8ff0\u6b65\u9aa4\u540e\uff0c\u4f60\u4f1a\u53d1\u73b0\uff1a 1. source-release.zip \u548c bin-release.zip \u5305\u5df2\u7ecf\u751f\u6210\u5728 dubbo-distribution \u76ee\u5f55\u4e0b\uff0c\u8bf7\u89e3\u538b\u5e76\u68c0\u67e5\u6587\u4ef6\u662f\u5426\u5b8c\u6574 2. \u672c\u5730\u5df2\u7ecf\u6253\u51fa\u76f8\u5e94\u7684tag\uff0c\u540c\u65f6\u65b0\u589e\u4e00\u4e2acommit\uff0c\u540d\u53eb [maven-release-plugin] prepare release dubbo-x.x.x 3. \u5206\u652f\u7248\u672c\u81ea\u52a8\u5347\u7ea7\u4e3a ${release_version+1}-SNAPSHOT \uff0c\u540c\u65f6\u65b0\u589e\u4e00\u4e2acommit\uff0c\u540d\u53eb [[maven-release-plugin] prepare for next development iteration \u5982\u679c\u6307\u5b9a\u4e86 -DpushChanges=true , \u5219\u672c\u5730\u63d0\u4ea4\u4f1a\u81ea\u52a8\u63a8\u9001\u5230\u8fdc\u7aef\u7684GitHub\u4ed3\u5e93\u3002\u6839\u636e\u7ecf\u9a8c\uff0c\u5efa\u8bae\u4e0d\u8981\u6307\u5b9a\u4e3atrue\uff0c\u8bf7\u8bbe\u7f6e\u4e3afalse\uff0c\u5f85\u672c\u5730\u68c0\u67e5\u901a\u8fc7\u4e4b\u540e\u518d\u624b\u52a8\u63d0\u4ea4 ~~\u6267\u884crelease:perform\uff0c\u505astaging\u53d1\u5e03~~ $ mvn -Prelease release:perform -Darguments= -DskipTests -DautoVersionSubmodules=true -Dusername=YOUR GITHUB ID \u6b64\u65f6\u63d2\u4ef6\u4f1a\u81ea\u52a8\u4e0b\u8f7d\u8fdc\u7aef\u7684tag\u5bf9\u5e94\u7684\u6e90\u7801\uff0c\u7f16\u8bd1\u540e\uff0c\u5c06\u6240\u6709Artifacts\u53d1\u5e03\u5230\u914d\u7f6e\u7684\u8fdc\u7a0b maven\u4ed3\u5e93 \uff0c\u5904\u4e8estaging\u72b6\u6001\u3002 \u4f7f\u7528mvn deploy\u8fdb\u884cdeploy \u8981\u6c42\uff1amaven 3.5+ \u4fee\u6539pom\u6587\u4ef6\u4e2d\u7684\u7248\u672c\u53f7\uff0c\u4ece2.7.x-SNAPSHOT\u6539\u4e3a2.7.x\uff0c \u76ee\u524d\u67093\u4e2a\u5730\u65b9\u9700\u8981\u4fee\u6539\u3002\u5efa\u8bae\u5168\u6587\u641c\u7d22\u3002 $ mvn clean install -Prelease $ mvn deploy -Prelease -DskipTests \u6240\u6709\u88abdeploy\u5230\u8fdc\u7a0b maven\u4ed3\u5e93 \u7684Artifacts\u90fd\u4f1a\u5904\u4e8estaging\u72b6\u6001 \u6ce8\u610f\u70b9 \u5728deploy\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u6709\u53ef\u80fd\u56e0\u4e3a\u7f51\u7edc\u7b49\u539f\u56e0\u88ab\u4e2d\u65ad\uff0c\u5982\u679c\u662f\u8fd9\u6837\uff0c\u53ef\u4ee5\u91cd\u65b0\u5f00\u59cb\u6267\u884c\u3002 deploy\u6267\u884c\u5230maven\u4ed3\u5e93\u7684\u65f6\u5019\uff0c\u8bf7\u786e\u8ba4\u4e0b\u5305\u7684\u603b\u91cf\u662f\u5426\u6b63\u786e\u3002\u591a\u6b21\u51fa\u73b0\u4e86\u5305\u4e22\u5931\u7684\u60c5\u51b5\uff0c\u7279\u522b\u662fdubbo-parent\u5305\u3002 \u51c6\u5907Apache\u53d1\u5e03 \u51c6\u5907svn\u672c\u673a\u73af\u5883\uff08Apache\u4f7f\u7528svn\u6258\u7ba1\u9879\u76ee\u7684\u53d1\u5e03\u5185\u5bb9\uff09 \u5c06dubbo checkout\u5230\u672c\u5730\u76ee\u5f55 shell $ svn checkout https://dist.apache.org/repos/dist/dev/dubbo # \u5047\u5b9a\u672c\u5730\u76ee\u5f55\u4e3a ~/apache/dubbo \u5f53\u524d\u53d1\u5e03\u7248\u672c\u4e3a${release_version}\uff0c\u65b0\u5efa\u76ee\u5f55 shell $ cd ~/apache/dubbo # dubbo svn\u6839\u76ee\u5f55 $ mkdir ${release_version} \u6dfb\u52a0public key\u5230 KEYS \u6587\u4ef6\u5e76\u63d0\u4ea4\u5230SVN\u4ed3\u5e93\uff08\u7b2c\u4e00\u6b21\u505a\u53d1\u5e03\u7684\u4eba\u9700\u8981\u505a\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u5177\u4f53\u64cd\u4f5c\u53c2\u8003KEYS\u6587\u4ef6\u91cc\u7684\u8bf4\u660e\uff09\u3002KEYS\u4e3b\u8981\u662f\u8ba9\u53c2\u4e0e\u6295\u7968\u7684\u4eba\u5728\u672c\u5730\u5bfc\u5165\uff0c\u7528\u6765\u6821\u9a8csign\u7684\u6b63\u786e\u6027 sh $ (gpg --list-sigs your name gpg --armor --export your name ) KEYS \u62f7\u8d1d distribution/target \u4e0b\u7684source\u76f8\u5173\u7684\u5305\u5230svn\u672c\u5730\u4ed3\u5e93 dubbo/${release_version} \u751f\u6210sha512\u7b7e\u540d \u9488\u5bf9 source-release.zip shell $ shasum -a 512 apache-dubbo-${release_version}-source-release.zip apache-dubbo-${release_version}-source-release.zip.sha512 \u9488\u5bf9 bin-release.zip \uff0c\u9700\u8981\u589e\u52a0 -b \u53c2\u6570\uff0c\u8868\u660e\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6 shell $ shasum -b -a 512 apache-dubbo-${release_version}-bin-release.zip apache-dubbo-${release_version}-bin-release.zip.sha512 \u5982\u679c\u6709binary release\u8981\u540c\u65f6\u53d1\u5e03 \u5728 distribution/target \u76ee\u5f55\u4e0b\uff0c\u62f7\u8d1d bin-release.zip \u4ee5\u53ca bin-release.zip.asc \u5230svn\u672c\u5730\u4ed3\u5e93 dubbo/${release_version} \uff0c\u53c2\u8003\u7b2c6\u6b65\uff0c\u751f\u6210sha512\u7b7e\u540d\u3002 \u63d0\u4ea4\u5230Apache svn shell $ svn status $ svn commit -m 'prepare for ${release_version} RC1' \u5173\u95edMaven\u7684staging\u4ed3\u5e93 \u6b64\u6b65\u9aa4\u4e3a\u53d1\u5e032.7.0\u53ca\u4ee5\u4e0a\u7248\u672c\u5fc5\u987b\u8981\u7684\u6b65\u9aa4\u3002\u5728\u6b64\u4e4b\u524d\u8bf7\u5148\u786e\u4fdd\u6240\u6709\u7684artifact\u90fd\u662fok\u7684\u3002\u767b\u5f55http://repository.apache.org\uff0c\u70b9\u51fb\u5de6\u4fa7\u7684 Staging repositories \uff0c\u7136\u540e\u641c\u7d22Dubbo\u5173\u952e\u5b57\uff0c\u4f1a\u51fa\u73b0\u4e00\u7cfb\u5217\u7684\u4ed3\u5e93\uff0c\u9009\u62e9\u4f60\u6700\u8fd1\u4e0a\u4f20\u7684\u4ed3\u5e93\uff0c\u7136\u540e\u70b9\u51fb\u4e0a\u65b9\u7684Close\u6309\u94ae\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4f1a\u8fdb\u884c\u4e00\u7cfb\u5217\u68c0\u67e5\uff0c\u68c0\u67e5\u901a\u8fc7\u4ee5\u540e\uff0c\u5728\u4e0b\u65b9\u7684Summary\u6807\u7b7e\u9875\u4e0a\u51fa\u73b0\u4e00\u4e2a\u8fde\u63a5\uff0c\u8bf7\u4fdd\u5b58\u597d\u8fd9\u4e2a\u94fe\u63a5\uff0c\u9700\u8981\u653e\u5728\u63a5\u4e0b\u6765\u7684\u6295\u7968\u90ae\u4ef6\u5f53\u4e2d\u3002\u94fe\u63a5\u5e94\u8be5\u662f\u7c7b\u4f3c\u8fd9\u6837\u7684: https://repository.apache.org/content/repositories/orgapachedubbo-1015 \u8bf7\u6ce8\u610f\u70b9\u51fbClose\u53ef\u80fd\u4f1a\u51fa\u73b0\u5931\u8d25\uff0c\u901a\u5e38\u662f\u7f51\u7edc\u539f\u56e0\uff0c\u53ea\u8981\u91cd\u8bd5\u51e0\u6b21\u5c31\u53ef\u4ee5\u4e86\u3002\u53ef\u4ee5\u70b9\u51fbSummary\u65c1\u8fb9\u7684Activity\u6807\u7b7e\u6765\u786e\u8ba4\u3002 \u9a8c\u8bc1Release Candidates \u8be6\u7ec6\u7684\u68c0\u67e5\u5217\u8868\u8bf7\u53c2\u8003\u5b98\u65b9\u7684 check list \u9996\u5148\uff0c\u4ece\u4e00\u4e0b\u5730\u5740\u4e0b\u8f7d\u8981\u53d1\u5e03\u7684Release Candidate\u5230\u672c\u5730\u73af\u5883\uff1a https://dist.apache.org/repos/dist/dev/dubbo/${release_version}/ \u7136\u540e\uff0c\u5f00\u59cb\u9a8c\u8bc1\u73af\u8282\uff0c\u9a8c\u8bc1\u5305\u542b\u4f46\u4e0d\u9650\u4e8e\u4ee5\u4e0b\u5185\u5bb9\u548c\u5f62\u5f0f \u68c0\u67e5\u7b7e\u540d\u548chash\u7b49\u4fe1\u606f \u68c0\u67e5sha512\u54c8\u5e0c $ shasum -c apache-dubbo-${release_version}-source-release.zip.sha512 $ shasum -c apache-dubbo-${release_version}-bin-release.zip.sha512 \u68c0\u67e5gpg\u7b7e\u540d \u5982\u679c\u662f\u7b2c\u4e00\u6b21\u68c0\u67e5\uff0c\u9700\u8981\u9996\u5148\u5bfc\u5165\u516c\u94a5\u3002 $ curl https://dist.apache.org/repos/dist/dev/dubbo/KEYS KEYS # download public keys to local directory $ gpg --import KEYS # import keys $ gpg \u2014edit-key liujun trust # type trust command ``` \u7136\u540e\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u68c0\u67e5\u7b7e\u540d ```sh gpg --verify apache-dubbo-2.6.3-source-release.zip.asc apache-dubbo-2.6.3-source-release.zip gpg --verify apache-dubbo-2.6.3-bin-release.zip.asc apache-dubbo-2.6.3-bin-release.zip ``` ### \u68c0\u67e5\u6e90\u7801\u5305\u7684\u6587\u4ef6\u5185\u5bb9 \u89e3\u538b\u7f29`apache-dubbo-${release_version}-source-release.zip`\uff0c\u8fdb\u884c\u5982\u4e0b\u68c0\u67e5: - DISCLAIMER exists - LICENSE and NOTICE exists and contents are good - All files and no binary files exist - All files has standard ASF License header - Can compile from source - All unit tests can pass ```sh mvn clean test # This will run all unit tests # you can also open rat and style plugin to check if every file meets requirements. mvn clean test -Drat.skip=false -Dcheckstyle.skip=false ``` - Release candidates match with corresponding tags, you can find tag link and hash in vote email. - check the version number in pom.xml are the same - check there are no extra files or directories in the source package, for example, no empty directories or useless log files\uff0c\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u6362\u884c\u7b26\u662f\u5426\u4e00\u81f4 `diff -r a rc_dir tag_dir` - check the top n tag commits, dive into the related files and check if the source package has the same changes ### \u68c0\u67e5\u4e09\u65b9\u4f9d\u8d56\u7684\u5408\u89c4\u6027 \u6309\u7167Apache\u57fa\u91d1\u4f1a\u5408\u89c4\u6027\u89c4\u5b9a\uff0c\u6e90\u7801\u6216\u8005\u662f\u4e8c\u8fdb\u5236\u5206\u53d1\u5305\u4e2d\u5747\u4e0d\u80fd\u5305\u542bCategory X\u7684\u4f9d\u8d56\uff0c\u5176\u4e2d\u5c31\u5e38\u89c1\u7684\u662f\u5305\u542b\u4e86GPL/LGPL\u7684\u4f9d\u8d56\uff0c\u5373\u4f7f\u662f\u4f20\u9012\u4f9d\u8d56\u4e5f\u4e0d\u884c\u3002\u56e0\u6b64\u5728\u53d1\u7248\u7684\u65f6\u5019\u9700\u8981\u901a\u8fc7\u4ee5\u4e0b\u7684\u547d\u4ee4\u8fdb\u884c\u68c0\u67e5\uff1a ```sh mvn license:add-third-party -Dlicense.useMissingFile find . -name THIRD-PARTY.txt | xargs grep -E 'GPL|General Public License' | grep -v Apache | grep -v MIT | grep -v CDDL \u5982\u679c\u4e00\u4e2a\u4f9d\u8d56\u63d0\u4f9b\u4e86\u53cc\u534f\u8bae\u6216\u591a\u91cd\u534f\u8bae\uff0c\u53ef\u4ee5\u9009\u62e9\u4e0eApache\u6700\u517c\u5bb9\u7684\u4e00\u4e2a\u534f\u8bae\u3002 \u68c0\u67e5\u4e8c\u8fdb\u5236\u5305\u7684\u6587\u4ef6\u5185\u5bb9 \u89e3\u538b\u7f29 apache-dubbo-${release_version}-bin-release.zip \uff0c\u8fdb\u884c\u5982\u4e0b\u68c0\u67e5: Check signatures are good LICENSE and NOTICE exists and contents are good \u6ce8\u610f\uff0c\u5982\u679c\u4e8c\u8fdb\u5236\u5305\u91cc\u9762\u5f15\u5165\u4e86\u7b2c\u4e09\u65b9\u4f9d\u8d56\uff0c\u5219\u9700\u8981\u66f4\u65b0LICENSE\uff0c\u52a0\u5165\u7b2c\u4e09\u65b9\u4f9d\u8d56\u7684LICENSE\uff0c\u5982\u679c\u7b2c\u4e09\u65b9\u4f9d\u8d56\u7684LICENSE\u662fApache 2.0\uff0c\u5e76\u4e14\u5bf9\u5e94\u7684\u9879\u76ee\u4e2d\u5305\u542b\u4e86NOTICE\uff0c\u8fd8\u9700\u8981\u66f4\u65b0NOTICE\u6587\u4ef6 \u8fdb\u5165\u6295\u7968 dubbo\u6bd5\u4e1a\u4e4b\u540e\uff0c\u6295\u7968\u5206\u53ea\u9700\u8981\u4e00\u6b21\uff1a Dubbo\u793e\u533a\u6295\u7968\uff0c\u53d1\u8d77\u6295\u7968\u90ae\u4ef6\u5230dev@dubbo.apache.org\u3002\u5728\u793e\u533a\u5f00\u53d1\u8005Review\uff0c\u7ecf\u8fc7\u81f3\u5c1172\u5c0f\u65f6\u5e76\u7edf\u8ba1\u52303\u4e2a\u540c\u610f\u53d1\u7248\u7684binding\u7968\u540e\uff08\u53ea\u6709PMC\u7684\u7968\u624d\u662fbinding\uff09\uff0c\u5373\u53ef\u8fdb\u5165\u4e0b\u4e00\u9636\u6bb5\u7684\u6295\u7968\u3002 Dubbo\u793e\u533a\u6295\u7968\u90ae\u4ef6\u6a21\u677f\uff1a Hello Dubbo Community, This is a call for vote to release Apache Dubbo version 2.7.2. The release candidates: https://dist.apache.org/repos/dist/dev/dubbo/2.7.2/ The staging repo: https://repository.apache.org/content/repositories/orgapachedubbo-1005 Git tag for the release: https://github.com/apache/dubbo/tree/dubbo-2.7.2 Hash for the release tag: afab04c53edab38d52275d2a198ea1aff7a4f41e Release Notes: https://github.com/apache/dubbo/releases/tag/untagged-4775c0a22c60fca55118 The artifacts have been signed with Key : 28681CB1, which can be found in the keys file: https://dist.apache.org/repos/dist/dev/dubbo/KEYS The vote will be open for at least 72 hours or until necessary number of votes are reached. Please vote accordingly: [ ] +1 approve [ ] +0 no opinion [ ] -1 disapprove with the reason Thanks, The Apache Dubbo Team \u5ba3\u5e03\u6295\u7968\u7ed3\u679c\u6a21\u677f\uff1a We\u2019ve received 3 +1 binding votes and one +1 non-binding vote: +1 binding, Ian Luo +1 binding, Huxing Zhang +1 binding, Jun Liu +1 non-binding, Jerrick I will start to release today. Best regards, The Apache Dubbo Team \u6b63\u5f0f\u53d1\u5e03 \u5c06 dev \u76ee\u5f55\u4e0b\u7684\u53d1\u5e03\u5305\u6dfb\u52a0\u5230 release \u76ee\u5f55\u4e0b\uff0cKEYS\u6709\u66f4\u65b0\u7684\uff0c\u4e5f\u9700\u8981\u540c\u6b65\u66f4\u65b0\u3002 \u5220\u9664 dev \u76ee\u5f55\u4e0b\u7684\u53d1\u5e03\u5305 \u5220\u9664 release \u76ee\u5f55\u4e0b\u4e0a\u4e00\u4e2a\u7248\u672c\u7684\u53d1\u5e03\u5305\uff0c\u8fd9\u4e9b\u5305\u4f1a\u88ab\u81ea\u52a8\u4fdd\u5b58\u5728 \u8fd9\u91cc \u53d1\u5e03GitHub\u4e0a\u7684 release notes \u4fee\u6539GitHub\u7684Readme\u6587\u4ef6\uff0c\u5c06\u7248\u672c\u53f7\u66f4\u65b0\u5230\u6700\u65b0\u53d1\u5e03\u7684\u7248\u672c \u5728\u5b98\u7f51\u4e0b\u8f7d \u9875\u9762 \u4e0a\u6dfb\u52a0\u6700\u65b0\u7248\u672c\u7684\u4e0b\u8f7d\u94fe\u63a5\u3002\u6700\u65b0\u7684\u4e0b\u8f7d\u94fe\u63a5\u5e94\u8be5\u7c7b\u4f3c \u8fd9\u6837 . \u540c\u65f6\u66f4\u65b0\u4ee5\u524d\u7248\u672c\u7684\u4e0b\u8f7d\u94fe\u63a5\uff0c\u6539\u4e3a\u7c7b\u4f3c \u8fd9\u6837 . \u5177\u4f53\u53ef\u4ee5\u53c2\u8003\u8fc7\u5f80\u7684 \u4e0b\u8f7d\u94fe\u63a5 \u5408\u5e76 ${release-version}-release \u5206\u652f\u5230\u5bf9\u5e94\u7684\u4e3b\u5e72\u5206\u652f\uff0c \u7136\u540e\u5220\u9664\u76f8\u5e94\u7684release\u5206\u652f\uff0c\u4f8b\u5982: git push origin --delete 2.7.0-release \u53d1\u90ae\u4ef6\u5230 dev@dubbo.apache.org \u5ba3\u5e03release\u90ae\u4ef6\u6a21\u677f\uff1a Hello Community, The Apache Dubbo team is pleased to announce that the 2.6.6 has just been released. Apache Dubbo\u2122 is a high-performance, java based, open source RPC framework. Dubbo offers three key functionalities, which include interface based remote call, fault tolerance load balancing, and automatic service registration discovery. Both the source release[1] and the maven binary release[2] are available now, you can also find the detailed release notes here[3]. If you have any usage questions, or have problems when upgrading or find any problems about enhancements included in this release, please don\u2019t hesitate to let us know by sending feedback to this mailing list or filing an issue on GitHub[4]. [1] http://dubbo.apache.org/en-us/blog/download.html [2] https://repo1.maven.org/maven2/org/apache/dubbo/dubbo [3] https://github.com/apache/dubbo/releases [4] https://github.com/apache/dubbo/issues \u5b8c\u6210Maven Convenient Binary\u53d1\u5e03\uff08\u53ef\u9009\uff09 repository.apache.org nexus\u4ed3\u5e93\u7684\u6743\u9650\u5df2\u7ecf\u7533\u8bf7\uff0c\u53c2\u89c1 jira \u53d1\u5e03jar\u5305\u5230maven\u4ed3\u5e93\uff0c\u9996\u5148\u8bbf\u95ee repository.apache.org , \u9009\u62e9 staging repository , \u70b9\u51fb release \u6309\u94ae\u3002\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e\uff0c\u5728 \u8fd9\u91cc \u786e\u8ba4\u5b8c\u6574\u6027\u548c\u6b63\u786e\u6027. \u53d1\u5e03\u5230Maven\u4e2d\u592e\u4ed3\u5e93\u5219\u8fd8\u9700\u8981\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\u3002\u53ef\u4ee5\u5728 \u8fd9\u91cc \u8fdb\u884c\u786e\u8ba4\u3002 FAQ gpg: signing failed: Inappropriate ioctl for device If you've encountered this error, try the following commands: export GPG_TTY=$(tty)","title":"\u5982\u4f55\u51c6\u5907Apache Release"},{"location":"developers/committer-guide/release-guide_dev/#apache-release","text":"","title":"\u5982\u4f55\u51c6\u5907Apache Release"},{"location":"developers/committer-guide/release-guide_dev/#apache","text":"\u603b\u7684\u6765\u8bf4\uff0cSource Release\u662fApache\u5173\u6ce8\u7684\u91cd\u70b9\uff0c\u4e5f\u662f\u53d1\u5e03\u7684\u5fc5\u987b\u5185\u5bb9\uff1b\u800cBinary Release\u662f\u53ef\u9009\u9879\uff0cDubbo\u53ef\u4ee5\u9009\u62e9\u662f\u5426\u53d1\u5e03\u4e8c\u8fdb\u5236\u5305\u5230Apache\u4ed3\u5e93\u6216\u8005\u53d1\u5e03\u5230Maven\u4e2d\u592e\u4ed3\u5e93\u3002 \u8bf7\u53c2\u8003\u4ee5\u4e0b\u94fe\u63a5\uff0c\u627e\u5230\u66f4\u591a\u5173\u4e8eASF\u7684\u53d1\u5e03\u6307\u5357: Apache Release Guide Apache Release Policy Maven Release Info","title":"\u7406\u89e3Apache\u53d1\u5e03\u7684\u5185\u5bb9\u548c\u6d41\u7a0b"},{"location":"developers/committer-guide/release-guide_dev/#_1","text":"\u4e3b\u8981\u5305\u62ec\u7b7e\u540d\u5de5\u5177\u3001Maven\u4ed3\u5e93\u8ba4\u8bc1\u76f8\u5173\u51c6\u5907","title":"\u672c\u5730\u6784\u5efa\u73af\u5883\u51c6\u5907"},{"location":"developers/committer-guide/release-guide_dev/#gpg","text":"\u8be6\u7ec6\u6587\u6863\u8bf7\u53c2\u89c1 \u8fd9\u91cc , Mac OS\u4e0b\u914d\u7f6e\u5982\u4e0b $ brew install gpg $ gpg --version #\u68c0\u67e5\u7248\u672c\uff0c\u5e94\u8be5\u4e3a2.x","title":"\u5b89\u88c5GPG"},{"location":"developers/committer-guide/release-guide_dev/#gpgkey","text":"\u6839\u636e\u63d0\u793a\uff0c\u751f\u6210key ```shell $ gpg --full-gen-key gpg (GnuPG) 2.0.12; Copyright (C) 2009 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Please select what kind of key you want: (1) RSA and RSA (default) (2) DSA and Elgamal (3) DSA (sign only) (4) RSA (sign only) Your selection? 1 RSA keys may be between 1024 and 4096 bits long. What keysize do you want? (2048) 4096 Requested keysize is 4096 bits Please specify how long the key should be valid. 0 = key does not expire = key expires in n days w = key expires in n weeks m = key expires in n months y = key expires in n years Key is valid for? (0) Key does not expire at all Is this correct? (y/N) y GnuPG needs to construct a user ID to identify your key. Real name: Robert Burrell Donkin Email address: rdonkin@apache.org Comment: CODE SIGNING KEY You selected this USER-ID: \"Robert Burrell Donkin (CODE SIGNING KEY) \" Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O You need a Passphrase to protect your secret key. # \u586b\u5165\u5bc6\u7801\uff0c\u4ee5\u540e\u6253\u5305\u8fc7\u7a0b\u4e2d\u4f1a\u7ecf\u5e38\u7528\u5230 ```","title":"\u7528gpg\u751f\u6210key"},{"location":"developers/committer-guide/release-guide_dev/#key-id","text":"$ gpg --list-keys pub rsa4096/28681CB1 2018-04-26 # 28681CB1\u5c31\u662fkey id uid [ultimate] liujun (apache-dubbo) liujun@apache.org sub rsa4096/D3D6984B 2018-04-26 # \u901a\u8fc7key id\u53d1\u9001public key\u5230keyserver $ gpg --keyserver pgpkeys.mit.edu --send-key 28681CB1 # \u5176\u4e2d\uff0cpgpkeys.mit.edu\u4e3a\u968f\u610f\u6311\u9009\u7684keyserver\uff0ckeyserver\u5217\u8868\u4e3a\uff1ahttps://sks-keyservers.net/status/\uff0c\u4e3a\u76f8\u4e92\u4e4b\u95f4\u662f\u81ea\u52a8\u540c\u6b65\u7684\uff0c\u9009\u4efb\u610f\u4e00\u4e2a\u90fd\u53ef\u4ee5\u3002 \u5982\u679c\u6709\u591a\u4e2apublic key\uff0c\u8bbe\u7f6e\u9ed8\u8ba4key\u3002\u4fee\u6539 ~/.gnupg/gpg.conf # If you have more than 1 secret key in your keyring, you may want to # uncomment the following option and set your preferred keyid. default-key 28681CB1 \u5982\u679c\u6709\u591a\u4e2apublic key, \u4e5f\u53ef\u4ee5\u5220\u9664\u65e0\u7528\u7684key\uff1a ### \u5148\u5220\u9664\u79c1\u94a5\uff0c\u518d\u5220\u9664\u516c\u94a5 $ gpg --yes --delete-secret-keys shenglicao2@gmail.com ###\u8001\u7684\u79c1\u94a5\uff0c\u6307\u660e\u90ae\u7bb1\u5373\u53ef $ gpg --delete-keys 1808C6444C781C0AEA0AAD4C4D6A8007D20DB8A4 PS: \u6700\u65b0\u7248\u672c\u7ecf\u8fc7\u5b9e\u6d4b\uff0c\u672c\u5730\u6ca1\u6709gpg.conf\u8fd9\u4e2a\u6587\u4ef6\uff0c\u56e0\u6b64\u5982\u679c\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u9047\u5230\u7b7e\u540d\u5931\u8d25\uff0c\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e2a\u6587\u7ae0\uff1ahttps://blog.csdn.net/wenbo20182/article/details/72850810 \u6216 https://d.sb/2016/11/gpg-inappropriate-ioctl-for-device-errors \u7531\u4e8e\u516c\u94a5\u670d\u52a1\u5668\u6ca1\u6709\u68c0\u67e5\u673a\u5236\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u7528\u4f60\u7684\u540d\u4e49\u4e0a\u4f20\u516c\u94a5\uff0c\u6240\u4ee5\u6ca1\u6709\u529e\u6cd5\u4fdd\u8bc1\u670d\u52a1\u5668\u4e0a\u7684\u516c\u94a5\u7684\u53ef\u9760\u6027\u3002 \u901a\u5e38\uff0c\u4f60\u53ef\u4ee5\u5728\u7f51\u7ad9\u4e0a\u516c\u5e03\u4e00\u4e2a\u516c\u94a5\u6307\u7eb9\uff0c\u8ba9\u5176\u4ed6\u4eba\u6838\u5bf9\u4e0b\u8f7d\u5230\u7684\u516c\u94a5\u662f\u5426\u4e3a\u771f\u3002 # fingerprint\u53c2\u6570\u751f\u6210\u516c\u94a5\u6307\u7eb9\uff1a $ gpg --fingerprint liujun pub rsa4096 2019-10-17 [SC] 1376 A2FF 67E4 C477 5739 09BD 7DB6 8550 D366 E4C0 uid [ultimate] liujun (CODE SIGNING KEY) liujun@apache.org sub rsa4096 2019-10-17 [E] \u767b\u5f55 https://id.apache.org, \u5c06\u4e0a\u9762\u7684 fingerprint \uff08\u5373 1376 A2FF 67E4 C477 5739 09BD 7DB6 8550 D366 E4C0\uff09 \u7c98\u8d34\u5230\u81ea\u5df1\u7684\u7528\u6237\u4fe1\u606f\u4e2d OpenPGP Public Key Primary Fingerprint","title":"\u67e5\u770bkey id"},{"location":"developers/committer-guide/release-guide_dev/#apache_1","text":"Dubbo\u9879\u76ee\u7684\u7236pom\u4e3aApache pom(2.7.0\u4ee5\u4e0a\u7248\u672c\u9700\u8981\uff0c2.6.x\u53d1\u5e03\u7248\u672c\u4e0d\u9700\u8981\u6b64\u64cd\u4f5c) parent groupId org.apache /groupId artifactId apache /artifactId version 19 /version /parent \u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\u5230.m2/settings.xml \u6240\u6709\u5bc6\u7801\u8bf7\u4f7f\u7528 maven-encryption-plugin \u52a0\u5bc6\u540e\u518d\u586b\u5165 settings ... servers !-- To publish a snapshot of some part of Maven -- server id apache.snapshots.https /id username !-- YOUR APACHE LDAP USERNAME -- /username password !-- YOUR APACHE LDAP PASSWORD (encrypted) -- /password /server !-- To stage a release of some part of Maven -- server id apache.releases.https /id username !-- YOUR APACHE LDAP USERNAME -- /username password !-- YOUR APACHE LDAP PASSWORD (encrypted) -- /password /server ... !-- gpg passphrase used when generate key -- server id gpg.passphrase /id passphrase !-- yourKeyPassword -- /passphrase /server /servers /settings","title":"\u8bbe\u7f6eApache\u4e2d\u592e\u4ed3\u5e93"},{"location":"developers/committer-guide/release-guide_dev/#_2","text":"","title":"\u6253\u5305&amp;\u4e0a\u4f20"},{"location":"developers/committer-guide/release-guide_dev/#_3","text":"\u4ece\u4e3b\u5e72\u5206\u652f\u62c9\u53d6\u65b0\u5206\u652f\u4f5c\u4e3a\u53d1\u5e03\u5206\u652f\uff0c\u5982\u73b0\u5728\u8981\u53d1\u5e03$ {release_version} \u7248\u672c\uff0c\u5219\u4ece2.6.x\u62c9\u51fa\u65b0\u5206\u652f ${release_version}-release \uff0c\u6b64\u540e ${release_version} Release Candidates\u6d89\u53ca\u7684\u4fee\u6539\u53ca\u6253\u6807\u7b7e\u7b49\u90fd\u5728 ${release_version}-release \u5206\u652f\u8fdb\u884c\uff0c\u6700\u7ec8\u53d1\u5e03\u5b8c\u6210\u540e\u5408\u5165\u4e3b\u5e72\u5206\u652f\u3002","title":"\u51c6\u5907\u5206\u652f"},{"location":"developers/committer-guide/release-guide_dev/#_4","text":"\u9996\u5148\uff0c\u5728 ${release_version}-release \u5206\u652f\u9a8c\u8bc1maven\u7ec4\u4ef6\u6253\u5305\u3001source\u6e90\u7801\u6253\u5305\u3001\u7b7e\u540d\u7b49\u662f\u5426\u90fd\u6b63\u5e38\u5de5\u4f5c\u3002 2.6.x\u8bb0\u5f97\u8981\u4f7f\u75281.6\u8fdb\u884c\u7f16\u8bd1\u6253\u5305 $ mvn clean install -Prelease $ mvn deploy \u4e0a\u8ff0\u547d\u4ee4\u5c06snapshot\u5305\u63a8\u9001\u5230maven\u4e2d\u592e\u4ed3\u5e93","title":"\u7f16\u8bd1\u6253\u5305"},{"location":"developers/committer-guide/release-guide_dev/#maven-release-plugin","text":"~~\u5148\u7528dryRun\u9a8c\u8bc1\u662f\u5426ok~~ $ mvn release:prepare -Prelease -Darguments= -DskipTests -DautoVersionSubmodules=true -Dusername=YOUR GITHUB ID-DdryRun=true ~~\u9a8c\u8bc1\u901a\u8fc7\u540e\uff0c\u6267\u884crelease:prepare~~ $ mvn release:clean $ mvn release:prepare -Prelease -Darguments= -DskipTests -DautoVersionSubmodules=true -Dusername=YOUR GITHUB ID -DpushChanges=false \u6267\u884crelease\u63d2\u4ef6\u65f6\uff0c\u5982\u679c\u6307\u5b9a\u4e86 -DpushChanges=true , \u63d2\u4ef6\u4f1a\u81ea\u52a8\u63d0\u4ea4\u5230\u8fdc\u7aef\u7684GitHub\u4ed3\u5e93\u4e2d\uff0c\u6b64\u65f6\u5c31\u9700\u8981\u8f93\u5165GitHub\u7684\u5bc6\u7801\uff0c\u6ce8\u610f\u4e0d\u662f\u8f93\u5165web\u9875\u9762\u7684\u767b\u5f55\u5bc6\u7801\uff0c\u800c\u662f\u4e00\u4e2a Personal access tokens \uff0c\u83b7\u53d6\u65b9\u5f0f\u8be6\u89c1 \u8fd9\u91cc \u8fd9\u91cc\u6709\u4e00\u70b9\u8981\u6ce8\u610f\u7684\u662ftag\uff0c \u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u9009\u62e9\u53d1\u5e03\u7684artifactId, \u4e0b\u4e00\u4e2a\u7248\u672cartifactId\u4ee5\u53ca\u53d1\u5e03\u7248\u672c\u7684tag, tag\u9ed8\u8ba4\u7684\u662fdubbo-parent-xxxx\uff0c\u9700\u8981\u6539\u6210dubbo-xxxx \u6267\u884c\u5b8c\u4e0a\u8ff0\u6b65\u9aa4\u540e\uff0c\u4f60\u4f1a\u53d1\u73b0\uff1a 1. source-release.zip \u548c bin-release.zip \u5305\u5df2\u7ecf\u751f\u6210\u5728 dubbo-distribution \u76ee\u5f55\u4e0b\uff0c\u8bf7\u89e3\u538b\u5e76\u68c0\u67e5\u6587\u4ef6\u662f\u5426\u5b8c\u6574 2. \u672c\u5730\u5df2\u7ecf\u6253\u51fa\u76f8\u5e94\u7684tag\uff0c\u540c\u65f6\u65b0\u589e\u4e00\u4e2acommit\uff0c\u540d\u53eb [maven-release-plugin] prepare release dubbo-x.x.x 3. \u5206\u652f\u7248\u672c\u81ea\u52a8\u5347\u7ea7\u4e3a ${release_version+1}-SNAPSHOT \uff0c\u540c\u65f6\u65b0\u589e\u4e00\u4e2acommit\uff0c\u540d\u53eb [[maven-release-plugin] prepare for next development iteration \u5982\u679c\u6307\u5b9a\u4e86 -DpushChanges=true , \u5219\u672c\u5730\u63d0\u4ea4\u4f1a\u81ea\u52a8\u63a8\u9001\u5230\u8fdc\u7aef\u7684GitHub\u4ed3\u5e93\u3002\u6839\u636e\u7ecf\u9a8c\uff0c\u5efa\u8bae\u4e0d\u8981\u6307\u5b9a\u4e3atrue\uff0c\u8bf7\u8bbe\u7f6e\u4e3afalse\uff0c\u5f85\u672c\u5730\u68c0\u67e5\u901a\u8fc7\u4e4b\u540e\u518d\u624b\u52a8\u63d0\u4ea4 ~~\u6267\u884crelease:perform\uff0c\u505astaging\u53d1\u5e03~~ $ mvn -Prelease release:perform -Darguments= -DskipTests -DautoVersionSubmodules=true -Dusername=YOUR GITHUB ID \u6b64\u65f6\u63d2\u4ef6\u4f1a\u81ea\u52a8\u4e0b\u8f7d\u8fdc\u7aef\u7684tag\u5bf9\u5e94\u7684\u6e90\u7801\uff0c\u7f16\u8bd1\u540e\uff0c\u5c06\u6240\u6709Artifacts\u53d1\u5e03\u5230\u914d\u7f6e\u7684\u8fdc\u7a0b maven\u4ed3\u5e93 \uff0c\u5904\u4e8estaging\u72b6\u6001\u3002","title":"~~\u7528maven-release-plugin\u53d1\u5e03~~ (\u5e9f\u5f03\uff0c\u53c2\u8003\u540e\u4e00\u6b65)"},{"location":"developers/committer-guide/release-guide_dev/#mvn-deploydeploy","text":"\u8981\u6c42\uff1amaven 3.5+ \u4fee\u6539pom\u6587\u4ef6\u4e2d\u7684\u7248\u672c\u53f7\uff0c\u4ece2.7.x-SNAPSHOT\u6539\u4e3a2.7.x\uff0c \u76ee\u524d\u67093\u4e2a\u5730\u65b9\u9700\u8981\u4fee\u6539\u3002\u5efa\u8bae\u5168\u6587\u641c\u7d22\u3002 $ mvn clean install -Prelease $ mvn deploy -Prelease -DskipTests \u6240\u6709\u88abdeploy\u5230\u8fdc\u7a0b maven\u4ed3\u5e93 \u7684Artifacts\u90fd\u4f1a\u5904\u4e8estaging\u72b6\u6001","title":"\u4f7f\u7528mvn deploy\u8fdb\u884cdeploy"},{"location":"developers/committer-guide/release-guide_dev/#_5","text":"\u5728deploy\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u6709\u53ef\u80fd\u56e0\u4e3a\u7f51\u7edc\u7b49\u539f\u56e0\u88ab\u4e2d\u65ad\uff0c\u5982\u679c\u662f\u8fd9\u6837\uff0c\u53ef\u4ee5\u91cd\u65b0\u5f00\u59cb\u6267\u884c\u3002 deploy\u6267\u884c\u5230maven\u4ed3\u5e93\u7684\u65f6\u5019\uff0c\u8bf7\u786e\u8ba4\u4e0b\u5305\u7684\u603b\u91cf\u662f\u5426\u6b63\u786e\u3002\u591a\u6b21\u51fa\u73b0\u4e86\u5305\u4e22\u5931\u7684\u60c5\u51b5\uff0c\u7279\u522b\u662fdubbo-parent\u5305\u3002","title":"\u6ce8\u610f\u70b9"},{"location":"developers/committer-guide/release-guide_dev/#apache_2","text":"\u51c6\u5907svn\u672c\u673a\u73af\u5883\uff08Apache\u4f7f\u7528svn\u6258\u7ba1\u9879\u76ee\u7684\u53d1\u5e03\u5185\u5bb9\uff09 \u5c06dubbo checkout\u5230\u672c\u5730\u76ee\u5f55 shell $ svn checkout https://dist.apache.org/repos/dist/dev/dubbo # \u5047\u5b9a\u672c\u5730\u76ee\u5f55\u4e3a ~/apache/dubbo \u5f53\u524d\u53d1\u5e03\u7248\u672c\u4e3a${release_version}\uff0c\u65b0\u5efa\u76ee\u5f55 shell $ cd ~/apache/dubbo # dubbo svn\u6839\u76ee\u5f55 $ mkdir ${release_version} \u6dfb\u52a0public key\u5230 KEYS \u6587\u4ef6\u5e76\u63d0\u4ea4\u5230SVN\u4ed3\u5e93\uff08\u7b2c\u4e00\u6b21\u505a\u53d1\u5e03\u7684\u4eba\u9700\u8981\u505a\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u5177\u4f53\u64cd\u4f5c\u53c2\u8003KEYS\u6587\u4ef6\u91cc\u7684\u8bf4\u660e\uff09\u3002KEYS\u4e3b\u8981\u662f\u8ba9\u53c2\u4e0e\u6295\u7968\u7684\u4eba\u5728\u672c\u5730\u5bfc\u5165\uff0c\u7528\u6765\u6821\u9a8csign\u7684\u6b63\u786e\u6027 sh $ (gpg --list-sigs your name gpg --armor --export your name ) KEYS \u62f7\u8d1d distribution/target \u4e0b\u7684source\u76f8\u5173\u7684\u5305\u5230svn\u672c\u5730\u4ed3\u5e93 dubbo/${release_version} \u751f\u6210sha512\u7b7e\u540d \u9488\u5bf9 source-release.zip shell $ shasum -a 512 apache-dubbo-${release_version}-source-release.zip apache-dubbo-${release_version}-source-release.zip.sha512 \u9488\u5bf9 bin-release.zip \uff0c\u9700\u8981\u589e\u52a0 -b \u53c2\u6570\uff0c\u8868\u660e\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6 shell $ shasum -b -a 512 apache-dubbo-${release_version}-bin-release.zip apache-dubbo-${release_version}-bin-release.zip.sha512 \u5982\u679c\u6709binary release\u8981\u540c\u65f6\u53d1\u5e03 \u5728 distribution/target \u76ee\u5f55\u4e0b\uff0c\u62f7\u8d1d bin-release.zip \u4ee5\u53ca bin-release.zip.asc \u5230svn\u672c\u5730\u4ed3\u5e93 dubbo/${release_version} \uff0c\u53c2\u8003\u7b2c6\u6b65\uff0c\u751f\u6210sha512\u7b7e\u540d\u3002 \u63d0\u4ea4\u5230Apache svn shell $ svn status $ svn commit -m 'prepare for ${release_version} RC1' \u5173\u95edMaven\u7684staging\u4ed3\u5e93 \u6b64\u6b65\u9aa4\u4e3a\u53d1\u5e032.7.0\u53ca\u4ee5\u4e0a\u7248\u672c\u5fc5\u987b\u8981\u7684\u6b65\u9aa4\u3002\u5728\u6b64\u4e4b\u524d\u8bf7\u5148\u786e\u4fdd\u6240\u6709\u7684artifact\u90fd\u662fok\u7684\u3002\u767b\u5f55http://repository.apache.org\uff0c\u70b9\u51fb\u5de6\u4fa7\u7684 Staging repositories \uff0c\u7136\u540e\u641c\u7d22Dubbo\u5173\u952e\u5b57\uff0c\u4f1a\u51fa\u73b0\u4e00\u7cfb\u5217\u7684\u4ed3\u5e93\uff0c\u9009\u62e9\u4f60\u6700\u8fd1\u4e0a\u4f20\u7684\u4ed3\u5e93\uff0c\u7136\u540e\u70b9\u51fb\u4e0a\u65b9\u7684Close\u6309\u94ae\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4f1a\u8fdb\u884c\u4e00\u7cfb\u5217\u68c0\u67e5\uff0c\u68c0\u67e5\u901a\u8fc7\u4ee5\u540e\uff0c\u5728\u4e0b\u65b9\u7684Summary\u6807\u7b7e\u9875\u4e0a\u51fa\u73b0\u4e00\u4e2a\u8fde\u63a5\uff0c\u8bf7\u4fdd\u5b58\u597d\u8fd9\u4e2a\u94fe\u63a5\uff0c\u9700\u8981\u653e\u5728\u63a5\u4e0b\u6765\u7684\u6295\u7968\u90ae\u4ef6\u5f53\u4e2d\u3002\u94fe\u63a5\u5e94\u8be5\u662f\u7c7b\u4f3c\u8fd9\u6837\u7684: https://repository.apache.org/content/repositories/orgapachedubbo-1015 \u8bf7\u6ce8\u610f\u70b9\u51fbClose\u53ef\u80fd\u4f1a\u51fa\u73b0\u5931\u8d25\uff0c\u901a\u5e38\u662f\u7f51\u7edc\u539f\u56e0\uff0c\u53ea\u8981\u91cd\u8bd5\u51e0\u6b21\u5c31\u53ef\u4ee5\u4e86\u3002\u53ef\u4ee5\u70b9\u51fbSummary\u65c1\u8fb9\u7684Activity\u6807\u7b7e\u6765\u786e\u8ba4\u3002","title":"\u51c6\u5907Apache\u53d1\u5e03"},{"location":"developers/committer-guide/release-guide_dev/#release-candidates","text":"\u8be6\u7ec6\u7684\u68c0\u67e5\u5217\u8868\u8bf7\u53c2\u8003\u5b98\u65b9\u7684 check list \u9996\u5148\uff0c\u4ece\u4e00\u4e0b\u5730\u5740\u4e0b\u8f7d\u8981\u53d1\u5e03\u7684Release Candidate\u5230\u672c\u5730\u73af\u5883\uff1a https://dist.apache.org/repos/dist/dev/dubbo/${release_version}/ \u7136\u540e\uff0c\u5f00\u59cb\u9a8c\u8bc1\u73af\u8282\uff0c\u9a8c\u8bc1\u5305\u542b\u4f46\u4e0d\u9650\u4e8e\u4ee5\u4e0b\u5185\u5bb9\u548c\u5f62\u5f0f","title":"\u9a8c\u8bc1Release Candidates"},{"location":"developers/committer-guide/release-guide_dev/#hash","text":"","title":"\u68c0\u67e5\u7b7e\u540d\u548chash\u7b49\u4fe1\u606f"},{"location":"developers/committer-guide/release-guide_dev/#sha512","text":"$ shasum -c apache-dubbo-${release_version}-source-release.zip.sha512 $ shasum -c apache-dubbo-${release_version}-bin-release.zip.sha512","title":"\u68c0\u67e5sha512\u54c8\u5e0c"},{"location":"developers/committer-guide/release-guide_dev/#gpg_1","text":"\u5982\u679c\u662f\u7b2c\u4e00\u6b21\u68c0\u67e5\uff0c\u9700\u8981\u9996\u5148\u5bfc\u5165\u516c\u94a5\u3002 $ curl https://dist.apache.org/repos/dist/dev/dubbo/KEYS KEYS # download public keys to local directory $ gpg --import KEYS # import keys $ gpg \u2014edit-key liujun trust # type trust command ``` \u7136\u540e\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u68c0\u67e5\u7b7e\u540d ```sh gpg --verify apache-dubbo-2.6.3-source-release.zip.asc apache-dubbo-2.6.3-source-release.zip gpg --verify apache-dubbo-2.6.3-bin-release.zip.asc apache-dubbo-2.6.3-bin-release.zip ``` ### \u68c0\u67e5\u6e90\u7801\u5305\u7684\u6587\u4ef6\u5185\u5bb9 \u89e3\u538b\u7f29`apache-dubbo-${release_version}-source-release.zip`\uff0c\u8fdb\u884c\u5982\u4e0b\u68c0\u67e5: - DISCLAIMER exists - LICENSE and NOTICE exists and contents are good - All files and no binary files exist - All files has standard ASF License header - Can compile from source - All unit tests can pass ```sh mvn clean test # This will run all unit tests # you can also open rat and style plugin to check if every file meets requirements. mvn clean test -Drat.skip=false -Dcheckstyle.skip=false ``` - Release candidates match with corresponding tags, you can find tag link and hash in vote email. - check the version number in pom.xml are the same - check there are no extra files or directories in the source package, for example, no empty directories or useless log files\uff0c\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u6362\u884c\u7b26\u662f\u5426\u4e00\u81f4 `diff -r a rc_dir tag_dir` - check the top n tag commits, dive into the related files and check if the source package has the same changes ### \u68c0\u67e5\u4e09\u65b9\u4f9d\u8d56\u7684\u5408\u89c4\u6027 \u6309\u7167Apache\u57fa\u91d1\u4f1a\u5408\u89c4\u6027\u89c4\u5b9a\uff0c\u6e90\u7801\u6216\u8005\u662f\u4e8c\u8fdb\u5236\u5206\u53d1\u5305\u4e2d\u5747\u4e0d\u80fd\u5305\u542bCategory X\u7684\u4f9d\u8d56\uff0c\u5176\u4e2d\u5c31\u5e38\u89c1\u7684\u662f\u5305\u542b\u4e86GPL/LGPL\u7684\u4f9d\u8d56\uff0c\u5373\u4f7f\u662f\u4f20\u9012\u4f9d\u8d56\u4e5f\u4e0d\u884c\u3002\u56e0\u6b64\u5728\u53d1\u7248\u7684\u65f6\u5019\u9700\u8981\u901a\u8fc7\u4ee5\u4e0b\u7684\u547d\u4ee4\u8fdb\u884c\u68c0\u67e5\uff1a ```sh mvn license:add-third-party -Dlicense.useMissingFile find . -name THIRD-PARTY.txt | xargs grep -E 'GPL|General Public License' | grep -v Apache | grep -v MIT | grep -v CDDL \u5982\u679c\u4e00\u4e2a\u4f9d\u8d56\u63d0\u4f9b\u4e86\u53cc\u534f\u8bae\u6216\u591a\u91cd\u534f\u8bae\uff0c\u53ef\u4ee5\u9009\u62e9\u4e0eApache\u6700\u517c\u5bb9\u7684\u4e00\u4e2a\u534f\u8bae\u3002","title":"\u68c0\u67e5gpg\u7b7e\u540d"},{"location":"developers/committer-guide/release-guide_dev/#_6","text":"\u89e3\u538b\u7f29 apache-dubbo-${release_version}-bin-release.zip \uff0c\u8fdb\u884c\u5982\u4e0b\u68c0\u67e5: Check signatures are good LICENSE and NOTICE exists and contents are good \u6ce8\u610f\uff0c\u5982\u679c\u4e8c\u8fdb\u5236\u5305\u91cc\u9762\u5f15\u5165\u4e86\u7b2c\u4e09\u65b9\u4f9d\u8d56\uff0c\u5219\u9700\u8981\u66f4\u65b0LICENSE\uff0c\u52a0\u5165\u7b2c\u4e09\u65b9\u4f9d\u8d56\u7684LICENSE\uff0c\u5982\u679c\u7b2c\u4e09\u65b9\u4f9d\u8d56\u7684LICENSE\u662fApache 2.0\uff0c\u5e76\u4e14\u5bf9\u5e94\u7684\u9879\u76ee\u4e2d\u5305\u542b\u4e86NOTICE\uff0c\u8fd8\u9700\u8981\u66f4\u65b0NOTICE\u6587\u4ef6","title":"\u68c0\u67e5\u4e8c\u8fdb\u5236\u5305\u7684\u6587\u4ef6\u5185\u5bb9"},{"location":"developers/committer-guide/release-guide_dev/#_7","text":"dubbo\u6bd5\u4e1a\u4e4b\u540e\uff0c\u6295\u7968\u5206\u53ea\u9700\u8981\u4e00\u6b21\uff1a Dubbo\u793e\u533a\u6295\u7968\uff0c\u53d1\u8d77\u6295\u7968\u90ae\u4ef6\u5230dev@dubbo.apache.org\u3002\u5728\u793e\u533a\u5f00\u53d1\u8005Review\uff0c\u7ecf\u8fc7\u81f3\u5c1172\u5c0f\u65f6\u5e76\u7edf\u8ba1\u52303\u4e2a\u540c\u610f\u53d1\u7248\u7684binding\u7968\u540e\uff08\u53ea\u6709PMC\u7684\u7968\u624d\u662fbinding\uff09\uff0c\u5373\u53ef\u8fdb\u5165\u4e0b\u4e00\u9636\u6bb5\u7684\u6295\u7968\u3002 Dubbo\u793e\u533a\u6295\u7968\u90ae\u4ef6\u6a21\u677f\uff1a Hello Dubbo Community, This is a call for vote to release Apache Dubbo version 2.7.2. The release candidates: https://dist.apache.org/repos/dist/dev/dubbo/2.7.2/ The staging repo: https://repository.apache.org/content/repositories/orgapachedubbo-1005 Git tag for the release: https://github.com/apache/dubbo/tree/dubbo-2.7.2 Hash for the release tag: afab04c53edab38d52275d2a198ea1aff7a4f41e Release Notes: https://github.com/apache/dubbo/releases/tag/untagged-4775c0a22c60fca55118 The artifacts have been signed with Key : 28681CB1, which can be found in the keys file: https://dist.apache.org/repos/dist/dev/dubbo/KEYS The vote will be open for at least 72 hours or until necessary number of votes are reached. Please vote accordingly: [ ] +1 approve [ ] +0 no opinion [ ] -1 disapprove with the reason Thanks, The Apache Dubbo Team \u5ba3\u5e03\u6295\u7968\u7ed3\u679c\u6a21\u677f\uff1a We\u2019ve received 3 +1 binding votes and one +1 non-binding vote: +1 binding, Ian Luo +1 binding, Huxing Zhang +1 binding, Jun Liu +1 non-binding, Jerrick I will start to release today. Best regards, The Apache Dubbo Team","title":"\u8fdb\u5165\u6295\u7968"},{"location":"developers/committer-guide/release-guide_dev/#_8","text":"\u5c06 dev \u76ee\u5f55\u4e0b\u7684\u53d1\u5e03\u5305\u6dfb\u52a0\u5230 release \u76ee\u5f55\u4e0b\uff0cKEYS\u6709\u66f4\u65b0\u7684\uff0c\u4e5f\u9700\u8981\u540c\u6b65\u66f4\u65b0\u3002 \u5220\u9664 dev \u76ee\u5f55\u4e0b\u7684\u53d1\u5e03\u5305 \u5220\u9664 release \u76ee\u5f55\u4e0b\u4e0a\u4e00\u4e2a\u7248\u672c\u7684\u53d1\u5e03\u5305\uff0c\u8fd9\u4e9b\u5305\u4f1a\u88ab\u81ea\u52a8\u4fdd\u5b58\u5728 \u8fd9\u91cc \u53d1\u5e03GitHub\u4e0a\u7684 release notes \u4fee\u6539GitHub\u7684Readme\u6587\u4ef6\uff0c\u5c06\u7248\u672c\u53f7\u66f4\u65b0\u5230\u6700\u65b0\u53d1\u5e03\u7684\u7248\u672c \u5728\u5b98\u7f51\u4e0b\u8f7d \u9875\u9762 \u4e0a\u6dfb\u52a0\u6700\u65b0\u7248\u672c\u7684\u4e0b\u8f7d\u94fe\u63a5\u3002\u6700\u65b0\u7684\u4e0b\u8f7d\u94fe\u63a5\u5e94\u8be5\u7c7b\u4f3c \u8fd9\u6837 . \u540c\u65f6\u66f4\u65b0\u4ee5\u524d\u7248\u672c\u7684\u4e0b\u8f7d\u94fe\u63a5\uff0c\u6539\u4e3a\u7c7b\u4f3c \u8fd9\u6837 . \u5177\u4f53\u53ef\u4ee5\u53c2\u8003\u8fc7\u5f80\u7684 \u4e0b\u8f7d\u94fe\u63a5 \u5408\u5e76 ${release-version}-release \u5206\u652f\u5230\u5bf9\u5e94\u7684\u4e3b\u5e72\u5206\u652f\uff0c \u7136\u540e\u5220\u9664\u76f8\u5e94\u7684release\u5206\u652f\uff0c\u4f8b\u5982: git push origin --delete 2.7.0-release \u53d1\u90ae\u4ef6\u5230 dev@dubbo.apache.org \u5ba3\u5e03release\u90ae\u4ef6\u6a21\u677f\uff1a Hello Community, The Apache Dubbo team is pleased to announce that the 2.6.6 has just been released. Apache Dubbo\u2122 is a high-performance, java based, open source RPC framework. Dubbo offers three key functionalities, which include interface based remote call, fault tolerance load balancing, and automatic service registration discovery. Both the source release[1] and the maven binary release[2] are available now, you can also find the detailed release notes here[3]. If you have any usage questions, or have problems when upgrading or find any problems about enhancements included in this release, please don\u2019t hesitate to let us know by sending feedback to this mailing list or filing an issue on GitHub[4]. [1] http://dubbo.apache.org/en-us/blog/download.html [2] https://repo1.maven.org/maven2/org/apache/dubbo/dubbo [3] https://github.com/apache/dubbo/releases [4] https://github.com/apache/dubbo/issues","title":"\u6b63\u5f0f\u53d1\u5e03"},{"location":"developers/committer-guide/release-guide_dev/#maven-convenient-binary","text":"repository.apache.org nexus\u4ed3\u5e93\u7684\u6743\u9650\u5df2\u7ecf\u7533\u8bf7\uff0c\u53c2\u89c1 jira \u53d1\u5e03jar\u5305\u5230maven\u4ed3\u5e93\uff0c\u9996\u5148\u8bbf\u95ee repository.apache.org , \u9009\u62e9 staging repository , \u70b9\u51fb release \u6309\u94ae\u3002\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e\uff0c\u5728 \u8fd9\u91cc \u786e\u8ba4\u5b8c\u6574\u6027\u548c\u6b63\u786e\u6027. \u53d1\u5e03\u5230Maven\u4e2d\u592e\u4ed3\u5e93\u5219\u8fd8\u9700\u8981\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\u3002\u53ef\u4ee5\u5728 \u8fd9\u91cc \u8fdb\u884c\u786e\u8ba4\u3002","title":"\u5b8c\u6210Maven Convenient Binary\u53d1\u5e03\uff08\u53ef\u9009\uff09"},{"location":"developers/committer-guide/release-guide_dev/#faq","text":"","title":"FAQ"},{"location":"developers/committer-guide/release-guide_dev/#gpg-signing-failed-inappropriate-ioctl-for-device","text":"If you've encountered this error, try the following commands: export GPG_TTY=$(tty)","title":"gpg: signing failed: Inappropriate ioctl for device"},{"location":"developers/committer-guide/website-guide_dev/","text":"\u7f51\u7ad9\u5411\u5bfc Apache Dubbo \u7684\u7f51\u7ad9\u4ed3\u5e93\u662f https://github.com/apache/dubbo-website \u7f51\u7ad9\u6784\u5efa\u5b8c\u6bd5\u540e\uff0c\u5b83\u4f1a\u88ab\u81ea\u52a8\u53d1\u5e03\u5230 dubbo.apache.org\uff0c\u60a8\u4e5f\u53ef\u4ee5\u901a\u8fc7 https://selfserve.apache.org \u624b\u52a8\u89e6\u53d1\uff08\u9700\u8981\u4f7f\u7528 Apache \u8d26\u53f7\u767b\u9646\uff09","title":"\u7f51\u7ad9\u5411\u5bfc"},{"location":"developers/committer-guide/website-guide_dev/#_1","text":"Apache Dubbo \u7684\u7f51\u7ad9\u4ed3\u5e93\u662f https://github.com/apache/dubbo-website \u7f51\u7ad9\u6784\u5efa\u5b8c\u6bd5\u540e\uff0c\u5b83\u4f1a\u88ab\u81ea\u52a8\u53d1\u5e03\u5230 dubbo.apache.org\uff0c\u60a8\u4e5f\u53ef\u4ee5\u901a\u8fc7 https://selfserve.apache.org \u624b\u52a8\u89e6\u53d1\uff08\u9700\u8981\u4f7f\u7528 Apache \u8d26\u53f7\u767b\u9646\uff09","title":"\u7f51\u7ad9\u5411\u5bfc"},{"location":"developers/contributor-guide/become-a-committer_dev/","text":"\u5982\u4f55\u6210\u4e3aDubbo committer \u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u6210\u4e3aApache\u9879\u76ee\u7684\u8d21\u732e\u8005\u3002\u4f5c\u4e3a\u4e00\u4e2a\u8d21\u732e\u8005\u53ea\u662f\u610f\u5473\u7740\u4f60\u5bf9\u9879\u76ee\u611f\u5174\u8da3\u5e76\u4ee5\u67d0\u79cd\u65b9\u5f0f\u505a\u51fa\u8d21\u732e\uff0c\u4ece\u63d0\u51fa\u5408\u7406\u7684\u95ee\u9898\uff08\u8fd9\u4e9b\u95ee\u9898\u8bb0\u5f55\u4e86\u9879\u76ee\u5e76\u5411\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u53cd\u9988\uff09\u5230\u63d0\u4f9b\u65b0\u7684\u7279\u6027\u4f5c\u4e3a\u8865\u4e01\u3002 \u5982\u679c\u4f60\u6210\u4e3a\u5bf9\u4e00\u4e2a\u9879\u76ee\u6709\u4ef7\u503c\u7684\u8d21\u732e\u8005\uff0c\u4f60\u6709\u53ef\u80fd\u88ab\u9080\u8bf7\u6210\u4e3a\u4e00\u4e2acommitter\u3002committer\u662fASF\uff08Apache\u8f6f\u4ef6\u57fa\u91d1\u4f1a\uff09\u4e2d\u7528\u6765\u8868\u793a\u63d0\u4ea4\u7279\u5b9a\u9879\u76ee\u7684\u4eba\u7684\u672f\u8bed\u3002\u5b83\u7ed9\u4f60\u5e26\u6765\u5bf9\u9879\u76ee\u4ed3\u5e93\u548c\u8d44\u6e90\u5199\u7684\u6743\u9650\u3002 \u5728Dubbo\u793e\u533a\uff0c\u5982\u679c\u4e00\u4e2acommitter\u83b7\u5f97\u5927\u91cf\u7684\u4f18\u79c0\u6210\u7ee9\uff0c\u5c31\u53ef\u4ee5\u88ab\u9080\u8bf7\u52a0\u5165\u9879\u76ee\u7ba1\u7406\u59d4\u5458\u4f1a\uff08PMC\uff09\u3002 \u5f53\u60a8\u4e0d\u719f\u6089ASF\u4f7f\u7528\u7684\u5f00\u6e90\u7684\u5f00\u53d1\u8fc7\u7a0b\u65f6\uff0c\u6709\u65f6\u96be\u4ee5\u7406\u89e3\u7684\u4e00\u70b9\uff0c\u5c31\u662f\u6211\u4eec\u66f4\u91cd\u89c6\u793e\u533a\u800c\u4e0d\u662f\u4ee3\u7801\u3002\u4e00\u4e2a\u5f3a\u5927\u800c\u5065\u5eb7\u7684\u793e\u533a\u5c06\u53d7\u5230\u5c0a\u91cd\uff0c\u6210\u4e3a\u4e00\u4e2a\u6709\u8da3\u548c\u6709\u76ca\u7684\u5730\u65b9\u3002\u66f4\u91cd\u8981\u7684\u662f\uff0c\u4e00\u4e2a\u591a\u5143\u5316\u548c\u5065\u5eb7\u7684\u793e\u533a\u53ef\u4ee5\u957f\u65f6\u95f4\u7684\u6301\u7eed\u652f\u6301\u4ee3\u7801\uff0c\u5373\u4f7f\u4e2a\u522b\u516c\u53f8\u5728\u8fd9\u4e2a\u9886\u57df\u6765\u6765\u5f80\u5f80\uff0c\u4e5f\u662f\u5982\u6b64\u3002 \u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u3002 \u6211\u53ef\u4ee5\u8d21\u732e\u4ec0\u4e48\uff1f \u8bf7\u53c2\u9605 \u65b0\u7684\u8d21\u732e\u8005\u6307\u5357 \u3002","title":"\u5982\u4f55\u6210\u4e3aDubbo committer"},{"location":"developers/contributor-guide/become-a-committer_dev/#dubbo-committer","text":"\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u6210\u4e3aApache\u9879\u76ee\u7684\u8d21\u732e\u8005\u3002\u4f5c\u4e3a\u4e00\u4e2a\u8d21\u732e\u8005\u53ea\u662f\u610f\u5473\u7740\u4f60\u5bf9\u9879\u76ee\u611f\u5174\u8da3\u5e76\u4ee5\u67d0\u79cd\u65b9\u5f0f\u505a\u51fa\u8d21\u732e\uff0c\u4ece\u63d0\u51fa\u5408\u7406\u7684\u95ee\u9898\uff08\u8fd9\u4e9b\u95ee\u9898\u8bb0\u5f55\u4e86\u9879\u76ee\u5e76\u5411\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u53cd\u9988\uff09\u5230\u63d0\u4f9b\u65b0\u7684\u7279\u6027\u4f5c\u4e3a\u8865\u4e01\u3002 \u5982\u679c\u4f60\u6210\u4e3a\u5bf9\u4e00\u4e2a\u9879\u76ee\u6709\u4ef7\u503c\u7684\u8d21\u732e\u8005\uff0c\u4f60\u6709\u53ef\u80fd\u88ab\u9080\u8bf7\u6210\u4e3a\u4e00\u4e2acommitter\u3002committer\u662fASF\uff08Apache\u8f6f\u4ef6\u57fa\u91d1\u4f1a\uff09\u4e2d\u7528\u6765\u8868\u793a\u63d0\u4ea4\u7279\u5b9a\u9879\u76ee\u7684\u4eba\u7684\u672f\u8bed\u3002\u5b83\u7ed9\u4f60\u5e26\u6765\u5bf9\u9879\u76ee\u4ed3\u5e93\u548c\u8d44\u6e90\u5199\u7684\u6743\u9650\u3002 \u5728Dubbo\u793e\u533a\uff0c\u5982\u679c\u4e00\u4e2acommitter\u83b7\u5f97\u5927\u91cf\u7684\u4f18\u79c0\u6210\u7ee9\uff0c\u5c31\u53ef\u4ee5\u88ab\u9080\u8bf7\u52a0\u5165\u9879\u76ee\u7ba1\u7406\u59d4\u5458\u4f1a\uff08PMC\uff09\u3002 \u5f53\u60a8\u4e0d\u719f\u6089ASF\u4f7f\u7528\u7684\u5f00\u6e90\u7684\u5f00\u53d1\u8fc7\u7a0b\u65f6\uff0c\u6709\u65f6\u96be\u4ee5\u7406\u89e3\u7684\u4e00\u70b9\uff0c\u5c31\u662f\u6211\u4eec\u66f4\u91cd\u89c6\u793e\u533a\u800c\u4e0d\u662f\u4ee3\u7801\u3002\u4e00\u4e2a\u5f3a\u5927\u800c\u5065\u5eb7\u7684\u793e\u533a\u5c06\u53d7\u5230\u5c0a\u91cd\uff0c\u6210\u4e3a\u4e00\u4e2a\u6709\u8da3\u548c\u6709\u76ca\u7684\u5730\u65b9\u3002\u66f4\u91cd\u8981\u7684\u662f\uff0c\u4e00\u4e2a\u591a\u5143\u5316\u548c\u5065\u5eb7\u7684\u793e\u533a\u53ef\u4ee5\u957f\u65f6\u95f4\u7684\u6301\u7eed\u652f\u6301\u4ee3\u7801\uff0c\u5373\u4f7f\u4e2a\u522b\u516c\u53f8\u5728\u8fd9\u4e2a\u9886\u57df\u6765\u6765\u5f80\u5f80\uff0c\u4e5f\u662f\u5982\u6b64\u3002 \u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u3002","title":"\u5982\u4f55\u6210\u4e3aDubbo committer"},{"location":"developers/contributor-guide/become-a-committer_dev/#_1","text":"\u8bf7\u53c2\u9605 \u65b0\u7684\u8d21\u732e\u8005\u6307\u5357 \u3002","title":"\u6211\u53ef\u4ee5\u8d21\u732e\u4ec0\u4e48\uff1f"},{"location":"developers/contributor-guide/cla-signing-guide_dev/","text":"CLA\u7b7e\u7f72\u5411\u5bfc \u4ee5\u4e0b\u60c5\u51b5\uff0c\u9700\u8981\u60a8\u7b7e\u7f72Apache ICLA\uff1a \u5728Dubbo\u88ab\u6350\u8d60\u7ed9Apache\u4e4b\u524d\uff0c\u60a8\u5df2\u7ecf\u4e3aDubbo\u4f5c\u51fa\u4e86\u5f88\u591a\u8d21\u732e\uff0c\u5e76\u4e14\u60a8\u4ee5\u524d\u6ca1\u6709\u7b7e\u7f72\u8fc7Alibaba-CLA\u3002 \u60a8\u5df2\u7ecf\u4e3aDubbo\u4f5c\u51fa\u4e86\u5f88\u591a\u8d21\u732e\uff0c\u5e76\u4e14\u60a8\u88ab\u9080\u8bf7\u6210\u4e3aDubbo\u63d0\u4ea4\u8005\uff0c\u4e14\u4e4b\u524d\u6ca1\u6709\u7b7e\u7f72\u8fc7Alibaba-CLA\u6216\u8005Apache ICLA\u3002 \u6b65\u9aa4 \u4e0b\u8f7d\u8fd9\u7bc7 pdf\u6587\u6863 \u7f16\u8f91\u8be5\u6587\u6863\uff0c\u5728\u5fc5\u8981\u7684\u7a7a\u683c\u5904\u586b\u4e0a\u9002\u5f53\u7684\u5185\u5bb9 \u6253\u5370 \u5728\u6253\u5370\u597d\u7684\u6587\u4ef6\u4e0a\u7b7e\u5b57 \u626b\u63cf \u53d1\u9001\u4e00\u5c01\u90ae\u4ef6\u5230secretary@apache.org\uff0c\u5e76\u6284\u9001\u7ed9private@dubbo.apache.org\uff1a \u90ae\u4ef6\u6807\u9898\u4e3a\u201cICLA submission\u201d \u8bf7\u5728\u90ae\u4ef6\u6b63\u6587\u9644\u4e0a\u60a8\u7684github\u8d26\u53f7\u94fe\u63a5 \u8bf7\u8bb0\u5f97\u5c06\u60a8\u7684ICLA\u6587\u6863\u653e\u5165\u90ae\u4ef6\u7684\u9644\u4ef6\u91cc \u7a7a\u683c\u586b\u5199\u5fc5\u8981\u8bf4\u660e Mailing address\uff1a\u9996\u9009\u82f1\u6587\u683c\u5f0f\u7684\u516c\u53f8\u5730\u5740 preferred apache id(s)\uff1a\u5982\u679c\u60a8\u88ab\u9080\u8bf7\u6210\u4e3a\u4e00\u540d\u63d0\u4ea4\u8005\uff0c\u90a3\u4e48\u9700\u8981\u60a8\u586b\u5199\u4e00\u4e2aapache\u8d26\u53f7\uff0c\u5426\u5219\uff0c\u53ef\u4ee5\u4e0d\u586b notify project\uff1aDubbo\uff08\u610f\u601d\u5c31\u662fDubbo\u5c31\u662f\u901a\u77e5\u60a8\u7b7e\u7f72ICLA\u7684\u9879\u76ee\uff09","title":"CLA\u7b7e\u7f72\u5411\u5bfc"},{"location":"developers/contributor-guide/cla-signing-guide_dev/#cla","text":"\u4ee5\u4e0b\u60c5\u51b5\uff0c\u9700\u8981\u60a8\u7b7e\u7f72Apache ICLA\uff1a \u5728Dubbo\u88ab\u6350\u8d60\u7ed9Apache\u4e4b\u524d\uff0c\u60a8\u5df2\u7ecf\u4e3aDubbo\u4f5c\u51fa\u4e86\u5f88\u591a\u8d21\u732e\uff0c\u5e76\u4e14\u60a8\u4ee5\u524d\u6ca1\u6709\u7b7e\u7f72\u8fc7Alibaba-CLA\u3002 \u60a8\u5df2\u7ecf\u4e3aDubbo\u4f5c\u51fa\u4e86\u5f88\u591a\u8d21\u732e\uff0c\u5e76\u4e14\u60a8\u88ab\u9080\u8bf7\u6210\u4e3aDubbo\u63d0\u4ea4\u8005\uff0c\u4e14\u4e4b\u524d\u6ca1\u6709\u7b7e\u7f72\u8fc7Alibaba-CLA\u6216\u8005Apache ICLA\u3002","title":"CLA\u7b7e\u7f72\u5411\u5bfc"},{"location":"developers/contributor-guide/cla-signing-guide_dev/#_1","text":"\u4e0b\u8f7d\u8fd9\u7bc7 pdf\u6587\u6863 \u7f16\u8f91\u8be5\u6587\u6863\uff0c\u5728\u5fc5\u8981\u7684\u7a7a\u683c\u5904\u586b\u4e0a\u9002\u5f53\u7684\u5185\u5bb9 \u6253\u5370 \u5728\u6253\u5370\u597d\u7684\u6587\u4ef6\u4e0a\u7b7e\u5b57 \u626b\u63cf \u53d1\u9001\u4e00\u5c01\u90ae\u4ef6\u5230secretary@apache.org\uff0c\u5e76\u6284\u9001\u7ed9private@dubbo.apache.org\uff1a \u90ae\u4ef6\u6807\u9898\u4e3a\u201cICLA submission\u201d \u8bf7\u5728\u90ae\u4ef6\u6b63\u6587\u9644\u4e0a\u60a8\u7684github\u8d26\u53f7\u94fe\u63a5 \u8bf7\u8bb0\u5f97\u5c06\u60a8\u7684ICLA\u6587\u6863\u653e\u5165\u90ae\u4ef6\u7684\u9644\u4ef6\u91cc","title":"\u6b65\u9aa4"},{"location":"developers/contributor-guide/cla-signing-guide_dev/#_2","text":"Mailing address\uff1a\u9996\u9009\u82f1\u6587\u683c\u5f0f\u7684\u516c\u53f8\u5730\u5740 preferred apache id(s)\uff1a\u5982\u679c\u60a8\u88ab\u9080\u8bf7\u6210\u4e3a\u4e00\u540d\u63d0\u4ea4\u8005\uff0c\u90a3\u4e48\u9700\u8981\u60a8\u586b\u5199\u4e00\u4e2aapache\u8d26\u53f7\uff0c\u5426\u5219\uff0c\u53ef\u4ee5\u4e0d\u586b notify project\uff1aDubbo\uff08\u610f\u601d\u5c31\u662fDubbo\u5c31\u662f\u901a\u77e5\u60a8\u7b7e\u7f72ICLA\u7684\u9879\u76ee\uff09","title":"\u7a7a\u683c\u586b\u5199\u5fc5\u8981\u8bf4\u660e"},{"location":"developers/contributor-guide/dubbo-extension-guide_dev/","text":"Dubbo Extension\u5411\u5bfc Dubbo\u4f7f\u7528\u5fae\u5185\u6838+\u63d2\u4ef6\u7684\u8bbe\u8ba1\u6a21\u5f0f\u3002\u5185\u6838\u53ea\u8d1f\u8d23\u7ec4\u88c5\u63d2\u4ef6\uff0cDubbo\u7684\u529f\u80fd\u90fd\u662f\u7531\u6269\u5c55\u70b9\uff08\u63d2\u4ef6\uff09\u5b9e\u73b0\uff0c\u8fd9\u5c31\u610f\u5473\u7740Dubbo\u7684\u6240\u6709\u529f\u80fd\u90fd\u53ef\u4ee5\u88ab\u7528\u6237\u5b9a\u5236\u7684\u6269\u5c55\u6240\u66ff\u4ee3\u3002 Dubbo\u751f\u6001\u7cfb\u7edf \u6211\u4eec\u5efa\u8bae\u60a8\u5c06\u6269\u5c55\u52a0\u5165\u5230Dubbo\u751f\u6001\u7cfb\u7edf\u3002\u4f7f\u7528\u8fd9\u79cd\u6a21\u5f0f\uff0c\u53ef\u4ee5\u4f7fDubbo\u7684\u6838\u5fc3\u4ed3\u5e93\u66f4\u5e72\u51c0\uff0c\u5e76\u4e14\u53ef\u4ee5\u51cf\u5c11\u7ef4\u62a4\u5de5\u4f5c\u3002\u66f4\u5c11\u7684\u4ee3\u7801\u4e5f\u53ef\u4ee5\u63d0\u9ad8\u6838\u5fc3\u4ed3\u5e93\u7684\u6784\u5efa\u901f\u5ea6\u3002 \u4f9d\u8d56 \u8981\u5b9e\u73b0\u60a8\u81ea\u5df1\u7684Dubbo\u6269\u5c55\uff0c\u901a\u5e38\u53ea\u9700\u4f9d\u8d56API jar\u5c31\u53ef\u4ee5\u6ee1\u8db3\u60a8\u7684\u9700\u6c42\u3002\u4f8b\u5982\uff1a dependency groupId org.apache.dubbo /groupId artifactId dubbo-serialization-api /artifactId version ${dubbo.version} /version /dependency Src\u6307\u5bfc \u901a\u5e38\uff0c\u8981\u5b9e\u73b0\u7279\u6b8a\u7684\u6269\u5c55\uff0c\u53ea\u9700\u8981\u53c2\u8003 \u5f00\u53d1\u8005\u6307\u5357 \uff0c\u5b9e\u73b0Dubbo\u5fc5\u8981\u7684\u63a5\u53e3\u548c\u5408\u9002\u7684\u6269\u5c55\u5373\u53ef\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u5176\u5b83\u7684\u4e8b\u9879\u9700\u8981\u6ce8\u610f\uff1a \u826f\u597d\u7684\u6d4b\u8bd5\uff0c\u60a8\u9700\u8981\u7f16\u5199\u5355\u5143\u6d4b\u8bd5\u548c\u5192\u70df\u6d4b\u8bd5\u4ee5\u6d88\u9664\u6f5c\u5728\u7684bug\u3002 \u6ca1\u6709\u8b66\u544a\uff0c\u5982\u6709\u4e0d\u53ef\u907f\u514d\u7684\u8b66\u544a\uff0c\u8bf7\u4f7f\u7528@SuppressWarnings\u963b\u6b62\u5b83\uff0c\u4f46\u662f\u8bf7\u4e0d\u8981\u4e71\u7528\u3002 README\u3002\u6dfb\u52a0\u5fc5\u8981\u7684\u81ea\u8ff0\u4ee5\u8bf4\u660e\u5982\u4f55\u4f7f\u7528\u6269\u5c55\uff0c\u4ee5\u53ca\u9700\u8981\u6ce8\u610f\u7684\u4e8b\u9879\u3002 \u8bb8\u53ef\u8bc1\uff1a\u8bf7\u786e\u4fdd\u4f7f\u7528Apache License 2.0\u3002 \u901a\u77e5\u793e\u533a \u63d0\u4ea4\u60a8\u7684\u4ee3\u7801\u5230 github \u3002 \u52a0\u5165\u90ae\u4ef6\u5217\u8868\uff08\u5efa\u8bae\uff09\u3002\u70b9\u51fb \u8fd9\u91cc \u67e5\u770b\u5982\u4f55\u52a0\u5165\u90ae\u4ef6\u5217\u8868\u3002 \u53d1\u9001\u4e00\u5c01\u90ae\u4ef6\u5230dev@incubator.dubbo.apache.org\u901a\u77e5\u793e\u533a\u3002 \u901a\u5e38\uff0c\u53d1\u9001\u90ae\u4ef6\u4e4b\u540e\uff0c\u793e\u533a\u4f1a\u5bf9\u60a8\u7684\u6269\u5c55\u8fdb\u884c\u8ba8\u8bba\uff0cdubbo\u7ec4\u7684\u7ba1\u7406\u5458\u4f1a\u8054\u7cfb\u60a8\u8f6c\u79fb\u60a8\u7684\u9879\u76ee\u5230dubbo\u751f\u6001\u7cfb\u7edf\u3002 \u8f6c\u79fb\u9879\u76ee\u5230dubbo\u751f\u6001\u7cfb\u7edf dubbo\u7ec4\u7684\u7ba1\u7406\u5458\u4f1a\u8bf7\u60a8\u5c06\u60a8\u7684\u9879\u76ee\u7684\u6240\u6709\u8005\u8f6c\u8ba9\u7ed9dubbo\u3002 dubbo\u7ec4\u7684\u7ba1\u7406\u5458\u4f1a\u5728dubbo\u7ec4\u4e0b\u65b0\u5efa\u4e00\u4e2a\u9879\u76ee\u5e76\u9080\u8bf7\u60a8\u52a0\u5165\u5230\u8fd9\u4e2a\u9879\u76ee\u3002 \u4e00\u65e6\u60a8\u63a5\u53d7\u9080\u8bf7\uff0c\u60a8\u53ef\u4ee5\u5c06\u60a8\u7684\u9879\u76ee\u8f6c\u79fb\u5230dubbo\u7ec4\u4e0b\u7684\u65b0\u9879\u76ee\u91cc\u3002 dubbo\u7ec4\u7684\u6210\u5458\u4f1a\u5bf9\u60a8\u7684\u9879\u76ee\u8fdb\u884c\u4ee3\u7801\u5ba1\u67e5\u3002\u968f\u540e\uff0c\u60a8\u53ef\u4ee5\u5bf9\u8fd9\u4e9b\u4ee3\u7801\u8fdb\u884c\u6539\u8fdb\u3002","title":"Dubbo Extension\u5411\u5bfc"},{"location":"developers/contributor-guide/dubbo-extension-guide_dev/#dubbo-extension","text":"Dubbo\u4f7f\u7528\u5fae\u5185\u6838+\u63d2\u4ef6\u7684\u8bbe\u8ba1\u6a21\u5f0f\u3002\u5185\u6838\u53ea\u8d1f\u8d23\u7ec4\u88c5\u63d2\u4ef6\uff0cDubbo\u7684\u529f\u80fd\u90fd\u662f\u7531\u6269\u5c55\u70b9\uff08\u63d2\u4ef6\uff09\u5b9e\u73b0\uff0c\u8fd9\u5c31\u610f\u5473\u7740Dubbo\u7684\u6240\u6709\u529f\u80fd\u90fd\u53ef\u4ee5\u88ab\u7528\u6237\u5b9a\u5236\u7684\u6269\u5c55\u6240\u66ff\u4ee3\u3002","title":"Dubbo Extension\u5411\u5bfc"},{"location":"developers/contributor-guide/dubbo-extension-guide_dev/#dubbo","text":"\u6211\u4eec\u5efa\u8bae\u60a8\u5c06\u6269\u5c55\u52a0\u5165\u5230Dubbo\u751f\u6001\u7cfb\u7edf\u3002\u4f7f\u7528\u8fd9\u79cd\u6a21\u5f0f\uff0c\u53ef\u4ee5\u4f7fDubbo\u7684\u6838\u5fc3\u4ed3\u5e93\u66f4\u5e72\u51c0\uff0c\u5e76\u4e14\u53ef\u4ee5\u51cf\u5c11\u7ef4\u62a4\u5de5\u4f5c\u3002\u66f4\u5c11\u7684\u4ee3\u7801\u4e5f\u53ef\u4ee5\u63d0\u9ad8\u6838\u5fc3\u4ed3\u5e93\u7684\u6784\u5efa\u901f\u5ea6\u3002","title":"Dubbo\u751f\u6001\u7cfb\u7edf"},{"location":"developers/contributor-guide/dubbo-extension-guide_dev/#_1","text":"\u8981\u5b9e\u73b0\u60a8\u81ea\u5df1\u7684Dubbo\u6269\u5c55\uff0c\u901a\u5e38\u53ea\u9700\u4f9d\u8d56API jar\u5c31\u53ef\u4ee5\u6ee1\u8db3\u60a8\u7684\u9700\u6c42\u3002\u4f8b\u5982\uff1a dependency groupId org.apache.dubbo /groupId artifactId dubbo-serialization-api /artifactId version ${dubbo.version} /version /dependency","title":"\u4f9d\u8d56"},{"location":"developers/contributor-guide/dubbo-extension-guide_dev/#src","text":"\u901a\u5e38\uff0c\u8981\u5b9e\u73b0\u7279\u6b8a\u7684\u6269\u5c55\uff0c\u53ea\u9700\u8981\u53c2\u8003 \u5f00\u53d1\u8005\u6307\u5357 \uff0c\u5b9e\u73b0Dubbo\u5fc5\u8981\u7684\u63a5\u53e3\u548c\u5408\u9002\u7684\u6269\u5c55\u5373\u53ef\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u5176\u5b83\u7684\u4e8b\u9879\u9700\u8981\u6ce8\u610f\uff1a \u826f\u597d\u7684\u6d4b\u8bd5\uff0c\u60a8\u9700\u8981\u7f16\u5199\u5355\u5143\u6d4b\u8bd5\u548c\u5192\u70df\u6d4b\u8bd5\u4ee5\u6d88\u9664\u6f5c\u5728\u7684bug\u3002 \u6ca1\u6709\u8b66\u544a\uff0c\u5982\u6709\u4e0d\u53ef\u907f\u514d\u7684\u8b66\u544a\uff0c\u8bf7\u4f7f\u7528@SuppressWarnings\u963b\u6b62\u5b83\uff0c\u4f46\u662f\u8bf7\u4e0d\u8981\u4e71\u7528\u3002 README\u3002\u6dfb\u52a0\u5fc5\u8981\u7684\u81ea\u8ff0\u4ee5\u8bf4\u660e\u5982\u4f55\u4f7f\u7528\u6269\u5c55\uff0c\u4ee5\u53ca\u9700\u8981\u6ce8\u610f\u7684\u4e8b\u9879\u3002 \u8bb8\u53ef\u8bc1\uff1a\u8bf7\u786e\u4fdd\u4f7f\u7528Apache License 2.0\u3002","title":"Src\u6307\u5bfc"},{"location":"developers/contributor-guide/dubbo-extension-guide_dev/#_2","text":"\u63d0\u4ea4\u60a8\u7684\u4ee3\u7801\u5230 github \u3002 \u52a0\u5165\u90ae\u4ef6\u5217\u8868\uff08\u5efa\u8bae\uff09\u3002\u70b9\u51fb \u8fd9\u91cc \u67e5\u770b\u5982\u4f55\u52a0\u5165\u90ae\u4ef6\u5217\u8868\u3002 \u53d1\u9001\u4e00\u5c01\u90ae\u4ef6\u5230dev@incubator.dubbo.apache.org\u901a\u77e5\u793e\u533a\u3002 \u901a\u5e38\uff0c\u53d1\u9001\u90ae\u4ef6\u4e4b\u540e\uff0c\u793e\u533a\u4f1a\u5bf9\u60a8\u7684\u6269\u5c55\u8fdb\u884c\u8ba8\u8bba\uff0cdubbo\u7ec4\u7684\u7ba1\u7406\u5458\u4f1a\u8054\u7cfb\u60a8\u8f6c\u79fb\u60a8\u7684\u9879\u76ee\u5230dubbo\u751f\u6001\u7cfb\u7edf\u3002","title":"\u901a\u77e5\u793e\u533a"},{"location":"developers/contributor-guide/dubbo-extension-guide_dev/#dubbo_1","text":"dubbo\u7ec4\u7684\u7ba1\u7406\u5458\u4f1a\u8bf7\u60a8\u5c06\u60a8\u7684\u9879\u76ee\u7684\u6240\u6709\u8005\u8f6c\u8ba9\u7ed9dubbo\u3002 dubbo\u7ec4\u7684\u7ba1\u7406\u5458\u4f1a\u5728dubbo\u7ec4\u4e0b\u65b0\u5efa\u4e00\u4e2a\u9879\u76ee\u5e76\u9080\u8bf7\u60a8\u52a0\u5165\u5230\u8fd9\u4e2a\u9879\u76ee\u3002 \u4e00\u65e6\u60a8\u63a5\u53d7\u9080\u8bf7\uff0c\u60a8\u53ef\u4ee5\u5c06\u60a8\u7684\u9879\u76ee\u8f6c\u79fb\u5230dubbo\u7ec4\u4e0b\u7684\u65b0\u9879\u76ee\u91cc\u3002 dubbo\u7ec4\u7684\u6210\u5458\u4f1a\u5bf9\u60a8\u7684\u9879\u76ee\u8fdb\u884c\u4ee3\u7801\u5ba1\u67e5\u3002\u968f\u540e\uff0c\u60a8\u53ef\u4ee5\u5bf9\u8fd9\u4e9b\u4ee3\u7801\u8fdb\u884c\u6539\u8fdb\u3002","title":"\u8f6c\u79fb\u9879\u76ee\u5230dubbo\u751f\u6001\u7cfb\u7edf"},{"location":"developers/contributor-guide/mailing-list-subscription-guide_dev/","text":"\u90ae\u4ef6\u5217\u8868\u8ba2\u9605\u5411\u5bfc Apache incubator\u7684Dubbo\u5f00\u53d1\u8005\u90ae\u4ef6\u5217\u8868\uff08dev@dubbo.apache.org\uff09\u5df2\u7ecf\u5efa\u7acb\uff0c\u8bf7\u968f\u65f6\u8ba2\u9605\u5e76\u53c2\u8003[^1]\u83b7\u53d6\u66f4\u591a\u7ec6\u8282\u3002 \u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u67e5\u770b \u5386\u53f2\u90ae\u4ef6 \u4e0b\u9762\u662f\u4e00\u4e2a\u5173\u4e8eDubbo\u90ae\u4ef6\u5217\u8868\u8ba2\u9605\u7684\u7b80\u77ed\u6307\u5357\uff1a \u53d1\u4e00\u5c01\u90ae\u4ef6\u5230dev-subscribe@dubbo.apache.org\uff0c\u5176\u5185\u5bb9\u548c\u6807\u9898\u5747\u53ef\u4e3a\u7a7a\u3002\u968f\u540e\uff0c\u60a8\u4f1a\u6536\u5230\u4e00\u5c01\u90ae\u4ef6\uff0c\u5176\u5185\u5bb9\u5982\u4e0b\uff1a from: dev-help@dubbo.apache.org reply-to: dev-sc.xxxxxxx.xxxxxxxx-hello=example.com@dubbo.apache.org to: hello@example.com date: Sat, Feb 24, 2018 at 3:12 PM subject: confirm subscribe to dev@dubbo.apache.org mailed-by: apache.org Hi! This is the ezmlm program. I'm managing the dev@dubbo.apache.org mailing list. I'm working for my owner, who can be reached at dev-owner@dubbo.apache.org. To confirm that you would like hello@example.com added to the dev mailing list, please send a short reply to this address: dev-sc.xxxxxxx.xxxxxxxx-hello=example.com@dubbo.apache.org Usually, this happens when you just hit the reply button. If this does not work, simply copy the address and paste it into the To: field of a new message. or click here: mailto:dev-sc.xxxxxxx.xxxxxxxx-hello=example.com@dubbo.apache.org ... \u76f4\u63a5\u56de\u590d\u90ae\u4ef6\uff0c\u5176\u5185\u5bb9\u548c\u6807\u9898\u4ecd\u7136\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u968f\u540e\uff0c\u60a8\u5c06\u518d\u6b21\u6536\u5230\u4e00\u5c01\u90ae\u4ef6\uff0c\u5176\u5185\u5bb9\u5982\u4e0b\uff1a from: dev-help@dubbo.apache.org to: hello@example.com date: Sat, Feb 24, 2018 at 3:14 PM subject: WELCOME to dev@dubbo.apache.org mailed-by: apache.org Hi! This is the ezmlm program. I'm managing the dev@dubbo.apache.org mailing list. I'm working for my owner, who can be reached at dev-owner@dubbo.apache.org. Acknowledgment: I have added the address hello@example.com to the dev mailing list. Welcome to dev@dubbo.apache.org! Please save this message so that you know the address you are subscribed under, in case you later want to unsubscribe or change your subscription address. ... \u5230\u6b64\uff0c\u90ae\u4ef6\u5217\u8868\u8ba2\u9605\u5b8c\u6bd5\uff0c\u4ece\u73b0\u5728\u5f00\u59cb\uff0c\u60a8\u5c06\u6536\u5230\u5f88\u591a\u53d1\u9001\u5230\u8be5\u90ae\u4ef6\u5217\u8868\u7684\u90ae\u4ef6\uff0c\u5982\u679c\u60a8\u6709\u66f4\u591a\u7684\u95ee\u9898\uff0c\u53ea\u9700\u53d1\u9001\u90ae\u4ef6\u5230dev@dubbo.apache.org\uff0c\u5c31\u4f1a\u6709\u4eba\u56de\u7b54\u60a8\u7684\u95ee\u9898\u3002 \u5982\u679c\u60a8\u60f3\u53d6\u6d88\u8ba2\u9605\uff0c\u53ea\u9700\u53d1\u9001\u4e00\u5c01\u90ae\u4ef6\u5230dev-unsubscribe@dubbo.apache.org\uff0c\u6536\u5230\u56de\u590d\u540e\uff0c\u8bf7\u6309\u5176\u6307\u5b9a\u6b65\u9aa4\u6267\u884c\u3002 \u8bf7\u6ce8\u610f\uff1adev@dubbo.apache.org\u548cdev@dubbo.apache.org\u90fd\u662f\u6709\u6548\u7684, \u60a8\u53ef\u4ee5\u8ba2\u9605\u5b83\u4eec\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u3002 [^1] http://apache.org/foundation/mailinglists.html#subscribing","title":"\u90ae\u4ef6\u5217\u8868\u8ba2\u9605\u5411\u5bfc"},{"location":"developers/contributor-guide/mailing-list-subscription-guide_dev/#_1","text":"Apache incubator\u7684Dubbo\u5f00\u53d1\u8005\u90ae\u4ef6\u5217\u8868\uff08dev@dubbo.apache.org\uff09\u5df2\u7ecf\u5efa\u7acb\uff0c\u8bf7\u968f\u65f6\u8ba2\u9605\u5e76\u53c2\u8003[^1]\u83b7\u53d6\u66f4\u591a\u7ec6\u8282\u3002 \u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u67e5\u770b \u5386\u53f2\u90ae\u4ef6 \u4e0b\u9762\u662f\u4e00\u4e2a\u5173\u4e8eDubbo\u90ae\u4ef6\u5217\u8868\u8ba2\u9605\u7684\u7b80\u77ed\u6307\u5357\uff1a \u53d1\u4e00\u5c01\u90ae\u4ef6\u5230dev-subscribe@dubbo.apache.org\uff0c\u5176\u5185\u5bb9\u548c\u6807\u9898\u5747\u53ef\u4e3a\u7a7a\u3002\u968f\u540e\uff0c\u60a8\u4f1a\u6536\u5230\u4e00\u5c01\u90ae\u4ef6\uff0c\u5176\u5185\u5bb9\u5982\u4e0b\uff1a from: dev-help@dubbo.apache.org reply-to: dev-sc.xxxxxxx.xxxxxxxx-hello=example.com@dubbo.apache.org to: hello@example.com date: Sat, Feb 24, 2018 at 3:12 PM subject: confirm subscribe to dev@dubbo.apache.org mailed-by: apache.org Hi! This is the ezmlm program. I'm managing the dev@dubbo.apache.org mailing list. I'm working for my owner, who can be reached at dev-owner@dubbo.apache.org. To confirm that you would like hello@example.com added to the dev mailing list, please send a short reply to this address: dev-sc.xxxxxxx.xxxxxxxx-hello=example.com@dubbo.apache.org Usually, this happens when you just hit the reply button. If this does not work, simply copy the address and paste it into the To: field of a new message. or click here: mailto:dev-sc.xxxxxxx.xxxxxxxx-hello=example.com@dubbo.apache.org ... \u76f4\u63a5\u56de\u590d\u90ae\u4ef6\uff0c\u5176\u5185\u5bb9\u548c\u6807\u9898\u4ecd\u7136\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u968f\u540e\uff0c\u60a8\u5c06\u518d\u6b21\u6536\u5230\u4e00\u5c01\u90ae\u4ef6\uff0c\u5176\u5185\u5bb9\u5982\u4e0b\uff1a from: dev-help@dubbo.apache.org to: hello@example.com date: Sat, Feb 24, 2018 at 3:14 PM subject: WELCOME to dev@dubbo.apache.org mailed-by: apache.org Hi! This is the ezmlm program. I'm managing the dev@dubbo.apache.org mailing list. I'm working for my owner, who can be reached at dev-owner@dubbo.apache.org. Acknowledgment: I have added the address hello@example.com to the dev mailing list. Welcome to dev@dubbo.apache.org! Please save this message so that you know the address you are subscribed under, in case you later want to unsubscribe or change your subscription address. ... \u5230\u6b64\uff0c\u90ae\u4ef6\u5217\u8868\u8ba2\u9605\u5b8c\u6bd5\uff0c\u4ece\u73b0\u5728\u5f00\u59cb\uff0c\u60a8\u5c06\u6536\u5230\u5f88\u591a\u53d1\u9001\u5230\u8be5\u90ae\u4ef6\u5217\u8868\u7684\u90ae\u4ef6\uff0c\u5982\u679c\u60a8\u6709\u66f4\u591a\u7684\u95ee\u9898\uff0c\u53ea\u9700\u53d1\u9001\u90ae\u4ef6\u5230dev@dubbo.apache.org\uff0c\u5c31\u4f1a\u6709\u4eba\u56de\u7b54\u60a8\u7684\u95ee\u9898\u3002 \u5982\u679c\u60a8\u60f3\u53d6\u6d88\u8ba2\u9605\uff0c\u53ea\u9700\u53d1\u9001\u4e00\u5c01\u90ae\u4ef6\u5230dev-unsubscribe@dubbo.apache.org\uff0c\u6536\u5230\u56de\u590d\u540e\uff0c\u8bf7\u6309\u5176\u6307\u5b9a\u6b65\u9aa4\u6267\u884c\u3002 \u8bf7\u6ce8\u610f\uff1adev@dubbo.apache.org\u548cdev@dubbo.apache.org\u90fd\u662f\u6709\u6548\u7684, \u60a8\u53ef\u4ee5\u8ba2\u9605\u5b83\u4eec\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u3002 [^1] http://apache.org/foundation/mailinglists.html#subscribing","title":"\u90ae\u4ef6\u5217\u8868\u8ba2\u9605\u5411\u5bfc"},{"location":"developers/contributor-guide/new-contributor-guide_dev/","text":"\u65b0\u8d21\u732e\u8005\u5411\u5bfc \u8fd9\u7bc7\u5411\u5bfc\u65e8\u5728\u7ed9\u6b63\u5728\u51c6\u5907\u5411Dubbo\u63d0\u4ea4\u8d21\u732e\u7684\u65b0\u624b\u63d0\u4f9b\u6307\u5bfc\u3002 \u90ae\u4ef6\u5217\u8868\u63cf\u8ff0 \u90ae\u4ef6\u5217\u8868\u662fDubbo\u5b98\u65b9\u63a8\u8350\u7684\u8ba8\u8bba\u65b9\u5f0f\uff0c\u6240\u6709\u4e0eDubbo\u76f8\u5173\u7684\u5185\u5bb9\u90fd\u53ef\u4ee5\u5728\u8fd9\u91cc\u8ba8\u8bba\uff0c\u8bf7\u70b9\u51fb issue \u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u90ae\u4ef6\u5217\u8868\u8ba2\u9605\u7684\u5185\u5bb9 \u5982\u9700\u8ba2\u9605\u5982\u4e0b\u90ae\u4ef6\u5217\u8868\uff0c\u8bf7\u53c2\u8003 \u90ae\u4ef6\u5217\u8868\u8ba2\u9605\u5411\u5bfc dev@dubbo.apache.org\uff1a\u5f00\u53d1\u90ae\u4ef6\u5217\u8868\uff0c\u60a8\u5728\u4f7f\u7528\u6216\u8005\u5f00\u53d1Dubbo\u7684\u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u4efb\u4f55\u95ee\u9898\uff0c\u90fd\u53ef\u4ee5\u5728\u8fd9\u91cc\u8fdb\u884c\u63d0\u95ee\u3002 commits@dubbo.apache.org\uff1a\u6240\u6709\u7684\u63d0\u4ea4\u5185\u5bb9\u90fd\u4f1a\u63a8\u9001\u5230\u8fd9\u4e2a\u90ae\u4ef6\u5217\u8868\uff0c\u5982\u679c\u60a8\u5bf9Dubbo\u7684\u8fdb\u5c55\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u8ba2\u9605\u8fd9\u4e2a\u90ae\u4ef6\u5217\u8868\u3002 issues@dubbo.apache.org\uff1a\u6240\u6709\u7684 JIRA issues \u548c\u4fee\u6539\u4fe1\u606f\u90fd\u4f1a\u63a8\u9001\u5230\u8fd9\u4e2a\u90ae\u4ef6\u5217\u8868\u3002Dubbo\u793e\u533a\u5df2\u7ecf\u51b3\u5b9a\u4f7f\u7528github issues\u4ee3\u66ffJIRA issues\uff0c\u56e0\u6b64\u5927\u90e8\u5206issues\u5c06\u7531github issues\u8fdb\u884c\u8ddf\u8e2a\u3002JIRA issues\u7528\u4e8e\u8ddf\u8e2aASF\u76f8\u5173\u95ee\u9898\u3002 \u62a5\u544a\u95ee\u9898 \u53d1\u9001 pull request \u53c2\u8003 pull request template \u4e2d\u7684\u68c0\u67e5\u5217\u8868 \u5728\u60a8\u53d1\u9001pull request\u4e4b\u524d\uff0c\u8bf7\u540c\u6b65\u60a8\u7684github\u4ed3\u5e93\u548c\u8fdc\u7a0b\u4ed3\u5e93\uff0c\u8fd9\u4f1a\u4f7f\u60a8\u7684pull request\u7b80\u5355\u660e\u4e86\uff0c\u5177\u4f53\u64cd\u4f5c\u8bf7\u770b\u5982\u4e0b\u6240\u793a\u6b65\u9aa4\uff1a git remote add upstream git@github.com:apache/dubbo.git git fetch upstream git rebase upstream/master git checkout -b your_awesome_patch ... add some work git push origin your_awesome_patch \u7f16\u7801\u89c4\u8303 \u8bf7\u6309\u7167 CONTRIBUTING.md \u4e2d\u7684\u7f16\u7801\u89c4\u8303\u5bf9\u81ea\u5df1\u7684\u4ee3\u7801\u8fdb\u884c\u68c0\u67e5\u3002 \u53c2\u4e0e\u53d1\u5e03\u6295\u7968 \u53c2\u4e0e\u53d1\u5e03\u6295\u7968\u662f\u4e00\u79cd\u91cd\u8981\u7684\u8d21\u732e\u793e\u533a\u7684\u65b9\u5f0f\uff0cDubbo\u793e\u533a\u975e\u5e38\u6b22\u8fce\u548c\u9f13\u52b1\u4efb\u4f55\u4eba\u53c2\u4e0e\u6295\u7968\uff0c\u6bcf\u5f53\u4e00\u4e2a\u7248\u672c\u9700\u8981\u6b63\u5f0f\u53d1\u5e03\u7684\u65f6\u5019\uff0c\u4f1a\u5728\u5f00\u53d1\u8005\u90ae\u4ef6\u5217\u8868\u4e0a\u8fdb\u884c\u53d1\u5e03\u6295\u7968\uff0c\u53ea\u6709\u5f53\u6295\u7968\u53d6\u5f97\u901a\u8fc7\u4e4b\u540e\uff0c\u624d\u4f1a\u6b63\u5f0f\u53d1\u5e03\uff0c\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e2a \u68c0\u67e5\u5217\u8868 \u5bf9\u6e90\u7801\u8fdb\u884c\u5408\u89c4\u6027\u68c0\u67e5\u3002\u5982\u679c\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u5728\u5f00\u53d1\u8005\u90ae\u4ef6\u5217\u8868\u4e0a\u63d0\u95ee\u3002","title":"\u65b0\u8d21\u732e\u8005\u5411\u5bfc"},{"location":"developers/contributor-guide/new-contributor-guide_dev/#_1","text":"\u8fd9\u7bc7\u5411\u5bfc\u65e8\u5728\u7ed9\u6b63\u5728\u51c6\u5907\u5411Dubbo\u63d0\u4ea4\u8d21\u732e\u7684\u65b0\u624b\u63d0\u4f9b\u6307\u5bfc\u3002","title":"\u65b0\u8d21\u732e\u8005\u5411\u5bfc"},{"location":"developers/contributor-guide/new-contributor-guide_dev/#_2","text":"\u90ae\u4ef6\u5217\u8868\u662fDubbo\u5b98\u65b9\u63a8\u8350\u7684\u8ba8\u8bba\u65b9\u5f0f\uff0c\u6240\u6709\u4e0eDubbo\u76f8\u5173\u7684\u5185\u5bb9\u90fd\u53ef\u4ee5\u5728\u8fd9\u91cc\u8ba8\u8bba\uff0c\u8bf7\u70b9\u51fb issue \u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u90ae\u4ef6\u5217\u8868\u8ba2\u9605\u7684\u5185\u5bb9 \u5982\u9700\u8ba2\u9605\u5982\u4e0b\u90ae\u4ef6\u5217\u8868\uff0c\u8bf7\u53c2\u8003 \u90ae\u4ef6\u5217\u8868\u8ba2\u9605\u5411\u5bfc dev@dubbo.apache.org\uff1a\u5f00\u53d1\u90ae\u4ef6\u5217\u8868\uff0c\u60a8\u5728\u4f7f\u7528\u6216\u8005\u5f00\u53d1Dubbo\u7684\u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u4efb\u4f55\u95ee\u9898\uff0c\u90fd\u53ef\u4ee5\u5728\u8fd9\u91cc\u8fdb\u884c\u63d0\u95ee\u3002 commits@dubbo.apache.org\uff1a\u6240\u6709\u7684\u63d0\u4ea4\u5185\u5bb9\u90fd\u4f1a\u63a8\u9001\u5230\u8fd9\u4e2a\u90ae\u4ef6\u5217\u8868\uff0c\u5982\u679c\u60a8\u5bf9Dubbo\u7684\u8fdb\u5c55\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u8ba2\u9605\u8fd9\u4e2a\u90ae\u4ef6\u5217\u8868\u3002 issues@dubbo.apache.org\uff1a\u6240\u6709\u7684 JIRA issues \u548c\u4fee\u6539\u4fe1\u606f\u90fd\u4f1a\u63a8\u9001\u5230\u8fd9\u4e2a\u90ae\u4ef6\u5217\u8868\u3002Dubbo\u793e\u533a\u5df2\u7ecf\u51b3\u5b9a\u4f7f\u7528github issues\u4ee3\u66ffJIRA issues\uff0c\u56e0\u6b64\u5927\u90e8\u5206issues\u5c06\u7531github issues\u8fdb\u884c\u8ddf\u8e2a\u3002JIRA issues\u7528\u4e8e\u8ddf\u8e2aASF\u76f8\u5173\u95ee\u9898\u3002","title":"\u90ae\u4ef6\u5217\u8868\u63cf\u8ff0"},{"location":"developers/contributor-guide/new-contributor-guide_dev/#_3","text":"","title":"\u62a5\u544a\u95ee\u9898"},{"location":"developers/contributor-guide/new-contributor-guide_dev/#pull-request","text":"\u53c2\u8003 pull request template \u4e2d\u7684\u68c0\u67e5\u5217\u8868 \u5728\u60a8\u53d1\u9001pull request\u4e4b\u524d\uff0c\u8bf7\u540c\u6b65\u60a8\u7684github\u4ed3\u5e93\u548c\u8fdc\u7a0b\u4ed3\u5e93\uff0c\u8fd9\u4f1a\u4f7f\u60a8\u7684pull request\u7b80\u5355\u660e\u4e86\uff0c\u5177\u4f53\u64cd\u4f5c\u8bf7\u770b\u5982\u4e0b\u6240\u793a\u6b65\u9aa4\uff1a git remote add upstream git@github.com:apache/dubbo.git git fetch upstream git rebase upstream/master git checkout -b your_awesome_patch ... add some work git push origin your_awesome_patch","title":"\u53d1\u9001 pull request"},{"location":"developers/contributor-guide/new-contributor-guide_dev/#_4","text":"\u8bf7\u6309\u7167 CONTRIBUTING.md \u4e2d\u7684\u7f16\u7801\u89c4\u8303\u5bf9\u81ea\u5df1\u7684\u4ee3\u7801\u8fdb\u884c\u68c0\u67e5\u3002","title":"\u7f16\u7801\u89c4\u8303"},{"location":"developers/contributor-guide/new-contributor-guide_dev/#_5","text":"\u53c2\u4e0e\u53d1\u5e03\u6295\u7968\u662f\u4e00\u79cd\u91cd\u8981\u7684\u8d21\u732e\u793e\u533a\u7684\u65b9\u5f0f\uff0cDubbo\u793e\u533a\u975e\u5e38\u6b22\u8fce\u548c\u9f13\u52b1\u4efb\u4f55\u4eba\u53c2\u4e0e\u6295\u7968\uff0c\u6bcf\u5f53\u4e00\u4e2a\u7248\u672c\u9700\u8981\u6b63\u5f0f\u53d1\u5e03\u7684\u65f6\u5019\uff0c\u4f1a\u5728\u5f00\u53d1\u8005\u90ae\u4ef6\u5217\u8868\u4e0a\u8fdb\u884c\u53d1\u5e03\u6295\u7968\uff0c\u53ea\u6709\u5f53\u6295\u7968\u53d6\u5f97\u901a\u8fc7\u4e4b\u540e\uff0c\u624d\u4f1a\u6b63\u5f0f\u53d1\u5e03\uff0c\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e2a \u68c0\u67e5\u5217\u8868 \u5bf9\u6e90\u7801\u8fdb\u884c\u5408\u89c4\u6027\u68c0\u67e5\u3002\u5982\u679c\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u5728\u5f00\u53d1\u8005\u90ae\u4ef6\u5217\u8868\u4e0a\u63d0\u95ee\u3002","title":"\u53c2\u4e0e\u53d1\u5e03\u6295\u7968"},{"location":"developers/contributor-guide/reporting-security-issues_dev/","text":"\u62a5\u544a\u5b89\u5168\u95ee\u9898 Apache Software Foundation\u5728\u6d88\u9664\u5176\u8f6f\u4ef6\u9879\u76ee\u4e2d\u7684\u5b89\u5168\u6027\u95ee\u9898\u65b9\u9762\u91c7\u53d6\u4e25\u683c\u7684\u7acb\u573a\u3002Apache Dubbo\u5bf9\u4e0e\u5176\u529f\u80fd\u548c\u7279\u6027\u6709\u5173\u7684\u95ee\u9898\u975e\u5e38\u654f\u611f\u5e76\u5f88\u5feb\u63d0\u51fa\u3002 \u62a5\u544a\u6f0f\u6d1e \u5982\u679c\u60a8\u5bf9Dubbo\u7684\u5b89\u5168\u6027\u6709\u62c5\u5fc3\uff0c\u6216\u8005\u53d1\u73b0\u6f0f\u6d1e\u6216\u6f5c\u5728\u5a01\u80c1\uff0c\u8bf7\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u81f3security@dubbo.apache.org\u4e0eApache Dubbo\u5b89\u5168\u56e2\u961f\u8054\u7cfb\u3002\u5728\u90ae\u4ef6\u4e2d\uff0c\u6307\u5b9a\u95ee\u9898\u6216\u6f5c\u5728\u5a01\u80c1\u7684\u63cf\u8ff0\u3002\u8fd8\u6566\u4fc3\u60a8\u63a8\u8350\u91cd\u73b0\u548c\u590d\u5236\u95ee\u9898\u7684\u65b9\u6cd5\u3002Dubbo\u793e\u533a\u4f1a\u5728\u8bc4\u4f30\u548c\u5206\u6790\u8c03\u67e5\u7ed3\u679c\u4e4b\u540e\u4e0e\u60a8\u8054\u7cfb\u3002 \u8bf7\u5148\u6ce8\u610f\u5728\u5b89\u5168\u7535\u5b50\u90ae\u4ef6\u4e2d\u62a5\u544a\u5b89\u5168\u95ee\u9898\uff0c\u7136\u540e\u518d\u5728\u516c\u5171\u9886\u57df\u516c\u5f00\u8be5\u95ee\u9898\u3002 \u6f0f\u6d1e\u5904\u7406 \u6f0f\u6d1e\u5904\u7406\u8fc7\u7a0b\u7684\u6982\u8ff0\u662f\uff1a \u62a5\u544a\u8005\u5c06\u6f0f\u6d1e\u79d8\u5bc6\u62a5\u544a\u7ed9Apache\u3002 \u76f8\u5e94\u9879\u76ee\u7684\u5b89\u5168\u56e2\u961f\u4e0e\u62a5\u544a\u8005\u79c1\u4e0b\u5408\u4f5c\u6765\u89e3\u51b3\u6f0f\u6d1e\u3002 \u5236\u4f5c\u4e86\u5305\u542b\u8be5\u4fee\u590d\u7a0b\u5e8f\u7684\u6709\u5173Apache\u4ea7\u54c1\u7684\u65b0\u7248\u672c\u3002 \u8be5\u6f0f\u6d1e\u5df2\u516c\u5f00\u5ba3\u5e03\u3002 \u6709\u5173\u6b64\u8fc7\u7a0b\u7684\u8be6\u7ec6\u8bf4\u660e\uff0c\u8bf7\u53c2\u89c1 \u6b64\u5904","title":"\u62a5\u544a\u5b89\u5168\u95ee\u9898"},{"location":"developers/contributor-guide/reporting-security-issues_dev/#_1","text":"Apache Software Foundation\u5728\u6d88\u9664\u5176\u8f6f\u4ef6\u9879\u76ee\u4e2d\u7684\u5b89\u5168\u6027\u95ee\u9898\u65b9\u9762\u91c7\u53d6\u4e25\u683c\u7684\u7acb\u573a\u3002Apache Dubbo\u5bf9\u4e0e\u5176\u529f\u80fd\u548c\u7279\u6027\u6709\u5173\u7684\u95ee\u9898\u975e\u5e38\u654f\u611f\u5e76\u5f88\u5feb\u63d0\u51fa\u3002","title":"\u62a5\u544a\u5b89\u5168\u95ee\u9898"},{"location":"developers/contributor-guide/reporting-security-issues_dev/#_2","text":"\u5982\u679c\u60a8\u5bf9Dubbo\u7684\u5b89\u5168\u6027\u6709\u62c5\u5fc3\uff0c\u6216\u8005\u53d1\u73b0\u6f0f\u6d1e\u6216\u6f5c\u5728\u5a01\u80c1\uff0c\u8bf7\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u81f3security@dubbo.apache.org\u4e0eApache Dubbo\u5b89\u5168\u56e2\u961f\u8054\u7cfb\u3002\u5728\u90ae\u4ef6\u4e2d\uff0c\u6307\u5b9a\u95ee\u9898\u6216\u6f5c\u5728\u5a01\u80c1\u7684\u63cf\u8ff0\u3002\u8fd8\u6566\u4fc3\u60a8\u63a8\u8350\u91cd\u73b0\u548c\u590d\u5236\u95ee\u9898\u7684\u65b9\u6cd5\u3002Dubbo\u793e\u533a\u4f1a\u5728\u8bc4\u4f30\u548c\u5206\u6790\u8c03\u67e5\u7ed3\u679c\u4e4b\u540e\u4e0e\u60a8\u8054\u7cfb\u3002 \u8bf7\u5148\u6ce8\u610f\u5728\u5b89\u5168\u7535\u5b50\u90ae\u4ef6\u4e2d\u62a5\u544a\u5b89\u5168\u95ee\u9898\uff0c\u7136\u540e\u518d\u5728\u516c\u5171\u9886\u57df\u516c\u5f00\u8be5\u95ee\u9898\u3002","title":"\u62a5\u544a\u6f0f\u6d1e"},{"location":"developers/contributor-guide/reporting-security-issues_dev/#_3","text":"\u6f0f\u6d1e\u5904\u7406\u8fc7\u7a0b\u7684\u6982\u8ff0\u662f\uff1a \u62a5\u544a\u8005\u5c06\u6f0f\u6d1e\u79d8\u5bc6\u62a5\u544a\u7ed9Apache\u3002 \u76f8\u5e94\u9879\u76ee\u7684\u5b89\u5168\u56e2\u961f\u4e0e\u62a5\u544a\u8005\u79c1\u4e0b\u5408\u4f5c\u6765\u89e3\u51b3\u6f0f\u6d1e\u3002 \u5236\u4f5c\u4e86\u5305\u542b\u8be5\u4fee\u590d\u7a0b\u5e8f\u7684\u6709\u5173Apache\u4ea7\u54c1\u7684\u65b0\u7248\u672c\u3002 \u8be5\u6f0f\u6d1e\u5df2\u516c\u5f00\u5ba3\u5e03\u3002 \u6709\u5173\u6b64\u8fc7\u7a0b\u7684\u8be6\u7ec6\u8bf4\u660e\uff0c\u8bf7\u53c2\u89c1 \u6b64\u5904","title":"\u6f0f\u6d1e\u5904\u7406"},{"location":"developers/contributor-guide/software-donation-guide_dev/","text":"\u8f6f\u4ef6\u6350\u732e\u5411\u5bfc \u5728\u60a8\u9605\u8bfb\u8fd9\u7bc7\u6307\u5357\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u7ecf\u5411PMC\u786e\u8ba4\u4e86\u5b9e\u9645\u9700\u8981\u7684SGA\u3002 \u5982\u679c\u60a8\u5411Apache Dubbo \u6350\u8d60\u4e86\u5927\u91cf\u7684\u4ee3\u7801\u6216\u6587\u6863\uff0c\u5219\u9700\u8981\u5728\u5408\u5e76\u4ee3\u7801\u6216\u8005\u6587\u6863\u4e4b\u524d\u7b7e\u7f72 \u8f6f\u4ef6\u6388\u6743\u4e66 \u3002 \u64cd\u4f5c\u6b65\u9aa4 \u4e0b\u8f7d\u8fd9\u7bc7 pdf\u6587\u6863 \u6253\u5370\u4e0b\u8f7d\u597d\u7684\u6587\u6863 \u6309\u8981\u6c42\u586b\u5145\u8868\u683c\uff08\u8bf7\u770b\u4e0b\u8fb9\u793a\u4f8b\uff09 \u8bf7\u60a8\u7684\u9886\u5bfc\u5728\u4e0a\u8fb9\u7b7e\u5b57 \u626b\u63cf \u5c06\u626b\u63cf\u597d\u7684\u6587\u6863\u4ee5\u90ae\u4ef6\u7684\u65b9\u5f0f\u53d1\u9001\u7ed9secretary@apache.org\uff0c\u5e76\u6284\u9001\u7ed9private@dubbo.apache.org \u793a\u4f8b \u4e0b\u8fb9\u662f\u4e00\u4e2a\u6587\u672c\u793a\u4f8b\uff0c\u539f\u59cb\u6587\u672c\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230 License Agreement This License Agreement is entered into as of the _12th_ day of ___April____, __2018__ by ___ABC Software Co., Ltd.____ ( Licensor ), in favor of The Apache Software Foundation, a Delaware nonstock membership corporation (the Foundation ). WHEREAS, Licensor owns or has sufficient rights to contribute the software source code and other related intellectual property as itemized on Exhibit A ( Software ) under the terms of this agreement to the Foundation for use within Foundation software development projects ( Projects ). NOW, THEREFORE, FOR GOOD AND VALUABLE CONSIDERATION, the receipt and legal sufficiency of which are hereby acknowledged, the parties hereto, intending to be legally bound, agree as follows: 1. Subject to the terms and conditions of this License, Licensor hereby grants to the Foundation: a) a non-exclusive, worldwide, royalty-free, irrevocable copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, distribute and sublicense, internally and externally, the Software and such derivative works, in source code and object code form; and, b) a non-exclusive, worldwide, royalty-free, irrevocable patent license under Licensed Patents to make, use, sell, offer to sell, import and otherwise transfer the Software in source code and object code form. Licensed Patents mean patent claims owned by Licensor which are necessarily infringed by the use or sale of the Software alone. 2. Licensor represents that, to Licensor's knowledge, Licensor is legally entitled to grant the above license. Licensor agrees to notify the Foundation of any facts or circumstances of which Licensor becomes aware and which makes or would make Licensor's representations in this License Agreement inaccurate in any respect. 3. This Software is provided AS-IS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. NEITHER THE LICENSOR NOR ITS SUPPLIERS WILL BE LIABLE TO THE FOUNDATION OR ITS LICENSEES FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE WORK OR THE EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. This License Agreement is the entire agreement of the parties with respect to its subject matter, and may only be amended by a writing signed by each party. This License Agreement may be executed in one or more counterparts, each of which shall be considered an original. IN WITNESS WHEREOF, Licensor has executed this License Agreement as of the date first written above. LICENSOR: Signed By: _____________________________________ --- Your boss's sign here Print Name: _____Lei Li_________________________ --- Your boss's name here Title: ____Director_____________________________ --- Your boss's title here Representing: ____ABC Software Co., Ltd. _______ ________________________________________________ Contact Name: ____Lei Li________________________ --- Your boss's name here Contact Email: ____lilei@abc.com________________ --- Your boss's email here Exhibit A List of software and other intellectual property covered by this agreement: * Github address where your code is hosted * Pull request link","title":"\u8f6f\u4ef6\u6350\u732e\u5411\u5bfc"},{"location":"developers/contributor-guide/software-donation-guide_dev/#_1","text":"\u5728\u60a8\u9605\u8bfb\u8fd9\u7bc7\u6307\u5357\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u7ecf\u5411PMC\u786e\u8ba4\u4e86\u5b9e\u9645\u9700\u8981\u7684SGA\u3002 \u5982\u679c\u60a8\u5411Apache Dubbo \u6350\u8d60\u4e86\u5927\u91cf\u7684\u4ee3\u7801\u6216\u6587\u6863\uff0c\u5219\u9700\u8981\u5728\u5408\u5e76\u4ee3\u7801\u6216\u8005\u6587\u6863\u4e4b\u524d\u7b7e\u7f72 \u8f6f\u4ef6\u6388\u6743\u4e66 \u3002","title":"\u8f6f\u4ef6\u6350\u732e\u5411\u5bfc"},{"location":"developers/contributor-guide/software-donation-guide_dev/#_2","text":"\u4e0b\u8f7d\u8fd9\u7bc7 pdf\u6587\u6863 \u6253\u5370\u4e0b\u8f7d\u597d\u7684\u6587\u6863 \u6309\u8981\u6c42\u586b\u5145\u8868\u683c\uff08\u8bf7\u770b\u4e0b\u8fb9\u793a\u4f8b\uff09 \u8bf7\u60a8\u7684\u9886\u5bfc\u5728\u4e0a\u8fb9\u7b7e\u5b57 \u626b\u63cf \u5c06\u626b\u63cf\u597d\u7684\u6587\u6863\u4ee5\u90ae\u4ef6\u7684\u65b9\u5f0f\u53d1\u9001\u7ed9secretary@apache.org\uff0c\u5e76\u6284\u9001\u7ed9private@dubbo.apache.org","title":"\u64cd\u4f5c\u6b65\u9aa4"},{"location":"developers/contributor-guide/software-donation-guide_dev/#_3","text":"\u4e0b\u8fb9\u662f\u4e00\u4e2a\u6587\u672c\u793a\u4f8b\uff0c\u539f\u59cb\u6587\u672c\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230 License Agreement This License Agreement is entered into as of the _12th_ day of ___April____, __2018__ by ___ABC Software Co., Ltd.____ ( Licensor ), in favor of The Apache Software Foundation, a Delaware nonstock membership corporation (the Foundation ). WHEREAS, Licensor owns or has sufficient rights to contribute the software source code and other related intellectual property as itemized on Exhibit A ( Software ) under the terms of this agreement to the Foundation for use within Foundation software development projects ( Projects ). NOW, THEREFORE, FOR GOOD AND VALUABLE CONSIDERATION, the receipt and legal sufficiency of which are hereby acknowledged, the parties hereto, intending to be legally bound, agree as follows: 1. Subject to the terms and conditions of this License, Licensor hereby grants to the Foundation: a) a non-exclusive, worldwide, royalty-free, irrevocable copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, distribute and sublicense, internally and externally, the Software and such derivative works, in source code and object code form; and, b) a non-exclusive, worldwide, royalty-free, irrevocable patent license under Licensed Patents to make, use, sell, offer to sell, import and otherwise transfer the Software in source code and object code form. Licensed Patents mean patent claims owned by Licensor which are necessarily infringed by the use or sale of the Software alone. 2. Licensor represents that, to Licensor's knowledge, Licensor is legally entitled to grant the above license. Licensor agrees to notify the Foundation of any facts or circumstances of which Licensor becomes aware and which makes or would make Licensor's representations in this License Agreement inaccurate in any respect. 3. This Software is provided AS-IS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. NEITHER THE LICENSOR NOR ITS SUPPLIERS WILL BE LIABLE TO THE FOUNDATION OR ITS LICENSEES FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE WORK OR THE EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. This License Agreement is the entire agreement of the parties with respect to its subject matter, and may only be amended by a writing signed by each party. This License Agreement may be executed in one or more counterparts, each of which shall be considered an original. IN WITNESS WHEREOF, Licensor has executed this License Agreement as of the date first written above. LICENSOR: Signed By: _____________________________________ --- Your boss's sign here Print Name: _____Lei Li_________________________ --- Your boss's name here Title: ____Director_____________________________ --- Your boss's title here Representing: ____ABC Software Co., Ltd. _______ ________________________________________________ Contact Name: ____Lei Li________________________ --- Your boss's name here Contact Email: ____lilei@abc.com________________ --- Your boss's email here Exhibit A List of software and other intellectual property covered by this agreement: * Github address where your code is hosted * Pull request link","title":"\u793a\u4f8b"},{"location":"developers/contributor-guide/test-coverage-guide_dev/","text":"\u6d4b\u8bd5\u8986\u76d6\u7387\u5411\u5bfc 1.\u5199\u5355\u5143\u6d4b\u8bd5\u7684\u6536\u76ca \u5355\u5143\u6d4b\u8bd5\u80fd\u5e2e\u52a9\u6bcf\u4e2a\u4eba\u6df1\u5165\u4ee3\u7801\u7ec6\u8282\uff0c\u4e86\u89e3\u4ee3\u7801\u7684\u529f\u80fd\u3002 \u901a\u8fc7\u6d4b\u8bd5\u7528\u4f8b\u6211\u4eec\u80fd\u53d1\u73b0bug\uff0c\u5e76\u63d0\u4ea4\u4ee3\u7801\u7684\u5065\u58ee\u6027\u3002 \u6d4b\u8bd5\u7528\u4f8b\u540c\u65f6\u4e5f\u662f\u4ee3\u7801\u7684demo\u7528\u6cd5\u3002 2.\u5355\u5143\u6d4b\u8bd5\u7528\u4f8b\u7684\u4e00\u4e9b\u8bbe\u8ba1\u539f\u5219 \u5e94\u8be5\u7cbe\u5fc3\u8bbe\u8ba1\u597d\u6b65\u9aa4\uff0c\u9897\u7c92\u5ea6\u548c\u7ec4\u5408\u6761\u4ef6\u3002 \u6ce8\u610f\u8fb9\u754c\u6761\u4ef6\u3002 \u5355\u5143\u6d4b\u8bd5\u4e5f\u5e94\u8be5\u597d\u597d\u8bbe\u8ba1\uff0c\u4e0d\u8981\u5199\u65e0\u7528\u7684\u4ee3\u7801\u3002 \u5f53\u4f60\u53d1\u73b0\u4e00\u4e2a \u65b9\u6cd5 \u5f88\u96be\u5199\u5355\u5143\u6d4b\u8bd5\u65f6\uff0c\u5982\u679c\u53ef\u4ee5\u786e\u8ba4\u8fd9\u4e2a \u65b9\u6cd5 \u662f \u81ed\u4ee3\u7801 \uff0c\u90a3\u4e48\u5c31\u548c\u5f00\u53d1\u8005\u4e00\u8d77\u91cd\u6784\u5b83\u3002 Dubbo\u4e2d\u7528\u7684mock\u6846\u67b6\u662f: mockito . \u4e0b\u9762\u662f\u4e00\u4e9b\u5f00\u53d1\u5411\u5bfc: mockito tutorial , mockito refcard TDD\uff08\u53ef\u9009\uff09\uff1a\u5f53\u4f60\u5f00\u59cb\u5199\u4e00\u4e2a\u65b0\u7684\u529f\u80fd\u65f6\uff0c\u4f60\u53ef\u4ee5\u8bd5\u7740\u5148\u5199\u6d4b\u8bd5\u7528\u4f8b\u3002 3.\u6d4b\u8bd5\u8986\u76d6\u7387\u8bbe\u5b9a\u503c \u5728\u73b0\u9636\u6bb5\uff0cDelta\u66f4\u6539\u4ee3\u7801\u7684\u6d4b\u8bd5\u8986\u76d6\u8bbe\u5b9a\u503c\u4e3a\uff1a \uff1d60%\uff0c\u8d8a\u9ad8\u8d8a\u597d\u3002 \u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u4e2a\u9875\u9762\u4e2d\u770b\u5230\u6d4b\u8bd5\u62a5\u544a: https://codecov.io/gh/apache/dubbo","title":"\u6d4b\u8bd5\u8986\u76d6\u7387\u5411\u5bfc"},{"location":"developers/contributor-guide/test-coverage-guide_dev/#_1","text":"","title":"\u6d4b\u8bd5\u8986\u76d6\u7387\u5411\u5bfc"},{"location":"developers/contributor-guide/test-coverage-guide_dev/#1","text":"\u5355\u5143\u6d4b\u8bd5\u80fd\u5e2e\u52a9\u6bcf\u4e2a\u4eba\u6df1\u5165\u4ee3\u7801\u7ec6\u8282\uff0c\u4e86\u89e3\u4ee3\u7801\u7684\u529f\u80fd\u3002 \u901a\u8fc7\u6d4b\u8bd5\u7528\u4f8b\u6211\u4eec\u80fd\u53d1\u73b0bug\uff0c\u5e76\u63d0\u4ea4\u4ee3\u7801\u7684\u5065\u58ee\u6027\u3002 \u6d4b\u8bd5\u7528\u4f8b\u540c\u65f6\u4e5f\u662f\u4ee3\u7801\u7684demo\u7528\u6cd5\u3002","title":"1.\u5199\u5355\u5143\u6d4b\u8bd5\u7684\u6536\u76ca"},{"location":"developers/contributor-guide/test-coverage-guide_dev/#2","text":"\u5e94\u8be5\u7cbe\u5fc3\u8bbe\u8ba1\u597d\u6b65\u9aa4\uff0c\u9897\u7c92\u5ea6\u548c\u7ec4\u5408\u6761\u4ef6\u3002 \u6ce8\u610f\u8fb9\u754c\u6761\u4ef6\u3002 \u5355\u5143\u6d4b\u8bd5\u4e5f\u5e94\u8be5\u597d\u597d\u8bbe\u8ba1\uff0c\u4e0d\u8981\u5199\u65e0\u7528\u7684\u4ee3\u7801\u3002 \u5f53\u4f60\u53d1\u73b0\u4e00\u4e2a \u65b9\u6cd5 \u5f88\u96be\u5199\u5355\u5143\u6d4b\u8bd5\u65f6\uff0c\u5982\u679c\u53ef\u4ee5\u786e\u8ba4\u8fd9\u4e2a \u65b9\u6cd5 \u662f \u81ed\u4ee3\u7801 \uff0c\u90a3\u4e48\u5c31\u548c\u5f00\u53d1\u8005\u4e00\u8d77\u91cd\u6784\u5b83\u3002 Dubbo\u4e2d\u7528\u7684mock\u6846\u67b6\u662f: mockito . \u4e0b\u9762\u662f\u4e00\u4e9b\u5f00\u53d1\u5411\u5bfc: mockito tutorial , mockito refcard TDD\uff08\u53ef\u9009\uff09\uff1a\u5f53\u4f60\u5f00\u59cb\u5199\u4e00\u4e2a\u65b0\u7684\u529f\u80fd\u65f6\uff0c\u4f60\u53ef\u4ee5\u8bd5\u7740\u5148\u5199\u6d4b\u8bd5\u7528\u4f8b\u3002","title":"2.\u5355\u5143\u6d4b\u8bd5\u7528\u4f8b\u7684\u4e00\u4e9b\u8bbe\u8ba1\u539f\u5219"},{"location":"developers/contributor-guide/test-coverage-guide_dev/#3","text":"\u5728\u73b0\u9636\u6bb5\uff0cDelta\u66f4\u6539\u4ee3\u7801\u7684\u6d4b\u8bd5\u8986\u76d6\u8bbe\u5b9a\u503c\u4e3a\uff1a \uff1d60%\uff0c\u8d8a\u9ad8\u8d8a\u597d\u3002 \u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u4e2a\u9875\u9762\u4e2d\u770b\u5230\u6d4b\u8bd5\u62a5\u544a: https://codecov.io/gh/apache/dubbo","title":"3.\u6d4b\u8bd5\u8986\u76d6\u7387\u8bbe\u5b9a\u503c"},{"location":"developers/user-guide/faq_dev/","text":"FAQ dubbo-admin\u5728\u54ea\u91cc\uff1f \u4eceDubbo 2.6.1\u7248\u672c\u5f00\u59cb\uff0cdubbo-admin\u5df2\u7ecf\u4ece\u6838\u5fc3\u5e93\u8fc1\u79fb\u5230https://github.com/apache/dubbo-admin \u6211\u5e94\u8be5\u9009\u62e9\u54ea\u4e2a\u7248\u672c\uff1f \u76ee\u524d\uff0cdubbo\u4fdd\u6301\u77403\u4e2a\u7248\u672c\u7684\u5e76\u884c\u63a8\u8fdb\uff1a 2.7.x (master) \uff1a\u8981\u6c42java 1.8\uff0c\u91cd\u8981\u529f\u80fd\u5206\u652f\u3002 2.6.x\uff1a\u8981\u6c42java 1.6\uff0c\u6b21\u8981\u529f\u80fd\u3001bug\u4fee\u590d\u5206\u652f\uff0cGA\uff0c\u751f\u4ea7\u51c6\u5907\u3002 2.5.x\uff1a\u8981\u6c42java 1.6\uff0c\u7ef4\u62a4\u5206\u652f\uff0c\u53ea\u63a5\u53d7\u5177\u6709\u5b89\u5168\u6f0f\u6d1e\u548c\u81f4\u547d\u6027\u9519\u8bef\u7684bugfix\uff0c\u8be5\u5206\u652f\u5c06\u4f1a\u57282019-06-15\u505c\u6b62\u7ef4\u62a4\uff0c\u8bf7\u5c3d\u5feb\u5347\u7ea7\u52302.6.x\u7248\u672c\u3002 \u70b9\u51fb \u8fd9\u91cc \u4ee5\u4e86\u89e3\u66f4\u8be6\u7ec6\u7684\u7248\u672c\u7ba1\u7406\u8ba1\u5212\u3002 \u5bf9\u4e8e\u8d21\u732e\u8005\uff0c\u8bf7\u786e\u4fdd\u6240\u6709\u7684\u53d8\u66f4\u90fd\u63d0\u4ea4\u5230\u6b63\u786e\u7684\u5206\u652f\u4e0a\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5927\u591a\u6570\u7684pull request\u90fd\u5fc5\u987b\u63d0\u4ea4\u52302.7.x\u4e0a\uff0c\u5982\u6709\u5fc5\u8981\uff0c\u5c06\u5176\u53cd\u5411\u5408\u5e76\u52302.6.x\u548c2.5.x\u4e0a\uff0c\u5982\u679c\u662f\u9488\u5bf9\u6307\u5b9a\u5206\u652f\u7684bugfix\uff0c\u4e5f\u8bf7\u786e\u4fdd\u60a8\u7684pull request\u63d0\u4ea4\u5230\u4e86\u6b63\u786e\u7684\u5206\u652f\u4e0a\u3002 \u5bf9\u4e8e\u63d0\u4ea4\u8005\uff0c\u8bf7\u7ed9\u6bcf\u4e00\u4e2aPR\u9009\u62e9\u6b63\u786e\u7684\u6807\u7b7e\u548c\u5206\u652f\uff0c\u5982\u6709\u5fc5\u8981\uff0c\u4e5f\u8bf7\u4e0d\u8981\u5fd8\u8bb0\u5c06bugfix\u53cd\u5411\u5408\u5e76\u5230\u4f4e\u7248\u672c\u5206\u652f \u5982\u4f55\u5728docker\u4e2d\u6b63\u786e\u5730\u6ce8\u518cip\uff1f \u793a\u4f8b\u95ee\u9898 Dubbo\u652f\u6301\u901a\u8fc7\u914d\u7f6e\u7cfb\u7edf\u73af\u5883\u53c2\u6570\u7684\u65b9\u5f0f\u6307\u5b9aip/port\uff0c\u70b9\u51fb \u8fd9\u91cc \u53ef\u4ee5\u67e5\u770b\u8be6\u7ec6\u793a\u4f8b\u3002","title":"FAQ"},{"location":"developers/user-guide/faq_dev/#faq","text":"","title":"FAQ"},{"location":"developers/user-guide/faq_dev/#dubbo-admin","text":"\u4eceDubbo 2.6.1\u7248\u672c\u5f00\u59cb\uff0cdubbo-admin\u5df2\u7ecf\u4ece\u6838\u5fc3\u5e93\u8fc1\u79fb\u5230https://github.com/apache/dubbo-admin","title":"dubbo-admin\u5728\u54ea\u91cc\uff1f"},{"location":"developers/user-guide/faq_dev/#_1","text":"\u76ee\u524d\uff0cdubbo\u4fdd\u6301\u77403\u4e2a\u7248\u672c\u7684\u5e76\u884c\u63a8\u8fdb\uff1a 2.7.x (master) \uff1a\u8981\u6c42java 1.8\uff0c\u91cd\u8981\u529f\u80fd\u5206\u652f\u3002 2.6.x\uff1a\u8981\u6c42java 1.6\uff0c\u6b21\u8981\u529f\u80fd\u3001bug\u4fee\u590d\u5206\u652f\uff0cGA\uff0c\u751f\u4ea7\u51c6\u5907\u3002 2.5.x\uff1a\u8981\u6c42java 1.6\uff0c\u7ef4\u62a4\u5206\u652f\uff0c\u53ea\u63a5\u53d7\u5177\u6709\u5b89\u5168\u6f0f\u6d1e\u548c\u81f4\u547d\u6027\u9519\u8bef\u7684bugfix\uff0c\u8be5\u5206\u652f\u5c06\u4f1a\u57282019-06-15\u505c\u6b62\u7ef4\u62a4\uff0c\u8bf7\u5c3d\u5feb\u5347\u7ea7\u52302.6.x\u7248\u672c\u3002 \u70b9\u51fb \u8fd9\u91cc \u4ee5\u4e86\u89e3\u66f4\u8be6\u7ec6\u7684\u7248\u672c\u7ba1\u7406\u8ba1\u5212\u3002 \u5bf9\u4e8e\u8d21\u732e\u8005\uff0c\u8bf7\u786e\u4fdd\u6240\u6709\u7684\u53d8\u66f4\u90fd\u63d0\u4ea4\u5230\u6b63\u786e\u7684\u5206\u652f\u4e0a\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5927\u591a\u6570\u7684pull request\u90fd\u5fc5\u987b\u63d0\u4ea4\u52302.7.x\u4e0a\uff0c\u5982\u6709\u5fc5\u8981\uff0c\u5c06\u5176\u53cd\u5411\u5408\u5e76\u52302.6.x\u548c2.5.x\u4e0a\uff0c\u5982\u679c\u662f\u9488\u5bf9\u6307\u5b9a\u5206\u652f\u7684bugfix\uff0c\u4e5f\u8bf7\u786e\u4fdd\u60a8\u7684pull request\u63d0\u4ea4\u5230\u4e86\u6b63\u786e\u7684\u5206\u652f\u4e0a\u3002 \u5bf9\u4e8e\u63d0\u4ea4\u8005\uff0c\u8bf7\u7ed9\u6bcf\u4e00\u4e2aPR\u9009\u62e9\u6b63\u786e\u7684\u6807\u7b7e\u548c\u5206\u652f\uff0c\u5982\u6709\u5fc5\u8981\uff0c\u4e5f\u8bf7\u4e0d\u8981\u5fd8\u8bb0\u5c06bugfix\u53cd\u5411\u5408\u5e76\u5230\u4f4e\u7248\u672c\u5206\u652f","title":"\u6211\u5e94\u8be5\u9009\u62e9\u54ea\u4e2a\u7248\u672c\uff1f"},{"location":"developers/user-guide/faq_dev/#dockerip","text":"\u793a\u4f8b\u95ee\u9898 Dubbo\u652f\u6301\u901a\u8fc7\u914d\u7f6e\u7cfb\u7edf\u73af\u5883\u53c2\u6570\u7684\u65b9\u5f0f\u6307\u5b9aip/port\uff0c\u70b9\u51fb \u8fd9\u91cc \u53ef\u4ee5\u67e5\u770b\u8be6\u7ec6\u793a\u4f8b\u3002","title":"\u5982\u4f55\u5728docker\u4e2d\u6b63\u786e\u5730\u6ce8\u518cip\uff1f"},{"location":"source_code_guide/adaptive-extension/","text":"1.\u539f\u7406 \u5728 Dubbo \u4e2d\uff0c\u5f88\u591a\u62d3\u5c55\u90fd\u662f\u901a\u8fc7 SPI \u673a\u5236\u8fdb\u884c\u52a0\u8f7d\u7684\uff0c\u6bd4\u5982 Protocol\u3001Cluster\u3001LoadBalance \u7b49\u3002\u6709\u65f6\uff0c\u6709\u4e9b\u62d3\u5c55\u5e76\u4e0d\u60f3\u5728\u6846\u67b6\u542f\u52a8\u9636\u6bb5\u88ab\u52a0\u8f7d\uff0c\u800c\u662f\u5e0c\u671b\u5728\u62d3\u5c55\u65b9\u6cd5\u88ab\u8c03\u7528\u65f6\uff0c\u6839\u636e\u8fd0\u884c\u65f6\u53c2\u6570\u8fdb\u884c\u52a0\u8f7d\u3002\u8fd9\u542c\u8d77\u6765\u6709\u4e9b\u77db\u76fe\u3002\u62d3\u5c55\u672a\u88ab\u52a0\u8f7d\uff0c\u90a3\u4e48\u62d3\u5c55\u65b9\u6cd5\u5c31\u65e0\u6cd5\u88ab\u8c03\u7528\uff08\u9759\u6001\u65b9\u6cd5\u9664\u5916\uff09\u3002\u62d3\u5c55\u65b9\u6cd5\u672a\u88ab\u8c03\u7528\uff0c\u62d3\u5c55\u5c31\u65e0\u6cd5\u88ab\u52a0\u8f7d\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u77db\u76fe\u7684\u95ee\u9898\uff0cDubbo \u901a\u8fc7\u81ea\u9002\u5e94\u62d3\u5c55\u673a\u5236\u5f88\u597d\u7684\u89e3\u51b3\u4e86\u3002\u81ea\u9002\u5e94\u62d3\u5c55\u673a\u5236\u7684\u5b9e\u73b0\u903b\u8f91\u6bd4\u8f83\u590d\u6742\uff0c\u9996\u5148 Dubbo \u4f1a\u4e3a\u62d3\u5c55\u63a5\u53e3\u751f\u6210\u5177\u6709\u4ee3\u7406\u529f\u80fd\u7684\u4ee3\u7801\u3002\u7136\u540e\u901a\u8fc7 javassist \u6216 jdk \u7f16\u8bd1\u8fd9\u6bb5\u4ee3\u7801\uff0c\u5f97\u5230 Class \u7c7b\u3002\u6700\u540e\u518d\u901a\u8fc7\u53cd\u5c04\u521b\u5efa\u4ee3\u7406\u7c7b\uff0c\u6574\u4e2a\u8fc7\u7a0b\u6bd4\u8f83\u590d\u6742\u3002\u4e3a\u4e86\u8ba9\u5927\u5bb6\u5bf9\u81ea\u9002\u5e94\u62d3\u5c55\u6709\u4e00\u4e2a\u611f\u6027\u7684\u8ba4\u8bc6\uff0c\u4e0b\u9762\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u793a\u4f8b\u8fdb\u884c\u6f14\u793a\u3002\u8fd9\u662f\u4e00\u4e2a\u4e0e\u6c7d\u8f66\u76f8\u5173\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u8f66\u8f6e\u5236\u9020\u5382\u63a5\u53e3 WheelMaker\uff1a public interface WheelMaker { Wheel makeWheel(URL url); } WheelMaker \u63a5\u53e3\u7684\u81ea\u9002\u5e94\u5b9e\u73b0\u7c7b\u5982\u4e0b\uff1a public class AdaptiveWheelMaker implements WheelMaker { public Wheel makeWheel(URL url) { if (url == null) { throw new IllegalArgumentException( url == null ); } // 1.\u4ece URL \u4e2d\u83b7\u53d6 WheelMaker \u540d\u79f0 String wheelMakerName = url.getParameter( Wheel.maker ); if (wheelMakerName == null) { throw new IllegalArgumentException( wheelMakerName == null ); } // 2.\u901a\u8fc7 SPI \u52a0\u8f7d\u5177\u4f53\u7684 WheelMaker WheelMaker wheelMaker = ExtensionLoader .getExtensionLoader(WheelMaker.class).getExtension(wheelMakerName); // 3.\u8c03\u7528\u76ee\u6807\u65b9\u6cd5 return wheelMaker.makeWheel(url); } } AdaptiveWheelMaker \u662f\u4e00\u4e2a\u4ee3\u7406\u7c7b\uff0c\u4e0e\u4f20\u7edf\u7684\u4ee3\u7406\u903b\u8f91\u4e0d\u540c\uff0cAdaptiveWheelMaker \u6240\u4ee3\u7406\u7684\u5bf9\u8c61\u662f\u5728 makeWheel \u65b9\u6cd5\u4e2d\u901a\u8fc7 SPI \u52a0\u8f7d\u5f97\u5230\u7684\u3002makeWheel \u65b9\u6cd5\u4e3b\u8981\u505a\u4e86\u4e09\u4ef6\u4e8b\u60c5\uff1a \u4ece URL \u4e2d\u83b7\u53d6 WheelMaker \u540d\u79f0 \u901a\u8fc7 SPI \u52a0\u8f7d\u5177\u4f53\u7684 WheelMaker \u5b9e\u73b0\u7c7b \u8c03\u7528\u76ee\u6807\u65b9\u6cd5 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6765\u770b\u770b\u6c7d\u8f66\u5236\u9020\u5382 CarMaker \u63a5\u53e3\u4e0e\u5176\u5b9e\u73b0\u7c7b\u3002 public interface CarMaker { Car makeCar(URL url); } public class RaceCarMaker implements CarMaker { WheelMaker wheelMaker; // \u901a\u8fc7 setter \u6ce8\u5165 AdaptiveWheelMaker public setWheelMaker(WheelMaker wheelMaker) { this.wheelMaker = wheelMaker; } public Car makeCar(URL url) { Wheel wheel = wheelMaker.makeWheel(url); return new RaceCar(wheel, ...); } } RaceCarMaker \u6301\u6709\u4e00\u4e2a WheelMaker \u7c7b\u578b\u7684\u6210\u5458\u53d8\u91cf\uff0c\u5728\u7a0b\u5e8f\u542f\u52a8\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 AdaptiveWheelMaker \u901a\u8fc7 setter \u65b9\u6cd5\u6ce8\u5165\u5230 RaceCarMaker \u4e2d\u3002\u5728\u8fd0\u884c\u65f6\uff0c\u5047\u8bbe\u6709\u8fd9\u6837\u4e00\u4e2a url \u53c2\u6570\u4f20\u5165\uff1a dubbo://192.168.0.101:20880/XxxService?wheel.maker=MichelinWheelMaker RaceCarMaker \u7684 makeCar \u65b9\u6cd5\u5c06\u4e0a\u9762\u7684 url \u4f5c\u4e3a\u53c2\u6570\u4f20\u7ed9 AdaptiveWheelMaker \u7684 makeWheel \u65b9\u6cd5\uff0cmakeWheel \u65b9\u6cd5\u4ece url \u4e2d\u63d0\u53d6 wheel.maker \u53c2\u6570\uff0c\u5f97\u5230 MichelinWheelMaker\u3002\u4e4b\u540e\u518d\u901a\u8fc7 SPI \u52a0\u8f7d\u914d\u7f6e\u540d\u4e3a MichelinWheelMaker \u7684\u5b9e\u73b0\u7c7b\uff0c\u5f97\u5230\u5177\u4f53\u7684 WheelMaker \u5b9e\u4f8b\u3002 \u4e0a\u9762\u7684\u793a\u4f8b\u5c55\u793a\u4e86\u81ea\u9002\u5e94\u62d3\u5c55\u7c7b\u7684\u6838\u5fc3\u5b9e\u73b0 ---- \u5728\u62d3\u5c55\u63a5\u53e3\u7684\u65b9\u6cd5\u88ab\u8c03\u7528\u65f6\uff0c\u901a\u8fc7 SPI \u52a0\u8f7d\u5177\u4f53\u7684\u62d3\u5c55\u5b9e\u73b0\u7c7b\uff0c\u5e76\u8c03\u7528\u62d3\u5c55\u5bf9\u8c61\u7684\u540c\u540d\u65b9\u6cd5\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6df1\u5165\u5230\u6e90\u7801\u4e2d\uff0c\u63a2\u7d22\u81ea\u9002\u5e94\u62d3\u5c55\u7c7b\u751f\u6210\u7684\u8fc7\u7a0b\u3002 2.\u6e90\u7801\u5206\u6790 \u5728\u5bf9\u81ea\u9002\u5e94\u62d3\u5c55\u751f\u6210\u8fc7\u7a0b\u8fdb\u884c\u6df1\u5165\u5206\u6790\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e0b\u4e0e\u81ea\u9002\u5e94\u62d3\u5c55\u606f\u606f\u76f8\u5173\u7684\u4e00\u4e2a\u6ce8\u89e3\uff0c\u5373 Adaptive \u6ce8\u89e3\u3002\u8be5\u6ce8\u89e3\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.TYPE, ElementType.METHOD}) public @interface Adaptive { String[] value() default {}; } \u4ece\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u53ef\u77e5\uff0cAdaptive \u53ef\u6ce8\u89e3\u5728\u7c7b\u6216\u65b9\u6cd5\u4e0a\u3002\u5f53 Adaptive \u6ce8\u89e3\u5728\u7c7b\u4e0a\u65f6\uff0cDubbo \u4e0d\u4f1a\u4e3a\u8be5\u7c7b\u751f\u6210\u4ee3\u7406\u7c7b\u3002\u6ce8\u89e3\u5728\u65b9\u6cd5\uff08\u63a5\u53e3\u65b9\u6cd5\uff09\u4e0a\u65f6\uff0cDubbo \u5219\u4f1a\u4e3a\u8be5\u65b9\u6cd5\u751f\u6210\u4ee3\u7406\u903b\u8f91\u3002Adaptive \u6ce8\u89e3\u5728\u7c7b\u4e0a\u7684\u60c5\u51b5\u5f88\u5c11\uff0c\u5728 Dubbo \u4e2d\uff0c\u4ec5\u6709\u4e24\u4e2a\u7c7b\u88ab Adaptive \u6ce8\u89e3\u4e86\uff0c\u5206\u522b\u662f AdaptiveCompiler \u548c AdaptiveExtensionFactory\u3002\u6b64\u79cd\u60c5\u51b5\uff0c\u8868\u793a\u62d3\u5c55\u7684\u52a0\u8f7d\u903b\u8f91\u7531\u4eba\u5de5\u7f16\u7801\u5b8c\u6210\u3002\u66f4\u591a\u65f6\u5019\uff0cAdaptive \u662f\u6ce8\u89e3\u5728\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\uff0c\u8868\u793a\u62d3\u5c55\u7684\u52a0\u8f7d\u903b\u8f91\u9700\u7531\u6846\u67b6\u81ea\u52a8\u751f\u6210\u3002Adaptive \u6ce8\u89e3\u7684\u5730\u65b9\u4e0d\u540c\uff0c\u76f8\u5e94\u7684\u5904\u7406\u903b\u8f91\u4e5f\u662f\u4e0d\u540c\u7684\u3002\u6ce8\u89e3\u5728\u7c7b\u4e0a\u65f6\uff0c\u5904\u7406\u903b\u8f91\u6bd4\u8f83\u7b80\u5355\uff0c\u672c\u6587\u5c31\u4e0d\u5206\u6790\u4e86\u3002\u6ce8\u89e3\u5728\u63a5\u53e3\u65b9\u6cd5\u4e0a\u65f6\uff0c\u5904\u7406\u903b\u8f91\u8f83\u4e3a\u590d\u6742\uff0c\u672c\u7ae0\u5c06\u4f1a\u91cd\u70b9\u5206\u6790\u6b64\u5757\u903b\u8f91\u3002 2.1 \u83b7\u53d6\u81ea\u9002\u5e94\u62d3\u5c55 getAdaptiveExtension \u65b9\u6cd5\u662f\u83b7\u53d6\u81ea\u9002\u5e94\u62d3\u5c55\u7684\u5165\u53e3\u65b9\u6cd5\uff0c\u56e0\u6b64\u4e0b\u9762\u6211\u4eec\u4ece\u8fd9\u4e2a\u65b9\u6cd5\u8fdb\u884c\u5206\u6790\u3002\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a public T getAdaptiveExtension() { // \u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6\u81ea\u9002\u5e94\u62d3\u5c55 Object instance = cachedAdaptiveInstance.get(); if (instance == null) { // \u7f13\u5b58\u672a\u547d\u4e2d if (createAdaptiveInstanceError == null) { synchronized (cachedAdaptiveInstance) { instance = cachedAdaptiveInstance.get(); if (instance == null) { try { // \u521b\u5efa\u81ea\u9002\u5e94\u62d3\u5c55 instance = createAdaptiveExtension(); // \u8bbe\u7f6e\u81ea\u9002\u5e94\u62d3\u5c55\u5230\u7f13\u5b58\u4e2d cachedAdaptiveInstance.set(instance); } catch (Throwable t) { createAdaptiveInstanceError = t; throw new IllegalStateException( fail to create adaptive instance: ... ); } } } } else { throw new IllegalStateException( fail to create adaptive instance: ... ); } } return (T) instance; } getAdaptiveExtension \u65b9\u6cd5\u9996\u5148\u4f1a\u68c0\u67e5\u7f13\u5b58\uff0c\u7f13\u5b58\u672a\u547d\u4e2d\uff0c\u5219\u8c03\u7528 createAdaptiveExtension \u65b9\u6cd5\u521b\u5efa\u81ea\u9002\u5e94\u62d3\u5c55\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u770b\u4e00\u4e0b createAdaptiveExtension \u65b9\u6cd5\u7684\u4ee3\u7801\u3002 private T createAdaptiveExtension() { try { // \u83b7\u53d6\u81ea\u9002\u5e94\u62d3\u5c55\u7c7b\uff0c\u5e76\u901a\u8fc7\u53cd\u5c04\u5b9e\u4f8b\u5316 return injectExtension((T) getAdaptiveExtensionClass().newInstance()); } catch (Exception e) { throw new IllegalStateException( Can not create adaptive extension ... ); } } createAdaptiveExtension \u65b9\u6cd5\u7684\u4ee3\u7801\u6bd4\u8f83\u5c11\uff0c\u4f46\u5374\u5305\u542b\u4e86\u4e09\u4e2a\u903b\u8f91\uff0c\u5206\u522b\u5982\u4e0b\uff1a \u8c03\u7528 getAdaptiveExtensionClass \u65b9\u6cd5\u83b7\u53d6\u81ea\u9002\u5e94\u62d3\u5c55 Class \u5bf9\u8c61 \u901a\u8fc7\u53cd\u5c04\u8fdb\u884c\u5b9e\u4f8b\u5316 \u8c03\u7528 injectExtension \u65b9\u6cd5\u5411\u62d3\u5c55\u5b9e\u4f8b\u4e2d\u6ce8\u5165\u4f9d\u8d56 \u524d\u4e24\u4e2a\u903b\u8f91\u6bd4\u8f83\u597d\u7406\u89e3\uff0c\u7b2c\u4e09\u4e2a\u903b\u8f91\u7528\u4e8e\u5411\u81ea\u9002\u5e94\u62d3\u5c55\u5bf9\u8c61\u4e2d\u6ce8\u5165\u4f9d\u8d56\u3002\u8fd9\u4e2a\u903b\u8f91\u770b\u4f3c\u591a\u4f59\uff0c\u4f46\u6709\u5b58\u5728\u7684\u5fc5\u8981\uff0c\u8fd9\u91cc\u7b80\u5355\u8bf4\u660e\u4e00\u4e0b\u3002\u524d\u9762\u8bf4\u8fc7\uff0cDubbo \u4e2d\u6709\u4e24\u79cd\u7c7b\u578b\u7684\u81ea\u9002\u5e94\u62d3\u5c55\uff0c\u4e00\u79cd\u662f\u624b\u5de5\u7f16\u7801\u7684\uff0c\u4e00\u79cd\u662f\u81ea\u52a8\u751f\u6210\u7684\u3002\u624b\u5de5\u7f16\u7801\u7684\u81ea\u9002\u5e94\u62d3\u5c55\u4e2d\u53ef\u80fd\u5b58\u5728\u7740\u4e00\u4e9b\u4f9d\u8d56\uff0c\u800c\u81ea\u52a8\u751f\u6210\u7684 Adaptive \u62d3\u5c55\u5219\u4e0d\u4f1a\u4f9d\u8d56\u5176\u4ed6\u7c7b\u3002\u8fd9\u91cc\u8c03\u7528 injectExtension \u65b9\u6cd5\u7684\u76ee\u7684\u662f\u4e3a\u624b\u5de5\u7f16\u7801\u7684\u81ea\u9002\u5e94\u62d3\u5c55\u6ce8\u5165\u4f9d\u8d56\uff0c\u8fd9\u4e00\u70b9\u9700\u8981\u5927\u5bb6\u6ce8\u610f\u4e00\u4e0b\u3002\u5173\u4e8e injectExtension \u65b9\u6cd5\uff0c\u524d\u6587\u5df2\u7ecf\u5206\u6790\u8fc7\u4e86\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002\u63a5\u4e0b\u6765\uff0c\u5206\u6790 getAdaptiveExtensionClass \u65b9\u6cd5\u7684\u903b\u8f91\u3002 private Class ? getAdaptiveExtensionClass() { // \u901a\u8fc7 SPI \u83b7\u53d6\u6240\u6709\u7684\u62d3\u5c55\u7c7b getExtensionClasses(); // \u68c0\u67e5\u7f13\u5b58\uff0c\u82e5\u7f13\u5b58\u4e0d\u4e3a\u7a7a\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u7f13\u5b58 if (cachedAdaptiveClass != null) { return cachedAdaptiveClass; } // \u521b\u5efa\u81ea\u9002\u5e94\u62d3\u5c55\u7c7b return cachedAdaptiveClass = createAdaptiveExtensionClass(); } getAdaptiveExtensionClass \u65b9\u6cd5\u540c\u6837\u5305\u542b\u4e86\u4e09\u4e2a\u903b\u8f91\uff0c\u5982\u4e0b\uff1a \u8c03\u7528 getExtensionClasses \u83b7\u53d6\u6240\u6709\u7684\u62d3\u5c55\u7c7b \u68c0\u67e5\u7f13\u5b58\uff0c\u82e5\u7f13\u5b58\u4e0d\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de\u7f13\u5b58 \u82e5\u7f13\u5b58\u4e3a\u7a7a\uff0c\u5219\u8c03\u7528 createAdaptiveExtensionClass \u521b\u5efa\u81ea\u9002\u5e94\u62d3\u5c55\u7c7b \u8fd9\u4e09\u4e2a\u903b\u8f91\u770b\u8d77\u6765\u5e73\u6de1\u65e0\u5947\uff0c\u4f3c\u4e4e\u6ca1\u6709\u591a\u8bb2\u7684\u5fc5\u8981\u3002\u4f46\u662f\u8fd9\u4e9b\u5e73\u6de1\u65e0\u5947\u7684\u4ee3\u7801\u4e2d\u9690\u85cf\u4e86\u7740\u4e00\u4e9b\u7ec6\u8282\uff0c\u9700\u8981\u8bf4\u660e\u4e00\u4e0b\u3002\u9996\u5148\u4ece\u7b2c\u4e00\u4e2a\u903b\u8f91\u8bf4\u8d77\uff0cgetExtensionClasses \u8fd9\u4e2a\u65b9\u6cd5\u7528\u4e8e\u83b7\u53d6\u67d0\u4e2a\u63a5\u53e3\u7684\u6240\u6709\u5b9e\u73b0\u7c7b\u3002\u6bd4\u5982\u8be5\u65b9\u6cd5\u53ef\u4ee5\u83b7\u53d6 Protocol \u63a5\u53e3\u7684 DubboProtocol\u3001HttpProtocol\u3001InjvmProtocol \u7b49\u5b9e\u73b0\u7c7b\u3002\u5728\u83b7\u53d6\u5b9e\u73b0\u7c7b\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u67d0\u4e2a\u5b9e\u73b0\u7c7b\u88ab Adaptive \u6ce8\u89e3\u4fee\u9970\u4e86\uff0c\u90a3\u4e48\u8be5\u7c7b\u5c31\u4f1a\u88ab\u8d4b\u503c\u7ed9 cachedAdaptiveClass \u53d8\u91cf\u3002\u6b64\u65f6\uff0c\u4e0a\u9762\u6b65\u9aa4\u4e2d\u7684\u7b2c\u4e8c\u6b65\u6761\u4ef6\u6210\u7acb\uff08\u7f13\u5b58\u4e0d\u4e3a\u7a7a\uff09\uff0c\u76f4\u63a5\u8fd4\u56de cachedAdaptiveClass \u5373\u53ef\u3002\u5982\u679c\u6240\u6709\u7684\u5b9e\u73b0\u7c7b\u5747\u672a\u88ab Adaptive \u6ce8\u89e3\u4fee\u9970\uff0c\u90a3\u4e48\u6267\u884c\u7b2c\u4e09\u6b65\u903b\u8f91\uff0c\u521b\u5efa\u81ea\u9002\u5e94\u62d3\u5c55\u7c7b\u3002\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a private Class ? createAdaptiveExtensionClass() { // \u6784\u5efa\u81ea\u9002\u5e94\u62d3\u5c55\u4ee3\u7801 String code = createAdaptiveExtensionClassCode(); ClassLoader classLoader = findClassLoader(); // \u83b7\u53d6\u7f16\u8bd1\u5668\u5b9e\u73b0\u7c7b com.alibaba.dubbo.common.compiler.Compiler compiler = ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.compiler.Compiler.class).getAdaptiveExtension(); // \u7f16\u8bd1\u4ee3\u7801\uff0c\u751f\u6210 Class return compiler.compile(code, classLoader); } createAdaptiveExtensionClass \u65b9\u6cd5\u7528\u4e8e\u751f\u6210\u81ea\u9002\u5e94\u62d3\u5c55\u7c7b\uff0c\u8be5\u65b9\u6cd5\u9996\u5148\u4f1a\u751f\u6210\u81ea\u9002\u5e94\u62d3\u5c55\u7c7b\u7684\u6e90\u7801\uff0c\u7136\u540e\u901a\u8fc7 Compiler \u5b9e\u4f8b\uff08Dubbo \u9ed8\u8ba4\u4f7f\u7528 javassist \u4f5c\u4e3a\u7f16\u8bd1\u5668\uff09\u7f16\u8bd1\u6e90\u7801\uff0c\u5f97\u5230\u4ee3\u7406\u7c7b Class \u5b9e\u4f8b\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u628a\u91cd\u70b9\u653e\u5728\u4ee3\u7406\u7c7b\u4ee3\u7801\u751f\u6210\u7684\u903b\u8f91\u4e0a\uff0c\u5176\u4ed6\u903b\u8f91\u5927\u5bb6\u81ea\u884c\u5206\u6790\u3002 2.2 \u81ea\u9002\u5e94\u62d3\u5c55\u7c7b\u4ee3\u7801\u751f\u6210 createAdaptiveExtensionClassCode \u65b9\u6cd5\u4ee3\u7801\u7565\u591a\uff0c\u7ea6\u6709\u4e24\u767e\u884c\u4ee3\u7801\u3002\u56e0\u6b64\u672c\u8282\u5c06\u4f1a\u5bf9\u8be5\u65b9\u6cd5\u7684\u4ee3\u7801\u8fdb\u884c\u62c6\u5206\u5206\u6790\uff0c\u4ee5\u5e2e\u52a9\u5927\u5bb6\u66f4\u597d\u7684\u7406\u89e3\u4ee3\u7801\u903b\u8f91\u3002 2.2.1 Adaptive \u6ce8\u89e3\u68c0\u6d4b \u5728\u751f\u6210\u4ee3\u7406\u7c7b\u6e90\u7801\u4e4b\u524d\uff0ccreateAdaptiveExtensionClassCode \u65b9\u6cd5\u9996\u5148\u4f1a\u901a\u8fc7\u53cd\u5c04\u68c0\u6d4b\u63a5\u53e3\u65b9\u6cd5\u662f\u5426\u5305\u542b Adaptive \u6ce8\u89e3\u3002\u5bf9\u4e8e\u8981\u751f\u6210\u81ea\u9002\u5e94\u62d3\u5c55\u7684\u63a5\u53e3\uff0cDubbo \u8981\u6c42\u8be5\u63a5\u53e3\u81f3\u5c11\u6709\u4e00\u4e2a\u65b9\u6cd5\u88ab Adaptive \u6ce8\u89e3\u4fee\u9970\u3002\u82e5\u4e0d\u6ee1\u8db3\u6b64\u6761\u4ef6\uff0c\u5c31\u4f1a\u629b\u51fa\u8fd0\u884c\u65f6\u5f02\u5e38\u3002\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a // \u901a\u8fc7\u53cd\u5c04\u83b7\u53d6\u6240\u6709\u7684\u65b9\u6cd5 Method[] methods = type.getMethods(); boolean hasAdaptiveAnnotation = false; // \u904d\u5386\u65b9\u6cd5\u5217\u8868 for (Method m : methods) { // \u68c0\u6d4b\u65b9\u6cd5\u4e0a\u662f\u5426\u6709 Adaptive \u6ce8\u89e3 if (m.isAnnotationPresent(Adaptive.class)) { hasAdaptiveAnnotation = true; break; } } if (!hasAdaptiveAnnotation) // \u82e5\u6240\u6709\u7684\u65b9\u6cd5\u4e0a\u5747\u65e0 Adaptive \u6ce8\u89e3\uff0c\u5219\u629b\u51fa\u5f02\u5e38 throw new IllegalStateException( No adaptive method on extension ... ); 2.2.2 \u751f\u6210\u7c7b \u901a\u8fc7 Adaptive \u6ce8\u89e3\u68c0\u6d4b\u540e\uff0c\u5373\u53ef\u5f00\u59cb\u751f\u6210\u4ee3\u7801\u3002\u4ee3\u7801\u751f\u6210\u7684\u987a\u5e8f\u4e0e Java \u6587\u4ef6\u5185\u5bb9\u987a\u5e8f\u4e00\u81f4\uff0c\u9996\u5148\u4f1a\u751f\u6210 package \u8bed\u53e5\uff0c\u7136\u540e\u751f\u6210 import \u8bed\u53e5\uff0c\u7d27\u63a5\u7740\u751f\u6210\u7c7b\u540d\u7b49\u4ee3\u7801\u3002\u6574\u4e2a\u903b\u8f91\u5982\u4e0b\uff1a // \u751f\u6210 package \u4ee3\u7801\uff1apackage + type \u6240\u5728\u5305 codeBuilder.append( package ).append(type.getPackage().getName()).append( ; ); // \u751f\u6210 import \u4ee3\u7801\uff1aimport + ExtensionLoader \u5168\u9650\u5b9a\u540d codeBuilder.append( \\nimport ).append(ExtensionLoader.class.getName()).append( ; ); // \u751f\u6210\u7c7b\u4ee3\u7801\uff1apublic class + type\u7b80\u5355\u540d\u79f0 + $Adaptive + implements + type\u5168\u9650\u5b9a\u540d + { codeBuilder.append( \\npublic class ) .append(type.getSimpleName()) .append( $Adaptive ) .append( implements ) .append(type.getCanonicalName()) .append( { ); // ${\u751f\u6210\u65b9\u6cd5} codeBuilder.append( \\n} ); \u8fd9\u91cc\u4f7f\u7528 ${...} \u5360\u4f4d\u7b26\u4ee3\u8868\u5176\u4ed6\u4ee3\u7801\u7684\u751f\u6210\u903b\u8f91\uff0c\u8be5\u90e8\u5206\u903b\u8f91\u5c06\u5728\u968f\u540e\u8fdb\u884c\u5206\u6790\u3002\u4e0a\u9762\u4ee3\u7801\u4e0d\u662f\u5f88\u96be\u7406\u89e3\uff0c\u4e0b\u9762\u76f4\u63a5\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u5c55\u793a\u8be5\u6bb5\u4ee3\u7801\u6240\u751f\u6210\u7684\u5185\u5bb9\u3002\u4ee5 Dubbo \u7684 Protocol \u63a5\u53e3\u4e3a\u4f8b\uff0c\u751f\u6210\u7684\u4ee3\u7801\u5982\u4e0b\uff1a package com.alibaba.dubbo.rpc; import com.alibaba.dubbo.common.extension.ExtensionLoader; public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol { // \u7701\u7565\u65b9\u6cd5\u4ee3\u7801 } 2.2.3 \u751f\u6210\u65b9\u6cd5 \u4e00\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u88ab Adaptive \u6ce8\u89e3\u4fee\u9970\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u88ab\u4fee\u9970\u3002\u8fd9\u91cc\u5c06\u672a\u88ab Adaptive \u6ce8\u89e3\u4fee\u9970\u7684\u65b9\u6cd5\u79f0\u4e3a\u201c\u65e0 Adaptive \u6ce8\u89e3\u65b9\u6cd5\u201d\uff0c\u4e0b\u9762\u6211\u4eec\u5148\u6765\u770b\u770b\u6b64\u79cd\u65b9\u6cd5\u7684\u4ee3\u7801\u751f\u6210\u903b\u8f91\u662f\u600e\u6837\u7684\u3002 2.2.3.1 \u65e0 Adaptive \u6ce8\u89e3\u65b9\u6cd5\u4ee3\u7801\u751f\u6210\u903b\u8f91 \u5bf9\u4e8e\u63a5\u53e3\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u9700\u6c42\u6807\u6ce8 Adaptive \u6ce8\u89e3\u3002\u4ee5 Protocol \u63a5\u53e3\u4e3a\u4f8b\uff0c\u8be5\u63a5\u53e3\u7684 destroy \u548c getDefaultPort \u672a\u6807\u6ce8 Adaptive \u6ce8\u89e3\uff0c\u5176\u4ed6\u65b9\u6cd5\u5747\u6807\u6ce8\u4e86 Adaptive \u6ce8\u89e3\u3002Dubbo \u4e0d\u4f1a\u4e3a\u6ca1\u6709\u6807\u6ce8 Adaptive \u6ce8\u89e3\u7684\u65b9\u6cd5\u751f\u6210\u4ee3\u7406\u903b\u8f91\uff0c\u5bf9\u4e8e\u8be5\u79cd\u7c7b\u578b\u7684\u65b9\u6cd5\uff0c\u4ec5\u4f1a\u751f\u6210\u4e00\u53e5\u629b\u51fa\u5f02\u5e38\u7684\u4ee3\u7801\u3002\u751f\u6210\u903b\u8f91\u5982\u4e0b\uff1a for (Method method : methods) { // \u7701\u7565\u65e0\u5173\u903b\u8f91 Adaptive adaptiveAnnotation = method.getAnnotation(Adaptive.class); StringBuilder code = new StringBuilder(512); // \u5982\u679c\u65b9\u6cd5\u4e0a\u65e0 Adaptive \u6ce8\u89e3\uff0c\u5219\u751f\u6210 throw new UnsupportedOperationException(...) \u4ee3\u7801 if (adaptiveAnnotation == null) { // \u751f\u6210\u7684\u4ee3\u7801\u683c\u5f0f\u5982\u4e0b\uff1a // throw new UnsupportedOperationException( // method + \u65b9\u6cd5\u7b7e\u540d + of interface + \u5168\u9650\u5b9a\u63a5\u53e3\u540d + is not adaptive method!\u201d) code.append( throw new UnsupportedOperationException(\\ method ) .append(method.toString()).append( of interface ) .append(type.getName()).append( is not adaptive method!\\ ); ); } else { // \u7701\u7565\u65e0\u5173\u903b\u8f91 } // \u7701\u7565\u65e0\u5173\u903b\u8f91 } \u4ee5 Protocol \u63a5\u53e3\u7684 destroy \u65b9\u6cd5\u4e3a\u4f8b\uff0c\u4e0a\u9762\u4ee3\u7801\u751f\u6210\u7684\u5185\u5bb9\u5982\u4e0b\uff1a throw new UnsupportedOperationException( method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method! ); 2.2.3.2 \u83b7\u53d6 URL \u6570\u636e \u524d\u9762\u8bf4\u8fc7\u65b9\u6cd5\u4ee3\u7406\u903b\u8f91\u4f1a\u4ece URL \u4e2d\u63d0\u53d6\u76ee\u6807\u62d3\u5c55\u7684\u540d\u79f0\uff0c\u56e0\u6b64\u4ee3\u7801\u751f\u6210\u903b\u8f91\u7684\u4e00\u4e2a\u91cd\u8981\u7684\u4efb\u52a1\u662f\u4ece\u65b9\u6cd5\u7684\u53c2\u6570\u5217\u8868\u6216\u8005\u5176\u4ed6\u53c2\u6570\u4e2d\u83b7\u53d6 URL \u6570\u636e\u3002\u4e3e\u4f8b\u8bf4\u660e\u4e00\u4e0b\uff0c\u6211\u4eec\u8981\u4e3a Protocol \u63a5\u53e3\u7684 refer \u548c export \u65b9\u6cd5\u751f\u6210\u4ee3\u7406\u903b\u8f91\u3002\u5728\u8fd0\u884c\u65f6\uff0c\u901a\u8fc7\u53cd\u5c04\u5f97\u5230\u7684\u65b9\u6cd5\u5b9a\u4e49\u5927\u81f4\u5982\u4e0b\uff1a Invoker refer(Class T arg0, URL arg1) throws RpcException; Exporter export(Invoker T arg0) throws RpcException; \u5bf9\u4e8e refer \u65b9\u6cd5\uff0c\u901a\u8fc7\u904d\u5386 refer \u7684\u53c2\u6570\u5217\u8868\u5373\u53ef\u83b7\u53d6 URL \u6570\u636e\uff0c\u8fd9\u4e2a\u8fd8\u6bd4\u8f83\u7b80\u5355\u3002\u5bf9\u4e8e export \u65b9\u6cd5\uff0c\u83b7\u53d6 URL \u6570\u636e\u5219\u8981\u9ebb\u70e6\u4e00\u4e9b\u3002export \u53c2\u6570\u5217\u8868\u4e2d\u6ca1\u6709 URL \u53c2\u6570\uff0c\u56e0\u6b64\u9700\u8981\u4ece Invoker \u53c2\u6570\u4e2d\u83b7\u53d6 URL \u6570\u636e\u3002\u83b7\u53d6\u65b9\u5f0f\u662f\u8c03\u7528 Invoker \u4e2d\u53ef\u8fd4\u56de URL \u7684 getter \u65b9\u6cd5\uff0c\u6bd4\u5982 getUrl\u3002\u5982\u679c Invoker \u4e2d\u65e0\u76f8\u5173 getter \u65b9\u6cd5\uff0c\u6b64\u65f6\u5219\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\u6574\u4e2a\u903b\u8f91\u5982\u4e0b\uff1a for (Method method : methods) { Class ? rt = method.getReturnType(); Class ? [] pts = method.getParameterTypes(); Class ? [] ets = method.getExceptionTypes(); Adaptive adaptiveAnnotation = method.getAnnotation(Adaptive.class); StringBuilder code = new StringBuilder(512); if (adaptiveAnnotation == null) { // ${\u65e0 Adaptive \u6ce8\u89e3\u65b9\u6cd5\u4ee3\u7801\u751f\u6210\u903b\u8f91} } else { int urlTypeIndex = -1; // \u904d\u5386\u53c2\u6570\u5217\u8868\uff0c\u786e\u5b9a URL \u53c2\u6570\u4f4d\u7f6e for (int i = 0; i pts.length; ++i) { if (pts[i].equals(URL.class)) { urlTypeIndex = i; break; } } // urlTypeIndex != -1\uff0c\u8868\u793a\u53c2\u6570\u5217\u8868\u4e2d\u5b58\u5728 URL \u53c2\u6570 if (urlTypeIndex != -1) { // \u4e3a URL \u7c7b\u578b\u53c2\u6570\u751f\u6210\u5224\u7a7a\u4ee3\u7801\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a // if (arg + urlTypeIndex == null) // throw new IllegalArgumentException( url == null ); String s = String.format( \\nif (arg%d == null) throw new IllegalArgumentException(\\ url == null\\ ); , urlTypeIndex); code.append(s); // \u4e3a URL \u7c7b\u578b\u53c2\u6570\u751f\u6210\u8d4b\u503c\u4ee3\u7801\uff0c\u5f62\u5982 URL url = arg1 s = String.format( \\n%s url = arg%d; , URL.class.getName(), urlTypeIndex); code.append(s); // \u53c2\u6570\u5217\u8868\u4e2d\u4e0d\u5b58\u5728 URL \u7c7b\u578b\u53c2\u6570 } else { String attribMethod = null; LBL_PTS: // \u904d\u5386\u65b9\u6cd5\u7684\u53c2\u6570\u7c7b\u578b\u5217\u8868 for (int i = 0; i pts.length; ++i) { // \u83b7\u53d6\u67d0\u4e00\u7c7b\u578b\u53c2\u6570\u7684\u5168\u90e8\u65b9\u6cd5 Method[] ms = pts[i].getMethods(); // \u904d\u5386\u65b9\u6cd5\u5217\u8868\uff0c\u5bfb\u627e\u53ef\u8fd4\u56de URL \u7684 getter \u65b9\u6cd5 for (Method m : ms) { String name = m.getName(); // 1. \u65b9\u6cd5\u540d\u4ee5 get \u5f00\u5934\uff0c\u6216\u65b9\u6cd5\u540d\u5927\u4e8e3\u4e2a\u5b57\u7b26 // 2. \u65b9\u6cd5\u7684\u8bbf\u95ee\u6743\u9650\u4e3a public // 3. \u975e\u9759\u6001\u65b9\u6cd5 // 4. \u65b9\u6cd5\u53c2\u6570\u6570\u91cf\u4e3a0 // 5. \u65b9\u6cd5\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a URL if ((name.startsWith( get ) || name.length() 3) Modifier.isPublic(m.getModifiers()) !Modifier.isStatic(m.getModifiers()) m.getParameterTypes().length == 0 m.getReturnType() == URL.class) { urlTypeIndex = i; attribMethod = name; // \u7ed3\u675f for (int i = 0; i pts.length; ++i) \u5faa\u73af break LBL_PTS; } } } if (attribMethod == null) { // \u5982\u679c\u6240\u6709\u53c2\u6570\u4e2d\u5747\u4e0d\u5305\u542b\u53ef\u8fd4\u56de URL \u7684 getter \u65b9\u6cd5\uff0c\u5219\u629b\u51fa\u5f02\u5e38 throw new IllegalStateException( fail to create adaptive class for interface ... ); } // \u4e3a\u53ef\u8fd4\u56de URL \u7684\u53c2\u6570\u751f\u6210\u5224\u7a7a\u4ee3\u7801\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a // if (arg + urlTypeIndex == null) // throw new IllegalArgumentException( \u53c2\u6570\u5168\u9650\u5b9a\u540d + argument == null ); String s = String.format( \\nif (arg%d == null) throw new IllegalArgumentException(\\ %s argument == null\\ ); , urlTypeIndex, pts[urlTypeIndex].getName()); code.append(s); // \u4e3a getter \u65b9\u6cd5\u8fd4\u56de\u7684 URL \u751f\u6210\u5224\u7a7a\u4ee3\u7801\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a // if (argN.getter\u65b9\u6cd5\u540d() == null) // throw new IllegalArgumentException(\u53c2\u6570\u5168\u9650\u5b9a\u540d + argument getUrl() == null); s = String.format( \\nif (arg%d.%s() == null) throw new IllegalArgumentException(\\ %s argument %s() == null\\ ); , urlTypeIndex, attribMethod, pts[urlTypeIndex].getName(), attribMethod); code.append(s); // \u751f\u6210\u8d4b\u503c\u8bed\u53e5\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a // URL\u5168\u9650\u5b9a\u540d url = argN.getter\u65b9\u6cd5\u540d()\uff0c\u6bd4\u5982 // com.alibaba.dubbo.common.URL url = invoker.getUrl(); s = String.format( %s url = arg%d.%s(); , URL.class.getName(), urlTypeIndex, attribMethod); code.append(s); } // \u7701\u7565\u65e0\u5173\u4ee3\u7801 } // \u7701\u7565\u65e0\u5173\u4ee3\u7801 } \u4e0a\u9762\u4ee3\u7801\u6709\u70b9\u591a\uff0c\u9700\u8981\u8010\u5fc3\u770b\u4e00\u4e0b\u3002\u8fd9\u6bb5\u4ee3\u7801\u4e3b\u8981\u76ee\u7684\u662f\u4e3a\u4e86\u83b7\u53d6 URL \u6570\u636e\uff0c\u5e76\u4e3a\u4e4b\u751f\u6210\u5224\u7a7a\u548c\u8d4b\u503c\u4ee3\u7801\u3002\u4ee5 Protocol \u7684 refer \u548c export \u65b9\u6cd5\u4e3a\u4f8b\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u4e3a\u5b83\u4eec\u751f\u6210\u5982\u4e0b\u5185\u5bb9\uff08\u4ee3\u7801\u5df2\u683c\u5f0f\u5316\uff09\uff1a refer: if (arg1 == null) throw new IllegalArgumentException( url == null ); com.alibaba.dubbo.common.URL url = arg1; export: if (arg0 == null) throw new IllegalArgumentException( com.alibaba.dubbo.rpc.Invoker argument == null ); if (arg0.getUrl() == null) throw new IllegalArgumentException( com.alibaba.dubbo.rpc.Invoker argument getUrl() == null ); com.alibaba.dubbo.common.URL url = arg0.getUrl(); 2.2.3.3 \u83b7\u53d6 Adaptive \u6ce8\u89e3\u503c Adaptive \u6ce8\u89e3\u503c value \u7c7b\u578b\u4e3a String[]\uff0c\u53ef\u586b\u5199\u591a\u4e2a\u503c\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e3a\u7a7a\u6570\u7ec4\u3002\u82e5 value \u4e3a\u975e\u7a7a\u6570\u7ec4\uff0c\u76f4\u63a5\u83b7\u53d6\u6570\u7ec4\u5185\u5bb9\u5373\u53ef\u3002\u82e5 value \u4e3a\u7a7a\u6570\u7ec4\uff0c\u5219\u9700\u8fdb\u884c\u989d\u5916\u5904\u7406\u3002\u5904\u7406\u8fc7\u7a0b\u662f\u5c06\u7c7b\u540d\u8f6c\u6362\u4e3a\u5b57\u7b26\u6570\u7ec4\uff0c\u7136\u540e\u904d\u5386\u5b57\u7b26\u6570\u7ec4\uff0c\u5e76\u5c06\u5b57\u7b26\u653e\u5165 StringBuilder \u4e2d\u3002\u82e5\u5b57\u7b26\u4e3a\u5927\u5199\u5b57\u6bcd\uff0c\u5219\u5411 StringBuilder \u4e2d\u6dfb\u52a0\u70b9\u53f7\uff0c\u968f\u540e\u5c06\u5b57\u7b26\u53d8\u4e3a\u5c0f\u5199\u5b58\u5165 StringBuilder \u4e2d\u3002\u6bd4\u5982 LoadBalance \u7ecf\u8fc7\u5904\u7406\u540e\uff0c\u5f97\u5230 load.balance\u3002 for (Method method : methods) { Class ? rt = method.getReturnType(); Class ? [] pts = method.getParameterTypes(); Class ? [] ets = method.getExceptionTypes(); Adaptive adaptiveAnnotation = method.getAnnotation(Adaptive.class); StringBuilder code = new StringBuilder(512); if (adaptiveAnnotation == null) { // ${\u65e0 Adaptive \u6ce8\u89e3\u65b9\u6cd5\u4ee3\u7801\u751f\u6210\u903b\u8f91} } else { // ${\u83b7\u53d6 URL \u6570\u636e} String[] value = adaptiveAnnotation.value(); // value \u4e3a\u7a7a\u6570\u7ec4 if (value.length == 0) { // \u83b7\u53d6\u7c7b\u540d\uff0c\u5e76\u5c06\u7c7b\u540d\u8f6c\u6362\u4e3a\u5b57\u7b26\u6570\u7ec4 char[] charArray = type.getSimpleName().toCharArray(); StringBuilder sb = new StringBuilder(128); // \u904d\u5386\u5b57\u8282\u6570\u7ec4 for (int i = 0; i charArray.length; i++) { // \u68c0\u6d4b\u5f53\u524d\u5b57\u7b26\u662f\u5426\u4e3a\u5927\u5199\u5b57\u6bcd if (Character.isUpperCase(charArray[i])) { if (i != 0) { // \u5411 sb \u4e2d\u6dfb\u52a0\u70b9\u53f7 sb.append( . ); } // \u5c06\u5b57\u7b26\u53d8\u4e3a\u5c0f\u5199\uff0c\u5e76\u6dfb\u52a0\u5230 sb \u4e2d sb.append(Character.toLowerCase(charArray[i])); } else { // \u6dfb\u52a0\u5b57\u7b26\u5230 sb \u4e2d sb.append(charArray[i]); } } value = new String[]{sb.toString()}; } // \u7701\u7565\u65e0\u5173\u4ee3\u7801 } // \u7701\u7565\u65e0\u5173\u903b\u8f91 } 2.2.3.4 \u68c0\u6d4b Invocation \u53c2\u6570 \u6b64\u6bb5\u903b\u8f91\u662f\u68c0\u6d4b\u65b9\u6cd5\u5217\u8868\u4e2d\u662f\u5426\u5b58\u5728 Invocation \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u82e5\u5b58\u5728\uff0c\u5219\u4e3a\u5176\u751f\u6210\u5224\u7a7a\u4ee3\u7801\u548c\u5176\u4ed6\u4e00\u4e9b\u4ee3\u7801\u3002\u76f8\u5e94\u7684\u903b\u8f91\u5982\u4e0b\uff1a for (Method method : methods) { Class ? rt = method.getReturnType(); Class ? [] pts = method.getParameterTypes(); // \u83b7\u53d6\u53c2\u6570\u7c7b\u578b\u5217\u8868 Class ? [] ets = method.getExceptionTypes(); Adaptive adaptiveAnnotation = method.getAnnotation(Adaptive.class); StringBuilder code = new StringBuilder(512); if (adaptiveAnnotation == null) { // ${\u65e0 Adaptive \u6ce8\u89e3\u65b9\u6cd5\u4ee3\u7801\u751f\u6210\u903b\u8f91} } else { // ${\u83b7\u53d6 URL \u6570\u636e} // ${\u83b7\u53d6 Adaptive \u6ce8\u89e3\u503c} boolean hasInvocation = false; // \u904d\u5386\u53c2\u6570\u7c7b\u578b\u5217\u8868 for (int i = 0; i pts.length; ++i) { // \u5224\u65ad\u5f53\u524d\u53c2\u6570\u540d\u79f0\u662f\u5426\u7b49\u4e8e com.alibaba.dubbo.rpc.Invocation if (pts[i].getName().equals( com.alibaba.dubbo.rpc.Invocation )) { // \u4e3a Invocation \u7c7b\u578b\u53c2\u6570\u751f\u6210\u5224\u7a7a\u4ee3\u7801 String s = String.format( \\nif (arg%d == null) throw new IllegalArgumentException(\\ invocation == null\\ ); , i); code.append(s); // \u751f\u6210 getMethodName \u65b9\u6cd5\u8c03\u7528\u4ee3\u7801\uff0c\u683c\u5f0f\u4e3a\uff1a // String methodName = argN.getMethodName(); s = String.format( \\nString methodName = arg%d.getMethodName(); , i); code.append(s); // \u8bbe\u7f6e hasInvocation \u4e3a true hasInvocation = true; break; } } } // \u7701\u7565\u65e0\u5173\u903b\u8f91 } 2.2.3.5 \u751f\u6210\u62d3\u5c55\u540d\u83b7\u53d6\u903b\u8f91 \u672c\u6bb5\u903b\u8f91\u7528\u4e8e\u6839\u636e SPI \u548c Adaptive \u6ce8\u89e3\u503c\u751f\u6210\u201c\u83b7\u53d6\u62d3\u5c55\u540d\u903b\u8f91\u201d\uff0c\u540c\u65f6\u751f\u6210\u903b\u8f91\u4e5f\u53d7 Invocation \u7c7b\u578b\u53c2\u6570\u5f71\u54cd\uff0c\u7efc\u5408\u56e0\u7d20\u5bfc\u81f4\u672c\u6bb5\u903b\u8f91\u76f8\u5bf9\u590d\u6742\u3002\u672c\u6bb5\u903b\u8f91\u53ef\u80fd\u4f1a\u751f\u6210\u4f46\u4e0d\u9650\u4e8e\u4e0b\u9762\u7684\u4ee3\u7801\uff1a String extName = (url.getProtocol() == null ? dubbo : url.getProtocol()); \u6216 String extName = url.getMethodParameter(methodName, loadbalance , random ); \u4ea6\u6216\u662f String extName = url.getParameter( client , url.getParameter( transporter , netty )); \u672c\u6bb5\u903b\u8f91\u590d\u6742\u4e4b\u5904\u5728\u4e8e\u6761\u4ef6\u5206\u652f\u6bd4\u8f83\u591a\uff0c\u5927\u5bb6\u5728\u9605\u8bfb\u6e90\u7801\u65f6\u9700\u8981\u77e5\u9053\u6bcf\u4e2a\u6761\u4ef6\u5206\u652f\u7684\u610f\u4e49\u662f\u4ec0\u4e48\uff0c\u5426\u5219\u4e0d\u592a\u5bb9\u6613\u770b\u61c2\u76f8\u5173\u4ee3\u7801\u3002\u4e0b\u9762\u5f00\u59cb\u5206\u6790\u672c\u6bb5\u903b\u8f91\u3002 for (Method method : methods) { Class ? rt = method.getReturnType(); Class ? [] pts = method.getParameterTypes(); Class ? [] ets = method.getExceptionTypes(); Adaptive adaptiveAnnotation = method.getAnnotation(Adaptive.class); StringBuilder code = new StringBuilder(512); if (adaptiveAnnotation == null) { // $\u65e0 Adaptive \u6ce8\u89e3\u65b9\u6cd5\u4ee3\u7801\u751f\u6210\u903b\u8f91} } else { // ${\u83b7\u53d6 URL \u6570\u636e} // ${\u83b7\u53d6 Adaptive \u6ce8\u89e3\u503c} // ${\u68c0\u6d4b Invocation \u53c2\u6570} // \u8bbe\u7f6e\u9ed8\u8ba4\u62d3\u5c55\u540d\uff0ccachedDefaultName \u6e90\u4e8e SPI \u6ce8\u89e3\u503c\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c // SPI \u6ce8\u89e3\u503c\u4e3a\u7a7a\u4e32\uff0c\u6b64\u65f6 cachedDefaultName = null String defaultExtName = cachedDefaultName; String getNameCode = null; // \u904d\u5386 value\uff0c\u8fd9\u91cc\u7684 value \u662f Adaptive \u7684\u6ce8\u89e3\u503c\uff0c2.2.3.3 \u8282\u5206\u6790\u8fc7 value \u53d8\u91cf\u7684\u83b7\u53d6\u8fc7\u7a0b\u3002 // \u6b64\u5904\u5faa\u73af\u76ee\u7684\u662f\u751f\u6210\u4ece URL \u4e2d\u83b7\u53d6\u62d3\u5c55\u540d\u7684\u4ee3\u7801\uff0c\u751f\u6210\u7684\u4ee3\u7801\u4f1a\u8d4b\u503c\u7ed9 getNameCode \u53d8\u91cf\u3002\u6ce8\u610f\u8fd9 // \u4e2a\u5faa\u73af\u7684\u904d\u5386\u987a\u5e8f\u662f\u7531\u540e\u5411\u524d\u904d\u5386\u7684\u3002 for (int i = value.length - 1; i = 0; --i) { // \u5f53 i \u4e3a\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u5750\u6807\u65f6 if (i == value.length - 1) { // \u9ed8\u8ba4\u62d3\u5c55\u540d\u975e\u7a7a if (null != defaultExtName) { // protocol \u662f url \u7684\u4e00\u90e8\u5206\uff0c\u53ef\u901a\u8fc7 getProtocol \u65b9\u6cd5\u83b7\u53d6\uff0c\u5176\u4ed6\u7684\u5219\u662f\u4ece // URL \u53c2\u6570\u4e2d\u83b7\u53d6\u3002\u56e0\u4e3a\u83b7\u53d6\u65b9\u5f0f\u4e0d\u540c\uff0c\u6240\u4ee5\u8fd9\u91cc\u8981\u5224\u65ad value[i] \u662f\u5426\u4e3a protocol if (! protocol .equals(value[i])) // hasInvocation \u7528\u4e8e\u6807\u8bc6\u65b9\u6cd5\u53c2\u6570\u5217\u8868\u4e2d\u662f\u5426\u6709 Invocation \u7c7b\u578b\u53c2\u6570 if (hasInvocation) // \u751f\u6210\u7684\u4ee3\u7801\u529f\u80fd\u7b49\u4ef7\u4e8e\u4e0b\u9762\u7684\u4ee3\u7801\uff1a // url.getMethodParameter(methodName, value[i], defaultExtName) // \u4ee5 LoadBalance \u63a5\u53e3\u7684 select \u65b9\u6cd5\u4e3a\u4f8b\uff0c\u6700\u7ec8\u751f\u6210\u7684\u4ee3\u7801\u5982\u4e0b\uff1a // url.getMethodParameter(methodName, loadbalance , random ) getNameCode = String.format( url.getMethodParameter(methodName, \\ %s\\ , \\ %s\\ ) , value[i], defaultExtName); else // \u751f\u6210\u7684\u4ee3\u7801\u529f\u80fd\u7b49\u4ef7\u4e8e\u4e0b\u9762\u7684\u4ee3\u7801\uff1a // url.getParameter(value[i], defaultExtName) getNameCode = String.format( url.getParameter(\\ %s\\ , \\ %s\\ ) , value[i], defaultExtName); else // \u751f\u6210\u7684\u4ee3\u7801\u529f\u80fd\u7b49\u4ef7\u4e8e\u4e0b\u9762\u7684\u4ee3\u7801\uff1a // ( url.getProtocol() == null ? defaultExtName : url.getProtocol() ) getNameCode = String.format( ( url.getProtocol() == null ? \\ %s\\ : url.getProtocol() ) , defaultExtName); // \u9ed8\u8ba4\u62d3\u5c55\u540d\u4e3a\u7a7a } else { if (! protocol .equals(value[i])) if (hasInvocation) // \u751f\u6210\u4ee3\u7801\u683c\u5f0f\u540c\u4e0a getNameCode = String.format( url.getMethodParameter(methodName, \\ %s\\ , \\ %s\\ ) , value[i], defaultExtName); else // \u751f\u6210\u7684\u4ee3\u7801\u529f\u80fd\u7b49\u4ef7\u4e8e\u4e0b\u9762\u7684\u4ee3\u7801\uff1a // url.getParameter(value[i]) getNameCode = String.format( url.getParameter(\\ %s\\ ) , value[i]); else // \u751f\u6210\u4ece url \u4e2d\u83b7\u53d6\u534f\u8bae\u7684\u4ee3\u7801\uff0c\u6bd4\u5982 dubbo getNameCode = url.getProtocol() ; } } else { if (! protocol .equals(value[i])) if (hasInvocation) // \u751f\u6210\u4ee3\u7801\u683c\u5f0f\u540c\u4e0a getNameCode = String.format( url.getMethodParameter(methodName, \\ %s\\ , \\ %s\\ ) , value[i], defaultExtName); else // \u751f\u6210\u7684\u4ee3\u7801\u529f\u80fd\u7b49\u4ef7\u4e8e\u4e0b\u9762\u7684\u4ee3\u7801\uff1a // url.getParameter(value[i], getNameCode) // \u4ee5 Transporter \u63a5\u53e3\u7684 connect \u65b9\u6cd5\u4e3a\u4f8b\uff0c\u6700\u7ec8\u751f\u6210\u7684\u4ee3\u7801\u5982\u4e0b\uff1a // url.getParameter( client , url.getParameter( transporter , netty )) getNameCode = String.format( url.getParameter(\\ %s\\ , %s) , value[i], getNameCode); else // \u751f\u6210\u7684\u4ee3\u7801\u529f\u80fd\u7b49\u4ef7\u4e8e\u4e0b\u9762\u7684\u4ee3\u7801\uff1a // url.getProtocol() == null ? getNameCode : url.getProtocol() // \u4ee5 Protocol \u63a5\u53e3\u7684 connect \u65b9\u6cd5\u4e3a\u4f8b\uff0c\u6700\u7ec8\u751f\u6210\u7684\u4ee3\u7801\u5982\u4e0b\uff1a // url.getProtocol() == null ? dubbo : url.getProtocol() getNameCode = String.format( url.getProtocol() == null ? (%s) : url.getProtocol() , getNameCode); } } // \u751f\u6210 extName \u8d4b\u503c\u4ee3\u7801 code.append( \\nString extName = ).append(getNameCode).append( ; ); // \u751f\u6210 extName \u5224\u7a7a\u4ee3\u7801 String s = String.format( \\nif(extName == null) + throw new IllegalStateException(\\ Fail to get extension(%s) name from url(\\ + url.toString() + \\ ) use keys(%s)\\ ); , type.getName(), Arrays.toString(value)); code.append(s); } // \u7701\u7565\u65e0\u5173\u903b\u8f91 } \u4e0a\u9762\u4ee3\u7801\u6bd4\u8f83\u590d\u6742\uff0c\u4e0d\u662f\u5f88\u597d\u7406\u89e3\u3002\u5bf9\u4e8e\u8fd9\u6bb5\u4ee3\u7801\uff0c\u5efa\u8bae\u5927\u5bb6\u5199\u70b9\u6d4b\u8bd5\u7528\u4f8b\uff0c\u5bf9 Protocol\u3001LoadBalance \u4ee5\u53ca Transporter \u7b49\u63a5\u53e3\u7684\u81ea\u9002\u5e94\u62d3\u5c55\u7c7b\u4ee3\u7801\u751f\u6210\u8fc7\u7a0b\u8fdb\u884c\u8c03\u8bd5\u3002\u8fd9\u91cc\u6211\u4ee5 Transporter \u63a5\u53e3\u7684\u81ea\u9002\u5e94\u62d3\u5c55\u7c7b\u4ee3\u7801\u751f\u6210\u8fc7\u7a0b\u4e3e\u4f8b\u8bf4\u660e\u3002\u9996\u5148\u770b\u4e00\u4e0b Transporter \u63a5\u53e3\u7684\u5b9a\u4e49\uff0c\u5982\u4e0b\uff1a @SPI( netty ) public interface Transporter { // @Adaptive({server, transporter}) @Adaptive({Constants.SERVER_KEY, Constants.TRANSPORTER_KEY}) Server bind(URL url, ChannelHandler handler) throws RemotingException; // @Adaptive({client, transporter}) @Adaptive({Constants.CLIENT_KEY, Constants.TRANSPORTER_KEY}) Client connect(URL url, ChannelHandler handler) throws RemotingException; } \u4e0b\u9762\u5bf9 connect \u65b9\u6cd5\u4ee3\u7406\u903b\u8f91\u751f\u6210\u7684\u8fc7\u7a0b\u8fdb\u884c\u5206\u6790\uff0c\u6b64\u65f6\u751f\u6210\u4ee3\u7406\u903b\u8f91\u6240\u7528\u5230\u7684\u53d8\u91cf\u5982\u4e0b\uff1a String defaultExtName = netty ; boolean hasInvocation = false; String getNameCode = null; String[] value = [ client , transporter ]; \u4e0b\u9762\u5bf9 value \u6570\u7ec4\u8fdb\u884c\u904d\u5386\uff0c\u6b64\u65f6 i = 1, value[i] = \"transporter\"\uff0c\u751f\u6210\u7684\u4ee3\u7801\u5982\u4e0b\uff1a getNameCode = url.getParameter( transporter , netty ); \u63a5\u4e0b\u6765\uff0cfor \u5faa\u73af\u7ee7\u7eed\u6267\u884c\uff0c\u6b64\u65f6 i = 0, value[i] = \"client\"\uff0c\u751f\u6210\u7684\u4ee3\u7801\u5982\u4e0b\uff1a getNameCode = url.getParameter( client , url.getParameter( transporter , netty )); for \u5faa\u73af\u7ed3\u675f\u8fd0\u884c\uff0c\u73b0\u5728\u4e3a extName \u53d8\u91cf\u751f\u6210\u8d4b\u503c\u548c\u5224\u7a7a\u4ee3\u7801\uff0c\u5982\u4e0b\uff1a String extName = url.getParameter( client , url.getParameter( transporter , netty )); if (extName == null) { throw new IllegalStateException( Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url( + url.toString() + ) use keys([client, transporter]) ); } 2.2.3.6 \u751f\u6210\u62d3\u5c55\u52a0\u8f7d\u4e0e\u76ee\u6807\u65b9\u6cd5\u8c03\u7528\u903b\u8f91 \u672c\u6bb5\u4ee3\u7801\u903b\u8f91\u7528\u4e8e\u6839\u636e\u62d3\u5c55\u540d\u52a0\u8f7d\u62d3\u5c55\u5b9e\u4f8b\uff0c\u5e76\u8c03\u7528\u62d3\u5c55\u5b9e\u4f8b\u7684\u76ee\u6807\u65b9\u6cd5\u3002\u76f8\u5173\u903b\u8f91\u5982\u4e0b\uff1a for (Method method : methods) { Class ? rt = method.getReturnType(); Class ? [] pts = method.getParameterTypes(); Class ? [] ets = method.getExceptionTypes(); Adaptive adaptiveAnnotation = method.getAnnotation(Adaptive.class); StringBuilder code = new StringBuilder(512); if (adaptiveAnnotation == null) { // $\u65e0 Adaptive \u6ce8\u89e3\u65b9\u6cd5\u4ee3\u7801\u751f\u6210\u903b\u8f91} } else { // ${\u83b7\u53d6 URL \u6570\u636e} // ${\u83b7\u53d6 Adaptive \u6ce8\u89e3\u503c} // ${\u68c0\u6d4b Invocation \u53c2\u6570} // ${\u751f\u6210\u62d3\u5c55\u540d\u83b7\u53d6\u903b\u8f91} // \u751f\u6210\u62d3\u5c55\u83b7\u53d6\u4ee3\u7801\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a // type\u5168\u9650\u5b9a\u540d extension = (type\u5168\u9650\u5b9a\u540d)ExtensionLoader\u5168\u9650\u5b9a\u540d // .getExtensionLoader(type\u5168\u9650\u5b9a\u540d.class).getExtension(extName); // Tips: \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684 % s \u8868\u793a\u4f7f\u7528\u524d\u4e00\u4e2a\u8f6c\u6362\u7b26\u6240\u63cf\u8ff0\u7684\u53c2\u6570\uff0c\u5373 type \u5168\u9650\u5b9a\u540d s = String.format( \\n%s extension = (% s)%s.getExtensionLoader(%s.class).getExtension(extName); , type.getName(), ExtensionLoader.class.getSimpleName(), type.getName()); code.append(s); // \u5982\u679c\u65b9\u6cd5\u8fd4\u56de\u503c\u7c7b\u578b\u975e void\uff0c\u5219\u751f\u6210 return \u8bed\u53e5\u3002 if (!rt.equals(void.class)) { code.append( \\nreturn ); } // \u751f\u6210\u76ee\u6807\u65b9\u6cd5\u8c03\u7528\u903b\u8f91\uff0c\u683c\u5f0f\u4e3a\uff1a // extension.\u65b9\u6cd5\u540d(arg0, arg2, ..., argN); s = String.format( extension.%s( , method.getName()); code.append(s); for (int i = 0; i pts.length; i++) { if (i != 0) code.append( , ); code.append( arg ).append(i); } code.append( ); ); } // \u7701\u7565\u65e0\u5173\u903b\u8f91 } \u4ee5 Protocol \u63a5\u53e3\u4e3e\u4f8b\u8bf4\u660e\uff0c\u4e0a\u9762\u4ee3\u7801\u751f\u6210\u7684\u5185\u5bb9\u5982\u4e0b\uff1a com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol) ExtensionLoader .getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName); return extension.refer(arg0, arg1); 2.2.3.7 \u751f\u6210\u5b8c\u6574\u7684\u65b9\u6cd5 \u672c\u8282\u8fdb\u884c\u4ee3\u7801\u751f\u6210\u7684\u6536\u5c3e\u5de5\u4f5c\uff0c\u4e3b\u8981\u7528\u4e8e\u751f\u6210\u65b9\u6cd5\u5b9a\u4e49\u7684\u4ee3\u7801\u3002\u76f8\u5173\u903b\u8f91\u5982\u4e0b\uff1a for (Method method : methods) { Class ? rt = method.getReturnType(); Class ? [] pts = method.getParameterTypes(); Class ? [] ets = method.getExceptionTypes(); Adaptive adaptiveAnnotation = method.getAnnotation(Adaptive.class); StringBuilder code = new StringBuilder(512); if (adaptiveAnnotation == null) { // $\u65e0 Adaptive \u6ce8\u89e3\u65b9\u6cd5\u4ee3\u7801\u751f\u6210\u903b\u8f91} } else { // ${\u83b7\u53d6 URL \u6570\u636e} // ${\u83b7\u53d6 Adaptive \u6ce8\u89e3\u503c} // ${\u68c0\u6d4b Invocation \u53c2\u6570} // ${\u751f\u6210\u62d3\u5c55\u540d\u83b7\u53d6\u903b\u8f91} // ${\u751f\u6210\u62d3\u5c55\u52a0\u8f7d\u4e0e\u76ee\u6807\u65b9\u6cd5\u8c03\u7528\u903b\u8f91} } } // public + \u8fd4\u56de\u503c\u5168\u9650\u5b9a\u540d + \u65b9\u6cd5\u540d + ( codeBuilder.append( \\npublic ) .append(rt.getCanonicalName()) .append( ) .append(method.getName()) .append( ( ); // \u6dfb\u52a0\u53c2\u6570\u5217\u8868\u4ee3\u7801 for (int i = 0; i pts.length; i++) { if (i 0) { codeBuilder.append( , ); } codeBuilder.append(pts[i].getCanonicalName()); codeBuilder.append( ); codeBuilder.append( arg ).append(i); } codeBuilder.append( ) ); // \u6dfb\u52a0\u5f02\u5e38\u629b\u51fa\u4ee3\u7801 if (ets.length 0) { codeBuilder.append( throws ); for (int i = 0; i ets.length; i++) { if (i 0) { codeBuilder.append( , ); } codeBuilder.append(ets[i].getCanonicalName()); } } codeBuilder.append( { ); codeBuilder.append(code.toString()); codeBuilder.append( \\n} ); \u4ee5 Protocol \u7684 refer \u65b9\u6cd5\u4e3a\u4f8b\uff0c\u4e0a\u9762\u4ee3\u7801\u751f\u6210\u7684\u5185\u5bb9\u5982\u4e0b\uff1a public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) { // \u65b9\u6cd5\u4f53 } 3.\u603b\u7ed3 \u5230\u6b64\uff0c\u5173\u4e8e\u81ea\u9002\u5e94\u62d3\u5c55\u7684\u539f\u7406\uff0c\u5b9e\u73b0\u5c31\u5206\u6790\u5b8c\u4e86\u3002\u603b\u7684\u6765\u8bf4\u81ea\u9002\u5e94\u62d3\u5c55\u6574\u4e2a\u903b\u8f91\u8fd8\u662f\u5f88\u590d\u6742\u7684\uff0c\u5e76\u4e0d\u662f\u5f88\u5bb9\u6613\u5f04\u61c2\u3002\u56e0\u6b64\uff0c\u5927\u5bb6\u5728\u9605\u8bfb\u8be5\u90e8\u5206\u6e90\u7801\u65f6\uff0c\u8010\u5fc3\u4e00\u4e9b\u3002\u540c\u65f6\u591a\u8fdb\u884c\u8c03\u8bd5\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u751f\u6210\u597d\u7684\u4ee3\u7801\u601d\u8003\u4ee3\u7801\u7684\u751f\u6210\u903b\u8f91\u3002\u597d\u4e86\uff0c\u672c\u7bc7\u6587\u7ae0\u5c31\u5206\u6790\u5230\u8fd9\u91cc\u3002","title":"SPI \u81ea\u9002\u5e94\u62d3\u5c55"},{"location":"source_code_guide/adaptive-extension/#1","text":"\u5728 Dubbo \u4e2d\uff0c\u5f88\u591a\u62d3\u5c55\u90fd\u662f\u901a\u8fc7 SPI \u673a\u5236\u8fdb\u884c\u52a0\u8f7d\u7684\uff0c\u6bd4\u5982 Protocol\u3001Cluster\u3001LoadBalance \u7b49\u3002\u6709\u65f6\uff0c\u6709\u4e9b\u62d3\u5c55\u5e76\u4e0d\u60f3\u5728\u6846\u67b6\u542f\u52a8\u9636\u6bb5\u88ab\u52a0\u8f7d\uff0c\u800c\u662f\u5e0c\u671b\u5728\u62d3\u5c55\u65b9\u6cd5\u88ab\u8c03\u7528\u65f6\uff0c\u6839\u636e\u8fd0\u884c\u65f6\u53c2\u6570\u8fdb\u884c\u52a0\u8f7d\u3002\u8fd9\u542c\u8d77\u6765\u6709\u4e9b\u77db\u76fe\u3002\u62d3\u5c55\u672a\u88ab\u52a0\u8f7d\uff0c\u90a3\u4e48\u62d3\u5c55\u65b9\u6cd5\u5c31\u65e0\u6cd5\u88ab\u8c03\u7528\uff08\u9759\u6001\u65b9\u6cd5\u9664\u5916\uff09\u3002\u62d3\u5c55\u65b9\u6cd5\u672a\u88ab\u8c03\u7528\uff0c\u62d3\u5c55\u5c31\u65e0\u6cd5\u88ab\u52a0\u8f7d\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u77db\u76fe\u7684\u95ee\u9898\uff0cDubbo \u901a\u8fc7\u81ea\u9002\u5e94\u62d3\u5c55\u673a\u5236\u5f88\u597d\u7684\u89e3\u51b3\u4e86\u3002\u81ea\u9002\u5e94\u62d3\u5c55\u673a\u5236\u7684\u5b9e\u73b0\u903b\u8f91\u6bd4\u8f83\u590d\u6742\uff0c\u9996\u5148 Dubbo \u4f1a\u4e3a\u62d3\u5c55\u63a5\u53e3\u751f\u6210\u5177\u6709\u4ee3\u7406\u529f\u80fd\u7684\u4ee3\u7801\u3002\u7136\u540e\u901a\u8fc7 javassist \u6216 jdk \u7f16\u8bd1\u8fd9\u6bb5\u4ee3\u7801\uff0c\u5f97\u5230 Class \u7c7b\u3002\u6700\u540e\u518d\u901a\u8fc7\u53cd\u5c04\u521b\u5efa\u4ee3\u7406\u7c7b\uff0c\u6574\u4e2a\u8fc7\u7a0b\u6bd4\u8f83\u590d\u6742\u3002\u4e3a\u4e86\u8ba9\u5927\u5bb6\u5bf9\u81ea\u9002\u5e94\u62d3\u5c55\u6709\u4e00\u4e2a\u611f\u6027\u7684\u8ba4\u8bc6\uff0c\u4e0b\u9762\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u793a\u4f8b\u8fdb\u884c\u6f14\u793a\u3002\u8fd9\u662f\u4e00\u4e2a\u4e0e\u6c7d\u8f66\u76f8\u5173\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u8f66\u8f6e\u5236\u9020\u5382\u63a5\u53e3 WheelMaker\uff1a public interface WheelMaker { Wheel makeWheel(URL url); } WheelMaker \u63a5\u53e3\u7684\u81ea\u9002\u5e94\u5b9e\u73b0\u7c7b\u5982\u4e0b\uff1a public class AdaptiveWheelMaker implements WheelMaker { public Wheel makeWheel(URL url) { if (url == null) { throw new IllegalArgumentException( url == null ); } // 1.\u4ece URL \u4e2d\u83b7\u53d6 WheelMaker \u540d\u79f0 String wheelMakerName = url.getParameter( Wheel.maker ); if (wheelMakerName == null) { throw new IllegalArgumentException( wheelMakerName == null ); } // 2.\u901a\u8fc7 SPI \u52a0\u8f7d\u5177\u4f53\u7684 WheelMaker WheelMaker wheelMaker = ExtensionLoader .getExtensionLoader(WheelMaker.class).getExtension(wheelMakerName); // 3.\u8c03\u7528\u76ee\u6807\u65b9\u6cd5 return wheelMaker.makeWheel(url); } } AdaptiveWheelMaker \u662f\u4e00\u4e2a\u4ee3\u7406\u7c7b\uff0c\u4e0e\u4f20\u7edf\u7684\u4ee3\u7406\u903b\u8f91\u4e0d\u540c\uff0cAdaptiveWheelMaker \u6240\u4ee3\u7406\u7684\u5bf9\u8c61\u662f\u5728 makeWheel \u65b9\u6cd5\u4e2d\u901a\u8fc7 SPI \u52a0\u8f7d\u5f97\u5230\u7684\u3002makeWheel \u65b9\u6cd5\u4e3b\u8981\u505a\u4e86\u4e09\u4ef6\u4e8b\u60c5\uff1a \u4ece URL \u4e2d\u83b7\u53d6 WheelMaker \u540d\u79f0 \u901a\u8fc7 SPI \u52a0\u8f7d\u5177\u4f53\u7684 WheelMaker \u5b9e\u73b0\u7c7b \u8c03\u7528\u76ee\u6807\u65b9\u6cd5 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6765\u770b\u770b\u6c7d\u8f66\u5236\u9020\u5382 CarMaker \u63a5\u53e3\u4e0e\u5176\u5b9e\u73b0\u7c7b\u3002 public interface CarMaker { Car makeCar(URL url); } public class RaceCarMaker implements CarMaker { WheelMaker wheelMaker; // \u901a\u8fc7 setter \u6ce8\u5165 AdaptiveWheelMaker public setWheelMaker(WheelMaker wheelMaker) { this.wheelMaker = wheelMaker; } public Car makeCar(URL url) { Wheel wheel = wheelMaker.makeWheel(url); return new RaceCar(wheel, ...); } } RaceCarMaker \u6301\u6709\u4e00\u4e2a WheelMaker \u7c7b\u578b\u7684\u6210\u5458\u53d8\u91cf\uff0c\u5728\u7a0b\u5e8f\u542f\u52a8\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 AdaptiveWheelMaker \u901a\u8fc7 setter \u65b9\u6cd5\u6ce8\u5165\u5230 RaceCarMaker \u4e2d\u3002\u5728\u8fd0\u884c\u65f6\uff0c\u5047\u8bbe\u6709\u8fd9\u6837\u4e00\u4e2a url \u53c2\u6570\u4f20\u5165\uff1a dubbo://192.168.0.101:20880/XxxService?wheel.maker=MichelinWheelMaker RaceCarMaker \u7684 makeCar \u65b9\u6cd5\u5c06\u4e0a\u9762\u7684 url \u4f5c\u4e3a\u53c2\u6570\u4f20\u7ed9 AdaptiveWheelMaker \u7684 makeWheel \u65b9\u6cd5\uff0cmakeWheel \u65b9\u6cd5\u4ece url \u4e2d\u63d0\u53d6 wheel.maker \u53c2\u6570\uff0c\u5f97\u5230 MichelinWheelMaker\u3002\u4e4b\u540e\u518d\u901a\u8fc7 SPI \u52a0\u8f7d\u914d\u7f6e\u540d\u4e3a MichelinWheelMaker \u7684\u5b9e\u73b0\u7c7b\uff0c\u5f97\u5230\u5177\u4f53\u7684 WheelMaker \u5b9e\u4f8b\u3002 \u4e0a\u9762\u7684\u793a\u4f8b\u5c55\u793a\u4e86\u81ea\u9002\u5e94\u62d3\u5c55\u7c7b\u7684\u6838\u5fc3\u5b9e\u73b0 ---- \u5728\u62d3\u5c55\u63a5\u53e3\u7684\u65b9\u6cd5\u88ab\u8c03\u7528\u65f6\uff0c\u901a\u8fc7 SPI \u52a0\u8f7d\u5177\u4f53\u7684\u62d3\u5c55\u5b9e\u73b0\u7c7b\uff0c\u5e76\u8c03\u7528\u62d3\u5c55\u5bf9\u8c61\u7684\u540c\u540d\u65b9\u6cd5\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6df1\u5165\u5230\u6e90\u7801\u4e2d\uff0c\u63a2\u7d22\u81ea\u9002\u5e94\u62d3\u5c55\u7c7b\u751f\u6210\u7684\u8fc7\u7a0b\u3002","title":"1.\u539f\u7406"},{"location":"source_code_guide/adaptive-extension/#2","text":"\u5728\u5bf9\u81ea\u9002\u5e94\u62d3\u5c55\u751f\u6210\u8fc7\u7a0b\u8fdb\u884c\u6df1\u5165\u5206\u6790\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e0b\u4e0e\u81ea\u9002\u5e94\u62d3\u5c55\u606f\u606f\u76f8\u5173\u7684\u4e00\u4e2a\u6ce8\u89e3\uff0c\u5373 Adaptive \u6ce8\u89e3\u3002\u8be5\u6ce8\u89e3\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a @Documented @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.TYPE, ElementType.METHOD}) public @interface Adaptive { String[] value() default {}; } \u4ece\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u53ef\u77e5\uff0cAdaptive \u53ef\u6ce8\u89e3\u5728\u7c7b\u6216\u65b9\u6cd5\u4e0a\u3002\u5f53 Adaptive \u6ce8\u89e3\u5728\u7c7b\u4e0a\u65f6\uff0cDubbo \u4e0d\u4f1a\u4e3a\u8be5\u7c7b\u751f\u6210\u4ee3\u7406\u7c7b\u3002\u6ce8\u89e3\u5728\u65b9\u6cd5\uff08\u63a5\u53e3\u65b9\u6cd5\uff09\u4e0a\u65f6\uff0cDubbo \u5219\u4f1a\u4e3a\u8be5\u65b9\u6cd5\u751f\u6210\u4ee3\u7406\u903b\u8f91\u3002Adaptive \u6ce8\u89e3\u5728\u7c7b\u4e0a\u7684\u60c5\u51b5\u5f88\u5c11\uff0c\u5728 Dubbo \u4e2d\uff0c\u4ec5\u6709\u4e24\u4e2a\u7c7b\u88ab Adaptive \u6ce8\u89e3\u4e86\uff0c\u5206\u522b\u662f AdaptiveCompiler \u548c AdaptiveExtensionFactory\u3002\u6b64\u79cd\u60c5\u51b5\uff0c\u8868\u793a\u62d3\u5c55\u7684\u52a0\u8f7d\u903b\u8f91\u7531\u4eba\u5de5\u7f16\u7801\u5b8c\u6210\u3002\u66f4\u591a\u65f6\u5019\uff0cAdaptive \u662f\u6ce8\u89e3\u5728\u63a5\u53e3\u65b9\u6cd5\u4e0a\u7684\uff0c\u8868\u793a\u62d3\u5c55\u7684\u52a0\u8f7d\u903b\u8f91\u9700\u7531\u6846\u67b6\u81ea\u52a8\u751f\u6210\u3002Adaptive \u6ce8\u89e3\u7684\u5730\u65b9\u4e0d\u540c\uff0c\u76f8\u5e94\u7684\u5904\u7406\u903b\u8f91\u4e5f\u662f\u4e0d\u540c\u7684\u3002\u6ce8\u89e3\u5728\u7c7b\u4e0a\u65f6\uff0c\u5904\u7406\u903b\u8f91\u6bd4\u8f83\u7b80\u5355\uff0c\u672c\u6587\u5c31\u4e0d\u5206\u6790\u4e86\u3002\u6ce8\u89e3\u5728\u63a5\u53e3\u65b9\u6cd5\u4e0a\u65f6\uff0c\u5904\u7406\u903b\u8f91\u8f83\u4e3a\u590d\u6742\uff0c\u672c\u7ae0\u5c06\u4f1a\u91cd\u70b9\u5206\u6790\u6b64\u5757\u903b\u8f91\u3002","title":"2.\u6e90\u7801\u5206\u6790"},{"location":"source_code_guide/adaptive-extension/#21","text":"getAdaptiveExtension \u65b9\u6cd5\u662f\u83b7\u53d6\u81ea\u9002\u5e94\u62d3\u5c55\u7684\u5165\u53e3\u65b9\u6cd5\uff0c\u56e0\u6b64\u4e0b\u9762\u6211\u4eec\u4ece\u8fd9\u4e2a\u65b9\u6cd5\u8fdb\u884c\u5206\u6790\u3002\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a public T getAdaptiveExtension() { // \u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6\u81ea\u9002\u5e94\u62d3\u5c55 Object instance = cachedAdaptiveInstance.get(); if (instance == null) { // \u7f13\u5b58\u672a\u547d\u4e2d if (createAdaptiveInstanceError == null) { synchronized (cachedAdaptiveInstance) { instance = cachedAdaptiveInstance.get(); if (instance == null) { try { // \u521b\u5efa\u81ea\u9002\u5e94\u62d3\u5c55 instance = createAdaptiveExtension(); // \u8bbe\u7f6e\u81ea\u9002\u5e94\u62d3\u5c55\u5230\u7f13\u5b58\u4e2d cachedAdaptiveInstance.set(instance); } catch (Throwable t) { createAdaptiveInstanceError = t; throw new IllegalStateException( fail to create adaptive instance: ... ); } } } } else { throw new IllegalStateException( fail to create adaptive instance: ... ); } } return (T) instance; } getAdaptiveExtension \u65b9\u6cd5\u9996\u5148\u4f1a\u68c0\u67e5\u7f13\u5b58\uff0c\u7f13\u5b58\u672a\u547d\u4e2d\uff0c\u5219\u8c03\u7528 createAdaptiveExtension \u65b9\u6cd5\u521b\u5efa\u81ea\u9002\u5e94\u62d3\u5c55\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u770b\u4e00\u4e0b createAdaptiveExtension \u65b9\u6cd5\u7684\u4ee3\u7801\u3002 private T createAdaptiveExtension() { try { // \u83b7\u53d6\u81ea\u9002\u5e94\u62d3\u5c55\u7c7b\uff0c\u5e76\u901a\u8fc7\u53cd\u5c04\u5b9e\u4f8b\u5316 return injectExtension((T) getAdaptiveExtensionClass().newInstance()); } catch (Exception e) { throw new IllegalStateException( Can not create adaptive extension ... ); } } createAdaptiveExtension \u65b9\u6cd5\u7684\u4ee3\u7801\u6bd4\u8f83\u5c11\uff0c\u4f46\u5374\u5305\u542b\u4e86\u4e09\u4e2a\u903b\u8f91\uff0c\u5206\u522b\u5982\u4e0b\uff1a \u8c03\u7528 getAdaptiveExtensionClass \u65b9\u6cd5\u83b7\u53d6\u81ea\u9002\u5e94\u62d3\u5c55 Class \u5bf9\u8c61 \u901a\u8fc7\u53cd\u5c04\u8fdb\u884c\u5b9e\u4f8b\u5316 \u8c03\u7528 injectExtension \u65b9\u6cd5\u5411\u62d3\u5c55\u5b9e\u4f8b\u4e2d\u6ce8\u5165\u4f9d\u8d56 \u524d\u4e24\u4e2a\u903b\u8f91\u6bd4\u8f83\u597d\u7406\u89e3\uff0c\u7b2c\u4e09\u4e2a\u903b\u8f91\u7528\u4e8e\u5411\u81ea\u9002\u5e94\u62d3\u5c55\u5bf9\u8c61\u4e2d\u6ce8\u5165\u4f9d\u8d56\u3002\u8fd9\u4e2a\u903b\u8f91\u770b\u4f3c\u591a\u4f59\uff0c\u4f46\u6709\u5b58\u5728\u7684\u5fc5\u8981\uff0c\u8fd9\u91cc\u7b80\u5355\u8bf4\u660e\u4e00\u4e0b\u3002\u524d\u9762\u8bf4\u8fc7\uff0cDubbo \u4e2d\u6709\u4e24\u79cd\u7c7b\u578b\u7684\u81ea\u9002\u5e94\u62d3\u5c55\uff0c\u4e00\u79cd\u662f\u624b\u5de5\u7f16\u7801\u7684\uff0c\u4e00\u79cd\u662f\u81ea\u52a8\u751f\u6210\u7684\u3002\u624b\u5de5\u7f16\u7801\u7684\u81ea\u9002\u5e94\u62d3\u5c55\u4e2d\u53ef\u80fd\u5b58\u5728\u7740\u4e00\u4e9b\u4f9d\u8d56\uff0c\u800c\u81ea\u52a8\u751f\u6210\u7684 Adaptive \u62d3\u5c55\u5219\u4e0d\u4f1a\u4f9d\u8d56\u5176\u4ed6\u7c7b\u3002\u8fd9\u91cc\u8c03\u7528 injectExtension \u65b9\u6cd5\u7684\u76ee\u7684\u662f\u4e3a\u624b\u5de5\u7f16\u7801\u7684\u81ea\u9002\u5e94\u62d3\u5c55\u6ce8\u5165\u4f9d\u8d56\uff0c\u8fd9\u4e00\u70b9\u9700\u8981\u5927\u5bb6\u6ce8\u610f\u4e00\u4e0b\u3002\u5173\u4e8e injectExtension \u65b9\u6cd5\uff0c\u524d\u6587\u5df2\u7ecf\u5206\u6790\u8fc7\u4e86\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002\u63a5\u4e0b\u6765\uff0c\u5206\u6790 getAdaptiveExtensionClass \u65b9\u6cd5\u7684\u903b\u8f91\u3002 private Class ? getAdaptiveExtensionClass() { // \u901a\u8fc7 SPI \u83b7\u53d6\u6240\u6709\u7684\u62d3\u5c55\u7c7b getExtensionClasses(); // \u68c0\u67e5\u7f13\u5b58\uff0c\u82e5\u7f13\u5b58\u4e0d\u4e3a\u7a7a\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u7f13\u5b58 if (cachedAdaptiveClass != null) { return cachedAdaptiveClass; } // \u521b\u5efa\u81ea\u9002\u5e94\u62d3\u5c55\u7c7b return cachedAdaptiveClass = createAdaptiveExtensionClass(); } getAdaptiveExtensionClass \u65b9\u6cd5\u540c\u6837\u5305\u542b\u4e86\u4e09\u4e2a\u903b\u8f91\uff0c\u5982\u4e0b\uff1a \u8c03\u7528 getExtensionClasses \u83b7\u53d6\u6240\u6709\u7684\u62d3\u5c55\u7c7b \u68c0\u67e5\u7f13\u5b58\uff0c\u82e5\u7f13\u5b58\u4e0d\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de\u7f13\u5b58 \u82e5\u7f13\u5b58\u4e3a\u7a7a\uff0c\u5219\u8c03\u7528 createAdaptiveExtensionClass \u521b\u5efa\u81ea\u9002\u5e94\u62d3\u5c55\u7c7b \u8fd9\u4e09\u4e2a\u903b\u8f91\u770b\u8d77\u6765\u5e73\u6de1\u65e0\u5947\uff0c\u4f3c\u4e4e\u6ca1\u6709\u591a\u8bb2\u7684\u5fc5\u8981\u3002\u4f46\u662f\u8fd9\u4e9b\u5e73\u6de1\u65e0\u5947\u7684\u4ee3\u7801\u4e2d\u9690\u85cf\u4e86\u7740\u4e00\u4e9b\u7ec6\u8282\uff0c\u9700\u8981\u8bf4\u660e\u4e00\u4e0b\u3002\u9996\u5148\u4ece\u7b2c\u4e00\u4e2a\u903b\u8f91\u8bf4\u8d77\uff0cgetExtensionClasses \u8fd9\u4e2a\u65b9\u6cd5\u7528\u4e8e\u83b7\u53d6\u67d0\u4e2a\u63a5\u53e3\u7684\u6240\u6709\u5b9e\u73b0\u7c7b\u3002\u6bd4\u5982\u8be5\u65b9\u6cd5\u53ef\u4ee5\u83b7\u53d6 Protocol \u63a5\u53e3\u7684 DubboProtocol\u3001HttpProtocol\u3001InjvmProtocol \u7b49\u5b9e\u73b0\u7c7b\u3002\u5728\u83b7\u53d6\u5b9e\u73b0\u7c7b\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u67d0\u4e2a\u5b9e\u73b0\u7c7b\u88ab Adaptive \u6ce8\u89e3\u4fee\u9970\u4e86\uff0c\u90a3\u4e48\u8be5\u7c7b\u5c31\u4f1a\u88ab\u8d4b\u503c\u7ed9 cachedAdaptiveClass \u53d8\u91cf\u3002\u6b64\u65f6\uff0c\u4e0a\u9762\u6b65\u9aa4\u4e2d\u7684\u7b2c\u4e8c\u6b65\u6761\u4ef6\u6210\u7acb\uff08\u7f13\u5b58\u4e0d\u4e3a\u7a7a\uff09\uff0c\u76f4\u63a5\u8fd4\u56de cachedAdaptiveClass \u5373\u53ef\u3002\u5982\u679c\u6240\u6709\u7684\u5b9e\u73b0\u7c7b\u5747\u672a\u88ab Adaptive \u6ce8\u89e3\u4fee\u9970\uff0c\u90a3\u4e48\u6267\u884c\u7b2c\u4e09\u6b65\u903b\u8f91\uff0c\u521b\u5efa\u81ea\u9002\u5e94\u62d3\u5c55\u7c7b\u3002\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a private Class ? createAdaptiveExtensionClass() { // \u6784\u5efa\u81ea\u9002\u5e94\u62d3\u5c55\u4ee3\u7801 String code = createAdaptiveExtensionClassCode(); ClassLoader classLoader = findClassLoader(); // \u83b7\u53d6\u7f16\u8bd1\u5668\u5b9e\u73b0\u7c7b com.alibaba.dubbo.common.compiler.Compiler compiler = ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.compiler.Compiler.class).getAdaptiveExtension(); // \u7f16\u8bd1\u4ee3\u7801\uff0c\u751f\u6210 Class return compiler.compile(code, classLoader); } createAdaptiveExtensionClass \u65b9\u6cd5\u7528\u4e8e\u751f\u6210\u81ea\u9002\u5e94\u62d3\u5c55\u7c7b\uff0c\u8be5\u65b9\u6cd5\u9996\u5148\u4f1a\u751f\u6210\u81ea\u9002\u5e94\u62d3\u5c55\u7c7b\u7684\u6e90\u7801\uff0c\u7136\u540e\u901a\u8fc7 Compiler \u5b9e\u4f8b\uff08Dubbo \u9ed8\u8ba4\u4f7f\u7528 javassist \u4f5c\u4e3a\u7f16\u8bd1\u5668\uff09\u7f16\u8bd1\u6e90\u7801\uff0c\u5f97\u5230\u4ee3\u7406\u7c7b Class \u5b9e\u4f8b\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u628a\u91cd\u70b9\u653e\u5728\u4ee3\u7406\u7c7b\u4ee3\u7801\u751f\u6210\u7684\u903b\u8f91\u4e0a\uff0c\u5176\u4ed6\u903b\u8f91\u5927\u5bb6\u81ea\u884c\u5206\u6790\u3002","title":"2.1 \u83b7\u53d6\u81ea\u9002\u5e94\u62d3\u5c55"},{"location":"source_code_guide/adaptive-extension/#22","text":"createAdaptiveExtensionClassCode \u65b9\u6cd5\u4ee3\u7801\u7565\u591a\uff0c\u7ea6\u6709\u4e24\u767e\u884c\u4ee3\u7801\u3002\u56e0\u6b64\u672c\u8282\u5c06\u4f1a\u5bf9\u8be5\u65b9\u6cd5\u7684\u4ee3\u7801\u8fdb\u884c\u62c6\u5206\u5206\u6790\uff0c\u4ee5\u5e2e\u52a9\u5927\u5bb6\u66f4\u597d\u7684\u7406\u89e3\u4ee3\u7801\u903b\u8f91\u3002","title":"2.2 \u81ea\u9002\u5e94\u62d3\u5c55\u7c7b\u4ee3\u7801\u751f\u6210"},{"location":"source_code_guide/adaptive-extension/#221-adaptive","text":"\u5728\u751f\u6210\u4ee3\u7406\u7c7b\u6e90\u7801\u4e4b\u524d\uff0ccreateAdaptiveExtensionClassCode \u65b9\u6cd5\u9996\u5148\u4f1a\u901a\u8fc7\u53cd\u5c04\u68c0\u6d4b\u63a5\u53e3\u65b9\u6cd5\u662f\u5426\u5305\u542b Adaptive \u6ce8\u89e3\u3002\u5bf9\u4e8e\u8981\u751f\u6210\u81ea\u9002\u5e94\u62d3\u5c55\u7684\u63a5\u53e3\uff0cDubbo \u8981\u6c42\u8be5\u63a5\u53e3\u81f3\u5c11\u6709\u4e00\u4e2a\u65b9\u6cd5\u88ab Adaptive \u6ce8\u89e3\u4fee\u9970\u3002\u82e5\u4e0d\u6ee1\u8db3\u6b64\u6761\u4ef6\uff0c\u5c31\u4f1a\u629b\u51fa\u8fd0\u884c\u65f6\u5f02\u5e38\u3002\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a // \u901a\u8fc7\u53cd\u5c04\u83b7\u53d6\u6240\u6709\u7684\u65b9\u6cd5 Method[] methods = type.getMethods(); boolean hasAdaptiveAnnotation = false; // \u904d\u5386\u65b9\u6cd5\u5217\u8868 for (Method m : methods) { // \u68c0\u6d4b\u65b9\u6cd5\u4e0a\u662f\u5426\u6709 Adaptive \u6ce8\u89e3 if (m.isAnnotationPresent(Adaptive.class)) { hasAdaptiveAnnotation = true; break; } } if (!hasAdaptiveAnnotation) // \u82e5\u6240\u6709\u7684\u65b9\u6cd5\u4e0a\u5747\u65e0 Adaptive \u6ce8\u89e3\uff0c\u5219\u629b\u51fa\u5f02\u5e38 throw new IllegalStateException( No adaptive method on extension ... );","title":"2.2.1 Adaptive \u6ce8\u89e3\u68c0\u6d4b"},{"location":"source_code_guide/adaptive-extension/#222","text":"\u901a\u8fc7 Adaptive \u6ce8\u89e3\u68c0\u6d4b\u540e\uff0c\u5373\u53ef\u5f00\u59cb\u751f\u6210\u4ee3\u7801\u3002\u4ee3\u7801\u751f\u6210\u7684\u987a\u5e8f\u4e0e Java \u6587\u4ef6\u5185\u5bb9\u987a\u5e8f\u4e00\u81f4\uff0c\u9996\u5148\u4f1a\u751f\u6210 package \u8bed\u53e5\uff0c\u7136\u540e\u751f\u6210 import \u8bed\u53e5\uff0c\u7d27\u63a5\u7740\u751f\u6210\u7c7b\u540d\u7b49\u4ee3\u7801\u3002\u6574\u4e2a\u903b\u8f91\u5982\u4e0b\uff1a // \u751f\u6210 package \u4ee3\u7801\uff1apackage + type \u6240\u5728\u5305 codeBuilder.append( package ).append(type.getPackage().getName()).append( ; ); // \u751f\u6210 import \u4ee3\u7801\uff1aimport + ExtensionLoader \u5168\u9650\u5b9a\u540d codeBuilder.append( \\nimport ).append(ExtensionLoader.class.getName()).append( ; ); // \u751f\u6210\u7c7b\u4ee3\u7801\uff1apublic class + type\u7b80\u5355\u540d\u79f0 + $Adaptive + implements + type\u5168\u9650\u5b9a\u540d + { codeBuilder.append( \\npublic class ) .append(type.getSimpleName()) .append( $Adaptive ) .append( implements ) .append(type.getCanonicalName()) .append( { ); // ${\u751f\u6210\u65b9\u6cd5} codeBuilder.append( \\n} ); \u8fd9\u91cc\u4f7f\u7528 ${...} \u5360\u4f4d\u7b26\u4ee3\u8868\u5176\u4ed6\u4ee3\u7801\u7684\u751f\u6210\u903b\u8f91\uff0c\u8be5\u90e8\u5206\u903b\u8f91\u5c06\u5728\u968f\u540e\u8fdb\u884c\u5206\u6790\u3002\u4e0a\u9762\u4ee3\u7801\u4e0d\u662f\u5f88\u96be\u7406\u89e3\uff0c\u4e0b\u9762\u76f4\u63a5\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u5c55\u793a\u8be5\u6bb5\u4ee3\u7801\u6240\u751f\u6210\u7684\u5185\u5bb9\u3002\u4ee5 Dubbo \u7684 Protocol \u63a5\u53e3\u4e3a\u4f8b\uff0c\u751f\u6210\u7684\u4ee3\u7801\u5982\u4e0b\uff1a package com.alibaba.dubbo.rpc; import com.alibaba.dubbo.common.extension.ExtensionLoader; public class Protocol$Adaptive implements com.alibaba.dubbo.rpc.Protocol { // \u7701\u7565\u65b9\u6cd5\u4ee3\u7801 }","title":"2.2.2 \u751f\u6210\u7c7b"},{"location":"source_code_guide/adaptive-extension/#223","text":"\u4e00\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u88ab Adaptive \u6ce8\u89e3\u4fee\u9970\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u88ab\u4fee\u9970\u3002\u8fd9\u91cc\u5c06\u672a\u88ab Adaptive \u6ce8\u89e3\u4fee\u9970\u7684\u65b9\u6cd5\u79f0\u4e3a\u201c\u65e0 Adaptive \u6ce8\u89e3\u65b9\u6cd5\u201d\uff0c\u4e0b\u9762\u6211\u4eec\u5148\u6765\u770b\u770b\u6b64\u79cd\u65b9\u6cd5\u7684\u4ee3\u7801\u751f\u6210\u903b\u8f91\u662f\u600e\u6837\u7684\u3002","title":"2.2.3 \u751f\u6210\u65b9\u6cd5"},{"location":"source_code_guide/adaptive-extension/#2231-adaptive","text":"\u5bf9\u4e8e\u63a5\u53e3\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u9700\u6c42\u6807\u6ce8 Adaptive \u6ce8\u89e3\u3002\u4ee5 Protocol \u63a5\u53e3\u4e3a\u4f8b\uff0c\u8be5\u63a5\u53e3\u7684 destroy \u548c getDefaultPort \u672a\u6807\u6ce8 Adaptive \u6ce8\u89e3\uff0c\u5176\u4ed6\u65b9\u6cd5\u5747\u6807\u6ce8\u4e86 Adaptive \u6ce8\u89e3\u3002Dubbo \u4e0d\u4f1a\u4e3a\u6ca1\u6709\u6807\u6ce8 Adaptive \u6ce8\u89e3\u7684\u65b9\u6cd5\u751f\u6210\u4ee3\u7406\u903b\u8f91\uff0c\u5bf9\u4e8e\u8be5\u79cd\u7c7b\u578b\u7684\u65b9\u6cd5\uff0c\u4ec5\u4f1a\u751f\u6210\u4e00\u53e5\u629b\u51fa\u5f02\u5e38\u7684\u4ee3\u7801\u3002\u751f\u6210\u903b\u8f91\u5982\u4e0b\uff1a for (Method method : methods) { // \u7701\u7565\u65e0\u5173\u903b\u8f91 Adaptive adaptiveAnnotation = method.getAnnotation(Adaptive.class); StringBuilder code = new StringBuilder(512); // \u5982\u679c\u65b9\u6cd5\u4e0a\u65e0 Adaptive \u6ce8\u89e3\uff0c\u5219\u751f\u6210 throw new UnsupportedOperationException(...) \u4ee3\u7801 if (adaptiveAnnotation == null) { // \u751f\u6210\u7684\u4ee3\u7801\u683c\u5f0f\u5982\u4e0b\uff1a // throw new UnsupportedOperationException( // method + \u65b9\u6cd5\u7b7e\u540d + of interface + \u5168\u9650\u5b9a\u63a5\u53e3\u540d + is not adaptive method!\u201d) code.append( throw new UnsupportedOperationException(\\ method ) .append(method.toString()).append( of interface ) .append(type.getName()).append( is not adaptive method!\\ ); ); } else { // \u7701\u7565\u65e0\u5173\u903b\u8f91 } // \u7701\u7565\u65e0\u5173\u903b\u8f91 } \u4ee5 Protocol \u63a5\u53e3\u7684 destroy \u65b9\u6cd5\u4e3a\u4f8b\uff0c\u4e0a\u9762\u4ee3\u7801\u751f\u6210\u7684\u5185\u5bb9\u5982\u4e0b\uff1a throw new UnsupportedOperationException( method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method! );","title":"2.2.3.1 \u65e0 Adaptive \u6ce8\u89e3\u65b9\u6cd5\u4ee3\u7801\u751f\u6210\u903b\u8f91"},{"location":"source_code_guide/adaptive-extension/#2232-url","text":"\u524d\u9762\u8bf4\u8fc7\u65b9\u6cd5\u4ee3\u7406\u903b\u8f91\u4f1a\u4ece URL \u4e2d\u63d0\u53d6\u76ee\u6807\u62d3\u5c55\u7684\u540d\u79f0\uff0c\u56e0\u6b64\u4ee3\u7801\u751f\u6210\u903b\u8f91\u7684\u4e00\u4e2a\u91cd\u8981\u7684\u4efb\u52a1\u662f\u4ece\u65b9\u6cd5\u7684\u53c2\u6570\u5217\u8868\u6216\u8005\u5176\u4ed6\u53c2\u6570\u4e2d\u83b7\u53d6 URL \u6570\u636e\u3002\u4e3e\u4f8b\u8bf4\u660e\u4e00\u4e0b\uff0c\u6211\u4eec\u8981\u4e3a Protocol \u63a5\u53e3\u7684 refer \u548c export \u65b9\u6cd5\u751f\u6210\u4ee3\u7406\u903b\u8f91\u3002\u5728\u8fd0\u884c\u65f6\uff0c\u901a\u8fc7\u53cd\u5c04\u5f97\u5230\u7684\u65b9\u6cd5\u5b9a\u4e49\u5927\u81f4\u5982\u4e0b\uff1a Invoker refer(Class T arg0, URL arg1) throws RpcException; Exporter export(Invoker T arg0) throws RpcException; \u5bf9\u4e8e refer \u65b9\u6cd5\uff0c\u901a\u8fc7\u904d\u5386 refer \u7684\u53c2\u6570\u5217\u8868\u5373\u53ef\u83b7\u53d6 URL \u6570\u636e\uff0c\u8fd9\u4e2a\u8fd8\u6bd4\u8f83\u7b80\u5355\u3002\u5bf9\u4e8e export \u65b9\u6cd5\uff0c\u83b7\u53d6 URL \u6570\u636e\u5219\u8981\u9ebb\u70e6\u4e00\u4e9b\u3002export \u53c2\u6570\u5217\u8868\u4e2d\u6ca1\u6709 URL \u53c2\u6570\uff0c\u56e0\u6b64\u9700\u8981\u4ece Invoker \u53c2\u6570\u4e2d\u83b7\u53d6 URL \u6570\u636e\u3002\u83b7\u53d6\u65b9\u5f0f\u662f\u8c03\u7528 Invoker \u4e2d\u53ef\u8fd4\u56de URL \u7684 getter \u65b9\u6cd5\uff0c\u6bd4\u5982 getUrl\u3002\u5982\u679c Invoker \u4e2d\u65e0\u76f8\u5173 getter \u65b9\u6cd5\uff0c\u6b64\u65f6\u5219\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\u6574\u4e2a\u903b\u8f91\u5982\u4e0b\uff1a for (Method method : methods) { Class ? rt = method.getReturnType(); Class ? [] pts = method.getParameterTypes(); Class ? [] ets = method.getExceptionTypes(); Adaptive adaptiveAnnotation = method.getAnnotation(Adaptive.class); StringBuilder code = new StringBuilder(512); if (adaptiveAnnotation == null) { // ${\u65e0 Adaptive \u6ce8\u89e3\u65b9\u6cd5\u4ee3\u7801\u751f\u6210\u903b\u8f91} } else { int urlTypeIndex = -1; // \u904d\u5386\u53c2\u6570\u5217\u8868\uff0c\u786e\u5b9a URL \u53c2\u6570\u4f4d\u7f6e for (int i = 0; i pts.length; ++i) { if (pts[i].equals(URL.class)) { urlTypeIndex = i; break; } } // urlTypeIndex != -1\uff0c\u8868\u793a\u53c2\u6570\u5217\u8868\u4e2d\u5b58\u5728 URL \u53c2\u6570 if (urlTypeIndex != -1) { // \u4e3a URL \u7c7b\u578b\u53c2\u6570\u751f\u6210\u5224\u7a7a\u4ee3\u7801\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a // if (arg + urlTypeIndex == null) // throw new IllegalArgumentException( url == null ); String s = String.format( \\nif (arg%d == null) throw new IllegalArgumentException(\\ url == null\\ ); , urlTypeIndex); code.append(s); // \u4e3a URL \u7c7b\u578b\u53c2\u6570\u751f\u6210\u8d4b\u503c\u4ee3\u7801\uff0c\u5f62\u5982 URL url = arg1 s = String.format( \\n%s url = arg%d; , URL.class.getName(), urlTypeIndex); code.append(s); // \u53c2\u6570\u5217\u8868\u4e2d\u4e0d\u5b58\u5728 URL \u7c7b\u578b\u53c2\u6570 } else { String attribMethod = null; LBL_PTS: // \u904d\u5386\u65b9\u6cd5\u7684\u53c2\u6570\u7c7b\u578b\u5217\u8868 for (int i = 0; i pts.length; ++i) { // \u83b7\u53d6\u67d0\u4e00\u7c7b\u578b\u53c2\u6570\u7684\u5168\u90e8\u65b9\u6cd5 Method[] ms = pts[i].getMethods(); // \u904d\u5386\u65b9\u6cd5\u5217\u8868\uff0c\u5bfb\u627e\u53ef\u8fd4\u56de URL \u7684 getter \u65b9\u6cd5 for (Method m : ms) { String name = m.getName(); // 1. \u65b9\u6cd5\u540d\u4ee5 get \u5f00\u5934\uff0c\u6216\u65b9\u6cd5\u540d\u5927\u4e8e3\u4e2a\u5b57\u7b26 // 2. \u65b9\u6cd5\u7684\u8bbf\u95ee\u6743\u9650\u4e3a public // 3. \u975e\u9759\u6001\u65b9\u6cd5 // 4. \u65b9\u6cd5\u53c2\u6570\u6570\u91cf\u4e3a0 // 5. \u65b9\u6cd5\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a URL if ((name.startsWith( get ) || name.length() 3) Modifier.isPublic(m.getModifiers()) !Modifier.isStatic(m.getModifiers()) m.getParameterTypes().length == 0 m.getReturnType() == URL.class) { urlTypeIndex = i; attribMethod = name; // \u7ed3\u675f for (int i = 0; i pts.length; ++i) \u5faa\u73af break LBL_PTS; } } } if (attribMethod == null) { // \u5982\u679c\u6240\u6709\u53c2\u6570\u4e2d\u5747\u4e0d\u5305\u542b\u53ef\u8fd4\u56de URL \u7684 getter \u65b9\u6cd5\uff0c\u5219\u629b\u51fa\u5f02\u5e38 throw new IllegalStateException( fail to create adaptive class for interface ... ); } // \u4e3a\u53ef\u8fd4\u56de URL \u7684\u53c2\u6570\u751f\u6210\u5224\u7a7a\u4ee3\u7801\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a // if (arg + urlTypeIndex == null) // throw new IllegalArgumentException( \u53c2\u6570\u5168\u9650\u5b9a\u540d + argument == null ); String s = String.format( \\nif (arg%d == null) throw new IllegalArgumentException(\\ %s argument == null\\ ); , urlTypeIndex, pts[urlTypeIndex].getName()); code.append(s); // \u4e3a getter \u65b9\u6cd5\u8fd4\u56de\u7684 URL \u751f\u6210\u5224\u7a7a\u4ee3\u7801\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a // if (argN.getter\u65b9\u6cd5\u540d() == null) // throw new IllegalArgumentException(\u53c2\u6570\u5168\u9650\u5b9a\u540d + argument getUrl() == null); s = String.format( \\nif (arg%d.%s() == null) throw new IllegalArgumentException(\\ %s argument %s() == null\\ ); , urlTypeIndex, attribMethod, pts[urlTypeIndex].getName(), attribMethod); code.append(s); // \u751f\u6210\u8d4b\u503c\u8bed\u53e5\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a // URL\u5168\u9650\u5b9a\u540d url = argN.getter\u65b9\u6cd5\u540d()\uff0c\u6bd4\u5982 // com.alibaba.dubbo.common.URL url = invoker.getUrl(); s = String.format( %s url = arg%d.%s(); , URL.class.getName(), urlTypeIndex, attribMethod); code.append(s); } // \u7701\u7565\u65e0\u5173\u4ee3\u7801 } // \u7701\u7565\u65e0\u5173\u4ee3\u7801 } \u4e0a\u9762\u4ee3\u7801\u6709\u70b9\u591a\uff0c\u9700\u8981\u8010\u5fc3\u770b\u4e00\u4e0b\u3002\u8fd9\u6bb5\u4ee3\u7801\u4e3b\u8981\u76ee\u7684\u662f\u4e3a\u4e86\u83b7\u53d6 URL \u6570\u636e\uff0c\u5e76\u4e3a\u4e4b\u751f\u6210\u5224\u7a7a\u548c\u8d4b\u503c\u4ee3\u7801\u3002\u4ee5 Protocol \u7684 refer \u548c export \u65b9\u6cd5\u4e3a\u4f8b\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u4e3a\u5b83\u4eec\u751f\u6210\u5982\u4e0b\u5185\u5bb9\uff08\u4ee3\u7801\u5df2\u683c\u5f0f\u5316\uff09\uff1a refer: if (arg1 == null) throw new IllegalArgumentException( url == null ); com.alibaba.dubbo.common.URL url = arg1; export: if (arg0 == null) throw new IllegalArgumentException( com.alibaba.dubbo.rpc.Invoker argument == null ); if (arg0.getUrl() == null) throw new IllegalArgumentException( com.alibaba.dubbo.rpc.Invoker argument getUrl() == null ); com.alibaba.dubbo.common.URL url = arg0.getUrl();","title":"2.2.3.2 \u83b7\u53d6 URL \u6570\u636e"},{"location":"source_code_guide/adaptive-extension/#2233-adaptive","text":"Adaptive \u6ce8\u89e3\u503c value \u7c7b\u578b\u4e3a String[]\uff0c\u53ef\u586b\u5199\u591a\u4e2a\u503c\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e3a\u7a7a\u6570\u7ec4\u3002\u82e5 value \u4e3a\u975e\u7a7a\u6570\u7ec4\uff0c\u76f4\u63a5\u83b7\u53d6\u6570\u7ec4\u5185\u5bb9\u5373\u53ef\u3002\u82e5 value \u4e3a\u7a7a\u6570\u7ec4\uff0c\u5219\u9700\u8fdb\u884c\u989d\u5916\u5904\u7406\u3002\u5904\u7406\u8fc7\u7a0b\u662f\u5c06\u7c7b\u540d\u8f6c\u6362\u4e3a\u5b57\u7b26\u6570\u7ec4\uff0c\u7136\u540e\u904d\u5386\u5b57\u7b26\u6570\u7ec4\uff0c\u5e76\u5c06\u5b57\u7b26\u653e\u5165 StringBuilder \u4e2d\u3002\u82e5\u5b57\u7b26\u4e3a\u5927\u5199\u5b57\u6bcd\uff0c\u5219\u5411 StringBuilder \u4e2d\u6dfb\u52a0\u70b9\u53f7\uff0c\u968f\u540e\u5c06\u5b57\u7b26\u53d8\u4e3a\u5c0f\u5199\u5b58\u5165 StringBuilder \u4e2d\u3002\u6bd4\u5982 LoadBalance \u7ecf\u8fc7\u5904\u7406\u540e\uff0c\u5f97\u5230 load.balance\u3002 for (Method method : methods) { Class ? rt = method.getReturnType(); Class ? [] pts = method.getParameterTypes(); Class ? [] ets = method.getExceptionTypes(); Adaptive adaptiveAnnotation = method.getAnnotation(Adaptive.class); StringBuilder code = new StringBuilder(512); if (adaptiveAnnotation == null) { // ${\u65e0 Adaptive \u6ce8\u89e3\u65b9\u6cd5\u4ee3\u7801\u751f\u6210\u903b\u8f91} } else { // ${\u83b7\u53d6 URL \u6570\u636e} String[] value = adaptiveAnnotation.value(); // value \u4e3a\u7a7a\u6570\u7ec4 if (value.length == 0) { // \u83b7\u53d6\u7c7b\u540d\uff0c\u5e76\u5c06\u7c7b\u540d\u8f6c\u6362\u4e3a\u5b57\u7b26\u6570\u7ec4 char[] charArray = type.getSimpleName().toCharArray(); StringBuilder sb = new StringBuilder(128); // \u904d\u5386\u5b57\u8282\u6570\u7ec4 for (int i = 0; i charArray.length; i++) { // \u68c0\u6d4b\u5f53\u524d\u5b57\u7b26\u662f\u5426\u4e3a\u5927\u5199\u5b57\u6bcd if (Character.isUpperCase(charArray[i])) { if (i != 0) { // \u5411 sb \u4e2d\u6dfb\u52a0\u70b9\u53f7 sb.append( . ); } // \u5c06\u5b57\u7b26\u53d8\u4e3a\u5c0f\u5199\uff0c\u5e76\u6dfb\u52a0\u5230 sb \u4e2d sb.append(Character.toLowerCase(charArray[i])); } else { // \u6dfb\u52a0\u5b57\u7b26\u5230 sb \u4e2d sb.append(charArray[i]); } } value = new String[]{sb.toString()}; } // \u7701\u7565\u65e0\u5173\u4ee3\u7801 } // \u7701\u7565\u65e0\u5173\u903b\u8f91 }","title":"2.2.3.3 \u83b7\u53d6 Adaptive \u6ce8\u89e3\u503c"},{"location":"source_code_guide/adaptive-extension/#2234-invocation","text":"\u6b64\u6bb5\u903b\u8f91\u662f\u68c0\u6d4b\u65b9\u6cd5\u5217\u8868\u4e2d\u662f\u5426\u5b58\u5728 Invocation \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u82e5\u5b58\u5728\uff0c\u5219\u4e3a\u5176\u751f\u6210\u5224\u7a7a\u4ee3\u7801\u548c\u5176\u4ed6\u4e00\u4e9b\u4ee3\u7801\u3002\u76f8\u5e94\u7684\u903b\u8f91\u5982\u4e0b\uff1a for (Method method : methods) { Class ? rt = method.getReturnType(); Class ? [] pts = method.getParameterTypes(); // \u83b7\u53d6\u53c2\u6570\u7c7b\u578b\u5217\u8868 Class ? [] ets = method.getExceptionTypes(); Adaptive adaptiveAnnotation = method.getAnnotation(Adaptive.class); StringBuilder code = new StringBuilder(512); if (adaptiveAnnotation == null) { // ${\u65e0 Adaptive \u6ce8\u89e3\u65b9\u6cd5\u4ee3\u7801\u751f\u6210\u903b\u8f91} } else { // ${\u83b7\u53d6 URL \u6570\u636e} // ${\u83b7\u53d6 Adaptive \u6ce8\u89e3\u503c} boolean hasInvocation = false; // \u904d\u5386\u53c2\u6570\u7c7b\u578b\u5217\u8868 for (int i = 0; i pts.length; ++i) { // \u5224\u65ad\u5f53\u524d\u53c2\u6570\u540d\u79f0\u662f\u5426\u7b49\u4e8e com.alibaba.dubbo.rpc.Invocation if (pts[i].getName().equals( com.alibaba.dubbo.rpc.Invocation )) { // \u4e3a Invocation \u7c7b\u578b\u53c2\u6570\u751f\u6210\u5224\u7a7a\u4ee3\u7801 String s = String.format( \\nif (arg%d == null) throw new IllegalArgumentException(\\ invocation == null\\ ); , i); code.append(s); // \u751f\u6210 getMethodName \u65b9\u6cd5\u8c03\u7528\u4ee3\u7801\uff0c\u683c\u5f0f\u4e3a\uff1a // String methodName = argN.getMethodName(); s = String.format( \\nString methodName = arg%d.getMethodName(); , i); code.append(s); // \u8bbe\u7f6e hasInvocation \u4e3a true hasInvocation = true; break; } } } // \u7701\u7565\u65e0\u5173\u903b\u8f91 }","title":"2.2.3.4 \u68c0\u6d4b Invocation \u53c2\u6570"},{"location":"source_code_guide/adaptive-extension/#2235","text":"\u672c\u6bb5\u903b\u8f91\u7528\u4e8e\u6839\u636e SPI \u548c Adaptive \u6ce8\u89e3\u503c\u751f\u6210\u201c\u83b7\u53d6\u62d3\u5c55\u540d\u903b\u8f91\u201d\uff0c\u540c\u65f6\u751f\u6210\u903b\u8f91\u4e5f\u53d7 Invocation \u7c7b\u578b\u53c2\u6570\u5f71\u54cd\uff0c\u7efc\u5408\u56e0\u7d20\u5bfc\u81f4\u672c\u6bb5\u903b\u8f91\u76f8\u5bf9\u590d\u6742\u3002\u672c\u6bb5\u903b\u8f91\u53ef\u80fd\u4f1a\u751f\u6210\u4f46\u4e0d\u9650\u4e8e\u4e0b\u9762\u7684\u4ee3\u7801\uff1a String extName = (url.getProtocol() == null ? dubbo : url.getProtocol()); \u6216 String extName = url.getMethodParameter(methodName, loadbalance , random ); \u4ea6\u6216\u662f String extName = url.getParameter( client , url.getParameter( transporter , netty )); \u672c\u6bb5\u903b\u8f91\u590d\u6742\u4e4b\u5904\u5728\u4e8e\u6761\u4ef6\u5206\u652f\u6bd4\u8f83\u591a\uff0c\u5927\u5bb6\u5728\u9605\u8bfb\u6e90\u7801\u65f6\u9700\u8981\u77e5\u9053\u6bcf\u4e2a\u6761\u4ef6\u5206\u652f\u7684\u610f\u4e49\u662f\u4ec0\u4e48\uff0c\u5426\u5219\u4e0d\u592a\u5bb9\u6613\u770b\u61c2\u76f8\u5173\u4ee3\u7801\u3002\u4e0b\u9762\u5f00\u59cb\u5206\u6790\u672c\u6bb5\u903b\u8f91\u3002 for (Method method : methods) { Class ? rt = method.getReturnType(); Class ? [] pts = method.getParameterTypes(); Class ? [] ets = method.getExceptionTypes(); Adaptive adaptiveAnnotation = method.getAnnotation(Adaptive.class); StringBuilder code = new StringBuilder(512); if (adaptiveAnnotation == null) { // $\u65e0 Adaptive \u6ce8\u89e3\u65b9\u6cd5\u4ee3\u7801\u751f\u6210\u903b\u8f91} } else { // ${\u83b7\u53d6 URL \u6570\u636e} // ${\u83b7\u53d6 Adaptive \u6ce8\u89e3\u503c} // ${\u68c0\u6d4b Invocation \u53c2\u6570} // \u8bbe\u7f6e\u9ed8\u8ba4\u62d3\u5c55\u540d\uff0ccachedDefaultName \u6e90\u4e8e SPI \u6ce8\u89e3\u503c\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c // SPI \u6ce8\u89e3\u503c\u4e3a\u7a7a\u4e32\uff0c\u6b64\u65f6 cachedDefaultName = null String defaultExtName = cachedDefaultName; String getNameCode = null; // \u904d\u5386 value\uff0c\u8fd9\u91cc\u7684 value \u662f Adaptive \u7684\u6ce8\u89e3\u503c\uff0c2.2.3.3 \u8282\u5206\u6790\u8fc7 value \u53d8\u91cf\u7684\u83b7\u53d6\u8fc7\u7a0b\u3002 // \u6b64\u5904\u5faa\u73af\u76ee\u7684\u662f\u751f\u6210\u4ece URL \u4e2d\u83b7\u53d6\u62d3\u5c55\u540d\u7684\u4ee3\u7801\uff0c\u751f\u6210\u7684\u4ee3\u7801\u4f1a\u8d4b\u503c\u7ed9 getNameCode \u53d8\u91cf\u3002\u6ce8\u610f\u8fd9 // \u4e2a\u5faa\u73af\u7684\u904d\u5386\u987a\u5e8f\u662f\u7531\u540e\u5411\u524d\u904d\u5386\u7684\u3002 for (int i = value.length - 1; i = 0; --i) { // \u5f53 i \u4e3a\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u5750\u6807\u65f6 if (i == value.length - 1) { // \u9ed8\u8ba4\u62d3\u5c55\u540d\u975e\u7a7a if (null != defaultExtName) { // protocol \u662f url \u7684\u4e00\u90e8\u5206\uff0c\u53ef\u901a\u8fc7 getProtocol \u65b9\u6cd5\u83b7\u53d6\uff0c\u5176\u4ed6\u7684\u5219\u662f\u4ece // URL \u53c2\u6570\u4e2d\u83b7\u53d6\u3002\u56e0\u4e3a\u83b7\u53d6\u65b9\u5f0f\u4e0d\u540c\uff0c\u6240\u4ee5\u8fd9\u91cc\u8981\u5224\u65ad value[i] \u662f\u5426\u4e3a protocol if (! protocol .equals(value[i])) // hasInvocation \u7528\u4e8e\u6807\u8bc6\u65b9\u6cd5\u53c2\u6570\u5217\u8868\u4e2d\u662f\u5426\u6709 Invocation \u7c7b\u578b\u53c2\u6570 if (hasInvocation) // \u751f\u6210\u7684\u4ee3\u7801\u529f\u80fd\u7b49\u4ef7\u4e8e\u4e0b\u9762\u7684\u4ee3\u7801\uff1a // url.getMethodParameter(methodName, value[i], defaultExtName) // \u4ee5 LoadBalance \u63a5\u53e3\u7684 select \u65b9\u6cd5\u4e3a\u4f8b\uff0c\u6700\u7ec8\u751f\u6210\u7684\u4ee3\u7801\u5982\u4e0b\uff1a // url.getMethodParameter(methodName, loadbalance , random ) getNameCode = String.format( url.getMethodParameter(methodName, \\ %s\\ , \\ %s\\ ) , value[i], defaultExtName); else // \u751f\u6210\u7684\u4ee3\u7801\u529f\u80fd\u7b49\u4ef7\u4e8e\u4e0b\u9762\u7684\u4ee3\u7801\uff1a // url.getParameter(value[i], defaultExtName) getNameCode = String.format( url.getParameter(\\ %s\\ , \\ %s\\ ) , value[i], defaultExtName); else // \u751f\u6210\u7684\u4ee3\u7801\u529f\u80fd\u7b49\u4ef7\u4e8e\u4e0b\u9762\u7684\u4ee3\u7801\uff1a // ( url.getProtocol() == null ? defaultExtName : url.getProtocol() ) getNameCode = String.format( ( url.getProtocol() == null ? \\ %s\\ : url.getProtocol() ) , defaultExtName); // \u9ed8\u8ba4\u62d3\u5c55\u540d\u4e3a\u7a7a } else { if (! protocol .equals(value[i])) if (hasInvocation) // \u751f\u6210\u4ee3\u7801\u683c\u5f0f\u540c\u4e0a getNameCode = String.format( url.getMethodParameter(methodName, \\ %s\\ , \\ %s\\ ) , value[i], defaultExtName); else // \u751f\u6210\u7684\u4ee3\u7801\u529f\u80fd\u7b49\u4ef7\u4e8e\u4e0b\u9762\u7684\u4ee3\u7801\uff1a // url.getParameter(value[i]) getNameCode = String.format( url.getParameter(\\ %s\\ ) , value[i]); else // \u751f\u6210\u4ece url \u4e2d\u83b7\u53d6\u534f\u8bae\u7684\u4ee3\u7801\uff0c\u6bd4\u5982 dubbo getNameCode = url.getProtocol() ; } } else { if (! protocol .equals(value[i])) if (hasInvocation) // \u751f\u6210\u4ee3\u7801\u683c\u5f0f\u540c\u4e0a getNameCode = String.format( url.getMethodParameter(methodName, \\ %s\\ , \\ %s\\ ) , value[i], defaultExtName); else // \u751f\u6210\u7684\u4ee3\u7801\u529f\u80fd\u7b49\u4ef7\u4e8e\u4e0b\u9762\u7684\u4ee3\u7801\uff1a // url.getParameter(value[i], getNameCode) // \u4ee5 Transporter \u63a5\u53e3\u7684 connect \u65b9\u6cd5\u4e3a\u4f8b\uff0c\u6700\u7ec8\u751f\u6210\u7684\u4ee3\u7801\u5982\u4e0b\uff1a // url.getParameter( client , url.getParameter( transporter , netty )) getNameCode = String.format( url.getParameter(\\ %s\\ , %s) , value[i], getNameCode); else // \u751f\u6210\u7684\u4ee3\u7801\u529f\u80fd\u7b49\u4ef7\u4e8e\u4e0b\u9762\u7684\u4ee3\u7801\uff1a // url.getProtocol() == null ? getNameCode : url.getProtocol() // \u4ee5 Protocol \u63a5\u53e3\u7684 connect \u65b9\u6cd5\u4e3a\u4f8b\uff0c\u6700\u7ec8\u751f\u6210\u7684\u4ee3\u7801\u5982\u4e0b\uff1a // url.getProtocol() == null ? dubbo : url.getProtocol() getNameCode = String.format( url.getProtocol() == null ? (%s) : url.getProtocol() , getNameCode); } } // \u751f\u6210 extName \u8d4b\u503c\u4ee3\u7801 code.append( \\nString extName = ).append(getNameCode).append( ; ); // \u751f\u6210 extName \u5224\u7a7a\u4ee3\u7801 String s = String.format( \\nif(extName == null) + throw new IllegalStateException(\\ Fail to get extension(%s) name from url(\\ + url.toString() + \\ ) use keys(%s)\\ ); , type.getName(), Arrays.toString(value)); code.append(s); } // \u7701\u7565\u65e0\u5173\u903b\u8f91 } \u4e0a\u9762\u4ee3\u7801\u6bd4\u8f83\u590d\u6742\uff0c\u4e0d\u662f\u5f88\u597d\u7406\u89e3\u3002\u5bf9\u4e8e\u8fd9\u6bb5\u4ee3\u7801\uff0c\u5efa\u8bae\u5927\u5bb6\u5199\u70b9\u6d4b\u8bd5\u7528\u4f8b\uff0c\u5bf9 Protocol\u3001LoadBalance \u4ee5\u53ca Transporter \u7b49\u63a5\u53e3\u7684\u81ea\u9002\u5e94\u62d3\u5c55\u7c7b\u4ee3\u7801\u751f\u6210\u8fc7\u7a0b\u8fdb\u884c\u8c03\u8bd5\u3002\u8fd9\u91cc\u6211\u4ee5 Transporter \u63a5\u53e3\u7684\u81ea\u9002\u5e94\u62d3\u5c55\u7c7b\u4ee3\u7801\u751f\u6210\u8fc7\u7a0b\u4e3e\u4f8b\u8bf4\u660e\u3002\u9996\u5148\u770b\u4e00\u4e0b Transporter \u63a5\u53e3\u7684\u5b9a\u4e49\uff0c\u5982\u4e0b\uff1a @SPI( netty ) public interface Transporter { // @Adaptive({server, transporter}) @Adaptive({Constants.SERVER_KEY, Constants.TRANSPORTER_KEY}) Server bind(URL url, ChannelHandler handler) throws RemotingException; // @Adaptive({client, transporter}) @Adaptive({Constants.CLIENT_KEY, Constants.TRANSPORTER_KEY}) Client connect(URL url, ChannelHandler handler) throws RemotingException; } \u4e0b\u9762\u5bf9 connect \u65b9\u6cd5\u4ee3\u7406\u903b\u8f91\u751f\u6210\u7684\u8fc7\u7a0b\u8fdb\u884c\u5206\u6790\uff0c\u6b64\u65f6\u751f\u6210\u4ee3\u7406\u903b\u8f91\u6240\u7528\u5230\u7684\u53d8\u91cf\u5982\u4e0b\uff1a String defaultExtName = netty ; boolean hasInvocation = false; String getNameCode = null; String[] value = [ client , transporter ]; \u4e0b\u9762\u5bf9 value \u6570\u7ec4\u8fdb\u884c\u904d\u5386\uff0c\u6b64\u65f6 i = 1, value[i] = \"transporter\"\uff0c\u751f\u6210\u7684\u4ee3\u7801\u5982\u4e0b\uff1a getNameCode = url.getParameter( transporter , netty ); \u63a5\u4e0b\u6765\uff0cfor \u5faa\u73af\u7ee7\u7eed\u6267\u884c\uff0c\u6b64\u65f6 i = 0, value[i] = \"client\"\uff0c\u751f\u6210\u7684\u4ee3\u7801\u5982\u4e0b\uff1a getNameCode = url.getParameter( client , url.getParameter( transporter , netty )); for \u5faa\u73af\u7ed3\u675f\u8fd0\u884c\uff0c\u73b0\u5728\u4e3a extName \u53d8\u91cf\u751f\u6210\u8d4b\u503c\u548c\u5224\u7a7a\u4ee3\u7801\uff0c\u5982\u4e0b\uff1a String extName = url.getParameter( client , url.getParameter( transporter , netty )); if (extName == null) { throw new IllegalStateException( Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url( + url.toString() + ) use keys([client, transporter]) ); }","title":"2.2.3.5 \u751f\u6210\u62d3\u5c55\u540d\u83b7\u53d6\u903b\u8f91"},{"location":"source_code_guide/adaptive-extension/#2236","text":"\u672c\u6bb5\u4ee3\u7801\u903b\u8f91\u7528\u4e8e\u6839\u636e\u62d3\u5c55\u540d\u52a0\u8f7d\u62d3\u5c55\u5b9e\u4f8b\uff0c\u5e76\u8c03\u7528\u62d3\u5c55\u5b9e\u4f8b\u7684\u76ee\u6807\u65b9\u6cd5\u3002\u76f8\u5173\u903b\u8f91\u5982\u4e0b\uff1a for (Method method : methods) { Class ? rt = method.getReturnType(); Class ? [] pts = method.getParameterTypes(); Class ? [] ets = method.getExceptionTypes(); Adaptive adaptiveAnnotation = method.getAnnotation(Adaptive.class); StringBuilder code = new StringBuilder(512); if (adaptiveAnnotation == null) { // $\u65e0 Adaptive \u6ce8\u89e3\u65b9\u6cd5\u4ee3\u7801\u751f\u6210\u903b\u8f91} } else { // ${\u83b7\u53d6 URL \u6570\u636e} // ${\u83b7\u53d6 Adaptive \u6ce8\u89e3\u503c} // ${\u68c0\u6d4b Invocation \u53c2\u6570} // ${\u751f\u6210\u62d3\u5c55\u540d\u83b7\u53d6\u903b\u8f91} // \u751f\u6210\u62d3\u5c55\u83b7\u53d6\u4ee3\u7801\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a // type\u5168\u9650\u5b9a\u540d extension = (type\u5168\u9650\u5b9a\u540d)ExtensionLoader\u5168\u9650\u5b9a\u540d // .getExtensionLoader(type\u5168\u9650\u5b9a\u540d.class).getExtension(extName); // Tips: \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684 % s \u8868\u793a\u4f7f\u7528\u524d\u4e00\u4e2a\u8f6c\u6362\u7b26\u6240\u63cf\u8ff0\u7684\u53c2\u6570\uff0c\u5373 type \u5168\u9650\u5b9a\u540d s = String.format( \\n%s extension = (% s)%s.getExtensionLoader(%s.class).getExtension(extName); , type.getName(), ExtensionLoader.class.getSimpleName(), type.getName()); code.append(s); // \u5982\u679c\u65b9\u6cd5\u8fd4\u56de\u503c\u7c7b\u578b\u975e void\uff0c\u5219\u751f\u6210 return \u8bed\u53e5\u3002 if (!rt.equals(void.class)) { code.append( \\nreturn ); } // \u751f\u6210\u76ee\u6807\u65b9\u6cd5\u8c03\u7528\u903b\u8f91\uff0c\u683c\u5f0f\u4e3a\uff1a // extension.\u65b9\u6cd5\u540d(arg0, arg2, ..., argN); s = String.format( extension.%s( , method.getName()); code.append(s); for (int i = 0; i pts.length; i++) { if (i != 0) code.append( , ); code.append( arg ).append(i); } code.append( ); ); } // \u7701\u7565\u65e0\u5173\u903b\u8f91 } \u4ee5 Protocol \u63a5\u53e3\u4e3e\u4f8b\u8bf4\u660e\uff0c\u4e0a\u9762\u4ee3\u7801\u751f\u6210\u7684\u5185\u5bb9\u5982\u4e0b\uff1a com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol) ExtensionLoader .getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName); return extension.refer(arg0, arg1);","title":"2.2.3.6 \u751f\u6210\u62d3\u5c55\u52a0\u8f7d\u4e0e\u76ee\u6807\u65b9\u6cd5\u8c03\u7528\u903b\u8f91"},{"location":"source_code_guide/adaptive-extension/#2237","text":"\u672c\u8282\u8fdb\u884c\u4ee3\u7801\u751f\u6210\u7684\u6536\u5c3e\u5de5\u4f5c\uff0c\u4e3b\u8981\u7528\u4e8e\u751f\u6210\u65b9\u6cd5\u5b9a\u4e49\u7684\u4ee3\u7801\u3002\u76f8\u5173\u903b\u8f91\u5982\u4e0b\uff1a for (Method method : methods) { Class ? rt = method.getReturnType(); Class ? [] pts = method.getParameterTypes(); Class ? [] ets = method.getExceptionTypes(); Adaptive adaptiveAnnotation = method.getAnnotation(Adaptive.class); StringBuilder code = new StringBuilder(512); if (adaptiveAnnotation == null) { // $\u65e0 Adaptive \u6ce8\u89e3\u65b9\u6cd5\u4ee3\u7801\u751f\u6210\u903b\u8f91} } else { // ${\u83b7\u53d6 URL \u6570\u636e} // ${\u83b7\u53d6 Adaptive \u6ce8\u89e3\u503c} // ${\u68c0\u6d4b Invocation \u53c2\u6570} // ${\u751f\u6210\u62d3\u5c55\u540d\u83b7\u53d6\u903b\u8f91} // ${\u751f\u6210\u62d3\u5c55\u52a0\u8f7d\u4e0e\u76ee\u6807\u65b9\u6cd5\u8c03\u7528\u903b\u8f91} } } // public + \u8fd4\u56de\u503c\u5168\u9650\u5b9a\u540d + \u65b9\u6cd5\u540d + ( codeBuilder.append( \\npublic ) .append(rt.getCanonicalName()) .append( ) .append(method.getName()) .append( ( ); // \u6dfb\u52a0\u53c2\u6570\u5217\u8868\u4ee3\u7801 for (int i = 0; i pts.length; i++) { if (i 0) { codeBuilder.append( , ); } codeBuilder.append(pts[i].getCanonicalName()); codeBuilder.append( ); codeBuilder.append( arg ).append(i); } codeBuilder.append( ) ); // \u6dfb\u52a0\u5f02\u5e38\u629b\u51fa\u4ee3\u7801 if (ets.length 0) { codeBuilder.append( throws ); for (int i = 0; i ets.length; i++) { if (i 0) { codeBuilder.append( , ); } codeBuilder.append(ets[i].getCanonicalName()); } } codeBuilder.append( { ); codeBuilder.append(code.toString()); codeBuilder.append( \\n} ); \u4ee5 Protocol \u7684 refer \u65b9\u6cd5\u4e3a\u4f8b\uff0c\u4e0a\u9762\u4ee3\u7801\u751f\u6210\u7684\u5185\u5bb9\u5982\u4e0b\uff1a public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) { // \u65b9\u6cd5\u4f53 }","title":"2.2.3.7 \u751f\u6210\u5b8c\u6574\u7684\u65b9\u6cd5"},{"location":"source_code_guide/adaptive-extension/#3","text":"\u5230\u6b64\uff0c\u5173\u4e8e\u81ea\u9002\u5e94\u62d3\u5c55\u7684\u539f\u7406\uff0c\u5b9e\u73b0\u5c31\u5206\u6790\u5b8c\u4e86\u3002\u603b\u7684\u6765\u8bf4\u81ea\u9002\u5e94\u62d3\u5c55\u6574\u4e2a\u903b\u8f91\u8fd8\u662f\u5f88\u590d\u6742\u7684\uff0c\u5e76\u4e0d\u662f\u5f88\u5bb9\u6613\u5f04\u61c2\u3002\u56e0\u6b64\uff0c\u5927\u5bb6\u5728\u9605\u8bfb\u8be5\u90e8\u5206\u6e90\u7801\u65f6\uff0c\u8010\u5fc3\u4e00\u4e9b\u3002\u540c\u65f6\u591a\u8fdb\u884c\u8c03\u8bd5\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u751f\u6210\u597d\u7684\u4ee3\u7801\u601d\u8003\u4ee3\u7801\u7684\u751f\u6210\u903b\u8f91\u3002\u597d\u4e86\uff0c\u672c\u7bc7\u6587\u7ae0\u5c31\u5206\u6790\u5230\u8fd9\u91cc\u3002","title":"3.\u603b\u7ed3"},{"location":"source_code_guide/cluster/","text":"1.\u7b80\u4ecb \u4e3a\u4e86\u907f\u514d\u5355\u70b9\u6545\u969c\uff0c\u73b0\u5728\u7684\u5e94\u7528\u901a\u5e38\u81f3\u5c11\u4f1a\u90e8\u7f72\u5728\u4e24\u53f0\u670d\u52a1\u5668\u4e0a\u3002\u5bf9\u4e8e\u4e00\u4e9b\u8d1f\u8f7d\u6bd4\u8f83\u9ad8\u7684\u670d\u52a1\uff0c\u4f1a\u90e8\u7f72\u66f4\u591a\u7684\u670d\u52a1\u5668\u3002\u8fd9\u6837\uff0c\u5728\u540c\u4e00\u73af\u5883\u4e0b\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u6570\u91cf\u4f1a\u5927\u4e8e1\u3002\u5bf9\u4e8e\u670d\u52a1\u6d88\u8d39\u8005\u6765\u8bf4\uff0c\u540c\u4e00\u73af\u5883\u4e0b\u51fa\u73b0\u4e86\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u3002\u8fd9\u65f6\u4f1a\u51fa\u73b0\u4e00\u4e2a\u95ee\u9898\uff0c\u670d\u52a1\u6d88\u8d39\u8005\u9700\u8981\u51b3\u5b9a\u9009\u62e9\u54ea\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u8fdb\u884c\u8c03\u7528\u3002\u53e6\u5916\u670d\u52a1\u8c03\u7528\u5931\u8d25\u65f6\u7684\u5904\u7406\u63aa\u65bd\u4e5f\u662f\u9700\u8981\u8003\u8651\u7684\uff0c\u662f\u91cd\u8bd5\u5462\uff0c\u8fd8\u662f\u629b\u51fa\u5f02\u5e38\uff0c\u4ea6\u6216\u662f\u53ea\u6253\u5370\u5f02\u5e38\u7b49\u3002\u4e3a\u4e86\u5904\u7406\u8fd9\u4e9b\u95ee\u9898\uff0cDubbo \u5b9a\u4e49\u4e86\u96c6\u7fa4\u63a5\u53e3 Cluster \u4ee5\u53ca Cluster Invoker\u3002\u96c6\u7fa4 Cluster \u7528\u9014\u662f\u5c06\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u5408\u5e76\u4e3a\u4e00\u4e2a Cluster Invoker\uff0c\u5e76\u5c06\u8fd9\u4e2a Invoker \u66b4\u9732\u7ed9\u670d\u52a1\u6d88\u8d39\u8005\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u670d\u52a1\u6d88\u8d39\u8005\u53ea\u9700\u901a\u8fc7\u8fd9\u4e2a Invoker \u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528\u5373\u53ef\uff0c\u81f3\u4e8e\u5177\u4f53\u8c03\u7528\u54ea\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u4ee5\u53ca\u8c03\u7528\u5931\u8d25\u540e\u5982\u4f55\u5904\u7406\u7b49\u95ee\u9898\uff0c\u73b0\u5728\u90fd\u4ea4\u7ed9\u96c6\u7fa4\u6a21\u5757\u53bb\u5904\u7406\u3002\u96c6\u7fa4\u6a21\u5757\u662f\u670d\u52a1\u63d0\u4f9b\u8005\u548c\u670d\u52a1\u6d88\u8d39\u8005\u7684\u4e2d\u95f4\u5c42\uff0c\u4e3a\u670d\u52a1\u6d88\u8d39\u8005\u5c4f\u853d\u4e86\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u60c5\u51b5\uff0c\u8fd9\u6837\u670d\u52a1\u6d88\u8d39\u8005\u5c31\u53ef\u4ee5\u4e13\u5fc3\u5904\u7406\u8fdc\u7a0b\u8c03\u7528\u76f8\u5173\u4e8b\u5b9c\u3002\u6bd4\u5982\u53d1\u8bf7\u6c42\uff0c\u63a5\u53d7\u670d\u52a1\u63d0\u4f9b\u8005\u8fd4\u56de\u7684\u6570\u636e\u7b49\u3002\u8fd9\u5c31\u662f\u96c6\u7fa4\u7684\u4f5c\u7528\u3002 Dubbo \u63d0\u4f9b\u4e86\u591a\u79cd\u96c6\u7fa4\u5b9e\u73b0\uff0c\u5305\u542b\u4f46\u4e0d\u9650\u4e8e Failover Cluster\u3001Failfast Cluster \u548c Failsafe Cluster \u7b49\u3002\u6bcf\u79cd\u96c6\u7fa4\u5b9e\u73b0\u7c7b\u7684\u7528\u9014\u4e0d\u540c\uff0c\u63a5\u4e0b\u6765\u4f1a\u4e00\u4e00\u8fdb\u884c\u5206\u6790\u3002 2. \u96c6\u7fa4\u5bb9\u9519 \u5728\u5bf9\u96c6\u7fa4\u76f8\u5173\u4ee3\u7801\u8fdb\u884c\u5206\u6790\u4e4b\u524d\uff0c\u8fd9\u91cc\u6709\u5fc5\u8981\u5148\u6765\u4ecb\u7ecd\u4e00\u4e0b\u96c6\u7fa4\u5bb9\u9519\u7684\u6240\u6709\u7ec4\u4ef6\u3002\u5305\u542b Cluster\u3001Cluster Invoker\u3001Directory\u3001Router \u548c LoadBalance \u7b49\u3002 \u96c6\u7fa4\u5de5\u4f5c\u8fc7\u7a0b\u53ef\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\uff0c\u7b2c\u4e00\u4e2a\u9636\u6bb5\u662f\u5728\u670d\u52a1\u6d88\u8d39\u8005\u521d\u59cb\u5316\u671f\u95f4\uff0c\u96c6\u7fa4 Cluster \u5b9e\u73b0\u7c7b\u4e3a\u670d\u52a1\u6d88\u8d39\u8005\u521b\u5efa Cluster Invoker \u5b9e\u4f8b\uff0c\u5373\u4e0a\u56fe\u4e2d\u7684 merge \u64cd\u4f5c\u3002\u7b2c\u4e8c\u4e2a\u9636\u6bb5\u662f\u5728\u670d\u52a1\u6d88\u8d39\u8005\u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528\u65f6\u3002\u4ee5 FailoverClusterInvoker \u4e3a\u4f8b\uff0c\u8be5\u7c7b\u578b Cluster Invoker \u9996\u5148\u4f1a\u8c03\u7528 Directory \u7684 list \u65b9\u6cd5\u5217\u4e3e Invoker \u5217\u8868\uff08\u53ef\u5c06 Invoker \u7b80\u5355\u7406\u89e3\u4e3a\u670d\u52a1\u63d0\u4f9b\u8005\uff09\u3002Directory \u7684\u7528\u9014\u662f\u4fdd\u5b58 Invoker\uff0c\u53ef\u7b80\u5355\u7c7b\u6bd4\u4e3a List\\ Invoker>\u3002\u5176\u5b9e\u73b0\u7c7b RegistryDirectory \u662f\u4e00\u4e2a\u52a8\u6001\u670d\u52a1\u76ee\u5f55\uff0c\u53ef\u611f\u77e5\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e\u7684\u53d8\u5316\uff0c\u5b83\u6240\u6301\u6709\u7684 Invoker \u5217\u8868\u4f1a\u968f\u7740\u6ce8\u518c\u4e2d\u5fc3\u5185\u5bb9\u7684\u53d8\u5316\u800c\u53d8\u5316\u3002\u6bcf\u6b21\u53d8\u5316\u540e\uff0cRegistryDirectory \u4f1a\u52a8\u6001\u589e\u5220 Invoker\uff0c\u5e76\u8c03\u7528 Router \u7684 route \u65b9\u6cd5\u8fdb\u884c\u8def\u7531\uff0c\u8fc7\u6ee4\u6389\u4e0d\u7b26\u5408\u8def\u7531\u89c4\u5219\u7684 Invoker\u3002\u5f53 FailoverClusterInvoker \u62ff\u5230 Directory \u8fd4\u56de\u7684 Invoker \u5217\u8868\u540e\uff0c\u5b83\u4f1a\u901a\u8fc7 LoadBalance \u4ece Invoker \u5217\u8868\u4e2d\u9009\u62e9\u4e00\u4e2a Invoker\u3002\u6700\u540e FailoverClusterInvoker \u4f1a\u5c06\u53c2\u6570\u4f20\u7ed9 LoadBalance \u9009\u62e9\u51fa\u7684 Invoker \u5b9e\u4f8b\u7684 invoke \u65b9\u6cd5\uff0c\u8fdb\u884c\u771f\u6b63\u7684\u8fdc\u7a0b\u8c03\u7528\u3002 \u4ee5\u4e0a\u5c31\u662f\u96c6\u7fa4\u5de5\u4f5c\u7684\u6574\u4e2a\u6d41\u7a0b\uff0c\u8fd9\u91cc\u5e76\u6ca1\u4ecb\u7ecd\u96c6\u7fa4\u662f\u5982\u4f55\u5bb9\u9519\u7684\u3002Dubbo \u4e3b\u8981\u63d0\u4f9b\u4e86\u8fd9\u6837\u51e0\u79cd\u5bb9\u9519\u65b9\u5f0f\uff1a Failover Cluster - \u5931\u8d25\u81ea\u52a8\u5207\u6362 Failfast Cluster - \u5feb\u901f\u5931\u8d25 Failsafe Cluster - \u5931\u8d25\u5b89\u5168 Failback Cluster - \u5931\u8d25\u81ea\u52a8\u6062\u590d Forking Cluster - \u5e76\u884c\u8c03\u7528\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005 \u4e0b\u9762\u5f00\u59cb\u5206\u6790\u6e90\u7801\u3002 3.\u6e90\u7801\u5206\u6790 3.1 Cluster \u5b9e\u73b0\u7c7b\u5206\u6790 \u6211\u4eec\u5728\u4e0a\u4e00\u7ae0\u770b\u5230\u4e86\u4e24\u4e2a\u6982\u5ff5\uff0c\u5206\u522b\u662f\u96c6\u7fa4\u63a5\u53e3 Cluster \u548c Cluster Invoker\uff0c\u8fd9\u4e24\u8005\u662f\u4e0d\u540c\u7684\u3002Cluster \u662f\u63a5\u53e3\uff0c\u800c Cluster Invoker \u662f\u4e00\u79cd Invoker\u3002\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u9009\u62e9\u903b\u8f91\uff0c\u4ee5\u53ca\u8fdc\u7a0b\u8c03\u7528\u5931\u8d25\u540e\u7684\u7684\u5904\u7406\u903b\u8f91\u5747\u662f\u5c01\u88c5\u5728 Cluster Invoker \u4e2d\u3002\u90a3\u4e48 Cluster \u63a5\u53e3\u548c\u76f8\u5173\u5b9e\u73b0\u7c7b\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u7528\u9014\u6bd4\u8f83\u7b80\u5355\uff0c\u4ec5\u7528\u4e8e\u751f\u6210 Cluster Invoker\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u6e90\u7801\u3002 public class FailoverCluster implements Cluster { public final static String NAME = failover ; @Override public T Invoker T join(Directory T directory) throws RpcException { // \u521b\u5efa\u5e76\u8fd4\u56de FailoverClusterInvoker \u5bf9\u8c61 return new FailoverClusterInvoker T (directory); } } \u5982\u4e0a\uff0cFailoverCluster \u603b\u5171\u5c31\u5305\u542b\u8fd9\u51e0\u884c\u4ee3\u7801\uff0c\u7528\u4e8e\u521b\u5efa FailoverClusterInvoker \u5bf9\u8c61\uff0c\u5f88\u7b80\u5355\u3002\u4e0b\u9762\u518d\u770b\u4e00\u4e2a\u3002 public class FailbackCluster implements Cluster { public final static String NAME = failback ; @Override public T Invoker T join(Directory T directory) throws RpcException { // \u521b\u5efa\u5e76\u8fd4\u56de FailbackClusterInvoker \u5bf9\u8c61 return new FailbackClusterInvoker T (directory); } } \u5982\u4e0a\uff0cFailbackCluster \u7684\u903b\u8f91\u4e5f\u662f\u5f88\u7b80\u5355\uff0c\u65e0\u9700\u89e3\u91ca\u4e86\u3002\u6240\u4ee5\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u628a\u91cd\u70b9\u653e\u5728\u5404\u79cd Cluster Invoker \u4e0a 3.2 Cluster Invoker \u5206\u6790 \u6211\u4eec\u9996\u5148\u4ece\u5404\u79cd Cluster Invoker \u7684\u7236\u7c7b AbstractClusterInvoker \u6e90\u7801\u5f00\u59cb\u8bf4\u8d77\u3002\u524d\u9762\u8bf4\u8fc7\uff0c\u96c6\u7fa4\u5de5\u4f5c\u8fc7\u7a0b\u53ef\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\uff0c\u7b2c\u4e00\u4e2a\u9636\u6bb5\u662f\u5728\u670d\u52a1\u6d88\u8d39\u8005\u521d\u59cb\u5316\u671f\u95f4\uff0c\u8fd9\u4e2a\u5728 \u670d\u52a1\u5f15\u7528 \u90a3\u7bc7\u6587\u7ae0\u4e2d\u5206\u6790\u8fc7\uff0c\u5c31\u4e0d\u8d58\u8ff0\u3002\u7b2c\u4e8c\u4e2a\u9636\u6bb5\u662f\u5728\u670d\u52a1\u6d88\u8d39\u8005\u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528\u65f6\uff0c\u6b64\u65f6 AbstractClusterInvoker \u7684 invoke \u65b9\u6cd5\u4f1a\u88ab\u8c03\u7528\u3002\u5217\u4e3e Invoker\uff0c\u8d1f\u8f7d\u5747\u8861\u7b49\u64cd\u4f5c\u5747\u4f1a\u5728\u6b64\u9636\u6bb5\u88ab\u6267\u884c\u3002\u56e0\u6b64\u4e0b\u9762\u5148\u6765\u770b\u4e00\u4e0b invoke \u65b9\u6cd5\u7684\u903b\u8f91\u3002 public Result invoke(final Invocation invocation) throws RpcException { checkWhetherDestroyed(); LoadBalance loadbalance = null; // \u7ed1\u5b9a attachments \u5230 invocation \u4e2d. Map String, String contextAttachments = RpcContext.getContext().getAttachments(); if (contextAttachments != null contextAttachments.size() != 0) { ((RpcInvocation) invocation).addAttachments(contextAttachments); } // \u5217\u4e3e Invoker List Invoker T invokers = list(invocation); if (invokers != null !invokers.isEmpty()) { // \u52a0\u8f7d LoadBalance loadbalance = ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension(invokers.get(0).getUrl() .getMethodParameter(RpcUtils.getMethodName(invocation), Constants.LOADBALANCE_KEY, Constants.DEFAULT_LOADBALANCE)); } RpcUtils.attachInvocationIdIfAsync(getUrl(), invocation); // \u8c03\u7528 doInvoke \u8fdb\u884c\u540e\u7eed\u64cd\u4f5c return doInvoke(invocation, invokers, loadbalance); } // \u62bd\u8c61\u65b9\u6cd5\uff0c\u7531\u5b50\u7c7b\u5b9e\u73b0 protected abstract Result doInvoke(Invocation invocation, List Invoker T invokers, LoadBalance loadbalance) throws RpcException; AbstractClusterInvoker \u7684 invoke \u65b9\u6cd5\u4e3b\u8981\u7528\u4e8e\u5217\u4e3e Invoker\uff0c\u4ee5\u53ca\u52a0\u8f7d LoadBalance\u3002\u6700\u540e\u518d\u8c03\u7528\u6a21\u677f\u65b9\u6cd5 doInvoke \u8fdb\u884c\u540e\u7eed\u64cd\u4f5c\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b Invoker \u5217\u4e3e\u65b9\u6cd5 list(Invocation) \u7684\u903b\u8f91\uff0c\u5982\u4e0b\uff1a protected List Invoker T list(Invocation invocation) throws RpcException { // \u8c03\u7528 Directory \u7684 list \u65b9\u6cd5\u5217\u4e3e Invoker List Invoker T invokers = directory.list(invocation); return invokers; } \u5982\u4e0a\uff0cAbstractClusterInvoker \u4e2d\u7684 list \u65b9\u6cd5\u505a\u7684\u4e8b\u60c5\u5f88\u7b80\u5355\uff0c\u53ea\u662f\u7b80\u5355\u7684\u8c03\u7528\u4e86 Directory \u7684 list \u65b9\u6cd5\uff0c\u6ca1\u6709\u5176\u4ed6\u66f4\u591a\u7684\u903b\u8f91\u4e86\u3002Directory \u5373\u76f8\u5173\u5b9e\u73b0\u7c7b\u5728\u524d\u6587\u5df2\u7ecf\u5206\u6790\u8fc7\uff0c\u8fd9\u91cc\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u628a\u76ee\u5149\u8f6c\u79fb\u5230 AbstractClusterInvoker \u7684\u5404\u79cd\u5b9e\u73b0\u7c7b\u4e0a\uff0c\u6765\u770b\u4e00\u4e0b\u8fd9\u4e9b\u5b9e\u73b0\u7c7b\u662f\u5982\u4f55\u5b9e\u73b0 doInvoke \u65b9\u6cd5\u903b\u8f91\u7684\u3002 3.2.1 FailoverClusterInvoker FailoverClusterInvoker \u5728\u8c03\u7528\u5931\u8d25\u65f6\uff0c\u4f1a\u81ea\u52a8\u5207\u6362 Invoker \u8fdb\u884c\u91cd\u8bd5\u3002\u9ed8\u8ba4\u914d\u7f6e\u4e0b\uff0cDubbo \u4f1a\u4f7f\u7528\u8fd9\u4e2a\u7c7b\u4f5c\u4e3a\u7f3a\u7701 Cluster Invoker\u3002\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u8be5\u7c7b\u7684\u903b\u8f91\u3002 public class FailoverClusterInvoker T extends AbstractClusterInvoker T { // \u7701\u7565\u90e8\u5206\u4ee3\u7801 @Override public Result doInvoke(Invocation invocation, final List Invoker T invokers, LoadBalance loadbalance) throws RpcException { List Invoker T copyinvokers = invokers; checkInvokers(copyinvokers, invocation); // \u83b7\u53d6\u91cd\u8bd5\u6b21\u6570 int len = getUrl().getMethodParameter(invocation.getMethodName(), Constants.RETRIES_KEY, Constants.DEFAULT_RETRIES) + 1; if (len = 0) { len = 1; } RpcException le = null; List Invoker T invoked = new ArrayList Invoker T (copyinvokers.size()); Set String providers = new HashSet String (len); // \u5faa\u73af\u8c03\u7528\uff0c\u5931\u8d25\u91cd\u8bd5 for (int i = 0; i len; i++) { if (i 0) { checkWhetherDestroyed(); // \u5728\u8fdb\u884c\u91cd\u8bd5\u524d\u91cd\u65b0\u5217\u4e3e Invoker\uff0c\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff0c\u5982\u679c\u67d0\u4e2a\u670d\u52a1\u6302\u4e86\uff0c // \u901a\u8fc7\u8c03\u7528 list \u53ef\u5f97\u5230\u6700\u65b0\u53ef\u7528\u7684 Invoker \u5217\u8868 copyinvokers = list(invocation); // \u5bf9 copyinvokers \u8fdb\u884c\u5224\u7a7a\u68c0\u67e5 checkInvokers(copyinvokers, invocation); } // \u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u9009\u62e9 Invoker Invoker T invoker = select(loadbalance, invocation, copyinvokers, invoked); // \u6dfb\u52a0\u5230 invoker \u5230 invoked \u5217\u8868\u4e2d invoked.add(invoker); // \u8bbe\u7f6e invoked \u5230 RPC \u4e0a\u4e0b\u6587\u4e2d RpcContext.getContext().setInvokers((List) invoked); try { // \u8c03\u7528\u76ee\u6807 Invoker \u7684 invoke \u65b9\u6cd5 Result result = invoker.invoke(invocation); return result; } catch (RpcException e) { if (e.isBiz()) { throw e; } le = e; } catch (Throwable e) { le = new RpcException(e.getMessage(), e); } finally { providers.add(invoker.getUrl().getAddress()); } } // \u82e5\u91cd\u8bd5\u5931\u8d25\uff0c\u5219\u629b\u51fa\u5f02\u5e38 throw new RpcException(..., Failed to invoke the method ... ); } } \u5982\u4e0a\uff0cFailoverClusterInvoker \u7684 doInvoke \u65b9\u6cd5\u9996\u5148\u662f\u83b7\u53d6\u91cd\u8bd5\u6b21\u6570\uff0c\u7136\u540e\u6839\u636e\u91cd\u8bd5\u6b21\u6570\u8fdb\u884c\u5faa\u73af\u8c03\u7528\uff0c\u5931\u8d25\u540e\u8fdb\u884c\u91cd\u8bd5\u3002\u5728 for \u5faa\u73af\u5185\uff0c\u9996\u5148\u662f\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u7ec4\u4ef6\u9009\u62e9\u4e00\u4e2a Invoker\uff0c\u7136\u540e\u518d\u901a\u8fc7\u8fd9\u4e2a Invoker \u7684 invoke \u65b9\u6cd5\u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528\u3002\u5982\u679c\u5931\u8d25\u4e86\uff0c\u8bb0\u5f55\u4e0b\u5f02\u5e38\uff0c\u5e76\u8fdb\u884c\u91cd\u8bd5\u3002\u91cd\u8bd5\u65f6\u4f1a\u518d\u6b21\u8c03\u7528\u7236\u7c7b\u7684 list \u65b9\u6cd5\u5217\u4e3e Invoker\u3002\u6574\u4e2a\u6d41\u7a0b\u5927\u81f4\u5982\u6b64\uff0c\u4e0d\u662f\u5f88\u96be\u7406\u89e3\u3002\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0b select \u65b9\u6cd5\u7684\u903b\u8f91\u3002 protected Invoker T select(LoadBalance loadbalance, Invocation invocation, List Invoker T invokers, List Invoker T selected) throws RpcException { if (invokers == null || invokers.isEmpty()) return null; // \u83b7\u53d6\u8c03\u7528\u65b9\u6cd5\u540d String methodName = invocation == null ? : invocation.getMethodName(); // \u83b7\u53d6 sticky \u914d\u7f6e\uff0csticky \u8868\u793a\u7c98\u6ede\u8fde\u63a5\u3002\u6240\u8c13\u7c98\u6ede\u8fde\u63a5\u662f\u6307\u8ba9\u670d\u52a1\u6d88\u8d39\u8005\u5c3d\u53ef\u80fd\u7684 // \u8c03\u7528\u540c\u4e00\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u9664\u975e\u8be5\u63d0\u4f9b\u8005\u6302\u4e86\u518d\u8fdb\u884c\u5207\u6362 boolean sticky = invokers.get(0).getUrl().getMethodParameter(methodName, Constants.CLUSTER_STICKY_KEY, Constants.DEFAULT_CLUSTER_STICKY); { // \u68c0\u6d4b invokers \u5217\u8868\u662f\u5426\u5305\u542b stickyInvoker\uff0c\u5982\u679c\u4e0d\u5305\u542b\uff0c // \u8bf4\u660e stickyInvoker \u4ee3\u8868\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u6302\u4e86\uff0c\u6b64\u65f6\u9700\u8981\u5c06\u5176\u7f6e\u7a7a if (stickyInvoker != null !invokers.contains(stickyInvoker)) { stickyInvoker = null; } // \u5728 sticky \u4e3a true\uff0c\u4e14 stickyInvoker != null \u7684\u60c5\u51b5\u4e0b\u3002\u5982\u679c selected \u5305\u542b // stickyInvoker\uff0c\u8868\u660e stickyInvoker \u5bf9\u5e94\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u53ef\u80fd\u56e0\u7f51\u7edc\u539f\u56e0\u672a\u80fd\u6210\u529f\u63d0\u4f9b\u670d\u52a1\u3002 // \u4f46\u662f\u8be5\u63d0\u4f9b\u8005\u5e76\u6ca1\u6302\uff0c\u6b64\u65f6 invokers \u5217\u8868\u4e2d\u4ecd\u5b58\u5728\u8be5\u670d\u52a1\u63d0\u4f9b\u8005\u5bf9\u5e94\u7684 Invoker\u3002 if (sticky stickyInvoker != null (selected == null || !selected.contains(stickyInvoker))) { // availablecheck \u8868\u793a\u662f\u5426\u5f00\u542f\u4e86\u53ef\u7528\u6027\u68c0\u67e5\uff0c\u5982\u679c\u5f00\u542f\u4e86\uff0c\u5219\u8c03\u7528 stickyInvoker \u7684 // isAvailable \u65b9\u6cd5\u8fdb\u884c\u68c0\u67e5\uff0c\u5982\u679c\u68c0\u67e5\u901a\u8fc7\uff0c\u5219\u76f4\u63a5\u8fd4\u56de stickyInvoker\u3002 if (availablecheck stickyInvoker.isAvailable()) { return stickyInvoker; } } } // \u5982\u679c\u7ebf\u7a0b\u8d70\u5230\u5f53\u524d\u4ee3\u7801\u5904\uff0c\u8bf4\u660e\u524d\u9762\u7684 stickyInvoker \u4e3a\u7a7a\uff0c\u6216\u8005\u4e0d\u53ef\u7528\u3002 // \u6b64\u65f6\u7ee7\u7eed\u8c03\u7528 doSelect \u9009\u62e9 Invoker Invoker T invoker = doSelect(loadbalance, invocation, invokers, selected); // \u5982\u679c sticky \u4e3a true\uff0c\u5219\u5c06\u8d1f\u8f7d\u5747\u8861\u7ec4\u4ef6\u9009\u51fa\u7684 Invoker \u8d4b\u503c\u7ed9 stickyInvoker if (sticky) { stickyInvoker = invoker; } return invoker; } \u5982\u4e0a\uff0cselect \u65b9\u6cd5\u7684\u4e3b\u8981\u903b\u8f91\u96c6\u4e2d\u5728\u4e86\u5bf9\u7c98\u6ede\u8fde\u63a5\u7279\u6027\u7684\u652f\u6301\u4e0a\u3002\u9996\u5148\u662f\u83b7\u53d6 sticky \u914d\u7f6e\uff0c\u7136\u540e\u518d\u68c0\u6d4b invokers \u5217\u8868\u4e2d\u662f\u5426\u5305\u542b stickyInvoker\uff0c\u5982\u679c\u4e0d\u5305\u542b\uff0c\u5219\u8ba4\u4e3a\u8be5 stickyInvoker \u4e0d\u53ef\u7528\uff0c\u6b64\u65f6\u5c06\u5176\u7f6e\u7a7a\u3002\u8fd9\u91cc\u7684 invokers \u5217\u8868\u53ef\u4ee5\u770b\u505a\u662f \u5b58\u6d3b\u7740\u7684\u670d\u52a1\u63d0\u4f9b\u8005 \u5217\u8868\uff0c\u5982\u679c\u8fd9\u4e2a\u5217\u8868\u4e0d\u5305\u542b stickyInvoker\uff0c\u90a3\u81ea\u7136\u800c\u7136\u7684\u8ba4\u4e3a stickyInvoker \u6302\u4e86\uff0c\u6240\u4ee5\u7f6e\u7a7a\u3002\u5982\u679c stickyInvoker \u5b58\u5728\u4e8e invokers \u5217\u8868\u4e2d\uff0c\u6b64\u65f6\u8981\u8fdb\u884c\u4e0b\u4e00\u9879\u68c0\u6d4b \u2014 \u68c0\u6d4b selected \u4e2d\u662f\u5426\u5305\u542b stickyInvoker\u3002\u5982\u679c\u5305\u542b\u7684\u8bdd\uff0c\u8bf4\u660e stickyInvoker \u5728\u6b64\u4e4b\u524d\u6ca1\u6709\u6210\u529f\u63d0\u4f9b\u670d\u52a1\uff08\u4f46\u5176\u4ecd\u7136\u5904\u4e8e\u5b58\u6d3b\u72b6\u6001\uff09\u3002\u6b64\u65f6\u6211\u4eec\u8ba4\u4e3a\u8fd9\u4e2a\u670d\u52a1\u4e0d\u53ef\u9760\uff0c\u4e0d\u5e94\u8be5\u5728\u91cd\u8bd5\u671f\u95f4\u5185\u518d\u6b21\u88ab\u8c03\u7528\uff0c\u56e0\u6b64\u8fd9\u4e2a\u65f6\u5019\u4e0d\u4f1a\u8fd4\u56de\u8be5 stickyInvoker\u3002\u5982\u679c selected \u4e0d\u5305\u542b stickyInvoker\uff0c\u6b64\u65f6\u8fd8\u9700\u8981\u8fdb\u884c\u53ef\u7528\u6027\u68c0\u6d4b\uff0c\u6bd4\u5982\u68c0\u6d4b\u670d\u52a1\u63d0\u4f9b\u8005\u7f51\u7edc\u8fde\u901a\u6027\u7b49\u3002\u5f53\u53ef\u7528\u6027\u68c0\u6d4b\u901a\u8fc7\uff0c\u624d\u53ef\u8fd4\u56de stickyInvoker\uff0c\u5426\u5219\u8c03\u7528 doSelect \u65b9\u6cd5\u9009\u62e9 Invoker\u3002\u5982\u679c sticky \u4e3a true\uff0c\u6b64\u65f6\u4f1a\u5c06 doSelect \u65b9\u6cd5\u9009\u51fa\u7684 Invoker \u8d4b\u503c\u7ed9 stickyInvoker\u3002 \u4ee5\u4e0a\u5c31\u662f select \u65b9\u6cd5\u7684\u903b\u8f91\uff0c\u8fd9\u6bb5\u903b\u8f91\u770b\u8d77\u6765\u4e0d\u662f\u5f88\u590d\u6742\uff0c\u4f46\u662f\u4fe1\u606f\u91cf\u6bd4\u8f83\u5927\u3002\u4e0d\u641e\u61c2 invokers \u548c selected \u4e24\u4e2a\u5165\u53c2\u7684\u542b\u4e49\uff0c\u4ee5\u53ca\u7c98\u6ede\u8fde\u63a5\u7279\u6027\uff0c\u8fd9\u6bb5\u4ee3\u7801\u662f\u4e0d\u5bb9\u6613\u770b\u61c2\u7684\u3002\u6240\u4ee5\u5927\u5bb6\u5728\u9605\u8bfb\u8fd9\u6bb5\u4ee3\u7801\u65f6\uff0c\u4e0d\u8981\u5ffd\u7565\u4e86\u5bf9\u80cc\u666f\u77e5\u8bc6\u7684\u7406\u89e3\u3002\u5173\u4e8e select \u65b9\u6cd5\u5148\u5206\u6790\u8fd9\u4e48\u591a\uff0c\u7ee7\u7eed\u5411\u4e0b\u5206\u6790\u3002 private Invoker T doSelect(LoadBalance loadbalance, Invocation invocation, List Invoker T invokers, List Invoker T selected) throws RpcException { if (invokers == null || invokers.isEmpty()) return null; if (invokers.size() == 1) return invokers.get(0); if (loadbalance == null) { // \u5982\u679c loadbalance \u4e3a\u7a7a\uff0c\u8fd9\u91cc\u901a\u8fc7 SPI \u52a0\u8f7d Loadbalance\uff0c\u9ed8\u8ba4\u4e3a RandomLoadBalance loadbalance = ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension(Constants.DEFAULT_LOADBALANCE); } // \u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u7ec4\u4ef6\u9009\u62e9 Invoker Invoker T invoker = loadbalance.select(invokers, getUrl(), invocation); // \u5982\u679c selected \u5305\u542b\u8d1f\u8f7d\u5747\u8861\u9009\u62e9\u51fa\u7684 Invoker\uff0c\u6216\u8005\u8be5 Invoker \u65e0\u6cd5\u7ecf\u8fc7\u53ef\u7528\u6027\u68c0\u67e5\uff0c\u6b64\u65f6\u8fdb\u884c\u91cd\u9009 if ((selected != null selected.contains(invoker)) || (!invoker.isAvailable() getUrl() != null availablecheck)) { try { // \u8fdb\u884c\u91cd\u9009 Invoker T rinvoker = reselect(loadbalance, invocation, invokers, selected, availablecheck); if (rinvoker != null) { // \u5982\u679c rinvoker \u4e0d\u4e3a\u7a7a\uff0c\u5219\u5c06\u5176\u8d4b\u503c\u7ed9 invoker invoker = rinvoker; } else { // rinvoker \u4e3a\u7a7a\uff0c\u5b9a\u4f4d invoker \u5728 invokers \u4e2d\u7684\u4f4d\u7f6e int index = invokers.indexOf(invoker); try { // \u83b7\u53d6 index + 1 \u4f4d\u7f6e\u5904\u7684 Invoker\uff0c\u4ee5\u4e0b\u4ee3\u7801\u7b49\u4ef7\u4e8e\uff1a // invoker = invokers.get((index + 1) % invokers.size()); invoker = index invokers.size() - 1 ? invokers.get(index + 1) : invokers.get(0); } catch (Exception e) { logger.warn( ... may because invokers list dynamic change, ignore. ); } } } catch (Throwable t) { logger.error( cluster reselect fail reason is : ... ); } } return invoker; } doSelect \u4e3b\u8981\u505a\u4e86\u4e24\u4ef6\u4e8b\uff0c\u7b2c\u4e00\u662f\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u7ec4\u4ef6\u9009\u62e9 Invoker\u3002\u7b2c\u4e8c\u662f\uff0c\u5982\u679c\u9009\u51fa\u6765\u7684 Invoker \u4e0d\u7a33\u5b9a\uff0c\u6216\u4e0d\u53ef\u7528\uff0c\u6b64\u65f6\u9700\u8981\u8c03\u7528 reselect \u65b9\u6cd5\u8fdb\u884c\u91cd\u9009\u3002\u82e5 reselect \u9009\u51fa\u6765\u7684 Invoker \u4e3a\u7a7a\uff0c\u6b64\u65f6\u5b9a\u4f4d invoker \u5728 invokers \u5217\u8868\u4e2d\u7684\u4f4d\u7f6e index\uff0c\u7136\u540e\u83b7\u53d6 index + 1 \u5904\u7684 invoker\uff0c\u8fd9\u4e5f\u53ef\u4ee5\u770b\u505a\u662f\u91cd\u9009\u903b\u8f91\u7684\u4e00\u90e8\u5206\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b reselect \u65b9\u6cd5\u7684\u903b\u8f91\u3002 private Invoker T reselect(LoadBalance loadbalance, Invocation invocation, List Invoker T invokers, List Invoker T selected, boolean availablecheck) throws RpcException { List Invoker T reselectInvokers = new ArrayList Invoker T (invokers.size() 1 ? (invokers.size() - 1) : invokers.size()); // \u4e0b\u9762\u7684 if-else \u5206\u652f\u903b\u8f91\u6709\u4e9b\u5197\u4f59\uff0cpull request #2826 \u5bf9\u8fd9\u6bb5\u4ee3\u7801\u8fdb\u884c\u4e86\u7b80\u5316\uff0c\u53ef\u4ee5\u53c2\u8003\u4e00\u4e0b // \u6839\u636e availablecheck \u8fdb\u884c\u4e0d\u540c\u7684\u5904\u7406 if (availablecheck) { // \u904d\u5386 invokers \u5217\u8868 for (Invoker T invoker : invokers) { // \u68c0\u6d4b\u53ef\u7528\u6027 if (invoker.isAvailable()) { // \u5982\u679c selected \u5217\u8868\u4e0d\u5305\u542b\u5f53\u524d invoker\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u5230 reselectInvokers \u4e2d if (selected == null || !selected.contains(invoker)) { reselectInvokers.add(invoker); } } } // reselectInvokers \u4e0d\u4e3a\u7a7a\uff0c\u6b64\u65f6\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u7ec4\u4ef6\u8fdb\u884c\u9009\u62e9 if (!reselectInvokers.isEmpty()) { return loadbalance.select(reselectInvokers, getUrl(), invocation); } // \u4e0d\u68c0\u67e5 Invoker \u53ef\u7528\u6027 } else { for (Invoker T invoker : invokers) { // \u5982\u679c selected \u5217\u8868\u4e0d\u5305\u542b\u5f53\u524d invoker\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u5230 reselectInvokers \u4e2d if (selected == null || !selected.contains(invoker)) { reselectInvokers.add(invoker); } } if (!reselectInvokers.isEmpty()) { // \u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u7ec4\u4ef6\u8fdb\u884c\u9009\u62e9 return loadbalance.select(reselectInvokers, getUrl(), invocation); } } { // \u82e5\u7ebf\u7a0b\u8d70\u5230\u6b64\u5904\uff0c\u8bf4\u660e reselectInvokers \u96c6\u5408\u4e3a\u7a7a\uff0c\u6b64\u65f6\u4e0d\u4f1a\u8c03\u7528\u8d1f\u8f7d\u5747\u8861\u7ec4\u4ef6\u8fdb\u884c\u7b5b\u9009\u3002 // \u8fd9\u91cc\u4ece selected \u5217\u8868\u4e2d\u67e5\u627e\u53ef\u7528\u7684 Invoker\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230 reselectInvokers \u96c6\u5408\u4e2d if (selected != null) { for (Invoker T invoker : selected) { if ((invoker.isAvailable()) !reselectInvokers.contains(invoker)) { reselectInvokers.add(invoker); } } } if (!reselectInvokers.isEmpty()) { // \u518d\u6b21\u8fdb\u884c\u9009\u62e9\uff0c\u5e76\u8fd4\u56de\u9009\u62e9\u7ed3\u679c return loadbalance.select(reselectInvokers, getUrl(), invocation); } } return null; } reselect \u65b9\u6cd5\u603b\u7ed3\u4e0b\u6765\u5176\u5b9e\u53ea\u505a\u4e86\u4e24\u4ef6\u4e8b\u60c5\uff0c\u7b2c\u4e00\u662f\u67e5\u627e\u53ef\u7528\u7684 Invoker\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230 reselectInvokers \u96c6\u5408\u4e2d\u3002\u7b2c\u4e8c\uff0c\u5982\u679c reselectInvokers \u4e0d\u4e3a\u7a7a\uff0c\u5219\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u7ec4\u4ef6\u518d\u6b21\u8fdb\u884c\u9009\u62e9\u3002\u5176\u4e2d\u7b2c\u4e00\u4ef6\u4e8b\u60c5\u53c8\u53ef\u8fdb\u884c\u7ec6\u5206\uff0c\u4e00\u5f00\u59cb\uff0creselect \u4ece invokers \u5217\u8868\u4e2d\u67e5\u627e\u6709\u6548\u53ef\u7528\u7684 Invoker\uff0c\u82e5\u672a\u80fd\u627e\u5230\uff0c\u6b64\u65f6\u518d\u5230 selected \u5217\u8868\u4e2d\u7ee7\u7eed\u67e5\u627e\u3002\u5173\u4e8e reselect \u65b9\u6cd5\u5c31\u5148\u5206\u6790\u5230\u8fd9\uff0c\u7ee7\u7eed\u5206\u6790\u5176\u4ed6\u7684 Cluster Invoker\u3002 3.2.2 FailbackClusterInvoker FailbackClusterInvoker \u4f1a\u5728\u8c03\u7528\u5931\u8d25\u540e\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u7ed3\u679c\u7ed9\u670d\u52a1\u6d88\u8d39\u8005\u3002\u5e76\u901a\u8fc7\u5b9a\u65f6\u4efb\u52a1\u5bf9\u5931\u8d25\u7684\u8c03\u7528\u8fdb\u884c\u91cd\u4f20\uff0c\u9002\u5408\u6267\u884c\u6d88\u606f\u901a\u77e5\u7b49\u64cd\u4f5c\u3002\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u5b83\u7684\u5b9e\u73b0\u903b\u8f91\u3002 public class FailbackClusterInvoker T extends AbstractClusterInvoker T { private static final long RETRY_FAILED_PERIOD = 5 * 1000; private final ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(2, new NamedInternalThreadFactory( failback-cluster-timer , true)); private final ConcurrentMap Invocation, AbstractClusterInvoker ? failed = new ConcurrentHashMap Invocation, AbstractClusterInvoker ? (); private volatile ScheduledFuture ? retryFuture; @Override protected Result doInvoke(Invocation invocation, List Invoker T invokers, LoadBalance loadbalance) throws RpcException { try { checkInvokers(invokers, invocation); // \u9009\u62e9 Invoker Invoker T invoker = select(loadbalance, invocation, invokers, null); // \u8fdb\u884c\u8c03\u7528 return invoker.invoke(invocation); } catch (Throwable e) { // \u5982\u679c\u8c03\u7528\u8fc7\u7a0b\u4e2d\u53d1\u751f\u5f02\u5e38\uff0c\u6b64\u65f6\u4ec5\u6253\u5370\u9519\u8bef\u65e5\u5fd7\uff0c\u4e0d\u629b\u51fa\u5f02\u5e38 logger.error( Failback to invoke method ... ); // \u8bb0\u5f55\u8c03\u7528\u4fe1\u606f addFailed(invocation, this); // \u8fd4\u56de\u4e00\u4e2a\u7a7a\u7ed3\u679c\u7ed9\u670d\u52a1\u6d88\u8d39\u8005 return new RpcResult(); } } private void addFailed(Invocation invocation, AbstractClusterInvoker ? router) { if (retryFuture == null) { synchronized (this) { if (retryFuture == null) { // \u521b\u5efa\u5b9a\u65f6\u4efb\u52a1\uff0c\u6bcf\u96945\u79d2\u6267\u884c\u4e00\u6b21 retryFuture = scheduledExecutorService.scheduleWithFixedDelay(new Runnable() { @Override public void run() { try { // \u5bf9\u5931\u8d25\u7684\u8c03\u7528\u8fdb\u884c\u91cd\u8bd5 retryFailed(); } catch (Throwable t) { // \u5982\u679c\u53d1\u751f\u5f02\u5e38\uff0c\u4ec5\u6253\u5370\u5f02\u5e38\u65e5\u5fd7\uff0c\u4e0d\u629b\u51fa logger.error( Unexpected error occur at collect statistic , t); } } }, RETRY_FAILED_PERIOD, RETRY_FAILED_PERIOD, TimeUnit.MILLISECONDS); } } } // \u6dfb\u52a0 invocation \u548c invoker \u5230 failed \u4e2d failed.put(invocation, router); } void retryFailed() { if (failed.size() == 0) { return; } // \u904d\u5386 failed\uff0c\u5bf9\u5931\u8d25\u7684\u8c03\u7528\u8fdb\u884c\u91cd\u8bd5 for (Map.Entry Invocation, AbstractClusterInvoker ? entry : new HashMap Invocation, AbstractClusterInvoker ? (failed).entrySet()) { Invocation invocation = entry.getKey(); Invoker ? invoker = entry.getValue(); try { // \u518d\u6b21\u8fdb\u884c\u8c03\u7528 invoker.invoke(invocation); // \u8c03\u7528\u6210\u529f\u540e\uff0c\u4ece failed \u4e2d\u79fb\u9664 invoker failed.remove(invocation); } catch (Throwable e) { // \u4ec5\u6253\u5370\u5f02\u5e38\uff0c\u4e0d\u629b\u51fa logger.error( Failed retry to invoke method ... ); } } } } \u8fd9\u4e2a\u7c7b\u4e3b\u8981\u75313\u4e2a\u65b9\u6cd5\u7ec4\u6210\uff0c\u9996\u5148\u662f doInvoker\uff0c\u8be5\u65b9\u6cd5\u8d1f\u8d23\u521d\u6b21\u7684\u8fdc\u7a0b\u8c03\u7528\u3002\u82e5\u8fdc\u7a0b\u8c03\u7528\u5931\u8d25\uff0c\u5219\u901a\u8fc7 addFailed \u65b9\u6cd5\u5c06\u8c03\u7528\u4fe1\u606f\u5b58\u5165\u5230 failed \u4e2d\uff0c\u7b49\u5f85\u5b9a\u65f6\u91cd\u8bd5\u3002addFailed \u5728\u5f00\u59cb\u9636\u6bb5\u4f1a\u6839\u636e retryFuture \u4e3a\u7a7a\u4e0e\u5426\uff0c\u6765\u51b3\u5b9a\u662f\u5426\u5f00\u542f\u5b9a\u65f6\u4efb\u52a1\u3002retryFailed \u65b9\u6cd5\u5219\u662f\u5305\u542b\u4e86\u5931\u8d25\u91cd\u8bd5\u7684\u903b\u8f91\uff0c\u8be5\u65b9\u6cd5\u4f1a\u5bf9 failed \u8fdb\u884c\u904d\u5386\uff0c\u7136\u540e\u4f9d\u6b21\u5bf9 Invoker \u8fdb\u884c\u8c03\u7528\u3002\u8c03\u7528\u6210\u529f\u5219\u5c06 Invoker \u4ece failed \u4e2d\u79fb\u9664\uff0c\u8c03\u7528\u5931\u8d25\u5219\u5ffd\u7565\u5931\u8d25\u539f\u56e0\u3002 \u4ee5\u4e0a\u5c31\u662f FailbackClusterInvoker \u7684\u6267\u884c\u903b\u8f91\uff0c\u4e0d\u662f\u5f88\u590d\u6742\uff0c\u7ee7\u7eed\u5f80\u4e0b\u770b\u3002 3.2.3 FailfastClusterInvoker FailfastClusterInvoker \u53ea\u4f1a\u8fdb\u884c\u4e00\u6b21\u8c03\u7528\uff0c\u5931\u8d25\u540e\u7acb\u5373\u629b\u51fa\u5f02\u5e38\u3002\u9002\u7528\u4e8e\u5e42\u7b49\u64cd\u4f5c\uff0c\u6bd4\u5982\u65b0\u589e\u8bb0\u5f55\u3002\u6e90\u7801\u5982\u4e0b\uff1a public class FailfastClusterInvoker T extends AbstractClusterInvoker T { @Override public Result doInvoke(Invocation invocation, List Invoker T invokers, LoadBalance loadbalance) throws RpcException { checkInvokers(invokers, invocation); // \u9009\u62e9 Invoker Invoker T invoker = select(loadbalance, invocation, invokers, null); try { // \u8c03\u7528 Invoker return invoker.invoke(invocation); } catch (Throwable e) { if (e instanceof RpcException ((RpcException) e).isBiz()) { // \u629b\u51fa\u5f02\u5e38 throw (RpcException) e; } // \u629b\u51fa\u5f02\u5e38 throw new RpcException(..., Failfast invoke providers ... ); } } } \u5982\u4e0a\uff0c\u9996\u5148\u662f\u901a\u8fc7 select \u65b9\u6cd5\u9009\u62e9 Invoker\uff0c\u7136\u540e\u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528\u3002\u5982\u679c\u8c03\u7528\u5931\u8d25\uff0c\u5219\u7acb\u5373\u629b\u51fa\u5f02\u5e38\u3002FailfastClusterInvoker \u5c31\u5148\u5206\u6790\u5230\u8fd9\uff0c\u4e0b\u9762\u5206\u6790 FailsafeClusterInvoker\u3002 3.2.4 FailsafeClusterInvoker FailsafeClusterInvoker \u662f\u4e00\u79cd\u5931\u8d25\u5b89\u5168\u7684 Cluster Invoker\u3002\u6240\u8c13\u7684\u5931\u8d25\u5b89\u5168\u662f\u6307\uff0c\u5f53\u8c03\u7528\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5f02\u5e38\u65f6\uff0cFailsafeClusterInvoker \u4ec5\u4f1a\u6253\u5370\u5f02\u5e38\uff0c\u800c\u4e0d\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\u9002\u7528\u4e8e\u5199\u5165\u5ba1\u8ba1\u65e5\u5fd7\u7b49\u64cd\u4f5c\u3002\u4e0b\u9762\u5206\u6790\u6e90\u7801\u3002 public class FailsafeClusterInvoker T extends AbstractClusterInvoker T { @Override public Result doInvoke(Invocation invocation, List Invoker T invokers, LoadBalance loadbalance) throws RpcException { try { checkInvokers(invokers, invocation); // \u9009\u62e9 Invoker Invoker T invoker = select(loadbalance, invocation, invokers, null); // \u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528 return invoker.invoke(invocation); } catch (Throwable e) { // \u6253\u5370\u9519\u8bef\u65e5\u5fd7\uff0c\u4f46\u4e0d\u629b\u51fa logger.error( Failsafe ignore exception: + e.getMessage(), e); // \u8fd4\u56de\u7a7a\u7ed3\u679c\u5ffd\u7565\u9519\u8bef return new RpcResult(); } } } FailsafeClusterInvoker \u7684\u903b\u8f91\u548c FailfastClusterInvoker \u7684\u903b\u8f91\u4e00\u6837\u7b80\u5355\uff0c\u65e0\u9700\u8fc7\u591a\u8bf4\u660e\u3002\u7ee7\u7eed\u5411\u4e0b\u5206\u6790\u3002 3.2.5 ForkingClusterInvoker ForkingClusterInvoker \u4f1a\u5728\u8fd0\u884c\u65f6\u901a\u8fc7\u7ebf\u7a0b\u6c60\u521b\u5efa\u591a\u4e2a\u7ebf\u7a0b\uff0c\u5e76\u53d1\u8c03\u7528\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u3002\u53ea\u8981\u6709\u4e00\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u6210\u529f\u8fd4\u56de\u4e86\u7ed3\u679c\uff0cdoInvoke \u65b9\u6cd5\u5c31\u4f1a\u7acb\u5373\u7ed3\u675f\u8fd0\u884c\u3002ForkingClusterInvoker \u7684\u5e94\u7528\u573a\u666f\u662f\u5728\u4e00\u4e9b\u5bf9\u5b9e\u65f6\u6027\u8981\u6c42\u6bd4\u8f83\u9ad8 \u8bfb\u64cd\u4f5c \uff08\u6ce8\u610f\u662f\u8bfb\u64cd\u4f5c\uff0c\u5e76\u884c\u5199\u64cd\u4f5c\u53ef\u80fd\u4e0d\u5b89\u5168\uff09\u4e0b\u4f7f\u7528\uff0c\u4f46\u8fd9\u5c06\u4f1a\u8017\u8d39\u66f4\u591a\u7684\u8d44\u6e90\u3002\u4e0b\u9762\u6765\u770b\u8be5\u7c7b\u7684\u5b9e\u73b0\u3002 public class ForkingClusterInvoker T extends AbstractClusterInvoker T { private final ExecutorService executor = Executors.newCachedThreadPool( new NamedInternalThreadFactory( forking-cluster-timer , true)); @Override public Result doInvoke(final Invocation invocation, List Invoker T invokers, LoadBalance loadbalance) throws RpcException { try { checkInvokers(invokers, invocation); final List Invoker T selected; // \u83b7\u53d6 forks \u914d\u7f6e final int forks = getUrl().getParameter(Constants.FORKS_KEY, Constants.DEFAULT_FORKS); // \u83b7\u53d6\u8d85\u65f6\u914d\u7f6e final int timeout = getUrl().getParameter(Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT); // \u5982\u679c forks \u914d\u7f6e\u4e0d\u5408\u7406\uff0c\u5219\u76f4\u63a5\u5c06 invokers \u8d4b\u503c\u7ed9 selected if (forks = 0 || forks = invokers.size()) { selected = invokers; } else { selected = new ArrayList Invoker T (); // \u5faa\u73af\u9009\u51fa forks \u4e2a Invoker\uff0c\u5e76\u6dfb\u52a0\u5230 selected \u4e2d for (int i = 0; i forks; i++) { // \u9009\u62e9 Invoker Invoker T invoker = select(loadbalance, invocation, invokers, selected); if (!selected.contains(invoker)) { selected.add(invoker); } } } // ----------------------\u2728 \u5206\u5272\u7ebf1 \u2728---------------------- // RpcContext.getContext().setInvokers((List) selected); final AtomicInteger count = new AtomicInteger(); final BlockingQueue Object ref = new LinkedBlockingQueue Object (); // \u904d\u5386 selected \u5217\u8868 for (final Invoker T invoker : selected) { // \u4e3a\u6bcf\u4e2a Invoker \u521b\u5efa\u4e00\u4e2a\u6267\u884c\u7ebf\u7a0b executor.execute(new Runnable() { @Override public void run() { try { // \u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528 Result result = invoker.invoke(invocation); // \u5c06\u7ed3\u679c\u5b58\u5230\u963b\u585e\u961f\u5217\u4e2d ref.offer(result); } catch (Throwable e) { int value = count.incrementAndGet(); // \u4ec5\u5728 value \u5927\u4e8e\u7b49\u4e8e selected.size() \u65f6\uff0c\u624d\u5c06\u5f02\u5e38\u5bf9\u8c61 // \u653e\u5165\u963b\u585e\u961f\u5217\u4e2d\uff0c\u8bf7\u5927\u5bb6\u601d\u8003\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u505a\u3002 if (value = selected.size()) { // \u5c06\u5f02\u5e38\u5bf9\u8c61\u5b58\u5165\u5230\u963b\u585e\u961f\u5217\u4e2d ref.offer(e); } } } }); } // ----------------------\u2728 \u5206\u5272\u7ebf2 \u2728---------------------- // try { // \u4ece\u963b\u585e\u961f\u5217\u4e2d\u53d6\u51fa\u8fdc\u7a0b\u8c03\u7528\u7ed3\u679c Object ret = ref.poll(timeout, TimeUnit.MILLISECONDS); // \u5982\u679c\u7ed3\u679c\u7c7b\u578b\u4e3a Throwable\uff0c\u5219\u629b\u51fa\u5f02\u5e38 if (ret instanceof Throwable) { Throwable e = (Throwable) ret; throw new RpcException(..., Failed to forking invoke provider ... ); } // \u8fd4\u56de\u7ed3\u679c return (Result) ret; } catch (InterruptedException e) { throw new RpcException( Failed to forking invoke provider ... ); } } finally { RpcContext.getContext().clearAttachments(); } } } ForkingClusterInvoker \u7684 doInvoker \u65b9\u6cd5\u6bd4\u8f83\u957f\uff0c\u8fd9\u91cc\u901a\u8fc7\u4e24\u4e2a\u5206\u5272\u7ebf\u5c06\u6574\u4e2a\u65b9\u6cd5\u5212\u5206\u4e3a\u4e09\u4e2a\u903b\u8f91\u5757\u3002\u4ece\u65b9\u6cd5\u5f00\u59cb\u5230\u5206\u5272\u7ebf1\u4e4b\u95f4\u7684\u4ee3\u7801\u4e3b\u8981\u662f\u7528\u4e8e\u9009\u51fa forks \u4e2a Invoker\uff0c\u4e3a\u63a5\u4e0b\u6765\u7684\u5e76\u53d1\u8c03\u7528\u63d0\u4f9b\u8f93\u5165\u3002\u5206\u5272\u7ebf1\u548c\u5206\u5272\u7ebf2\u4e4b\u95f4\u7684\u903b\u8f91\u901a\u8fc7\u7ebf\u7a0b\u6c60\u5e76\u53d1\u8c03\u7528\u591a\u4e2a Invoker\uff0c\u5e76\u5c06\u7ed3\u679c\u5b58\u50a8\u5728\u963b\u585e\u961f\u5217\u4e2d\u3002\u5206\u5272\u7ebf2\u5230\u65b9\u6cd5\u7ed3\u5c3e\u4e4b\u95f4\u7684\u903b\u8f91\u4e3b\u8981\u7528\u4e8e\u4ece\u963b\u585e\u961f\u5217\u4e2d\u83b7\u53d6\u8fd4\u56de\u7ed3\u679c\uff0c\u5e76\u5bf9\u8fd4\u56de\u7ed3\u679c\u7c7b\u578b\u8fdb\u884c\u5224\u65ad\u3002\u5982\u679c\u4e3a\u5f02\u5e38\u7c7b\u578b\uff0c\u5219\u76f4\u63a5\u629b\u51fa\uff0c\u5426\u5219\u8fd4\u56de\u3002 \u4ee5\u4e0a\u5c31\u662fForkingClusterInvoker \u7684 doInvoker \u65b9\u6cd5\u5927\u81f4\u8fc7\u7a0b\u3002\u6211\u4eec\u5728\u5206\u5272\u7ebf1\u548c\u5206\u5272\u7ebf2\u4e4b\u95f4\u7684\u4ee3\u7801\u4e0a\u7559\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u95ee\u9898\u662f\u8fd9\u6837\u7684\uff1a\u4e3a\u4ec0\u4e48\u8981\u5728 value = selected.size() \u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u5c06\u5f02\u5e38\u5bf9\u8c61\u6dfb\u52a0\u5230\u963b\u585e\u961f\u5217\u4e2d\uff1f\u8fd9\u91cc\u6765\u89e3\u7b54\u4e00\u4e0b\u3002\u539f\u56e0\u662f\u8fd9\u6837\u7684\uff0c\u5728\u5e76\u884c\u8c03\u7528\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u60c5\u51b5\u4e0b\uff0c\u53ea\u8981\u6709\u4e00\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u80fd\u591f\u6210\u529f\u8fd4\u56de\u7ed3\u679c\uff0c\u800c\u5176\u4ed6\u5168\u90e8\u5931\u8d25\u3002\u6b64\u65f6 ForkingClusterInvoker \u4ecd\u5e94\u8be5\u8fd4\u56de\u6210\u529f\u7684\u7ed3\u679c\uff0c\u800c\u975e\u629b\u51fa\u5f02\u5e38\u3002\u5728 value = selected.size() \u65f6\u5c06\u5f02\u5e38\u5bf9\u8c61\u653e\u5165\u963b\u585e\u961f\u5217\u4e2d\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u5f02\u5e38\u5bf9\u8c61\u4e0d\u4f1a\u51fa\u73b0\u5728\u6b63\u5e38\u7ed3\u679c\u7684\u524d\u9762\uff0c\u8fd9\u6837\u53ef\u4ece\u963b\u585e\u961f\u5217\u4e2d\u4f18\u5148\u53d6\u51fa\u6b63\u5e38\u7684\u7ed3\u679c\u3002 \u5173\u4e8e ForkingClusterInvoker \u5c31\u5148\u5206\u6790\u5230\u8fd9\uff0c\u63a5\u4e0b\u6765\u5206\u6790\u6700\u540e\u4e00\u4e2a Cluster Invoker\u3002 3.2.6 BroadcastClusterInvoker \u672c\u7ae0\u7684\u6700\u540e\uff0c\u6211\u4eec\u518d\u6765\u770b\u4e00\u4e0b BroadcastClusterInvoker\u3002BroadcastClusterInvoker \u4f1a\u9010\u4e2a\u8c03\u7528\u6bcf\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u5982\u679c\u5176\u4e2d\u4e00\u53f0\u62a5\u9519\uff0c\u5728\u5faa\u73af\u8c03\u7528\u7ed3\u675f\u540e\uff0cBroadcastClusterInvoker \u4f1a\u629b\u51fa\u5f02\u5e38\u3002\u8be5\u7c7b\u901a\u5e38\u7528\u4e8e\u901a\u77e5\u6240\u6709\u63d0\u4f9b\u8005\u66f4\u65b0\u7f13\u5b58\u6216\u65e5\u5fd7\u7b49\u672c\u5730\u8d44\u6e90\u4fe1\u606f\u3002\u6e90\u7801\u5982\u4e0b\u3002 public class BroadcastClusterInvoker T extends AbstractClusterInvoker T { @Override public Result doInvoke(final Invocation invocation, List Invoker T invokers, LoadBalance loadbalance) throws RpcException { checkInvokers(invokers, invocation); RpcContext.getContext().setInvokers((List) invokers); RpcException exception = null; Result result = null; // \u904d\u5386 Invoker \u5217\u8868\uff0c\u9010\u4e2a\u8c03\u7528 for (Invoker T invoker : invokers) { try { // \u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528 result = invoker.invoke(invocation); } catch (RpcException e) { exception = e; logger.warn(e.getMessage(), e); } catch (Throwable e) { exception = new RpcException(e.getMessage(), e); logger.warn(e.getMessage(), e); } } // exception \u4e0d\u4e3a\u7a7a\uff0c\u5219\u629b\u51fa\u5f02\u5e38 if (exception != null) { throw exception; } return result; } } \u4ee5\u4e0a\u5c31\u662f BroadcastClusterInvoker \u7684\u4ee3\u7801\uff0c\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002 4.\u603b\u7ed3 \u672c\u7bc7\u6587\u7ae0\u8be6\u7ec6\u5206\u6790\u4e86\u96c6\u7fa4\u5bb9\u9519\u7684\u51e0\u79cd\u5b9e\u73b0\u65b9\u5f0f\u3002\u96c6\u7fa4\u5bb9\u9519\u5bf9\u4e8e Dubbo \u6846\u67b6\u6765\u8bf4\uff0c\u662f\u5f88\u91cd\u8981\u7684\u903b\u8f91\u3002\u96c6\u7fa4\u6a21\u5757\u5904\u4e8e\u670d\u52a1\u63d0\u4f9b\u8005\u548c\u6d88\u8d39\u8005\u4e4b\u95f4\uff0c\u5bf9\u4e8e\u670d\u52a1\u6d88\u8d39\u8005\u6765\u8bf4\uff0c\u96c6\u7fa4\u53ef\u5411\u5176\u5c4f\u853d\u670d\u52a1\u63d0\u4f9b\u8005\u96c6\u7fa4\u7684\u60c5\u51b5\uff0c\u4f7f\u5176\u80fd\u591f\u4e13\u5fc3\u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u901a\u8fc7\u96c6\u7fa4\u6a21\u5757\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5bf9\u670d\u52a1\u4e4b\u95f4\u7684\u8c03\u7528\u94fe\u8def\u8fdb\u884c\u7f16\u6392\u4f18\u5316\uff0c\u6cbb\u7406\u670d\u52a1\u3002\u603b\u7684\u6765\u8bf4\uff0c\u5bf9\u4e8e Dubbo \u800c\u8a00\uff0c\u96c6\u7fa4\u5bb9\u9519\u76f8\u5173\u903b\u8f91\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002\u60f3\u8981\u5bf9 Dubbo \u6709\u6bd4\u8f83\u6df1\u7684\u7406\u89e3\uff0c\u96c6\u7fa4\u5bb9\u9519\u662f\u5fc5\u987b\u8981\u638c\u63e1\u7684\u3002 \u5173\u4e8e\u96c6\u7fa4\u6a21\u5757\u5c31\u5148\u5206\u6790\u5230\u8fd9\uff0c\u611f\u8c22\u9605\u8bfb\u3002","title":"\u96c6\u7fa4"},{"location":"source_code_guide/cluster/#1","text":"\u4e3a\u4e86\u907f\u514d\u5355\u70b9\u6545\u969c\uff0c\u73b0\u5728\u7684\u5e94\u7528\u901a\u5e38\u81f3\u5c11\u4f1a\u90e8\u7f72\u5728\u4e24\u53f0\u670d\u52a1\u5668\u4e0a\u3002\u5bf9\u4e8e\u4e00\u4e9b\u8d1f\u8f7d\u6bd4\u8f83\u9ad8\u7684\u670d\u52a1\uff0c\u4f1a\u90e8\u7f72\u66f4\u591a\u7684\u670d\u52a1\u5668\u3002\u8fd9\u6837\uff0c\u5728\u540c\u4e00\u73af\u5883\u4e0b\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u6570\u91cf\u4f1a\u5927\u4e8e1\u3002\u5bf9\u4e8e\u670d\u52a1\u6d88\u8d39\u8005\u6765\u8bf4\uff0c\u540c\u4e00\u73af\u5883\u4e0b\u51fa\u73b0\u4e86\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u3002\u8fd9\u65f6\u4f1a\u51fa\u73b0\u4e00\u4e2a\u95ee\u9898\uff0c\u670d\u52a1\u6d88\u8d39\u8005\u9700\u8981\u51b3\u5b9a\u9009\u62e9\u54ea\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u8fdb\u884c\u8c03\u7528\u3002\u53e6\u5916\u670d\u52a1\u8c03\u7528\u5931\u8d25\u65f6\u7684\u5904\u7406\u63aa\u65bd\u4e5f\u662f\u9700\u8981\u8003\u8651\u7684\uff0c\u662f\u91cd\u8bd5\u5462\uff0c\u8fd8\u662f\u629b\u51fa\u5f02\u5e38\uff0c\u4ea6\u6216\u662f\u53ea\u6253\u5370\u5f02\u5e38\u7b49\u3002\u4e3a\u4e86\u5904\u7406\u8fd9\u4e9b\u95ee\u9898\uff0cDubbo \u5b9a\u4e49\u4e86\u96c6\u7fa4\u63a5\u53e3 Cluster \u4ee5\u53ca Cluster Invoker\u3002\u96c6\u7fa4 Cluster \u7528\u9014\u662f\u5c06\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u5408\u5e76\u4e3a\u4e00\u4e2a Cluster Invoker\uff0c\u5e76\u5c06\u8fd9\u4e2a Invoker \u66b4\u9732\u7ed9\u670d\u52a1\u6d88\u8d39\u8005\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u670d\u52a1\u6d88\u8d39\u8005\u53ea\u9700\u901a\u8fc7\u8fd9\u4e2a Invoker \u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528\u5373\u53ef\uff0c\u81f3\u4e8e\u5177\u4f53\u8c03\u7528\u54ea\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u4ee5\u53ca\u8c03\u7528\u5931\u8d25\u540e\u5982\u4f55\u5904\u7406\u7b49\u95ee\u9898\uff0c\u73b0\u5728\u90fd\u4ea4\u7ed9\u96c6\u7fa4\u6a21\u5757\u53bb\u5904\u7406\u3002\u96c6\u7fa4\u6a21\u5757\u662f\u670d\u52a1\u63d0\u4f9b\u8005\u548c\u670d\u52a1\u6d88\u8d39\u8005\u7684\u4e2d\u95f4\u5c42\uff0c\u4e3a\u670d\u52a1\u6d88\u8d39\u8005\u5c4f\u853d\u4e86\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u60c5\u51b5\uff0c\u8fd9\u6837\u670d\u52a1\u6d88\u8d39\u8005\u5c31\u53ef\u4ee5\u4e13\u5fc3\u5904\u7406\u8fdc\u7a0b\u8c03\u7528\u76f8\u5173\u4e8b\u5b9c\u3002\u6bd4\u5982\u53d1\u8bf7\u6c42\uff0c\u63a5\u53d7\u670d\u52a1\u63d0\u4f9b\u8005\u8fd4\u56de\u7684\u6570\u636e\u7b49\u3002\u8fd9\u5c31\u662f\u96c6\u7fa4\u7684\u4f5c\u7528\u3002 Dubbo \u63d0\u4f9b\u4e86\u591a\u79cd\u96c6\u7fa4\u5b9e\u73b0\uff0c\u5305\u542b\u4f46\u4e0d\u9650\u4e8e Failover Cluster\u3001Failfast Cluster \u548c Failsafe Cluster \u7b49\u3002\u6bcf\u79cd\u96c6\u7fa4\u5b9e\u73b0\u7c7b\u7684\u7528\u9014\u4e0d\u540c\uff0c\u63a5\u4e0b\u6765\u4f1a\u4e00\u4e00\u8fdb\u884c\u5206\u6790\u3002","title":"1.\u7b80\u4ecb"},{"location":"source_code_guide/cluster/#2","text":"\u5728\u5bf9\u96c6\u7fa4\u76f8\u5173\u4ee3\u7801\u8fdb\u884c\u5206\u6790\u4e4b\u524d\uff0c\u8fd9\u91cc\u6709\u5fc5\u8981\u5148\u6765\u4ecb\u7ecd\u4e00\u4e0b\u96c6\u7fa4\u5bb9\u9519\u7684\u6240\u6709\u7ec4\u4ef6\u3002\u5305\u542b Cluster\u3001Cluster Invoker\u3001Directory\u3001Router \u548c LoadBalance \u7b49\u3002 \u96c6\u7fa4\u5de5\u4f5c\u8fc7\u7a0b\u53ef\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\uff0c\u7b2c\u4e00\u4e2a\u9636\u6bb5\u662f\u5728\u670d\u52a1\u6d88\u8d39\u8005\u521d\u59cb\u5316\u671f\u95f4\uff0c\u96c6\u7fa4 Cluster \u5b9e\u73b0\u7c7b\u4e3a\u670d\u52a1\u6d88\u8d39\u8005\u521b\u5efa Cluster Invoker \u5b9e\u4f8b\uff0c\u5373\u4e0a\u56fe\u4e2d\u7684 merge \u64cd\u4f5c\u3002\u7b2c\u4e8c\u4e2a\u9636\u6bb5\u662f\u5728\u670d\u52a1\u6d88\u8d39\u8005\u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528\u65f6\u3002\u4ee5 FailoverClusterInvoker \u4e3a\u4f8b\uff0c\u8be5\u7c7b\u578b Cluster Invoker \u9996\u5148\u4f1a\u8c03\u7528 Directory \u7684 list \u65b9\u6cd5\u5217\u4e3e Invoker \u5217\u8868\uff08\u53ef\u5c06 Invoker \u7b80\u5355\u7406\u89e3\u4e3a\u670d\u52a1\u63d0\u4f9b\u8005\uff09\u3002Directory \u7684\u7528\u9014\u662f\u4fdd\u5b58 Invoker\uff0c\u53ef\u7b80\u5355\u7c7b\u6bd4\u4e3a List\\ Invoker>\u3002\u5176\u5b9e\u73b0\u7c7b RegistryDirectory \u662f\u4e00\u4e2a\u52a8\u6001\u670d\u52a1\u76ee\u5f55\uff0c\u53ef\u611f\u77e5\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e\u7684\u53d8\u5316\uff0c\u5b83\u6240\u6301\u6709\u7684 Invoker \u5217\u8868\u4f1a\u968f\u7740\u6ce8\u518c\u4e2d\u5fc3\u5185\u5bb9\u7684\u53d8\u5316\u800c\u53d8\u5316\u3002\u6bcf\u6b21\u53d8\u5316\u540e\uff0cRegistryDirectory \u4f1a\u52a8\u6001\u589e\u5220 Invoker\uff0c\u5e76\u8c03\u7528 Router \u7684 route \u65b9\u6cd5\u8fdb\u884c\u8def\u7531\uff0c\u8fc7\u6ee4\u6389\u4e0d\u7b26\u5408\u8def\u7531\u89c4\u5219\u7684 Invoker\u3002\u5f53 FailoverClusterInvoker \u62ff\u5230 Directory \u8fd4\u56de\u7684 Invoker \u5217\u8868\u540e\uff0c\u5b83\u4f1a\u901a\u8fc7 LoadBalance \u4ece Invoker \u5217\u8868\u4e2d\u9009\u62e9\u4e00\u4e2a Invoker\u3002\u6700\u540e FailoverClusterInvoker \u4f1a\u5c06\u53c2\u6570\u4f20\u7ed9 LoadBalance \u9009\u62e9\u51fa\u7684 Invoker \u5b9e\u4f8b\u7684 invoke \u65b9\u6cd5\uff0c\u8fdb\u884c\u771f\u6b63\u7684\u8fdc\u7a0b\u8c03\u7528\u3002 \u4ee5\u4e0a\u5c31\u662f\u96c6\u7fa4\u5de5\u4f5c\u7684\u6574\u4e2a\u6d41\u7a0b\uff0c\u8fd9\u91cc\u5e76\u6ca1\u4ecb\u7ecd\u96c6\u7fa4\u662f\u5982\u4f55\u5bb9\u9519\u7684\u3002Dubbo \u4e3b\u8981\u63d0\u4f9b\u4e86\u8fd9\u6837\u51e0\u79cd\u5bb9\u9519\u65b9\u5f0f\uff1a Failover Cluster - \u5931\u8d25\u81ea\u52a8\u5207\u6362 Failfast Cluster - \u5feb\u901f\u5931\u8d25 Failsafe Cluster - \u5931\u8d25\u5b89\u5168 Failback Cluster - \u5931\u8d25\u81ea\u52a8\u6062\u590d Forking Cluster - \u5e76\u884c\u8c03\u7528\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005 \u4e0b\u9762\u5f00\u59cb\u5206\u6790\u6e90\u7801\u3002","title":"2. \u96c6\u7fa4\u5bb9\u9519"},{"location":"source_code_guide/cluster/#3","text":"","title":"3.\u6e90\u7801\u5206\u6790"},{"location":"source_code_guide/cluster/#31-cluster","text":"\u6211\u4eec\u5728\u4e0a\u4e00\u7ae0\u770b\u5230\u4e86\u4e24\u4e2a\u6982\u5ff5\uff0c\u5206\u522b\u662f\u96c6\u7fa4\u63a5\u53e3 Cluster \u548c Cluster Invoker\uff0c\u8fd9\u4e24\u8005\u662f\u4e0d\u540c\u7684\u3002Cluster \u662f\u63a5\u53e3\uff0c\u800c Cluster Invoker \u662f\u4e00\u79cd Invoker\u3002\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u9009\u62e9\u903b\u8f91\uff0c\u4ee5\u53ca\u8fdc\u7a0b\u8c03\u7528\u5931\u8d25\u540e\u7684\u7684\u5904\u7406\u903b\u8f91\u5747\u662f\u5c01\u88c5\u5728 Cluster Invoker \u4e2d\u3002\u90a3\u4e48 Cluster \u63a5\u53e3\u548c\u76f8\u5173\u5b9e\u73b0\u7c7b\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u7528\u9014\u6bd4\u8f83\u7b80\u5355\uff0c\u4ec5\u7528\u4e8e\u751f\u6210 Cluster Invoker\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u6e90\u7801\u3002 public class FailoverCluster implements Cluster { public final static String NAME = failover ; @Override public T Invoker T join(Directory T directory) throws RpcException { // \u521b\u5efa\u5e76\u8fd4\u56de FailoverClusterInvoker \u5bf9\u8c61 return new FailoverClusterInvoker T (directory); } } \u5982\u4e0a\uff0cFailoverCluster \u603b\u5171\u5c31\u5305\u542b\u8fd9\u51e0\u884c\u4ee3\u7801\uff0c\u7528\u4e8e\u521b\u5efa FailoverClusterInvoker \u5bf9\u8c61\uff0c\u5f88\u7b80\u5355\u3002\u4e0b\u9762\u518d\u770b\u4e00\u4e2a\u3002 public class FailbackCluster implements Cluster { public final static String NAME = failback ; @Override public T Invoker T join(Directory T directory) throws RpcException { // \u521b\u5efa\u5e76\u8fd4\u56de FailbackClusterInvoker \u5bf9\u8c61 return new FailbackClusterInvoker T (directory); } } \u5982\u4e0a\uff0cFailbackCluster \u7684\u903b\u8f91\u4e5f\u662f\u5f88\u7b80\u5355\uff0c\u65e0\u9700\u89e3\u91ca\u4e86\u3002\u6240\u4ee5\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u628a\u91cd\u70b9\u653e\u5728\u5404\u79cd Cluster Invoker \u4e0a","title":"3.1 Cluster \u5b9e\u73b0\u7c7b\u5206\u6790"},{"location":"source_code_guide/cluster/#32-cluster-invoker","text":"\u6211\u4eec\u9996\u5148\u4ece\u5404\u79cd Cluster Invoker \u7684\u7236\u7c7b AbstractClusterInvoker \u6e90\u7801\u5f00\u59cb\u8bf4\u8d77\u3002\u524d\u9762\u8bf4\u8fc7\uff0c\u96c6\u7fa4\u5de5\u4f5c\u8fc7\u7a0b\u53ef\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\uff0c\u7b2c\u4e00\u4e2a\u9636\u6bb5\u662f\u5728\u670d\u52a1\u6d88\u8d39\u8005\u521d\u59cb\u5316\u671f\u95f4\uff0c\u8fd9\u4e2a\u5728 \u670d\u52a1\u5f15\u7528 \u90a3\u7bc7\u6587\u7ae0\u4e2d\u5206\u6790\u8fc7\uff0c\u5c31\u4e0d\u8d58\u8ff0\u3002\u7b2c\u4e8c\u4e2a\u9636\u6bb5\u662f\u5728\u670d\u52a1\u6d88\u8d39\u8005\u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528\u65f6\uff0c\u6b64\u65f6 AbstractClusterInvoker \u7684 invoke \u65b9\u6cd5\u4f1a\u88ab\u8c03\u7528\u3002\u5217\u4e3e Invoker\uff0c\u8d1f\u8f7d\u5747\u8861\u7b49\u64cd\u4f5c\u5747\u4f1a\u5728\u6b64\u9636\u6bb5\u88ab\u6267\u884c\u3002\u56e0\u6b64\u4e0b\u9762\u5148\u6765\u770b\u4e00\u4e0b invoke \u65b9\u6cd5\u7684\u903b\u8f91\u3002 public Result invoke(final Invocation invocation) throws RpcException { checkWhetherDestroyed(); LoadBalance loadbalance = null; // \u7ed1\u5b9a attachments \u5230 invocation \u4e2d. Map String, String contextAttachments = RpcContext.getContext().getAttachments(); if (contextAttachments != null contextAttachments.size() != 0) { ((RpcInvocation) invocation).addAttachments(contextAttachments); } // \u5217\u4e3e Invoker List Invoker T invokers = list(invocation); if (invokers != null !invokers.isEmpty()) { // \u52a0\u8f7d LoadBalance loadbalance = ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension(invokers.get(0).getUrl() .getMethodParameter(RpcUtils.getMethodName(invocation), Constants.LOADBALANCE_KEY, Constants.DEFAULT_LOADBALANCE)); } RpcUtils.attachInvocationIdIfAsync(getUrl(), invocation); // \u8c03\u7528 doInvoke \u8fdb\u884c\u540e\u7eed\u64cd\u4f5c return doInvoke(invocation, invokers, loadbalance); } // \u62bd\u8c61\u65b9\u6cd5\uff0c\u7531\u5b50\u7c7b\u5b9e\u73b0 protected abstract Result doInvoke(Invocation invocation, List Invoker T invokers, LoadBalance loadbalance) throws RpcException; AbstractClusterInvoker \u7684 invoke \u65b9\u6cd5\u4e3b\u8981\u7528\u4e8e\u5217\u4e3e Invoker\uff0c\u4ee5\u53ca\u52a0\u8f7d LoadBalance\u3002\u6700\u540e\u518d\u8c03\u7528\u6a21\u677f\u65b9\u6cd5 doInvoke \u8fdb\u884c\u540e\u7eed\u64cd\u4f5c\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b Invoker \u5217\u4e3e\u65b9\u6cd5 list(Invocation) \u7684\u903b\u8f91\uff0c\u5982\u4e0b\uff1a protected List Invoker T list(Invocation invocation) throws RpcException { // \u8c03\u7528 Directory \u7684 list \u65b9\u6cd5\u5217\u4e3e Invoker List Invoker T invokers = directory.list(invocation); return invokers; } \u5982\u4e0a\uff0cAbstractClusterInvoker \u4e2d\u7684 list \u65b9\u6cd5\u505a\u7684\u4e8b\u60c5\u5f88\u7b80\u5355\uff0c\u53ea\u662f\u7b80\u5355\u7684\u8c03\u7528\u4e86 Directory \u7684 list \u65b9\u6cd5\uff0c\u6ca1\u6709\u5176\u4ed6\u66f4\u591a\u7684\u903b\u8f91\u4e86\u3002Directory \u5373\u76f8\u5173\u5b9e\u73b0\u7c7b\u5728\u524d\u6587\u5df2\u7ecf\u5206\u6790\u8fc7\uff0c\u8fd9\u91cc\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u628a\u76ee\u5149\u8f6c\u79fb\u5230 AbstractClusterInvoker \u7684\u5404\u79cd\u5b9e\u73b0\u7c7b\u4e0a\uff0c\u6765\u770b\u4e00\u4e0b\u8fd9\u4e9b\u5b9e\u73b0\u7c7b\u662f\u5982\u4f55\u5b9e\u73b0 doInvoke \u65b9\u6cd5\u903b\u8f91\u7684\u3002","title":"3.2 Cluster Invoker \u5206\u6790"},{"location":"source_code_guide/cluster/#321-failoverclusterinvoker","text":"FailoverClusterInvoker \u5728\u8c03\u7528\u5931\u8d25\u65f6\uff0c\u4f1a\u81ea\u52a8\u5207\u6362 Invoker \u8fdb\u884c\u91cd\u8bd5\u3002\u9ed8\u8ba4\u914d\u7f6e\u4e0b\uff0cDubbo \u4f1a\u4f7f\u7528\u8fd9\u4e2a\u7c7b\u4f5c\u4e3a\u7f3a\u7701 Cluster Invoker\u3002\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u8be5\u7c7b\u7684\u903b\u8f91\u3002 public class FailoverClusterInvoker T extends AbstractClusterInvoker T { // \u7701\u7565\u90e8\u5206\u4ee3\u7801 @Override public Result doInvoke(Invocation invocation, final List Invoker T invokers, LoadBalance loadbalance) throws RpcException { List Invoker T copyinvokers = invokers; checkInvokers(copyinvokers, invocation); // \u83b7\u53d6\u91cd\u8bd5\u6b21\u6570 int len = getUrl().getMethodParameter(invocation.getMethodName(), Constants.RETRIES_KEY, Constants.DEFAULT_RETRIES) + 1; if (len = 0) { len = 1; } RpcException le = null; List Invoker T invoked = new ArrayList Invoker T (copyinvokers.size()); Set String providers = new HashSet String (len); // \u5faa\u73af\u8c03\u7528\uff0c\u5931\u8d25\u91cd\u8bd5 for (int i = 0; i len; i++) { if (i 0) { checkWhetherDestroyed(); // \u5728\u8fdb\u884c\u91cd\u8bd5\u524d\u91cd\u65b0\u5217\u4e3e Invoker\uff0c\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff0c\u5982\u679c\u67d0\u4e2a\u670d\u52a1\u6302\u4e86\uff0c // \u901a\u8fc7\u8c03\u7528 list \u53ef\u5f97\u5230\u6700\u65b0\u53ef\u7528\u7684 Invoker \u5217\u8868 copyinvokers = list(invocation); // \u5bf9 copyinvokers \u8fdb\u884c\u5224\u7a7a\u68c0\u67e5 checkInvokers(copyinvokers, invocation); } // \u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u9009\u62e9 Invoker Invoker T invoker = select(loadbalance, invocation, copyinvokers, invoked); // \u6dfb\u52a0\u5230 invoker \u5230 invoked \u5217\u8868\u4e2d invoked.add(invoker); // \u8bbe\u7f6e invoked \u5230 RPC \u4e0a\u4e0b\u6587\u4e2d RpcContext.getContext().setInvokers((List) invoked); try { // \u8c03\u7528\u76ee\u6807 Invoker \u7684 invoke \u65b9\u6cd5 Result result = invoker.invoke(invocation); return result; } catch (RpcException e) { if (e.isBiz()) { throw e; } le = e; } catch (Throwable e) { le = new RpcException(e.getMessage(), e); } finally { providers.add(invoker.getUrl().getAddress()); } } // \u82e5\u91cd\u8bd5\u5931\u8d25\uff0c\u5219\u629b\u51fa\u5f02\u5e38 throw new RpcException(..., Failed to invoke the method ... ); } } \u5982\u4e0a\uff0cFailoverClusterInvoker \u7684 doInvoke \u65b9\u6cd5\u9996\u5148\u662f\u83b7\u53d6\u91cd\u8bd5\u6b21\u6570\uff0c\u7136\u540e\u6839\u636e\u91cd\u8bd5\u6b21\u6570\u8fdb\u884c\u5faa\u73af\u8c03\u7528\uff0c\u5931\u8d25\u540e\u8fdb\u884c\u91cd\u8bd5\u3002\u5728 for \u5faa\u73af\u5185\uff0c\u9996\u5148\u662f\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u7ec4\u4ef6\u9009\u62e9\u4e00\u4e2a Invoker\uff0c\u7136\u540e\u518d\u901a\u8fc7\u8fd9\u4e2a Invoker \u7684 invoke \u65b9\u6cd5\u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528\u3002\u5982\u679c\u5931\u8d25\u4e86\uff0c\u8bb0\u5f55\u4e0b\u5f02\u5e38\uff0c\u5e76\u8fdb\u884c\u91cd\u8bd5\u3002\u91cd\u8bd5\u65f6\u4f1a\u518d\u6b21\u8c03\u7528\u7236\u7c7b\u7684 list \u65b9\u6cd5\u5217\u4e3e Invoker\u3002\u6574\u4e2a\u6d41\u7a0b\u5927\u81f4\u5982\u6b64\uff0c\u4e0d\u662f\u5f88\u96be\u7406\u89e3\u3002\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0b select \u65b9\u6cd5\u7684\u903b\u8f91\u3002 protected Invoker T select(LoadBalance loadbalance, Invocation invocation, List Invoker T invokers, List Invoker T selected) throws RpcException { if (invokers == null || invokers.isEmpty()) return null; // \u83b7\u53d6\u8c03\u7528\u65b9\u6cd5\u540d String methodName = invocation == null ? : invocation.getMethodName(); // \u83b7\u53d6 sticky \u914d\u7f6e\uff0csticky \u8868\u793a\u7c98\u6ede\u8fde\u63a5\u3002\u6240\u8c13\u7c98\u6ede\u8fde\u63a5\u662f\u6307\u8ba9\u670d\u52a1\u6d88\u8d39\u8005\u5c3d\u53ef\u80fd\u7684 // \u8c03\u7528\u540c\u4e00\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u9664\u975e\u8be5\u63d0\u4f9b\u8005\u6302\u4e86\u518d\u8fdb\u884c\u5207\u6362 boolean sticky = invokers.get(0).getUrl().getMethodParameter(methodName, Constants.CLUSTER_STICKY_KEY, Constants.DEFAULT_CLUSTER_STICKY); { // \u68c0\u6d4b invokers \u5217\u8868\u662f\u5426\u5305\u542b stickyInvoker\uff0c\u5982\u679c\u4e0d\u5305\u542b\uff0c // \u8bf4\u660e stickyInvoker \u4ee3\u8868\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u6302\u4e86\uff0c\u6b64\u65f6\u9700\u8981\u5c06\u5176\u7f6e\u7a7a if (stickyInvoker != null !invokers.contains(stickyInvoker)) { stickyInvoker = null; } // \u5728 sticky \u4e3a true\uff0c\u4e14 stickyInvoker != null \u7684\u60c5\u51b5\u4e0b\u3002\u5982\u679c selected \u5305\u542b // stickyInvoker\uff0c\u8868\u660e stickyInvoker \u5bf9\u5e94\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u53ef\u80fd\u56e0\u7f51\u7edc\u539f\u56e0\u672a\u80fd\u6210\u529f\u63d0\u4f9b\u670d\u52a1\u3002 // \u4f46\u662f\u8be5\u63d0\u4f9b\u8005\u5e76\u6ca1\u6302\uff0c\u6b64\u65f6 invokers \u5217\u8868\u4e2d\u4ecd\u5b58\u5728\u8be5\u670d\u52a1\u63d0\u4f9b\u8005\u5bf9\u5e94\u7684 Invoker\u3002 if (sticky stickyInvoker != null (selected == null || !selected.contains(stickyInvoker))) { // availablecheck \u8868\u793a\u662f\u5426\u5f00\u542f\u4e86\u53ef\u7528\u6027\u68c0\u67e5\uff0c\u5982\u679c\u5f00\u542f\u4e86\uff0c\u5219\u8c03\u7528 stickyInvoker \u7684 // isAvailable \u65b9\u6cd5\u8fdb\u884c\u68c0\u67e5\uff0c\u5982\u679c\u68c0\u67e5\u901a\u8fc7\uff0c\u5219\u76f4\u63a5\u8fd4\u56de stickyInvoker\u3002 if (availablecheck stickyInvoker.isAvailable()) { return stickyInvoker; } } } // \u5982\u679c\u7ebf\u7a0b\u8d70\u5230\u5f53\u524d\u4ee3\u7801\u5904\uff0c\u8bf4\u660e\u524d\u9762\u7684 stickyInvoker \u4e3a\u7a7a\uff0c\u6216\u8005\u4e0d\u53ef\u7528\u3002 // \u6b64\u65f6\u7ee7\u7eed\u8c03\u7528 doSelect \u9009\u62e9 Invoker Invoker T invoker = doSelect(loadbalance, invocation, invokers, selected); // \u5982\u679c sticky \u4e3a true\uff0c\u5219\u5c06\u8d1f\u8f7d\u5747\u8861\u7ec4\u4ef6\u9009\u51fa\u7684 Invoker \u8d4b\u503c\u7ed9 stickyInvoker if (sticky) { stickyInvoker = invoker; } return invoker; } \u5982\u4e0a\uff0cselect \u65b9\u6cd5\u7684\u4e3b\u8981\u903b\u8f91\u96c6\u4e2d\u5728\u4e86\u5bf9\u7c98\u6ede\u8fde\u63a5\u7279\u6027\u7684\u652f\u6301\u4e0a\u3002\u9996\u5148\u662f\u83b7\u53d6 sticky \u914d\u7f6e\uff0c\u7136\u540e\u518d\u68c0\u6d4b invokers \u5217\u8868\u4e2d\u662f\u5426\u5305\u542b stickyInvoker\uff0c\u5982\u679c\u4e0d\u5305\u542b\uff0c\u5219\u8ba4\u4e3a\u8be5 stickyInvoker \u4e0d\u53ef\u7528\uff0c\u6b64\u65f6\u5c06\u5176\u7f6e\u7a7a\u3002\u8fd9\u91cc\u7684 invokers \u5217\u8868\u53ef\u4ee5\u770b\u505a\u662f \u5b58\u6d3b\u7740\u7684\u670d\u52a1\u63d0\u4f9b\u8005 \u5217\u8868\uff0c\u5982\u679c\u8fd9\u4e2a\u5217\u8868\u4e0d\u5305\u542b stickyInvoker\uff0c\u90a3\u81ea\u7136\u800c\u7136\u7684\u8ba4\u4e3a stickyInvoker \u6302\u4e86\uff0c\u6240\u4ee5\u7f6e\u7a7a\u3002\u5982\u679c stickyInvoker \u5b58\u5728\u4e8e invokers \u5217\u8868\u4e2d\uff0c\u6b64\u65f6\u8981\u8fdb\u884c\u4e0b\u4e00\u9879\u68c0\u6d4b \u2014 \u68c0\u6d4b selected \u4e2d\u662f\u5426\u5305\u542b stickyInvoker\u3002\u5982\u679c\u5305\u542b\u7684\u8bdd\uff0c\u8bf4\u660e stickyInvoker \u5728\u6b64\u4e4b\u524d\u6ca1\u6709\u6210\u529f\u63d0\u4f9b\u670d\u52a1\uff08\u4f46\u5176\u4ecd\u7136\u5904\u4e8e\u5b58\u6d3b\u72b6\u6001\uff09\u3002\u6b64\u65f6\u6211\u4eec\u8ba4\u4e3a\u8fd9\u4e2a\u670d\u52a1\u4e0d\u53ef\u9760\uff0c\u4e0d\u5e94\u8be5\u5728\u91cd\u8bd5\u671f\u95f4\u5185\u518d\u6b21\u88ab\u8c03\u7528\uff0c\u56e0\u6b64\u8fd9\u4e2a\u65f6\u5019\u4e0d\u4f1a\u8fd4\u56de\u8be5 stickyInvoker\u3002\u5982\u679c selected \u4e0d\u5305\u542b stickyInvoker\uff0c\u6b64\u65f6\u8fd8\u9700\u8981\u8fdb\u884c\u53ef\u7528\u6027\u68c0\u6d4b\uff0c\u6bd4\u5982\u68c0\u6d4b\u670d\u52a1\u63d0\u4f9b\u8005\u7f51\u7edc\u8fde\u901a\u6027\u7b49\u3002\u5f53\u53ef\u7528\u6027\u68c0\u6d4b\u901a\u8fc7\uff0c\u624d\u53ef\u8fd4\u56de stickyInvoker\uff0c\u5426\u5219\u8c03\u7528 doSelect \u65b9\u6cd5\u9009\u62e9 Invoker\u3002\u5982\u679c sticky \u4e3a true\uff0c\u6b64\u65f6\u4f1a\u5c06 doSelect \u65b9\u6cd5\u9009\u51fa\u7684 Invoker \u8d4b\u503c\u7ed9 stickyInvoker\u3002 \u4ee5\u4e0a\u5c31\u662f select \u65b9\u6cd5\u7684\u903b\u8f91\uff0c\u8fd9\u6bb5\u903b\u8f91\u770b\u8d77\u6765\u4e0d\u662f\u5f88\u590d\u6742\uff0c\u4f46\u662f\u4fe1\u606f\u91cf\u6bd4\u8f83\u5927\u3002\u4e0d\u641e\u61c2 invokers \u548c selected \u4e24\u4e2a\u5165\u53c2\u7684\u542b\u4e49\uff0c\u4ee5\u53ca\u7c98\u6ede\u8fde\u63a5\u7279\u6027\uff0c\u8fd9\u6bb5\u4ee3\u7801\u662f\u4e0d\u5bb9\u6613\u770b\u61c2\u7684\u3002\u6240\u4ee5\u5927\u5bb6\u5728\u9605\u8bfb\u8fd9\u6bb5\u4ee3\u7801\u65f6\uff0c\u4e0d\u8981\u5ffd\u7565\u4e86\u5bf9\u80cc\u666f\u77e5\u8bc6\u7684\u7406\u89e3\u3002\u5173\u4e8e select \u65b9\u6cd5\u5148\u5206\u6790\u8fd9\u4e48\u591a\uff0c\u7ee7\u7eed\u5411\u4e0b\u5206\u6790\u3002 private Invoker T doSelect(LoadBalance loadbalance, Invocation invocation, List Invoker T invokers, List Invoker T selected) throws RpcException { if (invokers == null || invokers.isEmpty()) return null; if (invokers.size() == 1) return invokers.get(0); if (loadbalance == null) { // \u5982\u679c loadbalance \u4e3a\u7a7a\uff0c\u8fd9\u91cc\u901a\u8fc7 SPI \u52a0\u8f7d Loadbalance\uff0c\u9ed8\u8ba4\u4e3a RandomLoadBalance loadbalance = ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension(Constants.DEFAULT_LOADBALANCE); } // \u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u7ec4\u4ef6\u9009\u62e9 Invoker Invoker T invoker = loadbalance.select(invokers, getUrl(), invocation); // \u5982\u679c selected \u5305\u542b\u8d1f\u8f7d\u5747\u8861\u9009\u62e9\u51fa\u7684 Invoker\uff0c\u6216\u8005\u8be5 Invoker \u65e0\u6cd5\u7ecf\u8fc7\u53ef\u7528\u6027\u68c0\u67e5\uff0c\u6b64\u65f6\u8fdb\u884c\u91cd\u9009 if ((selected != null selected.contains(invoker)) || (!invoker.isAvailable() getUrl() != null availablecheck)) { try { // \u8fdb\u884c\u91cd\u9009 Invoker T rinvoker = reselect(loadbalance, invocation, invokers, selected, availablecheck); if (rinvoker != null) { // \u5982\u679c rinvoker \u4e0d\u4e3a\u7a7a\uff0c\u5219\u5c06\u5176\u8d4b\u503c\u7ed9 invoker invoker = rinvoker; } else { // rinvoker \u4e3a\u7a7a\uff0c\u5b9a\u4f4d invoker \u5728 invokers \u4e2d\u7684\u4f4d\u7f6e int index = invokers.indexOf(invoker); try { // \u83b7\u53d6 index + 1 \u4f4d\u7f6e\u5904\u7684 Invoker\uff0c\u4ee5\u4e0b\u4ee3\u7801\u7b49\u4ef7\u4e8e\uff1a // invoker = invokers.get((index + 1) % invokers.size()); invoker = index invokers.size() - 1 ? invokers.get(index + 1) : invokers.get(0); } catch (Exception e) { logger.warn( ... may because invokers list dynamic change, ignore. ); } } } catch (Throwable t) { logger.error( cluster reselect fail reason is : ... ); } } return invoker; } doSelect \u4e3b\u8981\u505a\u4e86\u4e24\u4ef6\u4e8b\uff0c\u7b2c\u4e00\u662f\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u7ec4\u4ef6\u9009\u62e9 Invoker\u3002\u7b2c\u4e8c\u662f\uff0c\u5982\u679c\u9009\u51fa\u6765\u7684 Invoker \u4e0d\u7a33\u5b9a\uff0c\u6216\u4e0d\u53ef\u7528\uff0c\u6b64\u65f6\u9700\u8981\u8c03\u7528 reselect \u65b9\u6cd5\u8fdb\u884c\u91cd\u9009\u3002\u82e5 reselect \u9009\u51fa\u6765\u7684 Invoker \u4e3a\u7a7a\uff0c\u6b64\u65f6\u5b9a\u4f4d invoker \u5728 invokers \u5217\u8868\u4e2d\u7684\u4f4d\u7f6e index\uff0c\u7136\u540e\u83b7\u53d6 index + 1 \u5904\u7684 invoker\uff0c\u8fd9\u4e5f\u53ef\u4ee5\u770b\u505a\u662f\u91cd\u9009\u903b\u8f91\u7684\u4e00\u90e8\u5206\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b reselect \u65b9\u6cd5\u7684\u903b\u8f91\u3002 private Invoker T reselect(LoadBalance loadbalance, Invocation invocation, List Invoker T invokers, List Invoker T selected, boolean availablecheck) throws RpcException { List Invoker T reselectInvokers = new ArrayList Invoker T (invokers.size() 1 ? (invokers.size() - 1) : invokers.size()); // \u4e0b\u9762\u7684 if-else \u5206\u652f\u903b\u8f91\u6709\u4e9b\u5197\u4f59\uff0cpull request #2826 \u5bf9\u8fd9\u6bb5\u4ee3\u7801\u8fdb\u884c\u4e86\u7b80\u5316\uff0c\u53ef\u4ee5\u53c2\u8003\u4e00\u4e0b // \u6839\u636e availablecheck \u8fdb\u884c\u4e0d\u540c\u7684\u5904\u7406 if (availablecheck) { // \u904d\u5386 invokers \u5217\u8868 for (Invoker T invoker : invokers) { // \u68c0\u6d4b\u53ef\u7528\u6027 if (invoker.isAvailable()) { // \u5982\u679c selected \u5217\u8868\u4e0d\u5305\u542b\u5f53\u524d invoker\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u5230 reselectInvokers \u4e2d if (selected == null || !selected.contains(invoker)) { reselectInvokers.add(invoker); } } } // reselectInvokers \u4e0d\u4e3a\u7a7a\uff0c\u6b64\u65f6\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u7ec4\u4ef6\u8fdb\u884c\u9009\u62e9 if (!reselectInvokers.isEmpty()) { return loadbalance.select(reselectInvokers, getUrl(), invocation); } // \u4e0d\u68c0\u67e5 Invoker \u53ef\u7528\u6027 } else { for (Invoker T invoker : invokers) { // \u5982\u679c selected \u5217\u8868\u4e0d\u5305\u542b\u5f53\u524d invoker\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u5230 reselectInvokers \u4e2d if (selected == null || !selected.contains(invoker)) { reselectInvokers.add(invoker); } } if (!reselectInvokers.isEmpty()) { // \u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u7ec4\u4ef6\u8fdb\u884c\u9009\u62e9 return loadbalance.select(reselectInvokers, getUrl(), invocation); } } { // \u82e5\u7ebf\u7a0b\u8d70\u5230\u6b64\u5904\uff0c\u8bf4\u660e reselectInvokers \u96c6\u5408\u4e3a\u7a7a\uff0c\u6b64\u65f6\u4e0d\u4f1a\u8c03\u7528\u8d1f\u8f7d\u5747\u8861\u7ec4\u4ef6\u8fdb\u884c\u7b5b\u9009\u3002 // \u8fd9\u91cc\u4ece selected \u5217\u8868\u4e2d\u67e5\u627e\u53ef\u7528\u7684 Invoker\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230 reselectInvokers \u96c6\u5408\u4e2d if (selected != null) { for (Invoker T invoker : selected) { if ((invoker.isAvailable()) !reselectInvokers.contains(invoker)) { reselectInvokers.add(invoker); } } } if (!reselectInvokers.isEmpty()) { // \u518d\u6b21\u8fdb\u884c\u9009\u62e9\uff0c\u5e76\u8fd4\u56de\u9009\u62e9\u7ed3\u679c return loadbalance.select(reselectInvokers, getUrl(), invocation); } } return null; } reselect \u65b9\u6cd5\u603b\u7ed3\u4e0b\u6765\u5176\u5b9e\u53ea\u505a\u4e86\u4e24\u4ef6\u4e8b\u60c5\uff0c\u7b2c\u4e00\u662f\u67e5\u627e\u53ef\u7528\u7684 Invoker\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230 reselectInvokers \u96c6\u5408\u4e2d\u3002\u7b2c\u4e8c\uff0c\u5982\u679c reselectInvokers \u4e0d\u4e3a\u7a7a\uff0c\u5219\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u7ec4\u4ef6\u518d\u6b21\u8fdb\u884c\u9009\u62e9\u3002\u5176\u4e2d\u7b2c\u4e00\u4ef6\u4e8b\u60c5\u53c8\u53ef\u8fdb\u884c\u7ec6\u5206\uff0c\u4e00\u5f00\u59cb\uff0creselect \u4ece invokers \u5217\u8868\u4e2d\u67e5\u627e\u6709\u6548\u53ef\u7528\u7684 Invoker\uff0c\u82e5\u672a\u80fd\u627e\u5230\uff0c\u6b64\u65f6\u518d\u5230 selected \u5217\u8868\u4e2d\u7ee7\u7eed\u67e5\u627e\u3002\u5173\u4e8e reselect \u65b9\u6cd5\u5c31\u5148\u5206\u6790\u5230\u8fd9\uff0c\u7ee7\u7eed\u5206\u6790\u5176\u4ed6\u7684 Cluster Invoker\u3002","title":"3.2.1 FailoverClusterInvoker"},{"location":"source_code_guide/cluster/#322-failbackclusterinvoker","text":"FailbackClusterInvoker \u4f1a\u5728\u8c03\u7528\u5931\u8d25\u540e\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u7ed3\u679c\u7ed9\u670d\u52a1\u6d88\u8d39\u8005\u3002\u5e76\u901a\u8fc7\u5b9a\u65f6\u4efb\u52a1\u5bf9\u5931\u8d25\u7684\u8c03\u7528\u8fdb\u884c\u91cd\u4f20\uff0c\u9002\u5408\u6267\u884c\u6d88\u606f\u901a\u77e5\u7b49\u64cd\u4f5c\u3002\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u5b83\u7684\u5b9e\u73b0\u903b\u8f91\u3002 public class FailbackClusterInvoker T extends AbstractClusterInvoker T { private static final long RETRY_FAILED_PERIOD = 5 * 1000; private final ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(2, new NamedInternalThreadFactory( failback-cluster-timer , true)); private final ConcurrentMap Invocation, AbstractClusterInvoker ? failed = new ConcurrentHashMap Invocation, AbstractClusterInvoker ? (); private volatile ScheduledFuture ? retryFuture; @Override protected Result doInvoke(Invocation invocation, List Invoker T invokers, LoadBalance loadbalance) throws RpcException { try { checkInvokers(invokers, invocation); // \u9009\u62e9 Invoker Invoker T invoker = select(loadbalance, invocation, invokers, null); // \u8fdb\u884c\u8c03\u7528 return invoker.invoke(invocation); } catch (Throwable e) { // \u5982\u679c\u8c03\u7528\u8fc7\u7a0b\u4e2d\u53d1\u751f\u5f02\u5e38\uff0c\u6b64\u65f6\u4ec5\u6253\u5370\u9519\u8bef\u65e5\u5fd7\uff0c\u4e0d\u629b\u51fa\u5f02\u5e38 logger.error( Failback to invoke method ... ); // \u8bb0\u5f55\u8c03\u7528\u4fe1\u606f addFailed(invocation, this); // \u8fd4\u56de\u4e00\u4e2a\u7a7a\u7ed3\u679c\u7ed9\u670d\u52a1\u6d88\u8d39\u8005 return new RpcResult(); } } private void addFailed(Invocation invocation, AbstractClusterInvoker ? router) { if (retryFuture == null) { synchronized (this) { if (retryFuture == null) { // \u521b\u5efa\u5b9a\u65f6\u4efb\u52a1\uff0c\u6bcf\u96945\u79d2\u6267\u884c\u4e00\u6b21 retryFuture = scheduledExecutorService.scheduleWithFixedDelay(new Runnable() { @Override public void run() { try { // \u5bf9\u5931\u8d25\u7684\u8c03\u7528\u8fdb\u884c\u91cd\u8bd5 retryFailed(); } catch (Throwable t) { // \u5982\u679c\u53d1\u751f\u5f02\u5e38\uff0c\u4ec5\u6253\u5370\u5f02\u5e38\u65e5\u5fd7\uff0c\u4e0d\u629b\u51fa logger.error( Unexpected error occur at collect statistic , t); } } }, RETRY_FAILED_PERIOD, RETRY_FAILED_PERIOD, TimeUnit.MILLISECONDS); } } } // \u6dfb\u52a0 invocation \u548c invoker \u5230 failed \u4e2d failed.put(invocation, router); } void retryFailed() { if (failed.size() == 0) { return; } // \u904d\u5386 failed\uff0c\u5bf9\u5931\u8d25\u7684\u8c03\u7528\u8fdb\u884c\u91cd\u8bd5 for (Map.Entry Invocation, AbstractClusterInvoker ? entry : new HashMap Invocation, AbstractClusterInvoker ? (failed).entrySet()) { Invocation invocation = entry.getKey(); Invoker ? invoker = entry.getValue(); try { // \u518d\u6b21\u8fdb\u884c\u8c03\u7528 invoker.invoke(invocation); // \u8c03\u7528\u6210\u529f\u540e\uff0c\u4ece failed \u4e2d\u79fb\u9664 invoker failed.remove(invocation); } catch (Throwable e) { // \u4ec5\u6253\u5370\u5f02\u5e38\uff0c\u4e0d\u629b\u51fa logger.error( Failed retry to invoke method ... ); } } } } \u8fd9\u4e2a\u7c7b\u4e3b\u8981\u75313\u4e2a\u65b9\u6cd5\u7ec4\u6210\uff0c\u9996\u5148\u662f doInvoker\uff0c\u8be5\u65b9\u6cd5\u8d1f\u8d23\u521d\u6b21\u7684\u8fdc\u7a0b\u8c03\u7528\u3002\u82e5\u8fdc\u7a0b\u8c03\u7528\u5931\u8d25\uff0c\u5219\u901a\u8fc7 addFailed \u65b9\u6cd5\u5c06\u8c03\u7528\u4fe1\u606f\u5b58\u5165\u5230 failed \u4e2d\uff0c\u7b49\u5f85\u5b9a\u65f6\u91cd\u8bd5\u3002addFailed \u5728\u5f00\u59cb\u9636\u6bb5\u4f1a\u6839\u636e retryFuture \u4e3a\u7a7a\u4e0e\u5426\uff0c\u6765\u51b3\u5b9a\u662f\u5426\u5f00\u542f\u5b9a\u65f6\u4efb\u52a1\u3002retryFailed \u65b9\u6cd5\u5219\u662f\u5305\u542b\u4e86\u5931\u8d25\u91cd\u8bd5\u7684\u903b\u8f91\uff0c\u8be5\u65b9\u6cd5\u4f1a\u5bf9 failed \u8fdb\u884c\u904d\u5386\uff0c\u7136\u540e\u4f9d\u6b21\u5bf9 Invoker \u8fdb\u884c\u8c03\u7528\u3002\u8c03\u7528\u6210\u529f\u5219\u5c06 Invoker \u4ece failed \u4e2d\u79fb\u9664\uff0c\u8c03\u7528\u5931\u8d25\u5219\u5ffd\u7565\u5931\u8d25\u539f\u56e0\u3002 \u4ee5\u4e0a\u5c31\u662f FailbackClusterInvoker \u7684\u6267\u884c\u903b\u8f91\uff0c\u4e0d\u662f\u5f88\u590d\u6742\uff0c\u7ee7\u7eed\u5f80\u4e0b\u770b\u3002","title":"3.2.2 FailbackClusterInvoker"},{"location":"source_code_guide/cluster/#323-failfastclusterinvoker","text":"FailfastClusterInvoker \u53ea\u4f1a\u8fdb\u884c\u4e00\u6b21\u8c03\u7528\uff0c\u5931\u8d25\u540e\u7acb\u5373\u629b\u51fa\u5f02\u5e38\u3002\u9002\u7528\u4e8e\u5e42\u7b49\u64cd\u4f5c\uff0c\u6bd4\u5982\u65b0\u589e\u8bb0\u5f55\u3002\u6e90\u7801\u5982\u4e0b\uff1a public class FailfastClusterInvoker T extends AbstractClusterInvoker T { @Override public Result doInvoke(Invocation invocation, List Invoker T invokers, LoadBalance loadbalance) throws RpcException { checkInvokers(invokers, invocation); // \u9009\u62e9 Invoker Invoker T invoker = select(loadbalance, invocation, invokers, null); try { // \u8c03\u7528 Invoker return invoker.invoke(invocation); } catch (Throwable e) { if (e instanceof RpcException ((RpcException) e).isBiz()) { // \u629b\u51fa\u5f02\u5e38 throw (RpcException) e; } // \u629b\u51fa\u5f02\u5e38 throw new RpcException(..., Failfast invoke providers ... ); } } } \u5982\u4e0a\uff0c\u9996\u5148\u662f\u901a\u8fc7 select \u65b9\u6cd5\u9009\u62e9 Invoker\uff0c\u7136\u540e\u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528\u3002\u5982\u679c\u8c03\u7528\u5931\u8d25\uff0c\u5219\u7acb\u5373\u629b\u51fa\u5f02\u5e38\u3002FailfastClusterInvoker \u5c31\u5148\u5206\u6790\u5230\u8fd9\uff0c\u4e0b\u9762\u5206\u6790 FailsafeClusterInvoker\u3002","title":"3.2.3 FailfastClusterInvoker"},{"location":"source_code_guide/cluster/#324-failsafeclusterinvoker","text":"FailsafeClusterInvoker \u662f\u4e00\u79cd\u5931\u8d25\u5b89\u5168\u7684 Cluster Invoker\u3002\u6240\u8c13\u7684\u5931\u8d25\u5b89\u5168\u662f\u6307\uff0c\u5f53\u8c03\u7528\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5f02\u5e38\u65f6\uff0cFailsafeClusterInvoker \u4ec5\u4f1a\u6253\u5370\u5f02\u5e38\uff0c\u800c\u4e0d\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\u9002\u7528\u4e8e\u5199\u5165\u5ba1\u8ba1\u65e5\u5fd7\u7b49\u64cd\u4f5c\u3002\u4e0b\u9762\u5206\u6790\u6e90\u7801\u3002 public class FailsafeClusterInvoker T extends AbstractClusterInvoker T { @Override public Result doInvoke(Invocation invocation, List Invoker T invokers, LoadBalance loadbalance) throws RpcException { try { checkInvokers(invokers, invocation); // \u9009\u62e9 Invoker Invoker T invoker = select(loadbalance, invocation, invokers, null); // \u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528 return invoker.invoke(invocation); } catch (Throwable e) { // \u6253\u5370\u9519\u8bef\u65e5\u5fd7\uff0c\u4f46\u4e0d\u629b\u51fa logger.error( Failsafe ignore exception: + e.getMessage(), e); // \u8fd4\u56de\u7a7a\u7ed3\u679c\u5ffd\u7565\u9519\u8bef return new RpcResult(); } } } FailsafeClusterInvoker \u7684\u903b\u8f91\u548c FailfastClusterInvoker \u7684\u903b\u8f91\u4e00\u6837\u7b80\u5355\uff0c\u65e0\u9700\u8fc7\u591a\u8bf4\u660e\u3002\u7ee7\u7eed\u5411\u4e0b\u5206\u6790\u3002","title":"3.2.4 FailsafeClusterInvoker"},{"location":"source_code_guide/cluster/#325-forkingclusterinvoker","text":"ForkingClusterInvoker \u4f1a\u5728\u8fd0\u884c\u65f6\u901a\u8fc7\u7ebf\u7a0b\u6c60\u521b\u5efa\u591a\u4e2a\u7ebf\u7a0b\uff0c\u5e76\u53d1\u8c03\u7528\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u3002\u53ea\u8981\u6709\u4e00\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u6210\u529f\u8fd4\u56de\u4e86\u7ed3\u679c\uff0cdoInvoke \u65b9\u6cd5\u5c31\u4f1a\u7acb\u5373\u7ed3\u675f\u8fd0\u884c\u3002ForkingClusterInvoker \u7684\u5e94\u7528\u573a\u666f\u662f\u5728\u4e00\u4e9b\u5bf9\u5b9e\u65f6\u6027\u8981\u6c42\u6bd4\u8f83\u9ad8 \u8bfb\u64cd\u4f5c \uff08\u6ce8\u610f\u662f\u8bfb\u64cd\u4f5c\uff0c\u5e76\u884c\u5199\u64cd\u4f5c\u53ef\u80fd\u4e0d\u5b89\u5168\uff09\u4e0b\u4f7f\u7528\uff0c\u4f46\u8fd9\u5c06\u4f1a\u8017\u8d39\u66f4\u591a\u7684\u8d44\u6e90\u3002\u4e0b\u9762\u6765\u770b\u8be5\u7c7b\u7684\u5b9e\u73b0\u3002 public class ForkingClusterInvoker T extends AbstractClusterInvoker T { private final ExecutorService executor = Executors.newCachedThreadPool( new NamedInternalThreadFactory( forking-cluster-timer , true)); @Override public Result doInvoke(final Invocation invocation, List Invoker T invokers, LoadBalance loadbalance) throws RpcException { try { checkInvokers(invokers, invocation); final List Invoker T selected; // \u83b7\u53d6 forks \u914d\u7f6e final int forks = getUrl().getParameter(Constants.FORKS_KEY, Constants.DEFAULT_FORKS); // \u83b7\u53d6\u8d85\u65f6\u914d\u7f6e final int timeout = getUrl().getParameter(Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT); // \u5982\u679c forks \u914d\u7f6e\u4e0d\u5408\u7406\uff0c\u5219\u76f4\u63a5\u5c06 invokers \u8d4b\u503c\u7ed9 selected if (forks = 0 || forks = invokers.size()) { selected = invokers; } else { selected = new ArrayList Invoker T (); // \u5faa\u73af\u9009\u51fa forks \u4e2a Invoker\uff0c\u5e76\u6dfb\u52a0\u5230 selected \u4e2d for (int i = 0; i forks; i++) { // \u9009\u62e9 Invoker Invoker T invoker = select(loadbalance, invocation, invokers, selected); if (!selected.contains(invoker)) { selected.add(invoker); } } } // ----------------------\u2728 \u5206\u5272\u7ebf1 \u2728---------------------- // RpcContext.getContext().setInvokers((List) selected); final AtomicInteger count = new AtomicInteger(); final BlockingQueue Object ref = new LinkedBlockingQueue Object (); // \u904d\u5386 selected \u5217\u8868 for (final Invoker T invoker : selected) { // \u4e3a\u6bcf\u4e2a Invoker \u521b\u5efa\u4e00\u4e2a\u6267\u884c\u7ebf\u7a0b executor.execute(new Runnable() { @Override public void run() { try { // \u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528 Result result = invoker.invoke(invocation); // \u5c06\u7ed3\u679c\u5b58\u5230\u963b\u585e\u961f\u5217\u4e2d ref.offer(result); } catch (Throwable e) { int value = count.incrementAndGet(); // \u4ec5\u5728 value \u5927\u4e8e\u7b49\u4e8e selected.size() \u65f6\uff0c\u624d\u5c06\u5f02\u5e38\u5bf9\u8c61 // \u653e\u5165\u963b\u585e\u961f\u5217\u4e2d\uff0c\u8bf7\u5927\u5bb6\u601d\u8003\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u505a\u3002 if (value = selected.size()) { // \u5c06\u5f02\u5e38\u5bf9\u8c61\u5b58\u5165\u5230\u963b\u585e\u961f\u5217\u4e2d ref.offer(e); } } } }); } // ----------------------\u2728 \u5206\u5272\u7ebf2 \u2728---------------------- // try { // \u4ece\u963b\u585e\u961f\u5217\u4e2d\u53d6\u51fa\u8fdc\u7a0b\u8c03\u7528\u7ed3\u679c Object ret = ref.poll(timeout, TimeUnit.MILLISECONDS); // \u5982\u679c\u7ed3\u679c\u7c7b\u578b\u4e3a Throwable\uff0c\u5219\u629b\u51fa\u5f02\u5e38 if (ret instanceof Throwable) { Throwable e = (Throwable) ret; throw new RpcException(..., Failed to forking invoke provider ... ); } // \u8fd4\u56de\u7ed3\u679c return (Result) ret; } catch (InterruptedException e) { throw new RpcException( Failed to forking invoke provider ... ); } } finally { RpcContext.getContext().clearAttachments(); } } } ForkingClusterInvoker \u7684 doInvoker \u65b9\u6cd5\u6bd4\u8f83\u957f\uff0c\u8fd9\u91cc\u901a\u8fc7\u4e24\u4e2a\u5206\u5272\u7ebf\u5c06\u6574\u4e2a\u65b9\u6cd5\u5212\u5206\u4e3a\u4e09\u4e2a\u903b\u8f91\u5757\u3002\u4ece\u65b9\u6cd5\u5f00\u59cb\u5230\u5206\u5272\u7ebf1\u4e4b\u95f4\u7684\u4ee3\u7801\u4e3b\u8981\u662f\u7528\u4e8e\u9009\u51fa forks \u4e2a Invoker\uff0c\u4e3a\u63a5\u4e0b\u6765\u7684\u5e76\u53d1\u8c03\u7528\u63d0\u4f9b\u8f93\u5165\u3002\u5206\u5272\u7ebf1\u548c\u5206\u5272\u7ebf2\u4e4b\u95f4\u7684\u903b\u8f91\u901a\u8fc7\u7ebf\u7a0b\u6c60\u5e76\u53d1\u8c03\u7528\u591a\u4e2a Invoker\uff0c\u5e76\u5c06\u7ed3\u679c\u5b58\u50a8\u5728\u963b\u585e\u961f\u5217\u4e2d\u3002\u5206\u5272\u7ebf2\u5230\u65b9\u6cd5\u7ed3\u5c3e\u4e4b\u95f4\u7684\u903b\u8f91\u4e3b\u8981\u7528\u4e8e\u4ece\u963b\u585e\u961f\u5217\u4e2d\u83b7\u53d6\u8fd4\u56de\u7ed3\u679c\uff0c\u5e76\u5bf9\u8fd4\u56de\u7ed3\u679c\u7c7b\u578b\u8fdb\u884c\u5224\u65ad\u3002\u5982\u679c\u4e3a\u5f02\u5e38\u7c7b\u578b\uff0c\u5219\u76f4\u63a5\u629b\u51fa\uff0c\u5426\u5219\u8fd4\u56de\u3002 \u4ee5\u4e0a\u5c31\u662fForkingClusterInvoker \u7684 doInvoker \u65b9\u6cd5\u5927\u81f4\u8fc7\u7a0b\u3002\u6211\u4eec\u5728\u5206\u5272\u7ebf1\u548c\u5206\u5272\u7ebf2\u4e4b\u95f4\u7684\u4ee3\u7801\u4e0a\u7559\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u95ee\u9898\u662f\u8fd9\u6837\u7684\uff1a\u4e3a\u4ec0\u4e48\u8981\u5728 value = selected.size() \u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u5c06\u5f02\u5e38\u5bf9\u8c61\u6dfb\u52a0\u5230\u963b\u585e\u961f\u5217\u4e2d\uff1f\u8fd9\u91cc\u6765\u89e3\u7b54\u4e00\u4e0b\u3002\u539f\u56e0\u662f\u8fd9\u6837\u7684\uff0c\u5728\u5e76\u884c\u8c03\u7528\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u60c5\u51b5\u4e0b\uff0c\u53ea\u8981\u6709\u4e00\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u80fd\u591f\u6210\u529f\u8fd4\u56de\u7ed3\u679c\uff0c\u800c\u5176\u4ed6\u5168\u90e8\u5931\u8d25\u3002\u6b64\u65f6 ForkingClusterInvoker \u4ecd\u5e94\u8be5\u8fd4\u56de\u6210\u529f\u7684\u7ed3\u679c\uff0c\u800c\u975e\u629b\u51fa\u5f02\u5e38\u3002\u5728 value = selected.size() \u65f6\u5c06\u5f02\u5e38\u5bf9\u8c61\u653e\u5165\u963b\u585e\u961f\u5217\u4e2d\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u5f02\u5e38\u5bf9\u8c61\u4e0d\u4f1a\u51fa\u73b0\u5728\u6b63\u5e38\u7ed3\u679c\u7684\u524d\u9762\uff0c\u8fd9\u6837\u53ef\u4ece\u963b\u585e\u961f\u5217\u4e2d\u4f18\u5148\u53d6\u51fa\u6b63\u5e38\u7684\u7ed3\u679c\u3002 \u5173\u4e8e ForkingClusterInvoker \u5c31\u5148\u5206\u6790\u5230\u8fd9\uff0c\u63a5\u4e0b\u6765\u5206\u6790\u6700\u540e\u4e00\u4e2a Cluster Invoker\u3002","title":"3.2.5 ForkingClusterInvoker"},{"location":"source_code_guide/cluster/#326-broadcastclusterinvoker","text":"\u672c\u7ae0\u7684\u6700\u540e\uff0c\u6211\u4eec\u518d\u6765\u770b\u4e00\u4e0b BroadcastClusterInvoker\u3002BroadcastClusterInvoker \u4f1a\u9010\u4e2a\u8c03\u7528\u6bcf\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u5982\u679c\u5176\u4e2d\u4e00\u53f0\u62a5\u9519\uff0c\u5728\u5faa\u73af\u8c03\u7528\u7ed3\u675f\u540e\uff0cBroadcastClusterInvoker \u4f1a\u629b\u51fa\u5f02\u5e38\u3002\u8be5\u7c7b\u901a\u5e38\u7528\u4e8e\u901a\u77e5\u6240\u6709\u63d0\u4f9b\u8005\u66f4\u65b0\u7f13\u5b58\u6216\u65e5\u5fd7\u7b49\u672c\u5730\u8d44\u6e90\u4fe1\u606f\u3002\u6e90\u7801\u5982\u4e0b\u3002 public class BroadcastClusterInvoker T extends AbstractClusterInvoker T { @Override public Result doInvoke(final Invocation invocation, List Invoker T invokers, LoadBalance loadbalance) throws RpcException { checkInvokers(invokers, invocation); RpcContext.getContext().setInvokers((List) invokers); RpcException exception = null; Result result = null; // \u904d\u5386 Invoker \u5217\u8868\uff0c\u9010\u4e2a\u8c03\u7528 for (Invoker T invoker : invokers) { try { // \u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528 result = invoker.invoke(invocation); } catch (RpcException e) { exception = e; logger.warn(e.getMessage(), e); } catch (Throwable e) { exception = new RpcException(e.getMessage(), e); logger.warn(e.getMessage(), e); } } // exception \u4e0d\u4e3a\u7a7a\uff0c\u5219\u629b\u51fa\u5f02\u5e38 if (exception != null) { throw exception; } return result; } } \u4ee5\u4e0a\u5c31\u662f BroadcastClusterInvoker \u7684\u4ee3\u7801\uff0c\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002","title":"3.2.6 BroadcastClusterInvoker"},{"location":"source_code_guide/cluster/#4","text":"\u672c\u7bc7\u6587\u7ae0\u8be6\u7ec6\u5206\u6790\u4e86\u96c6\u7fa4\u5bb9\u9519\u7684\u51e0\u79cd\u5b9e\u73b0\u65b9\u5f0f\u3002\u96c6\u7fa4\u5bb9\u9519\u5bf9\u4e8e Dubbo \u6846\u67b6\u6765\u8bf4\uff0c\u662f\u5f88\u91cd\u8981\u7684\u903b\u8f91\u3002\u96c6\u7fa4\u6a21\u5757\u5904\u4e8e\u670d\u52a1\u63d0\u4f9b\u8005\u548c\u6d88\u8d39\u8005\u4e4b\u95f4\uff0c\u5bf9\u4e8e\u670d\u52a1\u6d88\u8d39\u8005\u6765\u8bf4\uff0c\u96c6\u7fa4\u53ef\u5411\u5176\u5c4f\u853d\u670d\u52a1\u63d0\u4f9b\u8005\u96c6\u7fa4\u7684\u60c5\u51b5\uff0c\u4f7f\u5176\u80fd\u591f\u4e13\u5fc3\u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u901a\u8fc7\u96c6\u7fa4\u6a21\u5757\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5bf9\u670d\u52a1\u4e4b\u95f4\u7684\u8c03\u7528\u94fe\u8def\u8fdb\u884c\u7f16\u6392\u4f18\u5316\uff0c\u6cbb\u7406\u670d\u52a1\u3002\u603b\u7684\u6765\u8bf4\uff0c\u5bf9\u4e8e Dubbo \u800c\u8a00\uff0c\u96c6\u7fa4\u5bb9\u9519\u76f8\u5173\u903b\u8f91\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002\u60f3\u8981\u5bf9 Dubbo \u6709\u6bd4\u8f83\u6df1\u7684\u7406\u89e3\uff0c\u96c6\u7fa4\u5bb9\u9519\u662f\u5fc5\u987b\u8981\u638c\u63e1\u7684\u3002 \u5173\u4e8e\u96c6\u7fa4\u6a21\u5757\u5c31\u5148\u5206\u6790\u5230\u8fd9\uff0c\u611f\u8c22\u9605\u8bfb\u3002","title":"4.\u603b\u7ed3"},{"location":"source_code_guide/directory/","text":"1. \u7b80\u4ecb \u672c\u7bc7\u6587\u7ae0\uff0c\u5c06\u5f00\u59cb\u5206\u6790 Dubbo \u96c6\u7fa4\u5bb9\u9519\u65b9\u9762\u7684\u6e90\u7801\u3002\u96c6\u7fa4\u5bb9\u9519\u6e90\u7801\u5305\u542b\u56db\u4e2a\u90e8\u5206\uff0c\u5206\u522b\u662f\u670d\u52a1\u76ee\u5f55 Directory\u3001\u670d\u52a1\u8def\u7531 Router\u3001\u96c6\u7fa4 Cluster \u548c\u8d1f\u8f7d\u5747\u8861 LoadBalance\u3002\u8fd9\u51e0\u4e2a\u90e8\u5206\u7684\u6e90\u7801\u903b\u8f91\u76f8\u5bf9\u6bd4\u8f83\u72ec\u7acb\uff0c\u6211\u4eec\u5c06\u4f1a\u5206\u56db\u7bc7\u6587\u7ae0\u8fdb\u884c\u5206\u6790\u3002\u672c\u7bc7\u6587\u7ae0\u4f5c\u4e3a\u96c6\u7fa4\u5bb9\u9519\u7684\u5f00\u7bc7\u6587\u7ae0\uff0c\u5c06\u548c\u5927\u5bb6\u4e00\u8d77\u5206\u6790\u670d\u52a1\u76ee\u5f55\u76f8\u5173\u7684\u6e90\u7801\u3002\u5728\u8fdb\u884c\u6df1\u5165\u5206\u6790\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u4e86\u89e3\u4e00\u4e0b\u670d\u52a1\u76ee\u5f55\u662f\u4ec0\u4e48\u3002\u670d\u52a1\u76ee\u5f55\u4e2d\u5b58\u50a8\u4e86\u4e00\u4e9b\u548c\u670d\u52a1\u63d0\u4f9b\u8005\u6709\u5173\u7684\u4fe1\u606f\uff0c\u901a\u8fc7\u670d\u52a1\u76ee\u5f55\uff0c\u670d\u52a1\u6d88\u8d39\u8005\u53ef\u83b7\u53d6\u5230\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u4fe1\u606f\uff0c\u6bd4\u5982 ip\u3001\u7aef\u53e3\u3001\u670d\u52a1\u534f\u8bae\u7b49\u3002\u901a\u8fc7\u8fd9\u4e9b\u4fe1\u606f\uff0c\u670d\u52a1\u6d88\u8d39\u8005\u5c31\u53ef\u901a\u8fc7 Netty \u7b49\u5ba2\u6237\u7aef\u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528\u3002\u5728\u4e00\u4e2a\u670d\u52a1\u96c6\u7fa4\u4e2d\uff0c\u670d\u52a1\u63d0\u4f9b\u8005\u6570\u91cf\u5e76\u4e0d\u662f\u4e00\u6210\u4e0d\u53d8\u7684\uff0c\u5982\u679c\u96c6\u7fa4\u4e2d\u65b0\u589e\u4e86\u4e00\u53f0\u673a\u5668\uff0c\u76f8\u5e94\u5730\u5728\u670d\u52a1\u76ee\u5f55\u4e2d\u5c31\u8981\u65b0\u589e\u4e00\u6761\u670d\u52a1\u63d0\u4f9b\u8005\u8bb0\u5f55\u3002\u6216\u8005\uff0c\u5982\u679c\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u914d\u7f6e\u4fee\u6539\u4e86\uff0c\u670d\u52a1\u76ee\u5f55\u4e2d\u7684\u8bb0\u5f55\u4e5f\u8981\u505a\u76f8\u5e94\u7684\u66f4\u65b0\u3002\u5982\u679c\u8fd9\u6837\u8bf4\uff0c\u670d\u52a1\u76ee\u5f55\u548c\u6ce8\u518c\u4e2d\u5fc3\u7684\u529f\u80fd\u4e0d\u5c31\u96f7\u540c\u4e86\u5417\uff1f\u786e\u5b9e\u5982\u6b64\uff0c\u8fd9\u91cc\u8fd9\u4e48\u8bf4\u662f\u4e3a\u4e86\u65b9\u4fbf\u5927\u5bb6\u7406\u89e3\u3002\u5b9e\u9645\u4e0a\u670d\u52a1\u76ee\u5f55\u5728\u83b7\u53d6\u6ce8\u518c\u4e2d\u5fc3\u7684\u670d\u52a1\u914d\u7f6e\u4fe1\u606f\u540e\uff0c\u4f1a\u4e3a\u6bcf\u6761\u914d\u7f6e\u4fe1\u606f\u751f\u6210\u4e00\u4e2a Invoker \u5bf9\u8c61\uff0c\u5e76\u628a\u8fd9\u4e2a Invoker \u5bf9\u8c61\u5b58\u50a8\u8d77\u6765\uff0c\u8fd9\u4e2a Invoker \u624d\u662f\u670d\u52a1\u76ee\u5f55\u6700\u7ec8\u6301\u6709\u7684\u5bf9\u8c61\u3002Invoker \u6709\u4ec0\u4e48\u7528\u5462\uff1f\u770b\u540d\u5b57\u5c31\u77e5\u9053\u4e86\uff0c\u8fd9\u662f\u4e00\u4e2a\u5177\u6709\u8fdc\u7a0b\u8c03\u7528\u529f\u80fd\u7684\u5bf9\u8c61\u3002\u8bb2\u5230\u8fd9\u5927\u5bb6\u5e94\u8be5\u77e5\u9053\u4e86\u4ec0\u4e48\u662f\u670d\u52a1\u76ee\u5f55\u4e86\uff0c\u5b83\u53ef\u4ee5\u770b\u505a\u662f Invoker \u96c6\u5408\uff0c\u4e14\u8fd9\u4e2a\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u4f1a\u968f\u6ce8\u518c\u4e2d\u5fc3\u7684\u53d8\u5316\u800c\u8fdb\u884c\u52a8\u6001\u8c03\u6574\u3002 \u5173\u4e8e\u670d\u52a1\u76ee\u5f55\u8fd9\u91cc\u5c31\u5148\u4ecb\u7ecd\u8fd9\u4e9b\uff0c\u5927\u5bb6\u5148\u6709\u4e2a\u5927\u81f4\u5370\u8c61\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u901a\u8fc7\u7ee7\u627f\u4f53\u7cfb\u56fe\u6765\u4e86\u89e3\u4e00\u4e0b\u670d\u52a1\u76ee\u5f55\u7684\u5bb6\u65cf\u6210\u5458\u90fd\u6709\u54ea\u4e9b\u3002 2. \u7ee7\u627f\u4f53\u7cfb \u670d\u52a1\u76ee\u5f55\u76ee\u524d\u5185\u7f6e\u7684\u5b9e\u73b0\u6709\u4e24\u4e2a\uff0c\u5206\u522b\u4e3a StaticDirectory \u548c RegistryDirectory\uff0c\u5b83\u4eec\u5747\u662f AbstractDirectory \u7684\u5b50\u7c7b\u3002AbstractDirectory \u5b9e\u73b0\u4e86 Directory \u63a5\u53e3\uff0c\u8fd9\u4e2a\u63a5\u53e3\u5305\u542b\u4e86\u4e00\u4e2a\u91cd\u8981\u7684\u65b9\u6cd5\u5b9a\u4e49\uff0c\u5373 list(Invocation)\uff0c\u7528\u4e8e\u5217\u4e3e Invoker\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u4ed6\u4eec\u7684\u7ee7\u627f\u4f53\u7cfb\u56fe\u3002 \u5982\u4e0a\uff0cDirectory \u7ee7\u627f\u81ea Node \u63a5\u53e3\uff0cNode \u8fd9\u4e2a\u63a5\u53e3\u7ee7\u627f\u8005\u6bd4\u8f83\u591a\uff0c\u50cf Registry\u3001Monitor\u3001Invoker \u7b49\u5747\u7ee7\u627f\u4e86\u8fd9\u4e2a\u63a5\u53e3\u3002\u8fd9\u4e2a\u63a5\u53e3\u5305\u542b\u4e86\u4e00\u4e2a\u83b7\u53d6\u914d\u7f6e\u4fe1\u606f\u7684\u65b9\u6cd5 getUrl\uff0c\u5b9e\u73b0\u8be5\u63a5\u53e3\u7684\u7c7b\u53ef\u4ee5\u5411\u5916\u63d0\u4f9b\u914d\u7f6e\u4fe1\u606f\u3002\u53e6\u5916\uff0c\u5927\u5bb6\u6ce8\u610f\u770b RegistryDirectory \u5b9e\u73b0\u4e86 NotifyListener \u63a5\u53e3\uff0c\u5f53\u6ce8\u518c\u4e2d\u5fc3\u8282\u70b9\u4fe1\u606f\u53d1\u751f\u53d8\u5316\u540e\uff0cRegistryDirectory \u53ef\u4ee5\u901a\u8fc7\u6b64\u63a5\u53e3\u65b9\u6cd5\u5f97\u5230\u53d8\u66f4\u4fe1\u606f\uff0c\u5e76\u6839\u636e\u53d8\u66f4\u4fe1\u606f\u52a8\u6001\u8c03\u6574\u5185\u90e8 Invoker \u5217\u8868\u3002 3. \u6e90\u7801\u5206\u6790 \u672c\u7ae0\u5c06\u5206\u6790 AbstractDirectory \u548c\u5b83\u4e24\u4e2a\u5b50\u7c7b\u7684\u6e90\u7801\u3002AbstractDirectory \u5c01\u88c5\u4e86 Invoker \u5217\u4e3e\u6d41\u7a0b\uff0c\u5177\u4f53\u7684\u5217\u4e3e\u903b\u8f91\u5219\u7531\u5b50\u7c7b\u5b9e\u73b0\uff0c\u8fd9\u662f\u5178\u578b\u7684\u6a21\u677f\u6a21\u5f0f\u3002\u6240\u4ee5\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e0b AbstractDirectory \u7684\u6e90\u7801\u3002 public List Invoker T list(Invocation invocation) throws RpcException { if (destroyed) { throw new RpcException( Directory already destroyed... ); } // \u8c03\u7528 doList \u65b9\u6cd5\u5217\u4e3e Invoker\uff0cdoList \u662f\u6a21\u677f\u65b9\u6cd5\uff0c\u7531\u5b50\u7c7b\u5b9e\u73b0 List Invoker T invokers = doList(invocation); // \u83b7\u53d6\u8def\u7531 Router \u5217\u8868 List Router localRouters = this.routers; if (localRouters != null !localRouters.isEmpty()) { for (Router router : localRouters) { try { // \u83b7\u53d6 runtime \u53c2\u6570\uff0c\u5e76\u6839\u636e\u53c2\u6570\u51b3\u5b9a\u662f\u5426\u8fdb\u884c\u8def\u7531 if (router.getUrl() == null || router.getUrl().getParameter(Constants.RUNTIME_KEY, false)) { // \u8fdb\u884c\u670d\u52a1\u8def\u7531 invokers = router.route(invokers, getConsumerUrl(), invocation); } } catch (Throwable t) { logger.error( Failed to execute router: ... ); } } } return invokers; } // \u6a21\u677f\u65b9\u6cd5\uff0c\u7531\u5b50\u7c7b\u5b9e\u73b0 protected abstract List Invoker T doList(Invocation invocation) throws RpcException; \u4e0a\u9762\u5c31\u662f AbstractDirectory \u7684 list \u65b9\u6cd5\u6e90\u7801\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5c01\u88c5\u4e86 Invoker \u7684\u5217\u4e3e\u8fc7\u7a0b\u3002\u5982\u4e0b\uff1a \u8c03\u7528 doList \u83b7\u53d6 Invoker \u5217\u8868 \u6839\u636e Router \u7684 getUrl \u8fd4\u56de\u503c\u4e3a\u7a7a\u4e0e\u5426\uff0c\u4ee5\u53ca runtime \u53c2\u6570\u51b3\u5b9a\u662f\u5426\u8fdb\u884c\u670d\u52a1\u8def\u7531 \u4ee5\u4e0a\u6b65\u9aa4\u4e2d\uff0cdoList \u662f\u6a21\u677f\u65b9\u6cd5\uff0c\u9700\u7531\u5b50\u7c7b\u5b9e\u73b0\u3002Router \u7684 runtime \u53c2\u6570\u8fd9\u91cc\u7b80\u5355\u8bf4\u660e\u4e00\u4e0b\uff0c\u8fd9\u4e2a\u53c2\u6570\u51b3\u5b9a\u4e86\u662f\u5426\u5728\u6bcf\u6b21\u8c03\u7528\u670d\u52a1\u65f6\u90fd\u6267\u884c\u8def\u7531\u89c4\u5219\u3002\u5982\u679c runtime \u4e3a true\uff0c\u90a3\u4e48\u6bcf\u6b21\u8c03\u7528\u670d\u52a1\u524d\uff0c\u90fd\u9700\u8981\u8fdb\u884c\u670d\u52a1\u8def\u7531\u3002\u8fd9\u4e2a\u5bf9\u6027\u80fd\u9020\u6210\u5f71\u54cd\uff0c\u914d\u7f6e\u65f6\u9700\u8981\u6ce8\u610f\u3002 \u5173\u4e8e AbstractDirectory \u5c31\u5206\u6790\u8fd9\u4e48\u591a\uff0c\u4e0b\u9762\u5f00\u59cb\u5206\u6790\u5b50\u7c7b\u7684\u6e90\u7801\u3002 3.1 StaticDirectory StaticDirectory \u5373\u9759\u6001\u670d\u52a1\u76ee\u5f55\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5b83\u5185\u90e8\u5b58\u653e\u7684 Invoker \u662f\u4e0d\u4f1a\u53d8\u52a8\u7684\u3002\u6240\u4ee5\uff0c\u7406\u8bba\u4e0a\u5b83\u548c\u4e0d\u53ef\u53d8 List \u7684\u529f\u80fd\u5f88\u76f8\u4f3c\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u7c7b\u7684\u5b9e\u73b0\u3002 public class StaticDirectory T extends AbstractDirectory T { // Invoker \u5217\u8868 private final List Invoker T invokers; // \u7701\u7565\u6784\u9020\u65b9\u6cd5 @Override public Class T getInterface() { // \u83b7\u53d6\u63a5\u53e3\u7c7b return invokers.get(0).getInterface(); } // \u68c0\u6d4b\u670d\u52a1\u76ee\u5f55\u662f\u5426\u53ef\u7528 @Override public boolean isAvailable() { if (isDestroyed()) { return false; } for (Invoker T invoker : invokers) { if (invoker.isAvailable()) { // \u53ea\u8981\u6709\u4e00\u4e2a Invoker \u662f\u53ef\u7528\u7684\uff0c\u5c31\u8ba4\u4e3a\u5f53\u524d\u76ee\u5f55\u662f\u53ef\u7528\u7684 return true; } } return false; } @Override public void destroy() { if (isDestroyed()) { return; } // \u8c03\u7528\u7236\u7c7b\u9500\u6bc1\u903b\u8f91 super.destroy(); // \u904d\u5386 Invoker \u5217\u8868\uff0c\u5e76\u6267\u884c\u76f8\u5e94\u7684\u9500\u6bc1\u903b\u8f91 for (Invoker T invoker : invokers) { invoker.destroy(); } invokers.clear(); } @Override protected List Invoker T doList(Invocation invocation) throws RpcException { // \u5217\u4e3e Inovker\uff0c\u4e5f\u5c31\u662f\u76f4\u63a5\u8fd4\u56de invokers \u6210\u5458\u53d8\u91cf return invokers; } } \u4ee5\u4e0a\u5c31\u662f StaticDirectory \u7684\u4ee3\u7801\u903b\u8f91\uff0c\u5f88\u7b80\u5355\uff0c\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002\u4e0b\u9762\u6765\u770b\u770b RegistryDirectory\uff0c\u8fd9\u4e2a\u7c7b\u7684\u903b\u8f91\u6bd4\u8f83\u590d\u6742\u3002 3.2 RegistryDirectory RegistryDirectory \u662f\u4e00\u79cd\u52a8\u6001\u670d\u52a1\u76ee\u5f55\uff0c\u5b9e\u73b0\u4e86 NotifyListener \u63a5\u53e3\u3002\u5f53\u6ce8\u518c\u4e2d\u5fc3\u670d\u52a1\u914d\u7f6e\u53d1\u751f\u53d8\u5316\u540e\uff0cRegistryDirectory \u53ef\u6536\u5230\u4e0e\u5f53\u524d\u670d\u52a1\u76f8\u5173\u7684\u53d8\u5316\u3002\u6536\u5230\u53d8\u66f4\u901a\u77e5\u540e\uff0cRegistryDirectory \u53ef\u6839\u636e\u914d\u7f6e\u53d8\u66f4\u4fe1\u606f\u5237\u65b0 Invoker \u5217\u8868\u3002RegistryDirectory \u4e2d\u6709\u51e0\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u903b\u8f91\uff0c\u7b2c\u4e00\u662f Invoker \u7684\u5217\u4e3e\u903b\u8f91\uff0c\u7b2c\u4e8c\u662f\u63a5\u6536\u670d\u52a1\u914d\u7f6e\u53d8\u66f4\u7684\u903b\u8f91\uff0c\u7b2c\u4e09\u662f Invoker \u5217\u8868\u7684\u5237\u65b0\u903b\u8f91\u3002\u63a5\u4e0b\u6765\u6309\u987a\u5e8f\u5bf9\u8fd9\u4e09\u5757\u903b\u8f91\u3002 3.2.1 \u5217\u4e3e Invoker Invoker \u5217\u4e3e\u903b\u8f91\u5c01\u88c5\u5728 doList \u65b9\u6cd5\u4e2d\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a public List Invoker T doList(Invocation invocation) { if (forbidden) { // \u670d\u52a1\u63d0\u4f9b\u8005\u5173\u95ed\u6216\u7981\u7528\u4e86\u670d\u52a1\uff0c\u6b64\u65f6\u629b\u51fa No provider \u5f02\u5e38 throw new RpcException(RpcException.FORBIDDEN_EXCEPTION, No provider available from registry ... ); } List Invoker T invokers = null; // \u83b7\u53d6 Invoker \u672c\u5730\u7f13\u5b58 Map String, List Invoker T localMethodInvokerMap = this.methodInvokerMap; if (localMethodInvokerMap != null localMethodInvokerMap.size() 0) { // \u83b7\u53d6\u65b9\u6cd5\u540d\u548c\u53c2\u6570\u5217\u8868 String methodName = RpcUtils.getMethodName(invocation); Object[] args = RpcUtils.getArguments(invocation); // \u68c0\u6d4b\u53c2\u6570\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5426\u4e3a String \u6216 enum \u7c7b\u578b if (args != null args.length 0 args[0] != null (args[0] instanceof String || args[0].getClass().isEnum())) { // \u901a\u8fc7 \u65b9\u6cd5\u540d + \u7b2c\u4e00\u4e2a\u53c2\u6570\u540d\u79f0 \u67e5\u8be2 Invoker \u5217\u8868\uff0c\u5177\u4f53\u7684\u4f7f\u7528\u573a\u666f\u6682\u65f6\u6ca1\u60f3\u5230 invokers = localMethodInvokerMap.get(methodName + . + args[0]); } if (invokers == null) { // \u901a\u8fc7\u65b9\u6cd5\u540d\u83b7\u53d6 Invoker \u5217\u8868 invokers = localMethodInvokerMap.get(methodName); } if (invokers == null) { // \u901a\u8fc7\u661f\u53f7 * \u83b7\u53d6 Invoker \u5217\u8868 invokers = localMethodInvokerMap.get(Constants.ANY_VALUE); } // \u5197\u4f59\u903b\u8f91\uff0cpull request #2861 \u79fb\u9664\u4e86\u4e0b\u9762\u7684 if \u5206\u652f\u4ee3\u7801 if (invokers == null) { Iterator List Invoker T iterator = localMethodInvokerMap.values().iterator(); if (iterator.hasNext()) { invokers = iterator.next(); } } } // \u8fd4\u56de Invoker \u5217\u8868 return invokers == null ? new ArrayList Invoker T (0) : invokers; } \u4ee5\u4e0a\u4ee3\u7801\u8fdb\u884c\u591a\u6b21\u5c1d\u8bd5\uff0c\u4ee5\u671f\u4ece localMethodInvokerMap \u4e2d\u83b7\u53d6\u5230 Invoker \u5217\u8868\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u666e\u901a\u7684\u8c03\u7528\u53ef\u901a\u8fc7\u65b9\u6cd5\u540d\u83b7\u53d6\u5230\u5bf9\u5e94\u7684 Invoker \u5217\u8868\uff0c\u6cdb\u5316\u8c03\u7528\u53ef\u901a\u8fc7 * \u83b7\u53d6\u5230 Invoker \u5217\u8868\u3002localMethodInvokerMap \u6e90\u81ea RegistryDirectory \u7c7b\u7684\u6210\u5458\u53d8\u91cf methodInvokerMap\u3002doList \u65b9\u6cd5\u53ef\u4ee5\u770b\u505a\u662f\u5bf9 methodInvokerMap \u53d8\u91cf\u7684\u8bfb\u64cd\u4f5c\uff0c\u81f3\u4e8e\u5bf9 methodInvokerMap \u53d8\u91cf\u7684\u5199\u64cd\u4f5c\uff0c\u4e0b\u4e00\u8282\u8fdb\u884c\u5206\u6790\u3002 3.2.2 \u63a5\u6536\u670d\u52a1\u53d8\u66f4\u901a\u77e5 RegistryDirectory \u662f\u4e00\u4e2a\u52a8\u6001\u670d\u52a1\u76ee\u5f55\uff0c\u4f1a\u968f\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e\u7684\u53d8\u5316\u8fdb\u884c\u52a8\u6001\u8c03\u6574\u3002\u56e0\u6b64 RegistryDirectory \u5b9e\u73b0\u4e86 NotifyListener \u63a5\u53e3\uff0c\u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\u83b7\u53d6\u6ce8\u518c\u4e2d\u5fc3\u53d8\u66f4\u901a\u77e5\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u5177\u4f53\u7684\u903b\u8f91\u3002 public synchronized void notify(List URL urls) { // \u5b9a\u4e49\u4e09\u4e2a\u96c6\u5408\uff0c\u5206\u522b\u7528\u4e8e\u5b58\u653e\u670d\u52a1\u63d0\u4f9b\u8005 url\uff0c\u8def\u7531 url\uff0c\u914d\u7f6e\u5668 url List URL invokerUrls = new ArrayList URL (); List URL routerUrls = new ArrayList URL (); List URL configuratorUrls = new ArrayList URL (); for (URL url : urls) { String protocol = url.getProtocol(); // \u83b7\u53d6 category \u53c2\u6570 String category = url.getParameter(Constants.CATEGORY_KEY, Constants.DEFAULT_CATEGORY); // \u6839\u636e category \u53c2\u6570\u5c06 url \u5206\u522b\u653e\u5230\u4e0d\u540c\u7684\u5217\u8868\u4e2d if (Constants.ROUTERS_CATEGORY.equals(category) || Constants.ROUTE_PROTOCOL.equals(protocol)) { // \u6dfb\u52a0\u8def\u7531\u5668 url routerUrls.add(url); } else if (Constants.CONFIGURATORS_CATEGORY.equals(category) || Constants.OVERRIDE_PROTOCOL.equals(protocol)) { // \u6dfb\u52a0\u914d\u7f6e\u5668 url configuratorUrls.add(url); } else if (Constants.PROVIDERS_CATEGORY.equals(category)) { // \u6dfb\u52a0\u670d\u52a1\u63d0\u4f9b\u8005 url invokerUrls.add(url); } else { // \u5ffd\u7565\u4e0d\u652f\u6301\u7684 category logger.warn( Unsupported category ... ); } } if (configuratorUrls != null !configuratorUrls.isEmpty()) { // \u5c06 url \u8f6c\u6210 Configurator this.configurators = toConfigurators(configuratorUrls); } if (routerUrls != null !routerUrls.isEmpty()) { // \u5c06 url \u8f6c\u6210 Router List Router routers = toRouters(routerUrls); if (routers != null) { setRouters(routers); } } List Configurator localConfigurators = this.configurators; this.overrideDirectoryUrl = directoryUrl; if (localConfigurators != null !localConfigurators.isEmpty()) { for (Configurator configurator : localConfigurators) { // \u914d\u7f6e overrideDirectoryUrl this.overrideDirectoryUrl = configurator.configure(overrideDirectoryUrl); } } // \u5237\u65b0 Invoker \u5217\u8868 refreshInvoker(invokerUrls); } \u5982\u4e0a\uff0cnotify \u65b9\u6cd5\u9996\u5148\u662f\u6839\u636e url \u7684 category \u53c2\u6570\u5bf9 url \u8fdb\u884c\u5206\u95e8\u522b\u7c7b\u5b58\u50a8\uff0c\u7136\u540e\u901a\u8fc7 toRouters \u548c toConfigurators \u5c06 url \u5217\u8868\u8f6c\u6210 Router \u548c Configurator \u5217\u8868\u3002\u6700\u540e\u8c03\u7528 refreshInvoker \u65b9\u6cd5\u5237\u65b0 Invoker \u5217\u8868\u3002\u8fd9\u91cc\u7684 toRouters \u548c toConfigurators \u65b9\u6cd5\u903b\u8f91\u4e0d\u590d\u6742\uff0c\u5927\u5bb6\u81ea\u884c\u5206\u6790\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u628a\u91cd\u70b9\u653e\u5728 refreshInvoker \u65b9\u6cd5\u4e0a\u3002 3.2.3 \u5237\u65b0 Invoker \u5217\u8868 refreshInvoker \u65b9\u6cd5\u662f\u4fdd\u8bc1 RegistryDirectory \u968f\u6ce8\u518c\u4e2d\u5fc3\u53d8\u5316\u800c\u53d8\u5316\u7684\u5173\u952e\u6240\u5728\u3002\u8fd9\u4e00\u5757\u903b\u8f91\u6bd4\u8f83\u591a\uff0c\u63a5\u4e0b\u6765\u4e00\u4e00\u8fdb\u884c\u5206\u6790\u3002 private void refreshInvoker(List URL invokerUrls) { // invokerUrls \u4ec5\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u4e14 url \u534f\u8bae\u5934\u4e3a empty\uff0c\u6b64\u65f6\u8868\u793a\u7981\u7528\u6240\u6709\u670d\u52a1 if (invokerUrls != null invokerUrls.size() == 1 invokerUrls.get(0) != null Constants.EMPTY_PROTOCOL.equals(invokerUrls.get(0).getProtocol())) { // \u8bbe\u7f6e forbidden \u4e3a true this.forbidden = true; this.methodInvokerMap = null; // \u9500\u6bc1\u6240\u6709 Invoker destroyAllInvokers(); } else { this.forbidden = false; Map String, Invoker T oldUrlInvokerMap = this.urlInvokerMap; if (invokerUrls.isEmpty() this.cachedInvokerUrls != null) { // \u6dfb\u52a0\u7f13\u5b58 url \u5230 invokerUrls \u4e2d invokerUrls.addAll(this.cachedInvokerUrls); } else { this.cachedInvokerUrls = new HashSet URL (); // \u7f13\u5b58 invokerUrls this.cachedInvokerUrls.addAll(invokerUrls); } if (invokerUrls.isEmpty()) { return; } // \u5c06 url \u8f6c\u6210 Invoker Map String, Invoker T newUrlInvokerMap = toInvokers(invokerUrls); // \u5c06 newUrlInvokerMap \u8f6c\u6210\u65b9\u6cd5\u540d\u5230 Invoker \u5217\u8868\u7684\u6620\u5c04 Map String, List Invoker T newMethodInvokerMap = toMethodInvokers(newUrlInvokerMap); // \u8f6c\u6362\u51fa\u9519\uff0c\u76f4\u63a5\u6253\u5370\u5f02\u5e38\uff0c\u5e76\u8fd4\u56de if (newUrlInvokerMap == null || newUrlInvokerMap.size() == 0) { logger.error(new IllegalStateException( urls to invokers error ... )); return; } // \u5408\u5e76\u591a\u4e2a\u7ec4\u7684 Invoker this.methodInvokerMap = multiGroup ? toMergeMethodInvokerMap(newMethodInvokerMap) : newMethodInvokerMap; this.urlInvokerMap = newUrlInvokerMap; try { // \u9500\u6bc1\u65e0\u7528 Invoker destroyUnusedInvokers(oldUrlInvokerMap, newUrlInvokerMap); } catch (Exception e) { logger.warn( destroyUnusedInvokers error. , e); } } } refreshInvoker \u65b9\u6cd5\u9996\u5148\u4f1a\u6839\u636e\u5165\u53c2 invokerUrls \u7684\u6570\u91cf\u548c\u534f\u8bae\u5934\u5224\u65ad\u662f\u5426\u7981\u7528\u6240\u6709\u7684\u670d\u52a1\uff0c\u5982\u679c\u7981\u7528\uff0c\u5219\u5c06 forbidden \u8bbe\u4e3a true\uff0c\u5e76\u9500\u6bc1\u6240\u6709\u7684 Invoker\u3002\u82e5\u4e0d\u7981\u7528\uff0c\u5219\u5c06 url \u8f6c\u6210 Invoker\uff0c\u5f97\u5230 \\ url, Invoker> \u7684\u6620\u5c04\u5173\u7cfb\u3002\u7136\u540e\u8fdb\u4e00\u6b65\u8fdb\u884c\u8f6c\u6362\uff0c\u5f97\u5230 \\ methodName, Invoker \u5217\u8868> \u6620\u5c04\u5173\u7cfb\u3002\u4e4b\u540e\u8fdb\u884c\u591a\u7ec4 Invoker \u5408\u5e76\u64cd\u4f5c\uff0c\u5e76\u5c06\u5408\u5e76\u7ed3\u679c\u8d4b\u503c\u7ed9 methodInvokerMap\u3002methodInvokerMap \u53d8\u91cf\u5728 doList \u65b9\u6cd5\u4e2d\u4f1a\u88ab\u7528\u5230\uff0cdoList \u4f1a\u5bf9\u8be5\u53d8\u91cf\u8fdb\u884c\u8bfb\u64cd\u4f5c\uff0c\u5728\u8fd9\u91cc\u662f\u5199\u64cd\u4f5c\u3002\u5f53\u65b0\u7684 Invoker \u5217\u8868\u751f\u6210\u540e\uff0c\u8fd8\u8981\u4e00\u4e2a\u91cd\u8981\u7684\u5de5\u4f5c\u8981\u505a\uff0c\u5c31\u662f\u9500\u6bc1\u65e0\u7528\u7684 Invoker\uff0c\u907f\u514d\u670d\u52a1\u6d88\u8d39\u8005\u8c03\u7528\u5df2\u4e0b\u7ebf\u7684\u670d\u52a1\u7684\u670d\u52a1\u3002 \u63a5\u4e0b\u6765\u5bf9 refreshInvoker \u65b9\u6cd5\u4e2d\u6d89\u53ca\u5230\u7684\u8c03\u7528\u4e00\u4e00\u8fdb\u884c\u5206\u6790\u3002\u6309\u7167\u987a\u5e8f\uff0c\u5148\u6765\u5206\u6790 url \u5230 Invoker \u7684\u8f6c\u6362\u8fc7\u7a0b\u3002 private Map String, Invoker T toInvokers(List URL urls) { Map String, Invoker T newUrlInvokerMap = new HashMap String, Invoker T (); if (urls == null || urls.isEmpty()) { return newUrlInvokerMap; } Set String keys = new HashSet String (); // \u83b7\u53d6\u670d\u52a1\u6d88\u8d39\u7aef\u914d\u7f6e\u7684\u534f\u8bae String queryProtocols = this.queryMap.get(Constants.PROTOCOL_KEY); for (URL providerUrl : urls) { if (queryProtocols != null queryProtocols.length() 0) { boolean accept = false; String[] acceptProtocols = queryProtocols.split( , ); // \u68c0\u6d4b\u670d\u52a1\u63d0\u4f9b\u8005\u534f\u8bae\u662f\u5426\u88ab\u670d\u52a1\u6d88\u8d39\u8005\u6240\u652f\u6301 for (String acceptProtocol : acceptProtocols) { if (providerUrl.getProtocol().equals(acceptProtocol)) { accept = true; break; } } if (!accept) { // \u82e5\u670d\u52a1\u6d88\u8d39\u8005\u534f\u8bae\u5934\u4e0d\u88ab\u6d88\u8d39\u8005\u6240\u652f\u6301\uff0c\u5219\u5ffd\u7565\u5f53\u524d providerUrl continue; } } // \u5ffd\u7565 empty \u534f\u8bae if (Constants.EMPTY_PROTOCOL.equals(providerUrl.getProtocol())) { continue; } // \u901a\u8fc7 SPI \u68c0\u6d4b\u670d\u52a1\u7aef\u534f\u8bae\u662f\u5426\u88ab\u6d88\u8d39\u7aef\u652f\u6301\uff0c\u4e0d\u652f\u6301\u5219\u629b\u51fa\u5f02\u5e38 if (!ExtensionLoader.getExtensionLoader(Protocol.class).hasExtension(providerUrl.getProtocol())) { logger.error(new IllegalStateException( Unsupported protocol... )); continue; } // \u5408\u5e76 url URL url = mergeUrl(providerUrl); String key = url.toFullString(); if (keys.contains(key)) { // \u5ffd\u7565\u91cd\u590d url continue; } keys.add(key); // \u5c06\u672c\u5730 Invoker \u7f13\u5b58\u8d4b\u503c\u7ed9 localUrlInvokerMap Map String, Invoker T localUrlInvokerMap = this.urlInvokerMap; // \u83b7\u53d6\u4e0e url \u5bf9\u5e94\u7684 Invoker Invoker T invoker = localUrlInvokerMap == null ? null : localUrlInvokerMap.get(key); // \u7f13\u5b58\u672a\u547d\u4e2d if (invoker == null) { try { boolean enabled = true; if (url.hasParameter(Constants.DISABLED_KEY)) { // \u83b7\u53d6 disable \u914d\u7f6e\uff0c\u53d6\u53cd\uff0c\u7136\u540e\u8d4b\u503c\u7ed9 enable \u53d8\u91cf enabled = !url.getParameter(Constants.DISABLED_KEY, false); } else { // \u83b7\u53d6 enable \u914d\u7f6e\uff0c\u5e76\u8d4b\u503c\u7ed9 enable \u53d8\u91cf enabled = url.getParameter(Constants.ENABLED_KEY, true); } if (enabled) { // \u8c03\u7528 refer \u83b7\u53d6 Invoker invoker = new InvokerDelegate T (protocol.refer(serviceType, url), url, providerUrl); } } catch (Throwable t) { logger.error( Failed to refer invoker for interface... ); } if (invoker != null) { // \u7f13\u5b58 Invoker \u5b9e\u4f8b newUrlInvokerMap.put(key, invoker); } // \u7f13\u5b58\u547d\u4e2d } else { // \u5c06 invoker \u5b58\u50a8\u5230 newUrlInvokerMap \u4e2d newUrlInvokerMap.put(key, invoker); } } keys.clear(); return newUrlInvokerMap; } toInvokers \u65b9\u6cd5\u4e00\u5f00\u59cb\u4f1a\u5bf9\u670d\u52a1\u63d0\u4f9b\u8005 url \u8fdb\u884c\u68c0\u6d4b\uff0c\u82e5\u670d\u52a1\u6d88\u8d39\u7aef\u7684\u914d\u7f6e\u4e0d\u652f\u6301\u670d\u52a1\u7aef\u7684\u534f\u8bae\uff0c\u6216\u670d\u52a1\u7aef url \u534f\u8bae\u5934\u4e3a empty \u65f6\uff0ctoInvokers \u5747\u4f1a\u5ffd\u7565\u670d\u52a1\u63d0\u4f9b\u65b9 url\u3002\u5fc5\u8981\u7684\u68c0\u6d4b\u505a\u5b8c\u540e\uff0c\u7d27\u63a5\u7740\u662f\u5408\u5e76 url\uff0c\u7136\u540e\u8bbf\u95ee\u7f13\u5b58\uff0c\u5c1d\u8bd5\u83b7\u53d6\u4e0e url \u5bf9\u5e94\u7684 invoker\u3002\u5982\u679c\u7f13\u5b58\u547d\u4e2d\uff0c\u76f4\u63a5\u5c06 Invoker \u5b58\u5165 newUrlInvokerMap \u4e2d\u5373\u53ef\u3002\u5982\u679c\u672a\u547d\u4e2d\uff0c\u5219\u9700\u65b0\u5efa Invoker\u3002 toInvokers \u65b9\u6cd5\u8fd4\u56de\u7684\u662f \\ url, Invoker> \u6620\u5c04\u5173\u7cfb\u8868\uff0c\u63a5\u4e0b\u6765\u8fd8\u8981\u5bf9\u8fd9\u4e2a\u7ed3\u679c\u8fdb\u884c\u8fdb\u4e00\u6b65\u5904\u7406\uff0c\u5f97\u5230\u65b9\u6cd5\u540d\u5230 Invoker \u5217\u8868\u7684\u6620\u5c04\u5173\u7cfb\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u7531 toMethodInvokers \u65b9\u6cd5\u5b8c\u6210\uff0c\u5982\u4e0b\uff1a private Map String, List Invoker T toMethodInvokers(Map String, Invoker T invokersMap) { // \u65b9\u6cd5\u540d - Invoker \u5217\u8868 Map String, List Invoker T newMethodInvokerMap = new HashMap String, List Invoker T (); List Invoker T invokersList = new ArrayList Invoker T (); if (invokersMap != null invokersMap.size() 0) { for (Invoker T invoker : invokersMap.values()) { // \u83b7\u53d6 methods \u53c2\u6570 String parameter = invoker.getUrl().getParameter(Constants.METHODS_KEY); if (parameter != null parameter.length() 0) { // \u5207\u5206 methods \u53c2\u6570\u503c\uff0c\u5f97\u5230\u65b9\u6cd5\u540d\u6570\u7ec4 String[] methods = Constants.COMMA_SPLIT_PATTERN.split(parameter); if (methods != null methods.length 0) { for (String method : methods) { // \u65b9\u6cd5\u540d\u4e0d\u4e3a * if (method != null method.length() 0 !Constants.ANY_VALUE.equals(method)) { // \u6839\u636e\u65b9\u6cd5\u540d\u83b7\u53d6 Invoker \u5217\u8868 List Invoker T methodInvokers = newMethodInvokerMap.get(method); if (methodInvokers == null) { methodInvokers = new ArrayList Invoker T (); newMethodInvokerMap.put(method, methodInvokers); } // \u5b58\u50a8 Invoker \u5230\u5217\u8868\u4e2d methodInvokers.add(invoker); } } } } invokersList.add(invoker); } } // \u8fdb\u884c\u670d\u52a1\u7ea7\u522b\u8def\u7531\uff0c\u53c2\u8003 pull request #749 List Invoker T newInvokersList = route(invokersList, null); // \u5b58\u50a8 *, newInvokersList \u6620\u5c04\u5173\u7cfb newMethodInvokerMap.put(Constants.ANY_VALUE, newInvokersList); if (serviceMethods != null serviceMethods.length 0) { for (String method : serviceMethods) { List Invoker T methodInvokers = newMethodInvokerMap.get(method); if (methodInvokers == null || methodInvokers.isEmpty()) { methodInvokers = newInvokersList; } // \u8fdb\u884c\u65b9\u6cd5\u7ea7\u522b\u8def\u7531 newMethodInvokerMap.put(method, route(methodInvokers, method)); } } // \u6392\u5e8f\uff0c\u8f6c\u6210\u4e0d\u53ef\u53d8\u5217\u8868 for (String method : new HashSet String (newMethodInvokerMap.keySet())) { List Invoker T methodInvokers = newMethodInvokerMap.get(method); Collections.sort(methodInvokers, InvokerComparator.getComparator()); newMethodInvokerMap.put(method, Collections.unmodifiableList(methodInvokers)); } return Collections.unmodifiableMap(newMethodInvokerMap); } \u4e0a\u9762\u65b9\u6cd5\u4e3b\u8981\u505a\u4e86\u4e09\u4ef6\u4e8b\u60c5\uff0c \u7b2c\u4e00\u662f\u5bf9\u5165\u53c2\u8fdb\u884c\u904d\u5386\uff0c\u7136\u540e\u4ece Invoker \u7684 url \u6210\u5458\u53d8\u91cf\u4e2d\u83b7\u53d6 methods \u53c2\u6570\uff0c\u5e76\u5207\u5206\u6210\u6570\u7ec4\u3002\u968f\u540e\u4ee5\u65b9\u6cd5\u540d\u4e3a\u952e\uff0cInvoker \u5217\u8868\u4e3a\u503c\uff0c\u5c06\u6620\u5c04\u5173\u7cfb\u5b58\u50a8\u5230 newMethodInvokerMap \u4e2d\u3002\u7b2c\u4e8c\u662f\u5206\u522b\u57fa\u4e8e\u7c7b\u548c\u65b9\u6cd5\u5bf9 Invoker \u5217\u8868\u8fdb\u884c\u8def\u7531\u64cd\u4f5c\u3002\u7b2c\u4e09\u662f\u5bf9 Invoker \u5217\u8868\u8fdb\u884c\u6392\u5e8f\uff0c\u5e76\u8f6c\u6210\u4e0d\u53ef\u53d8\u5217\u8868\u3002\u5173\u4e8e toMethodInvokers \u65b9\u6cd5\u5c31\u5148\u5206\u6790\u5230\u8fd9\uff0c\u6211\u4eec\u7ee7\u7eed\u5411\u4e0b\u5206\u6790\uff0c\u8fd9\u6b21\u8981\u5206\u6790\u7684\u591a\u7ec4\u670d\u52a1\u7684\u5408\u5e76\u903b\u8f91\u3002 private Map String, List Invoker T toMergeMethodInvokerMap(Map String, List Invoker T methodMap) { Map String, List Invoker T result = new HashMap String, List Invoker T (); // \u904d\u5386\u5165\u53c2 for (Map.Entry String, List Invoker T entry : methodMap.entrySet()) { String method = entry.getKey(); List Invoker T invokers = entry.getValue(); // group - Invoker \u5217\u8868 Map String, List Invoker T groupMap = new HashMap String, List Invoker T (); // \u904d\u5386 Invoker \u5217\u8868 for (Invoker T invoker : invokers) { // \u83b7\u53d6\u5206\u7ec4\u914d\u7f6e String group = invoker.getUrl().getParameter(Constants.GROUP_KEY, ); List Invoker T groupInvokers = groupMap.get(group); if (groupInvokers == null) { groupInvokers = new ArrayList Invoker T (); // \u7f13\u5b58 group, List Invoker \u5230 groupMap \u4e2d groupMap.put(group, groupInvokers); } // \u5b58\u50a8 invoker \u5230 groupInvokers groupInvokers.add(invoker); } if (groupMap.size() == 1) { // \u5982\u679c groupMap \u4e2d\u4ec5\u5305\u542b\u4e00\u7ec4\u952e\u503c\u5bf9\uff0c\u6b64\u65f6\u76f4\u63a5\u53d6\u51fa\u8be5\u952e\u503c\u5bf9\u7684\u503c\u5373\u53ef result.put(method, groupMap.values().iterator().next()); // groupMap.size() 1 \u6210\u7acb\uff0c\u8868\u793a groupMap \u4e2d\u5305\u542b\u591a\u7ec4\u952e\u503c\u5bf9\uff0c\u6bd4\u5982\uff1a // { // dubbo : [invoker1, invoker2, invoker3, ...], // hello : [invoker4, invoker5, invoker6, ...] // } } else if (groupMap.size() 1) { List Invoker T groupInvokers = new ArrayList Invoker T (); for (List Invoker T groupList : groupMap.values()) { // \u901a\u8fc7\u96c6\u7fa4\u7c7b\u5408\u5e76\u6bcf\u4e2a\u5206\u7ec4\u5bf9\u5e94\u7684 Invoker \u5217\u8868 groupInvokers.add(cluster.join(new StaticDirectory T (groupList))); } // \u7f13\u5b58\u7ed3\u679c result.put(method, groupInvokers); } else { result.put(method, invokers); } } return result; } \u4e0a\u9762\u65b9\u6cd5\u9996\u5148\u662f\u751f\u6210 group \u5230 Invoker \u5217\u8868\u7684\u6620\u5c04\u5173\u7cfb\u8868\uff0c\u82e5\u5173\u7cfb\u8868\u4e2d\u7684\u6620\u5c04\u5173\u7cfb\u6570\u91cf\u5927\u4e8e1\uff0c\u8868\u793a\u6709\u591a\u7ec4\u670d\u52a1\u3002\u6b64\u65f6\u901a\u8fc7\u96c6\u7fa4\u7c7b\u5408\u5e76\u6bcf\u7ec4 Invoker\uff0c\u5e76\u5c06\u5408\u5e76\u7ed3\u679c\u5b58\u50a8\u5230 groupInvokers \u4e2d\u3002\u4e4b\u540e\u5c06\u65b9\u6cd5\u540d\u4e0e groupInvokers \u5b58\u5230\u5230 result \u4e2d\uff0c\u5e76\u8fd4\u56de\uff0c\u6574\u4e2a\u903b\u8f91\u7ed3\u675f\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u518d\u6765\u770b\u4e00\u4e0b Invoker \u5217\u8868\u5237\u65b0\u903b\u8f91\u7684\u6700\u540e\u4e00\u4e2a\u52a8\u4f5c \u2014 \u5220\u9664\u65e0\u7528 Invoker\u3002\u5982\u4e0b\uff1a private void destroyUnusedInvokers(Map String, Invoker T oldUrlInvokerMap, Map String, Invoker T newUrlInvokerMap) { if (newUrlInvokerMap == null || newUrlInvokerMap.size() == 0) { destroyAllInvokers(); return; } List String deleted = null; if (oldUrlInvokerMap != null) { // \u83b7\u53d6\u65b0\u751f\u6210\u7684 Invoker \u5217\u8868 Collection Invoker T newInvokers = newUrlInvokerMap.values(); // \u904d\u5386\u8001\u7684 url, Invoker \u6620\u5c04\u8868 for (Map.Entry String, Invoker T entry : oldUrlInvokerMap.entrySet()) { // \u68c0\u6d4b newInvokers \u4e2d\u662f\u5426\u5305\u542b\u8001\u7684 Invoker if (!newInvokers.contains(entry.getValue())) { if (deleted == null) { deleted = new ArrayList String (); } // \u82e5\u4e0d\u5305\u542b\uff0c\u5219\u5c06\u8001\u7684 Invoker \u5bf9\u5e94\u7684 url \u5b58\u5165 deleted \u5217\u8868\u4e2d deleted.add(entry.getKey()); } } } if (deleted != null) { // \u904d\u5386 deleted \u96c6\u5408\uff0c\u5e76\u5230\u8001\u7684 url, Invoker \u6620\u5c04\u5173\u7cfb\u8868\u67e5\u51fa Invoker\uff0c\u9500\u6bc1\u4e4b for (String url : deleted) { if (url != null) { // \u4ece oldUrlInvokerMap \u4e2d\u79fb\u9664 url \u5bf9\u5e94\u7684 Invoker Invoker T invoker = oldUrlInvokerMap.remove(url); if (invoker != null) { try { // \u9500\u6bc1 Invoker invoker.destroy(); } catch (Exception e) { logger.warn( destroy invoker... ); } } } } } } destroyUnusedInvokers \u65b9\u6cd5\u7684\u4e3b\u8981\u903b\u8f91\u662f\u901a\u8fc7 newUrlInvokerMap \u627e\u51fa\u5f85\u5220\u9664 Invoker \u5bf9\u5e94\u7684 url\uff0c\u5e76\u5c06 url \u5b58\u5165\u5230 deleted \u5217\u8868\u4e2d\u3002\u7136\u540e\u518d\u904d\u5386 deleted \u5217\u8868\uff0c\u5e76\u4ece oldUrlInvokerMap \u4e2d\u79fb\u9664\u76f8\u5e94\u7684 Invoker\uff0c\u9500\u6bc1\u4e4b\u3002\u6574\u4e2a\u903b\u8f91\u5927\u81f4\u5982\u6b64\uff0c\u4e0d\u662f\u5f88\u96be\u7406\u89e3\u3002 \u5230\u6b64\u5173\u4e8e Invoker \u5217\u8868\u7684\u5237\u65b0\u903b\u8f91\u5c31\u5206\u6790\u4e86\uff0c\u8fd9\u91cc\u5bf9\u6574\u4e2a\u8fc7\u7a0b\u8fdb\u884c\u7b80\u5355\u603b\u7ed3\u3002\u5982\u4e0b\uff1a \u68c0\u6d4b\u5165\u53c2\u662f\u5426\u4ec5\u5305\u542b\u4e00\u4e2a url\uff0c\u4e14 url \u534f\u8bae\u5934\u4e3a empty \u82e5\u7b2c\u4e00\u6b65\u68c0\u6d4b\u7ed3\u679c\u4e3a true\uff0c\u8868\u793a\u7981\u7528\u6240\u6709\u670d\u52a1\uff0c\u6b64\u65f6\u9500\u6bc1\u6240\u6709\u7684 Invoker \u82e5\u7b2c\u4e00\u6b65\u68c0\u6d4b\u7ed3\u679c\u4e3a false\uff0c\u6b64\u65f6\u5c06\u5165\u53c2\u8f6c\u4e3a Invoker \u5217\u8868 \u5bf9\u4e0a\u4e00\u6b65\u903b\u8f91\u751f\u6210\u7684\u7ed3\u679c\u8fdb\u884c\u8fdb\u4e00\u6b65\u5904\u7406\uff0c\u5f97\u5230\u65b9\u6cd5\u540d\u5230 Invoker \u7684\u6620\u5c04\u5173\u7cfb\u8868 \u5408\u5e76\u591a\u7ec4 Invoker \u9500\u6bc1\u65e0\u7528 Invoker Invoker \u7684\u5237\u65b0\u903b\u8f91\u8fd8\u662f\u6bd4\u8f83\u590d\u6742\u7684\uff0c\u5927\u5bb6\u5728\u770b\u7684\u8fc7\u7a0b\u4e2d\u591a\u5199\u70b9 demo \u8fdb\u884c\u8c03\u8bd5\uff0c\u4ee5\u52a0\u6df1\u7406\u89e3\u3002 4. \u603b\u7ed3 \u672c\u7bc7\u6587\u7ae0\u5bf9 Dubbo \u670d\u52a1\u76ee\u5f55\u8fdb\u884c\u4e86\u8f83\u4e3a\u8be6\u7ec6\u7684\u5206\u6790\uff0c\u7bc7\u5e45\u4e3b\u8981\u96c6\u4e2d\u5728 RegistryDirectory \u7684\u6e90\u7801\u5206\u6790\u4e0a\u3002\u4ece\u4ee3\u7801\u91cf\u4e0a\u53ef\u4ee5\u770b\u51fa\uff0c\u60f3\u8ba9\u672c\u5730\u670d\u52a1\u76ee\u5f55\u548c\u6ce8\u518c\u4e2d\u5fc3\u4fdd\u6301\u4e00\u81f4\u8fd8\u662f\u9700\u8981\u505a\u5f88\u591a\u4e8b\u60c5\u7684\uff0c\u5e76\u4e0d\u7b80\u5355\u3002\u670d\u52a1\u76ee\u5f55\u662f Dubbo \u96c6\u7fa4\u5bb9\u9519\u7684\u4e00\u90e8\u5206\uff0c\u4e5f\u662f\u6bd4\u8f83\u57fa\u7840\u7684\u90e8\u5206\uff0c\u6240\u4ee5\u5927\u5bb6\u5e94\u5c3d\u91cf\u641e\u61c2\u3002","title":"\u670d\u52a1\u76ee\u5f55"},{"location":"source_code_guide/directory/#1","text":"\u672c\u7bc7\u6587\u7ae0\uff0c\u5c06\u5f00\u59cb\u5206\u6790 Dubbo \u96c6\u7fa4\u5bb9\u9519\u65b9\u9762\u7684\u6e90\u7801\u3002\u96c6\u7fa4\u5bb9\u9519\u6e90\u7801\u5305\u542b\u56db\u4e2a\u90e8\u5206\uff0c\u5206\u522b\u662f\u670d\u52a1\u76ee\u5f55 Directory\u3001\u670d\u52a1\u8def\u7531 Router\u3001\u96c6\u7fa4 Cluster \u548c\u8d1f\u8f7d\u5747\u8861 LoadBalance\u3002\u8fd9\u51e0\u4e2a\u90e8\u5206\u7684\u6e90\u7801\u903b\u8f91\u76f8\u5bf9\u6bd4\u8f83\u72ec\u7acb\uff0c\u6211\u4eec\u5c06\u4f1a\u5206\u56db\u7bc7\u6587\u7ae0\u8fdb\u884c\u5206\u6790\u3002\u672c\u7bc7\u6587\u7ae0\u4f5c\u4e3a\u96c6\u7fa4\u5bb9\u9519\u7684\u5f00\u7bc7\u6587\u7ae0\uff0c\u5c06\u548c\u5927\u5bb6\u4e00\u8d77\u5206\u6790\u670d\u52a1\u76ee\u5f55\u76f8\u5173\u7684\u6e90\u7801\u3002\u5728\u8fdb\u884c\u6df1\u5165\u5206\u6790\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u4e86\u89e3\u4e00\u4e0b\u670d\u52a1\u76ee\u5f55\u662f\u4ec0\u4e48\u3002\u670d\u52a1\u76ee\u5f55\u4e2d\u5b58\u50a8\u4e86\u4e00\u4e9b\u548c\u670d\u52a1\u63d0\u4f9b\u8005\u6709\u5173\u7684\u4fe1\u606f\uff0c\u901a\u8fc7\u670d\u52a1\u76ee\u5f55\uff0c\u670d\u52a1\u6d88\u8d39\u8005\u53ef\u83b7\u53d6\u5230\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u4fe1\u606f\uff0c\u6bd4\u5982 ip\u3001\u7aef\u53e3\u3001\u670d\u52a1\u534f\u8bae\u7b49\u3002\u901a\u8fc7\u8fd9\u4e9b\u4fe1\u606f\uff0c\u670d\u52a1\u6d88\u8d39\u8005\u5c31\u53ef\u901a\u8fc7 Netty \u7b49\u5ba2\u6237\u7aef\u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528\u3002\u5728\u4e00\u4e2a\u670d\u52a1\u96c6\u7fa4\u4e2d\uff0c\u670d\u52a1\u63d0\u4f9b\u8005\u6570\u91cf\u5e76\u4e0d\u662f\u4e00\u6210\u4e0d\u53d8\u7684\uff0c\u5982\u679c\u96c6\u7fa4\u4e2d\u65b0\u589e\u4e86\u4e00\u53f0\u673a\u5668\uff0c\u76f8\u5e94\u5730\u5728\u670d\u52a1\u76ee\u5f55\u4e2d\u5c31\u8981\u65b0\u589e\u4e00\u6761\u670d\u52a1\u63d0\u4f9b\u8005\u8bb0\u5f55\u3002\u6216\u8005\uff0c\u5982\u679c\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u914d\u7f6e\u4fee\u6539\u4e86\uff0c\u670d\u52a1\u76ee\u5f55\u4e2d\u7684\u8bb0\u5f55\u4e5f\u8981\u505a\u76f8\u5e94\u7684\u66f4\u65b0\u3002\u5982\u679c\u8fd9\u6837\u8bf4\uff0c\u670d\u52a1\u76ee\u5f55\u548c\u6ce8\u518c\u4e2d\u5fc3\u7684\u529f\u80fd\u4e0d\u5c31\u96f7\u540c\u4e86\u5417\uff1f\u786e\u5b9e\u5982\u6b64\uff0c\u8fd9\u91cc\u8fd9\u4e48\u8bf4\u662f\u4e3a\u4e86\u65b9\u4fbf\u5927\u5bb6\u7406\u89e3\u3002\u5b9e\u9645\u4e0a\u670d\u52a1\u76ee\u5f55\u5728\u83b7\u53d6\u6ce8\u518c\u4e2d\u5fc3\u7684\u670d\u52a1\u914d\u7f6e\u4fe1\u606f\u540e\uff0c\u4f1a\u4e3a\u6bcf\u6761\u914d\u7f6e\u4fe1\u606f\u751f\u6210\u4e00\u4e2a Invoker \u5bf9\u8c61\uff0c\u5e76\u628a\u8fd9\u4e2a Invoker \u5bf9\u8c61\u5b58\u50a8\u8d77\u6765\uff0c\u8fd9\u4e2a Invoker \u624d\u662f\u670d\u52a1\u76ee\u5f55\u6700\u7ec8\u6301\u6709\u7684\u5bf9\u8c61\u3002Invoker \u6709\u4ec0\u4e48\u7528\u5462\uff1f\u770b\u540d\u5b57\u5c31\u77e5\u9053\u4e86\uff0c\u8fd9\u662f\u4e00\u4e2a\u5177\u6709\u8fdc\u7a0b\u8c03\u7528\u529f\u80fd\u7684\u5bf9\u8c61\u3002\u8bb2\u5230\u8fd9\u5927\u5bb6\u5e94\u8be5\u77e5\u9053\u4e86\u4ec0\u4e48\u662f\u670d\u52a1\u76ee\u5f55\u4e86\uff0c\u5b83\u53ef\u4ee5\u770b\u505a\u662f Invoker \u96c6\u5408\uff0c\u4e14\u8fd9\u4e2a\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u4f1a\u968f\u6ce8\u518c\u4e2d\u5fc3\u7684\u53d8\u5316\u800c\u8fdb\u884c\u52a8\u6001\u8c03\u6574\u3002 \u5173\u4e8e\u670d\u52a1\u76ee\u5f55\u8fd9\u91cc\u5c31\u5148\u4ecb\u7ecd\u8fd9\u4e9b\uff0c\u5927\u5bb6\u5148\u6709\u4e2a\u5927\u81f4\u5370\u8c61\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u901a\u8fc7\u7ee7\u627f\u4f53\u7cfb\u56fe\u6765\u4e86\u89e3\u4e00\u4e0b\u670d\u52a1\u76ee\u5f55\u7684\u5bb6\u65cf\u6210\u5458\u90fd\u6709\u54ea\u4e9b\u3002","title":"1. \u7b80\u4ecb"},{"location":"source_code_guide/directory/#2","text":"\u670d\u52a1\u76ee\u5f55\u76ee\u524d\u5185\u7f6e\u7684\u5b9e\u73b0\u6709\u4e24\u4e2a\uff0c\u5206\u522b\u4e3a StaticDirectory \u548c RegistryDirectory\uff0c\u5b83\u4eec\u5747\u662f AbstractDirectory \u7684\u5b50\u7c7b\u3002AbstractDirectory \u5b9e\u73b0\u4e86 Directory \u63a5\u53e3\uff0c\u8fd9\u4e2a\u63a5\u53e3\u5305\u542b\u4e86\u4e00\u4e2a\u91cd\u8981\u7684\u65b9\u6cd5\u5b9a\u4e49\uff0c\u5373 list(Invocation)\uff0c\u7528\u4e8e\u5217\u4e3e Invoker\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u4ed6\u4eec\u7684\u7ee7\u627f\u4f53\u7cfb\u56fe\u3002 \u5982\u4e0a\uff0cDirectory \u7ee7\u627f\u81ea Node \u63a5\u53e3\uff0cNode \u8fd9\u4e2a\u63a5\u53e3\u7ee7\u627f\u8005\u6bd4\u8f83\u591a\uff0c\u50cf Registry\u3001Monitor\u3001Invoker \u7b49\u5747\u7ee7\u627f\u4e86\u8fd9\u4e2a\u63a5\u53e3\u3002\u8fd9\u4e2a\u63a5\u53e3\u5305\u542b\u4e86\u4e00\u4e2a\u83b7\u53d6\u914d\u7f6e\u4fe1\u606f\u7684\u65b9\u6cd5 getUrl\uff0c\u5b9e\u73b0\u8be5\u63a5\u53e3\u7684\u7c7b\u53ef\u4ee5\u5411\u5916\u63d0\u4f9b\u914d\u7f6e\u4fe1\u606f\u3002\u53e6\u5916\uff0c\u5927\u5bb6\u6ce8\u610f\u770b RegistryDirectory \u5b9e\u73b0\u4e86 NotifyListener \u63a5\u53e3\uff0c\u5f53\u6ce8\u518c\u4e2d\u5fc3\u8282\u70b9\u4fe1\u606f\u53d1\u751f\u53d8\u5316\u540e\uff0cRegistryDirectory \u53ef\u4ee5\u901a\u8fc7\u6b64\u63a5\u53e3\u65b9\u6cd5\u5f97\u5230\u53d8\u66f4\u4fe1\u606f\uff0c\u5e76\u6839\u636e\u53d8\u66f4\u4fe1\u606f\u52a8\u6001\u8c03\u6574\u5185\u90e8 Invoker \u5217\u8868\u3002","title":"2. \u7ee7\u627f\u4f53\u7cfb"},{"location":"source_code_guide/directory/#3","text":"\u672c\u7ae0\u5c06\u5206\u6790 AbstractDirectory \u548c\u5b83\u4e24\u4e2a\u5b50\u7c7b\u7684\u6e90\u7801\u3002AbstractDirectory \u5c01\u88c5\u4e86 Invoker \u5217\u4e3e\u6d41\u7a0b\uff0c\u5177\u4f53\u7684\u5217\u4e3e\u903b\u8f91\u5219\u7531\u5b50\u7c7b\u5b9e\u73b0\uff0c\u8fd9\u662f\u5178\u578b\u7684\u6a21\u677f\u6a21\u5f0f\u3002\u6240\u4ee5\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e0b AbstractDirectory \u7684\u6e90\u7801\u3002 public List Invoker T list(Invocation invocation) throws RpcException { if (destroyed) { throw new RpcException( Directory already destroyed... ); } // \u8c03\u7528 doList \u65b9\u6cd5\u5217\u4e3e Invoker\uff0cdoList \u662f\u6a21\u677f\u65b9\u6cd5\uff0c\u7531\u5b50\u7c7b\u5b9e\u73b0 List Invoker T invokers = doList(invocation); // \u83b7\u53d6\u8def\u7531 Router \u5217\u8868 List Router localRouters = this.routers; if (localRouters != null !localRouters.isEmpty()) { for (Router router : localRouters) { try { // \u83b7\u53d6 runtime \u53c2\u6570\uff0c\u5e76\u6839\u636e\u53c2\u6570\u51b3\u5b9a\u662f\u5426\u8fdb\u884c\u8def\u7531 if (router.getUrl() == null || router.getUrl().getParameter(Constants.RUNTIME_KEY, false)) { // \u8fdb\u884c\u670d\u52a1\u8def\u7531 invokers = router.route(invokers, getConsumerUrl(), invocation); } } catch (Throwable t) { logger.error( Failed to execute router: ... ); } } } return invokers; } // \u6a21\u677f\u65b9\u6cd5\uff0c\u7531\u5b50\u7c7b\u5b9e\u73b0 protected abstract List Invoker T doList(Invocation invocation) throws RpcException; \u4e0a\u9762\u5c31\u662f AbstractDirectory \u7684 list \u65b9\u6cd5\u6e90\u7801\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5c01\u88c5\u4e86 Invoker \u7684\u5217\u4e3e\u8fc7\u7a0b\u3002\u5982\u4e0b\uff1a \u8c03\u7528 doList \u83b7\u53d6 Invoker \u5217\u8868 \u6839\u636e Router \u7684 getUrl \u8fd4\u56de\u503c\u4e3a\u7a7a\u4e0e\u5426\uff0c\u4ee5\u53ca runtime \u53c2\u6570\u51b3\u5b9a\u662f\u5426\u8fdb\u884c\u670d\u52a1\u8def\u7531 \u4ee5\u4e0a\u6b65\u9aa4\u4e2d\uff0cdoList \u662f\u6a21\u677f\u65b9\u6cd5\uff0c\u9700\u7531\u5b50\u7c7b\u5b9e\u73b0\u3002Router \u7684 runtime \u53c2\u6570\u8fd9\u91cc\u7b80\u5355\u8bf4\u660e\u4e00\u4e0b\uff0c\u8fd9\u4e2a\u53c2\u6570\u51b3\u5b9a\u4e86\u662f\u5426\u5728\u6bcf\u6b21\u8c03\u7528\u670d\u52a1\u65f6\u90fd\u6267\u884c\u8def\u7531\u89c4\u5219\u3002\u5982\u679c runtime \u4e3a true\uff0c\u90a3\u4e48\u6bcf\u6b21\u8c03\u7528\u670d\u52a1\u524d\uff0c\u90fd\u9700\u8981\u8fdb\u884c\u670d\u52a1\u8def\u7531\u3002\u8fd9\u4e2a\u5bf9\u6027\u80fd\u9020\u6210\u5f71\u54cd\uff0c\u914d\u7f6e\u65f6\u9700\u8981\u6ce8\u610f\u3002 \u5173\u4e8e AbstractDirectory \u5c31\u5206\u6790\u8fd9\u4e48\u591a\uff0c\u4e0b\u9762\u5f00\u59cb\u5206\u6790\u5b50\u7c7b\u7684\u6e90\u7801\u3002","title":"3. \u6e90\u7801\u5206\u6790"},{"location":"source_code_guide/directory/#31-staticdirectory","text":"StaticDirectory \u5373\u9759\u6001\u670d\u52a1\u76ee\u5f55\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5b83\u5185\u90e8\u5b58\u653e\u7684 Invoker \u662f\u4e0d\u4f1a\u53d8\u52a8\u7684\u3002\u6240\u4ee5\uff0c\u7406\u8bba\u4e0a\u5b83\u548c\u4e0d\u53ef\u53d8 List \u7684\u529f\u80fd\u5f88\u76f8\u4f3c\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u7c7b\u7684\u5b9e\u73b0\u3002 public class StaticDirectory T extends AbstractDirectory T { // Invoker \u5217\u8868 private final List Invoker T invokers; // \u7701\u7565\u6784\u9020\u65b9\u6cd5 @Override public Class T getInterface() { // \u83b7\u53d6\u63a5\u53e3\u7c7b return invokers.get(0).getInterface(); } // \u68c0\u6d4b\u670d\u52a1\u76ee\u5f55\u662f\u5426\u53ef\u7528 @Override public boolean isAvailable() { if (isDestroyed()) { return false; } for (Invoker T invoker : invokers) { if (invoker.isAvailable()) { // \u53ea\u8981\u6709\u4e00\u4e2a Invoker \u662f\u53ef\u7528\u7684\uff0c\u5c31\u8ba4\u4e3a\u5f53\u524d\u76ee\u5f55\u662f\u53ef\u7528\u7684 return true; } } return false; } @Override public void destroy() { if (isDestroyed()) { return; } // \u8c03\u7528\u7236\u7c7b\u9500\u6bc1\u903b\u8f91 super.destroy(); // \u904d\u5386 Invoker \u5217\u8868\uff0c\u5e76\u6267\u884c\u76f8\u5e94\u7684\u9500\u6bc1\u903b\u8f91 for (Invoker T invoker : invokers) { invoker.destroy(); } invokers.clear(); } @Override protected List Invoker T doList(Invocation invocation) throws RpcException { // \u5217\u4e3e Inovker\uff0c\u4e5f\u5c31\u662f\u76f4\u63a5\u8fd4\u56de invokers \u6210\u5458\u53d8\u91cf return invokers; } } \u4ee5\u4e0a\u5c31\u662f StaticDirectory \u7684\u4ee3\u7801\u903b\u8f91\uff0c\u5f88\u7b80\u5355\uff0c\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002\u4e0b\u9762\u6765\u770b\u770b RegistryDirectory\uff0c\u8fd9\u4e2a\u7c7b\u7684\u903b\u8f91\u6bd4\u8f83\u590d\u6742\u3002","title":"3.1 StaticDirectory"},{"location":"source_code_guide/directory/#32-registrydirectory","text":"RegistryDirectory \u662f\u4e00\u79cd\u52a8\u6001\u670d\u52a1\u76ee\u5f55\uff0c\u5b9e\u73b0\u4e86 NotifyListener \u63a5\u53e3\u3002\u5f53\u6ce8\u518c\u4e2d\u5fc3\u670d\u52a1\u914d\u7f6e\u53d1\u751f\u53d8\u5316\u540e\uff0cRegistryDirectory \u53ef\u6536\u5230\u4e0e\u5f53\u524d\u670d\u52a1\u76f8\u5173\u7684\u53d8\u5316\u3002\u6536\u5230\u53d8\u66f4\u901a\u77e5\u540e\uff0cRegistryDirectory \u53ef\u6839\u636e\u914d\u7f6e\u53d8\u66f4\u4fe1\u606f\u5237\u65b0 Invoker \u5217\u8868\u3002RegistryDirectory \u4e2d\u6709\u51e0\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u903b\u8f91\uff0c\u7b2c\u4e00\u662f Invoker \u7684\u5217\u4e3e\u903b\u8f91\uff0c\u7b2c\u4e8c\u662f\u63a5\u6536\u670d\u52a1\u914d\u7f6e\u53d8\u66f4\u7684\u903b\u8f91\uff0c\u7b2c\u4e09\u662f Invoker \u5217\u8868\u7684\u5237\u65b0\u903b\u8f91\u3002\u63a5\u4e0b\u6765\u6309\u987a\u5e8f\u5bf9\u8fd9\u4e09\u5757\u903b\u8f91\u3002","title":"3.2 RegistryDirectory"},{"location":"source_code_guide/directory/#321-invoker","text":"Invoker \u5217\u4e3e\u903b\u8f91\u5c01\u88c5\u5728 doList \u65b9\u6cd5\u4e2d\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a public List Invoker T doList(Invocation invocation) { if (forbidden) { // \u670d\u52a1\u63d0\u4f9b\u8005\u5173\u95ed\u6216\u7981\u7528\u4e86\u670d\u52a1\uff0c\u6b64\u65f6\u629b\u51fa No provider \u5f02\u5e38 throw new RpcException(RpcException.FORBIDDEN_EXCEPTION, No provider available from registry ... ); } List Invoker T invokers = null; // \u83b7\u53d6 Invoker \u672c\u5730\u7f13\u5b58 Map String, List Invoker T localMethodInvokerMap = this.methodInvokerMap; if (localMethodInvokerMap != null localMethodInvokerMap.size() 0) { // \u83b7\u53d6\u65b9\u6cd5\u540d\u548c\u53c2\u6570\u5217\u8868 String methodName = RpcUtils.getMethodName(invocation); Object[] args = RpcUtils.getArguments(invocation); // \u68c0\u6d4b\u53c2\u6570\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5426\u4e3a String \u6216 enum \u7c7b\u578b if (args != null args.length 0 args[0] != null (args[0] instanceof String || args[0].getClass().isEnum())) { // \u901a\u8fc7 \u65b9\u6cd5\u540d + \u7b2c\u4e00\u4e2a\u53c2\u6570\u540d\u79f0 \u67e5\u8be2 Invoker \u5217\u8868\uff0c\u5177\u4f53\u7684\u4f7f\u7528\u573a\u666f\u6682\u65f6\u6ca1\u60f3\u5230 invokers = localMethodInvokerMap.get(methodName + . + args[0]); } if (invokers == null) { // \u901a\u8fc7\u65b9\u6cd5\u540d\u83b7\u53d6 Invoker \u5217\u8868 invokers = localMethodInvokerMap.get(methodName); } if (invokers == null) { // \u901a\u8fc7\u661f\u53f7 * \u83b7\u53d6 Invoker \u5217\u8868 invokers = localMethodInvokerMap.get(Constants.ANY_VALUE); } // \u5197\u4f59\u903b\u8f91\uff0cpull request #2861 \u79fb\u9664\u4e86\u4e0b\u9762\u7684 if \u5206\u652f\u4ee3\u7801 if (invokers == null) { Iterator List Invoker T iterator = localMethodInvokerMap.values().iterator(); if (iterator.hasNext()) { invokers = iterator.next(); } } } // \u8fd4\u56de Invoker \u5217\u8868 return invokers == null ? new ArrayList Invoker T (0) : invokers; } \u4ee5\u4e0a\u4ee3\u7801\u8fdb\u884c\u591a\u6b21\u5c1d\u8bd5\uff0c\u4ee5\u671f\u4ece localMethodInvokerMap \u4e2d\u83b7\u53d6\u5230 Invoker \u5217\u8868\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u666e\u901a\u7684\u8c03\u7528\u53ef\u901a\u8fc7\u65b9\u6cd5\u540d\u83b7\u53d6\u5230\u5bf9\u5e94\u7684 Invoker \u5217\u8868\uff0c\u6cdb\u5316\u8c03\u7528\u53ef\u901a\u8fc7 * \u83b7\u53d6\u5230 Invoker \u5217\u8868\u3002localMethodInvokerMap \u6e90\u81ea RegistryDirectory \u7c7b\u7684\u6210\u5458\u53d8\u91cf methodInvokerMap\u3002doList \u65b9\u6cd5\u53ef\u4ee5\u770b\u505a\u662f\u5bf9 methodInvokerMap \u53d8\u91cf\u7684\u8bfb\u64cd\u4f5c\uff0c\u81f3\u4e8e\u5bf9 methodInvokerMap \u53d8\u91cf\u7684\u5199\u64cd\u4f5c\uff0c\u4e0b\u4e00\u8282\u8fdb\u884c\u5206\u6790\u3002","title":"3.2.1 \u5217\u4e3e Invoker"},{"location":"source_code_guide/directory/#322","text":"RegistryDirectory \u662f\u4e00\u4e2a\u52a8\u6001\u670d\u52a1\u76ee\u5f55\uff0c\u4f1a\u968f\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e\u7684\u53d8\u5316\u8fdb\u884c\u52a8\u6001\u8c03\u6574\u3002\u56e0\u6b64 RegistryDirectory \u5b9e\u73b0\u4e86 NotifyListener \u63a5\u53e3\uff0c\u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\u83b7\u53d6\u6ce8\u518c\u4e2d\u5fc3\u53d8\u66f4\u901a\u77e5\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u5177\u4f53\u7684\u903b\u8f91\u3002 public synchronized void notify(List URL urls) { // \u5b9a\u4e49\u4e09\u4e2a\u96c6\u5408\uff0c\u5206\u522b\u7528\u4e8e\u5b58\u653e\u670d\u52a1\u63d0\u4f9b\u8005 url\uff0c\u8def\u7531 url\uff0c\u914d\u7f6e\u5668 url List URL invokerUrls = new ArrayList URL (); List URL routerUrls = new ArrayList URL (); List URL configuratorUrls = new ArrayList URL (); for (URL url : urls) { String protocol = url.getProtocol(); // \u83b7\u53d6 category \u53c2\u6570 String category = url.getParameter(Constants.CATEGORY_KEY, Constants.DEFAULT_CATEGORY); // \u6839\u636e category \u53c2\u6570\u5c06 url \u5206\u522b\u653e\u5230\u4e0d\u540c\u7684\u5217\u8868\u4e2d if (Constants.ROUTERS_CATEGORY.equals(category) || Constants.ROUTE_PROTOCOL.equals(protocol)) { // \u6dfb\u52a0\u8def\u7531\u5668 url routerUrls.add(url); } else if (Constants.CONFIGURATORS_CATEGORY.equals(category) || Constants.OVERRIDE_PROTOCOL.equals(protocol)) { // \u6dfb\u52a0\u914d\u7f6e\u5668 url configuratorUrls.add(url); } else if (Constants.PROVIDERS_CATEGORY.equals(category)) { // \u6dfb\u52a0\u670d\u52a1\u63d0\u4f9b\u8005 url invokerUrls.add(url); } else { // \u5ffd\u7565\u4e0d\u652f\u6301\u7684 category logger.warn( Unsupported category ... ); } } if (configuratorUrls != null !configuratorUrls.isEmpty()) { // \u5c06 url \u8f6c\u6210 Configurator this.configurators = toConfigurators(configuratorUrls); } if (routerUrls != null !routerUrls.isEmpty()) { // \u5c06 url \u8f6c\u6210 Router List Router routers = toRouters(routerUrls); if (routers != null) { setRouters(routers); } } List Configurator localConfigurators = this.configurators; this.overrideDirectoryUrl = directoryUrl; if (localConfigurators != null !localConfigurators.isEmpty()) { for (Configurator configurator : localConfigurators) { // \u914d\u7f6e overrideDirectoryUrl this.overrideDirectoryUrl = configurator.configure(overrideDirectoryUrl); } } // \u5237\u65b0 Invoker \u5217\u8868 refreshInvoker(invokerUrls); } \u5982\u4e0a\uff0cnotify \u65b9\u6cd5\u9996\u5148\u662f\u6839\u636e url \u7684 category \u53c2\u6570\u5bf9 url \u8fdb\u884c\u5206\u95e8\u522b\u7c7b\u5b58\u50a8\uff0c\u7136\u540e\u901a\u8fc7 toRouters \u548c toConfigurators \u5c06 url \u5217\u8868\u8f6c\u6210 Router \u548c Configurator \u5217\u8868\u3002\u6700\u540e\u8c03\u7528 refreshInvoker \u65b9\u6cd5\u5237\u65b0 Invoker \u5217\u8868\u3002\u8fd9\u91cc\u7684 toRouters \u548c toConfigurators \u65b9\u6cd5\u903b\u8f91\u4e0d\u590d\u6742\uff0c\u5927\u5bb6\u81ea\u884c\u5206\u6790\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u628a\u91cd\u70b9\u653e\u5728 refreshInvoker \u65b9\u6cd5\u4e0a\u3002","title":"3.2.2 \u63a5\u6536\u670d\u52a1\u53d8\u66f4\u901a\u77e5"},{"location":"source_code_guide/directory/#323-invoker","text":"refreshInvoker \u65b9\u6cd5\u662f\u4fdd\u8bc1 RegistryDirectory \u968f\u6ce8\u518c\u4e2d\u5fc3\u53d8\u5316\u800c\u53d8\u5316\u7684\u5173\u952e\u6240\u5728\u3002\u8fd9\u4e00\u5757\u903b\u8f91\u6bd4\u8f83\u591a\uff0c\u63a5\u4e0b\u6765\u4e00\u4e00\u8fdb\u884c\u5206\u6790\u3002 private void refreshInvoker(List URL invokerUrls) { // invokerUrls \u4ec5\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u4e14 url \u534f\u8bae\u5934\u4e3a empty\uff0c\u6b64\u65f6\u8868\u793a\u7981\u7528\u6240\u6709\u670d\u52a1 if (invokerUrls != null invokerUrls.size() == 1 invokerUrls.get(0) != null Constants.EMPTY_PROTOCOL.equals(invokerUrls.get(0).getProtocol())) { // \u8bbe\u7f6e forbidden \u4e3a true this.forbidden = true; this.methodInvokerMap = null; // \u9500\u6bc1\u6240\u6709 Invoker destroyAllInvokers(); } else { this.forbidden = false; Map String, Invoker T oldUrlInvokerMap = this.urlInvokerMap; if (invokerUrls.isEmpty() this.cachedInvokerUrls != null) { // \u6dfb\u52a0\u7f13\u5b58 url \u5230 invokerUrls \u4e2d invokerUrls.addAll(this.cachedInvokerUrls); } else { this.cachedInvokerUrls = new HashSet URL (); // \u7f13\u5b58 invokerUrls this.cachedInvokerUrls.addAll(invokerUrls); } if (invokerUrls.isEmpty()) { return; } // \u5c06 url \u8f6c\u6210 Invoker Map String, Invoker T newUrlInvokerMap = toInvokers(invokerUrls); // \u5c06 newUrlInvokerMap \u8f6c\u6210\u65b9\u6cd5\u540d\u5230 Invoker \u5217\u8868\u7684\u6620\u5c04 Map String, List Invoker T newMethodInvokerMap = toMethodInvokers(newUrlInvokerMap); // \u8f6c\u6362\u51fa\u9519\uff0c\u76f4\u63a5\u6253\u5370\u5f02\u5e38\uff0c\u5e76\u8fd4\u56de if (newUrlInvokerMap == null || newUrlInvokerMap.size() == 0) { logger.error(new IllegalStateException( urls to invokers error ... )); return; } // \u5408\u5e76\u591a\u4e2a\u7ec4\u7684 Invoker this.methodInvokerMap = multiGroup ? toMergeMethodInvokerMap(newMethodInvokerMap) : newMethodInvokerMap; this.urlInvokerMap = newUrlInvokerMap; try { // \u9500\u6bc1\u65e0\u7528 Invoker destroyUnusedInvokers(oldUrlInvokerMap, newUrlInvokerMap); } catch (Exception e) { logger.warn( destroyUnusedInvokers error. , e); } } } refreshInvoker \u65b9\u6cd5\u9996\u5148\u4f1a\u6839\u636e\u5165\u53c2 invokerUrls \u7684\u6570\u91cf\u548c\u534f\u8bae\u5934\u5224\u65ad\u662f\u5426\u7981\u7528\u6240\u6709\u7684\u670d\u52a1\uff0c\u5982\u679c\u7981\u7528\uff0c\u5219\u5c06 forbidden \u8bbe\u4e3a true\uff0c\u5e76\u9500\u6bc1\u6240\u6709\u7684 Invoker\u3002\u82e5\u4e0d\u7981\u7528\uff0c\u5219\u5c06 url \u8f6c\u6210 Invoker\uff0c\u5f97\u5230 \\ url, Invoker> \u7684\u6620\u5c04\u5173\u7cfb\u3002\u7136\u540e\u8fdb\u4e00\u6b65\u8fdb\u884c\u8f6c\u6362\uff0c\u5f97\u5230 \\ methodName, Invoker \u5217\u8868> \u6620\u5c04\u5173\u7cfb\u3002\u4e4b\u540e\u8fdb\u884c\u591a\u7ec4 Invoker \u5408\u5e76\u64cd\u4f5c\uff0c\u5e76\u5c06\u5408\u5e76\u7ed3\u679c\u8d4b\u503c\u7ed9 methodInvokerMap\u3002methodInvokerMap \u53d8\u91cf\u5728 doList \u65b9\u6cd5\u4e2d\u4f1a\u88ab\u7528\u5230\uff0cdoList \u4f1a\u5bf9\u8be5\u53d8\u91cf\u8fdb\u884c\u8bfb\u64cd\u4f5c\uff0c\u5728\u8fd9\u91cc\u662f\u5199\u64cd\u4f5c\u3002\u5f53\u65b0\u7684 Invoker \u5217\u8868\u751f\u6210\u540e\uff0c\u8fd8\u8981\u4e00\u4e2a\u91cd\u8981\u7684\u5de5\u4f5c\u8981\u505a\uff0c\u5c31\u662f\u9500\u6bc1\u65e0\u7528\u7684 Invoker\uff0c\u907f\u514d\u670d\u52a1\u6d88\u8d39\u8005\u8c03\u7528\u5df2\u4e0b\u7ebf\u7684\u670d\u52a1\u7684\u670d\u52a1\u3002 \u63a5\u4e0b\u6765\u5bf9 refreshInvoker \u65b9\u6cd5\u4e2d\u6d89\u53ca\u5230\u7684\u8c03\u7528\u4e00\u4e00\u8fdb\u884c\u5206\u6790\u3002\u6309\u7167\u987a\u5e8f\uff0c\u5148\u6765\u5206\u6790 url \u5230 Invoker \u7684\u8f6c\u6362\u8fc7\u7a0b\u3002 private Map String, Invoker T toInvokers(List URL urls) { Map String, Invoker T newUrlInvokerMap = new HashMap String, Invoker T (); if (urls == null || urls.isEmpty()) { return newUrlInvokerMap; } Set String keys = new HashSet String (); // \u83b7\u53d6\u670d\u52a1\u6d88\u8d39\u7aef\u914d\u7f6e\u7684\u534f\u8bae String queryProtocols = this.queryMap.get(Constants.PROTOCOL_KEY); for (URL providerUrl : urls) { if (queryProtocols != null queryProtocols.length() 0) { boolean accept = false; String[] acceptProtocols = queryProtocols.split( , ); // \u68c0\u6d4b\u670d\u52a1\u63d0\u4f9b\u8005\u534f\u8bae\u662f\u5426\u88ab\u670d\u52a1\u6d88\u8d39\u8005\u6240\u652f\u6301 for (String acceptProtocol : acceptProtocols) { if (providerUrl.getProtocol().equals(acceptProtocol)) { accept = true; break; } } if (!accept) { // \u82e5\u670d\u52a1\u6d88\u8d39\u8005\u534f\u8bae\u5934\u4e0d\u88ab\u6d88\u8d39\u8005\u6240\u652f\u6301\uff0c\u5219\u5ffd\u7565\u5f53\u524d providerUrl continue; } } // \u5ffd\u7565 empty \u534f\u8bae if (Constants.EMPTY_PROTOCOL.equals(providerUrl.getProtocol())) { continue; } // \u901a\u8fc7 SPI \u68c0\u6d4b\u670d\u52a1\u7aef\u534f\u8bae\u662f\u5426\u88ab\u6d88\u8d39\u7aef\u652f\u6301\uff0c\u4e0d\u652f\u6301\u5219\u629b\u51fa\u5f02\u5e38 if (!ExtensionLoader.getExtensionLoader(Protocol.class).hasExtension(providerUrl.getProtocol())) { logger.error(new IllegalStateException( Unsupported protocol... )); continue; } // \u5408\u5e76 url URL url = mergeUrl(providerUrl); String key = url.toFullString(); if (keys.contains(key)) { // \u5ffd\u7565\u91cd\u590d url continue; } keys.add(key); // \u5c06\u672c\u5730 Invoker \u7f13\u5b58\u8d4b\u503c\u7ed9 localUrlInvokerMap Map String, Invoker T localUrlInvokerMap = this.urlInvokerMap; // \u83b7\u53d6\u4e0e url \u5bf9\u5e94\u7684 Invoker Invoker T invoker = localUrlInvokerMap == null ? null : localUrlInvokerMap.get(key); // \u7f13\u5b58\u672a\u547d\u4e2d if (invoker == null) { try { boolean enabled = true; if (url.hasParameter(Constants.DISABLED_KEY)) { // \u83b7\u53d6 disable \u914d\u7f6e\uff0c\u53d6\u53cd\uff0c\u7136\u540e\u8d4b\u503c\u7ed9 enable \u53d8\u91cf enabled = !url.getParameter(Constants.DISABLED_KEY, false); } else { // \u83b7\u53d6 enable \u914d\u7f6e\uff0c\u5e76\u8d4b\u503c\u7ed9 enable \u53d8\u91cf enabled = url.getParameter(Constants.ENABLED_KEY, true); } if (enabled) { // \u8c03\u7528 refer \u83b7\u53d6 Invoker invoker = new InvokerDelegate T (protocol.refer(serviceType, url), url, providerUrl); } } catch (Throwable t) { logger.error( Failed to refer invoker for interface... ); } if (invoker != null) { // \u7f13\u5b58 Invoker \u5b9e\u4f8b newUrlInvokerMap.put(key, invoker); } // \u7f13\u5b58\u547d\u4e2d } else { // \u5c06 invoker \u5b58\u50a8\u5230 newUrlInvokerMap \u4e2d newUrlInvokerMap.put(key, invoker); } } keys.clear(); return newUrlInvokerMap; } toInvokers \u65b9\u6cd5\u4e00\u5f00\u59cb\u4f1a\u5bf9\u670d\u52a1\u63d0\u4f9b\u8005 url \u8fdb\u884c\u68c0\u6d4b\uff0c\u82e5\u670d\u52a1\u6d88\u8d39\u7aef\u7684\u914d\u7f6e\u4e0d\u652f\u6301\u670d\u52a1\u7aef\u7684\u534f\u8bae\uff0c\u6216\u670d\u52a1\u7aef url \u534f\u8bae\u5934\u4e3a empty \u65f6\uff0ctoInvokers \u5747\u4f1a\u5ffd\u7565\u670d\u52a1\u63d0\u4f9b\u65b9 url\u3002\u5fc5\u8981\u7684\u68c0\u6d4b\u505a\u5b8c\u540e\uff0c\u7d27\u63a5\u7740\u662f\u5408\u5e76 url\uff0c\u7136\u540e\u8bbf\u95ee\u7f13\u5b58\uff0c\u5c1d\u8bd5\u83b7\u53d6\u4e0e url \u5bf9\u5e94\u7684 invoker\u3002\u5982\u679c\u7f13\u5b58\u547d\u4e2d\uff0c\u76f4\u63a5\u5c06 Invoker \u5b58\u5165 newUrlInvokerMap \u4e2d\u5373\u53ef\u3002\u5982\u679c\u672a\u547d\u4e2d\uff0c\u5219\u9700\u65b0\u5efa Invoker\u3002 toInvokers \u65b9\u6cd5\u8fd4\u56de\u7684\u662f \\ url, Invoker> \u6620\u5c04\u5173\u7cfb\u8868\uff0c\u63a5\u4e0b\u6765\u8fd8\u8981\u5bf9\u8fd9\u4e2a\u7ed3\u679c\u8fdb\u884c\u8fdb\u4e00\u6b65\u5904\u7406\uff0c\u5f97\u5230\u65b9\u6cd5\u540d\u5230 Invoker \u5217\u8868\u7684\u6620\u5c04\u5173\u7cfb\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u7531 toMethodInvokers \u65b9\u6cd5\u5b8c\u6210\uff0c\u5982\u4e0b\uff1a private Map String, List Invoker T toMethodInvokers(Map String, Invoker T invokersMap) { // \u65b9\u6cd5\u540d - Invoker \u5217\u8868 Map String, List Invoker T newMethodInvokerMap = new HashMap String, List Invoker T (); List Invoker T invokersList = new ArrayList Invoker T (); if (invokersMap != null invokersMap.size() 0) { for (Invoker T invoker : invokersMap.values()) { // \u83b7\u53d6 methods \u53c2\u6570 String parameter = invoker.getUrl().getParameter(Constants.METHODS_KEY); if (parameter != null parameter.length() 0) { // \u5207\u5206 methods \u53c2\u6570\u503c\uff0c\u5f97\u5230\u65b9\u6cd5\u540d\u6570\u7ec4 String[] methods = Constants.COMMA_SPLIT_PATTERN.split(parameter); if (methods != null methods.length 0) { for (String method : methods) { // \u65b9\u6cd5\u540d\u4e0d\u4e3a * if (method != null method.length() 0 !Constants.ANY_VALUE.equals(method)) { // \u6839\u636e\u65b9\u6cd5\u540d\u83b7\u53d6 Invoker \u5217\u8868 List Invoker T methodInvokers = newMethodInvokerMap.get(method); if (methodInvokers == null) { methodInvokers = new ArrayList Invoker T (); newMethodInvokerMap.put(method, methodInvokers); } // \u5b58\u50a8 Invoker \u5230\u5217\u8868\u4e2d methodInvokers.add(invoker); } } } } invokersList.add(invoker); } } // \u8fdb\u884c\u670d\u52a1\u7ea7\u522b\u8def\u7531\uff0c\u53c2\u8003 pull request #749 List Invoker T newInvokersList = route(invokersList, null); // \u5b58\u50a8 *, newInvokersList \u6620\u5c04\u5173\u7cfb newMethodInvokerMap.put(Constants.ANY_VALUE, newInvokersList); if (serviceMethods != null serviceMethods.length 0) { for (String method : serviceMethods) { List Invoker T methodInvokers = newMethodInvokerMap.get(method); if (methodInvokers == null || methodInvokers.isEmpty()) { methodInvokers = newInvokersList; } // \u8fdb\u884c\u65b9\u6cd5\u7ea7\u522b\u8def\u7531 newMethodInvokerMap.put(method, route(methodInvokers, method)); } } // \u6392\u5e8f\uff0c\u8f6c\u6210\u4e0d\u53ef\u53d8\u5217\u8868 for (String method : new HashSet String (newMethodInvokerMap.keySet())) { List Invoker T methodInvokers = newMethodInvokerMap.get(method); Collections.sort(methodInvokers, InvokerComparator.getComparator()); newMethodInvokerMap.put(method, Collections.unmodifiableList(methodInvokers)); } return Collections.unmodifiableMap(newMethodInvokerMap); } \u4e0a\u9762\u65b9\u6cd5\u4e3b\u8981\u505a\u4e86\u4e09\u4ef6\u4e8b\u60c5\uff0c \u7b2c\u4e00\u662f\u5bf9\u5165\u53c2\u8fdb\u884c\u904d\u5386\uff0c\u7136\u540e\u4ece Invoker \u7684 url \u6210\u5458\u53d8\u91cf\u4e2d\u83b7\u53d6 methods \u53c2\u6570\uff0c\u5e76\u5207\u5206\u6210\u6570\u7ec4\u3002\u968f\u540e\u4ee5\u65b9\u6cd5\u540d\u4e3a\u952e\uff0cInvoker \u5217\u8868\u4e3a\u503c\uff0c\u5c06\u6620\u5c04\u5173\u7cfb\u5b58\u50a8\u5230 newMethodInvokerMap \u4e2d\u3002\u7b2c\u4e8c\u662f\u5206\u522b\u57fa\u4e8e\u7c7b\u548c\u65b9\u6cd5\u5bf9 Invoker \u5217\u8868\u8fdb\u884c\u8def\u7531\u64cd\u4f5c\u3002\u7b2c\u4e09\u662f\u5bf9 Invoker \u5217\u8868\u8fdb\u884c\u6392\u5e8f\uff0c\u5e76\u8f6c\u6210\u4e0d\u53ef\u53d8\u5217\u8868\u3002\u5173\u4e8e toMethodInvokers \u65b9\u6cd5\u5c31\u5148\u5206\u6790\u5230\u8fd9\uff0c\u6211\u4eec\u7ee7\u7eed\u5411\u4e0b\u5206\u6790\uff0c\u8fd9\u6b21\u8981\u5206\u6790\u7684\u591a\u7ec4\u670d\u52a1\u7684\u5408\u5e76\u903b\u8f91\u3002 private Map String, List Invoker T toMergeMethodInvokerMap(Map String, List Invoker T methodMap) { Map String, List Invoker T result = new HashMap String, List Invoker T (); // \u904d\u5386\u5165\u53c2 for (Map.Entry String, List Invoker T entry : methodMap.entrySet()) { String method = entry.getKey(); List Invoker T invokers = entry.getValue(); // group - Invoker \u5217\u8868 Map String, List Invoker T groupMap = new HashMap String, List Invoker T (); // \u904d\u5386 Invoker \u5217\u8868 for (Invoker T invoker : invokers) { // \u83b7\u53d6\u5206\u7ec4\u914d\u7f6e String group = invoker.getUrl().getParameter(Constants.GROUP_KEY, ); List Invoker T groupInvokers = groupMap.get(group); if (groupInvokers == null) { groupInvokers = new ArrayList Invoker T (); // \u7f13\u5b58 group, List Invoker \u5230 groupMap \u4e2d groupMap.put(group, groupInvokers); } // \u5b58\u50a8 invoker \u5230 groupInvokers groupInvokers.add(invoker); } if (groupMap.size() == 1) { // \u5982\u679c groupMap \u4e2d\u4ec5\u5305\u542b\u4e00\u7ec4\u952e\u503c\u5bf9\uff0c\u6b64\u65f6\u76f4\u63a5\u53d6\u51fa\u8be5\u952e\u503c\u5bf9\u7684\u503c\u5373\u53ef result.put(method, groupMap.values().iterator().next()); // groupMap.size() 1 \u6210\u7acb\uff0c\u8868\u793a groupMap \u4e2d\u5305\u542b\u591a\u7ec4\u952e\u503c\u5bf9\uff0c\u6bd4\u5982\uff1a // { // dubbo : [invoker1, invoker2, invoker3, ...], // hello : [invoker4, invoker5, invoker6, ...] // } } else if (groupMap.size() 1) { List Invoker T groupInvokers = new ArrayList Invoker T (); for (List Invoker T groupList : groupMap.values()) { // \u901a\u8fc7\u96c6\u7fa4\u7c7b\u5408\u5e76\u6bcf\u4e2a\u5206\u7ec4\u5bf9\u5e94\u7684 Invoker \u5217\u8868 groupInvokers.add(cluster.join(new StaticDirectory T (groupList))); } // \u7f13\u5b58\u7ed3\u679c result.put(method, groupInvokers); } else { result.put(method, invokers); } } return result; } \u4e0a\u9762\u65b9\u6cd5\u9996\u5148\u662f\u751f\u6210 group \u5230 Invoker \u5217\u8868\u7684\u6620\u5c04\u5173\u7cfb\u8868\uff0c\u82e5\u5173\u7cfb\u8868\u4e2d\u7684\u6620\u5c04\u5173\u7cfb\u6570\u91cf\u5927\u4e8e1\uff0c\u8868\u793a\u6709\u591a\u7ec4\u670d\u52a1\u3002\u6b64\u65f6\u901a\u8fc7\u96c6\u7fa4\u7c7b\u5408\u5e76\u6bcf\u7ec4 Invoker\uff0c\u5e76\u5c06\u5408\u5e76\u7ed3\u679c\u5b58\u50a8\u5230 groupInvokers \u4e2d\u3002\u4e4b\u540e\u5c06\u65b9\u6cd5\u540d\u4e0e groupInvokers \u5b58\u5230\u5230 result \u4e2d\uff0c\u5e76\u8fd4\u56de\uff0c\u6574\u4e2a\u903b\u8f91\u7ed3\u675f\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u518d\u6765\u770b\u4e00\u4e0b Invoker \u5217\u8868\u5237\u65b0\u903b\u8f91\u7684\u6700\u540e\u4e00\u4e2a\u52a8\u4f5c \u2014 \u5220\u9664\u65e0\u7528 Invoker\u3002\u5982\u4e0b\uff1a private void destroyUnusedInvokers(Map String, Invoker T oldUrlInvokerMap, Map String, Invoker T newUrlInvokerMap) { if (newUrlInvokerMap == null || newUrlInvokerMap.size() == 0) { destroyAllInvokers(); return; } List String deleted = null; if (oldUrlInvokerMap != null) { // \u83b7\u53d6\u65b0\u751f\u6210\u7684 Invoker \u5217\u8868 Collection Invoker T newInvokers = newUrlInvokerMap.values(); // \u904d\u5386\u8001\u7684 url, Invoker \u6620\u5c04\u8868 for (Map.Entry String, Invoker T entry : oldUrlInvokerMap.entrySet()) { // \u68c0\u6d4b newInvokers \u4e2d\u662f\u5426\u5305\u542b\u8001\u7684 Invoker if (!newInvokers.contains(entry.getValue())) { if (deleted == null) { deleted = new ArrayList String (); } // \u82e5\u4e0d\u5305\u542b\uff0c\u5219\u5c06\u8001\u7684 Invoker \u5bf9\u5e94\u7684 url \u5b58\u5165 deleted \u5217\u8868\u4e2d deleted.add(entry.getKey()); } } } if (deleted != null) { // \u904d\u5386 deleted \u96c6\u5408\uff0c\u5e76\u5230\u8001\u7684 url, Invoker \u6620\u5c04\u5173\u7cfb\u8868\u67e5\u51fa Invoker\uff0c\u9500\u6bc1\u4e4b for (String url : deleted) { if (url != null) { // \u4ece oldUrlInvokerMap \u4e2d\u79fb\u9664 url \u5bf9\u5e94\u7684 Invoker Invoker T invoker = oldUrlInvokerMap.remove(url); if (invoker != null) { try { // \u9500\u6bc1 Invoker invoker.destroy(); } catch (Exception e) { logger.warn( destroy invoker... ); } } } } } } destroyUnusedInvokers \u65b9\u6cd5\u7684\u4e3b\u8981\u903b\u8f91\u662f\u901a\u8fc7 newUrlInvokerMap \u627e\u51fa\u5f85\u5220\u9664 Invoker \u5bf9\u5e94\u7684 url\uff0c\u5e76\u5c06 url \u5b58\u5165\u5230 deleted \u5217\u8868\u4e2d\u3002\u7136\u540e\u518d\u904d\u5386 deleted \u5217\u8868\uff0c\u5e76\u4ece oldUrlInvokerMap \u4e2d\u79fb\u9664\u76f8\u5e94\u7684 Invoker\uff0c\u9500\u6bc1\u4e4b\u3002\u6574\u4e2a\u903b\u8f91\u5927\u81f4\u5982\u6b64\uff0c\u4e0d\u662f\u5f88\u96be\u7406\u89e3\u3002 \u5230\u6b64\u5173\u4e8e Invoker \u5217\u8868\u7684\u5237\u65b0\u903b\u8f91\u5c31\u5206\u6790\u4e86\uff0c\u8fd9\u91cc\u5bf9\u6574\u4e2a\u8fc7\u7a0b\u8fdb\u884c\u7b80\u5355\u603b\u7ed3\u3002\u5982\u4e0b\uff1a \u68c0\u6d4b\u5165\u53c2\u662f\u5426\u4ec5\u5305\u542b\u4e00\u4e2a url\uff0c\u4e14 url \u534f\u8bae\u5934\u4e3a empty \u82e5\u7b2c\u4e00\u6b65\u68c0\u6d4b\u7ed3\u679c\u4e3a true\uff0c\u8868\u793a\u7981\u7528\u6240\u6709\u670d\u52a1\uff0c\u6b64\u65f6\u9500\u6bc1\u6240\u6709\u7684 Invoker \u82e5\u7b2c\u4e00\u6b65\u68c0\u6d4b\u7ed3\u679c\u4e3a false\uff0c\u6b64\u65f6\u5c06\u5165\u53c2\u8f6c\u4e3a Invoker \u5217\u8868 \u5bf9\u4e0a\u4e00\u6b65\u903b\u8f91\u751f\u6210\u7684\u7ed3\u679c\u8fdb\u884c\u8fdb\u4e00\u6b65\u5904\u7406\uff0c\u5f97\u5230\u65b9\u6cd5\u540d\u5230 Invoker \u7684\u6620\u5c04\u5173\u7cfb\u8868 \u5408\u5e76\u591a\u7ec4 Invoker \u9500\u6bc1\u65e0\u7528 Invoker Invoker \u7684\u5237\u65b0\u903b\u8f91\u8fd8\u662f\u6bd4\u8f83\u590d\u6742\u7684\uff0c\u5927\u5bb6\u5728\u770b\u7684\u8fc7\u7a0b\u4e2d\u591a\u5199\u70b9 demo \u8fdb\u884c\u8c03\u8bd5\uff0c\u4ee5\u52a0\u6df1\u7406\u89e3\u3002","title":"3.2.3 \u5237\u65b0 Invoker \u5217\u8868"},{"location":"source_code_guide/directory/#4","text":"\u672c\u7bc7\u6587\u7ae0\u5bf9 Dubbo \u670d\u52a1\u76ee\u5f55\u8fdb\u884c\u4e86\u8f83\u4e3a\u8be6\u7ec6\u7684\u5206\u6790\uff0c\u7bc7\u5e45\u4e3b\u8981\u96c6\u4e2d\u5728 RegistryDirectory \u7684\u6e90\u7801\u5206\u6790\u4e0a\u3002\u4ece\u4ee3\u7801\u91cf\u4e0a\u53ef\u4ee5\u770b\u51fa\uff0c\u60f3\u8ba9\u672c\u5730\u670d\u52a1\u76ee\u5f55\u548c\u6ce8\u518c\u4e2d\u5fc3\u4fdd\u6301\u4e00\u81f4\u8fd8\u662f\u9700\u8981\u505a\u5f88\u591a\u4e8b\u60c5\u7684\uff0c\u5e76\u4e0d\u7b80\u5355\u3002\u670d\u52a1\u76ee\u5f55\u662f Dubbo \u96c6\u7fa4\u5bb9\u9519\u7684\u4e00\u90e8\u5206\uff0c\u4e5f\u662f\u6bd4\u8f83\u57fa\u7840\u7684\u90e8\u5206\uff0c\u6240\u4ee5\u5927\u5bb6\u5e94\u5c3d\u91cf\u641e\u61c2\u3002","title":"4. \u603b\u7ed3"},{"location":"source_code_guide/dubbo-spi/","text":"1.\u7b80\u4ecb SPI \u5168\u79f0\u4e3a Service Provider Interface\uff0c\u662f\u4e00\u79cd\u670d\u52a1\u53d1\u73b0\u673a\u5236\u3002SPI \u7684\u672c\u8d28\u662f\u5c06\u63a5\u53e3\u5b9e\u73b0\u7c7b\u7684\u5168\u9650\u5b9a\u540d\u914d\u7f6e\u5728\u6587\u4ef6\u4e2d\uff0c\u5e76\u7531\u670d\u52a1\u52a0\u8f7d\u5668\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\uff0c\u52a0\u8f7d\u5b9e\u73b0\u7c7b\u3002\u8fd9\u6837\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\uff0c\u52a8\u6001\u4e3a\u63a5\u53e3\u66ff\u6362\u5b9e\u73b0\u7c7b\u3002\u6b63\u56e0\u6b64\u7279\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u901a\u8fc7 SPI \u673a\u5236\u4e3a\u6211\u4eec\u7684\u7a0b\u5e8f\u63d0\u4f9b\u62d3\u5c55\u529f\u80fd\u3002SPI \u673a\u5236\u5728\u7b2c\u4e09\u65b9\u6846\u67b6\u4e2d\u4e5f\u6709\u6240\u5e94\u7528\uff0c\u6bd4\u5982 Dubbo \u5c31\u662f\u901a\u8fc7 SPI \u673a\u5236\u52a0\u8f7d\u6240\u6709\u7684\u7ec4\u4ef6\u3002\u4e0d\u8fc7\uff0cDubbo \u5e76\u672a\u4f7f\u7528 Java \u539f\u751f\u7684 SPI \u673a\u5236\uff0c\u800c\u662f\u5bf9\u5176\u8fdb\u884c\u4e86\u589e\u5f3a\uff0c\u4f7f\u5176\u80fd\u591f\u66f4\u597d\u7684\u6ee1\u8db3\u9700\u6c42\u3002\u5728 Dubbo \u4e2d\uff0cSPI \u662f\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u6a21\u5757\u3002\u57fa\u4e8e SPI\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5bf9 Dubbo \u8fdb\u884c\u62d3\u5c55\u3002\u5982\u679c\u5927\u5bb6\u60f3\u8981\u5b66\u4e60 Dubbo \u7684\u6e90\u7801\uff0cSPI \u673a\u5236\u52a1\u5fc5\u5f04\u61c2\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5148\u6765\u4e86\u89e3\u4e00\u4e0b Java SPI \u4e0e Dubbo SPI \u7684\u7528\u6cd5\uff0c\u7136\u540e\u518d\u6765\u5206\u6790 Dubbo SPI \u7684\u6e90\u7801\u3002 \u9700\u8981\u7279\u522b\u8bf4\u660e\u7684\u662f\uff0c\u672c\u7bc7\u6587\u7ae0\u4ee5\u53ca\u672c\u7cfb\u5217\u5176\u4ed6\u6587\u7ae0\u6240\u5206\u6790\u7684\u6e90\u7801\u7248\u672c\u5747\u4e3a dubbo-2.6.4 \u3002\u56e0\u6b64\u5927\u5bb6\u5728\u9605\u8bfb\u6587\u7ae0\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9700\u6ce8\u610f\u5c06\u4ee3\u7801\u7248\u672c\u5207\u6362\u5230 dubbo-2.6.4 tag \u4e0a\u3002 2.SPI \u793a\u4f8b 2.1 Java SPI \u793a\u4f8b \u524d\u9762\u7b80\u5355\u4ecb\u7ecd\u4e86 SPI \u673a\u5236\u7684\u539f\u7406\uff0c\u672c\u8282\u901a\u8fc7\u4e00\u4e2a\u793a\u4f8b\u6f14\u793a Java SPI \u7684\u4f7f\u7528\u65b9\u6cd5\u3002\u9996\u5148\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3\uff0c\u540d\u79f0\u4e3a Robot\u3002 public interface Robot { void sayHello(); } \u63a5\u4e0b\u6765\u5b9a\u4e49\u4e24\u4e2a\u5b9e\u73b0\u7c7b\uff0c\u5206\u522b\u4e3a OptimusPrime \u548c Bumblebee\u3002 public class OptimusPrime implements Robot { @Override public void sayHello() { System.out.println( Hello, I am Optimus Prime. ); } } public class Bumblebee implements Robot { @Override public void sayHello() { System.out.println( Hello, I am Bumblebee. ); } } \u63a5\u4e0b\u6765 META-INF/services \u6587\u4ef6\u5939\u4e0b\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\uff0c\u540d\u79f0\u4e3a Robot \u7684\u5168\u9650\u5b9a\u540d org.apache.spi.Robot\u3002\u6587\u4ef6\u5185\u5bb9\u4e3a\u5b9e\u73b0\u7c7b\u7684\u5168\u9650\u5b9a\u7684\u7c7b\u540d\uff0c\u5982\u4e0b\uff1a org.apache.spi.OptimusPrime org.apache.spi.Bumblebee \u505a\u597d\u6240\u9700\u7684\u51c6\u5907\u5de5\u4f5c\uff0c\u63a5\u4e0b\u6765\u7f16\u5199\u4ee3\u7801\u8fdb\u884c\u6d4b\u8bd5\u3002 public class JavaSPITest { @Test public void sayHello() throws Exception { ServiceLoader Robot serviceLoader = ServiceLoader.load(Robot.class); System.out.println( Java SPI ); serviceLoader.forEach(Robot::sayHello); } } \u6700\u540e\u6765\u770b\u4e00\u4e0b\u6d4b\u8bd5\u7ed3\u679c\uff0c\u5982\u4e0b\uff1a \u4ece\u6d4b\u8bd5\u7ed3\u679c\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u7684\u4e24\u4e2a\u5b9e\u73b0\u7c7b\u88ab\u6210\u529f\u7684\u52a0\u8f7d\uff0c\u5e76\u8f93\u51fa\u4e86\u76f8\u5e94\u7684\u5185\u5bb9\u3002\u5173\u4e8e Java SPI \u7684\u6f14\u793a\u5148\u5230\u8fd9\u91cc\uff0c\u63a5\u4e0b\u6765\u6f14\u793a Dubbo SPI\u3002 2.2 Dubbo SPI \u793a\u4f8b Dubbo \u5e76\u672a\u4f7f\u7528 Java SPI\uff0c\u800c\u662f\u91cd\u65b0\u5b9e\u73b0\u4e86\u4e00\u5957\u529f\u80fd\u66f4\u5f3a\u7684 SPI \u673a\u5236\u3002Dubbo SPI \u7684\u76f8\u5173\u903b\u8f91\u88ab\u5c01\u88c5\u5728\u4e86 ExtensionLoader \u7c7b\u4e2d\uff0c\u901a\u8fc7 ExtensionLoader\uff0c\u6211\u4eec\u53ef\u4ee5\u52a0\u8f7d\u6307\u5b9a\u7684\u5b9e\u73b0\u7c7b\u3002Dubbo SPI \u6240\u9700\u7684\u914d\u7f6e\u6587\u4ef6\u9700\u653e\u7f6e\u5728 META-INF/dubbo \u8def\u5f84\u4e0b\uff0c\u914d\u7f6e\u5185\u5bb9\u5982\u4e0b\u3002 optimusPrime = org.apache.spi.OptimusPrime bumblebee = org.apache.spi.Bumblebee \u4e0e Java SPI \u5b9e\u73b0\u7c7b\u914d\u7f6e\u4e0d\u540c\uff0cDubbo SPI \u662f\u901a\u8fc7\u952e\u503c\u5bf9\u7684\u65b9\u5f0f\u8fdb\u884c\u914d\u7f6e\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u6309\u9700\u52a0\u8f7d\u6307\u5b9a\u7684\u5b9e\u73b0\u7c7b\u3002\u53e6\u5916\uff0c\u5728\u6d4b\u8bd5 Dubbo SPI \u65f6\uff0c\u9700\u8981\u5728 Robot \u63a5\u53e3\u4e0a\u6807\u6ce8 @SPI \u6ce8\u89e3\u3002\u4e0b\u9762\u6765\u6f14\u793a Dubbo SPI \u7684\u7528\u6cd5\uff1a public class DubboSPITest { @Test public void sayHello() throws Exception { ExtensionLoader Robot extensionLoader = ExtensionLoader.getExtensionLoader(Robot.class); Robot optimusPrime = extensionLoader.getExtension( optimusPrime ); optimusPrime.sayHello(); Robot bumblebee = extensionLoader.getExtension( bumblebee ); bumblebee.sayHello(); } } \u6d4b\u8bd5\u7ed3\u679c\u5982\u4e0b\uff1a Dubbo SPI \u9664\u4e86\u652f\u6301\u6309\u9700\u52a0\u8f7d\u63a5\u53e3\u5b9e\u73b0\u7c7b\uff0c\u8fd8\u589e\u52a0\u4e86 IOC \u548c AOP \u7b49\u7279\u6027\uff0c\u8fd9\u4e9b\u7279\u6027\u5c06\u4f1a\u5728\u63a5\u4e0b\u6765\u7684\u6e90\u7801\u5206\u6790\u7ae0\u8282\u4e2d\u4e00\u4e00\u8fdb\u884c\u4ecb\u7ecd\u3002 3. Dubbo SPI \u6e90\u7801\u5206\u6790 \u4e0a\u4e00\u7ae0\u7b80\u5355\u6f14\u793a\u4e86 Dubbo SPI \u7684\u4f7f\u7528\u65b9\u6cd5\u3002\u6211\u4eec\u9996\u5148\u901a\u8fc7 ExtensionLoader \u7684 getExtensionLoader \u65b9\u6cd5\u83b7\u53d6\u4e00\u4e2a ExtensionLoader \u5b9e\u4f8b\uff0c\u7136\u540e\u518d\u901a\u8fc7 ExtensionLoader \u7684 getExtension \u65b9\u6cd5\u83b7\u53d6\u62d3\u5c55\u7c7b\u5bf9\u8c61\u3002\u8fd9\u5176\u4e2d\uff0cgetExtensionLoader \u65b9\u6cd5\u7528\u4e8e\u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6\u4e0e\u62d3\u5c55\u7c7b\u5bf9\u5e94\u7684 ExtensionLoader\uff0c\u82e5\u7f13\u5b58\u672a\u547d\u4e2d\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b9e\u4f8b\u3002\u8be5\u65b9\u6cd5\u7684\u903b\u8f91\u6bd4\u8f83\u7b80\u5355\uff0c\u672c\u7ae0\u5c31\u4e0d\u8fdb\u884c\u5206\u6790\u4e86\u3002\u4e0b\u9762\u6211\u4eec\u4ece ExtensionLoader \u7684 getExtension \u65b9\u6cd5\u4f5c\u4e3a\u5165\u53e3\uff0c\u5bf9\u62d3\u5c55\u7c7b\u5bf9\u8c61\u7684\u83b7\u53d6\u8fc7\u7a0b\u8fdb\u884c\u8be6\u7ec6\u7684\u5206\u6790\u3002 public T getExtension(String name) { if (name == null || name.length() == 0) throw new IllegalArgumentException( Extension name == null ); if ( true .equals(name)) { // \u83b7\u53d6\u9ed8\u8ba4\u7684\u62d3\u5c55\u5b9e\u73b0\u7c7b return getDefaultExtension(); } // Holder\uff0c\u987e\u540d\u601d\u4e49\uff0c\u7528\u4e8e\u6301\u6709\u76ee\u6807\u5bf9\u8c61 Holder Object holder = cachedInstances.get(name); if (holder == null) { cachedInstances.putIfAbsent(name, new Holder Object ()); holder = cachedInstances.get(name); } Object instance = holder.get(); // \u53cc\u91cd\u68c0\u67e5 if (instance == null) { synchronized (holder) { instance = holder.get(); if (instance == null) { // \u521b\u5efa\u62d3\u5c55\u5b9e\u4f8b instance = createExtension(name); // \u8bbe\u7f6e\u5b9e\u4f8b\u5230 holder \u4e2d holder.set(instance); } } } return (T) instance; } \u4e0a\u9762\u4ee3\u7801\u7684\u903b\u8f91\u6bd4\u8f83\u7b80\u5355\uff0c\u9996\u5148\u68c0\u67e5\u7f13\u5b58\uff0c\u7f13\u5b58\u672a\u547d\u4e2d\u5219\u521b\u5efa\u62d3\u5c55\u5bf9\u8c61\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u521b\u5efa\u62d3\u5c55\u5bf9\u8c61\u7684\u8fc7\u7a0b\u662f\u600e\u6837\u7684\u3002 private T createExtension(String name) { // \u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u52a0\u8f7d\u6240\u6709\u7684\u62d3\u5c55\u7c7b\uff0c\u53ef\u5f97\u5230\u201c\u914d\u7f6e\u9879\u540d\u79f0\u201d\u5230\u201c\u914d\u7f6e\u7c7b\u201d\u7684\u6620\u5c04\u5173\u7cfb\u8868 Class ? clazz = getExtensionClasses().get(name); if (clazz == null) { throw findException(name); } try { T instance = (T) EXTENSION_INSTANCES.get(clazz); if (instance == null) { // \u901a\u8fc7\u53cd\u5c04\u521b\u5efa\u5b9e\u4f8b EXTENSION_INSTANCES.putIfAbsent(clazz, clazz.newInstance()); instance = (T) EXTENSION_INSTANCES.get(clazz); } // \u5411\u5b9e\u4f8b\u4e2d\u6ce8\u5165\u4f9d\u8d56 injectExtension(instance); Set Class ? wrapperClasses = cachedWrapperClasses; if (wrapperClasses != null !wrapperClasses.isEmpty()) { // \u5faa\u73af\u521b\u5efa Wrapper \u5b9e\u4f8b for (Class ? wrapperClass : wrapperClasses) { // \u5c06\u5f53\u524d instance \u4f5c\u4e3a\u53c2\u6570\u4f20\u7ed9 Wrapper \u7684\u6784\u9020\u65b9\u6cd5\uff0c\u5e76\u901a\u8fc7\u53cd\u5c04\u521b\u5efa Wrapper \u5b9e\u4f8b\u3002 // \u7136\u540e\u5411 Wrapper \u5b9e\u4f8b\u4e2d\u6ce8\u5165\u4f9d\u8d56\uff0c\u6700\u540e\u5c06 Wrapper \u5b9e\u4f8b\u518d\u6b21\u8d4b\u503c\u7ed9 instance \u53d8\u91cf instance = injectExtension( (T) wrapperClass.getConstructor(type).newInstance(instance)); } } return instance; } catch (Throwable t) { throw new IllegalStateException( ... ); } } createExtension \u65b9\u6cd5\u7684\u903b\u8f91\u7a0d\u590d\u6742\u4e00\u4e0b\uff0c\u5305\u542b\u4e86\u5982\u4e0b\u7684\u6b65\u9aa4\uff1a \u901a\u8fc7 getExtensionClasses \u83b7\u53d6\u6240\u6709\u7684\u62d3\u5c55\u7c7b \u901a\u8fc7\u53cd\u5c04\u521b\u5efa\u62d3\u5c55\u5bf9\u8c61 \u5411\u62d3\u5c55\u5bf9\u8c61\u4e2d\u6ce8\u5165\u4f9d\u8d56 \u5c06\u62d3\u5c55\u5bf9\u8c61\u5305\u88f9\u5728\u76f8\u5e94\u7684 Wrapper \u5bf9\u8c61\u4e2d \u4ee5\u4e0a\u6b65\u9aa4\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u6b65\u9aa4\u662f\u52a0\u8f7d\u62d3\u5c55\u7c7b\u7684\u5173\u952e\uff0c\u7b2c\u4e09\u548c\u7b2c\u56db\u4e2a\u6b65\u9aa4\u662f Dubbo IOC \u4e0e AOP \u7684\u5177\u4f53\u5b9e\u73b0\u3002\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\uff0c\u5c06\u4f1a\u91cd\u70b9\u5206\u6790 getExtensionClasses \u65b9\u6cd5\u7684\u903b\u8f91\uff0c\u4ee5\u53ca\u7b80\u5355\u4ecb\u7ecd Dubbo IOC \u7684\u5177\u4f53\u5b9e\u73b0\u3002 3.1 \u83b7\u53d6\u6240\u6709\u7684\u62d3\u5c55\u7c7b \u6211\u4eec\u5728\u901a\u8fc7\u540d\u79f0\u83b7\u53d6\u62d3\u5c55\u7c7b\u4e4b\u524d\uff0c\u9996\u5148\u9700\u8981\u6839\u636e\u914d\u7f6e\u6587\u4ef6\u89e3\u6790\u51fa\u62d3\u5c55\u9879\u540d\u79f0\u5230\u62d3\u5c55\u7c7b\u7684\u6620\u5c04\u5173\u7cfb\u8868\uff08Map\\ \u540d\u79f0, \u62d3\u5c55\u7c7b>\uff09\uff0c\u4e4b\u540e\u518d\u6839\u636e\u62d3\u5c55\u9879\u540d\u79f0\u4ece\u6620\u5c04\u5173\u7cfb\u8868\u4e2d\u53d6\u51fa\u76f8\u5e94\u7684\u62d3\u5c55\u7c7b\u5373\u53ef\u3002\u76f8\u5173\u8fc7\u7a0b\u7684\u4ee3\u7801\u5206\u6790\u5982\u4e0b\uff1a private Map String, Class ? getExtensionClasses() { // \u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6\u5df2\u52a0\u8f7d\u7684\u62d3\u5c55\u7c7b Map String, Class ? classes = cachedClasses.get(); // \u53cc\u91cd\u68c0\u67e5 if (classes == null) { synchronized (cachedClasses) { classes = cachedClasses.get(); if (classes == null) { // \u52a0\u8f7d\u62d3\u5c55\u7c7b classes = loadExtensionClasses(); cachedClasses.set(classes); } } } return classes; } \u8fd9\u91cc\u4e5f\u662f\u5148\u68c0\u67e5\u7f13\u5b58\uff0c\u82e5\u7f13\u5b58\u672a\u547d\u4e2d\uff0c\u5219\u901a\u8fc7 synchronized \u52a0\u9501\u3002\u52a0\u9501\u540e\u518d\u6b21\u68c0\u67e5\u7f13\u5b58\uff0c\u5e76\u5224\u7a7a\u3002\u6b64\u65f6\u5982\u679c classes \u4ecd\u4e3a null\uff0c\u5219\u901a\u8fc7 loadExtensionClasses \u52a0\u8f7d\u62d3\u5c55\u7c7b\u3002\u4e0b\u9762\u5206\u6790 loadExtensionClasses \u65b9\u6cd5\u7684\u903b\u8f91\u3002 private Map String, Class ? loadExtensionClasses() { // \u83b7\u53d6 SPI \u6ce8\u89e3\uff0c\u8fd9\u91cc\u7684 type \u53d8\u91cf\u662f\u5728\u8c03\u7528 getExtensionLoader \u65b9\u6cd5\u65f6\u4f20\u5165\u7684 final SPI defaultAnnotation = type.getAnnotation(SPI.class); if (defaultAnnotation != null) { String value = defaultAnnotation.value(); if ((value = value.trim()).length() 0) { // \u5bf9 SPI \u6ce8\u89e3\u5185\u5bb9\u8fdb\u884c\u5207\u5206 String[] names = NAME_SEPARATOR.split(value); // \u68c0\u6d4b SPI \u6ce8\u89e3\u5185\u5bb9\u662f\u5426\u5408\u6cd5\uff0c\u4e0d\u5408\u6cd5\u5219\u629b\u51fa\u5f02\u5e38 if (names.length 1) { throw new IllegalStateException( more than 1 default extension name on extension... ); } // \u8bbe\u7f6e\u9ed8\u8ba4\u540d\u79f0\uff0c\u53c2\u8003 getDefaultExtension \u65b9\u6cd5 if (names.length == 1) { cachedDefaultName = names[0]; } } } Map String, Class ? extensionClasses = new HashMap String, Class ? (); // \u52a0\u8f7d\u6307\u5b9a\u6587\u4ef6\u5939\u4e0b\u7684\u914d\u7f6e\u6587\u4ef6 loadDirectory(extensionClasses, DUBBO_INTERNAL_DIRECTORY); loadDirectory(extensionClasses, DUBBO_DIRECTORY); loadDirectory(extensionClasses, SERVICES_DIRECTORY); return extensionClasses; } loadExtensionClasses \u65b9\u6cd5\u603b\u5171\u505a\u4e86\u4e24\u4ef6\u4e8b\u60c5\uff0c\u4e00\u662f\u5bf9 SPI \u6ce8\u89e3\u8fdb\u884c\u89e3\u6790\uff0c\u4e8c\u662f\u8c03\u7528 loadDirectory \u65b9\u6cd5\u52a0\u8f7d\u6307\u5b9a\u6587\u4ef6\u5939\u914d\u7f6e\u6587\u4ef6\u3002SPI \u6ce8\u89e3\u89e3\u6790\u8fc7\u7a0b\u6bd4\u8f83\u7b80\u5355\uff0c\u65e0\u9700\u591a\u8bf4\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b loadDirectory \u505a\u4e86\u54ea\u4e9b\u4e8b\u60c5\u3002 private void loadDirectory(Map String, Class ? extensionClasses, String dir) { // fileName = \u6587\u4ef6\u5939\u8def\u5f84 + type \u5168\u9650\u5b9a\u540d String fileName = dir + type.getName(); try { Enumeration java.net.URL urls; ClassLoader classLoader = findClassLoader(); // \u6839\u636e\u6587\u4ef6\u540d\u52a0\u8f7d\u6240\u6709\u7684\u540c\u540d\u6587\u4ef6 if (classLoader != null) { urls = classLoader.getResources(fileName); } else { urls = ClassLoader.getSystemResources(fileName); } if (urls != null) { while (urls.hasMoreElements()) { java.net.URL resourceURL = urls.nextElement(); // \u52a0\u8f7d\u8d44\u6e90 loadResource(extensionClasses, classLoader, resourceURL); } } } catch (Throwable t) { logger.error( ... ); } } loadDirectory \u65b9\u6cd5\u5148\u901a\u8fc7 classLoader \u83b7\u53d6\u6240\u6709\u8d44\u6e90\u94fe\u63a5\uff0c\u7136\u540e\u518d\u901a\u8fc7 loadResource \u65b9\u6cd5\u52a0\u8f7d\u8d44\u6e90\u3002\u6211\u4eec\u7ee7\u7eed\u8ddf\u4e0b\u53bb\uff0c\u770b\u4e00\u4e0b loadResource \u65b9\u6cd5\u7684\u5b9e\u73b0\u3002 private void loadResource(Map String, Class ? extensionClasses, ClassLoader classLoader, java.net.URL resourceURL) { try { BufferedReader reader = new BufferedReader( new InputStreamReader(resourceURL.openStream(), utf-8 )); try { String line; // \u6309\u884c\u8bfb\u53d6\u914d\u7f6e\u5185\u5bb9 while ((line = reader.readLine()) != null) { // \u5b9a\u4f4d # \u5b57\u7b26 final int ci = line.indexOf('#'); if (ci = 0) { // \u622a\u53d6 # \u4e4b\u524d\u7684\u5b57\u7b26\u4e32\uff0c# \u4e4b\u540e\u7684\u5185\u5bb9\u4e3a\u6ce8\u91ca\uff0c\u9700\u8981\u5ffd\u7565 line = line.substring(0, ci); } line = line.trim(); if (line.length() 0) { try { String name = null; int i = line.indexOf('='); if (i 0) { // \u4ee5\u7b49\u4e8e\u53f7 = \u4e3a\u754c\uff0c\u622a\u53d6\u952e\u4e0e\u503c name = line.substring(0, i).trim(); line = line.substring(i + 1).trim(); } if (line.length() 0) { // \u52a0\u8f7d\u7c7b\uff0c\u5e76\u901a\u8fc7 loadClass \u65b9\u6cd5\u5bf9\u7c7b\u8fdb\u884c\u7f13\u5b58 loadClass(extensionClasses, resourceURL, Class.forName(line, true, classLoader), name); } } catch (Throwable t) { IllegalStateException e = new IllegalStateException( Failed to load extension class... ); } } } } finally { reader.close(); } } catch (Throwable t) { logger.error( Exception when load extension class... ); } } loadResource \u65b9\u6cd5\u7528\u4e8e\u8bfb\u53d6\u548c\u89e3\u6790\u914d\u7f6e\u6587\u4ef6\uff0c\u5e76\u901a\u8fc7\u53cd\u5c04\u52a0\u8f7d\u7c7b\uff0c\u6700\u540e\u8c03\u7528 loadClass \u65b9\u6cd5\u8fdb\u884c\u5176\u4ed6\u64cd\u4f5c\u3002loadClass \u65b9\u6cd5\u7528\u4e8e\u4e3b\u8981\u7528\u4e8e\u64cd\u4f5c\u7f13\u5b58\uff0c\u8be5\u65b9\u6cd5\u7684\u903b\u8f91\u5982\u4e0b\uff1a private void loadClass(Map String, Class ? extensionClasses, java.net.URL resourceURL, Class ? clazz, String name) throws NoSuchMethodException { if (!type.isAssignableFrom(clazz)) { throw new IllegalStateException( ... ); } // \u68c0\u6d4b\u76ee\u6807\u7c7b\u4e0a\u662f\u5426\u6709 Adaptive \u6ce8\u89e3 if (clazz.isAnnotationPresent(Adaptive.class)) { if (cachedAdaptiveClass == null) { // \u8bbe\u7f6e cachedAdaptiveClass\u7f13\u5b58 cachedAdaptiveClass = clazz; } else if (!cachedAdaptiveClass.equals(clazz)) { throw new IllegalStateException( ... ); } // \u68c0\u6d4b clazz \u662f\u5426\u662f Wrapper \u7c7b\u578b } else if (isWrapperClass(clazz)) { Set Class ? wrappers = cachedWrapperClasses; if (wrappers == null) { cachedWrapperClasses = new ConcurrentHashSet Class ? (); wrappers = cachedWrapperClasses; } // \u5b58\u50a8 clazz \u5230 cachedWrapperClasses \u7f13\u5b58\u4e2d wrappers.add(clazz); // \u7a0b\u5e8f\u8fdb\u5165\u6b64\u5206\u652f\uff0c\u8868\u660e clazz \u662f\u4e00\u4e2a\u666e\u901a\u7684\u62d3\u5c55\u7c7b } else { // \u68c0\u6d4b clazz \u662f\u5426\u6709\u9ed8\u8ba4\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5219\u629b\u51fa\u5f02\u5e38 clazz.getConstructor(); if (name == null || name.length() == 0) { // \u5982\u679c name \u4e3a\u7a7a\uff0c\u5219\u5c1d\u8bd5\u4ece Extension \u6ce8\u89e3\u4e2d\u83b7\u53d6 name\uff0c\u6216\u4f7f\u7528\u5c0f\u5199\u7684\u7c7b\u540d\u4f5c\u4e3a name name = findAnnotationName(clazz); if (name.length() == 0) { throw new IllegalStateException( ... ); } } // \u5207\u5206 name String[] names = NAME_SEPARATOR.split(name); if (names != null names.length 0) { Activate activate = clazz.getAnnotation(Activate.class); if (activate != null) { // \u5982\u679c\u7c7b\u4e0a\u6709 Activate \u6ce8\u89e3\uff0c\u5219\u4f7f\u7528 names \u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u952e\uff0c // \u5b58\u50a8 name \u5230 Activate \u6ce8\u89e3\u5bf9\u8c61\u7684\u6620\u5c04\u5173\u7cfb cachedActivates.put(names[0], activate); } for (String n : names) { if (!cachedNames.containsKey(clazz)) { // \u5b58\u50a8 Class \u5230\u540d\u79f0\u7684\u6620\u5c04\u5173\u7cfb cachedNames.put(clazz, n); } Class ? c = extensionClasses.get(n); if (c == null) { // \u5b58\u50a8\u540d\u79f0\u5230 Class \u7684\u6620\u5c04\u5173\u7cfb extensionClasses.put(n, clazz); } else if (c != clazz) { throw new IllegalStateException( ... ); } } } } } \u5982\u4e0a\uff0cloadClass \u65b9\u6cd5\u64cd\u4f5c\u4e86\u4e0d\u540c\u7684\u7f13\u5b58\uff0c\u6bd4\u5982 cachedAdaptiveClass\u3001cachedWrapperClasses \u548c cachedNames \u7b49\u7b49\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8be5\u65b9\u6cd5\u6ca1\u6709\u5176\u4ed6\u4ec0\u4e48\u903b\u8f91\u4e86\u3002 \u5230\u6b64\uff0c\u5173\u4e8e\u7f13\u5b58\u7c7b\u52a0\u8f7d\u7684\u8fc7\u7a0b\u5c31\u5206\u6790\u5b8c\u4e86\u3002\u6574\u4e2a\u8fc7\u7a0b\u6ca1\u4ec0\u4e48\u7279\u522b\u590d\u6742\u7684\u5730\u65b9\uff0c\u5927\u5bb6\u6309\u90e8\u5c31\u73ed\u7684\u5206\u6790\u5373\u53ef\uff0c\u4e0d\u61c2\u7684\u5730\u65b9\u53ef\u4ee5\u8c03\u8bd5\u4e00\u4e0b\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6765\u804a\u804a Dubbo IOC \u65b9\u9762\u7684\u5185\u5bb9\u3002 3.2 Dubbo IOC Dubbo IOC \u662f\u901a\u8fc7 setter \u65b9\u6cd5\u6ce8\u5165\u4f9d\u8d56\u3002Dubbo \u9996\u5148\u4f1a\u901a\u8fc7\u53cd\u5c04\u83b7\u53d6\u5230\u5b9e\u4f8b\u7684\u6240\u6709\u65b9\u6cd5\uff0c\u7136\u540e\u518d\u904d\u5386\u65b9\u6cd5\u5217\u8868\uff0c\u68c0\u6d4b\u65b9\u6cd5\u540d\u662f\u5426\u5177\u6709 setter \u65b9\u6cd5\u7279\u5f81\u3002\u82e5\u6709\uff0c\u5219\u901a\u8fc7 ObjectFactory \u83b7\u53d6\u4f9d\u8d56\u5bf9\u8c61\uff0c\u6700\u540e\u901a\u8fc7\u53cd\u5c04\u8c03\u7528 setter \u65b9\u6cd5\u5c06\u4f9d\u8d56\u8bbe\u7f6e\u5230\u76ee\u6807\u5bf9\u8c61\u4e2d\u3002\u6574\u4e2a\u8fc7\u7a0b\u5bf9\u5e94\u7684\u4ee3\u7801\u5982\u4e0b\uff1a private T injectExtension(T instance) { try { if (objectFactory != null) { // \u904d\u5386\u76ee\u6807\u7c7b\u7684\u6240\u6709\u65b9\u6cd5 for (Method method : instance.getClass().getMethods()) { // \u68c0\u6d4b\u65b9\u6cd5\u662f\u5426\u4ee5 set \u5f00\u5934\uff0c\u4e14\u65b9\u6cd5\u4ec5\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u4e14\u65b9\u6cd5\u8bbf\u95ee\u7ea7\u522b\u4e3a public if (method.getName().startsWith( set ) method.getParameterTypes().length == 1 Modifier.isPublic(method.getModifiers())) { // \u83b7\u53d6 setter \u65b9\u6cd5\u53c2\u6570\u7c7b\u578b Class ? pt = method.getParameterTypes()[0]; try { // \u83b7\u53d6\u5c5e\u6027\u540d\uff0c\u6bd4\u5982 setName \u65b9\u6cd5\u5bf9\u5e94\u5c5e\u6027\u540d name String property = method.getName().length() 3 ? method.getName().substring(3, 4).toLowerCase() + method.getName().substring(4) : ; // \u4ece ObjectFactory \u4e2d\u83b7\u53d6\u4f9d\u8d56\u5bf9\u8c61 Object object = objectFactory.getExtension(pt, property); if (object != null) { // \u901a\u8fc7\u53cd\u5c04\u8c03\u7528 setter \u65b9\u6cd5\u8bbe\u7f6e\u4f9d\u8d56 method.invoke(instance, object); } } catch (Exception e) { logger.error( fail to inject via method... ); } } } } } catch (Exception e) { logger.error(e.getMessage(), e); } return instance; } \u5728\u4e0a\u9762\u4ee3\u7801\u4e2d\uff0cobjectFactory \u53d8\u91cf\u7684\u7c7b\u578b\u4e3a AdaptiveExtensionFactory\uff0cAdaptiveExtensionFactory \u5185\u90e8\u7ef4\u62a4\u4e86\u4e00\u4e2a ExtensionFactory \u5217\u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u5176\u4ed6\u7c7b\u578b\u7684 ExtensionFactory\u3002Dubbo \u76ee\u524d\u63d0\u4f9b\u4e86\u4e24\u79cd ExtensionFactory\uff0c\u5206\u522b\u662f SpiExtensionFactory \u548c SpringExtensionFactory\u3002\u524d\u8005\u7528\u4e8e\u521b\u5efa\u81ea\u9002\u5e94\u7684\u62d3\u5c55\uff0c\u540e\u8005\u662f\u7528\u4e8e\u4ece Spring \u7684 IOC \u5bb9\u5668\u4e2d\u83b7\u53d6\u6240\u9700\u7684\u62d3\u5c55\u3002\u8fd9\u4e24\u4e2a\u7c7b\u7684\u7c7b\u7684\u4ee3\u7801\u4e0d\u662f\u5f88\u590d\u6742\uff0c\u8fd9\u91cc\u5c31\u4e0d\u4e00\u4e00\u5206\u6790\u4e86\u3002 Dubbo IOC \u76ee\u524d\u4ec5\u652f\u6301 setter \u65b9\u5f0f\u6ce8\u5165\uff0c\u603b\u7684\u6765\u8bf4\uff0c\u903b\u8f91\u6bd4\u8f83\u7b80\u5355\u6613\u61c2\u3002 4.\u603b\u7ed3 \u672c\u7bc7\u6587\u7ae0\u7b80\u5355\u5206\u522b\u4ecb\u7ecd\u4e86 Java SPI \u4e0e Dubbo SPI \u7528\u6cd5\uff0c\u5e76\u5bf9 Dubbo SPI \u7684\u52a0\u8f7d\u62d3\u5c55\u7c7b\u7684\u8fc7\u7a0b\u8fdb\u884c\u4e86\u5206\u6790\u3002\u53e6\u5916\uff0c\u5728 Dubbo SPI \u4e2d\u8fd8\u6709\u4e00\u5757\u91cd\u8981\u7684\u903b\u8f91\u8fd9\u91cc\u6ca1\u6709\u8fdb\u884c\u5206\u6790\uff0c\u5373 Dubbo SPI \u7684\u6269\u5c55\u70b9\u81ea\u9002\u5e94\u673a\u5236\u3002\u8be5\u673a\u5236\u7684\u903b\u8f91\u8f83\u4e3a\u590d\u6742\uff0c\u6211\u4eec\u5c06\u4f1a\u5728\u4e0b\u4e00\u7bc7\u6587\u7ae0\u4e2d\u8fdb\u884c\u8be6\u7ec6\u7684\u5206\u6790\u3002 \u597d\u4e86\uff0c\u672c\u7bc7\u6587\u7ae0\u5c31\u5148\u5230\u8fd9\u91cc\u4e86\u3002\u5982\u679c\u6587\u7ae0\u4e2d\u6709\u9519\u8bef\u4e0d\u59a5\u4e4b\u5904\uff0c\u6b22\u8fce\u5927\u5bb6\u63d0 issue \u8fdb\u884c\u53cd\u9988\uff0c\u6216\u8005\u63d0 pull request \u8fdb\u884c\u4fee\u6b63\u3002\u8ba9\u6211\u4eec\u643a\u624b\u5171\u5efa Dubbo \u793e\u533a\u3002","title":"Dubbo SPI"},{"location":"source_code_guide/dubbo-spi/#1","text":"SPI \u5168\u79f0\u4e3a Service Provider Interface\uff0c\u662f\u4e00\u79cd\u670d\u52a1\u53d1\u73b0\u673a\u5236\u3002SPI \u7684\u672c\u8d28\u662f\u5c06\u63a5\u53e3\u5b9e\u73b0\u7c7b\u7684\u5168\u9650\u5b9a\u540d\u914d\u7f6e\u5728\u6587\u4ef6\u4e2d\uff0c\u5e76\u7531\u670d\u52a1\u52a0\u8f7d\u5668\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\uff0c\u52a0\u8f7d\u5b9e\u73b0\u7c7b\u3002\u8fd9\u6837\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\uff0c\u52a8\u6001\u4e3a\u63a5\u53e3\u66ff\u6362\u5b9e\u73b0\u7c7b\u3002\u6b63\u56e0\u6b64\u7279\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u901a\u8fc7 SPI \u673a\u5236\u4e3a\u6211\u4eec\u7684\u7a0b\u5e8f\u63d0\u4f9b\u62d3\u5c55\u529f\u80fd\u3002SPI \u673a\u5236\u5728\u7b2c\u4e09\u65b9\u6846\u67b6\u4e2d\u4e5f\u6709\u6240\u5e94\u7528\uff0c\u6bd4\u5982 Dubbo \u5c31\u662f\u901a\u8fc7 SPI \u673a\u5236\u52a0\u8f7d\u6240\u6709\u7684\u7ec4\u4ef6\u3002\u4e0d\u8fc7\uff0cDubbo \u5e76\u672a\u4f7f\u7528 Java \u539f\u751f\u7684 SPI \u673a\u5236\uff0c\u800c\u662f\u5bf9\u5176\u8fdb\u884c\u4e86\u589e\u5f3a\uff0c\u4f7f\u5176\u80fd\u591f\u66f4\u597d\u7684\u6ee1\u8db3\u9700\u6c42\u3002\u5728 Dubbo \u4e2d\uff0cSPI \u662f\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u6a21\u5757\u3002\u57fa\u4e8e SPI\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5bf9 Dubbo \u8fdb\u884c\u62d3\u5c55\u3002\u5982\u679c\u5927\u5bb6\u60f3\u8981\u5b66\u4e60 Dubbo \u7684\u6e90\u7801\uff0cSPI \u673a\u5236\u52a1\u5fc5\u5f04\u61c2\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5148\u6765\u4e86\u89e3\u4e00\u4e0b Java SPI \u4e0e Dubbo SPI \u7684\u7528\u6cd5\uff0c\u7136\u540e\u518d\u6765\u5206\u6790 Dubbo SPI \u7684\u6e90\u7801\u3002 \u9700\u8981\u7279\u522b\u8bf4\u660e\u7684\u662f\uff0c\u672c\u7bc7\u6587\u7ae0\u4ee5\u53ca\u672c\u7cfb\u5217\u5176\u4ed6\u6587\u7ae0\u6240\u5206\u6790\u7684\u6e90\u7801\u7248\u672c\u5747\u4e3a dubbo-2.6.4 \u3002\u56e0\u6b64\u5927\u5bb6\u5728\u9605\u8bfb\u6587\u7ae0\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9700\u6ce8\u610f\u5c06\u4ee3\u7801\u7248\u672c\u5207\u6362\u5230 dubbo-2.6.4 tag \u4e0a\u3002","title":"1.\u7b80\u4ecb"},{"location":"source_code_guide/dubbo-spi/#2spi","text":"","title":"2.SPI \u793a\u4f8b"},{"location":"source_code_guide/dubbo-spi/#21-java-spi","text":"\u524d\u9762\u7b80\u5355\u4ecb\u7ecd\u4e86 SPI \u673a\u5236\u7684\u539f\u7406\uff0c\u672c\u8282\u901a\u8fc7\u4e00\u4e2a\u793a\u4f8b\u6f14\u793a Java SPI \u7684\u4f7f\u7528\u65b9\u6cd5\u3002\u9996\u5148\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3\uff0c\u540d\u79f0\u4e3a Robot\u3002 public interface Robot { void sayHello(); } \u63a5\u4e0b\u6765\u5b9a\u4e49\u4e24\u4e2a\u5b9e\u73b0\u7c7b\uff0c\u5206\u522b\u4e3a OptimusPrime \u548c Bumblebee\u3002 public class OptimusPrime implements Robot { @Override public void sayHello() { System.out.println( Hello, I am Optimus Prime. ); } } public class Bumblebee implements Robot { @Override public void sayHello() { System.out.println( Hello, I am Bumblebee. ); } } \u63a5\u4e0b\u6765 META-INF/services \u6587\u4ef6\u5939\u4e0b\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\uff0c\u540d\u79f0\u4e3a Robot \u7684\u5168\u9650\u5b9a\u540d org.apache.spi.Robot\u3002\u6587\u4ef6\u5185\u5bb9\u4e3a\u5b9e\u73b0\u7c7b\u7684\u5168\u9650\u5b9a\u7684\u7c7b\u540d\uff0c\u5982\u4e0b\uff1a org.apache.spi.OptimusPrime org.apache.spi.Bumblebee \u505a\u597d\u6240\u9700\u7684\u51c6\u5907\u5de5\u4f5c\uff0c\u63a5\u4e0b\u6765\u7f16\u5199\u4ee3\u7801\u8fdb\u884c\u6d4b\u8bd5\u3002 public class JavaSPITest { @Test public void sayHello() throws Exception { ServiceLoader Robot serviceLoader = ServiceLoader.load(Robot.class); System.out.println( Java SPI ); serviceLoader.forEach(Robot::sayHello); } } \u6700\u540e\u6765\u770b\u4e00\u4e0b\u6d4b\u8bd5\u7ed3\u679c\uff0c\u5982\u4e0b\uff1a \u4ece\u6d4b\u8bd5\u7ed3\u679c\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u7684\u4e24\u4e2a\u5b9e\u73b0\u7c7b\u88ab\u6210\u529f\u7684\u52a0\u8f7d\uff0c\u5e76\u8f93\u51fa\u4e86\u76f8\u5e94\u7684\u5185\u5bb9\u3002\u5173\u4e8e Java SPI \u7684\u6f14\u793a\u5148\u5230\u8fd9\u91cc\uff0c\u63a5\u4e0b\u6765\u6f14\u793a Dubbo SPI\u3002","title":"2.1  Java SPI \u793a\u4f8b"},{"location":"source_code_guide/dubbo-spi/#22-dubbo-spi","text":"Dubbo \u5e76\u672a\u4f7f\u7528 Java SPI\uff0c\u800c\u662f\u91cd\u65b0\u5b9e\u73b0\u4e86\u4e00\u5957\u529f\u80fd\u66f4\u5f3a\u7684 SPI \u673a\u5236\u3002Dubbo SPI \u7684\u76f8\u5173\u903b\u8f91\u88ab\u5c01\u88c5\u5728\u4e86 ExtensionLoader \u7c7b\u4e2d\uff0c\u901a\u8fc7 ExtensionLoader\uff0c\u6211\u4eec\u53ef\u4ee5\u52a0\u8f7d\u6307\u5b9a\u7684\u5b9e\u73b0\u7c7b\u3002Dubbo SPI \u6240\u9700\u7684\u914d\u7f6e\u6587\u4ef6\u9700\u653e\u7f6e\u5728 META-INF/dubbo \u8def\u5f84\u4e0b\uff0c\u914d\u7f6e\u5185\u5bb9\u5982\u4e0b\u3002 optimusPrime = org.apache.spi.OptimusPrime bumblebee = org.apache.spi.Bumblebee \u4e0e Java SPI \u5b9e\u73b0\u7c7b\u914d\u7f6e\u4e0d\u540c\uff0cDubbo SPI \u662f\u901a\u8fc7\u952e\u503c\u5bf9\u7684\u65b9\u5f0f\u8fdb\u884c\u914d\u7f6e\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u6309\u9700\u52a0\u8f7d\u6307\u5b9a\u7684\u5b9e\u73b0\u7c7b\u3002\u53e6\u5916\uff0c\u5728\u6d4b\u8bd5 Dubbo SPI \u65f6\uff0c\u9700\u8981\u5728 Robot \u63a5\u53e3\u4e0a\u6807\u6ce8 @SPI \u6ce8\u89e3\u3002\u4e0b\u9762\u6765\u6f14\u793a Dubbo SPI \u7684\u7528\u6cd5\uff1a public class DubboSPITest { @Test public void sayHello() throws Exception { ExtensionLoader Robot extensionLoader = ExtensionLoader.getExtensionLoader(Robot.class); Robot optimusPrime = extensionLoader.getExtension( optimusPrime ); optimusPrime.sayHello(); Robot bumblebee = extensionLoader.getExtension( bumblebee ); bumblebee.sayHello(); } } \u6d4b\u8bd5\u7ed3\u679c\u5982\u4e0b\uff1a Dubbo SPI \u9664\u4e86\u652f\u6301\u6309\u9700\u52a0\u8f7d\u63a5\u53e3\u5b9e\u73b0\u7c7b\uff0c\u8fd8\u589e\u52a0\u4e86 IOC \u548c AOP \u7b49\u7279\u6027\uff0c\u8fd9\u4e9b\u7279\u6027\u5c06\u4f1a\u5728\u63a5\u4e0b\u6765\u7684\u6e90\u7801\u5206\u6790\u7ae0\u8282\u4e2d\u4e00\u4e00\u8fdb\u884c\u4ecb\u7ecd\u3002","title":"2.2 Dubbo SPI \u793a\u4f8b"},{"location":"source_code_guide/dubbo-spi/#3-dubbo-spi","text":"\u4e0a\u4e00\u7ae0\u7b80\u5355\u6f14\u793a\u4e86 Dubbo SPI \u7684\u4f7f\u7528\u65b9\u6cd5\u3002\u6211\u4eec\u9996\u5148\u901a\u8fc7 ExtensionLoader \u7684 getExtensionLoader \u65b9\u6cd5\u83b7\u53d6\u4e00\u4e2a ExtensionLoader \u5b9e\u4f8b\uff0c\u7136\u540e\u518d\u901a\u8fc7 ExtensionLoader \u7684 getExtension \u65b9\u6cd5\u83b7\u53d6\u62d3\u5c55\u7c7b\u5bf9\u8c61\u3002\u8fd9\u5176\u4e2d\uff0cgetExtensionLoader \u65b9\u6cd5\u7528\u4e8e\u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6\u4e0e\u62d3\u5c55\u7c7b\u5bf9\u5e94\u7684 ExtensionLoader\uff0c\u82e5\u7f13\u5b58\u672a\u547d\u4e2d\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b9e\u4f8b\u3002\u8be5\u65b9\u6cd5\u7684\u903b\u8f91\u6bd4\u8f83\u7b80\u5355\uff0c\u672c\u7ae0\u5c31\u4e0d\u8fdb\u884c\u5206\u6790\u4e86\u3002\u4e0b\u9762\u6211\u4eec\u4ece ExtensionLoader \u7684 getExtension \u65b9\u6cd5\u4f5c\u4e3a\u5165\u53e3\uff0c\u5bf9\u62d3\u5c55\u7c7b\u5bf9\u8c61\u7684\u83b7\u53d6\u8fc7\u7a0b\u8fdb\u884c\u8be6\u7ec6\u7684\u5206\u6790\u3002 public T getExtension(String name) { if (name == null || name.length() == 0) throw new IllegalArgumentException( Extension name == null ); if ( true .equals(name)) { // \u83b7\u53d6\u9ed8\u8ba4\u7684\u62d3\u5c55\u5b9e\u73b0\u7c7b return getDefaultExtension(); } // Holder\uff0c\u987e\u540d\u601d\u4e49\uff0c\u7528\u4e8e\u6301\u6709\u76ee\u6807\u5bf9\u8c61 Holder Object holder = cachedInstances.get(name); if (holder == null) { cachedInstances.putIfAbsent(name, new Holder Object ()); holder = cachedInstances.get(name); } Object instance = holder.get(); // \u53cc\u91cd\u68c0\u67e5 if (instance == null) { synchronized (holder) { instance = holder.get(); if (instance == null) { // \u521b\u5efa\u62d3\u5c55\u5b9e\u4f8b instance = createExtension(name); // \u8bbe\u7f6e\u5b9e\u4f8b\u5230 holder \u4e2d holder.set(instance); } } } return (T) instance; } \u4e0a\u9762\u4ee3\u7801\u7684\u903b\u8f91\u6bd4\u8f83\u7b80\u5355\uff0c\u9996\u5148\u68c0\u67e5\u7f13\u5b58\uff0c\u7f13\u5b58\u672a\u547d\u4e2d\u5219\u521b\u5efa\u62d3\u5c55\u5bf9\u8c61\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u521b\u5efa\u62d3\u5c55\u5bf9\u8c61\u7684\u8fc7\u7a0b\u662f\u600e\u6837\u7684\u3002 private T createExtension(String name) { // \u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u52a0\u8f7d\u6240\u6709\u7684\u62d3\u5c55\u7c7b\uff0c\u53ef\u5f97\u5230\u201c\u914d\u7f6e\u9879\u540d\u79f0\u201d\u5230\u201c\u914d\u7f6e\u7c7b\u201d\u7684\u6620\u5c04\u5173\u7cfb\u8868 Class ? clazz = getExtensionClasses().get(name); if (clazz == null) { throw findException(name); } try { T instance = (T) EXTENSION_INSTANCES.get(clazz); if (instance == null) { // \u901a\u8fc7\u53cd\u5c04\u521b\u5efa\u5b9e\u4f8b EXTENSION_INSTANCES.putIfAbsent(clazz, clazz.newInstance()); instance = (T) EXTENSION_INSTANCES.get(clazz); } // \u5411\u5b9e\u4f8b\u4e2d\u6ce8\u5165\u4f9d\u8d56 injectExtension(instance); Set Class ? wrapperClasses = cachedWrapperClasses; if (wrapperClasses != null !wrapperClasses.isEmpty()) { // \u5faa\u73af\u521b\u5efa Wrapper \u5b9e\u4f8b for (Class ? wrapperClass : wrapperClasses) { // \u5c06\u5f53\u524d instance \u4f5c\u4e3a\u53c2\u6570\u4f20\u7ed9 Wrapper \u7684\u6784\u9020\u65b9\u6cd5\uff0c\u5e76\u901a\u8fc7\u53cd\u5c04\u521b\u5efa Wrapper \u5b9e\u4f8b\u3002 // \u7136\u540e\u5411 Wrapper \u5b9e\u4f8b\u4e2d\u6ce8\u5165\u4f9d\u8d56\uff0c\u6700\u540e\u5c06 Wrapper \u5b9e\u4f8b\u518d\u6b21\u8d4b\u503c\u7ed9 instance \u53d8\u91cf instance = injectExtension( (T) wrapperClass.getConstructor(type).newInstance(instance)); } } return instance; } catch (Throwable t) { throw new IllegalStateException( ... ); } } createExtension \u65b9\u6cd5\u7684\u903b\u8f91\u7a0d\u590d\u6742\u4e00\u4e0b\uff0c\u5305\u542b\u4e86\u5982\u4e0b\u7684\u6b65\u9aa4\uff1a \u901a\u8fc7 getExtensionClasses \u83b7\u53d6\u6240\u6709\u7684\u62d3\u5c55\u7c7b \u901a\u8fc7\u53cd\u5c04\u521b\u5efa\u62d3\u5c55\u5bf9\u8c61 \u5411\u62d3\u5c55\u5bf9\u8c61\u4e2d\u6ce8\u5165\u4f9d\u8d56 \u5c06\u62d3\u5c55\u5bf9\u8c61\u5305\u88f9\u5728\u76f8\u5e94\u7684 Wrapper \u5bf9\u8c61\u4e2d \u4ee5\u4e0a\u6b65\u9aa4\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u6b65\u9aa4\u662f\u52a0\u8f7d\u62d3\u5c55\u7c7b\u7684\u5173\u952e\uff0c\u7b2c\u4e09\u548c\u7b2c\u56db\u4e2a\u6b65\u9aa4\u662f Dubbo IOC \u4e0e AOP \u7684\u5177\u4f53\u5b9e\u73b0\u3002\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\uff0c\u5c06\u4f1a\u91cd\u70b9\u5206\u6790 getExtensionClasses \u65b9\u6cd5\u7684\u903b\u8f91\uff0c\u4ee5\u53ca\u7b80\u5355\u4ecb\u7ecd Dubbo IOC \u7684\u5177\u4f53\u5b9e\u73b0\u3002","title":"3. Dubbo SPI \u6e90\u7801\u5206\u6790"},{"location":"source_code_guide/dubbo-spi/#31","text":"\u6211\u4eec\u5728\u901a\u8fc7\u540d\u79f0\u83b7\u53d6\u62d3\u5c55\u7c7b\u4e4b\u524d\uff0c\u9996\u5148\u9700\u8981\u6839\u636e\u914d\u7f6e\u6587\u4ef6\u89e3\u6790\u51fa\u62d3\u5c55\u9879\u540d\u79f0\u5230\u62d3\u5c55\u7c7b\u7684\u6620\u5c04\u5173\u7cfb\u8868\uff08Map\\ \u540d\u79f0, \u62d3\u5c55\u7c7b>\uff09\uff0c\u4e4b\u540e\u518d\u6839\u636e\u62d3\u5c55\u9879\u540d\u79f0\u4ece\u6620\u5c04\u5173\u7cfb\u8868\u4e2d\u53d6\u51fa\u76f8\u5e94\u7684\u62d3\u5c55\u7c7b\u5373\u53ef\u3002\u76f8\u5173\u8fc7\u7a0b\u7684\u4ee3\u7801\u5206\u6790\u5982\u4e0b\uff1a private Map String, Class ? getExtensionClasses() { // \u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6\u5df2\u52a0\u8f7d\u7684\u62d3\u5c55\u7c7b Map String, Class ? classes = cachedClasses.get(); // \u53cc\u91cd\u68c0\u67e5 if (classes == null) { synchronized (cachedClasses) { classes = cachedClasses.get(); if (classes == null) { // \u52a0\u8f7d\u62d3\u5c55\u7c7b classes = loadExtensionClasses(); cachedClasses.set(classes); } } } return classes; } \u8fd9\u91cc\u4e5f\u662f\u5148\u68c0\u67e5\u7f13\u5b58\uff0c\u82e5\u7f13\u5b58\u672a\u547d\u4e2d\uff0c\u5219\u901a\u8fc7 synchronized \u52a0\u9501\u3002\u52a0\u9501\u540e\u518d\u6b21\u68c0\u67e5\u7f13\u5b58\uff0c\u5e76\u5224\u7a7a\u3002\u6b64\u65f6\u5982\u679c classes \u4ecd\u4e3a null\uff0c\u5219\u901a\u8fc7 loadExtensionClasses \u52a0\u8f7d\u62d3\u5c55\u7c7b\u3002\u4e0b\u9762\u5206\u6790 loadExtensionClasses \u65b9\u6cd5\u7684\u903b\u8f91\u3002 private Map String, Class ? loadExtensionClasses() { // \u83b7\u53d6 SPI \u6ce8\u89e3\uff0c\u8fd9\u91cc\u7684 type \u53d8\u91cf\u662f\u5728\u8c03\u7528 getExtensionLoader \u65b9\u6cd5\u65f6\u4f20\u5165\u7684 final SPI defaultAnnotation = type.getAnnotation(SPI.class); if (defaultAnnotation != null) { String value = defaultAnnotation.value(); if ((value = value.trim()).length() 0) { // \u5bf9 SPI \u6ce8\u89e3\u5185\u5bb9\u8fdb\u884c\u5207\u5206 String[] names = NAME_SEPARATOR.split(value); // \u68c0\u6d4b SPI \u6ce8\u89e3\u5185\u5bb9\u662f\u5426\u5408\u6cd5\uff0c\u4e0d\u5408\u6cd5\u5219\u629b\u51fa\u5f02\u5e38 if (names.length 1) { throw new IllegalStateException( more than 1 default extension name on extension... ); } // \u8bbe\u7f6e\u9ed8\u8ba4\u540d\u79f0\uff0c\u53c2\u8003 getDefaultExtension \u65b9\u6cd5 if (names.length == 1) { cachedDefaultName = names[0]; } } } Map String, Class ? extensionClasses = new HashMap String, Class ? (); // \u52a0\u8f7d\u6307\u5b9a\u6587\u4ef6\u5939\u4e0b\u7684\u914d\u7f6e\u6587\u4ef6 loadDirectory(extensionClasses, DUBBO_INTERNAL_DIRECTORY); loadDirectory(extensionClasses, DUBBO_DIRECTORY); loadDirectory(extensionClasses, SERVICES_DIRECTORY); return extensionClasses; } loadExtensionClasses \u65b9\u6cd5\u603b\u5171\u505a\u4e86\u4e24\u4ef6\u4e8b\u60c5\uff0c\u4e00\u662f\u5bf9 SPI \u6ce8\u89e3\u8fdb\u884c\u89e3\u6790\uff0c\u4e8c\u662f\u8c03\u7528 loadDirectory \u65b9\u6cd5\u52a0\u8f7d\u6307\u5b9a\u6587\u4ef6\u5939\u914d\u7f6e\u6587\u4ef6\u3002SPI \u6ce8\u89e3\u89e3\u6790\u8fc7\u7a0b\u6bd4\u8f83\u7b80\u5355\uff0c\u65e0\u9700\u591a\u8bf4\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b loadDirectory \u505a\u4e86\u54ea\u4e9b\u4e8b\u60c5\u3002 private void loadDirectory(Map String, Class ? extensionClasses, String dir) { // fileName = \u6587\u4ef6\u5939\u8def\u5f84 + type \u5168\u9650\u5b9a\u540d String fileName = dir + type.getName(); try { Enumeration java.net.URL urls; ClassLoader classLoader = findClassLoader(); // \u6839\u636e\u6587\u4ef6\u540d\u52a0\u8f7d\u6240\u6709\u7684\u540c\u540d\u6587\u4ef6 if (classLoader != null) { urls = classLoader.getResources(fileName); } else { urls = ClassLoader.getSystemResources(fileName); } if (urls != null) { while (urls.hasMoreElements()) { java.net.URL resourceURL = urls.nextElement(); // \u52a0\u8f7d\u8d44\u6e90 loadResource(extensionClasses, classLoader, resourceURL); } } } catch (Throwable t) { logger.error( ... ); } } loadDirectory \u65b9\u6cd5\u5148\u901a\u8fc7 classLoader \u83b7\u53d6\u6240\u6709\u8d44\u6e90\u94fe\u63a5\uff0c\u7136\u540e\u518d\u901a\u8fc7 loadResource \u65b9\u6cd5\u52a0\u8f7d\u8d44\u6e90\u3002\u6211\u4eec\u7ee7\u7eed\u8ddf\u4e0b\u53bb\uff0c\u770b\u4e00\u4e0b loadResource \u65b9\u6cd5\u7684\u5b9e\u73b0\u3002 private void loadResource(Map String, Class ? extensionClasses, ClassLoader classLoader, java.net.URL resourceURL) { try { BufferedReader reader = new BufferedReader( new InputStreamReader(resourceURL.openStream(), utf-8 )); try { String line; // \u6309\u884c\u8bfb\u53d6\u914d\u7f6e\u5185\u5bb9 while ((line = reader.readLine()) != null) { // \u5b9a\u4f4d # \u5b57\u7b26 final int ci = line.indexOf('#'); if (ci = 0) { // \u622a\u53d6 # \u4e4b\u524d\u7684\u5b57\u7b26\u4e32\uff0c# \u4e4b\u540e\u7684\u5185\u5bb9\u4e3a\u6ce8\u91ca\uff0c\u9700\u8981\u5ffd\u7565 line = line.substring(0, ci); } line = line.trim(); if (line.length() 0) { try { String name = null; int i = line.indexOf('='); if (i 0) { // \u4ee5\u7b49\u4e8e\u53f7 = \u4e3a\u754c\uff0c\u622a\u53d6\u952e\u4e0e\u503c name = line.substring(0, i).trim(); line = line.substring(i + 1).trim(); } if (line.length() 0) { // \u52a0\u8f7d\u7c7b\uff0c\u5e76\u901a\u8fc7 loadClass \u65b9\u6cd5\u5bf9\u7c7b\u8fdb\u884c\u7f13\u5b58 loadClass(extensionClasses, resourceURL, Class.forName(line, true, classLoader), name); } } catch (Throwable t) { IllegalStateException e = new IllegalStateException( Failed to load extension class... ); } } } } finally { reader.close(); } } catch (Throwable t) { logger.error( Exception when load extension class... ); } } loadResource \u65b9\u6cd5\u7528\u4e8e\u8bfb\u53d6\u548c\u89e3\u6790\u914d\u7f6e\u6587\u4ef6\uff0c\u5e76\u901a\u8fc7\u53cd\u5c04\u52a0\u8f7d\u7c7b\uff0c\u6700\u540e\u8c03\u7528 loadClass \u65b9\u6cd5\u8fdb\u884c\u5176\u4ed6\u64cd\u4f5c\u3002loadClass \u65b9\u6cd5\u7528\u4e8e\u4e3b\u8981\u7528\u4e8e\u64cd\u4f5c\u7f13\u5b58\uff0c\u8be5\u65b9\u6cd5\u7684\u903b\u8f91\u5982\u4e0b\uff1a private void loadClass(Map String, Class ? extensionClasses, java.net.URL resourceURL, Class ? clazz, String name) throws NoSuchMethodException { if (!type.isAssignableFrom(clazz)) { throw new IllegalStateException( ... ); } // \u68c0\u6d4b\u76ee\u6807\u7c7b\u4e0a\u662f\u5426\u6709 Adaptive \u6ce8\u89e3 if (clazz.isAnnotationPresent(Adaptive.class)) { if (cachedAdaptiveClass == null) { // \u8bbe\u7f6e cachedAdaptiveClass\u7f13\u5b58 cachedAdaptiveClass = clazz; } else if (!cachedAdaptiveClass.equals(clazz)) { throw new IllegalStateException( ... ); } // \u68c0\u6d4b clazz \u662f\u5426\u662f Wrapper \u7c7b\u578b } else if (isWrapperClass(clazz)) { Set Class ? wrappers = cachedWrapperClasses; if (wrappers == null) { cachedWrapperClasses = new ConcurrentHashSet Class ? (); wrappers = cachedWrapperClasses; } // \u5b58\u50a8 clazz \u5230 cachedWrapperClasses \u7f13\u5b58\u4e2d wrappers.add(clazz); // \u7a0b\u5e8f\u8fdb\u5165\u6b64\u5206\u652f\uff0c\u8868\u660e clazz \u662f\u4e00\u4e2a\u666e\u901a\u7684\u62d3\u5c55\u7c7b } else { // \u68c0\u6d4b clazz \u662f\u5426\u6709\u9ed8\u8ba4\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5219\u629b\u51fa\u5f02\u5e38 clazz.getConstructor(); if (name == null || name.length() == 0) { // \u5982\u679c name \u4e3a\u7a7a\uff0c\u5219\u5c1d\u8bd5\u4ece Extension \u6ce8\u89e3\u4e2d\u83b7\u53d6 name\uff0c\u6216\u4f7f\u7528\u5c0f\u5199\u7684\u7c7b\u540d\u4f5c\u4e3a name name = findAnnotationName(clazz); if (name.length() == 0) { throw new IllegalStateException( ... ); } } // \u5207\u5206 name String[] names = NAME_SEPARATOR.split(name); if (names != null names.length 0) { Activate activate = clazz.getAnnotation(Activate.class); if (activate != null) { // \u5982\u679c\u7c7b\u4e0a\u6709 Activate \u6ce8\u89e3\uff0c\u5219\u4f7f\u7528 names \u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u952e\uff0c // \u5b58\u50a8 name \u5230 Activate \u6ce8\u89e3\u5bf9\u8c61\u7684\u6620\u5c04\u5173\u7cfb cachedActivates.put(names[0], activate); } for (String n : names) { if (!cachedNames.containsKey(clazz)) { // \u5b58\u50a8 Class \u5230\u540d\u79f0\u7684\u6620\u5c04\u5173\u7cfb cachedNames.put(clazz, n); } Class ? c = extensionClasses.get(n); if (c == null) { // \u5b58\u50a8\u540d\u79f0\u5230 Class \u7684\u6620\u5c04\u5173\u7cfb extensionClasses.put(n, clazz); } else if (c != clazz) { throw new IllegalStateException( ... ); } } } } } \u5982\u4e0a\uff0cloadClass \u65b9\u6cd5\u64cd\u4f5c\u4e86\u4e0d\u540c\u7684\u7f13\u5b58\uff0c\u6bd4\u5982 cachedAdaptiveClass\u3001cachedWrapperClasses \u548c cachedNames \u7b49\u7b49\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8be5\u65b9\u6cd5\u6ca1\u6709\u5176\u4ed6\u4ec0\u4e48\u903b\u8f91\u4e86\u3002 \u5230\u6b64\uff0c\u5173\u4e8e\u7f13\u5b58\u7c7b\u52a0\u8f7d\u7684\u8fc7\u7a0b\u5c31\u5206\u6790\u5b8c\u4e86\u3002\u6574\u4e2a\u8fc7\u7a0b\u6ca1\u4ec0\u4e48\u7279\u522b\u590d\u6742\u7684\u5730\u65b9\uff0c\u5927\u5bb6\u6309\u90e8\u5c31\u73ed\u7684\u5206\u6790\u5373\u53ef\uff0c\u4e0d\u61c2\u7684\u5730\u65b9\u53ef\u4ee5\u8c03\u8bd5\u4e00\u4e0b\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6765\u804a\u804a Dubbo IOC \u65b9\u9762\u7684\u5185\u5bb9\u3002","title":"3.1 \u83b7\u53d6\u6240\u6709\u7684\u62d3\u5c55\u7c7b"},{"location":"source_code_guide/dubbo-spi/#32-dubbo-ioc","text":"Dubbo IOC \u662f\u901a\u8fc7 setter \u65b9\u6cd5\u6ce8\u5165\u4f9d\u8d56\u3002Dubbo \u9996\u5148\u4f1a\u901a\u8fc7\u53cd\u5c04\u83b7\u53d6\u5230\u5b9e\u4f8b\u7684\u6240\u6709\u65b9\u6cd5\uff0c\u7136\u540e\u518d\u904d\u5386\u65b9\u6cd5\u5217\u8868\uff0c\u68c0\u6d4b\u65b9\u6cd5\u540d\u662f\u5426\u5177\u6709 setter \u65b9\u6cd5\u7279\u5f81\u3002\u82e5\u6709\uff0c\u5219\u901a\u8fc7 ObjectFactory \u83b7\u53d6\u4f9d\u8d56\u5bf9\u8c61\uff0c\u6700\u540e\u901a\u8fc7\u53cd\u5c04\u8c03\u7528 setter \u65b9\u6cd5\u5c06\u4f9d\u8d56\u8bbe\u7f6e\u5230\u76ee\u6807\u5bf9\u8c61\u4e2d\u3002\u6574\u4e2a\u8fc7\u7a0b\u5bf9\u5e94\u7684\u4ee3\u7801\u5982\u4e0b\uff1a private T injectExtension(T instance) { try { if (objectFactory != null) { // \u904d\u5386\u76ee\u6807\u7c7b\u7684\u6240\u6709\u65b9\u6cd5 for (Method method : instance.getClass().getMethods()) { // \u68c0\u6d4b\u65b9\u6cd5\u662f\u5426\u4ee5 set \u5f00\u5934\uff0c\u4e14\u65b9\u6cd5\u4ec5\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u4e14\u65b9\u6cd5\u8bbf\u95ee\u7ea7\u522b\u4e3a public if (method.getName().startsWith( set ) method.getParameterTypes().length == 1 Modifier.isPublic(method.getModifiers())) { // \u83b7\u53d6 setter \u65b9\u6cd5\u53c2\u6570\u7c7b\u578b Class ? pt = method.getParameterTypes()[0]; try { // \u83b7\u53d6\u5c5e\u6027\u540d\uff0c\u6bd4\u5982 setName \u65b9\u6cd5\u5bf9\u5e94\u5c5e\u6027\u540d name String property = method.getName().length() 3 ? method.getName().substring(3, 4).toLowerCase() + method.getName().substring(4) : ; // \u4ece ObjectFactory \u4e2d\u83b7\u53d6\u4f9d\u8d56\u5bf9\u8c61 Object object = objectFactory.getExtension(pt, property); if (object != null) { // \u901a\u8fc7\u53cd\u5c04\u8c03\u7528 setter \u65b9\u6cd5\u8bbe\u7f6e\u4f9d\u8d56 method.invoke(instance, object); } } catch (Exception e) { logger.error( fail to inject via method... ); } } } } } catch (Exception e) { logger.error(e.getMessage(), e); } return instance; } \u5728\u4e0a\u9762\u4ee3\u7801\u4e2d\uff0cobjectFactory \u53d8\u91cf\u7684\u7c7b\u578b\u4e3a AdaptiveExtensionFactory\uff0cAdaptiveExtensionFactory \u5185\u90e8\u7ef4\u62a4\u4e86\u4e00\u4e2a ExtensionFactory \u5217\u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u5176\u4ed6\u7c7b\u578b\u7684 ExtensionFactory\u3002Dubbo \u76ee\u524d\u63d0\u4f9b\u4e86\u4e24\u79cd ExtensionFactory\uff0c\u5206\u522b\u662f SpiExtensionFactory \u548c SpringExtensionFactory\u3002\u524d\u8005\u7528\u4e8e\u521b\u5efa\u81ea\u9002\u5e94\u7684\u62d3\u5c55\uff0c\u540e\u8005\u662f\u7528\u4e8e\u4ece Spring \u7684 IOC \u5bb9\u5668\u4e2d\u83b7\u53d6\u6240\u9700\u7684\u62d3\u5c55\u3002\u8fd9\u4e24\u4e2a\u7c7b\u7684\u7c7b\u7684\u4ee3\u7801\u4e0d\u662f\u5f88\u590d\u6742\uff0c\u8fd9\u91cc\u5c31\u4e0d\u4e00\u4e00\u5206\u6790\u4e86\u3002 Dubbo IOC \u76ee\u524d\u4ec5\u652f\u6301 setter \u65b9\u5f0f\u6ce8\u5165\uff0c\u603b\u7684\u6765\u8bf4\uff0c\u903b\u8f91\u6bd4\u8f83\u7b80\u5355\u6613\u61c2\u3002","title":"3.2 Dubbo IOC"},{"location":"source_code_guide/dubbo-spi/#4","text":"\u672c\u7bc7\u6587\u7ae0\u7b80\u5355\u5206\u522b\u4ecb\u7ecd\u4e86 Java SPI \u4e0e Dubbo SPI \u7528\u6cd5\uff0c\u5e76\u5bf9 Dubbo SPI \u7684\u52a0\u8f7d\u62d3\u5c55\u7c7b\u7684\u8fc7\u7a0b\u8fdb\u884c\u4e86\u5206\u6790\u3002\u53e6\u5916\uff0c\u5728 Dubbo SPI \u4e2d\u8fd8\u6709\u4e00\u5757\u91cd\u8981\u7684\u903b\u8f91\u8fd9\u91cc\u6ca1\u6709\u8fdb\u884c\u5206\u6790\uff0c\u5373 Dubbo SPI \u7684\u6269\u5c55\u70b9\u81ea\u9002\u5e94\u673a\u5236\u3002\u8be5\u673a\u5236\u7684\u903b\u8f91\u8f83\u4e3a\u590d\u6742\uff0c\u6211\u4eec\u5c06\u4f1a\u5728\u4e0b\u4e00\u7bc7\u6587\u7ae0\u4e2d\u8fdb\u884c\u8be6\u7ec6\u7684\u5206\u6790\u3002 \u597d\u4e86\uff0c\u672c\u7bc7\u6587\u7ae0\u5c31\u5148\u5230\u8fd9\u91cc\u4e86\u3002\u5982\u679c\u6587\u7ae0\u4e2d\u6709\u9519\u8bef\u4e0d\u59a5\u4e4b\u5904\uff0c\u6b22\u8fce\u5927\u5bb6\u63d0 issue \u8fdb\u884c\u53cd\u9988\uff0c\u6216\u8005\u63d0 pull request \u8fdb\u884c\u4fee\u6b63\u3002\u8ba9\u6211\u4eec\u643a\u624b\u5171\u5efa Dubbo \u793e\u533a\u3002","title":"4.\u603b\u7ed3"},{"location":"source_code_guide/export-service/","text":"1.\u7b80\u4ecb \u672c\u7bc7\u6587\u7ae0\uff0c\u6211\u4eec\u6765\u7814\u7a76\u4e00\u4e0b Dubbo \u5bfc\u51fa\u670d\u52a1\u7684\u8fc7\u7a0b\u3002Dubbo \u670d\u52a1\u5bfc\u51fa\u8fc7\u7a0b\u59cb\u4e8e Spring \u5bb9\u5668\u53d1\u5e03\u5237\u65b0\u4e8b\u4ef6\uff0cDubbo \u5728\u63a5\u6536\u5230\u4e8b\u4ef6\u540e\uff0c\u4f1a\u7acb\u5373\u6267\u884c\u670d\u52a1\u5bfc\u51fa\u903b\u8f91\u3002\u6574\u4e2a\u903b\u8f91\u5927\u81f4\u53ef\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206\uff0c\u7b2c\u4e00\u90e8\u5206\u662f\u524d\u7f6e\u5de5\u4f5c\uff0c\u4e3b\u8981\u7528\u4e8e\u68c0\u67e5\u53c2\u6570\uff0c\u7ec4\u88c5 URL\u3002\u7b2c\u4e8c\u90e8\u5206\u662f\u5bfc\u51fa\u670d\u52a1\uff0c\u5305\u542b\u5bfc\u51fa\u670d\u52a1\u5230\u672c\u5730 (JVM)\uff0c\u548c\u5bfc\u51fa\u670d\u52a1\u5230\u8fdc\u7a0b\u4e24\u4e2a\u8fc7\u7a0b\u3002\u7b2c\u4e09\u90e8\u5206\u662f\u5411\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u670d\u52a1\uff0c\u7528\u4e8e\u670d\u52a1\u53d1\u73b0\u3002\u672c\u7bc7\u6587\u7ae0\u5c06\u4f1a\u5bf9\u8fd9\u4e09\u4e2a\u90e8\u5206\u4ee3\u7801\u8fdb\u884c\u8be6\u7ec6\u7684\u5206\u6790\u3002 2.\u6e90\u7801\u5206\u6790 \u670d\u52a1\u5bfc\u51fa\u7684\u5165\u53e3\u65b9\u6cd5\u662f ServiceBean \u7684 onApplicationEvent\u3002onApplicationEvent \u662f\u4e00\u4e2a\u4e8b\u4ef6\u54cd\u5e94\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u4f1a\u5728\u6536\u5230 Spring \u4e0a\u4e0b\u6587\u5237\u65b0\u4e8b\u4ef6\u540e\u6267\u884c\u670d\u52a1\u5bfc\u51fa\u64cd\u4f5c\u3002\u65b9\u6cd5\u4ee3\u7801\u5982\u4e0b\uff1a public void onApplicationEvent(ContextRefreshedEvent event) { // \u662f\u5426\u6709\u5ef6\u8fdf\u5bfc\u51fa \u662f\u5426\u5df2\u5bfc\u51fa \u662f\u4e0d\u662f\u5df2\u88ab\u53d6\u6d88\u5bfc\u51fa if (isDelay() !isExported() !isUnexported()) { // \u5bfc\u51fa\u670d\u52a1 export(); } } \u8fd9\u4e2a\u65b9\u6cd5\u9996\u5148\u4f1a\u6839\u636e\u6761\u4ef6\u51b3\u5b9a\u662f\u5426\u5bfc\u51fa\u670d\u52a1\uff0c\u6bd4\u5982\u6709\u4e9b\u670d\u52a1\u8bbe\u7f6e\u4e86\u5ef6\u65f6\u5bfc\u51fa\uff0c\u90a3\u4e48\u6b64\u65f6\u5c31\u4e0d\u5e94\u8be5\u5728\u6b64\u5904\u5bfc\u51fa\u3002\u8fd8\u6709\u4e00\u4e9b\u670d\u52a1\u5df2\u7ecf\u88ab\u5bfc\u51fa\u4e86\uff0c\u6216\u8005\u5f53\u524d\u670d\u52a1\u88ab\u53d6\u6d88\u5bfc\u51fa\u4e86\uff0c\u6b64\u65f6\u4e5f\u4e0d\u80fd\u518d\u6b21\u5bfc\u51fa\u76f8\u5173\u670d\u52a1\u3002\u6ce8\u610f\u8fd9\u91cc\u7684 isDelay \u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5b57\u9762\u610f\u601d\u662f\u201c\u662f\u5426\u5ef6\u8fdf\u5bfc\u51fa\u670d\u52a1\u201d\uff0c\u8fd4\u56de true \u8868\u793a\u5ef6\u8fdf\u5bfc\u51fa\uff0cfalse \u8868\u793a\u4e0d\u5ef6\u8fdf\u5bfc\u51fa\u3002\u4f46\u662f\u8be5\u65b9\u6cd5\u771f\u5b9e\u610f\u601d\u5374\u5e76\u975e\u5982\u6b64\uff0c\u5f53\u65b9\u6cd5\u8fd4\u56de true \u65f6\uff0c\u8868\u793a\u65e0\u9700\u5ef6\u8fdf\u5bfc\u51fa\u3002\u8fd4\u56de false \u65f6\uff0c\u8868\u793a\u9700\u8981\u5ef6\u8fdf\u5bfc\u51fa\u3002\u4e0e\u5b57\u9762\u610f\u601d\u6070\u6070\u76f8\u53cd\uff0c\u8fd9\u4e2a\u9700\u8981\u5927\u5bb6\u6ce8\u610f\u4e00\u4e0b\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u65b9\u6cd5\u7684\u903b\u8f91\u3002 // -\u2606- ServiceBean private boolean isDelay() { // \u83b7\u53d6 delay Integer delay = getDelay(); ProviderConfig provider = getProvider(); if (delay == null provider != null) { // \u5982\u679c\u524d\u9762\u83b7\u53d6\u7684 delay \u4e3a\u7a7a\uff0c\u8fd9\u91cc\u7ee7\u7eed\u83b7\u53d6 delay = provider.getDelay(); } // \u5224\u65ad delay \u662f\u5426\u4e3a\u7a7a\uff0c\u6216\u8005\u7b49\u4e8e -1 return supportedApplicationListener (delay == null || delay == -1); } \u6682\u65f6\u5ffd\u7565 supportedApplicationListener \u8fd9\u4e2a\u6761\u4ef6\uff0c\u5f53 delay \u4e3a\u7a7a\uff0c\u6216\u8005\u7b49\u4e8e-1\u65f6\uff0c\u8be5\u65b9\u6cd5\u8fd4\u56de true\uff0c\u800c\u4e0d\u662f false\u3002\u8fd9\u4e2a\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u8ba9\u4eba\u6709\u70b9\u56f0\u60d1\u3002\u8be5\u65b9\u6cd5\u76ee\u524d\u5df2\u88ab\u91cd\u6784\uff0c\u8be6\u7ec6\u8bf7\u53c2\u8003 dubbo #2686 \u3002 \u73b0\u5728\u89e3\u91ca\u4e00\u4e0b supportedApplicationListener \u53d8\u91cf\u542b\u4e49\uff0c\u8be5\u53d8\u91cf\u7528\u4e8e\u8868\u793a\u5f53\u524d\u7684 Spring \u5bb9\u5668\u662f\u5426\u652f\u6301 ApplicationListener\uff0c\u8fd9\u4e2a\u503c\u521d\u59cb\u4e3a false\u3002\u5728 Spring \u5bb9\u5668\u5c06\u81ea\u5df1\u8bbe\u7f6e\u5230 ServiceBean \u4e2d\u65f6\uff0cServiceBean \u7684 setApplicationContext \u65b9\u6cd5\u4f1a\u68c0\u6d4b Spring \u5bb9\u5668\u662f\u5426\u652f\u6301 ApplicationListener\u3002\u82e5\u652f\u6301\uff0c\u5219\u5c06 supportedApplicationListener \u7f6e\u4e3a true\u3002ServiceBean \u662f Dubbo \u4e0e Spring \u6846\u67b6\u8fdb\u884c\u6574\u5408\u7684\u5173\u952e\uff0c\u53ef\u4ee5\u770b\u505a\u662f\u4e24\u4e2a\u6846\u67b6\u4e4b\u95f4\u7684\u6865\u6881\u3002\u5177\u6709\u540c\u6837\u4f5c\u7528\u7684\u7c7b\u8fd8\u6709 ReferenceBean\u3002 \u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86 Dubbo \u670d\u52a1\u5bfc\u51fa\u8fc7\u7a0b\u7684\u8d77\u70b9\uff0c\u63a5\u4e0b\u6765\u5bf9\u670d\u52a1\u5bfc\u51fa\u7684\u524d\u7f6e\u903b\u8f91\u8fdb\u884c\u5206\u6790\u3002 2.1 \u524d\u7f6e\u5de5\u4f5c \u524d\u7f6e\u5de5\u4f5c\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u90e8\u5206\uff0c\u5206\u522b\u662f\u914d\u7f6e\u68c0\u67e5\uff0c\u4ee5\u53ca URL \u88c5\u914d\u3002\u5728\u5bfc\u51fa\u670d\u52a1\u4e4b\u524d\uff0cDubbo \u9700\u8981\u68c0\u67e5\u7528\u6237\u7684\u914d\u7f6e\u662f\u5426\u5408\u7406\uff0c\u6216\u8005\u4e3a\u7528\u6237\u8865\u5145\u7f3a\u7701\u914d\u7f6e\u3002\u914d\u7f6e\u68c0\u67e5\u5b8c\u6210\u540e\uff0c\u63a5\u4e0b\u6765\u9700\u8981\u6839\u636e\u8fd9\u4e9b\u914d\u7f6e\u7ec4\u88c5 URL\u3002\u5728 Dubbo \u4e2d\uff0cURL \u7684\u4f5c\u7528\u5341\u5206\u91cd\u8981\u3002Dubbo \u4f7f\u7528 URL \u4f5c\u4e3a\u914d\u7f6e\u8f7d\u4f53\uff0c\u6240\u6709\u7684\u62d3\u5c55\u70b9\u90fd\u662f\u901a\u8fc7 URL \u83b7\u53d6\u914d\u7f6e\u3002\u8fd9\u4e00\u70b9\uff0c\u5b98\u65b9\u6587\u6863\u4e2d\u6709\u6240\u8bf4\u660e\u3002 \u91c7\u7528 URL \u4f5c\u4e3a\u914d\u7f6e\u4fe1\u606f\u7684\u7edf\u4e00\u683c\u5f0f\uff0c\u6240\u6709\u6269\u5c55\u70b9\u90fd\u901a\u8fc7\u4f20\u9012 URL \u643a\u5e26\u914d\u7f6e\u4fe1\u606f\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5148\u6765\u5206\u6790\u914d\u7f6e\u68c0\u67e5\u90e8\u5206\u7684\u6e90\u7801\uff0c\u968f\u540e\u518d\u6765\u5206\u6790 URL \u7ec4\u88c5\u90e8\u5206\u7684\u6e90\u7801\u3002 2.1.1 \u68c0\u67e5\u914d\u7f6e \u672c\u8282\u6211\u4eec\u63a5\u7740\u524d\u9762\u7684\u6e90\u7801\u5411\u4e0b\u5206\u6790\uff0c\u524d\u9762\u8bf4\u8fc7 onApplicationEvent \u65b9\u6cd5\u5728\u7ecf\u8fc7\u4e00\u4e9b\u5224\u65ad\u540e\uff0c\u4f1a\u51b3\u5b9a\u662f\u5426\u8c03\u7528 export \u65b9\u6cd5\u5bfc\u51fa\u670d\u52a1\u3002\u90a3\u4e48\u4e0b\u9762\u6211\u4eec\u4ece export \u65b9\u6cd5\u5f00\u59cb\u8fdb\u884c\u5206\u6790\uff0c\u5982\u4e0b\uff1a public synchronized void export() { if (provider != null) { // \u83b7\u53d6 export \u548c delay \u914d\u7f6e if (export == null) { export = provider.getExport(); } if (delay == null) { delay = provider.getDelay(); } } // \u5982\u679c export \u4e3a false\uff0c\u5219\u4e0d\u5bfc\u51fa\u670d\u52a1 if (export != null !export) { return; } // delay 0\uff0c\u5ef6\u65f6\u5bfc\u51fa\u670d\u52a1 if (delay != null delay 0) { delayExportExecutor.schedule(new Runnable() { @Override public void run() { doExport(); } }, delay, TimeUnit.MILLISECONDS); // \u7acb\u5373\u5bfc\u51fa\u670d\u52a1 } else { doExport(); } } export \u65b9\u6cd5\u5bf9\u4e24\u9879\u914d\u7f6e\u8fdb\u884c\u4e86\u68c0\u67e5\uff0c\u5e76\u6839\u636e\u914d\u7f6e\u6267\u884c\u76f8\u5e94\u7684\u52a8\u4f5c\u3002\u9996\u5148\u662f export \u914d\u7f6e\uff0c\u8fd9\u4e2a\u914d\u7f6e\u51b3\u5b9a\u4e86\u662f\u5426\u5bfc\u51fa\u670d\u52a1\u3002\u6709\u65f6\u5019\u6211\u4eec\u53ea\u662f\u60f3\u672c\u5730\u542f\u52a8\u670d\u52a1\u8fdb\u884c\u4e00\u4e9b\u8c03\u8bd5\u5de5\u4f5c\uff0c\u6211\u4eec\u5e76\u4e0d\u5e0c\u671b\u628a\u672c\u5730\u542f\u52a8\u7684\u670d\u52a1\u66b4\u9732\u51fa\u53bb\u7ed9\u522b\u4eba\u8c03\u7528\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u53ef\u901a\u8fc7\u914d\u7f6e export \u7981\u6b62\u670d\u52a1\u5bfc\u51fa\uff0c\u6bd4\u5982\uff1a dubbo:provider export= false / delay \u914d\u7f6e\u987e\u540d\u601d\u4e49\uff0c\u7528\u4e8e\u5ef6\u8fdf\u5bfc\u51fa\u670d\u52a1\uff0c\u8fd9\u4e2a\u5c31\u4e0d\u5206\u6790\u4e86\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u7ee7\u7eed\u5206\u6790\u6e90\u7801\uff0c\u8fd9\u6b21\u8981\u5206\u6790\u7684\u662f doExport \u65b9\u6cd5\u3002 protected synchronized void doExport() { if (unexported) { throw new IllegalStateException( Already unexported! ); } if (exported) { return; } exported = true; // \u68c0\u6d4b interfaceName \u662f\u5426\u5408\u6cd5 if (interfaceName == null || interfaceName.length() == 0) { throw new IllegalStateException( interface not allow null! ); } // \u68c0\u6d4b provider \u662f\u5426\u4e3a\u7a7a\uff0c\u4e3a\u7a7a\u5219\u65b0\u5efa\u4e00\u4e2a\uff0c\u5e76\u901a\u8fc7\u7cfb\u7edf\u53d8\u91cf\u4e3a\u5176\u521d\u59cb\u5316 checkDefault(); // \u4e0b\u9762\u51e0\u4e2a if \u8bed\u53e5\u7528\u4e8e\u68c0\u6d4b provider\u3001application \u7b49\u6838\u5fc3\u914d\u7f6e\u7c7b\u5bf9\u8c61\u662f\u5426\u4e3a\u7a7a\uff0c // \u82e5\u4e3a\u7a7a\uff0c\u5219\u5c1d\u8bd5\u4ece\u5176\u4ed6\u914d\u7f6e\u7c7b\u5bf9\u8c61\u4e2d\u83b7\u53d6\u76f8\u5e94\u7684\u5b9e\u4f8b\u3002 if (provider != null) { if (application == null) { application = provider.getApplication(); } if (module == null) { module = provider.getModule(); } if (registries == null) {...} if (monitor == null) {...} if (protocols == null) {...} } if (module != null) { if (registries == null) { registries = module.getRegistries(); } if (monitor == null) {...} } if (application != null) { if (registries == null) { registries = application.getRegistries(); } if (monitor == null) {...} } // \u68c0\u6d4b ref \u662f\u5426\u4e3a\u6cdb\u5316\u670d\u52a1\u7c7b\u578b if (ref instanceof GenericService) { // \u8bbe\u7f6e interfaceClass \u4e3a GenericService.class interfaceClass = GenericService.class; if (StringUtils.isEmpty(generic)) { // \u8bbe\u7f6e generic = true generic = Boolean.TRUE.toString(); } // ref \u975e GenericService \u7c7b\u578b } else { try { interfaceClass = Class.forName(interfaceName, true, Thread.currentThread() .getContextClassLoader()); } catch (ClassNotFoundException e) { throw new IllegalStateException(e.getMessage(), e); } // \u5bf9 interfaceClass\uff0c\u4ee5\u53ca dubbo:method \u6807\u7b7e\u4e2d\u7684\u5fc5\u8981\u5b57\u6bb5\u8fdb\u884c\u68c0\u67e5 checkInterfaceAndMethods(interfaceClass, methods); // \u5bf9 ref \u5408\u6cd5\u6027\u8fdb\u884c\u68c0\u6d4b checkRef(); // \u8bbe\u7f6e generic = false generic = Boolean.FALSE.toString(); } // local \u548c stub \u5728\u529f\u80fd\u5e94\u8be5\u662f\u4e00\u81f4\u7684\uff0c\u7528\u4e8e\u914d\u7f6e\u672c\u5730\u5b58\u6839 if (local != null) { if ( true .equals(local)) { local = interfaceName + Local ; } Class ? localClass; try { // \u83b7\u53d6\u672c\u5730\u5b58\u6839\u7c7b localClass = ClassHelper.forNameWithThreadContextClassLoader(local); } catch (ClassNotFoundException e) { throw new IllegalStateException(e.getMessage(), e); } // \u68c0\u6d4b\u672c\u5730\u5b58\u6839\u7c7b\u662f\u5426\u53ef\u8d4b\u503c\u7ed9\u63a5\u53e3\u7c7b\uff0c\u82e5\u4e0d\u53ef\u8d4b\u503c\u5219\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u63d0\u9192\u4f7f\u7528\u8005\u672c\u5730\u5b58\u6839\u7c7b\u7c7b\u578b\u4e0d\u5408\u6cd5 if (!interfaceClass.isAssignableFrom(localClass)) { throw new IllegalStateException( The local implementation class + localClass.getName() + not implement interface + interfaceName); } } if (stub != null) { // \u6b64\u5904\u7684\u4ee3\u7801\u548c\u4e0a\u4e00\u4e2a if \u5206\u652f\u7684\u4ee3\u7801\u57fa\u672c\u4e00\u81f4\uff0c\u8fd9\u91cc\u7701\u7565 } // \u68c0\u6d4b\u5404\u79cd\u5bf9\u8c61\u662f\u5426\u4e3a\u7a7a\uff0c\u4e3a\u7a7a\u5219\u65b0\u5efa\uff0c\u6216\u8005\u629b\u51fa\u5f02\u5e38 checkApplication(); checkRegistry(); checkProtocol(); appendProperties(this); checkStubAndMock(interfaceClass); if (path == null || path.length() == 0) { path = interfaceName; } // \u5bfc\u51fa\u670d\u52a1 doExportUrls(); // ProviderModel \u8868\u793a\u670d\u52a1\u63d0\u4f9b\u8005\u6a21\u578b\uff0c\u6b64\u5bf9\u8c61\u4e2d\u5b58\u50a8\u4e86\u4e0e\u670d\u52a1\u63d0\u4f9b\u8005\u76f8\u5173\u7684\u4fe1\u606f\u3002 // \u6bd4\u5982\u670d\u52a1\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u670d\u52a1\u5b9e\u4f8b\u7b49\u3002\u6bcf\u4e2a\u88ab\u5bfc\u51fa\u7684\u670d\u52a1\u5bf9\u5e94\u4e00\u4e2a ProviderModel\u3002 // ApplicationModel \u6301\u6709\u6240\u6709\u7684 ProviderModel\u3002 ProviderModel providerModel = new ProviderModel(getUniqueServiceName(), this, ref); ApplicationModel.initProviderModel(getUniqueServiceName(), providerModel); } \u4ee5\u4e0a\u5c31\u662f\u914d\u7f6e\u68c0\u67e5\u7684\u76f8\u5173\u5206\u6790\uff0c\u4ee3\u7801\u6bd4\u8f83\u591a\uff0c\u9700\u8981\u5927\u5bb6\u8010\u5fc3\u770b\u4e00\u4e0b\u3002\u4e0b\u9762\u5bf9\u914d\u7f6e\u68c0\u67e5\u7684\u903b\u8f91\u8fdb\u884c\u7b80\u5355\u7684\u603b\u7ed3\uff0c\u5982\u4e0b\uff1a \u68c0\u6d4b \\ dubbo:service> \u6807\u7b7e\u7684 interface \u5c5e\u6027\u5408\u6cd5\u6027\uff0c\u4e0d\u5408\u6cd5\u5219\u629b\u51fa\u5f02\u5e38 \u68c0\u6d4b ProviderConfig\u3001ApplicationConfig \u7b49\u6838\u5fc3\u914d\u7f6e\u7c7b\u5bf9\u8c61\u662f\u5426\u4e3a\u7a7a\uff0c\u82e5\u4e3a\u7a7a\uff0c\u5219\u5c1d\u8bd5\u4ece\u5176\u4ed6\u914d\u7f6e\u7c7b\u5bf9\u8c61\u4e2d\u83b7\u53d6\u76f8\u5e94\u7684\u5b9e\u4f8b\u3002 \u68c0\u6d4b\u5e76\u5904\u7406\u6cdb\u5316\u670d\u52a1\u548c\u666e\u901a\u670d\u52a1\u7c7b \u68c0\u6d4b\u672c\u5730\u5b58\u6839\u914d\u7f6e\uff0c\u5e76\u8fdb\u884c\u76f8\u5e94\u7684\u5904\u7406 \u5bf9 ApplicationConfig\u3001RegistryConfig \u7b49\u914d\u7f6e\u7c7b\u8fdb\u884c\u68c0\u6d4b\uff0c\u4e3a\u7a7a\u5219\u5c1d\u8bd5\u521b\u5efa\uff0c\u82e5\u65e0\u6cd5\u521b\u5efa\u5219\u629b\u51fa\u5f02\u5e38 \u914d\u7f6e\u68c0\u67e5\u5e76\u975e\u672c\u6587\u91cd\u70b9\uff0c\u56e0\u6b64\u8fd9\u91cc\u4e0d\u6253\u7b97\u5bf9 doExport \u65b9\u6cd5\u6240\u8c03\u7528\u7684\u65b9\u6cd5\u8fdb\u884c\u5206\u6790\uff08doExportUrls \u65b9\u6cd5\u9664\u5916\uff09\u3002\u5728\u8fd9\u4e9b\u65b9\u6cd5\u4e2d\uff0c\u9664\u4e86 appendProperties \u65b9\u6cd5\u7a0d\u5fae\u590d\u6742\u4e00\u4e9b\uff0c\u5176\u4ed6\u65b9\u6cd5\u903b\u8f91\u4e0d\u662f\u5f88\u590d\u6742\u3002\u56e0\u6b64\uff0c\u5927\u5bb6\u53ef\u81ea\u884c\u5206\u6790\u3002 2.1.2 \u591a\u534f\u8bae\u591a\u6ce8\u518c\u4e2d\u5fc3\u5bfc\u51fa\u670d\u52a1 Dubbo \u5141\u8bb8\u6211\u4eec\u4f7f\u7528\u4e0d\u540c\u7684\u534f\u8bae\u5bfc\u51fa\u670d\u52a1\uff0c\u4e5f\u5141\u8bb8\u6211\u4eec\u5411\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u670d\u52a1\u3002Dubbo \u5728 doExportUrls \u65b9\u6cd5\u4e2d\u5bf9\u591a\u534f\u8bae\uff0c\u591a\u6ce8\u518c\u4e2d\u5fc3\u8fdb\u884c\u4e86\u652f\u6301\u3002\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a private void doExportUrls() { // \u52a0\u8f7d\u6ce8\u518c\u4e2d\u5fc3\u94fe\u63a5 List URL registryURLs = loadRegistries(true); // \u904d\u5386 protocols\uff0c\u5e76\u5728\u6bcf\u4e2a\u534f\u8bae\u4e0b\u5bfc\u51fa\u670d\u52a1 for (ProtocolConfig protocolConfig : protocols) { doExportUrlsFor1Protocol(protocolConfig, registryURLs); } } \u4e0a\u9762\u4ee3\u7801\u9996\u5148\u662f\u901a\u8fc7 loadRegistries \u52a0\u8f7d\u6ce8\u518c\u4e2d\u5fc3\u94fe\u63a5\uff0c\u7136\u540e\u518d\u904d\u5386 ProtocolConfig \u96c6\u5408\u5bfc\u51fa\u6bcf\u4e2a\u670d\u52a1\u3002\u5e76\u5728\u5bfc\u51fa\u670d\u52a1\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5c06\u670d\u52a1\u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e0b loadRegistries \u65b9\u6cd5\u7684\u903b\u8f91\u3002 protected List URL loadRegistries(boolean provider) { // \u68c0\u6d4b\u662f\u5426\u5b58\u5728\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e\u7c7b\uff0c\u4e0d\u5b58\u5728\u5219\u629b\u51fa\u5f02\u5e38 checkRegistry(); List URL registryList = new ArrayList URL (); if (registries != null !registries.isEmpty()) { for (RegistryConfig config : registries) { String address = config.getAddress(); if (address == null || address.length() == 0) { // \u82e5 address \u4e3a\u7a7a\uff0c\u5219\u5c06\u5176\u8bbe\u4e3a 0.0.0.0 address = Constants.ANYHOST_VALUE; } // \u4ece\u7cfb\u7edf\u5c5e\u6027\u4e2d\u52a0\u8f7d\u6ce8\u518c\u4e2d\u5fc3\u5730\u5740 String sysaddress = System.getProperty( dubbo.registry.address ); if (sysaddress != null sysaddress.length() 0) { address = sysaddress; } // \u68c0\u6d4b address \u662f\u5426\u5408\u6cd5 if (address.length() 0 !RegistryConfig.NO_AVAILABLE.equalsIgnoreCase(address)) { Map String, String map = new HashMap String, String (); // \u6dfb\u52a0 ApplicationConfig \u4e2d\u7684\u5b57\u6bb5\u4fe1\u606f\u5230 map \u4e2d appendParameters(map, application); // \u6dfb\u52a0 RegistryConfig \u5b57\u6bb5\u4fe1\u606f\u5230 map \u4e2d appendParameters(map, config); // \u6dfb\u52a0 path\u3001pid\uff0cprotocol \u7b49\u4fe1\u606f\u5230 map \u4e2d map.put( path , RegistryService.class.getName()); map.put( dubbo , Version.getProtocolVersion()); map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis())); if (ConfigUtils.getPid() 0) { map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid())); } if (!map.containsKey( protocol )) { if (ExtensionLoader.getExtensionLoader(RegistryFactory.class).hasExtension( remote )) { map.put( protocol , remote ); } else { map.put( protocol , dubbo ); } } // \u89e3\u6790\u5f97\u5230 URL \u5217\u8868\uff0caddress \u53ef\u80fd\u5305\u542b\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3 ip\uff0c // \u56e0\u6b64\u89e3\u6790\u5f97\u5230\u7684\u662f\u4e00\u4e2a URL \u5217\u8868 List URL urls = UrlUtils.parseURLs(address, map); for (URL url : urls) { url = url.addParameter(Constants.REGISTRY_KEY, url.getProtocol()); // \u5c06 URL \u534f\u8bae\u5934\u8bbe\u7f6e\u4e3a registry url = url.setProtocol(Constants.REGISTRY_PROTOCOL); // \u901a\u8fc7\u5224\u65ad\u6761\u4ef6\uff0c\u51b3\u5b9a\u662f\u5426\u6dfb\u52a0 url \u5230 registryList \u4e2d\uff0c\u6761\u4ef6\u5982\u4e0b\uff1a // (\u670d\u52a1\u63d0\u4f9b\u8005 register = true \u6216 null) // || (\u975e\u670d\u52a1\u63d0\u4f9b\u8005 subscribe = true \u6216 null) if ((provider url.getParameter(Constants.REGISTER_KEY, true)) || (!provider url.getParameter(Constants.SUBSCRIBE_KEY, true))) { registryList.add(url); } } } } } return registryList; } loadRegistries \u65b9\u6cd5\u4e3b\u8981\u5305\u542b\u5982\u4e0b\u7684\u903b\u8f91\uff1a \u68c0\u6d4b\u662f\u5426\u5b58\u5728\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e\u7c7b\uff0c\u4e0d\u5b58\u5728\u5219\u629b\u51fa\u5f02\u5e38 \u6784\u5efa\u53c2\u6570\u6620\u5c04\u96c6\u5408\uff0c\u4e5f\u5c31\u662f map \u6784\u5efa\u6ce8\u518c\u4e2d\u5fc3\u94fe\u63a5\u5217\u8868 \u904d\u5386\u94fe\u63a5\u5217\u8868\uff0c\u5e76\u6839\u636e\u6761\u4ef6\u51b3\u5b9a\u662f\u5426\u5c06\u5176\u6dfb\u52a0\u5230 registryList \u4e2d \u5173\u4e8e\u591a\u534f\u8bae\u591a\u6ce8\u518c\u4e2d\u5fc3\u5bfc\u51fa\u670d\u52a1\u5c31\u5148\u5206\u6790\u5230\u8fd9\uff0c\u4ee3\u7801\u4e0d\u662f\u5f88\u591a\uff0c\u63a5\u4e0b\u6765\u5206\u6790 URL \u7ec4\u88c5\u8fc7\u7a0b\u3002 2.1.3 \u7ec4\u88c5 URL \u914d\u7f6e\u68c0\u67e5\u5b8c\u6bd5\u540e\uff0c\u7d27\u63a5\u7740\u8981\u505a\u7684\u4e8b\u60c5\u662f\u6839\u636e\u914d\u7f6e\uff0c\u4ee5\u53ca\u5176\u4ed6\u4e00\u4e9b\u4fe1\u606f\u7ec4\u88c5 URL\u3002\u524d\u9762\u8bf4\u8fc7\uff0cURL \u662f Dubbo \u914d\u7f6e\u7684\u8f7d\u4f53\uff0c\u901a\u8fc7 URL \u53ef\u8ba9 Dubbo \u7684\u5404\u79cd\u914d\u7f6e\u5728\u5404\u4e2a\u6a21\u5757\u4e4b\u95f4\u4f20\u9012\u3002URL \u4e4b\u4e8e Dubbo\uff0c\u72b9\u5982\u6c34\u4e4b\u4e8e\u9c7c\uff0c\u975e\u5e38\u91cd\u8981\u3002\u5927\u5bb6\u5728\u9605\u8bfb Dubbo \u670d\u52a1\u5bfc\u51fa\u76f8\u5173\u6e90\u7801\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8981\u6ce8\u610f URL \u5185\u5bb9\u7684\u53d8\u5316\u3002\u65e2\u7136 URL \u5982\u6b64\u91cd\u8981\uff0c\u90a3\u4e48\u4e0b\u9762\u6211\u4eec\u6765\u4e86\u89e3\u4e00\u4e0b URL \u7ec4\u88c5\u7684\u8fc7\u7a0b\u3002 private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List URL registryURLs) { String name = protocolConfig.getName(); // \u5982\u679c\u534f\u8bae\u540d\u4e3a\u7a7a\uff0c\u6216\u7a7a\u4e32\uff0c\u5219\u5c06\u534f\u8bae\u540d\u53d8\u91cf\u8bbe\u7f6e\u4e3a dubbo if (name == null || name.length() == 0) { name = dubbo ; } Map String, String map = new HashMap String, String (); // \u6dfb\u52a0 side\u3001\u7248\u672c\u3001\u65f6\u95f4\u6233\u4ee5\u53ca\u8fdb\u7a0b\u53f7\u7b49\u4fe1\u606f\u5230 map \u4e2d map.put(Constants.SIDE_KEY, Constants.PROVIDER_SIDE); map.put(Constants.DUBBO_VERSION_KEY, Version.getProtocolVersion()); map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis())); if (ConfigUtils.getPid() 0) { map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid())); } // \u901a\u8fc7\u53cd\u5c04\u5c06\u5bf9\u8c61\u7684\u5b57\u6bb5\u4fe1\u606f\u6dfb\u52a0\u5230 map \u4e2d appendParameters(map, application); appendParameters(map, module); appendParameters(map, provider, Constants.DEFAULT_KEY); appendParameters(map, protocolConfig); appendParameters(map, this); // methods \u4e3a MethodConfig \u96c6\u5408\uff0cMethodConfig \u4e2d\u5b58\u50a8\u4e86 dubbo:method \u6807\u7b7e\u7684\u914d\u7f6e\u4fe1\u606f if (methods != null !methods.isEmpty()) { // \u8fd9\u6bb5\u4ee3\u7801\u7528\u4e8e\u6dfb\u52a0 Callback \u914d\u7f6e\u5230 map \u4e2d\uff0c\u4ee3\u7801\u592a\u957f\uff0c\u5f85\u4f1a\u5355\u72ec\u5206\u6790 } // \u68c0\u6d4b generic \u662f\u5426\u4e3a true \uff0c\u5e76\u6839\u636e\u68c0\u6d4b\u7ed3\u679c\u5411 map \u4e2d\u6dfb\u52a0\u4e0d\u540c\u7684\u4fe1\u606f if (ProtocolUtils.isGeneric(generic)) { map.put(Constants.GENERIC_KEY, generic); map.put(Constants.METHODS_KEY, Constants.ANY_VALUE); } else { String revision = Version.getVersion(interfaceClass, version); if (revision != null revision.length() 0) { map.put( revision , revision); } // \u4e3a\u63a5\u53e3\u751f\u6210\u5305\u88f9\u7c7b Wrapper\uff0cWrapper \u4e2d\u5305\u542b\u4e86\u63a5\u53e3\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u6bd4\u5982\u63a5\u53e3\u65b9\u6cd5\u540d\u6570\u7ec4\uff0c\u5b57\u6bb5\u4fe1\u606f\u7b49 String[] methods = Wrapper.getWrapper(interfaceClass).getMethodNames(); // \u6dfb\u52a0\u65b9\u6cd5\u540d\u5230 map \u4e2d\uff0c\u5982\u679c\u5305\u542b\u591a\u4e2a\u65b9\u6cd5\u540d\uff0c\u5219\u7528\u9017\u53f7\u9694\u5f00\uff0c\u6bd4\u5982 method = init,destroy if (methods.length == 0) { logger.warn( NO method found in service interface ... ); map.put(Constants.METHODS_KEY, Constants.ANY_VALUE); } else { // \u5c06\u9017\u53f7\u4f5c\u4e3a\u5206\u9694\u7b26\u8fde\u63a5\u65b9\u6cd5\u540d\uff0c\u5e76\u5c06\u8fde\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u653e\u5165 map \u4e2d map.put(Constants.METHODS_KEY, StringUtils.join(new HashSet String (Arrays.asList(methods)), , )); } } // \u6dfb\u52a0 token \u5230 map \u4e2d if (!ConfigUtils.isEmpty(token)) { if (ConfigUtils.isDefault(token)) { // \u968f\u673a\u751f\u6210 token map.put(Constants.TOKEN_KEY, UUID.randomUUID().toString()); } else { map.put(Constants.TOKEN_KEY, token); } } // \u5224\u65ad\u534f\u8bae\u540d\u662f\u5426\u4e3a injvm if (Constants.LOCAL_PROTOCOL.equals(protocolConfig.getName())) { protocolConfig.setRegister(false); map.put( notify , false ); } // \u83b7\u53d6\u4e0a\u4e0b\u6587\u8def\u5f84 String contextPath = protocolConfig.getContextpath(); if ((contextPath == null || contextPath.length() == 0) provider != null) { contextPath = provider.getContextpath(); } // \u83b7\u53d6 host \u548c port String host = this.findConfigedHosts(protocolConfig, registryURLs, map); Integer port = this.findConfigedPorts(protocolConfig, name, map); // \u7ec4\u88c5 URL URL url = new URL(name, host, port, (contextPath == null || contextPath.length() == 0 ? : contextPath + / ) + path, map); // \u7701\u7565\u65e0\u5173\u4ee3\u7801 } \u4e0a\u9762\u7684\u4ee3\u7801\u9996\u5148\u662f\u5c06\u4e00\u4e9b\u4fe1\u606f\uff0c\u6bd4\u5982\u7248\u672c\u3001\u65f6\u95f4\u6233\u3001\u65b9\u6cd5\u540d\u4ee5\u53ca\u5404\u79cd\u914d\u7f6e\u5bf9\u8c61\u7684\u5b57\u6bb5\u4fe1\u606f\u653e\u5165\u5230 map \u4e2d\uff0cmap \u4e2d\u7684\u5185\u5bb9\u5c06\u4f5c\u4e3a URL \u7684\u67e5\u8be2\u5b57\u7b26\u4e32\u3002\u6784\u5efa\u597d map \u540e\uff0c\u7d27\u63a5\u7740\u662f\u83b7\u53d6\u4e0a\u4e0b\u6587\u8def\u5f84\u3001\u4e3b\u673a\u540d\u4ee5\u53ca\u7aef\u53e3\u53f7\u7b49\u4fe1\u606f\u3002\u6700\u540e\u5c06 map \u548c\u4e3b\u673a\u540d\u7b49\u6570\u636e\u4f20\u7ed9 URL \u6784\u9020\u65b9\u6cd5\u521b\u5efa URL \u5bf9\u8c61\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u51fa\u73b0\u7684 URL \u5e76\u975e java.net.URL\uff0c\u800c\u662f com.alibaba.dubbo.common.URL\u3002 \u4e0a\u9762\u7701\u7565\u4e86\u4e00\u6bb5\u4ee3\u7801\uff0c\u8fd9\u91cc\u7b80\u5355\u5206\u6790\u4e00\u4e0b\u3002\u8fd9\u6bb5\u4ee3\u7801\u7528\u4e8e\u68c0\u6d4b \\ dubbo:method> \u6807\u7b7e\u4e2d\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u5e76\u5c06\u76f8\u5173\u914d\u7f6e\u6dfb\u52a0\u5230 map \u4e2d\u3002\u4ee3\u7801\u5982\u4e0b\uff1a private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List URL registryURLs) { // ... // methods \u4e3a MethodConfig \u96c6\u5408\uff0cMethodConfig \u4e2d\u5b58\u50a8\u4e86 dubbo:method \u6807\u7b7e\u7684\u914d\u7f6e\u4fe1\u606f if (methods != null !methods.isEmpty()) { for (MethodConfig method : methods) { // \u6dfb\u52a0 MethodConfig \u5bf9\u8c61\u7684\u5b57\u6bb5\u4fe1\u606f\u5230 map \u4e2d\uff0c\u952e = \u65b9\u6cd5\u540d.\u5c5e\u6027\u540d\u3002 // \u6bd4\u5982\u5b58\u50a8 dubbo:method name= sayHello retries= 2 \u5bf9\u5e94\u7684 MethodConfig\uff0c // \u952e = sayHello.retries\uff0cmap = { sayHello.retries : 2, xxx : yyy } appendParameters(map, method, method.getName()); String retryKey = method.getName() + .retry ; if (map.containsKey(retryKey)) { String retryValue = map.remove(retryKey); // \u68c0\u6d4b MethodConfig retry \u662f\u5426\u4e3a false\uff0c\u82e5\u662f\uff0c\u5219\u8bbe\u7f6e\u91cd\u8bd5\u6b21\u6570\u4e3a0 if ( false .equals(retryValue)) { map.put(method.getName() + .retries , 0 ); } } // \u83b7\u53d6 ArgumentConfig \u5217\u8868 List ArgumentConfig arguments = method.getArguments(); if (arguments != null !arguments.isEmpty()) { for (ArgumentConfig argument : arguments) { // \u68c0\u6d4b type \u5c5e\u6027\u662f\u5426\u4e3a\u7a7a\uff0c\u6216\u8005\u7a7a\u4e32\uff08\u5206\u652f1 \u2b50\ufe0f\uff09 if (argument.getType() != null argument.getType().length() 0) { Method[] methods = interfaceClass.getMethods(); if (methods != null methods.length 0) { for (int i = 0; i methods.length; i++) { String methodName = methods[i].getName(); // \u6bd4\u5bf9\u65b9\u6cd5\u540d\uff0c\u67e5\u627e\u76ee\u6807\u65b9\u6cd5 if (methodName.equals(method.getName())) { Class ? [] argtypes = methods[i].getParameterTypes(); if (argument.getIndex() != -1) { // \u68c0\u6d4b ArgumentConfig \u4e2d\u7684 type \u5c5e\u6027\u4e0e\u65b9\u6cd5\u53c2\u6570\u5217\u8868 // \u4e2d\u7684\u53c2\u6570\u540d\u79f0\u662f\u5426\u4e00\u81f4\uff0c\u4e0d\u4e00\u81f4\u5219\u629b\u51fa\u5f02\u5e38(\u5206\u652f2 \u2b50\ufe0f) if (argtypes[argument.getIndex()].getName().equals(argument.getType())) { // \u6dfb\u52a0 ArgumentConfig \u5b57\u6bb5\u4fe1\u606f\u5230 map \u4e2d\uff0c // \u952e\u524d\u7f00 = \u65b9\u6cd5\u540d.index\uff0c\u6bd4\u5982: // map = { sayHello.3 : true} appendParameters(map, argument, method.getName() + . + argument.getIndex()); } else { throw new IllegalArgumentException( argument config error: ... ); } } else { // \u5206\u652f3 \u2b50\ufe0f for (int j = 0; j argtypes.length; j++) { Class ? argclazz = argtypes[j]; // \u4ece\u53c2\u6570\u7c7b\u578b\u5217\u8868\u4e2d\u67e5\u627e\u7c7b\u578b\u540d\u79f0\u4e3a argument.type \u7684\u53c2\u6570 if (argclazz.getName().equals(argument.getType())) { appendParameters(map, argument, method.getName() + . + j); if (argument.getIndex() != -1 argument.getIndex() != j) { throw new IllegalArgumentException( argument config error: ... ); } } } } } } } // \u7528\u6237\u672a\u914d\u7f6e type \u5c5e\u6027\uff0c\u4f46\u914d\u7f6e\u4e86 index \u5c5e\u6027\uff0c\u4e14 index != -1 } else if (argument.getIndex() != -1) { // \u5206\u652f4 \u2b50\ufe0f // \u6dfb\u52a0 ArgumentConfig \u5b57\u6bb5\u4fe1\u606f\u5230 map \u4e2d appendParameters(map, argument, method.getName() + . + argument.getIndex()); } else { throw new IllegalArgumentException( argument config must set index or type ); } } } } } // ... } \u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801 for \u5faa\u73af\u548c if else \u5206\u652f\u5d4c\u5957\u592a\u591a\uff0c\u5bfc\u81f4\u5c42\u6b21\u592a\u6df1\uff0c\u4e0d\u5229\u4e8e\u9605\u8bfb\uff0c\u9700\u8981\u8010\u5fc3\u770b\u4e00\u4e0b\u3002\u5927\u5bb6\u5728\u770b\u8fd9\u6bb5\u4ee3\u7801\u65f6\uff0c\u6ce8\u610f\u628a\u51e0\u4e2a\u91cd\u8981\u7684\u6761\u4ef6\u5206\u652f\u627e\u51fa\u6765\u3002\u53ea\u8981\u7406\u89e3\u4e86\u8fd9\u51e0\u4e2a\u5206\u652f\u7684\u610f\u56fe\uff0c\u5c31\u53ef\u4ee5\u5f04\u61c2\u8fd9\u6bb5\u4ee3\u7801\u3002\u8bf7\u6ce8\u610f\u4e0a\u9762\u4ee3\u7801\u4e2d\u2b50\ufe0f\u7b26\u53f7\uff0c\u8fd9\u51e0\u4e2a\u7b26\u53f7\u6807\u8bc6\u51fa\u4e864\u4e2a\u91cd\u8981\u7684\u5206\u652f\uff0c\u4e0b\u9762\u7528\u4f2a\u4ee3\u7801\u89e3\u91ca\u4e00\u4e0b\u8fd9\u51e0\u4e2a\u5206\u652f\u7684\u542b\u4e49\u3002 // \u83b7\u53d6 ArgumentConfig \u5217\u8868 for (\u904d\u5386 ArgumentConfig \u5217\u8868) { if (type \u4e0d\u4e3a null\uff0c\u4e5f\u4e0d\u4e3a\u7a7a\u4e32) { // \u5206\u652f1 1. \u901a\u8fc7\u53cd\u5c04\u83b7\u53d6 interfaceClass \u7684\u65b9\u6cd5\u5217\u8868 for (\u904d\u5386\u65b9\u6cd5\u5217\u8868) { 1. \u6bd4\u5bf9\u65b9\u6cd5\u540d\uff0c\u67e5\u627e\u76ee\u6807\u65b9\u6cd5 2. \u901a\u8fc7\u53cd\u5c04\u83b7\u53d6\u76ee\u6807\u65b9\u6cd5\u7684\u53c2\u6570\u7c7b\u578b\u6570\u7ec4 argtypes if (index != -1) { // \u5206\u652f2 1. \u4ece argtypes \u6570\u7ec4\u4e2d\u83b7\u53d6\u4e0b\u6807 index \u5904\u7684\u5143\u7d20 argType 2. \u68c0\u6d4b argType \u7684\u540d\u79f0\u4e0e ArgumentConfig \u4e2d\u7684 type \u5c5e\u6027\u662f\u5426\u4e00\u81f4 3. \u6dfb\u52a0 ArgumentConfig \u5b57\u6bb5\u4fe1\u606f\u5230 map \u4e2d\uff0c\u6216\u629b\u51fa\u5f02\u5e38 } else { // \u5206\u652f3 1. \u904d\u5386\u53c2\u6570\u7c7b\u578b\u6570\u7ec4 argtypes\uff0c\u67e5\u627e argument.type \u7c7b\u578b\u7684\u53c2\u6570 2. \u6dfb\u52a0 ArgumentConfig \u5b57\u6bb5\u4fe1\u606f\u5230 map \u4e2d } } } else if (index != -1) { // \u5206\u652f4 1. \u6dfb\u52a0 ArgumentConfig \u5b57\u6bb5\u4fe1\u606f\u5230 map \u4e2d } } \u5728\u672c\u8282\u5206\u6790\u7684\u6e90\u7801\u4e2d\uff0cappendParameters \u8fd9\u4e2a\u65b9\u6cd5\u51fa\u73b0\u7684\u6b21\u6570\u6bd4\u8f83\u591a\uff0c\u8be5\u65b9\u6cd5\u7528\u4e8e\u5c06\u5bf9\u8c61\u5b57\u6bb5\u4fe1\u606f\u6dfb\u52a0\u5230 map \u4e2d\u3002\u5b9e\u73b0\u4e0a\u5219\u662f\u901a\u8fc7\u53cd\u5c04\u83b7\u53d6\u76ee\u6807\u5bf9\u8c61\u7684 getter \u65b9\u6cd5\uff0c\u5e76\u8c03\u7528\u8be5\u65b9\u6cd5\u83b7\u53d6\u5c5e\u6027\u503c\u3002\u7136\u540e\u518d\u901a\u8fc7 getter \u65b9\u6cd5\u540d\u89e3\u6790\u51fa\u5c5e\u6027\u540d\uff0c\u6bd4\u5982\u4ece\u65b9\u6cd5\u540d getName \u4e2d\u53ef\u89e3\u6790\u51fa\u5c5e\u6027 name\u3002\u5982\u679c\u7528\u6237\u4f20\u5165\u4e86\u5c5e\u6027\u540d\u524d\u7f00\uff0c\u6b64\u65f6\u9700\u8981\u5c06\u5c5e\u6027\u540d\u52a0\u5165\u524d\u7f00\u5185\u5bb9\u3002\u6700\u540e\u5c06 \\ \u5c5e\u6027\u540d\uff0c\u5c5e\u6027\u503c> \u952e\u503c\u5bf9\u5b58\u5165\u5230 map \u4e2d\u5c31\u884c\u4e86\u3002\u9650\u4e8e\u7bc7\u5e45\u539f\u56e0\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5206\u6790 appendParameters \u65b9\u6cd5\u7684\u6e90\u7801\u4e86\uff0c\u5927\u5bb6\u8bf7\u81ea\u884c\u5206\u6790\u3002 2.2 \u5bfc\u51fa Dubbo \u670d\u52a1 \u524d\u7f6e\u5de5\u4f5c\u505a\u5b8c\uff0c\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u8fdb\u884c\u670d\u52a1\u5bfc\u51fa\u4e86\u3002\u670d\u52a1\u5bfc\u51fa\u5206\u4e3a\u5bfc\u51fa\u5230\u672c\u5730 (JVM)\uff0c\u548c\u5bfc\u51fa\u5230\u8fdc\u7a0b\u3002\u5728\u6df1\u5165\u5206\u6790\u670d\u52a1\u5bfc\u51fa\u7684\u6e90\u7801\u524d\uff0c\u6211\u4eec\u5148\u6765\u4ece\u5b8f\u89c2\u5c42\u9762\u4e0a\u770b\u4e00\u4e0b\u670d\u52a1\u5bfc\u51fa\u903b\u8f91\u3002\u5982\u4e0b\uff1a private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List URL registryURLs) { // \u7701\u7565\u65e0\u5173\u4ee3\u7801 if (ExtensionLoader.getExtensionLoader(ConfiguratorFactory.class) .hasExtension(url.getProtocol())) { // \u52a0\u8f7d ConfiguratorFactory\uff0c\u5e76\u751f\u6210 Configurator \u5b9e\u4f8b\uff0c\u7136\u540e\u901a\u8fc7\u5b9e\u4f8b\u914d\u7f6e url url = ExtensionLoader.getExtensionLoader(ConfiguratorFactory.class) .getExtension(url.getProtocol()).getConfigurator(url).configure(url); } String scope = url.getParameter(Constants.SCOPE_KEY); // \u5982\u679c scope = none\uff0c\u5219\u4ec0\u4e48\u90fd\u4e0d\u505a if (!Constants.SCOPE_NONE.toString().equalsIgnoreCase(scope)) { // scope != remote\uff0c\u5bfc\u51fa\u5230\u672c\u5730 if (!Constants.SCOPE_REMOTE.toString().equalsIgnoreCase(scope)) { exportLocal(url); } // scope != local\uff0c\u5bfc\u51fa\u5230\u8fdc\u7a0b if (!Constants.SCOPE_LOCAL.toString().equalsIgnoreCase(scope)) { if (registryURLs != null !registryURLs.isEmpty()) { for (URL registryURL : registryURLs) { url = url.addParameterIfAbsent(Constants.DYNAMIC_KEY, registryURL.getParameter(Constants.DYNAMIC_KEY)); // \u52a0\u8f7d\u76d1\u89c6\u5668\u94fe\u63a5 URL monitorUrl = loadMonitor(registryURL); if (monitorUrl != null) { // \u5c06\u76d1\u89c6\u5668\u94fe\u63a5\u4f5c\u4e3a\u53c2\u6570\u6dfb\u52a0\u5230 url \u4e2d url = url.addParameterAndEncoded(Constants.MONITOR_KEY, monitorUrl.toFullString()); } String proxy = url.getParameter(Constants.PROXY_KEY); if (StringUtils.isNotEmpty(proxy)) { registryURL = registryURL.addParameter(Constants.PROXY_KEY, proxy); } // \u4e3a\u670d\u52a1\u63d0\u4f9b\u7c7b(ref)\u751f\u6210 Invoker Invoker ? invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, registryURL.addParameterAndEncoded(Constants.EXPORT_KEY, url.toFullString())); // DelegateProviderMetaDataInvoker \u7528\u4e8e\u6301\u6709 Invoker \u548c ServiceConfig DelegateProviderMetaDataInvoker wrapperInvoker = new DelegateProviderMetaDataInvoker(invoker, this); // \u5bfc\u51fa\u670d\u52a1\uff0c\u5e76\u751f\u6210 Exporter Exporter ? exporter = protocol.export(wrapperInvoker); exporters.add(exporter); } // \u4e0d\u5b58\u5728\u6ce8\u518c\u4e2d\u5fc3\uff0c\u4ec5\u5bfc\u51fa\u670d\u52a1 } else { Invoker ? invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, url); DelegateProviderMetaDataInvoker wrapperInvoker = new DelegateProviderMetaDataInvoker(invoker, this); Exporter ? exporter = protocol.export(wrapperInvoker); exporters.add(exporter); } } } this.urls.add(url); } \u4e0a\u9762\u4ee3\u7801\u6839\u636e url \u4e2d\u7684 scope \u53c2\u6570\u51b3\u5b9a\u670d\u52a1\u5bfc\u51fa\u65b9\u5f0f\uff0c\u5206\u522b\u5982\u4e0b\uff1a scope = none\uff0c\u4e0d\u5bfc\u51fa\u670d\u52a1 scope != remote\uff0c\u5bfc\u51fa\u5230\u672c\u5730 scope != local\uff0c\u5bfc\u51fa\u5230\u8fdc\u7a0b \u4e0d\u7ba1\u662f\u5bfc\u51fa\u5230\u672c\u5730\uff0c\u8fd8\u662f\u8fdc\u7a0b\u3002\u8fdb\u884c\u670d\u52a1\u5bfc\u51fa\u4e4b\u524d\uff0c\u5747\u9700\u8981\u5148\u521b\u5efa Invoker\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u6b65\u9aa4\u3002\u56e0\u6b64\u4e0b\u9762\u5148\u6765\u5206\u6790 Invoker \u7684\u521b\u5efa\u8fc7\u7a0b\u3002 2.2.1 Invoker \u521b\u5efa\u8fc7\u7a0b \u5728 Dubbo \u4e2d\uff0cInvoker \u662f\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u6a21\u578b\u3002\u5728\u670d\u52a1\u63d0\u4f9b\u7aef\uff0c\u4ee5\u53ca\u670d\u52a1\u5f15\u7528\u7aef\u5747\u4f1a\u51fa\u73b0 Invoker\u3002Dubbo \u5b98\u65b9\u6587\u6863\u4e2d\u5bf9 Invoker \u8fdb\u884c\u4e86\u8bf4\u660e\uff0c\u8fd9\u91cc\u5f15\u7528\u4e00\u4e0b\u3002 Invoker \u662f\u5b9e\u4f53\u57df\uff0c\u5b83\u662f Dubbo \u7684\u6838\u5fc3\u6a21\u578b\uff0c\u5176\u5b83\u6a21\u578b\u90fd\u5411\u5b83\u9760\u6270\uff0c\u6216\u8f6c\u6362\u6210\u5b83\uff0c\u5b83\u4ee3\u8868\u4e00\u4e2a\u53ef\u6267\u884c\u4f53\uff0c\u53ef\u5411\u5b83\u53d1\u8d77 invoke \u8c03\u7528\uff0c\u5b83\u6709\u53ef\u80fd\u662f\u4e00\u4e2a\u672c\u5730\u7684\u5b9e\u73b0\uff0c\u4e5f\u53ef\u80fd\u662f\u4e00\u4e2a\u8fdc\u7a0b\u7684\u5b9e\u73b0\uff0c\u4e5f\u53ef\u80fd\u4e00\u4e2a\u96c6\u7fa4\u5b9e\u73b0\u3002 \u65e2\u7136 Invoker \u5982\u6b64\u91cd\u8981\uff0c\u90a3\u4e48\u6211\u4eec\u5f88\u6709\u5fc5\u8981\u641e\u6e05\u695a Invoker \u7684\u7528\u9014\u3002Invoker \u662f\u7531 ProxyFactory \u521b\u5efa\u800c\u6765\uff0cDubbo \u9ed8\u8ba4\u7684 ProxyFactory \u5b9e\u73b0\u7c7b\u662f JavassistProxyFactory\u3002\u4e0b\u9762\u6211\u4eec\u5230 JavassistProxyFactory \u4ee3\u7801\u4e2d\uff0c\u63a2\u7d22 Invoker \u7684\u521b\u5efa\u8fc7\u7a0b\u3002\u5982\u4e0b\uff1a public T Invoker T getInvoker(T proxy, Class T type, URL url) { // \u4e3a\u76ee\u6807\u7c7b\u521b\u5efa Wrapper final Wrapper wrapper = Wrapper.getWrapper(proxy.getClass().getName().indexOf('$') 0 ? proxy.getClass() : type); // \u521b\u5efa\u533f\u540d Invoker \u7c7b\u5bf9\u8c61\uff0c\u5e76\u5b9e\u73b0 doInvoke \u65b9\u6cd5\u3002 return new AbstractProxyInvoker T (proxy, type, url) { @Override protected Object doInvoke(T proxy, String methodName, Class ? [] parameterTypes, Object[] arguments) throws Throwable { // \u8c03\u7528 Wrapper \u7684 invokeMethod \u65b9\u6cd5\uff0cinvokeMethod \u6700\u7ec8\u4f1a\u8c03\u7528\u76ee\u6807\u65b9\u6cd5 return wrapper.invokeMethod(proxy, methodName, parameterTypes, arguments); } }; } \u5982\u4e0a\uff0cJavassistProxyFactory \u521b\u5efa\u4e86\u4e00\u4e2a\u7ee7\u627f\u81ea AbstractProxyInvoker \u7c7b\u7684\u533f\u540d\u5bf9\u8c61\uff0c\u5e76\u8986\u5199\u4e86\u62bd\u8c61\u65b9\u6cd5 doInvoke\u3002\u8986\u5199\u540e\u7684 doInvoke \u903b\u8f91\u6bd4\u8f83\u7b80\u5355\uff0c\u4ec5\u662f\u5c06\u8c03\u7528\u8bf7\u6c42\u8f6c\u53d1\u7ed9\u4e86 Wrapper \u7c7b\u7684 invokeMethod \u65b9\u6cd5\u3002Wrapper \u7528\u4e8e\u201c\u5305\u88f9\u201d\u76ee\u6807\u7c7b\uff0cWrapper \u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u4ec5\u53ef\u901a\u8fc7 getWrapper(Class) \u65b9\u6cd5\u521b\u5efa\u5b50\u7c7b\u3002\u5728\u521b\u5efa Wrapper \u5b50\u7c7b\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5b50\u7c7b\u4ee3\u7801\u751f\u6210\u903b\u8f91\u4f1a\u5bf9 getWrapper \u65b9\u6cd5\u4f20\u5165\u7684 Class \u5bf9\u8c61\u8fdb\u884c\u89e3\u6790\uff0c\u62ff\u5230\u8bf8\u5982\u7c7b\u65b9\u6cd5\uff0c\u7c7b\u6210\u5458\u53d8\u91cf\u7b49\u4fe1\u606f\u3002\u4ee5\u53ca\u751f\u6210 invokeMethod \u65b9\u6cd5\u4ee3\u7801\u548c\u5176\u4ed6\u4e00\u4e9b\u65b9\u6cd5\u4ee3\u7801\u3002\u4ee3\u7801\u751f\u6210\u5b8c\u6bd5\u540e\uff0c\u901a\u8fc7 Javassist \u751f\u6210 Class \u5bf9\u8c61\uff0c\u6700\u540e\u518d\u901a\u8fc7\u53cd\u5c04\u521b\u5efa Wrapper \u5b9e\u4f8b\u3002\u76f8\u5173\u7684\u4ee3\u7801\u5982\u4e0b\uff1a public static Wrapper getWrapper(Class ? c) { while (ClassGenerator.isDynamicClass(c)) c = c.getSuperclass(); if (c == Object.class) return OBJECT_WRAPPER; // \u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6 Wrapper \u5b9e\u4f8b Wrapper ret = WRAPPER_MAP.get(c); if (ret == null) { // \u7f13\u5b58\u672a\u547d\u4e2d\uff0c\u521b\u5efa Wrapper ret = makeWrapper(c); // \u5199\u5165\u7f13\u5b58 WRAPPER_MAP.put(c, ret); } return ret; } getWrapper \u65b9\u6cd5\u4ec5\u5305\u542b\u4e00\u4e9b\u7f13\u5b58\u64cd\u4f5c\u903b\u8f91\uff0c\u4e0d\u96be\u7406\u89e3\u3002\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0b makeWrapper \u65b9\u6cd5\u3002 private static Wrapper makeWrapper(Class ? c) { // \u68c0\u6d4b c \u662f\u5426\u4e3a\u57fa\u672c\u7c7b\u578b\uff0c\u82e5\u662f\u5219\u629b\u51fa\u5f02\u5e38 if (c.isPrimitive()) throw new IllegalArgumentException( Can not create wrapper for primitive type: + c); String name = c.getName(); ClassLoader cl = ClassHelper.getClassLoader(c); // c1 \u7528\u4e8e\u5b58\u50a8 setPropertyValue \u65b9\u6cd5\u4ee3\u7801 StringBuilder c1 = new StringBuilder( public void setPropertyValue(Object o, String n, Object v){ ); // c2 \u7528\u4e8e\u5b58\u50a8 getPropertyValue \u65b9\u6cd5\u4ee3\u7801 StringBuilder c2 = new StringBuilder( public Object getPropertyValue(Object o, String n){ ); // c3 \u7528\u4e8e\u5b58\u50a8 invokeMethod \u65b9\u6cd5\u4ee3\u7801 StringBuilder c3 = new StringBuilder( public Object invokeMethod(Object o, String n, Class[] p, Object[] v) throws + InvocationTargetException.class.getName() + { ); // \u751f\u6210\u7c7b\u578b\u8f6c\u6362\u4ee3\u7801\u53ca\u5f02\u5e38\u6355\u6349\u4ee3\u7801\uff0c\u6bd4\u5982\uff1a // DemoService w; try { w = ((DemoServcie) $1); }}catch(Throwable e){ throw new IllegalArgumentException(e); } c1.append(name).append( w; try{ w = (( ).append(name).append( )$1); }catch(Throwable e){ throw new IllegalArgumentException(e); } ); c2.append(name).append( w; try{ w = (( ).append(name).append( )$1); }catch(Throwable e){ throw new IllegalArgumentException(e); } ); c3.append(name).append( w; try{ w = (( ).append(name).append( )$1); }catch(Throwable e){ throw new IllegalArgumentException(e); } ); // pts \u7528\u4e8e\u5b58\u50a8\u6210\u5458\u53d8\u91cf\u540d\u548c\u7c7b\u578b Map String, Class ? pts = new HashMap String, Class ? (); // ms \u7528\u4e8e\u5b58\u50a8\u65b9\u6cd5\u63cf\u8ff0\u4fe1\u606f\uff08\u53ef\u7406\u89e3\u4e3a\u65b9\u6cd5\u7b7e\u540d\uff09\u53ca Method \u5b9e\u4f8b Map String, Method ms = new LinkedHashMap String, Method (); // mns \u4e3a\u65b9\u6cd5\u540d\u5217\u8868 List String mns = new ArrayList String (); // dmns \u7528\u4e8e\u5b58\u50a8\u201c\u5b9a\u4e49\u5728\u5f53\u524d\u7c7b\u4e2d\u7684\u65b9\u6cd5\u201d\u7684\u540d\u79f0 List String dmns = new ArrayList String (); // --------------------------------\u2728 \u5206\u5272\u7ebf1 \u2728------------------------------------- // \u83b7\u53d6 public \u8bbf\u95ee\u7ea7\u522b\u7684\u5b57\u6bb5\uff0c\u5e76\u4e3a\u6240\u6709\u5b57\u6bb5\u751f\u6210\u6761\u4ef6\u5224\u65ad\u8bed\u53e5 for (Field f : c.getFields()) { String fn = f.getName(); Class ? ft = f.getType(); if (Modifier.isStatic(f.getModifiers()) || Modifier.isTransient(f.getModifiers())) // \u5ffd\u7565\u5173\u952e\u5b57 static \u6216 transient \u4fee\u9970\u7684\u53d8\u91cf continue; // \u751f\u6210\u6761\u4ef6\u5224\u65ad\u53ca\u8d4b\u503c\u8bed\u53e5\uff0c\u6bd4\u5982\uff1a // if( $2.equals( name ) ) { w.name = (java.lang.String) $3; return;} // if( $2.equals( age ) ) { w.age = ((Number) $3).intValue(); return;} c1.append( if( $2.equals(\\ ).append(fn).append( \\ ) ){ w. ).append(fn).append( = ).append(arg(ft, $3 )).append( ; return; } ); // \u751f\u6210\u6761\u4ef6\u5224\u65ad\u53ca\u8fd4\u56de\u8bed\u53e5\uff0c\u6bd4\u5982\uff1a // if( $2.equals( name ) ) { return ($w)w.name; } c2.append( if( $2.equals(\\ ).append(fn).append( \\ ) ){ return ($w)w. ).append(fn).append( ; } ); // \u5b58\u50a8 \u5b57\u6bb5\u540d, \u5b57\u6bb5\u7c7b\u578b \u952e\u503c\u5bf9\u5230 pts \u4e2d pts.put(fn, ft); } // --------------------------------\u2728 \u5206\u5272\u7ebf2 \u2728------------------------------------- Method[] methods = c.getMethods(); // \u68c0\u6d4b c \u4e2d\u662f\u5426\u5305\u542b\u5728\u5f53\u524d\u7c7b\u4e2d\u58f0\u660e\u7684\u65b9\u6cd5 boolean hasMethod = hasMethods(methods); if (hasMethod) { c3.append( try{ ); } for (Method m : methods) { if (m.getDeclaringClass() == Object.class) // \u5ffd\u7565 Object \u4e2d\u5b9a\u4e49\u7684\u65b9\u6cd5 continue; String mn = m.getName(); // \u751f\u6210\u65b9\u6cd5\u540d\u5224\u65ad\u8bed\u53e5\uff0c\u6bd4\u5982\uff1a // if ( sayHello .equals( $2 ) c3.append( if( \\ ).append(mn).append( \\ .equals( $2 ) ); int len = m.getParameterTypes().length; // \u751f\u6210\u201c\u8fd0\u884c\u65f6\u4f20\u5165\u7684\u53c2\u6570\u6570\u91cf\u4e0e\u65b9\u6cd5\u53c2\u6570\u5217\u8868\u957f\u5ea6\u201d\u5224\u65ad\u8bed\u53e5\uff0c\u6bd4\u5982\uff1a // $3.length == 2 c3.append( ).append( $3.length == ).append(len); boolean override = false; for (Method m2 : methods) { // \u68c0\u6d4b\u65b9\u6cd5\u662f\u5426\u5b58\u5728\u91cd\u8f7d\u60c5\u51b5\uff0c\u6761\u4ef6\u4e3a\uff1a\u65b9\u6cd5\u5bf9\u8c61\u4e0d\u540c \u65b9\u6cd5\u540d\u76f8\u540c if (m != m2 m.getName().equals(m2.getName())) { override = true; break; } } // \u5bf9\u91cd\u8f7d\u65b9\u6cd5\u8fdb\u884c\u5904\u7406\uff0c\u8003\u8651\u4e0b\u9762\u7684\u65b9\u6cd5\uff1a // 1. void sayHello(Integer, String) // 2. void sayHello(Integer, Integer) // \u65b9\u6cd5\u540d\u76f8\u540c\uff0c\u53c2\u6570\u5217\u8868\u957f\u5ea6\u4e5f\u76f8\u540c\uff0c\u56e0\u6b64\u4e0d\u80fd\u4ec5\u901a\u8fc7\u8fd9\u4e24\u9879\u5224\u65ad\u4e24\u4e2a\u65b9\u6cd5\u662f\u5426\u76f8\u7b49\u3002 // \u9700\u8981\u8fdb\u4e00\u6b65\u5224\u65ad\u65b9\u6cd5\u7684\u53c2\u6570\u7c7b\u578b if (override) { if (len 0) { for (int l = 0; l len; l++) { // \u751f\u6210\u53c2\u6570\u7c7b\u578b\u8fdb\u884c\u68c0\u6d4b\u4ee3\u7801\uff0c\u6bd4\u5982\uff1a // $3[0].getName().equals( java.lang.Integer ) // $3[1].getName().equals( java.lang.String ) c3.append( ).append( $3[ ).append(l).append( ].getName().equals(\\ ) .append(m.getParameterTypes()[l].getName()).append( \\ ) ); } } } // \u6dfb\u52a0 ) {\uff0c\u5b8c\u6210\u65b9\u6cd5\u5224\u65ad\u8bed\u53e5\uff0c\u6b64\u65f6\u751f\u6210\u7684\u4ee3\u7801\u53ef\u80fd\u5982\u4e0b\uff08\u5df2\u683c\u5f0f\u5316\uff09\uff1a // if ( sayHello .equals($2) // $3.length == 2 // $3[0].getName().equals( java.lang.Integer ) // $3[1].getName().equals( java.lang.String )) { c3.append( ) { ); // \u6839\u636e\u8fd4\u56de\u503c\u7c7b\u578b\u751f\u6210\u76ee\u6807\u65b9\u6cd5\u8c03\u7528\u8bed\u53e5 if (m.getReturnType() == Void.TYPE) // w.sayHello((java.lang.Integer)$4[0], (java.lang.String)$4[1]); return null; c3.append( w. ).append(mn).append('(').append(args(m.getParameterTypes(), $4 )).append( ); ).append( return null; ); else // return w.sayHello((java.lang.Integer)$4[0], (java.lang.String)$4[1]); c3.append( return ($w)w. ).append(mn).append('(').append(args(m.getParameterTypes(), $4 )).append( ); ); // \u6dfb\u52a0 }, \u751f\u6210\u7684\u4ee3\u7801\u5f62\u5982\uff08\u5df2\u683c\u5f0f\u5316\uff09\uff1a // if ( sayHello .equals($2) // $3.length == 2 // $3[0].getName().equals( java.lang.Integer ) // $3[1].getName().equals( java.lang.String )) { // // w.sayHello((java.lang.Integer)$4[0], (java.lang.String)$4[1]); // return null; // } c3.append( } ); // \u6dfb\u52a0\u65b9\u6cd5\u540d\u5230 mns \u96c6\u5408\u4e2d mns.add(mn); // \u68c0\u6d4b\u5f53\u524d\u65b9\u6cd5\u662f\u5426\u5728 c \u4e2d\u88ab\u58f0\u660e\u7684 if (m.getDeclaringClass() == c) // \u82e5\u662f\uff0c\u5219\u5c06\u5f53\u524d\u65b9\u6cd5\u540d\u6dfb\u52a0\u5230 dmns \u4e2d dmns.add(mn); ms.put(ReflectUtils.getDesc(m), m); } if (hasMethod) { // \u6dfb\u52a0\u5f02\u5e38\u6355\u6349\u8bed\u53e5 c3.append( } catch(Throwable e) { ); c3.append( throw new java.lang.reflect.InvocationTargetException(e); ); c3.append( } ); } // \u6dfb\u52a0 NoSuchMethodException \u5f02\u5e38\u629b\u51fa\u4ee3\u7801 c3.append( throw new + NoSuchMethodException.class.getName() + (\\ Not found method \\\\\\ \\ +$2+\\ \\\\\\ in class + c.getName() + .\\ ); } ); // --------------------------------\u2728 \u5206\u5272\u7ebf3 \u2728------------------------------------- Matcher matcher; // \u5904\u7406 get/set \u65b9\u6cd5 for (Map.Entry String, Method entry : ms.entrySet()) { String md = entry.getKey(); Method method = (Method) entry.getValue(); // \u5339\u914d\u4ee5 get \u5f00\u5934\u7684\u65b9\u6cd5 if ((matcher = ReflectUtils.GETTER_METHOD_DESC_PATTERN.matcher(md)).matches()) { // \u83b7\u53d6\u5c5e\u6027\u540d String pn = propertyName(matcher.group(1)); // \u751f\u6210\u5c5e\u6027\u5224\u65ad\u4ee5\u53ca\u8fd4\u56de\u8bed\u53e5\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a // if( $2.equals( name ) ) { return ($w).w.getName(); } c2.append( if( $2.equals(\\ ).append(pn).append( \\ ) ){ return ($w)w. ).append(method.getName()).append( (); } ); pts.put(pn, method.getReturnType()); // \u5339\u914d\u4ee5 is/has/can \u5f00\u5934\u7684\u65b9\u6cd5 } else if ((matcher = ReflectUtils.IS_HAS_CAN_METHOD_DESC_PATTERN.matcher(md)).matches()) { String pn = propertyName(matcher.group(1)); // \u751f\u6210\u5c5e\u6027\u5224\u65ad\u4ee5\u53ca\u8fd4\u56de\u8bed\u53e5\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a // if( $2.equals( dream ) ) { return ($w).w.hasDream(); } c2.append( if( $2.equals(\\ ).append(pn).append( \\ ) ){ return ($w)w. ).append(method.getName()).append( (); } ); pts.put(pn, method.getReturnType()); // \u5339\u914d\u4ee5 set \u5f00\u5934\u7684\u65b9\u6cd5 } else if ((matcher = ReflectUtils.SETTER_METHOD_DESC_PATTERN.matcher(md)).matches()) { Class ? pt = method.getParameterTypes()[0]; String pn = propertyName(matcher.group(1)); // \u751f\u6210\u5c5e\u6027\u5224\u65ad\u4ee5\u53ca setter \u8c03\u7528\u8bed\u53e5\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a // if( $2.equals( name ) ) { w.setName((java.lang.String)$3); return; } c1.append( if( $2.equals(\\ ).append(pn).append( \\ ) ){ w. ).append(method.getName()).append( ( ).append(arg(pt, $3 )).append( ); return; } ); pts.put(pn, pt); } } // \u6dfb\u52a0 NoSuchPropertyException \u5f02\u5e38\u629b\u51fa\u4ee3\u7801 c1.append( throw new + NoSuchPropertyException.class.getName() + (\\ Not found property \\\\\\ \\ +$2+\\ \\\\\\ filed or setter method in class + c.getName() + .\\ ); } ); c2.append( throw new + NoSuchPropertyException.class.getName() + (\\ Not found property \\\\\\ \\ +$2+\\ \\\\\\ filed or setter method in class + c.getName() + .\\ ); } ); // --------------------------------\u2728 \u5206\u5272\u7ebf4 \u2728------------------------------------- long id = WRAPPER_CLASS_COUNTER.getAndIncrement(); // \u521b\u5efa\u7c7b\u751f\u6210\u5668 ClassGenerator cc = ClassGenerator.newInstance(cl); // \u8bbe\u7f6e\u7c7b\u540d\u53ca\u8d85\u7c7b cc.setClassName((Modifier.isPublic(c.getModifiers()) ? Wrapper.class.getName() : c.getName() + $sw ) + id); cc.setSuperClass(Wrapper.class); // \u6dfb\u52a0\u9ed8\u8ba4\u6784\u9020\u65b9\u6cd5 cc.addDefaultConstructor(); // \u6dfb\u52a0\u5b57\u6bb5 cc.addField( public static String[] pns; ); cc.addField( public static + Map.class.getName() + pts; ); cc.addField( public static String[] mns; ); cc.addField( public static String[] dmns; ); for (int i = 0, len = ms.size(); i len; i++) cc.addField( public static Class[] mts + i + ; ); // \u6dfb\u52a0\u65b9\u6cd5\u4ee3\u7801 cc.addMethod( public String[] getPropertyNames(){ return pns; } ); cc.addMethod( public boolean hasProperty(String n){ return pts.containsKey($1); } ); cc.addMethod( public Class getPropertyType(String n){ return (Class)pts.get($1); } ); cc.addMethod( public String[] getMethodNames(){ return mns; } ); cc.addMethod( public String[] getDeclaredMethodNames(){ return dmns; } ); cc.addMethod(c1.toString()); cc.addMethod(c2.toString()); cc.addMethod(c3.toString()); try { // \u751f\u6210\u7c7b Class ? wc = cc.toClass(); // \u8bbe\u7f6e\u5b57\u6bb5\u503c wc.getField( pts ).set(null, pts); wc.getField( pns ).set(null, pts.keySet().toArray(new String[0])); wc.getField( mns ).set(null, mns.toArray(new String[0])); wc.getField( dmns ).set(null, dmns.toArray(new String[0])); int ix = 0; for (Method m : ms.values()) wc.getField( mts + ix++).set(null, m.getParameterTypes()); // \u521b\u5efa Wrapper \u5b9e\u4f8b return (Wrapper) wc.newInstance(); } catch (RuntimeException e) { throw e; } catch (Throwable e) { throw new RuntimeException(e.getMessage(), e); } finally { cc.release(); ms.clear(); mns.clear(); dmns.clear(); } } \u4e0a\u9762\u4ee3\u7801\u5f88\u957f\uff0c\u5927\u5bb6\u8010\u5fc3\u770b\u4e00\u4e0b\u3002\u6211\u4eec\u5728\u4e0a\u9762\u4ee3\u7801\u4e2d\u505a\u4e86\u5927\u91cf\u7684\u6ce8\u91ca\uff0c\u5e76\u6309\u529f\u80fd\u5bf9\u4ee3\u7801\u8fdb\u884c\u4e86\u5206\u5757\uff0c\u4ee5\u5e2e\u52a9\u5927\u5bb6\u7406\u89e3\u4ee3\u7801\u903b\u8f91\u3002\u4e0b\u9762\u5bf9\u8fd9\u6bb5\u4ee3\u7801\u8fdb\u884c\u8bb2\u89e3\u3002\u9996\u5148\u6211\u4eec\u628a\u76ee\u5149\u79fb\u5230\u5206\u5272\u7ebf1\u4e4b\u4e0a\u7684\u4ee3\u7801\uff0c\u8fd9\u6bb5\u4ee3\u7801\u4e3b\u8981\u7528\u4e8e\u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u64cd\u4f5c\u3002\u6bd4\u5982\u521b\u5efa c1\u3001c2\u3001c3 \u4ee5\u53ca pts\u3001ms\u3001mns \u7b49\u53d8\u91cf\uff0c\u4ee5\u53ca\u5411 c1\u3001c2\u3001c3 \u4e2d\u6dfb\u52a0\u65b9\u6cd5\u5b9a\u4e49\u548c\u7c7b\u578b\u8f6c\u6362\u4ee3\u7801\u3002\u63a5\u4e0b\u6765\u662f\u5206\u5272\u7ebf1\u5230\u5206\u5272\u7ebf2\u4e4b\u95f4\u7684\u4ee3\u7801\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7528\u4e8e\u4e3a public \u7ea7\u522b\u7684\u5b57\u6bb5\u751f\u6210\u6761\u4ef6\u5224\u65ad\u53d6\u503c\u4e0e\u8d4b\u503c\u4ee3\u7801\u3002\u8fd9\u6bb5\u4ee3\u7801\u4e0d\u662f\u5f88\u96be\u770b\u61c2\uff0c\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002\u7ee7\u7eed\u5411\u4e0b\u770b\uff0c\u5206\u5272\u7ebf2\u548c\u5206\u9694\u7ebf3\u4e4b\u95f4\u7684\u4ee3\u7801\u7528\u4e8e\u4e3a\u5b9a\u4e49\u5728\u5f53\u524d\u7c7b\u4e2d\u7684\u65b9\u6cd5\u751f\u6210\u5224\u65ad\u8bed\u53e5\uff0c\u548c\u65b9\u6cd5\u8c03\u7528\u8bed\u53e5\u3002\u56e0\u4e3a\u9700\u8981\u5bf9\u65b9\u6cd5\u91cd\u8f7d\u8fdb\u884c\u6821\u9a8c\uff0c\u56e0\u6b64\u5230\u8fd9\u8fd9\u6bb5\u4ee3\u7801\u770b\u8d77\u6765\u6709\u70b9\u590d\u6742\u3002\u4e0d\u8fc7\u8010\u5fc3\u770b\u4e00\u4e0b\uff0c\u4e5f\u4e0d\u662f\u5f88\u96be\u7406\u89e3\u3002\u63a5\u4e0b\u6765\u662f\u5206\u5272\u7ebf3\u548c\u5206\u9694\u7ebf4\u4e4b\u95f4\u7684\u4ee3\u7801\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7528\u4e8e\u5904\u7406 getter\u3001setter \u4ee5\u53ca\u4ee5 is/has/can \u5f00\u5934\u7684\u65b9\u6cd5\u3002\u5904\u7406\u65b9\u5f0f\u662f\u901a\u8fc7\u6b63\u5219\u8868\u8fbe\u5f0f\u83b7\u53d6\u65b9\u6cd5\u7c7b\u578b\uff08get/set/is/...\uff09\uff0c\u4ee5\u53ca\u5c5e\u6027\u540d\u3002\u4e4b\u540e\u4e3a\u5c5e\u6027\u540d\u751f\u6210\u5224\u65ad\u8bed\u53e5\uff0c\u7136\u540e\u4e3a\u65b9\u6cd5\u751f\u6210\u8c03\u7528\u8bed\u53e5\u3002\u6700\u540e\u6211\u4eec\u518d\u6765\u770b\u4e00\u4e0b\u5206\u9694\u7ebf4\u4ee5\u4e0b\u7684\u4ee3\u7801\uff0c\u8fd9\u6bb5\u4ee3\u7801\u901a\u8fc7 ClassGenerator \u4e3a\u521a\u521a\u751f\u6210\u7684\u4ee3\u7801\u6784\u5efa Class \u7c7b\uff0c\u5e76\u901a\u8fc7\u53cd\u5c04\u521b\u5efa\u5bf9\u8c61\u3002ClassGenerator \u662f Dubbo \u81ea\u5df1\u5c01\u88c5\u7684\uff0c\u8be5\u7c7b\u7684\u6838\u5fc3\u662f toClass() \u7684\u91cd\u8f7d\u65b9\u6cd5 toClass(ClassLoader, ProtectionDomain)\uff0c\u8be5\u65b9\u6cd5\u901a\u8fc7 javassist \u6784\u5efa Class\u3002\u8fd9\u91cc\u5c31\u4e0d\u5206\u6790 toClass \u65b9\u6cd5\u4e86\uff0c\u5927\u5bb6\u8bf7\u81ea\u884c\u5206\u6790\u3002 \u9605\u8bfb Wrapper \u7c7b\u4ee3\u7801\u9700\u8981\u5bf9 javassist \u6846\u67b6\u6709\u6240\u4e86\u89e3\u3002\u5173\u4e8e javassist\uff0c\u5927\u5bb6\u5982\u679c\u4e0d\u719f\u6089\uff0c\u8bf7\u81ea\u884c\u67e5\u9605\u8d44\u6599\uff0c\u672c\u8282\u4e0d\u6253\u7b97\u4ecb\u7ecd javassist \u76f8\u5173\u5185\u5bb9\u3002 \u597d\u4e86\uff0c\u5173\u4e8e Wrapper \u7c7b\u751f\u6210\u8fc7\u7a0b\u5c31\u5206\u6790\u5230\u8fd9\u3002\u5982\u679c\u5927\u5bb6\u770b\u7684\u4e0d\u662f\u5f88\u660e\u767d\uff0c\u53ef\u4ee5\u5355\u72ec\u4e3a Wrapper \u521b\u5efa\u5355\u5143\u6d4b\u8bd5\uff0c\u7136\u540e\u5355\u6b65\u8c03\u8bd5\u3002\u5e76\u5c06\u751f\u6210\u7684\u4ee3\u7801\u62f7\u8d1d\u51fa\u6765\uff0c\u683c\u5f0f\u5316\u540e\u518d\u8fdb\u884c\u89c2\u5bdf\u548c\u7406\u89e3\u3002 2.2.2 \u5bfc\u51fa\u670d\u52a1\u5230\u672c\u5730 \u672c\u8282\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u670d\u52a1\u5bfc\u51fa\u76f8\u5173\u7684\u4ee3\u7801\uff0c\u6309\u7167\u4ee3\u7801\u6267\u884c\u987a\u5e8f\uff0c\u672c\u8282\u5148\u6765\u5206\u6790\u5bfc\u51fa\u670d\u52a1\u5230\u672c\u5730\u7684\u8fc7\u7a0b\u3002\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a private void exportLocal(URL url) { // \u5982\u679c URL \u7684\u534f\u8bae\u5934\u7b49\u4e8e injvm\uff0c\u8bf4\u660e\u5df2\u7ecf\u5bfc\u51fa\u5230\u672c\u5730\u4e86\uff0c\u65e0\u9700\u518d\u6b21\u5bfc\u51fa if (!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(url.getProtocol())) { URL local = URL.valueOf(url.toFullString()) .setProtocol(Constants.LOCAL_PROTOCOL) // \u8bbe\u7f6e\u534f\u8bae\u5934\u4e3a injvm .setHost(LOCALHOST) .setPort(0); ServiceClassHolder.getInstance().pushServiceClass(getServiceClass(ref)); // \u521b\u5efa Invoker\uff0c\u5e76\u5bfc\u51fa\u670d\u52a1\uff0c\u8fd9\u91cc\u7684 protocol \u4f1a\u5728\u8fd0\u884c\u65f6\u8c03\u7528 InjvmProtocol \u7684 export \u65b9\u6cd5 Exporter ? exporter = protocol.export( proxyFactory.getInvoker(ref, (Class) interfaceClass, local)); exporters.add(exporter); } } exportLocal \u65b9\u6cd5\u6bd4\u8f83\u7b80\u5355\uff0c\u9996\u5148\u6839\u636e URL \u534f\u8bae\u5934\u51b3\u5b9a\u662f\u5426\u5bfc\u51fa\u670d\u52a1\u3002\u82e5\u9700\u5bfc\u51fa\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 URL \u5e76\u5c06\u534f\u8bae\u5934\u3001\u4e3b\u673a\u540d\u4ee5\u53ca\u7aef\u53e3\u8bbe\u7f6e\u6210\u65b0\u7684\u503c\u3002\u7136\u540e\u521b\u5efa Invoker\uff0c\u5e76\u8c03\u7528 InjvmProtocol \u7684 export \u65b9\u6cd5\u5bfc\u51fa\u670d\u52a1\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b InjvmProtocol \u7684 export \u65b9\u6cd5\u90fd\u505a\u4e86\u54ea\u4e9b\u4e8b\u60c5\u3002 public T Exporter T export(Invoker T invoker) throws RpcException { // \u521b\u5efa InjvmExporter return new InjvmExporter T (invoker, invoker.getUrl().getServiceKey(), exporterMap); } \u5982\u4e0a\uff0cInjvmProtocol \u7684 export \u65b9\u6cd5\u4ec5\u521b\u5efa\u4e86\u4e00\u4e2a InjvmExporter\uff0c\u65e0\u5176\u4ed6\u903b\u8f91\u3002\u5230\u6b64\u5bfc\u51fa\u670d\u52a1\u5230\u672c\u5730\u5c31\u5206\u6790\u5b8c\u4e86\uff0c\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u7ee7\u7eed\u5206\u6790\u5bfc\u51fa\u670d\u52a1\u5230\u8fdc\u7a0b\u7684\u8fc7\u7a0b\u3002 2.2.3 \u5bfc\u51fa\u670d\u52a1\u5230\u8fdc\u7a0b \u4e0e\u5bfc\u51fa\u670d\u52a1\u5230\u672c\u5730\u76f8\u6bd4\uff0c\u5bfc\u51fa\u670d\u52a1\u5230\u8fdc\u7a0b\u7684\u8fc7\u7a0b\u8981\u590d\u6742\u4e0d\u5c11\uff0c\u5176\u5305\u542b\u4e86\u670d\u52a1\u5bfc\u51fa\u4e0e\u670d\u52a1\u6ce8\u518c\u4e24\u4e2a\u8fc7\u7a0b\u3002\u8fd9\u4e24\u4e2a\u8fc7\u7a0b\u6d89\u53ca\u5230\u4e86\u5927\u91cf\u7684\u8c03\u7528\uff0c\u6bd4\u8f83\u590d\u6742\u3002\u6309\u7167\u4ee3\u7801\u6267\u884c\u987a\u5e8f\uff0c\u672c\u8282\u5148\u6765\u5206\u6790\u670d\u52a1\u5bfc\u51fa\u903b\u8f91\uff0c\u670d\u52a1\u6ce8\u518c\u903b\u8f91\u5c06\u5728\u4e0b\u4e00\u8282\u8fdb\u884c\u5206\u6790\u3002\u4e0b\u9762\u5f00\u59cb\u5206\u6790\uff0c\u6211\u4eec\u628a\u76ee\u5149\u79fb\u52a8\u5230 RegistryProtocol \u7684 export \u65b9\u6cd5\u4e0a\u3002 public T Exporter T export(final Invoker T originInvoker) throws RpcException { // \u5bfc\u51fa\u670d\u52a1 final ExporterChangeableWrapper T exporter = doLocalExport(originInvoker); // \u83b7\u53d6\u6ce8\u518c\u4e2d\u5fc3 URL\uff0c\u4ee5 zookeeper \u6ce8\u518c\u4e2d\u5fc3\u4e3a\u4f8b\uff0c\u5f97\u5230\u7684\u793a\u4f8b URL \u5982\u4e0b\uff1a // zookeeper://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-provider dubbo=2.0.2 export=dubbo%3A%2F%2F172.17.48.52%3A20880%2Fcom.alibaba.dubbo.demo.DemoService%3Fanyhost%3Dtrue%26application%3Ddemo-provider URL registryUrl = getRegistryUrl(originInvoker); // \u6839\u636e URL \u52a0\u8f7d Registry \u5b9e\u73b0\u7c7b\uff0c\u6bd4\u5982 ZookeeperRegistry final Registry registry = getRegistry(originInvoker); // \u83b7\u53d6\u5df2\u6ce8\u518c\u7684\u670d\u52a1\u63d0\u4f9b\u8005 URL\uff0c\u6bd4\u5982\uff1a // dubbo://172.17.48.52:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true application=demo-provider dubbo=2.0.2 generic=false interface=com.alibaba.dubbo.demo.DemoService methods=sayHello final URL registeredProviderUrl = getRegisteredProviderUrl(originInvoker); // \u83b7\u53d6 register \u53c2\u6570 boolean register = registeredProviderUrl.getParameter( register , true); // \u5411\u670d\u52a1\u63d0\u4f9b\u8005\u4e0e\u6d88\u8d39\u8005\u6ce8\u518c\u8868\u4e2d\u6ce8\u518c\u670d\u52a1\u63d0\u4f9b\u8005 ProviderConsumerRegTable.registerProvider(originInvoker, registryUrl, registeredProviderUrl); // \u6839\u636e register \u7684\u503c\u51b3\u5b9a\u662f\u5426\u6ce8\u518c\u670d\u52a1 if (register) { // \u5411\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u670d\u52a1 register(registryUrl, registeredProviderUrl); ProviderConsumerRegTable.getProviderWrapper(originInvoker).setReg(true); } // \u83b7\u53d6\u8ba2\u9605 URL\uff0c\u6bd4\u5982\uff1a // provider://172.17.48.52:20880/com.alibaba.dubbo.demo.DemoService?category=configurators check=false anyhost=true application=demo-provider dubbo=2.0.2 generic=false interface=com.alibaba.dubbo.demo.DemoService methods=sayHello final URL overrideSubscribeUrl = getSubscribedOverrideUrl(registeredProviderUrl); // \u521b\u5efa\u76d1\u542c\u5668 final OverrideListener overrideSubscribeListener = new OverrideListener(overrideSubscribeUrl, originInvoker); overrideListeners.put(overrideSubscribeUrl, overrideSubscribeListener); // \u5411\u6ce8\u518c\u4e2d\u5fc3\u8fdb\u884c\u8ba2\u9605 override \u6570\u636e registry.subscribe(overrideSubscribeUrl, overrideSubscribeListener); // \u521b\u5efa\u5e76\u8fd4\u56de DestroyableExporter return new DestroyableExporter T (exporter, originInvoker, overrideSubscribeUrl, registeredProviderUrl); } \u4e0a\u9762\u4ee3\u7801\u770b\u8d77\u6765\u6bd4\u8f83\u590d\u6742\uff0c\u4e3b\u8981\u505a\u5982\u4e0b\u4e00\u4e9b\u64cd\u4f5c\uff1a \u8c03\u7528 doLocalExport \u5bfc\u51fa\u670d\u52a1 \u5411\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u670d\u52a1 \u5411\u6ce8\u518c\u4e2d\u5fc3\u8fdb\u884c\u8ba2\u9605 override \u6570\u636e \u521b\u5efa\u5e76\u8fd4\u56de DestroyableExporter \u5728\u4ee5\u4e0a\u64cd\u4f5c\u4e2d\uff0c\u9664\u4e86\u521b\u5efa\u5e76\u8fd4\u56de DestroyableExporter \u6ca1\u4ec0\u4e48\u96be\u5ea6\u5916\uff0c\u5176\u4ed6\u51e0\u6b65\u64cd\u4f5c\u90fd\u4e0d\u662f\u5f88\u7b80\u5355\u3002\u8fd9\u5176\u4e2d\uff0c\u5bfc\u51fa\u670d\u52a1\u548c\u6ce8\u518c\u670d\u52a1\u662f\u672c\u7ae0\u8981\u91cd\u70b9\u5206\u6790\u7684\u903b\u8f91\u3002 \u8ba2\u9605 override \u6570\u636e\u5e76\u975e\u672c\u6587\u91cd\u70b9\u5185\u5bb9\uff0c\u540e\u9762\u4f1a\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u3002\u4e0b\u9762\u5148\u6765\u5206\u6790 doLocalExport \u65b9\u6cd5\u7684\u903b\u8f91\uff0c\u5982\u4e0b\uff1a private T ExporterChangeableWrapper T doLocalExport(final Invoker T originInvoker) { String key = getCacheKey(originInvoker); // \u8bbf\u95ee\u7f13\u5b58 ExporterChangeableWrapper T exporter = (ExporterChangeableWrapper T ) bounds.get(key); if (exporter == null) { synchronized (bounds) { exporter = (ExporterChangeableWrapper T ) bounds.get(key); if (exporter == null) { // \u521b\u5efa Invoker \u4e3a\u59d4\u6258\u7c7b\u5bf9\u8c61 final Invoker ? invokerDelegete = new InvokerDelegete T (originInvoker, getProviderUrl(originInvoker)); // \u8c03\u7528 protocol \u7684 export \u65b9\u6cd5\u5bfc\u51fa\u670d\u52a1 exporter = new ExporterChangeableWrapper T ((Exporter T ) protocol.export(invokerDelegete), originInvoker); // \u5199\u7f13\u5b58 bounds.put(key, exporter); } } } return exporter; } \u4e0a\u9762\u7684\u4ee3\u7801\u662f\u5178\u578b\u7684\u53cc\u91cd\u68c0\u67e5\u9501\uff0c\u5927\u5bb6\u5728\u9605\u8bfb Dubbo \u7684\u6e90\u7801\u4e2d\uff0c\u4f1a\u591a\u6b21\u89c1\u5230\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u628a\u91cd\u70b9\u653e\u5728 Protocol \u7684 export \u65b9\u6cd5\u4e0a\u3002\u5047\u8bbe\u8fd0\u884c\u65f6\u534f\u8bae\u4e3a dubbo\uff0c\u6b64\u5904\u7684 protocol \u53d8\u91cf\u4f1a\u5728\u8fd0\u884c\u65f6\u52a0\u8f7d DubboProtocol\uff0c\u5e76\u8c03\u7528 DubboProtocol \u7684 export \u65b9\u6cd5\u3002\u6240\u4ee5\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u76ee\u5149\u8f6c\u79fb\u5230 DubboProtocol \u7684 export \u65b9\u6cd5\u4e0a\uff0c\u76f8\u5173\u5206\u6790\u5982\u4e0b\uff1a public T Exporter T export(Invoker T invoker) throws RpcException { URL url = invoker.getUrl(); // \u83b7\u53d6\u670d\u52a1\u6807\u8bc6\uff0c\u7406\u89e3\u6210\u670d\u52a1\u5750\u6807\u4e5f\u884c\u3002\u7531\u670d\u52a1\u7ec4\u540d\uff0c\u670d\u52a1\u540d\uff0c\u670d\u52a1\u7248\u672c\u53f7\u4ee5\u53ca\u7aef\u53e3\u7ec4\u6210\u3002\u6bd4\u5982\uff1a // demoGroup/com.alibaba.dubbo.demo.DemoService:1.0.1:20880 String key = serviceKey(url); // \u521b\u5efa DubboExporter DubboExporter T exporter = new DubboExporter T (invoker, key, exporterMap); // \u5c06 key, exporter \u952e\u503c\u5bf9\u653e\u5165\u7f13\u5b58\u4e2d exporterMap.put(key, exporter); // \u672c\u5730\u5b58\u6839\u76f8\u5173\u4ee3\u7801 Boolean isStubSupportEvent = url.getParameter(Constants.STUB_EVENT_KEY, Constants.DEFAULT_STUB_EVENT); Boolean isCallbackservice = url.getParameter(Constants.IS_CALLBACK_SERVICE, false); if (isStubSupportEvent !isCallbackservice) { String stubServiceMethods = url.getParameter(Constants.STUB_EVENT_METHODS_KEY); if (stubServiceMethods == null || stubServiceMethods.length() == 0) { // \u7701\u7565\u65e5\u5fd7\u6253\u5370\u4ee3\u7801 } else { stubServiceMethodsMap.put(url.getServiceKey(), stubServiceMethods); } } // \u542f\u52a8\u670d\u52a1\u5668 openServer(url); // \u4f18\u5316\u5e8f\u5217\u5316 optimizeSerialization(url); return exporter; } \u5982\u4e0a\uff0c\u6211\u4eec\u91cd\u70b9\u5173\u6ce8 DubboExporter \u7684\u521b\u5efa\u4ee5\u53ca openServer \u65b9\u6cd5\uff0c\u5176\u4ed6\u903b\u8f91\u770b\u4e0d\u61c2\u4e5f\u6ca1\u5173\u7cfb\uff0c\u4e0d\u5f71\u54cd\u7406\u89e3\u670d\u52a1\u5bfc\u51fa\u8fc7\u7a0b\u3002\u53e6\u5916\uff0cDubboExporter \u7684\u4ee3\u7801\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u4e0d\u5206\u6790\u4e86\u3002\u4e0b\u9762\u5206\u6790 openServer \u65b9\u6cd5\u3002 private void openServer(URL url) { // \u83b7\u53d6 host:port\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a\u670d\u52a1\u5668\u5b9e\u4f8b\u7684 key\uff0c\u7528\u4e8e\u6807\u8bc6\u5f53\u524d\u7684\u670d\u52a1\u5668\u5b9e\u4f8b String key = url.getAddress(); boolean isServer = url.getParameter(Constants.IS_SERVER_KEY, true); if (isServer) { // \u8bbf\u95ee\u7f13\u5b58 ExchangeServer server = serverMap.get(key); if (server == null) { // \u521b\u5efa\u670d\u52a1\u5668\u5b9e\u4f8b serverMap.put(key, createServer(url)); } else { // \u670d\u52a1\u5668\u5df2\u521b\u5efa\uff0c\u5219\u6839\u636e url \u4e2d\u7684\u914d\u7f6e\u91cd\u7f6e\u670d\u52a1\u5668 server.reset(url); } } } \u5982\u4e0a\uff0c\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a\uff08\u5355\u7f51\u5361\uff09\uff0c\u540c\u4e00\u4e2a\u7aef\u53e3\u4e0a\u4ec5\u5141\u8bb8\u542f\u52a8\u4e00\u4e2a\u670d\u52a1\u5668\u5b9e\u4f8b\u3002\u82e5\u67d0\u4e2a\u7aef\u53e3\u4e0a\u5df2\u6709\u670d\u52a1\u5668\u5b9e\u4f8b\uff0c\u6b64\u65f6\u5219\u8c03\u7528 reset \u65b9\u6cd5\u91cd\u7f6e\u670d\u52a1\u5668\u7684\u4e00\u4e9b\u914d\u7f6e\u3002\u8003\u8651\u5230\u7bc7\u5e45\u95ee\u9898\uff0c\u5173\u4e8e\u670d\u52a1\u5668\u5b9e\u4f8b\u91cd\u7f6e\u7684\u4ee3\u7801\u5c31\u4e0d\u5206\u6790\u4e86\u3002\u63a5\u4e0b\u6765\u5206\u6790\u670d\u52a1\u5668\u5b9e\u4f8b\u7684\u521b\u5efa\u8fc7\u7a0b\u3002\u5982\u4e0b\uff1a private ExchangeServer createServer(URL url) { url = url.addParameterIfAbsent(Constants.CHANNEL_READONLYEVENT_SENT_KEY, // \u6dfb\u52a0\u5fc3\u8df3\u68c0\u6d4b\u914d\u7f6e\u5230 url \u4e2d url = url.addParameterIfAbsent(Constants.HEARTBEAT_KEY, String.valueOf(Constants.DEFAULT_HEARTBEAT)); // \u83b7\u53d6 server \u53c2\u6570\uff0c\u9ed8\u8ba4\u4e3a netty String str = url.getParameter(Constants.SERVER_KEY, Constants.DEFAULT_REMOTING_SERVER); // \u901a\u8fc7 SPI \u68c0\u6d4b\u662f\u5426\u5b58\u5728 server \u53c2\u6570\u6240\u4ee3\u8868\u7684 Transporter \u62d3\u5c55\uff0c\u4e0d\u5b58\u5728\u5219\u629b\u51fa\u5f02\u5e38 if (str != null str.length() 0 !ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str)) throw new RpcException( Unsupported server type: + str + , url: + url); // \u6dfb\u52a0\u7f16\u7801\u89e3\u7801\u5668\u53c2\u6570 url = url.addParameter(Constants.CODEC_KEY, DubboCodec.NAME); ExchangeServer server; try { // \u521b\u5efa ExchangeServer server = Exchangers.bind(url, requestHandler); } catch (RemotingException e) { throw new RpcException( Fail to start server... ); } // \u83b7\u53d6 client \u53c2\u6570\uff0c\u53ef\u6307\u5b9a netty\uff0cmina str = url.getParameter(Constants.CLIENT_KEY); if (str != null str.length() 0) { // \u83b7\u53d6\u6240\u6709\u7684 Transporter \u5b9e\u73b0\u7c7b\u540d\u79f0\u96c6\u5408\uff0c\u6bd4\u5982 supportedTypes = [netty, mina] Set String supportedTypes = ExtensionLoader.getExtensionLoader(Transporter.class).getSupportedExtensions(); // \u68c0\u6d4b\u5f53\u524d Dubbo \u6240\u652f\u6301\u7684 Transporter \u5b9e\u73b0\u7c7b\u540d\u79f0\u5217\u8868\u4e2d\uff0c // \u662f\u5426\u5305\u542b client \u6240\u8868\u793a\u7684 Transporter\uff0c\u82e5\u4e0d\u5305\u542b\uff0c\u5219\u629b\u51fa\u5f02\u5e38 if (!supportedTypes.contains(str)) { throw new RpcException( Unsupported client type... ); } } return server; } \u5982\u4e0a\uff0ccreateServer \u5305\u542b\u4e09\u4e2a\u6838\u5fc3\u7684\u903b\u8f91\u3002\u7b2c\u4e00\u662f\u68c0\u6d4b\u662f\u5426\u5b58\u5728 server \u53c2\u6570\u6240\u4ee3\u8868\u7684 Transporter \u62d3\u5c55\uff0c\u4e0d\u5b58\u5728\u5219\u629b\u51fa\u5f02\u5e38\u3002\u7b2c\u4e8c\u662f\u521b\u5efa\u670d\u52a1\u5668\u5b9e\u4f8b\u3002\u7b2c\u4e09\u662f\u68c0\u6d4b\u662f\u5426\u652f\u6301 client \u53c2\u6570\u6240\u8868\u793a\u7684 Transporter \u62d3\u5c55\uff0c\u4e0d\u5b58\u5728\u4e5f\u662f\u629b\u51fa\u5f02\u5e38\u3002\u4e24\u6b21\u68c0\u6d4b\u64cd\u4f5c\u6240\u5bf9\u5e94\u7684\u4ee3\u7801\u6bd4\u8f83\u76f4\u767d\u4e86\uff0c\u65e0\u9700\u591a\u8bf4\u3002\u4f46\u521b\u5efa\u670d\u52a1\u5668\u7684\u64cd\u4f5c\u76ee\u524d\u8fd8\u4e0d\u662f\u5f88\u6e05\u6670\uff0c\u6211\u4eec\u7ee7\u7eed\u5f80\u4e0b\u770b\u3002 public static ExchangeServer bind(URL url, ExchangeHandler handler) throws RemotingException { if (url == null) { throw new IllegalArgumentException( url == null ); } if (handler == null) { throw new IllegalArgumentException( handler == null ); } url = url.addParameterIfAbsent(Constants.CODEC_KEY, exchange ); // \u83b7\u53d6 Exchanger\uff0c\u9ed8\u8ba4\u4e3a HeaderExchanger\u3002 // \u7d27\u63a5\u7740\u8c03\u7528 HeaderExchanger \u7684 bind \u65b9\u6cd5\u521b\u5efa ExchangeServer \u5b9e\u4f8b return getExchanger(url).bind(url, handler); } \u4e0a\u9762\u4ee3\u7801\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002\u4e0b\u9762\u770b\u4e00\u4e0b HeaderExchanger \u7684 bind \u65b9\u6cd5\u3002 public ExchangeServer bind(URL url, ExchangeHandler handler) throws RemotingException { // \u521b\u5efa HeaderExchangeServer \u5b9e\u4f8b\uff0c\u8be5\u65b9\u6cd5\u5305\u542b\u4e86\u591a\u4e2a\u903b\u8f91\uff0c\u5206\u522b\u5982\u4e0b\uff1a // 1. new HeaderExchangeHandler(handler) // 2. new DecodeHandler(new HeaderExchangeHandler(handler)) // 3. Transporters.bind(url, new DecodeHandler(new HeaderExchangeHandler(handler))) return new HeaderExchangeServer(Transporters.bind(url, new DecodeHandler(new HeaderExchangeHandler(handler)))); } HeaderExchanger \u7684 bind \u65b9\u6cd5\u5305\u542b\u7684\u903b\u8f91\u6bd4\u8f83\u591a\uff0c\u4f46\u76ee\u524d\u6211\u4eec\u4ec5\u9700\u5173\u5fc3 Transporters \u7684 bind \u65b9\u6cd5\u903b\u8f91\u5373\u53ef\u3002\u8be5\u65b9\u6cd5\u7684\u4ee3\u7801\u5982\u4e0b\uff1a public static Server bind(URL url, ChannelHandler... handlers) throws RemotingException { if (url == null) { throw new IllegalArgumentException( url == null ); } if (handlers == null || handlers.length == 0) { throw new IllegalArgumentException( handlers == null ); } ChannelHandler handler; if (handlers.length == 1) { handler = handlers[0]; } else { // \u5982\u679c handlers \u5143\u7d20\u6570\u91cf\u5927\u4e8e1\uff0c\u5219\u521b\u5efa ChannelHandler \u5206\u53d1\u5668 handler = new ChannelHandlerDispatcher(handlers); } // \u83b7\u53d6\u81ea\u9002\u5e94 Transporter \u5b9e\u4f8b\uff0c\u5e76\u8c03\u7528\u5b9e\u4f8b\u65b9\u6cd5 return getTransporter().bind(url, handler); } \u5982\u4e0a\uff0cgetTransporter() \u65b9\u6cd5\u83b7\u53d6\u7684 Transporter \u662f\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u521b\u5efa\u7684\uff0c\u7c7b\u540d\u4e3a Transporter$Adaptive\uff0c\u4e5f\u5c31\u662f\u81ea\u9002\u5e94\u62d3\u5c55\u7c7b\u3002Transporter$Adaptive \u4f1a\u5728\u8fd0\u884c\u65f6\u6839\u636e\u4f20\u5165\u7684 URL \u53c2\u6570\u51b3\u5b9a\u52a0\u8f7d\u4ec0\u4e48\u7c7b\u578b\u7684 Transporter\uff0c\u9ed8\u8ba4\u4e3a NettyTransporter\u3002\u4e0b\u9762\u6211\u4eec\u7ee7\u7eed\u8ddf\u4e0b\u53bb\uff0c\u8fd9\u6b21\u5206\u6790\u7684\u662f NettyTransporter \u7684 bind \u65b9\u6cd5\u3002 public Server bind(URL url, ChannelHandler listener) throws RemotingException { // \u521b\u5efa NettyServer return new NettyServer(url, listener); } \u8fd9\u91cc\u4ec5\u6709\u4e00\u53e5\u521b\u5efa NettyServer \u7684\u4ee3\u7801\uff0c\u65e0\u9700\u591a\u8bf4\uff0c\u6211\u4eec\u7ee7\u7eed\u5411\u4e0b\u770b\u3002 public class NettyServer extends AbstractServer implements Server { public NettyServer(URL url, ChannelHandler handler) throws RemotingException { // \u8c03\u7528\u7236\u7c7b\u6784\u9020\u65b9\u6cd5 super(url, ChannelHandlers.wrap(handler, ExecutorUtil.setThreadName(url, SERVER_THREAD_POOL_NAME))); } } public abstract class AbstractServer extends AbstractEndpoint implements Server { public AbstractServer(URL url, ChannelHandler handler) throws RemotingException { // \u8c03\u7528\u7236\u7c7b\u6784\u9020\u65b9\u6cd5\uff0c\u8fd9\u91cc\u5c31\u4e0d\u7528\u8ddf\u8fdb\u53bb\u4e86\uff0c\u6ca1\u4ec0\u4e48\u590d\u6742\u903b\u8f91 super(url, handler); localAddress = getUrl().toInetSocketAddress(); // \u83b7\u53d6 ip \u548c\u7aef\u53e3 String bindIp = getUrl().getParameter(Constants.BIND_IP_KEY, getUrl().getHost()); int bindPort = getUrl().getParameter(Constants.BIND_PORT_KEY, getUrl().getPort()); if (url.getParameter(Constants.ANYHOST_KEY, false) || NetUtils.isInvalidLocalHost(bindIp)) { // \u8bbe\u7f6e ip \u4e3a 0.0.0.0 bindIp = NetUtils.ANYHOST; } bindAddress = new InetSocketAddress(bindIp, bindPort); // \u83b7\u53d6\u6700\u5927\u53ef\u63a5\u53d7\u8fde\u63a5\u6570 this.accepts = url.getParameter(Constants.ACCEPTS_KEY, Constants.DEFAULT_ACCEPTS); this.idleTimeout = url.getParameter(Constants.IDLE_TIMEOUT_KEY, Constants.DEFAULT_IDLE_TIMEOUT); try { // \u8c03\u7528\u6a21\u677f\u65b9\u6cd5 doOpen \u542f\u52a8\u670d\u52a1\u5668 doOpen(); } catch (Throwable t) { throw new RemotingException( Failed to bind ); } DataStore dataStore = ExtensionLoader.getExtensionLoader(DataStore.class).getDefaultExtension(); executor = (ExecutorService) dataStore.get(Constants.EXECUTOR_SERVICE_COMPONENT_KEY, Integer.toString(url.getPort())); } protected abstract void doOpen() throws Throwable; protected abstract void doClose() throws Throwable; } \u4e0a\u9762\u4ee3\u7801\u591a\u4e3a\u8d4b\u503c\u4ee3\u7801\uff0c\u4e0d\u9700\u8981\u591a\u8bb2\u3002\u6211\u4eec\u91cd\u70b9\u5173\u6ce8 doOpen \u62bd\u8c61\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u9700\u8981\u5b50\u7c7b\u5b9e\u73b0\u3002\u4e0b\u9762\u56de\u5230 NettyServer \u4e2d\u3002 protected void doOpen() throws Throwable { NettyHelper.setNettyLoggerFactory(); // \u521b\u5efa boss \u548c worker \u7ebf\u7a0b\u6c60 ExecutorService boss = Executors.newCachedThreadPool(new NamedThreadFactory( NettyServerBoss , true)); ExecutorService worker = Executors.newCachedThreadPool(new NamedThreadFactory( NettyServerWorker , true)); ChannelFactory channelFactory = new NioServerSocketChannelFactory(boss, worker, getUrl().getPositiveParameter(Constants.IO_THREADS_KEY, Constants.DEFAULT_IO_THREADS)); // \u521b\u5efa ServerBootstrap bootstrap = new ServerBootstrap(channelFactory); final NettyHandler nettyHandler = new NettyHandler(getUrl(), this); channels = nettyHandler.getChannels(); bootstrap.setOption( child.tcpNoDelay , true); // \u8bbe\u7f6e PipelineFactory bootstrap.setPipelineFactory(new ChannelPipelineFactory() { @Override public ChannelPipeline getPipeline() { NettyCodecAdapter adapter = new NettyCodecAdapter(getCodec(), getUrl(), NettyServer.this); ChannelPipeline pipeline = Channels.pipeline(); pipeline.addLast( decoder , adapter.getDecoder()); pipeline.addLast( encoder , adapter.getEncoder()); pipeline.addLast( handler , nettyHandler); return pipeline; } }); // \u7ed1\u5b9a\u5230\u6307\u5b9a\u7684 ip \u548c\u7aef\u53e3\u4e0a channel = bootstrap.bind(getBindAddress()); } \u4ee5\u4e0a\u5c31\u662f NettyServer \u521b\u5efa\u7684\u8fc7\u7a0b\uff0cdubbo \u9ed8\u8ba4\u4f7f\u7528\u7684 NettyServer \u662f\u57fa\u4e8e netty 3.x \u7248\u672c\u5b9e\u73b0\u7684\uff0c\u6bd4\u8f83\u8001\u4e86\u3002\u56e0\u6b64 Dubbo \u53e6\u5916\u63d0\u4f9b\u4e86 netty 4.x \u7248\u672c\u7684 NettyServer\uff0c\u5927\u5bb6\u53ef\u5728\u4f7f\u7528 Dubbo \u7684\u8fc7\u7a0b\u4e2d\u6309\u9700\u8fdb\u884c\u914d\u7f6e\u3002 \u5230\u6b64\uff0c\u5173\u4e8e\u670d\u52a1\u5bfc\u51fa\u7684\u8fc7\u7a0b\u5c31\u5206\u6790\u5b8c\u4e86\u3002\u6574\u4e2a\u8fc7\u7a0b\u6bd4\u8f83\u590d\u6742\uff0c\u5927\u5bb6\u5728\u5206\u6790\u7684\u8fc7\u7a0b\u4e2d\u8010\u5fc3\u4e00\u4e9b\u3002\u5e76\u4e14\u591a\u5199 Demo \u8fdb\u884c\u8c03\u8bd5\uff0c\u4ee5\u4fbf\u80fd\u591f\u66f4\u597d\u7684\u7406\u89e3\u4ee3\u7801\u903b\u8f91\u3002 \u672c\u8282\u5185\u5bb9\u5148\u5230\u8fd9\u91cc\uff0c\u63a5\u4e0b\u6765\u5206\u6790\u670d\u52a1\u5bfc\u51fa\u7684\u53e6\u4e00\u5757\u903b\u8f91 \u2014 \u670d\u52a1\u6ce8\u518c\u3002 2.2.4 \u670d\u52a1\u6ce8\u518c \u672c\u8282\u6211\u4eec\u6765\u5206\u6790\u670d\u52a1\u6ce8\u518c\u8fc7\u7a0b\uff0c\u670d\u52a1\u6ce8\u518c\u64cd\u4f5c\u5bf9\u4e8e Dubbo \u6765\u8bf4\u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u901a\u8fc7\u670d\u52a1\u76f4\u8fde\u7684\u65b9\u5f0f\u5c31\u53ef\u4ee5\u7ed5\u8fc7\u6ce8\u518c\u4e2d\u5fc3\u3002\u4f46\u901a\u5e38\u6211\u4eec\u4e0d\u4f1a\u8fd9\u4e48\u505a\uff0c\u76f4\u8fde\u65b9\u5f0f\u4e0d\u5229\u4e8e\u670d\u52a1\u6cbb\u7406\uff0c\u4ec5\u63a8\u8350\u5728\u6d4b\u8bd5\u670d\u52a1\u65f6\u4f7f\u7528\u3002\u5bf9\u4e8e Dubbo \u6765\u8bf4\uff0c\u6ce8\u518c\u4e2d\u5fc3\u867d\u4e0d\u662f\u5fc5\u9700\uff0c\u4f46\u5374\u662f\u5fc5\u8981\u7684\u3002\u56e0\u6b64\uff0c\u5173\u4e8e\u6ce8\u518c\u4e2d\u5fc3\u4ee5\u53ca\u670d\u52a1\u6ce8\u518c\u76f8\u5173\u903b\u8f91\uff0c\u6211\u4eec\u4e5f\u9700\u8981\u641e\u61c2\u3002 \u672c\u8282\u5185\u5bb9\u4ee5 Zookeeper \u6ce8\u518c\u4e2d\u5fc3\u4f5c\u4e3a\u5206\u6790\u76ee\u6807\uff0c\u5176\u4ed6\u7c7b\u578b\u6ce8\u518c\u4e2d\u5fc3\u5927\u5bb6\u53ef\u81ea\u884c\u5206\u6790\u3002\u4e0b\u9762\u4ece\u670d\u52a1\u6ce8\u518c\u7684\u5165\u53e3\u65b9\u6cd5\u5f00\u59cb\u5206\u6790\uff0c\u6211\u4eec\u628a\u76ee\u5149\u518d\u6b21\u79fb\u5230 RegistryProtocol \u7684 export \u65b9\u6cd5\u4e0a\u3002\u5982\u4e0b\uff1a public T Exporter T export(final Invoker T originInvoker) throws RpcException { // ${\u5bfc\u51fa\u670d\u52a1} // \u7701\u7565\u5176\u4ed6\u4ee3\u7801 boolean register = registeredProviderUrl.getParameter( register , true); if (register) { // \u6ce8\u518c\u670d\u52a1 register(registryUrl, registeredProviderUrl); ProviderConsumerRegTable.getProviderWrapper(originInvoker).setReg(true); } final URL overrideSubscribeUrl = getSubscribedOverrideUrl(registeredProviderUrl); final OverrideListener overrideSubscribeListener = new OverrideListener(overrideSubscribeUrl, originInvoker); overrideListeners.put(overrideSubscribeUrl, overrideSubscribeListener); // \u8ba2\u9605 override \u6570\u636e registry.subscribe(overrideSubscribeUrl, overrideSubscribeListener); // \u7701\u7565\u90e8\u5206\u4ee3\u7801 } RegistryProtocol \u7684 export \u65b9\u6cd5\u5305\u542b\u4e86\u670d\u52a1\u5bfc\u51fa\uff0c\u6ce8\u518c\uff0c\u4ee5\u53ca\u6570\u636e\u8ba2\u9605\u7b49\u903b\u8f91\u3002\u5176\u4e2d\u670d\u52a1\u5bfc\u51fa\u903b\u8f91\u4e0a\u4e00\u8282\u5df2\u7ecf\u5206\u6790\u8fc7\u4e86\uff0c\u672c\u8282\u5c06\u5206\u6790\u670d\u52a1\u6ce8\u518c\u903b\u8f91\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a public void register(URL registryUrl, URL registedProviderUrl) { // \u83b7\u53d6 Registry Registry registry = registryFactory.getRegistry(registryUrl); // \u6ce8\u518c\u670d\u52a1 registry.register(registedProviderUrl); } register \u65b9\u6cd5\u5305\u542b\u4e24\u6b65\u64cd\u4f5c\uff0c\u7b2c\u4e00\u6b65\u662f\u83b7\u53d6\u6ce8\u518c\u4e2d\u5fc3\u5b9e\u4f8b\uff0c\u7b2c\u4e8c\u6b65\u662f\u5411\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u670d\u52a1\u3002\u63a5\u4e0b\u6765\u5206\u4e24\u8282\u5185\u5bb9\u5bf9\u8fd9\u4e24\u6b65\u64cd\u4f5c\u8fdb\u884c\u5206\u6790\u3002 2.2.4.1 \u521b\u5efa\u6ce8\u518c\u4e2d\u5fc3 \u672c\u8282\u5185\u5bb9\u4ee5 Zookeeper \u6ce8\u518c\u4e2d\u5fc3\u4e3a\u4f8b\u8fdb\u884c\u5206\u6790\u3002\u4e0b\u9762\u5148\u6765\u770b\u4e00\u4e0b getRegistry \u65b9\u6cd5\u7684\u6e90\u7801\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u7531 AbstractRegistryFactory \u5b9e\u73b0\u3002\u5982\u4e0b\uff1a public Registry getRegistry(URL url) { url = url.setPath(RegistryService.class.getName()) .addParameter(Constants.INTERFACE_KEY, RegistryService.class.getName()) .removeParameters(Constants.EXPORT_KEY, Constants.REFER_KEY); String key = url.toServiceString(); LOCK.lock(); try { // \u8bbf\u95ee\u7f13\u5b58 Registry registry = REGISTRIES.get(key); if (registry != null) { return registry; } // \u7f13\u5b58\u672a\u547d\u4e2d\uff0c\u521b\u5efa Registry \u5b9e\u4f8b registry = createRegistry(url); if (registry == null) { throw new IllegalStateException( Can not create registry... ); } // \u5199\u5165\u7f13\u5b58 REGISTRIES.put(key, registry); return registry; } finally { LOCK.unlock(); } } protected abstract Registry createRegistry(URL url); \u5982\u4e0a\uff0cgetRegistry \u65b9\u6cd5\u5148\u8bbf\u95ee\u7f13\u5b58\uff0c\u7f13\u5b58\u672a\u547d\u4e2d\u5219\u8c03\u7528 createRegistry \u521b\u5efa Registry\uff0c\u7136\u540e\u5199\u5165\u7f13\u5b58\u3002\u8fd9\u91cc\u7684 createRegistry \u662f\u4e00\u4e2a\u6a21\u677f\u65b9\u6cd5\uff0c\u7531\u5177\u4f53\u7684\u5b50\u7c7b\u5b9e\u73b0\u3002\u56e0\u6b64\uff0c\u4e0b\u9762\u6211\u4eec\u5230 ZookeeperRegistryFactory \u4e2d\u63a2\u7a76\u4e00\u756a\u3002 public class ZookeeperRegistryFactory extends AbstractRegistryFactory { // zookeeperTransporter \u7531 SPI \u5728\u8fd0\u884c\u65f6\u6ce8\u5165\uff0c\u7c7b\u578b\u4e3a ZookeeperTransporter$Adaptive private ZookeeperTransporter zookeeperTransporter; public void setZookeeperTransporter(ZookeeperTransporter zookeeperTransporter) { this.zookeeperTransporter = zookeeperTransporter; } @Override public Registry createRegistry(URL url) { // \u521b\u5efa ZookeeperRegistry return new ZookeeperRegistry(url, zookeeperTransporter); } } ZookeeperRegistryFactory \u7684 createRegistry \u65b9\u6cd5\u4ec5\u5305\u542b\u4e00\u53e5\u4ee3\u7801\uff0c\u65e0\u9700\u89e3\u91ca\uff0c\u7ee7\u7eed\u8ddf\u4e0b\u53bb\u3002 public ZookeeperRegistry(URL url, ZookeeperTransporter zookeeperTransporter) { super(url); if (url.isAnyHost()) { throw new IllegalStateException( registry address == null ); } // \u83b7\u53d6\u7ec4\u540d\uff0c\u9ed8\u8ba4\u4e3a dubbo String group = url.getParameter(Constants.GROUP_KEY, DEFAULT_ROOT); if (!group.startsWith(Constants.PATH_SEPARATOR)) { // group = / + group group = Constants.PATH_SEPARATOR + group; } this.root = group; // \u521b\u5efa Zookeeper \u5ba2\u6237\u7aef\uff0c\u9ed8\u8ba4\u4e3a CuratorZookeeperTransporter zkClient = zookeeperTransporter.connect(url); // \u6dfb\u52a0\u72b6\u6001\u76d1\u542c\u5668 zkClient.addStateListener(new StateListener() { @Override public void stateChanged(int state) { if (state == RECONNECTED) { try { recover(); } catch (Exception e) { logger.error(e.getMessage(), e); } } } }); } \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u91cd\u70b9\u5173\u6ce8 ZookeeperTransporter \u7684 connect \u65b9\u6cd5\u8c03\u7528\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u7528\u4e8e\u521b\u5efa Zookeeper \u5ba2\u6237\u7aef\u3002\u521b\u5efa\u597d Zookeeper \u5ba2\u6237\u7aef\uff0c\u610f\u5473\u7740\u6ce8\u518c\u4e2d\u5fc3\u7684\u521b\u5efa\u8fc7\u7a0b\u5c31\u7ed3\u675f\u4e86\u3002\u63a5\u4e0b\u6765\uff0c\u518d\u6765\u5206\u6790\u4e00\u4e0b Zookeeper \u5ba2\u6237\u7aef\u7684\u521b\u5efa\u8fc7\u7a0b\u3002 \u524d\u9762\u8bf4\u8fc7\uff0c\u8fd9\u91cc\u7684 zookeeperTransporter \u7c7b\u578b\u4e3a\u81ea\u9002\u5e94\u62d3\u5c55\u7c7b\uff0c\u56e0\u6b64 connect \u65b9\u6cd5\u4f1a\u5728\u88ab\u8c03\u7528\u65f6\u51b3\u5b9a\u52a0\u8f7d\u4ec0\u4e48\u7c7b\u578b\u7684 ZookeeperTransporter \u62d3\u5c55\uff0c\u9ed8\u8ba4\u4e3a CuratorZookeeperTransporter\u3002\u4e0b\u9762\u6211\u4eec\u5230 CuratorZookeeperTransporter \u4e2d\u770b\u4e00\u770b\u3002 public ZookeeperClient connect(URL url) { // \u521b\u5efa CuratorZookeeperClient return new CuratorZookeeperClient(url); } \u7ee7\u7eed\u5411\u4e0b\u770b\u3002 public class CuratorZookeeperClient extends AbstractZookeeperClient CuratorWatcher { private final CuratorFramework client; public CuratorZookeeperClient(URL url) { super(url); try { // \u521b\u5efa CuratorFramework \u6784\u9020\u5668 CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder() .connectString(url.getBackupAddress()) .retryPolicy(new RetryNTimes(1, 1000)) .connectionTimeoutMs(5000); String authority = url.getAuthority(); if (authority != null authority.length() 0) { builder = builder.authorization( digest , authority.getBytes()); } // \u6784\u5efa CuratorFramework \u5b9e\u4f8b client = builder.build(); // \u6dfb\u52a0\u76d1\u542c\u5668 client.getConnectionStateListenable().addListener(new ConnectionStateListener() { @Override public void stateChanged(CuratorFramework client, ConnectionState state) { if (state == ConnectionState.LOST) { CuratorZookeeperClient.this.stateChanged(StateListener.DISCONNECTED); } else if (state == ConnectionState.CONNECTED) { CuratorZookeeperClient.this.stateChanged(StateListener.CONNECTED); } else if (state == ConnectionState.RECONNECTED) { CuratorZookeeperClient.this.stateChanged(StateListener.RECONNECTED); } } }); // \u542f\u52a8\u5ba2\u6237\u7aef client.start(); } catch (Exception e) { throw new IllegalStateException(e.getMessage(), e); } } } CuratorZookeeperClient \u6784\u9020\u65b9\u6cd5\u4e3b\u8981\u7528\u4e8e\u521b\u5efa\u548c\u542f\u52a8 CuratorFramework \u5b9e\u4f8b\u3002\u4ee5\u4e0a\u57fa\u672c\u4e0a\u90fd\u662f Curator \u6846\u67b6\u7684\u4ee3\u7801\uff0c\u5927\u5bb6\u5982\u679c\u5bf9 Curator \u6846\u67b6\u4e0d\u662f\u5f88\u4e86\u89e3\uff0c\u53ef\u4ee5\u53c2\u8003 Curator \u5b98\u65b9\u6587\u6863\u3002 \u672c\u8282\u5206\u6790\u4e86 ZookeeperRegistry \u5b9e\u4f8b\u7684\u521b\u5efa\u8fc7\u7a0b\uff0c\u6574\u4e2a\u8fc7\u7a0b\u5e76\u4e0d\u662f\u5f88\u590d\u6742\u3002\u5927\u5bb6\u5728\u770b\u5b8c\u5206\u6790\u540e\uff0c\u53ef\u4ee5\u81ea\u884c\u8c03\u8bd5\uff0c\u4ee5\u52a0\u6df1\u7406\u89e3\u3002\u73b0\u5728\u6ce8\u518c\u4e2d\u5fc3\u5b9e\u4f8b\u521b\u5efa\u597d\u4e86\uff0c\u63a5\u4e0b\u6765\u8981\u505a\u7684\u4e8b\u60c5\u662f\u5411\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u670d\u52a1\uff0c\u6211\u4eec\u7ee7\u7eed\u5f80\u4e0b\u770b\u3002 2.2.4.2 \u8282\u70b9\u521b\u5efa \u4ee5 Zookeeper \u4e3a\u4f8b\uff0c\u6240\u8c13\u7684\u670d\u52a1\u6ce8\u518c\uff0c\u672c\u8d28\u4e0a\u662f\u5c06\u670d\u52a1\u914d\u7f6e\u6570\u636e\u5199\u5165\u5230 Zookeeper \u7684\u67d0\u4e2a\u8def\u5f84\u7684\u8282\u70b9\u4e0b\u3002\u4e3a\u4e86\u8ba9\u5927\u5bb6\u6709\u4e00\u4e2a\u76f4\u89c2\u7684\u4e86\u89e3\uff0c\u4e0b\u9762\u6211\u4eec\u5c06 Dubbo \u7684 demo \u8dd1\u8d77\u6765\uff0c\u7136\u540e\u901a\u8fc7 Zookeeper \u53ef\u89c6\u5316\u5ba2\u6237\u7aef ZooInspector \u67e5\u770b\u8282\u70b9\u6570\u636e\u3002\u5982\u4e0b\uff1a \u4ece\u4e0a\u56fe\u4e2d\u53ef\u4ee5\u770b\u5230 com.alibaba.dubbo.demo.DemoService \u8fd9\u4e2a\u670d\u52a1\u5bf9\u5e94\u7684\u914d\u7f6e\u4fe1\u606f\uff08\u5b58\u50a8\u5728 URL \u4e2d\uff09\u6700\u7ec8\u88ab\u6ce8\u518c\u5230\u4e86 /dubbo/com.alibaba.dubbo.demo.DemoService/providers/ \u8282\u70b9\u4e0b\u3002\u641e\u61c2\u4e86\u670d\u52a1\u6ce8\u518c\u7684\u672c\u8d28\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u53ef\u4ee5\u53bb\u9605\u8bfb\u670d\u52a1\u6ce8\u518c\u7684\u4ee3\u7801\u4e86\u3002\u670d\u52a1\u6ce8\u518c\u7684\u63a5\u53e3\u4e3a register(URL)\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5b9a\u4e49\u5728 FailbackRegistry \u62bd\u8c61\u7c7b\u4e2d\u3002\u4ee3\u7801\u5982\u4e0b\uff1a public void register(URL url) { super.register(url); failedRegistered.remove(url); failedUnregistered.remove(url); try { // \u6a21\u677f\u65b9\u6cd5\uff0c\u7531\u5b50\u7c7b\u5b9e\u73b0 doRegister(url); } catch (Exception e) { Throwable t = e; // \u83b7\u53d6 check \u53c2\u6570\uff0c\u82e5 check = true \u5c06\u4f1a\u76f4\u63a5\u629b\u51fa\u5f02\u5e38 boolean check = getUrl().getParameter(Constants.CHECK_KEY, true) url.getParameter(Constants.CHECK_KEY, true) !Constants.CONSUMER_PROTOCOL.equals(url.getProtocol()); boolean skipFailback = t instanceof SkipFailbackWrapperException; if (check || skipFailback) { if (skipFailback) { t = t.getCause(); } throw new IllegalStateException( Failed to register ); } else { logger.error( Failed to register ); } // \u8bb0\u5f55\u6ce8\u518c\u5931\u8d25\u7684\u94fe\u63a5 failedRegistered.add(url); } } protected abstract void doRegister(URL url); \u5982\u4e0a\uff0c\u6211\u4eec\u91cd\u70b9\u5173\u6ce8 doRegister \u65b9\u6cd5\u8c03\u7528\u5373\u53ef\uff0c\u5176\u4ed6\u7684\u4ee3\u7801\u5148\u5ffd\u7565\u3002doRegister \u65b9\u6cd5\u662f\u4e00\u4e2a\u6a21\u677f\u65b9\u6cd5\uff0c\u56e0\u6b64\u6211\u4eec\u5230 FailbackRegistry \u5b50\u7c7b ZookeeperRegistry \u4e2d\u8fdb\u884c\u5206\u6790\u3002\u5982\u4e0b\uff1a protected void doRegister(URL url) { try { // \u901a\u8fc7 Zookeeper \u5ba2\u6237\u7aef\u521b\u5efa\u8282\u70b9\uff0c\u8282\u70b9\u8def\u5f84\u7531 toUrlPath \u65b9\u6cd5\u751f\u6210\uff0c\u8def\u5f84\u683c\u5f0f\u5982\u4e0b: // /${group}/${serviceInterface}/providers/${url} // \u6bd4\u5982 // /dubbo/org.apache.dubbo.DemoService/providers/dubbo%3A%2F%2F127.0.0.1...... zkClient.create(toUrlPath(url), url.getParameter(Constants.DYNAMIC_KEY, true)); } catch (Throwable e) { throw new RpcException( Failed to register... ); } } \u5982\u4e0a\uff0cZookeeperRegistry \u5728 doRegister \u4e2d\u8c03\u7528\u4e86 Zookeeper \u5ba2\u6237\u7aef\u521b\u5efa\u670d\u52a1\u8282\u70b9\u3002\u8282\u70b9\u8def\u5f84\u7531 toUrlPath \u65b9\u6cd5\u751f\u6210\uff0c\u8be5\u65b9\u6cd5\u903b\u8f91\u4e0d\u96be\u7406\u89e3\uff0c\u5c31\u4e0d\u5206\u6790\u4e86\u3002\u63a5\u4e0b\u6765\u5206\u6790 create \u65b9\u6cd5\uff0c\u5982\u4e0b\uff1a public void create(String path, boolean ephemeral) { if (!ephemeral) { // \u5982\u679c\u8981\u521b\u5efa\u7684\u8282\u70b9\u7c7b\u578b\u975e\u4e34\u65f6\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u91cc\u8981\u68c0\u6d4b\u8282\u70b9\u662f\u5426\u5b58\u5728 if (checkExists(path)) { return; } } int i = path.lastIndexOf('/'); if (i 0) { // \u9012\u5f52\u521b\u5efa\u4e0a\u4e00\u7ea7\u8def\u5f84 create(path.substring(0, i), false); } // \u6839\u636e ephemeral \u7684\u503c\u521b\u5efa\u4e34\u65f6\u6216\u6301\u4e45\u8282\u70b9 if (ephemeral) { createEphemeral(path); } else { createPersistent(path); } } \u4e0a\u9762\u65b9\u6cd5\u5148\u662f\u901a\u8fc7\u9012\u5f52\u521b\u5efa\u5f53\u524d\u8282\u70b9\u7684\u4e0a\u4e00\u7ea7\u8def\u5f84\uff0c\u7136\u540e\u518d\u6839\u636e ephemeral \u7684\u503c\u51b3\u5b9a\u521b\u5efa\u4e34\u65f6\u8fd8\u662f\u6301\u4e45\u8282\u70b9\u3002createEphemeral \u548c createPersistent \u8fd9\u4e24\u4e2a\u65b9\u6cd5\u90fd\u6bd4\u8f83\u7b80\u5355\uff0c\u8fd9\u91cc\u7b80\u5355\u5206\u6790\u5176\u4e2d\u7684\u4e00\u4e2a\u3002\u5982\u4e0b\uff1a public void createEphemeral(String path) { try { // \u901a\u8fc7 Curator \u6846\u67b6\u521b\u5efa\u8282\u70b9 client.create().withMode(CreateMode.EPHEMERAL).forPath(path); } catch (NodeExistsException e) { } catch (Exception e) { throw new IllegalStateException(e.getMessage(), e); } } \u597d\u4e86\uff0c\u5230\u6b64\u5173\u4e8e\u670d\u52a1\u6ce8\u518c\u7684\u8fc7\u7a0b\u5c31\u5206\u6790\u5b8c\u4e86\u3002\u6574\u4e2a\u8fc7\u7a0b\u53ef\u7b80\u5355\u603b\u7ed3\u4e3a\uff1a\u5148\u521b\u5efa\u6ce8\u518c\u4e2d\u5fc3\u5b9e\u4f8b\uff0c\u4e4b\u540e\u518d\u901a\u8fc7\u6ce8\u518c\u4e2d\u5fc3\u5b9e\u4f8b\u6ce8\u518c\u670d\u52a1\u3002\u672c\u8282\u5148\u5230\u8fd9\uff0c\u63a5\u4e0b\u6765\u5206\u6790\u6570\u636e\u8ba2\u9605\u8fc7\u7a0b\u3002 2.2.5 \u8ba2\u9605 override \u6570\u636e // \u5f85\u8865\u5145 3.\u603b\u7ed3 \u672c\u7bc7\u6587\u7ae0\u8be6\u7ec6\u5206\u6790\u4e86 Dubbo \u670d\u52a1\u5bfc\u51fa\u8fc7\u7a0b\uff0c\u5305\u62ec\u914d\u7f6e\u68c0\u6d4b\uff0cURL \u7ec4\u88c5\uff0cInvoker \u521b\u5efa\u8fc7\u7a0b\u3001\u5bfc\u51fa\u670d\u52a1\u4ee5\u53ca\u6ce8\u518c\u670d\u52a1\u7b49\u7b49\u3002\u7bc7\u5e45\u6bd4\u8f83\u5927\uff0c\u9700\u8981\u5927\u5bb6\u8010\u5fc3\u9605\u8bfb\u3002\u672c\u7bc7\u6587\u7ae0\u5148\u5c31\u5230\u8fd9\uff0c\u5982\u679c\u6587\u7ae0\u6709\u4e0d\u59a5\u9519\u8bef\u4e4b\u5904\uff0c\u5e0c\u671b\u5927\u5bb6\u80fd\u591f\u8fdb\u884c\u53cd\u9988\u6216\u4fee\u6b63\u3002","title":"\u670d\u52a1\u5bfc\u51fa"},{"location":"source_code_guide/export-service/#1","text":"\u672c\u7bc7\u6587\u7ae0\uff0c\u6211\u4eec\u6765\u7814\u7a76\u4e00\u4e0b Dubbo \u5bfc\u51fa\u670d\u52a1\u7684\u8fc7\u7a0b\u3002Dubbo \u670d\u52a1\u5bfc\u51fa\u8fc7\u7a0b\u59cb\u4e8e Spring \u5bb9\u5668\u53d1\u5e03\u5237\u65b0\u4e8b\u4ef6\uff0cDubbo \u5728\u63a5\u6536\u5230\u4e8b\u4ef6\u540e\uff0c\u4f1a\u7acb\u5373\u6267\u884c\u670d\u52a1\u5bfc\u51fa\u903b\u8f91\u3002\u6574\u4e2a\u903b\u8f91\u5927\u81f4\u53ef\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206\uff0c\u7b2c\u4e00\u90e8\u5206\u662f\u524d\u7f6e\u5de5\u4f5c\uff0c\u4e3b\u8981\u7528\u4e8e\u68c0\u67e5\u53c2\u6570\uff0c\u7ec4\u88c5 URL\u3002\u7b2c\u4e8c\u90e8\u5206\u662f\u5bfc\u51fa\u670d\u52a1\uff0c\u5305\u542b\u5bfc\u51fa\u670d\u52a1\u5230\u672c\u5730 (JVM)\uff0c\u548c\u5bfc\u51fa\u670d\u52a1\u5230\u8fdc\u7a0b\u4e24\u4e2a\u8fc7\u7a0b\u3002\u7b2c\u4e09\u90e8\u5206\u662f\u5411\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u670d\u52a1\uff0c\u7528\u4e8e\u670d\u52a1\u53d1\u73b0\u3002\u672c\u7bc7\u6587\u7ae0\u5c06\u4f1a\u5bf9\u8fd9\u4e09\u4e2a\u90e8\u5206\u4ee3\u7801\u8fdb\u884c\u8be6\u7ec6\u7684\u5206\u6790\u3002","title":"1.\u7b80\u4ecb"},{"location":"source_code_guide/export-service/#2","text":"\u670d\u52a1\u5bfc\u51fa\u7684\u5165\u53e3\u65b9\u6cd5\u662f ServiceBean \u7684 onApplicationEvent\u3002onApplicationEvent \u662f\u4e00\u4e2a\u4e8b\u4ef6\u54cd\u5e94\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u4f1a\u5728\u6536\u5230 Spring \u4e0a\u4e0b\u6587\u5237\u65b0\u4e8b\u4ef6\u540e\u6267\u884c\u670d\u52a1\u5bfc\u51fa\u64cd\u4f5c\u3002\u65b9\u6cd5\u4ee3\u7801\u5982\u4e0b\uff1a public void onApplicationEvent(ContextRefreshedEvent event) { // \u662f\u5426\u6709\u5ef6\u8fdf\u5bfc\u51fa \u662f\u5426\u5df2\u5bfc\u51fa \u662f\u4e0d\u662f\u5df2\u88ab\u53d6\u6d88\u5bfc\u51fa if (isDelay() !isExported() !isUnexported()) { // \u5bfc\u51fa\u670d\u52a1 export(); } } \u8fd9\u4e2a\u65b9\u6cd5\u9996\u5148\u4f1a\u6839\u636e\u6761\u4ef6\u51b3\u5b9a\u662f\u5426\u5bfc\u51fa\u670d\u52a1\uff0c\u6bd4\u5982\u6709\u4e9b\u670d\u52a1\u8bbe\u7f6e\u4e86\u5ef6\u65f6\u5bfc\u51fa\uff0c\u90a3\u4e48\u6b64\u65f6\u5c31\u4e0d\u5e94\u8be5\u5728\u6b64\u5904\u5bfc\u51fa\u3002\u8fd8\u6709\u4e00\u4e9b\u670d\u52a1\u5df2\u7ecf\u88ab\u5bfc\u51fa\u4e86\uff0c\u6216\u8005\u5f53\u524d\u670d\u52a1\u88ab\u53d6\u6d88\u5bfc\u51fa\u4e86\uff0c\u6b64\u65f6\u4e5f\u4e0d\u80fd\u518d\u6b21\u5bfc\u51fa\u76f8\u5173\u670d\u52a1\u3002\u6ce8\u610f\u8fd9\u91cc\u7684 isDelay \u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5b57\u9762\u610f\u601d\u662f\u201c\u662f\u5426\u5ef6\u8fdf\u5bfc\u51fa\u670d\u52a1\u201d\uff0c\u8fd4\u56de true \u8868\u793a\u5ef6\u8fdf\u5bfc\u51fa\uff0cfalse \u8868\u793a\u4e0d\u5ef6\u8fdf\u5bfc\u51fa\u3002\u4f46\u662f\u8be5\u65b9\u6cd5\u771f\u5b9e\u610f\u601d\u5374\u5e76\u975e\u5982\u6b64\uff0c\u5f53\u65b9\u6cd5\u8fd4\u56de true \u65f6\uff0c\u8868\u793a\u65e0\u9700\u5ef6\u8fdf\u5bfc\u51fa\u3002\u8fd4\u56de false \u65f6\uff0c\u8868\u793a\u9700\u8981\u5ef6\u8fdf\u5bfc\u51fa\u3002\u4e0e\u5b57\u9762\u610f\u601d\u6070\u6070\u76f8\u53cd\uff0c\u8fd9\u4e2a\u9700\u8981\u5927\u5bb6\u6ce8\u610f\u4e00\u4e0b\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u65b9\u6cd5\u7684\u903b\u8f91\u3002 // -\u2606- ServiceBean private boolean isDelay() { // \u83b7\u53d6 delay Integer delay = getDelay(); ProviderConfig provider = getProvider(); if (delay == null provider != null) { // \u5982\u679c\u524d\u9762\u83b7\u53d6\u7684 delay \u4e3a\u7a7a\uff0c\u8fd9\u91cc\u7ee7\u7eed\u83b7\u53d6 delay = provider.getDelay(); } // \u5224\u65ad delay \u662f\u5426\u4e3a\u7a7a\uff0c\u6216\u8005\u7b49\u4e8e -1 return supportedApplicationListener (delay == null || delay == -1); } \u6682\u65f6\u5ffd\u7565 supportedApplicationListener \u8fd9\u4e2a\u6761\u4ef6\uff0c\u5f53 delay \u4e3a\u7a7a\uff0c\u6216\u8005\u7b49\u4e8e-1\u65f6\uff0c\u8be5\u65b9\u6cd5\u8fd4\u56de true\uff0c\u800c\u4e0d\u662f false\u3002\u8fd9\u4e2a\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u8ba9\u4eba\u6709\u70b9\u56f0\u60d1\u3002\u8be5\u65b9\u6cd5\u76ee\u524d\u5df2\u88ab\u91cd\u6784\uff0c\u8be6\u7ec6\u8bf7\u53c2\u8003 dubbo #2686 \u3002 \u73b0\u5728\u89e3\u91ca\u4e00\u4e0b supportedApplicationListener \u53d8\u91cf\u542b\u4e49\uff0c\u8be5\u53d8\u91cf\u7528\u4e8e\u8868\u793a\u5f53\u524d\u7684 Spring \u5bb9\u5668\u662f\u5426\u652f\u6301 ApplicationListener\uff0c\u8fd9\u4e2a\u503c\u521d\u59cb\u4e3a false\u3002\u5728 Spring \u5bb9\u5668\u5c06\u81ea\u5df1\u8bbe\u7f6e\u5230 ServiceBean \u4e2d\u65f6\uff0cServiceBean \u7684 setApplicationContext \u65b9\u6cd5\u4f1a\u68c0\u6d4b Spring \u5bb9\u5668\u662f\u5426\u652f\u6301 ApplicationListener\u3002\u82e5\u652f\u6301\uff0c\u5219\u5c06 supportedApplicationListener \u7f6e\u4e3a true\u3002ServiceBean \u662f Dubbo \u4e0e Spring \u6846\u67b6\u8fdb\u884c\u6574\u5408\u7684\u5173\u952e\uff0c\u53ef\u4ee5\u770b\u505a\u662f\u4e24\u4e2a\u6846\u67b6\u4e4b\u95f4\u7684\u6865\u6881\u3002\u5177\u6709\u540c\u6837\u4f5c\u7528\u7684\u7c7b\u8fd8\u6709 ReferenceBean\u3002 \u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86 Dubbo \u670d\u52a1\u5bfc\u51fa\u8fc7\u7a0b\u7684\u8d77\u70b9\uff0c\u63a5\u4e0b\u6765\u5bf9\u670d\u52a1\u5bfc\u51fa\u7684\u524d\u7f6e\u903b\u8f91\u8fdb\u884c\u5206\u6790\u3002","title":"2.\u6e90\u7801\u5206\u6790"},{"location":"source_code_guide/export-service/#21","text":"\u524d\u7f6e\u5de5\u4f5c\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u90e8\u5206\uff0c\u5206\u522b\u662f\u914d\u7f6e\u68c0\u67e5\uff0c\u4ee5\u53ca URL \u88c5\u914d\u3002\u5728\u5bfc\u51fa\u670d\u52a1\u4e4b\u524d\uff0cDubbo \u9700\u8981\u68c0\u67e5\u7528\u6237\u7684\u914d\u7f6e\u662f\u5426\u5408\u7406\uff0c\u6216\u8005\u4e3a\u7528\u6237\u8865\u5145\u7f3a\u7701\u914d\u7f6e\u3002\u914d\u7f6e\u68c0\u67e5\u5b8c\u6210\u540e\uff0c\u63a5\u4e0b\u6765\u9700\u8981\u6839\u636e\u8fd9\u4e9b\u914d\u7f6e\u7ec4\u88c5 URL\u3002\u5728 Dubbo \u4e2d\uff0cURL \u7684\u4f5c\u7528\u5341\u5206\u91cd\u8981\u3002Dubbo \u4f7f\u7528 URL \u4f5c\u4e3a\u914d\u7f6e\u8f7d\u4f53\uff0c\u6240\u6709\u7684\u62d3\u5c55\u70b9\u90fd\u662f\u901a\u8fc7 URL \u83b7\u53d6\u914d\u7f6e\u3002\u8fd9\u4e00\u70b9\uff0c\u5b98\u65b9\u6587\u6863\u4e2d\u6709\u6240\u8bf4\u660e\u3002 \u91c7\u7528 URL \u4f5c\u4e3a\u914d\u7f6e\u4fe1\u606f\u7684\u7edf\u4e00\u683c\u5f0f\uff0c\u6240\u6709\u6269\u5c55\u70b9\u90fd\u901a\u8fc7\u4f20\u9012 URL \u643a\u5e26\u914d\u7f6e\u4fe1\u606f\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5148\u6765\u5206\u6790\u914d\u7f6e\u68c0\u67e5\u90e8\u5206\u7684\u6e90\u7801\uff0c\u968f\u540e\u518d\u6765\u5206\u6790 URL \u7ec4\u88c5\u90e8\u5206\u7684\u6e90\u7801\u3002","title":"2.1 \u524d\u7f6e\u5de5\u4f5c"},{"location":"source_code_guide/export-service/#211","text":"\u672c\u8282\u6211\u4eec\u63a5\u7740\u524d\u9762\u7684\u6e90\u7801\u5411\u4e0b\u5206\u6790\uff0c\u524d\u9762\u8bf4\u8fc7 onApplicationEvent \u65b9\u6cd5\u5728\u7ecf\u8fc7\u4e00\u4e9b\u5224\u65ad\u540e\uff0c\u4f1a\u51b3\u5b9a\u662f\u5426\u8c03\u7528 export \u65b9\u6cd5\u5bfc\u51fa\u670d\u52a1\u3002\u90a3\u4e48\u4e0b\u9762\u6211\u4eec\u4ece export \u65b9\u6cd5\u5f00\u59cb\u8fdb\u884c\u5206\u6790\uff0c\u5982\u4e0b\uff1a public synchronized void export() { if (provider != null) { // \u83b7\u53d6 export \u548c delay \u914d\u7f6e if (export == null) { export = provider.getExport(); } if (delay == null) { delay = provider.getDelay(); } } // \u5982\u679c export \u4e3a false\uff0c\u5219\u4e0d\u5bfc\u51fa\u670d\u52a1 if (export != null !export) { return; } // delay 0\uff0c\u5ef6\u65f6\u5bfc\u51fa\u670d\u52a1 if (delay != null delay 0) { delayExportExecutor.schedule(new Runnable() { @Override public void run() { doExport(); } }, delay, TimeUnit.MILLISECONDS); // \u7acb\u5373\u5bfc\u51fa\u670d\u52a1 } else { doExport(); } } export \u65b9\u6cd5\u5bf9\u4e24\u9879\u914d\u7f6e\u8fdb\u884c\u4e86\u68c0\u67e5\uff0c\u5e76\u6839\u636e\u914d\u7f6e\u6267\u884c\u76f8\u5e94\u7684\u52a8\u4f5c\u3002\u9996\u5148\u662f export \u914d\u7f6e\uff0c\u8fd9\u4e2a\u914d\u7f6e\u51b3\u5b9a\u4e86\u662f\u5426\u5bfc\u51fa\u670d\u52a1\u3002\u6709\u65f6\u5019\u6211\u4eec\u53ea\u662f\u60f3\u672c\u5730\u542f\u52a8\u670d\u52a1\u8fdb\u884c\u4e00\u4e9b\u8c03\u8bd5\u5de5\u4f5c\uff0c\u6211\u4eec\u5e76\u4e0d\u5e0c\u671b\u628a\u672c\u5730\u542f\u52a8\u7684\u670d\u52a1\u66b4\u9732\u51fa\u53bb\u7ed9\u522b\u4eba\u8c03\u7528\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u53ef\u901a\u8fc7\u914d\u7f6e export \u7981\u6b62\u670d\u52a1\u5bfc\u51fa\uff0c\u6bd4\u5982\uff1a dubbo:provider export= false / delay \u914d\u7f6e\u987e\u540d\u601d\u4e49\uff0c\u7528\u4e8e\u5ef6\u8fdf\u5bfc\u51fa\u670d\u52a1\uff0c\u8fd9\u4e2a\u5c31\u4e0d\u5206\u6790\u4e86\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u7ee7\u7eed\u5206\u6790\u6e90\u7801\uff0c\u8fd9\u6b21\u8981\u5206\u6790\u7684\u662f doExport \u65b9\u6cd5\u3002 protected synchronized void doExport() { if (unexported) { throw new IllegalStateException( Already unexported! ); } if (exported) { return; } exported = true; // \u68c0\u6d4b interfaceName \u662f\u5426\u5408\u6cd5 if (interfaceName == null || interfaceName.length() == 0) { throw new IllegalStateException( interface not allow null! ); } // \u68c0\u6d4b provider \u662f\u5426\u4e3a\u7a7a\uff0c\u4e3a\u7a7a\u5219\u65b0\u5efa\u4e00\u4e2a\uff0c\u5e76\u901a\u8fc7\u7cfb\u7edf\u53d8\u91cf\u4e3a\u5176\u521d\u59cb\u5316 checkDefault(); // \u4e0b\u9762\u51e0\u4e2a if \u8bed\u53e5\u7528\u4e8e\u68c0\u6d4b provider\u3001application \u7b49\u6838\u5fc3\u914d\u7f6e\u7c7b\u5bf9\u8c61\u662f\u5426\u4e3a\u7a7a\uff0c // \u82e5\u4e3a\u7a7a\uff0c\u5219\u5c1d\u8bd5\u4ece\u5176\u4ed6\u914d\u7f6e\u7c7b\u5bf9\u8c61\u4e2d\u83b7\u53d6\u76f8\u5e94\u7684\u5b9e\u4f8b\u3002 if (provider != null) { if (application == null) { application = provider.getApplication(); } if (module == null) { module = provider.getModule(); } if (registries == null) {...} if (monitor == null) {...} if (protocols == null) {...} } if (module != null) { if (registries == null) { registries = module.getRegistries(); } if (monitor == null) {...} } if (application != null) { if (registries == null) { registries = application.getRegistries(); } if (monitor == null) {...} } // \u68c0\u6d4b ref \u662f\u5426\u4e3a\u6cdb\u5316\u670d\u52a1\u7c7b\u578b if (ref instanceof GenericService) { // \u8bbe\u7f6e interfaceClass \u4e3a GenericService.class interfaceClass = GenericService.class; if (StringUtils.isEmpty(generic)) { // \u8bbe\u7f6e generic = true generic = Boolean.TRUE.toString(); } // ref \u975e GenericService \u7c7b\u578b } else { try { interfaceClass = Class.forName(interfaceName, true, Thread.currentThread() .getContextClassLoader()); } catch (ClassNotFoundException e) { throw new IllegalStateException(e.getMessage(), e); } // \u5bf9 interfaceClass\uff0c\u4ee5\u53ca dubbo:method \u6807\u7b7e\u4e2d\u7684\u5fc5\u8981\u5b57\u6bb5\u8fdb\u884c\u68c0\u67e5 checkInterfaceAndMethods(interfaceClass, methods); // \u5bf9 ref \u5408\u6cd5\u6027\u8fdb\u884c\u68c0\u6d4b checkRef(); // \u8bbe\u7f6e generic = false generic = Boolean.FALSE.toString(); } // local \u548c stub \u5728\u529f\u80fd\u5e94\u8be5\u662f\u4e00\u81f4\u7684\uff0c\u7528\u4e8e\u914d\u7f6e\u672c\u5730\u5b58\u6839 if (local != null) { if ( true .equals(local)) { local = interfaceName + Local ; } Class ? localClass; try { // \u83b7\u53d6\u672c\u5730\u5b58\u6839\u7c7b localClass = ClassHelper.forNameWithThreadContextClassLoader(local); } catch (ClassNotFoundException e) { throw new IllegalStateException(e.getMessage(), e); } // \u68c0\u6d4b\u672c\u5730\u5b58\u6839\u7c7b\u662f\u5426\u53ef\u8d4b\u503c\u7ed9\u63a5\u53e3\u7c7b\uff0c\u82e5\u4e0d\u53ef\u8d4b\u503c\u5219\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u63d0\u9192\u4f7f\u7528\u8005\u672c\u5730\u5b58\u6839\u7c7b\u7c7b\u578b\u4e0d\u5408\u6cd5 if (!interfaceClass.isAssignableFrom(localClass)) { throw new IllegalStateException( The local implementation class + localClass.getName() + not implement interface + interfaceName); } } if (stub != null) { // \u6b64\u5904\u7684\u4ee3\u7801\u548c\u4e0a\u4e00\u4e2a if \u5206\u652f\u7684\u4ee3\u7801\u57fa\u672c\u4e00\u81f4\uff0c\u8fd9\u91cc\u7701\u7565 } // \u68c0\u6d4b\u5404\u79cd\u5bf9\u8c61\u662f\u5426\u4e3a\u7a7a\uff0c\u4e3a\u7a7a\u5219\u65b0\u5efa\uff0c\u6216\u8005\u629b\u51fa\u5f02\u5e38 checkApplication(); checkRegistry(); checkProtocol(); appendProperties(this); checkStubAndMock(interfaceClass); if (path == null || path.length() == 0) { path = interfaceName; } // \u5bfc\u51fa\u670d\u52a1 doExportUrls(); // ProviderModel \u8868\u793a\u670d\u52a1\u63d0\u4f9b\u8005\u6a21\u578b\uff0c\u6b64\u5bf9\u8c61\u4e2d\u5b58\u50a8\u4e86\u4e0e\u670d\u52a1\u63d0\u4f9b\u8005\u76f8\u5173\u7684\u4fe1\u606f\u3002 // \u6bd4\u5982\u670d\u52a1\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u670d\u52a1\u5b9e\u4f8b\u7b49\u3002\u6bcf\u4e2a\u88ab\u5bfc\u51fa\u7684\u670d\u52a1\u5bf9\u5e94\u4e00\u4e2a ProviderModel\u3002 // ApplicationModel \u6301\u6709\u6240\u6709\u7684 ProviderModel\u3002 ProviderModel providerModel = new ProviderModel(getUniqueServiceName(), this, ref); ApplicationModel.initProviderModel(getUniqueServiceName(), providerModel); } \u4ee5\u4e0a\u5c31\u662f\u914d\u7f6e\u68c0\u67e5\u7684\u76f8\u5173\u5206\u6790\uff0c\u4ee3\u7801\u6bd4\u8f83\u591a\uff0c\u9700\u8981\u5927\u5bb6\u8010\u5fc3\u770b\u4e00\u4e0b\u3002\u4e0b\u9762\u5bf9\u914d\u7f6e\u68c0\u67e5\u7684\u903b\u8f91\u8fdb\u884c\u7b80\u5355\u7684\u603b\u7ed3\uff0c\u5982\u4e0b\uff1a \u68c0\u6d4b \\ dubbo:service> \u6807\u7b7e\u7684 interface \u5c5e\u6027\u5408\u6cd5\u6027\uff0c\u4e0d\u5408\u6cd5\u5219\u629b\u51fa\u5f02\u5e38 \u68c0\u6d4b ProviderConfig\u3001ApplicationConfig \u7b49\u6838\u5fc3\u914d\u7f6e\u7c7b\u5bf9\u8c61\u662f\u5426\u4e3a\u7a7a\uff0c\u82e5\u4e3a\u7a7a\uff0c\u5219\u5c1d\u8bd5\u4ece\u5176\u4ed6\u914d\u7f6e\u7c7b\u5bf9\u8c61\u4e2d\u83b7\u53d6\u76f8\u5e94\u7684\u5b9e\u4f8b\u3002 \u68c0\u6d4b\u5e76\u5904\u7406\u6cdb\u5316\u670d\u52a1\u548c\u666e\u901a\u670d\u52a1\u7c7b \u68c0\u6d4b\u672c\u5730\u5b58\u6839\u914d\u7f6e\uff0c\u5e76\u8fdb\u884c\u76f8\u5e94\u7684\u5904\u7406 \u5bf9 ApplicationConfig\u3001RegistryConfig \u7b49\u914d\u7f6e\u7c7b\u8fdb\u884c\u68c0\u6d4b\uff0c\u4e3a\u7a7a\u5219\u5c1d\u8bd5\u521b\u5efa\uff0c\u82e5\u65e0\u6cd5\u521b\u5efa\u5219\u629b\u51fa\u5f02\u5e38 \u914d\u7f6e\u68c0\u67e5\u5e76\u975e\u672c\u6587\u91cd\u70b9\uff0c\u56e0\u6b64\u8fd9\u91cc\u4e0d\u6253\u7b97\u5bf9 doExport \u65b9\u6cd5\u6240\u8c03\u7528\u7684\u65b9\u6cd5\u8fdb\u884c\u5206\u6790\uff08doExportUrls \u65b9\u6cd5\u9664\u5916\uff09\u3002\u5728\u8fd9\u4e9b\u65b9\u6cd5\u4e2d\uff0c\u9664\u4e86 appendProperties \u65b9\u6cd5\u7a0d\u5fae\u590d\u6742\u4e00\u4e9b\uff0c\u5176\u4ed6\u65b9\u6cd5\u903b\u8f91\u4e0d\u662f\u5f88\u590d\u6742\u3002\u56e0\u6b64\uff0c\u5927\u5bb6\u53ef\u81ea\u884c\u5206\u6790\u3002","title":"2.1.1 \u68c0\u67e5\u914d\u7f6e"},{"location":"source_code_guide/export-service/#212","text":"Dubbo \u5141\u8bb8\u6211\u4eec\u4f7f\u7528\u4e0d\u540c\u7684\u534f\u8bae\u5bfc\u51fa\u670d\u52a1\uff0c\u4e5f\u5141\u8bb8\u6211\u4eec\u5411\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u670d\u52a1\u3002Dubbo \u5728 doExportUrls \u65b9\u6cd5\u4e2d\u5bf9\u591a\u534f\u8bae\uff0c\u591a\u6ce8\u518c\u4e2d\u5fc3\u8fdb\u884c\u4e86\u652f\u6301\u3002\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a private void doExportUrls() { // \u52a0\u8f7d\u6ce8\u518c\u4e2d\u5fc3\u94fe\u63a5 List URL registryURLs = loadRegistries(true); // \u904d\u5386 protocols\uff0c\u5e76\u5728\u6bcf\u4e2a\u534f\u8bae\u4e0b\u5bfc\u51fa\u670d\u52a1 for (ProtocolConfig protocolConfig : protocols) { doExportUrlsFor1Protocol(protocolConfig, registryURLs); } } \u4e0a\u9762\u4ee3\u7801\u9996\u5148\u662f\u901a\u8fc7 loadRegistries \u52a0\u8f7d\u6ce8\u518c\u4e2d\u5fc3\u94fe\u63a5\uff0c\u7136\u540e\u518d\u904d\u5386 ProtocolConfig \u96c6\u5408\u5bfc\u51fa\u6bcf\u4e2a\u670d\u52a1\u3002\u5e76\u5728\u5bfc\u51fa\u670d\u52a1\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5c06\u670d\u52a1\u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e0b loadRegistries \u65b9\u6cd5\u7684\u903b\u8f91\u3002 protected List URL loadRegistries(boolean provider) { // \u68c0\u6d4b\u662f\u5426\u5b58\u5728\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e\u7c7b\uff0c\u4e0d\u5b58\u5728\u5219\u629b\u51fa\u5f02\u5e38 checkRegistry(); List URL registryList = new ArrayList URL (); if (registries != null !registries.isEmpty()) { for (RegistryConfig config : registries) { String address = config.getAddress(); if (address == null || address.length() == 0) { // \u82e5 address \u4e3a\u7a7a\uff0c\u5219\u5c06\u5176\u8bbe\u4e3a 0.0.0.0 address = Constants.ANYHOST_VALUE; } // \u4ece\u7cfb\u7edf\u5c5e\u6027\u4e2d\u52a0\u8f7d\u6ce8\u518c\u4e2d\u5fc3\u5730\u5740 String sysaddress = System.getProperty( dubbo.registry.address ); if (sysaddress != null sysaddress.length() 0) { address = sysaddress; } // \u68c0\u6d4b address \u662f\u5426\u5408\u6cd5 if (address.length() 0 !RegistryConfig.NO_AVAILABLE.equalsIgnoreCase(address)) { Map String, String map = new HashMap String, String (); // \u6dfb\u52a0 ApplicationConfig \u4e2d\u7684\u5b57\u6bb5\u4fe1\u606f\u5230 map \u4e2d appendParameters(map, application); // \u6dfb\u52a0 RegistryConfig \u5b57\u6bb5\u4fe1\u606f\u5230 map \u4e2d appendParameters(map, config); // \u6dfb\u52a0 path\u3001pid\uff0cprotocol \u7b49\u4fe1\u606f\u5230 map \u4e2d map.put( path , RegistryService.class.getName()); map.put( dubbo , Version.getProtocolVersion()); map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis())); if (ConfigUtils.getPid() 0) { map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid())); } if (!map.containsKey( protocol )) { if (ExtensionLoader.getExtensionLoader(RegistryFactory.class).hasExtension( remote )) { map.put( protocol , remote ); } else { map.put( protocol , dubbo ); } } // \u89e3\u6790\u5f97\u5230 URL \u5217\u8868\uff0caddress \u53ef\u80fd\u5305\u542b\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3 ip\uff0c // \u56e0\u6b64\u89e3\u6790\u5f97\u5230\u7684\u662f\u4e00\u4e2a URL \u5217\u8868 List URL urls = UrlUtils.parseURLs(address, map); for (URL url : urls) { url = url.addParameter(Constants.REGISTRY_KEY, url.getProtocol()); // \u5c06 URL \u534f\u8bae\u5934\u8bbe\u7f6e\u4e3a registry url = url.setProtocol(Constants.REGISTRY_PROTOCOL); // \u901a\u8fc7\u5224\u65ad\u6761\u4ef6\uff0c\u51b3\u5b9a\u662f\u5426\u6dfb\u52a0 url \u5230 registryList \u4e2d\uff0c\u6761\u4ef6\u5982\u4e0b\uff1a // (\u670d\u52a1\u63d0\u4f9b\u8005 register = true \u6216 null) // || (\u975e\u670d\u52a1\u63d0\u4f9b\u8005 subscribe = true \u6216 null) if ((provider url.getParameter(Constants.REGISTER_KEY, true)) || (!provider url.getParameter(Constants.SUBSCRIBE_KEY, true))) { registryList.add(url); } } } } } return registryList; } loadRegistries \u65b9\u6cd5\u4e3b\u8981\u5305\u542b\u5982\u4e0b\u7684\u903b\u8f91\uff1a \u68c0\u6d4b\u662f\u5426\u5b58\u5728\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e\u7c7b\uff0c\u4e0d\u5b58\u5728\u5219\u629b\u51fa\u5f02\u5e38 \u6784\u5efa\u53c2\u6570\u6620\u5c04\u96c6\u5408\uff0c\u4e5f\u5c31\u662f map \u6784\u5efa\u6ce8\u518c\u4e2d\u5fc3\u94fe\u63a5\u5217\u8868 \u904d\u5386\u94fe\u63a5\u5217\u8868\uff0c\u5e76\u6839\u636e\u6761\u4ef6\u51b3\u5b9a\u662f\u5426\u5c06\u5176\u6dfb\u52a0\u5230 registryList \u4e2d \u5173\u4e8e\u591a\u534f\u8bae\u591a\u6ce8\u518c\u4e2d\u5fc3\u5bfc\u51fa\u670d\u52a1\u5c31\u5148\u5206\u6790\u5230\u8fd9\uff0c\u4ee3\u7801\u4e0d\u662f\u5f88\u591a\uff0c\u63a5\u4e0b\u6765\u5206\u6790 URL \u7ec4\u88c5\u8fc7\u7a0b\u3002","title":"2.1.2 \u591a\u534f\u8bae\u591a\u6ce8\u518c\u4e2d\u5fc3\u5bfc\u51fa\u670d\u52a1"},{"location":"source_code_guide/export-service/#213-url","text":"\u914d\u7f6e\u68c0\u67e5\u5b8c\u6bd5\u540e\uff0c\u7d27\u63a5\u7740\u8981\u505a\u7684\u4e8b\u60c5\u662f\u6839\u636e\u914d\u7f6e\uff0c\u4ee5\u53ca\u5176\u4ed6\u4e00\u4e9b\u4fe1\u606f\u7ec4\u88c5 URL\u3002\u524d\u9762\u8bf4\u8fc7\uff0cURL \u662f Dubbo \u914d\u7f6e\u7684\u8f7d\u4f53\uff0c\u901a\u8fc7 URL \u53ef\u8ba9 Dubbo \u7684\u5404\u79cd\u914d\u7f6e\u5728\u5404\u4e2a\u6a21\u5757\u4e4b\u95f4\u4f20\u9012\u3002URL \u4e4b\u4e8e Dubbo\uff0c\u72b9\u5982\u6c34\u4e4b\u4e8e\u9c7c\uff0c\u975e\u5e38\u91cd\u8981\u3002\u5927\u5bb6\u5728\u9605\u8bfb Dubbo \u670d\u52a1\u5bfc\u51fa\u76f8\u5173\u6e90\u7801\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8981\u6ce8\u610f URL \u5185\u5bb9\u7684\u53d8\u5316\u3002\u65e2\u7136 URL \u5982\u6b64\u91cd\u8981\uff0c\u90a3\u4e48\u4e0b\u9762\u6211\u4eec\u6765\u4e86\u89e3\u4e00\u4e0b URL \u7ec4\u88c5\u7684\u8fc7\u7a0b\u3002 private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List URL registryURLs) { String name = protocolConfig.getName(); // \u5982\u679c\u534f\u8bae\u540d\u4e3a\u7a7a\uff0c\u6216\u7a7a\u4e32\uff0c\u5219\u5c06\u534f\u8bae\u540d\u53d8\u91cf\u8bbe\u7f6e\u4e3a dubbo if (name == null || name.length() == 0) { name = dubbo ; } Map String, String map = new HashMap String, String (); // \u6dfb\u52a0 side\u3001\u7248\u672c\u3001\u65f6\u95f4\u6233\u4ee5\u53ca\u8fdb\u7a0b\u53f7\u7b49\u4fe1\u606f\u5230 map \u4e2d map.put(Constants.SIDE_KEY, Constants.PROVIDER_SIDE); map.put(Constants.DUBBO_VERSION_KEY, Version.getProtocolVersion()); map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis())); if (ConfigUtils.getPid() 0) { map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid())); } // \u901a\u8fc7\u53cd\u5c04\u5c06\u5bf9\u8c61\u7684\u5b57\u6bb5\u4fe1\u606f\u6dfb\u52a0\u5230 map \u4e2d appendParameters(map, application); appendParameters(map, module); appendParameters(map, provider, Constants.DEFAULT_KEY); appendParameters(map, protocolConfig); appendParameters(map, this); // methods \u4e3a MethodConfig \u96c6\u5408\uff0cMethodConfig \u4e2d\u5b58\u50a8\u4e86 dubbo:method \u6807\u7b7e\u7684\u914d\u7f6e\u4fe1\u606f if (methods != null !methods.isEmpty()) { // \u8fd9\u6bb5\u4ee3\u7801\u7528\u4e8e\u6dfb\u52a0 Callback \u914d\u7f6e\u5230 map \u4e2d\uff0c\u4ee3\u7801\u592a\u957f\uff0c\u5f85\u4f1a\u5355\u72ec\u5206\u6790 } // \u68c0\u6d4b generic \u662f\u5426\u4e3a true \uff0c\u5e76\u6839\u636e\u68c0\u6d4b\u7ed3\u679c\u5411 map \u4e2d\u6dfb\u52a0\u4e0d\u540c\u7684\u4fe1\u606f if (ProtocolUtils.isGeneric(generic)) { map.put(Constants.GENERIC_KEY, generic); map.put(Constants.METHODS_KEY, Constants.ANY_VALUE); } else { String revision = Version.getVersion(interfaceClass, version); if (revision != null revision.length() 0) { map.put( revision , revision); } // \u4e3a\u63a5\u53e3\u751f\u6210\u5305\u88f9\u7c7b Wrapper\uff0cWrapper \u4e2d\u5305\u542b\u4e86\u63a5\u53e3\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u6bd4\u5982\u63a5\u53e3\u65b9\u6cd5\u540d\u6570\u7ec4\uff0c\u5b57\u6bb5\u4fe1\u606f\u7b49 String[] methods = Wrapper.getWrapper(interfaceClass).getMethodNames(); // \u6dfb\u52a0\u65b9\u6cd5\u540d\u5230 map \u4e2d\uff0c\u5982\u679c\u5305\u542b\u591a\u4e2a\u65b9\u6cd5\u540d\uff0c\u5219\u7528\u9017\u53f7\u9694\u5f00\uff0c\u6bd4\u5982 method = init,destroy if (methods.length == 0) { logger.warn( NO method found in service interface ... ); map.put(Constants.METHODS_KEY, Constants.ANY_VALUE); } else { // \u5c06\u9017\u53f7\u4f5c\u4e3a\u5206\u9694\u7b26\u8fde\u63a5\u65b9\u6cd5\u540d\uff0c\u5e76\u5c06\u8fde\u63a5\u540e\u7684\u5b57\u7b26\u4e32\u653e\u5165 map \u4e2d map.put(Constants.METHODS_KEY, StringUtils.join(new HashSet String (Arrays.asList(methods)), , )); } } // \u6dfb\u52a0 token \u5230 map \u4e2d if (!ConfigUtils.isEmpty(token)) { if (ConfigUtils.isDefault(token)) { // \u968f\u673a\u751f\u6210 token map.put(Constants.TOKEN_KEY, UUID.randomUUID().toString()); } else { map.put(Constants.TOKEN_KEY, token); } } // \u5224\u65ad\u534f\u8bae\u540d\u662f\u5426\u4e3a injvm if (Constants.LOCAL_PROTOCOL.equals(protocolConfig.getName())) { protocolConfig.setRegister(false); map.put( notify , false ); } // \u83b7\u53d6\u4e0a\u4e0b\u6587\u8def\u5f84 String contextPath = protocolConfig.getContextpath(); if ((contextPath == null || contextPath.length() == 0) provider != null) { contextPath = provider.getContextpath(); } // \u83b7\u53d6 host \u548c port String host = this.findConfigedHosts(protocolConfig, registryURLs, map); Integer port = this.findConfigedPorts(protocolConfig, name, map); // \u7ec4\u88c5 URL URL url = new URL(name, host, port, (contextPath == null || contextPath.length() == 0 ? : contextPath + / ) + path, map); // \u7701\u7565\u65e0\u5173\u4ee3\u7801 } \u4e0a\u9762\u7684\u4ee3\u7801\u9996\u5148\u662f\u5c06\u4e00\u4e9b\u4fe1\u606f\uff0c\u6bd4\u5982\u7248\u672c\u3001\u65f6\u95f4\u6233\u3001\u65b9\u6cd5\u540d\u4ee5\u53ca\u5404\u79cd\u914d\u7f6e\u5bf9\u8c61\u7684\u5b57\u6bb5\u4fe1\u606f\u653e\u5165\u5230 map \u4e2d\uff0cmap \u4e2d\u7684\u5185\u5bb9\u5c06\u4f5c\u4e3a URL \u7684\u67e5\u8be2\u5b57\u7b26\u4e32\u3002\u6784\u5efa\u597d map \u540e\uff0c\u7d27\u63a5\u7740\u662f\u83b7\u53d6\u4e0a\u4e0b\u6587\u8def\u5f84\u3001\u4e3b\u673a\u540d\u4ee5\u53ca\u7aef\u53e3\u53f7\u7b49\u4fe1\u606f\u3002\u6700\u540e\u5c06 map \u548c\u4e3b\u673a\u540d\u7b49\u6570\u636e\u4f20\u7ed9 URL \u6784\u9020\u65b9\u6cd5\u521b\u5efa URL \u5bf9\u8c61\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u51fa\u73b0\u7684 URL \u5e76\u975e java.net.URL\uff0c\u800c\u662f com.alibaba.dubbo.common.URL\u3002 \u4e0a\u9762\u7701\u7565\u4e86\u4e00\u6bb5\u4ee3\u7801\uff0c\u8fd9\u91cc\u7b80\u5355\u5206\u6790\u4e00\u4e0b\u3002\u8fd9\u6bb5\u4ee3\u7801\u7528\u4e8e\u68c0\u6d4b \\ dubbo:method> \u6807\u7b7e\u4e2d\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u5e76\u5c06\u76f8\u5173\u914d\u7f6e\u6dfb\u52a0\u5230 map \u4e2d\u3002\u4ee3\u7801\u5982\u4e0b\uff1a private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List URL registryURLs) { // ... // methods \u4e3a MethodConfig \u96c6\u5408\uff0cMethodConfig \u4e2d\u5b58\u50a8\u4e86 dubbo:method \u6807\u7b7e\u7684\u914d\u7f6e\u4fe1\u606f if (methods != null !methods.isEmpty()) { for (MethodConfig method : methods) { // \u6dfb\u52a0 MethodConfig \u5bf9\u8c61\u7684\u5b57\u6bb5\u4fe1\u606f\u5230 map \u4e2d\uff0c\u952e = \u65b9\u6cd5\u540d.\u5c5e\u6027\u540d\u3002 // \u6bd4\u5982\u5b58\u50a8 dubbo:method name= sayHello retries= 2 \u5bf9\u5e94\u7684 MethodConfig\uff0c // \u952e = sayHello.retries\uff0cmap = { sayHello.retries : 2, xxx : yyy } appendParameters(map, method, method.getName()); String retryKey = method.getName() + .retry ; if (map.containsKey(retryKey)) { String retryValue = map.remove(retryKey); // \u68c0\u6d4b MethodConfig retry \u662f\u5426\u4e3a false\uff0c\u82e5\u662f\uff0c\u5219\u8bbe\u7f6e\u91cd\u8bd5\u6b21\u6570\u4e3a0 if ( false .equals(retryValue)) { map.put(method.getName() + .retries , 0 ); } } // \u83b7\u53d6 ArgumentConfig \u5217\u8868 List ArgumentConfig arguments = method.getArguments(); if (arguments != null !arguments.isEmpty()) { for (ArgumentConfig argument : arguments) { // \u68c0\u6d4b type \u5c5e\u6027\u662f\u5426\u4e3a\u7a7a\uff0c\u6216\u8005\u7a7a\u4e32\uff08\u5206\u652f1 \u2b50\ufe0f\uff09 if (argument.getType() != null argument.getType().length() 0) { Method[] methods = interfaceClass.getMethods(); if (methods != null methods.length 0) { for (int i = 0; i methods.length; i++) { String methodName = methods[i].getName(); // \u6bd4\u5bf9\u65b9\u6cd5\u540d\uff0c\u67e5\u627e\u76ee\u6807\u65b9\u6cd5 if (methodName.equals(method.getName())) { Class ? [] argtypes = methods[i].getParameterTypes(); if (argument.getIndex() != -1) { // \u68c0\u6d4b ArgumentConfig \u4e2d\u7684 type \u5c5e\u6027\u4e0e\u65b9\u6cd5\u53c2\u6570\u5217\u8868 // \u4e2d\u7684\u53c2\u6570\u540d\u79f0\u662f\u5426\u4e00\u81f4\uff0c\u4e0d\u4e00\u81f4\u5219\u629b\u51fa\u5f02\u5e38(\u5206\u652f2 \u2b50\ufe0f) if (argtypes[argument.getIndex()].getName().equals(argument.getType())) { // \u6dfb\u52a0 ArgumentConfig \u5b57\u6bb5\u4fe1\u606f\u5230 map \u4e2d\uff0c // \u952e\u524d\u7f00 = \u65b9\u6cd5\u540d.index\uff0c\u6bd4\u5982: // map = { sayHello.3 : true} appendParameters(map, argument, method.getName() + . + argument.getIndex()); } else { throw new IllegalArgumentException( argument config error: ... ); } } else { // \u5206\u652f3 \u2b50\ufe0f for (int j = 0; j argtypes.length; j++) { Class ? argclazz = argtypes[j]; // \u4ece\u53c2\u6570\u7c7b\u578b\u5217\u8868\u4e2d\u67e5\u627e\u7c7b\u578b\u540d\u79f0\u4e3a argument.type \u7684\u53c2\u6570 if (argclazz.getName().equals(argument.getType())) { appendParameters(map, argument, method.getName() + . + j); if (argument.getIndex() != -1 argument.getIndex() != j) { throw new IllegalArgumentException( argument config error: ... ); } } } } } } } // \u7528\u6237\u672a\u914d\u7f6e type \u5c5e\u6027\uff0c\u4f46\u914d\u7f6e\u4e86 index \u5c5e\u6027\uff0c\u4e14 index != -1 } else if (argument.getIndex() != -1) { // \u5206\u652f4 \u2b50\ufe0f // \u6dfb\u52a0 ArgumentConfig \u5b57\u6bb5\u4fe1\u606f\u5230 map \u4e2d appendParameters(map, argument, method.getName() + . + argument.getIndex()); } else { throw new IllegalArgumentException( argument config must set index or type ); } } } } } // ... } \u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801 for \u5faa\u73af\u548c if else \u5206\u652f\u5d4c\u5957\u592a\u591a\uff0c\u5bfc\u81f4\u5c42\u6b21\u592a\u6df1\uff0c\u4e0d\u5229\u4e8e\u9605\u8bfb\uff0c\u9700\u8981\u8010\u5fc3\u770b\u4e00\u4e0b\u3002\u5927\u5bb6\u5728\u770b\u8fd9\u6bb5\u4ee3\u7801\u65f6\uff0c\u6ce8\u610f\u628a\u51e0\u4e2a\u91cd\u8981\u7684\u6761\u4ef6\u5206\u652f\u627e\u51fa\u6765\u3002\u53ea\u8981\u7406\u89e3\u4e86\u8fd9\u51e0\u4e2a\u5206\u652f\u7684\u610f\u56fe\uff0c\u5c31\u53ef\u4ee5\u5f04\u61c2\u8fd9\u6bb5\u4ee3\u7801\u3002\u8bf7\u6ce8\u610f\u4e0a\u9762\u4ee3\u7801\u4e2d\u2b50\ufe0f\u7b26\u53f7\uff0c\u8fd9\u51e0\u4e2a\u7b26\u53f7\u6807\u8bc6\u51fa\u4e864\u4e2a\u91cd\u8981\u7684\u5206\u652f\uff0c\u4e0b\u9762\u7528\u4f2a\u4ee3\u7801\u89e3\u91ca\u4e00\u4e0b\u8fd9\u51e0\u4e2a\u5206\u652f\u7684\u542b\u4e49\u3002 // \u83b7\u53d6 ArgumentConfig \u5217\u8868 for (\u904d\u5386 ArgumentConfig \u5217\u8868) { if (type \u4e0d\u4e3a null\uff0c\u4e5f\u4e0d\u4e3a\u7a7a\u4e32) { // \u5206\u652f1 1. \u901a\u8fc7\u53cd\u5c04\u83b7\u53d6 interfaceClass \u7684\u65b9\u6cd5\u5217\u8868 for (\u904d\u5386\u65b9\u6cd5\u5217\u8868) { 1. \u6bd4\u5bf9\u65b9\u6cd5\u540d\uff0c\u67e5\u627e\u76ee\u6807\u65b9\u6cd5 2. \u901a\u8fc7\u53cd\u5c04\u83b7\u53d6\u76ee\u6807\u65b9\u6cd5\u7684\u53c2\u6570\u7c7b\u578b\u6570\u7ec4 argtypes if (index != -1) { // \u5206\u652f2 1. \u4ece argtypes \u6570\u7ec4\u4e2d\u83b7\u53d6\u4e0b\u6807 index \u5904\u7684\u5143\u7d20 argType 2. \u68c0\u6d4b argType \u7684\u540d\u79f0\u4e0e ArgumentConfig \u4e2d\u7684 type \u5c5e\u6027\u662f\u5426\u4e00\u81f4 3. \u6dfb\u52a0 ArgumentConfig \u5b57\u6bb5\u4fe1\u606f\u5230 map \u4e2d\uff0c\u6216\u629b\u51fa\u5f02\u5e38 } else { // \u5206\u652f3 1. \u904d\u5386\u53c2\u6570\u7c7b\u578b\u6570\u7ec4 argtypes\uff0c\u67e5\u627e argument.type \u7c7b\u578b\u7684\u53c2\u6570 2. \u6dfb\u52a0 ArgumentConfig \u5b57\u6bb5\u4fe1\u606f\u5230 map \u4e2d } } } else if (index != -1) { // \u5206\u652f4 1. \u6dfb\u52a0 ArgumentConfig \u5b57\u6bb5\u4fe1\u606f\u5230 map \u4e2d } } \u5728\u672c\u8282\u5206\u6790\u7684\u6e90\u7801\u4e2d\uff0cappendParameters \u8fd9\u4e2a\u65b9\u6cd5\u51fa\u73b0\u7684\u6b21\u6570\u6bd4\u8f83\u591a\uff0c\u8be5\u65b9\u6cd5\u7528\u4e8e\u5c06\u5bf9\u8c61\u5b57\u6bb5\u4fe1\u606f\u6dfb\u52a0\u5230 map \u4e2d\u3002\u5b9e\u73b0\u4e0a\u5219\u662f\u901a\u8fc7\u53cd\u5c04\u83b7\u53d6\u76ee\u6807\u5bf9\u8c61\u7684 getter \u65b9\u6cd5\uff0c\u5e76\u8c03\u7528\u8be5\u65b9\u6cd5\u83b7\u53d6\u5c5e\u6027\u503c\u3002\u7136\u540e\u518d\u901a\u8fc7 getter \u65b9\u6cd5\u540d\u89e3\u6790\u51fa\u5c5e\u6027\u540d\uff0c\u6bd4\u5982\u4ece\u65b9\u6cd5\u540d getName \u4e2d\u53ef\u89e3\u6790\u51fa\u5c5e\u6027 name\u3002\u5982\u679c\u7528\u6237\u4f20\u5165\u4e86\u5c5e\u6027\u540d\u524d\u7f00\uff0c\u6b64\u65f6\u9700\u8981\u5c06\u5c5e\u6027\u540d\u52a0\u5165\u524d\u7f00\u5185\u5bb9\u3002\u6700\u540e\u5c06 \\ \u5c5e\u6027\u540d\uff0c\u5c5e\u6027\u503c> \u952e\u503c\u5bf9\u5b58\u5165\u5230 map \u4e2d\u5c31\u884c\u4e86\u3002\u9650\u4e8e\u7bc7\u5e45\u539f\u56e0\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5206\u6790 appendParameters \u65b9\u6cd5\u7684\u6e90\u7801\u4e86\uff0c\u5927\u5bb6\u8bf7\u81ea\u884c\u5206\u6790\u3002","title":"2.1.3 \u7ec4\u88c5 URL"},{"location":"source_code_guide/export-service/#22-dubbo","text":"\u524d\u7f6e\u5de5\u4f5c\u505a\u5b8c\uff0c\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u8fdb\u884c\u670d\u52a1\u5bfc\u51fa\u4e86\u3002\u670d\u52a1\u5bfc\u51fa\u5206\u4e3a\u5bfc\u51fa\u5230\u672c\u5730 (JVM)\uff0c\u548c\u5bfc\u51fa\u5230\u8fdc\u7a0b\u3002\u5728\u6df1\u5165\u5206\u6790\u670d\u52a1\u5bfc\u51fa\u7684\u6e90\u7801\u524d\uff0c\u6211\u4eec\u5148\u6765\u4ece\u5b8f\u89c2\u5c42\u9762\u4e0a\u770b\u4e00\u4e0b\u670d\u52a1\u5bfc\u51fa\u903b\u8f91\u3002\u5982\u4e0b\uff1a private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List URL registryURLs) { // \u7701\u7565\u65e0\u5173\u4ee3\u7801 if (ExtensionLoader.getExtensionLoader(ConfiguratorFactory.class) .hasExtension(url.getProtocol())) { // \u52a0\u8f7d ConfiguratorFactory\uff0c\u5e76\u751f\u6210 Configurator \u5b9e\u4f8b\uff0c\u7136\u540e\u901a\u8fc7\u5b9e\u4f8b\u914d\u7f6e url url = ExtensionLoader.getExtensionLoader(ConfiguratorFactory.class) .getExtension(url.getProtocol()).getConfigurator(url).configure(url); } String scope = url.getParameter(Constants.SCOPE_KEY); // \u5982\u679c scope = none\uff0c\u5219\u4ec0\u4e48\u90fd\u4e0d\u505a if (!Constants.SCOPE_NONE.toString().equalsIgnoreCase(scope)) { // scope != remote\uff0c\u5bfc\u51fa\u5230\u672c\u5730 if (!Constants.SCOPE_REMOTE.toString().equalsIgnoreCase(scope)) { exportLocal(url); } // scope != local\uff0c\u5bfc\u51fa\u5230\u8fdc\u7a0b if (!Constants.SCOPE_LOCAL.toString().equalsIgnoreCase(scope)) { if (registryURLs != null !registryURLs.isEmpty()) { for (URL registryURL : registryURLs) { url = url.addParameterIfAbsent(Constants.DYNAMIC_KEY, registryURL.getParameter(Constants.DYNAMIC_KEY)); // \u52a0\u8f7d\u76d1\u89c6\u5668\u94fe\u63a5 URL monitorUrl = loadMonitor(registryURL); if (monitorUrl != null) { // \u5c06\u76d1\u89c6\u5668\u94fe\u63a5\u4f5c\u4e3a\u53c2\u6570\u6dfb\u52a0\u5230 url \u4e2d url = url.addParameterAndEncoded(Constants.MONITOR_KEY, monitorUrl.toFullString()); } String proxy = url.getParameter(Constants.PROXY_KEY); if (StringUtils.isNotEmpty(proxy)) { registryURL = registryURL.addParameter(Constants.PROXY_KEY, proxy); } // \u4e3a\u670d\u52a1\u63d0\u4f9b\u7c7b(ref)\u751f\u6210 Invoker Invoker ? invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, registryURL.addParameterAndEncoded(Constants.EXPORT_KEY, url.toFullString())); // DelegateProviderMetaDataInvoker \u7528\u4e8e\u6301\u6709 Invoker \u548c ServiceConfig DelegateProviderMetaDataInvoker wrapperInvoker = new DelegateProviderMetaDataInvoker(invoker, this); // \u5bfc\u51fa\u670d\u52a1\uff0c\u5e76\u751f\u6210 Exporter Exporter ? exporter = protocol.export(wrapperInvoker); exporters.add(exporter); } // \u4e0d\u5b58\u5728\u6ce8\u518c\u4e2d\u5fc3\uff0c\u4ec5\u5bfc\u51fa\u670d\u52a1 } else { Invoker ? invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, url); DelegateProviderMetaDataInvoker wrapperInvoker = new DelegateProviderMetaDataInvoker(invoker, this); Exporter ? exporter = protocol.export(wrapperInvoker); exporters.add(exporter); } } } this.urls.add(url); } \u4e0a\u9762\u4ee3\u7801\u6839\u636e url \u4e2d\u7684 scope \u53c2\u6570\u51b3\u5b9a\u670d\u52a1\u5bfc\u51fa\u65b9\u5f0f\uff0c\u5206\u522b\u5982\u4e0b\uff1a scope = none\uff0c\u4e0d\u5bfc\u51fa\u670d\u52a1 scope != remote\uff0c\u5bfc\u51fa\u5230\u672c\u5730 scope != local\uff0c\u5bfc\u51fa\u5230\u8fdc\u7a0b \u4e0d\u7ba1\u662f\u5bfc\u51fa\u5230\u672c\u5730\uff0c\u8fd8\u662f\u8fdc\u7a0b\u3002\u8fdb\u884c\u670d\u52a1\u5bfc\u51fa\u4e4b\u524d\uff0c\u5747\u9700\u8981\u5148\u521b\u5efa Invoker\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u6b65\u9aa4\u3002\u56e0\u6b64\u4e0b\u9762\u5148\u6765\u5206\u6790 Invoker \u7684\u521b\u5efa\u8fc7\u7a0b\u3002","title":"2.2 \u5bfc\u51fa Dubbo \u670d\u52a1"},{"location":"source_code_guide/export-service/#221-invoker","text":"\u5728 Dubbo \u4e2d\uff0cInvoker \u662f\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u6a21\u578b\u3002\u5728\u670d\u52a1\u63d0\u4f9b\u7aef\uff0c\u4ee5\u53ca\u670d\u52a1\u5f15\u7528\u7aef\u5747\u4f1a\u51fa\u73b0 Invoker\u3002Dubbo \u5b98\u65b9\u6587\u6863\u4e2d\u5bf9 Invoker \u8fdb\u884c\u4e86\u8bf4\u660e\uff0c\u8fd9\u91cc\u5f15\u7528\u4e00\u4e0b\u3002 Invoker \u662f\u5b9e\u4f53\u57df\uff0c\u5b83\u662f Dubbo \u7684\u6838\u5fc3\u6a21\u578b\uff0c\u5176\u5b83\u6a21\u578b\u90fd\u5411\u5b83\u9760\u6270\uff0c\u6216\u8f6c\u6362\u6210\u5b83\uff0c\u5b83\u4ee3\u8868\u4e00\u4e2a\u53ef\u6267\u884c\u4f53\uff0c\u53ef\u5411\u5b83\u53d1\u8d77 invoke \u8c03\u7528\uff0c\u5b83\u6709\u53ef\u80fd\u662f\u4e00\u4e2a\u672c\u5730\u7684\u5b9e\u73b0\uff0c\u4e5f\u53ef\u80fd\u662f\u4e00\u4e2a\u8fdc\u7a0b\u7684\u5b9e\u73b0\uff0c\u4e5f\u53ef\u80fd\u4e00\u4e2a\u96c6\u7fa4\u5b9e\u73b0\u3002 \u65e2\u7136 Invoker \u5982\u6b64\u91cd\u8981\uff0c\u90a3\u4e48\u6211\u4eec\u5f88\u6709\u5fc5\u8981\u641e\u6e05\u695a Invoker \u7684\u7528\u9014\u3002Invoker \u662f\u7531 ProxyFactory \u521b\u5efa\u800c\u6765\uff0cDubbo \u9ed8\u8ba4\u7684 ProxyFactory \u5b9e\u73b0\u7c7b\u662f JavassistProxyFactory\u3002\u4e0b\u9762\u6211\u4eec\u5230 JavassistProxyFactory \u4ee3\u7801\u4e2d\uff0c\u63a2\u7d22 Invoker \u7684\u521b\u5efa\u8fc7\u7a0b\u3002\u5982\u4e0b\uff1a public T Invoker T getInvoker(T proxy, Class T type, URL url) { // \u4e3a\u76ee\u6807\u7c7b\u521b\u5efa Wrapper final Wrapper wrapper = Wrapper.getWrapper(proxy.getClass().getName().indexOf('$') 0 ? proxy.getClass() : type); // \u521b\u5efa\u533f\u540d Invoker \u7c7b\u5bf9\u8c61\uff0c\u5e76\u5b9e\u73b0 doInvoke \u65b9\u6cd5\u3002 return new AbstractProxyInvoker T (proxy, type, url) { @Override protected Object doInvoke(T proxy, String methodName, Class ? [] parameterTypes, Object[] arguments) throws Throwable { // \u8c03\u7528 Wrapper \u7684 invokeMethod \u65b9\u6cd5\uff0cinvokeMethod \u6700\u7ec8\u4f1a\u8c03\u7528\u76ee\u6807\u65b9\u6cd5 return wrapper.invokeMethod(proxy, methodName, parameterTypes, arguments); } }; } \u5982\u4e0a\uff0cJavassistProxyFactory \u521b\u5efa\u4e86\u4e00\u4e2a\u7ee7\u627f\u81ea AbstractProxyInvoker \u7c7b\u7684\u533f\u540d\u5bf9\u8c61\uff0c\u5e76\u8986\u5199\u4e86\u62bd\u8c61\u65b9\u6cd5 doInvoke\u3002\u8986\u5199\u540e\u7684 doInvoke \u903b\u8f91\u6bd4\u8f83\u7b80\u5355\uff0c\u4ec5\u662f\u5c06\u8c03\u7528\u8bf7\u6c42\u8f6c\u53d1\u7ed9\u4e86 Wrapper \u7c7b\u7684 invokeMethod \u65b9\u6cd5\u3002Wrapper \u7528\u4e8e\u201c\u5305\u88f9\u201d\u76ee\u6807\u7c7b\uff0cWrapper \u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u4ec5\u53ef\u901a\u8fc7 getWrapper(Class) \u65b9\u6cd5\u521b\u5efa\u5b50\u7c7b\u3002\u5728\u521b\u5efa Wrapper \u5b50\u7c7b\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5b50\u7c7b\u4ee3\u7801\u751f\u6210\u903b\u8f91\u4f1a\u5bf9 getWrapper \u65b9\u6cd5\u4f20\u5165\u7684 Class \u5bf9\u8c61\u8fdb\u884c\u89e3\u6790\uff0c\u62ff\u5230\u8bf8\u5982\u7c7b\u65b9\u6cd5\uff0c\u7c7b\u6210\u5458\u53d8\u91cf\u7b49\u4fe1\u606f\u3002\u4ee5\u53ca\u751f\u6210 invokeMethod \u65b9\u6cd5\u4ee3\u7801\u548c\u5176\u4ed6\u4e00\u4e9b\u65b9\u6cd5\u4ee3\u7801\u3002\u4ee3\u7801\u751f\u6210\u5b8c\u6bd5\u540e\uff0c\u901a\u8fc7 Javassist \u751f\u6210 Class \u5bf9\u8c61\uff0c\u6700\u540e\u518d\u901a\u8fc7\u53cd\u5c04\u521b\u5efa Wrapper \u5b9e\u4f8b\u3002\u76f8\u5173\u7684\u4ee3\u7801\u5982\u4e0b\uff1a public static Wrapper getWrapper(Class ? c) { while (ClassGenerator.isDynamicClass(c)) c = c.getSuperclass(); if (c == Object.class) return OBJECT_WRAPPER; // \u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6 Wrapper \u5b9e\u4f8b Wrapper ret = WRAPPER_MAP.get(c); if (ret == null) { // \u7f13\u5b58\u672a\u547d\u4e2d\uff0c\u521b\u5efa Wrapper ret = makeWrapper(c); // \u5199\u5165\u7f13\u5b58 WRAPPER_MAP.put(c, ret); } return ret; } getWrapper \u65b9\u6cd5\u4ec5\u5305\u542b\u4e00\u4e9b\u7f13\u5b58\u64cd\u4f5c\u903b\u8f91\uff0c\u4e0d\u96be\u7406\u89e3\u3002\u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0b makeWrapper \u65b9\u6cd5\u3002 private static Wrapper makeWrapper(Class ? c) { // \u68c0\u6d4b c \u662f\u5426\u4e3a\u57fa\u672c\u7c7b\u578b\uff0c\u82e5\u662f\u5219\u629b\u51fa\u5f02\u5e38 if (c.isPrimitive()) throw new IllegalArgumentException( Can not create wrapper for primitive type: + c); String name = c.getName(); ClassLoader cl = ClassHelper.getClassLoader(c); // c1 \u7528\u4e8e\u5b58\u50a8 setPropertyValue \u65b9\u6cd5\u4ee3\u7801 StringBuilder c1 = new StringBuilder( public void setPropertyValue(Object o, String n, Object v){ ); // c2 \u7528\u4e8e\u5b58\u50a8 getPropertyValue \u65b9\u6cd5\u4ee3\u7801 StringBuilder c2 = new StringBuilder( public Object getPropertyValue(Object o, String n){ ); // c3 \u7528\u4e8e\u5b58\u50a8 invokeMethod \u65b9\u6cd5\u4ee3\u7801 StringBuilder c3 = new StringBuilder( public Object invokeMethod(Object o, String n, Class[] p, Object[] v) throws + InvocationTargetException.class.getName() + { ); // \u751f\u6210\u7c7b\u578b\u8f6c\u6362\u4ee3\u7801\u53ca\u5f02\u5e38\u6355\u6349\u4ee3\u7801\uff0c\u6bd4\u5982\uff1a // DemoService w; try { w = ((DemoServcie) $1); }}catch(Throwable e){ throw new IllegalArgumentException(e); } c1.append(name).append( w; try{ w = (( ).append(name).append( )$1); }catch(Throwable e){ throw new IllegalArgumentException(e); } ); c2.append(name).append( w; try{ w = (( ).append(name).append( )$1); }catch(Throwable e){ throw new IllegalArgumentException(e); } ); c3.append(name).append( w; try{ w = (( ).append(name).append( )$1); }catch(Throwable e){ throw new IllegalArgumentException(e); } ); // pts \u7528\u4e8e\u5b58\u50a8\u6210\u5458\u53d8\u91cf\u540d\u548c\u7c7b\u578b Map String, Class ? pts = new HashMap String, Class ? (); // ms \u7528\u4e8e\u5b58\u50a8\u65b9\u6cd5\u63cf\u8ff0\u4fe1\u606f\uff08\u53ef\u7406\u89e3\u4e3a\u65b9\u6cd5\u7b7e\u540d\uff09\u53ca Method \u5b9e\u4f8b Map String, Method ms = new LinkedHashMap String, Method (); // mns \u4e3a\u65b9\u6cd5\u540d\u5217\u8868 List String mns = new ArrayList String (); // dmns \u7528\u4e8e\u5b58\u50a8\u201c\u5b9a\u4e49\u5728\u5f53\u524d\u7c7b\u4e2d\u7684\u65b9\u6cd5\u201d\u7684\u540d\u79f0 List String dmns = new ArrayList String (); // --------------------------------\u2728 \u5206\u5272\u7ebf1 \u2728------------------------------------- // \u83b7\u53d6 public \u8bbf\u95ee\u7ea7\u522b\u7684\u5b57\u6bb5\uff0c\u5e76\u4e3a\u6240\u6709\u5b57\u6bb5\u751f\u6210\u6761\u4ef6\u5224\u65ad\u8bed\u53e5 for (Field f : c.getFields()) { String fn = f.getName(); Class ? ft = f.getType(); if (Modifier.isStatic(f.getModifiers()) || Modifier.isTransient(f.getModifiers())) // \u5ffd\u7565\u5173\u952e\u5b57 static \u6216 transient \u4fee\u9970\u7684\u53d8\u91cf continue; // \u751f\u6210\u6761\u4ef6\u5224\u65ad\u53ca\u8d4b\u503c\u8bed\u53e5\uff0c\u6bd4\u5982\uff1a // if( $2.equals( name ) ) { w.name = (java.lang.String) $3; return;} // if( $2.equals( age ) ) { w.age = ((Number) $3).intValue(); return;} c1.append( if( $2.equals(\\ ).append(fn).append( \\ ) ){ w. ).append(fn).append( = ).append(arg(ft, $3 )).append( ; return; } ); // \u751f\u6210\u6761\u4ef6\u5224\u65ad\u53ca\u8fd4\u56de\u8bed\u53e5\uff0c\u6bd4\u5982\uff1a // if( $2.equals( name ) ) { return ($w)w.name; } c2.append( if( $2.equals(\\ ).append(fn).append( \\ ) ){ return ($w)w. ).append(fn).append( ; } ); // \u5b58\u50a8 \u5b57\u6bb5\u540d, \u5b57\u6bb5\u7c7b\u578b \u952e\u503c\u5bf9\u5230 pts \u4e2d pts.put(fn, ft); } // --------------------------------\u2728 \u5206\u5272\u7ebf2 \u2728------------------------------------- Method[] methods = c.getMethods(); // \u68c0\u6d4b c \u4e2d\u662f\u5426\u5305\u542b\u5728\u5f53\u524d\u7c7b\u4e2d\u58f0\u660e\u7684\u65b9\u6cd5 boolean hasMethod = hasMethods(methods); if (hasMethod) { c3.append( try{ ); } for (Method m : methods) { if (m.getDeclaringClass() == Object.class) // \u5ffd\u7565 Object \u4e2d\u5b9a\u4e49\u7684\u65b9\u6cd5 continue; String mn = m.getName(); // \u751f\u6210\u65b9\u6cd5\u540d\u5224\u65ad\u8bed\u53e5\uff0c\u6bd4\u5982\uff1a // if ( sayHello .equals( $2 ) c3.append( if( \\ ).append(mn).append( \\ .equals( $2 ) ); int len = m.getParameterTypes().length; // \u751f\u6210\u201c\u8fd0\u884c\u65f6\u4f20\u5165\u7684\u53c2\u6570\u6570\u91cf\u4e0e\u65b9\u6cd5\u53c2\u6570\u5217\u8868\u957f\u5ea6\u201d\u5224\u65ad\u8bed\u53e5\uff0c\u6bd4\u5982\uff1a // $3.length == 2 c3.append( ).append( $3.length == ).append(len); boolean override = false; for (Method m2 : methods) { // \u68c0\u6d4b\u65b9\u6cd5\u662f\u5426\u5b58\u5728\u91cd\u8f7d\u60c5\u51b5\uff0c\u6761\u4ef6\u4e3a\uff1a\u65b9\u6cd5\u5bf9\u8c61\u4e0d\u540c \u65b9\u6cd5\u540d\u76f8\u540c if (m != m2 m.getName().equals(m2.getName())) { override = true; break; } } // \u5bf9\u91cd\u8f7d\u65b9\u6cd5\u8fdb\u884c\u5904\u7406\uff0c\u8003\u8651\u4e0b\u9762\u7684\u65b9\u6cd5\uff1a // 1. void sayHello(Integer, String) // 2. void sayHello(Integer, Integer) // \u65b9\u6cd5\u540d\u76f8\u540c\uff0c\u53c2\u6570\u5217\u8868\u957f\u5ea6\u4e5f\u76f8\u540c\uff0c\u56e0\u6b64\u4e0d\u80fd\u4ec5\u901a\u8fc7\u8fd9\u4e24\u9879\u5224\u65ad\u4e24\u4e2a\u65b9\u6cd5\u662f\u5426\u76f8\u7b49\u3002 // \u9700\u8981\u8fdb\u4e00\u6b65\u5224\u65ad\u65b9\u6cd5\u7684\u53c2\u6570\u7c7b\u578b if (override) { if (len 0) { for (int l = 0; l len; l++) { // \u751f\u6210\u53c2\u6570\u7c7b\u578b\u8fdb\u884c\u68c0\u6d4b\u4ee3\u7801\uff0c\u6bd4\u5982\uff1a // $3[0].getName().equals( java.lang.Integer ) // $3[1].getName().equals( java.lang.String ) c3.append( ).append( $3[ ).append(l).append( ].getName().equals(\\ ) .append(m.getParameterTypes()[l].getName()).append( \\ ) ); } } } // \u6dfb\u52a0 ) {\uff0c\u5b8c\u6210\u65b9\u6cd5\u5224\u65ad\u8bed\u53e5\uff0c\u6b64\u65f6\u751f\u6210\u7684\u4ee3\u7801\u53ef\u80fd\u5982\u4e0b\uff08\u5df2\u683c\u5f0f\u5316\uff09\uff1a // if ( sayHello .equals($2) // $3.length == 2 // $3[0].getName().equals( java.lang.Integer ) // $3[1].getName().equals( java.lang.String )) { c3.append( ) { ); // \u6839\u636e\u8fd4\u56de\u503c\u7c7b\u578b\u751f\u6210\u76ee\u6807\u65b9\u6cd5\u8c03\u7528\u8bed\u53e5 if (m.getReturnType() == Void.TYPE) // w.sayHello((java.lang.Integer)$4[0], (java.lang.String)$4[1]); return null; c3.append( w. ).append(mn).append('(').append(args(m.getParameterTypes(), $4 )).append( ); ).append( return null; ); else // return w.sayHello((java.lang.Integer)$4[0], (java.lang.String)$4[1]); c3.append( return ($w)w. ).append(mn).append('(').append(args(m.getParameterTypes(), $4 )).append( ); ); // \u6dfb\u52a0 }, \u751f\u6210\u7684\u4ee3\u7801\u5f62\u5982\uff08\u5df2\u683c\u5f0f\u5316\uff09\uff1a // if ( sayHello .equals($2) // $3.length == 2 // $3[0].getName().equals( java.lang.Integer ) // $3[1].getName().equals( java.lang.String )) { // // w.sayHello((java.lang.Integer)$4[0], (java.lang.String)$4[1]); // return null; // } c3.append( } ); // \u6dfb\u52a0\u65b9\u6cd5\u540d\u5230 mns \u96c6\u5408\u4e2d mns.add(mn); // \u68c0\u6d4b\u5f53\u524d\u65b9\u6cd5\u662f\u5426\u5728 c \u4e2d\u88ab\u58f0\u660e\u7684 if (m.getDeclaringClass() == c) // \u82e5\u662f\uff0c\u5219\u5c06\u5f53\u524d\u65b9\u6cd5\u540d\u6dfb\u52a0\u5230 dmns \u4e2d dmns.add(mn); ms.put(ReflectUtils.getDesc(m), m); } if (hasMethod) { // \u6dfb\u52a0\u5f02\u5e38\u6355\u6349\u8bed\u53e5 c3.append( } catch(Throwable e) { ); c3.append( throw new java.lang.reflect.InvocationTargetException(e); ); c3.append( } ); } // \u6dfb\u52a0 NoSuchMethodException \u5f02\u5e38\u629b\u51fa\u4ee3\u7801 c3.append( throw new + NoSuchMethodException.class.getName() + (\\ Not found method \\\\\\ \\ +$2+\\ \\\\\\ in class + c.getName() + .\\ ); } ); // --------------------------------\u2728 \u5206\u5272\u7ebf3 \u2728------------------------------------- Matcher matcher; // \u5904\u7406 get/set \u65b9\u6cd5 for (Map.Entry String, Method entry : ms.entrySet()) { String md = entry.getKey(); Method method = (Method) entry.getValue(); // \u5339\u914d\u4ee5 get \u5f00\u5934\u7684\u65b9\u6cd5 if ((matcher = ReflectUtils.GETTER_METHOD_DESC_PATTERN.matcher(md)).matches()) { // \u83b7\u53d6\u5c5e\u6027\u540d String pn = propertyName(matcher.group(1)); // \u751f\u6210\u5c5e\u6027\u5224\u65ad\u4ee5\u53ca\u8fd4\u56de\u8bed\u53e5\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a // if( $2.equals( name ) ) { return ($w).w.getName(); } c2.append( if( $2.equals(\\ ).append(pn).append( \\ ) ){ return ($w)w. ).append(method.getName()).append( (); } ); pts.put(pn, method.getReturnType()); // \u5339\u914d\u4ee5 is/has/can \u5f00\u5934\u7684\u65b9\u6cd5 } else if ((matcher = ReflectUtils.IS_HAS_CAN_METHOD_DESC_PATTERN.matcher(md)).matches()) { String pn = propertyName(matcher.group(1)); // \u751f\u6210\u5c5e\u6027\u5224\u65ad\u4ee5\u53ca\u8fd4\u56de\u8bed\u53e5\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a // if( $2.equals( dream ) ) { return ($w).w.hasDream(); } c2.append( if( $2.equals(\\ ).append(pn).append( \\ ) ){ return ($w)w. ).append(method.getName()).append( (); } ); pts.put(pn, method.getReturnType()); // \u5339\u914d\u4ee5 set \u5f00\u5934\u7684\u65b9\u6cd5 } else if ((matcher = ReflectUtils.SETTER_METHOD_DESC_PATTERN.matcher(md)).matches()) { Class ? pt = method.getParameterTypes()[0]; String pn = propertyName(matcher.group(1)); // \u751f\u6210\u5c5e\u6027\u5224\u65ad\u4ee5\u53ca setter \u8c03\u7528\u8bed\u53e5\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a // if( $2.equals( name ) ) { w.setName((java.lang.String)$3); return; } c1.append( if( $2.equals(\\ ).append(pn).append( \\ ) ){ w. ).append(method.getName()).append( ( ).append(arg(pt, $3 )).append( ); return; } ); pts.put(pn, pt); } } // \u6dfb\u52a0 NoSuchPropertyException \u5f02\u5e38\u629b\u51fa\u4ee3\u7801 c1.append( throw new + NoSuchPropertyException.class.getName() + (\\ Not found property \\\\\\ \\ +$2+\\ \\\\\\ filed or setter method in class + c.getName() + .\\ ); } ); c2.append( throw new + NoSuchPropertyException.class.getName() + (\\ Not found property \\\\\\ \\ +$2+\\ \\\\\\ filed or setter method in class + c.getName() + .\\ ); } ); // --------------------------------\u2728 \u5206\u5272\u7ebf4 \u2728------------------------------------- long id = WRAPPER_CLASS_COUNTER.getAndIncrement(); // \u521b\u5efa\u7c7b\u751f\u6210\u5668 ClassGenerator cc = ClassGenerator.newInstance(cl); // \u8bbe\u7f6e\u7c7b\u540d\u53ca\u8d85\u7c7b cc.setClassName((Modifier.isPublic(c.getModifiers()) ? Wrapper.class.getName() : c.getName() + $sw ) + id); cc.setSuperClass(Wrapper.class); // \u6dfb\u52a0\u9ed8\u8ba4\u6784\u9020\u65b9\u6cd5 cc.addDefaultConstructor(); // \u6dfb\u52a0\u5b57\u6bb5 cc.addField( public static String[] pns; ); cc.addField( public static + Map.class.getName() + pts; ); cc.addField( public static String[] mns; ); cc.addField( public static String[] dmns; ); for (int i = 0, len = ms.size(); i len; i++) cc.addField( public static Class[] mts + i + ; ); // \u6dfb\u52a0\u65b9\u6cd5\u4ee3\u7801 cc.addMethod( public String[] getPropertyNames(){ return pns; } ); cc.addMethod( public boolean hasProperty(String n){ return pts.containsKey($1); } ); cc.addMethod( public Class getPropertyType(String n){ return (Class)pts.get($1); } ); cc.addMethod( public String[] getMethodNames(){ return mns; } ); cc.addMethod( public String[] getDeclaredMethodNames(){ return dmns; } ); cc.addMethod(c1.toString()); cc.addMethod(c2.toString()); cc.addMethod(c3.toString()); try { // \u751f\u6210\u7c7b Class ? wc = cc.toClass(); // \u8bbe\u7f6e\u5b57\u6bb5\u503c wc.getField( pts ).set(null, pts); wc.getField( pns ).set(null, pts.keySet().toArray(new String[0])); wc.getField( mns ).set(null, mns.toArray(new String[0])); wc.getField( dmns ).set(null, dmns.toArray(new String[0])); int ix = 0; for (Method m : ms.values()) wc.getField( mts + ix++).set(null, m.getParameterTypes()); // \u521b\u5efa Wrapper \u5b9e\u4f8b return (Wrapper) wc.newInstance(); } catch (RuntimeException e) { throw e; } catch (Throwable e) { throw new RuntimeException(e.getMessage(), e); } finally { cc.release(); ms.clear(); mns.clear(); dmns.clear(); } } \u4e0a\u9762\u4ee3\u7801\u5f88\u957f\uff0c\u5927\u5bb6\u8010\u5fc3\u770b\u4e00\u4e0b\u3002\u6211\u4eec\u5728\u4e0a\u9762\u4ee3\u7801\u4e2d\u505a\u4e86\u5927\u91cf\u7684\u6ce8\u91ca\uff0c\u5e76\u6309\u529f\u80fd\u5bf9\u4ee3\u7801\u8fdb\u884c\u4e86\u5206\u5757\uff0c\u4ee5\u5e2e\u52a9\u5927\u5bb6\u7406\u89e3\u4ee3\u7801\u903b\u8f91\u3002\u4e0b\u9762\u5bf9\u8fd9\u6bb5\u4ee3\u7801\u8fdb\u884c\u8bb2\u89e3\u3002\u9996\u5148\u6211\u4eec\u628a\u76ee\u5149\u79fb\u5230\u5206\u5272\u7ebf1\u4e4b\u4e0a\u7684\u4ee3\u7801\uff0c\u8fd9\u6bb5\u4ee3\u7801\u4e3b\u8981\u7528\u4e8e\u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u64cd\u4f5c\u3002\u6bd4\u5982\u521b\u5efa c1\u3001c2\u3001c3 \u4ee5\u53ca pts\u3001ms\u3001mns \u7b49\u53d8\u91cf\uff0c\u4ee5\u53ca\u5411 c1\u3001c2\u3001c3 \u4e2d\u6dfb\u52a0\u65b9\u6cd5\u5b9a\u4e49\u548c\u7c7b\u578b\u8f6c\u6362\u4ee3\u7801\u3002\u63a5\u4e0b\u6765\u662f\u5206\u5272\u7ebf1\u5230\u5206\u5272\u7ebf2\u4e4b\u95f4\u7684\u4ee3\u7801\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7528\u4e8e\u4e3a public \u7ea7\u522b\u7684\u5b57\u6bb5\u751f\u6210\u6761\u4ef6\u5224\u65ad\u53d6\u503c\u4e0e\u8d4b\u503c\u4ee3\u7801\u3002\u8fd9\u6bb5\u4ee3\u7801\u4e0d\u662f\u5f88\u96be\u770b\u61c2\uff0c\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002\u7ee7\u7eed\u5411\u4e0b\u770b\uff0c\u5206\u5272\u7ebf2\u548c\u5206\u9694\u7ebf3\u4e4b\u95f4\u7684\u4ee3\u7801\u7528\u4e8e\u4e3a\u5b9a\u4e49\u5728\u5f53\u524d\u7c7b\u4e2d\u7684\u65b9\u6cd5\u751f\u6210\u5224\u65ad\u8bed\u53e5\uff0c\u548c\u65b9\u6cd5\u8c03\u7528\u8bed\u53e5\u3002\u56e0\u4e3a\u9700\u8981\u5bf9\u65b9\u6cd5\u91cd\u8f7d\u8fdb\u884c\u6821\u9a8c\uff0c\u56e0\u6b64\u5230\u8fd9\u8fd9\u6bb5\u4ee3\u7801\u770b\u8d77\u6765\u6709\u70b9\u590d\u6742\u3002\u4e0d\u8fc7\u8010\u5fc3\u770b\u4e00\u4e0b\uff0c\u4e5f\u4e0d\u662f\u5f88\u96be\u7406\u89e3\u3002\u63a5\u4e0b\u6765\u662f\u5206\u5272\u7ebf3\u548c\u5206\u9694\u7ebf4\u4e4b\u95f4\u7684\u4ee3\u7801\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7528\u4e8e\u5904\u7406 getter\u3001setter \u4ee5\u53ca\u4ee5 is/has/can \u5f00\u5934\u7684\u65b9\u6cd5\u3002\u5904\u7406\u65b9\u5f0f\u662f\u901a\u8fc7\u6b63\u5219\u8868\u8fbe\u5f0f\u83b7\u53d6\u65b9\u6cd5\u7c7b\u578b\uff08get/set/is/...\uff09\uff0c\u4ee5\u53ca\u5c5e\u6027\u540d\u3002\u4e4b\u540e\u4e3a\u5c5e\u6027\u540d\u751f\u6210\u5224\u65ad\u8bed\u53e5\uff0c\u7136\u540e\u4e3a\u65b9\u6cd5\u751f\u6210\u8c03\u7528\u8bed\u53e5\u3002\u6700\u540e\u6211\u4eec\u518d\u6765\u770b\u4e00\u4e0b\u5206\u9694\u7ebf4\u4ee5\u4e0b\u7684\u4ee3\u7801\uff0c\u8fd9\u6bb5\u4ee3\u7801\u901a\u8fc7 ClassGenerator \u4e3a\u521a\u521a\u751f\u6210\u7684\u4ee3\u7801\u6784\u5efa Class \u7c7b\uff0c\u5e76\u901a\u8fc7\u53cd\u5c04\u521b\u5efa\u5bf9\u8c61\u3002ClassGenerator \u662f Dubbo \u81ea\u5df1\u5c01\u88c5\u7684\uff0c\u8be5\u7c7b\u7684\u6838\u5fc3\u662f toClass() \u7684\u91cd\u8f7d\u65b9\u6cd5 toClass(ClassLoader, ProtectionDomain)\uff0c\u8be5\u65b9\u6cd5\u901a\u8fc7 javassist \u6784\u5efa Class\u3002\u8fd9\u91cc\u5c31\u4e0d\u5206\u6790 toClass \u65b9\u6cd5\u4e86\uff0c\u5927\u5bb6\u8bf7\u81ea\u884c\u5206\u6790\u3002 \u9605\u8bfb Wrapper \u7c7b\u4ee3\u7801\u9700\u8981\u5bf9 javassist \u6846\u67b6\u6709\u6240\u4e86\u89e3\u3002\u5173\u4e8e javassist\uff0c\u5927\u5bb6\u5982\u679c\u4e0d\u719f\u6089\uff0c\u8bf7\u81ea\u884c\u67e5\u9605\u8d44\u6599\uff0c\u672c\u8282\u4e0d\u6253\u7b97\u4ecb\u7ecd javassist \u76f8\u5173\u5185\u5bb9\u3002 \u597d\u4e86\uff0c\u5173\u4e8e Wrapper \u7c7b\u751f\u6210\u8fc7\u7a0b\u5c31\u5206\u6790\u5230\u8fd9\u3002\u5982\u679c\u5927\u5bb6\u770b\u7684\u4e0d\u662f\u5f88\u660e\u767d\uff0c\u53ef\u4ee5\u5355\u72ec\u4e3a Wrapper \u521b\u5efa\u5355\u5143\u6d4b\u8bd5\uff0c\u7136\u540e\u5355\u6b65\u8c03\u8bd5\u3002\u5e76\u5c06\u751f\u6210\u7684\u4ee3\u7801\u62f7\u8d1d\u51fa\u6765\uff0c\u683c\u5f0f\u5316\u540e\u518d\u8fdb\u884c\u89c2\u5bdf\u548c\u7406\u89e3\u3002","title":"2.2.1 Invoker \u521b\u5efa\u8fc7\u7a0b"},{"location":"source_code_guide/export-service/#222","text":"\u672c\u8282\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u670d\u52a1\u5bfc\u51fa\u76f8\u5173\u7684\u4ee3\u7801\uff0c\u6309\u7167\u4ee3\u7801\u6267\u884c\u987a\u5e8f\uff0c\u672c\u8282\u5148\u6765\u5206\u6790\u5bfc\u51fa\u670d\u52a1\u5230\u672c\u5730\u7684\u8fc7\u7a0b\u3002\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a private void exportLocal(URL url) { // \u5982\u679c URL \u7684\u534f\u8bae\u5934\u7b49\u4e8e injvm\uff0c\u8bf4\u660e\u5df2\u7ecf\u5bfc\u51fa\u5230\u672c\u5730\u4e86\uff0c\u65e0\u9700\u518d\u6b21\u5bfc\u51fa if (!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(url.getProtocol())) { URL local = URL.valueOf(url.toFullString()) .setProtocol(Constants.LOCAL_PROTOCOL) // \u8bbe\u7f6e\u534f\u8bae\u5934\u4e3a injvm .setHost(LOCALHOST) .setPort(0); ServiceClassHolder.getInstance().pushServiceClass(getServiceClass(ref)); // \u521b\u5efa Invoker\uff0c\u5e76\u5bfc\u51fa\u670d\u52a1\uff0c\u8fd9\u91cc\u7684 protocol \u4f1a\u5728\u8fd0\u884c\u65f6\u8c03\u7528 InjvmProtocol \u7684 export \u65b9\u6cd5 Exporter ? exporter = protocol.export( proxyFactory.getInvoker(ref, (Class) interfaceClass, local)); exporters.add(exporter); } } exportLocal \u65b9\u6cd5\u6bd4\u8f83\u7b80\u5355\uff0c\u9996\u5148\u6839\u636e URL \u534f\u8bae\u5934\u51b3\u5b9a\u662f\u5426\u5bfc\u51fa\u670d\u52a1\u3002\u82e5\u9700\u5bfc\u51fa\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 URL \u5e76\u5c06\u534f\u8bae\u5934\u3001\u4e3b\u673a\u540d\u4ee5\u53ca\u7aef\u53e3\u8bbe\u7f6e\u6210\u65b0\u7684\u503c\u3002\u7136\u540e\u521b\u5efa Invoker\uff0c\u5e76\u8c03\u7528 InjvmProtocol \u7684 export \u65b9\u6cd5\u5bfc\u51fa\u670d\u52a1\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b InjvmProtocol \u7684 export \u65b9\u6cd5\u90fd\u505a\u4e86\u54ea\u4e9b\u4e8b\u60c5\u3002 public T Exporter T export(Invoker T invoker) throws RpcException { // \u521b\u5efa InjvmExporter return new InjvmExporter T (invoker, invoker.getUrl().getServiceKey(), exporterMap); } \u5982\u4e0a\uff0cInjvmProtocol \u7684 export \u65b9\u6cd5\u4ec5\u521b\u5efa\u4e86\u4e00\u4e2a InjvmExporter\uff0c\u65e0\u5176\u4ed6\u903b\u8f91\u3002\u5230\u6b64\u5bfc\u51fa\u670d\u52a1\u5230\u672c\u5730\u5c31\u5206\u6790\u5b8c\u4e86\uff0c\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u7ee7\u7eed\u5206\u6790\u5bfc\u51fa\u670d\u52a1\u5230\u8fdc\u7a0b\u7684\u8fc7\u7a0b\u3002","title":"2.2.2 \u5bfc\u51fa\u670d\u52a1\u5230\u672c\u5730"},{"location":"source_code_guide/export-service/#223","text":"\u4e0e\u5bfc\u51fa\u670d\u52a1\u5230\u672c\u5730\u76f8\u6bd4\uff0c\u5bfc\u51fa\u670d\u52a1\u5230\u8fdc\u7a0b\u7684\u8fc7\u7a0b\u8981\u590d\u6742\u4e0d\u5c11\uff0c\u5176\u5305\u542b\u4e86\u670d\u52a1\u5bfc\u51fa\u4e0e\u670d\u52a1\u6ce8\u518c\u4e24\u4e2a\u8fc7\u7a0b\u3002\u8fd9\u4e24\u4e2a\u8fc7\u7a0b\u6d89\u53ca\u5230\u4e86\u5927\u91cf\u7684\u8c03\u7528\uff0c\u6bd4\u8f83\u590d\u6742\u3002\u6309\u7167\u4ee3\u7801\u6267\u884c\u987a\u5e8f\uff0c\u672c\u8282\u5148\u6765\u5206\u6790\u670d\u52a1\u5bfc\u51fa\u903b\u8f91\uff0c\u670d\u52a1\u6ce8\u518c\u903b\u8f91\u5c06\u5728\u4e0b\u4e00\u8282\u8fdb\u884c\u5206\u6790\u3002\u4e0b\u9762\u5f00\u59cb\u5206\u6790\uff0c\u6211\u4eec\u628a\u76ee\u5149\u79fb\u52a8\u5230 RegistryProtocol \u7684 export \u65b9\u6cd5\u4e0a\u3002 public T Exporter T export(final Invoker T originInvoker) throws RpcException { // \u5bfc\u51fa\u670d\u52a1 final ExporterChangeableWrapper T exporter = doLocalExport(originInvoker); // \u83b7\u53d6\u6ce8\u518c\u4e2d\u5fc3 URL\uff0c\u4ee5 zookeeper \u6ce8\u518c\u4e2d\u5fc3\u4e3a\u4f8b\uff0c\u5f97\u5230\u7684\u793a\u4f8b URL \u5982\u4e0b\uff1a // zookeeper://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-provider dubbo=2.0.2 export=dubbo%3A%2F%2F172.17.48.52%3A20880%2Fcom.alibaba.dubbo.demo.DemoService%3Fanyhost%3Dtrue%26application%3Ddemo-provider URL registryUrl = getRegistryUrl(originInvoker); // \u6839\u636e URL \u52a0\u8f7d Registry \u5b9e\u73b0\u7c7b\uff0c\u6bd4\u5982 ZookeeperRegistry final Registry registry = getRegistry(originInvoker); // \u83b7\u53d6\u5df2\u6ce8\u518c\u7684\u670d\u52a1\u63d0\u4f9b\u8005 URL\uff0c\u6bd4\u5982\uff1a // dubbo://172.17.48.52:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true application=demo-provider dubbo=2.0.2 generic=false interface=com.alibaba.dubbo.demo.DemoService methods=sayHello final URL registeredProviderUrl = getRegisteredProviderUrl(originInvoker); // \u83b7\u53d6 register \u53c2\u6570 boolean register = registeredProviderUrl.getParameter( register , true); // \u5411\u670d\u52a1\u63d0\u4f9b\u8005\u4e0e\u6d88\u8d39\u8005\u6ce8\u518c\u8868\u4e2d\u6ce8\u518c\u670d\u52a1\u63d0\u4f9b\u8005 ProviderConsumerRegTable.registerProvider(originInvoker, registryUrl, registeredProviderUrl); // \u6839\u636e register \u7684\u503c\u51b3\u5b9a\u662f\u5426\u6ce8\u518c\u670d\u52a1 if (register) { // \u5411\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u670d\u52a1 register(registryUrl, registeredProviderUrl); ProviderConsumerRegTable.getProviderWrapper(originInvoker).setReg(true); } // \u83b7\u53d6\u8ba2\u9605 URL\uff0c\u6bd4\u5982\uff1a // provider://172.17.48.52:20880/com.alibaba.dubbo.demo.DemoService?category=configurators check=false anyhost=true application=demo-provider dubbo=2.0.2 generic=false interface=com.alibaba.dubbo.demo.DemoService methods=sayHello final URL overrideSubscribeUrl = getSubscribedOverrideUrl(registeredProviderUrl); // \u521b\u5efa\u76d1\u542c\u5668 final OverrideListener overrideSubscribeListener = new OverrideListener(overrideSubscribeUrl, originInvoker); overrideListeners.put(overrideSubscribeUrl, overrideSubscribeListener); // \u5411\u6ce8\u518c\u4e2d\u5fc3\u8fdb\u884c\u8ba2\u9605 override \u6570\u636e registry.subscribe(overrideSubscribeUrl, overrideSubscribeListener); // \u521b\u5efa\u5e76\u8fd4\u56de DestroyableExporter return new DestroyableExporter T (exporter, originInvoker, overrideSubscribeUrl, registeredProviderUrl); } \u4e0a\u9762\u4ee3\u7801\u770b\u8d77\u6765\u6bd4\u8f83\u590d\u6742\uff0c\u4e3b\u8981\u505a\u5982\u4e0b\u4e00\u4e9b\u64cd\u4f5c\uff1a \u8c03\u7528 doLocalExport \u5bfc\u51fa\u670d\u52a1 \u5411\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u670d\u52a1 \u5411\u6ce8\u518c\u4e2d\u5fc3\u8fdb\u884c\u8ba2\u9605 override \u6570\u636e \u521b\u5efa\u5e76\u8fd4\u56de DestroyableExporter \u5728\u4ee5\u4e0a\u64cd\u4f5c\u4e2d\uff0c\u9664\u4e86\u521b\u5efa\u5e76\u8fd4\u56de DestroyableExporter \u6ca1\u4ec0\u4e48\u96be\u5ea6\u5916\uff0c\u5176\u4ed6\u51e0\u6b65\u64cd\u4f5c\u90fd\u4e0d\u662f\u5f88\u7b80\u5355\u3002\u8fd9\u5176\u4e2d\uff0c\u5bfc\u51fa\u670d\u52a1\u548c\u6ce8\u518c\u670d\u52a1\u662f\u672c\u7ae0\u8981\u91cd\u70b9\u5206\u6790\u7684\u903b\u8f91\u3002 \u8ba2\u9605 override \u6570\u636e\u5e76\u975e\u672c\u6587\u91cd\u70b9\u5185\u5bb9\uff0c\u540e\u9762\u4f1a\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u3002\u4e0b\u9762\u5148\u6765\u5206\u6790 doLocalExport \u65b9\u6cd5\u7684\u903b\u8f91\uff0c\u5982\u4e0b\uff1a private T ExporterChangeableWrapper T doLocalExport(final Invoker T originInvoker) { String key = getCacheKey(originInvoker); // \u8bbf\u95ee\u7f13\u5b58 ExporterChangeableWrapper T exporter = (ExporterChangeableWrapper T ) bounds.get(key); if (exporter == null) { synchronized (bounds) { exporter = (ExporterChangeableWrapper T ) bounds.get(key); if (exporter == null) { // \u521b\u5efa Invoker \u4e3a\u59d4\u6258\u7c7b\u5bf9\u8c61 final Invoker ? invokerDelegete = new InvokerDelegete T (originInvoker, getProviderUrl(originInvoker)); // \u8c03\u7528 protocol \u7684 export \u65b9\u6cd5\u5bfc\u51fa\u670d\u52a1 exporter = new ExporterChangeableWrapper T ((Exporter T ) protocol.export(invokerDelegete), originInvoker); // \u5199\u7f13\u5b58 bounds.put(key, exporter); } } } return exporter; } \u4e0a\u9762\u7684\u4ee3\u7801\u662f\u5178\u578b\u7684\u53cc\u91cd\u68c0\u67e5\u9501\uff0c\u5927\u5bb6\u5728\u9605\u8bfb Dubbo \u7684\u6e90\u7801\u4e2d\uff0c\u4f1a\u591a\u6b21\u89c1\u5230\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u628a\u91cd\u70b9\u653e\u5728 Protocol \u7684 export \u65b9\u6cd5\u4e0a\u3002\u5047\u8bbe\u8fd0\u884c\u65f6\u534f\u8bae\u4e3a dubbo\uff0c\u6b64\u5904\u7684 protocol \u53d8\u91cf\u4f1a\u5728\u8fd0\u884c\u65f6\u52a0\u8f7d DubboProtocol\uff0c\u5e76\u8c03\u7528 DubboProtocol \u7684 export \u65b9\u6cd5\u3002\u6240\u4ee5\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u76ee\u5149\u8f6c\u79fb\u5230 DubboProtocol \u7684 export \u65b9\u6cd5\u4e0a\uff0c\u76f8\u5173\u5206\u6790\u5982\u4e0b\uff1a public T Exporter T export(Invoker T invoker) throws RpcException { URL url = invoker.getUrl(); // \u83b7\u53d6\u670d\u52a1\u6807\u8bc6\uff0c\u7406\u89e3\u6210\u670d\u52a1\u5750\u6807\u4e5f\u884c\u3002\u7531\u670d\u52a1\u7ec4\u540d\uff0c\u670d\u52a1\u540d\uff0c\u670d\u52a1\u7248\u672c\u53f7\u4ee5\u53ca\u7aef\u53e3\u7ec4\u6210\u3002\u6bd4\u5982\uff1a // demoGroup/com.alibaba.dubbo.demo.DemoService:1.0.1:20880 String key = serviceKey(url); // \u521b\u5efa DubboExporter DubboExporter T exporter = new DubboExporter T (invoker, key, exporterMap); // \u5c06 key, exporter \u952e\u503c\u5bf9\u653e\u5165\u7f13\u5b58\u4e2d exporterMap.put(key, exporter); // \u672c\u5730\u5b58\u6839\u76f8\u5173\u4ee3\u7801 Boolean isStubSupportEvent = url.getParameter(Constants.STUB_EVENT_KEY, Constants.DEFAULT_STUB_EVENT); Boolean isCallbackservice = url.getParameter(Constants.IS_CALLBACK_SERVICE, false); if (isStubSupportEvent !isCallbackservice) { String stubServiceMethods = url.getParameter(Constants.STUB_EVENT_METHODS_KEY); if (stubServiceMethods == null || stubServiceMethods.length() == 0) { // \u7701\u7565\u65e5\u5fd7\u6253\u5370\u4ee3\u7801 } else { stubServiceMethodsMap.put(url.getServiceKey(), stubServiceMethods); } } // \u542f\u52a8\u670d\u52a1\u5668 openServer(url); // \u4f18\u5316\u5e8f\u5217\u5316 optimizeSerialization(url); return exporter; } \u5982\u4e0a\uff0c\u6211\u4eec\u91cd\u70b9\u5173\u6ce8 DubboExporter \u7684\u521b\u5efa\u4ee5\u53ca openServer \u65b9\u6cd5\uff0c\u5176\u4ed6\u903b\u8f91\u770b\u4e0d\u61c2\u4e5f\u6ca1\u5173\u7cfb\uff0c\u4e0d\u5f71\u54cd\u7406\u89e3\u670d\u52a1\u5bfc\u51fa\u8fc7\u7a0b\u3002\u53e6\u5916\uff0cDubboExporter \u7684\u4ee3\u7801\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u4e0d\u5206\u6790\u4e86\u3002\u4e0b\u9762\u5206\u6790 openServer \u65b9\u6cd5\u3002 private void openServer(URL url) { // \u83b7\u53d6 host:port\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a\u670d\u52a1\u5668\u5b9e\u4f8b\u7684 key\uff0c\u7528\u4e8e\u6807\u8bc6\u5f53\u524d\u7684\u670d\u52a1\u5668\u5b9e\u4f8b String key = url.getAddress(); boolean isServer = url.getParameter(Constants.IS_SERVER_KEY, true); if (isServer) { // \u8bbf\u95ee\u7f13\u5b58 ExchangeServer server = serverMap.get(key); if (server == null) { // \u521b\u5efa\u670d\u52a1\u5668\u5b9e\u4f8b serverMap.put(key, createServer(url)); } else { // \u670d\u52a1\u5668\u5df2\u521b\u5efa\uff0c\u5219\u6839\u636e url \u4e2d\u7684\u914d\u7f6e\u91cd\u7f6e\u670d\u52a1\u5668 server.reset(url); } } } \u5982\u4e0a\uff0c\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a\uff08\u5355\u7f51\u5361\uff09\uff0c\u540c\u4e00\u4e2a\u7aef\u53e3\u4e0a\u4ec5\u5141\u8bb8\u542f\u52a8\u4e00\u4e2a\u670d\u52a1\u5668\u5b9e\u4f8b\u3002\u82e5\u67d0\u4e2a\u7aef\u53e3\u4e0a\u5df2\u6709\u670d\u52a1\u5668\u5b9e\u4f8b\uff0c\u6b64\u65f6\u5219\u8c03\u7528 reset \u65b9\u6cd5\u91cd\u7f6e\u670d\u52a1\u5668\u7684\u4e00\u4e9b\u914d\u7f6e\u3002\u8003\u8651\u5230\u7bc7\u5e45\u95ee\u9898\uff0c\u5173\u4e8e\u670d\u52a1\u5668\u5b9e\u4f8b\u91cd\u7f6e\u7684\u4ee3\u7801\u5c31\u4e0d\u5206\u6790\u4e86\u3002\u63a5\u4e0b\u6765\u5206\u6790\u670d\u52a1\u5668\u5b9e\u4f8b\u7684\u521b\u5efa\u8fc7\u7a0b\u3002\u5982\u4e0b\uff1a private ExchangeServer createServer(URL url) { url = url.addParameterIfAbsent(Constants.CHANNEL_READONLYEVENT_SENT_KEY, // \u6dfb\u52a0\u5fc3\u8df3\u68c0\u6d4b\u914d\u7f6e\u5230 url \u4e2d url = url.addParameterIfAbsent(Constants.HEARTBEAT_KEY, String.valueOf(Constants.DEFAULT_HEARTBEAT)); // \u83b7\u53d6 server \u53c2\u6570\uff0c\u9ed8\u8ba4\u4e3a netty String str = url.getParameter(Constants.SERVER_KEY, Constants.DEFAULT_REMOTING_SERVER); // \u901a\u8fc7 SPI \u68c0\u6d4b\u662f\u5426\u5b58\u5728 server \u53c2\u6570\u6240\u4ee3\u8868\u7684 Transporter \u62d3\u5c55\uff0c\u4e0d\u5b58\u5728\u5219\u629b\u51fa\u5f02\u5e38 if (str != null str.length() 0 !ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str)) throw new RpcException( Unsupported server type: + str + , url: + url); // \u6dfb\u52a0\u7f16\u7801\u89e3\u7801\u5668\u53c2\u6570 url = url.addParameter(Constants.CODEC_KEY, DubboCodec.NAME); ExchangeServer server; try { // \u521b\u5efa ExchangeServer server = Exchangers.bind(url, requestHandler); } catch (RemotingException e) { throw new RpcException( Fail to start server... ); } // \u83b7\u53d6 client \u53c2\u6570\uff0c\u53ef\u6307\u5b9a netty\uff0cmina str = url.getParameter(Constants.CLIENT_KEY); if (str != null str.length() 0) { // \u83b7\u53d6\u6240\u6709\u7684 Transporter \u5b9e\u73b0\u7c7b\u540d\u79f0\u96c6\u5408\uff0c\u6bd4\u5982 supportedTypes = [netty, mina] Set String supportedTypes = ExtensionLoader.getExtensionLoader(Transporter.class).getSupportedExtensions(); // \u68c0\u6d4b\u5f53\u524d Dubbo \u6240\u652f\u6301\u7684 Transporter \u5b9e\u73b0\u7c7b\u540d\u79f0\u5217\u8868\u4e2d\uff0c // \u662f\u5426\u5305\u542b client \u6240\u8868\u793a\u7684 Transporter\uff0c\u82e5\u4e0d\u5305\u542b\uff0c\u5219\u629b\u51fa\u5f02\u5e38 if (!supportedTypes.contains(str)) { throw new RpcException( Unsupported client type... ); } } return server; } \u5982\u4e0a\uff0ccreateServer \u5305\u542b\u4e09\u4e2a\u6838\u5fc3\u7684\u903b\u8f91\u3002\u7b2c\u4e00\u662f\u68c0\u6d4b\u662f\u5426\u5b58\u5728 server \u53c2\u6570\u6240\u4ee3\u8868\u7684 Transporter \u62d3\u5c55\uff0c\u4e0d\u5b58\u5728\u5219\u629b\u51fa\u5f02\u5e38\u3002\u7b2c\u4e8c\u662f\u521b\u5efa\u670d\u52a1\u5668\u5b9e\u4f8b\u3002\u7b2c\u4e09\u662f\u68c0\u6d4b\u662f\u5426\u652f\u6301 client \u53c2\u6570\u6240\u8868\u793a\u7684 Transporter \u62d3\u5c55\uff0c\u4e0d\u5b58\u5728\u4e5f\u662f\u629b\u51fa\u5f02\u5e38\u3002\u4e24\u6b21\u68c0\u6d4b\u64cd\u4f5c\u6240\u5bf9\u5e94\u7684\u4ee3\u7801\u6bd4\u8f83\u76f4\u767d\u4e86\uff0c\u65e0\u9700\u591a\u8bf4\u3002\u4f46\u521b\u5efa\u670d\u52a1\u5668\u7684\u64cd\u4f5c\u76ee\u524d\u8fd8\u4e0d\u662f\u5f88\u6e05\u6670\uff0c\u6211\u4eec\u7ee7\u7eed\u5f80\u4e0b\u770b\u3002 public static ExchangeServer bind(URL url, ExchangeHandler handler) throws RemotingException { if (url == null) { throw new IllegalArgumentException( url == null ); } if (handler == null) { throw new IllegalArgumentException( handler == null ); } url = url.addParameterIfAbsent(Constants.CODEC_KEY, exchange ); // \u83b7\u53d6 Exchanger\uff0c\u9ed8\u8ba4\u4e3a HeaderExchanger\u3002 // \u7d27\u63a5\u7740\u8c03\u7528 HeaderExchanger \u7684 bind \u65b9\u6cd5\u521b\u5efa ExchangeServer \u5b9e\u4f8b return getExchanger(url).bind(url, handler); } \u4e0a\u9762\u4ee3\u7801\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002\u4e0b\u9762\u770b\u4e00\u4e0b HeaderExchanger \u7684 bind \u65b9\u6cd5\u3002 public ExchangeServer bind(URL url, ExchangeHandler handler) throws RemotingException { // \u521b\u5efa HeaderExchangeServer \u5b9e\u4f8b\uff0c\u8be5\u65b9\u6cd5\u5305\u542b\u4e86\u591a\u4e2a\u903b\u8f91\uff0c\u5206\u522b\u5982\u4e0b\uff1a // 1. new HeaderExchangeHandler(handler) // 2. new DecodeHandler(new HeaderExchangeHandler(handler)) // 3. Transporters.bind(url, new DecodeHandler(new HeaderExchangeHandler(handler))) return new HeaderExchangeServer(Transporters.bind(url, new DecodeHandler(new HeaderExchangeHandler(handler)))); } HeaderExchanger \u7684 bind \u65b9\u6cd5\u5305\u542b\u7684\u903b\u8f91\u6bd4\u8f83\u591a\uff0c\u4f46\u76ee\u524d\u6211\u4eec\u4ec5\u9700\u5173\u5fc3 Transporters \u7684 bind \u65b9\u6cd5\u903b\u8f91\u5373\u53ef\u3002\u8be5\u65b9\u6cd5\u7684\u4ee3\u7801\u5982\u4e0b\uff1a public static Server bind(URL url, ChannelHandler... handlers) throws RemotingException { if (url == null) { throw new IllegalArgumentException( url == null ); } if (handlers == null || handlers.length == 0) { throw new IllegalArgumentException( handlers == null ); } ChannelHandler handler; if (handlers.length == 1) { handler = handlers[0]; } else { // \u5982\u679c handlers \u5143\u7d20\u6570\u91cf\u5927\u4e8e1\uff0c\u5219\u521b\u5efa ChannelHandler \u5206\u53d1\u5668 handler = new ChannelHandlerDispatcher(handlers); } // \u83b7\u53d6\u81ea\u9002\u5e94 Transporter \u5b9e\u4f8b\uff0c\u5e76\u8c03\u7528\u5b9e\u4f8b\u65b9\u6cd5 return getTransporter().bind(url, handler); } \u5982\u4e0a\uff0cgetTransporter() \u65b9\u6cd5\u83b7\u53d6\u7684 Transporter \u662f\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u521b\u5efa\u7684\uff0c\u7c7b\u540d\u4e3a Transporter$Adaptive\uff0c\u4e5f\u5c31\u662f\u81ea\u9002\u5e94\u62d3\u5c55\u7c7b\u3002Transporter$Adaptive \u4f1a\u5728\u8fd0\u884c\u65f6\u6839\u636e\u4f20\u5165\u7684 URL \u53c2\u6570\u51b3\u5b9a\u52a0\u8f7d\u4ec0\u4e48\u7c7b\u578b\u7684 Transporter\uff0c\u9ed8\u8ba4\u4e3a NettyTransporter\u3002\u4e0b\u9762\u6211\u4eec\u7ee7\u7eed\u8ddf\u4e0b\u53bb\uff0c\u8fd9\u6b21\u5206\u6790\u7684\u662f NettyTransporter \u7684 bind \u65b9\u6cd5\u3002 public Server bind(URL url, ChannelHandler listener) throws RemotingException { // \u521b\u5efa NettyServer return new NettyServer(url, listener); } \u8fd9\u91cc\u4ec5\u6709\u4e00\u53e5\u521b\u5efa NettyServer \u7684\u4ee3\u7801\uff0c\u65e0\u9700\u591a\u8bf4\uff0c\u6211\u4eec\u7ee7\u7eed\u5411\u4e0b\u770b\u3002 public class NettyServer extends AbstractServer implements Server { public NettyServer(URL url, ChannelHandler handler) throws RemotingException { // \u8c03\u7528\u7236\u7c7b\u6784\u9020\u65b9\u6cd5 super(url, ChannelHandlers.wrap(handler, ExecutorUtil.setThreadName(url, SERVER_THREAD_POOL_NAME))); } } public abstract class AbstractServer extends AbstractEndpoint implements Server { public AbstractServer(URL url, ChannelHandler handler) throws RemotingException { // \u8c03\u7528\u7236\u7c7b\u6784\u9020\u65b9\u6cd5\uff0c\u8fd9\u91cc\u5c31\u4e0d\u7528\u8ddf\u8fdb\u53bb\u4e86\uff0c\u6ca1\u4ec0\u4e48\u590d\u6742\u903b\u8f91 super(url, handler); localAddress = getUrl().toInetSocketAddress(); // \u83b7\u53d6 ip \u548c\u7aef\u53e3 String bindIp = getUrl().getParameter(Constants.BIND_IP_KEY, getUrl().getHost()); int bindPort = getUrl().getParameter(Constants.BIND_PORT_KEY, getUrl().getPort()); if (url.getParameter(Constants.ANYHOST_KEY, false) || NetUtils.isInvalidLocalHost(bindIp)) { // \u8bbe\u7f6e ip \u4e3a 0.0.0.0 bindIp = NetUtils.ANYHOST; } bindAddress = new InetSocketAddress(bindIp, bindPort); // \u83b7\u53d6\u6700\u5927\u53ef\u63a5\u53d7\u8fde\u63a5\u6570 this.accepts = url.getParameter(Constants.ACCEPTS_KEY, Constants.DEFAULT_ACCEPTS); this.idleTimeout = url.getParameter(Constants.IDLE_TIMEOUT_KEY, Constants.DEFAULT_IDLE_TIMEOUT); try { // \u8c03\u7528\u6a21\u677f\u65b9\u6cd5 doOpen \u542f\u52a8\u670d\u52a1\u5668 doOpen(); } catch (Throwable t) { throw new RemotingException( Failed to bind ); } DataStore dataStore = ExtensionLoader.getExtensionLoader(DataStore.class).getDefaultExtension(); executor = (ExecutorService) dataStore.get(Constants.EXECUTOR_SERVICE_COMPONENT_KEY, Integer.toString(url.getPort())); } protected abstract void doOpen() throws Throwable; protected abstract void doClose() throws Throwable; } \u4e0a\u9762\u4ee3\u7801\u591a\u4e3a\u8d4b\u503c\u4ee3\u7801\uff0c\u4e0d\u9700\u8981\u591a\u8bb2\u3002\u6211\u4eec\u91cd\u70b9\u5173\u6ce8 doOpen \u62bd\u8c61\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u9700\u8981\u5b50\u7c7b\u5b9e\u73b0\u3002\u4e0b\u9762\u56de\u5230 NettyServer \u4e2d\u3002 protected void doOpen() throws Throwable { NettyHelper.setNettyLoggerFactory(); // \u521b\u5efa boss \u548c worker \u7ebf\u7a0b\u6c60 ExecutorService boss = Executors.newCachedThreadPool(new NamedThreadFactory( NettyServerBoss , true)); ExecutorService worker = Executors.newCachedThreadPool(new NamedThreadFactory( NettyServerWorker , true)); ChannelFactory channelFactory = new NioServerSocketChannelFactory(boss, worker, getUrl().getPositiveParameter(Constants.IO_THREADS_KEY, Constants.DEFAULT_IO_THREADS)); // \u521b\u5efa ServerBootstrap bootstrap = new ServerBootstrap(channelFactory); final NettyHandler nettyHandler = new NettyHandler(getUrl(), this); channels = nettyHandler.getChannels(); bootstrap.setOption( child.tcpNoDelay , true); // \u8bbe\u7f6e PipelineFactory bootstrap.setPipelineFactory(new ChannelPipelineFactory() { @Override public ChannelPipeline getPipeline() { NettyCodecAdapter adapter = new NettyCodecAdapter(getCodec(), getUrl(), NettyServer.this); ChannelPipeline pipeline = Channels.pipeline(); pipeline.addLast( decoder , adapter.getDecoder()); pipeline.addLast( encoder , adapter.getEncoder()); pipeline.addLast( handler , nettyHandler); return pipeline; } }); // \u7ed1\u5b9a\u5230\u6307\u5b9a\u7684 ip \u548c\u7aef\u53e3\u4e0a channel = bootstrap.bind(getBindAddress()); } \u4ee5\u4e0a\u5c31\u662f NettyServer \u521b\u5efa\u7684\u8fc7\u7a0b\uff0cdubbo \u9ed8\u8ba4\u4f7f\u7528\u7684 NettyServer \u662f\u57fa\u4e8e netty 3.x \u7248\u672c\u5b9e\u73b0\u7684\uff0c\u6bd4\u8f83\u8001\u4e86\u3002\u56e0\u6b64 Dubbo \u53e6\u5916\u63d0\u4f9b\u4e86 netty 4.x \u7248\u672c\u7684 NettyServer\uff0c\u5927\u5bb6\u53ef\u5728\u4f7f\u7528 Dubbo \u7684\u8fc7\u7a0b\u4e2d\u6309\u9700\u8fdb\u884c\u914d\u7f6e\u3002 \u5230\u6b64\uff0c\u5173\u4e8e\u670d\u52a1\u5bfc\u51fa\u7684\u8fc7\u7a0b\u5c31\u5206\u6790\u5b8c\u4e86\u3002\u6574\u4e2a\u8fc7\u7a0b\u6bd4\u8f83\u590d\u6742\uff0c\u5927\u5bb6\u5728\u5206\u6790\u7684\u8fc7\u7a0b\u4e2d\u8010\u5fc3\u4e00\u4e9b\u3002\u5e76\u4e14\u591a\u5199 Demo \u8fdb\u884c\u8c03\u8bd5\uff0c\u4ee5\u4fbf\u80fd\u591f\u66f4\u597d\u7684\u7406\u89e3\u4ee3\u7801\u903b\u8f91\u3002 \u672c\u8282\u5185\u5bb9\u5148\u5230\u8fd9\u91cc\uff0c\u63a5\u4e0b\u6765\u5206\u6790\u670d\u52a1\u5bfc\u51fa\u7684\u53e6\u4e00\u5757\u903b\u8f91 \u2014 \u670d\u52a1\u6ce8\u518c\u3002","title":"2.2.3 \u5bfc\u51fa\u670d\u52a1\u5230\u8fdc\u7a0b"},{"location":"source_code_guide/export-service/#224","text":"\u672c\u8282\u6211\u4eec\u6765\u5206\u6790\u670d\u52a1\u6ce8\u518c\u8fc7\u7a0b\uff0c\u670d\u52a1\u6ce8\u518c\u64cd\u4f5c\u5bf9\u4e8e Dubbo \u6765\u8bf4\u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u901a\u8fc7\u670d\u52a1\u76f4\u8fde\u7684\u65b9\u5f0f\u5c31\u53ef\u4ee5\u7ed5\u8fc7\u6ce8\u518c\u4e2d\u5fc3\u3002\u4f46\u901a\u5e38\u6211\u4eec\u4e0d\u4f1a\u8fd9\u4e48\u505a\uff0c\u76f4\u8fde\u65b9\u5f0f\u4e0d\u5229\u4e8e\u670d\u52a1\u6cbb\u7406\uff0c\u4ec5\u63a8\u8350\u5728\u6d4b\u8bd5\u670d\u52a1\u65f6\u4f7f\u7528\u3002\u5bf9\u4e8e Dubbo \u6765\u8bf4\uff0c\u6ce8\u518c\u4e2d\u5fc3\u867d\u4e0d\u662f\u5fc5\u9700\uff0c\u4f46\u5374\u662f\u5fc5\u8981\u7684\u3002\u56e0\u6b64\uff0c\u5173\u4e8e\u6ce8\u518c\u4e2d\u5fc3\u4ee5\u53ca\u670d\u52a1\u6ce8\u518c\u76f8\u5173\u903b\u8f91\uff0c\u6211\u4eec\u4e5f\u9700\u8981\u641e\u61c2\u3002 \u672c\u8282\u5185\u5bb9\u4ee5 Zookeeper \u6ce8\u518c\u4e2d\u5fc3\u4f5c\u4e3a\u5206\u6790\u76ee\u6807\uff0c\u5176\u4ed6\u7c7b\u578b\u6ce8\u518c\u4e2d\u5fc3\u5927\u5bb6\u53ef\u81ea\u884c\u5206\u6790\u3002\u4e0b\u9762\u4ece\u670d\u52a1\u6ce8\u518c\u7684\u5165\u53e3\u65b9\u6cd5\u5f00\u59cb\u5206\u6790\uff0c\u6211\u4eec\u628a\u76ee\u5149\u518d\u6b21\u79fb\u5230 RegistryProtocol \u7684 export \u65b9\u6cd5\u4e0a\u3002\u5982\u4e0b\uff1a public T Exporter T export(final Invoker T originInvoker) throws RpcException { // ${\u5bfc\u51fa\u670d\u52a1} // \u7701\u7565\u5176\u4ed6\u4ee3\u7801 boolean register = registeredProviderUrl.getParameter( register , true); if (register) { // \u6ce8\u518c\u670d\u52a1 register(registryUrl, registeredProviderUrl); ProviderConsumerRegTable.getProviderWrapper(originInvoker).setReg(true); } final URL overrideSubscribeUrl = getSubscribedOverrideUrl(registeredProviderUrl); final OverrideListener overrideSubscribeListener = new OverrideListener(overrideSubscribeUrl, originInvoker); overrideListeners.put(overrideSubscribeUrl, overrideSubscribeListener); // \u8ba2\u9605 override \u6570\u636e registry.subscribe(overrideSubscribeUrl, overrideSubscribeListener); // \u7701\u7565\u90e8\u5206\u4ee3\u7801 } RegistryProtocol \u7684 export \u65b9\u6cd5\u5305\u542b\u4e86\u670d\u52a1\u5bfc\u51fa\uff0c\u6ce8\u518c\uff0c\u4ee5\u53ca\u6570\u636e\u8ba2\u9605\u7b49\u903b\u8f91\u3002\u5176\u4e2d\u670d\u52a1\u5bfc\u51fa\u903b\u8f91\u4e0a\u4e00\u8282\u5df2\u7ecf\u5206\u6790\u8fc7\u4e86\uff0c\u672c\u8282\u5c06\u5206\u6790\u670d\u52a1\u6ce8\u518c\u903b\u8f91\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a public void register(URL registryUrl, URL registedProviderUrl) { // \u83b7\u53d6 Registry Registry registry = registryFactory.getRegistry(registryUrl); // \u6ce8\u518c\u670d\u52a1 registry.register(registedProviderUrl); } register \u65b9\u6cd5\u5305\u542b\u4e24\u6b65\u64cd\u4f5c\uff0c\u7b2c\u4e00\u6b65\u662f\u83b7\u53d6\u6ce8\u518c\u4e2d\u5fc3\u5b9e\u4f8b\uff0c\u7b2c\u4e8c\u6b65\u662f\u5411\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u670d\u52a1\u3002\u63a5\u4e0b\u6765\u5206\u4e24\u8282\u5185\u5bb9\u5bf9\u8fd9\u4e24\u6b65\u64cd\u4f5c\u8fdb\u884c\u5206\u6790\u3002","title":"2.2.4 \u670d\u52a1\u6ce8\u518c"},{"location":"source_code_guide/export-service/#2241","text":"\u672c\u8282\u5185\u5bb9\u4ee5 Zookeeper \u6ce8\u518c\u4e2d\u5fc3\u4e3a\u4f8b\u8fdb\u884c\u5206\u6790\u3002\u4e0b\u9762\u5148\u6765\u770b\u4e00\u4e0b getRegistry \u65b9\u6cd5\u7684\u6e90\u7801\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u7531 AbstractRegistryFactory \u5b9e\u73b0\u3002\u5982\u4e0b\uff1a public Registry getRegistry(URL url) { url = url.setPath(RegistryService.class.getName()) .addParameter(Constants.INTERFACE_KEY, RegistryService.class.getName()) .removeParameters(Constants.EXPORT_KEY, Constants.REFER_KEY); String key = url.toServiceString(); LOCK.lock(); try { // \u8bbf\u95ee\u7f13\u5b58 Registry registry = REGISTRIES.get(key); if (registry != null) { return registry; } // \u7f13\u5b58\u672a\u547d\u4e2d\uff0c\u521b\u5efa Registry \u5b9e\u4f8b registry = createRegistry(url); if (registry == null) { throw new IllegalStateException( Can not create registry... ); } // \u5199\u5165\u7f13\u5b58 REGISTRIES.put(key, registry); return registry; } finally { LOCK.unlock(); } } protected abstract Registry createRegistry(URL url); \u5982\u4e0a\uff0cgetRegistry \u65b9\u6cd5\u5148\u8bbf\u95ee\u7f13\u5b58\uff0c\u7f13\u5b58\u672a\u547d\u4e2d\u5219\u8c03\u7528 createRegistry \u521b\u5efa Registry\uff0c\u7136\u540e\u5199\u5165\u7f13\u5b58\u3002\u8fd9\u91cc\u7684 createRegistry \u662f\u4e00\u4e2a\u6a21\u677f\u65b9\u6cd5\uff0c\u7531\u5177\u4f53\u7684\u5b50\u7c7b\u5b9e\u73b0\u3002\u56e0\u6b64\uff0c\u4e0b\u9762\u6211\u4eec\u5230 ZookeeperRegistryFactory \u4e2d\u63a2\u7a76\u4e00\u756a\u3002 public class ZookeeperRegistryFactory extends AbstractRegistryFactory { // zookeeperTransporter \u7531 SPI \u5728\u8fd0\u884c\u65f6\u6ce8\u5165\uff0c\u7c7b\u578b\u4e3a ZookeeperTransporter$Adaptive private ZookeeperTransporter zookeeperTransporter; public void setZookeeperTransporter(ZookeeperTransporter zookeeperTransporter) { this.zookeeperTransporter = zookeeperTransporter; } @Override public Registry createRegistry(URL url) { // \u521b\u5efa ZookeeperRegistry return new ZookeeperRegistry(url, zookeeperTransporter); } } ZookeeperRegistryFactory \u7684 createRegistry \u65b9\u6cd5\u4ec5\u5305\u542b\u4e00\u53e5\u4ee3\u7801\uff0c\u65e0\u9700\u89e3\u91ca\uff0c\u7ee7\u7eed\u8ddf\u4e0b\u53bb\u3002 public ZookeeperRegistry(URL url, ZookeeperTransporter zookeeperTransporter) { super(url); if (url.isAnyHost()) { throw new IllegalStateException( registry address == null ); } // \u83b7\u53d6\u7ec4\u540d\uff0c\u9ed8\u8ba4\u4e3a dubbo String group = url.getParameter(Constants.GROUP_KEY, DEFAULT_ROOT); if (!group.startsWith(Constants.PATH_SEPARATOR)) { // group = / + group group = Constants.PATH_SEPARATOR + group; } this.root = group; // \u521b\u5efa Zookeeper \u5ba2\u6237\u7aef\uff0c\u9ed8\u8ba4\u4e3a CuratorZookeeperTransporter zkClient = zookeeperTransporter.connect(url); // \u6dfb\u52a0\u72b6\u6001\u76d1\u542c\u5668 zkClient.addStateListener(new StateListener() { @Override public void stateChanged(int state) { if (state == RECONNECTED) { try { recover(); } catch (Exception e) { logger.error(e.getMessage(), e); } } } }); } \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u91cd\u70b9\u5173\u6ce8 ZookeeperTransporter \u7684 connect \u65b9\u6cd5\u8c03\u7528\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u7528\u4e8e\u521b\u5efa Zookeeper \u5ba2\u6237\u7aef\u3002\u521b\u5efa\u597d Zookeeper \u5ba2\u6237\u7aef\uff0c\u610f\u5473\u7740\u6ce8\u518c\u4e2d\u5fc3\u7684\u521b\u5efa\u8fc7\u7a0b\u5c31\u7ed3\u675f\u4e86\u3002\u63a5\u4e0b\u6765\uff0c\u518d\u6765\u5206\u6790\u4e00\u4e0b Zookeeper \u5ba2\u6237\u7aef\u7684\u521b\u5efa\u8fc7\u7a0b\u3002 \u524d\u9762\u8bf4\u8fc7\uff0c\u8fd9\u91cc\u7684 zookeeperTransporter \u7c7b\u578b\u4e3a\u81ea\u9002\u5e94\u62d3\u5c55\u7c7b\uff0c\u56e0\u6b64 connect \u65b9\u6cd5\u4f1a\u5728\u88ab\u8c03\u7528\u65f6\u51b3\u5b9a\u52a0\u8f7d\u4ec0\u4e48\u7c7b\u578b\u7684 ZookeeperTransporter \u62d3\u5c55\uff0c\u9ed8\u8ba4\u4e3a CuratorZookeeperTransporter\u3002\u4e0b\u9762\u6211\u4eec\u5230 CuratorZookeeperTransporter \u4e2d\u770b\u4e00\u770b\u3002 public ZookeeperClient connect(URL url) { // \u521b\u5efa CuratorZookeeperClient return new CuratorZookeeperClient(url); } \u7ee7\u7eed\u5411\u4e0b\u770b\u3002 public class CuratorZookeeperClient extends AbstractZookeeperClient CuratorWatcher { private final CuratorFramework client; public CuratorZookeeperClient(URL url) { super(url); try { // \u521b\u5efa CuratorFramework \u6784\u9020\u5668 CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder() .connectString(url.getBackupAddress()) .retryPolicy(new RetryNTimes(1, 1000)) .connectionTimeoutMs(5000); String authority = url.getAuthority(); if (authority != null authority.length() 0) { builder = builder.authorization( digest , authority.getBytes()); } // \u6784\u5efa CuratorFramework \u5b9e\u4f8b client = builder.build(); // \u6dfb\u52a0\u76d1\u542c\u5668 client.getConnectionStateListenable().addListener(new ConnectionStateListener() { @Override public void stateChanged(CuratorFramework client, ConnectionState state) { if (state == ConnectionState.LOST) { CuratorZookeeperClient.this.stateChanged(StateListener.DISCONNECTED); } else if (state == ConnectionState.CONNECTED) { CuratorZookeeperClient.this.stateChanged(StateListener.CONNECTED); } else if (state == ConnectionState.RECONNECTED) { CuratorZookeeperClient.this.stateChanged(StateListener.RECONNECTED); } } }); // \u542f\u52a8\u5ba2\u6237\u7aef client.start(); } catch (Exception e) { throw new IllegalStateException(e.getMessage(), e); } } } CuratorZookeeperClient \u6784\u9020\u65b9\u6cd5\u4e3b\u8981\u7528\u4e8e\u521b\u5efa\u548c\u542f\u52a8 CuratorFramework \u5b9e\u4f8b\u3002\u4ee5\u4e0a\u57fa\u672c\u4e0a\u90fd\u662f Curator \u6846\u67b6\u7684\u4ee3\u7801\uff0c\u5927\u5bb6\u5982\u679c\u5bf9 Curator \u6846\u67b6\u4e0d\u662f\u5f88\u4e86\u89e3\uff0c\u53ef\u4ee5\u53c2\u8003 Curator \u5b98\u65b9\u6587\u6863\u3002 \u672c\u8282\u5206\u6790\u4e86 ZookeeperRegistry \u5b9e\u4f8b\u7684\u521b\u5efa\u8fc7\u7a0b\uff0c\u6574\u4e2a\u8fc7\u7a0b\u5e76\u4e0d\u662f\u5f88\u590d\u6742\u3002\u5927\u5bb6\u5728\u770b\u5b8c\u5206\u6790\u540e\uff0c\u53ef\u4ee5\u81ea\u884c\u8c03\u8bd5\uff0c\u4ee5\u52a0\u6df1\u7406\u89e3\u3002\u73b0\u5728\u6ce8\u518c\u4e2d\u5fc3\u5b9e\u4f8b\u521b\u5efa\u597d\u4e86\uff0c\u63a5\u4e0b\u6765\u8981\u505a\u7684\u4e8b\u60c5\u662f\u5411\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u670d\u52a1\uff0c\u6211\u4eec\u7ee7\u7eed\u5f80\u4e0b\u770b\u3002","title":"2.2.4.1 \u521b\u5efa\u6ce8\u518c\u4e2d\u5fc3"},{"location":"source_code_guide/export-service/#2242","text":"\u4ee5 Zookeeper \u4e3a\u4f8b\uff0c\u6240\u8c13\u7684\u670d\u52a1\u6ce8\u518c\uff0c\u672c\u8d28\u4e0a\u662f\u5c06\u670d\u52a1\u914d\u7f6e\u6570\u636e\u5199\u5165\u5230 Zookeeper \u7684\u67d0\u4e2a\u8def\u5f84\u7684\u8282\u70b9\u4e0b\u3002\u4e3a\u4e86\u8ba9\u5927\u5bb6\u6709\u4e00\u4e2a\u76f4\u89c2\u7684\u4e86\u89e3\uff0c\u4e0b\u9762\u6211\u4eec\u5c06 Dubbo \u7684 demo \u8dd1\u8d77\u6765\uff0c\u7136\u540e\u901a\u8fc7 Zookeeper \u53ef\u89c6\u5316\u5ba2\u6237\u7aef ZooInspector \u67e5\u770b\u8282\u70b9\u6570\u636e\u3002\u5982\u4e0b\uff1a \u4ece\u4e0a\u56fe\u4e2d\u53ef\u4ee5\u770b\u5230 com.alibaba.dubbo.demo.DemoService \u8fd9\u4e2a\u670d\u52a1\u5bf9\u5e94\u7684\u914d\u7f6e\u4fe1\u606f\uff08\u5b58\u50a8\u5728 URL \u4e2d\uff09\u6700\u7ec8\u88ab\u6ce8\u518c\u5230\u4e86 /dubbo/com.alibaba.dubbo.demo.DemoService/providers/ \u8282\u70b9\u4e0b\u3002\u641e\u61c2\u4e86\u670d\u52a1\u6ce8\u518c\u7684\u672c\u8d28\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u53ef\u4ee5\u53bb\u9605\u8bfb\u670d\u52a1\u6ce8\u518c\u7684\u4ee3\u7801\u4e86\u3002\u670d\u52a1\u6ce8\u518c\u7684\u63a5\u53e3\u4e3a register(URL)\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5b9a\u4e49\u5728 FailbackRegistry \u62bd\u8c61\u7c7b\u4e2d\u3002\u4ee3\u7801\u5982\u4e0b\uff1a public void register(URL url) { super.register(url); failedRegistered.remove(url); failedUnregistered.remove(url); try { // \u6a21\u677f\u65b9\u6cd5\uff0c\u7531\u5b50\u7c7b\u5b9e\u73b0 doRegister(url); } catch (Exception e) { Throwable t = e; // \u83b7\u53d6 check \u53c2\u6570\uff0c\u82e5 check = true \u5c06\u4f1a\u76f4\u63a5\u629b\u51fa\u5f02\u5e38 boolean check = getUrl().getParameter(Constants.CHECK_KEY, true) url.getParameter(Constants.CHECK_KEY, true) !Constants.CONSUMER_PROTOCOL.equals(url.getProtocol()); boolean skipFailback = t instanceof SkipFailbackWrapperException; if (check || skipFailback) { if (skipFailback) { t = t.getCause(); } throw new IllegalStateException( Failed to register ); } else { logger.error( Failed to register ); } // \u8bb0\u5f55\u6ce8\u518c\u5931\u8d25\u7684\u94fe\u63a5 failedRegistered.add(url); } } protected abstract void doRegister(URL url); \u5982\u4e0a\uff0c\u6211\u4eec\u91cd\u70b9\u5173\u6ce8 doRegister \u65b9\u6cd5\u8c03\u7528\u5373\u53ef\uff0c\u5176\u4ed6\u7684\u4ee3\u7801\u5148\u5ffd\u7565\u3002doRegister \u65b9\u6cd5\u662f\u4e00\u4e2a\u6a21\u677f\u65b9\u6cd5\uff0c\u56e0\u6b64\u6211\u4eec\u5230 FailbackRegistry \u5b50\u7c7b ZookeeperRegistry \u4e2d\u8fdb\u884c\u5206\u6790\u3002\u5982\u4e0b\uff1a protected void doRegister(URL url) { try { // \u901a\u8fc7 Zookeeper \u5ba2\u6237\u7aef\u521b\u5efa\u8282\u70b9\uff0c\u8282\u70b9\u8def\u5f84\u7531 toUrlPath \u65b9\u6cd5\u751f\u6210\uff0c\u8def\u5f84\u683c\u5f0f\u5982\u4e0b: // /${group}/${serviceInterface}/providers/${url} // \u6bd4\u5982 // /dubbo/org.apache.dubbo.DemoService/providers/dubbo%3A%2F%2F127.0.0.1...... zkClient.create(toUrlPath(url), url.getParameter(Constants.DYNAMIC_KEY, true)); } catch (Throwable e) { throw new RpcException( Failed to register... ); } } \u5982\u4e0a\uff0cZookeeperRegistry \u5728 doRegister \u4e2d\u8c03\u7528\u4e86 Zookeeper \u5ba2\u6237\u7aef\u521b\u5efa\u670d\u52a1\u8282\u70b9\u3002\u8282\u70b9\u8def\u5f84\u7531 toUrlPath \u65b9\u6cd5\u751f\u6210\uff0c\u8be5\u65b9\u6cd5\u903b\u8f91\u4e0d\u96be\u7406\u89e3\uff0c\u5c31\u4e0d\u5206\u6790\u4e86\u3002\u63a5\u4e0b\u6765\u5206\u6790 create \u65b9\u6cd5\uff0c\u5982\u4e0b\uff1a public void create(String path, boolean ephemeral) { if (!ephemeral) { // \u5982\u679c\u8981\u521b\u5efa\u7684\u8282\u70b9\u7c7b\u578b\u975e\u4e34\u65f6\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u91cc\u8981\u68c0\u6d4b\u8282\u70b9\u662f\u5426\u5b58\u5728 if (checkExists(path)) { return; } } int i = path.lastIndexOf('/'); if (i 0) { // \u9012\u5f52\u521b\u5efa\u4e0a\u4e00\u7ea7\u8def\u5f84 create(path.substring(0, i), false); } // \u6839\u636e ephemeral \u7684\u503c\u521b\u5efa\u4e34\u65f6\u6216\u6301\u4e45\u8282\u70b9 if (ephemeral) { createEphemeral(path); } else { createPersistent(path); } } \u4e0a\u9762\u65b9\u6cd5\u5148\u662f\u901a\u8fc7\u9012\u5f52\u521b\u5efa\u5f53\u524d\u8282\u70b9\u7684\u4e0a\u4e00\u7ea7\u8def\u5f84\uff0c\u7136\u540e\u518d\u6839\u636e ephemeral \u7684\u503c\u51b3\u5b9a\u521b\u5efa\u4e34\u65f6\u8fd8\u662f\u6301\u4e45\u8282\u70b9\u3002createEphemeral \u548c createPersistent \u8fd9\u4e24\u4e2a\u65b9\u6cd5\u90fd\u6bd4\u8f83\u7b80\u5355\uff0c\u8fd9\u91cc\u7b80\u5355\u5206\u6790\u5176\u4e2d\u7684\u4e00\u4e2a\u3002\u5982\u4e0b\uff1a public void createEphemeral(String path) { try { // \u901a\u8fc7 Curator \u6846\u67b6\u521b\u5efa\u8282\u70b9 client.create().withMode(CreateMode.EPHEMERAL).forPath(path); } catch (NodeExistsException e) { } catch (Exception e) { throw new IllegalStateException(e.getMessage(), e); } } \u597d\u4e86\uff0c\u5230\u6b64\u5173\u4e8e\u670d\u52a1\u6ce8\u518c\u7684\u8fc7\u7a0b\u5c31\u5206\u6790\u5b8c\u4e86\u3002\u6574\u4e2a\u8fc7\u7a0b\u53ef\u7b80\u5355\u603b\u7ed3\u4e3a\uff1a\u5148\u521b\u5efa\u6ce8\u518c\u4e2d\u5fc3\u5b9e\u4f8b\uff0c\u4e4b\u540e\u518d\u901a\u8fc7\u6ce8\u518c\u4e2d\u5fc3\u5b9e\u4f8b\u6ce8\u518c\u670d\u52a1\u3002\u672c\u8282\u5148\u5230\u8fd9\uff0c\u63a5\u4e0b\u6765\u5206\u6790\u6570\u636e\u8ba2\u9605\u8fc7\u7a0b\u3002","title":"2.2.4.2 \u8282\u70b9\u521b\u5efa"},{"location":"source_code_guide/export-service/#225-override","text":"// \u5f85\u8865\u5145","title":"2.2.5 \u8ba2\u9605 override \u6570\u636e"},{"location":"source_code_guide/export-service/#3","text":"\u672c\u7bc7\u6587\u7ae0\u8be6\u7ec6\u5206\u6790\u4e86 Dubbo \u670d\u52a1\u5bfc\u51fa\u8fc7\u7a0b\uff0c\u5305\u62ec\u914d\u7f6e\u68c0\u6d4b\uff0cURL \u7ec4\u88c5\uff0cInvoker \u521b\u5efa\u8fc7\u7a0b\u3001\u5bfc\u51fa\u670d\u52a1\u4ee5\u53ca\u6ce8\u518c\u670d\u52a1\u7b49\u7b49\u3002\u7bc7\u5e45\u6bd4\u8f83\u5927\uff0c\u9700\u8981\u5927\u5bb6\u8010\u5fc3\u9605\u8bfb\u3002\u672c\u7bc7\u6587\u7ae0\u5148\u5c31\u5230\u8fd9\uff0c\u5982\u679c\u6587\u7ae0\u6709\u4e0d\u59a5\u9519\u8bef\u4e4b\u5904\uff0c\u5e0c\u671b\u5927\u5bb6\u80fd\u591f\u8fdb\u884c\u53cd\u9988\u6216\u4fee\u6b63\u3002","title":"3.\u603b\u7ed3"},{"location":"source_code_guide/loadbalance/","text":"1.\u7b80\u4ecb LoadBalance \u4e2d\u6587\u610f\u601d\u4e3a\u8d1f\u8f7d\u5747\u8861\uff0c\u5b83\u7684\u804c\u8d23\u662f\u5c06\u7f51\u7edc\u8bf7\u6c42\uff0c\u6216\u8005\u5176\u4ed6\u5f62\u5f0f\u7684\u8d1f\u8f7d\u201c\u5747\u644a\u201d\u5230\u4e0d\u540c\u7684\u673a\u5668\u4e0a\u3002\u907f\u514d\u96c6\u7fa4\u4e2d\u90e8\u5206\u670d\u52a1\u5668\u538b\u529b\u8fc7\u5927\uff0c\u800c\u53e6\u4e00\u4e9b\u670d\u52a1\u5668\u6bd4\u8f83\u7a7a\u95f2\u7684\u60c5\u51b5\u3002\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\uff0c\u53ef\u4ee5\u8ba9\u6bcf\u53f0\u670d\u52a1\u5668\u83b7\u53d6\u5230\u9002\u5408\u81ea\u5df1\u5904\u7406\u80fd\u529b\u7684\u8d1f\u8f7d\u3002\u5728\u4e3a\u9ad8\u8d1f\u8f7d\u670d\u52a1\u5668\u5206\u6d41\u7684\u540c\u65f6\uff0c\u8fd8\u53ef\u4ee5\u907f\u514d\u8d44\u6e90\u6d6a\u8d39\uff0c\u4e00\u4e3e\u4e24\u5f97\u3002\u8d1f\u8f7d\u5747\u8861\u53ef\u5206\u4e3a\u8f6f\u4ef6\u8d1f\u8f7d\u5747\u8861\u548c\u786c\u4ef6\u8d1f\u8f7d\u5747\u8861\u3002\u5728\u6211\u4eec\u65e5\u5e38\u5f00\u53d1\u4e2d\uff0c\u4e00\u822c\u5f88\u96be\u63a5\u89e6\u5230\u786c\u4ef6\u8d1f\u8f7d\u5747\u8861\u3002\u4f46\u8f6f\u4ef6\u8d1f\u8f7d\u5747\u8861\u8fd8\u662f\u53ef\u4ee5\u63a5\u89e6\u5230\u7684\uff0c\u6bd4\u5982 Nginx\u3002\u5728 Dubbo \u4e2d\uff0c\u4e5f\u6709\u8d1f\u8f7d\u5747\u8861\u7684\u6982\u5ff5\u548c\u76f8\u5e94\u7684\u5b9e\u73b0\u3002Dubbo \u9700\u8981\u5bf9\u670d\u52a1\u6d88\u8d39\u8005\u7684\u8c03\u7528\u8bf7\u6c42\u8fdb\u884c\u5206\u914d\uff0c\u907f\u514d\u5c11\u6570\u670d\u52a1\u63d0\u4f9b\u8005\u8d1f\u8f7d\u8fc7\u5927\u3002\u670d\u52a1\u63d0\u4f9b\u8005\u8d1f\u8f7d\u8fc7\u5927\uff0c\u4f1a\u5bfc\u81f4\u90e8\u5206\u8bf7\u6c42\u8d85\u65f6\u3002\u56e0\u6b64\u5c06\u8d1f\u8f7d\u5747\u8861\u5230\u6bcf\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u4e0a\uff0c\u662f\u975e\u5e38\u5fc5\u8981\u7684\u3002Dubbo \u63d0\u4f9b\u4e864\u79cd\u8d1f\u8f7d\u5747\u8861\u5b9e\u73b0\uff0c\u5206\u522b\u662f\u57fa\u4e8e\u6743\u91cd\u968f\u673a\u7b97\u6cd5\u7684 RandomLoadBalance\u3001\u57fa\u4e8e\u6700\u5c11\u6d3b\u8dc3\u8c03\u7528\u6570\u7b97\u6cd5\u7684 LeastActiveLoadBalance\u3001\u57fa\u4e8e hash \u4e00\u81f4\u6027\u7684 ConsistentHashLoadBalance\uff0c\u4ee5\u53ca\u57fa\u4e8e\u52a0\u6743\u8f6e\u8be2\u7b97\u6cd5\u7684 RoundRobinLoadBalance\u3002\u8fd9\u51e0\u4e2a\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\u4ee3\u7801\u4e0d\u662f\u5f88\u957f\uff0c\u4f46\u662f\u60f3\u770b\u61c2\u4e5f\u4e0d\u662f\u5f88\u5bb9\u6613\uff0c\u9700\u8981\u5927\u5bb6\u5bf9\u8fd9\u51e0\u4e2a\u7b97\u6cd5\u7684\u539f\u7406\u6709\u4e00\u5b9a\u4e86\u89e3\u624d\u884c\u3002\u5982\u679c\u4e0d\u662f\u5f88\u4e86\u89e3\uff0c\u4e5f\u6ca1\u4e0d\u7528\u592a\u62c5\u5fc3\u3002\u6211\u4eec\u4f1a\u5728\u5206\u6790\u6bcf\u4e2a\u7b97\u6cd5\u7684\u6e90\u7801\u4e4b\u524d\uff0c\u5bf9\u7b97\u6cd5\u539f\u7406\u8fdb\u884c\u7b80\u5355\u7684\u8bb2\u89e3\uff0c\u5e2e\u52a9\u5927\u5bb6\u5efa\u7acb\u521d\u6b65\u7684\u5370\u8c61\u3002 \u672c\u7cfb\u5217\u6587\u7ae0\u5728\u7f16\u5199\u4e4b\u521d\u662f\u57fa\u4e8e Dubbo 2.6.4 \u7684\uff0c\u8fd1\u671f\uff0cDubbo 2.6.5 \u53d1\u5e03\u4e86\uff0c\u5176\u4e2d\u5c31\u6709\u9488\u5bf9\u5bf9\u8d1f\u8f7d\u5747\u8861\u90e8\u5206\u7684\u4f18\u5316\u3002\u56e0\u6b64\u6211\u4eec\u5728\u5206\u6790\u5b8c 2.6.4 \u7248\u672c\u540e\u7684\u6e90\u7801\u540e\uff0c\u4f1a\u53e6\u5916\u5206\u6790 2.6.5 \u66f4\u65b0\u7684\u90e8\u5206\u3002\u5176\u4ed6\u7684\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u8fdb\u5165\u6b63\u9898\u5427\u3002 2.\u6e90\u7801\u5206\u6790 \u5728 Dubbo \u4e2d\uff0c\u6240\u6709\u8d1f\u8f7d\u5747\u8861\u5b9e\u73b0\u7c7b\u5747\u7ee7\u627f\u81ea AbstractLoadBalance\uff0c\u8be5\u7c7b\u5b9e\u73b0\u4e86 LoadBalance \u63a5\u53e3\uff0c\u5e76\u5c01\u88c5\u4e86\u4e00\u4e9b\u516c\u5171\u7684\u903b\u8f91\u3002\u6240\u4ee5\u5728\u5206\u6790\u8d1f\u8f7d\u5747\u8861\u5b9e\u73b0\u4e4b\u524d\uff0c\u5148\u6765\u770b\u4e00\u4e0b AbstractLoadBalance \u7684\u903b\u8f91\u3002\u9996\u5148\u6765\u770b\u4e00\u4e0b\u8d1f\u8f7d\u5747\u8861\u7684\u5165\u53e3\u65b9\u6cd5 select\uff0c\u5982\u4e0b\uff1a @Override public T Invoker T select(List Invoker T invokers, URL url, Invocation invocation) { if (invokers == null || invokers.isEmpty()) return null; // \u5982\u679c invokers \u5217\u8868\u4e2d\u4ec5\u6709\u4e00\u4e2a Invoker\uff0c\u76f4\u63a5\u8fd4\u56de\u5373\u53ef\uff0c\u65e0\u9700\u8fdb\u884c\u8d1f\u8f7d\u5747\u8861 if (invokers.size() == 1) return invokers.get(0); // \u8c03\u7528 doSelect \u65b9\u6cd5\u8fdb\u884c\u8d1f\u8f7d\u5747\u8861\uff0c\u8be5\u65b9\u6cd5\u4e3a\u62bd\u8c61\u65b9\u6cd5\uff0c\u7531\u5b50\u7c7b\u5b9e\u73b0 return doSelect(invokers, url, invocation); } protected abstract T Invoker T doSelect(List Invoker T invokers, URL url, Invocation invocation); select \u65b9\u6cd5\u7684\u903b\u8f91\u6bd4\u8f83\u7b80\u5355\uff0c\u9996\u5148\u4f1a\u68c0\u6d4b invokers \u96c6\u5408\u7684\u5408\u6cd5\u6027\uff0c\u7136\u540e\u518d\u68c0\u6d4b invokers \u96c6\u5408\u5143\u7d20\u6570\u91cf\u3002\u5982\u679c\u53ea\u5305\u542b\u4e00\u4e2a Invoker\uff0c\u76f4\u63a5\u8fd4\u56de\u8be5 Inovker \u5373\u53ef\u3002\u5982\u679c\u5305\u542b\u591a\u4e2a Invoker\uff0c\u6b64\u65f6\u9700\u8981\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\u9009\u62e9\u4e00\u4e2a Invoker\u3002\u5177\u4f53\u7684\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\u7531\u5b50\u7c7b\u5b9e\u73b0\uff0c\u63a5\u4e0b\u6765\u7ae0\u8282\u4f1a\u5bf9\u8fd9\u4e9b\u5b50\u7c7b\u4e00\u4e00\u8fdb\u884c\u8be6\u7ec6\u5206\u6790\u3002 AbstractLoadBalance \u9664\u4e86\u5b9e\u73b0\u4e86 LoadBalance \u63a5\u53e3\u65b9\u6cd5\uff0c\u8fd8\u5c01\u88c5\u4e86\u4e00\u4e9b\u516c\u5171\u903b\u8f91\uff0c\u6bd4\u5982\u670d\u52a1\u63d0\u4f9b\u8005\u6743\u91cd\u8ba1\u7b97\u903b\u8f91\u3002\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\uff1a protected int getWeight(Invoker ? invoker, Invocation invocation) { // \u4ece url \u4e2d\u83b7\u53d6\u6743\u91cd weight \u914d\u7f6e\u503c int weight = invoker.getUrl().getMethodParameter(invocation.getMethodName(), Constants.WEIGHT_KEY, Constants.DEFAULT_WEIGHT); if (weight 0) { // \u83b7\u53d6\u670d\u52a1\u63d0\u4f9b\u8005\u542f\u52a8\u65f6\u95f4\u6233 long timestamp = invoker.getUrl().getParameter(Constants.REMOTE_TIMESTAMP_KEY, 0L); if (timestamp 0L) { // \u8ba1\u7b97\u670d\u52a1\u63d0\u4f9b\u8005\u8fd0\u884c\u65f6\u957f int uptime = (int) (System.currentTimeMillis() - timestamp); // \u83b7\u53d6\u670d\u52a1\u9884\u70ed\u65f6\u95f4\uff0c\u9ed8\u8ba4\u4e3a10\u5206\u949f int warmup = invoker.getUrl().getParameter(Constants.WARMUP_KEY, Constants.DEFAULT_WARMUP); // \u5982\u679c\u670d\u52a1\u8fd0\u884c\u65f6\u95f4\u5c0f\u4e8e\u9884\u70ed\u65f6\u95f4\uff0c\u5219\u91cd\u65b0\u8ba1\u7b97\u670d\u52a1\u6743\u91cd\uff0c\u5373\u964d\u6743 if (uptime 0 uptime warmup) { // \u91cd\u65b0\u8ba1\u7b97\u670d\u52a1\u6743\u91cd weight = calculateWarmupWeight(uptime, warmup, weight); } } } return weight; } static int calculateWarmupWeight(int uptime, int warmup, int weight) { // \u8ba1\u7b97\u6743\u91cd\uff0c\u4e0b\u9762\u4ee3\u7801\u903b\u8f91\u4e0a\u5f62\u4f3c\u4e8e (uptime / warmup) * weight\u3002 // \u968f\u7740\u670d\u52a1\u8fd0\u884c\u65f6\u95f4 uptime \u589e\u5927\uff0c\u6743\u91cd\u8ba1\u7b97\u503c ww \u4f1a\u6162\u6162\u63a5\u8fd1\u914d\u7f6e\u503c weight int ww = (int) ((float) uptime / ((float) warmup / (float) weight)); return ww 1 ? 1 : (ww weight ? weight : ww); } \u4e0a\u9762\u662f\u6743\u91cd\u7684\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u8be5\u8fc7\u7a0b\u4e3b\u8981\u7528\u4e8e\u4fdd\u8bc1\u5f53\u670d\u52a1\u8fd0\u884c\u65f6\u957f\u5c0f\u4e8e\u670d\u52a1\u9884\u70ed\u65f6\u95f4\u65f6\uff0c\u5bf9\u670d\u52a1\u8fdb\u884c\u964d\u6743\uff0c\u907f\u514d\u8ba9\u670d\u52a1\u5728\u542f\u52a8\u4e4b\u521d\u5c31\u5904\u4e8e\u9ad8\u8d1f\u8f7d\u72b6\u6001\u3002\u670d\u52a1\u9884\u70ed\u662f\u4e00\u4e2a\u4f18\u5316\u624b\u6bb5\uff0c\u4e0e\u6b64\u7c7b\u4f3c\u7684\u8fd8\u6709 JVM \u9884\u70ed\u3002\u4e3b\u8981\u76ee\u7684\u662f\u8ba9\u670d\u52a1\u542f\u52a8\u540e\u201c\u4f4e\u529f\u7387\u201d\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\uff0c\u4f7f\u5176\u6548\u7387\u6162\u6162\u63d0\u5347\u81f3\u6700\u4f73\u72b6\u6001\u3002 \u5173\u4e8e AbstractLoadBalance \u5c31\u5148\u5206\u6790\u5230\u8fd9\uff0c\u63a5\u4e0b\u6765\u5206\u6790\u5404\u4e2a\u5b9e\u73b0\u7c7b\u7684\u4ee3\u7801\u3002\u9996\u5148\uff0c\u6211\u4eec\u4ece Dubbo \u7f3a\u7701\u7684\u5b9e\u73b0\u7c7b RandomLoadBalance \u770b\u8d77\u3002 2.1 RandomLoadBalance RandomLoadBalance \u662f\u52a0\u6743\u968f\u673a\u7b97\u6cd5\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u5b83\u7684\u7b97\u6cd5\u601d\u60f3\u5f88\u7b80\u5355\u3002\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u7ec4\u670d\u52a1\u5668 servers = [A, B, C]\uff0c\u4ed6\u4eec\u5bf9\u5e94\u7684\u6743\u91cd\u4e3a weights = [5, 3, 2]\uff0c\u6743\u91cd\u603b\u548c\u4e3a10\u3002\u73b0\u5728\u628a\u8fd9\u4e9b\u6743\u91cd\u503c\u5e73\u94fa\u5728\u4e00\u7ef4\u5750\u6807\u503c\u4e0a\uff0c[0, 5) \u533a\u95f4\u5c5e\u4e8e\u670d\u52a1\u5668 A\uff0c[5, 8) \u533a\u95f4\u5c5e\u4e8e\u670d\u52a1\u5668 B\uff0c[8, 10) \u533a\u95f4\u5c5e\u4e8e\u670d\u52a1\u5668 C\u3002\u63a5\u4e0b\u6765\u901a\u8fc7\u968f\u673a\u6570\u751f\u6210\u5668\u751f\u6210\u4e00\u4e2a\u8303\u56f4\u5728 [0, 10) \u4e4b\u95f4\u7684\u968f\u673a\u6570\uff0c\u7136\u540e\u8ba1\u7b97\u8fd9\u4e2a\u968f\u673a\u6570\u4f1a\u843d\u5230\u54ea\u4e2a\u533a\u95f4\u4e0a\u3002\u6bd4\u5982\u6570\u5b573\u4f1a\u843d\u5230\u670d\u52a1\u5668 A \u5bf9\u5e94\u7684\u533a\u95f4\u4e0a\uff0c\u6b64\u65f6\u8fd4\u56de\u670d\u52a1\u5668 A \u5373\u53ef\u3002\u6743\u91cd\u8d8a\u5927\u7684\u673a\u5668\uff0c\u5728\u5750\u6807\u8f74\u4e0a\u5bf9\u5e94\u7684\u533a\u95f4\u8303\u56f4\u5c31\u8d8a\u5927\uff0c\u56e0\u6b64\u968f\u673a\u6570\u751f\u6210\u5668\u751f\u6210\u7684\u6570\u5b57\u5c31\u4f1a\u6709\u66f4\u5927\u7684\u6982\u7387\u843d\u5230\u6b64\u533a\u95f4\u5185\u3002\u53ea\u8981\u968f\u673a\u6570\u751f\u6210\u5668\u4ea7\u751f\u7684\u968f\u673a\u6570\u5206\u5e03\u6027\u5f88\u597d\uff0c\u5728\u7ecf\u8fc7\u591a\u6b21\u9009\u62e9\u540e\uff0c\u6bcf\u4e2a\u670d\u52a1\u5668\u88ab\u9009\u4e2d\u7684\u6b21\u6570\u6bd4\u4f8b\u63a5\u8fd1\u5176\u6743\u91cd\u6bd4\u4f8b\u3002\u6bd4\u5982\uff0c\u7ecf\u8fc7\u4e00\u4e07\u6b21\u9009\u62e9\u540e\uff0c\u670d\u52a1\u5668 A \u88ab\u9009\u4e2d\u7684\u6b21\u6570\u5927\u7ea6\u4e3a5000\u6b21\uff0c\u670d\u52a1\u5668 B \u88ab\u9009\u4e2d\u7684\u6b21\u6570\u7ea6\u4e3a3000\u6b21\uff0c\u670d\u52a1\u5668 C \u88ab\u9009\u4e2d\u7684\u6b21\u6570\u7ea6\u4e3a2000\u6b21\u3002 \u4ee5\u4e0a\u5c31\u662f RandomLoadBalance \u80cc\u540e\u7684\u7b97\u6cd5\u601d\u60f3\uff0c\u6bd4\u8f83\u7b80\u5355\u3002\u4e0b\u9762\u5f00\u59cb\u5206\u6790\u6e90\u7801\u3002 public class RandomLoadBalance extends AbstractLoadBalance { public static final String NAME = random ; private final Random random = new Random(); @Override protected T Invoker T doSelect(List Invoker T invokers, URL url, Invocation invocation) { int length = invokers.size(); int totalWeight = 0; boolean sameWeight = true; // \u4e0b\u9762\u8fd9\u4e2a\u5faa\u73af\u6709\u4e24\u4e2a\u4f5c\u7528\uff0c\u7b2c\u4e00\u662f\u8ba1\u7b97\u603b\u6743\u91cd totalWeight\uff0c // \u7b2c\u4e8c\u662f\u68c0\u6d4b\u6bcf\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u6743\u91cd\u662f\u5426\u76f8\u540c for (int i = 0; i length; i++) { int weight = getWeight(invokers.get(i), invocation); // \u7d2f\u52a0\u6743\u91cd totalWeight += weight; // \u68c0\u6d4b\u5f53\u524d\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u6743\u91cd\u4e0e\u4e0a\u4e00\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u6743\u91cd\u662f\u5426\u76f8\u540c\uff0c // \u4e0d\u76f8\u540c\u7684\u8bdd\uff0c\u5219\u5c06 sameWeight \u7f6e\u4e3a false\u3002 if (sameWeight i 0 weight != getWeight(invokers.get(i - 1), invocation)) { sameWeight = false; } } // \u4e0b\u9762\u7684 if \u5206\u652f\u4e3b\u8981\u7528\u4e8e\u83b7\u53d6\u968f\u673a\u6570\uff0c\u5e76\u8ba1\u7b97\u968f\u673a\u6570\u843d\u5728\u54ea\u4e2a\u533a\u95f4\u4e0a if (totalWeight 0 !sameWeight) { // \u968f\u673a\u83b7\u53d6\u4e00\u4e2a [0, totalWeight) \u533a\u95f4\u5185\u7684\u6570\u5b57 int offset = random.nextInt(totalWeight); // \u5faa\u73af\u8ba9 offset \u6570\u51cf\u53bb\u670d\u52a1\u63d0\u4f9b\u8005\u6743\u91cd\u503c\uff0c\u5f53 offset \u5c0f\u4e8e0\u65f6\uff0c\u8fd4\u56de\u76f8\u5e94\u7684 Invoker\u3002 // \u4e3e\u4f8b\u8bf4\u660e\u4e00\u4e0b\uff0c\u6211\u4eec\u6709 servers = [A, B, C]\uff0cweights = [5, 3, 2]\uff0coffset = 7\u3002 // \u7b2c\u4e00\u6b21\u5faa\u73af\uff0coffset - 5 = 2 0\uff0c\u5373 offset 5\uff0c // \u8868\u660e\u5176\u4e0d\u4f1a\u843d\u5728\u670d\u52a1\u5668 A \u5bf9\u5e94\u7684\u533a\u95f4\u4e0a\u3002 // \u7b2c\u4e8c\u6b21\u5faa\u73af\uff0coffset - 3 = -1 0\uff0c\u5373 5 offset 8\uff0c // \u8868\u660e\u5176\u4f1a\u843d\u5728\u670d\u52a1\u5668 B \u5bf9\u5e94\u7684\u533a\u95f4\u4e0a for (int i = 0; i length; i++) { // \u8ba9\u968f\u673a\u503c offset \u51cf\u53bb\u6743\u91cd\u503c offset -= getWeight(invokers.get(i), invocation); if (offset 0) { // \u8fd4\u56de\u76f8\u5e94\u7684 Invoker return invokers.get(i); } } } // \u5982\u679c\u6240\u6709\u670d\u52a1\u63d0\u4f9b\u8005\u6743\u91cd\u503c\u76f8\u540c\uff0c\u6b64\u65f6\u76f4\u63a5\u968f\u673a\u8fd4\u56de\u4e00\u4e2a\u5373\u53ef return invokers.get(random.nextInt(length)); } } RandomLoadBalance \u7684\u7b97\u6cd5\u601d\u60f3\u6bd4\u8f83\u7b80\u5355\uff0c\u5728\u7ecf\u8fc7\u591a\u6b21\u8bf7\u6c42\u540e\uff0c\u80fd\u591f\u5c06\u8c03\u7528\u8bf7\u6c42\u6309\u7167\u6743\u91cd\u503c\u8fdb\u884c\u201c\u5747\u5300\u201d\u5206\u914d\u3002\u5f53\u7136 RandomLoadBalance \u4e5f\u5b58\u5728\u4e00\u5b9a\u7684\u7f3a\u70b9\uff0c\u5f53\u8c03\u7528\u6b21\u6570\u6bd4\u8f83\u5c11\u65f6\uff0cRandom \u4ea7\u751f\u7684\u968f\u673a\u6570\u53ef\u80fd\u4f1a\u6bd4\u8f83\u96c6\u4e2d\uff0c\u6b64\u65f6\u591a\u6570\u8bf7\u6c42\u4f1a\u843d\u5230\u540c\u4e00\u53f0\u670d\u52a1\u5668\u4e0a\u3002\u8fd9\u4e2a\u7f3a\u70b9\u5e76\u4e0d\u662f\u5f88\u4e25\u91cd\uff0c\u591a\u6570\u60c5\u51b5\u4e0b\u53ef\u4ee5\u5ffd\u7565\u3002RandomLoadBalance \u662f\u4e00\u4e2a\u7b80\u5355\uff0c\u9ad8\u6548\u7684\u8d1f\u8f7d\u5747\u8861\u5b9e\u73b0\uff0c\u56e0\u6b64 Dubbo \u9009\u62e9\u5b83\u4f5c\u4e3a\u7f3a\u7701\u5b9e\u73b0\u3002 \u5173\u4e8e RandomLoadBalance \u5c31\u5148\u5230\u8fd9\u4e86\uff0c\u63a5\u4e0b\u6765\u5206\u6790 LeastActiveLoadBalance\u3002 2.2 LeastActiveLoadBalance LeastActiveLoadBalance \u7ffb\u8bd1\u8fc7\u6765\u662f\u6700\u5c0f\u6d3b\u8dc3\u6570\u8d1f\u8f7d\u5747\u8861\u3002\u6d3b\u8dc3\u8c03\u7528\u6570\u8d8a\u5c0f\uff0c\u8868\u660e\u8be5\u670d\u52a1\u63d0\u4f9b\u8005\u6548\u7387\u8d8a\u9ad8\uff0c\u5355\u4f4d\u65f6\u95f4\u5185\u53ef\u5904\u7406\u66f4\u591a\u7684\u8bf7\u6c42\u3002\u6b64\u65f6\u5e94\u4f18\u5148\u5c06\u8bf7\u6c42\u5206\u914d\u7ed9\u8be5\u670d\u52a1\u63d0\u4f9b\u8005\u3002\u5728\u5177\u4f53\u5b9e\u73b0\u4e2d\uff0c\u6bcf\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u5bf9\u5e94\u4e00\u4e2a\u6d3b\u8dc3\u6570 active\u3002\u521d\u59cb\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u670d\u52a1\u63d0\u4f9b\u8005\u6d3b\u8dc3\u6570\u5747\u4e3a0\u3002\u6bcf\u6536\u5230\u4e00\u4e2a\u8bf7\u6c42\uff0c\u6d3b\u8dc3\u6570\u52a01\uff0c\u5b8c\u6210\u8bf7\u6c42\u540e\u5219\u5c06\u6d3b\u8dc3\u6570\u51cf1\u3002\u5728\u670d\u52a1\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u6027\u80fd\u597d\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u5904\u7406\u8bf7\u6c42\u7684\u901f\u5ea6\u66f4\u5feb\uff0c\u56e0\u6b64\u6d3b\u8dc3\u6570\u4e0b\u964d\u7684\u4e5f\u8d8a\u5feb\uff0c\u6b64\u65f6\u8fd9\u6837\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u80fd\u591f\u4f18\u5148\u83b7\u53d6\u5230\u65b0\u7684\u670d\u52a1\u8bf7\u6c42\u3001\u8fd9\u5c31\u662f\u6700\u5c0f\u6d3b\u8dc3\u6570\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u3002\u9664\u4e86\u6700\u5c0f\u6d3b\u8dc3\u6570\uff0cLeastActiveLoadBalance \u5728\u5b9e\u73b0\u4e0a\u8fd8\u5f15\u5165\u4e86\u6743\u91cd\u503c\u3002\u6240\u4ee5\u51c6\u786e\u7684\u6765\u8bf4\uff0cLeastActiveLoadBalance \u662f\u57fa\u4e8e\u52a0\u6743\u6700\u5c0f\u6d3b\u8dc3\u6570\u7b97\u6cd5\u5b9e\u73b0\u7684\u3002\u4e3e\u4e2a\u4f8b\u5b50\u8bf4\u660e\u4e00\u4e0b\uff0c\u5728\u4e00\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u96c6\u7fa4\u4e2d\uff0c\u6709\u4e24\u4e2a\u6027\u80fd\u4f18\u5f02\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u3002\u67d0\u4e00\u65f6\u523b\u5b83\u4eec\u7684\u6d3b\u8dc3\u6570\u76f8\u540c\uff0c\u6b64\u65f6 Dubbo \u4f1a\u6839\u636e\u5b83\u4eec\u7684\u6743\u91cd\u53bb\u5206\u914d\u8bf7\u6c42\uff0c\u6743\u91cd\u8d8a\u5927\uff0c\u83b7\u53d6\u5230\u65b0\u8bf7\u6c42\u7684\u6982\u7387\u5c31\u8d8a\u5927\u3002\u5982\u679c\u4e24\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u6743\u91cd\u76f8\u540c\uff0c\u6b64\u65f6\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u5373\u53ef\u3002\u5173\u4e8e LeastActiveLoadBalance \u7684\u80cc\u666f\u77e5\u8bc6\u5c31\u5148\u4ecb\u7ecd\u5230\u8fd9\u91cc\uff0c\u4e0b\u9762\u5f00\u59cb\u5206\u6790\u6e90\u7801\u3002 public class LeastActiveLoadBalance extends AbstractLoadBalance { public static final String NAME = leastactive ; private final Random random = new Random(); @Override protected T Invoker T doSelect(List Invoker T invokers, URL url, Invocation invocation) { int length = invokers.size(); // \u6700\u5c0f\u7684\u6d3b\u8dc3\u6570 int leastActive = -1; // \u5177\u6709\u76f8\u540c\u201c\u6700\u5c0f\u6d3b\u8dc3\u6570\u201d\u7684\u670d\u52a1\u8005\u63d0\u4f9b\u8005\uff08\u4ee5\u4e0b\u7528 Invoker \u4ee3\u79f0\uff09\u6570\u91cf int leastCount = 0; // leastIndexs \u7528\u4e8e\u8bb0\u5f55\u5177\u6709\u76f8\u540c\u201c\u6700\u5c0f\u6d3b\u8dc3\u6570\u201d\u7684 Invoker \u5728 invokers \u5217\u8868\u4e2d\u7684\u4e0b\u6807\u4fe1\u606f int[] leastIndexs = new int[length]; int totalWeight = 0; // \u7b2c\u4e00\u4e2a\u6700\u5c0f\u6d3b\u8dc3\u6570\u7684 Invoker \u6743\u91cd\u503c\uff0c\u7528\u4e8e\u4e0e\u5176\u4ed6\u5177\u6709\u76f8\u540c\u6700\u5c0f\u6d3b\u8dc3\u6570\u7684 Invoker \u7684\u6743\u91cd\u8fdb\u884c\u5bf9\u6bd4\uff0c // \u4ee5\u68c0\u6d4b\u662f\u5426\u201c\u6240\u6709\u5177\u6709\u76f8\u540c\u6700\u5c0f\u6d3b\u8dc3\u6570\u7684 Invoker \u7684\u6743\u91cd\u201d\u5747\u76f8\u7b49 int firstWeight = 0; boolean sameWeight = true; // \u904d\u5386 invokers \u5217\u8868 for (int i = 0; i length; i++) { Invoker T invoker = invokers.get(i); // \u83b7\u53d6 Invoker \u5bf9\u5e94\u7684\u6d3b\u8dc3\u6570 int active = RpcStatus.getStatus(invoker.getUrl(), invocation.getMethodName()).getActive(); // \u83b7\u53d6\u6743\u91cd - \u2b50\ufe0f int weight = invoker.getUrl().getMethodParameter(invocation.getMethodName(), Constants.WEIGHT_KEY, Constants.DEFAULT_WEIGHT); // \u53d1\u73b0\u66f4\u5c0f\u7684\u6d3b\u8dc3\u6570\uff0c\u91cd\u65b0\u5f00\u59cb if (leastActive == -1 || active leastActive) { // \u4f7f\u7528\u5f53\u524d\u6d3b\u8dc3\u6570 active \u66f4\u65b0\u6700\u5c0f\u6d3b\u8dc3\u6570 leastActive leastActive = active; // \u66f4\u65b0 leastCount \u4e3a 1 leastCount = 1; // \u8bb0\u5f55\u5f53\u524d\u4e0b\u6807\u503c\u5230 leastIndexs \u4e2d leastIndexs[0] = i; totalWeight = weight; firstWeight = weight; sameWeight = true; // \u5f53\u524d Invoker \u7684\u6d3b\u8dc3\u6570 active \u4e0e\u6700\u5c0f\u6d3b\u8dc3\u6570 leastActive \u76f8\u540c } else if (active == leastActive) { // \u5728 leastIndexs \u4e2d\u8bb0\u5f55\u4e0b\u5f53\u524d Invoker \u5728 invokers \u96c6\u5408\u4e2d\u7684\u4e0b\u6807 leastIndexs[leastCount++] = i; // \u7d2f\u52a0\u6743\u91cd totalWeight += weight; // \u68c0\u6d4b\u5f53\u524d Invoker \u7684\u6743\u91cd\u4e0e firstWeight \u662f\u5426\u76f8\u7b49\uff0c // \u4e0d\u76f8\u7b49\u5219\u5c06 sameWeight \u7f6e\u4e3a false if (sameWeight i 0 weight != firstWeight) { sameWeight = false; } } } // \u5f53\u53ea\u6709\u4e00\u4e2a Invoker \u5177\u6709\u6700\u5c0f\u6d3b\u8dc3\u6570\uff0c\u6b64\u65f6\u76f4\u63a5\u8fd4\u56de\u8be5 Invoker \u5373\u53ef if (leastCount == 1) { return invokers.get(leastIndexs[0]); } // \u6709\u591a\u4e2a Invoker \u5177\u6709\u76f8\u540c\u7684\u6700\u5c0f\u6d3b\u8dc3\u6570\uff0c\u4f46\u5b83\u4eec\u4e4b\u95f4\u7684\u6743\u91cd\u4e0d\u540c if (!sameWeight totalWeight 0) { // \u968f\u673a\u751f\u6210\u4e00\u4e2a [0, totalWeight) \u4e4b\u95f4\u7684\u6570\u5b57 int offsetWeight = random.nextInt(totalWeight); // \u5faa\u73af\u8ba9\u968f\u673a\u6570\u51cf\u53bb\u5177\u6709\u6700\u5c0f\u6d3b\u8dc3\u6570\u7684 Invoker \u7684\u6743\u91cd\u503c\uff0c // \u5f53 offset \u5c0f\u4e8e\u7b49\u4e8e0\u65f6\uff0c\u8fd4\u56de\u76f8\u5e94\u7684 Invoker for (int i = 0; i leastCount; i++) { int leastIndex = leastIndexs[i]; // \u83b7\u53d6\u6743\u91cd\u503c\uff0c\u5e76\u8ba9\u968f\u673a\u6570\u51cf\u53bb\u6743\u91cd\u503c - \u2b50\ufe0f offsetWeight -= getWeight(invokers.get(leastIndex), invocation); if (offsetWeight = 0) return invokers.get(leastIndex); } } // \u5982\u679c\u6743\u91cd\u76f8\u540c\u6216\u6743\u91cd\u4e3a0\u65f6\uff0c\u968f\u673a\u8fd4\u56de\u4e00\u4e2a Invoker return invokers.get(leastIndexs[random.nextInt(leastCount)]); } } \u4e0a\u9762\u4ee3\u7801\u7684\u903b\u8f91\u6bd4\u8f83\u591a\uff0c\u6211\u4eec\u5728\u4ee3\u7801\u4e2d\u5199\u4e86\u5927\u91cf\u7684\u6ce8\u91ca\uff0c\u6709\u5e2e\u52a9\u5927\u5bb6\u7406\u89e3\u4ee3\u7801\u903b\u8f91\u3002\u4e0b\u9762\u7b80\u5355\u603b\u7ed3\u4e00\u4e0b\u4ee5\u4e0a\u4ee3\u7801\u6240\u505a\u7684\u4e8b\u60c5\uff0c\u5982\u4e0b\uff1a \u904d\u5386 invokers \u5217\u8868\uff0c\u5bfb\u627e\u6d3b\u8dc3\u6570\u6700\u5c0f\u7684 Invoker \u5982\u679c\u6709\u591a\u4e2a Invoker \u5177\u6709\u76f8\u540c\u7684\u6700\u5c0f\u6d3b\u8dc3\u6570\uff0c\u6b64\u65f6\u8bb0\u5f55\u4e0b\u8fd9\u4e9b Invoker \u5728 invokers \u96c6\u5408\u4e2d\u7684\u4e0b\u6807\uff0c\u5e76\u7d2f\u52a0\u5b83\u4eec\u7684\u6743\u91cd\uff0c\u6bd4\u8f83\u5b83\u4eec\u7684\u6743\u91cd\u503c\u662f\u5426\u76f8\u7b49 \u5982\u679c\u53ea\u6709\u4e00\u4e2a Invoker \u5177\u6709\u6700\u5c0f\u7684\u6d3b\u8dc3\u6570\uff0c\u6b64\u65f6\u76f4\u63a5\u8fd4\u56de\u8be5 Invoker \u5373\u53ef \u5982\u679c\u6709\u591a\u4e2a Invoker \u5177\u6709\u6700\u5c0f\u6d3b\u8dc3\u6570\uff0c\u4e14\u5b83\u4eec\u7684\u6743\u91cd\u4e0d\u76f8\u7b49\uff0c\u6b64\u65f6\u5904\u7406\u65b9\u5f0f\u548c RandomLoadBalance \u4e00\u81f4 \u5982\u679c\u6709\u591a\u4e2a Invoker \u5177\u6709\u6700\u5c0f\u6d3b\u8dc3\u6570\uff0c\u4f46\u5b83\u4eec\u7684\u6743\u91cd\u76f8\u7b49\uff0c\u6b64\u65f6\u968f\u673a\u8fd4\u56de\u4e00\u4e2a\u5373\u53ef \u4ee5\u4e0a\u5c31\u662f LeastActiveLoadBalance \u5927\u81f4\u7684\u5b9e\u73b0\u903b\u8f91\uff0c\u5927\u5bb6\u5728\u9605\u8bfb\u7684\u6e90\u7801\u7684\u8fc7\u7a0b\u4e2d\u8981\u6ce8\u610f\u533a\u5206\u6d3b\u8dc3\u6570\u4e0e\u6743\u91cd\u8fd9\u4e24\u4e2a\u6982\u5ff5\uff0c\u4e0d\u8981\u6df7\u4e3a\u4e00\u8c08\u3002 \u4ee5\u4e0a\u5206\u6790\u662f\u57fa\u4e8e Dubbo 2.6.4 \u7248\u672c\u8fdb\u884c\u7684\uff0c\u7531\u4e8e\u8fd1\u671f Dubbo 2.6.5 \u53d1\u5e03\u4e86\uff0c\u5e76\u5bf9 LeastActiveLoadBalance \u8fdb\u884c\u4e86\u4e00\u4e9b\u4fee\u6539\uff0c\u4e0b\u9762\u7b80\u5355\u6765\u4ecb\u7ecd\u4e00\u4e0b\u4fee\u6539\u5185\u5bb9\u3002\u56de\u5230\u4e0a\u9762\u7684\u6e90\u7801\u4e2d\uff0c\u6211\u4eec\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u6807\u6ce8\u4e86\u4e24\u4e2a\u9ec4\u8272\u7684\u4e94\u89d2\u661f\u2b50\ufe0f\u3002\u4e24\u5904\u6807\u8bb0\u5bf9\u5e94\u7684\u4ee3\u7801\u5206\u522b\u5982\u4e0b\uff1a int weight = invoker.getUrl().getMethodParameter(invocation.getMethodName(), Constants.WEIGHT_KEY, Constants.DEFAULT_WEIGHT); offsetWeight -= getWeight(invokers.get(leastIndex), invocation); \u95ee\u9898\u51fa\u5728\u670d\u52a1\u9884\u70ed\u9636\u6bb5\uff0c\u7b2c\u4e00\u884c\u4ee3\u7801\u76f4\u63a5\u4ece url \u4e2d\u53d6\u6743\u91cd\u503c\uff0c\u672a\u88ab\u964d\u6743\u8fc7\u3002\u7b2c\u4e8c\u884c\u4ee3\u7801\u83b7\u53d6\u5230\u7684\u662f\u7ecf\u8fc7\u964d\u6743\u540e\u7684\u6743\u91cd\u3002\u7b2c\u4e00\u884c\u4ee3\u7801\u83b7\u53d6\u5230\u7684\u6743\u91cd\u503c\u6700\u7ec8\u4f1a\u88ab\u7d2f\u52a0\u5230\u6743\u91cd\u603b\u548c totalWeight \u4e2d\uff0c\u8fd9\u4e2a\u65f6\u5019\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u95ee\u9898\u3002offsetWeight \u662f\u4e00\u4e2a\u5728 [0, totalWeight) \u8303\u56f4\u5185\u7684\u968f\u673a\u6570\uff0c\u800c\u5b83\u6240\u51cf\u53bb\u7684\u662f\u7ecf\u8fc7\u964d\u6743\u7684\u6743\u91cd\u3002\u5f88\u6709\u53ef\u80fd\u5728\u7ecf\u8fc7 leastCount \u6b21\u8fd0\u7b97\u540e\uff0coffsetWeight \u4ecd\u7136\u662f\u5927\u4e8e0\u7684\uff0c\u5bfc\u81f4\u65e0\u6cd5\u9009\u4e2d Invoker\u3002\u8fd9\u4e2a\u95ee\u9898\u5bf9\u5e94\u7684 issue \u4e3a #904 \uff0c\u5e76\u5728 pull request #2172 \u4e2d\u88ab\u4fee\u590d\u3002\u5177\u4f53\u7684\u4fee\u590d\u903b\u8f91\u662f\u5c06\u6807\u6ce8\u4e00\u5904\u7684\u4ee3\u7801\u4fee\u6539\u4e3a\uff1a // afterWarmup \u7b49\u4ef7\u4e8e\u4e0a\u9762\u7684 weight \u53d8\u91cf\uff0c\u8fd9\u6837\u547d\u540d\u662f\u4e3a\u4e86\u5f3a\u8c03\u8be5\u53d8\u91cf\u7ecf\u8fc7\u4e86 warmup \u964d\u6743\u5904\u7406 int afterWarmup = getWeight(invoker, invocation); \u53e6\u5916\uff0c2.6.4 \u7248\u672c\u4e2d\u7684 LeastActiveLoadBalance \u8fd8\u6709\u4e00\u4e2a\u7f3a\u9677\uff0c\u5373\u5f53\u4e00\u7ec4 Invoker \u5177\u6709\u76f8\u540c\u7684\u6700\u5c0f\u6d3b\u8dc3\u6570\uff0c\u4e14\u5176\u4e2d\u4e00\u4e2a Invoker \u7684\u6743\u91cd\u503c\u4e3a1\uff0c\u6b64\u65f6\u8fd9\u4e2a Invoker \u65e0\u6cd5\u88ab\u9009\u4e2d\u3002\u7f3a\u9677\u4ee3\u7801\u5982\u4e0b\uff1a int offsetWeight = random.nextInt(totalWeight); for (int i = 0; i leastCount; i++) { int leastIndex = leastIndexs[i]; offsetWeight -= getWeight(invokers.get(leastIndex), invocation); if (offsetWeight = 0) // \u274c return invokers.get(leastIndex); } \u95ee\u9898\u51fa\u5728\u4e86 offsetWeight = 0 \u4e0a\uff0c\u4e3e\u4f8b\u8bf4\u660e\uff0c\u5047\u8bbe\u6709\u4e00\u7ec4 Invoker \u7684\u6743\u91cd\u4e3a 5\u30012\u30011\uff0coffsetWeight \u6700\u5927\u503c\u4e3a 7\u3002\u5047\u8bbe offsetWeight = 7\uff0c\u4f60\u4f1a\u53d1\u73b0\uff0c\u5f53 for \u5faa\u73af\u8fdb\u884c\u7b2c\u4e8c\u6b21\u904d\u5386\u540e offsetWeight = 7 - 5 - 2 = 0\uff0c\u63d0\u524d\u8fd4\u56de\u4e86\u3002\u6b64\u65f6\uff0c\u6b64\u65f6\u6743\u91cd\u4e3a1\u7684 Invoker \u5c31\u6ca1\u6709\u673a\u4f1a\u88ab\u9009\u4e2d\u4e86\u3002\u8be5\u95ee\u9898\u5728 Dubbo 2.6.5 \u4e2d\u88ab\u4fee\u590d\u4e86\uff0c\u4fee\u6539\u540e\u7684\u4ee3\u7801\u5982\u4e0b\uff1a int offsetWeight = random.nextInt(totalWeight) + 1; \u4ee5\u4e0a\u5c31\u662f Dubbo 2.6.5 \u5bf9 LeastActiveLoadBalance \u7684\u66f4\u65b0\uff0c\u5185\u5bb9\u4e0d\u662f\u5f88\u591a\uff0c\u5148\u5206\u6790\u5230\u8fd9\u3002\u63a5\u4e0b\u6765\u5206\u6790\u57fa\u4e8e\u4e00\u81f4\u6027 hash \u601d\u60f3\u7684 ConsistentHashLoadBalance\u3002 2.3 ConsistentHashLoadBalance \u4e00\u81f4\u6027 hash \u7b97\u6cd5\u7531\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u7684 Karger \u53ca\u5176\u5408\u4f5c\u8005\u4e8e1997\u5e74\u63d0\u51fa\u7684\uff0c\u7b97\u6cd5\u63d0\u51fa\u4e4b\u521d\u662f\u7528\u4e8e\u5927\u89c4\u6a21\u7f13\u5b58\u7cfb\u7edf\u7684\u8d1f\u8f7d\u5747\u8861\u3002\u5b83\u7684\u5de5\u4f5c\u8fc7\u7a0b\u662f\u8fd9\u6837\u7684\uff0c\u9996\u5148\u6839\u636e ip \u6216\u8005\u5176\u4ed6\u7684\u4fe1\u606f\u4e3a\u7f13\u5b58\u8282\u70b9\u751f\u6210\u4e00\u4e2a hash\uff0c\u5e76\u5c06\u8fd9\u4e2a hash \u6295\u5c04\u5230 [0, 2 32 - 1] \u7684\u5706\u73af\u4e0a\u3002\u5f53\u6709\u67e5\u8be2\u6216\u5199\u5165\u8bf7\u6c42\u65f6\uff0c\u5219\u4e3a\u7f13\u5b58\u9879\u7684 key \u751f\u6210\u4e00\u4e2a hash \u503c\u3002\u7136\u540e\u67e5\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8e\u6216\u7b49\u4e8e\u8be5 hash \u503c\u7684\u7f13\u5b58\u8282\u70b9\uff0c\u5e76\u5230\u8fd9\u4e2a\u8282\u70b9\u4e2d\u67e5\u8be2\u6216\u5199\u5165\u7f13\u5b58\u9879\u3002\u5982\u679c\u5f53\u524d\u8282\u70b9\u6302\u4e86\uff0c\u5219\u5728\u4e0b\u4e00\u6b21\u67e5\u8be2\u6216\u5199\u5165\u7f13\u5b58\u65f6\uff0c\u4e3a\u7f13\u5b58\u9879\u67e5\u627e\u53e6\u4e00\u4e2a\u5927\u4e8e\u5176 hash \u503c\u7684\u7f13\u5b58\u8282\u70b9\u5373\u53ef\u3002\u5927\u81f4\u6548\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6bcf\u4e2a\u7f13\u5b58\u8282\u70b9\u5728\u5706\u73af\u4e0a\u5360\u636e\u4e00\u4e2a\u4f4d\u7f6e\u3002\u5982\u679c\u7f13\u5b58\u9879\u7684 key \u7684 hash \u503c\u5c0f\u4e8e\u7f13\u5b58\u8282\u70b9 hash \u503c\uff0c\u5219\u5230\u8be5\u7f13\u5b58\u8282\u70b9\u4e2d\u5b58\u50a8\u6216\u8bfb\u53d6\u7f13\u5b58\u9879\u3002\u6bd4\u5982\u4e0b\u9762\u7eff\u8272\u70b9\u5bf9\u5e94\u7684\u7f13\u5b58\u9879\u5c06\u4f1a\u88ab\u5b58\u50a8\u5230 cache-2 \u8282\u70b9\u4e2d\u3002\u7531\u4e8e cache-3 \u6302\u4e86\uff0c\u539f\u672c\u5e94\u8be5\u5b58\u5230\u8be5\u8282\u70b9\u4e2d\u7684\u7f13\u5b58\u9879\u6700\u7ec8\u4f1a\u5b58\u50a8\u5230 cache-4 \u8282\u70b9\u4e2d\u3002 \u4e0b\u9762\u6765\u770b\u770b\u4e00\u81f4\u6027 hash \u5728 Dubbo \u4e2d\u7684\u5e94\u7528\u3002\u6211\u4eec\u628a\u4e0a\u56fe\u7684\u7f13\u5b58\u8282\u70b9\u66ff\u6362\u6210 Dubbo \u7684\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u4e8e\u662f\u5f97\u5230\u4e86\u4e0b\u56fe\uff1a \u8fd9\u91cc\u76f8\u540c\u989c\u8272\u7684\u8282\u70b9\u5747\u5c5e\u4e8e\u540c\u4e00\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u6bd4\u5982 Invoker1-1\uff0cInvoker1-2\uff0c\u2026\u2026, Invoker1-160\u3002\u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u901a\u8fc7\u5f15\u5165\u865a\u62df\u8282\u70b9\uff0c\u8ba9 Invoker \u5728\u5706\u73af\u4e0a\u5206\u6563\u5f00\u6765\uff0c\u907f\u514d\u6570\u636e\u503e\u659c\u95ee\u9898\u3002\u6240\u8c13\u6570\u636e\u503e\u659c\u662f\u6307\uff0c\u7531\u4e8e\u8282\u70b9\u4e0d\u591f\u5206\u6563\uff0c\u5bfc\u81f4\u5927\u91cf\u8bf7\u6c42\u843d\u5230\u4e86\u540c\u4e00\u4e2a\u8282\u70b9\u4e0a\uff0c\u800c\u5176\u4ed6\u8282\u70b9\u53ea\u4f1a\u63a5\u6536\u5230\u4e86\u5c11\u91cf\u8bf7\u6c42\u7684\u60c5\u51b5\u3002\u6bd4\u5982\uff1a \u5982\u4e0a\uff0c\u7531\u4e8e Invoker-1 \u548c Invoker-2 \u5728\u5706\u73af\u4e0a\u5206\u5e03\u4e0d\u5747\uff0c\u5bfc\u81f4\u7cfb\u7edf\u4e2d75%\u7684\u8bf7\u6c42\u90fd\u4f1a\u843d\u5230 Invoker-1 \u4e0a\uff0c\u53ea\u6709 25% \u7684\u8bf7\u6c42\u4f1a\u843d\u5230 Invoker-2 \u4e0a\u3002\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u529e\u6cd5\u662f\u5f15\u5165\u865a\u62df\u8282\u70b9\uff0c\u901a\u8fc7\u865a\u62df\u8282\u70b9\u5747\u8861\u5404\u4e2a\u8282\u70b9\u7684\u8bf7\u6c42\u91cf\u3002 \u5230\u8fd9\u91cc\u80cc\u666f\u77e5\u8bc6\u5c31\u666e\u53ca\u5b8c\u4e86\uff0c\u63a5\u4e0b\u6765\u5f00\u59cb\u5206\u6790\u6e90\u7801\u3002\u6211\u4eec\u5148\u4ece ConsistentHashLoadBalance \u7684 doSelect \u65b9\u6cd5\u5f00\u59cb\u770b\u8d77\uff0c\u5982\u4e0b\uff1a public class ConsistentHashLoadBalance extends AbstractLoadBalance { private final ConcurrentMap String, ConsistentHashSelector ? selectors = new ConcurrentHashMap String, ConsistentHashSelector ? (); @Override protected T Invoker T doSelect(List Invoker T invokers, URL url, Invocation invocation) { String methodName = RpcUtils.getMethodName(invocation); String key = invokers.get(0).getUrl().getServiceKey() + . + methodName; // \u83b7\u53d6 invokers \u539f\u59cb\u7684 hashcode int identityHashCode = System.identityHashCode(invokers); ConsistentHashSelector T selector = (ConsistentHashSelector T ) selectors.get(key); // \u5982\u679c invokers \u662f\u4e00\u4e2a\u65b0\u7684 List \u5bf9\u8c61\uff0c\u610f\u5473\u7740\u670d\u52a1\u63d0\u4f9b\u8005\u6570\u91cf\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u53ef\u80fd\u65b0\u589e\u4e5f\u53ef\u80fd\u51cf\u5c11\u4e86\u3002 // \u6b64\u65f6 selector.identityHashCode != identityHashCode \u6761\u4ef6\u6210\u7acb if (selector == null || selector.identityHashCode != identityHashCode) { // \u521b\u5efa\u65b0\u7684 ConsistentHashSelector selectors.put(key, new ConsistentHashSelector T (invokers, methodName, identityHashCode)); selector = (ConsistentHashSelector T ) selectors.get(key); } // \u8c03\u7528 ConsistentHashSelector \u7684 select \u65b9\u6cd5\u9009\u62e9 Invoker return selector.select(invocation); } private static final class ConsistentHashSelector T {...} } \u5982\u4e0a\uff0cdoSelect \u65b9\u6cd5\u4e3b\u8981\u505a\u4e86\u4e00\u4e9b\u524d\u7f6e\u5de5\u4f5c\uff0c\u6bd4\u5982\u68c0\u6d4b invokers \u5217\u8868\u662f\u4e0d\u662f\u53d8\u52a8\u8fc7\uff0c\u4ee5\u53ca\u521b\u5efa ConsistentHashSelector\u3002\u8fd9\u4e9b\u5de5\u4f5c\u505a\u5b8c\u540e\uff0c\u63a5\u4e0b\u6765\u5f00\u59cb\u8c03\u7528 ConsistentHashSelector \u7684 select \u65b9\u6cd5\u6267\u884c\u8d1f\u8f7d\u5747\u8861\u903b\u8f91\u3002\u5728\u5206\u6790 select \u65b9\u6cd5\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e0b\u4e00\u81f4\u6027 hash \u9009\u62e9\u5668 ConsistentHashSelector \u7684\u521d\u59cb\u5316\u8fc7\u7a0b\uff0c\u5982\u4e0b\uff1a private static final class ConsistentHashSelector T { // \u4f7f\u7528 TreeMap \u5b58\u50a8 Invoker \u865a\u62df\u8282\u70b9 private final TreeMap Long, Invoker T virtualInvokers; private final int replicaNumber; private final int identityHashCode; private final int[] argumentIndex; ConsistentHashSelector(List Invoker T invokers, String methodName, int identityHashCode) { this.virtualInvokers = new TreeMap Long, Invoker T (); this.identityHashCode = identityHashCode; URL url = invokers.get(0).getUrl(); // \u83b7\u53d6\u865a\u62df\u8282\u70b9\u6570\uff0c\u9ed8\u8ba4\u4e3a160 this.replicaNumber = url.getMethodParameter(methodName, hash.nodes , 160); // \u83b7\u53d6\u53c2\u4e0e hash \u8ba1\u7b97\u7684\u53c2\u6570\u4e0b\u6807\u503c\uff0c\u9ed8\u8ba4\u5bf9\u7b2c\u4e00\u4e2a\u53c2\u6570\u8fdb\u884c hash \u8fd0\u7b97 String[] index = Constants.COMMA_SPLIT_PATTERN.split(url.getMethodParameter(methodName, hash.arguments , 0 )); argumentIndex = new int[index.length]; for (int i = 0; i index.length; i++) { argumentIndex[i] = Integer.parseInt(index[i]); } for (Invoker T invoker : invokers) { String address = invoker.getUrl().getAddress(); for (int i = 0; i replicaNumber / 4; i++) { // \u5bf9 address + i \u8fdb\u884c md5 \u8fd0\u7b97\uff0c\u5f97\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3a16\u7684\u5b57\u8282\u6570\u7ec4 byte[] digest = md5(address + i); // \u5bf9 digest \u90e8\u5206\u5b57\u8282\u8fdb\u884c4\u6b21 hash \u8fd0\u7b97\uff0c\u5f97\u5230\u56db\u4e2a\u4e0d\u540c\u7684 long \u578b\u6b63\u6574\u6570 for (int h = 0; h 4; h++) { // h = 0 \u65f6\uff0c\u53d6 digest \u4e2d\u4e0b\u6807\u4e3a 0 ~ 3 \u76844\u4e2a\u5b57\u8282\u8fdb\u884c\u4f4d\u8fd0\u7b97 // h = 1 \u65f6\uff0c\u53d6 digest \u4e2d\u4e0b\u6807\u4e3a 4 ~ 7 \u76844\u4e2a\u5b57\u8282\u8fdb\u884c\u4f4d\u8fd0\u7b97 // h = 2, h = 3 \u65f6\u8fc7\u7a0b\u540c\u4e0a long m = hash(digest, h); // \u5c06 hash \u5230 invoker \u7684\u6620\u5c04\u5173\u7cfb\u5b58\u50a8\u5230 virtualInvokers \u4e2d\uff0c // virtualInvokers \u9700\u8981\u63d0\u4f9b\u9ad8\u6548\u7684\u67e5\u8be2\u64cd\u4f5c\uff0c\u56e0\u6b64\u9009\u7528 TreeMap \u4f5c\u4e3a\u5b58\u50a8\u7ed3\u6784 virtualInvokers.put(m, invoker); } } } } } ConsistentHashSelector \u7684\u6784\u9020\u65b9\u6cd5\u6267\u884c\u4e86\u4e00\u7cfb\u5217\u7684\u521d\u59cb\u5316\u903b\u8f91\uff0c\u6bd4\u5982\u4ece\u914d\u7f6e\u4e2d\u83b7\u53d6\u865a\u62df\u8282\u70b9\u6570\u4ee5\u53ca\u53c2\u4e0e hash \u8ba1\u7b97\u7684\u53c2\u6570\u4e0b\u6807\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u53ea\u4f7f\u7528\u7b2c\u4e00\u4e2a\u53c2\u6570\u8fdb\u884c hash\u3002\u9700\u8981\u7279\u522b\u8bf4\u660e\u7684\u662f\uff0cConsistentHashLoadBalance \u7684\u8d1f\u8f7d\u5747\u8861\u903b\u8f91\u53ea\u53d7\u53c2\u6570\u503c\u5f71\u54cd\uff0c\u5177\u6709\u76f8\u540c\u53c2\u6570\u503c\u7684\u8bf7\u6c42\u5c06\u4f1a\u88ab\u5206\u914d\u7ed9\u540c\u4e00\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u3002ConsistentHashLoadBalance \u4e0d \u5173\u7cfb\u6743\u91cd\uff0c\u56e0\u6b64\u4f7f\u7528\u65f6\u9700\u8981\u6ce8\u610f\u4e00\u4e0b\u3002 \u5728\u83b7\u53d6\u865a\u62df\u8282\u70b9\u6570\u548c\u53c2\u6570\u4e0b\u6807\u914d\u7f6e\u540e\uff0c\u63a5\u4e0b\u6765\u8981\u505a\u7684\u4e8b\u60c5\u662f\u8ba1\u7b97\u865a\u62df\u8282\u70b9 hash \u503c\uff0c\u5e76\u5c06\u865a\u62df\u8282\u70b9\u5b58\u50a8\u5230 TreeMap \u4e2d\u3002\u5230\u6b64\uff0cConsistentHashSelector \u521d\u59cb\u5316\u5de5\u4f5c\u5c31\u5b8c\u6210\u4e86\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6765\u770b\u770b select \u65b9\u6cd5\u7684\u903b\u8f91\u3002 public Invoker T select(Invocation invocation) { // \u5c06\u53c2\u6570\u8f6c\u4e3a key String key = toKey(invocation.getArguments()); // \u5bf9\u53c2\u6570 key \u8fdb\u884c md5 \u8fd0\u7b97 byte[] digest = md5(key); // \u53d6 digest \u6570\u7ec4\u7684\u524d\u56db\u4e2a\u5b57\u8282\u8fdb\u884c hash \u8fd0\u7b97\uff0c\u518d\u5c06 hash \u503c\u4f20\u7ed9 selectForKey \u65b9\u6cd5\uff0c // \u5bfb\u627e\u5408\u9002\u7684 Invoker return selectForKey(hash(digest, 0)); } private Invoker T selectForKey(long hash) { // \u5230 TreeMap \u4e2d\u67e5\u627e\u7b2c\u4e00\u4e2a\u8282\u70b9\u503c\u5927\u4e8e\u6216\u7b49\u4e8e\u5f53\u524d hash \u7684 Invoker Map.Entry Long, Invoker T entry = virtualInvokers.tailMap(hash, true).firstEntry(); // \u5982\u679c hash \u5927\u4e8e Invoker \u5728\u5706\u73af\u4e0a\u6700\u5927\u7684\u4f4d\u7f6e\uff0c\u6b64\u65f6 entry = null\uff0c // \u9700\u8981\u5c06 TreeMap \u7684\u5934\u8282\u70b9\u8d4b\u503c\u7ed9 entry if (entry == null) { entry = virtualInvokers.firstEntry(); } // \u8fd4\u56de Invoker return entry.getValue(); } \u5982\u4e0a\uff0c\u9009\u62e9\u7684\u8fc7\u7a0b\u76f8\u5bf9\u6bd4\u8f83\u7b80\u5355\u4e86\u3002\u9996\u5148\u662f\u5bf9\u53c2\u6570\u8fdb\u884c md5 \u4ee5\u53ca hash \u8fd0\u7b97\uff0c\u5f97\u5230\u4e00\u4e2a hash \u503c\u3002\u7136\u540e\u518d\u62ff\u8fd9\u4e2a\u503c\u5230 TreeMap \u4e2d\u67e5\u627e\u76ee\u6807 Invoker \u5373\u53ef\u3002 \u5230\u6b64\u5173\u4e8e ConsistentHashLoadBalance \u5c31\u5206\u6790\u5b8c\u4e86\u3002\u5728\u9605\u8bfb ConsistentHashLoadBalance \u6e90\u7801\u4e4b\u524d\uff0c\u5927\u5bb6\u4e00\u5b9a\u8981\u5148\u8865\u5145\u80cc\u666f\u77e5\u8bc6\uff0c\u4e0d\u7136\u5f88\u96be\u770b\u61c2\u4ee3\u7801\u903b\u8f91\u3002 2.4 RoundRobinLoadBalance \u672c\u8282\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0b Dubbo \u4e2d\u52a0\u6743\u8f6e\u8be2\u8d1f\u8f7d\u5747\u8861\u7684\u5b9e\u73b0 RoundRobinLoadBalance\u3002\u5728\u8be6\u7ec6\u5206\u6790\u6e90\u7801\u524d\uff0c\u6211\u4eec\u5148\u6765\u4e86\u89e3\u4e00\u4e0b\u4ec0\u4e48\u662f\u52a0\u6743\u8f6e\u8be2\u3002\u8fd9\u91cc\u4ece\u6700\u7b80\u5355\u7684\u8f6e\u8be2\u5f00\u59cb\u8bb2\u8d77\uff0c\u6240\u8c13\u8f6e\u8be2\u662f\u6307\u5c06\u8bf7\u6c42\u8f6e\u6d41\u5206\u914d\u7ed9\u6bcf\u53f0\u670d\u52a1\u5668\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u6709\u4e09\u53f0\u670d\u52a1\u5668 A\u3001B\u3001C\u3002\u6211\u4eec\u5c06\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u5206\u914d\u7ed9\u670d\u52a1\u5668 A\uff0c\u7b2c\u4e8c\u4e2a\u8bf7\u6c42\u5206\u914d\u7ed9\u670d\u52a1\u5668 B\uff0c\u7b2c\u4e09\u4e2a\u8bf7\u6c42\u5206\u914d\u7ed9\u670d\u52a1\u5668 C\uff0c\u7b2c\u56db\u4e2a\u8bf7\u6c42\u518d\u6b21\u5206\u914d\u7ed9\u670d\u52a1\u5668 A\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u53eb\u505a\u8f6e\u8be2\u3002\u8f6e\u8be2\u662f\u4e00\u79cd\u65e0\u72b6\u6001\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\uff0c\u5b9e\u73b0\u7b80\u5355\uff0c\u9002\u7528\u4e8e\u6bcf\u53f0\u670d\u52a1\u5668\u6027\u80fd\u76f8\u8fd1\u7684\u573a\u666f\u4e0b\u3002\u4f46\u73b0\u5b9e\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u6bcf\u53f0\u670d\u52a1\u5668\u6027\u80fd\u5747\u76f8\u8fd1\u3002\u5982\u679c\u6211\u4eec\u5c06\u7b49\u91cf\u7684\u8bf7\u6c42\u5206\u914d\u7ed9\u6027\u80fd\u8f83\u5dee\u7684\u670d\u52a1\u5668\uff0c\u8fd9\u663e\u7136\u662f\u4e0d\u5408\u7406\u7684\u3002\u56e0\u6b64\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u9700\u8981\u5bf9\u8f6e\u8be2\u8fc7\u7a0b\u8fdb\u884c\u52a0\u6743\uff0c\u4ee5\u8c03\u63a7\u6bcf\u53f0\u670d\u52a1\u5668\u7684\u8d1f\u8f7d\u3002\u7ecf\u8fc7\u52a0\u6743\u540e\uff0c\u6bcf\u53f0\u670d\u52a1\u5668\u80fd\u591f\u5f97\u5230\u7684\u8bf7\u6c42\u6570\u6bd4\u4f8b\uff0c\u63a5\u8fd1\u6216\u7b49\u4e8e\u4ed6\u4eec\u7684\u6743\u91cd\u6bd4\u3002\u6bd4\u5982\u670d\u52a1\u5668 A\u3001B\u3001C \u6743\u91cd\u6bd4\u4e3a 5:2:1\u3002\u90a3\u4e48\u57288\u6b21\u8bf7\u6c42\u4e2d\uff0c\u670d\u52a1\u5668 A \u5c06\u6536\u5230\u5176\u4e2d\u76845\u6b21\u8bf7\u6c42\uff0c\u670d\u52a1\u5668 B \u4f1a\u6536\u5230\u5176\u4e2d\u76842\u6b21\u8bf7\u6c42\uff0c\u670d\u52a1\u5668 C \u5219\u6536\u5230\u5176\u4e2d\u76841\u6b21\u8bf7\u6c42\u3002 \u4ee5\u4e0a\u5c31\u662f\u52a0\u6743\u8f6e\u8be2\u7684\u7b97\u6cd5\u601d\u60f3\uff0c\u641e\u61c2\u4e86\u8fd9\u4e2a\u601d\u60f3\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u53ef\u4ee5\u5206\u6790\u6e90\u7801\u4e86\u3002\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e0b 2.6.4 \u7248\u672c\u7684 RoundRobinLoadBalance\u3002 public class RoundRobinLoadBalance extends AbstractLoadBalance { public static final String NAME = roundrobin ; private final ConcurrentMap String, AtomicPositiveInteger sequences = new ConcurrentHashMap String, AtomicPositiveInteger (); @Override protected T Invoker T doSelect(List Invoker T invokers, URL url, Invocation invocation) { // key = \u5168\u9650\u5b9a\u7c7b\u540d + . + \u65b9\u6cd5\u540d\uff0c\u6bd4\u5982 com.xxx.DemoService.sayHello String key = invokers.get(0).getUrl().getServiceKey() + . + invocation.getMethodName(); int length = invokers.size(); // \u6700\u5927\u6743\u91cd int maxWeight = 0; // \u6700\u5c0f\u6743\u91cd int minWeight = Integer.MAX_VALUE; final LinkedHashMap Invoker T , IntegerWrapper invokerToWeightMap = new LinkedHashMap Invoker T , IntegerWrapper (); // \u6743\u91cd\u603b\u548c int weightSum = 0; // \u4e0b\u9762\u8fd9\u4e2a\u5faa\u73af\u4e3b\u8981\u7528\u4e8e\u67e5\u627e\u6700\u5927\u548c\u6700\u5c0f\u6743\u91cd\uff0c\u8ba1\u7b97\u6743\u91cd\u603b\u548c\u7b49 for (int i = 0; i length; i++) { int weight = getWeight(invokers.get(i), invocation); // \u83b7\u53d6\u6700\u5927\u548c\u6700\u5c0f\u6743\u91cd maxWeight = Math.max(maxWeight, weight); minWeight = Math.min(minWeight, weight); if (weight 0) { // \u5c06 weight \u5c01\u88c5\u5230 IntegerWrapper \u4e2d invokerToWeightMap.put(invokers.get(i), new IntegerWrapper(weight)); // \u7d2f\u52a0\u6743\u91cd weightSum += weight; } } // \u67e5\u627e key \u5bf9\u5e94\u7684\u5bf9\u5e94 AtomicPositiveInteger \u5b9e\u4f8b\uff0c\u4e3a\u7a7a\u5219\u521b\u5efa\u3002 // \u8fd9\u91cc\u53ef\u4ee5\u628a AtomicPositiveInteger \u770b\u6210\u4e00\u4e2a\u9ed1\u76d2\uff0c\u5927\u5bb6\u53ea\u8981\u77e5\u9053 // AtomicPositiveInteger \u7528\u4e8e\u8bb0\u5f55\u670d\u52a1\u7684\u8c03\u7528\u7f16\u53f7\u5373\u53ef\u3002\u81f3\u4e8e\u7ec6\u8282\uff0c // \u5927\u5bb6\u5982\u679c\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u81ea\u884c\u5206\u6790 AtomicPositiveInteger sequence = sequences.get(key); if (sequence == null) { sequences.putIfAbsent(key, new AtomicPositiveInteger()); sequence = sequences.get(key); } // \u83b7\u53d6\u5f53\u524d\u7684\u8c03\u7528\u7f16\u53f7 int currentSequence = sequence.getAndIncrement(); // \u5982\u679c\u6700\u5c0f\u6743\u91cd\u5c0f\u4e8e\u6700\u5927\u6743\u91cd\uff0c\u8868\u660e\u670d\u52a1\u63d0\u4f9b\u8005\u4e4b\u95f4\u7684\u6743\u91cd\u662f\u4e0d\u76f8\u7b49\u7684 if (maxWeight 0 minWeight maxWeight) { // \u4f7f\u7528\u8c03\u7528\u7f16\u53f7\u5bf9\u6743\u91cd\u603b\u548c\u8fdb\u884c\u53d6\u4f59\u64cd\u4f5c int mod = currentSequence % weightSum; // \u8fdb\u884c maxWeight \u6b21\u904d\u5386 for (int i = 0; i maxWeight; i++) { // \u904d\u5386 invokerToWeightMap for (Map.Entry Invoker T , IntegerWrapper each : invokerToWeightMap.entrySet()) { // \u83b7\u53d6 Invoker final Invoker T k = each.getKey(); // \u83b7\u53d6\u6743\u91cd\u5305\u88c5\u7c7b IntegerWrapper final IntegerWrapper v = each.getValue(); // \u5982\u679c mod = 0\uff0c\u4e14\u6743\u91cd\u5927\u4e8e0\uff0c\u6b64\u65f6\u8fd4\u56de\u76f8\u5e94\u7684 Invoker if (mod == 0 v.getValue() 0) { return k; } // mod != 0\uff0c\u4e14\u6743\u91cd\u5927\u4e8e0\uff0c\u6b64\u65f6\u5bf9\u6743\u91cd\u548c mod \u5206\u522b\u8fdb\u884c\u81ea\u51cf\u64cd\u4f5c if (v.getValue() 0) { v.decrement(); mod--; } } } } // \u670d\u52a1\u63d0\u4f9b\u8005\u4e4b\u95f4\u7684\u6743\u91cd\u76f8\u7b49\uff0c\u6b64\u65f6\u901a\u8fc7\u8f6e\u8be2\u9009\u62e9 Invoker return invokers.get(currentSequence % length); } // IntegerWrapper \u662f\u4e00\u4e2a int \u5305\u88c5\u7c7b\uff0c\u4e3b\u8981\u5305\u542b\u4e86\u4e00\u4e2a\u81ea\u51cf\u65b9\u6cd5\u3002 private static final class IntegerWrapper { private int value; public void decrement() { this.value--; } // \u7701\u7565\u90e8\u5206\u4ee3\u7801 } } \u5982\u4e0a\uff0cRoundRobinLoadBalance \u7684\u6bcf\u884c\u4ee3\u7801\u90fd\u4e0d\u662f\u5f88\u96be\u7406\u89e3\uff0c\u4f46\u662f\u5c06\u5b83\u4eec\u7ec4\u5408\u5728\u4e00\u8d77\u4e4b\u540e\uff0c\u5c31\u4e0d\u662f\u5f88\u597d\u7406\u89e3\u4e86\u3002\u6240\u4ee5\u4e0b\u9762\u6211\u4eec\u4e3e\u4f8b\u8fdb\u884c\u8bf4\u660e\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e09\u53f0\u670d\u52a1\u5668 servers = [A, B, C]\uff0c\u5bf9\u5e94\u7684\u6743\u91cd\u4e3a weights = [2, 5, 1]\u3002\u63a5\u4e0b\u6765\u5bf9\u4e0a\u9762\u7684\u903b\u8f91\u8fdb\u884c\u7b80\u5355\u7684\u6a21\u62df\u3002 mod = 0\uff1a\u6ee1\u8db3\u6761\u4ef6\uff0c\u6b64\u65f6\u76f4\u63a5\u8fd4\u56de\u670d\u52a1\u5668 A mod = 1\uff1a\u9700\u8981\u8fdb\u884c\u4e00\u6b21\u9012\u51cf\u64cd\u4f5c\u624d\u80fd\u6ee1\u8db3\u6761\u4ef6\uff0c\u6b64\u65f6\u8fd4\u56de\u670d\u52a1\u5668 B mod = 2\uff1a\u9700\u8981\u8fdb\u884c\u4e24\u6b21\u9012\u51cf\u64cd\u4f5c\u624d\u80fd\u6ee1\u8db3\u6761\u4ef6\uff0c\u6b64\u65f6\u8fd4\u56de\u670d\u52a1\u5668 C mod = 3\uff1a\u9700\u8981\u8fdb\u884c\u4e09\u6b21\u9012\u51cf\u64cd\u4f5c\u624d\u80fd\u6ee1\u8db3\u6761\u4ef6\uff0c\u7ecf\u8fc7\u9012\u51cf\u540e\uff0c\u670d\u52a1\u5668\u6743\u91cd\u4e3a [1, 4, 0]\uff0c\u6b64\u65f6\u8fd4\u56de\u670d\u52a1\u5668 A mod = 4\uff1a\u9700\u8981\u8fdb\u884c\u56db\u6b21\u9012\u51cf\u64cd\u4f5c\u624d\u80fd\u6ee1\u8db3\u6761\u4ef6\uff0c\u7ecf\u8fc7\u9012\u51cf\u540e\uff0c\u670d\u52a1\u5668\u6743\u91cd\u4e3a [0, 4, 0]\uff0c\u6b64\u65f6\u8fd4\u56de\u670d\u52a1\u5668 B mod = 5\uff1a\u9700\u8981\u8fdb\u884c\u4e94\u6b21\u9012\u51cf\u64cd\u4f5c\u624d\u80fd\u6ee1\u8db3\u6761\u4ef6\uff0c\u7ecf\u8fc7\u9012\u51cf\u540e\uff0c\u670d\u52a1\u5668\u6743\u91cd\u4e3a [0, 3, 0]\uff0c\u6b64\u65f6\u8fd4\u56de\u670d\u52a1\u5668 B mod = 6\uff1a\u9700\u8981\u8fdb\u884c\u516d\u6b21\u9012\u51cf\u64cd\u4f5c\u624d\u80fd\u6ee1\u8db3\u6761\u4ef6\uff0c\u7ecf\u8fc7\u9012\u51cf\u540e\uff0c\u670d\u52a1\u5668\u6743\u91cd\u4e3a [0, 2, 0]\uff0c\u6b64\u65f6\u8fd4\u56de\u670d\u52a1\u5668 B mod = 7\uff1a\u9700\u8981\u8fdb\u884c\u4e03\u6b21\u9012\u51cf\u64cd\u4f5c\u624d\u80fd\u6ee1\u8db3\u6761\u4ef6\uff0c\u7ecf\u8fc7\u9012\u51cf\u540e\uff0c\u670d\u52a1\u5668\u6743\u91cd\u4e3a [0, 1, 0]\uff0c\u6b64\u65f6\u8fd4\u56de\u670d\u52a1\u5668 B \u7ecf\u8fc78\u6b21\u8c03\u7528\u540e\uff0c\u6211\u4eec\u5f97\u5230\u7684\u8d1f\u8f7d\u5747\u8861\u7ed3\u679c\u4e3a [A, B, C, A, B, B, B, B]\uff0c\u6b21\u6570\u6bd4 A:B:C = 2:5:1\uff0c\u7b49\u4e8e\u6743\u91cd\u6bd4\u3002\u5f53 sequence = 8 \u65f6\uff0cmod = 0\uff0c\u6b64\u65f6\u91cd\u5934\u518d\u6765\u3002\u4ece\u4e0a\u9762\u7684\u6a21\u62df\u8fc7\u7a0b\u53ef\u4ee5\u770b\u51fa\uff0c\u5f53 mod = 3 \u540e\uff0c\u670d\u52a1\u5668 C \u5c31\u4e0d\u4f1a\u88ab\u9009\u4e2d\u4e86\uff0c\u56e0\u4e3a\u5b83\u7684\u6743\u91cd\u88ab\u51cf\u4e3a0\u4e86\u3002\u5f53 mod = 4 \u540e\uff0c\u670d\u52a1\u5668 A \u7684\u6743\u91cd\u88ab\u51cf\u4e3a0\uff0c\u6b64\u540e A \u5c31\u4e0d\u4f1a\u518d\u88ab\u9009\u4e2d\u3002 \u4ee5\u4e0a\u662f 2.6.4 \u7248\u672c\u7684 RoundRobinLoadBalance \u5206\u6790\u8fc7\u7a0b\uff0c2.6.4 \u7248\u672c\u7684 RoundRobinLoadBalance \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u5b58\u5728\u7740\u6bd4\u8f83\u4e25\u91cd\u7684\u6027\u80fd\u95ee\u9898\uff0c\u8be5\u95ee\u9898\u6700\u521d\u662f\u5728 issue #2578 \u4e2d\u88ab\u53cd\u9988\u51fa\u6765\u3002\u95ee\u9898\u51fa\u5728\u4e86 Invoker \u7684\u8fd4\u56de\u65f6\u673a\u4e0a\uff0cRoundRobinLoadBalance \u9700\u8981\u5728 mod == 0 v.getValue() 0 \u6761\u4ef6\u6210\u7acb\u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u88ab\u8fd4\u56de\u76f8\u5e94\u7684 Invoker\u3002\u5047\u5982 mod \u5f88\u5927\uff0c\u6bd4\u5982 10000\uff0c50000\uff0c\u751a\u81f3\u66f4\u5927\u65f6\uff0cdoSelect \u65b9\u6cd5\u9700\u8981\u8fdb\u884c\u5f88\u591a\u6b21\u8ba1\u7b97\u624d\u80fd\u5c06 mod \u51cf\u4e3a0\u3002\u7531\u6b64\u53ef\u77e5\uff0cdoSelect \u7684\u6548\u7387\u4e0e mod \u6709\u5173\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(mod)\u3002mod \u53c8\u53d7\u6700\u5927\u6743\u91cd maxWeight \u7684\u5f71\u54cd\uff0c\u56e0\u6b64\u5f53\u67d0\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u914d\u7f6e\u4e86\u975e\u5e38\u5927\u7684\u6743\u91cd\uff0c\u6b64\u65f6 RoundRobinLoadBalance \u4f1a\u4ea7\u751f\u6bd4\u8f83\u4e25\u91cd\u7684\u6027\u80fd\u95ee\u9898\u3002\u8fd9\u4e2a\u95ee\u9898\u88ab\u53cd\u9988\u540e\uff0c\u793e\u533a\u5f88\u5feb\u505a\u4e86\u56de\u5e94\u3002\u5e76\u5bf9 RoundRobinLoadBalance \u7684\u4ee3\u7801\u8fdb\u884c\u4e86\u91cd\u6784\uff0c\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u4f18\u5316\u81f3\u4e86\u5e38\u91cf\u7ea7\u522b\u3002\u8fd9\u4e2a\u4f18\u5316\u53ef\u4ee5\u8bf4\u5f88\u597d\u4e86\uff0c\u4e0b\u9762\u6211\u4eec\u6765\u5b66\u4e60\u4e00\u4e0b\u4f18\u5316\u540e\u7684\u4ee3\u7801\u3002 public class RoundRobinLoadBalance extends AbstractLoadBalance { public static final String NAME = roundrobin ; private final ConcurrentMap String, AtomicPositiveInteger sequences = new ConcurrentHashMap String, AtomicPositiveInteger (); private final ConcurrentMap String, AtomicPositiveInteger indexSeqs = new ConcurrentHashMap String, AtomicPositiveInteger (); @Override protected T Invoker T doSelect(List Invoker T invokers, URL url, Invocation invocation) { String key = invokers.get(0).getUrl().getServiceKey() + . + invocation.getMethodName(); int length = invokers.size(); int maxWeight = 0; int minWeight = Integer.MAX_VALUE; final List Invoker T invokerToWeightList = new ArrayList (); // \u67e5\u627e\u6700\u5927\u548c\u6700\u5c0f\u6743\u91cd for (int i = 0; i length; i++) { int weight = getWeight(invokers.get(i), invocation); maxWeight = Math.max(maxWeight, weight); minWeight = Math.min(minWeight, weight); if (weight 0) { invokerToWeightList.add(invokers.get(i)); } } // \u83b7\u53d6\u5f53\u524d\u670d\u52a1\u5bf9\u5e94\u7684\u8c03\u7528\u5e8f\u5217\u5bf9\u8c61 AtomicPositiveInteger AtomicPositiveInteger sequence = sequences.get(key); if (sequence == null) { // \u521b\u5efa AtomicPositiveInteger\uff0c\u9ed8\u8ba4\u503c\u4e3a0 sequences.putIfAbsent(key, new AtomicPositiveInteger()); sequence = sequences.get(key); } // \u83b7\u53d6\u4e0b\u6807\u5e8f\u5217\u5bf9\u8c61 AtomicPositiveInteger AtomicPositiveInteger indexSeq = indexSeqs.get(key); if (indexSeq == null) { // \u521b\u5efa AtomicPositiveInteger\uff0c\u9ed8\u8ba4\u503c\u4e3a -1 indexSeqs.putIfAbsent(key, new AtomicPositiveInteger(-1)); indexSeq = indexSeqs.get(key); } if (maxWeight 0 minWeight maxWeight) { length = invokerToWeightList.size(); while (true) { int index = indexSeq.incrementAndGet() % length; int currentWeight = sequence.get() % maxWeight; // \u6bcf\u5faa\u73af\u4e00\u8f6e\uff08index = 0\uff09\uff0c\u91cd\u65b0\u8ba1\u7b97 currentWeight if (index == 0) { currentWeight = sequence.incrementAndGet() % maxWeight; } // \u68c0\u6d4b Invoker \u7684\u6743\u91cd\u662f\u5426\u5927\u4e8e currentWeight\uff0c\u5927\u4e8e\u5219\u8fd4\u56de if (getWeight(invokerToWeightList.get(index), invocation) currentWeight) { return invokerToWeightList.get(index); } } } // \u6240\u6709 Invoker \u6743\u91cd\u76f8\u7b49\uff0c\u6b64\u65f6\u8fdb\u884c\u666e\u901a\u7684\u8f6e\u8be2\u5373\u53ef return invokers.get(sequence.incrementAndGet() % length); } } \u4e0a\u9762\u4ee3\u7801\u7684\u903b\u8f91\u662f\u8fd9\u6837\u7684\uff0c\u6bcf\u8fdb\u884c\u4e00\u8f6e\u5faa\u73af\uff0c\u91cd\u65b0\u8ba1\u7b97 currentWeight\u3002\u5982\u679c\u5f53\u524d Invoker \u6743\u91cd\u5927\u4e8e currentWeight\uff0c\u5219\u8fd4\u56de\u8be5 Invoker\u3002\u4e0b\u9762\u4e3e\u4f8b\u8bf4\u660e\uff0c\u5047\u8bbe\u670d\u52a1\u5668 [A, B, C] \u5bf9\u5e94\u6743\u91cd [5, 2, 1]\u3002 \u7b2c\u4e00\u8f6e\u5faa\u73af\uff0ccurrentWeight = 1\uff0c\u53ef\u8fd4\u56de A \u548c B \u7b2c\u4e8c\u8f6e\u5faa\u73af\uff0ccurrentWeight = 2\uff0c\u8fd4\u56de A \u7b2c\u4e09\u8f6e\u5faa\u73af\uff0ccurrentWeight = 3\uff0c\u8fd4\u56de A \u7b2c\u56db\u8f6e\u5faa\u73af\uff0ccurrentWeight = 4\uff0c\u8fd4\u56de A \u7b2c\u4e94\u8f6e\u5faa\u73af\uff0ccurrentWeight = 0\uff0c\u8fd4\u56de A, B, C \u5982\u4e0a\uff0c\u8fd9\u91cc\u7684\u4e00\u8f6e\u5faa\u73af\u662f\u6307 index \u518d\u6b21\u53d8\u4e3a0\u6240\u7ecf\u5386\u8fc7\u7684\u5faa\u73af\uff0c\u8fd9\u91cc\u53ef\u4ee5\u628a index = 0 \u770b\u505a\u662f\u4e00\u8f6e\u5faa\u73af\u7684\u5f00\u59cb\u3002\u6bcf\u4e00\u8f6e\u5faa\u73af\u7684\u6b21\u6570\u4e0e Invoker \u7684\u6570\u91cf\u6709\u5173\uff0cInvoker \u6570\u91cf\u901a\u5e38\u4e0d\u4f1a\u592a\u591a\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u4e0a\u9762\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u5e38\u6570\u7ea7\u3002 \u91cd\u6784\u540e\u7684 RoundRobinLoadBalance \u770b\u8d77\u6765\u5df2\u7ecf\u5f88\u4e0d\u9519\u4e86\uff0c\u4f46\u662f\u5728\u4ee3\u7801\u66f4\u65b0\u4e0d\u4e45\u540e\uff0c\u5f88\u5feb\u53c8\u88ab\u91cd\u6784\u4e86\u3002\u8fd9\u6b21\u91cd\u6784\u539f\u56e0\u662f\u65b0\u7684 RoundRobinLoadBalance \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u9009\u51fa\u7684\u670d\u52a1\u5668\u5e8f\u5217\u4e0d\u591f\u5747\u5300\u3002\u6bd4\u5982\uff0c\u670d\u52a1\u5668 [A, B, C] \u5bf9\u5e94\u6743\u91cd [5, 1, 1]\u3002\u8fdb\u884c7\u6b21\u8d1f\u8f7d\u5747\u8861\u540e\uff0c\u9009\u62e9\u51fa\u6765\u7684\u5e8f\u5217\u4e3a [A, A, A, A, A, B, C]\u3002\u524d5\u4e2a\u8bf7\u6c42\u5168\u90e8\u90fd\u843d\u5728\u4e86\u670d\u52a1\u5668 A\u4e0a\uff0c\u8fd9\u5c06\u4f1a\u4f7f\u670d\u52a1\u5668 A \u77ed\u65f6\u95f4\u5185\u63a5\u6536\u5927\u91cf\u7684\u8bf7\u6c42\uff0c\u538b\u529b\u9661\u589e\u3002\u800c B \u548c C \u6b64\u65f6\u65e0\u8bf7\u6c42\uff0c\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u3002\u800c\u6211\u4eec\u671f\u671b\u7684\u7ed3\u679c\u662f\u8fd9\u6837\u7684 [A, A, B, A, C, A, A]\uff0c\u4e0d\u540c\u670d\u52a1\u5668\u53ef\u4ee5\u7a7f\u63d2\u83b7\u53d6\u8bf7\u6c42\u3002\u4e3a\u4e86\u589e\u52a0\u8d1f\u8f7d\u5747\u8861\u7ed3\u679c\u7684\u5e73\u6ed1\u6027\uff0c\u793e\u533a\u518d\u6b21\u5bf9 RoundRobinLoadBalance \u7684\u5b9e\u73b0\u8fdb\u884c\u4e86\u91cd\u6784\uff0c\u8fd9\u6b21\u91cd\u6784\u53c2\u8003\u81ea Nginx \u7684\u5e73\u6ed1\u52a0\u6743\u8f6e\u8be2\u8d1f\u8f7d\u5747\u8861\u3002\u6bcf\u4e2a\u670d\u52a1\u5668\u5bf9\u5e94\u4e24\u4e2a\u6743\u91cd\uff0c\u5206\u522b\u4e3a weight \u548c currentWeight\u3002\u5176\u4e2d weight \u662f\u56fa\u5b9a\u7684\uff0ccurrentWeight \u4f1a\u52a8\u6001\u8c03\u6574\uff0c\u521d\u59cb\u503c\u4e3a0\u3002\u5f53\u6709\u65b0\u7684\u8bf7\u6c42\u8fdb\u6765\u65f6\uff0c\u904d\u5386\u670d\u52a1\u5668\u5217\u8868\uff0c\u8ba9\u5b83\u7684 currentWeight \u52a0\u4e0a\u81ea\u8eab\u6743\u91cd\u3002\u904d\u5386\u5b8c\u6210\u540e\uff0c\u627e\u5230\u6700\u5927\u7684 currentWeight\uff0c\u5e76\u5c06\u5176\u51cf\u53bb\u6743\u91cd\u603b\u548c\uff0c\u7136\u540e\u8fd4\u56de\u76f8\u5e94\u7684\u670d\u52a1\u5668\u5373\u53ef\u3002 \u4e0a\u9762\u63cf\u8ff0\u4e0d\u662f\u5f88\u597d\u7406\u89e3\uff0c\u4e0b\u9762\u8fd8\u662f\u4e3e\u4f8b\u8fdb\u884c\u8bf4\u660e\u3002\u8fd9\u91cc\u4ecd\u7136\u4f7f\u7528\u670d\u52a1\u5668 [A, B, C] \u5bf9\u5e94\u6743\u91cd [5, 1, 1] \u7684\u4f8b\u5b50\u8bf4\u660e\uff0c\u73b0\u5728\u67097\u4e2a\u8bf7\u6c42\u4f9d\u6b21\u8fdb\u5165\u8d1f\u8f7d\u5747\u8861\u903b\u8f91\uff0c\u9009\u62e9\u8fc7\u7a0b\u5982\u4e0b\uff1a \u8bf7\u6c42\u7f16\u53f7 currentWeight \u6570\u7ec4 \u9009\u62e9\u7ed3\u679c \u51cf\u53bb\u6743\u91cd\u603b\u548c\u540e\u7684 currentWeight \u6570\u7ec4 1 [5, 1, 1] A [-2, 1, 1] 2 [3, 2, 2] A [-4, 2, 2] 3 [1, 3, 3] B [1, -4, 3] 4 [6, -3, 4] A [-1, -3, 4] 5 [4, -2, 5] C [4, -2, -2] 6 [9, -1, -1] A [2, -1, -1] 7 [7, 0, 0] A [0, 0, 0] \u5982\u4e0a\uff0c\u7ecf\u8fc7\u5e73\u6ed1\u6027\u5904\u7406\u540e\uff0c\u5f97\u5230\u7684\u670d\u52a1\u5668\u5e8f\u5217\u4e3a [A, A, B, A, C, A, A]\uff0c\u76f8\u6bd4\u4e4b\u524d\u7684\u5e8f\u5217 [A, A, A, A, A, B, C]\uff0c\u5206\u5e03\u6027\u8981\u597d\u4e00\u4e9b\u3002\u521d\u59cb\u60c5\u51b5\u4e0b currentWeight = [0, 0, 0]\uff0c\u7b2c7\u4e2a\u8bf7\u6c42\u5904\u7406\u5b8c\u540e\uff0ccurrentWeight \u518d\u6b21\u53d8\u4e3a [0, 0, 0]\u3002 \u4ee5\u4e0a\u5c31\u662f\u5e73\u6ed1\u52a0\u6743\u8f6e\u8be2\u7684\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6765\u770b\u770b Dubbo-2.6.5 \u662f\u5982\u4f55\u5b9e\u73b0\u4e0a\u9762\u7684\u8ba1\u7b97\u8fc7\u7a0b\u7684\u3002 public class RoundRobinLoadBalance extends AbstractLoadBalance { public static final String NAME = roundrobin ; private static int RECYCLE_PERIOD = 60000; protected static class WeightedRoundRobin { // \u670d\u52a1\u63d0\u4f9b\u8005\u6743\u91cd private int weight; // \u5f53\u524d\u6743\u91cd private AtomicLong current = new AtomicLong(0); // \u6700\u540e\u4e00\u6b21\u66f4\u65b0\u65f6\u95f4 private long lastUpdate; public void setWeight(int weight) { this.weight = weight; // \u521d\u59cb\u60c5\u51b5\u4e0b\uff0ccurrent = 0 current.set(0); } public long increaseCurrent() { // current = current + weight\uff1b return current.addAndGet(weight); } public void sel(int total) { // current = current - total; current.addAndGet(-1 * total); } } // \u5d4c\u5957 Map \u7ed3\u6784\uff0c\u5b58\u50a8\u7684\u6570\u636e\u7ed3\u6784\u793a\u4f8b\u5982\u4e0b\uff1a // { // UserService.query : { // url1 : WeightedRoundRobin@123, // url2 : WeightedRoundRobin@456, // }, // UserService.update : { // url1 : WeightedRoundRobin@123, // url2 : WeightedRoundRobin@456, // } // } // \u6700\u5916\u5c42\u4e3a\u670d\u52a1\u7c7b\u540d + \u65b9\u6cd5\u540d\uff0c\u7b2c\u4e8c\u5c42\u4e3a url \u5230 WeightedRoundRobin \u7684\u6620\u5c04\u5173\u7cfb\u3002 // \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u5c06 url \u770b\u6210\u662f\u670d\u52a1\u63d0\u4f9b\u8005\u7684 id private ConcurrentMap String, ConcurrentMap String, WeightedRoundRobin methodWeightMap = new ConcurrentHashMap String, ConcurrentMap String, WeightedRoundRobin (); // \u539f\u5b50\u66f4\u65b0\u9501 private AtomicBoolean updateLock = new AtomicBoolean(); @Override protected T Invoker T doSelect(List Invoker T invokers, URL url, Invocation invocation) { String key = invokers.get(0).getUrl().getServiceKey() + . + invocation.getMethodName(); // \u83b7\u53d6 url \u5230 WeightedRoundRobin \u6620\u5c04\u8868\uff0c\u5982\u679c\u4e3a\u7a7a\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 ConcurrentMap String, WeightedRoundRobin map = methodWeightMap.get(key); if (map == null) { methodWeightMap.putIfAbsent(key, new ConcurrentHashMap String, WeightedRoundRobin ()); map = methodWeightMap.get(key); } int totalWeight = 0; long maxCurrent = Long.MIN_VALUE; // \u83b7\u53d6\u5f53\u524d\u65f6\u95f4 long now = System.currentTimeMillis(); Invoker T selectedInvoker = null; WeightedRoundRobin selectedWRR = null; // \u4e0b\u9762\u8fd9\u4e2a\u5faa\u73af\u4e3b\u8981\u505a\u4e86\u8fd9\u6837\u51e0\u4ef6\u4e8b\u60c5\uff1a // 1. \u904d\u5386 Invoker \u5217\u8868\uff0c\u68c0\u6d4b\u5f53\u524d Invoker \u662f\u5426\u6709 // \u76f8\u5e94\u7684 WeightedRoundRobin\uff0c\u6ca1\u6709\u5219\u521b\u5efa // 2. \u68c0\u6d4b Invoker \u6743\u91cd\u662f\u5426\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u82e5\u53d8\u5316\u4e86\uff0c // \u5219\u66f4\u65b0 WeightedRoundRobin \u7684 weight \u5b57\u6bb5 // 3. \u8ba9 current \u5b57\u6bb5\u52a0\u4e0a\u81ea\u8eab\u6743\u91cd\uff0c\u7b49\u4ef7\u4e8e current += weight // 4. \u8bbe\u7f6e lastUpdate \u5b57\u6bb5\uff0c\u5373 lastUpdate = now // 5. \u5bfb\u627e\u5177\u6709\u6700\u5927 current \u7684 Invoker\uff0c\u4ee5\u53ca Invoker \u5bf9\u5e94\u7684 WeightedRoundRobin\uff0c // \u6682\u5b58\u8d77\u6765\uff0c\u7559\u4f5c\u540e\u7528 // 6. \u8ba1\u7b97\u6743\u91cd\u603b\u548c for (Invoker T invoker : invokers) { String identifyString = invoker.getUrl().toIdentityString(); WeightedRoundRobin weightedRoundRobin = map.get(identifyString); int weight = getWeight(invoker, invocation); if (weight 0) { weight = 0; } // \u68c0\u6d4b\u5f53\u524d Invoker \u662f\u5426\u6709\u5bf9\u5e94\u7684 WeightedRoundRobin\uff0c\u6ca1\u6709\u5219\u521b\u5efa if (weightedRoundRobin == null) { weightedRoundRobin = new WeightedRoundRobin(); // \u8bbe\u7f6e Invoker \u6743\u91cd weightedRoundRobin.setWeight(weight); // \u5b58\u50a8 url \u552f\u4e00\u6807\u8bc6 identifyString \u5230 weightedRoundRobin \u7684\u6620\u5c04\u5173\u7cfb map.putIfAbsent(identifyString, weightedRoundRobin); weightedRoundRobin = map.get(identifyString); } // Invoker \u6743\u91cd\u4e0d\u7b49\u4e8e WeightedRoundRobin \u4e2d\u4fdd\u5b58\u7684\u6743\u91cd\uff0c\u8bf4\u660e\u6743\u91cd\u53d8\u5316\u4e86\uff0c\u6b64\u65f6\u8fdb\u884c\u66f4\u65b0 if (weight != weightedRoundRobin.getWeight()) { weightedRoundRobin.setWeight(weight); } // \u8ba9 current \u52a0\u4e0a\u81ea\u8eab\u6743\u91cd\uff0c\u7b49\u4ef7\u4e8e current += weight long cur = weightedRoundRobin.increaseCurrent(); // \u8bbe\u7f6e lastUpdate\uff0c\u8868\u793a\u8fd1\u671f\u66f4\u65b0\u8fc7 weightedRoundRobin.setLastUpdate(now); // \u627e\u51fa\u6700\u5927\u7684 current if (cur maxCurrent) { maxCurrent = cur; // \u5c06\u5177\u6709\u6700\u5927 current \u6743\u91cd\u7684 Invoker \u8d4b\u503c\u7ed9 selectedInvoker selectedInvoker = invoker; // \u5c06 Invoker \u5bf9\u5e94\u7684 weightedRoundRobin \u8d4b\u503c\u7ed9 selectedWRR\uff0c\u7559\u4f5c\u540e\u7528 selectedWRR = weightedRoundRobin; } // \u8ba1\u7b97\u6743\u91cd\u603b\u548c totalWeight += weight; } // \u5bf9 identifyString, WeightedRoundRobin \u8fdb\u884c\u68c0\u67e5\uff0c\u8fc7\u6ee4\u6389\u957f\u65f6\u95f4\u672a\u88ab\u66f4\u65b0\u7684\u8282\u70b9\u3002 // \u8be5\u8282\u70b9\u53ef\u80fd\u6302\u4e86\uff0cinvokers \u4e2d\u4e0d\u5305\u542b\u8be5\u8282\u70b9\uff0c\u6240\u4ee5\u8be5\u8282\u70b9\u7684 lastUpdate \u957f\u65f6\u95f4\u65e0\u6cd5\u88ab\u66f4\u65b0\u3002 // \u82e5\u672a\u66f4\u65b0\u65f6\u957f\u8d85\u8fc7\u9608\u503c\u540e\uff0c\u5c31\u4f1a\u88ab\u79fb\u9664\u6389\uff0c\u9ed8\u8ba4\u9608\u503c\u4e3a60\u79d2\u3002 if (!updateLock.get() invokers.size() != map.size()) { if (updateLock.compareAndSet(false, true)) { try { ConcurrentMap String, WeightedRoundRobin newMap = new ConcurrentHashMap String, WeightedRoundRobin (); // \u62f7\u8d1d newMap.putAll(map); // \u904d\u5386\u4fee\u6539\uff0c\u5373\u79fb\u9664\u8fc7\u671f\u8bb0\u5f55 Iterator Entry String, WeightedRoundRobin it = newMap.entrySet().iterator(); while (it.hasNext()) { Entry String, WeightedRoundRobin item = it.next(); if (now - item.getValue().getLastUpdate() RECYCLE_PERIOD) { it.remove(); } } // \u66f4\u65b0\u5f15\u7528 methodWeightMap.put(key, newMap); } finally { updateLock.set(false); } } } if (selectedInvoker != null) { // \u8ba9 current \u51cf\u53bb\u6743\u91cd\u603b\u548c\uff0c\u7b49\u4ef7\u4e8e current -= totalWeight selectedWRR.sel(totalWeight); // \u8fd4\u56de\u5177\u6709\u6700\u5927 current \u7684 Invoker return selectedInvoker; } // should not happen here return invokers.get(0); } } \u4ee5\u4e0a\u5c31\u662f Dubbo-2.6.5 \u7248\u672c\u7684 RoundRobinLoadBalance\uff0c\u5927\u5bb6\u5982\u679c\u80fd\u591f\u7406\u89e3\u5e73\u6ed1\u52a0\u6743\u8f6e\u8be2\u7b97\u6cd5\u7684\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u518d\u914d\u5408\u4ee3\u7801\u4e2d\u6ce8\u91ca\uff0c\u7406\u89e3\u4e0a\u9762\u7684\u4ee3\u7801\u5e94\u8be5\u4e0d\u96be\u3002 3.\u603b\u7ed3 \u672c\u7bc7\u6587\u7ae0\u5bf9 Dubbo \u4e2d\u7684\u51e0\u79cd\u8d1f\u8f7d\u5747\u8861\u5b9e\u73b0\u8fdb\u884c\u4e86\u8be6\u7ec6\u7684\u5206\u6790\uff0c\u5185\u5bb9\u6bd4\u8f83\u591a\uff0c\u5927\u5bb6\u6162\u6162\u6d88\u5316\u3002\u7406\u89e3\u8d1f\u8f7d\u5747\u8861\u4ee3\u7801\u903b\u8f91\u7684\u5173\u952e\u4e4b\u5904\u5728\u4e8e\u5bf9\u80cc\u666f\u77e5\u8bc6\u7684\u7406\u89e3\uff0c\u56e0\u6b64\u5927\u5bb6\u5728\u9605\u8bfb\u6e90\u7801\u524d\uff0c\u52a1\u5fc5\u5148\u4e86\u89e3\u6bcf\u79cd\u8d1f\u8f7d\u5747\u8861\u5bf9\u5e94\u7684\u80cc\u666f\u77e5\u8bc6\u3002","title":"\u8d1f\u8f7d\u5747\u8861"},{"location":"source_code_guide/loadbalance/#1","text":"LoadBalance \u4e2d\u6587\u610f\u601d\u4e3a\u8d1f\u8f7d\u5747\u8861\uff0c\u5b83\u7684\u804c\u8d23\u662f\u5c06\u7f51\u7edc\u8bf7\u6c42\uff0c\u6216\u8005\u5176\u4ed6\u5f62\u5f0f\u7684\u8d1f\u8f7d\u201c\u5747\u644a\u201d\u5230\u4e0d\u540c\u7684\u673a\u5668\u4e0a\u3002\u907f\u514d\u96c6\u7fa4\u4e2d\u90e8\u5206\u670d\u52a1\u5668\u538b\u529b\u8fc7\u5927\uff0c\u800c\u53e6\u4e00\u4e9b\u670d\u52a1\u5668\u6bd4\u8f83\u7a7a\u95f2\u7684\u60c5\u51b5\u3002\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\uff0c\u53ef\u4ee5\u8ba9\u6bcf\u53f0\u670d\u52a1\u5668\u83b7\u53d6\u5230\u9002\u5408\u81ea\u5df1\u5904\u7406\u80fd\u529b\u7684\u8d1f\u8f7d\u3002\u5728\u4e3a\u9ad8\u8d1f\u8f7d\u670d\u52a1\u5668\u5206\u6d41\u7684\u540c\u65f6\uff0c\u8fd8\u53ef\u4ee5\u907f\u514d\u8d44\u6e90\u6d6a\u8d39\uff0c\u4e00\u4e3e\u4e24\u5f97\u3002\u8d1f\u8f7d\u5747\u8861\u53ef\u5206\u4e3a\u8f6f\u4ef6\u8d1f\u8f7d\u5747\u8861\u548c\u786c\u4ef6\u8d1f\u8f7d\u5747\u8861\u3002\u5728\u6211\u4eec\u65e5\u5e38\u5f00\u53d1\u4e2d\uff0c\u4e00\u822c\u5f88\u96be\u63a5\u89e6\u5230\u786c\u4ef6\u8d1f\u8f7d\u5747\u8861\u3002\u4f46\u8f6f\u4ef6\u8d1f\u8f7d\u5747\u8861\u8fd8\u662f\u53ef\u4ee5\u63a5\u89e6\u5230\u7684\uff0c\u6bd4\u5982 Nginx\u3002\u5728 Dubbo \u4e2d\uff0c\u4e5f\u6709\u8d1f\u8f7d\u5747\u8861\u7684\u6982\u5ff5\u548c\u76f8\u5e94\u7684\u5b9e\u73b0\u3002Dubbo \u9700\u8981\u5bf9\u670d\u52a1\u6d88\u8d39\u8005\u7684\u8c03\u7528\u8bf7\u6c42\u8fdb\u884c\u5206\u914d\uff0c\u907f\u514d\u5c11\u6570\u670d\u52a1\u63d0\u4f9b\u8005\u8d1f\u8f7d\u8fc7\u5927\u3002\u670d\u52a1\u63d0\u4f9b\u8005\u8d1f\u8f7d\u8fc7\u5927\uff0c\u4f1a\u5bfc\u81f4\u90e8\u5206\u8bf7\u6c42\u8d85\u65f6\u3002\u56e0\u6b64\u5c06\u8d1f\u8f7d\u5747\u8861\u5230\u6bcf\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u4e0a\uff0c\u662f\u975e\u5e38\u5fc5\u8981\u7684\u3002Dubbo \u63d0\u4f9b\u4e864\u79cd\u8d1f\u8f7d\u5747\u8861\u5b9e\u73b0\uff0c\u5206\u522b\u662f\u57fa\u4e8e\u6743\u91cd\u968f\u673a\u7b97\u6cd5\u7684 RandomLoadBalance\u3001\u57fa\u4e8e\u6700\u5c11\u6d3b\u8dc3\u8c03\u7528\u6570\u7b97\u6cd5\u7684 LeastActiveLoadBalance\u3001\u57fa\u4e8e hash \u4e00\u81f4\u6027\u7684 ConsistentHashLoadBalance\uff0c\u4ee5\u53ca\u57fa\u4e8e\u52a0\u6743\u8f6e\u8be2\u7b97\u6cd5\u7684 RoundRobinLoadBalance\u3002\u8fd9\u51e0\u4e2a\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\u4ee3\u7801\u4e0d\u662f\u5f88\u957f\uff0c\u4f46\u662f\u60f3\u770b\u61c2\u4e5f\u4e0d\u662f\u5f88\u5bb9\u6613\uff0c\u9700\u8981\u5927\u5bb6\u5bf9\u8fd9\u51e0\u4e2a\u7b97\u6cd5\u7684\u539f\u7406\u6709\u4e00\u5b9a\u4e86\u89e3\u624d\u884c\u3002\u5982\u679c\u4e0d\u662f\u5f88\u4e86\u89e3\uff0c\u4e5f\u6ca1\u4e0d\u7528\u592a\u62c5\u5fc3\u3002\u6211\u4eec\u4f1a\u5728\u5206\u6790\u6bcf\u4e2a\u7b97\u6cd5\u7684\u6e90\u7801\u4e4b\u524d\uff0c\u5bf9\u7b97\u6cd5\u539f\u7406\u8fdb\u884c\u7b80\u5355\u7684\u8bb2\u89e3\uff0c\u5e2e\u52a9\u5927\u5bb6\u5efa\u7acb\u521d\u6b65\u7684\u5370\u8c61\u3002 \u672c\u7cfb\u5217\u6587\u7ae0\u5728\u7f16\u5199\u4e4b\u521d\u662f\u57fa\u4e8e Dubbo 2.6.4 \u7684\uff0c\u8fd1\u671f\uff0cDubbo 2.6.5 \u53d1\u5e03\u4e86\uff0c\u5176\u4e2d\u5c31\u6709\u9488\u5bf9\u5bf9\u8d1f\u8f7d\u5747\u8861\u90e8\u5206\u7684\u4f18\u5316\u3002\u56e0\u6b64\u6211\u4eec\u5728\u5206\u6790\u5b8c 2.6.4 \u7248\u672c\u540e\u7684\u6e90\u7801\u540e\uff0c\u4f1a\u53e6\u5916\u5206\u6790 2.6.5 \u66f4\u65b0\u7684\u90e8\u5206\u3002\u5176\u4ed6\u7684\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u8fdb\u5165\u6b63\u9898\u5427\u3002","title":"1.\u7b80\u4ecb"},{"location":"source_code_guide/loadbalance/#2","text":"\u5728 Dubbo \u4e2d\uff0c\u6240\u6709\u8d1f\u8f7d\u5747\u8861\u5b9e\u73b0\u7c7b\u5747\u7ee7\u627f\u81ea AbstractLoadBalance\uff0c\u8be5\u7c7b\u5b9e\u73b0\u4e86 LoadBalance \u63a5\u53e3\uff0c\u5e76\u5c01\u88c5\u4e86\u4e00\u4e9b\u516c\u5171\u7684\u903b\u8f91\u3002\u6240\u4ee5\u5728\u5206\u6790\u8d1f\u8f7d\u5747\u8861\u5b9e\u73b0\u4e4b\u524d\uff0c\u5148\u6765\u770b\u4e00\u4e0b AbstractLoadBalance \u7684\u903b\u8f91\u3002\u9996\u5148\u6765\u770b\u4e00\u4e0b\u8d1f\u8f7d\u5747\u8861\u7684\u5165\u53e3\u65b9\u6cd5 select\uff0c\u5982\u4e0b\uff1a @Override public T Invoker T select(List Invoker T invokers, URL url, Invocation invocation) { if (invokers == null || invokers.isEmpty()) return null; // \u5982\u679c invokers \u5217\u8868\u4e2d\u4ec5\u6709\u4e00\u4e2a Invoker\uff0c\u76f4\u63a5\u8fd4\u56de\u5373\u53ef\uff0c\u65e0\u9700\u8fdb\u884c\u8d1f\u8f7d\u5747\u8861 if (invokers.size() == 1) return invokers.get(0); // \u8c03\u7528 doSelect \u65b9\u6cd5\u8fdb\u884c\u8d1f\u8f7d\u5747\u8861\uff0c\u8be5\u65b9\u6cd5\u4e3a\u62bd\u8c61\u65b9\u6cd5\uff0c\u7531\u5b50\u7c7b\u5b9e\u73b0 return doSelect(invokers, url, invocation); } protected abstract T Invoker T doSelect(List Invoker T invokers, URL url, Invocation invocation); select \u65b9\u6cd5\u7684\u903b\u8f91\u6bd4\u8f83\u7b80\u5355\uff0c\u9996\u5148\u4f1a\u68c0\u6d4b invokers \u96c6\u5408\u7684\u5408\u6cd5\u6027\uff0c\u7136\u540e\u518d\u68c0\u6d4b invokers \u96c6\u5408\u5143\u7d20\u6570\u91cf\u3002\u5982\u679c\u53ea\u5305\u542b\u4e00\u4e2a Invoker\uff0c\u76f4\u63a5\u8fd4\u56de\u8be5 Inovker \u5373\u53ef\u3002\u5982\u679c\u5305\u542b\u591a\u4e2a Invoker\uff0c\u6b64\u65f6\u9700\u8981\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\u9009\u62e9\u4e00\u4e2a Invoker\u3002\u5177\u4f53\u7684\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\u7531\u5b50\u7c7b\u5b9e\u73b0\uff0c\u63a5\u4e0b\u6765\u7ae0\u8282\u4f1a\u5bf9\u8fd9\u4e9b\u5b50\u7c7b\u4e00\u4e00\u8fdb\u884c\u8be6\u7ec6\u5206\u6790\u3002 AbstractLoadBalance \u9664\u4e86\u5b9e\u73b0\u4e86 LoadBalance \u63a5\u53e3\u65b9\u6cd5\uff0c\u8fd8\u5c01\u88c5\u4e86\u4e00\u4e9b\u516c\u5171\u903b\u8f91\uff0c\u6bd4\u5982\u670d\u52a1\u63d0\u4f9b\u8005\u6743\u91cd\u8ba1\u7b97\u903b\u8f91\u3002\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\uff1a protected int getWeight(Invoker ? invoker, Invocation invocation) { // \u4ece url \u4e2d\u83b7\u53d6\u6743\u91cd weight \u914d\u7f6e\u503c int weight = invoker.getUrl().getMethodParameter(invocation.getMethodName(), Constants.WEIGHT_KEY, Constants.DEFAULT_WEIGHT); if (weight 0) { // \u83b7\u53d6\u670d\u52a1\u63d0\u4f9b\u8005\u542f\u52a8\u65f6\u95f4\u6233 long timestamp = invoker.getUrl().getParameter(Constants.REMOTE_TIMESTAMP_KEY, 0L); if (timestamp 0L) { // \u8ba1\u7b97\u670d\u52a1\u63d0\u4f9b\u8005\u8fd0\u884c\u65f6\u957f int uptime = (int) (System.currentTimeMillis() - timestamp); // \u83b7\u53d6\u670d\u52a1\u9884\u70ed\u65f6\u95f4\uff0c\u9ed8\u8ba4\u4e3a10\u5206\u949f int warmup = invoker.getUrl().getParameter(Constants.WARMUP_KEY, Constants.DEFAULT_WARMUP); // \u5982\u679c\u670d\u52a1\u8fd0\u884c\u65f6\u95f4\u5c0f\u4e8e\u9884\u70ed\u65f6\u95f4\uff0c\u5219\u91cd\u65b0\u8ba1\u7b97\u670d\u52a1\u6743\u91cd\uff0c\u5373\u964d\u6743 if (uptime 0 uptime warmup) { // \u91cd\u65b0\u8ba1\u7b97\u670d\u52a1\u6743\u91cd weight = calculateWarmupWeight(uptime, warmup, weight); } } } return weight; } static int calculateWarmupWeight(int uptime, int warmup, int weight) { // \u8ba1\u7b97\u6743\u91cd\uff0c\u4e0b\u9762\u4ee3\u7801\u903b\u8f91\u4e0a\u5f62\u4f3c\u4e8e (uptime / warmup) * weight\u3002 // \u968f\u7740\u670d\u52a1\u8fd0\u884c\u65f6\u95f4 uptime \u589e\u5927\uff0c\u6743\u91cd\u8ba1\u7b97\u503c ww \u4f1a\u6162\u6162\u63a5\u8fd1\u914d\u7f6e\u503c weight int ww = (int) ((float) uptime / ((float) warmup / (float) weight)); return ww 1 ? 1 : (ww weight ? weight : ww); } \u4e0a\u9762\u662f\u6743\u91cd\u7684\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u8be5\u8fc7\u7a0b\u4e3b\u8981\u7528\u4e8e\u4fdd\u8bc1\u5f53\u670d\u52a1\u8fd0\u884c\u65f6\u957f\u5c0f\u4e8e\u670d\u52a1\u9884\u70ed\u65f6\u95f4\u65f6\uff0c\u5bf9\u670d\u52a1\u8fdb\u884c\u964d\u6743\uff0c\u907f\u514d\u8ba9\u670d\u52a1\u5728\u542f\u52a8\u4e4b\u521d\u5c31\u5904\u4e8e\u9ad8\u8d1f\u8f7d\u72b6\u6001\u3002\u670d\u52a1\u9884\u70ed\u662f\u4e00\u4e2a\u4f18\u5316\u624b\u6bb5\uff0c\u4e0e\u6b64\u7c7b\u4f3c\u7684\u8fd8\u6709 JVM \u9884\u70ed\u3002\u4e3b\u8981\u76ee\u7684\u662f\u8ba9\u670d\u52a1\u542f\u52a8\u540e\u201c\u4f4e\u529f\u7387\u201d\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\uff0c\u4f7f\u5176\u6548\u7387\u6162\u6162\u63d0\u5347\u81f3\u6700\u4f73\u72b6\u6001\u3002 \u5173\u4e8e AbstractLoadBalance \u5c31\u5148\u5206\u6790\u5230\u8fd9\uff0c\u63a5\u4e0b\u6765\u5206\u6790\u5404\u4e2a\u5b9e\u73b0\u7c7b\u7684\u4ee3\u7801\u3002\u9996\u5148\uff0c\u6211\u4eec\u4ece Dubbo \u7f3a\u7701\u7684\u5b9e\u73b0\u7c7b RandomLoadBalance \u770b\u8d77\u3002","title":"2.\u6e90\u7801\u5206\u6790"},{"location":"source_code_guide/loadbalance/#21-randomloadbalance","text":"RandomLoadBalance \u662f\u52a0\u6743\u968f\u673a\u7b97\u6cd5\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u5b83\u7684\u7b97\u6cd5\u601d\u60f3\u5f88\u7b80\u5355\u3002\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u7ec4\u670d\u52a1\u5668 servers = [A, B, C]\uff0c\u4ed6\u4eec\u5bf9\u5e94\u7684\u6743\u91cd\u4e3a weights = [5, 3, 2]\uff0c\u6743\u91cd\u603b\u548c\u4e3a10\u3002\u73b0\u5728\u628a\u8fd9\u4e9b\u6743\u91cd\u503c\u5e73\u94fa\u5728\u4e00\u7ef4\u5750\u6807\u503c\u4e0a\uff0c[0, 5) \u533a\u95f4\u5c5e\u4e8e\u670d\u52a1\u5668 A\uff0c[5, 8) \u533a\u95f4\u5c5e\u4e8e\u670d\u52a1\u5668 B\uff0c[8, 10) \u533a\u95f4\u5c5e\u4e8e\u670d\u52a1\u5668 C\u3002\u63a5\u4e0b\u6765\u901a\u8fc7\u968f\u673a\u6570\u751f\u6210\u5668\u751f\u6210\u4e00\u4e2a\u8303\u56f4\u5728 [0, 10) \u4e4b\u95f4\u7684\u968f\u673a\u6570\uff0c\u7136\u540e\u8ba1\u7b97\u8fd9\u4e2a\u968f\u673a\u6570\u4f1a\u843d\u5230\u54ea\u4e2a\u533a\u95f4\u4e0a\u3002\u6bd4\u5982\u6570\u5b573\u4f1a\u843d\u5230\u670d\u52a1\u5668 A \u5bf9\u5e94\u7684\u533a\u95f4\u4e0a\uff0c\u6b64\u65f6\u8fd4\u56de\u670d\u52a1\u5668 A \u5373\u53ef\u3002\u6743\u91cd\u8d8a\u5927\u7684\u673a\u5668\uff0c\u5728\u5750\u6807\u8f74\u4e0a\u5bf9\u5e94\u7684\u533a\u95f4\u8303\u56f4\u5c31\u8d8a\u5927\uff0c\u56e0\u6b64\u968f\u673a\u6570\u751f\u6210\u5668\u751f\u6210\u7684\u6570\u5b57\u5c31\u4f1a\u6709\u66f4\u5927\u7684\u6982\u7387\u843d\u5230\u6b64\u533a\u95f4\u5185\u3002\u53ea\u8981\u968f\u673a\u6570\u751f\u6210\u5668\u4ea7\u751f\u7684\u968f\u673a\u6570\u5206\u5e03\u6027\u5f88\u597d\uff0c\u5728\u7ecf\u8fc7\u591a\u6b21\u9009\u62e9\u540e\uff0c\u6bcf\u4e2a\u670d\u52a1\u5668\u88ab\u9009\u4e2d\u7684\u6b21\u6570\u6bd4\u4f8b\u63a5\u8fd1\u5176\u6743\u91cd\u6bd4\u4f8b\u3002\u6bd4\u5982\uff0c\u7ecf\u8fc7\u4e00\u4e07\u6b21\u9009\u62e9\u540e\uff0c\u670d\u52a1\u5668 A \u88ab\u9009\u4e2d\u7684\u6b21\u6570\u5927\u7ea6\u4e3a5000\u6b21\uff0c\u670d\u52a1\u5668 B \u88ab\u9009\u4e2d\u7684\u6b21\u6570\u7ea6\u4e3a3000\u6b21\uff0c\u670d\u52a1\u5668 C \u88ab\u9009\u4e2d\u7684\u6b21\u6570\u7ea6\u4e3a2000\u6b21\u3002 \u4ee5\u4e0a\u5c31\u662f RandomLoadBalance \u80cc\u540e\u7684\u7b97\u6cd5\u601d\u60f3\uff0c\u6bd4\u8f83\u7b80\u5355\u3002\u4e0b\u9762\u5f00\u59cb\u5206\u6790\u6e90\u7801\u3002 public class RandomLoadBalance extends AbstractLoadBalance { public static final String NAME = random ; private final Random random = new Random(); @Override protected T Invoker T doSelect(List Invoker T invokers, URL url, Invocation invocation) { int length = invokers.size(); int totalWeight = 0; boolean sameWeight = true; // \u4e0b\u9762\u8fd9\u4e2a\u5faa\u73af\u6709\u4e24\u4e2a\u4f5c\u7528\uff0c\u7b2c\u4e00\u662f\u8ba1\u7b97\u603b\u6743\u91cd totalWeight\uff0c // \u7b2c\u4e8c\u662f\u68c0\u6d4b\u6bcf\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u6743\u91cd\u662f\u5426\u76f8\u540c for (int i = 0; i length; i++) { int weight = getWeight(invokers.get(i), invocation); // \u7d2f\u52a0\u6743\u91cd totalWeight += weight; // \u68c0\u6d4b\u5f53\u524d\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u6743\u91cd\u4e0e\u4e0a\u4e00\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u6743\u91cd\u662f\u5426\u76f8\u540c\uff0c // \u4e0d\u76f8\u540c\u7684\u8bdd\uff0c\u5219\u5c06 sameWeight \u7f6e\u4e3a false\u3002 if (sameWeight i 0 weight != getWeight(invokers.get(i - 1), invocation)) { sameWeight = false; } } // \u4e0b\u9762\u7684 if \u5206\u652f\u4e3b\u8981\u7528\u4e8e\u83b7\u53d6\u968f\u673a\u6570\uff0c\u5e76\u8ba1\u7b97\u968f\u673a\u6570\u843d\u5728\u54ea\u4e2a\u533a\u95f4\u4e0a if (totalWeight 0 !sameWeight) { // \u968f\u673a\u83b7\u53d6\u4e00\u4e2a [0, totalWeight) \u533a\u95f4\u5185\u7684\u6570\u5b57 int offset = random.nextInt(totalWeight); // \u5faa\u73af\u8ba9 offset \u6570\u51cf\u53bb\u670d\u52a1\u63d0\u4f9b\u8005\u6743\u91cd\u503c\uff0c\u5f53 offset \u5c0f\u4e8e0\u65f6\uff0c\u8fd4\u56de\u76f8\u5e94\u7684 Invoker\u3002 // \u4e3e\u4f8b\u8bf4\u660e\u4e00\u4e0b\uff0c\u6211\u4eec\u6709 servers = [A, B, C]\uff0cweights = [5, 3, 2]\uff0coffset = 7\u3002 // \u7b2c\u4e00\u6b21\u5faa\u73af\uff0coffset - 5 = 2 0\uff0c\u5373 offset 5\uff0c // \u8868\u660e\u5176\u4e0d\u4f1a\u843d\u5728\u670d\u52a1\u5668 A \u5bf9\u5e94\u7684\u533a\u95f4\u4e0a\u3002 // \u7b2c\u4e8c\u6b21\u5faa\u73af\uff0coffset - 3 = -1 0\uff0c\u5373 5 offset 8\uff0c // \u8868\u660e\u5176\u4f1a\u843d\u5728\u670d\u52a1\u5668 B \u5bf9\u5e94\u7684\u533a\u95f4\u4e0a for (int i = 0; i length; i++) { // \u8ba9\u968f\u673a\u503c offset \u51cf\u53bb\u6743\u91cd\u503c offset -= getWeight(invokers.get(i), invocation); if (offset 0) { // \u8fd4\u56de\u76f8\u5e94\u7684 Invoker return invokers.get(i); } } } // \u5982\u679c\u6240\u6709\u670d\u52a1\u63d0\u4f9b\u8005\u6743\u91cd\u503c\u76f8\u540c\uff0c\u6b64\u65f6\u76f4\u63a5\u968f\u673a\u8fd4\u56de\u4e00\u4e2a\u5373\u53ef return invokers.get(random.nextInt(length)); } } RandomLoadBalance \u7684\u7b97\u6cd5\u601d\u60f3\u6bd4\u8f83\u7b80\u5355\uff0c\u5728\u7ecf\u8fc7\u591a\u6b21\u8bf7\u6c42\u540e\uff0c\u80fd\u591f\u5c06\u8c03\u7528\u8bf7\u6c42\u6309\u7167\u6743\u91cd\u503c\u8fdb\u884c\u201c\u5747\u5300\u201d\u5206\u914d\u3002\u5f53\u7136 RandomLoadBalance \u4e5f\u5b58\u5728\u4e00\u5b9a\u7684\u7f3a\u70b9\uff0c\u5f53\u8c03\u7528\u6b21\u6570\u6bd4\u8f83\u5c11\u65f6\uff0cRandom \u4ea7\u751f\u7684\u968f\u673a\u6570\u53ef\u80fd\u4f1a\u6bd4\u8f83\u96c6\u4e2d\uff0c\u6b64\u65f6\u591a\u6570\u8bf7\u6c42\u4f1a\u843d\u5230\u540c\u4e00\u53f0\u670d\u52a1\u5668\u4e0a\u3002\u8fd9\u4e2a\u7f3a\u70b9\u5e76\u4e0d\u662f\u5f88\u4e25\u91cd\uff0c\u591a\u6570\u60c5\u51b5\u4e0b\u53ef\u4ee5\u5ffd\u7565\u3002RandomLoadBalance \u662f\u4e00\u4e2a\u7b80\u5355\uff0c\u9ad8\u6548\u7684\u8d1f\u8f7d\u5747\u8861\u5b9e\u73b0\uff0c\u56e0\u6b64 Dubbo \u9009\u62e9\u5b83\u4f5c\u4e3a\u7f3a\u7701\u5b9e\u73b0\u3002 \u5173\u4e8e RandomLoadBalance \u5c31\u5148\u5230\u8fd9\u4e86\uff0c\u63a5\u4e0b\u6765\u5206\u6790 LeastActiveLoadBalance\u3002","title":"2.1 RandomLoadBalance"},{"location":"source_code_guide/loadbalance/#22-leastactiveloadbalance","text":"LeastActiveLoadBalance \u7ffb\u8bd1\u8fc7\u6765\u662f\u6700\u5c0f\u6d3b\u8dc3\u6570\u8d1f\u8f7d\u5747\u8861\u3002\u6d3b\u8dc3\u8c03\u7528\u6570\u8d8a\u5c0f\uff0c\u8868\u660e\u8be5\u670d\u52a1\u63d0\u4f9b\u8005\u6548\u7387\u8d8a\u9ad8\uff0c\u5355\u4f4d\u65f6\u95f4\u5185\u53ef\u5904\u7406\u66f4\u591a\u7684\u8bf7\u6c42\u3002\u6b64\u65f6\u5e94\u4f18\u5148\u5c06\u8bf7\u6c42\u5206\u914d\u7ed9\u8be5\u670d\u52a1\u63d0\u4f9b\u8005\u3002\u5728\u5177\u4f53\u5b9e\u73b0\u4e2d\uff0c\u6bcf\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u5bf9\u5e94\u4e00\u4e2a\u6d3b\u8dc3\u6570 active\u3002\u521d\u59cb\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u670d\u52a1\u63d0\u4f9b\u8005\u6d3b\u8dc3\u6570\u5747\u4e3a0\u3002\u6bcf\u6536\u5230\u4e00\u4e2a\u8bf7\u6c42\uff0c\u6d3b\u8dc3\u6570\u52a01\uff0c\u5b8c\u6210\u8bf7\u6c42\u540e\u5219\u5c06\u6d3b\u8dc3\u6570\u51cf1\u3002\u5728\u670d\u52a1\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u6027\u80fd\u597d\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u5904\u7406\u8bf7\u6c42\u7684\u901f\u5ea6\u66f4\u5feb\uff0c\u56e0\u6b64\u6d3b\u8dc3\u6570\u4e0b\u964d\u7684\u4e5f\u8d8a\u5feb\uff0c\u6b64\u65f6\u8fd9\u6837\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u80fd\u591f\u4f18\u5148\u83b7\u53d6\u5230\u65b0\u7684\u670d\u52a1\u8bf7\u6c42\u3001\u8fd9\u5c31\u662f\u6700\u5c0f\u6d3b\u8dc3\u6570\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u3002\u9664\u4e86\u6700\u5c0f\u6d3b\u8dc3\u6570\uff0cLeastActiveLoadBalance \u5728\u5b9e\u73b0\u4e0a\u8fd8\u5f15\u5165\u4e86\u6743\u91cd\u503c\u3002\u6240\u4ee5\u51c6\u786e\u7684\u6765\u8bf4\uff0cLeastActiveLoadBalance \u662f\u57fa\u4e8e\u52a0\u6743\u6700\u5c0f\u6d3b\u8dc3\u6570\u7b97\u6cd5\u5b9e\u73b0\u7684\u3002\u4e3e\u4e2a\u4f8b\u5b50\u8bf4\u660e\u4e00\u4e0b\uff0c\u5728\u4e00\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u96c6\u7fa4\u4e2d\uff0c\u6709\u4e24\u4e2a\u6027\u80fd\u4f18\u5f02\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u3002\u67d0\u4e00\u65f6\u523b\u5b83\u4eec\u7684\u6d3b\u8dc3\u6570\u76f8\u540c\uff0c\u6b64\u65f6 Dubbo \u4f1a\u6839\u636e\u5b83\u4eec\u7684\u6743\u91cd\u53bb\u5206\u914d\u8bf7\u6c42\uff0c\u6743\u91cd\u8d8a\u5927\uff0c\u83b7\u53d6\u5230\u65b0\u8bf7\u6c42\u7684\u6982\u7387\u5c31\u8d8a\u5927\u3002\u5982\u679c\u4e24\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u6743\u91cd\u76f8\u540c\uff0c\u6b64\u65f6\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u5373\u53ef\u3002\u5173\u4e8e LeastActiveLoadBalance \u7684\u80cc\u666f\u77e5\u8bc6\u5c31\u5148\u4ecb\u7ecd\u5230\u8fd9\u91cc\uff0c\u4e0b\u9762\u5f00\u59cb\u5206\u6790\u6e90\u7801\u3002 public class LeastActiveLoadBalance extends AbstractLoadBalance { public static final String NAME = leastactive ; private final Random random = new Random(); @Override protected T Invoker T doSelect(List Invoker T invokers, URL url, Invocation invocation) { int length = invokers.size(); // \u6700\u5c0f\u7684\u6d3b\u8dc3\u6570 int leastActive = -1; // \u5177\u6709\u76f8\u540c\u201c\u6700\u5c0f\u6d3b\u8dc3\u6570\u201d\u7684\u670d\u52a1\u8005\u63d0\u4f9b\u8005\uff08\u4ee5\u4e0b\u7528 Invoker \u4ee3\u79f0\uff09\u6570\u91cf int leastCount = 0; // leastIndexs \u7528\u4e8e\u8bb0\u5f55\u5177\u6709\u76f8\u540c\u201c\u6700\u5c0f\u6d3b\u8dc3\u6570\u201d\u7684 Invoker \u5728 invokers \u5217\u8868\u4e2d\u7684\u4e0b\u6807\u4fe1\u606f int[] leastIndexs = new int[length]; int totalWeight = 0; // \u7b2c\u4e00\u4e2a\u6700\u5c0f\u6d3b\u8dc3\u6570\u7684 Invoker \u6743\u91cd\u503c\uff0c\u7528\u4e8e\u4e0e\u5176\u4ed6\u5177\u6709\u76f8\u540c\u6700\u5c0f\u6d3b\u8dc3\u6570\u7684 Invoker \u7684\u6743\u91cd\u8fdb\u884c\u5bf9\u6bd4\uff0c // \u4ee5\u68c0\u6d4b\u662f\u5426\u201c\u6240\u6709\u5177\u6709\u76f8\u540c\u6700\u5c0f\u6d3b\u8dc3\u6570\u7684 Invoker \u7684\u6743\u91cd\u201d\u5747\u76f8\u7b49 int firstWeight = 0; boolean sameWeight = true; // \u904d\u5386 invokers \u5217\u8868 for (int i = 0; i length; i++) { Invoker T invoker = invokers.get(i); // \u83b7\u53d6 Invoker \u5bf9\u5e94\u7684\u6d3b\u8dc3\u6570 int active = RpcStatus.getStatus(invoker.getUrl(), invocation.getMethodName()).getActive(); // \u83b7\u53d6\u6743\u91cd - \u2b50\ufe0f int weight = invoker.getUrl().getMethodParameter(invocation.getMethodName(), Constants.WEIGHT_KEY, Constants.DEFAULT_WEIGHT); // \u53d1\u73b0\u66f4\u5c0f\u7684\u6d3b\u8dc3\u6570\uff0c\u91cd\u65b0\u5f00\u59cb if (leastActive == -1 || active leastActive) { // \u4f7f\u7528\u5f53\u524d\u6d3b\u8dc3\u6570 active \u66f4\u65b0\u6700\u5c0f\u6d3b\u8dc3\u6570 leastActive leastActive = active; // \u66f4\u65b0 leastCount \u4e3a 1 leastCount = 1; // \u8bb0\u5f55\u5f53\u524d\u4e0b\u6807\u503c\u5230 leastIndexs \u4e2d leastIndexs[0] = i; totalWeight = weight; firstWeight = weight; sameWeight = true; // \u5f53\u524d Invoker \u7684\u6d3b\u8dc3\u6570 active \u4e0e\u6700\u5c0f\u6d3b\u8dc3\u6570 leastActive \u76f8\u540c } else if (active == leastActive) { // \u5728 leastIndexs \u4e2d\u8bb0\u5f55\u4e0b\u5f53\u524d Invoker \u5728 invokers \u96c6\u5408\u4e2d\u7684\u4e0b\u6807 leastIndexs[leastCount++] = i; // \u7d2f\u52a0\u6743\u91cd totalWeight += weight; // \u68c0\u6d4b\u5f53\u524d Invoker \u7684\u6743\u91cd\u4e0e firstWeight \u662f\u5426\u76f8\u7b49\uff0c // \u4e0d\u76f8\u7b49\u5219\u5c06 sameWeight \u7f6e\u4e3a false if (sameWeight i 0 weight != firstWeight) { sameWeight = false; } } } // \u5f53\u53ea\u6709\u4e00\u4e2a Invoker \u5177\u6709\u6700\u5c0f\u6d3b\u8dc3\u6570\uff0c\u6b64\u65f6\u76f4\u63a5\u8fd4\u56de\u8be5 Invoker \u5373\u53ef if (leastCount == 1) { return invokers.get(leastIndexs[0]); } // \u6709\u591a\u4e2a Invoker \u5177\u6709\u76f8\u540c\u7684\u6700\u5c0f\u6d3b\u8dc3\u6570\uff0c\u4f46\u5b83\u4eec\u4e4b\u95f4\u7684\u6743\u91cd\u4e0d\u540c if (!sameWeight totalWeight 0) { // \u968f\u673a\u751f\u6210\u4e00\u4e2a [0, totalWeight) \u4e4b\u95f4\u7684\u6570\u5b57 int offsetWeight = random.nextInt(totalWeight); // \u5faa\u73af\u8ba9\u968f\u673a\u6570\u51cf\u53bb\u5177\u6709\u6700\u5c0f\u6d3b\u8dc3\u6570\u7684 Invoker \u7684\u6743\u91cd\u503c\uff0c // \u5f53 offset \u5c0f\u4e8e\u7b49\u4e8e0\u65f6\uff0c\u8fd4\u56de\u76f8\u5e94\u7684 Invoker for (int i = 0; i leastCount; i++) { int leastIndex = leastIndexs[i]; // \u83b7\u53d6\u6743\u91cd\u503c\uff0c\u5e76\u8ba9\u968f\u673a\u6570\u51cf\u53bb\u6743\u91cd\u503c - \u2b50\ufe0f offsetWeight -= getWeight(invokers.get(leastIndex), invocation); if (offsetWeight = 0) return invokers.get(leastIndex); } } // \u5982\u679c\u6743\u91cd\u76f8\u540c\u6216\u6743\u91cd\u4e3a0\u65f6\uff0c\u968f\u673a\u8fd4\u56de\u4e00\u4e2a Invoker return invokers.get(leastIndexs[random.nextInt(leastCount)]); } } \u4e0a\u9762\u4ee3\u7801\u7684\u903b\u8f91\u6bd4\u8f83\u591a\uff0c\u6211\u4eec\u5728\u4ee3\u7801\u4e2d\u5199\u4e86\u5927\u91cf\u7684\u6ce8\u91ca\uff0c\u6709\u5e2e\u52a9\u5927\u5bb6\u7406\u89e3\u4ee3\u7801\u903b\u8f91\u3002\u4e0b\u9762\u7b80\u5355\u603b\u7ed3\u4e00\u4e0b\u4ee5\u4e0a\u4ee3\u7801\u6240\u505a\u7684\u4e8b\u60c5\uff0c\u5982\u4e0b\uff1a \u904d\u5386 invokers \u5217\u8868\uff0c\u5bfb\u627e\u6d3b\u8dc3\u6570\u6700\u5c0f\u7684 Invoker \u5982\u679c\u6709\u591a\u4e2a Invoker \u5177\u6709\u76f8\u540c\u7684\u6700\u5c0f\u6d3b\u8dc3\u6570\uff0c\u6b64\u65f6\u8bb0\u5f55\u4e0b\u8fd9\u4e9b Invoker \u5728 invokers \u96c6\u5408\u4e2d\u7684\u4e0b\u6807\uff0c\u5e76\u7d2f\u52a0\u5b83\u4eec\u7684\u6743\u91cd\uff0c\u6bd4\u8f83\u5b83\u4eec\u7684\u6743\u91cd\u503c\u662f\u5426\u76f8\u7b49 \u5982\u679c\u53ea\u6709\u4e00\u4e2a Invoker \u5177\u6709\u6700\u5c0f\u7684\u6d3b\u8dc3\u6570\uff0c\u6b64\u65f6\u76f4\u63a5\u8fd4\u56de\u8be5 Invoker \u5373\u53ef \u5982\u679c\u6709\u591a\u4e2a Invoker \u5177\u6709\u6700\u5c0f\u6d3b\u8dc3\u6570\uff0c\u4e14\u5b83\u4eec\u7684\u6743\u91cd\u4e0d\u76f8\u7b49\uff0c\u6b64\u65f6\u5904\u7406\u65b9\u5f0f\u548c RandomLoadBalance \u4e00\u81f4 \u5982\u679c\u6709\u591a\u4e2a Invoker \u5177\u6709\u6700\u5c0f\u6d3b\u8dc3\u6570\uff0c\u4f46\u5b83\u4eec\u7684\u6743\u91cd\u76f8\u7b49\uff0c\u6b64\u65f6\u968f\u673a\u8fd4\u56de\u4e00\u4e2a\u5373\u53ef \u4ee5\u4e0a\u5c31\u662f LeastActiveLoadBalance \u5927\u81f4\u7684\u5b9e\u73b0\u903b\u8f91\uff0c\u5927\u5bb6\u5728\u9605\u8bfb\u7684\u6e90\u7801\u7684\u8fc7\u7a0b\u4e2d\u8981\u6ce8\u610f\u533a\u5206\u6d3b\u8dc3\u6570\u4e0e\u6743\u91cd\u8fd9\u4e24\u4e2a\u6982\u5ff5\uff0c\u4e0d\u8981\u6df7\u4e3a\u4e00\u8c08\u3002 \u4ee5\u4e0a\u5206\u6790\u662f\u57fa\u4e8e Dubbo 2.6.4 \u7248\u672c\u8fdb\u884c\u7684\uff0c\u7531\u4e8e\u8fd1\u671f Dubbo 2.6.5 \u53d1\u5e03\u4e86\uff0c\u5e76\u5bf9 LeastActiveLoadBalance \u8fdb\u884c\u4e86\u4e00\u4e9b\u4fee\u6539\uff0c\u4e0b\u9762\u7b80\u5355\u6765\u4ecb\u7ecd\u4e00\u4e0b\u4fee\u6539\u5185\u5bb9\u3002\u56de\u5230\u4e0a\u9762\u7684\u6e90\u7801\u4e2d\uff0c\u6211\u4eec\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u6807\u6ce8\u4e86\u4e24\u4e2a\u9ec4\u8272\u7684\u4e94\u89d2\u661f\u2b50\ufe0f\u3002\u4e24\u5904\u6807\u8bb0\u5bf9\u5e94\u7684\u4ee3\u7801\u5206\u522b\u5982\u4e0b\uff1a int weight = invoker.getUrl().getMethodParameter(invocation.getMethodName(), Constants.WEIGHT_KEY, Constants.DEFAULT_WEIGHT); offsetWeight -= getWeight(invokers.get(leastIndex), invocation); \u95ee\u9898\u51fa\u5728\u670d\u52a1\u9884\u70ed\u9636\u6bb5\uff0c\u7b2c\u4e00\u884c\u4ee3\u7801\u76f4\u63a5\u4ece url \u4e2d\u53d6\u6743\u91cd\u503c\uff0c\u672a\u88ab\u964d\u6743\u8fc7\u3002\u7b2c\u4e8c\u884c\u4ee3\u7801\u83b7\u53d6\u5230\u7684\u662f\u7ecf\u8fc7\u964d\u6743\u540e\u7684\u6743\u91cd\u3002\u7b2c\u4e00\u884c\u4ee3\u7801\u83b7\u53d6\u5230\u7684\u6743\u91cd\u503c\u6700\u7ec8\u4f1a\u88ab\u7d2f\u52a0\u5230\u6743\u91cd\u603b\u548c totalWeight \u4e2d\uff0c\u8fd9\u4e2a\u65f6\u5019\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u95ee\u9898\u3002offsetWeight \u662f\u4e00\u4e2a\u5728 [0, totalWeight) \u8303\u56f4\u5185\u7684\u968f\u673a\u6570\uff0c\u800c\u5b83\u6240\u51cf\u53bb\u7684\u662f\u7ecf\u8fc7\u964d\u6743\u7684\u6743\u91cd\u3002\u5f88\u6709\u53ef\u80fd\u5728\u7ecf\u8fc7 leastCount \u6b21\u8fd0\u7b97\u540e\uff0coffsetWeight \u4ecd\u7136\u662f\u5927\u4e8e0\u7684\uff0c\u5bfc\u81f4\u65e0\u6cd5\u9009\u4e2d Invoker\u3002\u8fd9\u4e2a\u95ee\u9898\u5bf9\u5e94\u7684 issue \u4e3a #904 \uff0c\u5e76\u5728 pull request #2172 \u4e2d\u88ab\u4fee\u590d\u3002\u5177\u4f53\u7684\u4fee\u590d\u903b\u8f91\u662f\u5c06\u6807\u6ce8\u4e00\u5904\u7684\u4ee3\u7801\u4fee\u6539\u4e3a\uff1a // afterWarmup \u7b49\u4ef7\u4e8e\u4e0a\u9762\u7684 weight \u53d8\u91cf\uff0c\u8fd9\u6837\u547d\u540d\u662f\u4e3a\u4e86\u5f3a\u8c03\u8be5\u53d8\u91cf\u7ecf\u8fc7\u4e86 warmup \u964d\u6743\u5904\u7406 int afterWarmup = getWeight(invoker, invocation); \u53e6\u5916\uff0c2.6.4 \u7248\u672c\u4e2d\u7684 LeastActiveLoadBalance \u8fd8\u6709\u4e00\u4e2a\u7f3a\u9677\uff0c\u5373\u5f53\u4e00\u7ec4 Invoker \u5177\u6709\u76f8\u540c\u7684\u6700\u5c0f\u6d3b\u8dc3\u6570\uff0c\u4e14\u5176\u4e2d\u4e00\u4e2a Invoker \u7684\u6743\u91cd\u503c\u4e3a1\uff0c\u6b64\u65f6\u8fd9\u4e2a Invoker \u65e0\u6cd5\u88ab\u9009\u4e2d\u3002\u7f3a\u9677\u4ee3\u7801\u5982\u4e0b\uff1a int offsetWeight = random.nextInt(totalWeight); for (int i = 0; i leastCount; i++) { int leastIndex = leastIndexs[i]; offsetWeight -= getWeight(invokers.get(leastIndex), invocation); if (offsetWeight = 0) // \u274c return invokers.get(leastIndex); } \u95ee\u9898\u51fa\u5728\u4e86 offsetWeight = 0 \u4e0a\uff0c\u4e3e\u4f8b\u8bf4\u660e\uff0c\u5047\u8bbe\u6709\u4e00\u7ec4 Invoker \u7684\u6743\u91cd\u4e3a 5\u30012\u30011\uff0coffsetWeight \u6700\u5927\u503c\u4e3a 7\u3002\u5047\u8bbe offsetWeight = 7\uff0c\u4f60\u4f1a\u53d1\u73b0\uff0c\u5f53 for \u5faa\u73af\u8fdb\u884c\u7b2c\u4e8c\u6b21\u904d\u5386\u540e offsetWeight = 7 - 5 - 2 = 0\uff0c\u63d0\u524d\u8fd4\u56de\u4e86\u3002\u6b64\u65f6\uff0c\u6b64\u65f6\u6743\u91cd\u4e3a1\u7684 Invoker \u5c31\u6ca1\u6709\u673a\u4f1a\u88ab\u9009\u4e2d\u4e86\u3002\u8be5\u95ee\u9898\u5728 Dubbo 2.6.5 \u4e2d\u88ab\u4fee\u590d\u4e86\uff0c\u4fee\u6539\u540e\u7684\u4ee3\u7801\u5982\u4e0b\uff1a int offsetWeight = random.nextInt(totalWeight) + 1; \u4ee5\u4e0a\u5c31\u662f Dubbo 2.6.5 \u5bf9 LeastActiveLoadBalance \u7684\u66f4\u65b0\uff0c\u5185\u5bb9\u4e0d\u662f\u5f88\u591a\uff0c\u5148\u5206\u6790\u5230\u8fd9\u3002\u63a5\u4e0b\u6765\u5206\u6790\u57fa\u4e8e\u4e00\u81f4\u6027 hash \u601d\u60f3\u7684 ConsistentHashLoadBalance\u3002","title":"2.2 LeastActiveLoadBalance"},{"location":"source_code_guide/loadbalance/#23-consistenthashloadbalance","text":"\u4e00\u81f4\u6027 hash \u7b97\u6cd5\u7531\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u7684 Karger \u53ca\u5176\u5408\u4f5c\u8005\u4e8e1997\u5e74\u63d0\u51fa\u7684\uff0c\u7b97\u6cd5\u63d0\u51fa\u4e4b\u521d\u662f\u7528\u4e8e\u5927\u89c4\u6a21\u7f13\u5b58\u7cfb\u7edf\u7684\u8d1f\u8f7d\u5747\u8861\u3002\u5b83\u7684\u5de5\u4f5c\u8fc7\u7a0b\u662f\u8fd9\u6837\u7684\uff0c\u9996\u5148\u6839\u636e ip \u6216\u8005\u5176\u4ed6\u7684\u4fe1\u606f\u4e3a\u7f13\u5b58\u8282\u70b9\u751f\u6210\u4e00\u4e2a hash\uff0c\u5e76\u5c06\u8fd9\u4e2a hash \u6295\u5c04\u5230 [0, 2 32 - 1] \u7684\u5706\u73af\u4e0a\u3002\u5f53\u6709\u67e5\u8be2\u6216\u5199\u5165\u8bf7\u6c42\u65f6\uff0c\u5219\u4e3a\u7f13\u5b58\u9879\u7684 key \u751f\u6210\u4e00\u4e2a hash \u503c\u3002\u7136\u540e\u67e5\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8e\u6216\u7b49\u4e8e\u8be5 hash \u503c\u7684\u7f13\u5b58\u8282\u70b9\uff0c\u5e76\u5230\u8fd9\u4e2a\u8282\u70b9\u4e2d\u67e5\u8be2\u6216\u5199\u5165\u7f13\u5b58\u9879\u3002\u5982\u679c\u5f53\u524d\u8282\u70b9\u6302\u4e86\uff0c\u5219\u5728\u4e0b\u4e00\u6b21\u67e5\u8be2\u6216\u5199\u5165\u7f13\u5b58\u65f6\uff0c\u4e3a\u7f13\u5b58\u9879\u67e5\u627e\u53e6\u4e00\u4e2a\u5927\u4e8e\u5176 hash \u503c\u7684\u7f13\u5b58\u8282\u70b9\u5373\u53ef\u3002\u5927\u81f4\u6548\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6bcf\u4e2a\u7f13\u5b58\u8282\u70b9\u5728\u5706\u73af\u4e0a\u5360\u636e\u4e00\u4e2a\u4f4d\u7f6e\u3002\u5982\u679c\u7f13\u5b58\u9879\u7684 key \u7684 hash \u503c\u5c0f\u4e8e\u7f13\u5b58\u8282\u70b9 hash \u503c\uff0c\u5219\u5230\u8be5\u7f13\u5b58\u8282\u70b9\u4e2d\u5b58\u50a8\u6216\u8bfb\u53d6\u7f13\u5b58\u9879\u3002\u6bd4\u5982\u4e0b\u9762\u7eff\u8272\u70b9\u5bf9\u5e94\u7684\u7f13\u5b58\u9879\u5c06\u4f1a\u88ab\u5b58\u50a8\u5230 cache-2 \u8282\u70b9\u4e2d\u3002\u7531\u4e8e cache-3 \u6302\u4e86\uff0c\u539f\u672c\u5e94\u8be5\u5b58\u5230\u8be5\u8282\u70b9\u4e2d\u7684\u7f13\u5b58\u9879\u6700\u7ec8\u4f1a\u5b58\u50a8\u5230 cache-4 \u8282\u70b9\u4e2d\u3002 \u4e0b\u9762\u6765\u770b\u770b\u4e00\u81f4\u6027 hash \u5728 Dubbo \u4e2d\u7684\u5e94\u7528\u3002\u6211\u4eec\u628a\u4e0a\u56fe\u7684\u7f13\u5b58\u8282\u70b9\u66ff\u6362\u6210 Dubbo \u7684\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u4e8e\u662f\u5f97\u5230\u4e86\u4e0b\u56fe\uff1a \u8fd9\u91cc\u76f8\u540c\u989c\u8272\u7684\u8282\u70b9\u5747\u5c5e\u4e8e\u540c\u4e00\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u6bd4\u5982 Invoker1-1\uff0cInvoker1-2\uff0c\u2026\u2026, Invoker1-160\u3002\u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u901a\u8fc7\u5f15\u5165\u865a\u62df\u8282\u70b9\uff0c\u8ba9 Invoker \u5728\u5706\u73af\u4e0a\u5206\u6563\u5f00\u6765\uff0c\u907f\u514d\u6570\u636e\u503e\u659c\u95ee\u9898\u3002\u6240\u8c13\u6570\u636e\u503e\u659c\u662f\u6307\uff0c\u7531\u4e8e\u8282\u70b9\u4e0d\u591f\u5206\u6563\uff0c\u5bfc\u81f4\u5927\u91cf\u8bf7\u6c42\u843d\u5230\u4e86\u540c\u4e00\u4e2a\u8282\u70b9\u4e0a\uff0c\u800c\u5176\u4ed6\u8282\u70b9\u53ea\u4f1a\u63a5\u6536\u5230\u4e86\u5c11\u91cf\u8bf7\u6c42\u7684\u60c5\u51b5\u3002\u6bd4\u5982\uff1a \u5982\u4e0a\uff0c\u7531\u4e8e Invoker-1 \u548c Invoker-2 \u5728\u5706\u73af\u4e0a\u5206\u5e03\u4e0d\u5747\uff0c\u5bfc\u81f4\u7cfb\u7edf\u4e2d75%\u7684\u8bf7\u6c42\u90fd\u4f1a\u843d\u5230 Invoker-1 \u4e0a\uff0c\u53ea\u6709 25% \u7684\u8bf7\u6c42\u4f1a\u843d\u5230 Invoker-2 \u4e0a\u3002\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u529e\u6cd5\u662f\u5f15\u5165\u865a\u62df\u8282\u70b9\uff0c\u901a\u8fc7\u865a\u62df\u8282\u70b9\u5747\u8861\u5404\u4e2a\u8282\u70b9\u7684\u8bf7\u6c42\u91cf\u3002 \u5230\u8fd9\u91cc\u80cc\u666f\u77e5\u8bc6\u5c31\u666e\u53ca\u5b8c\u4e86\uff0c\u63a5\u4e0b\u6765\u5f00\u59cb\u5206\u6790\u6e90\u7801\u3002\u6211\u4eec\u5148\u4ece ConsistentHashLoadBalance \u7684 doSelect \u65b9\u6cd5\u5f00\u59cb\u770b\u8d77\uff0c\u5982\u4e0b\uff1a public class ConsistentHashLoadBalance extends AbstractLoadBalance { private final ConcurrentMap String, ConsistentHashSelector ? selectors = new ConcurrentHashMap String, ConsistentHashSelector ? (); @Override protected T Invoker T doSelect(List Invoker T invokers, URL url, Invocation invocation) { String methodName = RpcUtils.getMethodName(invocation); String key = invokers.get(0).getUrl().getServiceKey() + . + methodName; // \u83b7\u53d6 invokers \u539f\u59cb\u7684 hashcode int identityHashCode = System.identityHashCode(invokers); ConsistentHashSelector T selector = (ConsistentHashSelector T ) selectors.get(key); // \u5982\u679c invokers \u662f\u4e00\u4e2a\u65b0\u7684 List \u5bf9\u8c61\uff0c\u610f\u5473\u7740\u670d\u52a1\u63d0\u4f9b\u8005\u6570\u91cf\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u53ef\u80fd\u65b0\u589e\u4e5f\u53ef\u80fd\u51cf\u5c11\u4e86\u3002 // \u6b64\u65f6 selector.identityHashCode != identityHashCode \u6761\u4ef6\u6210\u7acb if (selector == null || selector.identityHashCode != identityHashCode) { // \u521b\u5efa\u65b0\u7684 ConsistentHashSelector selectors.put(key, new ConsistentHashSelector T (invokers, methodName, identityHashCode)); selector = (ConsistentHashSelector T ) selectors.get(key); } // \u8c03\u7528 ConsistentHashSelector \u7684 select \u65b9\u6cd5\u9009\u62e9 Invoker return selector.select(invocation); } private static final class ConsistentHashSelector T {...} } \u5982\u4e0a\uff0cdoSelect \u65b9\u6cd5\u4e3b\u8981\u505a\u4e86\u4e00\u4e9b\u524d\u7f6e\u5de5\u4f5c\uff0c\u6bd4\u5982\u68c0\u6d4b invokers \u5217\u8868\u662f\u4e0d\u662f\u53d8\u52a8\u8fc7\uff0c\u4ee5\u53ca\u521b\u5efa ConsistentHashSelector\u3002\u8fd9\u4e9b\u5de5\u4f5c\u505a\u5b8c\u540e\uff0c\u63a5\u4e0b\u6765\u5f00\u59cb\u8c03\u7528 ConsistentHashSelector \u7684 select \u65b9\u6cd5\u6267\u884c\u8d1f\u8f7d\u5747\u8861\u903b\u8f91\u3002\u5728\u5206\u6790 select \u65b9\u6cd5\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e0b\u4e00\u81f4\u6027 hash \u9009\u62e9\u5668 ConsistentHashSelector \u7684\u521d\u59cb\u5316\u8fc7\u7a0b\uff0c\u5982\u4e0b\uff1a private static final class ConsistentHashSelector T { // \u4f7f\u7528 TreeMap \u5b58\u50a8 Invoker \u865a\u62df\u8282\u70b9 private final TreeMap Long, Invoker T virtualInvokers; private final int replicaNumber; private final int identityHashCode; private final int[] argumentIndex; ConsistentHashSelector(List Invoker T invokers, String methodName, int identityHashCode) { this.virtualInvokers = new TreeMap Long, Invoker T (); this.identityHashCode = identityHashCode; URL url = invokers.get(0).getUrl(); // \u83b7\u53d6\u865a\u62df\u8282\u70b9\u6570\uff0c\u9ed8\u8ba4\u4e3a160 this.replicaNumber = url.getMethodParameter(methodName, hash.nodes , 160); // \u83b7\u53d6\u53c2\u4e0e hash \u8ba1\u7b97\u7684\u53c2\u6570\u4e0b\u6807\u503c\uff0c\u9ed8\u8ba4\u5bf9\u7b2c\u4e00\u4e2a\u53c2\u6570\u8fdb\u884c hash \u8fd0\u7b97 String[] index = Constants.COMMA_SPLIT_PATTERN.split(url.getMethodParameter(methodName, hash.arguments , 0 )); argumentIndex = new int[index.length]; for (int i = 0; i index.length; i++) { argumentIndex[i] = Integer.parseInt(index[i]); } for (Invoker T invoker : invokers) { String address = invoker.getUrl().getAddress(); for (int i = 0; i replicaNumber / 4; i++) { // \u5bf9 address + i \u8fdb\u884c md5 \u8fd0\u7b97\uff0c\u5f97\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3a16\u7684\u5b57\u8282\u6570\u7ec4 byte[] digest = md5(address + i); // \u5bf9 digest \u90e8\u5206\u5b57\u8282\u8fdb\u884c4\u6b21 hash \u8fd0\u7b97\uff0c\u5f97\u5230\u56db\u4e2a\u4e0d\u540c\u7684 long \u578b\u6b63\u6574\u6570 for (int h = 0; h 4; h++) { // h = 0 \u65f6\uff0c\u53d6 digest \u4e2d\u4e0b\u6807\u4e3a 0 ~ 3 \u76844\u4e2a\u5b57\u8282\u8fdb\u884c\u4f4d\u8fd0\u7b97 // h = 1 \u65f6\uff0c\u53d6 digest \u4e2d\u4e0b\u6807\u4e3a 4 ~ 7 \u76844\u4e2a\u5b57\u8282\u8fdb\u884c\u4f4d\u8fd0\u7b97 // h = 2, h = 3 \u65f6\u8fc7\u7a0b\u540c\u4e0a long m = hash(digest, h); // \u5c06 hash \u5230 invoker \u7684\u6620\u5c04\u5173\u7cfb\u5b58\u50a8\u5230 virtualInvokers \u4e2d\uff0c // virtualInvokers \u9700\u8981\u63d0\u4f9b\u9ad8\u6548\u7684\u67e5\u8be2\u64cd\u4f5c\uff0c\u56e0\u6b64\u9009\u7528 TreeMap \u4f5c\u4e3a\u5b58\u50a8\u7ed3\u6784 virtualInvokers.put(m, invoker); } } } } } ConsistentHashSelector \u7684\u6784\u9020\u65b9\u6cd5\u6267\u884c\u4e86\u4e00\u7cfb\u5217\u7684\u521d\u59cb\u5316\u903b\u8f91\uff0c\u6bd4\u5982\u4ece\u914d\u7f6e\u4e2d\u83b7\u53d6\u865a\u62df\u8282\u70b9\u6570\u4ee5\u53ca\u53c2\u4e0e hash \u8ba1\u7b97\u7684\u53c2\u6570\u4e0b\u6807\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u53ea\u4f7f\u7528\u7b2c\u4e00\u4e2a\u53c2\u6570\u8fdb\u884c hash\u3002\u9700\u8981\u7279\u522b\u8bf4\u660e\u7684\u662f\uff0cConsistentHashLoadBalance \u7684\u8d1f\u8f7d\u5747\u8861\u903b\u8f91\u53ea\u53d7\u53c2\u6570\u503c\u5f71\u54cd\uff0c\u5177\u6709\u76f8\u540c\u53c2\u6570\u503c\u7684\u8bf7\u6c42\u5c06\u4f1a\u88ab\u5206\u914d\u7ed9\u540c\u4e00\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u3002ConsistentHashLoadBalance \u4e0d \u5173\u7cfb\u6743\u91cd\uff0c\u56e0\u6b64\u4f7f\u7528\u65f6\u9700\u8981\u6ce8\u610f\u4e00\u4e0b\u3002 \u5728\u83b7\u53d6\u865a\u62df\u8282\u70b9\u6570\u548c\u53c2\u6570\u4e0b\u6807\u914d\u7f6e\u540e\uff0c\u63a5\u4e0b\u6765\u8981\u505a\u7684\u4e8b\u60c5\u662f\u8ba1\u7b97\u865a\u62df\u8282\u70b9 hash \u503c\uff0c\u5e76\u5c06\u865a\u62df\u8282\u70b9\u5b58\u50a8\u5230 TreeMap \u4e2d\u3002\u5230\u6b64\uff0cConsistentHashSelector \u521d\u59cb\u5316\u5de5\u4f5c\u5c31\u5b8c\u6210\u4e86\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6765\u770b\u770b select \u65b9\u6cd5\u7684\u903b\u8f91\u3002 public Invoker T select(Invocation invocation) { // \u5c06\u53c2\u6570\u8f6c\u4e3a key String key = toKey(invocation.getArguments()); // \u5bf9\u53c2\u6570 key \u8fdb\u884c md5 \u8fd0\u7b97 byte[] digest = md5(key); // \u53d6 digest \u6570\u7ec4\u7684\u524d\u56db\u4e2a\u5b57\u8282\u8fdb\u884c hash \u8fd0\u7b97\uff0c\u518d\u5c06 hash \u503c\u4f20\u7ed9 selectForKey \u65b9\u6cd5\uff0c // \u5bfb\u627e\u5408\u9002\u7684 Invoker return selectForKey(hash(digest, 0)); } private Invoker T selectForKey(long hash) { // \u5230 TreeMap \u4e2d\u67e5\u627e\u7b2c\u4e00\u4e2a\u8282\u70b9\u503c\u5927\u4e8e\u6216\u7b49\u4e8e\u5f53\u524d hash \u7684 Invoker Map.Entry Long, Invoker T entry = virtualInvokers.tailMap(hash, true).firstEntry(); // \u5982\u679c hash \u5927\u4e8e Invoker \u5728\u5706\u73af\u4e0a\u6700\u5927\u7684\u4f4d\u7f6e\uff0c\u6b64\u65f6 entry = null\uff0c // \u9700\u8981\u5c06 TreeMap \u7684\u5934\u8282\u70b9\u8d4b\u503c\u7ed9 entry if (entry == null) { entry = virtualInvokers.firstEntry(); } // \u8fd4\u56de Invoker return entry.getValue(); } \u5982\u4e0a\uff0c\u9009\u62e9\u7684\u8fc7\u7a0b\u76f8\u5bf9\u6bd4\u8f83\u7b80\u5355\u4e86\u3002\u9996\u5148\u662f\u5bf9\u53c2\u6570\u8fdb\u884c md5 \u4ee5\u53ca hash \u8fd0\u7b97\uff0c\u5f97\u5230\u4e00\u4e2a hash \u503c\u3002\u7136\u540e\u518d\u62ff\u8fd9\u4e2a\u503c\u5230 TreeMap \u4e2d\u67e5\u627e\u76ee\u6807 Invoker \u5373\u53ef\u3002 \u5230\u6b64\u5173\u4e8e ConsistentHashLoadBalance \u5c31\u5206\u6790\u5b8c\u4e86\u3002\u5728\u9605\u8bfb ConsistentHashLoadBalance \u6e90\u7801\u4e4b\u524d\uff0c\u5927\u5bb6\u4e00\u5b9a\u8981\u5148\u8865\u5145\u80cc\u666f\u77e5\u8bc6\uff0c\u4e0d\u7136\u5f88\u96be\u770b\u61c2\u4ee3\u7801\u903b\u8f91\u3002","title":"2.3 ConsistentHashLoadBalance"},{"location":"source_code_guide/loadbalance/#24-roundrobinloadbalance","text":"\u672c\u8282\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0b Dubbo \u4e2d\u52a0\u6743\u8f6e\u8be2\u8d1f\u8f7d\u5747\u8861\u7684\u5b9e\u73b0 RoundRobinLoadBalance\u3002\u5728\u8be6\u7ec6\u5206\u6790\u6e90\u7801\u524d\uff0c\u6211\u4eec\u5148\u6765\u4e86\u89e3\u4e00\u4e0b\u4ec0\u4e48\u662f\u52a0\u6743\u8f6e\u8be2\u3002\u8fd9\u91cc\u4ece\u6700\u7b80\u5355\u7684\u8f6e\u8be2\u5f00\u59cb\u8bb2\u8d77\uff0c\u6240\u8c13\u8f6e\u8be2\u662f\u6307\u5c06\u8bf7\u6c42\u8f6e\u6d41\u5206\u914d\u7ed9\u6bcf\u53f0\u670d\u52a1\u5668\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u6709\u4e09\u53f0\u670d\u52a1\u5668 A\u3001B\u3001C\u3002\u6211\u4eec\u5c06\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u5206\u914d\u7ed9\u670d\u52a1\u5668 A\uff0c\u7b2c\u4e8c\u4e2a\u8bf7\u6c42\u5206\u914d\u7ed9\u670d\u52a1\u5668 B\uff0c\u7b2c\u4e09\u4e2a\u8bf7\u6c42\u5206\u914d\u7ed9\u670d\u52a1\u5668 C\uff0c\u7b2c\u56db\u4e2a\u8bf7\u6c42\u518d\u6b21\u5206\u914d\u7ed9\u670d\u52a1\u5668 A\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u53eb\u505a\u8f6e\u8be2\u3002\u8f6e\u8be2\u662f\u4e00\u79cd\u65e0\u72b6\u6001\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\uff0c\u5b9e\u73b0\u7b80\u5355\uff0c\u9002\u7528\u4e8e\u6bcf\u53f0\u670d\u52a1\u5668\u6027\u80fd\u76f8\u8fd1\u7684\u573a\u666f\u4e0b\u3002\u4f46\u73b0\u5b9e\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u6bcf\u53f0\u670d\u52a1\u5668\u6027\u80fd\u5747\u76f8\u8fd1\u3002\u5982\u679c\u6211\u4eec\u5c06\u7b49\u91cf\u7684\u8bf7\u6c42\u5206\u914d\u7ed9\u6027\u80fd\u8f83\u5dee\u7684\u670d\u52a1\u5668\uff0c\u8fd9\u663e\u7136\u662f\u4e0d\u5408\u7406\u7684\u3002\u56e0\u6b64\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u9700\u8981\u5bf9\u8f6e\u8be2\u8fc7\u7a0b\u8fdb\u884c\u52a0\u6743\uff0c\u4ee5\u8c03\u63a7\u6bcf\u53f0\u670d\u52a1\u5668\u7684\u8d1f\u8f7d\u3002\u7ecf\u8fc7\u52a0\u6743\u540e\uff0c\u6bcf\u53f0\u670d\u52a1\u5668\u80fd\u591f\u5f97\u5230\u7684\u8bf7\u6c42\u6570\u6bd4\u4f8b\uff0c\u63a5\u8fd1\u6216\u7b49\u4e8e\u4ed6\u4eec\u7684\u6743\u91cd\u6bd4\u3002\u6bd4\u5982\u670d\u52a1\u5668 A\u3001B\u3001C \u6743\u91cd\u6bd4\u4e3a 5:2:1\u3002\u90a3\u4e48\u57288\u6b21\u8bf7\u6c42\u4e2d\uff0c\u670d\u52a1\u5668 A \u5c06\u6536\u5230\u5176\u4e2d\u76845\u6b21\u8bf7\u6c42\uff0c\u670d\u52a1\u5668 B \u4f1a\u6536\u5230\u5176\u4e2d\u76842\u6b21\u8bf7\u6c42\uff0c\u670d\u52a1\u5668 C \u5219\u6536\u5230\u5176\u4e2d\u76841\u6b21\u8bf7\u6c42\u3002 \u4ee5\u4e0a\u5c31\u662f\u52a0\u6743\u8f6e\u8be2\u7684\u7b97\u6cd5\u601d\u60f3\uff0c\u641e\u61c2\u4e86\u8fd9\u4e2a\u601d\u60f3\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u53ef\u4ee5\u5206\u6790\u6e90\u7801\u4e86\u3002\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e0b 2.6.4 \u7248\u672c\u7684 RoundRobinLoadBalance\u3002 public class RoundRobinLoadBalance extends AbstractLoadBalance { public static final String NAME = roundrobin ; private final ConcurrentMap String, AtomicPositiveInteger sequences = new ConcurrentHashMap String, AtomicPositiveInteger (); @Override protected T Invoker T doSelect(List Invoker T invokers, URL url, Invocation invocation) { // key = \u5168\u9650\u5b9a\u7c7b\u540d + . + \u65b9\u6cd5\u540d\uff0c\u6bd4\u5982 com.xxx.DemoService.sayHello String key = invokers.get(0).getUrl().getServiceKey() + . + invocation.getMethodName(); int length = invokers.size(); // \u6700\u5927\u6743\u91cd int maxWeight = 0; // \u6700\u5c0f\u6743\u91cd int minWeight = Integer.MAX_VALUE; final LinkedHashMap Invoker T , IntegerWrapper invokerToWeightMap = new LinkedHashMap Invoker T , IntegerWrapper (); // \u6743\u91cd\u603b\u548c int weightSum = 0; // \u4e0b\u9762\u8fd9\u4e2a\u5faa\u73af\u4e3b\u8981\u7528\u4e8e\u67e5\u627e\u6700\u5927\u548c\u6700\u5c0f\u6743\u91cd\uff0c\u8ba1\u7b97\u6743\u91cd\u603b\u548c\u7b49 for (int i = 0; i length; i++) { int weight = getWeight(invokers.get(i), invocation); // \u83b7\u53d6\u6700\u5927\u548c\u6700\u5c0f\u6743\u91cd maxWeight = Math.max(maxWeight, weight); minWeight = Math.min(minWeight, weight); if (weight 0) { // \u5c06 weight \u5c01\u88c5\u5230 IntegerWrapper \u4e2d invokerToWeightMap.put(invokers.get(i), new IntegerWrapper(weight)); // \u7d2f\u52a0\u6743\u91cd weightSum += weight; } } // \u67e5\u627e key \u5bf9\u5e94\u7684\u5bf9\u5e94 AtomicPositiveInteger \u5b9e\u4f8b\uff0c\u4e3a\u7a7a\u5219\u521b\u5efa\u3002 // \u8fd9\u91cc\u53ef\u4ee5\u628a AtomicPositiveInteger \u770b\u6210\u4e00\u4e2a\u9ed1\u76d2\uff0c\u5927\u5bb6\u53ea\u8981\u77e5\u9053 // AtomicPositiveInteger \u7528\u4e8e\u8bb0\u5f55\u670d\u52a1\u7684\u8c03\u7528\u7f16\u53f7\u5373\u53ef\u3002\u81f3\u4e8e\u7ec6\u8282\uff0c // \u5927\u5bb6\u5982\u679c\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u81ea\u884c\u5206\u6790 AtomicPositiveInteger sequence = sequences.get(key); if (sequence == null) { sequences.putIfAbsent(key, new AtomicPositiveInteger()); sequence = sequences.get(key); } // \u83b7\u53d6\u5f53\u524d\u7684\u8c03\u7528\u7f16\u53f7 int currentSequence = sequence.getAndIncrement(); // \u5982\u679c\u6700\u5c0f\u6743\u91cd\u5c0f\u4e8e\u6700\u5927\u6743\u91cd\uff0c\u8868\u660e\u670d\u52a1\u63d0\u4f9b\u8005\u4e4b\u95f4\u7684\u6743\u91cd\u662f\u4e0d\u76f8\u7b49\u7684 if (maxWeight 0 minWeight maxWeight) { // \u4f7f\u7528\u8c03\u7528\u7f16\u53f7\u5bf9\u6743\u91cd\u603b\u548c\u8fdb\u884c\u53d6\u4f59\u64cd\u4f5c int mod = currentSequence % weightSum; // \u8fdb\u884c maxWeight \u6b21\u904d\u5386 for (int i = 0; i maxWeight; i++) { // \u904d\u5386 invokerToWeightMap for (Map.Entry Invoker T , IntegerWrapper each : invokerToWeightMap.entrySet()) { // \u83b7\u53d6 Invoker final Invoker T k = each.getKey(); // \u83b7\u53d6\u6743\u91cd\u5305\u88c5\u7c7b IntegerWrapper final IntegerWrapper v = each.getValue(); // \u5982\u679c mod = 0\uff0c\u4e14\u6743\u91cd\u5927\u4e8e0\uff0c\u6b64\u65f6\u8fd4\u56de\u76f8\u5e94\u7684 Invoker if (mod == 0 v.getValue() 0) { return k; } // mod != 0\uff0c\u4e14\u6743\u91cd\u5927\u4e8e0\uff0c\u6b64\u65f6\u5bf9\u6743\u91cd\u548c mod \u5206\u522b\u8fdb\u884c\u81ea\u51cf\u64cd\u4f5c if (v.getValue() 0) { v.decrement(); mod--; } } } } // \u670d\u52a1\u63d0\u4f9b\u8005\u4e4b\u95f4\u7684\u6743\u91cd\u76f8\u7b49\uff0c\u6b64\u65f6\u901a\u8fc7\u8f6e\u8be2\u9009\u62e9 Invoker return invokers.get(currentSequence % length); } // IntegerWrapper \u662f\u4e00\u4e2a int \u5305\u88c5\u7c7b\uff0c\u4e3b\u8981\u5305\u542b\u4e86\u4e00\u4e2a\u81ea\u51cf\u65b9\u6cd5\u3002 private static final class IntegerWrapper { private int value; public void decrement() { this.value--; } // \u7701\u7565\u90e8\u5206\u4ee3\u7801 } } \u5982\u4e0a\uff0cRoundRobinLoadBalance \u7684\u6bcf\u884c\u4ee3\u7801\u90fd\u4e0d\u662f\u5f88\u96be\u7406\u89e3\uff0c\u4f46\u662f\u5c06\u5b83\u4eec\u7ec4\u5408\u5728\u4e00\u8d77\u4e4b\u540e\uff0c\u5c31\u4e0d\u662f\u5f88\u597d\u7406\u89e3\u4e86\u3002\u6240\u4ee5\u4e0b\u9762\u6211\u4eec\u4e3e\u4f8b\u8fdb\u884c\u8bf4\u660e\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e09\u53f0\u670d\u52a1\u5668 servers = [A, B, C]\uff0c\u5bf9\u5e94\u7684\u6743\u91cd\u4e3a weights = [2, 5, 1]\u3002\u63a5\u4e0b\u6765\u5bf9\u4e0a\u9762\u7684\u903b\u8f91\u8fdb\u884c\u7b80\u5355\u7684\u6a21\u62df\u3002 mod = 0\uff1a\u6ee1\u8db3\u6761\u4ef6\uff0c\u6b64\u65f6\u76f4\u63a5\u8fd4\u56de\u670d\u52a1\u5668 A mod = 1\uff1a\u9700\u8981\u8fdb\u884c\u4e00\u6b21\u9012\u51cf\u64cd\u4f5c\u624d\u80fd\u6ee1\u8db3\u6761\u4ef6\uff0c\u6b64\u65f6\u8fd4\u56de\u670d\u52a1\u5668 B mod = 2\uff1a\u9700\u8981\u8fdb\u884c\u4e24\u6b21\u9012\u51cf\u64cd\u4f5c\u624d\u80fd\u6ee1\u8db3\u6761\u4ef6\uff0c\u6b64\u65f6\u8fd4\u56de\u670d\u52a1\u5668 C mod = 3\uff1a\u9700\u8981\u8fdb\u884c\u4e09\u6b21\u9012\u51cf\u64cd\u4f5c\u624d\u80fd\u6ee1\u8db3\u6761\u4ef6\uff0c\u7ecf\u8fc7\u9012\u51cf\u540e\uff0c\u670d\u52a1\u5668\u6743\u91cd\u4e3a [1, 4, 0]\uff0c\u6b64\u65f6\u8fd4\u56de\u670d\u52a1\u5668 A mod = 4\uff1a\u9700\u8981\u8fdb\u884c\u56db\u6b21\u9012\u51cf\u64cd\u4f5c\u624d\u80fd\u6ee1\u8db3\u6761\u4ef6\uff0c\u7ecf\u8fc7\u9012\u51cf\u540e\uff0c\u670d\u52a1\u5668\u6743\u91cd\u4e3a [0, 4, 0]\uff0c\u6b64\u65f6\u8fd4\u56de\u670d\u52a1\u5668 B mod = 5\uff1a\u9700\u8981\u8fdb\u884c\u4e94\u6b21\u9012\u51cf\u64cd\u4f5c\u624d\u80fd\u6ee1\u8db3\u6761\u4ef6\uff0c\u7ecf\u8fc7\u9012\u51cf\u540e\uff0c\u670d\u52a1\u5668\u6743\u91cd\u4e3a [0, 3, 0]\uff0c\u6b64\u65f6\u8fd4\u56de\u670d\u52a1\u5668 B mod = 6\uff1a\u9700\u8981\u8fdb\u884c\u516d\u6b21\u9012\u51cf\u64cd\u4f5c\u624d\u80fd\u6ee1\u8db3\u6761\u4ef6\uff0c\u7ecf\u8fc7\u9012\u51cf\u540e\uff0c\u670d\u52a1\u5668\u6743\u91cd\u4e3a [0, 2, 0]\uff0c\u6b64\u65f6\u8fd4\u56de\u670d\u52a1\u5668 B mod = 7\uff1a\u9700\u8981\u8fdb\u884c\u4e03\u6b21\u9012\u51cf\u64cd\u4f5c\u624d\u80fd\u6ee1\u8db3\u6761\u4ef6\uff0c\u7ecf\u8fc7\u9012\u51cf\u540e\uff0c\u670d\u52a1\u5668\u6743\u91cd\u4e3a [0, 1, 0]\uff0c\u6b64\u65f6\u8fd4\u56de\u670d\u52a1\u5668 B \u7ecf\u8fc78\u6b21\u8c03\u7528\u540e\uff0c\u6211\u4eec\u5f97\u5230\u7684\u8d1f\u8f7d\u5747\u8861\u7ed3\u679c\u4e3a [A, B, C, A, B, B, B, B]\uff0c\u6b21\u6570\u6bd4 A:B:C = 2:5:1\uff0c\u7b49\u4e8e\u6743\u91cd\u6bd4\u3002\u5f53 sequence = 8 \u65f6\uff0cmod = 0\uff0c\u6b64\u65f6\u91cd\u5934\u518d\u6765\u3002\u4ece\u4e0a\u9762\u7684\u6a21\u62df\u8fc7\u7a0b\u53ef\u4ee5\u770b\u51fa\uff0c\u5f53 mod = 3 \u540e\uff0c\u670d\u52a1\u5668 C \u5c31\u4e0d\u4f1a\u88ab\u9009\u4e2d\u4e86\uff0c\u56e0\u4e3a\u5b83\u7684\u6743\u91cd\u88ab\u51cf\u4e3a0\u4e86\u3002\u5f53 mod = 4 \u540e\uff0c\u670d\u52a1\u5668 A \u7684\u6743\u91cd\u88ab\u51cf\u4e3a0\uff0c\u6b64\u540e A \u5c31\u4e0d\u4f1a\u518d\u88ab\u9009\u4e2d\u3002 \u4ee5\u4e0a\u662f 2.6.4 \u7248\u672c\u7684 RoundRobinLoadBalance \u5206\u6790\u8fc7\u7a0b\uff0c2.6.4 \u7248\u672c\u7684 RoundRobinLoadBalance \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u5b58\u5728\u7740\u6bd4\u8f83\u4e25\u91cd\u7684\u6027\u80fd\u95ee\u9898\uff0c\u8be5\u95ee\u9898\u6700\u521d\u662f\u5728 issue #2578 \u4e2d\u88ab\u53cd\u9988\u51fa\u6765\u3002\u95ee\u9898\u51fa\u5728\u4e86 Invoker \u7684\u8fd4\u56de\u65f6\u673a\u4e0a\uff0cRoundRobinLoadBalance \u9700\u8981\u5728 mod == 0 v.getValue() 0 \u6761\u4ef6\u6210\u7acb\u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u88ab\u8fd4\u56de\u76f8\u5e94\u7684 Invoker\u3002\u5047\u5982 mod \u5f88\u5927\uff0c\u6bd4\u5982 10000\uff0c50000\uff0c\u751a\u81f3\u66f4\u5927\u65f6\uff0cdoSelect \u65b9\u6cd5\u9700\u8981\u8fdb\u884c\u5f88\u591a\u6b21\u8ba1\u7b97\u624d\u80fd\u5c06 mod \u51cf\u4e3a0\u3002\u7531\u6b64\u53ef\u77e5\uff0cdoSelect \u7684\u6548\u7387\u4e0e mod \u6709\u5173\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(mod)\u3002mod \u53c8\u53d7\u6700\u5927\u6743\u91cd maxWeight \u7684\u5f71\u54cd\uff0c\u56e0\u6b64\u5f53\u67d0\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u914d\u7f6e\u4e86\u975e\u5e38\u5927\u7684\u6743\u91cd\uff0c\u6b64\u65f6 RoundRobinLoadBalance \u4f1a\u4ea7\u751f\u6bd4\u8f83\u4e25\u91cd\u7684\u6027\u80fd\u95ee\u9898\u3002\u8fd9\u4e2a\u95ee\u9898\u88ab\u53cd\u9988\u540e\uff0c\u793e\u533a\u5f88\u5feb\u505a\u4e86\u56de\u5e94\u3002\u5e76\u5bf9 RoundRobinLoadBalance \u7684\u4ee3\u7801\u8fdb\u884c\u4e86\u91cd\u6784\uff0c\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u4f18\u5316\u81f3\u4e86\u5e38\u91cf\u7ea7\u522b\u3002\u8fd9\u4e2a\u4f18\u5316\u53ef\u4ee5\u8bf4\u5f88\u597d\u4e86\uff0c\u4e0b\u9762\u6211\u4eec\u6765\u5b66\u4e60\u4e00\u4e0b\u4f18\u5316\u540e\u7684\u4ee3\u7801\u3002 public class RoundRobinLoadBalance extends AbstractLoadBalance { public static final String NAME = roundrobin ; private final ConcurrentMap String, AtomicPositiveInteger sequences = new ConcurrentHashMap String, AtomicPositiveInteger (); private final ConcurrentMap String, AtomicPositiveInteger indexSeqs = new ConcurrentHashMap String, AtomicPositiveInteger (); @Override protected T Invoker T doSelect(List Invoker T invokers, URL url, Invocation invocation) { String key = invokers.get(0).getUrl().getServiceKey() + . + invocation.getMethodName(); int length = invokers.size(); int maxWeight = 0; int minWeight = Integer.MAX_VALUE; final List Invoker T invokerToWeightList = new ArrayList (); // \u67e5\u627e\u6700\u5927\u548c\u6700\u5c0f\u6743\u91cd for (int i = 0; i length; i++) { int weight = getWeight(invokers.get(i), invocation); maxWeight = Math.max(maxWeight, weight); minWeight = Math.min(minWeight, weight); if (weight 0) { invokerToWeightList.add(invokers.get(i)); } } // \u83b7\u53d6\u5f53\u524d\u670d\u52a1\u5bf9\u5e94\u7684\u8c03\u7528\u5e8f\u5217\u5bf9\u8c61 AtomicPositiveInteger AtomicPositiveInteger sequence = sequences.get(key); if (sequence == null) { // \u521b\u5efa AtomicPositiveInteger\uff0c\u9ed8\u8ba4\u503c\u4e3a0 sequences.putIfAbsent(key, new AtomicPositiveInteger()); sequence = sequences.get(key); } // \u83b7\u53d6\u4e0b\u6807\u5e8f\u5217\u5bf9\u8c61 AtomicPositiveInteger AtomicPositiveInteger indexSeq = indexSeqs.get(key); if (indexSeq == null) { // \u521b\u5efa AtomicPositiveInteger\uff0c\u9ed8\u8ba4\u503c\u4e3a -1 indexSeqs.putIfAbsent(key, new AtomicPositiveInteger(-1)); indexSeq = indexSeqs.get(key); } if (maxWeight 0 minWeight maxWeight) { length = invokerToWeightList.size(); while (true) { int index = indexSeq.incrementAndGet() % length; int currentWeight = sequence.get() % maxWeight; // \u6bcf\u5faa\u73af\u4e00\u8f6e\uff08index = 0\uff09\uff0c\u91cd\u65b0\u8ba1\u7b97 currentWeight if (index == 0) { currentWeight = sequence.incrementAndGet() % maxWeight; } // \u68c0\u6d4b Invoker \u7684\u6743\u91cd\u662f\u5426\u5927\u4e8e currentWeight\uff0c\u5927\u4e8e\u5219\u8fd4\u56de if (getWeight(invokerToWeightList.get(index), invocation) currentWeight) { return invokerToWeightList.get(index); } } } // \u6240\u6709 Invoker \u6743\u91cd\u76f8\u7b49\uff0c\u6b64\u65f6\u8fdb\u884c\u666e\u901a\u7684\u8f6e\u8be2\u5373\u53ef return invokers.get(sequence.incrementAndGet() % length); } } \u4e0a\u9762\u4ee3\u7801\u7684\u903b\u8f91\u662f\u8fd9\u6837\u7684\uff0c\u6bcf\u8fdb\u884c\u4e00\u8f6e\u5faa\u73af\uff0c\u91cd\u65b0\u8ba1\u7b97 currentWeight\u3002\u5982\u679c\u5f53\u524d Invoker \u6743\u91cd\u5927\u4e8e currentWeight\uff0c\u5219\u8fd4\u56de\u8be5 Invoker\u3002\u4e0b\u9762\u4e3e\u4f8b\u8bf4\u660e\uff0c\u5047\u8bbe\u670d\u52a1\u5668 [A, B, C] \u5bf9\u5e94\u6743\u91cd [5, 2, 1]\u3002 \u7b2c\u4e00\u8f6e\u5faa\u73af\uff0ccurrentWeight = 1\uff0c\u53ef\u8fd4\u56de A \u548c B \u7b2c\u4e8c\u8f6e\u5faa\u73af\uff0ccurrentWeight = 2\uff0c\u8fd4\u56de A \u7b2c\u4e09\u8f6e\u5faa\u73af\uff0ccurrentWeight = 3\uff0c\u8fd4\u56de A \u7b2c\u56db\u8f6e\u5faa\u73af\uff0ccurrentWeight = 4\uff0c\u8fd4\u56de A \u7b2c\u4e94\u8f6e\u5faa\u73af\uff0ccurrentWeight = 0\uff0c\u8fd4\u56de A, B, C \u5982\u4e0a\uff0c\u8fd9\u91cc\u7684\u4e00\u8f6e\u5faa\u73af\u662f\u6307 index \u518d\u6b21\u53d8\u4e3a0\u6240\u7ecf\u5386\u8fc7\u7684\u5faa\u73af\uff0c\u8fd9\u91cc\u53ef\u4ee5\u628a index = 0 \u770b\u505a\u662f\u4e00\u8f6e\u5faa\u73af\u7684\u5f00\u59cb\u3002\u6bcf\u4e00\u8f6e\u5faa\u73af\u7684\u6b21\u6570\u4e0e Invoker \u7684\u6570\u91cf\u6709\u5173\uff0cInvoker \u6570\u91cf\u901a\u5e38\u4e0d\u4f1a\u592a\u591a\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u4e0a\u9762\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u5e38\u6570\u7ea7\u3002 \u91cd\u6784\u540e\u7684 RoundRobinLoadBalance \u770b\u8d77\u6765\u5df2\u7ecf\u5f88\u4e0d\u9519\u4e86\uff0c\u4f46\u662f\u5728\u4ee3\u7801\u66f4\u65b0\u4e0d\u4e45\u540e\uff0c\u5f88\u5feb\u53c8\u88ab\u91cd\u6784\u4e86\u3002\u8fd9\u6b21\u91cd\u6784\u539f\u56e0\u662f\u65b0\u7684 RoundRobinLoadBalance \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u9009\u51fa\u7684\u670d\u52a1\u5668\u5e8f\u5217\u4e0d\u591f\u5747\u5300\u3002\u6bd4\u5982\uff0c\u670d\u52a1\u5668 [A, B, C] \u5bf9\u5e94\u6743\u91cd [5, 1, 1]\u3002\u8fdb\u884c7\u6b21\u8d1f\u8f7d\u5747\u8861\u540e\uff0c\u9009\u62e9\u51fa\u6765\u7684\u5e8f\u5217\u4e3a [A, A, A, A, A, B, C]\u3002\u524d5\u4e2a\u8bf7\u6c42\u5168\u90e8\u90fd\u843d\u5728\u4e86\u670d\u52a1\u5668 A\u4e0a\uff0c\u8fd9\u5c06\u4f1a\u4f7f\u670d\u52a1\u5668 A \u77ed\u65f6\u95f4\u5185\u63a5\u6536\u5927\u91cf\u7684\u8bf7\u6c42\uff0c\u538b\u529b\u9661\u589e\u3002\u800c B \u548c C \u6b64\u65f6\u65e0\u8bf7\u6c42\uff0c\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u3002\u800c\u6211\u4eec\u671f\u671b\u7684\u7ed3\u679c\u662f\u8fd9\u6837\u7684 [A, A, B, A, C, A, A]\uff0c\u4e0d\u540c\u670d\u52a1\u5668\u53ef\u4ee5\u7a7f\u63d2\u83b7\u53d6\u8bf7\u6c42\u3002\u4e3a\u4e86\u589e\u52a0\u8d1f\u8f7d\u5747\u8861\u7ed3\u679c\u7684\u5e73\u6ed1\u6027\uff0c\u793e\u533a\u518d\u6b21\u5bf9 RoundRobinLoadBalance \u7684\u5b9e\u73b0\u8fdb\u884c\u4e86\u91cd\u6784\uff0c\u8fd9\u6b21\u91cd\u6784\u53c2\u8003\u81ea Nginx \u7684\u5e73\u6ed1\u52a0\u6743\u8f6e\u8be2\u8d1f\u8f7d\u5747\u8861\u3002\u6bcf\u4e2a\u670d\u52a1\u5668\u5bf9\u5e94\u4e24\u4e2a\u6743\u91cd\uff0c\u5206\u522b\u4e3a weight \u548c currentWeight\u3002\u5176\u4e2d weight \u662f\u56fa\u5b9a\u7684\uff0ccurrentWeight \u4f1a\u52a8\u6001\u8c03\u6574\uff0c\u521d\u59cb\u503c\u4e3a0\u3002\u5f53\u6709\u65b0\u7684\u8bf7\u6c42\u8fdb\u6765\u65f6\uff0c\u904d\u5386\u670d\u52a1\u5668\u5217\u8868\uff0c\u8ba9\u5b83\u7684 currentWeight \u52a0\u4e0a\u81ea\u8eab\u6743\u91cd\u3002\u904d\u5386\u5b8c\u6210\u540e\uff0c\u627e\u5230\u6700\u5927\u7684 currentWeight\uff0c\u5e76\u5c06\u5176\u51cf\u53bb\u6743\u91cd\u603b\u548c\uff0c\u7136\u540e\u8fd4\u56de\u76f8\u5e94\u7684\u670d\u52a1\u5668\u5373\u53ef\u3002 \u4e0a\u9762\u63cf\u8ff0\u4e0d\u662f\u5f88\u597d\u7406\u89e3\uff0c\u4e0b\u9762\u8fd8\u662f\u4e3e\u4f8b\u8fdb\u884c\u8bf4\u660e\u3002\u8fd9\u91cc\u4ecd\u7136\u4f7f\u7528\u670d\u52a1\u5668 [A, B, C] \u5bf9\u5e94\u6743\u91cd [5, 1, 1] \u7684\u4f8b\u5b50\u8bf4\u660e\uff0c\u73b0\u5728\u67097\u4e2a\u8bf7\u6c42\u4f9d\u6b21\u8fdb\u5165\u8d1f\u8f7d\u5747\u8861\u903b\u8f91\uff0c\u9009\u62e9\u8fc7\u7a0b\u5982\u4e0b\uff1a \u8bf7\u6c42\u7f16\u53f7 currentWeight \u6570\u7ec4 \u9009\u62e9\u7ed3\u679c \u51cf\u53bb\u6743\u91cd\u603b\u548c\u540e\u7684 currentWeight \u6570\u7ec4 1 [5, 1, 1] A [-2, 1, 1] 2 [3, 2, 2] A [-4, 2, 2] 3 [1, 3, 3] B [1, -4, 3] 4 [6, -3, 4] A [-1, -3, 4] 5 [4, -2, 5] C [4, -2, -2] 6 [9, -1, -1] A [2, -1, -1] 7 [7, 0, 0] A [0, 0, 0] \u5982\u4e0a\uff0c\u7ecf\u8fc7\u5e73\u6ed1\u6027\u5904\u7406\u540e\uff0c\u5f97\u5230\u7684\u670d\u52a1\u5668\u5e8f\u5217\u4e3a [A, A, B, A, C, A, A]\uff0c\u76f8\u6bd4\u4e4b\u524d\u7684\u5e8f\u5217 [A, A, A, A, A, B, C]\uff0c\u5206\u5e03\u6027\u8981\u597d\u4e00\u4e9b\u3002\u521d\u59cb\u60c5\u51b5\u4e0b currentWeight = [0, 0, 0]\uff0c\u7b2c7\u4e2a\u8bf7\u6c42\u5904\u7406\u5b8c\u540e\uff0ccurrentWeight \u518d\u6b21\u53d8\u4e3a [0, 0, 0]\u3002 \u4ee5\u4e0a\u5c31\u662f\u5e73\u6ed1\u52a0\u6743\u8f6e\u8be2\u7684\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6765\u770b\u770b Dubbo-2.6.5 \u662f\u5982\u4f55\u5b9e\u73b0\u4e0a\u9762\u7684\u8ba1\u7b97\u8fc7\u7a0b\u7684\u3002 public class RoundRobinLoadBalance extends AbstractLoadBalance { public static final String NAME = roundrobin ; private static int RECYCLE_PERIOD = 60000; protected static class WeightedRoundRobin { // \u670d\u52a1\u63d0\u4f9b\u8005\u6743\u91cd private int weight; // \u5f53\u524d\u6743\u91cd private AtomicLong current = new AtomicLong(0); // \u6700\u540e\u4e00\u6b21\u66f4\u65b0\u65f6\u95f4 private long lastUpdate; public void setWeight(int weight) { this.weight = weight; // \u521d\u59cb\u60c5\u51b5\u4e0b\uff0ccurrent = 0 current.set(0); } public long increaseCurrent() { // current = current + weight\uff1b return current.addAndGet(weight); } public void sel(int total) { // current = current - total; current.addAndGet(-1 * total); } } // \u5d4c\u5957 Map \u7ed3\u6784\uff0c\u5b58\u50a8\u7684\u6570\u636e\u7ed3\u6784\u793a\u4f8b\u5982\u4e0b\uff1a // { // UserService.query : { // url1 : WeightedRoundRobin@123, // url2 : WeightedRoundRobin@456, // }, // UserService.update : { // url1 : WeightedRoundRobin@123, // url2 : WeightedRoundRobin@456, // } // } // \u6700\u5916\u5c42\u4e3a\u670d\u52a1\u7c7b\u540d + \u65b9\u6cd5\u540d\uff0c\u7b2c\u4e8c\u5c42\u4e3a url \u5230 WeightedRoundRobin \u7684\u6620\u5c04\u5173\u7cfb\u3002 // \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u5c06 url \u770b\u6210\u662f\u670d\u52a1\u63d0\u4f9b\u8005\u7684 id private ConcurrentMap String, ConcurrentMap String, WeightedRoundRobin methodWeightMap = new ConcurrentHashMap String, ConcurrentMap String, WeightedRoundRobin (); // \u539f\u5b50\u66f4\u65b0\u9501 private AtomicBoolean updateLock = new AtomicBoolean(); @Override protected T Invoker T doSelect(List Invoker T invokers, URL url, Invocation invocation) { String key = invokers.get(0).getUrl().getServiceKey() + . + invocation.getMethodName(); // \u83b7\u53d6 url \u5230 WeightedRoundRobin \u6620\u5c04\u8868\uff0c\u5982\u679c\u4e3a\u7a7a\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 ConcurrentMap String, WeightedRoundRobin map = methodWeightMap.get(key); if (map == null) { methodWeightMap.putIfAbsent(key, new ConcurrentHashMap String, WeightedRoundRobin ()); map = methodWeightMap.get(key); } int totalWeight = 0; long maxCurrent = Long.MIN_VALUE; // \u83b7\u53d6\u5f53\u524d\u65f6\u95f4 long now = System.currentTimeMillis(); Invoker T selectedInvoker = null; WeightedRoundRobin selectedWRR = null; // \u4e0b\u9762\u8fd9\u4e2a\u5faa\u73af\u4e3b\u8981\u505a\u4e86\u8fd9\u6837\u51e0\u4ef6\u4e8b\u60c5\uff1a // 1. \u904d\u5386 Invoker \u5217\u8868\uff0c\u68c0\u6d4b\u5f53\u524d Invoker \u662f\u5426\u6709 // \u76f8\u5e94\u7684 WeightedRoundRobin\uff0c\u6ca1\u6709\u5219\u521b\u5efa // 2. \u68c0\u6d4b Invoker \u6743\u91cd\u662f\u5426\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u82e5\u53d8\u5316\u4e86\uff0c // \u5219\u66f4\u65b0 WeightedRoundRobin \u7684 weight \u5b57\u6bb5 // 3. \u8ba9 current \u5b57\u6bb5\u52a0\u4e0a\u81ea\u8eab\u6743\u91cd\uff0c\u7b49\u4ef7\u4e8e current += weight // 4. \u8bbe\u7f6e lastUpdate \u5b57\u6bb5\uff0c\u5373 lastUpdate = now // 5. \u5bfb\u627e\u5177\u6709\u6700\u5927 current \u7684 Invoker\uff0c\u4ee5\u53ca Invoker \u5bf9\u5e94\u7684 WeightedRoundRobin\uff0c // \u6682\u5b58\u8d77\u6765\uff0c\u7559\u4f5c\u540e\u7528 // 6. \u8ba1\u7b97\u6743\u91cd\u603b\u548c for (Invoker T invoker : invokers) { String identifyString = invoker.getUrl().toIdentityString(); WeightedRoundRobin weightedRoundRobin = map.get(identifyString); int weight = getWeight(invoker, invocation); if (weight 0) { weight = 0; } // \u68c0\u6d4b\u5f53\u524d Invoker \u662f\u5426\u6709\u5bf9\u5e94\u7684 WeightedRoundRobin\uff0c\u6ca1\u6709\u5219\u521b\u5efa if (weightedRoundRobin == null) { weightedRoundRobin = new WeightedRoundRobin(); // \u8bbe\u7f6e Invoker \u6743\u91cd weightedRoundRobin.setWeight(weight); // \u5b58\u50a8 url \u552f\u4e00\u6807\u8bc6 identifyString \u5230 weightedRoundRobin \u7684\u6620\u5c04\u5173\u7cfb map.putIfAbsent(identifyString, weightedRoundRobin); weightedRoundRobin = map.get(identifyString); } // Invoker \u6743\u91cd\u4e0d\u7b49\u4e8e WeightedRoundRobin \u4e2d\u4fdd\u5b58\u7684\u6743\u91cd\uff0c\u8bf4\u660e\u6743\u91cd\u53d8\u5316\u4e86\uff0c\u6b64\u65f6\u8fdb\u884c\u66f4\u65b0 if (weight != weightedRoundRobin.getWeight()) { weightedRoundRobin.setWeight(weight); } // \u8ba9 current \u52a0\u4e0a\u81ea\u8eab\u6743\u91cd\uff0c\u7b49\u4ef7\u4e8e current += weight long cur = weightedRoundRobin.increaseCurrent(); // \u8bbe\u7f6e lastUpdate\uff0c\u8868\u793a\u8fd1\u671f\u66f4\u65b0\u8fc7 weightedRoundRobin.setLastUpdate(now); // \u627e\u51fa\u6700\u5927\u7684 current if (cur maxCurrent) { maxCurrent = cur; // \u5c06\u5177\u6709\u6700\u5927 current \u6743\u91cd\u7684 Invoker \u8d4b\u503c\u7ed9 selectedInvoker selectedInvoker = invoker; // \u5c06 Invoker \u5bf9\u5e94\u7684 weightedRoundRobin \u8d4b\u503c\u7ed9 selectedWRR\uff0c\u7559\u4f5c\u540e\u7528 selectedWRR = weightedRoundRobin; } // \u8ba1\u7b97\u6743\u91cd\u603b\u548c totalWeight += weight; } // \u5bf9 identifyString, WeightedRoundRobin \u8fdb\u884c\u68c0\u67e5\uff0c\u8fc7\u6ee4\u6389\u957f\u65f6\u95f4\u672a\u88ab\u66f4\u65b0\u7684\u8282\u70b9\u3002 // \u8be5\u8282\u70b9\u53ef\u80fd\u6302\u4e86\uff0cinvokers \u4e2d\u4e0d\u5305\u542b\u8be5\u8282\u70b9\uff0c\u6240\u4ee5\u8be5\u8282\u70b9\u7684 lastUpdate \u957f\u65f6\u95f4\u65e0\u6cd5\u88ab\u66f4\u65b0\u3002 // \u82e5\u672a\u66f4\u65b0\u65f6\u957f\u8d85\u8fc7\u9608\u503c\u540e\uff0c\u5c31\u4f1a\u88ab\u79fb\u9664\u6389\uff0c\u9ed8\u8ba4\u9608\u503c\u4e3a60\u79d2\u3002 if (!updateLock.get() invokers.size() != map.size()) { if (updateLock.compareAndSet(false, true)) { try { ConcurrentMap String, WeightedRoundRobin newMap = new ConcurrentHashMap String, WeightedRoundRobin (); // \u62f7\u8d1d newMap.putAll(map); // \u904d\u5386\u4fee\u6539\uff0c\u5373\u79fb\u9664\u8fc7\u671f\u8bb0\u5f55 Iterator Entry String, WeightedRoundRobin it = newMap.entrySet().iterator(); while (it.hasNext()) { Entry String, WeightedRoundRobin item = it.next(); if (now - item.getValue().getLastUpdate() RECYCLE_PERIOD) { it.remove(); } } // \u66f4\u65b0\u5f15\u7528 methodWeightMap.put(key, newMap); } finally { updateLock.set(false); } } } if (selectedInvoker != null) { // \u8ba9 current \u51cf\u53bb\u6743\u91cd\u603b\u548c\uff0c\u7b49\u4ef7\u4e8e current -= totalWeight selectedWRR.sel(totalWeight); // \u8fd4\u56de\u5177\u6709\u6700\u5927 current \u7684 Invoker return selectedInvoker; } // should not happen here return invokers.get(0); } } \u4ee5\u4e0a\u5c31\u662f Dubbo-2.6.5 \u7248\u672c\u7684 RoundRobinLoadBalance\uff0c\u5927\u5bb6\u5982\u679c\u80fd\u591f\u7406\u89e3\u5e73\u6ed1\u52a0\u6743\u8f6e\u8be2\u7b97\u6cd5\u7684\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u518d\u914d\u5408\u4ee3\u7801\u4e2d\u6ce8\u91ca\uff0c\u7406\u89e3\u4e0a\u9762\u7684\u4ee3\u7801\u5e94\u8be5\u4e0d\u96be\u3002","title":"2.4 RoundRobinLoadBalance"},{"location":"source_code_guide/loadbalance/#3","text":"\u672c\u7bc7\u6587\u7ae0\u5bf9 Dubbo \u4e2d\u7684\u51e0\u79cd\u8d1f\u8f7d\u5747\u8861\u5b9e\u73b0\u8fdb\u884c\u4e86\u8be6\u7ec6\u7684\u5206\u6790\uff0c\u5185\u5bb9\u6bd4\u8f83\u591a\uff0c\u5927\u5bb6\u6162\u6162\u6d88\u5316\u3002\u7406\u89e3\u8d1f\u8f7d\u5747\u8861\u4ee3\u7801\u903b\u8f91\u7684\u5173\u952e\u4e4b\u5904\u5728\u4e8e\u5bf9\u80cc\u666f\u77e5\u8bc6\u7684\u7406\u89e3\uff0c\u56e0\u6b64\u5927\u5bb6\u5728\u9605\u8bfb\u6e90\u7801\u524d\uff0c\u52a1\u5fc5\u5148\u4e86\u89e3\u6bcf\u79cd\u8d1f\u8f7d\u5747\u8861\u5bf9\u5e94\u7684\u80cc\u666f\u77e5\u8bc6\u3002","title":"3.\u603b\u7ed3"},{"location":"source_code_guide/refer-service/","text":"1. \u7b80\u4ecb \u4e0a\u4e00\u7bc7\u6587\u7ae0\u8be6\u7ec6\u5206\u6790\u4e86\u670d\u52a1\u5bfc\u51fa\u7684\u8fc7\u7a0b\uff0c\u672c\u7bc7\u6587\u7ae0\u6211\u4eec\u8d81\u70ed\u6253\u94c1\uff0c\u7ee7\u7eed\u5206\u6790\u670d\u52a1\u5f15\u7528\u8fc7\u7a0b\u3002\u5728 Dubbo \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u5f15\u7528\u8fdc\u7a0b\u670d\u52a1\u3002\u7b2c\u4e00\u79cd\u662f\u4f7f\u7528\u670d\u52a1\u76f4\u8fde\u7684\u65b9\u5f0f\u5f15\u7528\u670d\u52a1\uff0c\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u662f\u57fa\u4e8e\u6ce8\u518c\u4e2d\u5fc3\u8fdb\u884c\u5f15\u7528\u3002\u670d\u52a1\u76f4\u8fde\u7684\u65b9\u5f0f\u4ec5\u9002\u5408\u5728\u8c03\u8bd5\u6216\u6d4b\u8bd5\u670d\u52a1\u7684\u573a\u666f\u4e0b\u4f7f\u7528\uff0c\u4e0d\u9002\u5408\u5728\u7ebf\u4e0a\u73af\u5883\u4f7f\u7528\u3002\u56e0\u6b64\uff0c\u672c\u6587\u6211\u5c06\u91cd\u70b9\u5206\u6790\u901a\u8fc7\u6ce8\u518c\u4e2d\u5fc3\u5f15\u7528\u670d\u52a1\u7684\u8fc7\u7a0b\u3002\u4ece\u6ce8\u518c\u4e2d\u5fc3\u4e2d\u83b7\u53d6\u670d\u52a1\u914d\u7f6e\u53ea\u662f\u670d\u52a1\u5f15\u7528\u8fc7\u7a0b\u4e2d\u7684\u4e00\u73af\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u670d\u52a1\u6d88\u8d39\u8005\u8fd8\u9700\u8981\u7ecf\u5386 Invoker \u521b\u5efa\u3001\u4ee3\u7406\u7c7b\u521b\u5efa\u7b49\u6b65\u9aa4\u3002\u8fd9\u4e9b\u6b65\u9aa4\uff0c\u5c06\u5728\u540e\u7eed\u7ae0\u8282\u4e2d\u4e00\u4e00\u8fdb\u884c\u5206\u6790\u3002 2.\u670d\u52a1\u5f15\u7528\u539f\u7406 Dubbo \u670d\u52a1\u5f15\u7528\u7684\u65f6\u673a\u6709\u4e24\u4e2a\uff0c\u7b2c\u4e00\u4e2a\u662f\u5728 Spring \u5bb9\u5668\u8c03\u7528 ReferenceBean \u7684 afterPropertiesSet \u65b9\u6cd5\u65f6\u5f15\u7528\u670d\u52a1\uff0c\u7b2c\u4e8c\u4e2a\u662f\u5728 ReferenceBean \u5bf9\u5e94\u7684\u670d\u52a1\u88ab\u6ce8\u5165\u5230\u5176\u4ed6\u7c7b\u4e2d\u65f6\u5f15\u7528\u3002\u8fd9\u4e24\u4e2a\u5f15\u7528\u670d\u52a1\u7684\u65f6\u673a\u533a\u522b\u5728\u4e8e\uff0c\u7b2c\u4e00\u4e2a\u662f\u997f\u6c49\u5f0f\u7684\uff0c\u7b2c\u4e8c\u4e2a\u662f\u61d2\u6c49\u5f0f\u7684\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cDubbo \u4f7f\u7528\u61d2\u6c49\u5f0f\u5f15\u7528\u670d\u52a1\u3002\u5982\u679c\u9700\u8981\u4f7f\u7528\u997f\u6c49\u5f0f\uff0c\u53ef\u901a\u8fc7\u914d\u7f6e \\ dubbo:reference> \u7684 init \u5c5e\u6027\u5f00\u542f\u3002\u4e0b\u9762\u6211\u4eec\u6309\u7167 Dubbo \u9ed8\u8ba4\u914d\u7f6e\u8fdb\u884c\u5206\u6790\uff0c\u6574\u4e2a\u5206\u6790\u8fc7\u7a0b\u4ece ReferenceBean \u7684 getObject \u65b9\u6cd5\u5f00\u59cb\u3002\u5f53\u6211\u4eec\u7684\u670d\u52a1\u88ab\u6ce8\u5165\u5230\u5176\u4ed6\u7c7b\u4e2d\u65f6\uff0cSpring \u4f1a\u7b2c\u4e00\u65f6\u95f4\u8c03\u7528 getObject \u65b9\u6cd5\uff0c\u5e76\u7531\u8be5\u65b9\u6cd5\u6267\u884c\u670d\u52a1\u5f15\u7528\u903b\u8f91\u3002\u6309\u7167\u60ef\u4f8b\uff0c\u5728\u8fdb\u884c\u5177\u4f53\u5de5\u4f5c\u4e4b\u524d\uff0c\u9700\u5148\u8fdb\u884c\u914d\u7f6e\u68c0\u67e5\u4e0e\u6536\u96c6\u5de5\u4f5c\u3002\u63a5\u7740\u6839\u636e\u6536\u96c6\u5230\u7684\u4fe1\u606f\u51b3\u5b9a\u670d\u52a1\u7528\u7684\u65b9\u5f0f\uff0c\u6709\u4e09\u79cd\uff0c\u7b2c\u4e00\u79cd\u662f\u5f15\u7528\u672c\u5730 (JVM) \u670d\u52a1\uff0c\u7b2c\u4e8c\u662f\u901a\u8fc7\u76f4\u8fde\u65b9\u5f0f\u5f15\u7528\u8fdc\u7a0b\u670d\u52a1\uff0c\u7b2c\u4e09\u662f\u901a\u8fc7\u6ce8\u518c\u4e2d\u5fc3\u5f15\u7528\u8fdc\u7a0b\u670d\u52a1\u3002\u4e0d\u7ba1\u662f\u54ea\u79cd\u5f15\u7528\u65b9\u5f0f\uff0c\u6700\u540e\u90fd\u4f1a\u5f97\u5230\u4e00\u4e2a Invoker \u5b9e\u4f8b\u3002\u5982\u679c\u6709\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3\uff0c\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u8fd9\u4e2a\u65f6\u5019\u4f1a\u5f97\u5230\u4e00\u7ec4 Invoker \u5b9e\u4f8b\uff0c\u6b64\u65f6\u9700\u8981\u901a\u8fc7\u96c6\u7fa4\u7ba1\u7406\u7c7b Cluster \u5c06\u591a\u4e2a Invoker \u5408\u5e76\u6210\u4e00\u4e2a\u5b9e\u4f8b\u3002\u5408\u5e76\u540e\u7684 Invoker \u5b9e\u4f8b\u5df2\u7ecf\u5177\u5907\u8c03\u7528\u672c\u5730\u6216\u8fdc\u7a0b\u670d\u52a1\u7684\u80fd\u529b\u4e86\uff0c\u4f46\u5e76\u4e0d\u80fd\u5c06\u6b64\u5b9e\u4f8b\u66b4\u9732\u7ed9\u7528\u6237\u4f7f\u7528\uff0c\u8fd9\u4f1a\u5bf9\u7528\u6237\u4e1a\u52a1\u4ee3\u7801\u9020\u6210\u4fb5\u5165\u3002\u6b64\u65f6\u6846\u67b6\u8fd8\u9700\u8981\u901a\u8fc7\u4ee3\u7406\u5de5\u5382\u7c7b (ProxyFactory) \u4e3a\u670d\u52a1\u63a5\u53e3\u751f\u6210\u4ee3\u7406\u7c7b\uff0c\u5e76\u8ba9\u4ee3\u7406\u7c7b\u53bb\u8c03\u7528 Invoker \u903b\u8f91\u3002\u907f\u514d\u4e86 Dubbo \u6846\u67b6\u4ee3\u7801\u5bf9\u4e1a\u52a1\u4ee3\u7801\u7684\u4fb5\u5165\uff0c\u540c\u65f6\u4e5f\u8ba9\u6846\u67b6\u66f4\u5bb9\u6613\u4f7f\u7528\u3002 \u4ee5\u4e0a\u5c31\u662f\u670d\u52a1\u5f15\u7528\u7684\u5927\u81f4\u539f\u7406\uff0c\u4e0b\u9762\u6211\u4eec\u6df1\u5165\u5230\u4ee3\u7801\u4e2d\uff0c\u8be6\u7ec6\u5206\u6790\u670d\u52a1\u5f15\u7528\u7ec6\u8282\u3002 3.\u6e90\u7801\u5206\u6790 \u670d\u52a1\u5f15\u7528\u7684\u5165\u53e3\u65b9\u6cd5\u4e3a ReferenceBean \u7684 getObject \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u5b9a\u4e49\u5728 Spring \u7684 FactoryBean \u63a5\u53e3\u4e2d\uff0cReferenceBean \u5b9e\u73b0\u4e86\u8fd9\u4e2a\u65b9\u6cd5\u3002\u5b9e\u73b0\u4ee3\u7801\u5982\u4e0b\uff1a public Object getObject() throws Exception { return get(); } public synchronized T get() { if (destroyed) { throw new IllegalStateException( Already destroyed! ); } // \u68c0\u6d4b ref \u662f\u5426\u4e3a\u7a7a\uff0c\u4e3a\u7a7a\u5219\u901a\u8fc7 init \u65b9\u6cd5\u521b\u5efa if (ref == null) { // init \u65b9\u6cd5\u4e3b\u8981\u7528\u4e8e\u5904\u7406\u914d\u7f6e\uff0c\u4ee5\u53ca\u8c03\u7528 createProxy \u751f\u6210\u4ee3\u7406\u7c7b init(); } return ref; } \u4ee5\u4e0a\u4e24\u4e2a\u65b9\u6cd5\u7684\u4ee3\u7801\u6bd4\u8f83\u7b80\u77ed\uff0c\u5e76\u4e0d\u96be\u7406\u89e3\u3002\u8fd9\u91cc\u9700\u8981\u7279\u522b\u8bf4\u660e\u4e00\u4e0b\uff0c\u5982\u679c\u4f60\u5bf9 2.6.4 \u53ca\u4ee5\u4e0b\u7248\u672c\u7684 getObject \u65b9\u6cd5\u8fdb\u884c\u8c03\u8bd5\u65f6\uff0c\u4f1a\u78b0\u5230\u6bd4\u8f83\u5947\u602a\u7684\u7684\u95ee\u9898\u3002\u8fd9\u91cc\u5047\u8bbe\u4f60\u4f7f\u7528 IDEA\uff0c\u4e14\u4fdd\u6301\u4e86 IDEA \u7684\u9ed8\u8ba4\u914d\u7f6e\u3002\u5f53\u4f60\u9762\u8c03\u8bd5\u5230 get \u65b9\u6cd5\u7684 if (ref == null) \u65f6\uff0c\u4f60\u4f1a\u53d1\u73b0 ref \u4e0d\u4e3a\u7a7a\uff0c\u5bfc\u81f4\u4f60\u65e0\u6cd5\u8fdb\u5165\u5230 init \u65b9\u6cd5\u4e2d\u7ee7\u7eed\u8c03\u8bd5\u3002\u5bfc\u81f4\u8fd9\u4e2a\u73b0\u8c61\u7684\u539f\u56e0\u662f Dubbo \u6846\u67b6\u672c\u8eab\u6709\u4e00\u4e9b\u5c0f\u95ee\u9898\u3002\u8be5\u95ee\u9898\u5df2\u7ecf\u5728 pull request #2754 \u4fee\u590d\u4e86\u6b64\u95ee\u9898\uff0c\u5e76\u8ddf\u968f 2.6.5 \u7248\u672c\u53d1\u5e03\u4e86\u3002\u5982\u679c\u4f60\u6b63\u5728\u5b66\u4e60 2.6.4 \u53ca\u4ee5\u4e0b\u7248\u672c\uff0c\u53ef\u901a\u8fc7\u4fee\u6539 IDEA \u914d\u7f6e\u89c4\u907f\u8fd9\u4e2a\u95ee\u9898\u3002\u9996\u5148 IDEA \u914d\u7f6e\u5f39\u7a97\u4e2d\u641c\u7d22 toString\uff0c\u7136\u540e\u53d6\u6d88 Enable 'toString' object view \u52fe\u9009\u3002\u5177\u4f53\u5982\u4e0b\uff1a 3.1 \u5904\u7406\u914d\u7f6e Dubbo \u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u914d\u7f6e\uff0c\u7528\u4e8e\u8c03\u6574\u548c\u4f18\u5316\u6846\u67b6\u884c\u4e3a\uff0c\u6027\u80fd\u7b49\u3002Dubbo \u5728\u5f15\u7528\u6216\u5bfc\u51fa\u670d\u52a1\u65f6\uff0c\u9996\u5148\u4f1a\u5bf9\u8fd9\u4e9b\u914d\u7f6e\u8fdb\u884c\u68c0\u67e5\u548c\u5904\u7406\uff0c\u4ee5\u4fdd\u8bc1\u914d\u7f6e\u7684\u6b63\u786e\u6027\u3002\u914d\u7f6e\u89e3\u6790\u903b\u8f91\u5c01\u88c5\u5728 ReferenceConfig \u7684 init \u65b9\u6cd5\u4e2d\uff0c\u4e0b\u9762\u8fdb\u884c\u5206\u6790\u3002 private void init() { // \u907f\u514d\u91cd\u590d\u521d\u59cb\u5316 if (initialized) { return; } initialized = true; // \u68c0\u6d4b\u63a5\u53e3\u540d\u5408\u6cd5\u6027 if (interfaceName == null || interfaceName.length() == 0) { throw new IllegalStateException( interface not allow null! ); } // \u68c0\u6d4b consumer \u53d8\u91cf\u662f\u5426\u4e3a\u7a7a\uff0c\u4e3a\u7a7a\u5219\u521b\u5efa checkDefault(); appendProperties(this); if (getGeneric() == null getConsumer() != null) { // \u8bbe\u7f6e generic setGeneric(getConsumer().getGeneric()); } // \u68c0\u6d4b\u662f\u5426\u4e3a\u6cdb\u5316\u63a5\u53e3 if (ProtocolUtils.isGeneric(getGeneric())) { interfaceClass = GenericService.class; } else { try { // \u52a0\u8f7d\u7c7b interfaceClass = Class.forName(interfaceName, true, Thread.currentThread() .getContextClassLoader()); } catch (ClassNotFoundException e) { throw new IllegalStateException(e.getMessage(), e); } checkInterfaceAndMethods(interfaceClass, methods); } // -------------------------------\u2728 \u5206\u5272\u7ebf1 \u2728------------------------------ // \u4ece\u7cfb\u7edf\u53d8\u91cf\u4e2d\u83b7\u53d6\u4e0e\u63a5\u53e3\u540d\u5bf9\u5e94\u7684\u5c5e\u6027\u503c String resolve = System.getProperty(interfaceName); String resolveFile = null; if (resolve == null || resolve.length() == 0) { // \u4ece\u7cfb\u7edf\u5c5e\u6027\u4e2d\u83b7\u53d6\u89e3\u6790\u6587\u4ef6\u8def\u5f84 resolveFile = System.getProperty( dubbo.resolve.file ); if (resolveFile == null || resolveFile.length() == 0) { // \u4ece\u6307\u5b9a\u4f4d\u7f6e\u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6 File userResolveFile = new File(new File(System.getProperty( user.home )), dubbo-resolve.properties ); if (userResolveFile.exists()) { // \u83b7\u53d6\u6587\u4ef6\u7edd\u5bf9\u8def\u5f84 resolveFile = userResolveFile.getAbsolutePath(); } } if (resolveFile != null resolveFile.length() 0) { Properties properties = new Properties(); FileInputStream fis = null; try { fis = new FileInputStream(new File(resolveFile)); // \u4ece\u6587\u4ef6\u4e2d\u52a0\u8f7d\u914d\u7f6e properties.load(fis); } catch (IOException e) { throw new IllegalStateException( Unload ..., cause:... ); } finally { try { if (null != fis) fis.close(); } catch (IOException e) { logger.warn(e.getMessage(), e); } } // \u83b7\u53d6\u4e0e\u63a5\u53e3\u540d\u5bf9\u5e94\u7684\u914d\u7f6e resolve = properties.getProperty(interfaceName); } } if (resolve != null resolve.length() 0) { // \u5c06 resolve \u8d4b\u503c\u7ed9 url url = resolve; } // -------------------------------\u2728 \u5206\u5272\u7ebf2 \u2728------------------------------ if (consumer != null) { if (application == null) { // \u4ece consumer \u4e2d\u83b7\u53d6 Application \u5b9e\u4f8b\uff0c\u4e0b\u540c application = consumer.getApplication(); } if (module == null) { module = consumer.getModule(); } if (registries == null) { registries = consumer.getRegistries(); } if (monitor == null) { monitor = consumer.getMonitor(); } } if (module != null) { if (registries == null) { registries = module.getRegistries(); } if (monitor == null) { monitor = module.getMonitor(); } } if (application != null) { if (registries == null) { registries = application.getRegistries(); } if (monitor == null) { monitor = application.getMonitor(); } } // \u68c0\u6d4b Application \u5408\u6cd5\u6027 checkApplication(); // \u68c0\u6d4b\u672c\u5730\u5b58\u6839\u914d\u7f6e\u5408\u6cd5\u6027 checkStubAndMock(interfaceClass); // -------------------------------\u2728 \u5206\u5272\u7ebf3 \u2728------------------------------ Map String, String map = new HashMap String, String (); Map Object, Object attributes = new HashMap Object, Object (); // \u6dfb\u52a0 side\u3001\u534f\u8bae\u7248\u672c\u4fe1\u606f\u3001\u65f6\u95f4\u6233\u548c\u8fdb\u7a0b\u53f7\u7b49\u4fe1\u606f\u5230 map \u4e2d map.put(Constants.SIDE_KEY, Constants.CONSUMER_SIDE); map.put(Constants.DUBBO_VERSION_KEY, Version.getProtocolVersion()); map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis())); if (ConfigUtils.getPid() 0) { map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid())); } // \u975e\u6cdb\u5316\u670d\u52a1 if (!isGeneric()) { // \u83b7\u53d6\u7248\u672c String revision = Version.getVersion(interfaceClass, version); if (revision != null revision.length() 0) { map.put( revision , revision); } // \u83b7\u53d6\u63a5\u53e3\u65b9\u6cd5\u5217\u8868\uff0c\u5e76\u6dfb\u52a0\u5230 map \u4e2d String[] methods = Wrapper.getWrapper(interfaceClass).getMethodNames(); if (methods.length == 0) { map.put( methods , Constants.ANY_VALUE); } else { map.put( methods , StringUtils.join(new HashSet String (Arrays.asList(methods)), , )); } } map.put(Constants.INTERFACE_KEY, interfaceName); // \u5c06 ApplicationConfig\u3001ConsumerConfig\u3001ReferenceConfig \u7b49\u5bf9\u8c61\u7684\u5b57\u6bb5\u4fe1\u606f\u6dfb\u52a0\u5230 map \u4e2d appendParameters(map, application); appendParameters(map, module); appendParameters(map, consumer, Constants.DEFAULT_KEY); appendParameters(map, this); // -------------------------------\u2728 \u5206\u5272\u7ebf4 \u2728------------------------------ String prefix = StringUtils.getServiceKey(map); if (methods != null !methods.isEmpty()) { // \u904d\u5386 MethodConfig \u5217\u8868 for (MethodConfig method : methods) { appendParameters(map, method, method.getName()); String retryKey = method.getName() + .retry ; // \u68c0\u6d4b map \u662f\u5426\u5305\u542b methodName.retry if (map.containsKey(retryKey)) { String retryValue = map.remove(retryKey); if ( false .equals(retryValue)) { // \u6dfb\u52a0\u91cd\u8bd5\u6b21\u6570\u914d\u7f6e methodName.retries map.put(method.getName() + .retries , 0 ); } } // \u6dfb\u52a0 MethodConfig \u4e2d\u7684\u201c\u5c5e\u6027\u201d\u5b57\u6bb5\u5230 attributes // \u6bd4\u5982 onreturn\u3001onthrow\u3001oninvoke \u7b49 appendAttributes(attributes, method, prefix + . + method.getName()); checkAndConvertImplicitConfig(method, map, attributes); } } // -------------------------------\u2728 \u5206\u5272\u7ebf5 \u2728------------------------------ // \u83b7\u53d6\u670d\u52a1\u6d88\u8d39\u8005 ip \u5730\u5740 String hostToRegistry = ConfigUtils.getSystemProperty(Constants.DUBBO_IP_TO_REGISTRY); if (hostToRegistry == null || hostToRegistry.length() == 0) { hostToRegistry = NetUtils.getLocalHost(); } else if (isInvalidLocalHost(hostToRegistry)) { throw new IllegalArgumentException( Specified invalid registry ip from property... ); } map.put(Constants.REGISTER_IP_KEY, hostToRegistry); // \u5b58\u50a8 attributes \u5230\u7cfb\u7edf\u4e0a\u4e0b\u6587\u4e2d StaticContext.getSystemContext().putAll(attributes); // \u521b\u5efa\u4ee3\u7406\u7c7b ref = createProxy(map); // \u6839\u636e\u670d\u52a1\u540d\uff0cReferenceConfig\uff0c\u4ee3\u7406\u7c7b\u6784\u5efa ConsumerModel\uff0c // \u5e76\u5c06 ConsumerModel \u5b58\u5165\u5230 ApplicationModel \u4e2d ConsumerModel consumerModel = new ConsumerModel(getUniqueServiceName(), this, ref, interfaceClass.getMethods()); ApplicationModel.initConsumerModel(getUniqueServiceName(), consumerModel); } \u4e0a\u9762\u7684\u4ee3\u7801\u5f88\u957f\uff0c\u505a\u7684\u4e8b\u60c5\u6bd4\u8f83\u591a\u3002\u8fd9\u91cc\u6839\u636e\u4ee3\u7801\u903b\u8f91\uff0c\u5bf9\u4ee3\u7801\u8fdb\u884c\u4e86\u5206\u5757\uff0c\u4e0b\u9762\u6211\u4eec\u4e00\u8d77\u6765\u770b\u4e00\u4e0b\u3002 \u9996\u5148\u662f\u65b9\u6cd5\u5f00\u59cb\u5230\u5206\u5272\u7ebf1\u4e4b\u95f4\u7684\u4ee3\u7801\u3002\u8fd9\u6bb5\u4ee3\u7801\u4e3b\u8981\u7528\u4e8e\u68c0\u6d4b ConsumerConfig \u5b9e\u4f8b\u662f\u5426\u5b58\u5728\uff0c\u5982\u4e0d\u5b58\u5728\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b9e\u4f8b\uff0c\u7136\u540e\u901a\u8fc7\u7cfb\u7edf\u53d8\u91cf\u6216 dubbo.properties \u914d\u7f6e\u6587\u4ef6\u586b\u5145 ConsumerConfig \u7684\u5b57\u6bb5\u3002\u63a5\u7740\u662f\u68c0\u6d4b\u6cdb\u5316\u914d\u7f6e\uff0c\u5e76\u6839\u636e\u914d\u7f6e\u8bbe\u7f6e interfaceClass \u7684\u503c\u3002\u63a5\u7740\u6765\u770b\u5206\u5272\u7ebf1\u5230\u5206\u5272\u7ebf2\u4e4b\u95f4\u7684\u903b\u8f91\u3002\u8fd9\u6bb5\u903b\u8f91\u7528\u4e8e\u4ece\u7cfb\u7edf\u5c5e\u6027\u6216\u914d\u7f6e\u6587\u4ef6\u4e2d\u52a0\u8f7d\u4e0e\u63a5\u53e3\u540d\u76f8\u5bf9\u5e94\u7684\u914d\u7f6e\uff0c\u5e76\u5c06\u89e3\u6790\u7ed3\u679c\u8d4b\u503c\u7ed9 url \u5b57\u6bb5\u3002url \u5b57\u6bb5\u7684\u4f5c\u7528\u4e00\u822c\u662f\u7528\u4e8e\u70b9\u5bf9\u70b9\u8c03\u7528\u3002\u7ee7\u7eed\u5411\u4e0b\u770b\uff0c\u5206\u5272\u7ebf2\u548c\u5206\u5272\u7ebf3\u4e4b\u95f4\u7684\u4ee3\u7801\u7528\u4e8e\u68c0\u6d4b\u51e0\u4e2a\u6838\u5fc3\u914d\u7f6e\u7c7b\u662f\u5426\u4e3a\u7a7a\uff0c\u4e3a\u7a7a\u5219\u5c1d\u8bd5\u4ece\u5176\u4ed6\u914d\u7f6e\u7c7b\u4e2d\u83b7\u53d6\u3002\u5206\u5272\u7ebf3\u4e0e\u5206\u5272\u7ebf4\u4e4b\u95f4\u7684\u4ee3\u7801\u4e3b\u8981\u7528\u4e8e\u6536\u96c6\u5404\u79cd\u914d\u7f6e\uff0c\u5e76\u5c06\u914d\u7f6e\u5b58\u50a8\u5230 map \u4e2d\u3002\u5206\u5272\u7ebf4\u548c\u5206\u5272\u7ebf5\u4e4b\u95f4\u7684\u4ee3\u7801\u7528\u4e8e\u5904\u7406 MethodConfig \u5b9e\u4f8b\u3002\u8be5\u5b9e\u4f8b\u5305\u542b\u4e86\u4e8b\u4ef6\u901a\u77e5\u914d\u7f6e\uff0c\u6bd4\u5982 onreturn\u3001onthrow\u3001oninvoke \u7b49\u3002\u5206\u5272\u7ebf5\u5230\u65b9\u6cd5\u7ed3\u5c3e\u7684\u4ee3\u7801\u4e3b\u8981\u7528\u4e8e\u89e3\u6790\u670d\u52a1\u6d88\u8d39\u8005 ip\uff0c\u4ee5\u53ca\u8c03\u7528 createProxy \u521b\u5efa\u4ee3\u7406\u5bf9\u8c61\u3002\u5173\u4e8e\u8be5\u65b9\u6cd5\u7684\u8be6\u7ec6\u5206\u6790\uff0c\u5c06\u4f1a\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\u5c55\u5f00\u3002 3.2 \u5f15\u7528\u670d\u52a1 \u672c\u8282\u6211\u4eec\u8981\u4ece createProxy \u5f00\u59cb\u770b\u8d77\u3002\u4ece\u5b57\u9762\u610f\u601d\u4e0a\u6765\u770b\uff0ccreateProxy \u4f3c\u4e4e\u53ea\u662f\u7528\u4e8e\u521b\u5efa\u4ee3\u7406\u5bf9\u8c61\u7684\u3002\u4f46\u5b9e\u9645\u4e0a\u5e76\u975e\u5982\u6b64\uff0c\u8be5\u65b9\u6cd5\u8fd8\u4f1a\u8c03\u7528\u5176\u4ed6\u65b9\u6cd5\u6784\u5efa\u4ee5\u53ca\u5408\u5e76 Invoker \u5b9e\u4f8b\u3002\u5177\u4f53\u7ec6\u8282\u5982\u4e0b\u3002 private T createProxy(Map String, String map) { URL tmpUrl = new URL( temp , localhost , 0, map); final boolean isJvmRefer; if (isInjvm() == null) { // url \u914d\u7f6e\u88ab\u6307\u5b9a\uff0c\u5219\u4e0d\u505a\u672c\u5730\u5f15\u7528 if (url != null url.length() 0) { isJvmRefer = false; // \u6839\u636e url \u7684\u534f\u8bae\u3001scope \u4ee5\u53ca injvm \u7b49\u53c2\u6570\u68c0\u6d4b\u662f\u5426\u9700\u8981\u672c\u5730\u5f15\u7528 // \u6bd4\u5982\u5982\u679c\u7528\u6237\u663e\u5f0f\u914d\u7f6e\u4e86 scope=local\uff0c\u6b64\u65f6 isInjvmRefer \u8fd4\u56de true } else if (InjvmProtocol.getInjvmProtocol().isInjvmRefer(tmpUrl)) { isJvmRefer = true; } else { isJvmRefer = false; } } else { // \u83b7\u53d6 injvm \u914d\u7f6e\u503c isJvmRefer = isInjvm().booleanValue(); } // \u672c\u5730\u5f15\u7528 if (isJvmRefer) { // \u751f\u6210\u672c\u5730\u5f15\u7528 URL\uff0c\u534f\u8bae\u4e3a injvm URL url = new URL(Constants.LOCAL_PROTOCOL, NetUtils.LOCALHOST, 0, interfaceClass.getName()).addParameters(map); // \u8c03\u7528 refer \u65b9\u6cd5\u6784\u5efa InjvmInvoker \u5b9e\u4f8b invoker = refprotocol.refer(interfaceClass, url); // \u8fdc\u7a0b\u5f15\u7528 } else { // url \u4e0d\u4e3a\u7a7a\uff0c\u8868\u660e\u7528\u6237\u53ef\u80fd\u60f3\u8fdb\u884c\u70b9\u5bf9\u70b9\u8c03\u7528 if (url != null url.length() 0) { // \u5f53\u9700\u8981\u914d\u7f6e\u591a\u4e2a url \u65f6\uff0c\u53ef\u7528\u5206\u53f7\u8fdb\u884c\u5206\u5272\uff0c\u8fd9\u91cc\u4f1a\u8fdb\u884c\u5207\u5206 String[] us = Constants.SEMICOLON_SPLIT_PATTERN.split(url); if (us != null us.length 0) { for (String u : us) { URL url = URL.valueOf(u); if (url.getPath() == null || url.getPath().length() == 0) { // \u8bbe\u7f6e\u63a5\u53e3\u5168\u9650\u5b9a\u540d\u4e3a url \u8def\u5f84 url = url.setPath(interfaceName); } // \u68c0\u6d4b url \u534f\u8bae\u662f\u5426\u4e3a registry\uff0c\u82e5\u662f\uff0c\u8868\u660e\u7528\u6237\u60f3\u4f7f\u7528\u6307\u5b9a\u7684\u6ce8\u518c\u4e2d\u5fc3 if (Constants.REGISTRY_PROTOCOL.equals(url.getProtocol())) { // \u5c06 map \u8f6c\u6362\u4e3a\u67e5\u8be2\u5b57\u7b26\u4e32\uff0c\u5e76\u4f5c\u4e3a refer \u53c2\u6570\u7684\u503c\u6dfb\u52a0\u5230 url \u4e2d urls.add(url.addParameterAndEncoded(Constants.REFER_KEY, StringUtils.toQueryString(map))); } else { // \u5408\u5e76 url\uff0c\u79fb\u9664\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u4e00\u4e9b\u914d\u7f6e\uff08\u8fd9\u4e9b\u914d\u7f6e\u6765\u6e90\u4e8e\u7528\u6237\u914d\u7f6e\u7684 url \u5c5e\u6027\uff09\uff0c // \u6bd4\u5982\u7ebf\u7a0b\u6c60\u76f8\u5173\u914d\u7f6e\u3002\u5e76\u4fdd\u7559\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u90e8\u5206\u914d\u7f6e\uff0c\u6bd4\u5982\u7248\u672c\uff0cgroup\uff0c\u65f6\u95f4\u6233\u7b49 // \u6700\u540e\u5c06\u5408\u5e76\u540e\u7684\u914d\u7f6e\u8bbe\u7f6e\u4e3a url \u67e5\u8be2\u5b57\u7b26\u4e32\u4e2d\u3002 urls.add(ClusterUtils.mergeUrl(url, map)); } } } } else { // \u52a0\u8f7d\u6ce8\u518c\u4e2d\u5fc3 url List URL us = loadRegistries(false); if (us != null !us.isEmpty()) { for (URL u : us) { URL monitorUrl = loadMonitor(u); if (monitorUrl != null) { map.put(Constants.MONITOR_KEY, URL.encode(monitorUrl.toFullString())); } // \u6dfb\u52a0 refer \u53c2\u6570\u5230 url \u4e2d\uff0c\u5e76\u5c06 url \u6dfb\u52a0\u5230 urls \u4e2d urls.add(u.addParameterAndEncoded(Constants.REFER_KEY, StringUtils.toQueryString(map))); } } // \u672a\u914d\u7f6e\u6ce8\u518c\u4e2d\u5fc3\uff0c\u629b\u51fa\u5f02\u5e38 if (urls.isEmpty()) { throw new IllegalStateException( No such any registry to reference... ); } } // \u5355\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u6216\u670d\u52a1\u63d0\u4f9b\u8005(\u670d\u52a1\u76f4\u8fde\uff0c\u4e0b\u540c) if (urls.size() == 1) { // \u8c03\u7528 RegistryProtocol \u7684 refer \u6784\u5efa Invoker \u5b9e\u4f8b invoker = refprotocol.refer(interfaceClass, urls.get(0)); // \u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u6216\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u6216\u8005\u4e24\u8005\u6df7\u5408 } else { List Invoker ? invokers = new ArrayList Invoker ? (); URL registryURL = null; // \u83b7\u53d6\u6240\u6709\u7684 Invoker for (URL url : urls) { // \u901a\u8fc7 refprotocol \u8c03\u7528 refer \u6784\u5efa Invoker\uff0crefprotocol \u4f1a\u5728\u8fd0\u884c\u65f6 // \u6839\u636e url \u534f\u8bae\u5934\u52a0\u8f7d\u6307\u5b9a\u7684 Protocol \u5b9e\u4f8b\uff0c\u5e76\u8c03\u7528\u5b9e\u4f8b\u7684 refer \u65b9\u6cd5 invokers.add(refprotocol.refer(interfaceClass, url)); if (Constants.REGISTRY_PROTOCOL.equals(url.getProtocol())) { registryURL = url; } } if (registryURL != null) { // \u5982\u679c\u6ce8\u518c\u4e2d\u5fc3\u94fe\u63a5\u4e0d\u4e3a\u7a7a\uff0c\u5219\u5c06\u4f7f\u7528 AvailableCluster URL u = registryURL.addParameter(Constants.CLUSTER_KEY, AvailableCluster.NAME); // \u521b\u5efa StaticDirectory \u5b9e\u4f8b\uff0c\u5e76\u7531 Cluster \u5bf9\u591a\u4e2a Invoker \u8fdb\u884c\u5408\u5e76 invoker = cluster.join(new StaticDirectory(u, invokers)); } else { invoker = cluster.join(new StaticDirectory(invokers)); } } } Boolean c = check; if (c == null consumer != null) { c = consumer.isCheck(); } if (c == null) { c = true; } // invoker \u53ef\u7528\u6027\u68c0\u67e5 if (c !invoker.isAvailable()) { throw new IllegalStateException( No provider available for the service... ); } // \u751f\u6210\u4ee3\u7406\u7c7b return (T) proxyFactory.getProxy(invoker); } \u4e0a\u9762\u4ee3\u7801\u5f88\u591a\uff0c\u4e0d\u8fc7\u903b\u8f91\u6bd4\u8f83\u6e05\u6670\u3002\u9996\u5148\u6839\u636e\u914d\u7f6e\u68c0\u67e5\u662f\u5426\u4e3a\u672c\u5730\u8c03\u7528\uff0c\u82e5\u662f\uff0c\u5219\u8c03\u7528 InjvmProtocol \u7684 refer \u65b9\u6cd5\u751f\u6210 InjvmInvoker \u5b9e\u4f8b\u3002\u82e5\u4e0d\u662f\uff0c\u5219\u8bfb\u53d6\u76f4\u8fde\u914d\u7f6e\u9879\uff0c\u6216\u6ce8\u518c\u4e2d\u5fc3 url\uff0c\u5e76\u5c06\u8bfb\u53d6\u5230\u7684 url \u5b58\u50a8\u5230 urls \u4e2d\u3002\u7136\u540e\u6839\u636e urls \u5143\u7d20\u6570\u91cf\u8fdb\u884c\u540e\u7eed\u64cd\u4f5c\u3002\u82e5 urls \u5143\u7d20\u6570\u91cf\u4e3a1\uff0c\u5219\u76f4\u63a5\u901a\u8fc7 Protocol \u81ea\u9002\u5e94\u62d3\u5c55\u7c7b\u6784\u5efa Invoker \u5b9e\u4f8b\u63a5\u53e3\u3002\u82e5 urls \u5143\u7d20\u6570\u91cf\u5927\u4e8e1\uff0c\u5373\u5b58\u5728\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u6216\u670d\u52a1\u76f4\u8fde url\uff0c\u6b64\u65f6\u5148\u6839\u636e url \u6784\u5efa Invoker\u3002\u7136\u540e\u518d\u901a\u8fc7 Cluster \u5408\u5e76\u591a\u4e2a Invoker\uff0c\u6700\u540e\u8c03\u7528 ProxyFactory \u751f\u6210\u4ee3\u7406\u7c7b\u3002Invoker \u7684\u6784\u5efa\u8fc7\u7a0b\u4ee5\u53ca\u4ee3\u7406\u7c7b\u7684\u8fc7\u7a0b\u6bd4\u8f83\u91cd\u8981\uff0c\u56e0\u6b64\u63a5\u4e0b\u6765\u5c06\u5206\u4e24\u5c0f\u8282\u5bf9\u8fd9\u4e24\u4e2a\u8fc7\u7a0b\u8fdb\u884c\u5206\u6790\u3002 3.2.1 \u521b\u5efa Invoker Invoker \u662f Dubbo \u7684\u6838\u5fc3\u6a21\u578b\uff0c\u4ee3\u8868\u4e00\u4e2a\u53ef\u6267\u884c\u4f53\u3002\u5728\u670d\u52a1\u63d0\u4f9b\u65b9\uff0cInvoker \u7528\u4e8e\u8c03\u7528\u670d\u52a1\u63d0\u4f9b\u7c7b\u3002\u5728\u670d\u52a1\u6d88\u8d39\u65b9\uff0cInvoker \u7528\u4e8e\u6267\u884c\u8fdc\u7a0b\u8c03\u7528\u3002Invoker \u662f\u7531 Protocol \u5b9e\u73b0\u7c7b\u6784\u5efa\u800c\u6765\u3002Protocol \u5b9e\u73b0\u7c7b\u6709\u5f88\u591a\uff0c\u672c\u8282\u4f1a\u5206\u6790\u6700\u5e38\u7528\u7684\u4e24\u4e2a\uff0c\u5206\u522b\u662f RegistryProtocol \u548c DubboProtocol\uff0c\u5176\u4ed6\u7684\u5927\u5bb6\u81ea\u884c\u5206\u6790\u3002\u4e0b\u9762\u5148\u6765\u5206\u6790 DubboProtocol \u7684 refer \u65b9\u6cd5\u6e90\u7801\u3002\u5982\u4e0b\uff1a public T Invoker T refer(Class T serviceType, URL url) throws RpcException { optimizeSerialization(url); // \u521b\u5efa DubboInvoker DubboInvoker T invoker = new DubboInvoker T (serviceType, url, getClients(url), invokers); invokers.add(invoker); return invoker; } \u4e0a\u9762\u65b9\u6cd5\u770b\u8d77\u6765\u6bd4\u8f83\u7b80\u5355\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u6709\u4e00\u4e2a\u8c03\u7528\u9700\u8981\u6211\u4eec\u6ce8\u610f\u4e00\u4e0b\uff0c\u5373 getClients\u3002\u8fd9\u4e2a\u65b9\u6cd5\u7528\u4e8e\u83b7\u53d6\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff0c\u5b9e\u4f8b\u7c7b\u578b\u4e3a ExchangeClient\u3002ExchangeClient \u5b9e\u9645\u4e0a\u5e76\u4e0d\u5177\u5907\u901a\u4fe1\u80fd\u529b\uff0c\u5b83\u9700\u8981\u57fa\u4e8e\u66f4\u5e95\u5c42\u7684\u5ba2\u6237\u7aef\u5b9e\u4f8b\u8fdb\u884c\u901a\u4fe1\u3002\u6bd4\u5982 NettyClient\u3001MinaClient \u7b49\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cDubbo \u4f7f\u7528 NettyClient \u8fdb\u884c\u901a\u4fe1\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u7b80\u5355\u770b\u4e00\u4e0b getClients \u65b9\u6cd5\u7684\u903b\u8f91\u3002 private ExchangeClient[] getClients(URL url) { // \u662f\u5426\u5171\u4eab\u8fde\u63a5 boolean service_share_connect = false; // \u83b7\u53d6\u8fde\u63a5\u6570\uff0c\u9ed8\u8ba4\u4e3a0\uff0c\u8868\u793a\u672a\u914d\u7f6e int connections = url.getParameter(Constants.CONNECTIONS_KEY, 0); // \u5982\u679c\u672a\u914d\u7f6e connections\uff0c\u5219\u5171\u4eab\u8fde\u63a5 if (connections == 0) { service_share_connect = true; connections = 1; } ExchangeClient[] clients = new ExchangeClient[connections]; for (int i = 0; i clients.length; i++) { if (service_share_connect) { // \u83b7\u53d6\u5171\u4eab\u5ba2\u6237\u7aef clients[i] = getSharedClient(url); } else { // \u521d\u59cb\u5316\u65b0\u7684\u5ba2\u6237\u7aef clients[i] = initClient(url); } } return clients; } \u8fd9\u91cc\u6839\u636e connections \u6570\u91cf\u51b3\u5b9a\u662f\u83b7\u53d6\u5171\u4eab\u5ba2\u6237\u7aef\u8fd8\u662f\u521b\u5efa\u65b0\u7684\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u5171\u4eab\u5ba2\u6237\u7aef\u5b9e\u4f8b\u3002getSharedClient \u65b9\u6cd5\u4e2d\u4e5f\u4f1a\u8c03\u7528 initClient \u65b9\u6cd5\uff0c\u56e0\u6b64\u4e0b\u9762\u6211\u4eec\u4e00\u8d77\u770b\u4e00\u4e0b\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u3002 private ExchangeClient getSharedClient(URL url) { String key = url.getAddress(); // \u83b7\u53d6\u5e26\u6709\u201c\u5f15\u7528\u8ba1\u6570\u201d\u529f\u80fd\u7684 ExchangeClient ReferenceCountExchangeClient client = referenceClientMap.get(key); if (client != null) { if (!client.isClosed()) { // \u589e\u52a0\u5f15\u7528\u8ba1\u6570 client.incrementAndGetCount(); return client; } else { referenceClientMap.remove(key); } } locks.putIfAbsent(key, new Object()); synchronized (locks.get(key)) { if (referenceClientMap.containsKey(key)) { return referenceClientMap.get(key); } // \u521b\u5efa ExchangeClient \u5ba2\u6237\u7aef ExchangeClient exchangeClient = initClient(url); // \u5c06 ExchangeClient \u5b9e\u4f8b\u4f20\u7ed9 ReferenceCountExchangeClient\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86\u88c5\u9970\u6a21\u5f0f client = new ReferenceCountExchangeClient(exchangeClient, ghostClientMap); referenceClientMap.put(key, client); ghostClientMap.remove(key); locks.remove(key); return client; } } \u4e0a\u9762\u65b9\u6cd5\u5148\u8bbf\u95ee\u7f13\u5b58\uff0c\u82e5\u7f13\u5b58\u672a\u547d\u4e2d\uff0c\u5219\u901a\u8fc7 initClient \u65b9\u6cd5\u521b\u5efa\u65b0\u7684 ExchangeClient \u5b9e\u4f8b\uff0c\u5e76\u5c06\u8be5\u5b9e\u4f8b\u4f20\u7ed9 ReferenceCountExchangeClient \u6784\u9020\u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u5e26\u6709\u5f15\u7528\u8ba1\u6570\u529f\u80fd\u7684 ExchangeClient \u5b9e\u4f8b\u3002ReferenceCountExchangeClient \u5185\u90e8\u5b9e\u73b0\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u4e0d\u5206\u6790\u4e86\u3002\u4e0b\u9762\u6211\u4eec\u518d\u6765\u770b\u4e00\u4e0b initClient \u65b9\u6cd5\u7684\u4ee3\u7801\u3002 private ExchangeClient initClient(URL url) { // \u83b7\u53d6\u5ba2\u6237\u7aef\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3a netty String str = url.getParameter(Constants.CLIENT_KEY, url.getParameter(Constants.SERVER_KEY, Constants.DEFAULT_REMOTING_CLIENT)); // \u6dfb\u52a0\u7f16\u89e3\u7801\u548c\u5fc3\u8df3\u5305\u53c2\u6570\u5230 url \u4e2d url = url.addParameter(Constants.CODEC_KEY, DubboCodec.NAME); url = url.addParameterIfAbsent(Constants.HEARTBEAT_KEY, String.valueOf(Constants.DEFAULT_HEARTBEAT)); // \u68c0\u6d4b\u5ba2\u6237\u7aef\u7c7b\u578b\u662f\u5426\u5b58\u5728\uff0c\u4e0d\u5b58\u5728\u5219\u629b\u51fa\u5f02\u5e38 if (str != null str.length() 0 !ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str)) { throw new RpcException( Unsupported client type: ... ); } ExchangeClient client; try { // \u83b7\u53d6 lazy \u914d\u7f6e\uff0c\u5e76\u6839\u636e\u914d\u7f6e\u503c\u51b3\u5b9a\u521b\u5efa\u7684\u5ba2\u6237\u7aef\u7c7b\u578b if (url.getParameter(Constants.LAZY_CONNECT_KEY, false)) { // \u521b\u5efa\u61d2\u52a0\u8f7d ExchangeClient \u5b9e\u4f8b client = new LazyConnectExchangeClient(url, requestHandler); } else { // \u521b\u5efa\u666e\u901a ExchangeClient \u5b9e\u4f8b client = Exchangers.connect(url, requestHandler); } } catch (RemotingException e) { throw new RpcException( Fail to create remoting client for service... ); } return client; } initClient \u65b9\u6cd5\u9996\u5148\u83b7\u53d6\u7528\u6237\u914d\u7f6e\u7684\u5ba2\u6237\u7aef\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3a netty\u3002\u7136\u540e\u68c0\u6d4b\u7528\u6237\u914d\u7f6e\u7684\u5ba2\u6237\u7aef\u7c7b\u578b\u662f\u5426\u5b58\u5728\uff0c\u4e0d\u5b58\u5728\u5219\u629b\u51fa\u5f02\u5e38\u3002\u6700\u540e\u6839\u636e lazy \u914d\u7f6e\u51b3\u5b9a\u521b\u5efa\u4ec0\u4e48\u7c7b\u578b\u7684\u5ba2\u6237\u7aef\u3002\u8fd9\u91cc\u7684 LazyConnectExchangeClient \u4ee3\u7801\u5e76\u4e0d\u662f\u5f88\u590d\u6742\uff0c\u8be5\u7c7b\u4f1a\u5728 request \u65b9\u6cd5\u88ab\u8c03\u7528\u65f6\u901a\u8fc7 Exchangers \u7684 connect \u65b9\u6cd5\u521b\u5efa ExchangeClient \u5ba2\u6237\u7aef\uff0c\u8be5\u7c7b\u7684\u4ee3\u7801\u672c\u8282\u5c31\u4e0d\u5206\u6790\u4e86\u3002\u4e0b\u9762\u6211\u4eec\u5206\u6790\u4e00\u4e0b Exchangers \u7684 connect \u65b9\u6cd5\u3002 public static ExchangeClient connect(URL url, ExchangeHandler handler) throws RemotingException { if (url == null) { throw new IllegalArgumentException( url == null ); } if (handler == null) { throw new IllegalArgumentException( handler == null ); } url = url.addParameterIfAbsent(Constants.CODEC_KEY, exchange ); // \u83b7\u53d6 Exchanger \u5b9e\u4f8b\uff0c\u9ed8\u8ba4\u4e3a HeaderExchangeClient return getExchanger(url).connect(url, handler); } \u5982\u4e0a\uff0cgetExchanger \u4f1a\u901a\u8fc7 SPI \u52a0\u8f7d HeaderExchangeClient \u5b9e\u4f8b\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u6bd4\u8f83\u7b80\u5355\uff0c\u5927\u5bb6\u81ea\u5df1\u770b\u4e00\u4e0b\u5427\u3002\u63a5\u4e0b\u6765\u5206\u6790 HeaderExchangeClient \u7684\u5b9e\u73b0\u3002 public ExchangeClient connect(URL url, ExchangeHandler handler) throws RemotingException { // \u8fd9\u91cc\u5305\u542b\u4e86\u591a\u4e2a\u8c03\u7528\uff0c\u5206\u522b\u5982\u4e0b\uff1a // 1. \u521b\u5efa HeaderExchangeHandler \u5bf9\u8c61 // 2. \u521b\u5efa DecodeHandler \u5bf9\u8c61 // 3. \u901a\u8fc7 Transporters \u6784\u5efa Client \u5b9e\u4f8b // 4. \u521b\u5efa HeaderExchangeClient \u5bf9\u8c61 return new HeaderExchangeClient(Transporters.connect(url, new DecodeHandler(new HeaderExchangeHandler(handler))), true); } \u8fd9\u91cc\u7684\u8c03\u7528\u6bd4\u8f83\u591a\uff0c\u6211\u4eec\u8fd9\u91cc\u91cd\u70b9\u770b\u4e00\u4e0b Transporters \u7684 connect \u65b9\u6cd5\u3002\u5982\u4e0b\uff1a public static Client connect(URL url, ChannelHandler... handlers) throws RemotingException { if (url == null) { throw new IllegalArgumentException( url == null ); } ChannelHandler handler; if (handlers == null || handlers.length == 0) { handler = new ChannelHandlerAdapter(); } else if (handlers.length == 1) { handler = handlers[0]; } else { // \u5982\u679c handler \u6570\u91cf\u5927\u4e8e1\uff0c\u5219\u521b\u5efa\u4e00\u4e2a ChannelHandler \u5206\u53d1\u5668 handler = new ChannelHandlerDispatcher(handlers); } // \u83b7\u53d6 Transporter \u81ea\u9002\u5e94\u62d3\u5c55\u7c7b\uff0c\u5e76\u8c03\u7528 connect \u65b9\u6cd5\u751f\u6210 Client \u5b9e\u4f8b return getTransporter().connect(url, handler); } \u5982\u4e0a\uff0cgetTransporter \u65b9\u6cd5\u8fd4\u56de\u7684\u662f\u81ea\u9002\u5e94\u62d3\u5c55\u7c7b\uff0c\u8be5\u7c7b\u4f1a\u5728\u8fd0\u884c\u65f6\u6839\u636e\u5ba2\u6237\u7aef\u7c7b\u578b\u52a0\u8f7d\u6307\u5b9a\u7684 Transporter \u5b9e\u73b0\u7c7b\u3002\u82e5\u7528\u6237\u672a\u914d\u7f6e\u5ba2\u6237\u7aef\u7c7b\u578b\uff0c\u5219\u9ed8\u8ba4\u52a0\u8f7d NettyTransporter\uff0c\u5e76\u8c03\u7528\u8be5\u7c7b\u7684 connect \u65b9\u6cd5\u3002\u5982\u4e0b\uff1a public Client connect(URL url, ChannelHandler listener) throws RemotingException { // \u521b\u5efa NettyClient \u5bf9\u8c61 return new NettyClient(url, listener); } \u5230\u8fd9\u91cc\u5c31\u4e0d\u7ee7\u7eed\u8ddf\u4e0b\u53bb\u4e86\uff0c\u5728\u5f80\u4e0b\u5c31\u662f\u901a\u8fc7 Netty \u63d0\u4f9b\u7684 API \u6784\u5efa Netty \u5ba2\u6237\u7aef\u4e86\uff0c\u5927\u5bb6\u6709\u5174\u8da3\u81ea\u5df1\u770b\u770b\u3002\u5230\u8fd9\u91cc\uff0c\u5173\u4e8e DubboProtocol \u7684 refer \u65b9\u6cd5\u5c31\u5206\u6790\u5b8c\u4e86\u3002\u63a5\u4e0b\u6765\uff0c\u7ee7\u7eed\u5206\u6790 RegistryProtocol \u7684 refer \u65b9\u6cd5\u903b\u8f91\u3002 public T Invoker T refer(Class T type, URL url) throws RpcException { // \u53d6 registry \u53c2\u6570\u503c\uff0c\u5e76\u5c06\u5176\u8bbe\u7f6e\u4e3a\u534f\u8bae\u5934 url = url.setProtocol(url.getParameter(Constants.REGISTRY_KEY, Constants.DEFAULT_REGISTRY)).removeParameter(Constants.REGISTRY_KEY); // \u83b7\u53d6\u6ce8\u518c\u4e2d\u5fc3\u5b9e\u4f8b Registry registry = registryFactory.getRegistry(url); if (RegistryService.class.equals(type)) { return proxyFactory.getInvoker((T) registry, type, url); } // \u5c06 url \u67e5\u8be2\u5b57\u7b26\u4e32\u8f6c\u4e3a Map Map String, String qs = StringUtils.parseQueryString(url.getParameterAndDecoded(Constants.REFER_KEY)); // \u83b7\u53d6 group \u914d\u7f6e String group = qs.get(Constants.GROUP_KEY); if (group != null group.length() 0) { if ((Constants.COMMA_SPLIT_PATTERN.split(group)).length 1 || * .equals(group)) { // \u901a\u8fc7 SPI \u52a0\u8f7d MergeableCluster \u5b9e\u4f8b\uff0c\u5e76\u8c03\u7528 doRefer \u7ee7\u7eed\u6267\u884c\u670d\u52a1\u5f15\u7528\u903b\u8f91 return doRefer(getMergeableCluster(), registry, type, url); } } // \u8c03\u7528 doRefer \u7ee7\u7eed\u6267\u884c\u670d\u52a1\u5f15\u7528\u903b\u8f91 return doRefer(cluster, registry, type, url); } \u4e0a\u9762\u4ee3\u7801\u9996\u5148\u4e3a url \u8bbe\u7f6e\u534f\u8bae\u5934\uff0c\u7136\u540e\u6839\u636e url \u53c2\u6570\u52a0\u8f7d\u6ce8\u518c\u4e2d\u5fc3\u5b9e\u4f8b\u3002\u7136\u540e\u83b7\u53d6 group \u914d\u7f6e\uff0c\u6839\u636e group \u914d\u7f6e\u51b3\u5b9a doRefer \u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u3002\u8fd9\u91cc\u7684\u91cd\u70b9\u662f doRefer \u65b9\u6cd5\uff0c\u5982\u4e0b\uff1a private T Invoker T doRefer(Cluster cluster, Registry registry, Class T type, URL url) { // \u521b\u5efa RegistryDirectory \u5b9e\u4f8b RegistryDirectory T directory = new RegistryDirectory T (type, url); // \u8bbe\u7f6e\u6ce8\u518c\u4e2d\u5fc3\u548c\u534f\u8bae directory.setRegistry(registry); directory.setProtocol(protocol); Map String, String parameters = new HashMap String, String (directory.getUrl().getParameters()); // \u751f\u6210\u670d\u52a1\u6d88\u8d39\u8005\u94fe\u63a5 URL subscribeUrl = new URL(Constants.CONSUMER_PROTOCOL, parameters.remove(Constants.REGISTER_IP_KEY), 0, type.getName(), parameters); // \u6ce8\u518c\u670d\u52a1\u6d88\u8d39\u8005\uff0c\u5728 consumers \u76ee\u5f55\u4e0b\u65b0\u8282\u70b9 if (!Constants.ANY_VALUE.equals(url.getServiceInterface()) url.getParameter(Constants.REGISTER_KEY, true)) { registry.register(subscribeUrl.addParameters(Constants.CATEGORY_KEY, Constants.CONSUMERS_CATEGORY, Constants.CHECK_KEY, String.valueOf(false))); } // \u8ba2\u9605 providers\u3001configurators\u3001routers \u7b49\u8282\u70b9\u6570\u636e directory.subscribe(subscribeUrl.addParameter(Constants.CATEGORY_KEY, Constants.PROVIDERS_CATEGORY + , + Constants.CONFIGURATORS_CATEGORY + , + Constants.ROUTERS_CATEGORY)); // \u4e00\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u53ef\u80fd\u6709\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u56e0\u6b64\u8fd9\u91cc\u9700\u8981\u5c06\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u5408\u5e76\u4e3a\u4e00\u4e2a Invoker invoker = cluster.join(directory); ProviderConsumerRegTable.registerConsumer(invoker, url, subscribeUrl, directory); return invoker; } \u5982\u4e0a\uff0cdoRefer \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a RegistryDirectory \u5b9e\u4f8b\uff0c\u7136\u540e\u751f\u6210\u670d\u52a1\u8005\u6d88\u8d39\u8005\u94fe\u63a5\uff0c\u5e76\u5411\u6ce8\u518c\u4e2d\u5fc3\u8fdb\u884c\u6ce8\u518c\u3002\u6ce8\u518c\u5b8c\u6bd5\u540e\uff0c\u7d27\u63a5\u7740\u8ba2\u9605 providers\u3001configurators\u3001routers \u7b49\u8282\u70b9\u4e0b\u7684\u6570\u636e\u3002\u5b8c\u6210\u8ba2\u9605\u540e\uff0cRegistryDirectory \u4f1a\u6536\u5230\u8fd9\u51e0\u4e2a\u8282\u70b9\u4e0b\u7684\u5b50\u8282\u70b9\u4fe1\u606f\u3002\u7531\u4e8e\u4e00\u4e2a\u670d\u52a1\u53ef\u80fd\u90e8\u7f72\u5728\u591a\u53f0\u670d\u52a1\u5668\u4e0a\uff0c\u8fd9\u6837\u5c31\u4f1a\u5728 providers \u4ea7\u751f\u591a\u4e2a\u8282\u70b9\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981 Cluster \u5c06\u591a\u4e2a\u670d\u52a1\u8282\u70b9\u5408\u5e76\u4e3a\u4e00\u4e2a\uff0c\u5e76\u751f\u6210\u4e00\u4e2a Invoker\u3002\u5173\u4e8e RegistryDirectory \u548c Cluster\uff0c\u672c\u6587\u4e0d\u6253\u7b97\u8fdb\u884c\u5206\u6790\uff0c\u76f8\u5173\u5206\u6790\u5c06\u4f1a\u5728\u968f\u540e\u7684\u6587\u7ae0\u4e2d\u5c55\u5f00\u3002 3.2.2 \u521b\u5efa\u4ee3\u7406 Invoker \u521b\u5efa\u5b8c\u6bd5\u540e\uff0c\u63a5\u4e0b\u6765\u8981\u505a\u7684\u4e8b\u60c5\u662f\u4e3a\u670d\u52a1\u63a5\u53e3\u751f\u6210\u4ee3\u7406\u5bf9\u8c61\u3002\u6709\u4e86\u4ee3\u7406\u5bf9\u8c61\uff0c\u5373\u53ef\u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528\u3002\u4ee3\u7406\u5bf9\u8c61\u751f\u6210\u7684\u5165\u53e3\u65b9\u6cd5\u4e3a ProxyFactory \u7684 getProxy\uff0c\u63a5\u4e0b\u6765\u8fdb\u884c\u5206\u6790\u3002 public T T getProxy(Invoker T invoker) throws RpcException { // \u8c03\u7528\u91cd\u8f7d\u65b9\u6cd5 return getProxy(invoker, false); } public T T getProxy(Invoker T invoker, boolean generic) throws RpcException { Class ? [] interfaces = null; // \u83b7\u53d6\u63a5\u53e3\u5217\u8868 String config = invoker.getUrl().getParameter( interfaces ); if (config != null config.length() 0) { // \u5207\u5206\u63a5\u53e3\u5217\u8868 String[] types = Constants.COMMA_SPLIT_PATTERN.split(config); if (types != null types.length 0) { interfaces = new Class ? [types.length + 2]; // \u8bbe\u7f6e\u670d\u52a1\u63a5\u53e3\u7c7b\u548c EchoService.class \u5230 interfaces \u4e2d interfaces[0] = invoker.getInterface(); interfaces[1] = EchoService.class; for (int i = 0; i types.length; i++) { // \u52a0\u8f7d\u63a5\u53e3\u7c7b interfaces[i + 1] = ReflectUtils.forName(types[i]); } } } if (interfaces == null) { interfaces = new Class ? []{invoker.getInterface(), EchoService.class}; } // \u4e3a http \u548c hessian \u534f\u8bae\u63d0\u4f9b\u6cdb\u5316\u8c03\u7528\u652f\u6301\uff0c\u53c2\u8003 pull request #1827 if (!invoker.getInterface().equals(GenericService.class) generic) { int len = interfaces.length; Class ? [] temp = interfaces; // \u521b\u5efa\u65b0\u7684 interfaces \u6570\u7ec4 interfaces = new Class ? [len + 1]; System.arraycopy(temp, 0, interfaces, 0, len); // \u8bbe\u7f6e GenericService.class \u5230\u6570\u7ec4\u4e2d interfaces[len] = GenericService.class; } // \u8c03\u7528\u91cd\u8f7d\u65b9\u6cd5 return getProxy(invoker, interfaces); } public abstract T T getProxy(Invoker T invoker, Class ? [] types); \u5982\u4e0a\uff0c\u4e0a\u9762\u5927\u6bb5\u4ee3\u7801\u90fd\u662f\u7528\u6765\u83b7\u53d6 interfaces \u6570\u7ec4\u7684\uff0c\u6211\u4eec\u7ee7\u7eed\u5f80\u4e0b\u770b\u3002getProxy(Invoker, Class ? []) \u8fd9\u4e2a\u65b9\u6cd5\u662f\u4e00\u4e2a\u62bd\u8c61\u65b9\u6cd5\uff0c\u4e0b\u9762\u6211\u4eec\u5230 JavassistProxyFactory \u7c7b\u4e2d\u770b\u4e00\u4e0b\u8be5\u65b9\u6cd5\u7684\u5b9e\u73b0\u4ee3\u7801\u3002 public T T getProxy(Invoker T invoker, Class ? [] interfaces) { // \u751f\u6210 Proxy \u5b50\u7c7b\uff08Proxy \u662f\u62bd\u8c61\u7c7b\uff09\u3002\u5e76\u8c03\u7528 Proxy \u5b50\u7c7b\u7684 newInstance \u65b9\u6cd5\u521b\u5efa Proxy \u5b9e\u4f8b return (T) Proxy.getProxy(interfaces).newInstance(new InvokerInvocationHandler(invoker)); } \u4e0a\u9762\u4ee3\u7801\u5e76\u4e0d\u591a\uff0c\u9996\u5148\u662f\u901a\u8fc7 Proxy \u7684 getProxy \u65b9\u6cd5\u83b7\u53d6 Proxy \u5b50\u7c7b\uff0c\u7136\u540e\u521b\u5efa InvokerInvocationHandler \u5bf9\u8c61\uff0c\u5e76\u5c06\u8be5\u5bf9\u8c61\u4f20\u7ed9 newInstance \u751f\u6210 Proxy \u5b9e\u4f8b\u3002InvokerInvocationHandler \u5b9e\u73b0 JDK \u7684 InvocationHandler \u63a5\u53e3\uff0c\u5177\u4f53\u7684\u7528\u9014\u662f\u62e6\u622a\u63a5\u53e3\u7c7b\u8c03\u7528\u3002\u8be5\u7c7b\u903b\u8f91\u6bd4\u8f83\u7b80\u5355\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5206\u6790\u4e86\u3002\u4e0b\u9762\u6211\u4eec\u91cd\u70b9\u5173\u6ce8\u4e00\u4e0b Proxy \u7684 getProxy \u65b9\u6cd5\uff0c\u5982\u4e0b\u3002 public static Proxy getProxy(Class ? ... ics) { // \u8c03\u7528\u91cd\u8f7d\u65b9\u6cd5 return getProxy(ClassHelper.getClassLoader(Proxy.class), ics); } public static Proxy getProxy(ClassLoader cl, Class ? ... ics) { if (ics.length 65535) throw new IllegalArgumentException( interface limit exceeded ); StringBuilder sb = new StringBuilder(); // \u904d\u5386\u63a5\u53e3\u5217\u8868 for (int i = 0; i ics.length; i++) { String itf = ics[i].getName(); // \u68c0\u6d4b\u7c7b\u578b\u662f\u5426\u4e3a\u63a5\u53e3 if (!ics[i].isInterface()) throw new RuntimeException(itf + is not a interface. ); Class ? tmp = null; try { // \u91cd\u65b0\u52a0\u8f7d\u63a5\u53e3\u7c7b tmp = Class.forName(itf, false, cl); } catch (ClassNotFoundException e) { } // \u68c0\u6d4b\u63a5\u53e3\u662f\u5426\u76f8\u540c\uff0c\u8fd9\u91cc tmp \u6709\u53ef\u80fd\u4e3a\u7a7a if (tmp != ics[i]) throw new IllegalArgumentException(ics[i] + is not visible from class loader ); // \u62fc\u63a5\u63a5\u53e3\u5168\u9650\u5b9a\u540d\uff0c\u5206\u9694\u7b26\u4e3a ; sb.append(itf).append(';'); } // \u4f7f\u7528\u62fc\u63a5\u540e\u7684\u63a5\u53e3\u540d\u4f5c\u4e3a key String key = sb.toString(); Map String, Object cache; synchronized (ProxyCacheMap) { cache = ProxyCacheMap.get(cl); if (cache == null) { cache = new HashMap String, Object (); ProxyCacheMap.put(cl, cache); } } Proxy proxy = null; synchronized (cache) { do { // \u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6 Reference Proxy \u5b9e\u4f8b Object value = cache.get(key); if (value instanceof Reference ? ) { proxy = (Proxy) ((Reference ? ) value).get(); if (proxy != null) { return proxy; } } // \u5e76\u53d1\u63a7\u5236\uff0c\u4fdd\u8bc1\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u8fdb\u884c\u540e\u7eed\u64cd\u4f5c if (value == PendingGenerationMarker) { try { // \u5176\u4ed6\u7ebf\u7a0b\u5728\u6b64\u5904\u8fdb\u884c\u7b49\u5f85 cache.wait(); } catch (InterruptedException e) { } } else { // \u653e\u7f6e\u6807\u5fd7\u4f4d\u5230\u7f13\u5b58\u4e2d\uff0c\u5e76\u8df3\u51fa while \u5faa\u73af\u8fdb\u884c\u540e\u7eed\u64cd\u4f5c cache.put(key, PendingGenerationMarker); break; } } while (true); } long id = PROXY_CLASS_COUNTER.getAndIncrement(); String pkg = null; ClassGenerator ccp = null, ccm = null; try { // \u521b\u5efa ClassGenerator \u5bf9\u8c61 ccp = ClassGenerator.newInstance(cl); Set String worked = new HashSet String (); List Method methods = new ArrayList Method (); for (int i = 0; i ics.length; i++) { // \u68c0\u6d4b\u63a5\u53e3\u8bbf\u95ee\u7ea7\u522b\u662f\u5426\u4e3a protected \u6216 privete if (!Modifier.isPublic(ics[i].getModifiers())) { // \u83b7\u53d6\u63a5\u53e3\u5305\u540d String npkg = ics[i].getPackage().getName(); if (pkg == null) { pkg = npkg; } else { if (!pkg.equals(npkg)) // \u975e public \u7ea7\u522b\u7684\u63a5\u53e3\u5fc5\u987b\u5728\u540c\u4e00\u4e2a\u5305\u4e0b\uff0c\u5426\u8005\u629b\u51fa\u5f02\u5e38 throw new IllegalArgumentException( non-public interfaces from different packages ); } } // \u6dfb\u52a0\u63a5\u53e3\u5230 ClassGenerator \u4e2d ccp.addInterface(ics[i]); // \u904d\u5386\u63a5\u53e3\u65b9\u6cd5 for (Method method : ics[i].getMethods()) { // \u83b7\u53d6\u65b9\u6cd5\u63cf\u8ff0\uff0c\u53ef\u7406\u89e3\u4e3a\u65b9\u6cd5\u7b7e\u540d String desc = ReflectUtils.getDesc(method); // \u5982\u679c\u65b9\u6cd5\u63cf\u8ff0\u5b57\u7b26\u4e32\u5df2\u5728 worked \u4e2d\uff0c\u5219\u5ffd\u7565\u3002\u8003\u8651\u8fd9\u79cd\u60c5\u51b5\uff0c // A \u63a5\u53e3\u548c B \u63a5\u53e3\u4e2d\u5305\u542b\u4e00\u4e2a\u5b8c\u5168\u76f8\u540c\u7684\u65b9\u6cd5 if (worked.contains(desc)) continue; worked.add(desc); int ix = methods.size(); // \u83b7\u53d6\u65b9\u6cd5\u8fd4\u56de\u503c\u7c7b\u578b Class ? rt = method.getReturnType(); // \u83b7\u53d6\u53c2\u6570\u5217\u8868 Class ? [] pts = method.getParameterTypes(); // \u751f\u6210 Object[] args = new Object[1...N] StringBuilder code = new StringBuilder( Object[] args = new Object[ ).append(pts.length).append( ]; ); for (int j = 0; j pts.length; j++) // \u751f\u6210 args[1...N] = ($w)$1...N; code.append( args[ ).append(j).append( ] = ($w)$ ).append(j + 1).append( ; ); // \u751f\u6210 InvokerHandler \u63a5\u53e3\u7684 invoker \u65b9\u6cd5\u8c03\u7528\u8bed\u53e5\uff0c\u5982\u4e0b\uff1a // Object ret = handler.invoke(this, methods[1...N], args); code.append( Object ret = handler.invoke(this, methods[ + ix + ], args); ); // \u8fd4\u56de\u503c\u4e0d\u4e3a void if (!Void.TYPE.equals(rt)) // \u751f\u6210\u8fd4\u56de\u8bed\u53e5\uff0c\u5f62\u5982 return (java.lang.String) ret; code.append( return ).append(asArgument(rt, ret )).append( ; ); methods.add(method); // \u6dfb\u52a0\u65b9\u6cd5\u540d\u3001\u8bbf\u95ee\u63a7\u5236\u7b26\u3001\u53c2\u6570\u5217\u8868\u3001\u65b9\u6cd5\u4ee3\u7801\u7b49\u4fe1\u606f\u5230 ClassGenerator \u4e2d ccp.addMethod(method.getName(), method.getModifiers(), rt, pts, method.getExceptionTypes(), code.toString()); } } if (pkg == null) pkg = PACKAGE_NAME; // \u6784\u5efa\u63a5\u53e3\u4ee3\u7406\u7c7b\u540d\u79f0\uff1apkg + .proxy + id\uff0c\u6bd4\u5982 org.apache.dubbo.proxy0 String pcn = pkg + .proxy + id; ccp.setClassName(pcn); ccp.addField( public static java.lang.reflect.Method[] methods; ); // \u751f\u6210 private java.lang.reflect.InvocationHandler handler; ccp.addField( private + InvocationHandler.class.getName() + handler; ); // \u4e3a\u63a5\u53e3\u4ee3\u7406\u7c7b\u6dfb\u52a0\u5e26\u6709 InvocationHandler \u53c2\u6570\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u6bd4\u5982\uff1a // porxy0(java.lang.reflect.InvocationHandler arg0) { // handler=$1; // } ccp.addConstructor(Modifier.PUBLIC, new Class ? []{InvocationHandler.class}, new Class ? [0], handler=$1; ); // \u4e3a\u63a5\u53e3\u4ee3\u7406\u7c7b\u6dfb\u52a0\u9ed8\u8ba4\u6784\u9020\u65b9\u6cd5 ccp.addDefaultConstructor(); // \u751f\u6210\u63a5\u53e3\u4ee3\u7406\u7c7b Class ? clazz = ccp.toClass(); clazz.getField( methods ).set(null, methods.toArray(new Method[0])); // \u6784\u5efa Proxy \u5b50\u7c7b\u540d\u79f0\uff0c\u6bd4\u5982 Proxy1\uff0cProxy2 \u7b49 String fcn = Proxy.class.getName() + id; ccm = ClassGenerator.newInstance(cl); ccm.setClassName(fcn); ccm.addDefaultConstructor(); ccm.setSuperClass(Proxy.class); // \u4e3a Proxy \u7684\u62bd\u8c61\u65b9\u6cd5 newInstance \u751f\u6210\u5b9e\u73b0\u4ee3\u7801\uff0c\u5f62\u5982\uff1a // public Object newInstance(java.lang.reflect.InvocationHandler h) { // return new org.apache.dubbo.proxy0($1); // } ccm.addMethod( public Object newInstance( + InvocationHandler.class.getName() + h){ return new + pcn + ($1); } ); // \u751f\u6210 Proxy \u5b9e\u73b0\u7c7b Class ? pc = ccm.toClass(); // \u901a\u8fc7\u53cd\u5c04\u521b\u5efa Proxy \u5b9e\u4f8b proxy = (Proxy) pc.newInstance(); } catch (RuntimeException e) { throw e; } catch (Exception e) { throw new RuntimeException(e.getMessage(), e); } finally { if (ccp != null) // \u91ca\u653e\u8d44\u6e90 ccp.release(); if (ccm != null) ccm.release(); synchronized (cache) { if (proxy == null) cache.remove(key); else // \u5199\u7f13\u5b58 cache.put(key, new WeakReference Proxy (proxy)); // \u5524\u9192\u5176\u4ed6\u7b49\u5f85\u7ebf\u7a0b cache.notifyAll(); } } return proxy; } \u4e0a\u9762\u4ee3\u7801\u6bd4\u8f83\u590d\u6742\uff0c\u6211\u4eec\u5199\u4e86\u5927\u91cf\u7684\u6ce8\u91ca\u3002\u5927\u5bb6\u5728\u9605\u8bfb\u8fd9\u6bb5\u4ee3\u7801\u65f6\uff0c\u8981\u641e\u6e05\u695a ccp \u548c ccm \u7684\u7528\u9014\uff0c\u4e0d\u7136\u4f1a\u88ab\u641e\u6655\u3002ccp \u7528\u4e8e\u4e3a\u670d\u52a1\u63a5\u53e3\u751f\u6210\u4ee3\u7406\u7c7b\uff0c\u6bd4\u5982\u6211\u4eec\u6709\u4e00\u4e2a DemoService \u63a5\u53e3\uff0c\u8fd9\u4e2a\u63a5\u53e3\u4ee3\u7406\u7c7b\u5c31\u662f\u7531 ccp \u751f\u6210\u7684\u3002ccm \u5219\u662f\u7528\u4e8e\u4e3a org.apache.dubbo.common.bytecode.Proxy \u62bd\u8c61\u7c7b\u751f\u6210\u5b50\u7c7b\uff0c\u4e3b\u8981\u662f\u5b9e\u73b0 Proxy \u7c7b\u7684\u62bd\u8c61\u65b9\u6cd5\u3002\u4e0b\u9762\u4ee5 org.apache.dubbo.demo.DemoService \u8fd9\u4e2a\u63a5\u53e3\u4e3a\u4f8b\uff0c\u6765\u770b\u4e00\u4e0b\u8be5\u63a5\u53e3\u4ee3\u7406\u7c7b\u4ee3\u7801\u5927\u81f4\u662f\u600e\u6837\u7684\uff08\u5ffd\u7565 EchoService \u63a5\u53e3\uff09\u3002 package org.apache.dubbo.common.bytecode; public class proxy0 implements org.apache.dubbo.demo.DemoService { public static java.lang.reflect.Method[] methods; private java.lang.reflect.InvocationHandler handler; public proxy0() { } public proxy0(java.lang.reflect.InvocationHandler arg0) { handler = $1; } public java.lang.String sayHello(java.lang.String arg0) { Object[] args = new Object[1]; args[0] = ($w) $1; Object ret = handler.invoke(this, methods[0], args); return (java.lang.String) ret; } } \u597d\u4e86\uff0c\u5230\u8fd9\u91cc\u4ee3\u7406\u7c7b\u751f\u6210\u903b\u8f91\u5c31\u5206\u6790\u5b8c\u4e86\u3002\u6574\u4e2a\u8fc7\u7a0b\u6bd4\u8f83\u590d\u6742\uff0c\u5927\u5bb6\u9700\u8981\u8010\u5fc3\u770b\u4e00\u4e0b\u3002 4.\u603b\u7ed3 \u672c\u7bc7\u6587\u7ae0\u5bf9\u670d\u52a1\u5f15\u7528\u7684\u8fc7\u7a0b\u8fdb\u884c\u4e86\u8f83\u4e3a\u8be6\u5c3d\u7684\u5206\u6790\uff0c\u8fd8\u6709\u4e00\u4e9b\u903b\u8f91\u6682\u65f6\u6ca1\u6709\u5206\u6790\u5230\uff0c\u6bd4\u5982 Directory\u3001Cluster\u3002\u8fd9\u4e9b\u63a5\u53e3\u53ca\u5b9e\u73b0\u7c7b\u529f\u80fd\u6bd4\u8f83\u72ec\u7acb\uff0c\u540e\u7eed\u4f1a\u5355\u72ec\u6210\u6587\u8fdb\u884c\u5206\u6790\u3002\u6682\u65f6\u6211\u4eec\u53ef\u4ee5\u5148\u628a\u8fd9\u4e9b\u7c7b\u770b\u6210\u9ed1\u76d2\uff0c\u53ea\u8981\u77e5\u9053\u8fd9\u4e9b\u7c7b\u7684\u7528\u9014\u5373\u53ef\u3002\u5173\u4e8e\u670d\u52a1\u5f15\u7528\u8fc7\u7a0b\u5c31\u5206\u6790\u5230\u8fd9\u91cc\u3002","title":"\u670d\u52a1\u5f15\u7528"},{"location":"source_code_guide/refer-service/#1","text":"\u4e0a\u4e00\u7bc7\u6587\u7ae0\u8be6\u7ec6\u5206\u6790\u4e86\u670d\u52a1\u5bfc\u51fa\u7684\u8fc7\u7a0b\uff0c\u672c\u7bc7\u6587\u7ae0\u6211\u4eec\u8d81\u70ed\u6253\u94c1\uff0c\u7ee7\u7eed\u5206\u6790\u670d\u52a1\u5f15\u7528\u8fc7\u7a0b\u3002\u5728 Dubbo \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u5f15\u7528\u8fdc\u7a0b\u670d\u52a1\u3002\u7b2c\u4e00\u79cd\u662f\u4f7f\u7528\u670d\u52a1\u76f4\u8fde\u7684\u65b9\u5f0f\u5f15\u7528\u670d\u52a1\uff0c\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u662f\u57fa\u4e8e\u6ce8\u518c\u4e2d\u5fc3\u8fdb\u884c\u5f15\u7528\u3002\u670d\u52a1\u76f4\u8fde\u7684\u65b9\u5f0f\u4ec5\u9002\u5408\u5728\u8c03\u8bd5\u6216\u6d4b\u8bd5\u670d\u52a1\u7684\u573a\u666f\u4e0b\u4f7f\u7528\uff0c\u4e0d\u9002\u5408\u5728\u7ebf\u4e0a\u73af\u5883\u4f7f\u7528\u3002\u56e0\u6b64\uff0c\u672c\u6587\u6211\u5c06\u91cd\u70b9\u5206\u6790\u901a\u8fc7\u6ce8\u518c\u4e2d\u5fc3\u5f15\u7528\u670d\u52a1\u7684\u8fc7\u7a0b\u3002\u4ece\u6ce8\u518c\u4e2d\u5fc3\u4e2d\u83b7\u53d6\u670d\u52a1\u914d\u7f6e\u53ea\u662f\u670d\u52a1\u5f15\u7528\u8fc7\u7a0b\u4e2d\u7684\u4e00\u73af\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u670d\u52a1\u6d88\u8d39\u8005\u8fd8\u9700\u8981\u7ecf\u5386 Invoker \u521b\u5efa\u3001\u4ee3\u7406\u7c7b\u521b\u5efa\u7b49\u6b65\u9aa4\u3002\u8fd9\u4e9b\u6b65\u9aa4\uff0c\u5c06\u5728\u540e\u7eed\u7ae0\u8282\u4e2d\u4e00\u4e00\u8fdb\u884c\u5206\u6790\u3002","title":"1. \u7b80\u4ecb"},{"location":"source_code_guide/refer-service/#2","text":"Dubbo \u670d\u52a1\u5f15\u7528\u7684\u65f6\u673a\u6709\u4e24\u4e2a\uff0c\u7b2c\u4e00\u4e2a\u662f\u5728 Spring \u5bb9\u5668\u8c03\u7528 ReferenceBean \u7684 afterPropertiesSet \u65b9\u6cd5\u65f6\u5f15\u7528\u670d\u52a1\uff0c\u7b2c\u4e8c\u4e2a\u662f\u5728 ReferenceBean \u5bf9\u5e94\u7684\u670d\u52a1\u88ab\u6ce8\u5165\u5230\u5176\u4ed6\u7c7b\u4e2d\u65f6\u5f15\u7528\u3002\u8fd9\u4e24\u4e2a\u5f15\u7528\u670d\u52a1\u7684\u65f6\u673a\u533a\u522b\u5728\u4e8e\uff0c\u7b2c\u4e00\u4e2a\u662f\u997f\u6c49\u5f0f\u7684\uff0c\u7b2c\u4e8c\u4e2a\u662f\u61d2\u6c49\u5f0f\u7684\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cDubbo \u4f7f\u7528\u61d2\u6c49\u5f0f\u5f15\u7528\u670d\u52a1\u3002\u5982\u679c\u9700\u8981\u4f7f\u7528\u997f\u6c49\u5f0f\uff0c\u53ef\u901a\u8fc7\u914d\u7f6e \\ dubbo:reference> \u7684 init \u5c5e\u6027\u5f00\u542f\u3002\u4e0b\u9762\u6211\u4eec\u6309\u7167 Dubbo \u9ed8\u8ba4\u914d\u7f6e\u8fdb\u884c\u5206\u6790\uff0c\u6574\u4e2a\u5206\u6790\u8fc7\u7a0b\u4ece ReferenceBean \u7684 getObject \u65b9\u6cd5\u5f00\u59cb\u3002\u5f53\u6211\u4eec\u7684\u670d\u52a1\u88ab\u6ce8\u5165\u5230\u5176\u4ed6\u7c7b\u4e2d\u65f6\uff0cSpring \u4f1a\u7b2c\u4e00\u65f6\u95f4\u8c03\u7528 getObject \u65b9\u6cd5\uff0c\u5e76\u7531\u8be5\u65b9\u6cd5\u6267\u884c\u670d\u52a1\u5f15\u7528\u903b\u8f91\u3002\u6309\u7167\u60ef\u4f8b\uff0c\u5728\u8fdb\u884c\u5177\u4f53\u5de5\u4f5c\u4e4b\u524d\uff0c\u9700\u5148\u8fdb\u884c\u914d\u7f6e\u68c0\u67e5\u4e0e\u6536\u96c6\u5de5\u4f5c\u3002\u63a5\u7740\u6839\u636e\u6536\u96c6\u5230\u7684\u4fe1\u606f\u51b3\u5b9a\u670d\u52a1\u7528\u7684\u65b9\u5f0f\uff0c\u6709\u4e09\u79cd\uff0c\u7b2c\u4e00\u79cd\u662f\u5f15\u7528\u672c\u5730 (JVM) \u670d\u52a1\uff0c\u7b2c\u4e8c\u662f\u901a\u8fc7\u76f4\u8fde\u65b9\u5f0f\u5f15\u7528\u8fdc\u7a0b\u670d\u52a1\uff0c\u7b2c\u4e09\u662f\u901a\u8fc7\u6ce8\u518c\u4e2d\u5fc3\u5f15\u7528\u8fdc\u7a0b\u670d\u52a1\u3002\u4e0d\u7ba1\u662f\u54ea\u79cd\u5f15\u7528\u65b9\u5f0f\uff0c\u6700\u540e\u90fd\u4f1a\u5f97\u5230\u4e00\u4e2a Invoker \u5b9e\u4f8b\u3002\u5982\u679c\u6709\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3\uff0c\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u8fd9\u4e2a\u65f6\u5019\u4f1a\u5f97\u5230\u4e00\u7ec4 Invoker \u5b9e\u4f8b\uff0c\u6b64\u65f6\u9700\u8981\u901a\u8fc7\u96c6\u7fa4\u7ba1\u7406\u7c7b Cluster \u5c06\u591a\u4e2a Invoker \u5408\u5e76\u6210\u4e00\u4e2a\u5b9e\u4f8b\u3002\u5408\u5e76\u540e\u7684 Invoker \u5b9e\u4f8b\u5df2\u7ecf\u5177\u5907\u8c03\u7528\u672c\u5730\u6216\u8fdc\u7a0b\u670d\u52a1\u7684\u80fd\u529b\u4e86\uff0c\u4f46\u5e76\u4e0d\u80fd\u5c06\u6b64\u5b9e\u4f8b\u66b4\u9732\u7ed9\u7528\u6237\u4f7f\u7528\uff0c\u8fd9\u4f1a\u5bf9\u7528\u6237\u4e1a\u52a1\u4ee3\u7801\u9020\u6210\u4fb5\u5165\u3002\u6b64\u65f6\u6846\u67b6\u8fd8\u9700\u8981\u901a\u8fc7\u4ee3\u7406\u5de5\u5382\u7c7b (ProxyFactory) \u4e3a\u670d\u52a1\u63a5\u53e3\u751f\u6210\u4ee3\u7406\u7c7b\uff0c\u5e76\u8ba9\u4ee3\u7406\u7c7b\u53bb\u8c03\u7528 Invoker \u903b\u8f91\u3002\u907f\u514d\u4e86 Dubbo \u6846\u67b6\u4ee3\u7801\u5bf9\u4e1a\u52a1\u4ee3\u7801\u7684\u4fb5\u5165\uff0c\u540c\u65f6\u4e5f\u8ba9\u6846\u67b6\u66f4\u5bb9\u6613\u4f7f\u7528\u3002 \u4ee5\u4e0a\u5c31\u662f\u670d\u52a1\u5f15\u7528\u7684\u5927\u81f4\u539f\u7406\uff0c\u4e0b\u9762\u6211\u4eec\u6df1\u5165\u5230\u4ee3\u7801\u4e2d\uff0c\u8be6\u7ec6\u5206\u6790\u670d\u52a1\u5f15\u7528\u7ec6\u8282\u3002","title":"2.\u670d\u52a1\u5f15\u7528\u539f\u7406"},{"location":"source_code_guide/refer-service/#3","text":"\u670d\u52a1\u5f15\u7528\u7684\u5165\u53e3\u65b9\u6cd5\u4e3a ReferenceBean \u7684 getObject \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u5b9a\u4e49\u5728 Spring \u7684 FactoryBean \u63a5\u53e3\u4e2d\uff0cReferenceBean \u5b9e\u73b0\u4e86\u8fd9\u4e2a\u65b9\u6cd5\u3002\u5b9e\u73b0\u4ee3\u7801\u5982\u4e0b\uff1a public Object getObject() throws Exception { return get(); } public synchronized T get() { if (destroyed) { throw new IllegalStateException( Already destroyed! ); } // \u68c0\u6d4b ref \u662f\u5426\u4e3a\u7a7a\uff0c\u4e3a\u7a7a\u5219\u901a\u8fc7 init \u65b9\u6cd5\u521b\u5efa if (ref == null) { // init \u65b9\u6cd5\u4e3b\u8981\u7528\u4e8e\u5904\u7406\u914d\u7f6e\uff0c\u4ee5\u53ca\u8c03\u7528 createProxy \u751f\u6210\u4ee3\u7406\u7c7b init(); } return ref; } \u4ee5\u4e0a\u4e24\u4e2a\u65b9\u6cd5\u7684\u4ee3\u7801\u6bd4\u8f83\u7b80\u77ed\uff0c\u5e76\u4e0d\u96be\u7406\u89e3\u3002\u8fd9\u91cc\u9700\u8981\u7279\u522b\u8bf4\u660e\u4e00\u4e0b\uff0c\u5982\u679c\u4f60\u5bf9 2.6.4 \u53ca\u4ee5\u4e0b\u7248\u672c\u7684 getObject \u65b9\u6cd5\u8fdb\u884c\u8c03\u8bd5\u65f6\uff0c\u4f1a\u78b0\u5230\u6bd4\u8f83\u5947\u602a\u7684\u7684\u95ee\u9898\u3002\u8fd9\u91cc\u5047\u8bbe\u4f60\u4f7f\u7528 IDEA\uff0c\u4e14\u4fdd\u6301\u4e86 IDEA \u7684\u9ed8\u8ba4\u914d\u7f6e\u3002\u5f53\u4f60\u9762\u8c03\u8bd5\u5230 get \u65b9\u6cd5\u7684 if (ref == null) \u65f6\uff0c\u4f60\u4f1a\u53d1\u73b0 ref \u4e0d\u4e3a\u7a7a\uff0c\u5bfc\u81f4\u4f60\u65e0\u6cd5\u8fdb\u5165\u5230 init \u65b9\u6cd5\u4e2d\u7ee7\u7eed\u8c03\u8bd5\u3002\u5bfc\u81f4\u8fd9\u4e2a\u73b0\u8c61\u7684\u539f\u56e0\u662f Dubbo \u6846\u67b6\u672c\u8eab\u6709\u4e00\u4e9b\u5c0f\u95ee\u9898\u3002\u8be5\u95ee\u9898\u5df2\u7ecf\u5728 pull request #2754 \u4fee\u590d\u4e86\u6b64\u95ee\u9898\uff0c\u5e76\u8ddf\u968f 2.6.5 \u7248\u672c\u53d1\u5e03\u4e86\u3002\u5982\u679c\u4f60\u6b63\u5728\u5b66\u4e60 2.6.4 \u53ca\u4ee5\u4e0b\u7248\u672c\uff0c\u53ef\u901a\u8fc7\u4fee\u6539 IDEA \u914d\u7f6e\u89c4\u907f\u8fd9\u4e2a\u95ee\u9898\u3002\u9996\u5148 IDEA \u914d\u7f6e\u5f39\u7a97\u4e2d\u641c\u7d22 toString\uff0c\u7136\u540e\u53d6\u6d88 Enable 'toString' object view \u52fe\u9009\u3002\u5177\u4f53\u5982\u4e0b\uff1a","title":"3.\u6e90\u7801\u5206\u6790"},{"location":"source_code_guide/refer-service/#31","text":"Dubbo \u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u914d\u7f6e\uff0c\u7528\u4e8e\u8c03\u6574\u548c\u4f18\u5316\u6846\u67b6\u884c\u4e3a\uff0c\u6027\u80fd\u7b49\u3002Dubbo \u5728\u5f15\u7528\u6216\u5bfc\u51fa\u670d\u52a1\u65f6\uff0c\u9996\u5148\u4f1a\u5bf9\u8fd9\u4e9b\u914d\u7f6e\u8fdb\u884c\u68c0\u67e5\u548c\u5904\u7406\uff0c\u4ee5\u4fdd\u8bc1\u914d\u7f6e\u7684\u6b63\u786e\u6027\u3002\u914d\u7f6e\u89e3\u6790\u903b\u8f91\u5c01\u88c5\u5728 ReferenceConfig \u7684 init \u65b9\u6cd5\u4e2d\uff0c\u4e0b\u9762\u8fdb\u884c\u5206\u6790\u3002 private void init() { // \u907f\u514d\u91cd\u590d\u521d\u59cb\u5316 if (initialized) { return; } initialized = true; // \u68c0\u6d4b\u63a5\u53e3\u540d\u5408\u6cd5\u6027 if (interfaceName == null || interfaceName.length() == 0) { throw new IllegalStateException( interface not allow null! ); } // \u68c0\u6d4b consumer \u53d8\u91cf\u662f\u5426\u4e3a\u7a7a\uff0c\u4e3a\u7a7a\u5219\u521b\u5efa checkDefault(); appendProperties(this); if (getGeneric() == null getConsumer() != null) { // \u8bbe\u7f6e generic setGeneric(getConsumer().getGeneric()); } // \u68c0\u6d4b\u662f\u5426\u4e3a\u6cdb\u5316\u63a5\u53e3 if (ProtocolUtils.isGeneric(getGeneric())) { interfaceClass = GenericService.class; } else { try { // \u52a0\u8f7d\u7c7b interfaceClass = Class.forName(interfaceName, true, Thread.currentThread() .getContextClassLoader()); } catch (ClassNotFoundException e) { throw new IllegalStateException(e.getMessage(), e); } checkInterfaceAndMethods(interfaceClass, methods); } // -------------------------------\u2728 \u5206\u5272\u7ebf1 \u2728------------------------------ // \u4ece\u7cfb\u7edf\u53d8\u91cf\u4e2d\u83b7\u53d6\u4e0e\u63a5\u53e3\u540d\u5bf9\u5e94\u7684\u5c5e\u6027\u503c String resolve = System.getProperty(interfaceName); String resolveFile = null; if (resolve == null || resolve.length() == 0) { // \u4ece\u7cfb\u7edf\u5c5e\u6027\u4e2d\u83b7\u53d6\u89e3\u6790\u6587\u4ef6\u8def\u5f84 resolveFile = System.getProperty( dubbo.resolve.file ); if (resolveFile == null || resolveFile.length() == 0) { // \u4ece\u6307\u5b9a\u4f4d\u7f6e\u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6 File userResolveFile = new File(new File(System.getProperty( user.home )), dubbo-resolve.properties ); if (userResolveFile.exists()) { // \u83b7\u53d6\u6587\u4ef6\u7edd\u5bf9\u8def\u5f84 resolveFile = userResolveFile.getAbsolutePath(); } } if (resolveFile != null resolveFile.length() 0) { Properties properties = new Properties(); FileInputStream fis = null; try { fis = new FileInputStream(new File(resolveFile)); // \u4ece\u6587\u4ef6\u4e2d\u52a0\u8f7d\u914d\u7f6e properties.load(fis); } catch (IOException e) { throw new IllegalStateException( Unload ..., cause:... ); } finally { try { if (null != fis) fis.close(); } catch (IOException e) { logger.warn(e.getMessage(), e); } } // \u83b7\u53d6\u4e0e\u63a5\u53e3\u540d\u5bf9\u5e94\u7684\u914d\u7f6e resolve = properties.getProperty(interfaceName); } } if (resolve != null resolve.length() 0) { // \u5c06 resolve \u8d4b\u503c\u7ed9 url url = resolve; } // -------------------------------\u2728 \u5206\u5272\u7ebf2 \u2728------------------------------ if (consumer != null) { if (application == null) { // \u4ece consumer \u4e2d\u83b7\u53d6 Application \u5b9e\u4f8b\uff0c\u4e0b\u540c application = consumer.getApplication(); } if (module == null) { module = consumer.getModule(); } if (registries == null) { registries = consumer.getRegistries(); } if (monitor == null) { monitor = consumer.getMonitor(); } } if (module != null) { if (registries == null) { registries = module.getRegistries(); } if (monitor == null) { monitor = module.getMonitor(); } } if (application != null) { if (registries == null) { registries = application.getRegistries(); } if (monitor == null) { monitor = application.getMonitor(); } } // \u68c0\u6d4b Application \u5408\u6cd5\u6027 checkApplication(); // \u68c0\u6d4b\u672c\u5730\u5b58\u6839\u914d\u7f6e\u5408\u6cd5\u6027 checkStubAndMock(interfaceClass); // -------------------------------\u2728 \u5206\u5272\u7ebf3 \u2728------------------------------ Map String, String map = new HashMap String, String (); Map Object, Object attributes = new HashMap Object, Object (); // \u6dfb\u52a0 side\u3001\u534f\u8bae\u7248\u672c\u4fe1\u606f\u3001\u65f6\u95f4\u6233\u548c\u8fdb\u7a0b\u53f7\u7b49\u4fe1\u606f\u5230 map \u4e2d map.put(Constants.SIDE_KEY, Constants.CONSUMER_SIDE); map.put(Constants.DUBBO_VERSION_KEY, Version.getProtocolVersion()); map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis())); if (ConfigUtils.getPid() 0) { map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid())); } // \u975e\u6cdb\u5316\u670d\u52a1 if (!isGeneric()) { // \u83b7\u53d6\u7248\u672c String revision = Version.getVersion(interfaceClass, version); if (revision != null revision.length() 0) { map.put( revision , revision); } // \u83b7\u53d6\u63a5\u53e3\u65b9\u6cd5\u5217\u8868\uff0c\u5e76\u6dfb\u52a0\u5230 map \u4e2d String[] methods = Wrapper.getWrapper(interfaceClass).getMethodNames(); if (methods.length == 0) { map.put( methods , Constants.ANY_VALUE); } else { map.put( methods , StringUtils.join(new HashSet String (Arrays.asList(methods)), , )); } } map.put(Constants.INTERFACE_KEY, interfaceName); // \u5c06 ApplicationConfig\u3001ConsumerConfig\u3001ReferenceConfig \u7b49\u5bf9\u8c61\u7684\u5b57\u6bb5\u4fe1\u606f\u6dfb\u52a0\u5230 map \u4e2d appendParameters(map, application); appendParameters(map, module); appendParameters(map, consumer, Constants.DEFAULT_KEY); appendParameters(map, this); // -------------------------------\u2728 \u5206\u5272\u7ebf4 \u2728------------------------------ String prefix = StringUtils.getServiceKey(map); if (methods != null !methods.isEmpty()) { // \u904d\u5386 MethodConfig \u5217\u8868 for (MethodConfig method : methods) { appendParameters(map, method, method.getName()); String retryKey = method.getName() + .retry ; // \u68c0\u6d4b map \u662f\u5426\u5305\u542b methodName.retry if (map.containsKey(retryKey)) { String retryValue = map.remove(retryKey); if ( false .equals(retryValue)) { // \u6dfb\u52a0\u91cd\u8bd5\u6b21\u6570\u914d\u7f6e methodName.retries map.put(method.getName() + .retries , 0 ); } } // \u6dfb\u52a0 MethodConfig \u4e2d\u7684\u201c\u5c5e\u6027\u201d\u5b57\u6bb5\u5230 attributes // \u6bd4\u5982 onreturn\u3001onthrow\u3001oninvoke \u7b49 appendAttributes(attributes, method, prefix + . + method.getName()); checkAndConvertImplicitConfig(method, map, attributes); } } // -------------------------------\u2728 \u5206\u5272\u7ebf5 \u2728------------------------------ // \u83b7\u53d6\u670d\u52a1\u6d88\u8d39\u8005 ip \u5730\u5740 String hostToRegistry = ConfigUtils.getSystemProperty(Constants.DUBBO_IP_TO_REGISTRY); if (hostToRegistry == null || hostToRegistry.length() == 0) { hostToRegistry = NetUtils.getLocalHost(); } else if (isInvalidLocalHost(hostToRegistry)) { throw new IllegalArgumentException( Specified invalid registry ip from property... ); } map.put(Constants.REGISTER_IP_KEY, hostToRegistry); // \u5b58\u50a8 attributes \u5230\u7cfb\u7edf\u4e0a\u4e0b\u6587\u4e2d StaticContext.getSystemContext().putAll(attributes); // \u521b\u5efa\u4ee3\u7406\u7c7b ref = createProxy(map); // \u6839\u636e\u670d\u52a1\u540d\uff0cReferenceConfig\uff0c\u4ee3\u7406\u7c7b\u6784\u5efa ConsumerModel\uff0c // \u5e76\u5c06 ConsumerModel \u5b58\u5165\u5230 ApplicationModel \u4e2d ConsumerModel consumerModel = new ConsumerModel(getUniqueServiceName(), this, ref, interfaceClass.getMethods()); ApplicationModel.initConsumerModel(getUniqueServiceName(), consumerModel); } \u4e0a\u9762\u7684\u4ee3\u7801\u5f88\u957f\uff0c\u505a\u7684\u4e8b\u60c5\u6bd4\u8f83\u591a\u3002\u8fd9\u91cc\u6839\u636e\u4ee3\u7801\u903b\u8f91\uff0c\u5bf9\u4ee3\u7801\u8fdb\u884c\u4e86\u5206\u5757\uff0c\u4e0b\u9762\u6211\u4eec\u4e00\u8d77\u6765\u770b\u4e00\u4e0b\u3002 \u9996\u5148\u662f\u65b9\u6cd5\u5f00\u59cb\u5230\u5206\u5272\u7ebf1\u4e4b\u95f4\u7684\u4ee3\u7801\u3002\u8fd9\u6bb5\u4ee3\u7801\u4e3b\u8981\u7528\u4e8e\u68c0\u6d4b ConsumerConfig \u5b9e\u4f8b\u662f\u5426\u5b58\u5728\uff0c\u5982\u4e0d\u5b58\u5728\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b9e\u4f8b\uff0c\u7136\u540e\u901a\u8fc7\u7cfb\u7edf\u53d8\u91cf\u6216 dubbo.properties \u914d\u7f6e\u6587\u4ef6\u586b\u5145 ConsumerConfig \u7684\u5b57\u6bb5\u3002\u63a5\u7740\u662f\u68c0\u6d4b\u6cdb\u5316\u914d\u7f6e\uff0c\u5e76\u6839\u636e\u914d\u7f6e\u8bbe\u7f6e interfaceClass \u7684\u503c\u3002\u63a5\u7740\u6765\u770b\u5206\u5272\u7ebf1\u5230\u5206\u5272\u7ebf2\u4e4b\u95f4\u7684\u903b\u8f91\u3002\u8fd9\u6bb5\u903b\u8f91\u7528\u4e8e\u4ece\u7cfb\u7edf\u5c5e\u6027\u6216\u914d\u7f6e\u6587\u4ef6\u4e2d\u52a0\u8f7d\u4e0e\u63a5\u53e3\u540d\u76f8\u5bf9\u5e94\u7684\u914d\u7f6e\uff0c\u5e76\u5c06\u89e3\u6790\u7ed3\u679c\u8d4b\u503c\u7ed9 url \u5b57\u6bb5\u3002url \u5b57\u6bb5\u7684\u4f5c\u7528\u4e00\u822c\u662f\u7528\u4e8e\u70b9\u5bf9\u70b9\u8c03\u7528\u3002\u7ee7\u7eed\u5411\u4e0b\u770b\uff0c\u5206\u5272\u7ebf2\u548c\u5206\u5272\u7ebf3\u4e4b\u95f4\u7684\u4ee3\u7801\u7528\u4e8e\u68c0\u6d4b\u51e0\u4e2a\u6838\u5fc3\u914d\u7f6e\u7c7b\u662f\u5426\u4e3a\u7a7a\uff0c\u4e3a\u7a7a\u5219\u5c1d\u8bd5\u4ece\u5176\u4ed6\u914d\u7f6e\u7c7b\u4e2d\u83b7\u53d6\u3002\u5206\u5272\u7ebf3\u4e0e\u5206\u5272\u7ebf4\u4e4b\u95f4\u7684\u4ee3\u7801\u4e3b\u8981\u7528\u4e8e\u6536\u96c6\u5404\u79cd\u914d\u7f6e\uff0c\u5e76\u5c06\u914d\u7f6e\u5b58\u50a8\u5230 map \u4e2d\u3002\u5206\u5272\u7ebf4\u548c\u5206\u5272\u7ebf5\u4e4b\u95f4\u7684\u4ee3\u7801\u7528\u4e8e\u5904\u7406 MethodConfig \u5b9e\u4f8b\u3002\u8be5\u5b9e\u4f8b\u5305\u542b\u4e86\u4e8b\u4ef6\u901a\u77e5\u914d\u7f6e\uff0c\u6bd4\u5982 onreturn\u3001onthrow\u3001oninvoke \u7b49\u3002\u5206\u5272\u7ebf5\u5230\u65b9\u6cd5\u7ed3\u5c3e\u7684\u4ee3\u7801\u4e3b\u8981\u7528\u4e8e\u89e3\u6790\u670d\u52a1\u6d88\u8d39\u8005 ip\uff0c\u4ee5\u53ca\u8c03\u7528 createProxy \u521b\u5efa\u4ee3\u7406\u5bf9\u8c61\u3002\u5173\u4e8e\u8be5\u65b9\u6cd5\u7684\u8be6\u7ec6\u5206\u6790\uff0c\u5c06\u4f1a\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\u5c55\u5f00\u3002","title":"3.1 \u5904\u7406\u914d\u7f6e"},{"location":"source_code_guide/refer-service/#32","text":"\u672c\u8282\u6211\u4eec\u8981\u4ece createProxy \u5f00\u59cb\u770b\u8d77\u3002\u4ece\u5b57\u9762\u610f\u601d\u4e0a\u6765\u770b\uff0ccreateProxy \u4f3c\u4e4e\u53ea\u662f\u7528\u4e8e\u521b\u5efa\u4ee3\u7406\u5bf9\u8c61\u7684\u3002\u4f46\u5b9e\u9645\u4e0a\u5e76\u975e\u5982\u6b64\uff0c\u8be5\u65b9\u6cd5\u8fd8\u4f1a\u8c03\u7528\u5176\u4ed6\u65b9\u6cd5\u6784\u5efa\u4ee5\u53ca\u5408\u5e76 Invoker \u5b9e\u4f8b\u3002\u5177\u4f53\u7ec6\u8282\u5982\u4e0b\u3002 private T createProxy(Map String, String map) { URL tmpUrl = new URL( temp , localhost , 0, map); final boolean isJvmRefer; if (isInjvm() == null) { // url \u914d\u7f6e\u88ab\u6307\u5b9a\uff0c\u5219\u4e0d\u505a\u672c\u5730\u5f15\u7528 if (url != null url.length() 0) { isJvmRefer = false; // \u6839\u636e url \u7684\u534f\u8bae\u3001scope \u4ee5\u53ca injvm \u7b49\u53c2\u6570\u68c0\u6d4b\u662f\u5426\u9700\u8981\u672c\u5730\u5f15\u7528 // \u6bd4\u5982\u5982\u679c\u7528\u6237\u663e\u5f0f\u914d\u7f6e\u4e86 scope=local\uff0c\u6b64\u65f6 isInjvmRefer \u8fd4\u56de true } else if (InjvmProtocol.getInjvmProtocol().isInjvmRefer(tmpUrl)) { isJvmRefer = true; } else { isJvmRefer = false; } } else { // \u83b7\u53d6 injvm \u914d\u7f6e\u503c isJvmRefer = isInjvm().booleanValue(); } // \u672c\u5730\u5f15\u7528 if (isJvmRefer) { // \u751f\u6210\u672c\u5730\u5f15\u7528 URL\uff0c\u534f\u8bae\u4e3a injvm URL url = new URL(Constants.LOCAL_PROTOCOL, NetUtils.LOCALHOST, 0, interfaceClass.getName()).addParameters(map); // \u8c03\u7528 refer \u65b9\u6cd5\u6784\u5efa InjvmInvoker \u5b9e\u4f8b invoker = refprotocol.refer(interfaceClass, url); // \u8fdc\u7a0b\u5f15\u7528 } else { // url \u4e0d\u4e3a\u7a7a\uff0c\u8868\u660e\u7528\u6237\u53ef\u80fd\u60f3\u8fdb\u884c\u70b9\u5bf9\u70b9\u8c03\u7528 if (url != null url.length() 0) { // \u5f53\u9700\u8981\u914d\u7f6e\u591a\u4e2a url \u65f6\uff0c\u53ef\u7528\u5206\u53f7\u8fdb\u884c\u5206\u5272\uff0c\u8fd9\u91cc\u4f1a\u8fdb\u884c\u5207\u5206 String[] us = Constants.SEMICOLON_SPLIT_PATTERN.split(url); if (us != null us.length 0) { for (String u : us) { URL url = URL.valueOf(u); if (url.getPath() == null || url.getPath().length() == 0) { // \u8bbe\u7f6e\u63a5\u53e3\u5168\u9650\u5b9a\u540d\u4e3a url \u8def\u5f84 url = url.setPath(interfaceName); } // \u68c0\u6d4b url \u534f\u8bae\u662f\u5426\u4e3a registry\uff0c\u82e5\u662f\uff0c\u8868\u660e\u7528\u6237\u60f3\u4f7f\u7528\u6307\u5b9a\u7684\u6ce8\u518c\u4e2d\u5fc3 if (Constants.REGISTRY_PROTOCOL.equals(url.getProtocol())) { // \u5c06 map \u8f6c\u6362\u4e3a\u67e5\u8be2\u5b57\u7b26\u4e32\uff0c\u5e76\u4f5c\u4e3a refer \u53c2\u6570\u7684\u503c\u6dfb\u52a0\u5230 url \u4e2d urls.add(url.addParameterAndEncoded(Constants.REFER_KEY, StringUtils.toQueryString(map))); } else { // \u5408\u5e76 url\uff0c\u79fb\u9664\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u4e00\u4e9b\u914d\u7f6e\uff08\u8fd9\u4e9b\u914d\u7f6e\u6765\u6e90\u4e8e\u7528\u6237\u914d\u7f6e\u7684 url \u5c5e\u6027\uff09\uff0c // \u6bd4\u5982\u7ebf\u7a0b\u6c60\u76f8\u5173\u914d\u7f6e\u3002\u5e76\u4fdd\u7559\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u90e8\u5206\u914d\u7f6e\uff0c\u6bd4\u5982\u7248\u672c\uff0cgroup\uff0c\u65f6\u95f4\u6233\u7b49 // \u6700\u540e\u5c06\u5408\u5e76\u540e\u7684\u914d\u7f6e\u8bbe\u7f6e\u4e3a url \u67e5\u8be2\u5b57\u7b26\u4e32\u4e2d\u3002 urls.add(ClusterUtils.mergeUrl(url, map)); } } } } else { // \u52a0\u8f7d\u6ce8\u518c\u4e2d\u5fc3 url List URL us = loadRegistries(false); if (us != null !us.isEmpty()) { for (URL u : us) { URL monitorUrl = loadMonitor(u); if (monitorUrl != null) { map.put(Constants.MONITOR_KEY, URL.encode(monitorUrl.toFullString())); } // \u6dfb\u52a0 refer \u53c2\u6570\u5230 url \u4e2d\uff0c\u5e76\u5c06 url \u6dfb\u52a0\u5230 urls \u4e2d urls.add(u.addParameterAndEncoded(Constants.REFER_KEY, StringUtils.toQueryString(map))); } } // \u672a\u914d\u7f6e\u6ce8\u518c\u4e2d\u5fc3\uff0c\u629b\u51fa\u5f02\u5e38 if (urls.isEmpty()) { throw new IllegalStateException( No such any registry to reference... ); } } // \u5355\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u6216\u670d\u52a1\u63d0\u4f9b\u8005(\u670d\u52a1\u76f4\u8fde\uff0c\u4e0b\u540c) if (urls.size() == 1) { // \u8c03\u7528 RegistryProtocol \u7684 refer \u6784\u5efa Invoker \u5b9e\u4f8b invoker = refprotocol.refer(interfaceClass, urls.get(0)); // \u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u6216\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u6216\u8005\u4e24\u8005\u6df7\u5408 } else { List Invoker ? invokers = new ArrayList Invoker ? (); URL registryURL = null; // \u83b7\u53d6\u6240\u6709\u7684 Invoker for (URL url : urls) { // \u901a\u8fc7 refprotocol \u8c03\u7528 refer \u6784\u5efa Invoker\uff0crefprotocol \u4f1a\u5728\u8fd0\u884c\u65f6 // \u6839\u636e url \u534f\u8bae\u5934\u52a0\u8f7d\u6307\u5b9a\u7684 Protocol \u5b9e\u4f8b\uff0c\u5e76\u8c03\u7528\u5b9e\u4f8b\u7684 refer \u65b9\u6cd5 invokers.add(refprotocol.refer(interfaceClass, url)); if (Constants.REGISTRY_PROTOCOL.equals(url.getProtocol())) { registryURL = url; } } if (registryURL != null) { // \u5982\u679c\u6ce8\u518c\u4e2d\u5fc3\u94fe\u63a5\u4e0d\u4e3a\u7a7a\uff0c\u5219\u5c06\u4f7f\u7528 AvailableCluster URL u = registryURL.addParameter(Constants.CLUSTER_KEY, AvailableCluster.NAME); // \u521b\u5efa StaticDirectory \u5b9e\u4f8b\uff0c\u5e76\u7531 Cluster \u5bf9\u591a\u4e2a Invoker \u8fdb\u884c\u5408\u5e76 invoker = cluster.join(new StaticDirectory(u, invokers)); } else { invoker = cluster.join(new StaticDirectory(invokers)); } } } Boolean c = check; if (c == null consumer != null) { c = consumer.isCheck(); } if (c == null) { c = true; } // invoker \u53ef\u7528\u6027\u68c0\u67e5 if (c !invoker.isAvailable()) { throw new IllegalStateException( No provider available for the service... ); } // \u751f\u6210\u4ee3\u7406\u7c7b return (T) proxyFactory.getProxy(invoker); } \u4e0a\u9762\u4ee3\u7801\u5f88\u591a\uff0c\u4e0d\u8fc7\u903b\u8f91\u6bd4\u8f83\u6e05\u6670\u3002\u9996\u5148\u6839\u636e\u914d\u7f6e\u68c0\u67e5\u662f\u5426\u4e3a\u672c\u5730\u8c03\u7528\uff0c\u82e5\u662f\uff0c\u5219\u8c03\u7528 InjvmProtocol \u7684 refer \u65b9\u6cd5\u751f\u6210 InjvmInvoker \u5b9e\u4f8b\u3002\u82e5\u4e0d\u662f\uff0c\u5219\u8bfb\u53d6\u76f4\u8fde\u914d\u7f6e\u9879\uff0c\u6216\u6ce8\u518c\u4e2d\u5fc3 url\uff0c\u5e76\u5c06\u8bfb\u53d6\u5230\u7684 url \u5b58\u50a8\u5230 urls \u4e2d\u3002\u7136\u540e\u6839\u636e urls \u5143\u7d20\u6570\u91cf\u8fdb\u884c\u540e\u7eed\u64cd\u4f5c\u3002\u82e5 urls \u5143\u7d20\u6570\u91cf\u4e3a1\uff0c\u5219\u76f4\u63a5\u901a\u8fc7 Protocol \u81ea\u9002\u5e94\u62d3\u5c55\u7c7b\u6784\u5efa Invoker \u5b9e\u4f8b\u63a5\u53e3\u3002\u82e5 urls \u5143\u7d20\u6570\u91cf\u5927\u4e8e1\uff0c\u5373\u5b58\u5728\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u6216\u670d\u52a1\u76f4\u8fde url\uff0c\u6b64\u65f6\u5148\u6839\u636e url \u6784\u5efa Invoker\u3002\u7136\u540e\u518d\u901a\u8fc7 Cluster \u5408\u5e76\u591a\u4e2a Invoker\uff0c\u6700\u540e\u8c03\u7528 ProxyFactory \u751f\u6210\u4ee3\u7406\u7c7b\u3002Invoker \u7684\u6784\u5efa\u8fc7\u7a0b\u4ee5\u53ca\u4ee3\u7406\u7c7b\u7684\u8fc7\u7a0b\u6bd4\u8f83\u91cd\u8981\uff0c\u56e0\u6b64\u63a5\u4e0b\u6765\u5c06\u5206\u4e24\u5c0f\u8282\u5bf9\u8fd9\u4e24\u4e2a\u8fc7\u7a0b\u8fdb\u884c\u5206\u6790\u3002","title":"3.2 \u5f15\u7528\u670d\u52a1"},{"location":"source_code_guide/refer-service/#321-invoker","text":"Invoker \u662f Dubbo \u7684\u6838\u5fc3\u6a21\u578b\uff0c\u4ee3\u8868\u4e00\u4e2a\u53ef\u6267\u884c\u4f53\u3002\u5728\u670d\u52a1\u63d0\u4f9b\u65b9\uff0cInvoker \u7528\u4e8e\u8c03\u7528\u670d\u52a1\u63d0\u4f9b\u7c7b\u3002\u5728\u670d\u52a1\u6d88\u8d39\u65b9\uff0cInvoker \u7528\u4e8e\u6267\u884c\u8fdc\u7a0b\u8c03\u7528\u3002Invoker \u662f\u7531 Protocol \u5b9e\u73b0\u7c7b\u6784\u5efa\u800c\u6765\u3002Protocol \u5b9e\u73b0\u7c7b\u6709\u5f88\u591a\uff0c\u672c\u8282\u4f1a\u5206\u6790\u6700\u5e38\u7528\u7684\u4e24\u4e2a\uff0c\u5206\u522b\u662f RegistryProtocol \u548c DubboProtocol\uff0c\u5176\u4ed6\u7684\u5927\u5bb6\u81ea\u884c\u5206\u6790\u3002\u4e0b\u9762\u5148\u6765\u5206\u6790 DubboProtocol \u7684 refer \u65b9\u6cd5\u6e90\u7801\u3002\u5982\u4e0b\uff1a public T Invoker T refer(Class T serviceType, URL url) throws RpcException { optimizeSerialization(url); // \u521b\u5efa DubboInvoker DubboInvoker T invoker = new DubboInvoker T (serviceType, url, getClients(url), invokers); invokers.add(invoker); return invoker; } \u4e0a\u9762\u65b9\u6cd5\u770b\u8d77\u6765\u6bd4\u8f83\u7b80\u5355\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u6709\u4e00\u4e2a\u8c03\u7528\u9700\u8981\u6211\u4eec\u6ce8\u610f\u4e00\u4e0b\uff0c\u5373 getClients\u3002\u8fd9\u4e2a\u65b9\u6cd5\u7528\u4e8e\u83b7\u53d6\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff0c\u5b9e\u4f8b\u7c7b\u578b\u4e3a ExchangeClient\u3002ExchangeClient \u5b9e\u9645\u4e0a\u5e76\u4e0d\u5177\u5907\u901a\u4fe1\u80fd\u529b\uff0c\u5b83\u9700\u8981\u57fa\u4e8e\u66f4\u5e95\u5c42\u7684\u5ba2\u6237\u7aef\u5b9e\u4f8b\u8fdb\u884c\u901a\u4fe1\u3002\u6bd4\u5982 NettyClient\u3001MinaClient \u7b49\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cDubbo \u4f7f\u7528 NettyClient \u8fdb\u884c\u901a\u4fe1\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u7b80\u5355\u770b\u4e00\u4e0b getClients \u65b9\u6cd5\u7684\u903b\u8f91\u3002 private ExchangeClient[] getClients(URL url) { // \u662f\u5426\u5171\u4eab\u8fde\u63a5 boolean service_share_connect = false; // \u83b7\u53d6\u8fde\u63a5\u6570\uff0c\u9ed8\u8ba4\u4e3a0\uff0c\u8868\u793a\u672a\u914d\u7f6e int connections = url.getParameter(Constants.CONNECTIONS_KEY, 0); // \u5982\u679c\u672a\u914d\u7f6e connections\uff0c\u5219\u5171\u4eab\u8fde\u63a5 if (connections == 0) { service_share_connect = true; connections = 1; } ExchangeClient[] clients = new ExchangeClient[connections]; for (int i = 0; i clients.length; i++) { if (service_share_connect) { // \u83b7\u53d6\u5171\u4eab\u5ba2\u6237\u7aef clients[i] = getSharedClient(url); } else { // \u521d\u59cb\u5316\u65b0\u7684\u5ba2\u6237\u7aef clients[i] = initClient(url); } } return clients; } \u8fd9\u91cc\u6839\u636e connections \u6570\u91cf\u51b3\u5b9a\u662f\u83b7\u53d6\u5171\u4eab\u5ba2\u6237\u7aef\u8fd8\u662f\u521b\u5efa\u65b0\u7684\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u5171\u4eab\u5ba2\u6237\u7aef\u5b9e\u4f8b\u3002getSharedClient \u65b9\u6cd5\u4e2d\u4e5f\u4f1a\u8c03\u7528 initClient \u65b9\u6cd5\uff0c\u56e0\u6b64\u4e0b\u9762\u6211\u4eec\u4e00\u8d77\u770b\u4e00\u4e0b\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u3002 private ExchangeClient getSharedClient(URL url) { String key = url.getAddress(); // \u83b7\u53d6\u5e26\u6709\u201c\u5f15\u7528\u8ba1\u6570\u201d\u529f\u80fd\u7684 ExchangeClient ReferenceCountExchangeClient client = referenceClientMap.get(key); if (client != null) { if (!client.isClosed()) { // \u589e\u52a0\u5f15\u7528\u8ba1\u6570 client.incrementAndGetCount(); return client; } else { referenceClientMap.remove(key); } } locks.putIfAbsent(key, new Object()); synchronized (locks.get(key)) { if (referenceClientMap.containsKey(key)) { return referenceClientMap.get(key); } // \u521b\u5efa ExchangeClient \u5ba2\u6237\u7aef ExchangeClient exchangeClient = initClient(url); // \u5c06 ExchangeClient \u5b9e\u4f8b\u4f20\u7ed9 ReferenceCountExchangeClient\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86\u88c5\u9970\u6a21\u5f0f client = new ReferenceCountExchangeClient(exchangeClient, ghostClientMap); referenceClientMap.put(key, client); ghostClientMap.remove(key); locks.remove(key); return client; } } \u4e0a\u9762\u65b9\u6cd5\u5148\u8bbf\u95ee\u7f13\u5b58\uff0c\u82e5\u7f13\u5b58\u672a\u547d\u4e2d\uff0c\u5219\u901a\u8fc7 initClient \u65b9\u6cd5\u521b\u5efa\u65b0\u7684 ExchangeClient \u5b9e\u4f8b\uff0c\u5e76\u5c06\u8be5\u5b9e\u4f8b\u4f20\u7ed9 ReferenceCountExchangeClient \u6784\u9020\u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u5e26\u6709\u5f15\u7528\u8ba1\u6570\u529f\u80fd\u7684 ExchangeClient \u5b9e\u4f8b\u3002ReferenceCountExchangeClient \u5185\u90e8\u5b9e\u73b0\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u4e0d\u5206\u6790\u4e86\u3002\u4e0b\u9762\u6211\u4eec\u518d\u6765\u770b\u4e00\u4e0b initClient \u65b9\u6cd5\u7684\u4ee3\u7801\u3002 private ExchangeClient initClient(URL url) { // \u83b7\u53d6\u5ba2\u6237\u7aef\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3a netty String str = url.getParameter(Constants.CLIENT_KEY, url.getParameter(Constants.SERVER_KEY, Constants.DEFAULT_REMOTING_CLIENT)); // \u6dfb\u52a0\u7f16\u89e3\u7801\u548c\u5fc3\u8df3\u5305\u53c2\u6570\u5230 url \u4e2d url = url.addParameter(Constants.CODEC_KEY, DubboCodec.NAME); url = url.addParameterIfAbsent(Constants.HEARTBEAT_KEY, String.valueOf(Constants.DEFAULT_HEARTBEAT)); // \u68c0\u6d4b\u5ba2\u6237\u7aef\u7c7b\u578b\u662f\u5426\u5b58\u5728\uff0c\u4e0d\u5b58\u5728\u5219\u629b\u51fa\u5f02\u5e38 if (str != null str.length() 0 !ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str)) { throw new RpcException( Unsupported client type: ... ); } ExchangeClient client; try { // \u83b7\u53d6 lazy \u914d\u7f6e\uff0c\u5e76\u6839\u636e\u914d\u7f6e\u503c\u51b3\u5b9a\u521b\u5efa\u7684\u5ba2\u6237\u7aef\u7c7b\u578b if (url.getParameter(Constants.LAZY_CONNECT_KEY, false)) { // \u521b\u5efa\u61d2\u52a0\u8f7d ExchangeClient \u5b9e\u4f8b client = new LazyConnectExchangeClient(url, requestHandler); } else { // \u521b\u5efa\u666e\u901a ExchangeClient \u5b9e\u4f8b client = Exchangers.connect(url, requestHandler); } } catch (RemotingException e) { throw new RpcException( Fail to create remoting client for service... ); } return client; } initClient \u65b9\u6cd5\u9996\u5148\u83b7\u53d6\u7528\u6237\u914d\u7f6e\u7684\u5ba2\u6237\u7aef\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3a netty\u3002\u7136\u540e\u68c0\u6d4b\u7528\u6237\u914d\u7f6e\u7684\u5ba2\u6237\u7aef\u7c7b\u578b\u662f\u5426\u5b58\u5728\uff0c\u4e0d\u5b58\u5728\u5219\u629b\u51fa\u5f02\u5e38\u3002\u6700\u540e\u6839\u636e lazy \u914d\u7f6e\u51b3\u5b9a\u521b\u5efa\u4ec0\u4e48\u7c7b\u578b\u7684\u5ba2\u6237\u7aef\u3002\u8fd9\u91cc\u7684 LazyConnectExchangeClient \u4ee3\u7801\u5e76\u4e0d\u662f\u5f88\u590d\u6742\uff0c\u8be5\u7c7b\u4f1a\u5728 request \u65b9\u6cd5\u88ab\u8c03\u7528\u65f6\u901a\u8fc7 Exchangers \u7684 connect \u65b9\u6cd5\u521b\u5efa ExchangeClient \u5ba2\u6237\u7aef\uff0c\u8be5\u7c7b\u7684\u4ee3\u7801\u672c\u8282\u5c31\u4e0d\u5206\u6790\u4e86\u3002\u4e0b\u9762\u6211\u4eec\u5206\u6790\u4e00\u4e0b Exchangers \u7684 connect \u65b9\u6cd5\u3002 public static ExchangeClient connect(URL url, ExchangeHandler handler) throws RemotingException { if (url == null) { throw new IllegalArgumentException( url == null ); } if (handler == null) { throw new IllegalArgumentException( handler == null ); } url = url.addParameterIfAbsent(Constants.CODEC_KEY, exchange ); // \u83b7\u53d6 Exchanger \u5b9e\u4f8b\uff0c\u9ed8\u8ba4\u4e3a HeaderExchangeClient return getExchanger(url).connect(url, handler); } \u5982\u4e0a\uff0cgetExchanger \u4f1a\u901a\u8fc7 SPI \u52a0\u8f7d HeaderExchangeClient \u5b9e\u4f8b\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u6bd4\u8f83\u7b80\u5355\uff0c\u5927\u5bb6\u81ea\u5df1\u770b\u4e00\u4e0b\u5427\u3002\u63a5\u4e0b\u6765\u5206\u6790 HeaderExchangeClient \u7684\u5b9e\u73b0\u3002 public ExchangeClient connect(URL url, ExchangeHandler handler) throws RemotingException { // \u8fd9\u91cc\u5305\u542b\u4e86\u591a\u4e2a\u8c03\u7528\uff0c\u5206\u522b\u5982\u4e0b\uff1a // 1. \u521b\u5efa HeaderExchangeHandler \u5bf9\u8c61 // 2. \u521b\u5efa DecodeHandler \u5bf9\u8c61 // 3. \u901a\u8fc7 Transporters \u6784\u5efa Client \u5b9e\u4f8b // 4. \u521b\u5efa HeaderExchangeClient \u5bf9\u8c61 return new HeaderExchangeClient(Transporters.connect(url, new DecodeHandler(new HeaderExchangeHandler(handler))), true); } \u8fd9\u91cc\u7684\u8c03\u7528\u6bd4\u8f83\u591a\uff0c\u6211\u4eec\u8fd9\u91cc\u91cd\u70b9\u770b\u4e00\u4e0b Transporters \u7684 connect \u65b9\u6cd5\u3002\u5982\u4e0b\uff1a public static Client connect(URL url, ChannelHandler... handlers) throws RemotingException { if (url == null) { throw new IllegalArgumentException( url == null ); } ChannelHandler handler; if (handlers == null || handlers.length == 0) { handler = new ChannelHandlerAdapter(); } else if (handlers.length == 1) { handler = handlers[0]; } else { // \u5982\u679c handler \u6570\u91cf\u5927\u4e8e1\uff0c\u5219\u521b\u5efa\u4e00\u4e2a ChannelHandler \u5206\u53d1\u5668 handler = new ChannelHandlerDispatcher(handlers); } // \u83b7\u53d6 Transporter \u81ea\u9002\u5e94\u62d3\u5c55\u7c7b\uff0c\u5e76\u8c03\u7528 connect \u65b9\u6cd5\u751f\u6210 Client \u5b9e\u4f8b return getTransporter().connect(url, handler); } \u5982\u4e0a\uff0cgetTransporter \u65b9\u6cd5\u8fd4\u56de\u7684\u662f\u81ea\u9002\u5e94\u62d3\u5c55\u7c7b\uff0c\u8be5\u7c7b\u4f1a\u5728\u8fd0\u884c\u65f6\u6839\u636e\u5ba2\u6237\u7aef\u7c7b\u578b\u52a0\u8f7d\u6307\u5b9a\u7684 Transporter \u5b9e\u73b0\u7c7b\u3002\u82e5\u7528\u6237\u672a\u914d\u7f6e\u5ba2\u6237\u7aef\u7c7b\u578b\uff0c\u5219\u9ed8\u8ba4\u52a0\u8f7d NettyTransporter\uff0c\u5e76\u8c03\u7528\u8be5\u7c7b\u7684 connect \u65b9\u6cd5\u3002\u5982\u4e0b\uff1a public Client connect(URL url, ChannelHandler listener) throws RemotingException { // \u521b\u5efa NettyClient \u5bf9\u8c61 return new NettyClient(url, listener); } \u5230\u8fd9\u91cc\u5c31\u4e0d\u7ee7\u7eed\u8ddf\u4e0b\u53bb\u4e86\uff0c\u5728\u5f80\u4e0b\u5c31\u662f\u901a\u8fc7 Netty \u63d0\u4f9b\u7684 API \u6784\u5efa Netty \u5ba2\u6237\u7aef\u4e86\uff0c\u5927\u5bb6\u6709\u5174\u8da3\u81ea\u5df1\u770b\u770b\u3002\u5230\u8fd9\u91cc\uff0c\u5173\u4e8e DubboProtocol \u7684 refer \u65b9\u6cd5\u5c31\u5206\u6790\u5b8c\u4e86\u3002\u63a5\u4e0b\u6765\uff0c\u7ee7\u7eed\u5206\u6790 RegistryProtocol \u7684 refer \u65b9\u6cd5\u903b\u8f91\u3002 public T Invoker T refer(Class T type, URL url) throws RpcException { // \u53d6 registry \u53c2\u6570\u503c\uff0c\u5e76\u5c06\u5176\u8bbe\u7f6e\u4e3a\u534f\u8bae\u5934 url = url.setProtocol(url.getParameter(Constants.REGISTRY_KEY, Constants.DEFAULT_REGISTRY)).removeParameter(Constants.REGISTRY_KEY); // \u83b7\u53d6\u6ce8\u518c\u4e2d\u5fc3\u5b9e\u4f8b Registry registry = registryFactory.getRegistry(url); if (RegistryService.class.equals(type)) { return proxyFactory.getInvoker((T) registry, type, url); } // \u5c06 url \u67e5\u8be2\u5b57\u7b26\u4e32\u8f6c\u4e3a Map Map String, String qs = StringUtils.parseQueryString(url.getParameterAndDecoded(Constants.REFER_KEY)); // \u83b7\u53d6 group \u914d\u7f6e String group = qs.get(Constants.GROUP_KEY); if (group != null group.length() 0) { if ((Constants.COMMA_SPLIT_PATTERN.split(group)).length 1 || * .equals(group)) { // \u901a\u8fc7 SPI \u52a0\u8f7d MergeableCluster \u5b9e\u4f8b\uff0c\u5e76\u8c03\u7528 doRefer \u7ee7\u7eed\u6267\u884c\u670d\u52a1\u5f15\u7528\u903b\u8f91 return doRefer(getMergeableCluster(), registry, type, url); } } // \u8c03\u7528 doRefer \u7ee7\u7eed\u6267\u884c\u670d\u52a1\u5f15\u7528\u903b\u8f91 return doRefer(cluster, registry, type, url); } \u4e0a\u9762\u4ee3\u7801\u9996\u5148\u4e3a url \u8bbe\u7f6e\u534f\u8bae\u5934\uff0c\u7136\u540e\u6839\u636e url \u53c2\u6570\u52a0\u8f7d\u6ce8\u518c\u4e2d\u5fc3\u5b9e\u4f8b\u3002\u7136\u540e\u83b7\u53d6 group \u914d\u7f6e\uff0c\u6839\u636e group \u914d\u7f6e\u51b3\u5b9a doRefer \u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u3002\u8fd9\u91cc\u7684\u91cd\u70b9\u662f doRefer \u65b9\u6cd5\uff0c\u5982\u4e0b\uff1a private T Invoker T doRefer(Cluster cluster, Registry registry, Class T type, URL url) { // \u521b\u5efa RegistryDirectory \u5b9e\u4f8b RegistryDirectory T directory = new RegistryDirectory T (type, url); // \u8bbe\u7f6e\u6ce8\u518c\u4e2d\u5fc3\u548c\u534f\u8bae directory.setRegistry(registry); directory.setProtocol(protocol); Map String, String parameters = new HashMap String, String (directory.getUrl().getParameters()); // \u751f\u6210\u670d\u52a1\u6d88\u8d39\u8005\u94fe\u63a5 URL subscribeUrl = new URL(Constants.CONSUMER_PROTOCOL, parameters.remove(Constants.REGISTER_IP_KEY), 0, type.getName(), parameters); // \u6ce8\u518c\u670d\u52a1\u6d88\u8d39\u8005\uff0c\u5728 consumers \u76ee\u5f55\u4e0b\u65b0\u8282\u70b9 if (!Constants.ANY_VALUE.equals(url.getServiceInterface()) url.getParameter(Constants.REGISTER_KEY, true)) { registry.register(subscribeUrl.addParameters(Constants.CATEGORY_KEY, Constants.CONSUMERS_CATEGORY, Constants.CHECK_KEY, String.valueOf(false))); } // \u8ba2\u9605 providers\u3001configurators\u3001routers \u7b49\u8282\u70b9\u6570\u636e directory.subscribe(subscribeUrl.addParameter(Constants.CATEGORY_KEY, Constants.PROVIDERS_CATEGORY + , + Constants.CONFIGURATORS_CATEGORY + , + Constants.ROUTERS_CATEGORY)); // \u4e00\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u53ef\u80fd\u6709\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u56e0\u6b64\u8fd9\u91cc\u9700\u8981\u5c06\u591a\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u5408\u5e76\u4e3a\u4e00\u4e2a Invoker invoker = cluster.join(directory); ProviderConsumerRegTable.registerConsumer(invoker, url, subscribeUrl, directory); return invoker; } \u5982\u4e0a\uff0cdoRefer \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a RegistryDirectory \u5b9e\u4f8b\uff0c\u7136\u540e\u751f\u6210\u670d\u52a1\u8005\u6d88\u8d39\u8005\u94fe\u63a5\uff0c\u5e76\u5411\u6ce8\u518c\u4e2d\u5fc3\u8fdb\u884c\u6ce8\u518c\u3002\u6ce8\u518c\u5b8c\u6bd5\u540e\uff0c\u7d27\u63a5\u7740\u8ba2\u9605 providers\u3001configurators\u3001routers \u7b49\u8282\u70b9\u4e0b\u7684\u6570\u636e\u3002\u5b8c\u6210\u8ba2\u9605\u540e\uff0cRegistryDirectory \u4f1a\u6536\u5230\u8fd9\u51e0\u4e2a\u8282\u70b9\u4e0b\u7684\u5b50\u8282\u70b9\u4fe1\u606f\u3002\u7531\u4e8e\u4e00\u4e2a\u670d\u52a1\u53ef\u80fd\u90e8\u7f72\u5728\u591a\u53f0\u670d\u52a1\u5668\u4e0a\uff0c\u8fd9\u6837\u5c31\u4f1a\u5728 providers \u4ea7\u751f\u591a\u4e2a\u8282\u70b9\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981 Cluster \u5c06\u591a\u4e2a\u670d\u52a1\u8282\u70b9\u5408\u5e76\u4e3a\u4e00\u4e2a\uff0c\u5e76\u751f\u6210\u4e00\u4e2a Invoker\u3002\u5173\u4e8e RegistryDirectory \u548c Cluster\uff0c\u672c\u6587\u4e0d\u6253\u7b97\u8fdb\u884c\u5206\u6790\uff0c\u76f8\u5173\u5206\u6790\u5c06\u4f1a\u5728\u968f\u540e\u7684\u6587\u7ae0\u4e2d\u5c55\u5f00\u3002","title":"3.2.1 \u521b\u5efa Invoker"},{"location":"source_code_guide/refer-service/#322","text":"Invoker \u521b\u5efa\u5b8c\u6bd5\u540e\uff0c\u63a5\u4e0b\u6765\u8981\u505a\u7684\u4e8b\u60c5\u662f\u4e3a\u670d\u52a1\u63a5\u53e3\u751f\u6210\u4ee3\u7406\u5bf9\u8c61\u3002\u6709\u4e86\u4ee3\u7406\u5bf9\u8c61\uff0c\u5373\u53ef\u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528\u3002\u4ee3\u7406\u5bf9\u8c61\u751f\u6210\u7684\u5165\u53e3\u65b9\u6cd5\u4e3a ProxyFactory \u7684 getProxy\uff0c\u63a5\u4e0b\u6765\u8fdb\u884c\u5206\u6790\u3002 public T T getProxy(Invoker T invoker) throws RpcException { // \u8c03\u7528\u91cd\u8f7d\u65b9\u6cd5 return getProxy(invoker, false); } public T T getProxy(Invoker T invoker, boolean generic) throws RpcException { Class ? [] interfaces = null; // \u83b7\u53d6\u63a5\u53e3\u5217\u8868 String config = invoker.getUrl().getParameter( interfaces ); if (config != null config.length() 0) { // \u5207\u5206\u63a5\u53e3\u5217\u8868 String[] types = Constants.COMMA_SPLIT_PATTERN.split(config); if (types != null types.length 0) { interfaces = new Class ? [types.length + 2]; // \u8bbe\u7f6e\u670d\u52a1\u63a5\u53e3\u7c7b\u548c EchoService.class \u5230 interfaces \u4e2d interfaces[0] = invoker.getInterface(); interfaces[1] = EchoService.class; for (int i = 0; i types.length; i++) { // \u52a0\u8f7d\u63a5\u53e3\u7c7b interfaces[i + 1] = ReflectUtils.forName(types[i]); } } } if (interfaces == null) { interfaces = new Class ? []{invoker.getInterface(), EchoService.class}; } // \u4e3a http \u548c hessian \u534f\u8bae\u63d0\u4f9b\u6cdb\u5316\u8c03\u7528\u652f\u6301\uff0c\u53c2\u8003 pull request #1827 if (!invoker.getInterface().equals(GenericService.class) generic) { int len = interfaces.length; Class ? [] temp = interfaces; // \u521b\u5efa\u65b0\u7684 interfaces \u6570\u7ec4 interfaces = new Class ? [len + 1]; System.arraycopy(temp, 0, interfaces, 0, len); // \u8bbe\u7f6e GenericService.class \u5230\u6570\u7ec4\u4e2d interfaces[len] = GenericService.class; } // \u8c03\u7528\u91cd\u8f7d\u65b9\u6cd5 return getProxy(invoker, interfaces); } public abstract T T getProxy(Invoker T invoker, Class ? [] types); \u5982\u4e0a\uff0c\u4e0a\u9762\u5927\u6bb5\u4ee3\u7801\u90fd\u662f\u7528\u6765\u83b7\u53d6 interfaces \u6570\u7ec4\u7684\uff0c\u6211\u4eec\u7ee7\u7eed\u5f80\u4e0b\u770b\u3002getProxy(Invoker, Class ? []) \u8fd9\u4e2a\u65b9\u6cd5\u662f\u4e00\u4e2a\u62bd\u8c61\u65b9\u6cd5\uff0c\u4e0b\u9762\u6211\u4eec\u5230 JavassistProxyFactory \u7c7b\u4e2d\u770b\u4e00\u4e0b\u8be5\u65b9\u6cd5\u7684\u5b9e\u73b0\u4ee3\u7801\u3002 public T T getProxy(Invoker T invoker, Class ? [] interfaces) { // \u751f\u6210 Proxy \u5b50\u7c7b\uff08Proxy \u662f\u62bd\u8c61\u7c7b\uff09\u3002\u5e76\u8c03\u7528 Proxy \u5b50\u7c7b\u7684 newInstance \u65b9\u6cd5\u521b\u5efa Proxy \u5b9e\u4f8b return (T) Proxy.getProxy(interfaces).newInstance(new InvokerInvocationHandler(invoker)); } \u4e0a\u9762\u4ee3\u7801\u5e76\u4e0d\u591a\uff0c\u9996\u5148\u662f\u901a\u8fc7 Proxy \u7684 getProxy \u65b9\u6cd5\u83b7\u53d6 Proxy \u5b50\u7c7b\uff0c\u7136\u540e\u521b\u5efa InvokerInvocationHandler \u5bf9\u8c61\uff0c\u5e76\u5c06\u8be5\u5bf9\u8c61\u4f20\u7ed9 newInstance \u751f\u6210 Proxy \u5b9e\u4f8b\u3002InvokerInvocationHandler \u5b9e\u73b0 JDK \u7684 InvocationHandler \u63a5\u53e3\uff0c\u5177\u4f53\u7684\u7528\u9014\u662f\u62e6\u622a\u63a5\u53e3\u7c7b\u8c03\u7528\u3002\u8be5\u7c7b\u903b\u8f91\u6bd4\u8f83\u7b80\u5355\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5206\u6790\u4e86\u3002\u4e0b\u9762\u6211\u4eec\u91cd\u70b9\u5173\u6ce8\u4e00\u4e0b Proxy \u7684 getProxy \u65b9\u6cd5\uff0c\u5982\u4e0b\u3002 public static Proxy getProxy(Class ? ... ics) { // \u8c03\u7528\u91cd\u8f7d\u65b9\u6cd5 return getProxy(ClassHelper.getClassLoader(Proxy.class), ics); } public static Proxy getProxy(ClassLoader cl, Class ? ... ics) { if (ics.length 65535) throw new IllegalArgumentException( interface limit exceeded ); StringBuilder sb = new StringBuilder(); // \u904d\u5386\u63a5\u53e3\u5217\u8868 for (int i = 0; i ics.length; i++) { String itf = ics[i].getName(); // \u68c0\u6d4b\u7c7b\u578b\u662f\u5426\u4e3a\u63a5\u53e3 if (!ics[i].isInterface()) throw new RuntimeException(itf + is not a interface. ); Class ? tmp = null; try { // \u91cd\u65b0\u52a0\u8f7d\u63a5\u53e3\u7c7b tmp = Class.forName(itf, false, cl); } catch (ClassNotFoundException e) { } // \u68c0\u6d4b\u63a5\u53e3\u662f\u5426\u76f8\u540c\uff0c\u8fd9\u91cc tmp \u6709\u53ef\u80fd\u4e3a\u7a7a if (tmp != ics[i]) throw new IllegalArgumentException(ics[i] + is not visible from class loader ); // \u62fc\u63a5\u63a5\u53e3\u5168\u9650\u5b9a\u540d\uff0c\u5206\u9694\u7b26\u4e3a ; sb.append(itf).append(';'); } // \u4f7f\u7528\u62fc\u63a5\u540e\u7684\u63a5\u53e3\u540d\u4f5c\u4e3a key String key = sb.toString(); Map String, Object cache; synchronized (ProxyCacheMap) { cache = ProxyCacheMap.get(cl); if (cache == null) { cache = new HashMap String, Object (); ProxyCacheMap.put(cl, cache); } } Proxy proxy = null; synchronized (cache) { do { // \u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6 Reference Proxy \u5b9e\u4f8b Object value = cache.get(key); if (value instanceof Reference ? ) { proxy = (Proxy) ((Reference ? ) value).get(); if (proxy != null) { return proxy; } } // \u5e76\u53d1\u63a7\u5236\uff0c\u4fdd\u8bc1\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u8fdb\u884c\u540e\u7eed\u64cd\u4f5c if (value == PendingGenerationMarker) { try { // \u5176\u4ed6\u7ebf\u7a0b\u5728\u6b64\u5904\u8fdb\u884c\u7b49\u5f85 cache.wait(); } catch (InterruptedException e) { } } else { // \u653e\u7f6e\u6807\u5fd7\u4f4d\u5230\u7f13\u5b58\u4e2d\uff0c\u5e76\u8df3\u51fa while \u5faa\u73af\u8fdb\u884c\u540e\u7eed\u64cd\u4f5c cache.put(key, PendingGenerationMarker); break; } } while (true); } long id = PROXY_CLASS_COUNTER.getAndIncrement(); String pkg = null; ClassGenerator ccp = null, ccm = null; try { // \u521b\u5efa ClassGenerator \u5bf9\u8c61 ccp = ClassGenerator.newInstance(cl); Set String worked = new HashSet String (); List Method methods = new ArrayList Method (); for (int i = 0; i ics.length; i++) { // \u68c0\u6d4b\u63a5\u53e3\u8bbf\u95ee\u7ea7\u522b\u662f\u5426\u4e3a protected \u6216 privete if (!Modifier.isPublic(ics[i].getModifiers())) { // \u83b7\u53d6\u63a5\u53e3\u5305\u540d String npkg = ics[i].getPackage().getName(); if (pkg == null) { pkg = npkg; } else { if (!pkg.equals(npkg)) // \u975e public \u7ea7\u522b\u7684\u63a5\u53e3\u5fc5\u987b\u5728\u540c\u4e00\u4e2a\u5305\u4e0b\uff0c\u5426\u8005\u629b\u51fa\u5f02\u5e38 throw new IllegalArgumentException( non-public interfaces from different packages ); } } // \u6dfb\u52a0\u63a5\u53e3\u5230 ClassGenerator \u4e2d ccp.addInterface(ics[i]); // \u904d\u5386\u63a5\u53e3\u65b9\u6cd5 for (Method method : ics[i].getMethods()) { // \u83b7\u53d6\u65b9\u6cd5\u63cf\u8ff0\uff0c\u53ef\u7406\u89e3\u4e3a\u65b9\u6cd5\u7b7e\u540d String desc = ReflectUtils.getDesc(method); // \u5982\u679c\u65b9\u6cd5\u63cf\u8ff0\u5b57\u7b26\u4e32\u5df2\u5728 worked \u4e2d\uff0c\u5219\u5ffd\u7565\u3002\u8003\u8651\u8fd9\u79cd\u60c5\u51b5\uff0c // A \u63a5\u53e3\u548c B \u63a5\u53e3\u4e2d\u5305\u542b\u4e00\u4e2a\u5b8c\u5168\u76f8\u540c\u7684\u65b9\u6cd5 if (worked.contains(desc)) continue; worked.add(desc); int ix = methods.size(); // \u83b7\u53d6\u65b9\u6cd5\u8fd4\u56de\u503c\u7c7b\u578b Class ? rt = method.getReturnType(); // \u83b7\u53d6\u53c2\u6570\u5217\u8868 Class ? [] pts = method.getParameterTypes(); // \u751f\u6210 Object[] args = new Object[1...N] StringBuilder code = new StringBuilder( Object[] args = new Object[ ).append(pts.length).append( ]; ); for (int j = 0; j pts.length; j++) // \u751f\u6210 args[1...N] = ($w)$1...N; code.append( args[ ).append(j).append( ] = ($w)$ ).append(j + 1).append( ; ); // \u751f\u6210 InvokerHandler \u63a5\u53e3\u7684 invoker \u65b9\u6cd5\u8c03\u7528\u8bed\u53e5\uff0c\u5982\u4e0b\uff1a // Object ret = handler.invoke(this, methods[1...N], args); code.append( Object ret = handler.invoke(this, methods[ + ix + ], args); ); // \u8fd4\u56de\u503c\u4e0d\u4e3a void if (!Void.TYPE.equals(rt)) // \u751f\u6210\u8fd4\u56de\u8bed\u53e5\uff0c\u5f62\u5982 return (java.lang.String) ret; code.append( return ).append(asArgument(rt, ret )).append( ; ); methods.add(method); // \u6dfb\u52a0\u65b9\u6cd5\u540d\u3001\u8bbf\u95ee\u63a7\u5236\u7b26\u3001\u53c2\u6570\u5217\u8868\u3001\u65b9\u6cd5\u4ee3\u7801\u7b49\u4fe1\u606f\u5230 ClassGenerator \u4e2d ccp.addMethod(method.getName(), method.getModifiers(), rt, pts, method.getExceptionTypes(), code.toString()); } } if (pkg == null) pkg = PACKAGE_NAME; // \u6784\u5efa\u63a5\u53e3\u4ee3\u7406\u7c7b\u540d\u79f0\uff1apkg + .proxy + id\uff0c\u6bd4\u5982 org.apache.dubbo.proxy0 String pcn = pkg + .proxy + id; ccp.setClassName(pcn); ccp.addField( public static java.lang.reflect.Method[] methods; ); // \u751f\u6210 private java.lang.reflect.InvocationHandler handler; ccp.addField( private + InvocationHandler.class.getName() + handler; ); // \u4e3a\u63a5\u53e3\u4ee3\u7406\u7c7b\u6dfb\u52a0\u5e26\u6709 InvocationHandler \u53c2\u6570\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u6bd4\u5982\uff1a // porxy0(java.lang.reflect.InvocationHandler arg0) { // handler=$1; // } ccp.addConstructor(Modifier.PUBLIC, new Class ? []{InvocationHandler.class}, new Class ? [0], handler=$1; ); // \u4e3a\u63a5\u53e3\u4ee3\u7406\u7c7b\u6dfb\u52a0\u9ed8\u8ba4\u6784\u9020\u65b9\u6cd5 ccp.addDefaultConstructor(); // \u751f\u6210\u63a5\u53e3\u4ee3\u7406\u7c7b Class ? clazz = ccp.toClass(); clazz.getField( methods ).set(null, methods.toArray(new Method[0])); // \u6784\u5efa Proxy \u5b50\u7c7b\u540d\u79f0\uff0c\u6bd4\u5982 Proxy1\uff0cProxy2 \u7b49 String fcn = Proxy.class.getName() + id; ccm = ClassGenerator.newInstance(cl); ccm.setClassName(fcn); ccm.addDefaultConstructor(); ccm.setSuperClass(Proxy.class); // \u4e3a Proxy \u7684\u62bd\u8c61\u65b9\u6cd5 newInstance \u751f\u6210\u5b9e\u73b0\u4ee3\u7801\uff0c\u5f62\u5982\uff1a // public Object newInstance(java.lang.reflect.InvocationHandler h) { // return new org.apache.dubbo.proxy0($1); // } ccm.addMethod( public Object newInstance( + InvocationHandler.class.getName() + h){ return new + pcn + ($1); } ); // \u751f\u6210 Proxy \u5b9e\u73b0\u7c7b Class ? pc = ccm.toClass(); // \u901a\u8fc7\u53cd\u5c04\u521b\u5efa Proxy \u5b9e\u4f8b proxy = (Proxy) pc.newInstance(); } catch (RuntimeException e) { throw e; } catch (Exception e) { throw new RuntimeException(e.getMessage(), e); } finally { if (ccp != null) // \u91ca\u653e\u8d44\u6e90 ccp.release(); if (ccm != null) ccm.release(); synchronized (cache) { if (proxy == null) cache.remove(key); else // \u5199\u7f13\u5b58 cache.put(key, new WeakReference Proxy (proxy)); // \u5524\u9192\u5176\u4ed6\u7b49\u5f85\u7ebf\u7a0b cache.notifyAll(); } } return proxy; } \u4e0a\u9762\u4ee3\u7801\u6bd4\u8f83\u590d\u6742\uff0c\u6211\u4eec\u5199\u4e86\u5927\u91cf\u7684\u6ce8\u91ca\u3002\u5927\u5bb6\u5728\u9605\u8bfb\u8fd9\u6bb5\u4ee3\u7801\u65f6\uff0c\u8981\u641e\u6e05\u695a ccp \u548c ccm \u7684\u7528\u9014\uff0c\u4e0d\u7136\u4f1a\u88ab\u641e\u6655\u3002ccp \u7528\u4e8e\u4e3a\u670d\u52a1\u63a5\u53e3\u751f\u6210\u4ee3\u7406\u7c7b\uff0c\u6bd4\u5982\u6211\u4eec\u6709\u4e00\u4e2a DemoService \u63a5\u53e3\uff0c\u8fd9\u4e2a\u63a5\u53e3\u4ee3\u7406\u7c7b\u5c31\u662f\u7531 ccp \u751f\u6210\u7684\u3002ccm \u5219\u662f\u7528\u4e8e\u4e3a org.apache.dubbo.common.bytecode.Proxy \u62bd\u8c61\u7c7b\u751f\u6210\u5b50\u7c7b\uff0c\u4e3b\u8981\u662f\u5b9e\u73b0 Proxy \u7c7b\u7684\u62bd\u8c61\u65b9\u6cd5\u3002\u4e0b\u9762\u4ee5 org.apache.dubbo.demo.DemoService \u8fd9\u4e2a\u63a5\u53e3\u4e3a\u4f8b\uff0c\u6765\u770b\u4e00\u4e0b\u8be5\u63a5\u53e3\u4ee3\u7406\u7c7b\u4ee3\u7801\u5927\u81f4\u662f\u600e\u6837\u7684\uff08\u5ffd\u7565 EchoService \u63a5\u53e3\uff09\u3002 package org.apache.dubbo.common.bytecode; public class proxy0 implements org.apache.dubbo.demo.DemoService { public static java.lang.reflect.Method[] methods; private java.lang.reflect.InvocationHandler handler; public proxy0() { } public proxy0(java.lang.reflect.InvocationHandler arg0) { handler = $1; } public java.lang.String sayHello(java.lang.String arg0) { Object[] args = new Object[1]; args[0] = ($w) $1; Object ret = handler.invoke(this, methods[0], args); return (java.lang.String) ret; } } \u597d\u4e86\uff0c\u5230\u8fd9\u91cc\u4ee3\u7406\u7c7b\u751f\u6210\u903b\u8f91\u5c31\u5206\u6790\u5b8c\u4e86\u3002\u6574\u4e2a\u8fc7\u7a0b\u6bd4\u8f83\u590d\u6742\uff0c\u5927\u5bb6\u9700\u8981\u8010\u5fc3\u770b\u4e00\u4e0b\u3002","title":"3.2.2 \u521b\u5efa\u4ee3\u7406"},{"location":"source_code_guide/refer-service/#4","text":"\u672c\u7bc7\u6587\u7ae0\u5bf9\u670d\u52a1\u5f15\u7528\u7684\u8fc7\u7a0b\u8fdb\u884c\u4e86\u8f83\u4e3a\u8be6\u5c3d\u7684\u5206\u6790\uff0c\u8fd8\u6709\u4e00\u4e9b\u903b\u8f91\u6682\u65f6\u6ca1\u6709\u5206\u6790\u5230\uff0c\u6bd4\u5982 Directory\u3001Cluster\u3002\u8fd9\u4e9b\u63a5\u53e3\u53ca\u5b9e\u73b0\u7c7b\u529f\u80fd\u6bd4\u8f83\u72ec\u7acb\uff0c\u540e\u7eed\u4f1a\u5355\u72ec\u6210\u6587\u8fdb\u884c\u5206\u6790\u3002\u6682\u65f6\u6211\u4eec\u53ef\u4ee5\u5148\u628a\u8fd9\u4e9b\u7c7b\u770b\u6210\u9ed1\u76d2\uff0c\u53ea\u8981\u77e5\u9053\u8fd9\u4e9b\u7c7b\u7684\u7528\u9014\u5373\u53ef\u3002\u5173\u4e8e\u670d\u52a1\u5f15\u7528\u8fc7\u7a0b\u5c31\u5206\u6790\u5230\u8fd9\u91cc\u3002","title":"4.\u603b\u7ed3"},{"location":"source_code_guide/router/","text":"title: \u670d\u52a1\u8def\u7531 keywords: Dubbo, Router description: \u672c\u6587\u4ecb\u7ecd\u4e86\u670d\u52a1\b\u8def\u7531\u7684\u539f\u7406\u548c\u5b9e\u73b0\u7ec6\u8282 1. \u7b80\u4ecb \u4e0a\u4e00\u7bc7\u6587\u7ae0\u5206\u6790\u4e86\u96c6\u7fa4\u5bb9\u9519\u7684\u7b2c\u4e00\u90e8\u5206 \u2014 \u670d\u52a1\u76ee\u5f55 Directory\u3002\u670d\u52a1\u76ee\u5f55\u5728\u5237\u65b0 Invoker \u5217\u8868\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u901a\u8fc7 Router \u8fdb\u884c\u670d\u52a1\u8def\u7531\uff0c\u7b5b\u9009\u51fa\u7b26\u5408\u8def\u7531\u89c4\u5219\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u3002\u5728\u8be6\u7ec6\u5206\u6790\u670d\u52a1\u8def\u7531\u7684\u6e90\u7801\u4e4b\u524d\uff0c\u5148\u6765\u4ecb\u7ecd\u4e00\u4e0b\u670d\u52a1\u8def\u7531\u662f\u4ec0\u4e48\u3002\u670d\u52a1\u8def\u7531\u5305\u542b\u4e00\u6761\u8def\u7531\u89c4\u5219\uff0c\u8def\u7531\u89c4\u5219\u51b3\u5b9a\u4e86\u670d\u52a1\u6d88\u8d39\u8005\u7684\u8c03\u7528\u76ee\u6807\uff0c\u5373\u89c4\u5b9a\u4e86\u670d\u52a1\u6d88\u8d39\u8005\u53ef\u8c03\u7528\u54ea\u4e9b\u670d\u52a1\u63d0\u4f9b\u8005\u3002Dubbo \u76ee\u524d\u63d0\u4f9b\u4e86\u4e09\u79cd\u670d\u52a1\u8def\u7531\u5b9e\u73b0\uff0c\u5206\u522b\u4e3a\u6761\u4ef6\u8def\u7531 ConditionRouter\u3001\u811a\u672c\u8def\u7531 ScriptRouter \u548c\u6807\u7b7e\u8def\u7531 TagRouter\u3002\u5176\u4e2d\u6761\u4ef6\u8def\u7531\u662f\u6211\u4eec\u6700\u5e38\u4f7f\u7528\u7684\uff0c\u6807\u7b7e\u8def\u7531\u662f\u4e00\u4e2a\u65b0\u7684\u5b9e\u73b0\uff0c\u6682\u65f6\u8fd8\u672a\u53d1\u5e03\uff0c\u8be5\u5b9e\u73b0\u9884\u8ba1\u4f1a\u5728 2.7.x \u7248\u672c\u4e2d\u53d1\u5e03\u3002\u672c\u7bc7\u6587\u7ae0\u5c06\u5206\u6790\u6761\u4ef6\u8def\u7531\u76f8\u5173\u6e90\u7801\uff0c\u811a\u672c\u8def\u7531\u548c\u6807\u7b7e\u8def\u7531\u8fd9\u91cc\u5c31\u4e0d\u5206\u6790\u4e86\u3002 2. \u6e90\u7801\u5206\u6790 \u6761\u4ef6\u8def\u7531\u89c4\u5219\u7531\u4e24\u4e2a\u6761\u4ef6\u7ec4\u6210\uff0c\u5206\u522b\u7528\u4e8e\u5bf9\u670d\u52a1\u6d88\u8d39\u8005\u548c\u63d0\u4f9b\u8005\u8fdb\u884c\u5339\u914d\u3002\u6bd4\u5982\u6709\u8fd9\u6837\u4e00\u6761\u89c4\u5219\uff1a host = 10.20.153.10 = host = 10.20.153.11 \u8be5\u6761\u89c4\u5219\u8868\u793a IP \u4e3a 10.20.153.10 \u7684\u670d\u52a1\u6d88\u8d39\u8005 \u53ea\u53ef \u8c03\u7528 IP \u4e3a 10.20.153.11 \u673a\u5668\u4e0a\u7684\u670d\u52a1\uff0c\u4e0d\u53ef\u8c03\u7528\u5176\u4ed6\u673a\u5668\u4e0a\u7684\u670d\u52a1\u3002\u6761\u4ef6\u8def\u7531\u89c4\u5219\u7684\u683c\u5f0f\u5982\u4e0b\uff1a [\u670d\u52a1\u6d88\u8d39\u8005\u5339\u914d\u6761\u4ef6] = [\u670d\u52a1\u63d0\u4f9b\u8005\u5339\u914d\u6761\u4ef6] \u5982\u679c\u670d\u52a1\u6d88\u8d39\u8005\u5339\u914d\u6761\u4ef6\u4e3a\u7a7a\uff0c\u8868\u793a\u4e0d\u5bf9\u670d\u52a1\u6d88\u8d39\u8005\u8fdb\u884c\u9650\u5236\u3002\u5982\u679c\u670d\u52a1\u63d0\u4f9b\u8005\u5339\u914d\u6761\u4ef6\u4e3a\u7a7a\uff0c\u8868\u793a\u5bf9\u67d0\u4e9b\u670d\u52a1\u6d88\u8d39\u8005\u7981\u7528\u670d\u52a1\u3002\u5b98\u65b9\u6587\u6863\u4e2d\u5bf9\u6761\u4ef6\u8def\u7531\u8fdb\u884c\u4e86\u6bd4\u8f83\u8be6\u7ec6\u7684\u4ecb\u7ecd\uff0c\u5927\u5bb6\u53ef\u4ee5\u53c2\u8003\u4e0b\uff0c\u8fd9\u91cc\u5c31\u4e0d\u8fc7\u591a\u8bf4\u660e\u4e86\u3002 \u6761\u4ef6\u8def\u7531\u5b9e\u73b0\u7c7b ConditionRouter \u5728\u8fdb\u884c\u5de5\u4f5c\u524d\uff0c\u9700\u8981\u5148\u5bf9\u7528\u6237\u914d\u7f6e\u7684\u8def\u7531\u89c4\u5219\u8fdb\u884c\u89e3\u6790\uff0c\u5f97\u5230\u4e00\u7cfb\u5217\u7684\u6761\u4ef6\u3002\u7136\u540e\u518d\u6839\u636e\u8fd9\u4e9b\u6761\u4ef6\u5bf9\u670d\u52a1\u8fdb\u884c\u8def\u7531\u3002\u672c\u7ae0\u5c06\u5206\u4e24\u8282\u8fdb\u884c\u8bf4\u660e\uff0c2.1\u8282\u4ecb\u7ecd\u8868\u8fbe\u5f0f\u89e3\u6790\u8fc7\u7a0b\u30022.2 \u8282\u4ecb\u7ecd\u670d\u52a1\u8def\u7531\u7684\u8fc7\u7a0b\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u5148\u4ece\u8868\u8fbe\u5f0f\u89e3\u6790\u8fc7\u7a0b\u770b\u8d77\u3002 2.1 \u8868\u8fbe\u5f0f\u89e3\u6790 \u6761\u4ef6\u8def\u7531\u89c4\u5219\u662f\u4e00\u6761\u5b57\u7b26\u4e32\uff0c\u5bf9\u4e8e Dubbo \u6765\u8bf4\uff0c\u5b83\u5e76\u4e0d\u80fd\u76f4\u63a5\u7406\u89e3\u5b57\u7b26\u4e32\u7684\u610f\u601d\uff0c\u9700\u8981\u5c06\u5176\u89e3\u6790\u6210\u5185\u90e8\u683c\u5f0f\u624d\u884c\u3002\u6761\u4ef6\u8868\u8fbe\u5f0f\u7684\u89e3\u6790\u8fc7\u7a0b\u59cb\u4e8e ConditionRouter \u7684\u6784\u9020\u65b9\u6cd5\uff0c\u4e0b\u9762\u4e00\u8d77\u770b\u4e00\u4e0b\uff1a public ConditionRouter(URL url) { this.url = url; // \u83b7\u53d6 priority \u548c force \u914d\u7f6e this.priority = url.getParameter(Constants.PRIORITY_KEY, 0); this.force = url.getParameter(Constants.FORCE_KEY, false); try { // \u83b7\u53d6\u8def\u7531\u89c4\u5219 String rule = url.getParameterAndDecoded(Constants.RULE_KEY); if (rule == null || rule.trim().length() == 0) { throw new IllegalArgumentException( Illegal route rule! ); } rule = rule.replace( consumer. , ).replace( provider. , ); // \u5b9a\u4f4d = \u5206\u9694\u7b26 int i = rule.indexOf( = ); // \u5206\u522b\u83b7\u53d6\u670d\u52a1\u6d88\u8d39\u8005\u548c\u63d0\u4f9b\u8005\u5339\u914d\u89c4\u5219 String whenRule = i 0 ? null : rule.substring(0, i).trim(); String thenRule = i 0 ? rule.trim() : rule.substring(i + 2).trim(); // \u89e3\u6790\u670d\u52a1\u6d88\u8d39\u8005\u5339\u914d\u89c4\u5219 Map String, MatchPair when = StringUtils.isBlank(whenRule) || true .equals(whenRule) ? new HashMap String, MatchPair () : parseRule(whenRule); // \u89e3\u6790\u670d\u52a1\u63d0\u4f9b\u8005\u5339\u914d\u89c4\u5219 Map String, MatchPair then = StringUtils.isBlank(thenRule) || false .equals(thenRule) ? null : parseRule(thenRule); // \u5c06\u89e3\u6790\u51fa\u7684\u5339\u914d\u89c4\u5219\u5206\u522b\u8d4b\u503c\u7ed9 whenCondition \u548c thenCondition \u6210\u5458\u53d8\u91cf this.whenCondition = when; this.thenCondition = then; } catch (ParseException e) { throw new IllegalStateException(e.getMessage(), e); } } \u5982\u4e0a\uff0cConditionRouter \u6784\u9020\u65b9\u6cd5\u5148\u662f\u5bf9\u8def\u7531\u89c4\u5219\u505a\u9884\u5904\u7406\uff0c\u7136\u540e\u8c03\u7528 parseRule \u65b9\u6cd5\u5206\u522b\u5bf9\u670d\u52a1\u63d0\u4f9b\u8005\u548c\u6d88\u8d39\u8005\u89c4\u5219\u8fdb\u884c\u89e3\u6790\uff0c\u6700\u540e\u5c06\u89e3\u6790\u7ed3\u679c\u8d4b\u503c\u7ed9 whenCondition \u548c thenCondition \u6210\u5458\u53d8\u91cf\u3002ConditionRouter \u6784\u9020\u65b9\u6cd5\u4e0d\u662f\u5f88\u590d\u6742\uff0c\u8fd9\u91cc\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002\u4e0b\u9762\u6211\u4eec\u628a\u91cd\u70b9\u653e\u5728 parseRule \u65b9\u6cd5\u4e0a\uff0c\u5728\u8be6\u7ec6\u4ecb\u7ecd\u8fd9\u4e2a\u65b9\u6cd5\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e2a\u5185\u90e8\u7c7b\u3002 private static final class MatchPair { final Set String matches = new HashSet String (); final Set String mismatches = new HashSet String (); } MatchPair \u5185\u90e8\u5305\u542b\u4e86\u4e24\u4e2a Set \u7c7b\u578b\u7684\u6210\u5458\u53d8\u91cf\uff0c\u5206\u522b\u7528\u4e8e\u5b58\u653e\u5339\u914d\u548c\u4e0d\u5339\u914d\u7684\u6761\u4ef6\u3002\u8fd9\u4e2a\u7c7b\u4e24\u4e2a\u6210\u5458\u53d8\u91cf\u4f1a\u5728 parseRule \u65b9\u6cd5\u4e2d\u88ab\u7528\u5230\uff0c\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u3002 private static Map String, MatchPair parseRule(String rule) throws ParseException { // \u5b9a\u4e49\u6761\u4ef6\u6620\u5c04\u96c6\u5408 Map String, MatchPair condition = new HashMap String, MatchPair (); if (StringUtils.isBlank(rule)) { return condition; } MatchPair pair = null; Set String values = null; // \u901a\u8fc7\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u8def\u7531\u89c4\u5219\uff0cROUTE_PATTERN = ([ !=,]*)\\s*([^ !=,\\s]+) // \u8fd9\u4e2a\u8868\u8fbe\u5f0f\u770b\u8d77\u6765\u4e0d\u662f\u5f88\u597d\u7406\u89e3\uff0c\u7b2c\u4e00\u4e2a\u62ec\u53f7\u5185\u7684\u8868\u8fbe\u5f0f\u7528\u4e8e\u5339\u914d , ! , = \u548c , \u7b49\u7b26\u53f7\u3002 // \u7b2c\u4e8c\u62ec\u53f7\u5185\u7684\u7528\u4e8e\u5339\u914d\u82f1\u6587\u5b57\u6bcd\uff0c\u6570\u5b57\u7b49\u5b57\u7b26\u3002\u4e3e\u4e2a\u4f8b\u5b50\u8bf4\u660e\u4e00\u4e0b\uff1a // host = 2.2.2.2 host != 1.1.1.1 method = hello // \u5339\u914d\u7ed3\u679c\u5982\u4e0b\uff1a // \u62ec\u53f7\u4e00 \u62ec\u53f7\u4e8c // 1. null host // 2. = 2.2.2.2 // 3. host // 4. != 1.1.1.1 // 5. method // 6. = hello final Matcher matcher = ROUTE_PATTERN.matcher(rule); while (matcher.find()) { // \u83b7\u53d6\u62ec\u53f7\u4e00\u5185\u7684\u5339\u914d\u7ed3\u679c String separator = matcher.group(1); // \u83b7\u53d6\u62ec\u53f7\u4e8c\u5185\u7684\u5339\u914d\u7ed3\u679c String content = matcher.group(2); // \u5206\u9694\u7b26\u4e3a\u7a7a\uff0c\u8868\u793a\u5339\u914d\u7684\u662f\u8868\u8fbe\u5f0f\u7684\u5f00\u59cb\u90e8\u5206 if (separator == null || separator.length() == 0) { // \u521b\u5efa MatchPair \u5bf9\u8c61 pair = new MatchPair(); // \u5b58\u50a8 \u5339\u914d\u9879, MatchPair \u952e\u503c\u5bf9\uff0c\u6bd4\u5982 host, MatchPair condition.put(content, pair); } // \u5982\u679c\u5206\u9694\u7b26\u4e3a \uff0c\u8868\u660e\u63a5\u4e0b\u6765\u4e5f\u662f\u4e00\u4e2a\u6761\u4ef6 else if ( .equals(separator)) { // \u5c1d\u8bd5\u4ece condition \u83b7\u53d6 MatchPair if (condition.get(content) == null) { // \u672a\u83b7\u53d6\u5230 MatchPair\uff0c\u91cd\u65b0\u521b\u5efa\u4e00\u4e2a\uff0c\u5e76\u653e\u5165 condition \u4e2d pair = new MatchPair(); condition.put(content, pair); } else { pair = condition.get(content); } } // \u5206\u9694\u7b26\u4e3a = else if ( = .equals(separator)) { if (pair == null) throw new ParseException( Illegal route rule ... ); values = pair.matches; // \u5c06 content \u5b58\u5165\u5230 MatchPair \u7684 matches \u96c6\u5408\u4e2d values.add(content); } // \u5206\u9694\u7b26\u4e3a != else if ( != .equals(separator)) { if (pair == null) throw new ParseException( Illegal route rule ... ); values = pair.mismatches; // \u5c06 content \u5b58\u5165\u5230 MatchPair \u7684 mismatches \u96c6\u5408\u4e2d values.add(content); } // \u5206\u9694\u7b26\u4e3a , else if ( , .equals(separator)) { if (values == null || values.isEmpty()) throw new ParseException( Illegal route rule ... ); // \u5c06 content \u5b58\u5165\u5230\u4e0a\u4e00\u6b65\u83b7\u53d6\u5230\u7684 values \u4e2d\uff0c\u53ef\u80fd\u662f matches\uff0c\u4e5f\u53ef\u80fd\u662f mismatches values.add(content); } else { throw new ParseException( Illegal route rule ... ); } } return condition; } \u4ee5\u4e0a\u5c31\u662f\u8def\u7531\u89c4\u5219\u7684\u89e3\u6790\u903b\u8f91\uff0c\u8be5\u903b\u8f91\u7531\u6b63\u5219\u8868\u8fbe\u5f0f\u548c\u4e00\u4e2a while \u5faa\u73af\u4ee5\u53ca\u6570\u4e2a\u6761\u4ef6\u5206\u652f\u7ec4\u6210\u3002\u4e0b\u9762\u901a\u8fc7\u4e00\u4e2a\u793a\u4f8b\u5bf9\u89e3\u6790\u903b\u8f91\u8fdb\u884c\u6f14\u7ece\u3002\u793a\u4f8b\u4e3a host = 2.2.2.2 host != 1.1.1.1 method = hello \u3002\u6b63\u5219\u89e3\u6790\u7ed3\u679c\u5982\u4e0b\uff1a \u62ec\u53f7\u4e00 \u62ec\u53f7\u4e8c 1. null host 2. = 2.2.2.2 3. host 4. != 1.1.1.1 5. method 6. = hello \u73b0\u5728\u7ebf\u7a0b\u8fdb\u5165 while \u5faa\u73af\uff1a \u7b2c\u4e00\u6b21\u5faa\u73af\uff1a\u5206\u9694\u7b26 separator = null\uff0ccontent = \"host\"\u3002\u6b64\u65f6\u521b\u5efa MatchPair \u5bf9\u8c61\uff0c\u5e76\u5b58\u5165\u5230 condition \u4e2d\uff0ccondition = {\"host\": MatchPair@123} \u7b2c\u4e8c\u6b21\u5faa\u73af\uff1a\u5206\u9694\u7b26 separator = \"=\"\uff0ccontent = \"2.2.2.2\"\uff0cpair = MatchPair@123\u3002\u6b64\u65f6\u5c06 2.2.2.2 \u653e\u5165\u5230 MatchPair@123 \u5bf9\u8c61\u7684 matches \u96c6\u5408\u4e2d\u3002 \u7b2c\u4e09\u6b21\u5faa\u73af\uff1a\u5206\u9694\u7b26 separator = \" \"\uff0ccontent = \"host\"\u3002host \u5df2\u5b58\u5728\u4e8e condition \u4e2d\uff0c\u56e0\u6b64 pair = MatchPair@123\u3002 \u7b2c\u56db\u6b21\u5faa\u73af\uff1a\u5206\u9694\u7b26 separator = \"!=\"\uff0ccontent = \"1.1.1.1\"\uff0cpair = MatchPair@123\u3002\u6b64\u65f6\u5c06 1.1.1.1 \u653e\u5165\u5230 MatchPair@123 \u5bf9\u8c61\u7684 mismatches \u96c6\u5408\u4e2d\u3002 \u7b2c\u4e94\u6b21\u5faa\u73af\uff1a\u5206\u9694\u7b26 separator = \" \"\uff0ccontent = \"method\"\u3002condition.get(\"method\") = null\uff0c\u56e0\u6b64\u65b0\u5efa\u4e00\u4e2a MatchPair \u5bf9\u8c61\uff0c\u5e76\u653e\u5165\u5230 condition \u4e2d\u3002\u6b64\u65f6 condition = {\"host\": MatchPair@123, \"method\": MatchPair@ 456} \u7b2c\u516d\u6b21\u5faa\u73af\uff1a\u5206\u9694\u7b26 separator = \"=\"\uff0ccontent = \"2.2.2.2\"\uff0cpair = MatchPair@456\u3002\u6b64\u65f6\u5c06 hello \u653e\u5165\u5230 MatchPair@456 \u5bf9\u8c61\u7684 matches \u96c6\u5408\u4e2d\u3002 \u5faa\u73af\u7ed3\u675f\uff0c\u6b64\u65f6 condition \u7684\u5185\u5bb9\u5982\u4e0b\uff1a { host : { matches : [ 2.2.2.2 ], mismatches : [ 1.1.1.1 ] }, method : { matches : [ hello ], mismatches : [] } } \u8def\u7531\u89c4\u5219\u7684\u89e3\u6790\u8fc7\u7a0b\u7a0d\u5fae\u6709\u70b9\u590d\u6742\uff0c\u5927\u5bb6\u53ef\u901a\u8fc7 ConditionRouter \u7684\u6d4b\u8bd5\u7c7b\u5bf9\u8be5\u903b\u8f91\u8fdb\u884c\u6d4b\u8bd5\u3002\u5e76\u4e14\u627e\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5bf9\u7167\u4e0a\u9762\u7684\u4ee3\u7801\u8d70\u4e00\u904d\uff0c\u52a0\u6df1\u7406\u89e3\u3002 2.2 \u670d\u52a1\u8def\u7531 \u670d\u52a1\u8def\u7531\u7684\u5165\u53e3\u65b9\u6cd5\u662f ConditionRouter \u7684 route \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u5b9a\u4e49\u5728 Router \u63a5\u53e3\u4e2d\u3002\u5b9e\u73b0\u4ee3\u7801\u5982\u4e0b\uff1a public T List Invoker T route(List Invoker T invokers, URL url, Invocation invocation) throws RpcException { if (invokers == null || invokers.isEmpty()) { return invokers; } try { // \u5148\u5bf9\u670d\u52a1\u6d88\u8d39\u8005\u6761\u4ef6\u8fdb\u884c\u5339\u914d\uff0c\u5982\u679c\u5339\u914d\u5931\u8d25\uff0c\u8868\u660e\u670d\u52a1\u6d88\u8d39\u8005 url \u4e0d\u7b26\u5408\u5339\u914d\u89c4\u5219\uff0c // \u65e0\u9700\u8fdb\u884c\u540e\u7eed\u5339\u914d\uff0c\u76f4\u63a5\u8fd4\u56de Invoker \u5217\u8868\u5373\u53ef\u3002\u6bd4\u5982\u4e0b\u9762\u7684\u89c4\u5219\uff1a // host = 10.20.153.10 = host = 10.0.0.10 // \u8fd9\u6761\u8def\u7531\u89c4\u5219\u5e0c\u671b IP \u4e3a 10.20.153.10 \u7684\u670d\u52a1\u6d88\u8d39\u8005\u8c03\u7528 IP \u4e3a 10.0.0.10 \u673a\u5668\u4e0a\u7684\u670d\u52a1\u3002 // \u5f53\u6d88\u8d39\u8005 ip \u4e3a 10.20.153.11 \u65f6\uff0cmatchWhen \u8fd4\u56de false\uff0c\u8868\u660e\u5f53\u524d\u8fd9\u6761\u8def\u7531\u89c4\u5219\u4e0d\u9002\u7528\u4e8e // \u5f53\u524d\u7684\u670d\u52a1\u6d88\u8d39\u8005\uff0c\u6b64\u65f6\u65e0\u9700\u518d\u8fdb\u884c\u540e\u7eed\u5339\u914d\uff0c\u76f4\u63a5\u8fd4\u56de\u5373\u53ef\u3002 if (!matchWhen(url, invocation)) { return invokers; } List Invoker T result = new ArrayList Invoker T (); // \u670d\u52a1\u63d0\u4f9b\u8005\u5339\u914d\u6761\u4ef6\u672a\u914d\u7f6e\uff0c\u8868\u660e\u5bf9\u6307\u5b9a\u7684\u670d\u52a1\u6d88\u8d39\u8005\u7981\u7528\u670d\u52a1\uff0c\u4e5f\u5c31\u662f\u670d\u52a1\u6d88\u8d39\u8005\u5728\u9ed1\u540d\u5355\u4e2d if (thenCondition == null) { logger.warn( The current consumer in the service blacklist... ); return result; } // \u8fd9\u91cc\u53ef\u4ee5\u7b80\u5355\u7684\u628a Invoker \u7406\u89e3\u4e3a\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u73b0\u5728\u4f7f\u7528\u670d\u52a1\u63d0\u4f9b\u8005\u5339\u914d\u89c4\u5219\u5bf9 // Invoker \u5217\u8868\u8fdb\u884c\u5339\u914d for (Invoker T invoker : invokers) { // \u82e5\u5339\u914d\u6210\u529f\uff0c\u8868\u660e\u5f53\u524d Invoker \u7b26\u5408\u670d\u52a1\u63d0\u4f9b\u8005\u5339\u914d\u89c4\u5219\u3002 // \u6b64\u65f6\u5c06 Invoker \u6dfb\u52a0\u5230 result \u5217\u8868\u4e2d if (matchThen(invoker.getUrl(), url)) { result.add(invoker); } } // \u8fd4\u56de\u5339\u914d\u7ed3\u679c\uff0c\u5982\u679c result \u4e3a\u7a7a\u5217\u8868\uff0c\u4e14 force = true\uff0c\u8868\u793a\u5f3a\u5236\u8fd4\u56de\u7a7a\u5217\u8868\uff0c // \u5426\u5219\u8def\u7531\u7ed3\u679c\u4e3a\u7a7a\u7684\u8def\u7531\u89c4\u5219\u5c06\u81ea\u52a8\u5931\u6548 if (!result.isEmpty()) { return result; } else if (force) { logger.warn( The route result is empty and force execute ... ); return result; } } catch (Throwable t) { logger.error( Failed to execute condition router rule: ... ); } // \u539f\u6837\u8fd4\u56de\uff0c\u6b64\u65f6 force = false\uff0c\u8868\u793a\u8be5\u6761\u8def\u7531\u89c4\u5219\u5931\u6548 return invokers; } route \u65b9\u6cd5\u5148\u662f\u8c03\u7528 matchWhen \u5bf9\u670d\u52a1\u6d88\u8d39\u8005\u8fdb\u884c\u5339\u914d\uff0c\u5982\u679c\u5339\u914d\u5931\u8d25\uff0c\u76f4\u63a5\u8fd4\u56de Invoker \u5217\u8868\u3002\u5982\u679c\u5339\u914d\u6210\u529f\uff0c\u518d\u5bf9\u670d\u52a1\u63d0\u4f9b\u8005\u8fdb\u884c\u5339\u914d\uff0c\u5339\u914d\u903b\u8f91\u5c01\u88c5\u5728\u4e86 matchThen \u65b9\u6cd5\u4e2d\u3002\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u7684\u903b\u8f91\uff1a boolean matchWhen(URL url, Invocation invocation) { // \u670d\u52a1\u6d88\u8d39\u8005\u6761\u4ef6\u4e3a null \u6216\u7a7a\uff0c\u5747\u8fd4\u56de true\uff0c\u6bd4\u5982\uff1a // = host != 172.22.3.91 // \u8868\u793a\u6240\u6709\u7684\u670d\u52a1\u6d88\u8d39\u8005\u90fd\u4e0d\u5f97\u8c03\u7528 IP \u4e3a 172.22.3.91 \u7684\u673a\u5668\u4e0a\u7684\u670d\u52a1 return whenCondition == null || whenCondition.isEmpty() || matchCondition(whenCondition, url, null, invocation); // \u8fdb\u884c\u6761\u4ef6\u5339\u914d } private boolean matchThen(URL url, URL param) { // \u670d\u52a1\u63d0\u4f9b\u8005\u6761\u4ef6\u4e3a null \u6216\u7a7a\uff0c\u8868\u793a\u7981\u7528\u670d\u52a1 return !(thenCondition == null || thenCondition.isEmpty()) matchCondition(thenCondition, url, param, null); // \u8fdb\u884c\u6761\u4ef6\u5339\u914d } \u8fd9\u4e24\u4e2a\u65b9\u6cd5\u957f\u7684\u6709\u70b9\u50cf\uff0c\u4e0d\u8fc7\u903b\u8f91\u4e0a\u8fd8\u662f\u6709\u5dee\u522b\u7684\uff0c\u5927\u5bb6\u6ce8\u610f\u770b\u3002\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u5747\u8c03\u7528\u4e86 matchCondition \u65b9\u6cd5\uff0c\u4f46\u5b83\u4eec\u6240\u4f20\u5165\u7684\u53c2\u6570\u662f\u4e0d\u540c\u7684\u3002\u8fd9\u4e2a\u9700\u8981\u7279\u522b\u6ce8\u610f\u4e00\u4e0b\uff0c\u4e0d\u7136\u540e\u9762\u7684\u903b\u8f91\u4e0d\u597d\u5f04\u61c2\u3002\u4e0b\u9762\u6211\u4eec\u5bf9\u8fd9\u51e0\u4e2a\u53c2\u6570\u8fdb\u884c\u6eaf\u6e90\u3002matchWhen \u65b9\u6cd5\u5411 matchCondition \u65b9\u6cd5\u4f20\u5165\u7684\u53c2\u6570\u4e3a [whenCondition, url, null, invocation]\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570 whenCondition \u4e3a\u670d\u52a1\u6d88\u8d39\u8005\u5339\u914d\u6761\u4ef6\uff0c\u8fd9\u4e2a\u524d\u9762\u5206\u6790\u8fc7\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570 url \u6e90\u81ea route \u65b9\u6cd5\u7684\u53c2\u6570\u5217\u8868\uff0c\u8be5\u53c2\u6570\u7531\u5916\u90e8\u7c7b\u8c03\u7528 route \u65b9\u6cd5\u65f6\u4f20\u5165\u3002\u6bd4\u5982\uff1a private List Invoker T route(List Invoker T invokers, String method) { Invocation invocation = new RpcInvocation(method, new Class ? [0], new Object[0]); List Router routers = getRouters(); if (routers != null) { for (Router router : routers) { if (router.getUrl() != null) { // \u6ce8\u610f\u7b2c\u4e8c\u4e2a\u53c2\u6570 invokers = router.route(invokers, getConsumerUrl(), invocation); } } } return invokers; } \u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\u6765\u81ea RegistryDirectory\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8868\u793a\u7684\u662f\u670d\u52a1\u6d88\u8d39\u8005 url\u3002matchCondition \u7684 invocation \u53c2\u6570\u4e5f\u662f\u4ece\u8fd9\u91cc\u4f20\u5165\u7684\u3002 \u63a5\u4e0b\u6765\u518d\u6765\u770b\u770b matchThen \u5411 matchCondition \u65b9\u6cd5\u4f20\u5165\u7684\u53c2\u6570 [thenCondition, url, param, null]\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e0d\u7528\u89e3\u91ca\u4e86\u3002\u7b2c\u4e8c\u4e2a\u548c\u7b2c\u4e09\u4e2a\u53c2\u6570\u6765\u81ea matchThen \u65b9\u6cd5\u7684\u53c2\u6570\u5217\u8868\uff0c\u8fd9\u4e24\u4e2a\u53c2\u6570\u5206\u522b\u4e3a\u670d\u52a1\u63d0\u4f9b\u8005 url \u548c\u670d\u52a1\u6d88\u8d39\u8005 url\u3002\u641e\u6e05\u695a\u8fd9\u4e9b\u53c2\u6570\u6765\u6e90\u540e\uff0c\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u5206\u6790 matchCondition \u65b9\u6cd5\u4e86\u3002 private boolean matchCondition(Map String, MatchPair condition, URL url, URL param, Invocation invocation) { // \u5c06\u670d\u52a1\u63d0\u4f9b\u8005\u6216\u6d88\u8d39\u8005 url \u8f6c\u6210 Map Map String, String sample = url.toMap(); boolean result = false; // \u904d\u5386 condition \u5217\u8868 for (Map.Entry String, MatchPair matchPair : condition.entrySet()) { // \u83b7\u53d6\u5339\u914d\u9879\u540d\u79f0\uff0c\u6bd4\u5982 host\u3001method \u7b49 String key = matchPair.getKey(); String sampleValue; // \u5982\u679c invocation \u4e0d\u4e3a\u7a7a\uff0c\u4e14 key \u4e3a mehtod(s)\uff0c\u8868\u793a\u8fdb\u884c\u65b9\u6cd5\u5339\u914d if (invocation != null (Constants.METHOD_KEY.equals(key) || Constants.METHODS_KEY.equals(key))) { // \u4ece invocation \u83b7\u53d6\u88ab\u8c03\u7528\u65b9\u6cd5\u7684\u540d\u79f0 sampleValue = invocation.getMethodName(); } else { // \u4ece\u670d\u52a1\u63d0\u4f9b\u8005\u6216\u6d88\u8d39\u8005 url \u4e2d\u83b7\u53d6\u6307\u5b9a\u5b57\u6bb5\u503c\uff0c\u6bd4\u5982 host\u3001application \u7b49 sampleValue = sample.get(key); if (sampleValue == null) { // \u5c1d\u8bd5\u901a\u8fc7 default.xxx \u83b7\u53d6\u76f8\u5e94\u7684\u503c sampleValue = sample.get(Constants.DEFAULT_KEY_PREFIX + key); } } // --------------------\u2728 \u5206\u5272\u7ebf \u2728-------------------- // if (sampleValue != null) { // \u8c03\u7528 MatchPair \u7684 isMatch \u65b9\u6cd5\u8fdb\u884c\u5339\u914d if (!matchPair.getValue().isMatch(sampleValue, param)) { // \u53ea\u8981\u6709\u4e00\u4e2a\u89c4\u5219\u5339\u914d\u5931\u8d25\uff0c\u7acb\u5373\u8fd4\u56de false \u7ed3\u675f\u65b9\u6cd5\u903b\u8f91 return false; } else { result = true; } } else { // sampleValue \u4e3a\u7a7a\uff0c\u8868\u660e\u670d\u52a1\u63d0\u4f9b\u8005\u6216\u6d88\u8d39\u8005 url \u4e2d\u4e0d\u5305\u542b\u76f8\u5173\u5b57\u6bb5\u3002\u6b64\u65f6\u5982\u679c // MatchPair \u7684 matches \u4e0d\u4e3a\u7a7a\uff0c\u8868\u793a\u5339\u914d\u5931\u8d25\uff0c\u8fd4\u56de false\u3002\u6bd4\u5982\u6211\u4eec\u6709\u8fd9\u6837 // \u4e00\u6761\u5339\u914d\u6761\u4ef6 loadbalance = random\uff0c\u5047\u8bbe url \u4e2d\u5e76\u4e0d\u5305\u542b loadbalance \u53c2\u6570\uff0c // \u6b64\u65f6 sampleValue = null\u3002\u65e2\u7136\u8def\u7531\u89c4\u5219\u91cc\u9650\u5236\u4e86 loadbalance \u5fc5\u987b\u4e3a random\uff0c // \u4f46 sampleValue = null\uff0c\u660e\u663e\u4e0d\u7b26\u5408\u89c4\u5219\uff0c\u56e0\u6b64\u8fd4\u56de false if (!matchPair.getValue().matches.isEmpty()) { return false; } else { result = true; } } } return result; } \u5982\u4e0a\uff0cmatchCondition \u65b9\u6cd5\u770b\u8d77\u6765\u6709\u70b9\u590d\u6742\uff0c\u8fd9\u91cc\u7b80\u5355\u8bf4\u660e\u4e00\u4e0b\u3002\u5206\u5272\u7ebf\u4ee5\u4e0a\u7684\u4ee3\u7801\u5b9e\u9645\u4e0a\u7528\u4e8e\u83b7\u53d6 sampleValue \u7684\u503c\uff0c\u5206\u5272\u7ebf\u4ee5\u4e0b\u624d\u662f\u8fdb\u884c\u6761\u4ef6\u5339\u914d\u3002\u6761\u4ef6\u5339\u914d\u8c03\u7528\u7684\u903b\u8f91\u5c01\u88c5\u5728 isMatch \u4e2d\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a private boolean isMatch(String value, URL param) { // \u60c5\u51b5\u4e00\uff1amatches \u975e\u7a7a\uff0cmismatches \u4e3a\u7a7a if (!matches.isEmpty() mismatches.isEmpty()) { // \u904d\u5386 matches \u96c6\u5408\uff0c\u68c0\u6d4b\u5165\u53c2 value \u662f\u5426\u80fd\u88ab matches \u96c6\u5408\u5143\u7d20\u5339\u914d\u5230\u3002 // \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c value = 10.20.153.11\uff0cmatches = [10.20.153.*], // \u6b64\u65f6 isMatchGlobPattern \u65b9\u6cd5\u8fd4\u56de true for (String match : matches) { if (UrlUtils.isMatchGlobPattern(match, value, param)) { return true; } } // \u5982\u679c\u6240\u6709\u5339\u914d\u9879\u90fd\u65e0\u6cd5\u5339\u914d\u5230\u5165\u53c2\uff0c\u5219\u8fd4\u56de false return false; } // \u60c5\u51b5\u4e8c\uff1amatches \u4e3a\u7a7a\uff0cmismatches \u975e\u7a7a if (!mismatches.isEmpty() matches.isEmpty()) { for (String mismatch : mismatches) { // \u53ea\u8981\u5165\u53c2\u88ab mismatches \u96c6\u5408\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\u5339\u914d\u5230\uff0c\u5c31\u8fd4\u56de false if (UrlUtils.isMatchGlobPattern(mismatch, value, param)) { return false; } } // mismatches \u96c6\u5408\u4e2d\u6240\u6709\u5143\u7d20\u90fd\u65e0\u6cd5\u5339\u914d\u5230\u5165\u53c2\uff0c\u6b64\u65f6\u8fd4\u56de true return true; } // \u60c5\u51b5\u4e09\uff1amatches \u975e\u7a7a\uff0cmismatches \u975e\u7a7a if (!matches.isEmpty() !mismatches.isEmpty()) { // matches \u548c mismatches \u5747\u4e3a\u975e\u7a7a\uff0c\u6b64\u65f6\u4f18\u5148\u4f7f\u7528 mismatches \u96c6\u5408\u5143\u7d20\u5bf9\u5165\u53c2\u8fdb\u884c\u5339\u914d\u3002 // \u53ea\u8981 mismatches \u96c6\u5408\u4e2d\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\u4e0e\u5165\u53c2\u5339\u914d\u6210\u529f\uff0c\u5c31\u7acb\u5373\u8fd4\u56de false\uff0c\u7ed3\u675f\u65b9\u6cd5\u903b\u8f91 for (String mismatch : mismatches) { if (UrlUtils.isMatchGlobPattern(mismatch, value, param)) { return false; } } // mismatches \u96c6\u5408\u5143\u7d20\u65e0\u6cd5\u5339\u914d\u5230\u5165\u53c2\uff0c\u6b64\u65f6\u518d\u4f7f\u7528 matches \u7ee7\u7eed\u5339\u914d for (String match : matches) { // \u53ea\u8981 matches \u96c6\u5408\u4e2d\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\u4e0e\u5165\u53c2\u5339\u914d\u6210\u529f\uff0c\u5c31\u7acb\u5373\u8fd4\u56de true if (UrlUtils.isMatchGlobPattern(match, value, param)) { return true; } } // \u5168\u90e8\u5931\u914d\uff0c\u5219\u8fd4\u56de false return false; } // \u60c5\u51b5\u56db\uff1amatches \u548c mismatches \u5747\u4e3a\u7a7a\uff0c\u6b64\u65f6\u8fd4\u56de false return false; } isMatch \u65b9\u6cd5\u903b\u8f91\u6bd4\u8f83\u6e05\u6670\uff0c\u7531\u4e09\u4e2a\u6761\u4ef6\u5206\u652f\u7ec4\u6210\uff0c\u7528\u4e8e\u5904\u7406\u56db\u79cd\u60c5\u51b5\u3002\u8fd9\u91cc\u5bf9\u56db\u79cd\u60c5\u51b5\u4e0b\u7684\u5339\u914d\u903b\u8f91\u8fdb\u884c\u7b80\u5355\u7684\u603b\u7ed3\uff0c\u5982\u4e0b\uff1a \u6761\u4ef6 \u8fc7\u7a0b \u60c5\u51b5\u4e00 matches \u975e\u7a7a\uff0cmismatches \u4e3a\u7a7a \u904d\u5386 matches \u96c6\u5408\u5143\u7d20\uff0c\u5e76\u4e0e\u5165\u53c2\u8fdb\u884c\u5339\u914d\u3002\u53ea\u8981\u6709\u4e00\u4e2a\u5143\u7d20\u6210\u529f\u5339\u914d\u5165\u53c2\uff0c\u5373\u53ef\u8fd4\u56de true\u3002\u82e5\u5168\u90e8\u5931\u914d\uff0c\u5219\u8fd4\u56de false\u3002 \u60c5\u51b5\u4e8c matches \u4e3a\u7a7a\uff0cmismatches \u975e\u7a7a \u904d\u5386 mismatches \u96c6\u5408\u5143\u7d20\uff0c\u5e76\u4e0e\u5165\u53c2\u8fdb\u884c\u5339\u914d\u3002\u53ea\u8981\u6709\u4e00\u4e2a\u5143\u7d20\u6210\u529f\u5339\u914d\u5165\u53c2\uff0c\u7acb\u5373 false\u3002\u82e5\u5168\u90e8\u5931\u914d\uff0c\u5219\u8fd4\u56de true\u3002 \u60c5\u51b5\u4e09 matches \u975e\u7a7a\uff0cmismatches \u975e\u7a7a \u4f18\u5148\u4f7f\u7528 mismatches \u96c6\u5408\u5143\u7d20\u5bf9\u5165\u53c2\u8fdb\u884c\u5339\u914d\uff0c\u53ea\u8981\u4efb\u4e00\u5143\u7d20\u4e0e\u5165\u53c2\u5339\u914d\u6210\u529f\uff0c\u5c31\u7acb\u5373\u8fd4\u56de false\uff0c\u7ed3\u675f\u65b9\u6cd5\u903b\u8f91\u3002\u5426\u5219\u518d\u4f7f\u7528 matches \u4e2d\u7684\u96c6\u5408\u5143\u7d20\u8fdb\u884c\u5339\u914d\uff0c\u53ea\u8981\u6709\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\u5339\u914d\u6210\u529f\uff0c\u5373\u53ef\u8fd4\u56de true\u3002\u82e5\u5168\u90e8\u5931\u914d\uff0c\u5219\u8fd4\u56de false \u60c5\u51b5\u56db matches \u4e3a\u7a7a\uff0cmismatches \u4e3a\u7a7a \u76f4\u63a5\u8fd4\u56de false isMatch \u65b9\u6cd5\u662f\u901a\u8fc7 UrlUtils \u7684 isMatchGlobPattern \u65b9\u6cd5\u8fdb\u884c\u5339\u914d\uff0c\u56e0\u6b64\u4e0b\u9762\u6211\u4eec\u518d\u6765\u770b\u770b isMatchGlobPattern \u65b9\u6cd5\u7684\u903b\u8f91\u3002 public static boolean isMatchGlobPattern(String pattern, String value, URL param) { if (param != null pattern.startsWith( $ )) { // \u5f15\u7528\u670d\u52a1\u6d88\u8d39\u8005\u53c2\u6570\uff0cparam \u53c2\u6570\u4e3a\u670d\u52a1\u6d88\u8d39\u8005 url pattern = param.getRawParameter(pattern.substring(1)); } // \u8c03\u7528\u91cd\u8f7d\u65b9\u6cd5\u7ee7\u7eed\u6bd4\u8f83 return isMatchGlobPattern(pattern, value); } public static boolean isMatchGlobPattern(String pattern, String value) { // \u5bf9 * \u901a\u914d\u7b26\u63d0\u4f9b\u652f\u6301 if ( * .equals(pattern)) // \u5339\u914d\u89c4\u5219\u4e3a\u901a\u914d\u7b26 *\uff0c\u76f4\u63a5\u8fd4\u56de true \u5373\u53ef return true; if ((pattern == null || pattern.length() == 0) (value == null || value.length() == 0)) // pattern \u548c value \u5747\u4e3a\u7a7a\uff0c\u6b64\u65f6\u53ef\u8ba4\u4e3a\u4e24\u8005\u76f8\u7b49\uff0c\u8fd4\u56de true return true; if ((pattern == null || pattern.length() == 0) || (value == null || value.length() == 0)) // pattern \u548c value \u5176\u4e2d\u6709\u4e00\u4e2a\u4e3a\u7a7a\uff0c\u8868\u660e\u4e24\u8005\u4e0d\u76f8\u7b49\uff0c\u8fd4\u56de false return false; // \u5b9a\u4f4d * \u901a\u914d\u7b26\u4f4d\u7f6e int i = pattern.lastIndexOf('*'); if (i == -1) { // \u5339\u914d\u89c4\u5219\u4e2d\u4e0d\u5305\u542b\u901a\u914d\u7b26\uff0c\u6b64\u65f6\u76f4\u63a5\u6bd4\u8f83 value \u548c pattern \u662f\u5426\u76f8\u7b49\u5373\u53ef\uff0c\u5e76\u8fd4\u56de\u6bd4\u8f83\u7ed3\u679c return value.equals(pattern); } // \u901a\u914d\u7b26 * \u5728\u5339\u914d\u89c4\u5219\u5c3e\u90e8\uff0c\u6bd4\u5982 10.0.21.* else if (i == pattern.length() - 1) { // \u68c0\u6d4b value \u662f\u5426\u4ee5\u201c\u4e0d\u542b\u901a\u914d\u7b26\u7684\u5339\u914d\u89c4\u5219\u201d\u5f00\u5934\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\u3002\u6bd4\u5982: // pattern = 10.0.21.*\uff0cvalue = 10.0.21.12\uff0c\u6b64\u65f6\u8fd4\u56de true return value.startsWith(pattern.substring(0, i)); } // \u901a\u914d\u7b26 * \u5728\u5339\u914d\u89c4\u5219\u5934\u90e8 else if (i == 0) { // \u68c0\u6d4b value \u662f\u5426\u4ee5\u201c\u4e0d\u542b\u901a\u914d\u7b26\u7684\u5339\u914d\u89c4\u5219\u201d\u7ed3\u5c3e\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c return value.endsWith(pattern.substring(i + 1)); } // \u901a\u914d\u7b26 * \u5728\u5339\u914d\u89c4\u5219\u4e2d\u95f4\u4f4d\u7f6e else { // \u901a\u8fc7\u901a\u914d\u7b26\u5c06 pattern \u5206\u6210\u4e24\u534a\uff0c\u5f97\u5230 prefix \u548c suffix String prefix = pattern.substring(0, i); String suffix = pattern.substring(i + 1); // \u68c0\u6d4b value \u662f\u5426\u4ee5 prefix \u5f00\u5934\uff0c\u4e14\u4ee5 suffix \u7ed3\u5c3e\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c return value.startsWith(prefix) value.endsWith(suffix); } } \u4ee5\u4e0a\u5c31\u662f isMatchGlobPattern \u4e24\u4e2a\u91cd\u8f7d\u65b9\u6cd5\u7684\u5168\u90e8\u903b\u8f91\uff0c\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u5206\u522b\u5bf9\u666e\u901a\u7684\u5339\u914d\u8fc7\u7a0b\uff0c\u4ee5\u53ca\u201d\u5f15\u7528\u6d88\u8d39\u8005\u53c2\u6570\u201c\u548c\u901a\u914d\u7b26\u5339\u914d\u7b49\u7279\u6027\u63d0\u4f9b\u4e86\u652f\u6301\u3002\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u7684\u903b\u8f91\u4e0d\u662f\u5f88\u590d\u6742\uff0c\u4e14\u4ee3\u7801\u4e2d\u4e5f\u8fdb\u884c\u4e86\u6bd4\u8f83\u8be6\u7ec6\u7684\u6ce8\u91ca\uff0c\u56e0\u6b64\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002 3. \u603b\u7ed3 \u672c\u7bc7\u6587\u7ae0\u5bf9\u6761\u4ef6\u8def\u7531\u7684\u8868\u8fbe\u5f0f\u89e3\u6790\u548c\u670d\u52a1\u8def\u7531\u8fc7\u7a0b\u8fdb\u884c\u4e86\u8f83\u4e3a\u7ec6\u81f4\u7684\u5206\u6790\u3002\u603b\u7684\u6765\u8bf4\uff0c\u6761\u4ef6\u8def\u7531\u7684\u4ee3\u7801\u8fd8\u662f\u6709\u4e00\u4e9b\u590d\u6742\u7684\uff0c\u9700\u8981\u9759\u4e0b\u5fc3\u6765\u770b\u3002\u5728\u9605\u8bfb\u6761\u4ef6\u8def\u7531\u4ee3\u7801\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8981\u591a\u8c03\u8bd5\u3002\u4e00\u822c\u7684\u6846\u67b6\u90fd\u4f1a\u6709\u5355\u5143\u6d4b\u8bd5\uff0cDubbo \u4e5f\u4e0d\u4f8b\u5916\uff0c\u56e0\u6b64\u5927\u5bb6\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 ConditionRouterTest \u5bf9\u6761\u4ef6\u8def\u7531\u8fdb\u884c\u8c03\u8bd5\uff0c\u65e0\u9700\u91cd\u5934\u6784\u5efa\u6d4b\u8bd5\u7528\u4f8b\u3002","title":"Router"},{"location":"source_code_guide/router/#1","text":"\u4e0a\u4e00\u7bc7\u6587\u7ae0\u5206\u6790\u4e86\u96c6\u7fa4\u5bb9\u9519\u7684\u7b2c\u4e00\u90e8\u5206 \u2014 \u670d\u52a1\u76ee\u5f55 Directory\u3002\u670d\u52a1\u76ee\u5f55\u5728\u5237\u65b0 Invoker \u5217\u8868\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u901a\u8fc7 Router \u8fdb\u884c\u670d\u52a1\u8def\u7531\uff0c\u7b5b\u9009\u51fa\u7b26\u5408\u8def\u7531\u89c4\u5219\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u3002\u5728\u8be6\u7ec6\u5206\u6790\u670d\u52a1\u8def\u7531\u7684\u6e90\u7801\u4e4b\u524d\uff0c\u5148\u6765\u4ecb\u7ecd\u4e00\u4e0b\u670d\u52a1\u8def\u7531\u662f\u4ec0\u4e48\u3002\u670d\u52a1\u8def\u7531\u5305\u542b\u4e00\u6761\u8def\u7531\u89c4\u5219\uff0c\u8def\u7531\u89c4\u5219\u51b3\u5b9a\u4e86\u670d\u52a1\u6d88\u8d39\u8005\u7684\u8c03\u7528\u76ee\u6807\uff0c\u5373\u89c4\u5b9a\u4e86\u670d\u52a1\u6d88\u8d39\u8005\u53ef\u8c03\u7528\u54ea\u4e9b\u670d\u52a1\u63d0\u4f9b\u8005\u3002Dubbo \u76ee\u524d\u63d0\u4f9b\u4e86\u4e09\u79cd\u670d\u52a1\u8def\u7531\u5b9e\u73b0\uff0c\u5206\u522b\u4e3a\u6761\u4ef6\u8def\u7531 ConditionRouter\u3001\u811a\u672c\u8def\u7531 ScriptRouter \u548c\u6807\u7b7e\u8def\u7531 TagRouter\u3002\u5176\u4e2d\u6761\u4ef6\u8def\u7531\u662f\u6211\u4eec\u6700\u5e38\u4f7f\u7528\u7684\uff0c\u6807\u7b7e\u8def\u7531\u662f\u4e00\u4e2a\u65b0\u7684\u5b9e\u73b0\uff0c\u6682\u65f6\u8fd8\u672a\u53d1\u5e03\uff0c\u8be5\u5b9e\u73b0\u9884\u8ba1\u4f1a\u5728 2.7.x \u7248\u672c\u4e2d\u53d1\u5e03\u3002\u672c\u7bc7\u6587\u7ae0\u5c06\u5206\u6790\u6761\u4ef6\u8def\u7531\u76f8\u5173\u6e90\u7801\uff0c\u811a\u672c\u8def\u7531\u548c\u6807\u7b7e\u8def\u7531\u8fd9\u91cc\u5c31\u4e0d\u5206\u6790\u4e86\u3002","title":"1. \u7b80\u4ecb"},{"location":"source_code_guide/router/#2","text":"\u6761\u4ef6\u8def\u7531\u89c4\u5219\u7531\u4e24\u4e2a\u6761\u4ef6\u7ec4\u6210\uff0c\u5206\u522b\u7528\u4e8e\u5bf9\u670d\u52a1\u6d88\u8d39\u8005\u548c\u63d0\u4f9b\u8005\u8fdb\u884c\u5339\u914d\u3002\u6bd4\u5982\u6709\u8fd9\u6837\u4e00\u6761\u89c4\u5219\uff1a host = 10.20.153.10 = host = 10.20.153.11 \u8be5\u6761\u89c4\u5219\u8868\u793a IP \u4e3a 10.20.153.10 \u7684\u670d\u52a1\u6d88\u8d39\u8005 \u53ea\u53ef \u8c03\u7528 IP \u4e3a 10.20.153.11 \u673a\u5668\u4e0a\u7684\u670d\u52a1\uff0c\u4e0d\u53ef\u8c03\u7528\u5176\u4ed6\u673a\u5668\u4e0a\u7684\u670d\u52a1\u3002\u6761\u4ef6\u8def\u7531\u89c4\u5219\u7684\u683c\u5f0f\u5982\u4e0b\uff1a [\u670d\u52a1\u6d88\u8d39\u8005\u5339\u914d\u6761\u4ef6] = [\u670d\u52a1\u63d0\u4f9b\u8005\u5339\u914d\u6761\u4ef6] \u5982\u679c\u670d\u52a1\u6d88\u8d39\u8005\u5339\u914d\u6761\u4ef6\u4e3a\u7a7a\uff0c\u8868\u793a\u4e0d\u5bf9\u670d\u52a1\u6d88\u8d39\u8005\u8fdb\u884c\u9650\u5236\u3002\u5982\u679c\u670d\u52a1\u63d0\u4f9b\u8005\u5339\u914d\u6761\u4ef6\u4e3a\u7a7a\uff0c\u8868\u793a\u5bf9\u67d0\u4e9b\u670d\u52a1\u6d88\u8d39\u8005\u7981\u7528\u670d\u52a1\u3002\u5b98\u65b9\u6587\u6863\u4e2d\u5bf9\u6761\u4ef6\u8def\u7531\u8fdb\u884c\u4e86\u6bd4\u8f83\u8be6\u7ec6\u7684\u4ecb\u7ecd\uff0c\u5927\u5bb6\u53ef\u4ee5\u53c2\u8003\u4e0b\uff0c\u8fd9\u91cc\u5c31\u4e0d\u8fc7\u591a\u8bf4\u660e\u4e86\u3002 \u6761\u4ef6\u8def\u7531\u5b9e\u73b0\u7c7b ConditionRouter \u5728\u8fdb\u884c\u5de5\u4f5c\u524d\uff0c\u9700\u8981\u5148\u5bf9\u7528\u6237\u914d\u7f6e\u7684\u8def\u7531\u89c4\u5219\u8fdb\u884c\u89e3\u6790\uff0c\u5f97\u5230\u4e00\u7cfb\u5217\u7684\u6761\u4ef6\u3002\u7136\u540e\u518d\u6839\u636e\u8fd9\u4e9b\u6761\u4ef6\u5bf9\u670d\u52a1\u8fdb\u884c\u8def\u7531\u3002\u672c\u7ae0\u5c06\u5206\u4e24\u8282\u8fdb\u884c\u8bf4\u660e\uff0c2.1\u8282\u4ecb\u7ecd\u8868\u8fbe\u5f0f\u89e3\u6790\u8fc7\u7a0b\u30022.2 \u8282\u4ecb\u7ecd\u670d\u52a1\u8def\u7531\u7684\u8fc7\u7a0b\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u5148\u4ece\u8868\u8fbe\u5f0f\u89e3\u6790\u8fc7\u7a0b\u770b\u8d77\u3002","title":"2. \u6e90\u7801\u5206\u6790"},{"location":"source_code_guide/router/#21","text":"\u6761\u4ef6\u8def\u7531\u89c4\u5219\u662f\u4e00\u6761\u5b57\u7b26\u4e32\uff0c\u5bf9\u4e8e Dubbo \u6765\u8bf4\uff0c\u5b83\u5e76\u4e0d\u80fd\u76f4\u63a5\u7406\u89e3\u5b57\u7b26\u4e32\u7684\u610f\u601d\uff0c\u9700\u8981\u5c06\u5176\u89e3\u6790\u6210\u5185\u90e8\u683c\u5f0f\u624d\u884c\u3002\u6761\u4ef6\u8868\u8fbe\u5f0f\u7684\u89e3\u6790\u8fc7\u7a0b\u59cb\u4e8e ConditionRouter \u7684\u6784\u9020\u65b9\u6cd5\uff0c\u4e0b\u9762\u4e00\u8d77\u770b\u4e00\u4e0b\uff1a public ConditionRouter(URL url) { this.url = url; // \u83b7\u53d6 priority \u548c force \u914d\u7f6e this.priority = url.getParameter(Constants.PRIORITY_KEY, 0); this.force = url.getParameter(Constants.FORCE_KEY, false); try { // \u83b7\u53d6\u8def\u7531\u89c4\u5219 String rule = url.getParameterAndDecoded(Constants.RULE_KEY); if (rule == null || rule.trim().length() == 0) { throw new IllegalArgumentException( Illegal route rule! ); } rule = rule.replace( consumer. , ).replace( provider. , ); // \u5b9a\u4f4d = \u5206\u9694\u7b26 int i = rule.indexOf( = ); // \u5206\u522b\u83b7\u53d6\u670d\u52a1\u6d88\u8d39\u8005\u548c\u63d0\u4f9b\u8005\u5339\u914d\u89c4\u5219 String whenRule = i 0 ? null : rule.substring(0, i).trim(); String thenRule = i 0 ? rule.trim() : rule.substring(i + 2).trim(); // \u89e3\u6790\u670d\u52a1\u6d88\u8d39\u8005\u5339\u914d\u89c4\u5219 Map String, MatchPair when = StringUtils.isBlank(whenRule) || true .equals(whenRule) ? new HashMap String, MatchPair () : parseRule(whenRule); // \u89e3\u6790\u670d\u52a1\u63d0\u4f9b\u8005\u5339\u914d\u89c4\u5219 Map String, MatchPair then = StringUtils.isBlank(thenRule) || false .equals(thenRule) ? null : parseRule(thenRule); // \u5c06\u89e3\u6790\u51fa\u7684\u5339\u914d\u89c4\u5219\u5206\u522b\u8d4b\u503c\u7ed9 whenCondition \u548c thenCondition \u6210\u5458\u53d8\u91cf this.whenCondition = when; this.thenCondition = then; } catch (ParseException e) { throw new IllegalStateException(e.getMessage(), e); } } \u5982\u4e0a\uff0cConditionRouter \u6784\u9020\u65b9\u6cd5\u5148\u662f\u5bf9\u8def\u7531\u89c4\u5219\u505a\u9884\u5904\u7406\uff0c\u7136\u540e\u8c03\u7528 parseRule \u65b9\u6cd5\u5206\u522b\u5bf9\u670d\u52a1\u63d0\u4f9b\u8005\u548c\u6d88\u8d39\u8005\u89c4\u5219\u8fdb\u884c\u89e3\u6790\uff0c\u6700\u540e\u5c06\u89e3\u6790\u7ed3\u679c\u8d4b\u503c\u7ed9 whenCondition \u548c thenCondition \u6210\u5458\u53d8\u91cf\u3002ConditionRouter \u6784\u9020\u65b9\u6cd5\u4e0d\u662f\u5f88\u590d\u6742\uff0c\u8fd9\u91cc\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002\u4e0b\u9762\u6211\u4eec\u628a\u91cd\u70b9\u653e\u5728 parseRule \u65b9\u6cd5\u4e0a\uff0c\u5728\u8be6\u7ec6\u4ecb\u7ecd\u8fd9\u4e2a\u65b9\u6cd5\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e2a\u5185\u90e8\u7c7b\u3002 private static final class MatchPair { final Set String matches = new HashSet String (); final Set String mismatches = new HashSet String (); } MatchPair \u5185\u90e8\u5305\u542b\u4e86\u4e24\u4e2a Set \u7c7b\u578b\u7684\u6210\u5458\u53d8\u91cf\uff0c\u5206\u522b\u7528\u4e8e\u5b58\u653e\u5339\u914d\u548c\u4e0d\u5339\u914d\u7684\u6761\u4ef6\u3002\u8fd9\u4e2a\u7c7b\u4e24\u4e2a\u6210\u5458\u53d8\u91cf\u4f1a\u5728 parseRule \u65b9\u6cd5\u4e2d\u88ab\u7528\u5230\uff0c\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u3002 private static Map String, MatchPair parseRule(String rule) throws ParseException { // \u5b9a\u4e49\u6761\u4ef6\u6620\u5c04\u96c6\u5408 Map String, MatchPair condition = new HashMap String, MatchPair (); if (StringUtils.isBlank(rule)) { return condition; } MatchPair pair = null; Set String values = null; // \u901a\u8fc7\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u8def\u7531\u89c4\u5219\uff0cROUTE_PATTERN = ([ !=,]*)\\s*([^ !=,\\s]+) // \u8fd9\u4e2a\u8868\u8fbe\u5f0f\u770b\u8d77\u6765\u4e0d\u662f\u5f88\u597d\u7406\u89e3\uff0c\u7b2c\u4e00\u4e2a\u62ec\u53f7\u5185\u7684\u8868\u8fbe\u5f0f\u7528\u4e8e\u5339\u914d , ! , = \u548c , \u7b49\u7b26\u53f7\u3002 // \u7b2c\u4e8c\u62ec\u53f7\u5185\u7684\u7528\u4e8e\u5339\u914d\u82f1\u6587\u5b57\u6bcd\uff0c\u6570\u5b57\u7b49\u5b57\u7b26\u3002\u4e3e\u4e2a\u4f8b\u5b50\u8bf4\u660e\u4e00\u4e0b\uff1a // host = 2.2.2.2 host != 1.1.1.1 method = hello // \u5339\u914d\u7ed3\u679c\u5982\u4e0b\uff1a // \u62ec\u53f7\u4e00 \u62ec\u53f7\u4e8c // 1. null host // 2. = 2.2.2.2 // 3. host // 4. != 1.1.1.1 // 5. method // 6. = hello final Matcher matcher = ROUTE_PATTERN.matcher(rule); while (matcher.find()) { // \u83b7\u53d6\u62ec\u53f7\u4e00\u5185\u7684\u5339\u914d\u7ed3\u679c String separator = matcher.group(1); // \u83b7\u53d6\u62ec\u53f7\u4e8c\u5185\u7684\u5339\u914d\u7ed3\u679c String content = matcher.group(2); // \u5206\u9694\u7b26\u4e3a\u7a7a\uff0c\u8868\u793a\u5339\u914d\u7684\u662f\u8868\u8fbe\u5f0f\u7684\u5f00\u59cb\u90e8\u5206 if (separator == null || separator.length() == 0) { // \u521b\u5efa MatchPair \u5bf9\u8c61 pair = new MatchPair(); // \u5b58\u50a8 \u5339\u914d\u9879, MatchPair \u952e\u503c\u5bf9\uff0c\u6bd4\u5982 host, MatchPair condition.put(content, pair); } // \u5982\u679c\u5206\u9694\u7b26\u4e3a \uff0c\u8868\u660e\u63a5\u4e0b\u6765\u4e5f\u662f\u4e00\u4e2a\u6761\u4ef6 else if ( .equals(separator)) { // \u5c1d\u8bd5\u4ece condition \u83b7\u53d6 MatchPair if (condition.get(content) == null) { // \u672a\u83b7\u53d6\u5230 MatchPair\uff0c\u91cd\u65b0\u521b\u5efa\u4e00\u4e2a\uff0c\u5e76\u653e\u5165 condition \u4e2d pair = new MatchPair(); condition.put(content, pair); } else { pair = condition.get(content); } } // \u5206\u9694\u7b26\u4e3a = else if ( = .equals(separator)) { if (pair == null) throw new ParseException( Illegal route rule ... ); values = pair.matches; // \u5c06 content \u5b58\u5165\u5230 MatchPair \u7684 matches \u96c6\u5408\u4e2d values.add(content); } // \u5206\u9694\u7b26\u4e3a != else if ( != .equals(separator)) { if (pair == null) throw new ParseException( Illegal route rule ... ); values = pair.mismatches; // \u5c06 content \u5b58\u5165\u5230 MatchPair \u7684 mismatches \u96c6\u5408\u4e2d values.add(content); } // \u5206\u9694\u7b26\u4e3a , else if ( , .equals(separator)) { if (values == null || values.isEmpty()) throw new ParseException( Illegal route rule ... ); // \u5c06 content \u5b58\u5165\u5230\u4e0a\u4e00\u6b65\u83b7\u53d6\u5230\u7684 values \u4e2d\uff0c\u53ef\u80fd\u662f matches\uff0c\u4e5f\u53ef\u80fd\u662f mismatches values.add(content); } else { throw new ParseException( Illegal route rule ... ); } } return condition; } \u4ee5\u4e0a\u5c31\u662f\u8def\u7531\u89c4\u5219\u7684\u89e3\u6790\u903b\u8f91\uff0c\u8be5\u903b\u8f91\u7531\u6b63\u5219\u8868\u8fbe\u5f0f\u548c\u4e00\u4e2a while \u5faa\u73af\u4ee5\u53ca\u6570\u4e2a\u6761\u4ef6\u5206\u652f\u7ec4\u6210\u3002\u4e0b\u9762\u901a\u8fc7\u4e00\u4e2a\u793a\u4f8b\u5bf9\u89e3\u6790\u903b\u8f91\u8fdb\u884c\u6f14\u7ece\u3002\u793a\u4f8b\u4e3a host = 2.2.2.2 host != 1.1.1.1 method = hello \u3002\u6b63\u5219\u89e3\u6790\u7ed3\u679c\u5982\u4e0b\uff1a \u62ec\u53f7\u4e00 \u62ec\u53f7\u4e8c 1. null host 2. = 2.2.2.2 3. host 4. != 1.1.1.1 5. method 6. = hello \u73b0\u5728\u7ebf\u7a0b\u8fdb\u5165 while \u5faa\u73af\uff1a \u7b2c\u4e00\u6b21\u5faa\u73af\uff1a\u5206\u9694\u7b26 separator = null\uff0ccontent = \"host\"\u3002\u6b64\u65f6\u521b\u5efa MatchPair \u5bf9\u8c61\uff0c\u5e76\u5b58\u5165\u5230 condition \u4e2d\uff0ccondition = {\"host\": MatchPair@123} \u7b2c\u4e8c\u6b21\u5faa\u73af\uff1a\u5206\u9694\u7b26 separator = \"=\"\uff0ccontent = \"2.2.2.2\"\uff0cpair = MatchPair@123\u3002\u6b64\u65f6\u5c06 2.2.2.2 \u653e\u5165\u5230 MatchPair@123 \u5bf9\u8c61\u7684 matches \u96c6\u5408\u4e2d\u3002 \u7b2c\u4e09\u6b21\u5faa\u73af\uff1a\u5206\u9694\u7b26 separator = \" \"\uff0ccontent = \"host\"\u3002host \u5df2\u5b58\u5728\u4e8e condition \u4e2d\uff0c\u56e0\u6b64 pair = MatchPair@123\u3002 \u7b2c\u56db\u6b21\u5faa\u73af\uff1a\u5206\u9694\u7b26 separator = \"!=\"\uff0ccontent = \"1.1.1.1\"\uff0cpair = MatchPair@123\u3002\u6b64\u65f6\u5c06 1.1.1.1 \u653e\u5165\u5230 MatchPair@123 \u5bf9\u8c61\u7684 mismatches \u96c6\u5408\u4e2d\u3002 \u7b2c\u4e94\u6b21\u5faa\u73af\uff1a\u5206\u9694\u7b26 separator = \" \"\uff0ccontent = \"method\"\u3002condition.get(\"method\") = null\uff0c\u56e0\u6b64\u65b0\u5efa\u4e00\u4e2a MatchPair \u5bf9\u8c61\uff0c\u5e76\u653e\u5165\u5230 condition \u4e2d\u3002\u6b64\u65f6 condition = {\"host\": MatchPair@123, \"method\": MatchPair@ 456} \u7b2c\u516d\u6b21\u5faa\u73af\uff1a\u5206\u9694\u7b26 separator = \"=\"\uff0ccontent = \"2.2.2.2\"\uff0cpair = MatchPair@456\u3002\u6b64\u65f6\u5c06 hello \u653e\u5165\u5230 MatchPair@456 \u5bf9\u8c61\u7684 matches \u96c6\u5408\u4e2d\u3002 \u5faa\u73af\u7ed3\u675f\uff0c\u6b64\u65f6 condition \u7684\u5185\u5bb9\u5982\u4e0b\uff1a { host : { matches : [ 2.2.2.2 ], mismatches : [ 1.1.1.1 ] }, method : { matches : [ hello ], mismatches : [] } } \u8def\u7531\u89c4\u5219\u7684\u89e3\u6790\u8fc7\u7a0b\u7a0d\u5fae\u6709\u70b9\u590d\u6742\uff0c\u5927\u5bb6\u53ef\u901a\u8fc7 ConditionRouter \u7684\u6d4b\u8bd5\u7c7b\u5bf9\u8be5\u903b\u8f91\u8fdb\u884c\u6d4b\u8bd5\u3002\u5e76\u4e14\u627e\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5bf9\u7167\u4e0a\u9762\u7684\u4ee3\u7801\u8d70\u4e00\u904d\uff0c\u52a0\u6df1\u7406\u89e3\u3002","title":"2.1 \u8868\u8fbe\u5f0f\u89e3\u6790"},{"location":"source_code_guide/router/#22","text":"\u670d\u52a1\u8def\u7531\u7684\u5165\u53e3\u65b9\u6cd5\u662f ConditionRouter \u7684 route \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u5b9a\u4e49\u5728 Router \u63a5\u53e3\u4e2d\u3002\u5b9e\u73b0\u4ee3\u7801\u5982\u4e0b\uff1a public T List Invoker T route(List Invoker T invokers, URL url, Invocation invocation) throws RpcException { if (invokers == null || invokers.isEmpty()) { return invokers; } try { // \u5148\u5bf9\u670d\u52a1\u6d88\u8d39\u8005\u6761\u4ef6\u8fdb\u884c\u5339\u914d\uff0c\u5982\u679c\u5339\u914d\u5931\u8d25\uff0c\u8868\u660e\u670d\u52a1\u6d88\u8d39\u8005 url \u4e0d\u7b26\u5408\u5339\u914d\u89c4\u5219\uff0c // \u65e0\u9700\u8fdb\u884c\u540e\u7eed\u5339\u914d\uff0c\u76f4\u63a5\u8fd4\u56de Invoker \u5217\u8868\u5373\u53ef\u3002\u6bd4\u5982\u4e0b\u9762\u7684\u89c4\u5219\uff1a // host = 10.20.153.10 = host = 10.0.0.10 // \u8fd9\u6761\u8def\u7531\u89c4\u5219\u5e0c\u671b IP \u4e3a 10.20.153.10 \u7684\u670d\u52a1\u6d88\u8d39\u8005\u8c03\u7528 IP \u4e3a 10.0.0.10 \u673a\u5668\u4e0a\u7684\u670d\u52a1\u3002 // \u5f53\u6d88\u8d39\u8005 ip \u4e3a 10.20.153.11 \u65f6\uff0cmatchWhen \u8fd4\u56de false\uff0c\u8868\u660e\u5f53\u524d\u8fd9\u6761\u8def\u7531\u89c4\u5219\u4e0d\u9002\u7528\u4e8e // \u5f53\u524d\u7684\u670d\u52a1\u6d88\u8d39\u8005\uff0c\u6b64\u65f6\u65e0\u9700\u518d\u8fdb\u884c\u540e\u7eed\u5339\u914d\uff0c\u76f4\u63a5\u8fd4\u56de\u5373\u53ef\u3002 if (!matchWhen(url, invocation)) { return invokers; } List Invoker T result = new ArrayList Invoker T (); // \u670d\u52a1\u63d0\u4f9b\u8005\u5339\u914d\u6761\u4ef6\u672a\u914d\u7f6e\uff0c\u8868\u660e\u5bf9\u6307\u5b9a\u7684\u670d\u52a1\u6d88\u8d39\u8005\u7981\u7528\u670d\u52a1\uff0c\u4e5f\u5c31\u662f\u670d\u52a1\u6d88\u8d39\u8005\u5728\u9ed1\u540d\u5355\u4e2d if (thenCondition == null) { logger.warn( The current consumer in the service blacklist... ); return result; } // \u8fd9\u91cc\u53ef\u4ee5\u7b80\u5355\u7684\u628a Invoker \u7406\u89e3\u4e3a\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u73b0\u5728\u4f7f\u7528\u670d\u52a1\u63d0\u4f9b\u8005\u5339\u914d\u89c4\u5219\u5bf9 // Invoker \u5217\u8868\u8fdb\u884c\u5339\u914d for (Invoker T invoker : invokers) { // \u82e5\u5339\u914d\u6210\u529f\uff0c\u8868\u660e\u5f53\u524d Invoker \u7b26\u5408\u670d\u52a1\u63d0\u4f9b\u8005\u5339\u914d\u89c4\u5219\u3002 // \u6b64\u65f6\u5c06 Invoker \u6dfb\u52a0\u5230 result \u5217\u8868\u4e2d if (matchThen(invoker.getUrl(), url)) { result.add(invoker); } } // \u8fd4\u56de\u5339\u914d\u7ed3\u679c\uff0c\u5982\u679c result \u4e3a\u7a7a\u5217\u8868\uff0c\u4e14 force = true\uff0c\u8868\u793a\u5f3a\u5236\u8fd4\u56de\u7a7a\u5217\u8868\uff0c // \u5426\u5219\u8def\u7531\u7ed3\u679c\u4e3a\u7a7a\u7684\u8def\u7531\u89c4\u5219\u5c06\u81ea\u52a8\u5931\u6548 if (!result.isEmpty()) { return result; } else if (force) { logger.warn( The route result is empty and force execute ... ); return result; } } catch (Throwable t) { logger.error( Failed to execute condition router rule: ... ); } // \u539f\u6837\u8fd4\u56de\uff0c\u6b64\u65f6 force = false\uff0c\u8868\u793a\u8be5\u6761\u8def\u7531\u89c4\u5219\u5931\u6548 return invokers; } route \u65b9\u6cd5\u5148\u662f\u8c03\u7528 matchWhen \u5bf9\u670d\u52a1\u6d88\u8d39\u8005\u8fdb\u884c\u5339\u914d\uff0c\u5982\u679c\u5339\u914d\u5931\u8d25\uff0c\u76f4\u63a5\u8fd4\u56de Invoker \u5217\u8868\u3002\u5982\u679c\u5339\u914d\u6210\u529f\uff0c\u518d\u5bf9\u670d\u52a1\u63d0\u4f9b\u8005\u8fdb\u884c\u5339\u914d\uff0c\u5339\u914d\u903b\u8f91\u5c01\u88c5\u5728\u4e86 matchThen \u65b9\u6cd5\u4e2d\u3002\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u7684\u903b\u8f91\uff1a boolean matchWhen(URL url, Invocation invocation) { // \u670d\u52a1\u6d88\u8d39\u8005\u6761\u4ef6\u4e3a null \u6216\u7a7a\uff0c\u5747\u8fd4\u56de true\uff0c\u6bd4\u5982\uff1a // = host != 172.22.3.91 // \u8868\u793a\u6240\u6709\u7684\u670d\u52a1\u6d88\u8d39\u8005\u90fd\u4e0d\u5f97\u8c03\u7528 IP \u4e3a 172.22.3.91 \u7684\u673a\u5668\u4e0a\u7684\u670d\u52a1 return whenCondition == null || whenCondition.isEmpty() || matchCondition(whenCondition, url, null, invocation); // \u8fdb\u884c\u6761\u4ef6\u5339\u914d } private boolean matchThen(URL url, URL param) { // \u670d\u52a1\u63d0\u4f9b\u8005\u6761\u4ef6\u4e3a null \u6216\u7a7a\uff0c\u8868\u793a\u7981\u7528\u670d\u52a1 return !(thenCondition == null || thenCondition.isEmpty()) matchCondition(thenCondition, url, param, null); // \u8fdb\u884c\u6761\u4ef6\u5339\u914d } \u8fd9\u4e24\u4e2a\u65b9\u6cd5\u957f\u7684\u6709\u70b9\u50cf\uff0c\u4e0d\u8fc7\u903b\u8f91\u4e0a\u8fd8\u662f\u6709\u5dee\u522b\u7684\uff0c\u5927\u5bb6\u6ce8\u610f\u770b\u3002\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u5747\u8c03\u7528\u4e86 matchCondition \u65b9\u6cd5\uff0c\u4f46\u5b83\u4eec\u6240\u4f20\u5165\u7684\u53c2\u6570\u662f\u4e0d\u540c\u7684\u3002\u8fd9\u4e2a\u9700\u8981\u7279\u522b\u6ce8\u610f\u4e00\u4e0b\uff0c\u4e0d\u7136\u540e\u9762\u7684\u903b\u8f91\u4e0d\u597d\u5f04\u61c2\u3002\u4e0b\u9762\u6211\u4eec\u5bf9\u8fd9\u51e0\u4e2a\u53c2\u6570\u8fdb\u884c\u6eaf\u6e90\u3002matchWhen \u65b9\u6cd5\u5411 matchCondition \u65b9\u6cd5\u4f20\u5165\u7684\u53c2\u6570\u4e3a [whenCondition, url, null, invocation]\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570 whenCondition \u4e3a\u670d\u52a1\u6d88\u8d39\u8005\u5339\u914d\u6761\u4ef6\uff0c\u8fd9\u4e2a\u524d\u9762\u5206\u6790\u8fc7\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570 url \u6e90\u81ea route \u65b9\u6cd5\u7684\u53c2\u6570\u5217\u8868\uff0c\u8be5\u53c2\u6570\u7531\u5916\u90e8\u7c7b\u8c03\u7528 route \u65b9\u6cd5\u65f6\u4f20\u5165\u3002\u6bd4\u5982\uff1a private List Invoker T route(List Invoker T invokers, String method) { Invocation invocation = new RpcInvocation(method, new Class ? [0], new Object[0]); List Router routers = getRouters(); if (routers != null) { for (Router router : routers) { if (router.getUrl() != null) { // \u6ce8\u610f\u7b2c\u4e8c\u4e2a\u53c2\u6570 invokers = router.route(invokers, getConsumerUrl(), invocation); } } } return invokers; } \u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\u6765\u81ea RegistryDirectory\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8868\u793a\u7684\u662f\u670d\u52a1\u6d88\u8d39\u8005 url\u3002matchCondition \u7684 invocation \u53c2\u6570\u4e5f\u662f\u4ece\u8fd9\u91cc\u4f20\u5165\u7684\u3002 \u63a5\u4e0b\u6765\u518d\u6765\u770b\u770b matchThen \u5411 matchCondition \u65b9\u6cd5\u4f20\u5165\u7684\u53c2\u6570 [thenCondition, url, param, null]\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e0d\u7528\u89e3\u91ca\u4e86\u3002\u7b2c\u4e8c\u4e2a\u548c\u7b2c\u4e09\u4e2a\u53c2\u6570\u6765\u81ea matchThen \u65b9\u6cd5\u7684\u53c2\u6570\u5217\u8868\uff0c\u8fd9\u4e24\u4e2a\u53c2\u6570\u5206\u522b\u4e3a\u670d\u52a1\u63d0\u4f9b\u8005 url \u548c\u670d\u52a1\u6d88\u8d39\u8005 url\u3002\u641e\u6e05\u695a\u8fd9\u4e9b\u53c2\u6570\u6765\u6e90\u540e\uff0c\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u5206\u6790 matchCondition \u65b9\u6cd5\u4e86\u3002 private boolean matchCondition(Map String, MatchPair condition, URL url, URL param, Invocation invocation) { // \u5c06\u670d\u52a1\u63d0\u4f9b\u8005\u6216\u6d88\u8d39\u8005 url \u8f6c\u6210 Map Map String, String sample = url.toMap(); boolean result = false; // \u904d\u5386 condition \u5217\u8868 for (Map.Entry String, MatchPair matchPair : condition.entrySet()) { // \u83b7\u53d6\u5339\u914d\u9879\u540d\u79f0\uff0c\u6bd4\u5982 host\u3001method \u7b49 String key = matchPair.getKey(); String sampleValue; // \u5982\u679c invocation \u4e0d\u4e3a\u7a7a\uff0c\u4e14 key \u4e3a mehtod(s)\uff0c\u8868\u793a\u8fdb\u884c\u65b9\u6cd5\u5339\u914d if (invocation != null (Constants.METHOD_KEY.equals(key) || Constants.METHODS_KEY.equals(key))) { // \u4ece invocation \u83b7\u53d6\u88ab\u8c03\u7528\u65b9\u6cd5\u7684\u540d\u79f0 sampleValue = invocation.getMethodName(); } else { // \u4ece\u670d\u52a1\u63d0\u4f9b\u8005\u6216\u6d88\u8d39\u8005 url \u4e2d\u83b7\u53d6\u6307\u5b9a\u5b57\u6bb5\u503c\uff0c\u6bd4\u5982 host\u3001application \u7b49 sampleValue = sample.get(key); if (sampleValue == null) { // \u5c1d\u8bd5\u901a\u8fc7 default.xxx \u83b7\u53d6\u76f8\u5e94\u7684\u503c sampleValue = sample.get(Constants.DEFAULT_KEY_PREFIX + key); } } // --------------------\u2728 \u5206\u5272\u7ebf \u2728-------------------- // if (sampleValue != null) { // \u8c03\u7528 MatchPair \u7684 isMatch \u65b9\u6cd5\u8fdb\u884c\u5339\u914d if (!matchPair.getValue().isMatch(sampleValue, param)) { // \u53ea\u8981\u6709\u4e00\u4e2a\u89c4\u5219\u5339\u914d\u5931\u8d25\uff0c\u7acb\u5373\u8fd4\u56de false \u7ed3\u675f\u65b9\u6cd5\u903b\u8f91 return false; } else { result = true; } } else { // sampleValue \u4e3a\u7a7a\uff0c\u8868\u660e\u670d\u52a1\u63d0\u4f9b\u8005\u6216\u6d88\u8d39\u8005 url \u4e2d\u4e0d\u5305\u542b\u76f8\u5173\u5b57\u6bb5\u3002\u6b64\u65f6\u5982\u679c // MatchPair \u7684 matches \u4e0d\u4e3a\u7a7a\uff0c\u8868\u793a\u5339\u914d\u5931\u8d25\uff0c\u8fd4\u56de false\u3002\u6bd4\u5982\u6211\u4eec\u6709\u8fd9\u6837 // \u4e00\u6761\u5339\u914d\u6761\u4ef6 loadbalance = random\uff0c\u5047\u8bbe url \u4e2d\u5e76\u4e0d\u5305\u542b loadbalance \u53c2\u6570\uff0c // \u6b64\u65f6 sampleValue = null\u3002\u65e2\u7136\u8def\u7531\u89c4\u5219\u91cc\u9650\u5236\u4e86 loadbalance \u5fc5\u987b\u4e3a random\uff0c // \u4f46 sampleValue = null\uff0c\u660e\u663e\u4e0d\u7b26\u5408\u89c4\u5219\uff0c\u56e0\u6b64\u8fd4\u56de false if (!matchPair.getValue().matches.isEmpty()) { return false; } else { result = true; } } } return result; } \u5982\u4e0a\uff0cmatchCondition \u65b9\u6cd5\u770b\u8d77\u6765\u6709\u70b9\u590d\u6742\uff0c\u8fd9\u91cc\u7b80\u5355\u8bf4\u660e\u4e00\u4e0b\u3002\u5206\u5272\u7ebf\u4ee5\u4e0a\u7684\u4ee3\u7801\u5b9e\u9645\u4e0a\u7528\u4e8e\u83b7\u53d6 sampleValue \u7684\u503c\uff0c\u5206\u5272\u7ebf\u4ee5\u4e0b\u624d\u662f\u8fdb\u884c\u6761\u4ef6\u5339\u914d\u3002\u6761\u4ef6\u5339\u914d\u8c03\u7528\u7684\u903b\u8f91\u5c01\u88c5\u5728 isMatch \u4e2d\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a private boolean isMatch(String value, URL param) { // \u60c5\u51b5\u4e00\uff1amatches \u975e\u7a7a\uff0cmismatches \u4e3a\u7a7a if (!matches.isEmpty() mismatches.isEmpty()) { // \u904d\u5386 matches \u96c6\u5408\uff0c\u68c0\u6d4b\u5165\u53c2 value \u662f\u5426\u80fd\u88ab matches \u96c6\u5408\u5143\u7d20\u5339\u914d\u5230\u3002 // \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c value = 10.20.153.11\uff0cmatches = [10.20.153.*], // \u6b64\u65f6 isMatchGlobPattern \u65b9\u6cd5\u8fd4\u56de true for (String match : matches) { if (UrlUtils.isMatchGlobPattern(match, value, param)) { return true; } } // \u5982\u679c\u6240\u6709\u5339\u914d\u9879\u90fd\u65e0\u6cd5\u5339\u914d\u5230\u5165\u53c2\uff0c\u5219\u8fd4\u56de false return false; } // \u60c5\u51b5\u4e8c\uff1amatches \u4e3a\u7a7a\uff0cmismatches \u975e\u7a7a if (!mismatches.isEmpty() matches.isEmpty()) { for (String mismatch : mismatches) { // \u53ea\u8981\u5165\u53c2\u88ab mismatches \u96c6\u5408\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\u5339\u914d\u5230\uff0c\u5c31\u8fd4\u56de false if (UrlUtils.isMatchGlobPattern(mismatch, value, param)) { return false; } } // mismatches \u96c6\u5408\u4e2d\u6240\u6709\u5143\u7d20\u90fd\u65e0\u6cd5\u5339\u914d\u5230\u5165\u53c2\uff0c\u6b64\u65f6\u8fd4\u56de true return true; } // \u60c5\u51b5\u4e09\uff1amatches \u975e\u7a7a\uff0cmismatches \u975e\u7a7a if (!matches.isEmpty() !mismatches.isEmpty()) { // matches \u548c mismatches \u5747\u4e3a\u975e\u7a7a\uff0c\u6b64\u65f6\u4f18\u5148\u4f7f\u7528 mismatches \u96c6\u5408\u5143\u7d20\u5bf9\u5165\u53c2\u8fdb\u884c\u5339\u914d\u3002 // \u53ea\u8981 mismatches \u96c6\u5408\u4e2d\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\u4e0e\u5165\u53c2\u5339\u914d\u6210\u529f\uff0c\u5c31\u7acb\u5373\u8fd4\u56de false\uff0c\u7ed3\u675f\u65b9\u6cd5\u903b\u8f91 for (String mismatch : mismatches) { if (UrlUtils.isMatchGlobPattern(mismatch, value, param)) { return false; } } // mismatches \u96c6\u5408\u5143\u7d20\u65e0\u6cd5\u5339\u914d\u5230\u5165\u53c2\uff0c\u6b64\u65f6\u518d\u4f7f\u7528 matches \u7ee7\u7eed\u5339\u914d for (String match : matches) { // \u53ea\u8981 matches \u96c6\u5408\u4e2d\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\u4e0e\u5165\u53c2\u5339\u914d\u6210\u529f\uff0c\u5c31\u7acb\u5373\u8fd4\u56de true if (UrlUtils.isMatchGlobPattern(match, value, param)) { return true; } } // \u5168\u90e8\u5931\u914d\uff0c\u5219\u8fd4\u56de false return false; } // \u60c5\u51b5\u56db\uff1amatches \u548c mismatches \u5747\u4e3a\u7a7a\uff0c\u6b64\u65f6\u8fd4\u56de false return false; } isMatch \u65b9\u6cd5\u903b\u8f91\u6bd4\u8f83\u6e05\u6670\uff0c\u7531\u4e09\u4e2a\u6761\u4ef6\u5206\u652f\u7ec4\u6210\uff0c\u7528\u4e8e\u5904\u7406\u56db\u79cd\u60c5\u51b5\u3002\u8fd9\u91cc\u5bf9\u56db\u79cd\u60c5\u51b5\u4e0b\u7684\u5339\u914d\u903b\u8f91\u8fdb\u884c\u7b80\u5355\u7684\u603b\u7ed3\uff0c\u5982\u4e0b\uff1a \u6761\u4ef6 \u8fc7\u7a0b \u60c5\u51b5\u4e00 matches \u975e\u7a7a\uff0cmismatches \u4e3a\u7a7a \u904d\u5386 matches \u96c6\u5408\u5143\u7d20\uff0c\u5e76\u4e0e\u5165\u53c2\u8fdb\u884c\u5339\u914d\u3002\u53ea\u8981\u6709\u4e00\u4e2a\u5143\u7d20\u6210\u529f\u5339\u914d\u5165\u53c2\uff0c\u5373\u53ef\u8fd4\u56de true\u3002\u82e5\u5168\u90e8\u5931\u914d\uff0c\u5219\u8fd4\u56de false\u3002 \u60c5\u51b5\u4e8c matches \u4e3a\u7a7a\uff0cmismatches \u975e\u7a7a \u904d\u5386 mismatches \u96c6\u5408\u5143\u7d20\uff0c\u5e76\u4e0e\u5165\u53c2\u8fdb\u884c\u5339\u914d\u3002\u53ea\u8981\u6709\u4e00\u4e2a\u5143\u7d20\u6210\u529f\u5339\u914d\u5165\u53c2\uff0c\u7acb\u5373 false\u3002\u82e5\u5168\u90e8\u5931\u914d\uff0c\u5219\u8fd4\u56de true\u3002 \u60c5\u51b5\u4e09 matches \u975e\u7a7a\uff0cmismatches \u975e\u7a7a \u4f18\u5148\u4f7f\u7528 mismatches \u96c6\u5408\u5143\u7d20\u5bf9\u5165\u53c2\u8fdb\u884c\u5339\u914d\uff0c\u53ea\u8981\u4efb\u4e00\u5143\u7d20\u4e0e\u5165\u53c2\u5339\u914d\u6210\u529f\uff0c\u5c31\u7acb\u5373\u8fd4\u56de false\uff0c\u7ed3\u675f\u65b9\u6cd5\u903b\u8f91\u3002\u5426\u5219\u518d\u4f7f\u7528 matches \u4e2d\u7684\u96c6\u5408\u5143\u7d20\u8fdb\u884c\u5339\u914d\uff0c\u53ea\u8981\u6709\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\u5339\u914d\u6210\u529f\uff0c\u5373\u53ef\u8fd4\u56de true\u3002\u82e5\u5168\u90e8\u5931\u914d\uff0c\u5219\u8fd4\u56de false \u60c5\u51b5\u56db matches \u4e3a\u7a7a\uff0cmismatches \u4e3a\u7a7a \u76f4\u63a5\u8fd4\u56de false isMatch \u65b9\u6cd5\u662f\u901a\u8fc7 UrlUtils \u7684 isMatchGlobPattern \u65b9\u6cd5\u8fdb\u884c\u5339\u914d\uff0c\u56e0\u6b64\u4e0b\u9762\u6211\u4eec\u518d\u6765\u770b\u770b isMatchGlobPattern \u65b9\u6cd5\u7684\u903b\u8f91\u3002 public static boolean isMatchGlobPattern(String pattern, String value, URL param) { if (param != null pattern.startsWith( $ )) { // \u5f15\u7528\u670d\u52a1\u6d88\u8d39\u8005\u53c2\u6570\uff0cparam \u53c2\u6570\u4e3a\u670d\u52a1\u6d88\u8d39\u8005 url pattern = param.getRawParameter(pattern.substring(1)); } // \u8c03\u7528\u91cd\u8f7d\u65b9\u6cd5\u7ee7\u7eed\u6bd4\u8f83 return isMatchGlobPattern(pattern, value); } public static boolean isMatchGlobPattern(String pattern, String value) { // \u5bf9 * \u901a\u914d\u7b26\u63d0\u4f9b\u652f\u6301 if ( * .equals(pattern)) // \u5339\u914d\u89c4\u5219\u4e3a\u901a\u914d\u7b26 *\uff0c\u76f4\u63a5\u8fd4\u56de true \u5373\u53ef return true; if ((pattern == null || pattern.length() == 0) (value == null || value.length() == 0)) // pattern \u548c value \u5747\u4e3a\u7a7a\uff0c\u6b64\u65f6\u53ef\u8ba4\u4e3a\u4e24\u8005\u76f8\u7b49\uff0c\u8fd4\u56de true return true; if ((pattern == null || pattern.length() == 0) || (value == null || value.length() == 0)) // pattern \u548c value \u5176\u4e2d\u6709\u4e00\u4e2a\u4e3a\u7a7a\uff0c\u8868\u660e\u4e24\u8005\u4e0d\u76f8\u7b49\uff0c\u8fd4\u56de false return false; // \u5b9a\u4f4d * \u901a\u914d\u7b26\u4f4d\u7f6e int i = pattern.lastIndexOf('*'); if (i == -1) { // \u5339\u914d\u89c4\u5219\u4e2d\u4e0d\u5305\u542b\u901a\u914d\u7b26\uff0c\u6b64\u65f6\u76f4\u63a5\u6bd4\u8f83 value \u548c pattern \u662f\u5426\u76f8\u7b49\u5373\u53ef\uff0c\u5e76\u8fd4\u56de\u6bd4\u8f83\u7ed3\u679c return value.equals(pattern); } // \u901a\u914d\u7b26 * \u5728\u5339\u914d\u89c4\u5219\u5c3e\u90e8\uff0c\u6bd4\u5982 10.0.21.* else if (i == pattern.length() - 1) { // \u68c0\u6d4b value \u662f\u5426\u4ee5\u201c\u4e0d\u542b\u901a\u914d\u7b26\u7684\u5339\u914d\u89c4\u5219\u201d\u5f00\u5934\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\u3002\u6bd4\u5982: // pattern = 10.0.21.*\uff0cvalue = 10.0.21.12\uff0c\u6b64\u65f6\u8fd4\u56de true return value.startsWith(pattern.substring(0, i)); } // \u901a\u914d\u7b26 * \u5728\u5339\u914d\u89c4\u5219\u5934\u90e8 else if (i == 0) { // \u68c0\u6d4b value \u662f\u5426\u4ee5\u201c\u4e0d\u542b\u901a\u914d\u7b26\u7684\u5339\u914d\u89c4\u5219\u201d\u7ed3\u5c3e\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c return value.endsWith(pattern.substring(i + 1)); } // \u901a\u914d\u7b26 * \u5728\u5339\u914d\u89c4\u5219\u4e2d\u95f4\u4f4d\u7f6e else { // \u901a\u8fc7\u901a\u914d\u7b26\u5c06 pattern \u5206\u6210\u4e24\u534a\uff0c\u5f97\u5230 prefix \u548c suffix String prefix = pattern.substring(0, i); String suffix = pattern.substring(i + 1); // \u68c0\u6d4b value \u662f\u5426\u4ee5 prefix \u5f00\u5934\uff0c\u4e14\u4ee5 suffix \u7ed3\u5c3e\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c return value.startsWith(prefix) value.endsWith(suffix); } } \u4ee5\u4e0a\u5c31\u662f isMatchGlobPattern \u4e24\u4e2a\u91cd\u8f7d\u65b9\u6cd5\u7684\u5168\u90e8\u903b\u8f91\uff0c\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u5206\u522b\u5bf9\u666e\u901a\u7684\u5339\u914d\u8fc7\u7a0b\uff0c\u4ee5\u53ca\u201d\u5f15\u7528\u6d88\u8d39\u8005\u53c2\u6570\u201c\u548c\u901a\u914d\u7b26\u5339\u914d\u7b49\u7279\u6027\u63d0\u4f9b\u4e86\u652f\u6301\u3002\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u7684\u903b\u8f91\u4e0d\u662f\u5f88\u590d\u6742\uff0c\u4e14\u4ee3\u7801\u4e2d\u4e5f\u8fdb\u884c\u4e86\u6bd4\u8f83\u8be6\u7ec6\u7684\u6ce8\u91ca\uff0c\u56e0\u6b64\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002","title":"2.2 \u670d\u52a1\u8def\u7531"},{"location":"source_code_guide/router/#3","text":"\u672c\u7bc7\u6587\u7ae0\u5bf9\u6761\u4ef6\u8def\u7531\u7684\u8868\u8fbe\u5f0f\u89e3\u6790\u548c\u670d\u52a1\u8def\u7531\u8fc7\u7a0b\u8fdb\u884c\u4e86\u8f83\u4e3a\u7ec6\u81f4\u7684\u5206\u6790\u3002\u603b\u7684\u6765\u8bf4\uff0c\u6761\u4ef6\u8def\u7531\u7684\u4ee3\u7801\u8fd8\u662f\u6709\u4e00\u4e9b\u590d\u6742\u7684\uff0c\u9700\u8981\u9759\u4e0b\u5fc3\u6765\u770b\u3002\u5728\u9605\u8bfb\u6761\u4ef6\u8def\u7531\u4ee3\u7801\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8981\u591a\u8c03\u8bd5\u3002\u4e00\u822c\u7684\u6846\u67b6\u90fd\u4f1a\u6709\u5355\u5143\u6d4b\u8bd5\uff0cDubbo \u4e5f\u4e0d\u4f8b\u5916\uff0c\u56e0\u6b64\u5927\u5bb6\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 ConditionRouterTest \u5bf9\u6761\u4ef6\u8def\u7531\u8fdb\u884c\u8c03\u8bd5\uff0c\u65e0\u9700\u91cd\u5934\u6784\u5efa\u6d4b\u8bd5\u7528\u4f8b\u3002","title":"3. \u603b\u7ed3"},{"location":"source_code_guide/service-invoking-process/","text":"title: \u670d\u52a1\u8c03\u7528\u8fc7\u7a0b keywords: Dubbo, Service description: \u672c\u6587\u4ecb\u7ecd\u4e86\u670d\u52a1\u8c03\u7528\u8fc7\u7a0b\b\u7684\u539f\u7406\u548c\u5b9e\u73b0\u7ec6\u8282 1. \u7b80\u4ecb \u5728\u524d\u9762\u7684\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5206\u6790\u4e86 Dubbo SPI\u3001\u670d\u52a1\u5bfc\u51fa\u4e0e\u5f15\u5165\u3001\u4ee5\u53ca\u96c6\u7fa4\u5bb9\u9519\u65b9\u9762\u7684\u4ee3\u7801\u3002\u7ecf\u8fc7\u524d\u6587\u7684\u94fa\u57ab\uff0c\u672c\u7bc7\u6587\u7ae0\u6211\u4eec\u7ec8\u4e8e\u53ef\u4ee5\u5206\u6790\u670d\u52a1\u8c03\u7528\u8fc7\u7a0b\u4e86\u3002Dubbo \u670d\u52a1\u8c03\u7528\u8fc7\u7a0b\u6bd4\u8f83\u590d\u6742\uff0c\u5305\u542b\u4f17\u591a\u6b65\u9aa4\uff0c\u6bd4\u5982\u53d1\u9001\u8bf7\u6c42\u3001\u7f16\u89e3\u7801\u3001\u670d\u52a1\u964d\u7ea7\u3001\u8fc7\u6ee4\u5668\u94fe\u5904\u7406\u3001\u5e8f\u5217\u5316\u3001\u7ebf\u7a0b\u6d3e\u53d1\u4ee5\u53ca\u54cd\u5e94\u8bf7\u6c42\u7b49\u6b65\u9aa4\u3002\u9650\u4e8e\u7bc7\u5e45\u539f\u56e0\uff0c\u672c\u7bc7\u6587\u7ae0\u65e0\u6cd5\u5bf9\u6240\u6709\u7684\u6b65\u9aa4\u4e00\u4e00\u8fdb\u884c\u5206\u6790\u3002\u672c\u7bc7\u6587\u7ae0\u5c06\u4f1a\u91cd\u70b9\u5206\u6790\u8bf7\u6c42\u7684\u53d1\u9001\u4e0e\u63a5\u6536\u3001\u7f16\u89e3\u7801\u3001\u7ebf\u7a0b\u6d3e\u53d1\u4ee5\u53ca\u54cd\u5e94\u7684\u53d1\u9001\u4e0e\u63a5\u6536\u7b49\u8fc7\u7a0b\uff0c\u81f3\u4e8e\u670d\u52a1\u964d\u7ea7\u3001\u8fc7\u6ee4\u5668\u94fe\u548c\u5e8f\u5217\u5316\u5927\u5bb6\u81ea\u884c\u8fdb\u884c\u5206\u6790\uff0c\u4e5f\u53ef\u4ee5\u5c06\u5176\u5f53\u6210\u4e00\u4e2a\u9ed1\u76d2\uff0c\u6682\u65f6\u5ffd\u7565\u4e5f\u6ca1\u5173\u7cfb\u3002\u4ecb\u7ecd\u5b8c\u672c\u7bc7\u6587\u7ae0\u8981\u5206\u6790\u7684\u5185\u5bb9\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u8fdb\u5165\u6b63\u9898\u5427\u3002 2. \u6e90\u7801\u5206\u6790 \u5728\u8fdb\u884c\u6e90\u7801\u5206\u6790\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u901a\u8fc7\u4e00\u5f20\u56fe\u4e86\u89e3 Dubbo \u670d\u52a1\u8c03\u7528\u8fc7\u7a0b\u3002 \u9996\u5148\u670d\u52a1\u6d88\u8d39\u8005\u901a\u8fc7\u4ee3\u7406\u5bf9\u8c61 Proxy \u53d1\u8d77\u8fdc\u7a0b\u8c03\u7528\uff0c\u63a5\u7740\u901a\u8fc7\u7f51\u7edc\u5ba2\u6237\u7aef Client \u5c06\u7f16\u7801\u540e\u7684\u8bf7\u6c42\u53d1\u9001\u7ed9\u670d\u52a1\u63d0\u4f9b\u65b9\u7684\u7f51\u7edc\u5c42\u4e0a\uff0c\u4e5f\u5c31\u662f Server\u3002Server \u5728\u6536\u5230\u8bf7\u6c42\u540e\uff0c\u9996\u5148\u8981\u505a\u7684\u4e8b\u60c5\u662f\u5bf9\u6570\u636e\u5305\u8fdb\u884c\u89e3\u7801\u3002\u7136\u540e\u5c06\u89e3\u7801\u540e\u7684\u8bf7\u6c42\u53d1\u9001\u81f3\u5206\u53d1\u5668 Dispatcher\uff0c\u518d\u7531\u5206\u53d1\u5668\u5c06\u8bf7\u6c42\u6d3e\u53d1\u5230\u6307\u5b9a\u7684\u7ebf\u7a0b\u6c60\u4e0a\uff0c\u6700\u540e\u7531\u7ebf\u7a0b\u6c60\u8c03\u7528\u5177\u4f53\u7684\u670d\u52a1\u3002\u8fd9\u5c31\u662f\u4e00\u4e2a\u8fdc\u7a0b\u8c03\u7528\u8bf7\u6c42\u7684\u53d1\u9001\u4e0e\u63a5\u6536\u8fc7\u7a0b\u3002\u81f3\u4e8e\u54cd\u5e94\u7684\u53d1\u9001\u4e0e\u63a5\u6536\u8fc7\u7a0b\uff0c\u8fd9\u5f20\u56fe\u4e2d\u6ca1\u6709\u8868\u73b0\u51fa\u6765\u3002\u5bf9\u4e8e\u8fd9\u4e24\u4e2a\u8fc7\u7a0b\uff0c\u6211\u4eec\u4e5f\u4f1a\u8fdb\u884c\u8be6\u7ec6\u5206\u6790\u3002 2.1 \u670d\u52a1\u8c03\u7528\u65b9\u5f0f Dubbo \u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u4e24\u79cd\u8c03\u7528\u65b9\u5f0f\uff0c\u5176\u4e2d\u5f02\u6b65\u8c03\u7528\u8fd8\u53ef\u7ec6\u5206\u4e3a\u201c\u6709\u8fd4\u56de\u503c\u201d\u7684\u5f02\u6b65\u8c03\u7528\u548c\u201c\u65e0\u8fd4\u56de\u503c\u201d\u7684\u5f02\u6b65\u8c03\u7528\u3002\u6240\u8c13\u201c\u65e0\u8fd4\u56de\u503c\u201d\u5f02\u6b65\u8c03\u7528\u662f\u6307\u670d\u52a1\u6d88\u8d39\u65b9\u53ea\u7ba1\u8c03\u7528\uff0c\u4f46\u4e0d\u5173\u5fc3\u8c03\u7528\u7ed3\u679c\uff0c\u6b64\u65f6 Dubbo \u4f1a\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a\u7a7a\u7684 RpcResult\u3002\u82e5\u8981\u4f7f\u7528\u5f02\u6b65\u7279\u6027\uff0c\u9700\u8981\u670d\u52a1\u6d88\u8d39\u65b9\u624b\u52a8\u8fdb\u884c\u914d\u7f6e\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cDubbo \u4f7f\u7528\u540c\u6b65\u8c03\u7528\u65b9\u5f0f\u3002 \u672c\u8282\u4ee5\u53ca\u5176\u4ed6\u7ae0\u8282\u5c06\u4f1a\u4f7f\u7528 Dubbo \u5b98\u65b9\u63d0\u4f9b\u7684 Demo \u5206\u6790\u6574\u4e2a\u8c03\u7528\u8fc7\u7a0b\uff0c\u4e0b\u9762\u6211\u4eec\u4ece DemoService \u63a5\u53e3\u7684\u4ee3\u7406\u7c7b\u5f00\u59cb\u8fdb\u884c\u5206\u6790\u3002Dubbo \u9ed8\u8ba4\u4f7f\u7528 Javassist \u6846\u67b6\u4e3a\u670d\u52a1\u63a5\u53e3\u751f\u6210\u52a8\u6001\u4ee3\u7406\u7c7b\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5148\u5c06\u4ee3\u7406\u7c7b\u8fdb\u884c\u53cd\u7f16\u8bd1\u624d\u80fd\u770b\u5230\u6e90\u7801\u3002\u8fd9\u91cc\u4f7f\u7528\u963f\u91cc\u5f00\u6e90 Java \u5e94\u7528\u8bca\u65ad\u5de5\u5177 Arthas \u53cd\u7f16\u8bd1\u4ee3\u7406\u7c7b\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a /** * Arthas \u53cd\u7f16\u8bd1\u6b65\u9aa4\uff1a * 1. \u542f\u52a8 Arthas * java -jar arthas-boot.jar * * 2. \u8f93\u5165\u7f16\u53f7\u9009\u62e9\u8fdb\u7a0b * Arthas \u542f\u52a8\u540e\uff0c\u4f1a\u6253\u5370 Java \u5e94\u7528\u8fdb\u7a0b\u5217\u8868\uff0c\u5982\u4e0b\uff1a * [1]: 11232 org.jetbrains.jps.cmdline.Launcher * [2]: 22370 org.jetbrains.jps.cmdline.Launcher * [3]: 22371 com.alibaba.dubbo.demo.consumer.Consumer * [4]: 22362 com.alibaba.dubbo.demo.provider.Provider * [5]: 2074 org.apache.zookeeper.server.quorum.QuorumPeerMain * \u8fd9\u91cc\u8f93\u5165\u7f16\u53f7 3\uff0c\u8ba9 Arthas \u5173\u8054\u5230\u542f\u52a8\u7c7b\u4e3a com.....Consumer \u7684 Java \u8fdb\u7a0b\u4e0a * * 3. \u7531\u4e8e Demo \u9879\u76ee\u4e2d\u53ea\u6709\u4e00\u4e2a\u670d\u52a1\u63a5\u53e3\uff0c\u56e0\u6b64\u6b64\u63a5\u53e3\u7684\u4ee3\u7406\u7c7b\u7c7b\u540d\u4e3a proxy0\uff0c\u6b64\u65f6\u4f7f\u7528 sc \u547d\u4ee4\u641c\u7d22\u8fd9\u4e2a\u7c7b\u540d\u3002 * $ sc *.proxy0 * com.alibaba.dubbo.common.bytecode.proxy0 * * 4. \u4f7f\u7528 jad \u547d\u4ee4\u53cd\u7f16\u8bd1 com.alibaba.dubbo.common.bytecode.proxy0 * $ jad com.alibaba.dubbo.common.bytecode.proxy0 * * \u66f4\u591a\u4f7f\u7528\u65b9\u6cd5\u8bf7\u53c2\u8003 Arthas \u5b98\u65b9\u6587\u6863\uff1a * https://alibaba.github.io/arthas/quick-start.html */ public class proxy0 implements ClassGenerator.DC, EchoService, DemoService { // \u65b9\u6cd5\u6570\u7ec4 public static Method[] methods; private InvocationHandler handler; public proxy0(InvocationHandler invocationHandler) { this.handler = invocationHandler; } public proxy0() { } public String sayHello(String string) { // \u5c06\u53c2\u6570\u5b58\u50a8\u5230 Object \u6570\u7ec4\u4e2d Object[] arrobject = new Object[]{string}; // \u8c03\u7528 InvocationHandler \u5b9e\u73b0\u7c7b\u7684 invoke \u65b9\u6cd5\u5f97\u5230\u8c03\u7528\u7ed3\u679c Object object = this.handler.invoke(this, methods[0], arrobject); // \u8fd4\u56de\u8c03\u7528\u7ed3\u679c return (String)object; } /** \u56de\u58f0\u6d4b\u8bd5\u65b9\u6cd5 */ public Object $echo(Object object) { Object[] arrobject = new Object[]{object}; Object object2 = this.handler.invoke(this, methods[1], arrobject); return object2; } } \u5982\u4e0a\uff0c\u4ee3\u7406\u7c7b\u7684\u903b\u8f91\u6bd4\u8f83\u7b80\u5355\u3002\u9996\u5148\u5c06\u8fd0\u884c\u65f6\u53c2\u6570\u5b58\u50a8\u5230\u6570\u7ec4\u4e2d\uff0c\u7136\u540e\u8c03\u7528 InvocationHandler \u63a5\u53e3\u5b9e\u73b0\u7c7b\u7684 invoke \u65b9\u6cd5\uff0c\u5f97\u5230\u8c03\u7528\u7ed3\u679c\uff0c\u6700\u540e\u5c06\u7ed3\u679c\u8f6c\u578b\u5e76\u8fd4\u56de\u7ed9\u8c03\u7528\u65b9\u3002\u5173\u4e8e\u4ee3\u7406\u7c7b\u7684\u903b\u8f91\u5c31\u8bf4\u8fd9\u4e48\u591a\uff0c\u7ee7\u7eed\u5411\u4e0b\u5206\u6790\u3002 public class InvokerInvocationHandler implements InvocationHandler { private final Invoker ? invoker; public InvokerInvocationHandler(Invoker ? handler) { this.invoker = handler; } @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { String methodName = method.getName(); Class ? [] parameterTypes = method.getParameterTypes(); // \u62e6\u622a\u5b9a\u4e49\u5728 Object \u7c7b\u4e2d\u7684\u65b9\u6cd5\uff08\u672a\u88ab\u5b50\u7c7b\u91cd\u5199\uff09\uff0c\u6bd4\u5982 wait/notify if (method.getDeclaringClass() == Object.class) { return method.invoke(invoker, args); } // \u5982\u679c toString\u3001hashCode \u548c equals \u7b49\u65b9\u6cd5\u88ab\u5b50\u7c7b\u91cd\u5199\u4e86\uff0c\u8fd9\u91cc\u4e5f\u76f4\u63a5\u8c03\u7528 if ( toString .equals(methodName) parameterTypes.length == 0) { return invoker.toString(); } if ( hashCode .equals(methodName) parameterTypes.length == 0) { return invoker.hashCode(); } if ( equals .equals(methodName) parameterTypes.length == 1) { return invoker.equals(args[0]); } // \u5c06 method \u548c args \u5c01\u88c5\u5230 RpcInvocation \u4e2d\uff0c\u5e76\u6267\u884c\u540e\u7eed\u7684\u8c03\u7528 return invoker.invoke(new RpcInvocation(method, args)).recreate(); } } InvokerInvocationHandler \u4e2d\u7684 invoker \u6210\u5458\u53d8\u91cf\u7c7b\u578b\u4e3a MockClusterInvoker\uff0cMockClusterInvoker \u5185\u90e8\u5c01\u88c5\u4e86\u670d\u52a1\u964d\u7ea7\u903b\u8f91\u3002\u4e0b\u9762\u7b80\u5355\u770b\u4e00\u4e0b\uff1a public class MockClusterInvoker T implements Invoker T { private final Invoker T invoker; public Result invoke(Invocation invocation) throws RpcException { Result result = null; // \u83b7\u53d6 mock \u914d\u7f6e\u503c String value = directory.getUrl().getMethodParameter(invocation.getMethodName(), Constants.MOCK_KEY, Boolean.FALSE.toString()).trim(); if (value.length() == 0 || value.equalsIgnoreCase( false )) { // \u65e0 mock \u903b\u8f91\uff0c\u76f4\u63a5\u8c03\u7528\u5176\u4ed6 Invoker \u5bf9\u8c61\u7684 invoke \u65b9\u6cd5\uff0c // \u6bd4\u5982 FailoverClusterInvoker result = this.invoker.invoke(invocation); } else if (value.startsWith( force )) { // force:xxx \u76f4\u63a5\u6267\u884c mock \u903b\u8f91\uff0c\u4e0d\u53d1\u8d77\u8fdc\u7a0b\u8c03\u7528 result = doMockInvoke(invocation, null); } else { // fail:xxx \u8868\u793a\u6d88\u8d39\u65b9\u5bf9\u8c03\u7528\u670d\u52a1\u5931\u8d25\u540e\uff0c\u518d\u6267\u884c mock \u903b\u8f91\uff0c\u4e0d\u629b\u51fa\u5f02\u5e38 try { // \u8c03\u7528\u5176\u4ed6 Invoker \u5bf9\u8c61\u7684 invoke \u65b9\u6cd5 result = this.invoker.invoke(invocation); } catch (RpcException e) { if (e.isBiz()) { throw e; } else { // \u8c03\u7528\u5931\u8d25\uff0c\u6267\u884c mock \u903b\u8f91 result = doMockInvoke(invocation, e); } } } return result; } // \u7701\u7565\u5176\u4ed6\u65b9\u6cd5 } \u670d\u52a1\u964d\u7ea7\u4e0d\u662f\u672c\u6587\u91cd\u70b9\uff0c\u56e0\u6b64\u8fd9\u91cc\u5c31\u4e0d\u5206\u6790 doMockInvoke \u65b9\u6cd5\u4e86\u3002\u8003\u8651\u5230\u524d\u6587\u5df2\u7ecf\u8be6\u7ec6\u5206\u6790\u8fc7 FailoverClusterInvoker\uff0c\u56e0\u6b64\u672c\u8282\u7565\u8fc7 FailoverClusterInvoker\uff0c\u76f4\u63a5\u5206\u6790 DubboInvoker\u3002 public abstract class AbstractInvoker T implements Invoker T { public Result invoke(Invocation inv) throws RpcException { if (destroyed.get()) { throw new RpcException( Rpc invoker for service ... ); } RpcInvocation invocation = (RpcInvocation) inv; // \u8bbe\u7f6e Invoker invocation.setInvoker(this); if (attachment != null attachment.size() 0) { // \u8bbe\u7f6e attachment invocation.addAttachmentsIfAbsent(attachment); } Map String, String contextAttachments = RpcContext.getContext().getAttachments(); if (contextAttachments != null contextAttachments.size() != 0) { // \u6dfb\u52a0 contextAttachments \u5230 RpcInvocation#attachment \u53d8\u91cf\u4e2d invocation.addAttachments(contextAttachments); } if (getUrl().getMethodParameter(invocation.getMethodName(), Constants.ASYNC_KEY, false)) { // \u8bbe\u7f6e\u5f02\u6b65\u4fe1\u606f\u5230 RpcInvocation#attachment \u4e2d invocation.setAttachment(Constants.ASYNC_KEY, Boolean.TRUE.toString()); } RpcUtils.attachInvocationIdIfAsync(getUrl(), invocation); try { // \u62bd\u8c61\u65b9\u6cd5\uff0c\u7531\u5b50\u7c7b\u5b9e\u73b0 return doInvoke(invocation); } catch (InvocationTargetException e) { // ... } catch (RpcException e) { // ... } catch (Throwable e) { return new RpcResult(e); } } protected abstract Result doInvoke(Invocation invocation) throws Throwable; // \u7701\u7565\u5176\u4ed6\u65b9\u6cd5 } \u4e0a\u9762\u7684\u4ee3\u7801\u6765\u81ea AbstractInvoker \u7c7b\uff0c\u5176\u4e2d\u5927\u90e8\u5206\u4ee3\u7801\u7528\u4e8e\u6dfb\u52a0\u4fe1\u606f\u5230 RpcInvocation#attachment \u53d8\u91cf\u4e2d\uff0c\u6dfb\u52a0\u5b8c\u6bd5\u540e\uff0c\u8c03\u7528 doInvoke \u6267\u884c\u540e\u7eed\u7684\u8c03\u7528\u3002doInvoke \u662f\u4e00\u4e2a\u62bd\u8c61\u65b9\u6cd5\uff0c\u9700\u8981\u7531\u5b50\u7c7b\u5b9e\u73b0\uff0c\u4e0b\u9762\u5230 DubboInvoker \u4e2d\u770b\u4e00\u4e0b\u3002 public class DubboInvoker T extends AbstractInvoker T { private final ExchangeClient[] clients; protected Result doInvoke(final Invocation invocation) throws Throwable { RpcInvocation inv = (RpcInvocation) invocation; final String methodName = RpcUtils.getMethodName(invocation); // \u8bbe\u7f6e path \u548c version \u5230 attachment \u4e2d inv.setAttachment(Constants.PATH_KEY, getUrl().getPath()); inv.setAttachment(Constants.VERSION_KEY, version); ExchangeClient currentClient; if (clients.length == 1) { // \u4ece clients \u6570\u7ec4\u4e2d\u83b7\u53d6 ExchangeClient currentClient = clients[0]; } else { currentClient = clients[index.getAndIncrement() % clients.length]; } try { // \u83b7\u53d6\u5f02\u6b65\u914d\u7f6e boolean isAsync = RpcUtils.isAsync(getUrl(), invocation); // isOneway \u4e3a true\uff0c\u8868\u793a\u201c\u5355\u5411\u201d\u901a\u4fe1 boolean isOneway = RpcUtils.isOneway(getUrl(), invocation); int timeout = getUrl().getMethodParameter(methodName, Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT); // \u5f02\u6b65\u65e0\u8fd4\u56de\u503c if (isOneway) { boolean isSent = getUrl().getMethodParameter(methodName, Constants.SENT_KEY, false); // \u53d1\u9001\u8bf7\u6c42 currentClient.send(inv, isSent); // \u8bbe\u7f6e\u4e0a\u4e0b\u6587\u4e2d\u7684 future \u5b57\u6bb5\u4e3a null RpcContext.getContext().setFuture(null); // \u8fd4\u56de\u4e00\u4e2a\u7a7a\u7684 RpcResult return new RpcResult(); } // \u5f02\u6b65\u6709\u8fd4\u56de\u503c else if (isAsync) { // \u53d1\u9001\u8bf7\u6c42\uff0c\u5e76\u5f97\u5230\u4e00\u4e2a ResponseFuture \u5b9e\u4f8b ResponseFuture future = currentClient.request(inv, timeout); // \u8bbe\u7f6e future \u5230\u4e0a\u4e0b\u6587\u4e2d RpcContext.getContext().setFuture(new FutureAdapter Object (future)); // \u6682\u65f6\u8fd4\u56de\u4e00\u4e2a\u7a7a\u7ed3\u679c return new RpcResult(); } // \u540c\u6b65\u8c03\u7528 else { RpcContext.getContext().setFuture(null); // \u53d1\u9001\u8bf7\u6c42\uff0c\u5f97\u5230\u4e00\u4e2a ResponseFuture \u5b9e\u4f8b\uff0c\u5e76\u8c03\u7528\u8be5\u5b9e\u4f8b\u7684 get \u65b9\u6cd5\u8fdb\u884c\u7b49\u5f85 return (Result) currentClient.request(inv, timeout).get(); } } catch (TimeoutException e) { throw new RpcException(..., Invoke remote method timeout.... ); } catch (RemotingException e) { throw new RpcException(..., Failed to invoke remote method: ... ); } } // \u7701\u7565\u5176\u4ed6\u65b9\u6cd5 } \u4e0a\u9762\u7684\u4ee3\u7801\u5305\u542b\u4e86 Dubbo \u5bf9\u540c\u6b65\u548c\u5f02\u6b65\u8c03\u7528\u7684\u5904\u7406\u903b\u8f91\uff0c\u641e\u61c2\u4e86\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u4f1a\u5bf9 Dubbo \u7684\u540c\u6b65\u548c\u5f02\u6b65\u8c03\u7528\u65b9\u5f0f\u6709\u66f4\u6df1\u5165\u7684\u4e86\u89e3\u3002Dubbo \u5b9e\u73b0\u540c\u6b65\u548c\u5f02\u6b65\u8c03\u7528\u6bd4\u8f83\u5173\u952e\u7684\u4e00\u70b9\u5c31\u5728\u4e8e\u7531\u8c01\u8c03\u7528 ResponseFuture \u7684 get \u65b9\u6cd5\u3002\u540c\u6b65\u8c03\u7528\u6a21\u5f0f\u4e0b\uff0c\u7531\u6846\u67b6\u81ea\u8eab\u8c03\u7528 ResponseFuture \u7684 get \u65b9\u6cd5\u3002\u5f02\u6b65\u8c03\u7528\u6a21\u5f0f\u4e0b\uff0c\u5219\u7531\u7528\u6237\u8c03\u7528\u8be5\u65b9\u6cd5\u3002ResponseFuture \u662f\u4e00\u4e2a\u63a5\u53e3\uff0c\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u5b83\u7684\u9ed8\u8ba4\u5b9e\u73b0\u7c7b DefaultFuture \u7684\u6e90\u7801\u3002 public class DefaultFuture implements ResponseFuture { private static final Map Long, Channel CHANNELS = new ConcurrentHashMap Long, Channel (); private static final Map Long, DefaultFuture FUTURES = new ConcurrentHashMap Long, DefaultFuture (); private final long id; private final Channel channel; private final Request request; private final int timeout; private final Lock lock = new ReentrantLock(); private final Condition done = lock.newCondition(); private volatile Response response; public DefaultFuture(Channel channel, Request request, int timeout) { this.channel = channel; this.request = request; // \u83b7\u53d6\u8bf7\u6c42 id\uff0c\u8fd9\u4e2a id \u5f88\u91cd\u8981\uff0c\u540e\u9762\u8fd8\u4f1a\u89c1\u5230 this.id = request.getId(); this.timeout = timeout 0 ? timeout : channel.getUrl().getPositiveParameter(Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT); // \u5b58\u50a8 requestId, DefaultFuture \u6620\u5c04\u5173\u7cfb\u5230 FUTURES \u4e2d FUTURES.put(id, this); CHANNELS.put(id, channel); } @Override public Object get() throws RemotingException { return get(timeout); } @Override public Object get(int timeout) throws RemotingException { if (timeout = 0) { timeout = Constants.DEFAULT_TIMEOUT; } // \u68c0\u6d4b\u670d\u52a1\u63d0\u4f9b\u65b9\u662f\u5426\u6210\u529f\u8fd4\u56de\u4e86\u8c03\u7528\u7ed3\u679c if (!isDone()) { long start = System.currentTimeMillis(); lock.lock(); try { // \u5faa\u73af\u68c0\u6d4b\u670d\u52a1\u63d0\u4f9b\u65b9\u662f\u5426\u6210\u529f\u8fd4\u56de\u4e86\u8c03\u7528\u7ed3\u679c while (!isDone()) { // \u5982\u679c\u8c03\u7528\u7ed3\u679c\u5c1a\u672a\u8fd4\u56de\uff0c\u8fd9\u91cc\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4 done.await(timeout, TimeUnit.MILLISECONDS); // \u5982\u679c\u8c03\u7528\u7ed3\u679c\u6210\u529f\u8fd4\u56de\uff0c\u6216\u7b49\u5f85\u8d85\u65f6\uff0c\u6b64\u65f6\u8df3\u51fa while \u5faa\u73af\uff0c\u6267\u884c\u540e\u7eed\u7684\u903b\u8f91 if (isDone() || System.currentTimeMillis() - start timeout) { break; } } } catch (InterruptedException e) { throw new RuntimeException(e); } finally { lock.unlock(); } // \u5982\u679c\u8c03\u7528\u7ed3\u679c\u4ecd\u672a\u8fd4\u56de\uff0c\u5219\u629b\u51fa\u8d85\u65f6\u5f02\u5e38 if (!isDone()) { throw new TimeoutException(sent 0, channel, getTimeoutMessage(false)); } } // \u8fd4\u56de\u8c03\u7528\u7ed3\u679c return returnFromResponse(); } @Override public boolean isDone() { // \u901a\u8fc7\u68c0\u6d4b response \u5b57\u6bb5\u4e3a\u7a7a\u4e0e\u5426\uff0c\u5224\u65ad\u662f\u5426\u6536\u5230\u4e86\u8c03\u7528\u7ed3\u679c return response != null; } private Object returnFromResponse() throws RemotingException { Response res = response; if (res == null) { throw new IllegalStateException( response cannot be null ); } // \u5982\u679c\u8c03\u7528\u7ed3\u679c\u7684\u72b6\u6001\u4e3a Response.OK\uff0c\u5219\u8868\u793a\u8c03\u7528\u8fc7\u7a0b\u6b63\u5e38\uff0c\u670d\u52a1\u63d0\u4f9b\u65b9\u6210\u529f\u8fd4\u56de\u4e86\u8c03\u7528\u7ed3\u679c if (res.getStatus() == Response.OK) { return res.getResult(); } // \u629b\u51fa\u5f02\u5e38 if (res.getStatus() == Response.CLIENT_TIMEOUT || res.getStatus() == Response.SERVER_TIMEOUT) { throw new TimeoutException(res.getStatus() == Response.SERVER_TIMEOUT, channel, res.getErrorMessage()); } throw new RemotingException(channel, res.getErrorMessage()); } // \u7701\u7565\u5176\u4ed6\u65b9\u6cd5 } \u5982\u4e0a\uff0c\u5f53\u670d\u52a1\u6d88\u8d39\u8005\u8fd8\u672a\u63a5\u6536\u5230\u8c03\u7528\u7ed3\u679c\u65f6\uff0c\u7528\u6237\u7ebf\u7a0b\u8c03\u7528 get \u65b9\u6cd5\u4f1a\u88ab\u963b\u585e\u4f4f\u3002\u540c\u6b65\u8c03\u7528\u6a21\u5f0f\u4e0b\uff0c\u6846\u67b6\u83b7\u5f97 DefaultFuture \u5bf9\u8c61\u540e\uff0c\u4f1a\u7acb\u5373\u8c03\u7528 get \u65b9\u6cd5\u8fdb\u884c\u7b49\u5f85\u3002\u800c\u5f02\u6b65\u6a21\u5f0f\u4e0b\u5219\u662f\u5c06\u8be5\u5bf9\u8c61\u5c01\u88c5\u5230 FutureAdapter \u5b9e\u4f8b\u4e2d\uff0c\u5e76\u5c06 FutureAdapter \u5b9e\u4f8b\u8bbe\u7f6e\u5230 RpcContext \u4e2d\uff0c\u4f9b\u7528\u6237\u4f7f\u7528\u3002FutureAdapter \u662f\u4e00\u4e2a\u9002\u914d\u5668\uff0c\u7528\u4e8e\u5c06 Dubbo \u4e2d\u7684 ResponseFuture \u4e0e JDK \u4e2d\u7684 Future \u8fdb\u884c\u9002\u914d\u3002\u8fd9\u6837\u5f53\u7528\u6237\u7ebf\u7a0b\u8c03\u7528 Future \u7684 get \u65b9\u6cd5\u65f6\uff0c\u7ecf\u8fc7 FutureAdapter \u9002\u914d\uff0c\u6700\u7ec8\u4f1a\u8c03\u7528 ResponseFuture \u5b9e\u73b0\u7c7b\u5bf9\u8c61\u7684 get \u65b9\u6cd5\uff0c\u4e5f\u5c31\u662f DefaultFuture \u7684 get \u65b9\u6cd5\u3002 \u5230\u8fd9\u91cc\u5173\u4e8e Dubbo \u51e0\u79cd\u8c03\u7528\u65b9\u5f0f\u7684\u4ee3\u7801\u903b\u8f91\u5c31\u5206\u6790\u5b8c\u4e86\uff0c\u4e0b\u9762\u6765\u5206\u6790\u8bf7\u6c42\u6570\u636e\u7684\u53d1\u9001\u4e0e\u63a5\u6536\uff0c\u4ee5\u53ca\u54cd\u5e94\u6570\u636e\u7684\u53d1\u9001\u4e0e\u63a5\u6536\u8fc7\u7a0b\u3002 2.2 \u670d\u52a1\u6d88\u8d39\u65b9\u53d1\u9001\u8bf7\u6c42 2.2.1 \u53d1\u9001\u8bf7\u6c42 \u672c\u8282\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u540c\u6b65\u8c03\u7528\u6a21\u5f0f\u4e0b\uff0c\u670d\u52a1\u6d88\u8d39\u65b9\u662f\u5982\u4f55\u53d1\u9001\u8c03\u7528\u8bf7\u6c42\u7684\u3002\u5728\u6df1\u5165\u5206\u6790\u6e90\u7801\u524d\uff0c\u6211\u4eec\u5148\u6765\u770b\u4e00\u5f20\u56fe\u3002 \u8fd9\u5f20\u56fe\u5c55\u793a\u4e86\u670d\u52a1\u6d88\u8d39\u65b9\u53d1\u9001\u8bf7\u6c42\u8fc7\u7a0b\u7684\u90e8\u5206\u8c03\u7528\u6808\uff0c\u7565\u4e3a\u590d\u6742\u3002\u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u7ecf\u8fc7\u591a\u6b21\u8c03\u7528\u540e\uff0c\u624d\u5c06\u8bf7\u6c42\u6570\u636e\u9001\u81f3 Netty NioClientSocketChannel\u3002\u8fd9\u6837\u505a\u7684\u539f\u56e0\u662f\u901a\u8fc7 Exchange \u5c42\u4e3a\u6846\u67b6\u5f15\u5165 Request \u548c Response \u8bed\u4e49\uff0c\u8fd9\u4e00\u70b9\u4f1a\u5728\u63a5\u4e0b\u6765\u7684\u6e90\u7801\u5206\u6790\u8fc7\u7a0b\u4e2d\u4f1a\u770b\u5230\u3002\u5176\u4ed6\u7684\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u4e0b\u9762\u5f00\u59cb\u8fdb\u884c\u5206\u6790\u3002\u9996\u5148\u5206\u6790 ReferenceCountExchangeClient \u7684\u6e90\u7801\u3002 final class ReferenceCountExchangeClient implements ExchangeClient { private final URL url; private final AtomicInteger referenceCount = new AtomicInteger(0); public ReferenceCountExchangeClient(ExchangeClient client, ConcurrentMap String, LazyConnectExchangeClient ghostClientMap) { this.client = client; // \u5f15\u7528\u8ba1\u6570\u81ea\u589e referenceCount.incrementAndGet(); this.url = client.getUrl(); // ... } @Override public ResponseFuture request(Object request) throws RemotingException { // \u76f4\u63a5\u8c03\u7528\u88ab\u88c5\u9970\u5bf9\u8c61\u7684\u540c\u7b7e\u540d\u65b9\u6cd5 return client.request(request); } @Override public ResponseFuture request(Object request, int timeout) throws RemotingException { // \u76f4\u63a5\u8c03\u7528\u88ab\u88c5\u9970\u5bf9\u8c61\u7684\u540c\u7b7e\u540d\u65b9\u6cd5 return client.request(request, timeout); } /** \u5f15\u7528\u8ba1\u6570\u81ea\u589e\uff0c\u8be5\u65b9\u6cd5\u7531\u5916\u90e8\u8c03\u7528 */ public void incrementAndGetCount() { // referenceCount \u81ea\u589e referenceCount.incrementAndGet(); } @Override public void close(int timeout) { // referenceCount \u81ea\u51cf if (referenceCount.decrementAndGet() = 0) { if (timeout == 0) { client.close(); } else { client.close(timeout); } client = replaceWithLazyClient(); } } // \u7701\u7565\u90e8\u5206\u65b9\u6cd5 } ReferenceCountExchangeClient \u5185\u90e8\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5f15\u7528\u8ba1\u6570\u53d8\u91cf referenceCount\uff0c\u6bcf\u5f53\u8be5\u5bf9\u8c61\u88ab\u5f15\u7528\u4e00\u6b21 referenceCount \u90fd\u4f1a\u8fdb\u884c\u81ea\u589e\u3002\u6bcf\u5f53 close \u65b9\u6cd5\u88ab\u8c03\u7528\u65f6\uff0creferenceCount \u8fdb\u884c\u81ea\u51cf\u3002ReferenceCountExchangeClient \u5185\u90e8\u4ec5\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5f15\u7528\u8ba1\u6570\u7684\u529f\u80fd\uff0c\u5176\u4ed6\u65b9\u6cd5\u5e76\u65e0\u590d\u6742\u903b\u8f91\uff0c\u5747\u662f\u76f4\u63a5\u8c03\u7528\u88ab\u88c5\u9970\u5bf9\u8c61\u7684\u76f8\u5173\u65b9\u6cd5\u3002\u6240\u4ee5\u8fd9\u91cc\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u7ee7\u7eed\u5411\u4e0b\u5206\u6790\uff0c\u8fd9\u6b21\u662f HeaderExchangeClient\u3002 public class HeaderExchangeClient implements ExchangeClient { private static final ScheduledThreadPoolExecutor scheduled = new ScheduledThreadPoolExecutor(2, new NamedThreadFactory( dubbo-remoting-client-heartbeat , true)); private final Client client; private final ExchangeChannel channel; private ScheduledFuture ? heartbeatTimer; private int heartbeat; private int heartbeatTimeout; public HeaderExchangeClient(Client client, boolean needHeartbeat) { if (client == null) { throw new IllegalArgumentException( client == null ); } this.client = client; // \u521b\u5efa HeaderExchangeChannel \u5bf9\u8c61 this.channel = new HeaderExchangeChannel(client); // \u4ee5\u4e0b\u4ee3\u7801\u5747\u4e0e\u5fc3\u8df3\u68c0\u6d4b\u903b\u8f91\u6709\u5173 String dubbo = client.getUrl().getParameter(Constants.DUBBO_VERSION_KEY); this.heartbeat = client.getUrl().getParameter(Constants.HEARTBEAT_KEY, dubbo != null dubbo.startsWith( 1.0. ) ? Constants.DEFAULT_HEARTBEAT : 0); this.heartbeatTimeout = client.getUrl().getParameter(Constants.HEARTBEAT_TIMEOUT_KEY, heartbeat * 3); if (heartbeatTimeout heartbeat * 2) { throw new IllegalStateException( heartbeatTimeout heartbeatInterval * 2 ); } if (needHeartbeat) { // \u5f00\u542f\u5fc3\u8df3\u68c0\u6d4b\u5b9a\u65f6\u5668 startHeartbeatTimer(); } } @Override public ResponseFuture request(Object request) throws RemotingException { // \u76f4\u63a5 HeaderExchangeChannel \u5bf9\u8c61\u7684\u540c\u7b7e\u540d\u65b9\u6cd5 return channel.request(request); } @Override public ResponseFuture request(Object request, int timeout) throws RemotingException { // \u76f4\u63a5 HeaderExchangeChannel \u5bf9\u8c61\u7684\u540c\u7b7e\u540d\u65b9\u6cd5 return channel.request(request, timeout); } @Override public void close() { doClose(); channel.close(); } private void doClose() { // \u505c\u6b62\u5fc3\u8df3\u68c0\u6d4b\u5b9a\u65f6\u5668 stopHeartbeatTimer(); } private void startHeartbeatTimer() { stopHeartbeatTimer(); if (heartbeat 0) { heartbeatTimer = scheduled.scheduleWithFixedDelay( new HeartBeatTask(new HeartBeatTask.ChannelProvider() { @Override public Collection Channel getChannels() { return Collections. Channel singletonList(HeaderExchangeClient.this); } }, heartbeat, heartbeatTimeout), heartbeat, heartbeat, TimeUnit.MILLISECONDS); } } private void stopHeartbeatTimer() { if (heartbeatTimer != null !heartbeatTimer.isCancelled()) { try { heartbeatTimer.cancel(true); scheduled.purge(); } catch (Throwable e) { if (logger.isWarnEnabled()) { logger.warn(e.getMessage(), e); } } } heartbeatTimer = null; } // \u7701\u7565\u90e8\u5206\u65b9\u6cd5 } HeaderExchangeClient \u4e2d\u5f88\u591a\u65b9\u6cd5\u53ea\u6709\u4e00\u884c\u4ee3\u7801\uff0c\u5373\u8c03\u7528 HeaderExchangeChannel \u5bf9\u8c61\u7684\u540c\u7b7e\u540d\u65b9\u6cd5\u3002\u90a3 HeaderExchangeClient \u6709\u4ec0\u4e48\u7528\u5904\u5462\uff1f\u7b54\u6848\u662f\u5c01\u88c5\u4e86\u4e00\u4e9b\u5173\u4e8e\u5fc3\u8df3\u68c0\u6d4b\u7684\u903b\u8f91\u3002\u5fc3\u8df3\u68c0\u6d4b\u5e76\u975e\u672c\u6587\u6240\u5173\u6ce8\u7684\u70b9\uff0c\u56e0\u6b64\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u7ee7\u7eed\u5411\u4e0b\u770b\u3002 final class HeaderExchangeChannel implements ExchangeChannel { private final Channel channel; HeaderExchangeChannel(Channel channel) { if (channel == null) { throw new IllegalArgumentException( channel == null ); } // \u8fd9\u91cc\u7684 channel \u6307\u5411\u7684\u662f NettyClient this.channel = channel; } @Override public ResponseFuture request(Object request) throws RemotingException { return request(request, channel.getUrl().getPositiveParameter(Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT)); } @Override public ResponseFuture request(Object request, int timeout) throws RemotingException { if (closed) { throw new RemotingException(..., Failed to send request ...); } // \u521b\u5efa Request \u5bf9\u8c61 Request req = new Request(); req.setVersion(Version.getProtocolVersion()); // \u8bbe\u7f6e\u53cc\u5411\u901a\u4fe1\u6807\u5fd7\u4e3a true req.setTwoWay(true); // \u8fd9\u91cc\u7684 request \u53d8\u91cf\u7c7b\u578b\u4e3a RpcInvocation req.setData(request); // \u521b\u5efa DefaultFuture \u5bf9\u8c61 DefaultFuture future = new DefaultFuture(channel, req, timeout); try { // \u8c03\u7528 NettyClient \u7684 send \u65b9\u6cd5\u53d1\u9001\u8bf7\u6c42 channel.send(req); } catch (RemotingException e) { future.cancel(); throw e; } // \u8fd4\u56de DefaultFuture \u5bf9\u8c61 return future; } } \u5230\u8fd9\u91cc\u5927\u5bb6\u7ec8\u4e8e\u770b\u5230\u4e86 Request \u8bed\u4e49\u4e86\uff0c\u4e0a\u9762\u7684\u65b9\u6cd5\u9996\u5148\u5b9a\u4e49\u4e86\u4e00\u4e2a Request \u5bf9\u8c61\uff0c\u7136\u540e\u518d\u5c06\u8be5\u5bf9\u8c61\u4f20\u7ed9 NettyClient \u7684 send \u65b9\u6cd5\uff0c\u8fdb\u884c\u540e\u7eed\u7684\u8c03\u7528\u3002\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0cNettyClient \u4e2d\u5e76\u672a\u5b9e\u73b0 send \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u7ee7\u627f\u81ea\u7236\u7c7b AbstractPeer\uff0c\u4e0b\u9762\u76f4\u63a5\u5206\u6790 AbstractPeer \u7684\u4ee3\u7801\u3002 public abstract class AbstractPeer implements Endpoint, ChannelHandler { @Override public void send(Object message) throws RemotingException { // \u8be5\u65b9\u6cd5\u7531 AbstractClient \u7c7b\u5b9e\u73b0 send(message, url.getParameter(Constants.SENT_KEY, false)); } // \u7701\u7565\u5176\u4ed6\u65b9\u6cd5 } public abstract class AbstractClient extends AbstractEndpoint implements Client { @Override public void send(Object message, boolean sent) throws RemotingException { if (send_reconnect !isConnected()) { connect(); } // \u83b7\u53d6 Channel\uff0cgetChannel \u662f\u4e00\u4e2a\u62bd\u8c61\u65b9\u6cd5\uff0c\u5177\u4f53\u7531\u5b50\u7c7b\u5b9e\u73b0 Channel channel = getChannel(); if (channel == null || !channel.isConnected()) { throw new RemotingException(this, message can not send ... ); } // \u7ee7\u7eed\u5411\u4e0b\u8c03\u7528 channel.send(message, sent); } protected abstract Channel getChannel(); // \u7701\u7565\u5176\u4ed6\u65b9\u6cd5 } \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cDubbo \u4f7f\u7528 Netty \u4f5c\u4e3a\u5e95\u5c42\u7684\u901a\u4fe1\u6846\u67b6\uff0c\u56e0\u6b64\u4e0b\u9762\u6211\u4eec\u5230 NettyClient \u7c7b\u4e2d\u770b\u4e00\u4e0b getChannel \u65b9\u6cd5\u7684\u5b9e\u73b0\u903b\u8f91\u3002 public class NettyClient extends AbstractClient { // \u8fd9\u91cc\u7684 Channel \u5168\u9650\u5b9a\u540d\u79f0\u4e3a org.jboss.netty.channel.Channel private volatile Channel channel; @Override protected com.alibaba.dubbo.remoting.Channel getChannel() { Channel c = channel; if (c == null || !c.isConnected()) return null; // \u83b7\u53d6\u4e00\u4e2a NettyChannel \u7c7b\u578b\u5bf9\u8c61 return NettyChannel.getOrAddChannel(c, getUrl(), this); } } final class NettyChannel extends AbstractChannel { private static final ConcurrentMap org.jboss.netty.channel.Channel, NettyChannel channelMap = new ConcurrentHashMap org.jboss.netty.channel.Channel, NettyChannel (); private final org.jboss.netty.channel.Channel channel; /** \u79c1\u6709\u6784\u9020\u65b9\u6cd5 */ private NettyChannel(org.jboss.netty.channel.Channel channel, URL url, ChannelHandler handler) { super(url, handler); if (channel == null) { throw new IllegalArgumentException( netty channel == null; ); } this.channel = channel; } static NettyChannel getOrAddChannel(org.jboss.netty.channel.Channel ch, URL url, ChannelHandler handler) { if (ch == null) { return null; } // \u5c1d\u8bd5\u4ece\u96c6\u5408\u4e2d\u83b7\u53d6 NettyChannel \u5b9e\u4f8b NettyChannel ret = channelMap.get(ch); if (ret == null) { // \u5982\u679c ret = null\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 NettyChannel \u5b9e\u4f8b NettyChannel nc = new NettyChannel(ch, url, handler); if (ch.isConnected()) { // \u5c06 Channel, NettyChannel \u952e\u503c\u5bf9\u5b58\u5165 channelMap \u96c6\u5408\u4e2d ret = channelMap.putIfAbsent(ch, nc); } if (ret == null) { ret = nc; } } return ret; } } \u83b7\u53d6\u5230 NettyChannel \u5b9e\u4f8b\u540e\uff0c\u5373\u53ef\u8fdb\u884c\u540e\u7eed\u7684\u8c03\u7528\u3002\u4e0b\u9762\u770b\u4e00\u4e0b NettyChannel \u7684 send \u65b9\u6cd5\u3002 public void send(Object message, boolean sent) throws RemotingException { super.send(message, sent); boolean success = true; int timeout = 0; try { // \u53d1\u9001\u6d88\u606f(\u5305\u542b\u8bf7\u6c42\u548c\u54cd\u5e94\u6d88\u606f) ChannelFuture future = channel.write(message); // sent \u7684\u503c\u6e90\u4e8e dubbo:method sent= true/false / \u4e2d sent \u7684\u914d\u7f6e\u503c\uff0c\u6709\u4e24\u79cd\u914d\u7f6e\u503c\uff1a // 1. true: \u7b49\u5f85\u6d88\u606f\u53d1\u51fa\uff0c\u6d88\u606f\u53d1\u9001\u5931\u8d25\u5c06\u629b\u51fa\u5f02\u5e38 // 2. false: \u4e0d\u7b49\u5f85\u6d88\u606f\u53d1\u51fa\uff0c\u5c06\u6d88\u606f\u653e\u5165 IO \u961f\u5217\uff0c\u5373\u523b\u8fd4\u56de // \u9ed8\u8ba4\u60c5\u51b5\u4e0b sent = false\uff1b if (sent) { timeout = getUrl().getPositiveParameter(Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT); // \u7b49\u5f85\u6d88\u606f\u53d1\u51fa\uff0c\u82e5\u5728\u89c4\u5b9a\u65f6\u95f4\u6ca1\u80fd\u53d1\u51fa\uff0csuccess \u4f1a\u88ab\u7f6e\u4e3a false success = future.await(timeout); } Throwable cause = future.getCause(); if (cause != null) { throw cause; } } catch (Throwable e) { throw new RemotingException(this, Failed to send message ... ); } // \u82e5 success \u4e3a false\uff0c\u8fd9\u91cc\u629b\u51fa\u5f02\u5e38 if (!success) { throw new RemotingException(this, Failed to send message ... ); } } \u7ecf\u5386\u591a\u6b21\u8c03\u7528\uff0c\u5230\u8fd9\u91cc\u8bf7\u6c42\u6570\u636e\u7684\u53d1\u9001\u8fc7\u7a0b\u5c31\u7ed3\u675f\u4e86\uff0c\u8fc7\u7a0b\u6f2b\u957f\u3002\u4e3a\u4e86\u4fbf\u4e8e\u5927\u5bb6\u9605\u8bfb\u4ee3\u7801\uff0c\u8fd9\u91cc\u4ee5 DemoService \u4e3a\u4f8b\uff0c\u5c06 sayHello \u65b9\u6cd5\u7684\u6574\u4e2a\u8c03\u7528\u8def\u5f84\u8d34\u51fa\u6765\u3002 proxy0#sayHello(String) \u2014 InvokerInvocationHandler#invoke(Object, Method, Object[]) \u2014 MockClusterInvoker#invoke(Invocation) \u2014 AbstractClusterInvoker#invoke(Invocation) \u2014 FailoverClusterInvoker#doInvoke(Invocation, List Invoker T , LoadBalance) \u2014 Filter#invoke(Invoker, Invocation) // \u5305\u542b\u591a\u4e2a Filter \u8c03\u7528 \u2014 ListenerInvokerWrapper#invoke(Invocation) \u2014 AbstractInvoker#invoke(Invocation) \u2014 DubboInvoker#doInvoke(Invocation) \u2014 ReferenceCountExchangeClient#request(Object, int) \u2014 HeaderExchangeClient#request(Object, int) \u2014 HeaderExchangeChannel#request(Object, int) \u2014 AbstractPeer#send(Object) \u2014 AbstractClient#send(Object, boolean) \u2014 NettyChannel#send(Object, boolean) \u2014 NioClientSocketChannel#write(Object) \u5728 Netty \u4e2d\uff0c\u51fa\u7ad9\u6570\u636e\u5728\u53d1\u51fa\u4e4b\u524d\u8fd8\u9700\u8981\u8fdb\u884c\u7f16\u7801\u64cd\u4f5c\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u8bf7\u6c42\u6570\u636e\u7684\u7f16\u7801\u903b\u8f91\u3002 2.2.2 \u8bf7\u6c42\u7f16\u7801 \u5728\u5206\u6790\u8bf7\u6c42\u7f16\u7801\u903b\u8f91\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e0b Dubbo \u6570\u636e\u5305\u7ed3\u6784\u3002 Dubbo \u6570\u636e\u5305\u5206\u4e3a\u6d88\u606f\u5934\u548c\u6d88\u606f\u4f53\uff0c\u6d88\u606f\u5934\u7528\u4e8e\u5b58\u50a8\u4e00\u4e9b\u5143\u4fe1\u606f\uff0c\u6bd4\u5982\u9b54\u6570\uff08Magic\uff09\uff0c\u6570\u636e\u5305\u7c7b\u578b\uff08Request/Response\uff09\uff0c\u6d88\u606f\u4f53\u957f\u5ea6\uff08Data Length\uff09\u7b49\u3002\u6d88\u606f\u4f53\u4e2d\u7528\u4e8e\u5b58\u50a8\u5177\u4f53\u7684\u8c03\u7528\u6d88\u606f\uff0c\u6bd4\u5982\u65b9\u6cd5\u540d\u79f0\uff0c\u53c2\u6570\u5217\u8868\u7b49\u3002\u4e0b\u9762\u7b80\u5355\u5217\u4e3e\u4e00\u4e0b\u6d88\u606f\u5934\u7684\u5185\u5bb9\u3002 \u504f\u79fb\u91cf(Bit) \u5b57\u6bb5 \u53d6\u503c 0 ~ 7 \u9b54\u6570\u9ad8\u4f4d 0xda00 8 ~ 15 \u9b54\u6570\u4f4e\u4f4d 0xbb 16 \u6570\u636e\u5305\u7c7b\u578b 0 - Response, 1 - Request 17 \u8c03\u7528\u65b9\u5f0f \u4ec5\u5728\u7b2c16\u4f4d\u88ab\u8bbe\u4e3a1\u7684\u60c5\u51b5\u4e0b\u6709\u6548\uff0c0 - \u5355\u5411\u8c03\u7528\uff0c1 - \u53cc\u5411\u8c03\u7528 18 \u4e8b\u4ef6\u6807\u8bc6 0 - \u5f53\u524d\u6570\u636e\u5305\u662f\u8bf7\u6c42\u6216\u54cd\u5e94\u5305\uff0c1 - \u5f53\u524d\u6570\u636e\u5305\u662f\u5fc3\u8df3\u5305 19 ~ 23 \u5e8f\u5217\u5316\u5668\u7f16\u53f7 2 - Hessian2Serialization 3 - JavaSerialization 4 - CompactedJavaSerialization 6 - FastJsonSerialization 7 - NativeJavaSerialization 8 - KryoSerialization 9 - FstSerialization 24 ~ 31 \u72b6\u6001 20 - OK 30 - CLIENT_TIMEOUT 31 - SERVER_TIMEOUT 40 - BAD_REQUEST 50 - BAD_RESPONSE ...... 32 ~ 95 \u8bf7\u6c42\u7f16\u53f7 \u51718\u5b57\u8282\uff0c\u8fd0\u884c\u65f6\u751f\u6210 96 ~ 127 \u6d88\u606f\u4f53\u957f\u5ea6 \u8fd0\u884c\u65f6\u8ba1\u7b97 \u4e86\u89e3\u4e86 Dubbo \u6570\u636e\u5305\u683c\u5f0f\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u53ef\u4ee5\u63a2\u7d22\u7f16\u7801\u8fc7\u7a0b\u4e86\u3002\u8fd9\u6b21\u6211\u4eec\u5f00\u95e8\u89c1\u5c71\uff0c\u76f4\u63a5\u5206\u6790\u7f16\u7801\u903b\u8f91\u6240\u5728\u7c7b\u3002\u5982\u4e0b\uff1a public class ExchangeCodec extends TelnetCodec { // \u6d88\u606f\u5934\u957f\u5ea6 protected static final int HEADER_LENGTH = 16; // \u9b54\u6570\u5185\u5bb9 protected static final short MAGIC = (short) 0xdabb; protected static final byte MAGIC_HIGH = Bytes.short2bytes(MAGIC)[0]; protected static final byte MAGIC_LOW = Bytes.short2bytes(MAGIC)[1]; protected static final byte FLAG_REQUEST = (byte) 0x80; protected static final byte FLAG_TWOWAY = (byte) 0x40; protected static final byte FLAG_EVENT = (byte) 0x20; protected static final int SERIALIZATION_MASK = 0x1f; private static final Logger logger = LoggerFactory.getLogger(ExchangeCodec.class); public Short getMagicCode() { return MAGIC; } @Override public void encode(Channel channel, ChannelBuffer buffer, Object msg) throws IOException { if (msg instanceof Request) { // \u5bf9 Request \u5bf9\u8c61\u8fdb\u884c\u7f16\u7801 encodeRequest(channel, buffer, (Request) msg); } else if (msg instanceof Response) { // \u5bf9 Response \u5bf9\u8c61\u8fdb\u884c\u7f16\u7801\uff0c\u540e\u9762\u5206\u6790 encodeResponse(channel, buffer, (Response) msg); } else { super.encode(channel, buffer, msg); } } protected void encodeRequest(Channel channel, ChannelBuffer buffer, Request req) throws IOException { Serialization serialization = getSerialization(channel); // \u521b\u5efa\u6d88\u606f\u5934\u5b57\u8282\u6570\u7ec4\uff0c\u957f\u5ea6\u4e3a 16 byte[] header = new byte[HEADER_LENGTH]; // \u8bbe\u7f6e\u9b54\u6570 Bytes.short2bytes(MAGIC, header); // \u8bbe\u7f6e\u6570\u636e\u5305\u7c7b\u578b\uff08Request/Response\uff09\u548c\u5e8f\u5217\u5316\u5668\u7f16\u53f7 header[2] = (byte) (FLAG_REQUEST | serialization.getContentTypeId()); // \u8bbe\u7f6e\u901a\u4fe1\u65b9\u5f0f(\u5355\u5411/\u53cc\u5411) if (req.isTwoWay()) { header[2] |= FLAG_TWOWAY; } // \u8bbe\u7f6e\u4e8b\u4ef6\u6807\u8bc6 if (req.isEvent()) { header[2] |= FLAG_EVENT; } // \u8bbe\u7f6e\u8bf7\u6c42\u7f16\u53f7\uff0c8\u4e2a\u5b57\u8282\uff0c\u4ece\u7b2c4\u4e2a\u5b57\u8282\u5f00\u59cb\u8bbe\u7f6e Bytes.long2bytes(req.getId(), header, 4); // \u83b7\u53d6 buffer \u5f53\u524d\u7684\u5199\u4f4d\u7f6e int savedWriteIndex = buffer.writerIndex(); // \u66f4\u65b0 writerIndex\uff0c\u4e3a\u6d88\u606f\u5934\u9884\u7559 16 \u4e2a\u5b57\u8282\u7684\u7a7a\u95f4 buffer.writerIndex(savedWriteIndex + HEADER_LENGTH); ChannelBufferOutputStream bos = new ChannelBufferOutputStream(buffer); // \u521b\u5efa\u5e8f\u5217\u5316\u5668\uff0c\u6bd4\u5982 Hessian2ObjectOutput ObjectOutput out = serialization.serialize(channel.getUrl(), bos); if (req.isEvent()) { // \u5bf9\u4e8b\u4ef6\u6570\u636e\u8fdb\u884c\u5e8f\u5217\u5316\u64cd\u4f5c encodeEventData(channel, out, req.getData()); } else { // \u5bf9\u8bf7\u6c42\u6570\u636e\u8fdb\u884c\u5e8f\u5217\u5316\u64cd\u4f5c encodeRequestData(channel, out, req.getData(), req.getVersion()); } out.flushBuffer(); if (out instanceof Cleanable) { ((Cleanable) out).cleanup(); } bos.flush(); bos.close(); // \u83b7\u53d6\u5199\u5165\u7684\u5b57\u8282\u6570\uff0c\u4e5f\u5c31\u662f\u6d88\u606f\u4f53\u957f\u5ea6 int len = bos.writtenBytes(); checkPayload(channel, len); // \u5c06\u6d88\u606f\u4f53\u957f\u5ea6\u5199\u5165\u5230\u6d88\u606f\u5934\u4e2d Bytes.int2bytes(len, header, 12); // \u5c06 buffer \u6307\u9488\u79fb\u52a8\u5230 savedWriteIndex\uff0c\u4e3a\u5199\u6d88\u606f\u5934\u505a\u51c6\u5907 buffer.writerIndex(savedWriteIndex); // \u4ece savedWriteIndex \u4e0b\u6807\u5904\u5199\u5165\u6d88\u606f\u5934 buffer.writeBytes(header); // \u8bbe\u7f6e\u65b0\u7684 writerIndex\uff0cwriterIndex = \u539f\u5199\u4e0b\u6807 + \u6d88\u606f\u5934\u957f\u5ea6 + \u6d88\u606f\u4f53\u957f\u5ea6 buffer.writerIndex(savedWriteIndex + HEADER_LENGTH + len); } // \u7701\u7565\u5176\u4ed6\u65b9\u6cd5 } \u4ee5\u4e0a\u5c31\u662f\u8bf7\u6c42\u5bf9\u8c61\u7684\u7f16\u7801\u8fc7\u7a0b\uff0c\u8be5\u8fc7\u7a0b\u9996\u5148\u4f1a\u901a\u8fc7\u4f4d\u8fd0\u7b97\u5c06\u6d88\u606f\u5934\u5199\u5165\u5230 header \u6570\u7ec4\u4e2d\u3002\u7136\u540e\u5bf9 Request \u5bf9\u8c61\u7684 data \u5b57\u6bb5\u6267\u884c\u5e8f\u5217\u5316\u64cd\u4f5c\uff0c\u5e8f\u5217\u5316\u540e\u7684\u6570\u636e\u6700\u7ec8\u4f1a\u5b58\u50a8\u5230 ChannelBuffer \u4e2d\u3002\u5e8f\u5217\u5316\u64cd\u4f5c\u6267\u884c\u5b8c\u540e\uff0c\u53ef\u5f97\u5230\u6570\u636e\u5e8f\u5217\u5316\u540e\u7684\u957f\u5ea6 len\uff0c\u7d27\u63a5\u7740\u5c06 len \u5199\u5165\u5230 header \u6307\u5b9a\u4f4d\u7f6e\u5904\u3002\u6700\u540e\u518d\u5c06\u6d88\u606f\u5934\u5b57\u8282\u6570\u7ec4 header \u5199\u5165\u5230 ChannelBuffer \u4e2d\uff0c\u6574\u4e2a\u7f16\u7801\u8fc7\u7a0b\u5c31\u7ed3\u675f\u4e86\u3002\u672c\u8282\u7684\u6700\u540e\uff0c\u6211\u4eec\u518d\u6765\u770b\u4e00\u4e0b Request \u5bf9\u8c61\u7684 data \u5b57\u6bb5\u5e8f\u5217\u5316\u8fc7\u7a0b\uff0c\u4e5f\u5c31\u662f encodeRequestData \u65b9\u6cd5\u7684\u903b\u8f91\uff0c\u5982\u4e0b\uff1a public class DubboCodec extends ExchangeCodec implements Codec2 { protected void encodeRequestData(Channel channel, ObjectOutput out, Object data, String version) throws IOException { RpcInvocation inv = (RpcInvocation) data; // \u4f9d\u6b21\u5e8f\u5217\u5316 dubbo version\u3001path\u3001version out.writeUTF(version); out.writeUTF(inv.getAttachment(Constants.PATH_KEY)); out.writeUTF(inv.getAttachment(Constants.VERSION_KEY)); // \u5e8f\u5217\u5316\u8c03\u7528\u65b9\u6cd5\u540d out.writeUTF(inv.getMethodName()); // \u5c06\u53c2\u6570\u7c7b\u578b\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff0c\u5e76\u8fdb\u884c\u5e8f\u5217\u5316 out.writeUTF(ReflectUtils.getDesc(inv.getParameterTypes())); Object[] args = inv.getArguments(); if (args != null) for (int i = 0; i args.length; i++) { // \u5bf9\u8fd0\u884c\u65f6\u53c2\u6570\u8fdb\u884c\u5e8f\u5217\u5316 out.writeObject(encodeInvocationArgument(channel, inv, i)); } // \u5e8f\u5217\u5316 attachments out.writeObject(inv.getAttachments()); } } \u81f3\u6b64\uff0c\u5173\u4e8e\u670d\u52a1\u6d88\u8d39\u65b9\u53d1\u9001\u8bf7\u6c42\u7684\u8fc7\u7a0b\u5c31\u5206\u6790\u5b8c\u4e86\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u670d\u52a1\u63d0\u4f9b\u65b9\u662f\u5982\u4f55\u63a5\u6536\u8bf7\u6c42\u7684\u3002 2.3 \u670d\u52a1\u63d0\u4f9b\u65b9\u63a5\u6536\u8bf7\u6c42 \u524d\u9762\u8bf4\u8fc7\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b Dubbo \u4f7f\u7528 Netty \u4f5c\u4e3a\u5e95\u5c42\u7684\u901a\u4fe1\u6846\u67b6\u3002Netty \u68c0\u6d4b\u5230\u6709\u6570\u636e\u5165\u7ad9\u540e\uff0c\u9996\u5148\u4f1a\u901a\u8fc7\u89e3\u7801\u5668\u5bf9\u6570\u636e\u8fdb\u884c\u89e3\u7801\uff0c\u5e76\u5c06\u89e3\u7801\u540e\u7684\u6570\u636e\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u5165\u7ad9\u5904\u7406\u5668\u7684\u6307\u5b9a\u65b9\u6cd5\u3002\u6240\u4ee5\u5728\u8fdb\u884c\u540e\u7eed\u7684\u5206\u6790\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e0b\u6570\u636e\u89e3\u7801\u8fc7\u7a0b\u3002 2.3.1 \u8bf7\u6c42\u89e3\u7801 \u8fd9\u91cc\u76f4\u63a5\u5206\u6790\u8bf7\u6c42\u6570\u636e\u7684\u89e3\u7801\u903b\u8f91\uff0c\u5ffd\u7565\u4e2d\u95f4\u8fc7\u7a0b\uff0c\u5982\u4e0b\uff1a public class ExchangeCodec extends TelnetCodec { @Override public Object decode(Channel channel, ChannelBuffer buffer) throws IOException { int readable = buffer.readableBytes(); // \u521b\u5efa\u6d88\u606f\u5934\u5b57\u8282\u6570\u7ec4 byte[] header = new byte[Math.min(readable, HEADER_LENGTH)]; // \u8bfb\u53d6\u6d88\u606f\u5934\u6570\u636e buffer.readBytes(header); // \u8c03\u7528\u91cd\u8f7d\u65b9\u6cd5\u8fdb\u884c\u540e\u7eed\u89e3\u7801\u5de5\u4f5c return decode(channel, buffer, readable, header); } @Override protected Object decode(Channel channel, ChannelBuffer buffer, int readable, byte[] header) throws IOException { // \u68c0\u67e5\u9b54\u6570\u662f\u5426\u76f8\u7b49 if (readable 0 header[0] != MAGIC_HIGH || readable 1 header[1] != MAGIC_LOW) { int length = header.length; if (header.length readable) { header = Bytes.copyOf(header, readable); buffer.readBytes(header, length, readable - length); } for (int i = 1; i header.length - 1; i++) { if (header[i] == MAGIC_HIGH header[i + 1] == MAGIC_LOW) { buffer.readerIndex(buffer.readerIndex() - header.length + i); header = Bytes.copyOf(header, i); break; } } // \u901a\u8fc7 telnet \u547d\u4ee4\u884c\u53d1\u9001\u7684\u6570\u636e\u5305\u4e0d\u5305\u542b\u6d88\u606f\u5934\uff0c\u6240\u4ee5\u8fd9\u91cc // \u8c03\u7528 TelnetCodec \u7684 decode \u65b9\u6cd5\u5bf9\u6570\u636e\u5305\u8fdb\u884c\u89e3\u7801 return super.decode(channel, buffer, readable, header); } // \u68c0\u6d4b\u53ef\u8bfb\u6570\u636e\u91cf\u662f\u5426\u5c11\u4e8e\u6d88\u606f\u5934\u957f\u5ea6\uff0c\u82e5\u5c0f\u4e8e\u5219\u7acb\u5373\u8fd4\u56de DecodeResult.NEED_MORE_INPUT if (readable HEADER_LENGTH) { return DecodeResult.NEED_MORE_INPUT; } // \u4ece\u6d88\u606f\u5934\u4e2d\u83b7\u53d6\u6d88\u606f\u4f53\u957f\u5ea6 int len = Bytes.bytes2int(header, 12); // \u68c0\u6d4b\u6d88\u606f\u4f53\u957f\u5ea6\u662f\u5426\u8d85\u51fa\u9650\u5236\uff0c\u8d85\u51fa\u5219\u629b\u51fa\u5f02\u5e38 checkPayload(channel, len); int tt = len + HEADER_LENGTH; // \u68c0\u6d4b\u53ef\u8bfb\u7684\u5b57\u8282\u6570\u662f\u5426\u5c0f\u4e8e\u5b9e\u9645\u7684\u5b57\u8282\u6570 if (readable tt) { return DecodeResult.NEED_MORE_INPUT; } ChannelBufferInputStream is = new ChannelBufferInputStream(buffer, len); try { // \u7ee7\u7eed\u8fdb\u884c\u89e3\u7801\u5de5\u4f5c return decodeBody(channel, is, header); } finally { if (is.available() 0) { try { StreamUtils.skipUnusedStream(is); } catch (IOException e) { logger.warn(e.getMessage(), e); } } } } } \u4e0a\u9762\u65b9\u6cd5\u901a\u8fc7\u68c0\u6d4b\u6d88\u606f\u5934\u4e2d\u7684\u9b54\u6570\u662f\u5426\u4e0e\u89c4\u5b9a\u7684\u9b54\u6570\u76f8\u7b49\uff0c\u63d0\u524d\u62e6\u622a\u6389\u975e\u5e38\u89c4\u6570\u636e\u5305\uff0c\u6bd4\u5982\u901a\u8fc7 telnet \u547d\u4ee4\u884c\u53d1\u51fa\u7684\u6570\u636e\u5305\u3002\u63a5\u7740\u518d\u5bf9\u6d88\u606f\u4f53\u957f\u5ea6\uff0c\u4ee5\u53ca\u53ef\u8bfb\u5b57\u8282\u6570\u8fdb\u884c\u68c0\u6d4b\u3002\u6700\u540e\u8c03\u7528 decodeBody \u65b9\u6cd5\u8fdb\u884c\u540e\u7eed\u7684\u89e3\u7801\u5de5\u4f5c\uff0cExchangeCodec \u4e2d\u5b9e\u73b0\u4e86 decodeBody \u65b9\u6cd5\uff0c\u4f46\u56e0\u5176\u5b50\u7c7b DubboCodec \u8986\u5199\u4e86\u8be5\u65b9\u6cd5\uff0c\u6240\u4ee5\u5728\u8fd0\u884c\u65f6 DubboCodec \u4e2d\u7684 decodeBody \u65b9\u6cd5\u4f1a\u88ab\u8c03\u7528\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u8be5\u65b9\u6cd5\u7684\u4ee3\u7801\u3002 public class DubboCodec extends ExchangeCodec implements Codec2 { @Override protected Object decodeBody(Channel channel, InputStream is, byte[] header) throws IOException { // \u83b7\u53d6\u6d88\u606f\u5934\u4e2d\u7684\u7b2c\u4e09\u4e2a\u5b57\u8282\uff0c\u5e76\u901a\u8fc7\u903b\u8f91\u4e0e\u8fd0\u7b97\u5f97\u5230\u5e8f\u5217\u5316\u5668\u7f16\u53f7 byte flag = header[2], proto = (byte) (flag SERIALIZATION_MASK); Serialization s = CodecSupport.getSerialization(channel.getUrl(), proto); // \u83b7\u53d6\u8c03\u7528\u7f16\u53f7 long id = Bytes.bytes2long(header, 4); // \u901a\u8fc7\u903b\u8f91\u4e0e\u8fd0\u7b97\u5f97\u5230\u8c03\u7528\u7c7b\u578b\uff0c0 - Response\uff0c1 - Request if ((flag FLAG_REQUEST) == 0) { // \u5bf9\u54cd\u5e94\u7ed3\u679c\u8fdb\u884c\u89e3\u7801\uff0c\u5f97\u5230 Response \u5bf9\u8c61\u3002\u8fd9\u4e2a\u975e\u672c\u8282\u5185\u5bb9\uff0c\u540e\u9762\u518d\u5206\u6790 // ... } else { // \u521b\u5efa Request \u5bf9\u8c61 Request req = new Request(id); req.setVersion(Version.getProtocolVersion()); // \u901a\u8fc7\u903b\u8f91\u4e0e\u8fd0\u7b97\u5f97\u5230\u901a\u4fe1\u65b9\u5f0f\uff0c\u5e76\u8bbe\u7f6e\u5230 Request \u5bf9\u8c61\u4e2d req.setTwoWay((flag FLAG_TWOWAY) != 0); // \u901a\u8fc7\u4f4d\u8fd0\u7b97\u68c0\u6d4b\u6570\u636e\u5305\u662f\u5426\u4e3a\u4e8b\u4ef6\u7c7b\u578b if ((flag FLAG_EVENT) != 0) { // \u8bbe\u7f6e\u5fc3\u8df3\u4e8b\u4ef6\u5230 Request \u5bf9\u8c61\u4e2d req.setEvent(Request.HEARTBEAT_EVENT); } try { Object data; if (req.isHeartbeat()) { // \u5bf9\u5fc3\u8df3\u5305\u8fdb\u884c\u89e3\u7801\uff0c\u8be5\u65b9\u6cd5\u5df2\u88ab\u6807\u6ce8\u4e3a\u5e9f\u5f03 data = decodeHeartbeatData(channel, deserialize(s, channel.getUrl(), is)); } else if (req.isEvent()) { // \u5bf9\u4e8b\u4ef6\u6570\u636e\u8fdb\u884c\u89e3\u7801 data = decodeEventData(channel, deserialize(s, channel.getUrl(), is)); } else { DecodeableRpcInvocation inv; // \u6839\u636e url \u53c2\u6570\u5224\u65ad\u662f\u5426\u5728 IO \u7ebf\u7a0b\u4e0a\u5bf9\u6d88\u606f\u4f53\u8fdb\u884c\u89e3\u7801 if (channel.getUrl().getParameter( Constants.DECODE_IN_IO_THREAD_KEY, Constants.DEFAULT_DECODE_IN_IO_THREAD)) { inv = new DecodeableRpcInvocation(channel, req, is, proto); // \u5728\u5f53\u524d\u7ebf\u7a0b\uff0c\u4e5f\u5c31\u662f IO \u7ebf\u7a0b\u4e0a\u8fdb\u884c\u540e\u7eed\u7684\u89e3\u7801\u5de5\u4f5c\u3002\u6b64\u5de5\u4f5c\u5b8c\u6210\u540e\uff0c\u53ef\u5c06 // \u8c03\u7528\u65b9\u6cd5\u540d\u3001attachment\u3001\u4ee5\u53ca\u8c03\u7528\u53c2\u6570\u89e3\u6790\u51fa\u6765 inv.decode(); } else { // \u4ec5\u521b\u5efa DecodeableRpcInvocation \u5bf9\u8c61\uff0c\u4f46\u4e0d\u5728\u5f53\u524d\u7ebf\u7a0b\u4e0a\u6267\u884c\u89e3\u7801\u903b\u8f91 inv = new DecodeableRpcInvocation(channel, req, new UnsafeByteArrayInputStream(readMessageData(is)), proto); } data = inv; } // \u8bbe\u7f6e data \u5230 Request \u5bf9\u8c61\u4e2d req.setData(data); } catch (Throwable t) { // \u82e5\u89e3\u7801\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5f02\u5e38\uff0c\u5219\u5c06 broken \u5b57\u6bb5\u8bbe\u4e3a true\uff0c // \u5e76\u5c06\u5f02\u5e38\u5bf9\u8c61\u8bbe\u7f6e\u5230 Reqeust \u5bf9\u8c61\u4e2d req.setBroken(true); req.setData(t); } return req; } } } \u5982\u4e0a\uff0cdecodeBody \u5bf9\u90e8\u5206\u5b57\u6bb5\u8fdb\u884c\u4e86\u89e3\u7801\uff0c\u5e76\u5c06\u89e3\u7801\u5f97\u5230\u7684\u5b57\u6bb5\u5c01\u88c5\u5230 Request \u4e2d\u3002\u968f\u540e\u4f1a\u8c03\u7528 DecodeableRpcInvocation \u7684 decode \u65b9\u6cd5\u8fdb\u884c\u540e\u7eed\u7684\u89e3\u7801\u5de5\u4f5c\u3002\u6b64\u5de5\u4f5c\u5b8c\u6210\u540e\uff0c\u53ef\u5c06\u8c03\u7528\u65b9\u6cd5\u540d\u3001attachment\u3001\u4ee5\u53ca\u8c03\u7528\u53c2\u6570\u89e3\u6790\u51fa\u6765\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b DecodeableRpcInvocation \u7684 decode \u65b9\u6cd5\u903b\u8f91\u3002 public class DecodeableRpcInvocation extends RpcInvocation implements Codec, Decodeable { @Override public Object decode(Channel channel, InputStream input) throws IOException { ObjectInput in = CodecSupport.getSerialization(channel.getUrl(), serializationType) .deserialize(channel.getUrl(), input); // \u901a\u8fc7\u53cd\u5e8f\u5217\u5316\u5f97\u5230 dubbo version\uff0c\u5e76\u4fdd\u5b58\u5230 attachments \u53d8\u91cf\u4e2d String dubboVersion = in.readUTF(); request.setVersion(dubboVersion); setAttachment(Constants.DUBBO_VERSION_KEY, dubboVersion); // \u901a\u8fc7\u53cd\u5e8f\u5217\u5316\u5f97\u5230 path\uff0cversion\uff0c\u5e76\u4fdd\u5b58\u5230 attachments \u53d8\u91cf\u4e2d setAttachment(Constants.PATH_KEY, in.readUTF()); setAttachment(Constants.VERSION_KEY, in.readUTF()); // \u901a\u8fc7\u53cd\u5e8f\u5217\u5316\u5f97\u5230\u8c03\u7528\u65b9\u6cd5\u540d setMethodName(in.readUTF()); try { Object[] args; Class ? [] pts; // \u901a\u8fc7\u53cd\u5e8f\u5217\u5316\u5f97\u5230\u53c2\u6570\u7c7b\u578b\u5b57\u7b26\u4e32\uff0c\u6bd4\u5982 Ljava/lang/String; String desc = in.readUTF(); if (desc.length() == 0) { pts = DubboCodec.EMPTY_CLASS_ARRAY; args = DubboCodec.EMPTY_OBJECT_ARRAY; } else { // \u5c06 desc \u89e3\u6790\u4e3a\u53c2\u6570\u7c7b\u578b\u6570\u7ec4 pts = ReflectUtils.desc2classArray(desc); args = new Object[pts.length]; for (int i = 0; i args.length; i++) { try { // \u89e3\u6790\u8fd0\u884c\u65f6\u53c2\u6570 args[i] = in.readObject(pts[i]); } catch (Exception e) { if (log.isWarnEnabled()) { log.warn( Decode argument failed: + e.getMessage(), e); } } } } // \u8bbe\u7f6e\u53c2\u6570\u7c7b\u578b\u6570\u7ec4 setParameterTypes(pts); // \u901a\u8fc7\u53cd\u5e8f\u5217\u5316\u5f97\u5230\u539f attachment \u7684\u5185\u5bb9 Map String, String map = (Map String, String ) in.readObject(Map.class); if (map != null map.size() 0) { Map String, String attachment = getAttachments(); if (attachment == null) { attachment = new HashMap String, String (); } // \u5c06 map \u4e0e\u5f53\u524d\u5bf9\u8c61\u4e2d\u7684 attachment \u96c6\u5408\u8fdb\u884c\u878d\u5408 attachment.putAll(map); setAttachments(attachment); } // \u5bf9 callback \u7c7b\u578b\u7684\u53c2\u6570\u8fdb\u884c\u5904\u7406 for (int i = 0; i args.length; i++) { args[i] = decodeInvocationArgument(channel, this, pts, i, args[i]); } // \u8bbe\u7f6e\u53c2\u6570\u5217\u8868 setArguments(args); } catch (ClassNotFoundException e) { throw new IOException(StringUtils.toString( Read invocation data failed. , e)); } finally { if (in instanceof Cleanable) { ((Cleanable) in).cleanup(); } } return this; } } \u4e0a\u9762\u7684\u65b9\u6cd5\u901a\u8fc7\u53cd\u5e8f\u5217\u5316\u5c06\u8bf8\u5982 path\u3001version\u3001\u8c03\u7528\u65b9\u6cd5\u540d\u3001\u53c2\u6570\u5217\u8868\u7b49\u4fe1\u606f\u4f9d\u6b21\u89e3\u6790\u51fa\u6765\uff0c\u5e76\u8bbe\u7f6e\u5230\u76f8\u5e94\u7684\u5b57\u6bb5\u4e2d\uff0c\u6700\u7ec8\u5f97\u5230\u4e00\u4e2a\u5177\u6709\u5b8c\u6574\u8c03\u7528\u4fe1\u606f\u7684 DecodeableRpcInvocation \u5bf9\u8c61\u3002 \u5230\u8fd9\u91cc\uff0c\u8bf7\u6c42\u6570\u636e\u89e3\u7801\u7684\u8fc7\u7a0b\u5c31\u5206\u6790\u5b8c\u4e86\u3002\u6b64\u65f6\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a Request \u5bf9\u8c61\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u4f1a\u88ab\u4f20\u9001\u5230\u4e0b\u4e00\u4e2a\u5165\u7ad9\u5904\u7406\u5668\u4e2d\uff0c\u6211\u4eec\u7ee7\u7eed\u5f80\u4e0b\u770b\u3002 2.3.2 \u8c03\u7528\u670d\u52a1 \u89e3\u7801\u5668\u5c06\u6570\u636e\u5305\u89e3\u6790\u6210 Request \u5bf9\u8c61\u540e\uff0cNettyHandler \u7684 messageReceived \u65b9\u6cd5\u7d27\u63a5\u7740\u4f1a\u6536\u5230\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u5e76\u5c06\u8fd9\u4e2a\u5bf9\u8c61\u7ee7\u7eed\u5411\u4e0b\u4f20\u9012\u3002\u8fd9\u671f\u95f4\u8be5\u5bf9\u8c61\u4f1a\u88ab\u4f9d\u6b21\u4f20\u9012\u7ed9 NettyServer\u3001MultiMessageHandler\u3001HeartbeatHandler \u4ee5\u53ca AllChannelHandler\u3002\u6700\u540e\u7531 AllChannelHandler \u5c06\u8be5\u5bf9\u8c61\u5c01\u88c5\u5230 Runnable \u5b9e\u73b0\u7c7b\u5bf9\u8c61\u4e2d\uff0c\u5e76\u5c06 Runnable \u653e\u5165\u7ebf\u7a0b\u6c60\u4e2d\u6267\u884c\u540e\u7eed\u7684\u8c03\u7528\u903b\u8f91\u3002\u6574\u4e2a\u8c03\u7528\u6808\u5982\u4e0b\uff1a NettyHandler#messageReceived(ChannelHandlerContext, MessageEvent) \u2014 AbstractPeer#received(Channel, Object) \u2014 MultiMessageHandler#received(Channel, Object) \u2014 HeartbeatHandler#received(Channel, Object) \u2014 AllChannelHandler#received(Channel, Object) \u2014 ExecutorService#execute(Runnable) // \u7531\u7ebf\u7a0b\u6c60\u6267\u884c\u540e\u7eed\u7684\u8c03\u7528\u903b\u8f91 \u8003\u8651\u5230\u7bc7\u5e45\uff0c\u4ee5\u53ca\u5f88\u591a\u4e2d\u95f4\u8c03\u7528\u7684\u903b\u8f91\u5e76\u975e\u5341\u5206\u91cd\u8981\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u4e0d\u5bf9\u8c03\u7528\u6808\u4e2d\u7684\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u8fdb\u884c\u5206\u6790\u4e86\u3002\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u5206\u6790\u8c03\u7528\u6808\u4e2d\u7684\u5206\u6790\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u8c03\u7528\u65b9\u6cd5\u903b\u8f91\u3002\u5982\u4e0b\uff1a @Sharable public class NettyHandler extends SimpleChannelHandler { private final Map String, Channel channels = new ConcurrentHashMap String, Channel (); private final URL url; private final ChannelHandler handler; public NettyHandler(URL url, ChannelHandler handler) { if (url == null) { throw new IllegalArgumentException( url == null ); } if (handler == null) { throw new IllegalArgumentException( handler == null ); } this.url = url; // \u8fd9\u91cc\u7684 handler \u7c7b\u578b\u4e3a NettyServer this.handler = handler; } public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception { // \u83b7\u53d6 NettyChannel NettyChannel channel = NettyChannel.getOrAddChannel(ctx.getChannel(), url, handler); try { // \u7ee7\u7eed\u5411\u4e0b\u8c03\u7528 handler.received(channel, e.getMessage()); } finally { NettyChannel.removeChannelIfDisconnected(ctx.getChannel()); } } } \u5982\u4e0a\uff0cNettyHandler \u4e2d\u7684 messageReceived \u903b\u8f91\u6bd4\u8f83\u7b80\u5355\u3002\u9996\u5148\u6839\u636e\u4e00\u4e9b\u4fe1\u606f\u83b7\u53d6 NettyChannel \u5b9e\u4f8b\uff0c\u7136\u540e\u5c06 NettyChannel \u5b9e\u4f8b\u4ee5\u53ca Request \u5bf9\u8c61\u5411\u4e0b\u4f20\u9012\u3002\u4e0b\u9762\u518d\u6765\u770b\u770b AllChannelHandler \u7684\u903b\u8f91\uff0c\u5728\u8be6\u7ec6\u5206\u6790\u4ee3\u7801\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u4e86\u89e3\u4e00\u4e0b Dubbo \u4e2d\u7684\u7ebf\u7a0b\u6d3e\u53d1\u6a21\u578b\u3002 2.3.2.1 \u7ebf\u7a0b\u6d3e\u53d1\u6a21\u578b Dubbo \u5c06\u5e95\u5c42\u901a\u4fe1\u6846\u67b6\u4e2d\u63a5\u6536\u8bf7\u6c42\u7684\u7ebf\u7a0b\u79f0\u4e3a IO \u7ebf\u7a0b\u3002\u5982\u679c\u4e00\u4e9b\u4e8b\u4ef6\u5904\u7406\u903b\u8f91\u53ef\u4ee5\u5f88\u5feb\u6267\u884c\u5b8c\uff0c\u6bd4\u5982\u53ea\u5728\u5185\u5b58\u6253\u4e00\u4e2a\u6807\u8bb0\uff0c\u6b64\u65f6\u76f4\u63a5\u5728 IO \u7ebf\u7a0b\u4e0a\u6267\u884c\u8be5\u6bb5\u903b\u8f91\u5373\u53ef\u3002\u4f46\u5982\u679c\u4e8b\u4ef6\u7684\u5904\u7406\u903b\u8f91\u6bd4\u8f83\u8017\u65f6\uff0c\u6bd4\u5982\u8be5\u6bb5\u903b\u8f91\u4f1a\u53d1\u8d77\u6570\u636e\u5e93\u67e5\u8be2\u6216\u8005 HTTP \u8bf7\u6c42\u3002\u6b64\u65f6\u6211\u4eec\u5c31\u4e0d\u5e94\u8be5\u8ba9\u4e8b\u4ef6\u5904\u7406\u903b\u8f91\u5728 IO \u7ebf\u7a0b\u4e0a\u6267\u884c\uff0c\u800c\u662f\u5e94\u8be5\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\u4e2d\u53bb\u6267\u884c\u3002\u539f\u56e0\u4e5f\u5f88\u7b80\u5355\uff0cIO \u7ebf\u7a0b\u4e3b\u8981\u7528\u4e8e\u63a5\u6536\u8bf7\u6c42\uff0c\u5982\u679c IO \u7ebf\u7a0b\u88ab\u5360\u6ee1\uff0c\u5c06\u5bfc\u81f4\u5b83\u4e0d\u80fd\u63a5\u6536\u65b0\u7684\u8bf7\u6c42\u3002 \u4ee5\u4e0a\u5c31\u662f\u7ebf\u7a0b\u6d3e\u53d1\u7684\u80cc\u666f\uff0c\u4e0b\u9762\u6211\u4eec\u518d\u6765\u901a\u8fc7 Dubbo \u8c03\u7528\u56fe\uff0c\u770b\u4e00\u4e0b\u7ebf\u7a0b\u6d3e\u53d1\u5668\u6240\u5904\u7684\u4f4d\u7f6e\u3002 \u5982\u4e0a\u56fe\uff0c\u7ea2\u6846\u4e2d\u7684 Dispatcher \u5c31\u662f\u7ebf\u7a0b\u6d3e\u53d1\u5668\u3002\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0cDispatcher \u771f\u5b9e\u7684\u804c\u8d23\u521b\u5efa\u5177\u6709\u7ebf\u7a0b\u6d3e\u53d1\u80fd\u529b\u7684 ChannelHandler\uff0c\u6bd4\u5982 AllChannelHandler\u3001MessageOnlyChannelHandler \u548c ExecutionChannelHandler \u7b49\uff0c\u5176\u672c\u8eab\u5e76\u4e0d\u5177\u5907\u7ebf\u7a0b\u6d3e\u53d1\u80fd\u529b\u3002Dubbo \u652f\u6301 5 \u79cd\u4e0d\u540c\u7684\u7ebf\u7a0b\u6d3e\u53d1\u7b56\u7565\uff0c\u4e0b\u9762\u901a\u8fc7\u4e00\u4e2a\u8868\u683c\u5217\u4e3e\u4e00\u4e0b\u3002 \u7b56\u7565 \u7528\u9014 all \u6240\u6709\u6d88\u606f\u90fd\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\uff0c\u5305\u62ec\u8bf7\u6c42\uff0c\u54cd\u5e94\uff0c\u8fde\u63a5\u4e8b\u4ef6\uff0c\u65ad\u5f00\u4e8b\u4ef6\u7b49 direct \u6240\u6709\u6d88\u606f\u90fd\u4e0d\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\uff0c\u5168\u90e8\u5728 IO \u7ebf\u7a0b\u4e0a\u76f4\u63a5\u6267\u884c message \u53ea\u6709 \u8bf7\u6c42 \u548c \u54cd\u5e94 \u6d88\u606f\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\uff0c\u5176\u5b83\u6d88\u606f\u5747\u5728 IO \u7ebf\u7a0b\u4e0a\u6267\u884c execution \u53ea\u6709 \u8bf7\u6c42 \u6d88\u606f\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\uff0c\u4e0d\u542b\u54cd\u5e94\u3002\u5176\u5b83\u6d88\u606f\u5747\u5728 IO \u7ebf\u7a0b\u4e0a\u6267\u884c connection \u5728 IO \u7ebf\u7a0b\u4e0a\uff0c\u5c06\u8fde\u63a5\u65ad\u5f00\u4e8b\u4ef6\u653e\u5165\u961f\u5217\uff0c\u6709\u5e8f\u9010\u4e2a\u6267\u884c\uff0c\u5176\u5b83\u6d88\u606f\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60 \u9ed8\u8ba4\u914d\u7f6e\u4e0b\uff0cDubbo \u4f7f\u7528 all \u6d3e\u53d1\u7b56\u7565\uff0c\u5373\u5c06\u6240\u6709\u7684\u6d88\u606f\u90fd\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\u4e2d\u3002\u4e0b\u9762\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b AllChannelHandler \u7684\u4ee3\u7801\u3002 public class AllChannelHandler extends WrappedChannelHandler { public AllChannelHandler(ChannelHandler handler, URL url) { super(handler, url); } /** \u5904\u7406\u8fde\u63a5\u4e8b\u4ef6 */ @Override public void connected(Channel channel) throws RemotingException { // \u83b7\u53d6\u7ebf\u7a0b\u6c60 ExecutorService cexecutor = getExecutorService(); try { // \u5c06\u8fde\u63a5\u4e8b\u4ef6\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\u4e2d\u5904\u7406 cexecutor.execute(new ChannelEventRunnable(channel, handler, ChannelState.CONNECTED)); } catch (Throwable t) { throw new ExecutionException(..., error when process connected event . , t); } } /** \u5904\u7406\u65ad\u5f00\u4e8b\u4ef6 */ @Override public void disconnected(Channel channel) throws RemotingException { ExecutorService cexecutor = getExecutorService(); try { cexecutor.execute(new ChannelEventRunnable(channel, handler, ChannelState.DISCONNECTED)); } catch (Throwable t) { throw new ExecutionException(..., error when process disconnected event . , t); } } /** \u5904\u7406\u8bf7\u6c42\u548c\u54cd\u5e94\u6d88\u606f\uff0c\u8fd9\u91cc\u7684 message \u53d8\u91cf\u7c7b\u578b\u53ef\u80fd\u662f Request\uff0c\u4e5f\u53ef\u80fd\u662f Response */ @Override public void received(Channel channel, Object message) throws RemotingException { ExecutorService cexecutor = getExecutorService(); try { // \u5c06\u8bf7\u6c42\u548c\u54cd\u5e94\u6d88\u606f\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\u4e2d\u5904\u7406 cexecutor.execute(new ChannelEventRunnable(channel, handler, ChannelState.RECEIVED, message)); } catch (Throwable t) { if(message instanceof Request t instanceof RejectedExecutionException){ Request request = (Request)message; // \u5982\u679c\u901a\u4fe1\u65b9\u5f0f\u4e3a\u53cc\u5411\u901a\u4fe1\uff0c\u6b64\u65f6\u5c06 Server side ... threadpool is exhausted // \u9519\u8bef\u4fe1\u606f\u5c01\u88c5\u5230 Response \u4e2d\uff0c\u5e76\u8fd4\u56de\u7ed9\u670d\u52a1\u6d88\u8d39\u65b9\u3002 if(request.isTwoWay()){ String msg = Server side( + url.getIp() + , + url.getPort() + ) threadpool is exhausted ,detail msg: + t.getMessage(); Response response = new Response(request.getId(), request.getVersion()); response.setStatus(Response.SERVER_THREADPOOL_EXHAUSTED_ERROR); response.setErrorMessage(msg); // \u8fd4\u56de\u5305\u542b\u9519\u8bef\u4fe1\u606f\u7684 Response \u5bf9\u8c61 channel.send(response); return; } } throw new ExecutionException(..., error when process received event . , t); } } /** \u5904\u7406\u5f02\u5e38\u4fe1\u606f */ @Override public void caught(Channel channel, Throwable exception) throws RemotingException { ExecutorService cexecutor = getExecutorService(); try { cexecutor.execute(new ChannelEventRunnable(channel, handler, ChannelState.CAUGHT, exception)); } catch (Throwable t) { throw new ExecutionException(..., error when process caught event ... ); } } } \u5982\u4e0a\uff0c\u8bf7\u6c42\u5bf9\u8c61\u4f1a\u88ab\u5c01\u88c5 ChannelEventRunnable \u4e2d\uff0cChannelEventRunnable \u5c06\u4f1a\u662f\u670d\u52a1\u8c03\u7528\u8fc7\u7a0b\u7684\u65b0\u8d77\u70b9\u3002\u6240\u4ee5\u63a5\u4e0b\u6765\u6211\u4eec\u4ee5 ChannelEventRunnable \u4e3a\u8d77\u70b9\u5411\u4e0b\u63a2\u7d22\u3002 2.3.2.2 \u8c03\u7528\u670d\u52a1 \u672c\u5c0f\u8282\uff0c\u6211\u4eec\u4ece ChannelEventRunnable \u5f00\u59cb\u5206\u6790\uff0c\u8be5\u7c7b\u7684\u4e3b\u8981\u4ee3\u7801\u5982\u4e0b\uff1a public class ChannelEventRunnable implements Runnable { private final ChannelHandler handler; private final Channel channel; private final ChannelState state; private final Throwable exception; private final Object message; @Override public void run() { // \u68c0\u6d4b\u901a\u9053\u72b6\u6001\uff0c\u5bf9\u4e8e\u8bf7\u6c42\u6216\u54cd\u5e94\u6d88\u606f\uff0c\u6b64\u65f6 state = RECEIVED if (state == ChannelState.RECEIVED) { try { // \u5c06 channel \u548c message \u4f20\u7ed9 ChannelHandler \u5bf9\u8c61\uff0c\u8fdb\u884c\u540e\u7eed\u7684\u8c03\u7528 handler.received(channel, message); } catch (Exception e) { logger.warn( ... operation error, channel is ... message is ... ); } } // \u5176\u4ed6\u6d88\u606f\u7c7b\u578b\u901a\u8fc7 switch \u8fdb\u884c\u5904\u7406 else { switch (state) { case CONNECTED: try { handler.connected(channel); } catch (Exception e) { logger.warn( ... operation error, channel is ... ); } break; case DISCONNECTED: // ... case SENT: // ... case CAUGHT: // ... default: logger.warn( unknown state: + state + , message is + message); } } } } \u5982\u4e0a\uff0c\u8bf7\u6c42\u548c\u54cd\u5e94\u6d88\u606f\u51fa\u73b0\u9891\u7387\u660e\u663e\u6bd4\u5176\u4ed6\u7c7b\u578b\u6d88\u606f\u9ad8\uff0c\u6240\u4ee5\u8fd9\u91cc\u5bf9\u8be5\u7c7b\u578b\u7684\u6d88\u606f\u8fdb\u884c\u4e86\u9488\u5bf9\u6027\u5224\u65ad\u3002ChannelEventRunnable \u4ec5\u662f\u4e00\u4e2a\u4e2d\u8f6c\u7ad9\uff0c\u5b83\u7684 run \u65b9\u6cd5\u4e2d\u5e76\u4e0d\u5305\u542b\u5177\u4f53\u7684\u8c03\u7528\u903b\u8f91\uff0c\u4ec5\u7528\u4e8e\u5c06\u53c2\u6570\u4f20\u7ed9\u5176\u4ed6 ChannelHandler \u5bf9\u8c61\u8fdb\u884c\u5904\u7406\uff0c\u8be5\u5bf9\u8c61\u7c7b\u578b\u4e3a DecodeHandler\u3002 public class DecodeHandler extends AbstractChannelHandlerDelegate { public DecodeHandler(ChannelHandler handler) { super(handler); } @Override public void received(Channel channel, Object message) throws RemotingException { if (message instanceof Decodeable) { // \u5bf9 Decodeable \u63a5\u53e3\u5b9e\u73b0\u7c7b\u5bf9\u8c61\u8fdb\u884c\u89e3\u7801 decode(message); } if (message instanceof Request) { // \u5bf9 Request \u7684 data \u5b57\u6bb5\u8fdb\u884c\u89e3\u7801 decode(((Request) message).getData()); } if (message instanceof Response) { // \u5bf9 Request \u7684 result \u5b57\u6bb5\u8fdb\u884c\u89e3\u7801 decode(((Response) message).getResult()); } // \u6267\u884c\u540e\u7eed\u903b\u8f91 handler.received(channel, message); } private void decode(Object message) { // Decodeable \u63a5\u53e3\u76ee\u524d\u6709\u4e24\u4e2a\u5b9e\u73b0\u7c7b\uff0c // \u5206\u522b\u4e3a DecodeableRpcInvocation \u548c DecodeableRpcResult if (message != null message instanceof Decodeable) { try { // \u6267\u884c\u89e3\u7801\u903b\u8f91 ((Decodeable) message).decode(); } catch (Throwable e) { if (log.isWarnEnabled()) { log.warn( Call Decodeable.decode failed: + e.getMessage(), e); } } } } } DecodeHandler \u4e3b\u8981\u662f\u5305\u542b\u4e86\u4e00\u4e9b\u89e3\u7801\u903b\u8f91\u30022.2.1 \u8282\u5206\u6790\u8bf7\u6c42\u89e3\u7801\u65f6\u8bf4\u8fc7\uff0c\u8bf7\u6c42\u89e3\u7801\u53ef\u5728 IO \u7ebf\u7a0b\u4e0a\u6267\u884c\uff0c\u4e5f\u53ef\u5728\u7ebf\u7a0b\u6c60\u4e2d\u6267\u884c\uff0c\u8fd9\u4e2a\u53d6\u51b3\u4e8e\u8fd0\u884c\u65f6\u914d\u7f6e\u3002DecodeHandler \u5b58\u5728\u7684\u610f\u4e49\u5c31\u662f\u4fdd\u8bc1\u8bf7\u6c42\u6216\u54cd\u5e94\u5bf9\u8c61\u53ef\u5728\u7ebf\u7a0b\u6c60\u4e2d\u88ab\u89e3\u7801\u3002\u89e3\u7801\u5b8c\u6bd5\u540e\uff0c\u5b8c\u5168\u89e3\u7801\u540e\u7684 Request \u5bf9\u8c61\u4f1a\u7ee7\u7eed\u5411\u540e\u4f20\u9012\uff0c\u4e0b\u4e00\u7ad9\u662f HeaderExchangeHandler\u3002 public class HeaderExchangeHandler implements ChannelHandlerDelegate { private final ExchangeHandler handler; public HeaderExchangeHandler(ExchangeHandler handler) { if (handler == null) { throw new IllegalArgumentException( handler == null ); } this.handler = handler; } @Override public void received(Channel channel, Object message) throws RemotingException { channel.setAttribute(KEY_READ_TIMESTAMP, System.currentTimeMillis()); ExchangeChannel exchangeChannel = HeaderExchangeChannel.getOrAddChannel(channel); try { // \u5904\u7406\u8bf7\u6c42\u5bf9\u8c61 if (message instanceof Request) { Request request = (Request) message; if (request.isEvent()) { // \u5904\u7406\u4e8b\u4ef6 handlerEvent(channel, request); } // \u5904\u7406\u666e\u901a\u7684\u8bf7\u6c42 else { // \u53cc\u5411\u901a\u4fe1 if (request.isTwoWay()) { // \u5411\u540e\u8c03\u7528\u670d\u52a1\uff0c\u5e76\u5f97\u5230\u8c03\u7528\u7ed3\u679c Response response = handleRequest(exchangeChannel, request); // \u5c06\u8c03\u7528\u7ed3\u679c\u8fd4\u56de\u7ed9\u670d\u52a1\u6d88\u8d39\u7aef channel.send(response); } // \u5982\u679c\u662f\u5355\u5411\u901a\u4fe1\uff0c\u4ec5\u5411\u540e\u8c03\u7528\u6307\u5b9a\u670d\u52a1\u5373\u53ef\uff0c\u65e0\u9700\u8fd4\u56de\u8c03\u7528\u7ed3\u679c else { handler.received(exchangeChannel, request.getData()); } } } // \u5904\u7406\u54cd\u5e94\u5bf9\u8c61\uff0c\u670d\u52a1\u6d88\u8d39\u65b9\u4f1a\u6267\u884c\u6b64\u5904\u903b\u8f91\uff0c\u540e\u9762\u5206\u6790 else if (message instanceof Response) { handleResponse(channel, (Response) message); } else if (message instanceof String) { // telnet \u76f8\u5173\uff0c\u5ffd\u7565 } else { handler.received(exchangeChannel, message); } } finally { HeaderExchangeChannel.removeChannelIfDisconnected(channel); } } Response handleRequest(ExchangeChannel channel, Request req) throws RemotingException { Response res = new Response(req.getId(), req.getVersion()); // \u68c0\u6d4b\u8bf7\u6c42\u662f\u5426\u5408\u6cd5\uff0c\u4e0d\u5408\u6cd5\u5219\u8fd4\u56de\u72b6\u6001\u7801\u4e3a BAD_REQUEST \u7684\u54cd\u5e94 if (req.isBroken()) { Object data = req.getData(); String msg; if (data == null) msg = null; else if (data instanceof Throwable) msg = StringUtils.toString((Throwable) data); else msg = data.toString(); res.setErrorMessage( Fail to decode request due to: + msg); // \u8bbe\u7f6e BAD_REQUEST \u72b6\u6001 res.setStatus(Response.BAD_REQUEST); return res; } // \u83b7\u53d6 data \u5b57\u6bb5\u503c\uff0c\u4e5f\u5c31\u662f RpcInvocation \u5bf9\u8c61 Object msg = req.getData(); try { // \u7ee7\u7eed\u5411\u4e0b\u8c03\u7528 Object result = handler.reply(channel, msg); // \u8bbe\u7f6e OK \u72b6\u6001\u7801 res.setStatus(Response.OK); // \u8bbe\u7f6e\u8c03\u7528\u7ed3\u679c res.setResult(result); } catch (Throwable e) { // \u82e5\u8c03\u7528\u8fc7\u7a0b\u51fa\u73b0\u5f02\u5e38\uff0c\u5219\u8bbe\u7f6e SERVICE_ERROR\uff0c\u8868\u793a\u670d\u52a1\u7aef\u5f02\u5e38 res.setStatus(Response.SERVICE_ERROR); res.setErrorMessage(StringUtils.toString(e)); } return res; } } \u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u770b\u5230\u4e86\u6bd4\u8f83\u6e05\u6670\u7684\u8bf7\u6c42\u548c\u54cd\u5e94\u903b\u8f91\u3002\u5bf9\u4e8e\u53cc\u5411\u901a\u4fe1\uff0cHeaderExchangeHandler \u9996\u5148\u5411\u540e\u8fdb\u884c\u8c03\u7528\uff0c\u5f97\u5230\u8c03\u7528\u7ed3\u679c\u3002\u7136\u540e\u5c06\u8c03\u7528\u7ed3\u679c\u5c01\u88c5\u5230 Response \u5bf9\u8c61\u4e2d\uff0c\u6700\u540e\u518d\u5c06\u8be5\u5bf9\u8c61\u8fd4\u56de\u7ed9\u670d\u52a1\u6d88\u8d39\u65b9\u3002\u5982\u679c\u8bf7\u6c42\u4e0d\u5408\u6cd5\uff0c\u6216\u8005\u8c03\u7528\u5931\u8d25\uff0c\u5219\u5c06\u9519\u8bef\u4fe1\u606f\u5c01\u88c5\u5230 Response \u5bf9\u8c61\u4e2d\uff0c\u5e76\u8fd4\u56de\u7ed9\u670d\u52a1\u6d88\u8d39\u65b9\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u7ee7\u7eed\u5411\u540e\u5206\u6790\uff0c\u628a\u5269\u4f59\u7684\u8c03\u7528\u8fc7\u7a0b\u5206\u6790\u5b8c\u3002\u4e0b\u9762\u5206\u6790\u5b9a\u4e49\u5728 DubboProtocol \u7c7b\u4e2d\u7684\u533f\u540d\u7c7b\u5bf9\u8c61\u903b\u8f91\uff0c\u5982\u4e0b\uff1a public class DubboProtocol extends AbstractProtocol { public static final String NAME = dubbo ; private ExchangeHandler requestHandler = new ExchangeHandlerAdapter() { @Override public Object reply(ExchangeChannel channel, Object message) throws RemotingException { if (message instanceof Invocation) { Invocation inv = (Invocation) message; // \u83b7\u53d6 Invoker \u5b9e\u4f8b Invoker ? invoker = getInvoker(channel, inv); if (Boolean.TRUE.toString().equals(inv.getAttachments().get(IS_CALLBACK_SERVICE_INVOKE))) { // \u56de\u8c03\u76f8\u5173\uff0c\u5ffd\u7565 } RpcContext.getContext().setRemoteAddress(channel.getRemoteAddress()); // \u901a\u8fc7 Invoker \u8c03\u7528\u5177\u4f53\u7684\u670d\u52a1 return invoker.invoke(inv); } throw new RemotingException(channel, Unsupported request: ... ); } // \u5ffd\u7565\u5176\u4ed6\u65b9\u6cd5 } Invoker ? getInvoker(Channel channel, Invocation inv) throws RemotingException { // \u5ffd\u7565\u56de\u8c03\u548c\u672c\u5730\u5b58\u6839\u76f8\u5173\u903b\u8f91 // ... int port = channel.getLocalAddress().getPort(); // \u8ba1\u7b97 service key\uff0c\u683c\u5f0f\u4e3a groupName/serviceName:serviceVersion:port\u3002\u6bd4\u5982\uff1a // dubbo/com.alibaba.dubbo.demo.DemoService:1.0.0:20880 String serviceKey = serviceKey(port, path, inv.getAttachments().get(Constants.VERSION_KEY), inv.getAttachments().get(Constants.GROUP_KEY)); // \u4ece exporterMap \u67e5\u627e\u4e0e serviceKey \u76f8\u5bf9\u5e94\u7684 DubboExporter \u5bf9\u8c61\uff0c // \u670d\u52a1\u5bfc\u51fa\u8fc7\u7a0b\u4e2d\u4f1a\u5c06 serviceKey, DubboExporter \u6620\u5c04\u5173\u7cfb\u5b58\u50a8\u5230 exporterMap \u96c6\u5408\u4e2d DubboExporter ? exporter = (DubboExporter ? ) exporterMap.get(serviceKey); if (exporter == null) throw new RemotingException(channel, Not found exported service ... ); // \u83b7\u53d6 Invoker \u5bf9\u8c61\uff0c\u5e76\u8fd4\u56de return exporter.getInvoker(); } // \u5ffd\u7565\u5176\u4ed6\u65b9\u6cd5 } \u4ee5\u4e0a\u903b\u8f91\u7528\u4e8e\u83b7\u53d6\u4e0e\u6307\u5b9a\u670d\u52a1\u5bf9\u5e94\u7684 Invoker \u5b9e\u4f8b\uff0c\u5e76\u901a\u8fc7 Invoker \u7684 invoke \u65b9\u6cd5\u8c03\u7528\u670d\u52a1\u903b\u8f91\u3002invoke \u65b9\u6cd5\u5b9a\u4e49\u5728 AbstractProxyInvoker \u4e2d\uff0c\u4ee3\u7801\u5982\u4e0b\u3002 public abstract class AbstractProxyInvoker T implements Invoker T { @Override public Result invoke(Invocation invocation) throws RpcException { try { // \u8c03\u7528 doInvoke \u6267\u884c\u540e\u7eed\u7684\u8c03\u7528\uff0c\u5e76\u5c06\u8c03\u7528\u7ed3\u679c\u5c01\u88c5\u5230 RpcResult \u4e2d\uff0c\u5e76 return new RpcResult(doInvoke(proxy, invocation.getMethodName(), invocation.getParameterTypes(), invocation.getArguments())); } catch (InvocationTargetException e) { return new RpcResult(e.getTargetException()); } catch (Throwable e) { throw new RpcException( Failed to invoke remote proxy method ... ); } } protected abstract Object doInvoke(T proxy, String methodName, Class ? [] parameterTypes, Object[] arguments) throws Throwable; } \u5982\u4e0a\uff0cdoInvoke \u662f\u4e00\u4e2a\u62bd\u8c61\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u9700\u8981\u7531\u5177\u4f53\u7684 Invoker \u5b9e\u4f8b\u5b9e\u73b0\u3002Invoker \u5b9e\u4f8b\u662f\u5728\u8fd0\u884c\u65f6\u901a\u8fc7 JavassistProxyFactory \u521b\u5efa\u7684\uff0c\u521b\u5efa\u903b\u8f91\u5982\u4e0b\uff1a public class JavassistProxyFactory extends AbstractProxyFactory { // \u7701\u7565\u5176\u4ed6\u65b9\u6cd5 @Override public T Invoker T getInvoker(T proxy, Class T type, URL url) { final Wrapper wrapper = Wrapper.getWrapper(proxy.getClass().getName().indexOf('$') 0 ? proxy.getClass() : type); // \u521b\u5efa\u533f\u540d\u7c7b\u5bf9\u8c61 return new AbstractProxyInvoker T (proxy, type, url) { @Override protected Object doInvoke(T proxy, String methodName, Class ? [] parameterTypes, Object[] arguments) throws Throwable { // \u8c03\u7528 invokeMethod \u65b9\u6cd5\u8fdb\u884c\u540e\u7eed\u7684\u8c03\u7528 return wrapper.invokeMethod(proxy, methodName, parameterTypes, arguments); } }; } } Wrapper \u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u5176\u4e2d invokeMethod \u662f\u4e00\u4e2a\u62bd\u8c61\u65b9\u6cd5\u3002Dubbo \u4f1a\u5728\u8fd0\u884c\u65f6\u901a\u8fc7 Javassist \u6846\u67b6\u4e3a Wrapper \u751f\u6210\u5b9e\u73b0\u7c7b\uff0c\u5e76\u5b9e\u73b0 invokeMethod \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u6700\u7ec8\u4f1a\u6839\u636e\u8c03\u7528\u4fe1\u606f\u8c03\u7528\u5177\u4f53\u7684\u670d\u52a1\u3002\u4ee5 DemoServiceImpl \u4e3a\u4f8b\uff0cJavassist \u4e3a\u5176\u751f\u6210\u7684\u4ee3\u7406\u7c7b\u5982\u4e0b\u3002 /** Wrapper0 \u662f\u5728\u8fd0\u884c\u65f6\u751f\u6210\u7684\uff0c\u5927\u5bb6\u53ef\u4f7f\u7528 Arthas \u8fdb\u884c\u53cd\u7f16\u8bd1 */ public class Wrapper0 extends Wrapper implements ClassGenerator.DC { public static String[] pns; public static Map pts; public static String[] mns; public static String[] dmns; public static Class[] mts0; // \u7701\u7565\u5176\u4ed6\u65b9\u6cd5 public Object invokeMethod(Object object, String string, Class[] arrclass, Object[] arrobject) throws InvocationTargetException { DemoService demoService; try { // \u7c7b\u578b\u8f6c\u6362 demoService = (DemoService)object; } catch (Throwable throwable) { throw new IllegalArgumentException(throwable); } try { // \u6839\u636e\u65b9\u6cd5\u540d\u8c03\u7528\u6307\u5b9a\u7684\u65b9\u6cd5 if ( sayHello .equals(string) arrclass.length == 1) { return demoService.sayHello((String)arrobject[0]); } } catch (Throwable throwable) { throw new InvocationTargetException(throwable); } throw new NoSuchMethodException(new StringBuffer().append( Not found method \\ ).append(string).append( \\ in class com.alibaba.dubbo.demo.DemoService. ).toString()); } } \u5230\u8fd9\u91cc\uff0c\u6574\u4e2a\u670d\u52a1\u8c03\u7528\u8fc7\u7a0b\u5c31\u5206\u6790\u5b8c\u4e86\u3002\u6700\u540e\u628a\u8c03\u7528\u8fc7\u7a0b\u8d34\u51fa\u6765\uff0c\u5982\u4e0b\uff1a ChannelEventRunnable#run() \u2014 DecodeHandler#received(Channel, Object) \u2014 HeaderExchangeHandler#received(Channel, Object) \u2014 HeaderExchangeHandler#handleRequest(ExchangeChannel, Request) \u2014 DubboProtocol.requestHandler#reply(ExchangeChannel, Object) \u2014 Filter#invoke(Invoker, Invocation) \u2014 AbstractProxyInvoker#invoke(Invocation) \u2014 Wrapper0#invokeMethod(Object, String, Class[], Object[]) \u2014 DemoServiceImpl#sayHello(String) 2.4 \u670d\u52a1\u63d0\u4f9b\u65b9\u8fd4\u56de\u8c03\u7528\u7ed3\u679c \u670d\u52a1\u63d0\u4f9b\u65b9\u8c03\u7528\u6307\u5b9a\u670d\u52a1\u540e\uff0c\u4f1a\u5c06\u8c03\u7528\u7ed3\u679c\u5c01\u88c5\u5230 Response \u5bf9\u8c61\u4e2d\uff0c\u5e76\u5c06\u8be5\u5bf9\u8c61\u8fd4\u56de\u7ed9\u670d\u52a1\u6d88\u8d39\u65b9\u3002\u670d\u52a1\u63d0\u4f9b\u65b9\u4e5f\u662f\u901a\u8fc7 NettyChannel \u7684 send \u65b9\u6cd5\u5c06 Response \u5bf9\u8c61\u8fd4\u56de\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5728 2.2.1 \u8282\u5206\u6790\u8fc7\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5728\u91cd\u590d\u5206\u6790\u4e86\u3002\u672c\u8282\u6211\u4eec\u4ec5\u9700\u5173\u6ce8 Response \u5bf9\u8c61\u7684\u7f16\u7801\u8fc7\u7a0b\u5373\u53ef\uff0c\u8fd9\u91cc\u4ecd\u7136\u7701\u7565\u4e00\u4e9b\u4e2d\u95f4\u8c03\u7528\uff0c\u76f4\u63a5\u5206\u6790\u5177\u4f53\u7684\u7f16\u7801\u903b\u8f91\u3002 public class ExchangeCodec extends TelnetCodec { public void encode(Channel channel, ChannelBuffer buffer, Object msg) throws IOException { if (msg instanceof Request) { encodeRequest(channel, buffer, (Request) msg); } else if (msg instanceof Response) { // \u5bf9\u54cd\u5e94\u5bf9\u8c61\u8fdb\u884c\u7f16\u7801 encodeResponse(channel, buffer, (Response) msg); } else { super.encode(channel, buffer, msg); } } protected void encodeResponse(Channel channel, ChannelBuffer buffer, Response res) throws IOException { int savedWriteIndex = buffer.writerIndex(); try { Serialization serialization = getSerialization(channel); // \u521b\u5efa\u6d88\u606f\u5934\u5b57\u8282\u6570\u7ec4 byte[] header = new byte[HEADER_LENGTH]; // \u8bbe\u7f6e\u9b54\u6570 Bytes.short2bytes(MAGIC, header); // \u8bbe\u7f6e\u5e8f\u5217\u5316\u5668\u7f16\u53f7 header[2] = serialization.getContentTypeId(); if (res.isHeartbeat()) header[2] |= FLAG_EVENT; // \u83b7\u53d6\u54cd\u5e94\u72b6\u6001 byte status = res.getStatus(); // \u8bbe\u7f6e\u54cd\u5e94\u72b6\u6001 header[3] = status; // \u8bbe\u7f6e\u8bf7\u6c42\u7f16\u53f7 Bytes.long2bytes(res.getId(), header, 4); // \u66f4\u65b0 writerIndex\uff0c\u4e3a\u6d88\u606f\u5934\u9884\u7559 16 \u4e2a\u5b57\u8282\u7684\u7a7a\u95f4 buffer.writerIndex(savedWriteIndex + HEADER_LENGTH); ChannelBufferOutputStream bos = new ChannelBufferOutputStream(buffer); ObjectOutput out = serialization.serialize(channel.getUrl(), bos); if (status == Response.OK) { if (res.isHeartbeat()) { // \u5bf9\u5fc3\u8df3\u54cd\u5e94\u7ed3\u679c\u8fdb\u884c\u5e8f\u5217\u5316\uff0c\u5df2\u5e9f\u5f03 encodeHeartbeatData(channel, out, res.getResult()); } else { // \u5bf9\u8c03\u7528\u7ed3\u679c\u8fdb\u884c\u5e8f\u5217\u5316 encodeResponseData(channel, out, res.getResult(), res.getVersion()); } } else { // \u5bf9\u9519\u8bef\u4fe1\u606f\u8fdb\u884c\u5e8f\u5217\u5316 out.writeUTF(res.getErrorMessage()) }; out.flushBuffer(); if (out instanceof Cleanable) { ((Cleanable) out).cleanup(); } bos.flush(); bos.close(); // \u83b7\u53d6\u5199\u5165\u7684\u5b57\u8282\u6570\uff0c\u4e5f\u5c31\u662f\u6d88\u606f\u4f53\u957f\u5ea6 int len = bos.writtenBytes(); checkPayload(channel, len); // \u5c06\u6d88\u606f\u4f53\u957f\u5ea6\u5199\u5165\u5230\u6d88\u606f\u5934\u4e2d Bytes.int2bytes(len, header, 12); // \u5c06 buffer \u6307\u9488\u79fb\u52a8\u5230 savedWriteIndex\uff0c\u4e3a\u5199\u6d88\u606f\u5934\u505a\u51c6\u5907 buffer.writerIndex(savedWriteIndex); // \u4ece savedWriteIndex \u4e0b\u6807\u5904\u5199\u5165\u6d88\u606f\u5934 buffer.writeBytes(header); // \u8bbe\u7f6e\u65b0\u7684 writerIndex\uff0cwriterIndex = \u539f\u5199\u4e0b\u6807 + \u6d88\u606f\u5934\u957f\u5ea6 + \u6d88\u606f\u4f53\u957f\u5ea6 buffer.writerIndex(savedWriteIndex + HEADER_LENGTH + len); } catch (Throwable t) { // \u5f02\u5e38\u5904\u7406\u903b\u8f91\u4e0d\u662f\u5f88\u96be\u7406\u89e3\uff0c\u4f46\u662f\u4ee3\u7801\u7565\u591a\uff0c\u8fd9\u91cc\u5ffd\u7565\u4e86 } } } public class DubboCodec extends ExchangeCodec implements Codec2 { protected void encodeResponseData(Channel channel, ObjectOutput out, Object data, String version) throws IOException { Result result = (Result) data; // \u68c0\u6d4b\u5f53\u524d\u534f\u8bae\u7248\u672c\u662f\u5426\u652f\u6301\u5e26\u6709 attachment \u96c6\u5408\u7684 Response \u5bf9\u8c61 boolean attach = Version.isSupportResponseAttachment(version); Throwable th = result.getException(); // \u5f02\u5e38\u4fe1\u606f\u4e3a\u7a7a if (th == null) { Object ret = result.getValue(); // \u8c03\u7528\u7ed3\u679c\u4e3a\u7a7a if (ret == null) { // \u5e8f\u5217\u5316\u54cd\u5e94\u7c7b\u578b out.writeByte(attach ? RESPONSE_NULL_VALUE_WITH_ATTACHMENTS : RESPONSE_NULL_VALUE); } // \u8c03\u7528\u7ed3\u679c\u975e\u7a7a else { // \u5e8f\u5217\u5316\u54cd\u5e94\u7c7b\u578b out.writeByte(attach ? RESPONSE_VALUE_WITH_ATTACHMENTS : RESPONSE_VALUE); // \u5e8f\u5217\u5316\u8c03\u7528\u7ed3\u679c out.writeObject(ret); } } // \u5f02\u5e38\u4fe1\u606f\u975e\u7a7a else { // \u5e8f\u5217\u5316\u54cd\u5e94\u7c7b\u578b out.writeByte(attach ? RESPONSE_WITH_EXCEPTION_WITH_ATTACHMENTS : RESPONSE_WITH_EXCEPTION); // \u5e8f\u5217\u5316\u5f02\u5e38\u5bf9\u8c61 out.writeObject(th); } if (attach) { // \u8bb0\u5f55 Dubbo \u534f\u8bae\u7248\u672c result.getAttachments().put(Constants.DUBBO_VERSION_KEY, Version.getProtocolVersion()); // \u5e8f\u5217\u5316 attachments \u96c6\u5408 out.writeObject(result.getAttachments()); } } } \u4ee5\u4e0a\u5c31\u662f Response \u5bf9\u8c61\u7f16\u7801\u7684\u8fc7\u7a0b\uff0c\u548c\u524d\u9762\u5206\u6790\u7684 Request \u5bf9\u8c61\u7f16\u7801\u8fc7\u7a0b\u5f88\u76f8\u4f3c\u3002\u5982\u679c\u5927\u5bb6\u80fd\u770b Request \u5bf9\u8c61\u7684\u7f16\u7801\u903b\u8f91\uff0c\u90a3\u4e48\u8fd9\u91cc\u7684 Response \u5bf9\u8c61\u7684\u7f16\u7801\u903b\u8f91\u4e5f\u4e0d\u96be\u7406\u89e3\uff0c\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u518d\u6765\u5206\u6790\u53cc\u5411\u901a\u4fe1\u7684\u6700\u540e\u4e00\u73af \u2014\u2014 \u670d\u52a1\u6d88\u8d39\u65b9\u63a5\u6536\u8c03\u7528\u7ed3\u679c\u3002 2.5 \u670d\u52a1\u6d88\u8d39\u65b9\u63a5\u6536\u8c03\u7528\u7ed3\u679c \u670d\u52a1\u6d88\u8d39\u65b9\u5728\u6536\u5230\u54cd\u5e94\u6570\u636e\u540e\uff0c\u9996\u5148\u8981\u505a\u7684\u4e8b\u60c5\u662f\u5bf9\u54cd\u5e94\u6570\u636e\u8fdb\u884c\u89e3\u7801\uff0c\u5f97\u5230 Response \u5bf9\u8c61\u3002\u7136\u540e\u518d\u5c06\u8be5\u5bf9\u8c61\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u5165\u7ad9\u5904\u7406\u5668\uff0c\u8fd9\u4e2a\u5165\u7ad9\u5904\u7406\u5668\u5c31\u662f NettyHandler\u3002\u63a5\u4e0b\u6765 NettyHandler \u4f1a\u5c06\u8fd9\u4e2a\u5bf9\u8c61\u7ee7\u7eed\u5411\u4e0b\u4f20\u9012\uff0c\u6700\u540e AllChannelHandler \u7684 received \u65b9\u6cd5\u4f1a\u6536\u5230\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u5e76\u5c06\u8fd9\u4e2a\u5bf9\u8c61\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\u4e2d\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u548c\u670d\u52a1\u63d0\u4f9b\u65b9\u63a5\u6536\u8bf7\u6c42\u7684\u8fc7\u7a0b\u662f\u4e00\u6837\u7684\uff0c\u56e0\u6b64\u8fd9\u91cc\u5c31\u4e0d\u91cd\u590d\u5206\u6790\u4e86\u3002\u672c\u8282\u6211\u4eec\u91cd\u70b9\u5206\u6790\u4e24\u4e2a\u65b9\u9762\u7684\u5185\u5bb9\uff0c\u4e00\u662f\u54cd\u5e94\u6570\u636e\u7684\u89e3\u7801\u8fc7\u7a0b\uff0c\u4e8c\u662f Dubbo \u5982\u4f55\u5c06\u8c03\u7528\u7ed3\u679c\u4f20\u9012\u7ed9\u7528\u6237\u7ebf\u7a0b\u7684\u3002\u4e0b\u9762\u5148\u6765\u5206\u6790\u54cd\u5e94\u6570\u636e\u7684\u89e3\u7801\u8fc7\u7a0b\u3002 2.5.1 \u54cd\u5e94\u6570\u636e\u89e3\u7801 \u54cd\u5e94\u6570\u636e\u89e3\u7801\u903b\u8f91\u4e3b\u8981\u7684\u903b\u8f91\u5c01\u88c5\u5728 DubboCodec \u4e2d\uff0c\u6211\u4eec\u76f4\u63a5\u5206\u6790\u8fd9\u4e2a\u7c7b\u7684\u4ee3\u7801\u3002\u5982\u4e0b\uff1a public class DubboCodec extends ExchangeCodec implements Codec2 { @Override protected Object decodeBody(Channel channel, InputStream is, byte[] header) throws IOException { byte flag = header[2], proto = (byte) (flag SERIALIZATION_MASK); Serialization s = CodecSupport.getSerialization(channel.getUrl(), proto); // \u83b7\u53d6\u8bf7\u6c42\u7f16\u53f7 long id = Bytes.bytes2long(header, 4); // \u68c0\u6d4b\u6d88\u606f\u7c7b\u578b\uff0c\u82e5\u4e0b\u9762\u7684\u6761\u4ef6\u6210\u7acb\uff0c\u8868\u660e\u6d88\u606f\u7c7b\u578b\u4e3a Response if ((flag FLAG_REQUEST) == 0) { // \u521b\u5efa Response \u5bf9\u8c61 Response res = new Response(id); // \u68c0\u6d4b\u4e8b\u4ef6\u6807\u5fd7\u4f4d if ((flag FLAG_EVENT) != 0) { // \u8bbe\u7f6e\u5fc3\u8df3\u4e8b\u4ef6 res.setEvent(Response.HEARTBEAT_EVENT); } // \u83b7\u53d6\u54cd\u5e94\u72b6\u6001 byte status = header[3]; // \u8bbe\u7f6e\u54cd\u5e94\u72b6\u6001 res.setStatus(status); // \u5982\u679c\u54cd\u5e94\u72b6\u6001\u4e3a OK\uff0c\u8868\u660e\u8c03\u7528\u8fc7\u7a0b\u6b63\u5e38 if (status == Response.OK) { try { Object data; if (res.isHeartbeat()) { // \u53cd\u5e8f\u5217\u5316\u5fc3\u8df3\u6570\u636e\uff0c\u5df2\u5e9f\u5f03 data = decodeHeartbeatData(channel, deserialize(s, channel.getUrl(), is)); } else if (res.isEvent()) { // \u53cd\u5e8f\u5217\u5316\u4e8b\u4ef6\u6570\u636e data = decodeEventData(channel, deserialize(s, channel.getUrl(), is)); } else { DecodeableRpcResult result; // \u6839\u636e url \u53c2\u6570\u51b3\u5b9a\u662f\u5426\u5728 IO \u7ebf\u7a0b\u4e0a\u6267\u884c\u89e3\u7801\u903b\u8f91 if (channel.getUrl().getParameter( Constants.DECODE_IN_IO_THREAD_KEY, Constants.DEFAULT_DECODE_IN_IO_THREAD)) { // \u521b\u5efa DecodeableRpcResult \u5bf9\u8c61 result = new DecodeableRpcResult(channel, res, is, (Invocation) getRequestData(id), proto); // \u8fdb\u884c\u540e\u7eed\u7684\u89e3\u7801\u5de5\u4f5c result.decode(); } else { // \u521b\u5efa DecodeableRpcResult \u5bf9\u8c61 result = new DecodeableRpcResult(channel, res, new UnsafeByteArrayInputStream(readMessageData(is)), (Invocation) getRequestData(id), proto); } data = result; } // \u8bbe\u7f6e DecodeableRpcResult \u5bf9\u8c61\u5230 Response \u5bf9\u8c61\u4e2d res.setResult(data); } catch (Throwable t) { // \u89e3\u7801\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u4e86\u9519\u8bef\uff0c\u6b64\u65f6\u8bbe\u7f6e CLIENT_ERROR \u72b6\u6001\u7801\u5230 Response \u5bf9\u8c61\u4e2d res.setStatus(Response.CLIENT_ERROR); res.setErrorMessage(StringUtils.toString(t)); } } // \u54cd\u5e94\u72b6\u6001\u975e OK\uff0c\u8868\u660e\u8c03\u7528\u8fc7\u7a0b\u51fa\u73b0\u4e86\u5f02\u5e38 else { // \u53cd\u5e8f\u5217\u5316\u5f02\u5e38\u4fe1\u606f\uff0c\u5e76\u8bbe\u7f6e\u5230 Response \u5bf9\u8c61\u4e2d res.setErrorMessage(deserialize(s, channel.getUrl(), is).readUTF()); } return res; } else { // \u5bf9\u8bf7\u6c42\u6570\u636e\u8fdb\u884c\u89e3\u7801\uff0c\u524d\u9762\u5df2\u5206\u6790\u8fc7\uff0c\u6b64\u5904\u5ffd\u7565 } } } \u4ee5\u4e0a\u5c31\u662f\u54cd\u5e94\u6570\u636e\u7684\u89e3\u7801\u8fc7\u7a0b\uff0c\u4e0a\u9762\u903b\u8f91\u770b\u8d77\u6765\u662f\u4e0d\u662f\u4f3c\u66fe\u76f8\u8bc6\u3002\u5bf9\u7684\uff0c\u6211\u4eec\u5728\u524d\u9762\u7ae0\u8282\u5206\u6790\u8fc7 DubboCodec \u7684 decodeBody \u65b9\u6cd5\u4e2d\u5173\u4e8e\u8bf7\u6c42\u6570\u636e\u7684\u89e3\u7801\u8fc7\u7a0b\uff0c\u8be5\u8fc7\u7a0b\u548c\u54cd\u5e94\u6570\u636e\u7684\u89e3\u7801\u8fc7\u7a0b\u5f88\u76f8\u4f3c\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u7ee7\u7eed\u5206\u6790\u8c03\u7528\u7ed3\u679c\u7684\u53cd\u5e8f\u5217\u5316\u8fc7\u7a0b\uff0c\u5982\u4e0b\uff1a public class DecodeableRpcResult extends RpcResult implements Codec, Decodeable { private Invocation invocation; @Override public void decode() throws Exception { if (!hasDecoded channel != null inputStream != null) { try { // \u6267\u884c\u53cd\u5e8f\u5217\u5316\u64cd\u4f5c decode(channel, inputStream); } catch (Throwable e) { // \u53cd\u5e8f\u5217\u5316\u5931\u8d25\uff0c\u8bbe\u7f6e CLIENT_ERROR \u72b6\u6001\u5230 Response \u5bf9\u8c61\u4e2d response.setStatus(Response.CLIENT_ERROR); // \u8bbe\u7f6e\u5f02\u5e38\u4fe1\u606f response.setErrorMessage(StringUtils.toString(e)); } finally { hasDecoded = true; } } } @Override public Object decode(Channel channel, InputStream input) throws IOException { ObjectInput in = CodecSupport.getSerialization(channel.getUrl(), serializationType) .deserialize(channel.getUrl(), input); // \u53cd\u5e8f\u5217\u5316\u54cd\u5e94\u7c7b\u578b byte flag = in.readByte(); switch (flag) { case DubboCodec.RESPONSE_NULL_VALUE: break; case DubboCodec.RESPONSE_VALUE: // ... break; case DubboCodec.RESPONSE_WITH_EXCEPTION: // ... break; // \u8fd4\u56de\u503c\u4e3a\u7a7a\uff0c\u4e14\u643a\u5e26\u4e86 attachments \u96c6\u5408 case DubboCodec.RESPONSE_NULL_VALUE_WITH_ATTACHMENTS: try { // \u53cd\u5e8f\u5217\u5316 attachments \u96c6\u5408\uff0c\u5e76\u5b58\u50a8\u8d77\u6765 setAttachments((Map String, String ) in.readObject(Map.class)); } catch (ClassNotFoundException e) { throw new IOException(StringUtils.toString( Read response data failed. , e)); } break; // \u8fd4\u56de\u503c\u4e0d\u4e3a\u7a7a\uff0c\u4e14\u643a\u5e26\u4e86 attachments \u96c6\u5408 case DubboCodec.RESPONSE_VALUE_WITH_ATTACHMENTS: try { // \u83b7\u53d6\u8fd4\u56de\u503c\u7c7b\u578b Type[] returnType = RpcUtils.getReturnTypes(invocation); // \u53cd\u5e8f\u5217\u5316\u8c03\u7528\u7ed3\u679c\uff0c\u5e76\u4fdd\u5b58\u8d77\u6765 setValue(returnType == null || returnType.length == 0 ? in.readObject() : (returnType.length == 1 ? in.readObject((Class ? ) returnType[0]) : in.readObject((Class ? ) returnType[0], returnType[1]))); // \u53cd\u5e8f\u5217\u5316 attachments \u96c6\u5408\uff0c\u5e76\u5b58\u50a8\u8d77\u6765 setAttachments((Map String, String ) in.readObject(Map.class)); } catch (ClassNotFoundException e) { throw new IOException(StringUtils.toString( Read response data failed. , e)); } break; // \u5f02\u5e38\u5bf9\u8c61\u4e0d\u4e3a\u7a7a\uff0c\u4e14\u643a\u5e26\u4e86 attachments \u96c6\u5408 case DubboCodec.RESPONSE_WITH_EXCEPTION_WITH_ATTACHMENTS: try { // \u53cd\u5e8f\u5217\u5316\u5f02\u5e38\u5bf9\u8c61 Object obj = in.readObject(); if (obj instanceof Throwable == false) throw new IOException( Response data error, expect Throwable, but get + obj); // \u8bbe\u7f6e\u5f02\u5e38\u5bf9\u8c61 setException((Throwable) obj); // \u53cd\u5e8f\u5217\u5316 attachments \u96c6\u5408\uff0c\u5e76\u5b58\u50a8\u8d77\u6765 setAttachments((Map String, String ) in.readObject(Map.class)); } catch (ClassNotFoundException e) { throw new IOException(StringUtils.toString( Read response data failed. , e)); } break; default: throw new IOException( Unknown result flag, expect '0' '1' '2', get + flag); } if (in instanceof Cleanable) { ((Cleanable) in).cleanup(); } return this; } } \u672c\u7bc7\u6587\u7ae0\u6240\u5206\u6790\u7684\u6e90\u7801\u7248\u672c\u4e3a 2.6.4\uff0c\u8be5\u7248\u672c\u4e0b\u7684 Response \u652f\u6301 attachments \u96c6\u5408\uff0c\u6240\u4ee5\u4e0a\u9762\u4ec5\u5bf9\u90e8\u5206 case \u5206\u652f\u8fdb\u884c\u4e86\u6ce8\u91ca\u3002\u5176\u4ed6 case \u5206\u652f\u7684\u903b\u8f91\u6bd4\u88ab\u6ce8\u91ca\u5206\u652f\u7684\u903b\u8f91\u66f4\u4e3a\u7b80\u5355\uff0c\u8fd9\u91cc\u5c31\u5ffd\u7565\u4e86\u3002\u6211\u4eec\u6240\u4f7f\u7528\u7684\u6d4b\u8bd5\u670d\u52a1\u63a5\u53e3 DemoService \u5305\u542b\u4e86\u4e00\u4e2a\u5177\u6709\u8fd4\u56de\u503c\u7684\u65b9\u6cd5\uff0c\u6b63\u5e38\u8c03\u7528\u4e0b\uff0c\u7ebf\u7a0b\u4f1a\u8fdb\u5165 RESPONSE_VALUE_WITH_ATTACHMENTS \u5206\u652f\u4e2d\u3002\u7136\u540e\u7ebf\u7a0b\u4f1a\u4ece invocation \u53d8\u91cf\uff08\u5927\u5bb6\u63a2\u7d22\u4e00\u4e0b invocation \u53d8\u91cf\u7684\u7531\u6765\uff09\u4e2d\u83b7\u53d6\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u63a5\u7740\u5bf9\u8c03\u7528\u7ed3\u679c\u8fdb\u884c\u53cd\u5e8f\u5217\u5316\uff0c\u5e76\u5c06\u5e8f\u5217\u5316\u540e\u7684\u7ed3\u679c\u5b58\u50a8\u8d77\u6765\u3002\u6700\u540e\u5bf9 attachments \u96c6\u5408\u8fdb\u884c\u53cd\u5e8f\u5217\u5316\uff0c\u5e76\u5b58\u5230\u6307\u5b9a\u5b57\u6bb5\u4e2d\u3002\u5230\u6b64\uff0c\u5173\u4e8e\u54cd\u5e94\u6570\u636e\u7684\u89e3\u7801\u8fc7\u7a0b\u5c31\u5206\u6790\u5b8c\u4e86\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u518d\u6765\u63a2\u7d22\u4e00\u4e0b\u54cd\u5e94\u5bf9\u8c61 Response \u7684\u53bb\u5411\u3002 2.5.2 \u5411\u7528\u6237\u7ebf\u7a0b\u4f20\u9012\u8c03\u7528\u7ed3\u679c \u54cd\u5e94\u6570\u636e\u89e3\u7801\u5b8c\u6210\u540e\uff0cDubbo \u4f1a\u5c06\u54cd\u5e94\u5bf9\u8c61\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\u4e0a\u3002\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7ebf\u7a0b\u6c60\u4e2d\u7684\u7ebf\u7a0b\u5e76\u975e\u7528\u6237\u7684\u8c03\u7528\u7ebf\u7a0b\uff0c\u6240\u4ee5\u8981\u60f3\u529e\u6cd5\u5c06\u54cd\u5e94\u5bf9\u8c61\u4ece\u7ebf\u7a0b\u6c60\u7ebf\u7a0b\u4f20\u9012\u5230\u7528\u6237\u7ebf\u7a0b\u4e0a\u3002\u6211\u4eec\u5728 2.1 \u8282\u5206\u6790\u8fc7\u7528\u6237\u7ebf\u7a0b\u5728\u53d1\u9001\u5b8c\u8bf7\u6c42\u540e\u7684\u52a8\u4f5c\uff0c\u5373\u8c03\u7528 DefaultFuture \u7684 get \u65b9\u6cd5\u7b49\u5f85\u54cd\u5e94\u5bf9\u8c61\u7684\u5230\u6765\u3002\u5f53\u54cd\u5e94\u5bf9\u8c61\u5230\u6765\u540e\uff0c\u7528\u6237\u7ebf\u7a0b\u4f1a\u88ab\u5524\u9192\uff0c\u5e76\u901a\u8fc7 \u8c03\u7528\u7f16\u53f7 \u83b7\u53d6\u5c5e\u4e8e\u81ea\u5df1\u7684\u54cd\u5e94\u5bf9\u8c61\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u6574\u4e2a\u8fc7\u7a0b\u5bf9\u5e94\u7684\u4ee3\u7801\u3002 public class HeaderExchangeHandler implements ChannelHandlerDelegate { @Override public void received(Channel channel, Object message) throws RemotingException { channel.setAttribute(KEY_READ_TIMESTAMP, System.currentTimeMillis()); ExchangeChannel exchangeChannel = HeaderExchangeChannel.getOrAddChannel(channel); try { if (message instanceof Request) { // \u5904\u7406\u8bf7\u6c42\uff0c\u524d\u9762\u5df2\u5206\u6790\u8fc7\uff0c\u7701\u7565 } else if (message instanceof Response) { // \u5904\u7406\u54cd\u5e94 handleResponse(channel, (Response) message); } else if (message instanceof String) { // telnet \u76f8\u5173\uff0c\u5ffd\u7565 } else { handler.received(exchangeChannel, message); } } finally { HeaderExchangeChannel.removeChannelIfDisconnected(channel); } } static void handleResponse(Channel channel, Response response) throws RemotingException { if (response != null !response.isHeartbeat()) { // \u7ee7\u7eed\u5411\u4e0b\u8c03\u7528 DefaultFuture.received(channel, response); } } } public class DefaultFuture implements ResponseFuture { private final Lock lock = new ReentrantLock(); private final Condition done = lock.newCondition(); private volatile Response response; public static void received(Channel channel, Response response) { try { // \u6839\u636e\u8c03\u7528\u7f16\u53f7\u4ece FUTURES \u96c6\u5408\u4e2d\u67e5\u627e\u6307\u5b9a\u7684 DefaultFuture \u5bf9\u8c61 DefaultFuture future = FUTURES.remove(response.getId()); if (future != null) { // \u7ee7\u7eed\u5411\u4e0b\u8c03\u7528 future.doReceived(response); } else { logger.warn( The timeout response finally returned at ... ); } } finally { CHANNELS.remove(response.getId()); } } private void doReceived(Response res) { lock.lock(); try { // \u4fdd\u5b58\u54cd\u5e94\u5bf9\u8c61 response = res; if (done != null) { // \u5524\u9192\u7528\u6237\u7ebf\u7a0b done.signal(); } } finally { lock.unlock(); } if (callback != null) { invokeCallback(callback); } } } \u4ee5\u4e0a\u903b\u8f91\u662f\u5c06\u54cd\u5e94\u5bf9\u8c61\u4fdd\u5b58\u5230\u76f8\u5e94\u7684 DefaultFuture \u5b9e\u4f8b\u4e2d\uff0c\u7136\u540e\u518d\u5524\u9192\u7528\u6237\u7ebf\u7a0b\uff0c\u968f\u540e\u7528\u6237\u7ebf\u7a0b\u5373\u53ef\u4ece DefaultFuture \u5b9e\u4f8b\u4e2d\u83b7\u53d6\u5230\u76f8\u5e94\u7ed3\u679c\u3002 \u672c\u7bc7\u6587\u7ae0\u5728\u591a\u4e2a\u5730\u65b9\u90fd\u5f3a\u8c03\u8fc7\u8c03\u7528\u7f16\u53f7\u5f88\u91cd\u8981\uff0c\u4f46\u4e00\u76f4\u6ca1\u6709\u89e3\u91ca\u539f\u56e0\uff0c\u8fd9\u91cc\u7b80\u5355\u8bf4\u660e\u4e00\u4e0b\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u670d\u52a1\u6d88\u8d39\u65b9\u4f1a\u5e76\u53d1\u8c03\u7528\u591a\u4e2a\u670d\u52a1\uff0c\u6bcf\u4e2a\u7528\u6237\u7ebf\u7a0b\u53d1\u9001\u8bf7\u6c42\u540e\uff0c\u4f1a\u8c03\u7528\u4e0d\u540c DefaultFuture \u5bf9\u8c61\u7684 get \u65b9\u6cd5\u8fdb\u884c\u7b49\u5f85\u3002 \u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u670d\u52a1\u6d88\u8d39\u65b9\u7684\u7ebf\u7a0b\u6c60\u4f1a\u6536\u5230\u591a\u4e2a\u54cd\u5e94\u5bf9\u8c61\u3002\u8fd9\u4e2a\u65f6\u5019\u8981\u8003\u8651\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u4f55\u5c06\u6bcf\u4e2a\u54cd\u5e94\u5bf9\u8c61\u4f20\u9012\u7ed9\u76f8\u5e94\u7684 DefaultFuture \u5bf9\u8c61\uff0c\u4e14\u4e0d\u51fa\u9519\u3002\u7b54\u6848\u662f\u901a\u8fc7\u8c03\u7528\u7f16\u53f7\u3002DefaultFuture \u88ab\u521b\u5efa\u65f6\uff0c\u4f1a\u8981\u6c42\u4f20\u5165\u4e00\u4e2a Request \u5bf9\u8c61\u3002\u6b64\u65f6 DefaultFuture \u53ef\u4ece Request \u5bf9\u8c61\u4e2d\u83b7\u53d6\u8c03\u7528\u7f16\u53f7\uff0c\u5e76\u5c06 \\ \u8c03\u7528\u7f16\u53f7, DefaultFuture \u5bf9\u8c61 \u6620\u5c04\u5173\u7cfb\u5b58\u5165\u5230\u9759\u6001 Map \u4e2d\uff0c\u5373 FUTURES\u3002\u7ebf\u7a0b\u6c60\u4e2d\u7684\u7ebf\u7a0b\u5728\u6536\u5230 Response \u5bf9\u8c61\u540e\uff0c\u4f1a\u6839\u636e Response \u5bf9\u8c61\u4e2d\u7684\u8c03\u7528\u7f16\u53f7\u5230 FUTURES \u96c6\u5408\u4e2d\u53d6\u51fa\u76f8\u5e94\u7684 DefaultFuture \u5bf9\u8c61\uff0c\u7136\u540e\u518d\u5c06 Response \u5bf9\u8c61\u8bbe\u7f6e\u5230 DefaultFuture \u5bf9\u8c61\u4e2d\u3002\u6700\u540e\u518d\u5524\u9192\u7528\u6237\u7ebf\u7a0b\uff0c\u8fd9\u6837\u7528\u6237\u7ebf\u7a0b\u5373\u53ef\u4ece DefaultFuture \u5bf9\u8c61\u4e2d\u83b7\u53d6\u8c03\u7528\u7ed3\u679c\u4e86\u3002\u6574\u4e2a\u8fc7\u7a0b\u5927\u81f4\u5982\u4e0b\u56fe\uff1a 3. \u603b\u7ed3 \u672c\u7bc7\u6587\u7ae0\u4e3b\u8981\u5bf9 Dubbo \u4e2d\u7684\u51e0\u79cd\u670d\u52a1\u8c03\u7528\u65b9\u5f0f\uff0c\u4ee5\u53ca\u4ece\u53cc\u5411\u901a\u4fe1\u7684\u89d2\u5ea6\u5bf9\u6574\u4e2a\u901a\u4fe1\u8fc7\u7a0b\u8fdb\u884c\u4e86\u8be6\u7ec6\u7684\u5206\u6790\u3002\u6309\u7167\u901a\u4fe1\u987a\u5e8f\uff0c\u901a\u4fe1\u8fc7\u7a0b\u5305\u62ec\u670d\u52a1\u6d88\u8d39\u65b9\u53d1\u9001\u8bf7\u6c42\uff0c\u670d\u52a1\u63d0\u4f9b\u65b9\u63a5\u6536\u8bf7\u6c42\uff0c\u670d\u52a1\u63d0\u4f9b\u65b9\u8fd4\u56de\u54cd\u5e94\u6570\u636e\uff0c\u670d\u52a1\u6d88\u8d39\u65b9\u63a5\u6536\u54cd\u5e94\u6570\u636e\u7b49\u8fc7\u7a0b\u3002\u7406\u89e3\u8fd9\u4e9b\u8fc7\u7a0b\u9700\u8981\u5927\u5bb6\u5bf9\u7f51\u7edc\u7f16\u7a0b\uff0c\u5c24\u5176\u662f Netty \u6709\u4e00\u5b9a\u7684\u4e86\u89e3\u3002\u9650\u4e8e\u7bc7\u5e45\u539f\u56e0\uff0c\u672c\u7bc7\u6587\u7ae0\u65e0\u6cd5\u5c06\u670d\u52a1\u8c03\u7528\u7684\u6240\u6709\u5185\u5bb9\u90fd\u4e00\u4e00\u8fdb\u884c\u5206\u6790\u3002\u5bf9\u4e8e\u672c\u7bc7\u6587\u7ae0\u672a\u8bb2\u5230\u6216\u672a\u8be6\u7ec6\u5206\u6790\u7684\u5185\u5bb9\uff0c\u6bd4\u5982\u670d\u52a1\u964d\u7ea7\u3001\u8fc7\u6ee4\u5668\u94fe\u3001\u4ee5\u53ca\u5e8f\u5217\u5316\u7b49\u3002\u5927\u5bb6\u82e5\u611f\u5174\u8da3\uff0c\u53ef\u81ea\u884c\u8fdb\u884c\u5206\u6790\u3002\u5e76\u5c06\u5206\u6790\u6574\u7406\u6210\u6587\uff0c\u5206\u4eab\u7ed9\u793e\u533a\u3002 \u672c\u7bc7\u6587\u7ae0\u5c31\u5230\u8fd9\u91cc\u4e86\uff0c\u611f\u8c22\u9605\u8bfb\u3002","title":"Service invoking process"},{"location":"source_code_guide/service-invoking-process/#1","text":"\u5728\u524d\u9762\u7684\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5206\u6790\u4e86 Dubbo SPI\u3001\u670d\u52a1\u5bfc\u51fa\u4e0e\u5f15\u5165\u3001\u4ee5\u53ca\u96c6\u7fa4\u5bb9\u9519\u65b9\u9762\u7684\u4ee3\u7801\u3002\u7ecf\u8fc7\u524d\u6587\u7684\u94fa\u57ab\uff0c\u672c\u7bc7\u6587\u7ae0\u6211\u4eec\u7ec8\u4e8e\u53ef\u4ee5\u5206\u6790\u670d\u52a1\u8c03\u7528\u8fc7\u7a0b\u4e86\u3002Dubbo \u670d\u52a1\u8c03\u7528\u8fc7\u7a0b\u6bd4\u8f83\u590d\u6742\uff0c\u5305\u542b\u4f17\u591a\u6b65\u9aa4\uff0c\u6bd4\u5982\u53d1\u9001\u8bf7\u6c42\u3001\u7f16\u89e3\u7801\u3001\u670d\u52a1\u964d\u7ea7\u3001\u8fc7\u6ee4\u5668\u94fe\u5904\u7406\u3001\u5e8f\u5217\u5316\u3001\u7ebf\u7a0b\u6d3e\u53d1\u4ee5\u53ca\u54cd\u5e94\u8bf7\u6c42\u7b49\u6b65\u9aa4\u3002\u9650\u4e8e\u7bc7\u5e45\u539f\u56e0\uff0c\u672c\u7bc7\u6587\u7ae0\u65e0\u6cd5\u5bf9\u6240\u6709\u7684\u6b65\u9aa4\u4e00\u4e00\u8fdb\u884c\u5206\u6790\u3002\u672c\u7bc7\u6587\u7ae0\u5c06\u4f1a\u91cd\u70b9\u5206\u6790\u8bf7\u6c42\u7684\u53d1\u9001\u4e0e\u63a5\u6536\u3001\u7f16\u89e3\u7801\u3001\u7ebf\u7a0b\u6d3e\u53d1\u4ee5\u53ca\u54cd\u5e94\u7684\u53d1\u9001\u4e0e\u63a5\u6536\u7b49\u8fc7\u7a0b\uff0c\u81f3\u4e8e\u670d\u52a1\u964d\u7ea7\u3001\u8fc7\u6ee4\u5668\u94fe\u548c\u5e8f\u5217\u5316\u5927\u5bb6\u81ea\u884c\u8fdb\u884c\u5206\u6790\uff0c\u4e5f\u53ef\u4ee5\u5c06\u5176\u5f53\u6210\u4e00\u4e2a\u9ed1\u76d2\uff0c\u6682\u65f6\u5ffd\u7565\u4e5f\u6ca1\u5173\u7cfb\u3002\u4ecb\u7ecd\u5b8c\u672c\u7bc7\u6587\u7ae0\u8981\u5206\u6790\u7684\u5185\u5bb9\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u8fdb\u5165\u6b63\u9898\u5427\u3002","title":"1. \u7b80\u4ecb"},{"location":"source_code_guide/service-invoking-process/#2","text":"\u5728\u8fdb\u884c\u6e90\u7801\u5206\u6790\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u901a\u8fc7\u4e00\u5f20\u56fe\u4e86\u89e3 Dubbo \u670d\u52a1\u8c03\u7528\u8fc7\u7a0b\u3002 \u9996\u5148\u670d\u52a1\u6d88\u8d39\u8005\u901a\u8fc7\u4ee3\u7406\u5bf9\u8c61 Proxy \u53d1\u8d77\u8fdc\u7a0b\u8c03\u7528\uff0c\u63a5\u7740\u901a\u8fc7\u7f51\u7edc\u5ba2\u6237\u7aef Client \u5c06\u7f16\u7801\u540e\u7684\u8bf7\u6c42\u53d1\u9001\u7ed9\u670d\u52a1\u63d0\u4f9b\u65b9\u7684\u7f51\u7edc\u5c42\u4e0a\uff0c\u4e5f\u5c31\u662f Server\u3002Server \u5728\u6536\u5230\u8bf7\u6c42\u540e\uff0c\u9996\u5148\u8981\u505a\u7684\u4e8b\u60c5\u662f\u5bf9\u6570\u636e\u5305\u8fdb\u884c\u89e3\u7801\u3002\u7136\u540e\u5c06\u89e3\u7801\u540e\u7684\u8bf7\u6c42\u53d1\u9001\u81f3\u5206\u53d1\u5668 Dispatcher\uff0c\u518d\u7531\u5206\u53d1\u5668\u5c06\u8bf7\u6c42\u6d3e\u53d1\u5230\u6307\u5b9a\u7684\u7ebf\u7a0b\u6c60\u4e0a\uff0c\u6700\u540e\u7531\u7ebf\u7a0b\u6c60\u8c03\u7528\u5177\u4f53\u7684\u670d\u52a1\u3002\u8fd9\u5c31\u662f\u4e00\u4e2a\u8fdc\u7a0b\u8c03\u7528\u8bf7\u6c42\u7684\u53d1\u9001\u4e0e\u63a5\u6536\u8fc7\u7a0b\u3002\u81f3\u4e8e\u54cd\u5e94\u7684\u53d1\u9001\u4e0e\u63a5\u6536\u8fc7\u7a0b\uff0c\u8fd9\u5f20\u56fe\u4e2d\u6ca1\u6709\u8868\u73b0\u51fa\u6765\u3002\u5bf9\u4e8e\u8fd9\u4e24\u4e2a\u8fc7\u7a0b\uff0c\u6211\u4eec\u4e5f\u4f1a\u8fdb\u884c\u8be6\u7ec6\u5206\u6790\u3002","title":"2. \u6e90\u7801\u5206\u6790"},{"location":"source_code_guide/service-invoking-process/#21","text":"Dubbo \u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u4e24\u79cd\u8c03\u7528\u65b9\u5f0f\uff0c\u5176\u4e2d\u5f02\u6b65\u8c03\u7528\u8fd8\u53ef\u7ec6\u5206\u4e3a\u201c\u6709\u8fd4\u56de\u503c\u201d\u7684\u5f02\u6b65\u8c03\u7528\u548c\u201c\u65e0\u8fd4\u56de\u503c\u201d\u7684\u5f02\u6b65\u8c03\u7528\u3002\u6240\u8c13\u201c\u65e0\u8fd4\u56de\u503c\u201d\u5f02\u6b65\u8c03\u7528\u662f\u6307\u670d\u52a1\u6d88\u8d39\u65b9\u53ea\u7ba1\u8c03\u7528\uff0c\u4f46\u4e0d\u5173\u5fc3\u8c03\u7528\u7ed3\u679c\uff0c\u6b64\u65f6 Dubbo \u4f1a\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a\u7a7a\u7684 RpcResult\u3002\u82e5\u8981\u4f7f\u7528\u5f02\u6b65\u7279\u6027\uff0c\u9700\u8981\u670d\u52a1\u6d88\u8d39\u65b9\u624b\u52a8\u8fdb\u884c\u914d\u7f6e\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cDubbo \u4f7f\u7528\u540c\u6b65\u8c03\u7528\u65b9\u5f0f\u3002 \u672c\u8282\u4ee5\u53ca\u5176\u4ed6\u7ae0\u8282\u5c06\u4f1a\u4f7f\u7528 Dubbo \u5b98\u65b9\u63d0\u4f9b\u7684 Demo \u5206\u6790\u6574\u4e2a\u8c03\u7528\u8fc7\u7a0b\uff0c\u4e0b\u9762\u6211\u4eec\u4ece DemoService \u63a5\u53e3\u7684\u4ee3\u7406\u7c7b\u5f00\u59cb\u8fdb\u884c\u5206\u6790\u3002Dubbo \u9ed8\u8ba4\u4f7f\u7528 Javassist \u6846\u67b6\u4e3a\u670d\u52a1\u63a5\u53e3\u751f\u6210\u52a8\u6001\u4ee3\u7406\u7c7b\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5148\u5c06\u4ee3\u7406\u7c7b\u8fdb\u884c\u53cd\u7f16\u8bd1\u624d\u80fd\u770b\u5230\u6e90\u7801\u3002\u8fd9\u91cc\u4f7f\u7528\u963f\u91cc\u5f00\u6e90 Java \u5e94\u7528\u8bca\u65ad\u5de5\u5177 Arthas \u53cd\u7f16\u8bd1\u4ee3\u7406\u7c7b\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a /** * Arthas \u53cd\u7f16\u8bd1\u6b65\u9aa4\uff1a * 1. \u542f\u52a8 Arthas * java -jar arthas-boot.jar * * 2. \u8f93\u5165\u7f16\u53f7\u9009\u62e9\u8fdb\u7a0b * Arthas \u542f\u52a8\u540e\uff0c\u4f1a\u6253\u5370 Java \u5e94\u7528\u8fdb\u7a0b\u5217\u8868\uff0c\u5982\u4e0b\uff1a * [1]: 11232 org.jetbrains.jps.cmdline.Launcher * [2]: 22370 org.jetbrains.jps.cmdline.Launcher * [3]: 22371 com.alibaba.dubbo.demo.consumer.Consumer * [4]: 22362 com.alibaba.dubbo.demo.provider.Provider * [5]: 2074 org.apache.zookeeper.server.quorum.QuorumPeerMain * \u8fd9\u91cc\u8f93\u5165\u7f16\u53f7 3\uff0c\u8ba9 Arthas \u5173\u8054\u5230\u542f\u52a8\u7c7b\u4e3a com.....Consumer \u7684 Java \u8fdb\u7a0b\u4e0a * * 3. \u7531\u4e8e Demo \u9879\u76ee\u4e2d\u53ea\u6709\u4e00\u4e2a\u670d\u52a1\u63a5\u53e3\uff0c\u56e0\u6b64\u6b64\u63a5\u53e3\u7684\u4ee3\u7406\u7c7b\u7c7b\u540d\u4e3a proxy0\uff0c\u6b64\u65f6\u4f7f\u7528 sc \u547d\u4ee4\u641c\u7d22\u8fd9\u4e2a\u7c7b\u540d\u3002 * $ sc *.proxy0 * com.alibaba.dubbo.common.bytecode.proxy0 * * 4. \u4f7f\u7528 jad \u547d\u4ee4\u53cd\u7f16\u8bd1 com.alibaba.dubbo.common.bytecode.proxy0 * $ jad com.alibaba.dubbo.common.bytecode.proxy0 * * \u66f4\u591a\u4f7f\u7528\u65b9\u6cd5\u8bf7\u53c2\u8003 Arthas \u5b98\u65b9\u6587\u6863\uff1a * https://alibaba.github.io/arthas/quick-start.html */ public class proxy0 implements ClassGenerator.DC, EchoService, DemoService { // \u65b9\u6cd5\u6570\u7ec4 public static Method[] methods; private InvocationHandler handler; public proxy0(InvocationHandler invocationHandler) { this.handler = invocationHandler; } public proxy0() { } public String sayHello(String string) { // \u5c06\u53c2\u6570\u5b58\u50a8\u5230 Object \u6570\u7ec4\u4e2d Object[] arrobject = new Object[]{string}; // \u8c03\u7528 InvocationHandler \u5b9e\u73b0\u7c7b\u7684 invoke \u65b9\u6cd5\u5f97\u5230\u8c03\u7528\u7ed3\u679c Object object = this.handler.invoke(this, methods[0], arrobject); // \u8fd4\u56de\u8c03\u7528\u7ed3\u679c return (String)object; } /** \u56de\u58f0\u6d4b\u8bd5\u65b9\u6cd5 */ public Object $echo(Object object) { Object[] arrobject = new Object[]{object}; Object object2 = this.handler.invoke(this, methods[1], arrobject); return object2; } } \u5982\u4e0a\uff0c\u4ee3\u7406\u7c7b\u7684\u903b\u8f91\u6bd4\u8f83\u7b80\u5355\u3002\u9996\u5148\u5c06\u8fd0\u884c\u65f6\u53c2\u6570\u5b58\u50a8\u5230\u6570\u7ec4\u4e2d\uff0c\u7136\u540e\u8c03\u7528 InvocationHandler \u63a5\u53e3\u5b9e\u73b0\u7c7b\u7684 invoke \u65b9\u6cd5\uff0c\u5f97\u5230\u8c03\u7528\u7ed3\u679c\uff0c\u6700\u540e\u5c06\u7ed3\u679c\u8f6c\u578b\u5e76\u8fd4\u56de\u7ed9\u8c03\u7528\u65b9\u3002\u5173\u4e8e\u4ee3\u7406\u7c7b\u7684\u903b\u8f91\u5c31\u8bf4\u8fd9\u4e48\u591a\uff0c\u7ee7\u7eed\u5411\u4e0b\u5206\u6790\u3002 public class InvokerInvocationHandler implements InvocationHandler { private final Invoker ? invoker; public InvokerInvocationHandler(Invoker ? handler) { this.invoker = handler; } @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { String methodName = method.getName(); Class ? [] parameterTypes = method.getParameterTypes(); // \u62e6\u622a\u5b9a\u4e49\u5728 Object \u7c7b\u4e2d\u7684\u65b9\u6cd5\uff08\u672a\u88ab\u5b50\u7c7b\u91cd\u5199\uff09\uff0c\u6bd4\u5982 wait/notify if (method.getDeclaringClass() == Object.class) { return method.invoke(invoker, args); } // \u5982\u679c toString\u3001hashCode \u548c equals \u7b49\u65b9\u6cd5\u88ab\u5b50\u7c7b\u91cd\u5199\u4e86\uff0c\u8fd9\u91cc\u4e5f\u76f4\u63a5\u8c03\u7528 if ( toString .equals(methodName) parameterTypes.length == 0) { return invoker.toString(); } if ( hashCode .equals(methodName) parameterTypes.length == 0) { return invoker.hashCode(); } if ( equals .equals(methodName) parameterTypes.length == 1) { return invoker.equals(args[0]); } // \u5c06 method \u548c args \u5c01\u88c5\u5230 RpcInvocation \u4e2d\uff0c\u5e76\u6267\u884c\u540e\u7eed\u7684\u8c03\u7528 return invoker.invoke(new RpcInvocation(method, args)).recreate(); } } InvokerInvocationHandler \u4e2d\u7684 invoker \u6210\u5458\u53d8\u91cf\u7c7b\u578b\u4e3a MockClusterInvoker\uff0cMockClusterInvoker \u5185\u90e8\u5c01\u88c5\u4e86\u670d\u52a1\u964d\u7ea7\u903b\u8f91\u3002\u4e0b\u9762\u7b80\u5355\u770b\u4e00\u4e0b\uff1a public class MockClusterInvoker T implements Invoker T { private final Invoker T invoker; public Result invoke(Invocation invocation) throws RpcException { Result result = null; // \u83b7\u53d6 mock \u914d\u7f6e\u503c String value = directory.getUrl().getMethodParameter(invocation.getMethodName(), Constants.MOCK_KEY, Boolean.FALSE.toString()).trim(); if (value.length() == 0 || value.equalsIgnoreCase( false )) { // \u65e0 mock \u903b\u8f91\uff0c\u76f4\u63a5\u8c03\u7528\u5176\u4ed6 Invoker \u5bf9\u8c61\u7684 invoke \u65b9\u6cd5\uff0c // \u6bd4\u5982 FailoverClusterInvoker result = this.invoker.invoke(invocation); } else if (value.startsWith( force )) { // force:xxx \u76f4\u63a5\u6267\u884c mock \u903b\u8f91\uff0c\u4e0d\u53d1\u8d77\u8fdc\u7a0b\u8c03\u7528 result = doMockInvoke(invocation, null); } else { // fail:xxx \u8868\u793a\u6d88\u8d39\u65b9\u5bf9\u8c03\u7528\u670d\u52a1\u5931\u8d25\u540e\uff0c\u518d\u6267\u884c mock \u903b\u8f91\uff0c\u4e0d\u629b\u51fa\u5f02\u5e38 try { // \u8c03\u7528\u5176\u4ed6 Invoker \u5bf9\u8c61\u7684 invoke \u65b9\u6cd5 result = this.invoker.invoke(invocation); } catch (RpcException e) { if (e.isBiz()) { throw e; } else { // \u8c03\u7528\u5931\u8d25\uff0c\u6267\u884c mock \u903b\u8f91 result = doMockInvoke(invocation, e); } } } return result; } // \u7701\u7565\u5176\u4ed6\u65b9\u6cd5 } \u670d\u52a1\u964d\u7ea7\u4e0d\u662f\u672c\u6587\u91cd\u70b9\uff0c\u56e0\u6b64\u8fd9\u91cc\u5c31\u4e0d\u5206\u6790 doMockInvoke \u65b9\u6cd5\u4e86\u3002\u8003\u8651\u5230\u524d\u6587\u5df2\u7ecf\u8be6\u7ec6\u5206\u6790\u8fc7 FailoverClusterInvoker\uff0c\u56e0\u6b64\u672c\u8282\u7565\u8fc7 FailoverClusterInvoker\uff0c\u76f4\u63a5\u5206\u6790 DubboInvoker\u3002 public abstract class AbstractInvoker T implements Invoker T { public Result invoke(Invocation inv) throws RpcException { if (destroyed.get()) { throw new RpcException( Rpc invoker for service ... ); } RpcInvocation invocation = (RpcInvocation) inv; // \u8bbe\u7f6e Invoker invocation.setInvoker(this); if (attachment != null attachment.size() 0) { // \u8bbe\u7f6e attachment invocation.addAttachmentsIfAbsent(attachment); } Map String, String contextAttachments = RpcContext.getContext().getAttachments(); if (contextAttachments != null contextAttachments.size() != 0) { // \u6dfb\u52a0 contextAttachments \u5230 RpcInvocation#attachment \u53d8\u91cf\u4e2d invocation.addAttachments(contextAttachments); } if (getUrl().getMethodParameter(invocation.getMethodName(), Constants.ASYNC_KEY, false)) { // \u8bbe\u7f6e\u5f02\u6b65\u4fe1\u606f\u5230 RpcInvocation#attachment \u4e2d invocation.setAttachment(Constants.ASYNC_KEY, Boolean.TRUE.toString()); } RpcUtils.attachInvocationIdIfAsync(getUrl(), invocation); try { // \u62bd\u8c61\u65b9\u6cd5\uff0c\u7531\u5b50\u7c7b\u5b9e\u73b0 return doInvoke(invocation); } catch (InvocationTargetException e) { // ... } catch (RpcException e) { // ... } catch (Throwable e) { return new RpcResult(e); } } protected abstract Result doInvoke(Invocation invocation) throws Throwable; // \u7701\u7565\u5176\u4ed6\u65b9\u6cd5 } \u4e0a\u9762\u7684\u4ee3\u7801\u6765\u81ea AbstractInvoker \u7c7b\uff0c\u5176\u4e2d\u5927\u90e8\u5206\u4ee3\u7801\u7528\u4e8e\u6dfb\u52a0\u4fe1\u606f\u5230 RpcInvocation#attachment \u53d8\u91cf\u4e2d\uff0c\u6dfb\u52a0\u5b8c\u6bd5\u540e\uff0c\u8c03\u7528 doInvoke \u6267\u884c\u540e\u7eed\u7684\u8c03\u7528\u3002doInvoke \u662f\u4e00\u4e2a\u62bd\u8c61\u65b9\u6cd5\uff0c\u9700\u8981\u7531\u5b50\u7c7b\u5b9e\u73b0\uff0c\u4e0b\u9762\u5230 DubboInvoker \u4e2d\u770b\u4e00\u4e0b\u3002 public class DubboInvoker T extends AbstractInvoker T { private final ExchangeClient[] clients; protected Result doInvoke(final Invocation invocation) throws Throwable { RpcInvocation inv = (RpcInvocation) invocation; final String methodName = RpcUtils.getMethodName(invocation); // \u8bbe\u7f6e path \u548c version \u5230 attachment \u4e2d inv.setAttachment(Constants.PATH_KEY, getUrl().getPath()); inv.setAttachment(Constants.VERSION_KEY, version); ExchangeClient currentClient; if (clients.length == 1) { // \u4ece clients \u6570\u7ec4\u4e2d\u83b7\u53d6 ExchangeClient currentClient = clients[0]; } else { currentClient = clients[index.getAndIncrement() % clients.length]; } try { // \u83b7\u53d6\u5f02\u6b65\u914d\u7f6e boolean isAsync = RpcUtils.isAsync(getUrl(), invocation); // isOneway \u4e3a true\uff0c\u8868\u793a\u201c\u5355\u5411\u201d\u901a\u4fe1 boolean isOneway = RpcUtils.isOneway(getUrl(), invocation); int timeout = getUrl().getMethodParameter(methodName, Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT); // \u5f02\u6b65\u65e0\u8fd4\u56de\u503c if (isOneway) { boolean isSent = getUrl().getMethodParameter(methodName, Constants.SENT_KEY, false); // \u53d1\u9001\u8bf7\u6c42 currentClient.send(inv, isSent); // \u8bbe\u7f6e\u4e0a\u4e0b\u6587\u4e2d\u7684 future \u5b57\u6bb5\u4e3a null RpcContext.getContext().setFuture(null); // \u8fd4\u56de\u4e00\u4e2a\u7a7a\u7684 RpcResult return new RpcResult(); } // \u5f02\u6b65\u6709\u8fd4\u56de\u503c else if (isAsync) { // \u53d1\u9001\u8bf7\u6c42\uff0c\u5e76\u5f97\u5230\u4e00\u4e2a ResponseFuture \u5b9e\u4f8b ResponseFuture future = currentClient.request(inv, timeout); // \u8bbe\u7f6e future \u5230\u4e0a\u4e0b\u6587\u4e2d RpcContext.getContext().setFuture(new FutureAdapter Object (future)); // \u6682\u65f6\u8fd4\u56de\u4e00\u4e2a\u7a7a\u7ed3\u679c return new RpcResult(); } // \u540c\u6b65\u8c03\u7528 else { RpcContext.getContext().setFuture(null); // \u53d1\u9001\u8bf7\u6c42\uff0c\u5f97\u5230\u4e00\u4e2a ResponseFuture \u5b9e\u4f8b\uff0c\u5e76\u8c03\u7528\u8be5\u5b9e\u4f8b\u7684 get \u65b9\u6cd5\u8fdb\u884c\u7b49\u5f85 return (Result) currentClient.request(inv, timeout).get(); } } catch (TimeoutException e) { throw new RpcException(..., Invoke remote method timeout.... ); } catch (RemotingException e) { throw new RpcException(..., Failed to invoke remote method: ... ); } } // \u7701\u7565\u5176\u4ed6\u65b9\u6cd5 } \u4e0a\u9762\u7684\u4ee3\u7801\u5305\u542b\u4e86 Dubbo \u5bf9\u540c\u6b65\u548c\u5f02\u6b65\u8c03\u7528\u7684\u5904\u7406\u903b\u8f91\uff0c\u641e\u61c2\u4e86\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u4f1a\u5bf9 Dubbo \u7684\u540c\u6b65\u548c\u5f02\u6b65\u8c03\u7528\u65b9\u5f0f\u6709\u66f4\u6df1\u5165\u7684\u4e86\u89e3\u3002Dubbo \u5b9e\u73b0\u540c\u6b65\u548c\u5f02\u6b65\u8c03\u7528\u6bd4\u8f83\u5173\u952e\u7684\u4e00\u70b9\u5c31\u5728\u4e8e\u7531\u8c01\u8c03\u7528 ResponseFuture \u7684 get \u65b9\u6cd5\u3002\u540c\u6b65\u8c03\u7528\u6a21\u5f0f\u4e0b\uff0c\u7531\u6846\u67b6\u81ea\u8eab\u8c03\u7528 ResponseFuture \u7684 get \u65b9\u6cd5\u3002\u5f02\u6b65\u8c03\u7528\u6a21\u5f0f\u4e0b\uff0c\u5219\u7531\u7528\u6237\u8c03\u7528\u8be5\u65b9\u6cd5\u3002ResponseFuture \u662f\u4e00\u4e2a\u63a5\u53e3\uff0c\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u5b83\u7684\u9ed8\u8ba4\u5b9e\u73b0\u7c7b DefaultFuture \u7684\u6e90\u7801\u3002 public class DefaultFuture implements ResponseFuture { private static final Map Long, Channel CHANNELS = new ConcurrentHashMap Long, Channel (); private static final Map Long, DefaultFuture FUTURES = new ConcurrentHashMap Long, DefaultFuture (); private final long id; private final Channel channel; private final Request request; private final int timeout; private final Lock lock = new ReentrantLock(); private final Condition done = lock.newCondition(); private volatile Response response; public DefaultFuture(Channel channel, Request request, int timeout) { this.channel = channel; this.request = request; // \u83b7\u53d6\u8bf7\u6c42 id\uff0c\u8fd9\u4e2a id \u5f88\u91cd\u8981\uff0c\u540e\u9762\u8fd8\u4f1a\u89c1\u5230 this.id = request.getId(); this.timeout = timeout 0 ? timeout : channel.getUrl().getPositiveParameter(Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT); // \u5b58\u50a8 requestId, DefaultFuture \u6620\u5c04\u5173\u7cfb\u5230 FUTURES \u4e2d FUTURES.put(id, this); CHANNELS.put(id, channel); } @Override public Object get() throws RemotingException { return get(timeout); } @Override public Object get(int timeout) throws RemotingException { if (timeout = 0) { timeout = Constants.DEFAULT_TIMEOUT; } // \u68c0\u6d4b\u670d\u52a1\u63d0\u4f9b\u65b9\u662f\u5426\u6210\u529f\u8fd4\u56de\u4e86\u8c03\u7528\u7ed3\u679c if (!isDone()) { long start = System.currentTimeMillis(); lock.lock(); try { // \u5faa\u73af\u68c0\u6d4b\u670d\u52a1\u63d0\u4f9b\u65b9\u662f\u5426\u6210\u529f\u8fd4\u56de\u4e86\u8c03\u7528\u7ed3\u679c while (!isDone()) { // \u5982\u679c\u8c03\u7528\u7ed3\u679c\u5c1a\u672a\u8fd4\u56de\uff0c\u8fd9\u91cc\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4 done.await(timeout, TimeUnit.MILLISECONDS); // \u5982\u679c\u8c03\u7528\u7ed3\u679c\u6210\u529f\u8fd4\u56de\uff0c\u6216\u7b49\u5f85\u8d85\u65f6\uff0c\u6b64\u65f6\u8df3\u51fa while \u5faa\u73af\uff0c\u6267\u884c\u540e\u7eed\u7684\u903b\u8f91 if (isDone() || System.currentTimeMillis() - start timeout) { break; } } } catch (InterruptedException e) { throw new RuntimeException(e); } finally { lock.unlock(); } // \u5982\u679c\u8c03\u7528\u7ed3\u679c\u4ecd\u672a\u8fd4\u56de\uff0c\u5219\u629b\u51fa\u8d85\u65f6\u5f02\u5e38 if (!isDone()) { throw new TimeoutException(sent 0, channel, getTimeoutMessage(false)); } } // \u8fd4\u56de\u8c03\u7528\u7ed3\u679c return returnFromResponse(); } @Override public boolean isDone() { // \u901a\u8fc7\u68c0\u6d4b response \u5b57\u6bb5\u4e3a\u7a7a\u4e0e\u5426\uff0c\u5224\u65ad\u662f\u5426\u6536\u5230\u4e86\u8c03\u7528\u7ed3\u679c return response != null; } private Object returnFromResponse() throws RemotingException { Response res = response; if (res == null) { throw new IllegalStateException( response cannot be null ); } // \u5982\u679c\u8c03\u7528\u7ed3\u679c\u7684\u72b6\u6001\u4e3a Response.OK\uff0c\u5219\u8868\u793a\u8c03\u7528\u8fc7\u7a0b\u6b63\u5e38\uff0c\u670d\u52a1\u63d0\u4f9b\u65b9\u6210\u529f\u8fd4\u56de\u4e86\u8c03\u7528\u7ed3\u679c if (res.getStatus() == Response.OK) { return res.getResult(); } // \u629b\u51fa\u5f02\u5e38 if (res.getStatus() == Response.CLIENT_TIMEOUT || res.getStatus() == Response.SERVER_TIMEOUT) { throw new TimeoutException(res.getStatus() == Response.SERVER_TIMEOUT, channel, res.getErrorMessage()); } throw new RemotingException(channel, res.getErrorMessage()); } // \u7701\u7565\u5176\u4ed6\u65b9\u6cd5 } \u5982\u4e0a\uff0c\u5f53\u670d\u52a1\u6d88\u8d39\u8005\u8fd8\u672a\u63a5\u6536\u5230\u8c03\u7528\u7ed3\u679c\u65f6\uff0c\u7528\u6237\u7ebf\u7a0b\u8c03\u7528 get \u65b9\u6cd5\u4f1a\u88ab\u963b\u585e\u4f4f\u3002\u540c\u6b65\u8c03\u7528\u6a21\u5f0f\u4e0b\uff0c\u6846\u67b6\u83b7\u5f97 DefaultFuture \u5bf9\u8c61\u540e\uff0c\u4f1a\u7acb\u5373\u8c03\u7528 get \u65b9\u6cd5\u8fdb\u884c\u7b49\u5f85\u3002\u800c\u5f02\u6b65\u6a21\u5f0f\u4e0b\u5219\u662f\u5c06\u8be5\u5bf9\u8c61\u5c01\u88c5\u5230 FutureAdapter \u5b9e\u4f8b\u4e2d\uff0c\u5e76\u5c06 FutureAdapter \u5b9e\u4f8b\u8bbe\u7f6e\u5230 RpcContext \u4e2d\uff0c\u4f9b\u7528\u6237\u4f7f\u7528\u3002FutureAdapter \u662f\u4e00\u4e2a\u9002\u914d\u5668\uff0c\u7528\u4e8e\u5c06 Dubbo \u4e2d\u7684 ResponseFuture \u4e0e JDK \u4e2d\u7684 Future \u8fdb\u884c\u9002\u914d\u3002\u8fd9\u6837\u5f53\u7528\u6237\u7ebf\u7a0b\u8c03\u7528 Future \u7684 get \u65b9\u6cd5\u65f6\uff0c\u7ecf\u8fc7 FutureAdapter \u9002\u914d\uff0c\u6700\u7ec8\u4f1a\u8c03\u7528 ResponseFuture \u5b9e\u73b0\u7c7b\u5bf9\u8c61\u7684 get \u65b9\u6cd5\uff0c\u4e5f\u5c31\u662f DefaultFuture \u7684 get \u65b9\u6cd5\u3002 \u5230\u8fd9\u91cc\u5173\u4e8e Dubbo \u51e0\u79cd\u8c03\u7528\u65b9\u5f0f\u7684\u4ee3\u7801\u903b\u8f91\u5c31\u5206\u6790\u5b8c\u4e86\uff0c\u4e0b\u9762\u6765\u5206\u6790\u8bf7\u6c42\u6570\u636e\u7684\u53d1\u9001\u4e0e\u63a5\u6536\uff0c\u4ee5\u53ca\u54cd\u5e94\u6570\u636e\u7684\u53d1\u9001\u4e0e\u63a5\u6536\u8fc7\u7a0b\u3002","title":"2.1 \u670d\u52a1\u8c03\u7528\u65b9\u5f0f"},{"location":"source_code_guide/service-invoking-process/#22","text":"","title":"2.2 \u670d\u52a1\u6d88\u8d39\u65b9\u53d1\u9001\u8bf7\u6c42"},{"location":"source_code_guide/service-invoking-process/#221","text":"\u672c\u8282\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u540c\u6b65\u8c03\u7528\u6a21\u5f0f\u4e0b\uff0c\u670d\u52a1\u6d88\u8d39\u65b9\u662f\u5982\u4f55\u53d1\u9001\u8c03\u7528\u8bf7\u6c42\u7684\u3002\u5728\u6df1\u5165\u5206\u6790\u6e90\u7801\u524d\uff0c\u6211\u4eec\u5148\u6765\u770b\u4e00\u5f20\u56fe\u3002 \u8fd9\u5f20\u56fe\u5c55\u793a\u4e86\u670d\u52a1\u6d88\u8d39\u65b9\u53d1\u9001\u8bf7\u6c42\u8fc7\u7a0b\u7684\u90e8\u5206\u8c03\u7528\u6808\uff0c\u7565\u4e3a\u590d\u6742\u3002\u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u7ecf\u8fc7\u591a\u6b21\u8c03\u7528\u540e\uff0c\u624d\u5c06\u8bf7\u6c42\u6570\u636e\u9001\u81f3 Netty NioClientSocketChannel\u3002\u8fd9\u6837\u505a\u7684\u539f\u56e0\u662f\u901a\u8fc7 Exchange \u5c42\u4e3a\u6846\u67b6\u5f15\u5165 Request \u548c Response \u8bed\u4e49\uff0c\u8fd9\u4e00\u70b9\u4f1a\u5728\u63a5\u4e0b\u6765\u7684\u6e90\u7801\u5206\u6790\u8fc7\u7a0b\u4e2d\u4f1a\u770b\u5230\u3002\u5176\u4ed6\u7684\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u4e0b\u9762\u5f00\u59cb\u8fdb\u884c\u5206\u6790\u3002\u9996\u5148\u5206\u6790 ReferenceCountExchangeClient \u7684\u6e90\u7801\u3002 final class ReferenceCountExchangeClient implements ExchangeClient { private final URL url; private final AtomicInteger referenceCount = new AtomicInteger(0); public ReferenceCountExchangeClient(ExchangeClient client, ConcurrentMap String, LazyConnectExchangeClient ghostClientMap) { this.client = client; // \u5f15\u7528\u8ba1\u6570\u81ea\u589e referenceCount.incrementAndGet(); this.url = client.getUrl(); // ... } @Override public ResponseFuture request(Object request) throws RemotingException { // \u76f4\u63a5\u8c03\u7528\u88ab\u88c5\u9970\u5bf9\u8c61\u7684\u540c\u7b7e\u540d\u65b9\u6cd5 return client.request(request); } @Override public ResponseFuture request(Object request, int timeout) throws RemotingException { // \u76f4\u63a5\u8c03\u7528\u88ab\u88c5\u9970\u5bf9\u8c61\u7684\u540c\u7b7e\u540d\u65b9\u6cd5 return client.request(request, timeout); } /** \u5f15\u7528\u8ba1\u6570\u81ea\u589e\uff0c\u8be5\u65b9\u6cd5\u7531\u5916\u90e8\u8c03\u7528 */ public void incrementAndGetCount() { // referenceCount \u81ea\u589e referenceCount.incrementAndGet(); } @Override public void close(int timeout) { // referenceCount \u81ea\u51cf if (referenceCount.decrementAndGet() = 0) { if (timeout == 0) { client.close(); } else { client.close(timeout); } client = replaceWithLazyClient(); } } // \u7701\u7565\u90e8\u5206\u65b9\u6cd5 } ReferenceCountExchangeClient \u5185\u90e8\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5f15\u7528\u8ba1\u6570\u53d8\u91cf referenceCount\uff0c\u6bcf\u5f53\u8be5\u5bf9\u8c61\u88ab\u5f15\u7528\u4e00\u6b21 referenceCount \u90fd\u4f1a\u8fdb\u884c\u81ea\u589e\u3002\u6bcf\u5f53 close \u65b9\u6cd5\u88ab\u8c03\u7528\u65f6\uff0creferenceCount \u8fdb\u884c\u81ea\u51cf\u3002ReferenceCountExchangeClient \u5185\u90e8\u4ec5\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5f15\u7528\u8ba1\u6570\u7684\u529f\u80fd\uff0c\u5176\u4ed6\u65b9\u6cd5\u5e76\u65e0\u590d\u6742\u903b\u8f91\uff0c\u5747\u662f\u76f4\u63a5\u8c03\u7528\u88ab\u88c5\u9970\u5bf9\u8c61\u7684\u76f8\u5173\u65b9\u6cd5\u3002\u6240\u4ee5\u8fd9\u91cc\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u7ee7\u7eed\u5411\u4e0b\u5206\u6790\uff0c\u8fd9\u6b21\u662f HeaderExchangeClient\u3002 public class HeaderExchangeClient implements ExchangeClient { private static final ScheduledThreadPoolExecutor scheduled = new ScheduledThreadPoolExecutor(2, new NamedThreadFactory( dubbo-remoting-client-heartbeat , true)); private final Client client; private final ExchangeChannel channel; private ScheduledFuture ? heartbeatTimer; private int heartbeat; private int heartbeatTimeout; public HeaderExchangeClient(Client client, boolean needHeartbeat) { if (client == null) { throw new IllegalArgumentException( client == null ); } this.client = client; // \u521b\u5efa HeaderExchangeChannel \u5bf9\u8c61 this.channel = new HeaderExchangeChannel(client); // \u4ee5\u4e0b\u4ee3\u7801\u5747\u4e0e\u5fc3\u8df3\u68c0\u6d4b\u903b\u8f91\u6709\u5173 String dubbo = client.getUrl().getParameter(Constants.DUBBO_VERSION_KEY); this.heartbeat = client.getUrl().getParameter(Constants.HEARTBEAT_KEY, dubbo != null dubbo.startsWith( 1.0. ) ? Constants.DEFAULT_HEARTBEAT : 0); this.heartbeatTimeout = client.getUrl().getParameter(Constants.HEARTBEAT_TIMEOUT_KEY, heartbeat * 3); if (heartbeatTimeout heartbeat * 2) { throw new IllegalStateException( heartbeatTimeout heartbeatInterval * 2 ); } if (needHeartbeat) { // \u5f00\u542f\u5fc3\u8df3\u68c0\u6d4b\u5b9a\u65f6\u5668 startHeartbeatTimer(); } } @Override public ResponseFuture request(Object request) throws RemotingException { // \u76f4\u63a5 HeaderExchangeChannel \u5bf9\u8c61\u7684\u540c\u7b7e\u540d\u65b9\u6cd5 return channel.request(request); } @Override public ResponseFuture request(Object request, int timeout) throws RemotingException { // \u76f4\u63a5 HeaderExchangeChannel \u5bf9\u8c61\u7684\u540c\u7b7e\u540d\u65b9\u6cd5 return channel.request(request, timeout); } @Override public void close() { doClose(); channel.close(); } private void doClose() { // \u505c\u6b62\u5fc3\u8df3\u68c0\u6d4b\u5b9a\u65f6\u5668 stopHeartbeatTimer(); } private void startHeartbeatTimer() { stopHeartbeatTimer(); if (heartbeat 0) { heartbeatTimer = scheduled.scheduleWithFixedDelay( new HeartBeatTask(new HeartBeatTask.ChannelProvider() { @Override public Collection Channel getChannels() { return Collections. Channel singletonList(HeaderExchangeClient.this); } }, heartbeat, heartbeatTimeout), heartbeat, heartbeat, TimeUnit.MILLISECONDS); } } private void stopHeartbeatTimer() { if (heartbeatTimer != null !heartbeatTimer.isCancelled()) { try { heartbeatTimer.cancel(true); scheduled.purge(); } catch (Throwable e) { if (logger.isWarnEnabled()) { logger.warn(e.getMessage(), e); } } } heartbeatTimer = null; } // \u7701\u7565\u90e8\u5206\u65b9\u6cd5 } HeaderExchangeClient \u4e2d\u5f88\u591a\u65b9\u6cd5\u53ea\u6709\u4e00\u884c\u4ee3\u7801\uff0c\u5373\u8c03\u7528 HeaderExchangeChannel \u5bf9\u8c61\u7684\u540c\u7b7e\u540d\u65b9\u6cd5\u3002\u90a3 HeaderExchangeClient \u6709\u4ec0\u4e48\u7528\u5904\u5462\uff1f\u7b54\u6848\u662f\u5c01\u88c5\u4e86\u4e00\u4e9b\u5173\u4e8e\u5fc3\u8df3\u68c0\u6d4b\u7684\u903b\u8f91\u3002\u5fc3\u8df3\u68c0\u6d4b\u5e76\u975e\u672c\u6587\u6240\u5173\u6ce8\u7684\u70b9\uff0c\u56e0\u6b64\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u7ee7\u7eed\u5411\u4e0b\u770b\u3002 final class HeaderExchangeChannel implements ExchangeChannel { private final Channel channel; HeaderExchangeChannel(Channel channel) { if (channel == null) { throw new IllegalArgumentException( channel == null ); } // \u8fd9\u91cc\u7684 channel \u6307\u5411\u7684\u662f NettyClient this.channel = channel; } @Override public ResponseFuture request(Object request) throws RemotingException { return request(request, channel.getUrl().getPositiveParameter(Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT)); } @Override public ResponseFuture request(Object request, int timeout) throws RemotingException { if (closed) { throw new RemotingException(..., Failed to send request ...); } // \u521b\u5efa Request \u5bf9\u8c61 Request req = new Request(); req.setVersion(Version.getProtocolVersion()); // \u8bbe\u7f6e\u53cc\u5411\u901a\u4fe1\u6807\u5fd7\u4e3a true req.setTwoWay(true); // \u8fd9\u91cc\u7684 request \u53d8\u91cf\u7c7b\u578b\u4e3a RpcInvocation req.setData(request); // \u521b\u5efa DefaultFuture \u5bf9\u8c61 DefaultFuture future = new DefaultFuture(channel, req, timeout); try { // \u8c03\u7528 NettyClient \u7684 send \u65b9\u6cd5\u53d1\u9001\u8bf7\u6c42 channel.send(req); } catch (RemotingException e) { future.cancel(); throw e; } // \u8fd4\u56de DefaultFuture \u5bf9\u8c61 return future; } } \u5230\u8fd9\u91cc\u5927\u5bb6\u7ec8\u4e8e\u770b\u5230\u4e86 Request \u8bed\u4e49\u4e86\uff0c\u4e0a\u9762\u7684\u65b9\u6cd5\u9996\u5148\u5b9a\u4e49\u4e86\u4e00\u4e2a Request \u5bf9\u8c61\uff0c\u7136\u540e\u518d\u5c06\u8be5\u5bf9\u8c61\u4f20\u7ed9 NettyClient \u7684 send \u65b9\u6cd5\uff0c\u8fdb\u884c\u540e\u7eed\u7684\u8c03\u7528\u3002\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0cNettyClient \u4e2d\u5e76\u672a\u5b9e\u73b0 send \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u7ee7\u627f\u81ea\u7236\u7c7b AbstractPeer\uff0c\u4e0b\u9762\u76f4\u63a5\u5206\u6790 AbstractPeer \u7684\u4ee3\u7801\u3002 public abstract class AbstractPeer implements Endpoint, ChannelHandler { @Override public void send(Object message) throws RemotingException { // \u8be5\u65b9\u6cd5\u7531 AbstractClient \u7c7b\u5b9e\u73b0 send(message, url.getParameter(Constants.SENT_KEY, false)); } // \u7701\u7565\u5176\u4ed6\u65b9\u6cd5 } public abstract class AbstractClient extends AbstractEndpoint implements Client { @Override public void send(Object message, boolean sent) throws RemotingException { if (send_reconnect !isConnected()) { connect(); } // \u83b7\u53d6 Channel\uff0cgetChannel \u662f\u4e00\u4e2a\u62bd\u8c61\u65b9\u6cd5\uff0c\u5177\u4f53\u7531\u5b50\u7c7b\u5b9e\u73b0 Channel channel = getChannel(); if (channel == null || !channel.isConnected()) { throw new RemotingException(this, message can not send ... ); } // \u7ee7\u7eed\u5411\u4e0b\u8c03\u7528 channel.send(message, sent); } protected abstract Channel getChannel(); // \u7701\u7565\u5176\u4ed6\u65b9\u6cd5 } \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cDubbo \u4f7f\u7528 Netty \u4f5c\u4e3a\u5e95\u5c42\u7684\u901a\u4fe1\u6846\u67b6\uff0c\u56e0\u6b64\u4e0b\u9762\u6211\u4eec\u5230 NettyClient \u7c7b\u4e2d\u770b\u4e00\u4e0b getChannel \u65b9\u6cd5\u7684\u5b9e\u73b0\u903b\u8f91\u3002 public class NettyClient extends AbstractClient { // \u8fd9\u91cc\u7684 Channel \u5168\u9650\u5b9a\u540d\u79f0\u4e3a org.jboss.netty.channel.Channel private volatile Channel channel; @Override protected com.alibaba.dubbo.remoting.Channel getChannel() { Channel c = channel; if (c == null || !c.isConnected()) return null; // \u83b7\u53d6\u4e00\u4e2a NettyChannel \u7c7b\u578b\u5bf9\u8c61 return NettyChannel.getOrAddChannel(c, getUrl(), this); } } final class NettyChannel extends AbstractChannel { private static final ConcurrentMap org.jboss.netty.channel.Channel, NettyChannel channelMap = new ConcurrentHashMap org.jboss.netty.channel.Channel, NettyChannel (); private final org.jboss.netty.channel.Channel channel; /** \u79c1\u6709\u6784\u9020\u65b9\u6cd5 */ private NettyChannel(org.jboss.netty.channel.Channel channel, URL url, ChannelHandler handler) { super(url, handler); if (channel == null) { throw new IllegalArgumentException( netty channel == null; ); } this.channel = channel; } static NettyChannel getOrAddChannel(org.jboss.netty.channel.Channel ch, URL url, ChannelHandler handler) { if (ch == null) { return null; } // \u5c1d\u8bd5\u4ece\u96c6\u5408\u4e2d\u83b7\u53d6 NettyChannel \u5b9e\u4f8b NettyChannel ret = channelMap.get(ch); if (ret == null) { // \u5982\u679c ret = null\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 NettyChannel \u5b9e\u4f8b NettyChannel nc = new NettyChannel(ch, url, handler); if (ch.isConnected()) { // \u5c06 Channel, NettyChannel \u952e\u503c\u5bf9\u5b58\u5165 channelMap \u96c6\u5408\u4e2d ret = channelMap.putIfAbsent(ch, nc); } if (ret == null) { ret = nc; } } return ret; } } \u83b7\u53d6\u5230 NettyChannel \u5b9e\u4f8b\u540e\uff0c\u5373\u53ef\u8fdb\u884c\u540e\u7eed\u7684\u8c03\u7528\u3002\u4e0b\u9762\u770b\u4e00\u4e0b NettyChannel \u7684 send \u65b9\u6cd5\u3002 public void send(Object message, boolean sent) throws RemotingException { super.send(message, sent); boolean success = true; int timeout = 0; try { // \u53d1\u9001\u6d88\u606f(\u5305\u542b\u8bf7\u6c42\u548c\u54cd\u5e94\u6d88\u606f) ChannelFuture future = channel.write(message); // sent \u7684\u503c\u6e90\u4e8e dubbo:method sent= true/false / \u4e2d sent \u7684\u914d\u7f6e\u503c\uff0c\u6709\u4e24\u79cd\u914d\u7f6e\u503c\uff1a // 1. true: \u7b49\u5f85\u6d88\u606f\u53d1\u51fa\uff0c\u6d88\u606f\u53d1\u9001\u5931\u8d25\u5c06\u629b\u51fa\u5f02\u5e38 // 2. false: \u4e0d\u7b49\u5f85\u6d88\u606f\u53d1\u51fa\uff0c\u5c06\u6d88\u606f\u653e\u5165 IO \u961f\u5217\uff0c\u5373\u523b\u8fd4\u56de // \u9ed8\u8ba4\u60c5\u51b5\u4e0b sent = false\uff1b if (sent) { timeout = getUrl().getPositiveParameter(Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT); // \u7b49\u5f85\u6d88\u606f\u53d1\u51fa\uff0c\u82e5\u5728\u89c4\u5b9a\u65f6\u95f4\u6ca1\u80fd\u53d1\u51fa\uff0csuccess \u4f1a\u88ab\u7f6e\u4e3a false success = future.await(timeout); } Throwable cause = future.getCause(); if (cause != null) { throw cause; } } catch (Throwable e) { throw new RemotingException(this, Failed to send message ... ); } // \u82e5 success \u4e3a false\uff0c\u8fd9\u91cc\u629b\u51fa\u5f02\u5e38 if (!success) { throw new RemotingException(this, Failed to send message ... ); } } \u7ecf\u5386\u591a\u6b21\u8c03\u7528\uff0c\u5230\u8fd9\u91cc\u8bf7\u6c42\u6570\u636e\u7684\u53d1\u9001\u8fc7\u7a0b\u5c31\u7ed3\u675f\u4e86\uff0c\u8fc7\u7a0b\u6f2b\u957f\u3002\u4e3a\u4e86\u4fbf\u4e8e\u5927\u5bb6\u9605\u8bfb\u4ee3\u7801\uff0c\u8fd9\u91cc\u4ee5 DemoService \u4e3a\u4f8b\uff0c\u5c06 sayHello \u65b9\u6cd5\u7684\u6574\u4e2a\u8c03\u7528\u8def\u5f84\u8d34\u51fa\u6765\u3002 proxy0#sayHello(String) \u2014 InvokerInvocationHandler#invoke(Object, Method, Object[]) \u2014 MockClusterInvoker#invoke(Invocation) \u2014 AbstractClusterInvoker#invoke(Invocation) \u2014 FailoverClusterInvoker#doInvoke(Invocation, List Invoker T , LoadBalance) \u2014 Filter#invoke(Invoker, Invocation) // \u5305\u542b\u591a\u4e2a Filter \u8c03\u7528 \u2014 ListenerInvokerWrapper#invoke(Invocation) \u2014 AbstractInvoker#invoke(Invocation) \u2014 DubboInvoker#doInvoke(Invocation) \u2014 ReferenceCountExchangeClient#request(Object, int) \u2014 HeaderExchangeClient#request(Object, int) \u2014 HeaderExchangeChannel#request(Object, int) \u2014 AbstractPeer#send(Object) \u2014 AbstractClient#send(Object, boolean) \u2014 NettyChannel#send(Object, boolean) \u2014 NioClientSocketChannel#write(Object) \u5728 Netty \u4e2d\uff0c\u51fa\u7ad9\u6570\u636e\u5728\u53d1\u51fa\u4e4b\u524d\u8fd8\u9700\u8981\u8fdb\u884c\u7f16\u7801\u64cd\u4f5c\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u8bf7\u6c42\u6570\u636e\u7684\u7f16\u7801\u903b\u8f91\u3002","title":"2.2.1 \u53d1\u9001\u8bf7\u6c42"},{"location":"source_code_guide/service-invoking-process/#222","text":"\u5728\u5206\u6790\u8bf7\u6c42\u7f16\u7801\u903b\u8f91\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e0b Dubbo \u6570\u636e\u5305\u7ed3\u6784\u3002 Dubbo \u6570\u636e\u5305\u5206\u4e3a\u6d88\u606f\u5934\u548c\u6d88\u606f\u4f53\uff0c\u6d88\u606f\u5934\u7528\u4e8e\u5b58\u50a8\u4e00\u4e9b\u5143\u4fe1\u606f\uff0c\u6bd4\u5982\u9b54\u6570\uff08Magic\uff09\uff0c\u6570\u636e\u5305\u7c7b\u578b\uff08Request/Response\uff09\uff0c\u6d88\u606f\u4f53\u957f\u5ea6\uff08Data Length\uff09\u7b49\u3002\u6d88\u606f\u4f53\u4e2d\u7528\u4e8e\u5b58\u50a8\u5177\u4f53\u7684\u8c03\u7528\u6d88\u606f\uff0c\u6bd4\u5982\u65b9\u6cd5\u540d\u79f0\uff0c\u53c2\u6570\u5217\u8868\u7b49\u3002\u4e0b\u9762\u7b80\u5355\u5217\u4e3e\u4e00\u4e0b\u6d88\u606f\u5934\u7684\u5185\u5bb9\u3002 \u504f\u79fb\u91cf(Bit) \u5b57\u6bb5 \u53d6\u503c 0 ~ 7 \u9b54\u6570\u9ad8\u4f4d 0xda00 8 ~ 15 \u9b54\u6570\u4f4e\u4f4d 0xbb 16 \u6570\u636e\u5305\u7c7b\u578b 0 - Response, 1 - Request 17 \u8c03\u7528\u65b9\u5f0f \u4ec5\u5728\u7b2c16\u4f4d\u88ab\u8bbe\u4e3a1\u7684\u60c5\u51b5\u4e0b\u6709\u6548\uff0c0 - \u5355\u5411\u8c03\u7528\uff0c1 - \u53cc\u5411\u8c03\u7528 18 \u4e8b\u4ef6\u6807\u8bc6 0 - \u5f53\u524d\u6570\u636e\u5305\u662f\u8bf7\u6c42\u6216\u54cd\u5e94\u5305\uff0c1 - \u5f53\u524d\u6570\u636e\u5305\u662f\u5fc3\u8df3\u5305 19 ~ 23 \u5e8f\u5217\u5316\u5668\u7f16\u53f7 2 - Hessian2Serialization 3 - JavaSerialization 4 - CompactedJavaSerialization 6 - FastJsonSerialization 7 - NativeJavaSerialization 8 - KryoSerialization 9 - FstSerialization 24 ~ 31 \u72b6\u6001 20 - OK 30 - CLIENT_TIMEOUT 31 - SERVER_TIMEOUT 40 - BAD_REQUEST 50 - BAD_RESPONSE ...... 32 ~ 95 \u8bf7\u6c42\u7f16\u53f7 \u51718\u5b57\u8282\uff0c\u8fd0\u884c\u65f6\u751f\u6210 96 ~ 127 \u6d88\u606f\u4f53\u957f\u5ea6 \u8fd0\u884c\u65f6\u8ba1\u7b97 \u4e86\u89e3\u4e86 Dubbo \u6570\u636e\u5305\u683c\u5f0f\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u53ef\u4ee5\u63a2\u7d22\u7f16\u7801\u8fc7\u7a0b\u4e86\u3002\u8fd9\u6b21\u6211\u4eec\u5f00\u95e8\u89c1\u5c71\uff0c\u76f4\u63a5\u5206\u6790\u7f16\u7801\u903b\u8f91\u6240\u5728\u7c7b\u3002\u5982\u4e0b\uff1a public class ExchangeCodec extends TelnetCodec { // \u6d88\u606f\u5934\u957f\u5ea6 protected static final int HEADER_LENGTH = 16; // \u9b54\u6570\u5185\u5bb9 protected static final short MAGIC = (short) 0xdabb; protected static final byte MAGIC_HIGH = Bytes.short2bytes(MAGIC)[0]; protected static final byte MAGIC_LOW = Bytes.short2bytes(MAGIC)[1]; protected static final byte FLAG_REQUEST = (byte) 0x80; protected static final byte FLAG_TWOWAY = (byte) 0x40; protected static final byte FLAG_EVENT = (byte) 0x20; protected static final int SERIALIZATION_MASK = 0x1f; private static final Logger logger = LoggerFactory.getLogger(ExchangeCodec.class); public Short getMagicCode() { return MAGIC; } @Override public void encode(Channel channel, ChannelBuffer buffer, Object msg) throws IOException { if (msg instanceof Request) { // \u5bf9 Request \u5bf9\u8c61\u8fdb\u884c\u7f16\u7801 encodeRequest(channel, buffer, (Request) msg); } else if (msg instanceof Response) { // \u5bf9 Response \u5bf9\u8c61\u8fdb\u884c\u7f16\u7801\uff0c\u540e\u9762\u5206\u6790 encodeResponse(channel, buffer, (Response) msg); } else { super.encode(channel, buffer, msg); } } protected void encodeRequest(Channel channel, ChannelBuffer buffer, Request req) throws IOException { Serialization serialization = getSerialization(channel); // \u521b\u5efa\u6d88\u606f\u5934\u5b57\u8282\u6570\u7ec4\uff0c\u957f\u5ea6\u4e3a 16 byte[] header = new byte[HEADER_LENGTH]; // \u8bbe\u7f6e\u9b54\u6570 Bytes.short2bytes(MAGIC, header); // \u8bbe\u7f6e\u6570\u636e\u5305\u7c7b\u578b\uff08Request/Response\uff09\u548c\u5e8f\u5217\u5316\u5668\u7f16\u53f7 header[2] = (byte) (FLAG_REQUEST | serialization.getContentTypeId()); // \u8bbe\u7f6e\u901a\u4fe1\u65b9\u5f0f(\u5355\u5411/\u53cc\u5411) if (req.isTwoWay()) { header[2] |= FLAG_TWOWAY; } // \u8bbe\u7f6e\u4e8b\u4ef6\u6807\u8bc6 if (req.isEvent()) { header[2] |= FLAG_EVENT; } // \u8bbe\u7f6e\u8bf7\u6c42\u7f16\u53f7\uff0c8\u4e2a\u5b57\u8282\uff0c\u4ece\u7b2c4\u4e2a\u5b57\u8282\u5f00\u59cb\u8bbe\u7f6e Bytes.long2bytes(req.getId(), header, 4); // \u83b7\u53d6 buffer \u5f53\u524d\u7684\u5199\u4f4d\u7f6e int savedWriteIndex = buffer.writerIndex(); // \u66f4\u65b0 writerIndex\uff0c\u4e3a\u6d88\u606f\u5934\u9884\u7559 16 \u4e2a\u5b57\u8282\u7684\u7a7a\u95f4 buffer.writerIndex(savedWriteIndex + HEADER_LENGTH); ChannelBufferOutputStream bos = new ChannelBufferOutputStream(buffer); // \u521b\u5efa\u5e8f\u5217\u5316\u5668\uff0c\u6bd4\u5982 Hessian2ObjectOutput ObjectOutput out = serialization.serialize(channel.getUrl(), bos); if (req.isEvent()) { // \u5bf9\u4e8b\u4ef6\u6570\u636e\u8fdb\u884c\u5e8f\u5217\u5316\u64cd\u4f5c encodeEventData(channel, out, req.getData()); } else { // \u5bf9\u8bf7\u6c42\u6570\u636e\u8fdb\u884c\u5e8f\u5217\u5316\u64cd\u4f5c encodeRequestData(channel, out, req.getData(), req.getVersion()); } out.flushBuffer(); if (out instanceof Cleanable) { ((Cleanable) out).cleanup(); } bos.flush(); bos.close(); // \u83b7\u53d6\u5199\u5165\u7684\u5b57\u8282\u6570\uff0c\u4e5f\u5c31\u662f\u6d88\u606f\u4f53\u957f\u5ea6 int len = bos.writtenBytes(); checkPayload(channel, len); // \u5c06\u6d88\u606f\u4f53\u957f\u5ea6\u5199\u5165\u5230\u6d88\u606f\u5934\u4e2d Bytes.int2bytes(len, header, 12); // \u5c06 buffer \u6307\u9488\u79fb\u52a8\u5230 savedWriteIndex\uff0c\u4e3a\u5199\u6d88\u606f\u5934\u505a\u51c6\u5907 buffer.writerIndex(savedWriteIndex); // \u4ece savedWriteIndex \u4e0b\u6807\u5904\u5199\u5165\u6d88\u606f\u5934 buffer.writeBytes(header); // \u8bbe\u7f6e\u65b0\u7684 writerIndex\uff0cwriterIndex = \u539f\u5199\u4e0b\u6807 + \u6d88\u606f\u5934\u957f\u5ea6 + \u6d88\u606f\u4f53\u957f\u5ea6 buffer.writerIndex(savedWriteIndex + HEADER_LENGTH + len); } // \u7701\u7565\u5176\u4ed6\u65b9\u6cd5 } \u4ee5\u4e0a\u5c31\u662f\u8bf7\u6c42\u5bf9\u8c61\u7684\u7f16\u7801\u8fc7\u7a0b\uff0c\u8be5\u8fc7\u7a0b\u9996\u5148\u4f1a\u901a\u8fc7\u4f4d\u8fd0\u7b97\u5c06\u6d88\u606f\u5934\u5199\u5165\u5230 header \u6570\u7ec4\u4e2d\u3002\u7136\u540e\u5bf9 Request \u5bf9\u8c61\u7684 data \u5b57\u6bb5\u6267\u884c\u5e8f\u5217\u5316\u64cd\u4f5c\uff0c\u5e8f\u5217\u5316\u540e\u7684\u6570\u636e\u6700\u7ec8\u4f1a\u5b58\u50a8\u5230 ChannelBuffer \u4e2d\u3002\u5e8f\u5217\u5316\u64cd\u4f5c\u6267\u884c\u5b8c\u540e\uff0c\u53ef\u5f97\u5230\u6570\u636e\u5e8f\u5217\u5316\u540e\u7684\u957f\u5ea6 len\uff0c\u7d27\u63a5\u7740\u5c06 len \u5199\u5165\u5230 header \u6307\u5b9a\u4f4d\u7f6e\u5904\u3002\u6700\u540e\u518d\u5c06\u6d88\u606f\u5934\u5b57\u8282\u6570\u7ec4 header \u5199\u5165\u5230 ChannelBuffer \u4e2d\uff0c\u6574\u4e2a\u7f16\u7801\u8fc7\u7a0b\u5c31\u7ed3\u675f\u4e86\u3002\u672c\u8282\u7684\u6700\u540e\uff0c\u6211\u4eec\u518d\u6765\u770b\u4e00\u4e0b Request \u5bf9\u8c61\u7684 data \u5b57\u6bb5\u5e8f\u5217\u5316\u8fc7\u7a0b\uff0c\u4e5f\u5c31\u662f encodeRequestData \u65b9\u6cd5\u7684\u903b\u8f91\uff0c\u5982\u4e0b\uff1a public class DubboCodec extends ExchangeCodec implements Codec2 { protected void encodeRequestData(Channel channel, ObjectOutput out, Object data, String version) throws IOException { RpcInvocation inv = (RpcInvocation) data; // \u4f9d\u6b21\u5e8f\u5217\u5316 dubbo version\u3001path\u3001version out.writeUTF(version); out.writeUTF(inv.getAttachment(Constants.PATH_KEY)); out.writeUTF(inv.getAttachment(Constants.VERSION_KEY)); // \u5e8f\u5217\u5316\u8c03\u7528\u65b9\u6cd5\u540d out.writeUTF(inv.getMethodName()); // \u5c06\u53c2\u6570\u7c7b\u578b\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff0c\u5e76\u8fdb\u884c\u5e8f\u5217\u5316 out.writeUTF(ReflectUtils.getDesc(inv.getParameterTypes())); Object[] args = inv.getArguments(); if (args != null) for (int i = 0; i args.length; i++) { // \u5bf9\u8fd0\u884c\u65f6\u53c2\u6570\u8fdb\u884c\u5e8f\u5217\u5316 out.writeObject(encodeInvocationArgument(channel, inv, i)); } // \u5e8f\u5217\u5316 attachments out.writeObject(inv.getAttachments()); } } \u81f3\u6b64\uff0c\u5173\u4e8e\u670d\u52a1\u6d88\u8d39\u65b9\u53d1\u9001\u8bf7\u6c42\u7684\u8fc7\u7a0b\u5c31\u5206\u6790\u5b8c\u4e86\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u670d\u52a1\u63d0\u4f9b\u65b9\u662f\u5982\u4f55\u63a5\u6536\u8bf7\u6c42\u7684\u3002","title":"2.2.2 \u8bf7\u6c42\u7f16\u7801"},{"location":"source_code_guide/service-invoking-process/#23","text":"\u524d\u9762\u8bf4\u8fc7\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b Dubbo \u4f7f\u7528 Netty \u4f5c\u4e3a\u5e95\u5c42\u7684\u901a\u4fe1\u6846\u67b6\u3002Netty \u68c0\u6d4b\u5230\u6709\u6570\u636e\u5165\u7ad9\u540e\uff0c\u9996\u5148\u4f1a\u901a\u8fc7\u89e3\u7801\u5668\u5bf9\u6570\u636e\u8fdb\u884c\u89e3\u7801\uff0c\u5e76\u5c06\u89e3\u7801\u540e\u7684\u6570\u636e\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u5165\u7ad9\u5904\u7406\u5668\u7684\u6307\u5b9a\u65b9\u6cd5\u3002\u6240\u4ee5\u5728\u8fdb\u884c\u540e\u7eed\u7684\u5206\u6790\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e0b\u6570\u636e\u89e3\u7801\u8fc7\u7a0b\u3002","title":"2.3 \u670d\u52a1\u63d0\u4f9b\u65b9\u63a5\u6536\u8bf7\u6c42"},{"location":"source_code_guide/service-invoking-process/#231","text":"\u8fd9\u91cc\u76f4\u63a5\u5206\u6790\u8bf7\u6c42\u6570\u636e\u7684\u89e3\u7801\u903b\u8f91\uff0c\u5ffd\u7565\u4e2d\u95f4\u8fc7\u7a0b\uff0c\u5982\u4e0b\uff1a public class ExchangeCodec extends TelnetCodec { @Override public Object decode(Channel channel, ChannelBuffer buffer) throws IOException { int readable = buffer.readableBytes(); // \u521b\u5efa\u6d88\u606f\u5934\u5b57\u8282\u6570\u7ec4 byte[] header = new byte[Math.min(readable, HEADER_LENGTH)]; // \u8bfb\u53d6\u6d88\u606f\u5934\u6570\u636e buffer.readBytes(header); // \u8c03\u7528\u91cd\u8f7d\u65b9\u6cd5\u8fdb\u884c\u540e\u7eed\u89e3\u7801\u5de5\u4f5c return decode(channel, buffer, readable, header); } @Override protected Object decode(Channel channel, ChannelBuffer buffer, int readable, byte[] header) throws IOException { // \u68c0\u67e5\u9b54\u6570\u662f\u5426\u76f8\u7b49 if (readable 0 header[0] != MAGIC_HIGH || readable 1 header[1] != MAGIC_LOW) { int length = header.length; if (header.length readable) { header = Bytes.copyOf(header, readable); buffer.readBytes(header, length, readable - length); } for (int i = 1; i header.length - 1; i++) { if (header[i] == MAGIC_HIGH header[i + 1] == MAGIC_LOW) { buffer.readerIndex(buffer.readerIndex() - header.length + i); header = Bytes.copyOf(header, i); break; } } // \u901a\u8fc7 telnet \u547d\u4ee4\u884c\u53d1\u9001\u7684\u6570\u636e\u5305\u4e0d\u5305\u542b\u6d88\u606f\u5934\uff0c\u6240\u4ee5\u8fd9\u91cc // \u8c03\u7528 TelnetCodec \u7684 decode \u65b9\u6cd5\u5bf9\u6570\u636e\u5305\u8fdb\u884c\u89e3\u7801 return super.decode(channel, buffer, readable, header); } // \u68c0\u6d4b\u53ef\u8bfb\u6570\u636e\u91cf\u662f\u5426\u5c11\u4e8e\u6d88\u606f\u5934\u957f\u5ea6\uff0c\u82e5\u5c0f\u4e8e\u5219\u7acb\u5373\u8fd4\u56de DecodeResult.NEED_MORE_INPUT if (readable HEADER_LENGTH) { return DecodeResult.NEED_MORE_INPUT; } // \u4ece\u6d88\u606f\u5934\u4e2d\u83b7\u53d6\u6d88\u606f\u4f53\u957f\u5ea6 int len = Bytes.bytes2int(header, 12); // \u68c0\u6d4b\u6d88\u606f\u4f53\u957f\u5ea6\u662f\u5426\u8d85\u51fa\u9650\u5236\uff0c\u8d85\u51fa\u5219\u629b\u51fa\u5f02\u5e38 checkPayload(channel, len); int tt = len + HEADER_LENGTH; // \u68c0\u6d4b\u53ef\u8bfb\u7684\u5b57\u8282\u6570\u662f\u5426\u5c0f\u4e8e\u5b9e\u9645\u7684\u5b57\u8282\u6570 if (readable tt) { return DecodeResult.NEED_MORE_INPUT; } ChannelBufferInputStream is = new ChannelBufferInputStream(buffer, len); try { // \u7ee7\u7eed\u8fdb\u884c\u89e3\u7801\u5de5\u4f5c return decodeBody(channel, is, header); } finally { if (is.available() 0) { try { StreamUtils.skipUnusedStream(is); } catch (IOException e) { logger.warn(e.getMessage(), e); } } } } } \u4e0a\u9762\u65b9\u6cd5\u901a\u8fc7\u68c0\u6d4b\u6d88\u606f\u5934\u4e2d\u7684\u9b54\u6570\u662f\u5426\u4e0e\u89c4\u5b9a\u7684\u9b54\u6570\u76f8\u7b49\uff0c\u63d0\u524d\u62e6\u622a\u6389\u975e\u5e38\u89c4\u6570\u636e\u5305\uff0c\u6bd4\u5982\u901a\u8fc7 telnet \u547d\u4ee4\u884c\u53d1\u51fa\u7684\u6570\u636e\u5305\u3002\u63a5\u7740\u518d\u5bf9\u6d88\u606f\u4f53\u957f\u5ea6\uff0c\u4ee5\u53ca\u53ef\u8bfb\u5b57\u8282\u6570\u8fdb\u884c\u68c0\u6d4b\u3002\u6700\u540e\u8c03\u7528 decodeBody \u65b9\u6cd5\u8fdb\u884c\u540e\u7eed\u7684\u89e3\u7801\u5de5\u4f5c\uff0cExchangeCodec \u4e2d\u5b9e\u73b0\u4e86 decodeBody \u65b9\u6cd5\uff0c\u4f46\u56e0\u5176\u5b50\u7c7b DubboCodec \u8986\u5199\u4e86\u8be5\u65b9\u6cd5\uff0c\u6240\u4ee5\u5728\u8fd0\u884c\u65f6 DubboCodec \u4e2d\u7684 decodeBody \u65b9\u6cd5\u4f1a\u88ab\u8c03\u7528\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u8be5\u65b9\u6cd5\u7684\u4ee3\u7801\u3002 public class DubboCodec extends ExchangeCodec implements Codec2 { @Override protected Object decodeBody(Channel channel, InputStream is, byte[] header) throws IOException { // \u83b7\u53d6\u6d88\u606f\u5934\u4e2d\u7684\u7b2c\u4e09\u4e2a\u5b57\u8282\uff0c\u5e76\u901a\u8fc7\u903b\u8f91\u4e0e\u8fd0\u7b97\u5f97\u5230\u5e8f\u5217\u5316\u5668\u7f16\u53f7 byte flag = header[2], proto = (byte) (flag SERIALIZATION_MASK); Serialization s = CodecSupport.getSerialization(channel.getUrl(), proto); // \u83b7\u53d6\u8c03\u7528\u7f16\u53f7 long id = Bytes.bytes2long(header, 4); // \u901a\u8fc7\u903b\u8f91\u4e0e\u8fd0\u7b97\u5f97\u5230\u8c03\u7528\u7c7b\u578b\uff0c0 - Response\uff0c1 - Request if ((flag FLAG_REQUEST) == 0) { // \u5bf9\u54cd\u5e94\u7ed3\u679c\u8fdb\u884c\u89e3\u7801\uff0c\u5f97\u5230 Response \u5bf9\u8c61\u3002\u8fd9\u4e2a\u975e\u672c\u8282\u5185\u5bb9\uff0c\u540e\u9762\u518d\u5206\u6790 // ... } else { // \u521b\u5efa Request \u5bf9\u8c61 Request req = new Request(id); req.setVersion(Version.getProtocolVersion()); // \u901a\u8fc7\u903b\u8f91\u4e0e\u8fd0\u7b97\u5f97\u5230\u901a\u4fe1\u65b9\u5f0f\uff0c\u5e76\u8bbe\u7f6e\u5230 Request \u5bf9\u8c61\u4e2d req.setTwoWay((flag FLAG_TWOWAY) != 0); // \u901a\u8fc7\u4f4d\u8fd0\u7b97\u68c0\u6d4b\u6570\u636e\u5305\u662f\u5426\u4e3a\u4e8b\u4ef6\u7c7b\u578b if ((flag FLAG_EVENT) != 0) { // \u8bbe\u7f6e\u5fc3\u8df3\u4e8b\u4ef6\u5230 Request \u5bf9\u8c61\u4e2d req.setEvent(Request.HEARTBEAT_EVENT); } try { Object data; if (req.isHeartbeat()) { // \u5bf9\u5fc3\u8df3\u5305\u8fdb\u884c\u89e3\u7801\uff0c\u8be5\u65b9\u6cd5\u5df2\u88ab\u6807\u6ce8\u4e3a\u5e9f\u5f03 data = decodeHeartbeatData(channel, deserialize(s, channel.getUrl(), is)); } else if (req.isEvent()) { // \u5bf9\u4e8b\u4ef6\u6570\u636e\u8fdb\u884c\u89e3\u7801 data = decodeEventData(channel, deserialize(s, channel.getUrl(), is)); } else { DecodeableRpcInvocation inv; // \u6839\u636e url \u53c2\u6570\u5224\u65ad\u662f\u5426\u5728 IO \u7ebf\u7a0b\u4e0a\u5bf9\u6d88\u606f\u4f53\u8fdb\u884c\u89e3\u7801 if (channel.getUrl().getParameter( Constants.DECODE_IN_IO_THREAD_KEY, Constants.DEFAULT_DECODE_IN_IO_THREAD)) { inv = new DecodeableRpcInvocation(channel, req, is, proto); // \u5728\u5f53\u524d\u7ebf\u7a0b\uff0c\u4e5f\u5c31\u662f IO \u7ebf\u7a0b\u4e0a\u8fdb\u884c\u540e\u7eed\u7684\u89e3\u7801\u5de5\u4f5c\u3002\u6b64\u5de5\u4f5c\u5b8c\u6210\u540e\uff0c\u53ef\u5c06 // \u8c03\u7528\u65b9\u6cd5\u540d\u3001attachment\u3001\u4ee5\u53ca\u8c03\u7528\u53c2\u6570\u89e3\u6790\u51fa\u6765 inv.decode(); } else { // \u4ec5\u521b\u5efa DecodeableRpcInvocation \u5bf9\u8c61\uff0c\u4f46\u4e0d\u5728\u5f53\u524d\u7ebf\u7a0b\u4e0a\u6267\u884c\u89e3\u7801\u903b\u8f91 inv = new DecodeableRpcInvocation(channel, req, new UnsafeByteArrayInputStream(readMessageData(is)), proto); } data = inv; } // \u8bbe\u7f6e data \u5230 Request \u5bf9\u8c61\u4e2d req.setData(data); } catch (Throwable t) { // \u82e5\u89e3\u7801\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5f02\u5e38\uff0c\u5219\u5c06 broken \u5b57\u6bb5\u8bbe\u4e3a true\uff0c // \u5e76\u5c06\u5f02\u5e38\u5bf9\u8c61\u8bbe\u7f6e\u5230 Reqeust \u5bf9\u8c61\u4e2d req.setBroken(true); req.setData(t); } return req; } } } \u5982\u4e0a\uff0cdecodeBody \u5bf9\u90e8\u5206\u5b57\u6bb5\u8fdb\u884c\u4e86\u89e3\u7801\uff0c\u5e76\u5c06\u89e3\u7801\u5f97\u5230\u7684\u5b57\u6bb5\u5c01\u88c5\u5230 Request \u4e2d\u3002\u968f\u540e\u4f1a\u8c03\u7528 DecodeableRpcInvocation \u7684 decode \u65b9\u6cd5\u8fdb\u884c\u540e\u7eed\u7684\u89e3\u7801\u5de5\u4f5c\u3002\u6b64\u5de5\u4f5c\u5b8c\u6210\u540e\uff0c\u53ef\u5c06\u8c03\u7528\u65b9\u6cd5\u540d\u3001attachment\u3001\u4ee5\u53ca\u8c03\u7528\u53c2\u6570\u89e3\u6790\u51fa\u6765\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b DecodeableRpcInvocation \u7684 decode \u65b9\u6cd5\u903b\u8f91\u3002 public class DecodeableRpcInvocation extends RpcInvocation implements Codec, Decodeable { @Override public Object decode(Channel channel, InputStream input) throws IOException { ObjectInput in = CodecSupport.getSerialization(channel.getUrl(), serializationType) .deserialize(channel.getUrl(), input); // \u901a\u8fc7\u53cd\u5e8f\u5217\u5316\u5f97\u5230 dubbo version\uff0c\u5e76\u4fdd\u5b58\u5230 attachments \u53d8\u91cf\u4e2d String dubboVersion = in.readUTF(); request.setVersion(dubboVersion); setAttachment(Constants.DUBBO_VERSION_KEY, dubboVersion); // \u901a\u8fc7\u53cd\u5e8f\u5217\u5316\u5f97\u5230 path\uff0cversion\uff0c\u5e76\u4fdd\u5b58\u5230 attachments \u53d8\u91cf\u4e2d setAttachment(Constants.PATH_KEY, in.readUTF()); setAttachment(Constants.VERSION_KEY, in.readUTF()); // \u901a\u8fc7\u53cd\u5e8f\u5217\u5316\u5f97\u5230\u8c03\u7528\u65b9\u6cd5\u540d setMethodName(in.readUTF()); try { Object[] args; Class ? [] pts; // \u901a\u8fc7\u53cd\u5e8f\u5217\u5316\u5f97\u5230\u53c2\u6570\u7c7b\u578b\u5b57\u7b26\u4e32\uff0c\u6bd4\u5982 Ljava/lang/String; String desc = in.readUTF(); if (desc.length() == 0) { pts = DubboCodec.EMPTY_CLASS_ARRAY; args = DubboCodec.EMPTY_OBJECT_ARRAY; } else { // \u5c06 desc \u89e3\u6790\u4e3a\u53c2\u6570\u7c7b\u578b\u6570\u7ec4 pts = ReflectUtils.desc2classArray(desc); args = new Object[pts.length]; for (int i = 0; i args.length; i++) { try { // \u89e3\u6790\u8fd0\u884c\u65f6\u53c2\u6570 args[i] = in.readObject(pts[i]); } catch (Exception e) { if (log.isWarnEnabled()) { log.warn( Decode argument failed: + e.getMessage(), e); } } } } // \u8bbe\u7f6e\u53c2\u6570\u7c7b\u578b\u6570\u7ec4 setParameterTypes(pts); // \u901a\u8fc7\u53cd\u5e8f\u5217\u5316\u5f97\u5230\u539f attachment \u7684\u5185\u5bb9 Map String, String map = (Map String, String ) in.readObject(Map.class); if (map != null map.size() 0) { Map String, String attachment = getAttachments(); if (attachment == null) { attachment = new HashMap String, String (); } // \u5c06 map \u4e0e\u5f53\u524d\u5bf9\u8c61\u4e2d\u7684 attachment \u96c6\u5408\u8fdb\u884c\u878d\u5408 attachment.putAll(map); setAttachments(attachment); } // \u5bf9 callback \u7c7b\u578b\u7684\u53c2\u6570\u8fdb\u884c\u5904\u7406 for (int i = 0; i args.length; i++) { args[i] = decodeInvocationArgument(channel, this, pts, i, args[i]); } // \u8bbe\u7f6e\u53c2\u6570\u5217\u8868 setArguments(args); } catch (ClassNotFoundException e) { throw new IOException(StringUtils.toString( Read invocation data failed. , e)); } finally { if (in instanceof Cleanable) { ((Cleanable) in).cleanup(); } } return this; } } \u4e0a\u9762\u7684\u65b9\u6cd5\u901a\u8fc7\u53cd\u5e8f\u5217\u5316\u5c06\u8bf8\u5982 path\u3001version\u3001\u8c03\u7528\u65b9\u6cd5\u540d\u3001\u53c2\u6570\u5217\u8868\u7b49\u4fe1\u606f\u4f9d\u6b21\u89e3\u6790\u51fa\u6765\uff0c\u5e76\u8bbe\u7f6e\u5230\u76f8\u5e94\u7684\u5b57\u6bb5\u4e2d\uff0c\u6700\u7ec8\u5f97\u5230\u4e00\u4e2a\u5177\u6709\u5b8c\u6574\u8c03\u7528\u4fe1\u606f\u7684 DecodeableRpcInvocation \u5bf9\u8c61\u3002 \u5230\u8fd9\u91cc\uff0c\u8bf7\u6c42\u6570\u636e\u89e3\u7801\u7684\u8fc7\u7a0b\u5c31\u5206\u6790\u5b8c\u4e86\u3002\u6b64\u65f6\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a Request \u5bf9\u8c61\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u4f1a\u88ab\u4f20\u9001\u5230\u4e0b\u4e00\u4e2a\u5165\u7ad9\u5904\u7406\u5668\u4e2d\uff0c\u6211\u4eec\u7ee7\u7eed\u5f80\u4e0b\u770b\u3002","title":"2.3.1 \u8bf7\u6c42\u89e3\u7801"},{"location":"source_code_guide/service-invoking-process/#232","text":"\u89e3\u7801\u5668\u5c06\u6570\u636e\u5305\u89e3\u6790\u6210 Request \u5bf9\u8c61\u540e\uff0cNettyHandler \u7684 messageReceived \u65b9\u6cd5\u7d27\u63a5\u7740\u4f1a\u6536\u5230\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u5e76\u5c06\u8fd9\u4e2a\u5bf9\u8c61\u7ee7\u7eed\u5411\u4e0b\u4f20\u9012\u3002\u8fd9\u671f\u95f4\u8be5\u5bf9\u8c61\u4f1a\u88ab\u4f9d\u6b21\u4f20\u9012\u7ed9 NettyServer\u3001MultiMessageHandler\u3001HeartbeatHandler \u4ee5\u53ca AllChannelHandler\u3002\u6700\u540e\u7531 AllChannelHandler \u5c06\u8be5\u5bf9\u8c61\u5c01\u88c5\u5230 Runnable \u5b9e\u73b0\u7c7b\u5bf9\u8c61\u4e2d\uff0c\u5e76\u5c06 Runnable \u653e\u5165\u7ebf\u7a0b\u6c60\u4e2d\u6267\u884c\u540e\u7eed\u7684\u8c03\u7528\u903b\u8f91\u3002\u6574\u4e2a\u8c03\u7528\u6808\u5982\u4e0b\uff1a NettyHandler#messageReceived(ChannelHandlerContext, MessageEvent) \u2014 AbstractPeer#received(Channel, Object) \u2014 MultiMessageHandler#received(Channel, Object) \u2014 HeartbeatHandler#received(Channel, Object) \u2014 AllChannelHandler#received(Channel, Object) \u2014 ExecutorService#execute(Runnable) // \u7531\u7ebf\u7a0b\u6c60\u6267\u884c\u540e\u7eed\u7684\u8c03\u7528\u903b\u8f91 \u8003\u8651\u5230\u7bc7\u5e45\uff0c\u4ee5\u53ca\u5f88\u591a\u4e2d\u95f4\u8c03\u7528\u7684\u903b\u8f91\u5e76\u975e\u5341\u5206\u91cd\u8981\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u4e0d\u5bf9\u8c03\u7528\u6808\u4e2d\u7684\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u8fdb\u884c\u5206\u6790\u4e86\u3002\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u5206\u6790\u8c03\u7528\u6808\u4e2d\u7684\u5206\u6790\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u8c03\u7528\u65b9\u6cd5\u903b\u8f91\u3002\u5982\u4e0b\uff1a @Sharable public class NettyHandler extends SimpleChannelHandler { private final Map String, Channel channels = new ConcurrentHashMap String, Channel (); private final URL url; private final ChannelHandler handler; public NettyHandler(URL url, ChannelHandler handler) { if (url == null) { throw new IllegalArgumentException( url == null ); } if (handler == null) { throw new IllegalArgumentException( handler == null ); } this.url = url; // \u8fd9\u91cc\u7684 handler \u7c7b\u578b\u4e3a NettyServer this.handler = handler; } public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception { // \u83b7\u53d6 NettyChannel NettyChannel channel = NettyChannel.getOrAddChannel(ctx.getChannel(), url, handler); try { // \u7ee7\u7eed\u5411\u4e0b\u8c03\u7528 handler.received(channel, e.getMessage()); } finally { NettyChannel.removeChannelIfDisconnected(ctx.getChannel()); } } } \u5982\u4e0a\uff0cNettyHandler \u4e2d\u7684 messageReceived \u903b\u8f91\u6bd4\u8f83\u7b80\u5355\u3002\u9996\u5148\u6839\u636e\u4e00\u4e9b\u4fe1\u606f\u83b7\u53d6 NettyChannel \u5b9e\u4f8b\uff0c\u7136\u540e\u5c06 NettyChannel \u5b9e\u4f8b\u4ee5\u53ca Request \u5bf9\u8c61\u5411\u4e0b\u4f20\u9012\u3002\u4e0b\u9762\u518d\u6765\u770b\u770b AllChannelHandler \u7684\u903b\u8f91\uff0c\u5728\u8be6\u7ec6\u5206\u6790\u4ee3\u7801\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u4e86\u89e3\u4e00\u4e0b Dubbo \u4e2d\u7684\u7ebf\u7a0b\u6d3e\u53d1\u6a21\u578b\u3002","title":"2.3.2 \u8c03\u7528\u670d\u52a1"},{"location":"source_code_guide/service-invoking-process/#2321","text":"Dubbo \u5c06\u5e95\u5c42\u901a\u4fe1\u6846\u67b6\u4e2d\u63a5\u6536\u8bf7\u6c42\u7684\u7ebf\u7a0b\u79f0\u4e3a IO \u7ebf\u7a0b\u3002\u5982\u679c\u4e00\u4e9b\u4e8b\u4ef6\u5904\u7406\u903b\u8f91\u53ef\u4ee5\u5f88\u5feb\u6267\u884c\u5b8c\uff0c\u6bd4\u5982\u53ea\u5728\u5185\u5b58\u6253\u4e00\u4e2a\u6807\u8bb0\uff0c\u6b64\u65f6\u76f4\u63a5\u5728 IO \u7ebf\u7a0b\u4e0a\u6267\u884c\u8be5\u6bb5\u903b\u8f91\u5373\u53ef\u3002\u4f46\u5982\u679c\u4e8b\u4ef6\u7684\u5904\u7406\u903b\u8f91\u6bd4\u8f83\u8017\u65f6\uff0c\u6bd4\u5982\u8be5\u6bb5\u903b\u8f91\u4f1a\u53d1\u8d77\u6570\u636e\u5e93\u67e5\u8be2\u6216\u8005 HTTP \u8bf7\u6c42\u3002\u6b64\u65f6\u6211\u4eec\u5c31\u4e0d\u5e94\u8be5\u8ba9\u4e8b\u4ef6\u5904\u7406\u903b\u8f91\u5728 IO \u7ebf\u7a0b\u4e0a\u6267\u884c\uff0c\u800c\u662f\u5e94\u8be5\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\u4e2d\u53bb\u6267\u884c\u3002\u539f\u56e0\u4e5f\u5f88\u7b80\u5355\uff0cIO \u7ebf\u7a0b\u4e3b\u8981\u7528\u4e8e\u63a5\u6536\u8bf7\u6c42\uff0c\u5982\u679c IO \u7ebf\u7a0b\u88ab\u5360\u6ee1\uff0c\u5c06\u5bfc\u81f4\u5b83\u4e0d\u80fd\u63a5\u6536\u65b0\u7684\u8bf7\u6c42\u3002 \u4ee5\u4e0a\u5c31\u662f\u7ebf\u7a0b\u6d3e\u53d1\u7684\u80cc\u666f\uff0c\u4e0b\u9762\u6211\u4eec\u518d\u6765\u901a\u8fc7 Dubbo \u8c03\u7528\u56fe\uff0c\u770b\u4e00\u4e0b\u7ebf\u7a0b\u6d3e\u53d1\u5668\u6240\u5904\u7684\u4f4d\u7f6e\u3002 \u5982\u4e0a\u56fe\uff0c\u7ea2\u6846\u4e2d\u7684 Dispatcher \u5c31\u662f\u7ebf\u7a0b\u6d3e\u53d1\u5668\u3002\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0cDispatcher \u771f\u5b9e\u7684\u804c\u8d23\u521b\u5efa\u5177\u6709\u7ebf\u7a0b\u6d3e\u53d1\u80fd\u529b\u7684 ChannelHandler\uff0c\u6bd4\u5982 AllChannelHandler\u3001MessageOnlyChannelHandler \u548c ExecutionChannelHandler \u7b49\uff0c\u5176\u672c\u8eab\u5e76\u4e0d\u5177\u5907\u7ebf\u7a0b\u6d3e\u53d1\u80fd\u529b\u3002Dubbo \u652f\u6301 5 \u79cd\u4e0d\u540c\u7684\u7ebf\u7a0b\u6d3e\u53d1\u7b56\u7565\uff0c\u4e0b\u9762\u901a\u8fc7\u4e00\u4e2a\u8868\u683c\u5217\u4e3e\u4e00\u4e0b\u3002 \u7b56\u7565 \u7528\u9014 all \u6240\u6709\u6d88\u606f\u90fd\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\uff0c\u5305\u62ec\u8bf7\u6c42\uff0c\u54cd\u5e94\uff0c\u8fde\u63a5\u4e8b\u4ef6\uff0c\u65ad\u5f00\u4e8b\u4ef6\u7b49 direct \u6240\u6709\u6d88\u606f\u90fd\u4e0d\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\uff0c\u5168\u90e8\u5728 IO \u7ebf\u7a0b\u4e0a\u76f4\u63a5\u6267\u884c message \u53ea\u6709 \u8bf7\u6c42 \u548c \u54cd\u5e94 \u6d88\u606f\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\uff0c\u5176\u5b83\u6d88\u606f\u5747\u5728 IO \u7ebf\u7a0b\u4e0a\u6267\u884c execution \u53ea\u6709 \u8bf7\u6c42 \u6d88\u606f\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\uff0c\u4e0d\u542b\u54cd\u5e94\u3002\u5176\u5b83\u6d88\u606f\u5747\u5728 IO \u7ebf\u7a0b\u4e0a\u6267\u884c connection \u5728 IO \u7ebf\u7a0b\u4e0a\uff0c\u5c06\u8fde\u63a5\u65ad\u5f00\u4e8b\u4ef6\u653e\u5165\u961f\u5217\uff0c\u6709\u5e8f\u9010\u4e2a\u6267\u884c\uff0c\u5176\u5b83\u6d88\u606f\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60 \u9ed8\u8ba4\u914d\u7f6e\u4e0b\uff0cDubbo \u4f7f\u7528 all \u6d3e\u53d1\u7b56\u7565\uff0c\u5373\u5c06\u6240\u6709\u7684\u6d88\u606f\u90fd\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\u4e2d\u3002\u4e0b\u9762\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b AllChannelHandler \u7684\u4ee3\u7801\u3002 public class AllChannelHandler extends WrappedChannelHandler { public AllChannelHandler(ChannelHandler handler, URL url) { super(handler, url); } /** \u5904\u7406\u8fde\u63a5\u4e8b\u4ef6 */ @Override public void connected(Channel channel) throws RemotingException { // \u83b7\u53d6\u7ebf\u7a0b\u6c60 ExecutorService cexecutor = getExecutorService(); try { // \u5c06\u8fde\u63a5\u4e8b\u4ef6\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\u4e2d\u5904\u7406 cexecutor.execute(new ChannelEventRunnable(channel, handler, ChannelState.CONNECTED)); } catch (Throwable t) { throw new ExecutionException(..., error when process connected event . , t); } } /** \u5904\u7406\u65ad\u5f00\u4e8b\u4ef6 */ @Override public void disconnected(Channel channel) throws RemotingException { ExecutorService cexecutor = getExecutorService(); try { cexecutor.execute(new ChannelEventRunnable(channel, handler, ChannelState.DISCONNECTED)); } catch (Throwable t) { throw new ExecutionException(..., error when process disconnected event . , t); } } /** \u5904\u7406\u8bf7\u6c42\u548c\u54cd\u5e94\u6d88\u606f\uff0c\u8fd9\u91cc\u7684 message \u53d8\u91cf\u7c7b\u578b\u53ef\u80fd\u662f Request\uff0c\u4e5f\u53ef\u80fd\u662f Response */ @Override public void received(Channel channel, Object message) throws RemotingException { ExecutorService cexecutor = getExecutorService(); try { // \u5c06\u8bf7\u6c42\u548c\u54cd\u5e94\u6d88\u606f\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\u4e2d\u5904\u7406 cexecutor.execute(new ChannelEventRunnable(channel, handler, ChannelState.RECEIVED, message)); } catch (Throwable t) { if(message instanceof Request t instanceof RejectedExecutionException){ Request request = (Request)message; // \u5982\u679c\u901a\u4fe1\u65b9\u5f0f\u4e3a\u53cc\u5411\u901a\u4fe1\uff0c\u6b64\u65f6\u5c06 Server side ... threadpool is exhausted // \u9519\u8bef\u4fe1\u606f\u5c01\u88c5\u5230 Response \u4e2d\uff0c\u5e76\u8fd4\u56de\u7ed9\u670d\u52a1\u6d88\u8d39\u65b9\u3002 if(request.isTwoWay()){ String msg = Server side( + url.getIp() + , + url.getPort() + ) threadpool is exhausted ,detail msg: + t.getMessage(); Response response = new Response(request.getId(), request.getVersion()); response.setStatus(Response.SERVER_THREADPOOL_EXHAUSTED_ERROR); response.setErrorMessage(msg); // \u8fd4\u56de\u5305\u542b\u9519\u8bef\u4fe1\u606f\u7684 Response \u5bf9\u8c61 channel.send(response); return; } } throw new ExecutionException(..., error when process received event . , t); } } /** \u5904\u7406\u5f02\u5e38\u4fe1\u606f */ @Override public void caught(Channel channel, Throwable exception) throws RemotingException { ExecutorService cexecutor = getExecutorService(); try { cexecutor.execute(new ChannelEventRunnable(channel, handler, ChannelState.CAUGHT, exception)); } catch (Throwable t) { throw new ExecutionException(..., error when process caught event ... ); } } } \u5982\u4e0a\uff0c\u8bf7\u6c42\u5bf9\u8c61\u4f1a\u88ab\u5c01\u88c5 ChannelEventRunnable \u4e2d\uff0cChannelEventRunnable \u5c06\u4f1a\u662f\u670d\u52a1\u8c03\u7528\u8fc7\u7a0b\u7684\u65b0\u8d77\u70b9\u3002\u6240\u4ee5\u63a5\u4e0b\u6765\u6211\u4eec\u4ee5 ChannelEventRunnable \u4e3a\u8d77\u70b9\u5411\u4e0b\u63a2\u7d22\u3002","title":"2.3.2.1 \u7ebf\u7a0b\u6d3e\u53d1\u6a21\u578b"},{"location":"source_code_guide/service-invoking-process/#2322","text":"\u672c\u5c0f\u8282\uff0c\u6211\u4eec\u4ece ChannelEventRunnable \u5f00\u59cb\u5206\u6790\uff0c\u8be5\u7c7b\u7684\u4e3b\u8981\u4ee3\u7801\u5982\u4e0b\uff1a public class ChannelEventRunnable implements Runnable { private final ChannelHandler handler; private final Channel channel; private final ChannelState state; private final Throwable exception; private final Object message; @Override public void run() { // \u68c0\u6d4b\u901a\u9053\u72b6\u6001\uff0c\u5bf9\u4e8e\u8bf7\u6c42\u6216\u54cd\u5e94\u6d88\u606f\uff0c\u6b64\u65f6 state = RECEIVED if (state == ChannelState.RECEIVED) { try { // \u5c06 channel \u548c message \u4f20\u7ed9 ChannelHandler \u5bf9\u8c61\uff0c\u8fdb\u884c\u540e\u7eed\u7684\u8c03\u7528 handler.received(channel, message); } catch (Exception e) { logger.warn( ... operation error, channel is ... message is ... ); } } // \u5176\u4ed6\u6d88\u606f\u7c7b\u578b\u901a\u8fc7 switch \u8fdb\u884c\u5904\u7406 else { switch (state) { case CONNECTED: try { handler.connected(channel); } catch (Exception e) { logger.warn( ... operation error, channel is ... ); } break; case DISCONNECTED: // ... case SENT: // ... case CAUGHT: // ... default: logger.warn( unknown state: + state + , message is + message); } } } } \u5982\u4e0a\uff0c\u8bf7\u6c42\u548c\u54cd\u5e94\u6d88\u606f\u51fa\u73b0\u9891\u7387\u660e\u663e\u6bd4\u5176\u4ed6\u7c7b\u578b\u6d88\u606f\u9ad8\uff0c\u6240\u4ee5\u8fd9\u91cc\u5bf9\u8be5\u7c7b\u578b\u7684\u6d88\u606f\u8fdb\u884c\u4e86\u9488\u5bf9\u6027\u5224\u65ad\u3002ChannelEventRunnable \u4ec5\u662f\u4e00\u4e2a\u4e2d\u8f6c\u7ad9\uff0c\u5b83\u7684 run \u65b9\u6cd5\u4e2d\u5e76\u4e0d\u5305\u542b\u5177\u4f53\u7684\u8c03\u7528\u903b\u8f91\uff0c\u4ec5\u7528\u4e8e\u5c06\u53c2\u6570\u4f20\u7ed9\u5176\u4ed6 ChannelHandler \u5bf9\u8c61\u8fdb\u884c\u5904\u7406\uff0c\u8be5\u5bf9\u8c61\u7c7b\u578b\u4e3a DecodeHandler\u3002 public class DecodeHandler extends AbstractChannelHandlerDelegate { public DecodeHandler(ChannelHandler handler) { super(handler); } @Override public void received(Channel channel, Object message) throws RemotingException { if (message instanceof Decodeable) { // \u5bf9 Decodeable \u63a5\u53e3\u5b9e\u73b0\u7c7b\u5bf9\u8c61\u8fdb\u884c\u89e3\u7801 decode(message); } if (message instanceof Request) { // \u5bf9 Request \u7684 data \u5b57\u6bb5\u8fdb\u884c\u89e3\u7801 decode(((Request) message).getData()); } if (message instanceof Response) { // \u5bf9 Request \u7684 result \u5b57\u6bb5\u8fdb\u884c\u89e3\u7801 decode(((Response) message).getResult()); } // \u6267\u884c\u540e\u7eed\u903b\u8f91 handler.received(channel, message); } private void decode(Object message) { // Decodeable \u63a5\u53e3\u76ee\u524d\u6709\u4e24\u4e2a\u5b9e\u73b0\u7c7b\uff0c // \u5206\u522b\u4e3a DecodeableRpcInvocation \u548c DecodeableRpcResult if (message != null message instanceof Decodeable) { try { // \u6267\u884c\u89e3\u7801\u903b\u8f91 ((Decodeable) message).decode(); } catch (Throwable e) { if (log.isWarnEnabled()) { log.warn( Call Decodeable.decode failed: + e.getMessage(), e); } } } } } DecodeHandler \u4e3b\u8981\u662f\u5305\u542b\u4e86\u4e00\u4e9b\u89e3\u7801\u903b\u8f91\u30022.2.1 \u8282\u5206\u6790\u8bf7\u6c42\u89e3\u7801\u65f6\u8bf4\u8fc7\uff0c\u8bf7\u6c42\u89e3\u7801\u53ef\u5728 IO \u7ebf\u7a0b\u4e0a\u6267\u884c\uff0c\u4e5f\u53ef\u5728\u7ebf\u7a0b\u6c60\u4e2d\u6267\u884c\uff0c\u8fd9\u4e2a\u53d6\u51b3\u4e8e\u8fd0\u884c\u65f6\u914d\u7f6e\u3002DecodeHandler \u5b58\u5728\u7684\u610f\u4e49\u5c31\u662f\u4fdd\u8bc1\u8bf7\u6c42\u6216\u54cd\u5e94\u5bf9\u8c61\u53ef\u5728\u7ebf\u7a0b\u6c60\u4e2d\u88ab\u89e3\u7801\u3002\u89e3\u7801\u5b8c\u6bd5\u540e\uff0c\u5b8c\u5168\u89e3\u7801\u540e\u7684 Request \u5bf9\u8c61\u4f1a\u7ee7\u7eed\u5411\u540e\u4f20\u9012\uff0c\u4e0b\u4e00\u7ad9\u662f HeaderExchangeHandler\u3002 public class HeaderExchangeHandler implements ChannelHandlerDelegate { private final ExchangeHandler handler; public HeaderExchangeHandler(ExchangeHandler handler) { if (handler == null) { throw new IllegalArgumentException( handler == null ); } this.handler = handler; } @Override public void received(Channel channel, Object message) throws RemotingException { channel.setAttribute(KEY_READ_TIMESTAMP, System.currentTimeMillis()); ExchangeChannel exchangeChannel = HeaderExchangeChannel.getOrAddChannel(channel); try { // \u5904\u7406\u8bf7\u6c42\u5bf9\u8c61 if (message instanceof Request) { Request request = (Request) message; if (request.isEvent()) { // \u5904\u7406\u4e8b\u4ef6 handlerEvent(channel, request); } // \u5904\u7406\u666e\u901a\u7684\u8bf7\u6c42 else { // \u53cc\u5411\u901a\u4fe1 if (request.isTwoWay()) { // \u5411\u540e\u8c03\u7528\u670d\u52a1\uff0c\u5e76\u5f97\u5230\u8c03\u7528\u7ed3\u679c Response response = handleRequest(exchangeChannel, request); // \u5c06\u8c03\u7528\u7ed3\u679c\u8fd4\u56de\u7ed9\u670d\u52a1\u6d88\u8d39\u7aef channel.send(response); } // \u5982\u679c\u662f\u5355\u5411\u901a\u4fe1\uff0c\u4ec5\u5411\u540e\u8c03\u7528\u6307\u5b9a\u670d\u52a1\u5373\u53ef\uff0c\u65e0\u9700\u8fd4\u56de\u8c03\u7528\u7ed3\u679c else { handler.received(exchangeChannel, request.getData()); } } } // \u5904\u7406\u54cd\u5e94\u5bf9\u8c61\uff0c\u670d\u52a1\u6d88\u8d39\u65b9\u4f1a\u6267\u884c\u6b64\u5904\u903b\u8f91\uff0c\u540e\u9762\u5206\u6790 else if (message instanceof Response) { handleResponse(channel, (Response) message); } else if (message instanceof String) { // telnet \u76f8\u5173\uff0c\u5ffd\u7565 } else { handler.received(exchangeChannel, message); } } finally { HeaderExchangeChannel.removeChannelIfDisconnected(channel); } } Response handleRequest(ExchangeChannel channel, Request req) throws RemotingException { Response res = new Response(req.getId(), req.getVersion()); // \u68c0\u6d4b\u8bf7\u6c42\u662f\u5426\u5408\u6cd5\uff0c\u4e0d\u5408\u6cd5\u5219\u8fd4\u56de\u72b6\u6001\u7801\u4e3a BAD_REQUEST \u7684\u54cd\u5e94 if (req.isBroken()) { Object data = req.getData(); String msg; if (data == null) msg = null; else if (data instanceof Throwable) msg = StringUtils.toString((Throwable) data); else msg = data.toString(); res.setErrorMessage( Fail to decode request due to: + msg); // \u8bbe\u7f6e BAD_REQUEST \u72b6\u6001 res.setStatus(Response.BAD_REQUEST); return res; } // \u83b7\u53d6 data \u5b57\u6bb5\u503c\uff0c\u4e5f\u5c31\u662f RpcInvocation \u5bf9\u8c61 Object msg = req.getData(); try { // \u7ee7\u7eed\u5411\u4e0b\u8c03\u7528 Object result = handler.reply(channel, msg); // \u8bbe\u7f6e OK \u72b6\u6001\u7801 res.setStatus(Response.OK); // \u8bbe\u7f6e\u8c03\u7528\u7ed3\u679c res.setResult(result); } catch (Throwable e) { // \u82e5\u8c03\u7528\u8fc7\u7a0b\u51fa\u73b0\u5f02\u5e38\uff0c\u5219\u8bbe\u7f6e SERVICE_ERROR\uff0c\u8868\u793a\u670d\u52a1\u7aef\u5f02\u5e38 res.setStatus(Response.SERVICE_ERROR); res.setErrorMessage(StringUtils.toString(e)); } return res; } } \u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u770b\u5230\u4e86\u6bd4\u8f83\u6e05\u6670\u7684\u8bf7\u6c42\u548c\u54cd\u5e94\u903b\u8f91\u3002\u5bf9\u4e8e\u53cc\u5411\u901a\u4fe1\uff0cHeaderExchangeHandler \u9996\u5148\u5411\u540e\u8fdb\u884c\u8c03\u7528\uff0c\u5f97\u5230\u8c03\u7528\u7ed3\u679c\u3002\u7136\u540e\u5c06\u8c03\u7528\u7ed3\u679c\u5c01\u88c5\u5230 Response \u5bf9\u8c61\u4e2d\uff0c\u6700\u540e\u518d\u5c06\u8be5\u5bf9\u8c61\u8fd4\u56de\u7ed9\u670d\u52a1\u6d88\u8d39\u65b9\u3002\u5982\u679c\u8bf7\u6c42\u4e0d\u5408\u6cd5\uff0c\u6216\u8005\u8c03\u7528\u5931\u8d25\uff0c\u5219\u5c06\u9519\u8bef\u4fe1\u606f\u5c01\u88c5\u5230 Response \u5bf9\u8c61\u4e2d\uff0c\u5e76\u8fd4\u56de\u7ed9\u670d\u52a1\u6d88\u8d39\u65b9\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u7ee7\u7eed\u5411\u540e\u5206\u6790\uff0c\u628a\u5269\u4f59\u7684\u8c03\u7528\u8fc7\u7a0b\u5206\u6790\u5b8c\u3002\u4e0b\u9762\u5206\u6790\u5b9a\u4e49\u5728 DubboProtocol \u7c7b\u4e2d\u7684\u533f\u540d\u7c7b\u5bf9\u8c61\u903b\u8f91\uff0c\u5982\u4e0b\uff1a public class DubboProtocol extends AbstractProtocol { public static final String NAME = dubbo ; private ExchangeHandler requestHandler = new ExchangeHandlerAdapter() { @Override public Object reply(ExchangeChannel channel, Object message) throws RemotingException { if (message instanceof Invocation) { Invocation inv = (Invocation) message; // \u83b7\u53d6 Invoker \u5b9e\u4f8b Invoker ? invoker = getInvoker(channel, inv); if (Boolean.TRUE.toString().equals(inv.getAttachments().get(IS_CALLBACK_SERVICE_INVOKE))) { // \u56de\u8c03\u76f8\u5173\uff0c\u5ffd\u7565 } RpcContext.getContext().setRemoteAddress(channel.getRemoteAddress()); // \u901a\u8fc7 Invoker \u8c03\u7528\u5177\u4f53\u7684\u670d\u52a1 return invoker.invoke(inv); } throw new RemotingException(channel, Unsupported request: ... ); } // \u5ffd\u7565\u5176\u4ed6\u65b9\u6cd5 } Invoker ? getInvoker(Channel channel, Invocation inv) throws RemotingException { // \u5ffd\u7565\u56de\u8c03\u548c\u672c\u5730\u5b58\u6839\u76f8\u5173\u903b\u8f91 // ... int port = channel.getLocalAddress().getPort(); // \u8ba1\u7b97 service key\uff0c\u683c\u5f0f\u4e3a groupName/serviceName:serviceVersion:port\u3002\u6bd4\u5982\uff1a // dubbo/com.alibaba.dubbo.demo.DemoService:1.0.0:20880 String serviceKey = serviceKey(port, path, inv.getAttachments().get(Constants.VERSION_KEY), inv.getAttachments().get(Constants.GROUP_KEY)); // \u4ece exporterMap \u67e5\u627e\u4e0e serviceKey \u76f8\u5bf9\u5e94\u7684 DubboExporter \u5bf9\u8c61\uff0c // \u670d\u52a1\u5bfc\u51fa\u8fc7\u7a0b\u4e2d\u4f1a\u5c06 serviceKey, DubboExporter \u6620\u5c04\u5173\u7cfb\u5b58\u50a8\u5230 exporterMap \u96c6\u5408\u4e2d DubboExporter ? exporter = (DubboExporter ? ) exporterMap.get(serviceKey); if (exporter == null) throw new RemotingException(channel, Not found exported service ... ); // \u83b7\u53d6 Invoker \u5bf9\u8c61\uff0c\u5e76\u8fd4\u56de return exporter.getInvoker(); } // \u5ffd\u7565\u5176\u4ed6\u65b9\u6cd5 } \u4ee5\u4e0a\u903b\u8f91\u7528\u4e8e\u83b7\u53d6\u4e0e\u6307\u5b9a\u670d\u52a1\u5bf9\u5e94\u7684 Invoker \u5b9e\u4f8b\uff0c\u5e76\u901a\u8fc7 Invoker \u7684 invoke \u65b9\u6cd5\u8c03\u7528\u670d\u52a1\u903b\u8f91\u3002invoke \u65b9\u6cd5\u5b9a\u4e49\u5728 AbstractProxyInvoker \u4e2d\uff0c\u4ee3\u7801\u5982\u4e0b\u3002 public abstract class AbstractProxyInvoker T implements Invoker T { @Override public Result invoke(Invocation invocation) throws RpcException { try { // \u8c03\u7528 doInvoke \u6267\u884c\u540e\u7eed\u7684\u8c03\u7528\uff0c\u5e76\u5c06\u8c03\u7528\u7ed3\u679c\u5c01\u88c5\u5230 RpcResult \u4e2d\uff0c\u5e76 return new RpcResult(doInvoke(proxy, invocation.getMethodName(), invocation.getParameterTypes(), invocation.getArguments())); } catch (InvocationTargetException e) { return new RpcResult(e.getTargetException()); } catch (Throwable e) { throw new RpcException( Failed to invoke remote proxy method ... ); } } protected abstract Object doInvoke(T proxy, String methodName, Class ? [] parameterTypes, Object[] arguments) throws Throwable; } \u5982\u4e0a\uff0cdoInvoke \u662f\u4e00\u4e2a\u62bd\u8c61\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u9700\u8981\u7531\u5177\u4f53\u7684 Invoker \u5b9e\u4f8b\u5b9e\u73b0\u3002Invoker \u5b9e\u4f8b\u662f\u5728\u8fd0\u884c\u65f6\u901a\u8fc7 JavassistProxyFactory \u521b\u5efa\u7684\uff0c\u521b\u5efa\u903b\u8f91\u5982\u4e0b\uff1a public class JavassistProxyFactory extends AbstractProxyFactory { // \u7701\u7565\u5176\u4ed6\u65b9\u6cd5 @Override public T Invoker T getInvoker(T proxy, Class T type, URL url) { final Wrapper wrapper = Wrapper.getWrapper(proxy.getClass().getName().indexOf('$') 0 ? proxy.getClass() : type); // \u521b\u5efa\u533f\u540d\u7c7b\u5bf9\u8c61 return new AbstractProxyInvoker T (proxy, type, url) { @Override protected Object doInvoke(T proxy, String methodName, Class ? [] parameterTypes, Object[] arguments) throws Throwable { // \u8c03\u7528 invokeMethod \u65b9\u6cd5\u8fdb\u884c\u540e\u7eed\u7684\u8c03\u7528 return wrapper.invokeMethod(proxy, methodName, parameterTypes, arguments); } }; } } Wrapper \u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u5176\u4e2d invokeMethod \u662f\u4e00\u4e2a\u62bd\u8c61\u65b9\u6cd5\u3002Dubbo \u4f1a\u5728\u8fd0\u884c\u65f6\u901a\u8fc7 Javassist \u6846\u67b6\u4e3a Wrapper \u751f\u6210\u5b9e\u73b0\u7c7b\uff0c\u5e76\u5b9e\u73b0 invokeMethod \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u6700\u7ec8\u4f1a\u6839\u636e\u8c03\u7528\u4fe1\u606f\u8c03\u7528\u5177\u4f53\u7684\u670d\u52a1\u3002\u4ee5 DemoServiceImpl \u4e3a\u4f8b\uff0cJavassist \u4e3a\u5176\u751f\u6210\u7684\u4ee3\u7406\u7c7b\u5982\u4e0b\u3002 /** Wrapper0 \u662f\u5728\u8fd0\u884c\u65f6\u751f\u6210\u7684\uff0c\u5927\u5bb6\u53ef\u4f7f\u7528 Arthas \u8fdb\u884c\u53cd\u7f16\u8bd1 */ public class Wrapper0 extends Wrapper implements ClassGenerator.DC { public static String[] pns; public static Map pts; public static String[] mns; public static String[] dmns; public static Class[] mts0; // \u7701\u7565\u5176\u4ed6\u65b9\u6cd5 public Object invokeMethod(Object object, String string, Class[] arrclass, Object[] arrobject) throws InvocationTargetException { DemoService demoService; try { // \u7c7b\u578b\u8f6c\u6362 demoService = (DemoService)object; } catch (Throwable throwable) { throw new IllegalArgumentException(throwable); } try { // \u6839\u636e\u65b9\u6cd5\u540d\u8c03\u7528\u6307\u5b9a\u7684\u65b9\u6cd5 if ( sayHello .equals(string) arrclass.length == 1) { return demoService.sayHello((String)arrobject[0]); } } catch (Throwable throwable) { throw new InvocationTargetException(throwable); } throw new NoSuchMethodException(new StringBuffer().append( Not found method \\ ).append(string).append( \\ in class com.alibaba.dubbo.demo.DemoService. ).toString()); } } \u5230\u8fd9\u91cc\uff0c\u6574\u4e2a\u670d\u52a1\u8c03\u7528\u8fc7\u7a0b\u5c31\u5206\u6790\u5b8c\u4e86\u3002\u6700\u540e\u628a\u8c03\u7528\u8fc7\u7a0b\u8d34\u51fa\u6765\uff0c\u5982\u4e0b\uff1a ChannelEventRunnable#run() \u2014 DecodeHandler#received(Channel, Object) \u2014 HeaderExchangeHandler#received(Channel, Object) \u2014 HeaderExchangeHandler#handleRequest(ExchangeChannel, Request) \u2014 DubboProtocol.requestHandler#reply(ExchangeChannel, Object) \u2014 Filter#invoke(Invoker, Invocation) \u2014 AbstractProxyInvoker#invoke(Invocation) \u2014 Wrapper0#invokeMethod(Object, String, Class[], Object[]) \u2014 DemoServiceImpl#sayHello(String)","title":"2.3.2.2 \u8c03\u7528\u670d\u52a1"},{"location":"source_code_guide/service-invoking-process/#24","text":"\u670d\u52a1\u63d0\u4f9b\u65b9\u8c03\u7528\u6307\u5b9a\u670d\u52a1\u540e\uff0c\u4f1a\u5c06\u8c03\u7528\u7ed3\u679c\u5c01\u88c5\u5230 Response \u5bf9\u8c61\u4e2d\uff0c\u5e76\u5c06\u8be5\u5bf9\u8c61\u8fd4\u56de\u7ed9\u670d\u52a1\u6d88\u8d39\u65b9\u3002\u670d\u52a1\u63d0\u4f9b\u65b9\u4e5f\u662f\u901a\u8fc7 NettyChannel \u7684 send \u65b9\u6cd5\u5c06 Response \u5bf9\u8c61\u8fd4\u56de\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5728 2.2.1 \u8282\u5206\u6790\u8fc7\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5728\u91cd\u590d\u5206\u6790\u4e86\u3002\u672c\u8282\u6211\u4eec\u4ec5\u9700\u5173\u6ce8 Response \u5bf9\u8c61\u7684\u7f16\u7801\u8fc7\u7a0b\u5373\u53ef\uff0c\u8fd9\u91cc\u4ecd\u7136\u7701\u7565\u4e00\u4e9b\u4e2d\u95f4\u8c03\u7528\uff0c\u76f4\u63a5\u5206\u6790\u5177\u4f53\u7684\u7f16\u7801\u903b\u8f91\u3002 public class ExchangeCodec extends TelnetCodec { public void encode(Channel channel, ChannelBuffer buffer, Object msg) throws IOException { if (msg instanceof Request) { encodeRequest(channel, buffer, (Request) msg); } else if (msg instanceof Response) { // \u5bf9\u54cd\u5e94\u5bf9\u8c61\u8fdb\u884c\u7f16\u7801 encodeResponse(channel, buffer, (Response) msg); } else { super.encode(channel, buffer, msg); } } protected void encodeResponse(Channel channel, ChannelBuffer buffer, Response res) throws IOException { int savedWriteIndex = buffer.writerIndex(); try { Serialization serialization = getSerialization(channel); // \u521b\u5efa\u6d88\u606f\u5934\u5b57\u8282\u6570\u7ec4 byte[] header = new byte[HEADER_LENGTH]; // \u8bbe\u7f6e\u9b54\u6570 Bytes.short2bytes(MAGIC, header); // \u8bbe\u7f6e\u5e8f\u5217\u5316\u5668\u7f16\u53f7 header[2] = serialization.getContentTypeId(); if (res.isHeartbeat()) header[2] |= FLAG_EVENT; // \u83b7\u53d6\u54cd\u5e94\u72b6\u6001 byte status = res.getStatus(); // \u8bbe\u7f6e\u54cd\u5e94\u72b6\u6001 header[3] = status; // \u8bbe\u7f6e\u8bf7\u6c42\u7f16\u53f7 Bytes.long2bytes(res.getId(), header, 4); // \u66f4\u65b0 writerIndex\uff0c\u4e3a\u6d88\u606f\u5934\u9884\u7559 16 \u4e2a\u5b57\u8282\u7684\u7a7a\u95f4 buffer.writerIndex(savedWriteIndex + HEADER_LENGTH); ChannelBufferOutputStream bos = new ChannelBufferOutputStream(buffer); ObjectOutput out = serialization.serialize(channel.getUrl(), bos); if (status == Response.OK) { if (res.isHeartbeat()) { // \u5bf9\u5fc3\u8df3\u54cd\u5e94\u7ed3\u679c\u8fdb\u884c\u5e8f\u5217\u5316\uff0c\u5df2\u5e9f\u5f03 encodeHeartbeatData(channel, out, res.getResult()); } else { // \u5bf9\u8c03\u7528\u7ed3\u679c\u8fdb\u884c\u5e8f\u5217\u5316 encodeResponseData(channel, out, res.getResult(), res.getVersion()); } } else { // \u5bf9\u9519\u8bef\u4fe1\u606f\u8fdb\u884c\u5e8f\u5217\u5316 out.writeUTF(res.getErrorMessage()) }; out.flushBuffer(); if (out instanceof Cleanable) { ((Cleanable) out).cleanup(); } bos.flush(); bos.close(); // \u83b7\u53d6\u5199\u5165\u7684\u5b57\u8282\u6570\uff0c\u4e5f\u5c31\u662f\u6d88\u606f\u4f53\u957f\u5ea6 int len = bos.writtenBytes(); checkPayload(channel, len); // \u5c06\u6d88\u606f\u4f53\u957f\u5ea6\u5199\u5165\u5230\u6d88\u606f\u5934\u4e2d Bytes.int2bytes(len, header, 12); // \u5c06 buffer \u6307\u9488\u79fb\u52a8\u5230 savedWriteIndex\uff0c\u4e3a\u5199\u6d88\u606f\u5934\u505a\u51c6\u5907 buffer.writerIndex(savedWriteIndex); // \u4ece savedWriteIndex \u4e0b\u6807\u5904\u5199\u5165\u6d88\u606f\u5934 buffer.writeBytes(header); // \u8bbe\u7f6e\u65b0\u7684 writerIndex\uff0cwriterIndex = \u539f\u5199\u4e0b\u6807 + \u6d88\u606f\u5934\u957f\u5ea6 + \u6d88\u606f\u4f53\u957f\u5ea6 buffer.writerIndex(savedWriteIndex + HEADER_LENGTH + len); } catch (Throwable t) { // \u5f02\u5e38\u5904\u7406\u903b\u8f91\u4e0d\u662f\u5f88\u96be\u7406\u89e3\uff0c\u4f46\u662f\u4ee3\u7801\u7565\u591a\uff0c\u8fd9\u91cc\u5ffd\u7565\u4e86 } } } public class DubboCodec extends ExchangeCodec implements Codec2 { protected void encodeResponseData(Channel channel, ObjectOutput out, Object data, String version) throws IOException { Result result = (Result) data; // \u68c0\u6d4b\u5f53\u524d\u534f\u8bae\u7248\u672c\u662f\u5426\u652f\u6301\u5e26\u6709 attachment \u96c6\u5408\u7684 Response \u5bf9\u8c61 boolean attach = Version.isSupportResponseAttachment(version); Throwable th = result.getException(); // \u5f02\u5e38\u4fe1\u606f\u4e3a\u7a7a if (th == null) { Object ret = result.getValue(); // \u8c03\u7528\u7ed3\u679c\u4e3a\u7a7a if (ret == null) { // \u5e8f\u5217\u5316\u54cd\u5e94\u7c7b\u578b out.writeByte(attach ? RESPONSE_NULL_VALUE_WITH_ATTACHMENTS : RESPONSE_NULL_VALUE); } // \u8c03\u7528\u7ed3\u679c\u975e\u7a7a else { // \u5e8f\u5217\u5316\u54cd\u5e94\u7c7b\u578b out.writeByte(attach ? RESPONSE_VALUE_WITH_ATTACHMENTS : RESPONSE_VALUE); // \u5e8f\u5217\u5316\u8c03\u7528\u7ed3\u679c out.writeObject(ret); } } // \u5f02\u5e38\u4fe1\u606f\u975e\u7a7a else { // \u5e8f\u5217\u5316\u54cd\u5e94\u7c7b\u578b out.writeByte(attach ? RESPONSE_WITH_EXCEPTION_WITH_ATTACHMENTS : RESPONSE_WITH_EXCEPTION); // \u5e8f\u5217\u5316\u5f02\u5e38\u5bf9\u8c61 out.writeObject(th); } if (attach) { // \u8bb0\u5f55 Dubbo \u534f\u8bae\u7248\u672c result.getAttachments().put(Constants.DUBBO_VERSION_KEY, Version.getProtocolVersion()); // \u5e8f\u5217\u5316 attachments \u96c6\u5408 out.writeObject(result.getAttachments()); } } } \u4ee5\u4e0a\u5c31\u662f Response \u5bf9\u8c61\u7f16\u7801\u7684\u8fc7\u7a0b\uff0c\u548c\u524d\u9762\u5206\u6790\u7684 Request \u5bf9\u8c61\u7f16\u7801\u8fc7\u7a0b\u5f88\u76f8\u4f3c\u3002\u5982\u679c\u5927\u5bb6\u80fd\u770b Request \u5bf9\u8c61\u7684\u7f16\u7801\u903b\u8f91\uff0c\u90a3\u4e48\u8fd9\u91cc\u7684 Response \u5bf9\u8c61\u7684\u7f16\u7801\u903b\u8f91\u4e5f\u4e0d\u96be\u7406\u89e3\uff0c\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u518d\u6765\u5206\u6790\u53cc\u5411\u901a\u4fe1\u7684\u6700\u540e\u4e00\u73af \u2014\u2014 \u670d\u52a1\u6d88\u8d39\u65b9\u63a5\u6536\u8c03\u7528\u7ed3\u679c\u3002","title":"2.4 \u670d\u52a1\u63d0\u4f9b\u65b9\u8fd4\u56de\u8c03\u7528\u7ed3\u679c"},{"location":"source_code_guide/service-invoking-process/#25","text":"\u670d\u52a1\u6d88\u8d39\u65b9\u5728\u6536\u5230\u54cd\u5e94\u6570\u636e\u540e\uff0c\u9996\u5148\u8981\u505a\u7684\u4e8b\u60c5\u662f\u5bf9\u54cd\u5e94\u6570\u636e\u8fdb\u884c\u89e3\u7801\uff0c\u5f97\u5230 Response \u5bf9\u8c61\u3002\u7136\u540e\u518d\u5c06\u8be5\u5bf9\u8c61\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u5165\u7ad9\u5904\u7406\u5668\uff0c\u8fd9\u4e2a\u5165\u7ad9\u5904\u7406\u5668\u5c31\u662f NettyHandler\u3002\u63a5\u4e0b\u6765 NettyHandler \u4f1a\u5c06\u8fd9\u4e2a\u5bf9\u8c61\u7ee7\u7eed\u5411\u4e0b\u4f20\u9012\uff0c\u6700\u540e AllChannelHandler \u7684 received \u65b9\u6cd5\u4f1a\u6536\u5230\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u5e76\u5c06\u8fd9\u4e2a\u5bf9\u8c61\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\u4e2d\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u548c\u670d\u52a1\u63d0\u4f9b\u65b9\u63a5\u6536\u8bf7\u6c42\u7684\u8fc7\u7a0b\u662f\u4e00\u6837\u7684\uff0c\u56e0\u6b64\u8fd9\u91cc\u5c31\u4e0d\u91cd\u590d\u5206\u6790\u4e86\u3002\u672c\u8282\u6211\u4eec\u91cd\u70b9\u5206\u6790\u4e24\u4e2a\u65b9\u9762\u7684\u5185\u5bb9\uff0c\u4e00\u662f\u54cd\u5e94\u6570\u636e\u7684\u89e3\u7801\u8fc7\u7a0b\uff0c\u4e8c\u662f Dubbo \u5982\u4f55\u5c06\u8c03\u7528\u7ed3\u679c\u4f20\u9012\u7ed9\u7528\u6237\u7ebf\u7a0b\u7684\u3002\u4e0b\u9762\u5148\u6765\u5206\u6790\u54cd\u5e94\u6570\u636e\u7684\u89e3\u7801\u8fc7\u7a0b\u3002","title":"2.5 \u670d\u52a1\u6d88\u8d39\u65b9\u63a5\u6536\u8c03\u7528\u7ed3\u679c"},{"location":"source_code_guide/service-invoking-process/#251","text":"\u54cd\u5e94\u6570\u636e\u89e3\u7801\u903b\u8f91\u4e3b\u8981\u7684\u903b\u8f91\u5c01\u88c5\u5728 DubboCodec \u4e2d\uff0c\u6211\u4eec\u76f4\u63a5\u5206\u6790\u8fd9\u4e2a\u7c7b\u7684\u4ee3\u7801\u3002\u5982\u4e0b\uff1a public class DubboCodec extends ExchangeCodec implements Codec2 { @Override protected Object decodeBody(Channel channel, InputStream is, byte[] header) throws IOException { byte flag = header[2], proto = (byte) (flag SERIALIZATION_MASK); Serialization s = CodecSupport.getSerialization(channel.getUrl(), proto); // \u83b7\u53d6\u8bf7\u6c42\u7f16\u53f7 long id = Bytes.bytes2long(header, 4); // \u68c0\u6d4b\u6d88\u606f\u7c7b\u578b\uff0c\u82e5\u4e0b\u9762\u7684\u6761\u4ef6\u6210\u7acb\uff0c\u8868\u660e\u6d88\u606f\u7c7b\u578b\u4e3a Response if ((flag FLAG_REQUEST) == 0) { // \u521b\u5efa Response \u5bf9\u8c61 Response res = new Response(id); // \u68c0\u6d4b\u4e8b\u4ef6\u6807\u5fd7\u4f4d if ((flag FLAG_EVENT) != 0) { // \u8bbe\u7f6e\u5fc3\u8df3\u4e8b\u4ef6 res.setEvent(Response.HEARTBEAT_EVENT); } // \u83b7\u53d6\u54cd\u5e94\u72b6\u6001 byte status = header[3]; // \u8bbe\u7f6e\u54cd\u5e94\u72b6\u6001 res.setStatus(status); // \u5982\u679c\u54cd\u5e94\u72b6\u6001\u4e3a OK\uff0c\u8868\u660e\u8c03\u7528\u8fc7\u7a0b\u6b63\u5e38 if (status == Response.OK) { try { Object data; if (res.isHeartbeat()) { // \u53cd\u5e8f\u5217\u5316\u5fc3\u8df3\u6570\u636e\uff0c\u5df2\u5e9f\u5f03 data = decodeHeartbeatData(channel, deserialize(s, channel.getUrl(), is)); } else if (res.isEvent()) { // \u53cd\u5e8f\u5217\u5316\u4e8b\u4ef6\u6570\u636e data = decodeEventData(channel, deserialize(s, channel.getUrl(), is)); } else { DecodeableRpcResult result; // \u6839\u636e url \u53c2\u6570\u51b3\u5b9a\u662f\u5426\u5728 IO \u7ebf\u7a0b\u4e0a\u6267\u884c\u89e3\u7801\u903b\u8f91 if (channel.getUrl().getParameter( Constants.DECODE_IN_IO_THREAD_KEY, Constants.DEFAULT_DECODE_IN_IO_THREAD)) { // \u521b\u5efa DecodeableRpcResult \u5bf9\u8c61 result = new DecodeableRpcResult(channel, res, is, (Invocation) getRequestData(id), proto); // \u8fdb\u884c\u540e\u7eed\u7684\u89e3\u7801\u5de5\u4f5c result.decode(); } else { // \u521b\u5efa DecodeableRpcResult \u5bf9\u8c61 result = new DecodeableRpcResult(channel, res, new UnsafeByteArrayInputStream(readMessageData(is)), (Invocation) getRequestData(id), proto); } data = result; } // \u8bbe\u7f6e DecodeableRpcResult \u5bf9\u8c61\u5230 Response \u5bf9\u8c61\u4e2d res.setResult(data); } catch (Throwable t) { // \u89e3\u7801\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u4e86\u9519\u8bef\uff0c\u6b64\u65f6\u8bbe\u7f6e CLIENT_ERROR \u72b6\u6001\u7801\u5230 Response \u5bf9\u8c61\u4e2d res.setStatus(Response.CLIENT_ERROR); res.setErrorMessage(StringUtils.toString(t)); } } // \u54cd\u5e94\u72b6\u6001\u975e OK\uff0c\u8868\u660e\u8c03\u7528\u8fc7\u7a0b\u51fa\u73b0\u4e86\u5f02\u5e38 else { // \u53cd\u5e8f\u5217\u5316\u5f02\u5e38\u4fe1\u606f\uff0c\u5e76\u8bbe\u7f6e\u5230 Response \u5bf9\u8c61\u4e2d res.setErrorMessage(deserialize(s, channel.getUrl(), is).readUTF()); } return res; } else { // \u5bf9\u8bf7\u6c42\u6570\u636e\u8fdb\u884c\u89e3\u7801\uff0c\u524d\u9762\u5df2\u5206\u6790\u8fc7\uff0c\u6b64\u5904\u5ffd\u7565 } } } \u4ee5\u4e0a\u5c31\u662f\u54cd\u5e94\u6570\u636e\u7684\u89e3\u7801\u8fc7\u7a0b\uff0c\u4e0a\u9762\u903b\u8f91\u770b\u8d77\u6765\u662f\u4e0d\u662f\u4f3c\u66fe\u76f8\u8bc6\u3002\u5bf9\u7684\uff0c\u6211\u4eec\u5728\u524d\u9762\u7ae0\u8282\u5206\u6790\u8fc7 DubboCodec \u7684 decodeBody \u65b9\u6cd5\u4e2d\u5173\u4e8e\u8bf7\u6c42\u6570\u636e\u7684\u89e3\u7801\u8fc7\u7a0b\uff0c\u8be5\u8fc7\u7a0b\u548c\u54cd\u5e94\u6570\u636e\u7684\u89e3\u7801\u8fc7\u7a0b\u5f88\u76f8\u4f3c\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u7ee7\u7eed\u5206\u6790\u8c03\u7528\u7ed3\u679c\u7684\u53cd\u5e8f\u5217\u5316\u8fc7\u7a0b\uff0c\u5982\u4e0b\uff1a public class DecodeableRpcResult extends RpcResult implements Codec, Decodeable { private Invocation invocation; @Override public void decode() throws Exception { if (!hasDecoded channel != null inputStream != null) { try { // \u6267\u884c\u53cd\u5e8f\u5217\u5316\u64cd\u4f5c decode(channel, inputStream); } catch (Throwable e) { // \u53cd\u5e8f\u5217\u5316\u5931\u8d25\uff0c\u8bbe\u7f6e CLIENT_ERROR \u72b6\u6001\u5230 Response \u5bf9\u8c61\u4e2d response.setStatus(Response.CLIENT_ERROR); // \u8bbe\u7f6e\u5f02\u5e38\u4fe1\u606f response.setErrorMessage(StringUtils.toString(e)); } finally { hasDecoded = true; } } } @Override public Object decode(Channel channel, InputStream input) throws IOException { ObjectInput in = CodecSupport.getSerialization(channel.getUrl(), serializationType) .deserialize(channel.getUrl(), input); // \u53cd\u5e8f\u5217\u5316\u54cd\u5e94\u7c7b\u578b byte flag = in.readByte(); switch (flag) { case DubboCodec.RESPONSE_NULL_VALUE: break; case DubboCodec.RESPONSE_VALUE: // ... break; case DubboCodec.RESPONSE_WITH_EXCEPTION: // ... break; // \u8fd4\u56de\u503c\u4e3a\u7a7a\uff0c\u4e14\u643a\u5e26\u4e86 attachments \u96c6\u5408 case DubboCodec.RESPONSE_NULL_VALUE_WITH_ATTACHMENTS: try { // \u53cd\u5e8f\u5217\u5316 attachments \u96c6\u5408\uff0c\u5e76\u5b58\u50a8\u8d77\u6765 setAttachments((Map String, String ) in.readObject(Map.class)); } catch (ClassNotFoundException e) { throw new IOException(StringUtils.toString( Read response data failed. , e)); } break; // \u8fd4\u56de\u503c\u4e0d\u4e3a\u7a7a\uff0c\u4e14\u643a\u5e26\u4e86 attachments \u96c6\u5408 case DubboCodec.RESPONSE_VALUE_WITH_ATTACHMENTS: try { // \u83b7\u53d6\u8fd4\u56de\u503c\u7c7b\u578b Type[] returnType = RpcUtils.getReturnTypes(invocation); // \u53cd\u5e8f\u5217\u5316\u8c03\u7528\u7ed3\u679c\uff0c\u5e76\u4fdd\u5b58\u8d77\u6765 setValue(returnType == null || returnType.length == 0 ? in.readObject() : (returnType.length == 1 ? in.readObject((Class ? ) returnType[0]) : in.readObject((Class ? ) returnType[0], returnType[1]))); // \u53cd\u5e8f\u5217\u5316 attachments \u96c6\u5408\uff0c\u5e76\u5b58\u50a8\u8d77\u6765 setAttachments((Map String, String ) in.readObject(Map.class)); } catch (ClassNotFoundException e) { throw new IOException(StringUtils.toString( Read response data failed. , e)); } break; // \u5f02\u5e38\u5bf9\u8c61\u4e0d\u4e3a\u7a7a\uff0c\u4e14\u643a\u5e26\u4e86 attachments \u96c6\u5408 case DubboCodec.RESPONSE_WITH_EXCEPTION_WITH_ATTACHMENTS: try { // \u53cd\u5e8f\u5217\u5316\u5f02\u5e38\u5bf9\u8c61 Object obj = in.readObject(); if (obj instanceof Throwable == false) throw new IOException( Response data error, expect Throwable, but get + obj); // \u8bbe\u7f6e\u5f02\u5e38\u5bf9\u8c61 setException((Throwable) obj); // \u53cd\u5e8f\u5217\u5316 attachments \u96c6\u5408\uff0c\u5e76\u5b58\u50a8\u8d77\u6765 setAttachments((Map String, String ) in.readObject(Map.class)); } catch (ClassNotFoundException e) { throw new IOException(StringUtils.toString( Read response data failed. , e)); } break; default: throw new IOException( Unknown result flag, expect '0' '1' '2', get + flag); } if (in instanceof Cleanable) { ((Cleanable) in).cleanup(); } return this; } } \u672c\u7bc7\u6587\u7ae0\u6240\u5206\u6790\u7684\u6e90\u7801\u7248\u672c\u4e3a 2.6.4\uff0c\u8be5\u7248\u672c\u4e0b\u7684 Response \u652f\u6301 attachments \u96c6\u5408\uff0c\u6240\u4ee5\u4e0a\u9762\u4ec5\u5bf9\u90e8\u5206 case \u5206\u652f\u8fdb\u884c\u4e86\u6ce8\u91ca\u3002\u5176\u4ed6 case \u5206\u652f\u7684\u903b\u8f91\u6bd4\u88ab\u6ce8\u91ca\u5206\u652f\u7684\u903b\u8f91\u66f4\u4e3a\u7b80\u5355\uff0c\u8fd9\u91cc\u5c31\u5ffd\u7565\u4e86\u3002\u6211\u4eec\u6240\u4f7f\u7528\u7684\u6d4b\u8bd5\u670d\u52a1\u63a5\u53e3 DemoService \u5305\u542b\u4e86\u4e00\u4e2a\u5177\u6709\u8fd4\u56de\u503c\u7684\u65b9\u6cd5\uff0c\u6b63\u5e38\u8c03\u7528\u4e0b\uff0c\u7ebf\u7a0b\u4f1a\u8fdb\u5165 RESPONSE_VALUE_WITH_ATTACHMENTS \u5206\u652f\u4e2d\u3002\u7136\u540e\u7ebf\u7a0b\u4f1a\u4ece invocation \u53d8\u91cf\uff08\u5927\u5bb6\u63a2\u7d22\u4e00\u4e0b invocation \u53d8\u91cf\u7684\u7531\u6765\uff09\u4e2d\u83b7\u53d6\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u63a5\u7740\u5bf9\u8c03\u7528\u7ed3\u679c\u8fdb\u884c\u53cd\u5e8f\u5217\u5316\uff0c\u5e76\u5c06\u5e8f\u5217\u5316\u540e\u7684\u7ed3\u679c\u5b58\u50a8\u8d77\u6765\u3002\u6700\u540e\u5bf9 attachments \u96c6\u5408\u8fdb\u884c\u53cd\u5e8f\u5217\u5316\uff0c\u5e76\u5b58\u5230\u6307\u5b9a\u5b57\u6bb5\u4e2d\u3002\u5230\u6b64\uff0c\u5173\u4e8e\u54cd\u5e94\u6570\u636e\u7684\u89e3\u7801\u8fc7\u7a0b\u5c31\u5206\u6790\u5b8c\u4e86\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u518d\u6765\u63a2\u7d22\u4e00\u4e0b\u54cd\u5e94\u5bf9\u8c61 Response \u7684\u53bb\u5411\u3002","title":"2.5.1 \u54cd\u5e94\u6570\u636e\u89e3\u7801"},{"location":"source_code_guide/service-invoking-process/#252","text":"\u54cd\u5e94\u6570\u636e\u89e3\u7801\u5b8c\u6210\u540e\uff0cDubbo \u4f1a\u5c06\u54cd\u5e94\u5bf9\u8c61\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\u4e0a\u3002\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7ebf\u7a0b\u6c60\u4e2d\u7684\u7ebf\u7a0b\u5e76\u975e\u7528\u6237\u7684\u8c03\u7528\u7ebf\u7a0b\uff0c\u6240\u4ee5\u8981\u60f3\u529e\u6cd5\u5c06\u54cd\u5e94\u5bf9\u8c61\u4ece\u7ebf\u7a0b\u6c60\u7ebf\u7a0b\u4f20\u9012\u5230\u7528\u6237\u7ebf\u7a0b\u4e0a\u3002\u6211\u4eec\u5728 2.1 \u8282\u5206\u6790\u8fc7\u7528\u6237\u7ebf\u7a0b\u5728\u53d1\u9001\u5b8c\u8bf7\u6c42\u540e\u7684\u52a8\u4f5c\uff0c\u5373\u8c03\u7528 DefaultFuture \u7684 get \u65b9\u6cd5\u7b49\u5f85\u54cd\u5e94\u5bf9\u8c61\u7684\u5230\u6765\u3002\u5f53\u54cd\u5e94\u5bf9\u8c61\u5230\u6765\u540e\uff0c\u7528\u6237\u7ebf\u7a0b\u4f1a\u88ab\u5524\u9192\uff0c\u5e76\u901a\u8fc7 \u8c03\u7528\u7f16\u53f7 \u83b7\u53d6\u5c5e\u4e8e\u81ea\u5df1\u7684\u54cd\u5e94\u5bf9\u8c61\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u6574\u4e2a\u8fc7\u7a0b\u5bf9\u5e94\u7684\u4ee3\u7801\u3002 public class HeaderExchangeHandler implements ChannelHandlerDelegate { @Override public void received(Channel channel, Object message) throws RemotingException { channel.setAttribute(KEY_READ_TIMESTAMP, System.currentTimeMillis()); ExchangeChannel exchangeChannel = HeaderExchangeChannel.getOrAddChannel(channel); try { if (message instanceof Request) { // \u5904\u7406\u8bf7\u6c42\uff0c\u524d\u9762\u5df2\u5206\u6790\u8fc7\uff0c\u7701\u7565 } else if (message instanceof Response) { // \u5904\u7406\u54cd\u5e94 handleResponse(channel, (Response) message); } else if (message instanceof String) { // telnet \u76f8\u5173\uff0c\u5ffd\u7565 } else { handler.received(exchangeChannel, message); } } finally { HeaderExchangeChannel.removeChannelIfDisconnected(channel); } } static void handleResponse(Channel channel, Response response) throws RemotingException { if (response != null !response.isHeartbeat()) { // \u7ee7\u7eed\u5411\u4e0b\u8c03\u7528 DefaultFuture.received(channel, response); } } } public class DefaultFuture implements ResponseFuture { private final Lock lock = new ReentrantLock(); private final Condition done = lock.newCondition(); private volatile Response response; public static void received(Channel channel, Response response) { try { // \u6839\u636e\u8c03\u7528\u7f16\u53f7\u4ece FUTURES \u96c6\u5408\u4e2d\u67e5\u627e\u6307\u5b9a\u7684 DefaultFuture \u5bf9\u8c61 DefaultFuture future = FUTURES.remove(response.getId()); if (future != null) { // \u7ee7\u7eed\u5411\u4e0b\u8c03\u7528 future.doReceived(response); } else { logger.warn( The timeout response finally returned at ... ); } } finally { CHANNELS.remove(response.getId()); } } private void doReceived(Response res) { lock.lock(); try { // \u4fdd\u5b58\u54cd\u5e94\u5bf9\u8c61 response = res; if (done != null) { // \u5524\u9192\u7528\u6237\u7ebf\u7a0b done.signal(); } } finally { lock.unlock(); } if (callback != null) { invokeCallback(callback); } } } \u4ee5\u4e0a\u903b\u8f91\u662f\u5c06\u54cd\u5e94\u5bf9\u8c61\u4fdd\u5b58\u5230\u76f8\u5e94\u7684 DefaultFuture \u5b9e\u4f8b\u4e2d\uff0c\u7136\u540e\u518d\u5524\u9192\u7528\u6237\u7ebf\u7a0b\uff0c\u968f\u540e\u7528\u6237\u7ebf\u7a0b\u5373\u53ef\u4ece DefaultFuture \u5b9e\u4f8b\u4e2d\u83b7\u53d6\u5230\u76f8\u5e94\u7ed3\u679c\u3002 \u672c\u7bc7\u6587\u7ae0\u5728\u591a\u4e2a\u5730\u65b9\u90fd\u5f3a\u8c03\u8fc7\u8c03\u7528\u7f16\u53f7\u5f88\u91cd\u8981\uff0c\u4f46\u4e00\u76f4\u6ca1\u6709\u89e3\u91ca\u539f\u56e0\uff0c\u8fd9\u91cc\u7b80\u5355\u8bf4\u660e\u4e00\u4e0b\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u670d\u52a1\u6d88\u8d39\u65b9\u4f1a\u5e76\u53d1\u8c03\u7528\u591a\u4e2a\u670d\u52a1\uff0c\u6bcf\u4e2a\u7528\u6237\u7ebf\u7a0b\u53d1\u9001\u8bf7\u6c42\u540e\uff0c\u4f1a\u8c03\u7528\u4e0d\u540c DefaultFuture \u5bf9\u8c61\u7684 get \u65b9\u6cd5\u8fdb\u884c\u7b49\u5f85\u3002 \u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u670d\u52a1\u6d88\u8d39\u65b9\u7684\u7ebf\u7a0b\u6c60\u4f1a\u6536\u5230\u591a\u4e2a\u54cd\u5e94\u5bf9\u8c61\u3002\u8fd9\u4e2a\u65f6\u5019\u8981\u8003\u8651\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u4f55\u5c06\u6bcf\u4e2a\u54cd\u5e94\u5bf9\u8c61\u4f20\u9012\u7ed9\u76f8\u5e94\u7684 DefaultFuture \u5bf9\u8c61\uff0c\u4e14\u4e0d\u51fa\u9519\u3002\u7b54\u6848\u662f\u901a\u8fc7\u8c03\u7528\u7f16\u53f7\u3002DefaultFuture \u88ab\u521b\u5efa\u65f6\uff0c\u4f1a\u8981\u6c42\u4f20\u5165\u4e00\u4e2a Request \u5bf9\u8c61\u3002\u6b64\u65f6 DefaultFuture \u53ef\u4ece Request \u5bf9\u8c61\u4e2d\u83b7\u53d6\u8c03\u7528\u7f16\u53f7\uff0c\u5e76\u5c06 \\ \u8c03\u7528\u7f16\u53f7, DefaultFuture \u5bf9\u8c61 \u6620\u5c04\u5173\u7cfb\u5b58\u5165\u5230\u9759\u6001 Map \u4e2d\uff0c\u5373 FUTURES\u3002\u7ebf\u7a0b\u6c60\u4e2d\u7684\u7ebf\u7a0b\u5728\u6536\u5230 Response \u5bf9\u8c61\u540e\uff0c\u4f1a\u6839\u636e Response \u5bf9\u8c61\u4e2d\u7684\u8c03\u7528\u7f16\u53f7\u5230 FUTURES \u96c6\u5408\u4e2d\u53d6\u51fa\u76f8\u5e94\u7684 DefaultFuture \u5bf9\u8c61\uff0c\u7136\u540e\u518d\u5c06 Response \u5bf9\u8c61\u8bbe\u7f6e\u5230 DefaultFuture \u5bf9\u8c61\u4e2d\u3002\u6700\u540e\u518d\u5524\u9192\u7528\u6237\u7ebf\u7a0b\uff0c\u8fd9\u6837\u7528\u6237\u7ebf\u7a0b\u5373\u53ef\u4ece DefaultFuture \u5bf9\u8c61\u4e2d\u83b7\u53d6\u8c03\u7528\u7ed3\u679c\u4e86\u3002\u6574\u4e2a\u8fc7\u7a0b\u5927\u81f4\u5982\u4e0b\u56fe\uff1a","title":"2.5.2 \u5411\u7528\u6237\u7ebf\u7a0b\u4f20\u9012\u8c03\u7528\u7ed3\u679c"},{"location":"source_code_guide/service-invoking-process/#3","text":"\u672c\u7bc7\u6587\u7ae0\u4e3b\u8981\u5bf9 Dubbo \u4e2d\u7684\u51e0\u79cd\u670d\u52a1\u8c03\u7528\u65b9\u5f0f\uff0c\u4ee5\u53ca\u4ece\u53cc\u5411\u901a\u4fe1\u7684\u89d2\u5ea6\u5bf9\u6574\u4e2a\u901a\u4fe1\u8fc7\u7a0b\u8fdb\u884c\u4e86\u8be6\u7ec6\u7684\u5206\u6790\u3002\u6309\u7167\u901a\u4fe1\u987a\u5e8f\uff0c\u901a\u4fe1\u8fc7\u7a0b\u5305\u62ec\u670d\u52a1\u6d88\u8d39\u65b9\u53d1\u9001\u8bf7\u6c42\uff0c\u670d\u52a1\u63d0\u4f9b\u65b9\u63a5\u6536\u8bf7\u6c42\uff0c\u670d\u52a1\u63d0\u4f9b\u65b9\u8fd4\u56de\u54cd\u5e94\u6570\u636e\uff0c\u670d\u52a1\u6d88\u8d39\u65b9\u63a5\u6536\u54cd\u5e94\u6570\u636e\u7b49\u8fc7\u7a0b\u3002\u7406\u89e3\u8fd9\u4e9b\u8fc7\u7a0b\u9700\u8981\u5927\u5bb6\u5bf9\u7f51\u7edc\u7f16\u7a0b\uff0c\u5c24\u5176\u662f Netty \u6709\u4e00\u5b9a\u7684\u4e86\u89e3\u3002\u9650\u4e8e\u7bc7\u5e45\u539f\u56e0\uff0c\u672c\u7bc7\u6587\u7ae0\u65e0\u6cd5\u5c06\u670d\u52a1\u8c03\u7528\u7684\u6240\u6709\u5185\u5bb9\u90fd\u4e00\u4e00\u8fdb\u884c\u5206\u6790\u3002\u5bf9\u4e8e\u672c\u7bc7\u6587\u7ae0\u672a\u8bb2\u5230\u6216\u672a\u8be6\u7ec6\u5206\u6790\u7684\u5185\u5bb9\uff0c\u6bd4\u5982\u670d\u52a1\u964d\u7ea7\u3001\u8fc7\u6ee4\u5668\u94fe\u3001\u4ee5\u53ca\u5e8f\u5217\u5316\u7b49\u3002\u5927\u5bb6\u82e5\u611f\u5174\u8da3\uff0c\u53ef\u81ea\u884c\u8fdb\u884c\u5206\u6790\u3002\u5e76\u5c06\u5206\u6790\u6574\u7406\u6210\u6587\uff0c\u5206\u4eab\u7ed9\u793e\u533a\u3002 \u672c\u7bc7\u6587\u7ae0\u5c31\u5230\u8fd9\u91cc\u4e86\uff0c\u611f\u8c22\u9605\u8bfb\u3002","title":"3. \u603b\u7ed3"},{"location":"user/","text":"\u8fd9\u7bc7\u6587\u6863\u8be6\u7ec6\u8bb2\u89e3\u4e86 dubbo \u7684\u4f7f\u7528\uff0c\u57fa\u672c\u6db5\u76d6 dubbo \u7684\u6240\u6709\u529f\u80fd\u7279\u6027\u3002 \u5982\u679c\u4f60\u6b63\u4f9d\u8d56 dubbo \u4f5c\u4e3a\u4f60\u4e1a\u52a1\u5de5\u7a0b\u7684RPC\u901a\u4fe1\u6846\u67b6\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f5c\u4e3a\u4f60\u7684\u53c2\u8003\u624b\u518c","title":"Home"},{"location":"user/SUMMARY/","text":"Summary 1 \u5165\u95e8 1.1 \u80cc\u666f 1.2 \u9700\u6c42 1.3 \u67b6\u6784 1.4 \u7528\u6cd5 2 \u5feb\u901f\u542f\u52a8 3 \u4f9d\u8d56 4 \u6210\u719f\u5ea6 5 \u914d\u7f6e 5.1 XML \u914d\u7f6e 5.2 API \u914d\u7f6e 5.3 Annotation \u914d\u7f6e 5.3 \u52a8\u6001\u914d\u7f6e\u4e2d\u5fc3 5.4 \u914d\u7f6e\u52a0\u8f7d\u6d41\u7a0b 5.5 \u81ea\u52a8\u52a0\u8f7d\u73af\u5883\u53d8\u91cf 6 \u793a\u4f8b 6.1 \u542f\u52a8\u65f6\u68c0\u67e5 6.2 \u96c6\u7fa4\u5bb9\u9519 6.3 \u8d1f\u8f7d\u5747\u8861 6.4 \u7ebf\u7a0b\u6a21\u578b 6.5 \u76f4\u8fde\u63d0\u4f9b\u8005 6.6 \u53ea\u8ba2\u9605 6.7 \u53ea\u6ce8\u518c 6.8 \u9759\u6001\u670d\u52a1 6.9 \u591a\u534f\u8bae 6.10 \u591a\u6ce8\u518c\u4e2d\u5fc3 6.11 \u670d\u52a1\u5206\u7ec4 6.12 \u591a\u7248\u672c 6.13 \u5206\u7ec4\u805a\u5408 6.14 \u53c2\u6570\u9a8c\u8bc1 6.15 \u7ed3\u679c\u7f13\u5b58 6.16 \u6cdb\u5316\u5f15\u7528 6.17 \u6cdb\u5316\u5b9e\u73b0 6.18 \u56de\u58f0\u6d4b\u8bd5 6.19 \u4e0a\u4e0b\u6587\u4fe1\u606f 6.20 \u9690\u5f0f\u53c2\u6570 6.21 \u5f02\u6b65\u8c03\u7528 6.22 \u5f02\u6b65\u8c03\u7528 6.23 \u672c\u5730\u8c03\u7528 6.24 \u53c2\u6570\u56de\u8c03 6.25 \u4e8b\u4ef6\u901a\u77e5 6.26 \u672c\u5730\u5b58\u6839 6.27 \u672c\u5730\u4f2a\u88c5 6.28 \u5ef6\u8fdf\u66b4\u9732 6.29 \u5e76\u53d1\u63a7\u5236 6.30 \u8fde\u63a5\u63a7\u5236 6.31 \u5ef6\u8fdf\u8fde\u63a5 6.32 \u7c98\u6ede\u8fde\u63a5 6.33 \u4ee4\u724c\u9a8c\u8bc1 6.34 \u8def\u7531\u89c4\u5219 6.35 \u914d\u7f6e\u89c4\u5219 6.36 \u670d\u52a1\u964d\u7ea7 6.37 \u4f18\u96c5\u505c\u673a 6.38 \u4e3b\u673a\u7ed1\u5b9a 6.39 \u65e5\u5fd7\u9002\u914d 6.40 \u8bbf\u95ee\u65e5\u5fd7 6.41 \u670d\u52a1\u5bb9\u5668 6.42 Reference Config \u7f13\u5b58 6.43 \u5206\u5e03\u5f0f\u4e8b\u52a1 6.44 \u7ebf\u7a0b\u6808\u81ea\u52a8dump 6.45 Netty4 6.46 Kryo\u548cFST\u5e8f\u5217\u5316 6.47 \u7b80\u5316\u6ce8\u518c\u4e2d\u5fc3URL 7 API \u53c2\u8003\u624b\u518c 8 schema \u914d\u7f6e\u53c2\u8003\u624b\u518c 8.1 dubbo:service 8.2 dubbo:reference 8.3 dubbo:protocol 8.4 dubbo:registry 8.5 dubbo:monitor 8.6 dubbo:application 8.7 dubbo:module 8.8 dubbo:provider 8.9 dubbo:consumer 8.10 dubbo:method 8.11 dubbo:argument 8.12 dubbo:parameter 8.13 dubbo:config-center 9 \u534f\u8bae\u53c2\u8003\u624b\u518c 9.1 dubbo:// 9.2 rmi// 9.3 hessian:// 9.4 http:// 9.5 webservice:// 9.6 thrift:// 9.7 memcached:// 9.8 redis:// 9.9 rest:// 10 \u6ce8\u518c\u4e2d\u5fc3\u53c2\u8003\u624b\u518c 10.1 Multicast \u6ce8\u518c\u4e2d\u5fc3 10.2 Zookeeper \u6ce8\u518c\u4e2d\u5fc3 10.3 Redis \u6ce8\u518c\u4e2d\u5fc3 10.4 Simple \u6ce8\u518c\u4e2d\u5fc3 11 \u5143\u6570\u636e\u4e2d\u5fc3\u53c2\u8003\u624b\u518c 11.1 Redis 11.2 Zookeeper 12 telnet \u547d\u4ee4\u53c2\u8003\u624b\u518c 13 \u5728\u7ebf\u8fd0\u7ef4\u547d\u4ee4-QOS 14 maven \u63d2\u4ef6\u53c2\u8003\u624b\u518c 15 \u670d\u52a1\u5316\u6700\u4f73\u5b9e\u8df5 16 \u63a8\u8350\u7528\u6cd5 17 \u5bb9\u91cf\u89c4\u5212 18 \u6027\u80fd\u6d4b\u8bd5\u62a5\u544a 19 \u6d4b\u8bd5\u8986\u76d6\u7387\u62a5\u544a 20 \u7248\u672c\u4e0e\u5347\u7ea7 20.1 2.7.x\u5347\u7ea7\u6b65\u9aa4\u53ca\u6ce8\u610f\u4e8b\u9879","title":"Summary"},{"location":"user/SUMMARY/#summary","text":"1 \u5165\u95e8 1.1 \u80cc\u666f 1.2 \u9700\u6c42 1.3 \u67b6\u6784 1.4 \u7528\u6cd5 2 \u5feb\u901f\u542f\u52a8 3 \u4f9d\u8d56 4 \u6210\u719f\u5ea6 5 \u914d\u7f6e 5.1 XML \u914d\u7f6e 5.2 API \u914d\u7f6e 5.3 Annotation \u914d\u7f6e 5.3 \u52a8\u6001\u914d\u7f6e\u4e2d\u5fc3 5.4 \u914d\u7f6e\u52a0\u8f7d\u6d41\u7a0b 5.5 \u81ea\u52a8\u52a0\u8f7d\u73af\u5883\u53d8\u91cf 6 \u793a\u4f8b 6.1 \u542f\u52a8\u65f6\u68c0\u67e5 6.2 \u96c6\u7fa4\u5bb9\u9519 6.3 \u8d1f\u8f7d\u5747\u8861 6.4 \u7ebf\u7a0b\u6a21\u578b 6.5 \u76f4\u8fde\u63d0\u4f9b\u8005 6.6 \u53ea\u8ba2\u9605 6.7 \u53ea\u6ce8\u518c 6.8 \u9759\u6001\u670d\u52a1 6.9 \u591a\u534f\u8bae 6.10 \u591a\u6ce8\u518c\u4e2d\u5fc3 6.11 \u670d\u52a1\u5206\u7ec4 6.12 \u591a\u7248\u672c 6.13 \u5206\u7ec4\u805a\u5408 6.14 \u53c2\u6570\u9a8c\u8bc1 6.15 \u7ed3\u679c\u7f13\u5b58 6.16 \u6cdb\u5316\u5f15\u7528 6.17 \u6cdb\u5316\u5b9e\u73b0 6.18 \u56de\u58f0\u6d4b\u8bd5 6.19 \u4e0a\u4e0b\u6587\u4fe1\u606f 6.20 \u9690\u5f0f\u53c2\u6570 6.21 \u5f02\u6b65\u8c03\u7528 6.22 \u5f02\u6b65\u8c03\u7528 6.23 \u672c\u5730\u8c03\u7528 6.24 \u53c2\u6570\u56de\u8c03 6.25 \u4e8b\u4ef6\u901a\u77e5 6.26 \u672c\u5730\u5b58\u6839 6.27 \u672c\u5730\u4f2a\u88c5 6.28 \u5ef6\u8fdf\u66b4\u9732 6.29 \u5e76\u53d1\u63a7\u5236 6.30 \u8fde\u63a5\u63a7\u5236 6.31 \u5ef6\u8fdf\u8fde\u63a5 6.32 \u7c98\u6ede\u8fde\u63a5 6.33 \u4ee4\u724c\u9a8c\u8bc1 6.34 \u8def\u7531\u89c4\u5219 6.35 \u914d\u7f6e\u89c4\u5219 6.36 \u670d\u52a1\u964d\u7ea7 6.37 \u4f18\u96c5\u505c\u673a 6.38 \u4e3b\u673a\u7ed1\u5b9a 6.39 \u65e5\u5fd7\u9002\u914d 6.40 \u8bbf\u95ee\u65e5\u5fd7 6.41 \u670d\u52a1\u5bb9\u5668 6.42 Reference Config \u7f13\u5b58 6.43 \u5206\u5e03\u5f0f\u4e8b\u52a1 6.44 \u7ebf\u7a0b\u6808\u81ea\u52a8dump 6.45 Netty4 6.46 Kryo\u548cFST\u5e8f\u5217\u5316 6.47 \u7b80\u5316\u6ce8\u518c\u4e2d\u5fc3URL 7 API \u53c2\u8003\u624b\u518c 8 schema \u914d\u7f6e\u53c2\u8003\u624b\u518c 8.1 dubbo:service 8.2 dubbo:reference 8.3 dubbo:protocol 8.4 dubbo:registry 8.5 dubbo:monitor 8.6 dubbo:application 8.7 dubbo:module 8.8 dubbo:provider 8.9 dubbo:consumer 8.10 dubbo:method 8.11 dubbo:argument 8.12 dubbo:parameter 8.13 dubbo:config-center 9 \u534f\u8bae\u53c2\u8003\u624b\u518c 9.1 dubbo:// 9.2 rmi// 9.3 hessian:// 9.4 http:// 9.5 webservice:// 9.6 thrift:// 9.7 memcached:// 9.8 redis:// 9.9 rest:// 10 \u6ce8\u518c\u4e2d\u5fc3\u53c2\u8003\u624b\u518c 10.1 Multicast \u6ce8\u518c\u4e2d\u5fc3 10.2 Zookeeper \u6ce8\u518c\u4e2d\u5fc3 10.3 Redis \u6ce8\u518c\u4e2d\u5fc3 10.4 Simple \u6ce8\u518c\u4e2d\u5fc3 11 \u5143\u6570\u636e\u4e2d\u5fc3\u53c2\u8003\u624b\u518c 11.1 Redis 11.2 Zookeeper 12 telnet \u547d\u4ee4\u53c2\u8003\u624b\u518c 13 \u5728\u7ebf\u8fd0\u7ef4\u547d\u4ee4-QOS 14 maven \u63d2\u4ef6\u53c2\u8003\u624b\u518c 15 \u670d\u52a1\u5316\u6700\u4f73\u5b9e\u8df5 16 \u63a8\u8350\u7528\u6cd5 17 \u5bb9\u91cf\u89c4\u5212 18 \u6027\u80fd\u6d4b\u8bd5\u62a5\u544a 19 \u6d4b\u8bd5\u8986\u76d6\u7387\u62a5\u544a 20 \u7248\u672c\u4e0e\u5347\u7ea7 20.1 2.7.x\u5347\u7ea7\u6b65\u9aa4\u53ca\u6ce8\u610f\u4e8b\u9879","title":"Summary"},{"location":"user/benchmark-tool/","text":"\u57fa\u51c6\u6d4b\u8bd5\u5de5\u5177\u5305 \u4e0b\u8f7d\u6e90\u7801\uff1a git clone https://github.com/apache/dubbo.git \u7f16\u8bd1benchmark: cd dubbo/dubbo-test/dubbo-test-benchmark; mvn clean install \u89e3\u538b benchmark\u538b\u7f29\u5305\uff1a dubbo/dubbo-test/dubbo-test-benchmark/target/dubbo-test-benchmark-2.6.2-SNAPSHOT.tar.gz \u9605\u8bfbReadMe.txt\uff08\u5185\u5bb9\u5982\u4e0b\uff0c\u8bf7\u4ee5\u538b\u7f29\u5305\u5185\u7684\u4e3a\u51c6\uff09 \u65b0\u5efa\u4e00\u4e2abenchmark\u5de5\u7a0b\uff0c\u5982demo.benchmark \u5bfc\u5165\u81ea\u5df1\u670d\u52a1\u7684\u63a5\u53e3api\u5305\u548cdubbo.benchmark.jar(\u89e3\u538bdubbo.benchmark.tar.gz\uff0c\u5728lib\u76ee\u5f55\u4e0b) \u65b0\u5efa\u4e00\u4e2a\u7c7b\uff0c\u5b9e\u73b0AbstractClientRunnable \u5b9e\u73b0\u7236\u7c7b\u7684\u6784\u9020\u51fd\u6570 \u5b9e\u73b0invoke\u65b9\u6cd5\uff0c\u901a\u8fc7serviceFactory\u521b\u5efa\u672c\u5730\u63a5\u53e3\u4ee3\u7406\uff0c\u5e76\u5b9e\u73b0\u81ea\u5df1\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u5982\u4e0b java public Object invoke(ServiceFactory serviceFactory) { DemoService demoService = (DemoService) serviceFactory.get(DemoService.class); return demoService.sendRequest(\"hello\"); } * \u5c06\u81ea\u5df1\u7684benchmark\u5de5\u7a0b\u6253\u6210jar\u5305,\u5982demo.benchmark.jar * \u5c06demo.benchmark.jar \u548c\u670d\u52a1\u7684api\u5305\u653e\u5230dubbo.benchmark/lib\u76ee\u5f55\u4e0b * \u914d\u7f6edubbo.properties * \u8fd0\u884crun.bat(windows)\u6216run.sh(linux) \u5982\u60f3\u6d4b\u8bd5dubbo\u7684\u4e0d\u540c\u7248\u672c\uff0c\u76f4\u63a5\u66ff\u6362lib\u4e0b\u7684dubbo\u7684jar\u5305\u5373\u53ef\u3002","title":"\u57fa\u51c6\u6d4b\u8bd5\u5de5\u5177\u5305"},{"location":"user/benchmark-tool/#_1","text":"\u4e0b\u8f7d\u6e90\u7801\uff1a git clone https://github.com/apache/dubbo.git \u7f16\u8bd1benchmark: cd dubbo/dubbo-test/dubbo-test-benchmark; mvn clean install \u89e3\u538b benchmark\u538b\u7f29\u5305\uff1a dubbo/dubbo-test/dubbo-test-benchmark/target/dubbo-test-benchmark-2.6.2-SNAPSHOT.tar.gz \u9605\u8bfbReadMe.txt\uff08\u5185\u5bb9\u5982\u4e0b\uff0c\u8bf7\u4ee5\u538b\u7f29\u5305\u5185\u7684\u4e3a\u51c6\uff09 \u65b0\u5efa\u4e00\u4e2abenchmark\u5de5\u7a0b\uff0c\u5982demo.benchmark \u5bfc\u5165\u81ea\u5df1\u670d\u52a1\u7684\u63a5\u53e3api\u5305\u548cdubbo.benchmark.jar(\u89e3\u538bdubbo.benchmark.tar.gz\uff0c\u5728lib\u76ee\u5f55\u4e0b) \u65b0\u5efa\u4e00\u4e2a\u7c7b\uff0c\u5b9e\u73b0AbstractClientRunnable \u5b9e\u73b0\u7236\u7c7b\u7684\u6784\u9020\u51fd\u6570 \u5b9e\u73b0invoke\u65b9\u6cd5\uff0c\u901a\u8fc7serviceFactory\u521b\u5efa\u672c\u5730\u63a5\u53e3\u4ee3\u7406\uff0c\u5e76\u5b9e\u73b0\u81ea\u5df1\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u5982\u4e0b java public Object invoke(ServiceFactory serviceFactory) { DemoService demoService = (DemoService) serviceFactory.get(DemoService.class); return demoService.sendRequest(\"hello\"); } * \u5c06\u81ea\u5df1\u7684benchmark\u5de5\u7a0b\u6253\u6210jar\u5305,\u5982demo.benchmark.jar * \u5c06demo.benchmark.jar \u548c\u670d\u52a1\u7684api\u5305\u653e\u5230dubbo.benchmark/lib\u76ee\u5f55\u4e0b * \u914d\u7f6edubbo.properties * \u8fd0\u884crun.bat(windows)\u6216run.sh(linux) \u5982\u60f3\u6d4b\u8bd5dubbo\u7684\u4e0d\u540c\u7248\u672c\uff0c\u76f4\u63a5\u66ff\u6362lib\u4e0b\u7684dubbo\u7684jar\u5305\u5373\u53ef\u3002","title":"\u57fa\u51c6\u6d4b\u8bd5\u5de5\u5177\u5305"},{"location":"user/best-practice/","text":"\u670d\u52a1\u5316\u6700\u4f73\u5b9e\u8df5 \u5206\u5305 \u5efa\u8bae\u5c06\u670d\u52a1\u63a5\u53e3\u3001\u670d\u52a1\u6a21\u578b\u3001\u670d\u52a1\u5f02\u5e38\u7b49\u5747\u653e\u5728 API \u5305\u4e2d\uff0c\u56e0\u4e3a\u670d\u52a1\u6a21\u578b\u548c\u5f02\u5e38\u4e5f\u662f API \u7684\u4e00\u90e8\u5206\uff0c\u8fd9\u6837\u505a\u4e5f\u7b26\u5408\u5206\u5305\u539f\u5219\uff1a\u91cd\u7528\u53d1\u5e03\u7b49\u4ef7\u539f\u5219(REP)\uff0c\u5171\u540c\u91cd\u7528\u539f\u5219(CRP)\u3002 \u5982\u679c\u9700\u8981\uff0c\u4e5f\u53ef\u4ee5\u8003\u8651\u5728 API \u5305\u4e2d\u653e\u7f6e\u4e00\u4efd Spring \u7684\u5f15\u7528\u914d\u7f6e\uff0c\u8fd9\u6837\u4f7f\u7528\u65b9\u53ea\u9700\u5728 Spring \u52a0\u8f7d\u8fc7\u7a0b\u4e2d\u5f15\u7528\u6b64\u914d\u7f6e\u5373\u53ef\u3002\u914d\u7f6e\u5efa\u8bae\u653e\u5728\u6a21\u5757\u7684\u5305\u76ee\u5f55\u4e0b\uff0c\u4ee5\u514d\u51b2\u7a81\uff0c\u5982\uff1a com/alibaba/china/xxx/dubbo-reference.xml \u3002 \u7c92\u5ea6 \u670d\u52a1\u63a5\u53e3\u5c3d\u53ef\u80fd\u5927\u7c92\u5ea6\uff0c\u6bcf\u4e2a\u670d\u52a1\u65b9\u6cd5\u5e94\u4ee3\u8868\u4e00\u4e2a\u529f\u80fd\uff0c\u800c\u4e0d\u662f\u67d0\u529f\u80fd\u7684\u4e00\u4e2a\u6b65\u9aa4\uff0c\u5426\u5219\u5c06\u9762\u4e34\u5206\u5e03\u5f0f\u4e8b\u52a1\u95ee\u9898\uff0cDubbo \u6682\u672a\u63d0\u4f9b\u5206\u5e03\u5f0f\u4e8b\u52a1\u652f\u6301\u3002 \u670d\u52a1\u63a5\u53e3\u5efa\u8bae\u4ee5\u4e1a\u52a1\u573a\u666f\u4e3a\u5355\u4f4d\u5212\u5206\uff0c\u5e76\u5bf9\u76f8\u8fd1\u4e1a\u52a1\u505a\u62bd\u8c61\uff0c\u9632\u6b62\u63a5\u53e3\u6570\u91cf\u7206\u70b8\u3002 \u4e0d\u5efa\u8bae\u4f7f\u7528\u8fc7\u4e8e\u62bd\u8c61\u7684\u901a\u7528\u63a5\u53e3\uff0c\u5982\uff1a Map query(Map) \uff0c\u8fd9\u6837\u7684\u63a5\u53e3\u6ca1\u6709\u660e\u786e\u8bed\u4e49\uff0c\u4f1a\u7ed9\u540e\u671f\u7ef4\u62a4\u5e26\u6765\u4e0d\u4fbf\u3002 \u7248\u672c \u6bcf\u4e2a\u63a5\u53e3\u90fd\u5e94\u5b9a\u4e49\u7248\u672c\u53f7\uff0c\u4e3a\u540e\u7eed\u4e0d\u517c\u5bb9\u5347\u7ea7\u63d0\u4f9b\u53ef\u80fd\uff0c\u5982\uff1a dubbo:service interface=\"com.xxx.XxxService\" version=\"1.0\" / \u3002 \u5efa\u8bae\u4f7f\u7528\u4e24\u4f4d\u7248\u672c\u53f7\uff0c\u56e0\u4e3a\u7b2c\u4e09\u4f4d\u7248\u672c\u53f7\u901a\u5e38\u8868\u793a\u517c\u5bb9\u5347\u7ea7\uff0c\u53ea\u6709\u4e0d\u517c\u5bb9\u65f6\u624d\u9700\u8981\u53d8\u66f4\u670d\u52a1\u7248\u672c\u3002 \u5f53\u4e0d\u517c\u5bb9\u65f6\uff0c\u5148\u5347\u7ea7\u4e00\u534a\u63d0\u4f9b\u8005\u4e3a\u65b0\u7248\u672c\uff0c\u518d\u5c06\u6d88\u8d39\u8005\u5168\u90e8\u5347\u4e3a\u65b0\u7248\u672c\uff0c\u7136\u540e\u5c06\u5269\u4e0b\u7684\u4e00\u534a\u63d0\u4f9b\u8005\u5347\u4e3a\u65b0\u7248\u672c\u3002 \u517c\u5bb9\u6027 \u670d\u52a1\u63a5\u53e3\u589e\u52a0\u65b9\u6cd5\uff0c\u6216\u670d\u52a1\u6a21\u578b\u589e\u52a0\u5b57\u6bb5\uff0c\u53ef\u5411\u540e\u517c\u5bb9\uff0c\u5220\u9664\u65b9\u6cd5\u6216\u5220\u9664\u5b57\u6bb5\uff0c\u5c06\u4e0d\u517c\u5bb9\uff0c\u679a\u4e3e\u7c7b\u578b\u65b0\u589e\u5b57\u6bb5\u4e5f\u4e0d\u517c\u5bb9\uff0c\u9700\u901a\u8fc7\u53d8\u66f4\u7248\u672c\u53f7\u5347\u7ea7\u3002 \u5404\u534f\u8bae\u7684\u517c\u5bb9\u6027\u4e0d\u540c\uff0c\u53c2\u89c1\uff1a \u670d\u52a1\u534f\u8bae \u679a\u4e3e\u503c \u5982\u679c\u662f\u5b8c\u5907\u96c6\uff0c\u53ef\u4ee5\u7528 Enum \uff0c\u6bd4\u5982\uff1a ENABLE , DISABLE \u3002 \u5982\u679c\u662f\u4e1a\u52a1\u79cd\u7c7b\uff0c\u4ee5\u540e\u660e\u663e\u4f1a\u6709\u7c7b\u578b\u589e\u52a0\uff0c\u4e0d\u5efa\u8bae\u7528 Enum \uff0c\u53ef\u4ee5\u7528 String \u4ee3\u66ff\u3002 \u5982\u679c\u662f\u5728\u8fd4\u56de\u503c\u4e2d\u7528\u4e86 Enum \uff0c\u5e76\u65b0\u589e\u4e86 Enum \u503c\uff0c\u5efa\u8bae\u5148\u5347\u7ea7\u670d\u52a1\u6d88\u8d39\u65b9\uff0c\u8fd9\u6837\u670d\u52a1\u63d0\u4f9b\u65b9\u4e0d\u4f1a\u8fd4\u56de\u65b0\u503c\u3002 \u5982\u679c\u662f\u5728\u4f20\u5165\u53c2\u6570\u4e2d\u7528\u4e86 Enum \uff0c\u5e76\u65b0\u589e\u4e86 Enum \u503c\uff0c\u5efa\u8bae\u5148\u5347\u7ea7\u670d\u52a1\u63d0\u4f9b\u65b9\uff0c\u8fd9\u6837\u670d\u52a1\u6d88\u8d39\u65b9\u4e0d\u4f1a\u4f20\u5165\u65b0\u503c\u3002 \u5e8f\u5217\u5316 \u670d\u52a1\u53c2\u6570\u53ca\u8fd4\u56de\u503c\u5efa\u8bae\u4f7f\u7528 POJO \u5bf9\u8c61\uff0c\u5373\u901a\u8fc7 setter , getter \u65b9\u6cd5\u8868\u793a\u5c5e\u6027\u7684\u5bf9\u8c61\u3002 \u670d\u52a1\u53c2\u6570\u53ca\u8fd4\u56de\u503c\u4e0d\u5efa\u8bae\u4f7f\u7528\u63a5\u53e3\uff0c\u56e0\u4e3a\u6570\u636e\u6a21\u578b\u62bd\u8c61\u7684\u610f\u4e49\u4e0d\u5927\uff0c\u5e76\u4e14\u5e8f\u5217\u5316\u9700\u8981\u63a5\u53e3\u5b9e\u73b0\u7c7b\u7684\u5143\u4fe1\u606f\uff0c\u5e76\u4e0d\u80fd\u8d77\u5230\u9690\u85cf\u5b9e\u73b0\u7684\u610f\u56fe\u3002 \u670d\u52a1\u53c2\u6570\u53ca\u8fd4\u56de\u503c\u90fd\u5fc5\u987b\u662f \u4f20\u503c\u8c03\u7528 \uff0c\u800c\u4e0d\u80fd\u662f \u4f20\u5f15\u7528\u8c03\u7528 \uff0c\u6d88\u8d39\u65b9\u548c\u63d0\u4f9b\u65b9\u7684\u53c2\u6570\u6216\u8fd4\u56de\u503c\u5f15\u7528\u5e76\u4e0d\u662f\u540c\u4e00\u4e2a\uff0c\u53ea\u662f\u503c\u76f8\u540c\uff0cDubbo \u4e0d\u652f\u6301\u5f15\u7528\u8fdc\u7a0b\u5bf9\u8c61\u3002 \u5f02\u5e38 \u5efa\u8bae\u4f7f\u7528\u5f02\u5e38\u6c47\u62a5\u9519\u8bef\uff0c\u800c\u4e0d\u662f\u8fd4\u56de\u9519\u8bef\u7801\uff0c\u5f02\u5e38\u4fe1\u606f\u80fd\u643a\u5e26\u66f4\u591a\u4fe1\u606f\uff0c\u5e76\u4e14\u8bed\u4e49\u66f4\u53cb\u597d\u3002 \u5982\u679c\u62c5\u5fc3\u6027\u80fd\u95ee\u9898\uff0c\u5728\u5fc5\u8981\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 override \u6389\u5f02\u5e38\u7c7b\u7684 fillInStackTrace() \u65b9\u6cd5\u4e3a\u7a7a\u65b9\u6cd5\uff0c\u4f7f\u5176\u4e0d\u62f7\u8d1d\u6808\u4fe1\u606f\u3002 \u67e5\u8be2\u65b9\u6cd5\u4e0d\u5efa\u8bae\u629b\u51fa checked \u5f02\u5e38\uff0c\u5426\u5219\u8c03\u7528\u65b9\u5728\u67e5\u8be2\u65f6\u5c06\u8fc7\u591a\u7684 try...catch \uff0c\u5e76\u4e14\u4e0d\u80fd\u8fdb\u884c\u6709\u6548\u5904\u7406\u3002 \u670d\u52a1\u63d0\u4f9b\u65b9\u4e0d\u5e94\u5c06 DAO \u6216 SQL \u7b49\u5f02\u5e38\u629b\u7ed9\u6d88\u8d39\u65b9\uff0c\u5e94\u5728\u670d\u52a1\u5b9e\u73b0\u4e2d\u5bf9\u6d88\u8d39\u65b9\u4e0d\u5173\u5fc3\u7684\u5f02\u5e38\u8fdb\u884c\u5305\u88c5\uff0c\u5426\u5219\u53ef\u80fd\u51fa\u73b0\u6d88\u8d39\u65b9\u65e0\u6cd5\u53cd\u5e8f\u5217\u5316\u76f8\u5e94\u5f02\u5e38\u3002 \u8c03\u7528 \u4e0d\u8981\u53ea\u662f\u56e0\u4e3a\u662f Dubbo \u8c03\u7528\uff0c\u800c\u628a\u8c03\u7528 try...catch \u8d77\u6765\u3002 try...catch \u5e94\u8be5\u52a0\u4e0a\u5408\u9002\u7684\u56de\u6eda\u8fb9\u754c\u4e0a\u3002 Provider \u7aef\u9700\u8981\u5bf9\u8f93\u5165\u53c2\u6570\u8fdb\u884c\u6821\u9a8c\u3002\u5982\u6709\u6027\u80fd\u4e0a\u7684\u8003\u8651\uff0c\u670d\u52a1\u5b9e\u73b0\u8005\u53ef\u4ee5\u8003\u8651\u5728 API \u5305\u4e0a\u52a0\u4e0a\u670d\u52a1 Stub \u7c7b\u6765\u5b8c\u6210\u68c0\u9a8c\u3002","title":"\u670d\u52a1\u5316\u6700\u4f73\u5b9e\u8df5"},{"location":"user/best-practice/#_1","text":"","title":"\u670d\u52a1\u5316\u6700\u4f73\u5b9e\u8df5"},{"location":"user/best-practice/#_2","text":"\u5efa\u8bae\u5c06\u670d\u52a1\u63a5\u53e3\u3001\u670d\u52a1\u6a21\u578b\u3001\u670d\u52a1\u5f02\u5e38\u7b49\u5747\u653e\u5728 API \u5305\u4e2d\uff0c\u56e0\u4e3a\u670d\u52a1\u6a21\u578b\u548c\u5f02\u5e38\u4e5f\u662f API \u7684\u4e00\u90e8\u5206\uff0c\u8fd9\u6837\u505a\u4e5f\u7b26\u5408\u5206\u5305\u539f\u5219\uff1a\u91cd\u7528\u53d1\u5e03\u7b49\u4ef7\u539f\u5219(REP)\uff0c\u5171\u540c\u91cd\u7528\u539f\u5219(CRP)\u3002 \u5982\u679c\u9700\u8981\uff0c\u4e5f\u53ef\u4ee5\u8003\u8651\u5728 API \u5305\u4e2d\u653e\u7f6e\u4e00\u4efd Spring \u7684\u5f15\u7528\u914d\u7f6e\uff0c\u8fd9\u6837\u4f7f\u7528\u65b9\u53ea\u9700\u5728 Spring \u52a0\u8f7d\u8fc7\u7a0b\u4e2d\u5f15\u7528\u6b64\u914d\u7f6e\u5373\u53ef\u3002\u914d\u7f6e\u5efa\u8bae\u653e\u5728\u6a21\u5757\u7684\u5305\u76ee\u5f55\u4e0b\uff0c\u4ee5\u514d\u51b2\u7a81\uff0c\u5982\uff1a com/alibaba/china/xxx/dubbo-reference.xml \u3002","title":"\u5206\u5305"},{"location":"user/best-practice/#_3","text":"\u670d\u52a1\u63a5\u53e3\u5c3d\u53ef\u80fd\u5927\u7c92\u5ea6\uff0c\u6bcf\u4e2a\u670d\u52a1\u65b9\u6cd5\u5e94\u4ee3\u8868\u4e00\u4e2a\u529f\u80fd\uff0c\u800c\u4e0d\u662f\u67d0\u529f\u80fd\u7684\u4e00\u4e2a\u6b65\u9aa4\uff0c\u5426\u5219\u5c06\u9762\u4e34\u5206\u5e03\u5f0f\u4e8b\u52a1\u95ee\u9898\uff0cDubbo \u6682\u672a\u63d0\u4f9b\u5206\u5e03\u5f0f\u4e8b\u52a1\u652f\u6301\u3002 \u670d\u52a1\u63a5\u53e3\u5efa\u8bae\u4ee5\u4e1a\u52a1\u573a\u666f\u4e3a\u5355\u4f4d\u5212\u5206\uff0c\u5e76\u5bf9\u76f8\u8fd1\u4e1a\u52a1\u505a\u62bd\u8c61\uff0c\u9632\u6b62\u63a5\u53e3\u6570\u91cf\u7206\u70b8\u3002 \u4e0d\u5efa\u8bae\u4f7f\u7528\u8fc7\u4e8e\u62bd\u8c61\u7684\u901a\u7528\u63a5\u53e3\uff0c\u5982\uff1a Map query(Map) \uff0c\u8fd9\u6837\u7684\u63a5\u53e3\u6ca1\u6709\u660e\u786e\u8bed\u4e49\uff0c\u4f1a\u7ed9\u540e\u671f\u7ef4\u62a4\u5e26\u6765\u4e0d\u4fbf\u3002","title":"\u7c92\u5ea6"},{"location":"user/best-practice/#_4","text":"\u6bcf\u4e2a\u63a5\u53e3\u90fd\u5e94\u5b9a\u4e49\u7248\u672c\u53f7\uff0c\u4e3a\u540e\u7eed\u4e0d\u517c\u5bb9\u5347\u7ea7\u63d0\u4f9b\u53ef\u80fd\uff0c\u5982\uff1a dubbo:service interface=\"com.xxx.XxxService\" version=\"1.0\" / \u3002 \u5efa\u8bae\u4f7f\u7528\u4e24\u4f4d\u7248\u672c\u53f7\uff0c\u56e0\u4e3a\u7b2c\u4e09\u4f4d\u7248\u672c\u53f7\u901a\u5e38\u8868\u793a\u517c\u5bb9\u5347\u7ea7\uff0c\u53ea\u6709\u4e0d\u517c\u5bb9\u65f6\u624d\u9700\u8981\u53d8\u66f4\u670d\u52a1\u7248\u672c\u3002 \u5f53\u4e0d\u517c\u5bb9\u65f6\uff0c\u5148\u5347\u7ea7\u4e00\u534a\u63d0\u4f9b\u8005\u4e3a\u65b0\u7248\u672c\uff0c\u518d\u5c06\u6d88\u8d39\u8005\u5168\u90e8\u5347\u4e3a\u65b0\u7248\u672c\uff0c\u7136\u540e\u5c06\u5269\u4e0b\u7684\u4e00\u534a\u63d0\u4f9b\u8005\u5347\u4e3a\u65b0\u7248\u672c\u3002","title":"\u7248\u672c"},{"location":"user/best-practice/#_5","text":"\u670d\u52a1\u63a5\u53e3\u589e\u52a0\u65b9\u6cd5\uff0c\u6216\u670d\u52a1\u6a21\u578b\u589e\u52a0\u5b57\u6bb5\uff0c\u53ef\u5411\u540e\u517c\u5bb9\uff0c\u5220\u9664\u65b9\u6cd5\u6216\u5220\u9664\u5b57\u6bb5\uff0c\u5c06\u4e0d\u517c\u5bb9\uff0c\u679a\u4e3e\u7c7b\u578b\u65b0\u589e\u5b57\u6bb5\u4e5f\u4e0d\u517c\u5bb9\uff0c\u9700\u901a\u8fc7\u53d8\u66f4\u7248\u672c\u53f7\u5347\u7ea7\u3002 \u5404\u534f\u8bae\u7684\u517c\u5bb9\u6027\u4e0d\u540c\uff0c\u53c2\u89c1\uff1a \u670d\u52a1\u534f\u8bae","title":"\u517c\u5bb9\u6027"},{"location":"user/best-practice/#_6","text":"\u5982\u679c\u662f\u5b8c\u5907\u96c6\uff0c\u53ef\u4ee5\u7528 Enum \uff0c\u6bd4\u5982\uff1a ENABLE , DISABLE \u3002 \u5982\u679c\u662f\u4e1a\u52a1\u79cd\u7c7b\uff0c\u4ee5\u540e\u660e\u663e\u4f1a\u6709\u7c7b\u578b\u589e\u52a0\uff0c\u4e0d\u5efa\u8bae\u7528 Enum \uff0c\u53ef\u4ee5\u7528 String \u4ee3\u66ff\u3002 \u5982\u679c\u662f\u5728\u8fd4\u56de\u503c\u4e2d\u7528\u4e86 Enum \uff0c\u5e76\u65b0\u589e\u4e86 Enum \u503c\uff0c\u5efa\u8bae\u5148\u5347\u7ea7\u670d\u52a1\u6d88\u8d39\u65b9\uff0c\u8fd9\u6837\u670d\u52a1\u63d0\u4f9b\u65b9\u4e0d\u4f1a\u8fd4\u56de\u65b0\u503c\u3002 \u5982\u679c\u662f\u5728\u4f20\u5165\u53c2\u6570\u4e2d\u7528\u4e86 Enum \uff0c\u5e76\u65b0\u589e\u4e86 Enum \u503c\uff0c\u5efa\u8bae\u5148\u5347\u7ea7\u670d\u52a1\u63d0\u4f9b\u65b9\uff0c\u8fd9\u6837\u670d\u52a1\u6d88\u8d39\u65b9\u4e0d\u4f1a\u4f20\u5165\u65b0\u503c\u3002","title":"\u679a\u4e3e\u503c"},{"location":"user/best-practice/#_7","text":"\u670d\u52a1\u53c2\u6570\u53ca\u8fd4\u56de\u503c\u5efa\u8bae\u4f7f\u7528 POJO \u5bf9\u8c61\uff0c\u5373\u901a\u8fc7 setter , getter \u65b9\u6cd5\u8868\u793a\u5c5e\u6027\u7684\u5bf9\u8c61\u3002 \u670d\u52a1\u53c2\u6570\u53ca\u8fd4\u56de\u503c\u4e0d\u5efa\u8bae\u4f7f\u7528\u63a5\u53e3\uff0c\u56e0\u4e3a\u6570\u636e\u6a21\u578b\u62bd\u8c61\u7684\u610f\u4e49\u4e0d\u5927\uff0c\u5e76\u4e14\u5e8f\u5217\u5316\u9700\u8981\u63a5\u53e3\u5b9e\u73b0\u7c7b\u7684\u5143\u4fe1\u606f\uff0c\u5e76\u4e0d\u80fd\u8d77\u5230\u9690\u85cf\u5b9e\u73b0\u7684\u610f\u56fe\u3002 \u670d\u52a1\u53c2\u6570\u53ca\u8fd4\u56de\u503c\u90fd\u5fc5\u987b\u662f \u4f20\u503c\u8c03\u7528 \uff0c\u800c\u4e0d\u80fd\u662f \u4f20\u5f15\u7528\u8c03\u7528 \uff0c\u6d88\u8d39\u65b9\u548c\u63d0\u4f9b\u65b9\u7684\u53c2\u6570\u6216\u8fd4\u56de\u503c\u5f15\u7528\u5e76\u4e0d\u662f\u540c\u4e00\u4e2a\uff0c\u53ea\u662f\u503c\u76f8\u540c\uff0cDubbo \u4e0d\u652f\u6301\u5f15\u7528\u8fdc\u7a0b\u5bf9\u8c61\u3002","title":"\u5e8f\u5217\u5316"},{"location":"user/best-practice/#_8","text":"\u5efa\u8bae\u4f7f\u7528\u5f02\u5e38\u6c47\u62a5\u9519\u8bef\uff0c\u800c\u4e0d\u662f\u8fd4\u56de\u9519\u8bef\u7801\uff0c\u5f02\u5e38\u4fe1\u606f\u80fd\u643a\u5e26\u66f4\u591a\u4fe1\u606f\uff0c\u5e76\u4e14\u8bed\u4e49\u66f4\u53cb\u597d\u3002 \u5982\u679c\u62c5\u5fc3\u6027\u80fd\u95ee\u9898\uff0c\u5728\u5fc5\u8981\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 override \u6389\u5f02\u5e38\u7c7b\u7684 fillInStackTrace() \u65b9\u6cd5\u4e3a\u7a7a\u65b9\u6cd5\uff0c\u4f7f\u5176\u4e0d\u62f7\u8d1d\u6808\u4fe1\u606f\u3002 \u67e5\u8be2\u65b9\u6cd5\u4e0d\u5efa\u8bae\u629b\u51fa checked \u5f02\u5e38\uff0c\u5426\u5219\u8c03\u7528\u65b9\u5728\u67e5\u8be2\u65f6\u5c06\u8fc7\u591a\u7684 try...catch \uff0c\u5e76\u4e14\u4e0d\u80fd\u8fdb\u884c\u6709\u6548\u5904\u7406\u3002 \u670d\u52a1\u63d0\u4f9b\u65b9\u4e0d\u5e94\u5c06 DAO \u6216 SQL \u7b49\u5f02\u5e38\u629b\u7ed9\u6d88\u8d39\u65b9\uff0c\u5e94\u5728\u670d\u52a1\u5b9e\u73b0\u4e2d\u5bf9\u6d88\u8d39\u65b9\u4e0d\u5173\u5fc3\u7684\u5f02\u5e38\u8fdb\u884c\u5305\u88c5\uff0c\u5426\u5219\u53ef\u80fd\u51fa\u73b0\u6d88\u8d39\u65b9\u65e0\u6cd5\u53cd\u5e8f\u5217\u5316\u76f8\u5e94\u5f02\u5e38\u3002","title":"\u5f02\u5e38"},{"location":"user/best-practice/#_9","text":"\u4e0d\u8981\u53ea\u662f\u56e0\u4e3a\u662f Dubbo \u8c03\u7528\uff0c\u800c\u628a\u8c03\u7528 try...catch \u8d77\u6765\u3002 try...catch \u5e94\u8be5\u52a0\u4e0a\u5408\u9002\u7684\u56de\u6eda\u8fb9\u754c\u4e0a\u3002 Provider \u7aef\u9700\u8981\u5bf9\u8f93\u5165\u53c2\u6570\u8fdb\u884c\u6821\u9a8c\u3002\u5982\u6709\u6027\u80fd\u4e0a\u7684\u8003\u8651\uff0c\u670d\u52a1\u5b9e\u73b0\u8005\u53ef\u4ee5\u8003\u8651\u5728 API \u5305\u4e0a\u52a0\u4e0a\u670d\u52a1 Stub \u7c7b\u6765\u5b8c\u6210\u68c0\u9a8c\u3002","title":"\u8c03\u7528"},{"location":"user/capacity-plan/","text":"\u5bb9\u91cf\u89c4\u5212 \u4ee5\u4e0b\u6570\u636e\u4f9b\u53c2\u8003\uff1a \u4f7f\u7528 Dubbo \u7684\u4f1a\u5458\u670d\u52a1\u9879\u76ee \u6bcf\u5929\u63a5\u6536 4 \u4ebf\u6b21\u8fdc\u7a0b\u8c03\u7528 \u4f7f\u7528 12 \u53f0\u7f51\u7ad9\u6807\u914d\u673a\u5668\u63d0\u4f9b\u670d\u52a1\uff088 \u6838 CPU\uff0c8G \u5185\u5b58\uff09 \u5e73\u5747\u8d1f\u8f7d\u5728 1 \u4ee5\u4e0b\uff08\u5bf9\u4e8e 8 \u6838 CPU \u8d1f\u8f7d\u5f88\u4f4e\uff09 \u5e73\u5747\u54cd\u5e94\u65f6\u95f4 2.3 \u5230 2.5 \u6beb\u79d2\uff0c\u7f51\u7edc\u5f00\u9500\u7ea6\u5360 1.5 \u5230 1.6 \u6beb\u79d2\uff08\u548c\u6570\u636e\u5305\u5927\u5c0f\u6709\u5173\uff09 \u4f7f\u7528 Dubbo \u7684\u4ea7\u54c1\u6388\u6743\u670d\u52a1\u9879\u76ee \u6bcf\u5929\u63a5\u6536 3 \u4ebf\u6b21\u8fdc\u7a0b\u8c03\u7528 \u4f7f\u7528 8 \u53f0\u7f51\u7ad9\u6807\u914d\u673a\u5668\u63d0\u4f9b\u670d\u52a1\uff088 \u6838CPU\uff0c8G \u5185\u5b58\uff09 \u5e73\u5747\u8d1f\u8f7d\u5728 1 \u4ee5\u4e0b\uff08\u5bf9\u4e8e 8 \u6838 CPU \u8d1f\u8f7d\u5f88\u4f4e\uff09 \u5e73\u5747\u54cd\u5e94\u65f6\u95f4 1.4 \u5230 2.8 \u6beb\u79d2\uff0c\u7f51\u7edc\u5f00\u9500\u7ea6\u5360 1.0 \u5230 1.1 \u6beb\u79d2\uff08\u548c\u6570\u636e\u5305\u5927\u5c0f\u6709\u5173\uff09","title":"\u5bb9\u91cf\u89c4\u5212"},{"location":"user/capacity-plan/#_1","text":"\u4ee5\u4e0b\u6570\u636e\u4f9b\u53c2\u8003\uff1a","title":"\u5bb9\u91cf\u89c4\u5212"},{"location":"user/capacity-plan/#dubbo","text":"\u6bcf\u5929\u63a5\u6536 4 \u4ebf\u6b21\u8fdc\u7a0b\u8c03\u7528 \u4f7f\u7528 12 \u53f0\u7f51\u7ad9\u6807\u914d\u673a\u5668\u63d0\u4f9b\u670d\u52a1\uff088 \u6838 CPU\uff0c8G \u5185\u5b58\uff09 \u5e73\u5747\u8d1f\u8f7d\u5728 1 \u4ee5\u4e0b\uff08\u5bf9\u4e8e 8 \u6838 CPU \u8d1f\u8f7d\u5f88\u4f4e\uff09 \u5e73\u5747\u54cd\u5e94\u65f6\u95f4 2.3 \u5230 2.5 \u6beb\u79d2\uff0c\u7f51\u7edc\u5f00\u9500\u7ea6\u5360 1.5 \u5230 1.6 \u6beb\u79d2\uff08\u548c\u6570\u636e\u5305\u5927\u5c0f\u6709\u5173\uff09","title":"\u4f7f\u7528 Dubbo \u7684\u4f1a\u5458\u670d\u52a1\u9879\u76ee"},{"location":"user/capacity-plan/#dubbo_1","text":"\u6bcf\u5929\u63a5\u6536 3 \u4ebf\u6b21\u8fdc\u7a0b\u8c03\u7528 \u4f7f\u7528 8 \u53f0\u7f51\u7ad9\u6807\u914d\u673a\u5668\u63d0\u4f9b\u670d\u52a1\uff088 \u6838CPU\uff0c8G \u5185\u5b58\uff09 \u5e73\u5747\u8d1f\u8f7d\u5728 1 \u4ee5\u4e0b\uff08\u5bf9\u4e8e 8 \u6838 CPU \u8d1f\u8f7d\u5f88\u4f4e\uff09 \u5e73\u5747\u54cd\u5e94\u65f6\u95f4 1.4 \u5230 2.8 \u6beb\u79d2\uff0c\u7f51\u7edc\u5f00\u9500\u7ea6\u5360 1.0 \u5230 1.1 \u6beb\u79d2\uff08\u548c\u6570\u636e\u5305\u5927\u5c0f\u6709\u5173\uff09","title":"\u4f7f\u7528 Dubbo \u7684\u4ea7\u54c1\u6388\u6743\u670d\u52a1\u9879\u76ee"},{"location":"user/coveragence/","text":"\u6d4b\u8bd5\u8986\u76d6\u7387\u62a5\u544a v2.0 Codecov\u62a5\u8868 , \u4ece2017-12-29\u540e\u5f00\u59cb\u7edf\u8ba1 \u6d4b\u8bd5\u8986\u76d6\u7387\u4e3a : , \u53ef\u4ee5\u4ece https://codecov.io/gh/apache/dubbo \u9875\u9762\u5f97\u5230\u8986\u76d6\u7387\u62a5\u8868 v1.0 \u57fa\u4e8e 2.0.12 \u7248\u672c\uff0c\u7edf\u8ba1\u4e8e 2012-02-03","title":"\u6d4b\u8bd5\u8986\u76d6\u7387\u62a5\u544a"},{"location":"user/coveragence/#_1","text":"v2.0 Codecov\u62a5\u8868 , \u4ece2017-12-29\u540e\u5f00\u59cb\u7edf\u8ba1 \u6d4b\u8bd5\u8986\u76d6\u7387\u4e3a : , \u53ef\u4ee5\u4ece https://codecov.io/gh/apache/dubbo \u9875\u9762\u5f97\u5230\u8986\u76d6\u7387\u62a5\u8868 v1.0 \u57fa\u4e8e 2.0.12 \u7248\u672c\uff0c\u7edf\u8ba1\u4e8e 2012-02-03","title":"\u6d4b\u8bd5\u8986\u76d6\u7387\u62a5\u544a"},{"location":"user/dependencies/","text":"\u4f9d\u8d56 \u5fc5\u987b\u4f9d\u8d56 JDK 1.6+ [^1] \u7f3a\u7701\u4f9d\u8d56 \u901a\u8fc7 mvn dependency:tree dep.log \u547d\u4ee4\u5206\u6790\uff0cDubbo \u7f3a\u7701\u4f9d\u8d56\u4ee5\u4e0b\u4e09\u65b9\u5e93\uff1a [INFO] +- com.alibaba:dubbo:jar:2.5.9-SNAPSHOT:compile [INFO] | +- org.springframework:spring-context:jar:4.3.10.RELEASE:compile [INFO] | +- org.javassist:javassist:jar:3.21.0-GA:compile [INFO] | \\- org.jboss.netty:netty:jar:3.2.5.Final:compile \u8fd9\u91cc\u6240\u6709\u4f9d\u8d56\u90fd\u662f\u6362\u7167 Dubbo \u7f3a\u7701\u914d\u7f6e\u9009\u7684\uff0c\u8fd9\u4e9b\u7f3a\u7701\u503c\u662f\u57fa\u4e8e\u7a33\u5b9a\u6027\u548c\u6027\u80fd\u8003\u8651\u7684\u3002 javassist.jar ^3 : \u5982\u679c dubbo:provider proxy=\"jdk\" / \u6216 dubbo:consumer proxy=\"jdk\" / \uff0c\u4ee5\u53ca dubbo:application compiler=\"jdk\" / \uff0c\u5219\u4e0d\u9700\u8981\u3002 spring-context.jar ^4 : \u5982\u679c\u7528 ServiceConfig \u548c ReferenceConfig \u7684 API \u8c03\u7528\uff0c\u5219\u4e0d\u9700\u8981\u3002 netty.jar ^5 : \u5982\u679c dubbo:protocol server=\"mina\"/ \u6216 dubbo:protocol server=\"grizzly\"/ \uff0c\u5219\u6362\u6210 mina.jar \u6216 grizzly.jar\u3002\u5982\u679c protocol name=\"rmi\"/ \uff0c\u5219\u4e0d\u9700\u8981\u3002 \u53ef\u9009\u4f9d\u8d56 \u4ee5\u4e0b\u4f9d\u8d56\uff0c\u5728\u4e3b\u52a8\u914d\u7f6e\u4f7f\u7528\u76f8\u5e94\u5b9e\u73b0\u7b56\u7565\u65f6\u7528\u5230\uff0c\u9700\u81ea\u884c\u52a0\u5165\u4f9d\u8d56\u3002 netty-all 4.0.35.Final mina: 1.1.7 grizzly: 2.1.4 httpclient: 4.5.3 hessian_lite: 3.2.1-fixed fastjson: 1.2.31 zookeeper: 3.4.9 jedis: 2.9.0 xmemcached: 1.3.6 hessian: 4.0.38 jetty: 6.1.26 hibernate-validator: 5.4.1.Final zkclient: 0.2 curator: 2.12.0 cxf: 3.0.14 thrift: 0.8.0 servlet: 3.0 ^6 validation-api: 1.1.0.GA ^6 jcache: 1.0.0 ^6 javax.el: 3.0.1-b08 ^6 kryo: 4.0.1 kryo-serializers: 0.42 fst: 2.48-jdk-6 resteasy: 3.0.19.Final tomcat-embed-core: 8.0.11 slf4j: 1.7.25 log4j: 1.2.16 [^1]: \u7406\u8bba\u4e0a Dubbo \u53ef\u4ee5\u53ea\u4f9d\u8d56 JDK\uff0c\u4e0d\u4f9d\u8d56\u4e8e\u4efb\u4f55\u4e09\u65b9\u5e93\u8fd0\u884c\uff0c\u53ea\u9700\u914d\u7f6e\u4f7f\u7528 JDK \u76f8\u5173\u5b9e\u73b0\u7b56\u7565","title":"\u4f9d\u8d56"},{"location":"user/dependencies/#_1","text":"","title":"\u4f9d\u8d56"},{"location":"user/dependencies/#_2","text":"JDK 1.6+ [^1]","title":"\u5fc5\u987b\u4f9d\u8d56"},{"location":"user/dependencies/#_3","text":"\u901a\u8fc7 mvn dependency:tree dep.log \u547d\u4ee4\u5206\u6790\uff0cDubbo \u7f3a\u7701\u4f9d\u8d56\u4ee5\u4e0b\u4e09\u65b9\u5e93\uff1a [INFO] +- com.alibaba:dubbo:jar:2.5.9-SNAPSHOT:compile [INFO] | +- org.springframework:spring-context:jar:4.3.10.RELEASE:compile [INFO] | +- org.javassist:javassist:jar:3.21.0-GA:compile [INFO] | \\- org.jboss.netty:netty:jar:3.2.5.Final:compile \u8fd9\u91cc\u6240\u6709\u4f9d\u8d56\u90fd\u662f\u6362\u7167 Dubbo \u7f3a\u7701\u914d\u7f6e\u9009\u7684\uff0c\u8fd9\u4e9b\u7f3a\u7701\u503c\u662f\u57fa\u4e8e\u7a33\u5b9a\u6027\u548c\u6027\u80fd\u8003\u8651\u7684\u3002 javassist.jar ^3 : \u5982\u679c dubbo:provider proxy=\"jdk\" / \u6216 dubbo:consumer proxy=\"jdk\" / \uff0c\u4ee5\u53ca dubbo:application compiler=\"jdk\" / \uff0c\u5219\u4e0d\u9700\u8981\u3002 spring-context.jar ^4 : \u5982\u679c\u7528 ServiceConfig \u548c ReferenceConfig \u7684 API \u8c03\u7528\uff0c\u5219\u4e0d\u9700\u8981\u3002 netty.jar ^5 : \u5982\u679c dubbo:protocol server=\"mina\"/ \u6216 dubbo:protocol server=\"grizzly\"/ \uff0c\u5219\u6362\u6210 mina.jar \u6216 grizzly.jar\u3002\u5982\u679c protocol name=\"rmi\"/ \uff0c\u5219\u4e0d\u9700\u8981\u3002","title":"\u7f3a\u7701\u4f9d\u8d56"},{"location":"user/dependencies/#_4","text":"\u4ee5\u4e0b\u4f9d\u8d56\uff0c\u5728\u4e3b\u52a8\u914d\u7f6e\u4f7f\u7528\u76f8\u5e94\u5b9e\u73b0\u7b56\u7565\u65f6\u7528\u5230\uff0c\u9700\u81ea\u884c\u52a0\u5165\u4f9d\u8d56\u3002 netty-all 4.0.35.Final mina: 1.1.7 grizzly: 2.1.4 httpclient: 4.5.3 hessian_lite: 3.2.1-fixed fastjson: 1.2.31 zookeeper: 3.4.9 jedis: 2.9.0 xmemcached: 1.3.6 hessian: 4.0.38 jetty: 6.1.26 hibernate-validator: 5.4.1.Final zkclient: 0.2 curator: 2.12.0 cxf: 3.0.14 thrift: 0.8.0 servlet: 3.0 ^6 validation-api: 1.1.0.GA ^6 jcache: 1.0.0 ^6 javax.el: 3.0.1-b08 ^6 kryo: 4.0.1 kryo-serializers: 0.42 fst: 2.48-jdk-6 resteasy: 3.0.19.Final tomcat-embed-core: 8.0.11 slf4j: 1.7.25 log4j: 1.2.16 [^1]: \u7406\u8bba\u4e0a Dubbo \u53ef\u4ee5\u53ea\u4f9d\u8d56 JDK\uff0c\u4e0d\u4f9d\u8d56\u4e8e\u4efb\u4f55\u4e09\u65b9\u5e93\u8fd0\u884c\uff0c\u53ea\u9700\u914d\u7f6e\u4f7f\u7528 JDK \u76f8\u5173\u5b9e\u73b0\u7b56\u7565","title":"\u53ef\u9009\u4f9d\u8d56"},{"location":"user/maturity/","text":"\u6210\u719f\u5ea6 \u529f\u80fd\u6210\u719f\u5ea6 Feature Maturity Strength Problem Advise User \u5e76\u53d1\u63a7\u5236 Tested \u5e76\u53d1\u63a7\u5236 \u8bd5\u7528 \u8fde\u63a5\u63a7\u5236 Tested \u8fde\u63a5\u6570\u63a7\u5236 \u8bd5\u7528 \u76f4\u8fde\u63d0\u4f9b\u8005 Tested \u70b9\u5bf9\u70b9\u76f4\u8fde\u670d\u52a1\u63d0\u4f9b\u65b9\uff0c\u7528\u4e8e\u6d4b\u8bd5 \u6d4b\u8bd5\u73af\u5883\u4f7f\u7528 Alibaba \u5206\u7ec4\u805a\u5408 Tested \u5206\u7ec4\u805a\u5408\u8fd4\u56de\u503c\uff0c\u7528\u4e8e\u83dc\u5355\u805a\u5408\u7b49\u670d\u52a1 \u7279\u6b8a\u573a\u666f\u4f7f\u7528 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 \u53c2\u6570\u9a8c\u8bc1 Tested \u53c2\u6570\u9a8c\u8bc1\uff0cJSR303\u9a8c\u8bc1\u6846\u67b6\u96c6\u6210 \u5bf9\u6027\u80fd\u6709\u5f71\u54cd \u8bd5\u7528 LaiWang \u7ed3\u679c\u7f13\u5b58 Tested \u7ed3\u679c\u7f13\u5b58\uff0c\u7528\u4e8e\u52a0\u901f\u8bf7\u6c42 \u8bd5\u7528 \u6cdb\u5316\u5f15\u7528 Stable \u6cdb\u5316\u8c03\u7528\uff0c\u65e0\u9700\u4e1a\u52a1\u63a5\u53e3\u7c7b\u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528\uff0c\u7528\u4e8e\u6d4b\u8bd5\u5e73\u53f0\uff0c\u5f00\u653e\u7f51\u5173\u6865\u63a5\u7b49 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba \u6cdb\u5316\u5b9e\u73b0 Stable \u6cdb\u5316\u5b9e\u73b0\uff0c\u65e0\u9700\u4e1a\u52a1\u63a5\u53e3\u7c7b\u5b9e\u73b0\u4efb\u610f\u63a5\u53e3\uff0c\u7528\u4e8eMock\u5e73\u53f0 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba \u56de\u58f0\u6d4b\u8bd5 Tested \u56de\u58f0\u6d4b\u8bd5 \u8bd5\u7528 \u9690\u5f0f\u4f20\u53c2 Stable \u9644\u52a0\u53c2\u6570 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 \u5f02\u6b65\u8c03\u7528 Tested \u4e0d\u53ef\u9760\u5f02\u6b65\u8c03\u7528 \u8bd5\u7528 \u672c\u5730\u8c03\u7528 Tested \u672c\u5730\u8c03\u7528 \u8bd5\u7528 \u53c2\u6570\u56de\u8c03 Tested \u53c2\u6570\u56de\u8c03 \u7279\u6b8a\u573a\u666f\u4f7f\u7528 \u8bd5\u7528 Registry \u4e8b\u4ef6\u901a\u77e5 Tested \u4e8b\u4ef6\u901a\u77e5\uff0c\u5728\u8fdc\u7a0b\u8c03\u7528\u6267\u884c\u524d\u540e\u89e6\u53d1 \u8bd5\u7528 \u672c\u5730\u5b58\u6839 Stable \u5728\u5ba2\u6237\u7aef\u6267\u884c\u90e8\u5206\u903b\u8f91 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba \u672c\u5730\u4f2a\u88c5 Stable \u4f2a\u9020\u8fd4\u56de\u7ed3\u679c\uff0c\u53ef\u5728\u5931\u8d25\u65f6\u6267\u884c\uff0c\u6216\u76f4\u63a5\u6267\u884c\uff0c\u7528\u4e8e\u670d\u52a1\u964d\u7ea7 \u9700\u6ce8\u518c\u4e2d\u5fc3\u652f\u6301 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba \u5ef6\u8fdf\u66b4\u9732 Stable \u5ef6\u8fdf\u66b4\u9732\u670d\u52a1\uff0c\u7528\u4e8e\u7b49\u5f85\u5e94\u7528\u52a0\u8f7dwarmup\u6570\u636e\uff0c\u6216\u7b49\u5f85spring\u52a0\u8f7d\u5b8c\u6210 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba \u5ef6\u8fdf\u8fde\u63a5 Tested \u5ef6\u8fdf\u5efa\u7acb\u8fde\u63a5\uff0c\u8c03\u7528\u65f6\u5efa\u7acb \u8bd5\u7528 Registry \u7c98\u6ede\u8fde\u63a5 Tested \u7c98\u6ede\u8fde\u63a5\uff0c\u603b\u662f\u5411\u540c\u4e00\u4e2a\u63d0\u4f9b\u65b9\u53d1\u8d77\u8bf7\u6c42\uff0c\u9664\u975e\u6b64\u63d0\u4f9b\u65b9\u6302\u6389\uff0c\u518d\u5207\u6362\u5230\u53e6\u4e00\u53f0 \u8bd5\u7528 Registry \u4ee4\u724c\u9a8c\u8bc1 Tested \u4ee4\u724c\u9a8c\u8bc1\uff0c\u7528\u4e8e\u670d\u52a1\u6388\u6743 \u9700\u6ce8\u518c\u4e2d\u5fc3\u652f\u6301 \u8bd5\u7528 \u8def\u7531\u89c4\u5219 Tested \u52a8\u6001\u51b3\u5b9a\u8c03\u7528\u5173\u7cfb \u9700\u6ce8\u518c\u4e2d\u5fc3\u652f\u6301 \u8bd5\u7528 \u914d\u7f6e\u89c4\u5219 Tested \u52a8\u6001\u4e0b\u53d1\u914d\u7f6e\uff0c\u5b9e\u73b0\u529f\u80fd\u7684\u5f00\u5173 \u9700\u6ce8\u518c\u4e2d\u5fc3\u652f\u6301 \u8bd5\u7528 \u8bbf\u95ee\u65e5\u5fd7 Tested \u8bbf\u95ee\u65e5\u5fd7\uff0c\u7528\u4e8e\u8bb0\u5f55\u8c03\u7528\u4fe1\u606f \u672c\u5730\u5b58\u50a8\uff0c\u5f71\u54cd\u6027\u80fd\uff0c\u53d7\u78c1\u76d8\u5927\u5c0f\u9650\u5236 \u8bd5\u7528 \u5206\u5e03\u5f0f\u4e8b\u52a1 Research JTA/XA\u4e09\u9636\u6bb5\u63d0\u4ea4\u4e8b\u52a1 \u4e0d\u7a33\u5b9a \u4e0d\u53ef\u7528 \u7b56\u7565\u6210\u719f\u5ea6 Feature Maturity Strength Problem Advise User Zookeeper\u6ce8\u518c\u4e2d\u5fc3 Stable \u652f\u6301\u57fa\u4e8e\u7f51\u7edc\u7684\u96c6\u7fa4\u65b9\u5f0f\uff0c\u6709\u5e7f\u6cdb\u5468\u8fb9\u5f00\u6e90\u4ea7\u54c1\uff0c\u5efa\u8bae\u4f7f\u7528dubbo-2.3.3\u4ee5\u4e0a\u7248\u672c\uff08\u63a8\u8350\u4f7f\u7528\uff09 \u4f9d\u8d56\u4e8eZookeeper\u7684\u7a33\u5b9a\u6027 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Redis\u6ce8\u518c\u4e2d\u5fc3 Stable \u652f\u6301\u57fa\u4e8e\u5ba2\u6237\u7aef\u53cc\u5199\u7684\u96c6\u7fa4\u65b9\u5f0f\uff0c\u6027\u80fd\u9ad8 \u8981\u6c42\u670d\u52a1\u5668\u65f6\u95f4\u540c\u6b65\uff0c\u7528\u4e8e\u68c0\u67e5\u5fc3\u8df3\u8fc7\u671f\u810f\u6570\u636e \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Multicast\u6ce8\u518c\u4e2d\u5fc3 Tested \u53bb\u4e2d\u5fc3\u5316\uff0c\u4e0d\u9700\u8981\u5b89\u88c5\u6ce8\u518c\u4e2d\u5fc3 \u4f9d\u8d56\u4e8e\u7f51\u7edc\u62d3\u6251\u548c\u8def\u7531\uff0c\u8de8\u673a\u623f\u6709\u98ce\u9669 \u5c0f\u89c4\u6a21\u5e94\u7528\u6216\u5f00\u53d1\u6d4b\u8bd5\u73af\u5883 Simple\u6ce8\u518c\u4e2d\u5fc3 Tested Dogfooding\uff0c\u6ce8\u518c\u4e2d\u5fc3\u672c\u8eab\u4e5f\u662f\u4e00\u4e2a\u6807\u51c6\u7684RPC\u670d\u52a1 \u6ca1\u6709\u96c6\u7fa4\u652f\u6301\uff0c\u53ef\u80fd\u5355\u70b9\u6545\u969c \u8bd5\u7528 Feature Maturity Strength Problem Advise User Simple\u76d1\u63a7\u4e2d\u5fc3 Stable \u652f\u6301JFreeChart\u7edf\u8ba1\u62a5\u8868 \u6ca1\u6709\u96c6\u7fa4\u652f\u6301\uff0c\u53ef\u80fd\u5355\u70b9\u6545\u969c\uff0c\u4f46\u6545\u969c\u540e\u4e0d\u5f71\u54cdRPC\u8fd0\u884c \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Feature Maturity Strength Problem Advise User Dubbo\u534f\u8bae Stable \u91c7\u7528NIO\u590d\u7528\u5355\u4e00\u957f\u8fde\u63a5\uff0c\u5e76\u4f7f\u7528\u7ebf\u7a0b\u6c60\u5e76\u53d1\u5904\u7406\u8bf7\u6c42\uff0c\u51cf\u5c11\u63e1\u624b\u548c\u52a0\u5927\u5e76\u53d1\u6548\u7387\uff0c\u6027\u80fd\u8f83\u597d\uff08\u63a8\u8350\u4f7f\u7528\uff09 \u5728\u5927\u6587\u4ef6\u4f20\u8f93\u65f6\uff0c\u5355\u4e00\u8fde\u63a5\u4f1a\u6210\u4e3a\u74f6\u9888 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba Rmi\u534f\u8bae Stable \u53ef\u4e0e\u539f\u751fRMI\u4e92\u64cd\u4f5c\uff0c\u57fa\u4e8eTCP\u534f\u8bae \u5076\u5c14\u4f1a\u8fde\u63a5\u5931\u8d25\uff0c\u9700\u91cd\u5efaStub \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba Hessian\u534f\u8bae Stable \u53ef\u4e0e\u539f\u751fHessian\u4e92\u64cd\u4f5c\uff0c\u57fa\u4e8eHTTP\u534f\u8bae \u9700hessian.jar\u652f\u6301\uff0chttp\u77ed\u8fde\u63a5\u7684\u5f00\u9500\u5927 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Feature Maturity Strength Problem Advise User Netty Transporter Stable JBoss\u7684NIO\u6846\u67b6\uff0c\u6027\u80fd\u8f83\u597d\uff08\u63a8\u8350\u4f7f\u7528\uff09 \u4e00\u6b21\u8bf7\u6c42\u6d3e\u53d1\u4e24\u79cd\u4e8b\u4ef6\uff0c\u9700\u5c4f\u853d\u65e0\u7528\u4e8b\u4ef6 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba Mina Transporter Stable \u8001\u724cNIO\u6846\u67b6\uff0c\u7a33\u5b9a \u5f85\u53d1\u9001\u6d88\u606f\u961f\u5217\u6d3e\u53d1\u4e0d\u53ca\u65f6\uff0c\u5927\u538b\u529b\u4e0b\uff0c\u4f1a\u51fa\u73b0FullGC \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba Grizzly Transporter Tested Sun\u7684NIO\u6846\u67b6\uff0c\u5e94\u7528\u4e8eGlassFish\u670d\u52a1\u5668\u4e2d \u7ebf\u7a0b\u6c60\u4e0d\u53ef\u6269\u5c55\uff0cFilter\u4e0d\u80fd\u62e6\u622a\u4e0b\u4e00Filter \u8bd5\u7528 Feature Maturity Strength Problem Advise User Hessian Serialization Stable \u6027\u80fd\u8f83\u597d\uff0c\u591a\u8bed\u8a00\u652f\u6301\uff08\u63a8\u8350\u4f7f\u7528\uff09 Hessian\u7684\u5404\u7248\u672c\u517c\u5bb9\u6027\u4e0d\u597d\uff0c\u53ef\u80fd\u548c\u5e94\u7528\u4f7f\u7528\u7684Hessian\u51b2\u7a81\uff0cDubbo\u5185\u5d4c\u4e86hessian3.2.1\u7684\u6e90\u7801 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba Dubbo Serialization Tested \u901a\u8fc7\u4e0d\u4f20\u9001POJO\u7684\u7c7b\u5143\u4fe1\u606f\uff0c\u5728\u5927\u91cfPOJO\u4f20\u8f93\u65f6\uff0c\u6027\u80fd\u8f83\u597d \u5f53\u53c2\u6570\u5bf9\u8c61\u589e\u52a0\u5b57\u6bb5\u65f6\uff0c\u9700\u5916\u90e8\u6587\u4ef6\u58f0\u660e \u8bd5\u7528 Json Serialization Tested \u7eaf\u6587\u672c\uff0c\u53ef\u8de8\u8bed\u8a00\u89e3\u6790\uff0c\u7f3a\u7701\u91c7\u7528FastJson\u89e3\u6790 \u6027\u80fd\u8f83\u5dee \u8bd5\u7528 Java Serialization Stable Java\u539f\u751f\u652f\u6301 \u6027\u80fd\u8f83\u5dee \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Feature Maturity Strength Problem Advise User Javassist ProxyFactory Stable \u901a\u8fc7\u5b57\u8282\u7801\u751f\u6210\u4ee3\u66ff\u53cd\u5c04\uff0c\u6027\u80fd\u6bd4\u8f83\u597d\uff08\u63a8\u8350\u4f7f\u7528\uff09 \u4f9d\u8d56\u4e8ejavassist.jar\u5305\uff0c\u5360\u7528JVM\u7684Perm\u5185\u5b58\uff0cPerm\u53ef\u80fd\u8981\u8bbe\u5927\u4e00\u4e9b\uff1ajava -XX:PermSize=128m \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba Jdk ProxyFactory Stable JDK\u539f\u751f\u652f\u6301 \u6027\u80fd\u8f83\u5dee \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Feature Maturity Strength Problem Advise User Failover Cluster Stable \u5931\u8d25\u81ea\u52a8\u5207\u6362\uff0c\u5f53\u51fa\u73b0\u5931\u8d25\uff0c\u91cd\u8bd5\u5176\u5b83\u670d\u52a1\u5668\uff0c\u901a\u5e38\u7528\u4e8e\u8bfb\u64cd\u4f5c\uff08\u63a8\u8350\u4f7f\u7528\uff09 \u91cd\u8bd5\u4f1a\u5e26\u6765\u66f4\u957f\u5ef6\u8fdf \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba Failfast Cluster Stable \u5feb\u901f\u5931\u8d25\uff0c\u53ea\u53d1\u8d77\u4e00\u6b21\u8c03\u7528\uff0c\u5931\u8d25\u7acb\u5373\u62a5\u9519,\u901a\u5e38\u7528\u4e8e\u975e\u5e42\u7b49\u6027\u7684\u5199\u64cd\u4f5c \u5982\u679c\u6709\u673a\u5668\u6b63\u5728\u91cd\u542f\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u8c03\u7528\u5931\u8d25 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba Failsafe Cluster Stable \u5931\u8d25\u5b89\u5168\uff0c\u51fa\u73b0\u5f02\u5e38\u65f6\uff0c\u76f4\u63a5\u5ffd\u7565\uff0c\u901a\u5e38\u7528\u4e8e\u5199\u5165\u5ba1\u8ba1\u65e5\u5fd7\u7b49\u64cd\u4f5c \u8c03\u7528\u4fe1\u606f\u4e22\u5931 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Monitor Failback Cluster Tested \u5931\u8d25\u81ea\u52a8\u6062\u590d\uff0c\u540e\u53f0\u8bb0\u5f55\u5931\u8d25\u8bf7\u6c42\uff0c\u5b9a\u65f6\u91cd\u53d1\uff0c\u901a\u5e38\u7528\u4e8e\u6d88\u606f\u901a\u77e5\u64cd\u4f5c \u4e0d\u53ef\u9760\uff0c\u91cd\u542f\u4e22\u5931 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Registry Forking Cluster Tested \u5e76\u884c\u8c03\u7528\u591a\u4e2a\u670d\u52a1\u5668\uff0c\u53ea\u8981\u4e00\u4e2a\u6210\u529f\u5373\u8fd4\u56de\uff0c\u901a\u5e38\u7528\u4e8e\u5b9e\u65f6\u6027\u8981\u6c42\u8f83\u9ad8\u7684\u8bfb\u64cd\u4f5c \u9700\u8981\u6d6a\u8d39\u66f4\u591a\u670d\u52a1\u8d44\u6e90 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Broadcast Cluster Tested \u5e7f\u64ad\u8c03\u7528\u6240\u6709\u63d0\u4f9b\u8005\uff0c\u9010\u4e2a\u8c03\u7528\uff0c\u4efb\u610f\u4e00\u53f0\u62a5\u9519\u5219\u62a5\u9519\uff0c\u901a\u5e38\u7528\u4e8e\u66f4\u65b0\u63d0\u4f9b\u65b9\u672c\u5730\u72b6\u6001 \u901f\u5ea6\u6162\uff0c\u4efb\u610f\u4e00\u53f0\u62a5\u9519\u5219\u62a5\u9519 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Feature Maturity Strength Problem Advise User Random LoadBalance Stable \u968f\u673a\uff0c\u6309\u6743\u91cd\u8bbe\u7f6e\u968f\u673a\u6982\u7387\uff08\u63a8\u8350\u4f7f\u7528\uff09 \u5728\u4e00\u4e2a\u622a\u9762\u4e0a\u78b0\u649e\u7684\u6982\u7387\u9ad8\uff0c\u91cd\u8bd5\u65f6\uff0c\u53ef\u80fd\u51fa\u73b0\u77ac\u95f4\u538b\u529b\u4e0d\u5747 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba RoundRobin LoadBalance Stable \u8f6e\u8be2\uff0c\u6309\u516c\u7ea6\u540e\u7684\u6743\u91cd\u8bbe\u7f6e\u8f6e\u8be2\u6bd4\u7387 \u5b58\u5728\u6162\u7684\u673a\u5668\u7d2f\u79ef\u8bf7\u6c42\u95ee\u9898\uff0c\u6781\u7aef\u60c5\u51b5\u53ef\u80fd\u4ea7\u751f\u96ea\u5d29 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 LeastActive LoadBalance Stable \u6700\u5c11\u6d3b\u8dc3\u8c03\u7528\u6570\uff0c\u76f8\u540c\u6d3b\u8dc3\u6570\u7684\u968f\u673a\uff0c\u6d3b\u8dc3\u6570\u6307\u8c03\u7528\u524d\u540e\u8ba1\u6570\u5dee\uff0c\u4f7f\u6162\u7684\u673a\u5668\u6536\u5230\u66f4\u5c11\u8bf7\u6c42 \u4e0d\u652f\u6301\u6743\u91cd\uff0c\u5728\u5bb9\u91cf\u89c4\u5212\u65f6\uff0c\u4e0d\u80fd\u901a\u8fc7\u6743\u91cd\u628a\u538b\u529b\u5bfc\u5411\u4e00\u53f0\u673a\u5668\u538b\u6d4b\u5bb9\u91cf \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 ConsistentHash LoadBalance Stable \u4e00\u81f4\u6027Hash\uff0c\u76f8\u540c\u53c2\u6570\u7684\u8bf7\u6c42\u603b\u662f\u53d1\u5230\u540c\u4e00\u63d0\u4f9b\u8005\uff0c\u5f53\u67d0\u4e00\u53f0\u63d0\u4f9b\u8005\u6302\u65f6\uff0c\u539f\u672c\u53d1\u5f80\u8be5\u63d0\u4f9b\u8005\u7684\u8bf7\u6c42\uff0c\u57fa\u4e8e\u865a\u62df\u8282\u70b9\uff0c\u5e73\u644a\u5230\u5176\u5b83\u63d0\u4f9b\u8005\uff0c\u4e0d\u4f1a\u5f15\u8d77\u5267\u70c8\u53d8\u52a8 \u538b\u529b\u5206\u644a\u4e0d\u5747 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Feature Maturity Strength Problem Advise User \u6761\u4ef6\u8def\u7531\u89c4\u5219 Stable \u57fa\u4e8e\u6761\u4ef6\u8868\u8fbe\u5f0f\u7684\u8def\u7531\u89c4\u5219\uff0c\u529f\u80fd\u7b80\u5355\u6613\u7528 \u6709\u4e9b\u590d\u6742\u591a\u5206\u652f\u6761\u4ef6\u60c5\u51b5\uff0c\u89c4\u5219\u5f88\u96be\u63cf\u8ff0 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba \u811a\u672c\u8def\u7531\u89c4\u5219 Tested \u57fa\u4e8e\u811a\u672c\u5f15\u64ce\u7684\u8def\u7531\u89c4\u5219\uff0c\u529f\u80fd\u5f3a\u5927 \u6ca1\u6709\u8fd0\u884c\u6c99\u7bb1\uff0c\u811a\u672c\u80fd\u529b\u8fc7\u4e8e\u5f3a\u5927\uff0c\u53ef\u80fd\u6210\u4e3a\u540e\u95e8 \u8bd5\u7528 Feature Maturity Strength Problem Advise User Spring Container Stable \u81ea\u52a8\u52a0\u8f7dMETA-INF/spring\u76ee\u5f55\u4e0b\u7684\u6240\u6709Spring\u914d\u7f6e \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba Jetty Container Stable \u542f\u52a8\u4e00\u4e2a\u5185\u5d4cJetty\uff0c\u7528\u4e8e\u6c47\u62a5\u72b6\u6001 \u5927\u91cf\u8bbf\u95ee\u9875\u9762\u65f6\uff0c\u4f1a\u5f71\u54cd\u670d\u52a1\u5668\u7684\u7ebf\u7a0b\u548c\u5185\u5b58 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba Log4j Container Stable \u81ea\u52a8\u914d\u7f6elog4j\u7684\u914d\u7f6e\uff0c\u5728\u591a\u8fdb\u7a0b\u542f\u52a8\u65f6\uff0c\u81ea\u52a8\u7ed9\u65e5\u5fd7\u6587\u4ef6\u6309\u8fdb\u7a0b\u5206\u76ee\u5f55 \u7528\u6237\u4e0d\u80fd\u63a7\u5236log4j\u7684\u914d\u7f6e\uff0c\u4e0d\u7075\u6d3b \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba","title":"\u6210\u719f\u5ea6"},{"location":"user/maturity/#_1","text":"","title":"\u6210\u719f\u5ea6"},{"location":"user/maturity/#_2","text":"Feature Maturity Strength Problem Advise User \u5e76\u53d1\u63a7\u5236 Tested \u5e76\u53d1\u63a7\u5236 \u8bd5\u7528 \u8fde\u63a5\u63a7\u5236 Tested \u8fde\u63a5\u6570\u63a7\u5236 \u8bd5\u7528 \u76f4\u8fde\u63d0\u4f9b\u8005 Tested \u70b9\u5bf9\u70b9\u76f4\u8fde\u670d\u52a1\u63d0\u4f9b\u65b9\uff0c\u7528\u4e8e\u6d4b\u8bd5 \u6d4b\u8bd5\u73af\u5883\u4f7f\u7528 Alibaba \u5206\u7ec4\u805a\u5408 Tested \u5206\u7ec4\u805a\u5408\u8fd4\u56de\u503c\uff0c\u7528\u4e8e\u83dc\u5355\u805a\u5408\u7b49\u670d\u52a1 \u7279\u6b8a\u573a\u666f\u4f7f\u7528 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 \u53c2\u6570\u9a8c\u8bc1 Tested \u53c2\u6570\u9a8c\u8bc1\uff0cJSR303\u9a8c\u8bc1\u6846\u67b6\u96c6\u6210 \u5bf9\u6027\u80fd\u6709\u5f71\u54cd \u8bd5\u7528 LaiWang \u7ed3\u679c\u7f13\u5b58 Tested \u7ed3\u679c\u7f13\u5b58\uff0c\u7528\u4e8e\u52a0\u901f\u8bf7\u6c42 \u8bd5\u7528 \u6cdb\u5316\u5f15\u7528 Stable \u6cdb\u5316\u8c03\u7528\uff0c\u65e0\u9700\u4e1a\u52a1\u63a5\u53e3\u7c7b\u8fdb\u884c\u8fdc\u7a0b\u8c03\u7528\uff0c\u7528\u4e8e\u6d4b\u8bd5\u5e73\u53f0\uff0c\u5f00\u653e\u7f51\u5173\u6865\u63a5\u7b49 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba \u6cdb\u5316\u5b9e\u73b0 Stable \u6cdb\u5316\u5b9e\u73b0\uff0c\u65e0\u9700\u4e1a\u52a1\u63a5\u53e3\u7c7b\u5b9e\u73b0\u4efb\u610f\u63a5\u53e3\uff0c\u7528\u4e8eMock\u5e73\u53f0 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba \u56de\u58f0\u6d4b\u8bd5 Tested \u56de\u58f0\u6d4b\u8bd5 \u8bd5\u7528 \u9690\u5f0f\u4f20\u53c2 Stable \u9644\u52a0\u53c2\u6570 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 \u5f02\u6b65\u8c03\u7528 Tested \u4e0d\u53ef\u9760\u5f02\u6b65\u8c03\u7528 \u8bd5\u7528 \u672c\u5730\u8c03\u7528 Tested \u672c\u5730\u8c03\u7528 \u8bd5\u7528 \u53c2\u6570\u56de\u8c03 Tested \u53c2\u6570\u56de\u8c03 \u7279\u6b8a\u573a\u666f\u4f7f\u7528 \u8bd5\u7528 Registry \u4e8b\u4ef6\u901a\u77e5 Tested \u4e8b\u4ef6\u901a\u77e5\uff0c\u5728\u8fdc\u7a0b\u8c03\u7528\u6267\u884c\u524d\u540e\u89e6\u53d1 \u8bd5\u7528 \u672c\u5730\u5b58\u6839 Stable \u5728\u5ba2\u6237\u7aef\u6267\u884c\u90e8\u5206\u903b\u8f91 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba \u672c\u5730\u4f2a\u88c5 Stable \u4f2a\u9020\u8fd4\u56de\u7ed3\u679c\uff0c\u53ef\u5728\u5931\u8d25\u65f6\u6267\u884c\uff0c\u6216\u76f4\u63a5\u6267\u884c\uff0c\u7528\u4e8e\u670d\u52a1\u964d\u7ea7 \u9700\u6ce8\u518c\u4e2d\u5fc3\u652f\u6301 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba \u5ef6\u8fdf\u66b4\u9732 Stable \u5ef6\u8fdf\u66b4\u9732\u670d\u52a1\uff0c\u7528\u4e8e\u7b49\u5f85\u5e94\u7528\u52a0\u8f7dwarmup\u6570\u636e\uff0c\u6216\u7b49\u5f85spring\u52a0\u8f7d\u5b8c\u6210 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba \u5ef6\u8fdf\u8fde\u63a5 Tested \u5ef6\u8fdf\u5efa\u7acb\u8fde\u63a5\uff0c\u8c03\u7528\u65f6\u5efa\u7acb \u8bd5\u7528 Registry \u7c98\u6ede\u8fde\u63a5 Tested \u7c98\u6ede\u8fde\u63a5\uff0c\u603b\u662f\u5411\u540c\u4e00\u4e2a\u63d0\u4f9b\u65b9\u53d1\u8d77\u8bf7\u6c42\uff0c\u9664\u975e\u6b64\u63d0\u4f9b\u65b9\u6302\u6389\uff0c\u518d\u5207\u6362\u5230\u53e6\u4e00\u53f0 \u8bd5\u7528 Registry \u4ee4\u724c\u9a8c\u8bc1 Tested \u4ee4\u724c\u9a8c\u8bc1\uff0c\u7528\u4e8e\u670d\u52a1\u6388\u6743 \u9700\u6ce8\u518c\u4e2d\u5fc3\u652f\u6301 \u8bd5\u7528 \u8def\u7531\u89c4\u5219 Tested \u52a8\u6001\u51b3\u5b9a\u8c03\u7528\u5173\u7cfb \u9700\u6ce8\u518c\u4e2d\u5fc3\u652f\u6301 \u8bd5\u7528 \u914d\u7f6e\u89c4\u5219 Tested \u52a8\u6001\u4e0b\u53d1\u914d\u7f6e\uff0c\u5b9e\u73b0\u529f\u80fd\u7684\u5f00\u5173 \u9700\u6ce8\u518c\u4e2d\u5fc3\u652f\u6301 \u8bd5\u7528 \u8bbf\u95ee\u65e5\u5fd7 Tested \u8bbf\u95ee\u65e5\u5fd7\uff0c\u7528\u4e8e\u8bb0\u5f55\u8c03\u7528\u4fe1\u606f \u672c\u5730\u5b58\u50a8\uff0c\u5f71\u54cd\u6027\u80fd\uff0c\u53d7\u78c1\u76d8\u5927\u5c0f\u9650\u5236 \u8bd5\u7528 \u5206\u5e03\u5f0f\u4e8b\u52a1 Research JTA/XA\u4e09\u9636\u6bb5\u63d0\u4ea4\u4e8b\u52a1 \u4e0d\u7a33\u5b9a \u4e0d\u53ef\u7528","title":"\u529f\u80fd\u6210\u719f\u5ea6"},{"location":"user/maturity/#_3","text":"Feature Maturity Strength Problem Advise User Zookeeper\u6ce8\u518c\u4e2d\u5fc3 Stable \u652f\u6301\u57fa\u4e8e\u7f51\u7edc\u7684\u96c6\u7fa4\u65b9\u5f0f\uff0c\u6709\u5e7f\u6cdb\u5468\u8fb9\u5f00\u6e90\u4ea7\u54c1\uff0c\u5efa\u8bae\u4f7f\u7528dubbo-2.3.3\u4ee5\u4e0a\u7248\u672c\uff08\u63a8\u8350\u4f7f\u7528\uff09 \u4f9d\u8d56\u4e8eZookeeper\u7684\u7a33\u5b9a\u6027 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Redis\u6ce8\u518c\u4e2d\u5fc3 Stable \u652f\u6301\u57fa\u4e8e\u5ba2\u6237\u7aef\u53cc\u5199\u7684\u96c6\u7fa4\u65b9\u5f0f\uff0c\u6027\u80fd\u9ad8 \u8981\u6c42\u670d\u52a1\u5668\u65f6\u95f4\u540c\u6b65\uff0c\u7528\u4e8e\u68c0\u67e5\u5fc3\u8df3\u8fc7\u671f\u810f\u6570\u636e \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Multicast\u6ce8\u518c\u4e2d\u5fc3 Tested \u53bb\u4e2d\u5fc3\u5316\uff0c\u4e0d\u9700\u8981\u5b89\u88c5\u6ce8\u518c\u4e2d\u5fc3 \u4f9d\u8d56\u4e8e\u7f51\u7edc\u62d3\u6251\u548c\u8def\u7531\uff0c\u8de8\u673a\u623f\u6709\u98ce\u9669 \u5c0f\u89c4\u6a21\u5e94\u7528\u6216\u5f00\u53d1\u6d4b\u8bd5\u73af\u5883 Simple\u6ce8\u518c\u4e2d\u5fc3 Tested Dogfooding\uff0c\u6ce8\u518c\u4e2d\u5fc3\u672c\u8eab\u4e5f\u662f\u4e00\u4e2a\u6807\u51c6\u7684RPC\u670d\u52a1 \u6ca1\u6709\u96c6\u7fa4\u652f\u6301\uff0c\u53ef\u80fd\u5355\u70b9\u6545\u969c \u8bd5\u7528 Feature Maturity Strength Problem Advise User Simple\u76d1\u63a7\u4e2d\u5fc3 Stable \u652f\u6301JFreeChart\u7edf\u8ba1\u62a5\u8868 \u6ca1\u6709\u96c6\u7fa4\u652f\u6301\uff0c\u53ef\u80fd\u5355\u70b9\u6545\u969c\uff0c\u4f46\u6545\u969c\u540e\u4e0d\u5f71\u54cdRPC\u8fd0\u884c \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Feature Maturity Strength Problem Advise User Dubbo\u534f\u8bae Stable \u91c7\u7528NIO\u590d\u7528\u5355\u4e00\u957f\u8fde\u63a5\uff0c\u5e76\u4f7f\u7528\u7ebf\u7a0b\u6c60\u5e76\u53d1\u5904\u7406\u8bf7\u6c42\uff0c\u51cf\u5c11\u63e1\u624b\u548c\u52a0\u5927\u5e76\u53d1\u6548\u7387\uff0c\u6027\u80fd\u8f83\u597d\uff08\u63a8\u8350\u4f7f\u7528\uff09 \u5728\u5927\u6587\u4ef6\u4f20\u8f93\u65f6\uff0c\u5355\u4e00\u8fde\u63a5\u4f1a\u6210\u4e3a\u74f6\u9888 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba Rmi\u534f\u8bae Stable \u53ef\u4e0e\u539f\u751fRMI\u4e92\u64cd\u4f5c\uff0c\u57fa\u4e8eTCP\u534f\u8bae \u5076\u5c14\u4f1a\u8fde\u63a5\u5931\u8d25\uff0c\u9700\u91cd\u5efaStub \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba Hessian\u534f\u8bae Stable \u53ef\u4e0e\u539f\u751fHessian\u4e92\u64cd\u4f5c\uff0c\u57fa\u4e8eHTTP\u534f\u8bae \u9700hessian.jar\u652f\u6301\uff0chttp\u77ed\u8fde\u63a5\u7684\u5f00\u9500\u5927 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Feature Maturity Strength Problem Advise User Netty Transporter Stable JBoss\u7684NIO\u6846\u67b6\uff0c\u6027\u80fd\u8f83\u597d\uff08\u63a8\u8350\u4f7f\u7528\uff09 \u4e00\u6b21\u8bf7\u6c42\u6d3e\u53d1\u4e24\u79cd\u4e8b\u4ef6\uff0c\u9700\u5c4f\u853d\u65e0\u7528\u4e8b\u4ef6 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba Mina Transporter Stable \u8001\u724cNIO\u6846\u67b6\uff0c\u7a33\u5b9a \u5f85\u53d1\u9001\u6d88\u606f\u961f\u5217\u6d3e\u53d1\u4e0d\u53ca\u65f6\uff0c\u5927\u538b\u529b\u4e0b\uff0c\u4f1a\u51fa\u73b0FullGC \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba Grizzly Transporter Tested Sun\u7684NIO\u6846\u67b6\uff0c\u5e94\u7528\u4e8eGlassFish\u670d\u52a1\u5668\u4e2d \u7ebf\u7a0b\u6c60\u4e0d\u53ef\u6269\u5c55\uff0cFilter\u4e0d\u80fd\u62e6\u622a\u4e0b\u4e00Filter \u8bd5\u7528 Feature Maturity Strength Problem Advise User Hessian Serialization Stable \u6027\u80fd\u8f83\u597d\uff0c\u591a\u8bed\u8a00\u652f\u6301\uff08\u63a8\u8350\u4f7f\u7528\uff09 Hessian\u7684\u5404\u7248\u672c\u517c\u5bb9\u6027\u4e0d\u597d\uff0c\u53ef\u80fd\u548c\u5e94\u7528\u4f7f\u7528\u7684Hessian\u51b2\u7a81\uff0cDubbo\u5185\u5d4c\u4e86hessian3.2.1\u7684\u6e90\u7801 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba Dubbo Serialization Tested \u901a\u8fc7\u4e0d\u4f20\u9001POJO\u7684\u7c7b\u5143\u4fe1\u606f\uff0c\u5728\u5927\u91cfPOJO\u4f20\u8f93\u65f6\uff0c\u6027\u80fd\u8f83\u597d \u5f53\u53c2\u6570\u5bf9\u8c61\u589e\u52a0\u5b57\u6bb5\u65f6\uff0c\u9700\u5916\u90e8\u6587\u4ef6\u58f0\u660e \u8bd5\u7528 Json Serialization Tested \u7eaf\u6587\u672c\uff0c\u53ef\u8de8\u8bed\u8a00\u89e3\u6790\uff0c\u7f3a\u7701\u91c7\u7528FastJson\u89e3\u6790 \u6027\u80fd\u8f83\u5dee \u8bd5\u7528 Java Serialization Stable Java\u539f\u751f\u652f\u6301 \u6027\u80fd\u8f83\u5dee \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Feature Maturity Strength Problem Advise User Javassist ProxyFactory Stable \u901a\u8fc7\u5b57\u8282\u7801\u751f\u6210\u4ee3\u66ff\u53cd\u5c04\uff0c\u6027\u80fd\u6bd4\u8f83\u597d\uff08\u63a8\u8350\u4f7f\u7528\uff09 \u4f9d\u8d56\u4e8ejavassist.jar\u5305\uff0c\u5360\u7528JVM\u7684Perm\u5185\u5b58\uff0cPerm\u53ef\u80fd\u8981\u8bbe\u5927\u4e00\u4e9b\uff1ajava -XX:PermSize=128m \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba Jdk ProxyFactory Stable JDK\u539f\u751f\u652f\u6301 \u6027\u80fd\u8f83\u5dee \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Feature Maturity Strength Problem Advise User Failover Cluster Stable \u5931\u8d25\u81ea\u52a8\u5207\u6362\uff0c\u5f53\u51fa\u73b0\u5931\u8d25\uff0c\u91cd\u8bd5\u5176\u5b83\u670d\u52a1\u5668\uff0c\u901a\u5e38\u7528\u4e8e\u8bfb\u64cd\u4f5c\uff08\u63a8\u8350\u4f7f\u7528\uff09 \u91cd\u8bd5\u4f1a\u5e26\u6765\u66f4\u957f\u5ef6\u8fdf \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba Failfast Cluster Stable \u5feb\u901f\u5931\u8d25\uff0c\u53ea\u53d1\u8d77\u4e00\u6b21\u8c03\u7528\uff0c\u5931\u8d25\u7acb\u5373\u62a5\u9519,\u901a\u5e38\u7528\u4e8e\u975e\u5e42\u7b49\u6027\u7684\u5199\u64cd\u4f5c \u5982\u679c\u6709\u673a\u5668\u6b63\u5728\u91cd\u542f\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u8c03\u7528\u5931\u8d25 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba Failsafe Cluster Stable \u5931\u8d25\u5b89\u5168\uff0c\u51fa\u73b0\u5f02\u5e38\u65f6\uff0c\u76f4\u63a5\u5ffd\u7565\uff0c\u901a\u5e38\u7528\u4e8e\u5199\u5165\u5ba1\u8ba1\u65e5\u5fd7\u7b49\u64cd\u4f5c \u8c03\u7528\u4fe1\u606f\u4e22\u5931 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Monitor Failback Cluster Tested \u5931\u8d25\u81ea\u52a8\u6062\u590d\uff0c\u540e\u53f0\u8bb0\u5f55\u5931\u8d25\u8bf7\u6c42\uff0c\u5b9a\u65f6\u91cd\u53d1\uff0c\u901a\u5e38\u7528\u4e8e\u6d88\u606f\u901a\u77e5\u64cd\u4f5c \u4e0d\u53ef\u9760\uff0c\u91cd\u542f\u4e22\u5931 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Registry Forking Cluster Tested \u5e76\u884c\u8c03\u7528\u591a\u4e2a\u670d\u52a1\u5668\uff0c\u53ea\u8981\u4e00\u4e2a\u6210\u529f\u5373\u8fd4\u56de\uff0c\u901a\u5e38\u7528\u4e8e\u5b9e\u65f6\u6027\u8981\u6c42\u8f83\u9ad8\u7684\u8bfb\u64cd\u4f5c \u9700\u8981\u6d6a\u8d39\u66f4\u591a\u670d\u52a1\u8d44\u6e90 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Broadcast Cluster Tested \u5e7f\u64ad\u8c03\u7528\u6240\u6709\u63d0\u4f9b\u8005\uff0c\u9010\u4e2a\u8c03\u7528\uff0c\u4efb\u610f\u4e00\u53f0\u62a5\u9519\u5219\u62a5\u9519\uff0c\u901a\u5e38\u7528\u4e8e\u66f4\u65b0\u63d0\u4f9b\u65b9\u672c\u5730\u72b6\u6001 \u901f\u5ea6\u6162\uff0c\u4efb\u610f\u4e00\u53f0\u62a5\u9519\u5219\u62a5\u9519 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Feature Maturity Strength Problem Advise User Random LoadBalance Stable \u968f\u673a\uff0c\u6309\u6743\u91cd\u8bbe\u7f6e\u968f\u673a\u6982\u7387\uff08\u63a8\u8350\u4f7f\u7528\uff09 \u5728\u4e00\u4e2a\u622a\u9762\u4e0a\u78b0\u649e\u7684\u6982\u7387\u9ad8\uff0c\u91cd\u8bd5\u65f6\uff0c\u53ef\u80fd\u51fa\u73b0\u77ac\u95f4\u538b\u529b\u4e0d\u5747 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba RoundRobin LoadBalance Stable \u8f6e\u8be2\uff0c\u6309\u516c\u7ea6\u540e\u7684\u6743\u91cd\u8bbe\u7f6e\u8f6e\u8be2\u6bd4\u7387 \u5b58\u5728\u6162\u7684\u673a\u5668\u7d2f\u79ef\u8bf7\u6c42\u95ee\u9898\uff0c\u6781\u7aef\u60c5\u51b5\u53ef\u80fd\u4ea7\u751f\u96ea\u5d29 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 LeastActive LoadBalance Stable \u6700\u5c11\u6d3b\u8dc3\u8c03\u7528\u6570\uff0c\u76f8\u540c\u6d3b\u8dc3\u6570\u7684\u968f\u673a\uff0c\u6d3b\u8dc3\u6570\u6307\u8c03\u7528\u524d\u540e\u8ba1\u6570\u5dee\uff0c\u4f7f\u6162\u7684\u673a\u5668\u6536\u5230\u66f4\u5c11\u8bf7\u6c42 \u4e0d\u652f\u6301\u6743\u91cd\uff0c\u5728\u5bb9\u91cf\u89c4\u5212\u65f6\uff0c\u4e0d\u80fd\u901a\u8fc7\u6743\u91cd\u628a\u538b\u529b\u5bfc\u5411\u4e00\u53f0\u673a\u5668\u538b\u6d4b\u5bb9\u91cf \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 ConsistentHash LoadBalance Stable \u4e00\u81f4\u6027Hash\uff0c\u76f8\u540c\u53c2\u6570\u7684\u8bf7\u6c42\u603b\u662f\u53d1\u5230\u540c\u4e00\u63d0\u4f9b\u8005\uff0c\u5f53\u67d0\u4e00\u53f0\u63d0\u4f9b\u8005\u6302\u65f6\uff0c\u539f\u672c\u53d1\u5f80\u8be5\u63d0\u4f9b\u8005\u7684\u8bf7\u6c42\uff0c\u57fa\u4e8e\u865a\u62df\u8282\u70b9\uff0c\u5e73\u644a\u5230\u5176\u5b83\u63d0\u4f9b\u8005\uff0c\u4e0d\u4f1a\u5f15\u8d77\u5267\u70c8\u53d8\u52a8 \u538b\u529b\u5206\u644a\u4e0d\u5747 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Feature Maturity Strength Problem Advise User \u6761\u4ef6\u8def\u7531\u89c4\u5219 Stable \u57fa\u4e8e\u6761\u4ef6\u8868\u8fbe\u5f0f\u7684\u8def\u7531\u89c4\u5219\uff0c\u529f\u80fd\u7b80\u5355\u6613\u7528 \u6709\u4e9b\u590d\u6742\u591a\u5206\u652f\u6761\u4ef6\u60c5\u51b5\uff0c\u89c4\u5219\u5f88\u96be\u63cf\u8ff0 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba \u811a\u672c\u8def\u7531\u89c4\u5219 Tested \u57fa\u4e8e\u811a\u672c\u5f15\u64ce\u7684\u8def\u7531\u89c4\u5219\uff0c\u529f\u80fd\u5f3a\u5927 \u6ca1\u6709\u8fd0\u884c\u6c99\u7bb1\uff0c\u811a\u672c\u80fd\u529b\u8fc7\u4e8e\u5f3a\u5927\uff0c\u53ef\u80fd\u6210\u4e3a\u540e\u95e8 \u8bd5\u7528 Feature Maturity Strength Problem Advise User Spring Container Stable \u81ea\u52a8\u52a0\u8f7dMETA-INF/spring\u76ee\u5f55\u4e0b\u7684\u6240\u6709Spring\u914d\u7f6e \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba Jetty Container Stable \u542f\u52a8\u4e00\u4e2a\u5185\u5d4cJetty\uff0c\u7528\u4e8e\u6c47\u62a5\u72b6\u6001 \u5927\u91cf\u8bbf\u95ee\u9875\u9762\u65f6\uff0c\u4f1a\u5f71\u54cd\u670d\u52a1\u5668\u7684\u7ebf\u7a0b\u548c\u5185\u5b58 \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba Log4j Container Stable \u81ea\u52a8\u914d\u7f6elog4j\u7684\u914d\u7f6e\uff0c\u5728\u591a\u8fdb\u7a0b\u542f\u52a8\u65f6\uff0c\u81ea\u52a8\u7ed9\u65e5\u5fd7\u6587\u4ef6\u6309\u8fdb\u7a0b\u5206\u76ee\u5f55 \u7528\u6237\u4e0d\u80fd\u63a7\u5236log4j\u7684\u914d\u7f6e\uff0c\u4e0d\u7075\u6d3b \u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883 Alibaba","title":"\u7b56\u7565\u6210\u719f\u5ea6"},{"location":"user/new-features-in-a-glance/","text":"Dubbo \u7248\u672c\u53d1\u5e03\u53ca\u65b0\u7279\u6027\u901f\u89c8 Dubbo \u7248\u672c\u53d1\u5e03\u53ca\u65b0\u7279\u6027\u901f\u89c8 \u7248\u672c\u901f\u89c8 2.7.x \u7248\u672c 2.6.x \u53ca\u4e4b\u524d\u7248\u672c \u503c\u5f97\u5173\u6ce8\u7684\u65b0\u7279\u6027 \u70ed\u95e8\u6587\u7ae0\u5217\u8868 \u7248\u672c\u901f\u89c8 Dubbo \u793e\u533a\u76ee\u524d\u4e3b\u529b\u7ef4\u62a4\u7684\u6709 2.6.x \u548c 2.7.x \u4e24\u5927\u7248\u672c\uff0c\u5176\u4e2d\uff0c * 2.6.x \u4e3b\u8981\u4ee5 bugfix \u548c\u5c11\u91cf enhancements \u4e3a\u4e3b\uff0c\u56e0\u6b64\u80fd\u5b8c\u5168\u4fdd\u8bc1\u7a33\u5b9a\u6027 * 2.7.x \u4f5c\u4e3a\u793e\u533a\u7684\u4e3b\u8981\u5f00\u53d1\u7248\u672c\uff0c\u5f97\u5230\u6301\u7eed\u66f4\u65b0\u5e76\u589e\u52a0\u4e86\u5927\u91cf\u65b0 feature \u548c\u4f18\u5316\uff0c\u540c\u65f6\u4e5f\u5e26\u6765\u4e86\u4e00\u4e9b\u7a33\u5b9a\u6027\u6311\u6218 2.7.x \u7248\u672c \u7248\u672c \u91cd\u8981\u529f\u80fd \u5347\u7ea7\u5efa\u8bae 1 2.7.6 bugfix of 2.7.5 \u670d\u52a1\u9274\u6743 \u63a8\u8350\u751f\u4ea7\u4f7f\u7528 2 2.7.5 \u670d\u52a1\u81ea\u7701 HTTP/2\uff08gRPC\uff09 Protobuf TLS \u6027\u80fd\u4f18\u5316 https://github.com/apache/dubbo/releases/tag/dubbo-2.7.5 \u4e0d\u5efa\u8bae\u5927\u89c4\u6a21\u751f\u4ea7\u4f7f\u7528 3 2.7.4.1 bugfixes and enhancements of 2.7.3 \u63a8\u8350\u751f\u4ea7\u4f7f\u7528 4 2.7.3 bigfixes of and enhancements of 2.7.2 \u63a8\u8350\u751f\u4ea7\u4f7f\u7528 5 2.7.2 bigfixes of and enhancements of 2.7.1 \u4e0d\u5efa\u8bae\u5927\u89c4\u6a21\u751f\u4ea7\u4f7f\u7528 6 2.7.1 bigfixes of and enhancements of 2.7.0 \u4e0d\u5efa\u8bae\u5927\u89c4\u6a21\u751f\u4ea7\u4f7f\u7528 7 2.7.0 \u5f02\u6b65\u7f16\u7a0b\u6a21\u578b - \u6d88\u8d39\u7aef/\u63d0\u4f9b\u7aef\u5f02\u6b65 \u670d\u52a1\u6cbb\u7406\u89c4\u5219\u589e\u5f3a \u7b80\u5316\u7684\u6ce8\u518c\u6a21\u578b \u914d\u7f6e\u4e2d\u5fc3\u3001\u5143\u6570\u636e\u4e2d\u5fc3 package \u91cd\u6784 https://github.com/apache/dubbo/releases/tag/dubbo-2.7.0 beta \u7248\u672c\uff0c2.6.x \u91cd\u6784\u540e\u9996\u4e2a\u7248\u672c 2.6.x \u53ca\u4e4b\u524d\u7248\u672c \u7248\u672c \u91cd\u8981\u529f\u80fd \u5347\u7ea7\u5efa\u8bae 1 2.6.x bugfix \u5efa\u8bae\u6301\u7eed\u5347\u7ea7\u6700\u65b0\u7248\u672c\uff0c\u6240\u6709\u7248\u672c\u751f\u4ea7\u53ef\u7528 2 2.5.x \u505c\u6b62\u7ef4\u62a4 \u5efa\u8bae\u5347\u7ea7\u6700\u65b0 2.6.x \u7248\u672c 3 2.4.x \u53ca\u4e4b\u524d \u505c\u6b62\u7ef4\u62a4 \u5efa\u8bae\u5347\u7ea7\u6700\u65b0 2.6.x \u7248\u672c \u503c\u5f97\u5173\u6ce8\u7684\u65b0\u7279\u6027 Dubbo \u4e91\u539f\u751f\u8ba1\u5212\uff08\u656c\u8bf7\u671f\u5f85...\uff09 Kubernetes Native Service Discovery\uff08\u656c\u8bf7\u671f\u5f85...\uff09 gRPC (HTTP/2) \u534f\u8bae \u4f7f\u7528 Protobuf \u5b9a\u4e49 Dubbo \u670d\u52a1 TLS \u5b89\u5168\u4f20\u8f93 \u5b9e\u4f8b\u7ea7\u670d\u52a1\u53d1\u73b0 \u670d\u52a1\u9274\u6743 \u6027\u80fd\u4f18\u5316 \u8c03\u7528\u94fe\u8def\u63d0\u5347 30% \u6d88\u8d39\u7aef\u7ebf\u7a0b\u6a21\u578b \u5730\u5740\u63a8\u9001\u94fe\u8def \u70ed\u95e8\u6587\u7ae0\u5217\u8868 \u4ece 2019 \u5230 2020\uff0cApache Dubbo \u5e74\u5ea6\u603b\u7ed3 Dubbo 2.7.5 \u91cc\u7a0b\u7891\u7248\u672c\u53d1\u5e03 Dubbo \u5728\u534f\u8bae\u4e0e\u591a\u8bed\u8a00\u65b9\u5411\u7684\u63a2\u7d22\uff1a\u652f\u6301 gRPC\u3001Protobuf","title":"Dubbo \u7248\u672c\u53d1\u5e03\u53ca\u65b0\u7279\u6027\u901f\u89c8"},{"location":"user/new-features-in-a-glance/#dubbo","text":"Dubbo \u7248\u672c\u53d1\u5e03\u53ca\u65b0\u7279\u6027\u901f\u89c8 \u7248\u672c\u901f\u89c8 2.7.x \u7248\u672c 2.6.x \u53ca\u4e4b\u524d\u7248\u672c \u503c\u5f97\u5173\u6ce8\u7684\u65b0\u7279\u6027 \u70ed\u95e8\u6587\u7ae0\u5217\u8868","title":"Dubbo \u7248\u672c\u53d1\u5e03\u53ca\u65b0\u7279\u6027\u901f\u89c8"},{"location":"user/new-features-in-a-glance/#_1","text":"Dubbo \u793e\u533a\u76ee\u524d\u4e3b\u529b\u7ef4\u62a4\u7684\u6709 2.6.x \u548c 2.7.x \u4e24\u5927\u7248\u672c\uff0c\u5176\u4e2d\uff0c * 2.6.x \u4e3b\u8981\u4ee5 bugfix \u548c\u5c11\u91cf enhancements \u4e3a\u4e3b\uff0c\u56e0\u6b64\u80fd\u5b8c\u5168\u4fdd\u8bc1\u7a33\u5b9a\u6027 * 2.7.x \u4f5c\u4e3a\u793e\u533a\u7684\u4e3b\u8981\u5f00\u53d1\u7248\u672c\uff0c\u5f97\u5230\u6301\u7eed\u66f4\u65b0\u5e76\u589e\u52a0\u4e86\u5927\u91cf\u65b0 feature \u548c\u4f18\u5316\uff0c\u540c\u65f6\u4e5f\u5e26\u6765\u4e86\u4e00\u4e9b\u7a33\u5b9a\u6027\u6311\u6218","title":"\u7248\u672c\u901f\u89c8"},{"location":"user/new-features-in-a-glance/#27x","text":"\u7248\u672c \u91cd\u8981\u529f\u80fd \u5347\u7ea7\u5efa\u8bae 1 2.7.6 bugfix of 2.7.5 \u670d\u52a1\u9274\u6743 \u63a8\u8350\u751f\u4ea7\u4f7f\u7528 2 2.7.5 \u670d\u52a1\u81ea\u7701 HTTP/2\uff08gRPC\uff09 Protobuf TLS \u6027\u80fd\u4f18\u5316 https://github.com/apache/dubbo/releases/tag/dubbo-2.7.5 \u4e0d\u5efa\u8bae\u5927\u89c4\u6a21\u751f\u4ea7\u4f7f\u7528 3 2.7.4.1 bugfixes and enhancements of 2.7.3 \u63a8\u8350\u751f\u4ea7\u4f7f\u7528 4 2.7.3 bigfixes of and enhancements of 2.7.2 \u63a8\u8350\u751f\u4ea7\u4f7f\u7528 5 2.7.2 bigfixes of and enhancements of 2.7.1 \u4e0d\u5efa\u8bae\u5927\u89c4\u6a21\u751f\u4ea7\u4f7f\u7528 6 2.7.1 bigfixes of and enhancements of 2.7.0 \u4e0d\u5efa\u8bae\u5927\u89c4\u6a21\u751f\u4ea7\u4f7f\u7528 7 2.7.0 \u5f02\u6b65\u7f16\u7a0b\u6a21\u578b - \u6d88\u8d39\u7aef/\u63d0\u4f9b\u7aef\u5f02\u6b65 \u670d\u52a1\u6cbb\u7406\u89c4\u5219\u589e\u5f3a \u7b80\u5316\u7684\u6ce8\u518c\u6a21\u578b \u914d\u7f6e\u4e2d\u5fc3\u3001\u5143\u6570\u636e\u4e2d\u5fc3 package \u91cd\u6784 https://github.com/apache/dubbo/releases/tag/dubbo-2.7.0 beta \u7248\u672c\uff0c2.6.x \u91cd\u6784\u540e\u9996\u4e2a\u7248\u672c","title":"2.7.x \u7248\u672c"},{"location":"user/new-features-in-a-glance/#26x","text":"\u7248\u672c \u91cd\u8981\u529f\u80fd \u5347\u7ea7\u5efa\u8bae 1 2.6.x bugfix \u5efa\u8bae\u6301\u7eed\u5347\u7ea7\u6700\u65b0\u7248\u672c\uff0c\u6240\u6709\u7248\u672c\u751f\u4ea7\u53ef\u7528 2 2.5.x \u505c\u6b62\u7ef4\u62a4 \u5efa\u8bae\u5347\u7ea7\u6700\u65b0 2.6.x \u7248\u672c 3 2.4.x \u53ca\u4e4b\u524d \u505c\u6b62\u7ef4\u62a4 \u5efa\u8bae\u5347\u7ea7\u6700\u65b0 2.6.x \u7248\u672c","title":"2.6.x \u53ca\u4e4b\u524d\u7248\u672c"},{"location":"user/new-features-in-a-glance/#_2","text":"Dubbo \u4e91\u539f\u751f\u8ba1\u5212\uff08\u656c\u8bf7\u671f\u5f85...\uff09 Kubernetes Native Service Discovery\uff08\u656c\u8bf7\u671f\u5f85...\uff09 gRPC (HTTP/2) \u534f\u8bae \u4f7f\u7528 Protobuf \u5b9a\u4e49 Dubbo \u670d\u52a1 TLS \u5b89\u5168\u4f20\u8f93 \u5b9e\u4f8b\u7ea7\u670d\u52a1\u53d1\u73b0 \u670d\u52a1\u9274\u6743 \u6027\u80fd\u4f18\u5316 \u8c03\u7528\u94fe\u8def\u63d0\u5347 30% \u6d88\u8d39\u7aef\u7ebf\u7a0b\u6a21\u578b \u5730\u5740\u63a8\u9001\u94fe\u8def","title":"\u503c\u5f97\u5173\u6ce8\u7684\u65b0\u7279\u6027"},{"location":"user/new-features-in-a-glance/#_3","text":"\u4ece 2019 \u5230 2020\uff0cApache Dubbo \u5e74\u5ea6\u603b\u7ed3 Dubbo 2.7.5 \u91cc\u7a0b\u7891\u7248\u672c\u53d1\u5e03 Dubbo \u5728\u534f\u8bae\u4e0e\u591a\u8bed\u8a00\u65b9\u5411\u7684\u63a2\u7d22\uff1a\u652f\u6301 gRPC\u3001Protobuf","title":"\u70ed\u95e8\u6587\u7ae0\u5217\u8868"},{"location":"user/perf-test/","text":"\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a \u6d4b\u8bd5\u8bf4\u660e \u672c\u6b21\u6027\u80fd\u6d4b\u8bd5\uff0c\u6d4b\u8bd5\u4e86 dubbo 2.0 \u6240\u6709\u652f\u6301\u7684\u534f\u8bae\u5728\u4e0d\u540c\u5927\u5c0f\u548c\u6570\u636e\u7c7b\u578b\u4e0b\u7684\u8868\u73b0\uff0c\u5e76\u4e0e dubbo 1.0 \u8fdb\u884c\u4e86\u5bf9\u6bd4\u3002 \u6574\u4f53\u6027\u80fd\u76f8\u6bd4 1.0 \u6709\u4e86\u63d0\u5347\uff0c\u5e73\u5747\u63d0\u5347 10%\uff0c\u4f7f\u7528 dubbo 2.0 \u65b0\u589e\u7684 dubbo \u5e8f\u5217\u5316\u8fd8\u80fd\u83b7\u5f97 10%~50% \u7684\u6027\u80fd\u63d0\u5347\uff0c\u8be6\u89c1\u4e0b\u9762\u7684\u6027\u80fd\u6570\u636e\u3002 \u7a33\u5b9a\u6027\u6d4b\u8bd5\u4e2d\u7531\u4e8e\u5c06\u5e95\u5c42\u901a\u4fe1\u6846\u67b6\u4ece mina \u6362\u6210 netty\uff0cold \u533a\u5bf9\u8c61\u7684\u589e\u957f\u5927\u5927\u51cf\u5c11\uff0c50 \u5c0f\u65f6\u8fd0\u884c\uff0c\u589e\u957f\u4e0d\u5230 200m\uff0c\u65e0 fullgc\u3002 \u5b58\u5728\u7684\u95ee\u9898\uff1a\u5728 50k \u6570\u636e\u7684\u65f6\u5019 2.0 \u6027\u80fd\u4e0d\u5982 1.0\uff0c\u6000\u7591\u53ef\u80fd\u662f\u7f13\u51b2\u533a\u8bbe\u7f6e\u7684\u95ee\u9898\uff0c\u4e0b\u7248\u672c\u4f1a\u8fdb\u4e00\u6b65\u786e\u8ba4\u3002 \u6d4b\u8bd5\u73af\u5883 \u786c\u4ef6\u90e8\u7f72\u4e0e\u53c2\u6570\u8c03\u6574 \u673a\u578b CPU \u5185\u5b58 \u7f51\u7edc \u78c1\u76d8 \u5185\u6838 Tecal BH620 model name : Intel(R) Xeon(R) CPU E5520 @ 2.27GHz cache size : 8192 KB processor_count : 16 Total System Memory: 6G Hardware Memory Info: Size: 4096MB eth0: Link is up at 1000 Mbps, full duplex. peth0: Link is up at 1000 Mbps, full duplex. /dev/sda: 597.9 GB 2.6.18-128.el5xen x86_64 \u8f6f\u4ef6\u67b6\u6784 \u8f6f\u4ef6\u540d\u79f0\u53ca\u7248\u672c \u5173\u952e\u53c2\u6570 java version \"1.6.0_18\" Java(TM) SE Runtime Environment (build 1.6.0_18-b07) Java HotSpot(TM) 64-Bit Server VM (build 16.0-b13, mixed mode) -server -Xmx2g -Xms2g -Xmn256m -XX:PermSize=128m -Xss256k -XX:+DisableExplicitGC -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled -XX:+UseCMSCompactAtFullCollection -XX:LargePageSizeInBytes=128m -XX:+UseFastAccessorMethods -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 jboss-4.0.5.GA httpd-2.0.61 KeepAlive On MaxKeepAliveRequests 100000 KeepAliveTimeout 180 MaxRequestsPerChild 1000000 StartServers 5 MaxClients 1024 MinSpareThreads 25 MaxSpareThreads 75 ThreadsPerChild 64 ThreadLimit 128 ServerLimit 16 \u6d4b\u8bd5\u76ee\u7684 \u671f\u671b\u6027\u80fd\u6307\u6807(\u91cf\u5316) \u573a\u666f\u540d\u79f0 \u5bf9\u5e94\u6307\u6807\u540d\u79f0 \u671f\u671b\u503c\u8303\u56f4 \u5b9e\u9645\u503c \u662f\u5426\u6ee1\u8db3\u671f\u671b(\u662f/\u5426) 1k\u6570\u636e \u54cd\u5e94\u65f6\u95f4 0.9ms 0.79ms \u662f 1k\u6570\u636e TPS 10000 11994 \u662f \u671f\u671b\u8fd0\u884c\u72b6\u51b5(\u975e\u91cf\u5316\uff0c\u53ef\u9009) 2.0 \u6027\u80fd\u4e0d\u4f4e\u4e8e 1.0, 2.0 \u548c 1.0 \u4e92\u8c03\u7528\u7684\u6027\u80fd\u65e0\u660e\u663e\u4e0b\u964d\u3002 \u9664\u4e86 50k string \u5176\u4f59\u7686\u901a\u8fc7 JVM \u5185\u5b58\u8fd0\u884c\u7a33\u5b9a\uff0c\u65e0 OOM\uff0c\u5806\u5185\u5b58\u4e2d\u65e0\u4e0d\u5408\u7406\u7684\u5927\u5bf9\u8c61\u7684\u5360\u7528\u3002\u901a\u8fc7 CPU\u3001\u5185\u5b58\u3001\u7f51\u7edc\u3001\u78c1\u76d8\u3001\u6587\u4ef6\u53e5\u67c4\u5360\u7528\u5e73\u7a33\u3002\u901a\u8fc7 \u65e0\u9891\u7e41\u7ebf\u7a0b\u9501\uff0c\u7ebf\u7a0b\u6570\u5e73\u7a33\u3002\u901a\u8fc7 \u4e1a\u52a1\u7ebf\u7a0b\u8d1f\u8f7d\u5747\u8861\u3002\u901a\u8fc7 \u6d4b\u8bd5\u811a\u672c \u6027\u80fd\u6d4b\u8bd5\u573a\u666f\uff0810 \u5e76\u53d1\uff09 \u4f20\u5165 1k String\uff0c\u4e0d\u505a\u4efb\u4f55\u5904\u7406\uff0c\u539f\u6837\u8fd4\u56de \u4f20\u5165 50k String\uff0c\u4e0d\u505a\u4efb\u4f55\u5904\u7406\uff0c\u539f\u6837\u8fd4\u56de \u4f20\u5165 200k String\uff0c\u4e0d\u505a\u4efb\u4f55\u5904\u7406\uff0c\u539f\u6837\u8fd4\u56de \u4f20\u5165 1k POJO\uff08\u5d4c\u5957\u7684\u590d\u6742 person \u5bf9\u8c61\uff09\uff0c\u4e0d\u505a\u4efb\u4f55\u5904\u7406\uff0c\u539f\u6837\u8fd4\u56de \u4e0a\u8ff0\u573a\u666f\u5728 dubbo 1.0, dubbo 2.0(hessian2\u5e8f\u5217\u5316), dubbo 2.0(dubbo\u5e8f\u5217\u5316), rmi, hessian 3.2.0, http(json\u5e8f\u5217\u5316) \u8fdb\u884c 10 \u5206\u949f\u7684\u6027\u80fd\u6d4b\u8bd5\u3002\u4e3b\u8981\u8003\u5bdf\u5e8f\u5217\u5316\u548c\u7f51\u7edc IO \u7684\u6027\u80fd\uff0c\u56e0\u6b64\u670d\u52a1\u7aef\u65e0\u4efb\u4f55\u4e1a\u52a1\u903b\u8f91\u3002\u53d6 10 \u5e76\u53d1\u662f\u8003\u8651\u5230 http \u534f\u8bae\u5728\u9ad8\u5e76\u53d1\u4e0b\u5bf9 CPU \u7684\u4f7f\u7528\u7387\u8f83\u9ad8\u53ef\u80fd\u4f1a\u5148\u6253\u5230\u74f6\u9888\u3002 0. \u5e76\u53d1\u573a\u666f\uff0820 \u5e76\u53d1\uff09 \u4f20\u5165 1k String\uff0c\u5728\u670d\u52a1\u5668\u6bb5\u5faa\u73af 1w \u6b21\uff0c\u6bcf\u6b21\u91cd\u65b0\u751f\u6210\u4e00\u4e2a\u968f\u673a\u6570\u7136\u540e\u8fdb\u884c\u62fc\u88c5\u3002\u8003\u5bdf\u4e1a\u52a1\u7ebf\u7a0b\u662f\u5426\u80fd\u591f\u5206\u914d\u5230\u6bcf\u4e2a CPU \u4e0a\u3002 0. \u7a33\u5b9a\u6027\u573a\u666f\uff0820 \u5e76\u53d1\uff09 \u540c\u65f6\u8c03\u7528 1 \u4e2a\u53c2\u6570\u4e3a String\uff085k\uff09\u65b9\u6cd5\uff0c1 \u4e2a\u53c2\u6570\u4e3a person \u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c1 \u4e2a\u53c2\u6570\u4e3a map\uff08\u503c\u4e3a 3 \u4e2a person\uff09\u7684\u65b9\u6cd5\uff0c\u6301\u7eed\u8fd0\u884c 50 \u5c0f\u65f6\u3002 0. \u9ad8\u538b\u529b\u573a\u666f\uff0820 \u5e76\u53d1\uff09 \u5728\u7a33\u5b9a\u6027\u573a\u666f\u7684\u57fa\u7840\u4e0a\uff0c\u5c06\u63d0\u4f9b\u8005\u548c\u6d88\u8d39\u8005\u5e03\u7f6e\u6210\u5747\u4e3a 2 \u53f0\uff08\u4e00\u53f0\u673a\u5668 2 \u4e2a\u5b9e\u4f8b\uff09\uff0c\u4e14 String \u7684\u53c2\u6570\u4ece 20byte \u5230 200k\uff0c\u6bcf\u9694 10 \u5206\u949f\u968f\u673a\u53d8\u6362\u3002 \u6d4b\u8bd5\u7ed3\u679c \u573a\u666f\u540d\u79f0\uff1aPOJO \u573a\u666f | TPS\u6210\u529f\u5e73\u5747\u503c | \u54cd\u5e94\u65f6\u95f4\u6210\u529f\u5e73\u5747\u503c(ms) ------------- | ------------- | ------------- dubbo1 (hessian2\u5e8f\u5217\u5316+mina)| 10813.5 | 0.9 dubbo2 (hessian2\u5e8f\u5217\u5316+netty) | 11994 | 0.79 dubbo2 (dubbo\u5e8f\u5217\u5316+netty) | 13620 | 0.67 rmi | 2461.79 | 4 hessian | 2417.7 | 4.1 http\uff08json\u5e8f\u5217\u5316\uff09| 8179.08 | 1.15 2.0\u548c1.0\u9ed8\u8ba4\u5bf9\u6bd4\u767e\u5206\u6bd4 | 10.92 | -12.22 dubbo\u5e8f\u5217\u5316\u76f8\u6bd4hessian2\u5e8f\u5217\u5316\u767e\u5206\u6bd4 | 13.56 | -15.19 POJO TPS POJO Response \u573a\u666f\u540d\u79f0\uff1a1k string \u573a\u666f | TPS\u6210\u529f\u5e73\u5747\u503c | \u54cd\u5e94\u65f6\u95f4\u6210\u529f\u5e73\u5747\u503c(ms) ------------- | ------------- | ------------- dubbo1\uff08hessian2\u5e8f\u5217\u5316+mina\uff09| 11940 | 0.8 dubbo2 (hessian2\u5e8f\u5217\u5316+netty) | 14402 | 0.64 dubbo2 (dubbo\u5e8f\u5217\u5316+netty) | 15096 | 0.6 rmi | 11136.02 | 0.81 hessian | 11426.83 | 0.79 http\uff08json\u5e8f\u5217\u5316\uff09| 8919.27 | 1.04 2.0\u548c1.0\u9ed8\u8ba4\u5bf9\u6bd4\u767e\u5206\u6bd4 | 20.62 | -20.00 dubbo\u5e8f\u5217\u5316\u76f8\u6bd4hessian2\u5e8f\u5217\u5316\u767e\u5206\u6bd4 | 4.82 | -6.25 1k TPS 1k Response \u573a\u666f\u540d\u79f0\uff1a50k string \u573a\u666f | TPS\u6210\u529f\u5e73\u5747\u503c | \u54cd\u5e94\u65f6\u95f4\u6210\u529f\u5e73\u5747\u503c(ms) ------------- | ------------- | ------------- dubbo1\uff08hessian2\u5e8f\u5217\u5316+mina | 1962.7 | 5.1 dubbo2 (hessian2\u5e8f\u5217\u5316+netty) | 1293 | 5.03 dubbo2 (dubbo\u5e8f\u5217\u5316+netty) | 1966 | 7.68 rmi | 3349.88 | 2.9 hessian | 1925.33 | 5.13 http\uff08json\u5e8f\u5217\u5316\uff09| 3247.1 | 3 2.0\u548c1.0\u9ed8\u8ba4\u5bf9\u6bd4\u767e\u5206\u6bd4 | -34.12 | -1.37 dubbo\u5e8f\u5217\u5316\u76f8\u6bd4hessian2\u5e8f\u5217\u5316\u767e\u5206\u6bd4 | 52.05 | 52.68 50K TPS 50K Response \u573a\u666f\u540d\u79f0\uff1a200k string \u573a\u666f | TPS\u6210\u529f\u5e73\u5747\u503c | \u54cd\u5e94\u65f6\u95f4\u6210\u529f\u5e73\u5747\u503c(ms) ------------- | ------------- | ------------- dubbo1\uff08hessian2\u5e8f\u5217\u5316+mina\uff09| 324.2 | 30.8 dubbo2 (hessian2\u5e8f\u5217\u5316+netty) | 362.92 | 27.49 dubbo2 (dubbo\u5e8f\u5217\u5316+netty) | 569.5 | 17.51 rmi | 1031.28 | 9.61 hessian | 628.06 | 15.83 http\uff08json\u5e8f\u5217\u5316\uff09| 1011.97 | 9.79 2.0\u548c1.0\u9ed8\u8ba4\u5bf9\u6bd4\u767e\u5206\u6bd4 | 11.94 | -10.75 dubbo\u5e8f\u5217\u5316\u76f8\u6bd4hessian2\u5e8f\u5217\u5316\u767e\u5206\u6bd4 | 56.92 | -36.30 200K TPS 200K Response \u6d4b\u8bd5\u5206\u6790 \u6027\u80fd\u5206\u6790\u8bc4\u4f30 Dubbo 2.0 \u7684\u6027\u80fd\u6d4b\u8bd5\u7ed3\u8bba\u4e3a\u901a\u8fc7\uff0c\u4ece\u6027\u80fd\u3001\u5185\u5b58\u5360\u7528\u548c\u7a33\u5b9a\u6027\u4e0a\u90fd\u6709\u4e86\u63d0\u9ad8\u548c\u6539\u8fdb\u3002\u7531\u5176\u662f\u5185\u5b58\u7ba1\u7406\u7531\u4e8e\u5c06 mina \u6362\u6210netty\uff0c\u5927\u5927\u51cf\u5c11\u4e86 1.0 \u7248\u672c\u5728\u9ad8\u5e76\u53d1\u5927\u6570\u636e\u4e0b\u7684\u5185\u5b58\u5927\u952f\u9f7f\u3002 \u6027\u80fd\u5bf9\u6bd4\u5206\u6790(\u65b0\u65e7\u73af\u5883\u3001\u4e0d\u540c\u6570\u636e\u91cf\u7ea7\u7b49) Dubbo 2.0 \u76f8\u6bd4\u8f83Dubbo 1.0\uff08\u9ed8\u8ba4\u4f7f\u7528\u7684\u90fd\u662f hessian2 \u5e8f\u5217\u5316\uff09\u6027\u80fd\u5747\u6709\u63d0\u5347\uff08\u9664\u4e8650k String\uff09\uff0c\u8be6\u89c1\u7b2c\u4e94\u7ae0\u7684\u6027\u80fd\u6570\u636e\u3002 \u51fa\u4e8e\u517c\u5bb9\u6027\u8003\u8651\u9ed8\u8ba4\u7684\u5e8f\u5217\u5316\u65b9\u5f0f\u548c 1.0 \u4fdd\u6301\u4e00\u81f4\u4f7f\u7528 hessian2\uff0c\u5982\u5bf9\u6027\u80fd\u6709\u66f4\u9ad8\u8981\u6c42\u53ef\u4ee5\u4f7f\u7528 dubbo \u5e8f\u5217\u5316\uff0c\u7531\u5176\u662f\u5728\u5904\u7406\u590d\u6742\u5bf9\u8c61\u65f6\uff0c\u5728\u5927\u6570\u636e\u91cf\u4e0b\u80fd\u83b7\u5f97 50% \u7684\u63d0\u5347\uff08\u4f46\u6b64\u65f6\u5df2\u4e0d\u5efa\u8bae\u4f7f\u7528 Dubbo \u534f\u8bae\uff09\u3002 Dubbo \u7684\u8bbe\u8ba1\u76ee\u7684\u662f\u4e3a\u4e86\u6ee1\u8db3\u9ad8\u5e76\u53d1\u5c0f\u6570\u636e\u91cf\u7684 rpc \u8c03\u7528\uff0c\u5728\u5927\u6570\u636e\u91cf\u4e0b\u7684\u6027\u80fd\u8868\u73b0\u5e76\u4e0d\u597d\uff0c\u5efa\u8bae\u4f7f\u7528 rmi \u6216 http \u534f\u8bae\u3002 \u6d4b\u8bd5\u5c40\u9650\u6027\u5206\u6790\uff08\u53ef\u9009\uff09 \u672c\u6b21\u6027\u80fd\u6d4b\u8bd5\u8003\u5bdf\u7684\u662f dubbo \u672c\u8eab\u7684\u6027\u80fd\uff0c\u5b9e\u9645\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u7684\u6027\u80fd\u6709\u5f85\u5e94\u7528\u6765\u9a8c\u8bc1\u3002 \u7531\u4e8e dubbo \u672c\u8eab\u7684\u6027\u80fd\u5360\u7528\u90fd\u5728\u6beb\u79d2\u7ea7\uff0c\u5360\u7684\u57fa\u6570\u5f88\u5c0f\uff0c\u6027\u80fd\u63d0\u5347\u53ef\u80fd\u5bf9\u5e94\u7528\u6574\u4f53\u7684\u6027\u80fd\u53d8\u5316\u4e0d\u5927\u3002 \u7531\u4e8e\u90ae\u4ef6\u7bc7\u5e45\u6240\u9650\u6ca1\u6709\u5217\u51fa\u6240\u6709\u7684\u76d1\u63a7\u56fe\uff0c\u5982\u9700\u83b7\u5f97\u53ef\u5728\u5927\u529b\u795e\u5e73\u53f0\u4e0a\u67e5\u8be2\u3002","title":"\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a"},{"location":"user/perf-test/#_1","text":"","title":"\u6027\u80fd\u6d4b\u8bd5\u62a5\u544a"},{"location":"user/perf-test/#_2","text":"\u672c\u6b21\u6027\u80fd\u6d4b\u8bd5\uff0c\u6d4b\u8bd5\u4e86 dubbo 2.0 \u6240\u6709\u652f\u6301\u7684\u534f\u8bae\u5728\u4e0d\u540c\u5927\u5c0f\u548c\u6570\u636e\u7c7b\u578b\u4e0b\u7684\u8868\u73b0\uff0c\u5e76\u4e0e dubbo 1.0 \u8fdb\u884c\u4e86\u5bf9\u6bd4\u3002 \u6574\u4f53\u6027\u80fd\u76f8\u6bd4 1.0 \u6709\u4e86\u63d0\u5347\uff0c\u5e73\u5747\u63d0\u5347 10%\uff0c\u4f7f\u7528 dubbo 2.0 \u65b0\u589e\u7684 dubbo \u5e8f\u5217\u5316\u8fd8\u80fd\u83b7\u5f97 10%~50% \u7684\u6027\u80fd\u63d0\u5347\uff0c\u8be6\u89c1\u4e0b\u9762\u7684\u6027\u80fd\u6570\u636e\u3002 \u7a33\u5b9a\u6027\u6d4b\u8bd5\u4e2d\u7531\u4e8e\u5c06\u5e95\u5c42\u901a\u4fe1\u6846\u67b6\u4ece mina \u6362\u6210 netty\uff0cold \u533a\u5bf9\u8c61\u7684\u589e\u957f\u5927\u5927\u51cf\u5c11\uff0c50 \u5c0f\u65f6\u8fd0\u884c\uff0c\u589e\u957f\u4e0d\u5230 200m\uff0c\u65e0 fullgc\u3002 \u5b58\u5728\u7684\u95ee\u9898\uff1a\u5728 50k \u6570\u636e\u7684\u65f6\u5019 2.0 \u6027\u80fd\u4e0d\u5982 1.0\uff0c\u6000\u7591\u53ef\u80fd\u662f\u7f13\u51b2\u533a\u8bbe\u7f6e\u7684\u95ee\u9898\uff0c\u4e0b\u7248\u672c\u4f1a\u8fdb\u4e00\u6b65\u786e\u8ba4\u3002","title":"\u6d4b\u8bd5\u8bf4\u660e"},{"location":"user/perf-test/#_3","text":"","title":"\u6d4b\u8bd5\u73af\u5883"},{"location":"user/perf-test/#_4","text":"\u673a\u578b CPU \u5185\u5b58 \u7f51\u7edc \u78c1\u76d8 \u5185\u6838 Tecal BH620 model name : Intel(R) Xeon(R) CPU E5520 @ 2.27GHz cache size : 8192 KB processor_count : 16 Total System Memory: 6G Hardware Memory Info: Size: 4096MB eth0: Link is up at 1000 Mbps, full duplex. peth0: Link is up at 1000 Mbps, full duplex. /dev/sda: 597.9 GB 2.6.18-128.el5xen x86_64","title":"\u786c\u4ef6\u90e8\u7f72\u4e0e\u53c2\u6570\u8c03\u6574"},{"location":"user/perf-test/#_5","text":"\u8f6f\u4ef6\u540d\u79f0\u53ca\u7248\u672c \u5173\u952e\u53c2\u6570 java version \"1.6.0_18\" Java(TM) SE Runtime Environment (build 1.6.0_18-b07) Java HotSpot(TM) 64-Bit Server VM (build 16.0-b13, mixed mode) -server -Xmx2g -Xms2g -Xmn256m -XX:PermSize=128m -Xss256k -XX:+DisableExplicitGC -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled -XX:+UseCMSCompactAtFullCollection -XX:LargePageSizeInBytes=128m -XX:+UseFastAccessorMethods -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 jboss-4.0.5.GA httpd-2.0.61 KeepAlive On MaxKeepAliveRequests 100000 KeepAliveTimeout 180 MaxRequestsPerChild 1000000 StartServers 5 MaxClients 1024 MinSpareThreads 25 MaxSpareThreads 75 ThreadsPerChild 64 ThreadLimit 128 ServerLimit 16","title":"\u8f6f\u4ef6\u67b6\u6784"},{"location":"user/perf-test/#_6","text":"","title":"\u6d4b\u8bd5\u76ee\u7684"},{"location":"user/perf-test/#_7","text":"\u573a\u666f\u540d\u79f0 \u5bf9\u5e94\u6307\u6807\u540d\u79f0 \u671f\u671b\u503c\u8303\u56f4 \u5b9e\u9645\u503c \u662f\u5426\u6ee1\u8db3\u671f\u671b(\u662f/\u5426) 1k\u6570\u636e \u54cd\u5e94\u65f6\u95f4 0.9ms 0.79ms \u662f 1k\u6570\u636e TPS 10000 11994 \u662f","title":"\u671f\u671b\u6027\u80fd\u6307\u6807(\u91cf\u5316)"},{"location":"user/perf-test/#_8","text":"2.0 \u6027\u80fd\u4e0d\u4f4e\u4e8e 1.0, 2.0 \u548c 1.0 \u4e92\u8c03\u7528\u7684\u6027\u80fd\u65e0\u660e\u663e\u4e0b\u964d\u3002 \u9664\u4e86 50k string \u5176\u4f59\u7686\u901a\u8fc7 JVM \u5185\u5b58\u8fd0\u884c\u7a33\u5b9a\uff0c\u65e0 OOM\uff0c\u5806\u5185\u5b58\u4e2d\u65e0\u4e0d\u5408\u7406\u7684\u5927\u5bf9\u8c61\u7684\u5360\u7528\u3002\u901a\u8fc7 CPU\u3001\u5185\u5b58\u3001\u7f51\u7edc\u3001\u78c1\u76d8\u3001\u6587\u4ef6\u53e5\u67c4\u5360\u7528\u5e73\u7a33\u3002\u901a\u8fc7 \u65e0\u9891\u7e41\u7ebf\u7a0b\u9501\uff0c\u7ebf\u7a0b\u6570\u5e73\u7a33\u3002\u901a\u8fc7 \u4e1a\u52a1\u7ebf\u7a0b\u8d1f\u8f7d\u5747\u8861\u3002\u901a\u8fc7","title":"\u671f\u671b\u8fd0\u884c\u72b6\u51b5(\u975e\u91cf\u5316\uff0c\u53ef\u9009)"},{"location":"user/perf-test/#_9","text":"\u6027\u80fd\u6d4b\u8bd5\u573a\u666f\uff0810 \u5e76\u53d1\uff09 \u4f20\u5165 1k String\uff0c\u4e0d\u505a\u4efb\u4f55\u5904\u7406\uff0c\u539f\u6837\u8fd4\u56de \u4f20\u5165 50k String\uff0c\u4e0d\u505a\u4efb\u4f55\u5904\u7406\uff0c\u539f\u6837\u8fd4\u56de \u4f20\u5165 200k String\uff0c\u4e0d\u505a\u4efb\u4f55\u5904\u7406\uff0c\u539f\u6837\u8fd4\u56de \u4f20\u5165 1k POJO\uff08\u5d4c\u5957\u7684\u590d\u6742 person \u5bf9\u8c61\uff09\uff0c\u4e0d\u505a\u4efb\u4f55\u5904\u7406\uff0c\u539f\u6837\u8fd4\u56de \u4e0a\u8ff0\u573a\u666f\u5728 dubbo 1.0, dubbo 2.0(hessian2\u5e8f\u5217\u5316), dubbo 2.0(dubbo\u5e8f\u5217\u5316), rmi, hessian 3.2.0, http(json\u5e8f\u5217\u5316) \u8fdb\u884c 10 \u5206\u949f\u7684\u6027\u80fd\u6d4b\u8bd5\u3002\u4e3b\u8981\u8003\u5bdf\u5e8f\u5217\u5316\u548c\u7f51\u7edc IO \u7684\u6027\u80fd\uff0c\u56e0\u6b64\u670d\u52a1\u7aef\u65e0\u4efb\u4f55\u4e1a\u52a1\u903b\u8f91\u3002\u53d6 10 \u5e76\u53d1\u662f\u8003\u8651\u5230 http \u534f\u8bae\u5728\u9ad8\u5e76\u53d1\u4e0b\u5bf9 CPU \u7684\u4f7f\u7528\u7387\u8f83\u9ad8\u53ef\u80fd\u4f1a\u5148\u6253\u5230\u74f6\u9888\u3002 0. \u5e76\u53d1\u573a\u666f\uff0820 \u5e76\u53d1\uff09 \u4f20\u5165 1k String\uff0c\u5728\u670d\u52a1\u5668\u6bb5\u5faa\u73af 1w \u6b21\uff0c\u6bcf\u6b21\u91cd\u65b0\u751f\u6210\u4e00\u4e2a\u968f\u673a\u6570\u7136\u540e\u8fdb\u884c\u62fc\u88c5\u3002\u8003\u5bdf\u4e1a\u52a1\u7ebf\u7a0b\u662f\u5426\u80fd\u591f\u5206\u914d\u5230\u6bcf\u4e2a CPU \u4e0a\u3002 0. \u7a33\u5b9a\u6027\u573a\u666f\uff0820 \u5e76\u53d1\uff09 \u540c\u65f6\u8c03\u7528 1 \u4e2a\u53c2\u6570\u4e3a String\uff085k\uff09\u65b9\u6cd5\uff0c1 \u4e2a\u53c2\u6570\u4e3a person \u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c1 \u4e2a\u53c2\u6570\u4e3a map\uff08\u503c\u4e3a 3 \u4e2a person\uff09\u7684\u65b9\u6cd5\uff0c\u6301\u7eed\u8fd0\u884c 50 \u5c0f\u65f6\u3002 0. \u9ad8\u538b\u529b\u573a\u666f\uff0820 \u5e76\u53d1\uff09 \u5728\u7a33\u5b9a\u6027\u573a\u666f\u7684\u57fa\u7840\u4e0a\uff0c\u5c06\u63d0\u4f9b\u8005\u548c\u6d88\u8d39\u8005\u5e03\u7f6e\u6210\u5747\u4e3a 2 \u53f0\uff08\u4e00\u53f0\u673a\u5668 2 \u4e2a\u5b9e\u4f8b\uff09\uff0c\u4e14 String \u7684\u53c2\u6570\u4ece 20byte \u5230 200k\uff0c\u6bcf\u9694 10 \u5206\u949f\u968f\u673a\u53d8\u6362\u3002","title":"\u6d4b\u8bd5\u811a\u672c"},{"location":"user/perf-test/#_10","text":"","title":"\u6d4b\u8bd5\u7ed3\u679c"},{"location":"user/perf-test/#pojo","text":"| TPS\u6210\u529f\u5e73\u5747\u503c | \u54cd\u5e94\u65f6\u95f4\u6210\u529f\u5e73\u5747\u503c(ms) ------------- | ------------- | ------------- dubbo1 (hessian2\u5e8f\u5217\u5316+mina)| 10813.5 | 0.9 dubbo2 (hessian2\u5e8f\u5217\u5316+netty) | 11994 | 0.79 dubbo2 (dubbo\u5e8f\u5217\u5316+netty) | 13620 | 0.67 rmi | 2461.79 | 4 hessian | 2417.7 | 4.1 http\uff08json\u5e8f\u5217\u5316\uff09| 8179.08 | 1.15 2.0\u548c1.0\u9ed8\u8ba4\u5bf9\u6bd4\u767e\u5206\u6bd4 | 10.92 | -12.22 dubbo\u5e8f\u5217\u5316\u76f8\u6bd4hessian2\u5e8f\u5217\u5316\u767e\u5206\u6bd4 | 13.56 | -15.19 POJO TPS POJO Response","title":"\u573a\u666f\u540d\u79f0\uff1aPOJO \u573a\u666f"},{"location":"user/perf-test/#1k-string","text":"| TPS\u6210\u529f\u5e73\u5747\u503c | \u54cd\u5e94\u65f6\u95f4\u6210\u529f\u5e73\u5747\u503c(ms) ------------- | ------------- | ------------- dubbo1\uff08hessian2\u5e8f\u5217\u5316+mina\uff09| 11940 | 0.8 dubbo2 (hessian2\u5e8f\u5217\u5316+netty) | 14402 | 0.64 dubbo2 (dubbo\u5e8f\u5217\u5316+netty) | 15096 | 0.6 rmi | 11136.02 | 0.81 hessian | 11426.83 | 0.79 http\uff08json\u5e8f\u5217\u5316\uff09| 8919.27 | 1.04 2.0\u548c1.0\u9ed8\u8ba4\u5bf9\u6bd4\u767e\u5206\u6bd4 | 20.62 | -20.00 dubbo\u5e8f\u5217\u5316\u76f8\u6bd4hessian2\u5e8f\u5217\u5316\u767e\u5206\u6bd4 | 4.82 | -6.25 1k TPS 1k Response","title":"\u573a\u666f\u540d\u79f0\uff1a1k string \u573a\u666f"},{"location":"user/perf-test/#50k-string","text":"| TPS\u6210\u529f\u5e73\u5747\u503c | \u54cd\u5e94\u65f6\u95f4\u6210\u529f\u5e73\u5747\u503c(ms) ------------- | ------------- | ------------- dubbo1\uff08hessian2\u5e8f\u5217\u5316+mina | 1962.7 | 5.1 dubbo2 (hessian2\u5e8f\u5217\u5316+netty) | 1293 | 5.03 dubbo2 (dubbo\u5e8f\u5217\u5316+netty) | 1966 | 7.68 rmi | 3349.88 | 2.9 hessian | 1925.33 | 5.13 http\uff08json\u5e8f\u5217\u5316\uff09| 3247.1 | 3 2.0\u548c1.0\u9ed8\u8ba4\u5bf9\u6bd4\u767e\u5206\u6bd4 | -34.12 | -1.37 dubbo\u5e8f\u5217\u5316\u76f8\u6bd4hessian2\u5e8f\u5217\u5316\u767e\u5206\u6bd4 | 52.05 | 52.68 50K TPS 50K Response","title":"\u573a\u666f\u540d\u79f0\uff1a50k string \u573a\u666f"},{"location":"user/perf-test/#200k-string","text":"| TPS\u6210\u529f\u5e73\u5747\u503c | \u54cd\u5e94\u65f6\u95f4\u6210\u529f\u5e73\u5747\u503c(ms) ------------- | ------------- | ------------- dubbo1\uff08hessian2\u5e8f\u5217\u5316+mina\uff09| 324.2 | 30.8 dubbo2 (hessian2\u5e8f\u5217\u5316+netty) | 362.92 | 27.49 dubbo2 (dubbo\u5e8f\u5217\u5316+netty) | 569.5 | 17.51 rmi | 1031.28 | 9.61 hessian | 628.06 | 15.83 http\uff08json\u5e8f\u5217\u5316\uff09| 1011.97 | 9.79 2.0\u548c1.0\u9ed8\u8ba4\u5bf9\u6bd4\u767e\u5206\u6bd4 | 11.94 | -10.75 dubbo\u5e8f\u5217\u5316\u76f8\u6bd4hessian2\u5e8f\u5217\u5316\u767e\u5206\u6bd4 | 56.92 | -36.30 200K TPS 200K Response","title":"\u573a\u666f\u540d\u79f0\uff1a200k string \u573a\u666f"},{"location":"user/perf-test/#_11","text":"","title":"\u6d4b\u8bd5\u5206\u6790"},{"location":"user/perf-test/#_12","text":"Dubbo 2.0 \u7684\u6027\u80fd\u6d4b\u8bd5\u7ed3\u8bba\u4e3a\u901a\u8fc7\uff0c\u4ece\u6027\u80fd\u3001\u5185\u5b58\u5360\u7528\u548c\u7a33\u5b9a\u6027\u4e0a\u90fd\u6709\u4e86\u63d0\u9ad8\u548c\u6539\u8fdb\u3002\u7531\u5176\u662f\u5185\u5b58\u7ba1\u7406\u7531\u4e8e\u5c06 mina \u6362\u6210netty\uff0c\u5927\u5927\u51cf\u5c11\u4e86 1.0 \u7248\u672c\u5728\u9ad8\u5e76\u53d1\u5927\u6570\u636e\u4e0b\u7684\u5185\u5b58\u5927\u952f\u9f7f\u3002","title":"\u6027\u80fd\u5206\u6790\u8bc4\u4f30"},{"location":"user/perf-test/#_13","text":"Dubbo 2.0 \u76f8\u6bd4\u8f83Dubbo 1.0\uff08\u9ed8\u8ba4\u4f7f\u7528\u7684\u90fd\u662f hessian2 \u5e8f\u5217\u5316\uff09\u6027\u80fd\u5747\u6709\u63d0\u5347\uff08\u9664\u4e8650k String\uff09\uff0c\u8be6\u89c1\u7b2c\u4e94\u7ae0\u7684\u6027\u80fd\u6570\u636e\u3002 \u51fa\u4e8e\u517c\u5bb9\u6027\u8003\u8651\u9ed8\u8ba4\u7684\u5e8f\u5217\u5316\u65b9\u5f0f\u548c 1.0 \u4fdd\u6301\u4e00\u81f4\u4f7f\u7528 hessian2\uff0c\u5982\u5bf9\u6027\u80fd\u6709\u66f4\u9ad8\u8981\u6c42\u53ef\u4ee5\u4f7f\u7528 dubbo \u5e8f\u5217\u5316\uff0c\u7531\u5176\u662f\u5728\u5904\u7406\u590d\u6742\u5bf9\u8c61\u65f6\uff0c\u5728\u5927\u6570\u636e\u91cf\u4e0b\u80fd\u83b7\u5f97 50% \u7684\u63d0\u5347\uff08\u4f46\u6b64\u65f6\u5df2\u4e0d\u5efa\u8bae\u4f7f\u7528 Dubbo \u534f\u8bae\uff09\u3002 Dubbo \u7684\u8bbe\u8ba1\u76ee\u7684\u662f\u4e3a\u4e86\u6ee1\u8db3\u9ad8\u5e76\u53d1\u5c0f\u6570\u636e\u91cf\u7684 rpc \u8c03\u7528\uff0c\u5728\u5927\u6570\u636e\u91cf\u4e0b\u7684\u6027\u80fd\u8868\u73b0\u5e76\u4e0d\u597d\uff0c\u5efa\u8bae\u4f7f\u7528 rmi \u6216 http \u534f\u8bae\u3002","title":"\u6027\u80fd\u5bf9\u6bd4\u5206\u6790(\u65b0\u65e7\u73af\u5883\u3001\u4e0d\u540c\u6570\u636e\u91cf\u7ea7\u7b49)"},{"location":"user/perf-test/#_14","text":"\u672c\u6b21\u6027\u80fd\u6d4b\u8bd5\u8003\u5bdf\u7684\u662f dubbo \u672c\u8eab\u7684\u6027\u80fd\uff0c\u5b9e\u9645\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u7684\u6027\u80fd\u6709\u5f85\u5e94\u7528\u6765\u9a8c\u8bc1\u3002 \u7531\u4e8e dubbo \u672c\u8eab\u7684\u6027\u80fd\u5360\u7528\u90fd\u5728\u6beb\u79d2\u7ea7\uff0c\u5360\u7684\u57fa\u6570\u5f88\u5c0f\uff0c\u6027\u80fd\u63d0\u5347\u53ef\u80fd\u5bf9\u5e94\u7528\u6574\u4f53\u7684\u6027\u80fd\u53d8\u5316\u4e0d\u5927\u3002 \u7531\u4e8e\u90ae\u4ef6\u7bc7\u5e45\u6240\u9650\u6ca1\u6709\u5217\u51fa\u6240\u6709\u7684\u76d1\u63a7\u56fe\uff0c\u5982\u9700\u83b7\u5f97\u53ef\u5728\u5927\u529b\u795e\u5e73\u53f0\u4e0a\u67e5\u8be2\u3002","title":"\u6d4b\u8bd5\u5c40\u9650\u6027\u5206\u6790\uff08\u53ef\u9009\uff09"},{"location":"user/quick-start/","text":"\u5feb\u901f\u542f\u52a8 Dubbo \u91c7\u7528\u5168 Spring \u914d\u7f6e\u65b9\u5f0f\uff0c\u900f\u660e\u5316\u63a5\u5165\u5e94\u7528\uff0c\u5bf9\u5e94\u7528\u6ca1\u6709\u4efb\u4f55 API \u4fb5\u5165\uff0c\u53ea\u9700\u7528 Spring \u52a0\u8f7d Dubbo \u7684\u914d\u7f6e\u5373\u53ef\uff0cDubbo \u57fa\u4e8e Spring \u7684 Schema \u6269\u5c55 \u8fdb\u884c\u52a0\u8f7d\u3002 \u5982\u679c\u4e0d\u60f3\u4f7f\u7528 Spring \u914d\u7f6e\uff0c\u53ef\u4ee5\u901a\u8fc7 API \u7684\u65b9\u5f0f \u8fdb\u884c\u8c03\u7528\u3002 \u670d\u52a1\u63d0\u4f9b\u8005 \u5b8c\u6574\u5b89\u88c5\u6b65\u9aa4\uff0c\u8bf7\u53c2\u89c1\uff1a \u793a\u4f8b\u63d0\u4f9b\u8005\u5b89\u88c5 \u5b9a\u4e49\u670d\u52a1\u63a5\u53e3 DemoService.java ^1 \uff1a package org.apache.dubbo.demo; public interface DemoService { String sayHello(String name); } \u5728\u670d\u52a1\u63d0\u4f9b\u65b9\u5b9e\u73b0\u63a5\u53e3 DemoServiceImpl.java ^2 \uff1a package org.apache.dubbo.demo.provider; import org.apache.dubbo.demo.DemoService; public class DemoServiceImpl implements DemoService { public String sayHello(String name) { return Hello + name; } } \u7528 Spring \u914d\u7f6e\u58f0\u660e\u66b4\u9732\u670d\u52a1 provider.xml\uff1a ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd !-- \u63d0\u4f9b\u65b9\u5e94\u7528\u4fe1\u606f\uff0c\u7528\u4e8e\u8ba1\u7b97\u4f9d\u8d56\u5173\u7cfb -- dubbo:application name= hello-world-app / !-- \u4f7f\u7528multicast\u5e7f\u64ad\u6ce8\u518c\u4e2d\u5fc3\u66b4\u9732\u670d\u52a1\u5730\u5740 -- dubbo:registry address= multicast://224.5.6.7:1234 / !-- \u7528dubbo\u534f\u8bae\u572820880\u7aef\u53e3\u66b4\u9732\u670d\u52a1 -- dubbo:protocol name= dubbo port= 20880 / !-- \u58f0\u660e\u9700\u8981\u66b4\u9732\u7684\u670d\u52a1\u63a5\u53e3 -- dubbo:service interface= org.apache.dubbo.demo.DemoService ref= demoService / !-- \u548c\u672c\u5730bean\u4e00\u6837\u5b9e\u73b0\u670d\u52a1 -- bean id= demoService class= org.apache.dubbo.demo.provider.DemoServiceImpl / /beans \u52a0\u8f7d Spring \u914d\u7f6e Provider.java\uff1a import org.springframework.context.support.ClassPathXmlApplicationContext; public class Provider { public static void main(String[] args) throws Exception { ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[] { http://10.20.160.198/wiki/display/dubbo/provider.xml }); context.start(); System.in.read(); // \u6309\u4efb\u610f\u952e\u9000\u51fa } } \u670d\u52a1\u6d88\u8d39\u8005 \u5b8c\u6574\u5b89\u88c5\u6b65\u9aa4\uff0c\u8bf7\u53c2\u89c1\uff1a \u793a\u4f8b\u6d88\u8d39\u8005\u5b89\u88c5 \u901a\u8fc7 Spring \u914d\u7f6e\u5f15\u7528\u8fdc\u7a0b\u670d\u52a1 consumer.xml\uff1a ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd !-- \u6d88\u8d39\u65b9\u5e94\u7528\u540d\uff0c\u7528\u4e8e\u8ba1\u7b97\u4f9d\u8d56\u5173\u7cfb\uff0c\u4e0d\u662f\u5339\u914d\u6761\u4ef6\uff0c\u4e0d\u8981\u4e0e\u63d0\u4f9b\u65b9\u4e00\u6837 -- dubbo:application name= consumer-of-helloworld-app / !-- \u4f7f\u7528multicast\u5e7f\u64ad\u6ce8\u518c\u4e2d\u5fc3\u66b4\u9732\u53d1\u73b0\u670d\u52a1\u5730\u5740 -- dubbo:registry address= multicast://224.5.6.7:1234 / !-- \u751f\u6210\u8fdc\u7a0b\u670d\u52a1\u4ee3\u7406\uff0c\u53ef\u4ee5\u548c\u672c\u5730bean\u4e00\u6837\u4f7f\u7528demoService -- dubbo:reference id= demoService interface= org.apache.dubbo.demo.DemoService / /beans \u52a0\u8f7dSpring\u914d\u7f6e\uff0c\u5e76\u8c03\u7528\u8fdc\u7a0b\u670d\u52a1 Consumer.java [^3]\uff1a import org.springframework.context.support.ClassPathXmlApplicationContext; import org.apache.dubbo.demo.DemoService; public class Consumer { public static void main(String[] args) throws Exception { ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[] { http://10.20.160.198/wiki/display/dubbo/consumer.xml }); context.start(); DemoService demoService = (DemoService)context.getBean( demoService ); // \u83b7\u53d6\u8fdc\u7a0b\u670d\u52a1\u4ee3\u7406 String hello = demoService.sayHello( world ); // \u6267\u884c\u8fdc\u7a0b\u65b9\u6cd5 System.out.println( hello ); // \u663e\u793a\u8c03\u7528\u7ed3\u679c } } [^3]: \u4e5f\u53ef\u4ee5\u4f7f\u7528 IoC \u6ce8\u5165","title":"\u5feb\u901f\u542f\u52a8"},{"location":"user/quick-start/#_1","text":"Dubbo \u91c7\u7528\u5168 Spring \u914d\u7f6e\u65b9\u5f0f\uff0c\u900f\u660e\u5316\u63a5\u5165\u5e94\u7528\uff0c\u5bf9\u5e94\u7528\u6ca1\u6709\u4efb\u4f55 API \u4fb5\u5165\uff0c\u53ea\u9700\u7528 Spring \u52a0\u8f7d Dubbo \u7684\u914d\u7f6e\u5373\u53ef\uff0cDubbo \u57fa\u4e8e Spring \u7684 Schema \u6269\u5c55 \u8fdb\u884c\u52a0\u8f7d\u3002 \u5982\u679c\u4e0d\u60f3\u4f7f\u7528 Spring \u914d\u7f6e\uff0c\u53ef\u4ee5\u901a\u8fc7 API \u7684\u65b9\u5f0f \u8fdb\u884c\u8c03\u7528\u3002","title":"\u5feb\u901f\u542f\u52a8"},{"location":"user/quick-start/#_2","text":"\u5b8c\u6574\u5b89\u88c5\u6b65\u9aa4\uff0c\u8bf7\u53c2\u89c1\uff1a \u793a\u4f8b\u63d0\u4f9b\u8005\u5b89\u88c5","title":"\u670d\u52a1\u63d0\u4f9b\u8005"},{"location":"user/quick-start/#_3","text":"DemoService.java ^1 \uff1a package org.apache.dubbo.demo; public interface DemoService { String sayHello(String name); }","title":"\u5b9a\u4e49\u670d\u52a1\u63a5\u53e3"},{"location":"user/quick-start/#_4","text":"DemoServiceImpl.java ^2 \uff1a package org.apache.dubbo.demo.provider; import org.apache.dubbo.demo.DemoService; public class DemoServiceImpl implements DemoService { public String sayHello(String name) { return Hello + name; } }","title":"\u5728\u670d\u52a1\u63d0\u4f9b\u65b9\u5b9e\u73b0\u63a5\u53e3"},{"location":"user/quick-start/#spring","text":"provider.xml\uff1a ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd !-- \u63d0\u4f9b\u65b9\u5e94\u7528\u4fe1\u606f\uff0c\u7528\u4e8e\u8ba1\u7b97\u4f9d\u8d56\u5173\u7cfb -- dubbo:application name= hello-world-app / !-- \u4f7f\u7528multicast\u5e7f\u64ad\u6ce8\u518c\u4e2d\u5fc3\u66b4\u9732\u670d\u52a1\u5730\u5740 -- dubbo:registry address= multicast://224.5.6.7:1234 / !-- \u7528dubbo\u534f\u8bae\u572820880\u7aef\u53e3\u66b4\u9732\u670d\u52a1 -- dubbo:protocol name= dubbo port= 20880 / !-- \u58f0\u660e\u9700\u8981\u66b4\u9732\u7684\u670d\u52a1\u63a5\u53e3 -- dubbo:service interface= org.apache.dubbo.demo.DemoService ref= demoService / !-- \u548c\u672c\u5730bean\u4e00\u6837\u5b9e\u73b0\u670d\u52a1 -- bean id= demoService class= org.apache.dubbo.demo.provider.DemoServiceImpl / /beans","title":"\u7528 Spring \u914d\u7f6e\u58f0\u660e\u66b4\u9732\u670d\u52a1"},{"location":"user/quick-start/#spring_1","text":"Provider.java\uff1a import org.springframework.context.support.ClassPathXmlApplicationContext; public class Provider { public static void main(String[] args) throws Exception { ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[] { http://10.20.160.198/wiki/display/dubbo/provider.xml }); context.start(); System.in.read(); // \u6309\u4efb\u610f\u952e\u9000\u51fa } }","title":"\u52a0\u8f7d Spring \u914d\u7f6e"},{"location":"user/quick-start/#_5","text":"\u5b8c\u6574\u5b89\u88c5\u6b65\u9aa4\uff0c\u8bf7\u53c2\u89c1\uff1a \u793a\u4f8b\u6d88\u8d39\u8005\u5b89\u88c5","title":"\u670d\u52a1\u6d88\u8d39\u8005"},{"location":"user/quick-start/#spring_2","text":"consumer.xml\uff1a ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd !-- \u6d88\u8d39\u65b9\u5e94\u7528\u540d\uff0c\u7528\u4e8e\u8ba1\u7b97\u4f9d\u8d56\u5173\u7cfb\uff0c\u4e0d\u662f\u5339\u914d\u6761\u4ef6\uff0c\u4e0d\u8981\u4e0e\u63d0\u4f9b\u65b9\u4e00\u6837 -- dubbo:application name= consumer-of-helloworld-app / !-- \u4f7f\u7528multicast\u5e7f\u64ad\u6ce8\u518c\u4e2d\u5fc3\u66b4\u9732\u53d1\u73b0\u670d\u52a1\u5730\u5740 -- dubbo:registry address= multicast://224.5.6.7:1234 / !-- \u751f\u6210\u8fdc\u7a0b\u670d\u52a1\u4ee3\u7406\uff0c\u53ef\u4ee5\u548c\u672c\u5730bean\u4e00\u6837\u4f7f\u7528demoService -- dubbo:reference id= demoService interface= org.apache.dubbo.demo.DemoService / /beans","title":"\u901a\u8fc7 Spring \u914d\u7f6e\u5f15\u7528\u8fdc\u7a0b\u670d\u52a1"},{"location":"user/quick-start/#spring_3","text":"Consumer.java [^3]\uff1a import org.springframework.context.support.ClassPathXmlApplicationContext; import org.apache.dubbo.demo.DemoService; public class Consumer { public static void main(String[] args) throws Exception { ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[] { http://10.20.160.198/wiki/display/dubbo/consumer.xml }); context.start(); DemoService demoService = (DemoService)context.getBean( demoService ); // \u83b7\u53d6\u8fdc\u7a0b\u670d\u52a1\u4ee3\u7406 String hello = demoService.sayHello( world ); // \u6267\u884c\u8fdc\u7a0b\u65b9\u6cd5 System.out.println( hello ); // \u663e\u793a\u8c03\u7528\u7ed3\u679c } } [^3]: \u4e5f\u53ef\u4ee5\u4f7f\u7528 IoC \u6ce8\u5165","title":"\u52a0\u8f7dSpring\u914d\u7f6e\uff0c\u5e76\u8c03\u7528\u8fdc\u7a0b\u670d\u52a1"},{"location":"user/recommend/","text":"\u63a8\u8350\u7528\u6cd5 \u5728 Provider \u7aef\u5c3d\u91cf\u591a\u914d\u7f6e Consumer \u7aef\u5c5e\u6027 \u539f\u56e0\u5982\u4e0b\uff1a \u4f5c\u670d\u52a1\u7684\u63d0\u4f9b\u65b9\uff0c\u6bd4\u670d\u52a1\u6d88\u8d39\u65b9\u66f4\u6e05\u695a\u670d\u52a1\u7684\u6027\u80fd\u53c2\u6570\uff0c\u5982\u8c03\u7528\u7684\u8d85\u65f6\u65f6\u95f4\u3001\u5408\u7406\u7684\u91cd\u8bd5\u6b21\u6570\u7b49 \u5728 Provider \u7aef\u914d\u7f6e\u540e\uff0cConsumer \u7aef\u4e0d\u914d\u7f6e\u5219\u4f1a\u4f7f\u7528 Provider \u7aef\u7684\u914d\u7f6e\uff0c\u5373 Provider \u7aef\u7684\u914d\u7f6e\u53ef\u4ee5\u4f5c\u4e3a Consumer \u7684\u7f3a\u7701\u503c [^1]\u3002\u5426\u5219\uff0cConsumer \u4f1a\u4f7f\u7528 Consumer \u7aef\u7684\u5168\u5c40\u8bbe\u7f6e\uff0c\u8fd9\u5bf9\u4e8e Provider \u662f\u4e0d\u53ef\u63a7\u7684\uff0c\u5e76\u4e14\u5f80\u5f80\u662f\u4e0d\u5408\u7406\u7684 Provider \u7aef\u5c3d\u91cf\u591a\u914d\u7f6e Consumer \u7aef\u7684\u5c5e\u6027\uff0c\u8ba9 Provider \u7684\u5b9e\u73b0\u8005\u4e00\u5f00\u59cb\u5c31\u601d\u8003 Provider \u7aef\u7684\u670d\u52a1\u7279\u70b9\u548c\u670d\u52a1\u8d28\u91cf\u7b49\u95ee\u9898\u3002 \u793a\u4f8b\uff1a dubbo:service interface= com.alibaba.hello.api.HelloService version= 1.0.0 ref= helloService timeout= 300 retries= 2 loadbalance= random actives= 0 / dubbo:service interface= com.alibaba.hello.api.WorldService version= 1.0.0 ref= helloService timeout= 300 retries= 2 loadbalance= random actives= 0 dubbo:method name= findAllPerson timeout= 10000 retries= 9 loadbalance= leastactive actives= 5 / dubbo:service/ \u5efa\u8bae\u5728 Provider \u7aef\u914d\u7f6e\u7684 Consumer \u7aef\u5c5e\u6027\u6709\uff1a timeout \uff1a\u65b9\u6cd5\u8c03\u7528\u7684\u8d85\u65f6\u65f6\u95f4 retries \uff1a\u5931\u8d25\u91cd\u8bd5\u6b21\u6570\uff0c\u7f3a\u7701\u662f 2 [^2] loadbalance \uff1a\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5 [^3]\uff0c\u7f3a\u7701\u662f\u968f\u673a random \u3002\u8fd8\u53ef\u4ee5\u914d\u7f6e\u8f6e\u8be2 roundrobin \u3001\u6700\u4e0d\u6d3b\u8dc3\u4f18\u5148 [^4] leastactive \u548c\u4e00\u81f4\u6027\u54c8\u5e0c consistenthash \u7b49 actives \uff1a\u6d88\u8d39\u8005\u7aef\u7684\u6700\u5927\u5e76\u53d1\u8c03\u7528\u9650\u5236\uff0c\u5373\u5f53 Consumer \u5bf9\u4e00\u4e2a\u670d\u52a1\u7684\u5e76\u53d1\u8c03\u7528\u5230\u4e0a\u9650\u540e\uff0c\u65b0\u8c03\u7528\u4f1a\u963b\u585e\u76f4\u5230\u8d85\u65f6\uff0c\u5728\u65b9\u6cd5\u4e0a\u914d\u7f6e dubbo:method \u5219\u9488\u5bf9\u8be5\u65b9\u6cd5\u8fdb\u884c\u5e76\u53d1\u9650\u5236\uff0c\u5728\u63a5\u53e3\u4e0a\u914d\u7f6e dubbo:service \uff0c\u5219\u9488\u5bf9\u8be5\u670d\u52a1\u8fdb\u884c\u5e76\u53d1\u9650\u5236 \u8be6\u7ec6\u914d\u7f6e\u8bf4\u660e\u8bf7\u53c2\u8003\uff1a Dubbo\u914d\u7f6e\u53c2\u8003\u624b\u518c \u5728 Provider \u7aef\u914d\u7f6e\u5408\u7406\u7684 Provider \u7aef\u5c5e\u6027 dubbo:protocol threads= 200 / dubbo:service interface= com.alibaba.hello.api.HelloService version= 1.0.0 ref= helloService executes= 200 dubbo:method name= findAllPerson executes= 50 / /dubbo:service \u5efa\u8bae\u5728 Provider \u7aef\u914d\u7f6e\u7684 Provider \u7aef\u5c5e\u6027\u6709\uff1a threads \uff1a\u670d\u52a1\u7ebf\u7a0b\u6c60\u5927\u5c0f executes \uff1a\u4e00\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u5e76\u884c\u6267\u884c\u8bf7\u6c42\u4e0a\u9650\uff0c\u5373\u5f53 Provider \u5bf9\u4e00\u4e2a\u670d\u52a1\u7684\u5e76\u53d1\u8c03\u7528\u8fbe\u5230\u4e0a\u9650\u540e\uff0c\u65b0\u8c03\u7528\u4f1a\u963b\u585e\uff0c\u6b64\u65f6 Consumer \u53ef\u80fd\u4f1a\u8d85\u65f6\u3002\u5728\u65b9\u6cd5\u4e0a\u914d\u7f6e dubbo:method \u5219\u9488\u5bf9\u8be5\u65b9\u6cd5\u8fdb\u884c\u5e76\u53d1\u9650\u5236\uff0c\u5728\u63a5\u53e3\u4e0a\u914d\u7f6e dubbo:service \uff0c\u5219\u9488\u5bf9\u8be5\u670d\u52a1\u8fdb\u884c\u5e76\u53d1\u9650\u5236 \u914d\u7f6e\u7ba1\u7406\u4fe1\u606f \u76ee\u524d\u6709\u8d1f\u8d23\u4eba\u4fe1\u606f\u548c\u7ec4\u7ec7\u4fe1\u606f\u7528\u4e8e\u533a\u5206\u7ad9\u70b9\u3002\u4ee5\u4fbf\u4e8e\u5728\u53d1\u73b0\u95ee\u9898\u65f6\u627e\u5230\u670d\u52a1\u5bf9\u5e94\u8d1f\u8d23\u4eba\uff0c\u5efa\u8bae\u81f3\u5c11\u914d\u7f6e\u4e24\u4e2a\u4eba\u4ee5\u4fbf\u5907\u4efd\u3002\u8d1f\u8d23\u4eba\u548c\u7ec4\u7ec7\u4fe1\u606f\u53ef\u4ee5\u5728\u8fd0\u7ef4\u5e73\u53f0 (Dubbo Ops) \u4e0a\u770b\u5230\u3002 \u5728\u5e94\u7528\u5c42\u9762\u914d\u7f6e\u8d1f\u8d23\u4eba\u3001\u7ec4\u7ec7\u4fe1\u606f\uff1a dubbo:application owner=\u201dding.lid,william.liangf\u201d organization=\u201dintl\u201d / \u5728\u670d\u52a1\u5c42\u9762\uff08\u670d\u52a1\u7aef\uff09\u914d\u7f6e\u8d1f\u8d23\u4eba\uff1a dubbo:service owner=\u201dding.lid,william.liangf\u201d / \u5728\u670d\u52a1\u5c42\u9762\uff08\u6d88\u8d39\u7aef\uff09\u914d\u7f6e\u8d1f\u8d23\u4eba\uff1a dubbo:reference owner=\u201dding.lid,william.liangf\u201d / \u82e5\u6ca1\u6709\u914d\u7f6e\u670d\u52a1\u5c42\u9762\u7684\u8d1f\u8d23\u4eba\uff0c\u5219\u9ed8\u8ba4\u4f7f\u7528 dubbo:application \u8bbe\u7f6e\u7684\u8d1f\u8d23\u4eba\u3002 \u914d\u7f6e Dubbo \u7f13\u5b58\u6587\u4ef6 \u63d0\u4f9b\u8005\u5217\u8868\u7f13\u5b58\u6587\u4ef6\uff1a dubbo:registry file=\u201d${user.home}/output/dubbo.cache\u201d / \u6ce8\u610f\uff1a \u53ef\u4ee5\u6839\u636e\u9700\u8981\u8c03\u6574\u7f13\u5b58\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u4fdd\u8bc1\u8fd9\u4e2a\u6587\u4ef6\u4e0d\u4f1a\u5728\u53d1\u5e03\u8fc7\u7a0b\u4e2d\u88ab\u6e05\u9664\uff1b \u5982\u679c\u6709\u591a\u4e2a\u5e94\u7528\u8fdb\u7a0b\uff0c\u8bf7\u6ce8\u610f\u4e0d\u8981\u4f7f\u7528\u540c\u4e00\u4e2a\u6587\u4ef6\uff0c\u907f\u514d\u5185\u5bb9\u88ab\u8986\u76d6\uff1b \u8be5\u6587\u4ef6\u4f1a\u7f13\u5b58\u6ce8\u518c\u4e2d\u5fc3\u5217\u8868\u548c\u670d\u52a1\u63d0\u4f9b\u8005\u5217\u8868\u3002\u914d\u7f6e\u7f13\u5b58\u6587\u4ef6\u540e\uff0c\u5e94\u7528\u91cd\u542f\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u6ce8\u518c\u4e2d\u5fc3\u4e0d\u53ef\u7528\uff0c\u5e94\u7528\u4f1a\u4ece\u8be5\u7f13\u5b58\u6587\u4ef6\u8bfb\u53d6\u670d\u52a1\u63d0\u4f9b\u8005\u5217\u8868\uff0c\u8fdb\u4e00\u6b65\u4fdd\u8bc1\u5e94\u7528\u53ef\u9760\u6027\u3002 \u76d1\u63a7\u914d\u7f6e \u4f7f\u7528\u56fa\u5b9a\u7aef\u53e3\u66b4\u9732\u670d\u52a1\uff0c\u800c\u4e0d\u8981\u4f7f\u7528\u968f\u673a\u7aef\u53e3 \u8fd9\u6837\u5728\u6ce8\u518c\u4e2d\u5fc3\u63a8\u9001\u6709\u5ef6\u8fdf\u7684\u60c5\u51b5\u4e0b\uff0c\u6d88\u8d39\u8005\u901a\u8fc7\u7f13\u5b58\u5217\u8868\u4e5f\u80fd\u8c03\u7528\u5230\u539f\u5730\u5740\uff0c\u4fdd\u8bc1\u8c03\u7528\u6210\u529f\u3002 \u4f7f\u7528 Dubbo Admin \u76d1\u63a7\u6ce8\u518c\u4e2d\u5fc3\u4e0a\u7684\u670d\u52a1\u63d0\u4f9b\u65b9 \u4f7f\u7528 Dubbo Admin \u76d1\u63a7\u670d\u52a1\u5728\u6ce8\u518c\u4e2d\u5fc3\u4e0a\u7684\u72b6\u6001\uff0c\u786e\u4fdd\u6ce8\u518c\u4e2d\u5fc3\u4e0a\u6709\u8be5\u670d\u52a1\u7684\u5b58\u5728\u3002 \u670d\u52a1\u63d0\u4f9b\u65b9\u53ef\u4f7f\u7528 Dubbo Qos \u7684 telnet \u6216 shell \u76d1\u63a7\u9879 \u76d1\u63a7\u670d\u52a1\u63d0\u4f9b\u8005\u7aef\u53e3\u72b6\u6001\uff1a echo status | nc -i 1 20880 | grep OK | wc -l \uff0c\u5176\u4e2d\u7684 20880 \u4e3a\u670d\u52a1\u7aef\u53e3 \u670d\u52a1\u6d88\u8d39\u65b9\u53ef\u901a\u8fc7\u5c06\u670d\u52a1\u5f3a\u5236\u8f6c\u578b\u4e3a EchoService\uff0c\u5e76\u8c03\u7528 $echo() \u6d4b\u8bd5\u8be5\u670d\u52a1\u7684\u63d0\u4f9b\u8005\u662f\u53ef\u7528 \u5982 assertEqauls(\u201cOK\u201d, ((EchoService)memberService).$echo(\u201cOK\u201d)); \u4e0d\u8981\u4f7f\u7528 dubbo.properties \u6587\u4ef6\u914d\u7f6e\uff0c\u63a8\u8350\u4f7f\u7528\u5bf9\u5e94 XML \u914d\u7f6e Dubbo \u4e2d\u6240\u6709\u7684\u914d\u7f6e\u9879\u90fd\u53ef\u4ee5\u914d\u7f6e\u5728 Spring \u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u5e76\u4e14\u53ef\u4ee5\u9488\u5bf9\u5355\u4e2a\u670d\u52a1\u914d\u7f6e\u3002 \u5982\u5b8c\u5168\u4e0d\u914d\u7f6e\u5219\u4f7f\u7528 Dubbo \u7f3a\u7701\u503c\uff0c\u8be6\u60c5\u8bf7\u53c2\u8003 Dubbo\u914d\u7f6e\u53c2\u8003\u624b\u518c \u4e2d\u7684\u8bf4\u660e\u3002 dubbo.properties \u4e2d\u5c5e\u6027\u540d\u4e0e XML \u7684\u5bf9\u5e94\u5173\u7cfb \u5e94\u7528\u540d dubbo.application.name xml dubbo:application name=\"myalibaba\" \u6ce8\u518c\u4e2d\u5fc3\u5730\u5740 dubbo.registry.address xml dubbo:registry address=\"11.22.33.44:9090\" \u8c03\u7528\u8d85\u65f6 dubbo.service.*.timeout \u53ef\u4ee5\u5728\u591a\u4e2a\u914d\u7f6e\u9879\u8bbe\u7f6e\u8d85\u65f6 timeout \uff0c\u7531\u4e0a\u81f3\u4e0b\u8986\u76d6\uff08\u5373\u4e0a\u9762\u7684\u4f18\u5148\uff09[^5]\uff0c\u5176\u5b83\u7684\u53c2\u6570\uff08 retries \u3001 loadbalance \u3001 actives \u7b49\uff09\u7684\u8986\u76d6\u7b56\u7565\u4e0e timeout \u76f8\u540c\u3002\u793a\u4f8b\u5982\u4e0b\uff1a \u63d0\u4f9b\u8005\u7aef\u7279\u5b9a\u65b9\u6cd5\u7684\u914d\u7f6e xml dubbo:service interface=\"com.alibaba.xxx.XxxService\" dubbo:method name=\"findPerson\" timeout=\"1000\" / /dubbo:service \u63d0\u4f9b\u8005\u7aef\u7279\u5b9a\u63a5\u53e3\u7684\u914d\u7f6e xml dubbo:service interface=\"com.alibaba.xxx.XxxService\" timeout=\"200\" / \u670d\u52a1\u63d0\u4f9b\u8005\u534f\u8bae dubbo.service.protocol \u3001\u670d\u52a1\u7684\u76d1\u542c\u7aef\u53e3 dubbo.service.server.port xml dubbo:protocol name=\"dubbo\" port=\"20880\" / \u670d\u52a1\u7ebf\u7a0b\u6c60\u5927\u5c0f dubbo.service.max.thread.threads.size xml dubbo:protocol threads=\"100\" / \u6d88\u8d39\u8005\u542f\u52a8\u65f6\uff0c\u6ca1\u6709\u63d0\u4f9b\u8005\u662f\u5426\u629b\u5f02\u5e38 alibaba.intl.commons.dubbo.service.allow.no.provider xml dubbo:reference interface=\"com.alibaba.xxx.XxxService\" check=\"false\" / [^1]: \u914d\u7f6e\u7684\u8986\u76d6\u89c4\u5219\uff1a1) \u65b9\u6cd5\u7ea7\u522b\u914d\u7f6e\u4f18\u4e8e\u63a5\u53e3\u7ea7\u522b\uff0c\u5373\u5c0f Scope \u4f18\u5148 2) Consumer \u7aef\u914d\u7f6e\u4f18\u4e8e Provider \u7aef\u914d\u7f6e\uff0c\u4f18\u4e8e\u5168\u5c40\u914d\u7f6e\uff0c\u6700\u540e\u662f Dubbo \u786c\u7f16\u7801\u7684\u914d\u7f6e\u503c\uff08 Dubbo \u914d\u7f6e\u53c2\u8003\u624b\u518c ) [^2]: \u8868\u793a\u52a0\u4e0a\u7b2c\u4e00\u6b21\u8c03\u7528\uff0c\u4f1a\u8c03\u7528 3 \u6b21 [^3]: \u6709\u591a\u4e2a Provider \u65f6\uff0c\u5982\u4f55\u6311\u9009 Provider \u8c03\u7528 [^4]: \u6307\u4ece Consumer \u7aef\u5e76\u53d1\u8c03\u7528\u6700\u597d\u7684 Provider\uff0c\u53ef\u4ee5\u51cf\u5c11\u5bf9\u54cd\u5e94\u6162\u7684 Provider \u7684\u8c03\u7528\uff0c\u56e0\u4e3a\u54cd\u5e94\u6162\u66f4\u5bb9\u6613\u7d2f\u79ef\u5e76\u53d1\u8c03\u7528 [^5]: timeout \u53ef\u4ee5\u5728\u591a\u5904\u8bbe\u7f6e\uff0c\u914d\u7f6e\u9879\u53ca\u8986\u76d6\u89c4\u5219\u8bf7\u53c2\u8003\uff1a Dubbo \u914d\u7f6e\u53c2\u8003\u624b\u518c","title":"\u63a8\u8350\u7528\u6cd5"},{"location":"user/recommend/#_1","text":"","title":"\u63a8\u8350\u7528\u6cd5"},{"location":"user/recommend/#provider-consumer","text":"\u539f\u56e0\u5982\u4e0b\uff1a \u4f5c\u670d\u52a1\u7684\u63d0\u4f9b\u65b9\uff0c\u6bd4\u670d\u52a1\u6d88\u8d39\u65b9\u66f4\u6e05\u695a\u670d\u52a1\u7684\u6027\u80fd\u53c2\u6570\uff0c\u5982\u8c03\u7528\u7684\u8d85\u65f6\u65f6\u95f4\u3001\u5408\u7406\u7684\u91cd\u8bd5\u6b21\u6570\u7b49 \u5728 Provider \u7aef\u914d\u7f6e\u540e\uff0cConsumer \u7aef\u4e0d\u914d\u7f6e\u5219\u4f1a\u4f7f\u7528 Provider \u7aef\u7684\u914d\u7f6e\uff0c\u5373 Provider \u7aef\u7684\u914d\u7f6e\u53ef\u4ee5\u4f5c\u4e3a Consumer \u7684\u7f3a\u7701\u503c [^1]\u3002\u5426\u5219\uff0cConsumer \u4f1a\u4f7f\u7528 Consumer \u7aef\u7684\u5168\u5c40\u8bbe\u7f6e\uff0c\u8fd9\u5bf9\u4e8e Provider \u662f\u4e0d\u53ef\u63a7\u7684\uff0c\u5e76\u4e14\u5f80\u5f80\u662f\u4e0d\u5408\u7406\u7684 Provider \u7aef\u5c3d\u91cf\u591a\u914d\u7f6e Consumer \u7aef\u7684\u5c5e\u6027\uff0c\u8ba9 Provider \u7684\u5b9e\u73b0\u8005\u4e00\u5f00\u59cb\u5c31\u601d\u8003 Provider \u7aef\u7684\u670d\u52a1\u7279\u70b9\u548c\u670d\u52a1\u8d28\u91cf\u7b49\u95ee\u9898\u3002 \u793a\u4f8b\uff1a dubbo:service interface= com.alibaba.hello.api.HelloService version= 1.0.0 ref= helloService timeout= 300 retries= 2 loadbalance= random actives= 0 / dubbo:service interface= com.alibaba.hello.api.WorldService version= 1.0.0 ref= helloService timeout= 300 retries= 2 loadbalance= random actives= 0 dubbo:method name= findAllPerson timeout= 10000 retries= 9 loadbalance= leastactive actives= 5 / dubbo:service/ \u5efa\u8bae\u5728 Provider \u7aef\u914d\u7f6e\u7684 Consumer \u7aef\u5c5e\u6027\u6709\uff1a timeout \uff1a\u65b9\u6cd5\u8c03\u7528\u7684\u8d85\u65f6\u65f6\u95f4 retries \uff1a\u5931\u8d25\u91cd\u8bd5\u6b21\u6570\uff0c\u7f3a\u7701\u662f 2 [^2] loadbalance \uff1a\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5 [^3]\uff0c\u7f3a\u7701\u662f\u968f\u673a random \u3002\u8fd8\u53ef\u4ee5\u914d\u7f6e\u8f6e\u8be2 roundrobin \u3001\u6700\u4e0d\u6d3b\u8dc3\u4f18\u5148 [^4] leastactive \u548c\u4e00\u81f4\u6027\u54c8\u5e0c consistenthash \u7b49 actives \uff1a\u6d88\u8d39\u8005\u7aef\u7684\u6700\u5927\u5e76\u53d1\u8c03\u7528\u9650\u5236\uff0c\u5373\u5f53 Consumer \u5bf9\u4e00\u4e2a\u670d\u52a1\u7684\u5e76\u53d1\u8c03\u7528\u5230\u4e0a\u9650\u540e\uff0c\u65b0\u8c03\u7528\u4f1a\u963b\u585e\u76f4\u5230\u8d85\u65f6\uff0c\u5728\u65b9\u6cd5\u4e0a\u914d\u7f6e dubbo:method \u5219\u9488\u5bf9\u8be5\u65b9\u6cd5\u8fdb\u884c\u5e76\u53d1\u9650\u5236\uff0c\u5728\u63a5\u53e3\u4e0a\u914d\u7f6e dubbo:service \uff0c\u5219\u9488\u5bf9\u8be5\u670d\u52a1\u8fdb\u884c\u5e76\u53d1\u9650\u5236 \u8be6\u7ec6\u914d\u7f6e\u8bf4\u660e\u8bf7\u53c2\u8003\uff1a Dubbo\u914d\u7f6e\u53c2\u8003\u624b\u518c","title":"\u5728 Provider \u7aef\u5c3d\u91cf\u591a\u914d\u7f6e Consumer \u7aef\u5c5e\u6027"},{"location":"user/recommend/#provider-provider","text":"dubbo:protocol threads= 200 / dubbo:service interface= com.alibaba.hello.api.HelloService version= 1.0.0 ref= helloService executes= 200 dubbo:method name= findAllPerson executes= 50 / /dubbo:service \u5efa\u8bae\u5728 Provider \u7aef\u914d\u7f6e\u7684 Provider \u7aef\u5c5e\u6027\u6709\uff1a threads \uff1a\u670d\u52a1\u7ebf\u7a0b\u6c60\u5927\u5c0f executes \uff1a\u4e00\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u5e76\u884c\u6267\u884c\u8bf7\u6c42\u4e0a\u9650\uff0c\u5373\u5f53 Provider \u5bf9\u4e00\u4e2a\u670d\u52a1\u7684\u5e76\u53d1\u8c03\u7528\u8fbe\u5230\u4e0a\u9650\u540e\uff0c\u65b0\u8c03\u7528\u4f1a\u963b\u585e\uff0c\u6b64\u65f6 Consumer \u53ef\u80fd\u4f1a\u8d85\u65f6\u3002\u5728\u65b9\u6cd5\u4e0a\u914d\u7f6e dubbo:method \u5219\u9488\u5bf9\u8be5\u65b9\u6cd5\u8fdb\u884c\u5e76\u53d1\u9650\u5236\uff0c\u5728\u63a5\u53e3\u4e0a\u914d\u7f6e dubbo:service \uff0c\u5219\u9488\u5bf9\u8be5\u670d\u52a1\u8fdb\u884c\u5e76\u53d1\u9650\u5236","title":"\u5728 Provider \u7aef\u914d\u7f6e\u5408\u7406\u7684 Provider \u7aef\u5c5e\u6027"},{"location":"user/recommend/#_2","text":"\u76ee\u524d\u6709\u8d1f\u8d23\u4eba\u4fe1\u606f\u548c\u7ec4\u7ec7\u4fe1\u606f\u7528\u4e8e\u533a\u5206\u7ad9\u70b9\u3002\u4ee5\u4fbf\u4e8e\u5728\u53d1\u73b0\u95ee\u9898\u65f6\u627e\u5230\u670d\u52a1\u5bf9\u5e94\u8d1f\u8d23\u4eba\uff0c\u5efa\u8bae\u81f3\u5c11\u914d\u7f6e\u4e24\u4e2a\u4eba\u4ee5\u4fbf\u5907\u4efd\u3002\u8d1f\u8d23\u4eba\u548c\u7ec4\u7ec7\u4fe1\u606f\u53ef\u4ee5\u5728\u8fd0\u7ef4\u5e73\u53f0 (Dubbo Ops) \u4e0a\u770b\u5230\u3002 \u5728\u5e94\u7528\u5c42\u9762\u914d\u7f6e\u8d1f\u8d23\u4eba\u3001\u7ec4\u7ec7\u4fe1\u606f\uff1a dubbo:application owner=\u201dding.lid,william.liangf\u201d organization=\u201dintl\u201d / \u5728\u670d\u52a1\u5c42\u9762\uff08\u670d\u52a1\u7aef\uff09\u914d\u7f6e\u8d1f\u8d23\u4eba\uff1a dubbo:service owner=\u201dding.lid,william.liangf\u201d / \u5728\u670d\u52a1\u5c42\u9762\uff08\u6d88\u8d39\u7aef\uff09\u914d\u7f6e\u8d1f\u8d23\u4eba\uff1a dubbo:reference owner=\u201dding.lid,william.liangf\u201d / \u82e5\u6ca1\u6709\u914d\u7f6e\u670d\u52a1\u5c42\u9762\u7684\u8d1f\u8d23\u4eba\uff0c\u5219\u9ed8\u8ba4\u4f7f\u7528 dubbo:application \u8bbe\u7f6e\u7684\u8d1f\u8d23\u4eba\u3002","title":"\u914d\u7f6e\u7ba1\u7406\u4fe1\u606f"},{"location":"user/recommend/#dubbo","text":"\u63d0\u4f9b\u8005\u5217\u8868\u7f13\u5b58\u6587\u4ef6\uff1a dubbo:registry file=\u201d${user.home}/output/dubbo.cache\u201d / \u6ce8\u610f\uff1a \u53ef\u4ee5\u6839\u636e\u9700\u8981\u8c03\u6574\u7f13\u5b58\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u4fdd\u8bc1\u8fd9\u4e2a\u6587\u4ef6\u4e0d\u4f1a\u5728\u53d1\u5e03\u8fc7\u7a0b\u4e2d\u88ab\u6e05\u9664\uff1b \u5982\u679c\u6709\u591a\u4e2a\u5e94\u7528\u8fdb\u7a0b\uff0c\u8bf7\u6ce8\u610f\u4e0d\u8981\u4f7f\u7528\u540c\u4e00\u4e2a\u6587\u4ef6\uff0c\u907f\u514d\u5185\u5bb9\u88ab\u8986\u76d6\uff1b \u8be5\u6587\u4ef6\u4f1a\u7f13\u5b58\u6ce8\u518c\u4e2d\u5fc3\u5217\u8868\u548c\u670d\u52a1\u63d0\u4f9b\u8005\u5217\u8868\u3002\u914d\u7f6e\u7f13\u5b58\u6587\u4ef6\u540e\uff0c\u5e94\u7528\u91cd\u542f\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u6ce8\u518c\u4e2d\u5fc3\u4e0d\u53ef\u7528\uff0c\u5e94\u7528\u4f1a\u4ece\u8be5\u7f13\u5b58\u6587\u4ef6\u8bfb\u53d6\u670d\u52a1\u63d0\u4f9b\u8005\u5217\u8868\uff0c\u8fdb\u4e00\u6b65\u4fdd\u8bc1\u5e94\u7528\u53ef\u9760\u6027\u3002","title":"\u914d\u7f6e Dubbo \u7f13\u5b58\u6587\u4ef6"},{"location":"user/recommend/#_3","text":"\u4f7f\u7528\u56fa\u5b9a\u7aef\u53e3\u66b4\u9732\u670d\u52a1\uff0c\u800c\u4e0d\u8981\u4f7f\u7528\u968f\u673a\u7aef\u53e3 \u8fd9\u6837\u5728\u6ce8\u518c\u4e2d\u5fc3\u63a8\u9001\u6709\u5ef6\u8fdf\u7684\u60c5\u51b5\u4e0b\uff0c\u6d88\u8d39\u8005\u901a\u8fc7\u7f13\u5b58\u5217\u8868\u4e5f\u80fd\u8c03\u7528\u5230\u539f\u5730\u5740\uff0c\u4fdd\u8bc1\u8c03\u7528\u6210\u529f\u3002 \u4f7f\u7528 Dubbo Admin \u76d1\u63a7\u6ce8\u518c\u4e2d\u5fc3\u4e0a\u7684\u670d\u52a1\u63d0\u4f9b\u65b9 \u4f7f\u7528 Dubbo Admin \u76d1\u63a7\u670d\u52a1\u5728\u6ce8\u518c\u4e2d\u5fc3\u4e0a\u7684\u72b6\u6001\uff0c\u786e\u4fdd\u6ce8\u518c\u4e2d\u5fc3\u4e0a\u6709\u8be5\u670d\u52a1\u7684\u5b58\u5728\u3002 \u670d\u52a1\u63d0\u4f9b\u65b9\u53ef\u4f7f\u7528 Dubbo Qos \u7684 telnet \u6216 shell \u76d1\u63a7\u9879 \u76d1\u63a7\u670d\u52a1\u63d0\u4f9b\u8005\u7aef\u53e3\u72b6\u6001\uff1a echo status | nc -i 1 20880 | grep OK | wc -l \uff0c\u5176\u4e2d\u7684 20880 \u4e3a\u670d\u52a1\u7aef\u53e3 \u670d\u52a1\u6d88\u8d39\u65b9\u53ef\u901a\u8fc7\u5c06\u670d\u52a1\u5f3a\u5236\u8f6c\u578b\u4e3a EchoService\uff0c\u5e76\u8c03\u7528 $echo() \u6d4b\u8bd5\u8be5\u670d\u52a1\u7684\u63d0\u4f9b\u8005\u662f\u53ef\u7528 \u5982 assertEqauls(\u201cOK\u201d, ((EchoService)memberService).$echo(\u201cOK\u201d));","title":"\u76d1\u63a7\u914d\u7f6e"},{"location":"user/recommend/#dubboproperties-xml","text":"Dubbo \u4e2d\u6240\u6709\u7684\u914d\u7f6e\u9879\u90fd\u53ef\u4ee5\u914d\u7f6e\u5728 Spring \u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u5e76\u4e14\u53ef\u4ee5\u9488\u5bf9\u5355\u4e2a\u670d\u52a1\u914d\u7f6e\u3002 \u5982\u5b8c\u5168\u4e0d\u914d\u7f6e\u5219\u4f7f\u7528 Dubbo \u7f3a\u7701\u503c\uff0c\u8be6\u60c5\u8bf7\u53c2\u8003 Dubbo\u914d\u7f6e\u53c2\u8003\u624b\u518c \u4e2d\u7684\u8bf4\u660e\u3002","title":"\u4e0d\u8981\u4f7f\u7528 dubbo.properties \u6587\u4ef6\u914d\u7f6e\uff0c\u63a8\u8350\u4f7f\u7528\u5bf9\u5e94 XML \u914d\u7f6e"},{"location":"user/recommend/#dubboproperties-xml_1","text":"\u5e94\u7528\u540d dubbo.application.name xml dubbo:application name=\"myalibaba\" \u6ce8\u518c\u4e2d\u5fc3\u5730\u5740 dubbo.registry.address xml dubbo:registry address=\"11.22.33.44:9090\" \u8c03\u7528\u8d85\u65f6 dubbo.service.*.timeout \u53ef\u4ee5\u5728\u591a\u4e2a\u914d\u7f6e\u9879\u8bbe\u7f6e\u8d85\u65f6 timeout \uff0c\u7531\u4e0a\u81f3\u4e0b\u8986\u76d6\uff08\u5373\u4e0a\u9762\u7684\u4f18\u5148\uff09[^5]\uff0c\u5176\u5b83\u7684\u53c2\u6570\uff08 retries \u3001 loadbalance \u3001 actives \u7b49\uff09\u7684\u8986\u76d6\u7b56\u7565\u4e0e timeout \u76f8\u540c\u3002\u793a\u4f8b\u5982\u4e0b\uff1a \u63d0\u4f9b\u8005\u7aef\u7279\u5b9a\u65b9\u6cd5\u7684\u914d\u7f6e xml dubbo:service interface=\"com.alibaba.xxx.XxxService\" dubbo:method name=\"findPerson\" timeout=\"1000\" / /dubbo:service \u63d0\u4f9b\u8005\u7aef\u7279\u5b9a\u63a5\u53e3\u7684\u914d\u7f6e xml dubbo:service interface=\"com.alibaba.xxx.XxxService\" timeout=\"200\" / \u670d\u52a1\u63d0\u4f9b\u8005\u534f\u8bae dubbo.service.protocol \u3001\u670d\u52a1\u7684\u76d1\u542c\u7aef\u53e3 dubbo.service.server.port xml dubbo:protocol name=\"dubbo\" port=\"20880\" / \u670d\u52a1\u7ebf\u7a0b\u6c60\u5927\u5c0f dubbo.service.max.thread.threads.size xml dubbo:protocol threads=\"100\" / \u6d88\u8d39\u8005\u542f\u52a8\u65f6\uff0c\u6ca1\u6709\u63d0\u4f9b\u8005\u662f\u5426\u629b\u5f02\u5e38 alibaba.intl.commons.dubbo.service.allow.no.provider xml dubbo:reference interface=\"com.alibaba.xxx.XxxService\" check=\"false\" / [^1]: \u914d\u7f6e\u7684\u8986\u76d6\u89c4\u5219\uff1a1) \u65b9\u6cd5\u7ea7\u522b\u914d\u7f6e\u4f18\u4e8e\u63a5\u53e3\u7ea7\u522b\uff0c\u5373\u5c0f Scope \u4f18\u5148 2) Consumer \u7aef\u914d\u7f6e\u4f18\u4e8e Provider \u7aef\u914d\u7f6e\uff0c\u4f18\u4e8e\u5168\u5c40\u914d\u7f6e\uff0c\u6700\u540e\u662f Dubbo \u786c\u7f16\u7801\u7684\u914d\u7f6e\u503c\uff08 Dubbo \u914d\u7f6e\u53c2\u8003\u624b\u518c ) [^2]: \u8868\u793a\u52a0\u4e0a\u7b2c\u4e00\u6b21\u8c03\u7528\uff0c\u4f1a\u8c03\u7528 3 \u6b21 [^3]: \u6709\u591a\u4e2a Provider \u65f6\uff0c\u5982\u4f55\u6311\u9009 Provider \u8c03\u7528 [^4]: \u6307\u4ece Consumer \u7aef\u5e76\u53d1\u8c03\u7528\u6700\u597d\u7684 Provider\uff0c\u53ef\u4ee5\u51cf\u5c11\u5bf9\u54cd\u5e94\u6162\u7684 Provider \u7684\u8c03\u7528\uff0c\u56e0\u4e3a\u54cd\u5e94\u6162\u66f4\u5bb9\u6613\u7d2f\u79ef\u5e76\u53d1\u8c03\u7528 [^5]: timeout \u53ef\u4ee5\u5728\u591a\u5904\u8bbe\u7f6e\uff0c\u914d\u7f6e\u9879\u53ca\u8986\u76d6\u89c4\u5219\u8bf7\u53c2\u8003\uff1a Dubbo \u914d\u7f6e\u53c2\u8003\u624b\u518c","title":"dubbo.properties \u4e2d\u5c5e\u6027\u540d\u4e0e XML \u7684\u5bf9\u5e94\u5173\u7cfb"},{"location":"user/rest/","text":"\u5728 Dubbo \u4e2d\u5f00\u53d1 REST \u98ce\u683c\u7684\u8fdc\u7a0b\u8c03\u7528\uff08RESTful Remoting\uff09 \u4f5c\u8005\uff1a\u6c88\u7406 \u6587\u6863\u7248\u6743\uff1a Apache 2.0\u8bb8\u53ef\u8bc1 \u7f72\u540d-\u7981\u6b62\u6f14\u7ece \u5b8c\u5584\u4e2d\u2026\u2026 \u672c\u6587\u7bc7\u5e45\u8f83\u957f\uff0c\u56e0\u4e3aREST\u672c\u8eab\u6d89\u53ca\u9762\u8f83\u591a\u3002\u53e6\u5916\uff0c\u672c\u6587\u53c2\u7167Spring\u7b49\u7684\u6587\u6863\u98ce\u683c\uff0c\u4e0d\u4ec5\u4ec5\u5c40\u9650\u4e8e\u6846\u67b6\u7528\u6cd5\u7684\u9610\u8ff0\uff0c\u540c\u65f6\u4e5f\u52aa\u529b\u5448\u73b0\u6846\u67b6\u7684\u8bbe\u8ba1\u7406\u5ff5\u548c\u4f18\u826f\u5e94\u7528\u7684\u67b6\u6784\u601d\u60f3\u3002 \u5bf9\u4e8e\u60f3\u7c97\u7565\u4e86\u89e3dubbo\u548cREST\u7684\u4eba\uff0c\u53ea\u9700\u6d4f\u89c8 \u6982\u8ff0 \u81f3 \u6807\u51c6Java REST API\uff1aJAX-RS\u7b80\u4ecb \u51e0\u8282\u5373\u53ef\u3002 TODO \u751f\u6210\u53ef\u70b9\u51fb\u7684\u76ee\u5f55 \u76ee\u5f55 \u6982\u8ff0 REST\u7684\u4f18\u70b9 \u5e94\u7528\u573a\u666f \u5feb\u901f\u5165\u95e8 \u6807\u51c6Java REST API\uff1aJAX-RS\u7b80\u4ecb REST\u670d\u52a1\u63d0\u4f9b\u7aef\u8be6\u89e3 HTTP POST/GET\u7684\u5b9e\u73b0 Annotation\u653e\u5728\u63a5\u53e3\u7c7b\u8fd8\u662f\u5b9e\u73b0\u7c7b JSON\u3001XML\u7b49\u591a\u6570\u636e\u683c\u5f0f\u7684\u652f\u6301 \u4e2d\u6587\u5b57\u7b26\u652f\u6301 XML\u6570\u636e\u683c\u5f0f\u7684\u989d\u5916\u8981\u6c42 \u5b9a\u5236\u5e8f\u5217\u5316 \u914d\u7f6eREST Server\u7684\u5b9e\u73b0 \u83b7\u53d6\u4e0a\u4e0b\u6587\uff08Context\uff09\u4fe1\u606f \u914d\u7f6e\u7aef\u53e3\u53f7\u548cContext Path \u914d\u7f6e\u7ebf\u7a0b\u6570\u548cIO\u7ebf\u7a0b\u6570 \u914d\u7f6e\u957f\u8fde\u63a5 \u914d\u7f6e\u6700\u5927\u7684HTTP\u8fde\u63a5\u6570 \u914d\u7f6e\u6bcf\u4e2a\u6d88\u8d39\u7aef\u7684\u8d85\u65f6\u65f6\u95f4\u548cHTTP\u8fde\u63a5\u6570 GZIP\u6570\u636e\u538b\u7f29 \u7528Annotation\u53d6\u4ee3\u90e8\u5206Spring XML\u914d\u7f6e \u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684Filter\u3001Interceptor\u7b49 \u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684Exception\u5904\u7406 \u914d\u7f6eHTTP\u65e5\u5fd7\u8f93\u51fa \u8f93\u5165\u53c2\u6570\u7684\u6821\u9a8c \u662f\u5426\u5e94\u8be5\u900f\u660e\u53d1\u5e03REST\u670d\u52a1 REST\u670d\u52a1\u6d88\u8d39\u7aef\u8be6\u89e3 \u573a\u666f1\uff1a\u975edubbo\u7684\u6d88\u8d39\u7aef\u8c03\u7528dubbo\u7684REST\u670d\u52a1 \u573a\u666f2\uff1adubbo\u6d88\u8d39\u7aef\u8c03\u7528dubbo\u7684REST\u670d\u52a1 \u573a\u666f3\uff1adubbo\u7684\u6d88\u8d39\u7aef\u8c03\u7528\u975edubbo\u7684REST\u670d\u52a1 Dubbo\u4e2dJAX-RS\u7684\u9650\u5236 REST\u5e38\u89c1\u95ee\u9898\u89e3\u7b54\uff08REST FAQ\uff09 Dubbo REST\u7684\u670d\u52a1\u80fd\u548cDubbo\u6ce8\u518c\u4e2d\u5fc3\u3001\u76d1\u63a7\u4e2d\u5fc3\u96c6\u6210\u5417\uff1f Dubbo REST\u4e2d\u5982\u4f55\u5b9e\u73b0\u8d1f\u8f7d\u5747\u8861\u548c\u5bb9\u9519\uff08failover\uff09\uff1f JAX-RS\u4e2d\u91cd\u8f7d\u7684\u65b9\u6cd5\u80fd\u591f\u6620\u5c04\u5230\u540c\u4e00URL\u5730\u5740\u5417\uff1f JAX-RS\u4e2d\u4f5cPOST\u7684\u65b9\u6cd5\u80fd\u591f\u63a5\u6536\u591a\u4e2a\u53c2\u6570\u5417\uff1f Dubbo\u5f53\u524d\u4f53\u7cfb\u53ef\u80fd\u7684\u4e0d\u8db3\u4e4b\u5904\uff08\u4e0eREST\u76f8\u5173\u7684\uff09 RpcContext\u7684\u4fb5\u5165\u6027 Protocol\u914d\u7f6e\u7684\u5c40\u9650\u6027 XML\u547d\u540d\u4e0d\u7b26\u5408spring\u89c4\u8303 REST\u6700\u4f73\u5b9e\u8df5 \u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5 \u6d4b\u8bd5\u73af\u5883 \u6d4b\u8bd5\u811a\u672c \u6d4b\u8bd5\u7ed3\u679c \u6269\u5c55\u8ba8\u8bba REST\u4e0eThrift\u3001Protobuf\u7b49\u7684\u5bf9\u6bd4 REST\u4e0e\u4f20\u7edfWebServices\u7684\u5bf9\u6bd4 JAX-RS\u4e0eSpring MVC\u7684\u5bf9\u6bd4 \u672a\u6765 \u6982\u8ff0 dubbo\u652f\u6301\u591a\u79cd\u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f\uff0c\u4f8b\u5982dubbo RPC\uff08\u4e8c\u8fdb\u5236\u5e8f\u5217\u5316 + tcp\u534f\u8bae\uff09\u3001http invoker\uff08\u4e8c\u8fdb\u5236\u5e8f\u5217\u5316 + http\u534f\u8bae\uff0c\u81f3\u5c11\u5728\u5f00\u6e90\u7248\u672c\u6ca1\u53d1\u73b0\u5bf9\u6587\u672c\u5e8f\u5217\u5316\u7684\u652f\u6301\uff09\u3001hessian\uff08\u4e8c\u8fdb\u5236\u5e8f\u5217\u5316 + http\u534f\u8bae\uff09\u3001WebServices \uff08\u6587\u672c\u5e8f\u5217\u5316 + http\u534f\u8bae\uff09\u7b49\u7b49\uff0c\u4f46\u7f3a\u4e4f\u5bf9\u5f53\u4eca\u7279\u522b\u6d41\u884c\u7684REST\u98ce\u683c\u8fdc\u7a0b\u8c03\u7528\uff08\u6587\u672c\u5e8f\u5217\u5316 + http\u534f\u8bae\uff09\u7684\u652f\u6301\u3002 \u6709\u9274\u4e8e\u6b64\uff0c\u6211\u4eec\u57fa\u4e8e\u6807\u51c6\u7684Java REST API\u2014\u2014JAX-RS 2.0\uff08Java API for RESTful Web Services\u7684\u7b80\u5199\uff09\uff0c\u4e3adubbo\u63d0\u4f9b\u4e86\u63a5\u8fd1\u900f\u660e\u7684REST\u8c03\u7528\u652f\u6301\u3002\u7531\u4e8e\u5b8c\u5168\u517c\u5bb9Java\u6807\u51c6API\uff0c\u6240\u4ee5\u4e3adubbo\u5f00\u53d1\u7684\u6240\u6709REST\u670d\u52a1\uff0c\u672a\u6765\u8131\u79bbdubbo\u6216\u8005\u4efb\u4f55\u7279\u5b9a\u7684REST\u5e95\u5c42\u5b9e\u73b0\u4e00\u822c\u4e5f\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u3002 \u7279\u522b\u503c\u5f97\u6307\u51fa\u7684\u662f\uff0c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u5b8c\u5168\u4e25\u683c\u9075\u5b88REST\u7684\u539f\u59cb\u5b9a\u4e49\u548c\u67b6\u6784\u98ce\u683c\u3002\u5373\u4f7f\u8457\u540d\u7684Twitter REST API\u4e5f\u4f1a\u6839\u636e\u60c5\u51b5\u505a\u9002\u5ea6\u8c03\u6574\uff0c\u800c\u4e0d\u662f\u673a\u68b0\u7684\u9075\u5b88\u539f\u59cb\u7684REST\u98ce\u683c\u3002 \u9644\u6ce8\uff1a\u6211\u4eec\u5c06\u8fd9\u4e2a\u529f\u80fd\u79f0\u4e4b\u4e3aREST\u98ce\u683c\u7684\u8fdc\u7a0b\u8c03\u7528\uff0c\u5373RESTful Remoting\uff08\u62bd\u8c61\u7684\u8fdc\u7a0b\u5904\u7406\u6216\u8005\u8c03\u7528\uff09\uff0c\u800c\u4e0d\u662f\u53ebRESTful RPC\uff08\u5177\u4f53\u7684\u8fdc\u7a0b\u201c\u8fc7\u7a0b\u201d\u8c03\u7528\uff09\uff0c\u662f\u56e0\u4e3aREST\u548cRPC\u672c\u8eab\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u4e24\u79cd\u4e0d\u540c\u7684\u98ce\u683c\u3002\u5728dubbo\u7684REST\u5b9e\u73b0\u4e2d\uff0c\u53ef\u4ee5\u8bf4\u6709\u4e24\u4e2a\u9762\u5411\uff0c\u5176\u4e00\u662f\u63d0\u4f9b\u6216\u6d88\u8d39\u6b63\u5e38\u7684REST\u670d\u52a1\uff0c\u5176\u4e8c\u662f\u5c06REST\u4f5c\u4e3adubbo RPC\u4f53\u7cfb\u4e2d\u4e00\u79cd\u534f\u8bae\u5b9e\u73b0\uff0c\u800cRESTful Remoting\u540c\u65f6\u6db5\u76d6\u4e86\u8fd9\u4e24\u4e2a\u9762\u5411\u3002 REST\u7684\u4f18\u70b9 \u4ee5\u4e0b\u6458\u81ea\u7ef4\u57fa\u767e\u79d1\uff1a \u53ef\u66f4\u9ad8\u6548\u5229\u7528\u7f13\u5b58\u6765\u63d0\u9ad8\u54cd\u5e94\u901f\u5ea6 \u901a\u8baf\u672c\u8eab\u7684\u65e0\u72b6\u6001\u6027\u53ef\u4ee5\u8ba9\u4e0d\u540c\u7684\u670d\u52a1\u5668\u7684\u5904\u7406\u4e00\u7cfb\u5217\u8bf7\u6c42\u4e2d\u7684\u4e0d\u540c\u8bf7\u6c42\uff0c\u63d0\u9ad8\u670d\u52a1\u5668\u7684\u6269\u5c55\u6027 \u6d4f\u89c8\u5668\u5373\u53ef\u4f5c\u4e3a\u5ba2\u6237\u7aef\uff0c\u7b80\u5316\u8f6f\u4ef6\u9700\u6c42 \u76f8\u5bf9\u4e8e\u5176\u4ed6\u53e0\u52a0\u5728HTTP\u534f\u8bae\u4e4b\u4e0a\u7684\u673a\u5236\uff0cREST\u7684\u8f6f\u4ef6\u4f9d\u8d56\u6027\u66f4\u5c0f \u4e0d\u9700\u8981\u989d\u5916\u7684\u8d44\u6e90\u53d1\u73b0\u673a\u5236 \u5728\u8f6f\u4ef6\u6280\u672f\u6f14\u8fdb\u4e2d\u7684\u957f\u671f\u7684\u517c\u5bb9\u6027\u66f4\u597d \u8fd9\u91cc\u6211\u8fd8\u60f3\u7279\u522b\u8865\u5145REST\u7684\u663e\u8457\u4f18\u70b9\uff1a\u57fa\u4e8e\u7b80\u5355\u7684\u6587\u672c\u683c\u5f0f\u6d88\u606f\u548c\u901a\u7528\u7684HTTP\u534f\u8bae\uff0c\u4f7f\u5b83\u5177\u5907\u6781\u5e7f\u7684\u9002\u7528\u6027\uff0c\u51e0\u4e4e\u6240\u6709\u8bed\u8a00\u548c\u5e73\u53f0\u90fd\u5bf9\u5b83\u63d0\u4f9b\u652f\u6301\uff0c\u540c\u65f6\u5176\u5b66\u4e60\u548c\u4f7f\u7528\u7684\u95e8\u69db\u4e5f\u8f83\u4f4e\u3002 \u5e94\u7528\u573a\u666f \u6b63\u662f\u7531\u4e8eREST\u5728\u9002\u7528\u6027\u65b9\u9762\u7684\u4f18\u70b9\uff0c\u6240\u4ee5\u5728dubbo\u4e2d\u652f\u6301REST\uff0c\u53ef\u4ee5\u4e3a\u5f53\u4eca\u591a\u6570\u4e3b\u6d41\u7684\u8fdc\u7a0b\u8c03\u7528\u573a\u666f\u90fd\u5e26\u6765\uff08\u663e\u8457\uff09\u597d\u5904\uff1a \u663e\u8457\u7b80\u5316\u4f01\u4e1a\u5185\u90e8\u7684\u5f02\u6784\u7cfb\u7edf\u4e4b\u95f4\u7684\uff08\u8de8\u8bed\u8a00\uff09\u8c03\u7528\u3002\u6b64\u5904\u4e3b\u8981\u9488\u5bf9\u8fd9\u79cd\u573a\u666f\uff1adubbo\u7684\u7cfb\u7edf\u505a\u670d\u52a1\u63d0\u4f9b\u7aef\uff0c\u5176\u4ed6\u8bed\u8a00\u7684\u7cfb\u7edf\uff08\u4e5f\u5305\u62ec\u67d0\u4e9b\u4e0d\u57fa\u4e8edubbo\u7684java\u7cfb\u7edf\uff09\u505a\u670d\u52a1\u6d88\u8d39\u7aef\uff0c\u4e24\u8005\u901a\u8fc7HTTP\u548c\u6587\u672c\u6d88\u606f\u8fdb\u884c\u901a\u4fe1\u3002\u5373\u4f7f\u76f8\u6bd4Thrift\u3001ProtoBuf\u7b49\u4e8c\u8fdb\u5236\u8de8\u8bed\u8a00\u8c03\u7528\u65b9\u6848\uff0cREST\u4e5f\u6709\u81ea\u5df1\u72ec\u7279\u7684\u4f18\u52bf\uff08\u8be6\u89c1\u540e\u9762\u8ba8\u8bba\uff09 \u663e\u8457\u7b80\u5316\u5bf9\u5916Open API\uff08\u5f00\u653e\u5e73\u53f0\uff09\u7684\u5f00\u53d1\u3002\u65e2\u53ef\u4ee5\u7528dubbo\u6765\u5f00\u53d1\u4e13\u95e8\u7684Open API\u5e94\u7528\uff0c\u4e5f\u53ef\u4ee5\u5c06\u539f\u5185\u90e8\u4f7f\u7528\u7684dubbo service\u76f4\u63a5\u201c\u900f\u660e\u201d\u53d1\u5e03\u4e3a\u5bf9\u5916\u7684Open REST API\uff08\u5f53\u7136dubbo\u672c\u8eab\u672a\u6765\u6700\u597d\u53ef\u4ee5\u8f83\u900f\u660e\u7684\u63d0\u4f9b\u8bf8\u5982\u6743\u9650\u63a7\u5236\u3001\u9891\u6b21\u63a7\u5236\u3001\u8ba1\u8d39\u7b49\u8bf8\u591a\u529f\u80fd\uff09 \u663e\u8457\u7b80\u5316\u624b\u673a\uff08\u5e73\u677f\uff09APP\u6216\u8005PC\u684c\u9762\u5ba2\u6237\u7aef\u5f00\u53d1\u3002\u7c7b\u4f3c\u4e8e2\uff0c\u65e2\u53ef\u4ee5\u7528dubbo\u6765\u5f00\u53d1\u4e13\u95e8\u9488\u5bf9\u65e0\u7ebf\u6216\u8005\u684c\u9762\u7684\u670d\u52a1\u5668\u7aef\uff0c\u4e5f\u53ef\u4ee5\u5c06\u539f\u5185\u90e8\u4f7f\u7528\u7684dubbo service\u76f4\u63a5\u201d\u900f\u660e\u201c\u7684\u66b4\u9732\u7ed9\u624b\u673aAPP\u6216\u684c\u9762\u7a0b\u5e8f\u3002\u5f53\u7136\u5728\u6709\u4e9b\u9879\u76ee\u4e2d\uff0c\u624b\u673a\u6216\u684c\u9762\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u4ee5\u4e0a\u573a\u666f2\u4e2d\u6240\u8ff0\u7684Open API\u3002 \u663e\u8457\u7b80\u5316\u6d4f\u89c8\u5668AJAX\u5e94\u7528\u7684\u5f00\u53d1\u3002\u7c7b\u4f3c\u4e8e2\uff0c\u65e2\u53ef\u4ee5\u7528dubbo\u6765\u5f00\u53d1\u4e13\u95e8\u7684AJAX\u670d\u52a1\u5668\u7aef\uff0c\u4e5f\u53ef\u4ee5\u5c06\u539f\u5185\u90e8\u4f7f\u7528\u7684dubbo service\u76f4\u63a5\u201d\u900f\u660e\u201c\u7684\u66b4\u9732\u7ed9\u6d4f\u89c8\u5668\u4e2dJavaScript\u3002\u5f53\u7136\uff0c\u5f88\u591aAJAX\u5e94\u7528\u66f4\u9002\u5408\u4e0eweb\u6846\u67b6\u534f\u540c\u5de5\u4f5c\uff0c\u6240\u4ee5\u76f4\u63a5\u8bbf\u95eedubbo service\u5728\u5f88\u591aweb\u9879\u76ee\u4e2d\u672a\u5fc5\u662f\u4e00\u79cd\u975e\u5e38\u4f18\u96c5\u7684\u67b6\u6784\u3002 \u4e3a\u4f01\u4e1a\u5185\u90e8\u7684dubbo\u7cfb\u7edf\u4e4b\u95f4\uff08\u5373\u670d\u52a1\u63d0\u4f9b\u7aef\u548c\u6d88\u8d39\u7aef\u90fd\u662f\u57fa\u4e8edubbo\u7684\u7cfb\u7edf\uff09\u63d0\u4f9b\u4e00\u79cd\u57fa\u4e8e\u6587\u672c\u7684\u3001\u6613\u8bfb\u7684\u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f\u3002 \u4e00\u5b9a\u7a0b\u5ea6\u7b80\u5316dubbo\u7cfb\u7edf\u5bf9\u5176\u5b83\u5f02\u6784\u7cfb\u7edf\u7684\u8c03\u7528\u3002\u53ef\u4ee5\u7528\u7c7b\u4f3cdubbo\u7684\u7b80\u4fbf\u65b9\u5f0f\u201c\u900f\u660e\u201d\u7684\u8c03\u7528\u975edubbo\u7cfb\u7edf\u63d0\u4f9b\u7684REST\u670d\u52a1\uff08\u4e0d\u7ba1\u670d\u52a1\u63d0\u4f9b\u7aef\u662f\u5728\u4f01\u4e1a\u5185\u90e8\u8fd8\u662f\u5916\u90e8\uff09 \u9700\u8981\u6307\u51fa\u7684\u662f\uff0c\u6211\u8ba4\u4e3a1\uff5e3\u662fdubbo\u7684REST\u8c03\u7528\u6700\u6709\u4ef7\u503c\u7684\u4e09\u79cd\u5e94\u7528\u573a\u666f\uff0c\u5e76\u4e14\u6211\u4eec\u4e3adubbo\u6dfb\u52a0REST\u8c03\u7528\uff0c\u5176\u6700\u4e3b\u8981\u5230\u76ee\u7684\u4e5f\u662f\u9762\u5411\u670d\u52a1\u7684\u63d0\u4f9b\u7aef\uff0c\u5373\u5f00\u53d1REST\u670d\u52a1\u6765\u63d0\u4f9b\u7ed9\u975edubbo\u7684\uff08\u5f02\u6784\uff09\u6d88\u8d39\u7aef\u3002 \u5f52\u7eb3\u8d77\u6765\uff0c\u6240\u6709\u5e94\u7528\u573a\u666f\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u501f\u7528Java\u8fc7\u53bb\u6700\u6d41\u884c\u7684\u5ba3\u4f20\u8bed\uff0c\u4e3adubbo\u6dfb\u52a0REST\u8c03\u7528\u540e\uff0c\u53ef\u4ee5\u5b9e\u73b0\u670d\u52a1\u7684\u201d\u4e00\u6b21\u7f16\u5199\uff0c\u5230\u5904\u8bbf\u95ee\u201c\uff0c\u7406\u8bba\u4e0a\u53ef\u4ee5\u9762\u5411\u5168\u4e16\u754c\u5f00\u653e\uff0c\u4ece\u800c\u771f\u6b63\u5b9e\u73b0\u6bd4\u8f83\u7406\u60f3\u5316\u7684\u9762\u5411\u670d\u52a1\u67b6\u6784\uff08SOA\uff09\u3002 \u5f53\u7136\uff0c\u4f20\u7edf\u7684WebServices\uff08WSDL/SOAP\uff09\u4e5f\u57fa\u672c\u540c\u6837\u80fd\u6ee1\u8db3\u4ee5\u4e0a\u573a\u666f\uff08\u9664\u4e86\u573a\u666f4\uff09\u7684\u8981\u6c42\uff08\u751a\u81f3\u8fd8\u80fd\u6ee1\u8db3\u90a3\u4e9b\u9700\u8981\u4f01\u4e1a\u7ea7\u7279\u6027\u7684\u573a\u666f\uff09\uff0c\u4f46\u7531\u4e8e\u5176\u590d\u6742\u6027\u7b49\u95ee\u9898\uff0c\u73b0\u5728\u5df2\u7ecf\u8d8a\u6765\u8d8a\u5c11\u88ab\u5b9e\u9645\u91c7\u7528\u4e86\u3002 \u5feb\u901f\u5165\u95e8 \u5728dubbo\u4e2d\u5f00\u53d1\u4e00\u4e2aREST\u98ce\u683c\u7684\u670d\u52a1\u4f1a\u6bd4\u8f83\u7b80\u5355\uff0c\u4e0b\u9762\u4ee5\u4e00\u4e2a\u6ce8\u518c\u7528\u6237\u7684\u7b80\u5355\u670d\u52a1\u4e3a\u4f8b\u8bf4\u660e\u3002 \u8fd9\u4e2a\u670d\u52a1\u8981\u5b9e\u73b0\u7684\u529f\u80fd\u662f\u63d0\u4f9b\u5982\u4e0bURL\uff08\u6ce8\uff1a\u8fd9\u4e2aURL\u4e0d\u662f\u5b8c\u5168\u7b26\u5408REST\u7684\u98ce\u683c\uff0c\u4f46\u662f\u66f4\u7b80\u5355\u5b9e\u7528\uff09\uff1a http://localhost:8080/users/register \u800c\u4efb\u4f55\u5ba2\u6237\u7aef\u90fd\u53ef\u4ee5\u5c06\u5305\u542b\u7528\u6237\u4fe1\u606f\u7684JSON\u5b57\u7b26\u4e32POST\u5230\u4ee5\u4e0aURL\u6765\u5b8c\u6210\u7528\u6237\u6ce8\u518c\u3002 \u9996\u5148\uff0c\u5f00\u53d1\u670d\u52a1\u7684\u63a5\u53e3\uff1a public class UserService { void registerUser(User user); } \u7136\u540e\uff0c\u5f00\u53d1\u670d\u52a1\u7684\u5b9e\u73b0\uff1a @Path( users ) public class UserServiceImpl implements UserService { @POST @Path( register ) @Consumes({MediaType.APPLICATION_JSON}) public void registerUser(User user) { // save the user... } } \u4e0a\u9762\u7684\u670d\u52a1\u5b9e\u73b0\u4ee3\u7801\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u662f\u7531\u4e8eREST\u670d\u52a1\u662f\u8981\u88ab\u53d1\u5e03\u5230\u7279\u5b9aHTTP URL\uff0c\u4f9b\u4efb\u610f\u8bed\u8a00\u5ba2\u6237\u7aef\u751a\u81f3\u6d4f\u89c8\u5668\u6765\u8bbf\u95ee\uff0c\u6240\u4ee5\u8fd9\u91cc\u8981\u989d\u5916\u6dfb\u52a0\u4e86\u51e0\u4e2aJAX-RS\u7684\u6807\u51c6annotation\u6765\u505a\u76f8\u5173\u7684\u914d\u7f6e\uff1a @Path(\"users\")\uff1a\u6307\u5b9a\u8bbf\u95eeUserService\u7684URL\u76f8\u5bf9\u8def\u5f84\u662f/users\uff0c\u5373http://localhost:8080/users @Path(\"register\")\uff1a\u6307\u5b9a\u8bbf\u95eeregisterUser()\u65b9\u6cd5\u7684URL\u76f8\u5bf9\u8def\u5f84\u662f/register\uff0c\u518d\u7ed3\u5408\u4e0a\u4e00\u4e2a@Path\u4e3aUserService\u6307\u5b9a\u7684\u8def\u5f84\uff0c\u5219\u8c03\u7528UserService.register()\u7684\u5b8c\u6574\u8def\u5f84\u4e3ahttp://localhost:8080/users/register @POST\uff1a\u6307\u5b9a\u8bbf\u95eeregisterUser()\u7528HTTP POST\u65b9\u6cd5 @Consumes({MediaType.APPLICATION_JSON})\uff1a\u6307\u5b9aregisterUser()\u63a5\u6536JSON\u683c\u5f0f\u7684\u6570\u636e\u3002REST\u6846\u67b6\u4f1a\u81ea\u52a8\u5c06JSON\u6570\u636e\u53cd\u5e8f\u5217\u5316\u4e3aUser\u5bf9\u8c61 \u6700\u540e\uff0c\u5728spring\u914d\u7f6e\u6587\u4ef6\u4e2d\u6dfb\u52a0\u6b64\u670d\u52a1\uff0c\u5373\u5b8c\u6210\u6240\u6709\u670d\u52a1\u5f00\u53d1\u5de5\u4f5c\uff1a ```xml ## \u6807\u51c6Java REST API\uff1aJAX-RS\u7b80\u4ecb JAX-RS\u662f\u6807\u51c6\u7684Java REST API\uff0c\u5f97\u5230\u4e86\u4e1a\u754c\u7684\u5e7f\u6cdb\u652f\u6301\u548c\u5e94\u7528\uff0c\u5176\u8457\u540d\u7684\u5f00\u6e90\u5b9e\u73b0\u5c31\u6709\u5f88\u591a\uff0c\u5305\u62ecOracle\u7684Jersey\uff0cRedHat\u7684RestEasy\uff0cApache\u7684CXF\u548cWink\uff0c\u4ee5\u53carestlet\u7b49\u7b49\u3002\u53e6\u5916\uff0c\u6240\u6709\u652f\u6301JavaEE 6.0\u4ee5\u4e0a\u89c4\u8303\u7684\u5546\u7528JavaEE\u5e94\u7528\u670d\u52a1\u5668\u90fd\u5bf9JAX-RS\u63d0\u4f9b\u4e86\u652f\u6301\u3002\u56e0\u6b64\uff0cJAX-RS\u662f\u4e00\u79cd\u5df2\u7ecf\u975e\u5e38\u6210\u719f\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5e76\u4e14\u91c7\u7528\u5b83\u6ca1\u6709\u4efb\u4f55\u6240\u8c13vendor lock-in\u7684\u95ee\u9898\u3002 JAX-RS\u5728\u7f51\u4e0a\u7684\u8d44\u6599\u975e\u5e38\u4e30\u5bcc\uff0c\u4f8b\u5982\u4e0b\u9762\u7684\u5165\u95e8\u6559\u7a0b\uff1a * Oracle\u5b98\u65b9\u7684tutorial\uff1ahttp://docs.oracle.com/javaee/7/tutorial/doc/jaxrs.htm * IBM developerWorks\u4e2d\u56fd\u7ad9\u6587\u7ae0\uff1ahttp://www.ibm.com/developerworks/cn/java/j-lo-jaxrs/ \u66f4\u591a\u7684\u8d44\u6599\u8bf7\u81ea\u884cgoogle\u6216\u8005\u767e\u5ea6\u4e00\u4e0b\u3002\u5c31\u5b66\u4e60JAX-RS\u6765\u8bf4\uff0c\u4e00\u822c\u4e3b\u8981\u638c\u63e1\u5176\u5404\u79cdannotation\u7684\u7528\u6cd5\u5373\u53ef\u3002 \u6ce8\u610f\uff1adubbo\u662f\u57fa\u4e8eJAX-RS 2.0\u7248\u672c\u7684\uff0c\u6709\u65f6\u5019\u9700\u8981\u6ce8\u610f\u4e00\u4e0b\u8d44\u6599\u6216REST\u5b9e\u73b0\u6240\u6d89\u53ca\u7684\u7248\u672c\u3002 ## REST\u670d\u52a1\u63d0\u4f9b\u7aef\u8be6\u89e3 \u4e0b\u9762\u6211\u4eec\u6269\u5145\u201c\u5feb\u901f\u5165\u95e8\u201d\u4e2d\u7684UserService\uff0c\u8fdb\u4e00\u6b65\u5c55\u793a\u5728dubbo\u4e2dREST\u670d\u52a1\u63d0\u4f9b\u7aef\u7684\u5f00\u53d1\u8981\u70b9\u3002 ### HTTP POST/GET\u7684\u5b9e\u73b0 REST\u670d\u52a1\u4e2d\u867d\u7136\u5efa\u8bae\u4f7f\u7528HTTP\u534f\u8bae\u4e2d\u56db\u79cd\u6807\u51c6\u65b9\u6cd5POST\u3001DELETE\u3001PUT\u3001GET\u6765\u5206\u522b\u5b9e\u73b0\u5e38\u89c1\u7684\u201c\u589e\u5220\u6539\u67e5\u201d\uff0c\u4f46\u5b9e\u9645\u4e2d\uff0c\u6211\u4eec\u4e00\u822c\u60c5\u51b5\u76f4\u63a5\u7528POST\u6765\u5b9e\u73b0\u201c\u589e\u6539\u201d\uff0cGET\u6765\u5b9e\u73b0\u201c\u5220\u67e5\u201d\u5373\u53ef\uff08DELETE\u548cPUT\u751a\u81f3\u4f1a\u88ab\u4e00\u4e9b\u9632\u706b\u5899\u963b\u6321\uff09\u3002 \u524d\u9762\u5df2\u7ecf\u7b80\u5355\u6f14\u793a\u4e86POST\u7684\u5b9e\u73b0\uff0c\u5728\u6b64\uff0c\u6211\u4eec\u4e3aUserService\u6dfb\u52a0\u4e00\u4e2a\u83b7\u53d6\u6ce8\u518c\u7528\u6237\u8d44\u6599\u7684\u529f\u80fd\uff0c\u6765\u6f14\u793aGET\u7684\u5b9e\u73b0\u3002 \u8fd9\u4e2a\u529f\u80fd\u5c31\u662f\u8981\u5b9e\u73b0\u5ba2\u6237\u7aef\u901a\u8fc7\u8bbf\u95ee\u5982\u4e0b\u4e0d\u540cURL\u6765\u83b7\u53d6\u4e0d\u540cID\u7684\u7528\u6237\u8d44\u6599\uff1a http://localhost:8080/users/1001 http://localhost:8080/users/1002 http://localhost:8080/users/1003 \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5176\u4ed6\u5f62\u5f0f\u7684URL\u6765\u8bbf\u95ee\u4e0d\u540cID\u7684\u7528\u6237\u8d44\u6599\uff0c\u4f8b\u5982\uff1a http://localhost:8080/users/load?id=1001 JAX-RS\u672c\u8eab\u53ef\u4ee5\u652f\u6301\u6240\u6709\u8fd9\u4e9b\u5f62\u5f0f\u3002\u4f46\u662f\u4e0a\u9762\u90a3\u79cd\u5728URL\u8def\u5f84\u4e2d\u5305\u542b\u67e5\u8be2\u53c2\u6570\u7684\u5f62\u5f0f\uff08http://localhost:8080/users/1001\uff09 \u66f4\u7b26\u5408REST\u7684\u4e00\u822c\u4e60\u60ef\uff0c\u6240\u4ee5\u66f4\u63a8\u8350\u5927\u5bb6\u6765\u4f7f\u7528\u3002\u4e0b\u9762\u6211\u4eec\u5c31\u4e3aUserService\u6dfb\u52a0\u4e00\u4e2agetUser()\u65b9\u6cd5\u6765\u5b9e\u73b0\u8fd9\u79cd\u5f62\u5f0f\u7684URL\u8bbf\u95ee\uff1a ```java @GET @Path( {id : \\\\d+} ) @Produces({MediaType.APPLICATION_JSON}) public User getUser(@PathParam( id ) Long id) { // ... } @GET\uff1a\u6307\u5b9a\u7528HTTP GET\u65b9\u6cd5\u8bbf\u95ee @Path(\"{id : \\d+}\")\uff1a\u6839\u636e\u4e0a\u9762\u7684\u529f\u80fd\u9700\u6c42\uff0c\u8bbf\u95eegetUser()\u7684URL\u5e94\u5f53\u662f\u201chttp://localhost:8080/users/ + \u4efb\u610f\u6570\u5b57\"\uff0c\u5e76\u4e14\u8fd9\u4e2a\u6570\u5b57\u8981\u88ab\u505a\u4e3a\u53c2\u6570\u4f20\u5165getUser()\u65b9\u6cd5\u3002 \u8fd9\u91cc\u7684annotation\u914d\u7f6e\u4e2d\uff0c@Path\u4e2d\u95f4\u7684{id: xxx}\u6307\u5b9aURL\u76f8\u5bf9\u8def\u5f84\u4e2d\u5305\u542b\u4e86\u540d\u4e3aid\u53c2\u6570\uff0c\u800c\u5b83\u7684\u503c\u4e5f\u5c06\u88ab\u81ea\u52a8\u4f20\u9012\u7ed9\u4e0b\u9762\u7528@PathParam(\"id\")\u4fee\u9970\u7684\u65b9\u6cd5\u53c2\u6570id\u3002{id:\u540e\u9762\u7d27\u8ddf\u7684\\d+\u662f\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u6307\u5b9a\u4e86id\u53c2\u6570\u5fc5\u987b\u662f\u6570\u5b57\u3002 @Produces({MediaType.APPLICATION_JSON})\uff1a\u6307\u5b9agetUser()\u8f93\u51faJSON\u683c\u5f0f\u7684\u6570\u636e\u3002\u6846\u67b6\u4f1a\u81ea\u52a8\u5c06User\u5bf9\u8c61\u5e8f\u5217\u5316\u4e3aJSON\u6570\u636e\u3002 Annotation\u653e\u5728\u63a5\u53e3\u7c7b\u8fd8\u662f\u5b9e\u73b0\u7c7b \u5728Dubbo\u4e2d\u5f00\u53d1REST\u670d\u52a1\u4e3b\u8981\u90fd\u662f\u901a\u8fc7JAX-RS\u7684annotation\u6765\u5b8c\u6210\u914d\u7f6e\u7684\uff0c\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u90fd\u662f\u5c06annotation\u653e\u5728\u670d\u52a1\u7684\u5b9e\u73b0\u7c7b\u4e2d\u3002\u4f46\u5176\u5b9e\uff0c\u6211\u4eec\u5b8c\u5168\u4e5f\u53ef\u4ee5\u5c06annotation\u653e\u5230\u670d\u52a1\u7684\u63a5\u53e3\u4e0a\uff0c\u8fd9\u4e24\u79cd\u65b9\u5f0f\u662f\u5b8c\u5168\u7b49\u4ef7\u7684\uff0c\u4f8b\u5982\uff1a @Path( users ) public interface UserService { @GET @Path( {id : \\\\d+} ) @Produces({MediaType.APPLICATION_JSON}) User getUser(@PathParam( id ) Long id); } \u5728\u4e00\u822c\u5e94\u7528\u4e2d\uff0c\u6211\u4eec\u5efa\u8bae\u5c06annotation\u653e\u5230\u670d\u52a1\u5b9e\u73b0\u7c7b\uff0c\u8fd9\u6837annotation\u548cjava\u5b9e\u73b0\u4ee3\u7801\u4f4d\u7f6e\u66f4\u63a5\u8fd1\uff0c\u66f4\u4fbf\u4e8e\u5f00\u53d1\u548c\u7ef4\u62a4\u3002\u53e6\u5916\u66f4\u91cd\u8981\u7684\u662f\uff0c\u6211\u4eec\u4e00\u822c\u503e\u5411\u4e8e\u907f\u514d\u5bf9\u63a5\u53e3\u7684\u6c61\u67d3\uff0c\u4fdd\u6301\u63a5\u53e3\u7684\u7eaf\u51c0\u6027\u548c\u5e7f\u6cdb\u9002\u7528\u6027\u3002 \u4f46\u662f\uff0c\u5982\u540e\u6587\u6240\u8ff0\uff0c\u5982\u679c\u6211\u4eec\u8981\u7528dubbo\u76f4\u63a5\u5f00\u53d1\u7684\u6d88\u8d39\u7aef\u6765\u8bbf\u95ee\u6b64\u670d\u52a1\uff0c\u5219annotation\u5fc5\u987b\u653e\u5230\u63a5\u53e3\u4e0a\u3002 \u5982\u679c\u63a5\u53e3\u548c\u5b9e\u73b0\u7c7b\u90fd\u540c\u65f6\u6dfb\u52a0\u4e86annotation\uff0c\u5219\u5b9e\u73b0\u7c7b\u7684annotation\u914d\u7f6e\u4f1a\u751f\u6548\uff0c\u63a5\u53e3\u4e0a\u7684annotation\u88ab\u76f4\u63a5\u5ffd\u7565\u3002 JSON\u3001XML\u7b49\u591a\u6570\u636e\u683c\u5f0f\u7684\u652f\u6301 \u5728dubbo\u4e2d\u5f00\u53d1\u7684REST\u670d\u52a1\u53ef\u4ee5\u540c\u65f6\u652f\u6301\u4f20\u8f93\u591a\u79cd\u683c\u5f0f\u7684\u6570\u636e\uff0c\u4ee5\u7ed9\u5ba2\u6237\u7aef\u63d0\u4f9b\u6700\u5927\u7684\u7075\u6d3b\u6027\u3002\u5176\u4e2d\u6211\u4eec\u76ee\u524d\u5bf9\u6700\u5e38\u7528\u7684JSON\u548cXML\u683c\u5f0f\u7279\u522b\u6dfb\u52a0\u4e86\u989d\u5916\u7684\u529f\u80fd\u3002 \u6bd4\u5982\uff0c\u6211\u4eec\u8981\u8ba9\u4e0a\u4f8b\u4e2d\u7684getUser()\u65b9\u6cd5\u652f\u6301\u5206\u522b\u8fd4\u56deJSON\u548cXML\u683c\u5f0f\u7684\u6570\u636e\uff0c\u53ea\u9700\u8981\u5728annotation\u4e2d\u540c\u65f6\u5305\u542b\u4e24\u79cd\u683c\u5f0f\u5373\u53ef\uff1a @Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_XML}) User getUser(@PathParam( id ) Long id); \u6216\u8005\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528\u5b57\u7b26\u4e32\uff08\u8fd8\u652f\u6301\u901a\u914d\u7b26\uff09\u8868\u793aMediaType\uff1a @Produces({ application/json , text/xml }) User getUser(@PathParam( id ) Long id); \u5982\u679c\u6240\u6709\u65b9\u6cd5\u90fd\u652f\u6301\u540c\u6837\u7c7b\u578b\u7684\u8f93\u5165\u8f93\u51fa\u6570\u636e\u683c\u5f0f\uff0c\u5219\u6211\u4eec\u65e0\u9700\u5728\u6bcf\u4e2a\u65b9\u6cd5\u4e0a\u505a\u914d\u7f6e\uff0c\u53ea\u9700\u8981\u5728\u670d\u52a1\u7c7b\u4e0a\u6dfb\u52a0annotation\u5373\u53ef\uff1a @Path( users ) @Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_XML}) @Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_XML}) public class UserServiceImpl implements UserService { // ... } \u5728\u4e00\u4e2aREST\u670d\u52a1\u540c\u65f6\u5bf9\u591a\u79cd\u6570\u636e\u683c\u5f0f\u652f\u6301\u7684\u60c5\u51b5\u4e0b\uff0c\u6839\u636eJAX-RS\u6807\u51c6\uff0c\u4e00\u822c\u662f\u901a\u8fc7HTTP\u4e2d\u7684MIME header\uff08content-type\u548caccept\uff09\u6765\u6307\u5b9a\u5f53\u524d\u60f3\u7528\u7684\u662f\u54ea\u79cd\u683c\u5f0f\u7684\u6570\u636e\u3002 \u4f46\u662f\u5728dubbo\u4e2d\uff0c\u6211\u4eec\u8fd8\u81ea\u52a8\u652f\u6301\u76ee\u524d\u4e1a\u754c\u666e\u904d\u4f7f\u7528\u7684\u65b9\u5f0f\uff0c\u5373\u7528\u4e00\u4e2aURL\u540e\u7f00\uff08.json\u548c.xml\uff09\u6765\u6307\u5b9a\u60f3\u7528\u7684\u6570\u636e\u683c\u5f0f\u3002\u4f8b\u5982\uff0c\u5728\u6dfb\u52a0\u4e0a\u8ff0annotation\u540e\uff0c\u76f4\u63a5\u8bbf\u95eehttp://localhost:8888/users/1001.json\u5219\u8868\u793a\u7528json\u683c\u5f0f\uff0c\u76f4\u63a5\u8bbf\u95eehttp://localhost:8888/users/1002.xml\u5219\u8868\u793a\u7528xml\u683c\u5f0f\uff0c\u6bd4\u7528HTTP Header\u66f4\u7b80\u5355\u76f4\u89c2\u3002Twitter\u3001\u5fae\u535a\u7b49\u7684REST API\u90fd\u662f\u91c7\u7528\u8fd9\u79cd\u65b9\u5f0f\u3002 \u5982\u679c\u4f60\u65e2\u4e0d\u52a0HTTP header\uff0c\u4e5f\u4e0d\u52a0\u540e\u7f00\uff0c\u5219dubbo\u7684REST\u4f1a\u4f18\u5148\u542f\u7528\u5728\u4ee5\u4e0aannotation\u5b9a\u4e49\u4e2d\u6392\u4f4d\u6700\u9760\u524d\u7684\u90a3\u79cd\u6570\u636e\u683c\u5f0f\u3002 \u6ce8\u610f\uff1a\u8fd9\u91cc\u8981\u652f\u6301XML\u683c\u5f0f\u6570\u636e\uff0c\u5728annotation\u4e2d\u65e2\u53ef\u4ee5\u7528MediaType.TEXT_XML\uff0c\u4e5f\u53ef\u4ee5\u7528MediaType.APPLICATION_XML\uff0c\u4f46\u662fTEXT_XML\u662f\u66f4\u5e38\u7528\u7684\uff0c\u5e76\u4e14\u5982\u679c\u8981\u5229\u7528\u4e0a\u8ff0\u7684URL\u540e\u7f00\u65b9\u5f0f\u6765\u6307\u5b9a\u6570\u636e\u683c\u5f0f\uff0c\u53ea\u80fd\u914d\u7f6e\u4e3aTEXT_XML\u624d\u80fd\u751f\u6548\u3002 \u4e2d\u6587\u5b57\u7b26\u652f\u6301 \u4e3a\u4e86\u5728dubbo REST\u4e2d\u6b63\u5e38\u8f93\u51fa\u4e2d\u6587\u5b57\u7b26\uff0c\u548c\u901a\u5e38\u7684Java web\u5e94\u7528\u4e00\u6837\uff0c\u6211\u4eec\u9700\u8981\u5c06HTTP\u54cd\u5e94\u7684contentType\u8bbe\u7f6e\u4e3aUTF-8\u7f16\u7801\u3002 \u57fa\u4e8eJAX-RS\u7684\u6807\u51c6\u7528\u6cd5\uff0c\u6211\u4eec\u53ea\u9700\u8981\u505a\u5982\u4e0bannotation\u914d\u7f6e\u5373\u53ef\uff1a @Produces({ application/json; charset=UTF-8 , text/xml; charset=UTF-8 }) User getUser(@PathParam( id ) Long id); \u4e3a\u4e86\u65b9\u4fbf\u7528\u6237\uff0c\u6211\u4eec\u5728dubbo REST\u4e2d\u76f4\u63a5\u6dfb\u52a0\u4e86\u4e00\u4e2a\u652f\u6301\u7c7b\uff0c\u6765\u5b9a\u4e49\u4ee5\u4e0a\u7684\u5e38\u91cf\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\uff0c\u51cf\u5c11\u51fa\u9519\u7684\u53ef\u80fd\u6027\u3002 @Produces({ContentType.APPLICATION_JSON_UTF_8, ContentType.TEXT_XML_UTF_8}) User getUser(@PathParam( id ) Long id); XML\u6570\u636e\u683c\u5f0f\u7684\u989d\u5916\u8981\u6c42 \u7531\u4e8eJAX-RS\u7684\u5b9e\u73b0\u4e00\u822c\u90fd\u7528\u6807\u51c6\u7684JAXB\uff08Java API for XML Binding\uff09\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316XML\u683c\u5f0f\u6570\u636e\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e3a\u6bcf\u4e00\u4e2a\u8981\u7528XML\u4f20\u8f93\u7684\u5bf9\u8c61\u6dfb\u52a0\u4e00\u4e2a\u7c7b\u7ea7\u522b\u7684JAXB annotation\uff0c\u5426\u5219\u5e8f\u5217\u5316\u5c06\u62a5\u9519\u3002\u4f8b\u5982\u4e3agetUser()\u4e2d\u8fd4\u56de\u7684User\u6dfb\u52a0\u5982\u4e0b\uff1a @XmlRootElement public class User implements Serializable { // ... } \u6b64\u5916\uff0c\u5982\u679cservice\u65b9\u6cd5\u4e2d\u7684\u8fd4\u56de\u503c\u662fJava\u7684 primitive\u7c7b\u578b\uff08\u5982int\uff0clong\uff0cfloat\uff0cdouble\u7b49\uff09\uff0c\u6700\u597d\u4e3a\u5b83\u4eec\u6dfb\u52a0\u4e00\u5c42wrapper\u5bf9\u8c61\uff0c\u56e0\u4e3aJAXB\u4e0d\u80fd\u76f4\u63a5\u5e8f\u5217\u5316primitive\u7c7b\u578b\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u60f3\u8ba9\u524d\u8ff0\u7684registerUser()\u65b9\u6cd5\u8fd4\u56de\u670d\u52a1\u5668\u7aef\u4e3a\u7528\u6237\u751f\u6210\u7684ID\u53f7\uff1a long registerUser(User user); \u7531\u4e8eprimitive\u7c7b\u578b\u4e0d\u88abJAXB\u5e8f\u5217\u5316\u652f\u6301\uff0c\u6240\u4ee5\u6dfb\u52a0\u4e00\u4e2awrapper\u5bf9\u8c61\uff1a @XmlRootElement public class RegistrationResult implements Serializable { private Long id; public RegistrationResult() { } public RegistrationResult(Long id) { this.id = id; } public Long getId() { return id; } public void setId(Long id) { this.id = id; } } \u5e76\u4fee\u6539service\u65b9\u6cd5\uff1a RegistrationResult registerUser(User user); \u8fd9\u6837\u4e0d\u4f46\u80fd\u591f\u89e3\u51b3XML\u5e8f\u5217\u5316\u7684\u95ee\u9898\uff0c\u800c\u4e14\u4f7f\u5f97\u8fd4\u56de\u7684\u6570\u636e\u90fd\u7b26\u5408XML\u548cJSON\u7684\u89c4\u8303\u3002\u4f8b\u5982\uff0c\u5728JSON\u4e2d\uff0c\u8fd4\u56de\u7684\u5c06\u662f\u5982\u4e0b\u5f62\u5f0f\uff1a { id : 1001} \u5982\u679c\u4e0d\u52a0wrapper\uff0cJSON\u8fd4\u56de\u503c\u5c06\u76f4\u63a5\u662f 1001 \u800c\u5728XML\u4e2d\uff0c\u52a0wrapper\u540e\u8fd4\u56de\u503c\u5c06\u662f\uff1a registrationResult id 1002 /id /registrationResult \u8fd9\u79cdwrapper\u5bf9\u8c61\u5176\u5b9e\u5229\u7528\u6240\u8c13Data Transfer Object\uff08DTO\uff09\u6a21\u5f0f\uff0c\u91c7\u7528DTO\u8fd8\u80fd\u5bf9\u4f20\u8f93\u6570\u636e\u505a\u66f4\u591a\u6709\u7528\u7684\u5b9a\u5236\u3002 \u5b9a\u5236\u5e8f\u5217\u5316 \u5982\u4e0a\u6240\u8ff0\uff0cREST\u7684\u5e95\u5c42\u5b9e\u73b0\u4f1a\u5728service\u7684\u5bf9\u8c61\u548cJSON/XML\u6570\u636e\u683c\u5f0f\u4e4b\u95f4\u81ea\u52a8\u505a\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u3002\u4f46\u6709\u4e9b\u573a\u666f\u4e0b\uff0c\u5982\u679c\u89c9\u5f97\u8fd9\u79cd\u81ea\u52a8\u8f6c\u6362\u4e0d\u6ee1\u8db3\u8981\u6c42\uff0c\u53ef\u4ee5\u5bf9\u5176\u505a\u5b9a\u5236\u3002 Dubbo\u4e2d\u7684REST\u5b9e\u73b0\u662f\u7528JAXB\u505aXML\u5e8f\u5217\u5316\uff0c\u7528Jackson\u505aJSON\u5e8f\u5217\u5316\uff0c\u6240\u4ee5\u5728\u5bf9\u8c61\u4e0a\u6dfb\u52a0JAXB\u6216Jackson\u7684annotation\u5373\u53ef\u4ee5\u5b9a\u5236\u6620\u5c04\u3002 \u4f8b\u5982\uff0c\u5b9a\u5236\u5bf9\u8c61\u5c5e\u6027\u6620\u5c04\u5230XML\u5143\u7d20\u7684\u540d\u5b57\uff1a @XmlRootElement @XmlAccessorType(XmlAccessType.FIELD) public class User implements Serializable { @XmlElement(name= username ) private String name; } \u5b9a\u5236\u5bf9\u8c61\u5c5e\u6027\u6620\u5c04\u5230JSON\u5b57\u6bb5\u7684\u540d\u5b57\uff1a public class User implements Serializable { @JsonProperty( username ) private String name; } \u66f4\u591a\u8d44\u6599\u8bf7\u53c2\u8003JAXB\u548cJackson\u7684\u5b98\u65b9\u6587\u6863\uff0c\u6216\u81ea\u884cgoogle\u3002 \u914d\u7f6eREST Server\u7684\u5b9e\u73b0 \u76ee\u524d\u5728dubbo\u4e2d\uff0c\u6211\u4eec\u652f\u63015\u79cd\u5d4c\u5165\u5f0frest server\u7684\u5b9e\u73b0\uff0c\u5e76\u540c\u65f6\u652f\u6301\u91c7\u7528\u5916\u90e8\u5e94\u7528\u670d\u52a1\u5668\u6765\u505arest server\u7684\u5b9e\u73b0\u3002rest server\u7684\u5b9e\u73b0\u662f\u901a\u8fc7\u5982\u4e0bserver\u8fd9\u4e2aXML\u5c5e\u6027\u6765\u9009\u62e9\u7684\uff1a dubbo:protocol name= rest server= jetty / \u4ee5\u4e0a\u914d\u7f6e\u9009\u7528\u4e86\u5d4c\u5165\u5f0f\u7684jetty\u6765\u505arest server\uff0c\u540c\u65f6\uff0c\u5982\u679c\u4e0d\u914d\u7f6eserver\u5c5e\u6027\uff0crest\u534f\u8bae\u9ed8\u8ba4\u4e5f\u662f\u9009\u7528jetty\u3002jetty\u662f\u975e\u5e38\u6210\u719f\u7684java servlet\u5bb9\u5668\uff0c\u5e76\u548cdubbo\u5df2\u7ecf\u6709\u8f83\u597d\u7684\u96c6\u6210\uff08\u76ee\u524d5\u79cd\u5d4c\u5165\u5f0fserver\u4e2d\u53ea\u6709jetty\u548c\u540e\u9762\u6240\u8ff0\u7684tomcat\u3001tjws\uff0c\u4e0edubbo\u76d1\u63a7\u7cfb\u7edf\u7b49\u5b8c\u6210\u4e86\u65e0\u7f1d\u7684\u96c6\u6210\uff09\uff0c\u6240\u4ee5\uff0c\u5982\u679c\u4f60\u7684dubbo\u7cfb\u7edf\u662f\u5355\u72ec\u542f\u52a8\u7684\u8fdb\u7a0b\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u9ed8\u8ba4\u91c7\u7528jetty\u5373\u53ef\u3002 dubbo:protocol name= rest server= tomcat / \u4ee5\u4e0a\u914d\u7f6e\u9009\u7528\u4e86\u5d4c\u5165\u5f0f\u7684tomcat\u6765\u505arest server\u3002\u5728\u5d4c\u5165\u5f0ftomcat\u4e0a\uff0cREST\u7684\u6027\u80fd\u6bd4jetty\u4e0a\u8981\u597d\u5f97\u591a\uff08\u53c2\u89c1\u540e\u9762\u7684\u57fa\u51c6\u6d4b\u8bd5\uff09\uff0c\u5efa\u8bae\u5728\u9700\u8981\u9ad8\u6027\u80fd\u7684\u573a\u666f\u4e0b\u91c7\u7528tomcat\u3002 dubbo:protocol name= rest server= netty / \u4ee5\u4e0a\u914d\u7f6e\u9009\u7528\u5d4c\u5165\u5f0f\u7684netty\u6765\u505arest server\u3002\uff08TODO more contents to add\uff09 dubbo:protocol name= rest server= tjws / (tjws is now deprecated) dubbo:protocol name= rest server= sunhttp / \u4ee5\u4e0a\u914d\u7f6e\u9009\u7528\u5d4c\u5165\u5f0f\u7684tjws\u6216Sun HTTP server\u6765\u505arest server\u3002\u8fd9\u4e24\u4e2aserver\u5b9e\u73b0\u975e\u5e38\u8f7b\u91cf\u7ea7\uff0c\u975e\u5e38\u65b9\u4fbf\u5728\u96c6\u6210\u6d4b\u8bd5\u4e2d\u5feb\u901f\u542f\u52a8\u4f7f\u7528\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u5728\u8d1f\u8377\u4e0d\u9ad8\u7684\u751f\u4ea7\u73af\u5883\u4e2d\u4f7f\u7528\u3002 \u6ce8\uff1atjws\u76ee\u524d\u5df2\u7ecf\u88abdeprecated\u6389\u4e86\uff0c\u56e0\u4e3a\u5b83\u4e0d\u80fd\u5f88\u597d\u7684\u548cservlet 3.1 API\u5de5\u4f5c\u3002 \u5982\u679c\u4f60\u7684dubbo\u7cfb\u7edf\u4e0d\u662f\u5355\u72ec\u542f\u52a8\u7684\u8fdb\u7a0b\uff0c\u800c\u662f\u90e8\u7f72\u5230\u4e86Java\u5e94\u7528\u670d\u52a1\u5668\u4e2d\uff0c\u5219\u5efa\u8bae\u4f60\u91c7\u7528\u4ee5\u4e0b\u914d\u7f6e\uff1a dubbo:protocol name= rest server= servlet / \u901a\u8fc7\u5c06server\u8bbe\u7f6e\u4e3aservlet\uff0cdubbo\u5c06\u91c7\u7528\u5916\u90e8\u5e94\u7528\u670d\u52a1\u5668\u7684servlet\u5bb9\u5668\u6765\u505arest server\u3002\u540c\u65f6\uff0c\u8fd8\u8981\u5728dubbo\u7cfb\u7edf\u7684web.xml\u4e2d\u6dfb\u52a0\u5982\u4e0b\u914d\u7f6e\uff1a web-app context-param param-name contextConfigLocation /param-name param-value /WEB-INF/classes/META-INF/spring/dubbo-demo-provider.xml /param-value /context-param listener listener-class org.apache.dubbo.remoting.http.servlet.BootstrapListener /listener-class /listener listener listener-class org.springframework.web.context.ContextLoaderListener /listener-class /listener servlet servlet-name dispatcher /servlet-name servlet-class org.apache.dubbo.remoting.http.servlet.DispatcherServlet /servlet-class load-on-startup 1 /load-on-startup /servlet servlet-mapping servlet-name dispatcher /servlet-name url-pattern /* /url-pattern /servlet-mapping /web-app \u5373\u5fc5\u987b\u5c06dubbo\u7684BootstrapListener\u548cDispatherServlet\u6dfb\u52a0\u5230web.xml\uff0c\u4ee5\u5b8c\u6210dubbo\u7684REST\u529f\u80fd\u4e0e\u5916\u90e8servlet\u5bb9\u5668\u7684\u96c6\u6210\u3002 \u6ce8\u610f\uff1a\u5982\u679c\u4f60\u662f\u7528spring\u7684ContextLoaderListener\u6765\u52a0\u8f7dspring\uff0c\u5219\u5fc5\u987b\u4fdd\u8bc1BootstrapListener\u914d\u7f6e\u5728ContextLoaderListener\u4e4b\u524d\uff0c\u5426\u5219dubbo\u521d\u59cb\u5316\u4f1a\u51fa\u9519\u3002 \u5176\u5b9e\uff0c\u8fd9\u79cd\u573a\u666f\u4e0b\u4f60\u4f9d\u7136\u53ef\u4ee5\u575a\u6301\u7528\u5d4c\u5165\u5f0fserver\uff0c\u4f46\u5916\u90e8\u5e94\u7528\u670d\u52a1\u5668\u7684servlet\u5bb9\u5668\u5f80\u5f80\u6bd4\u5d4c\u5165\u5f0fserver\u66f4\u52a0\u5f3a\u5927\uff08\u7279\u522b\u662f\u5982\u679c\u4f60\u662f\u90e8\u7f72\u5230\u66f4\u5065\u58ee\u66f4\u53ef\u4f38\u7f29\u7684WebLogic\uff0cWebSphere\u7b49\uff09\uff0c\u53e6\u5916\u6709\u65f6\u4e5f\u4fbf\u4e8e\u5728\u5e94\u7528\u670d\u52a1\u5668\u505a\u7edf\u4e00\u7ba1\u7406\u3001\u76d1\u63a7\u7b49\u7b49\u3002 \u83b7\u53d6\u4e0a\u4e0b\u6587\uff08Context\uff09\u4fe1\u606f \u5728\u8fdc\u7a0b\u8c03\u7528\u4e2d\uff0c\u503c\u5f97\u83b7\u53d6\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u53ef\u80fd\u6709\u5f88\u591a\u79cd\uff0c\u8fd9\u91cc\u7279\u522b\u4ee5\u83b7\u53d6\u5ba2\u6237\u7aefIP\u4e3a\u4f8b\u3002 \u5728dubbo\u7684REST\u4e2d\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u65b9\u5f0f\u83b7\u53d6\u5ba2\u6237\u7aefIP\u3002 \u7b2c\u4e00\u79cd\u65b9\u5f0f\uff0c\u7528JAX-RS\u6807\u51c6\u7684@Context annotation\uff1a public User getUser(@PathParam( id ) Long id, @Context HttpServletRequest request) { System.out.println( Client address is + request.getRemoteAddr()); } \u7528Context\u4fee\u9970getUser()\u7684\u4e00\u4e2a\u65b9\u6cd5\u53c2\u6570\u540e\uff0c\u5c31\u53ef\u4ee5\u5c06\u5f53\u524d\u7684HttpServletRequest\u6ce8\u5165\u8fdb\u6765\uff0c\u7136\u540e\u76f4\u63a5\u8c03\u7528servlet api\u83b7\u53d6IP\u3002 \u6ce8\u610f\uff1a\u8fd9\u79cd\u65b9\u5f0f\u53ea\u80fd\u5728\u8bbe\u7f6eserver=\"tjws\"\u6216\u8005server=\"tomcat\"\u6216\u8005server=\"jetty\"\u6216\u8005server=\"servlet\"\u7684\u65f6\u5019\u624d\u80fd\u5de5\u4f5c\uff0c\u56e0\u4e3a\u53ea\u6709\u8fd9\u51e0\u79cdREST server\u7684\u5b9e\u73b0\u624d\u63d0\u4f9b\u4e86servlet\u5bb9\u5668\u3002\u53e6\u5916\uff0c\u6807\u51c6\u7684JAX-RS\u8fd8\u652f\u6301\u7528@Context\u4fee\u9970service\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u5b57\u6bb5\u6765\u83b7\u53d6HttpServletRequest\uff0c\u4f46\u5728dubbo\u4e2d\u6211\u4eec\u6ca1\u6709\u5bf9\u6b64\u4f5c\u51fa\u652f\u6301\u3002 \u7b2c\u4e8c\u79cd\u65b9\u5f0f\uff0c\u7528dubbo\u4e2d\u5e38\u7528\u7684RpcContext\uff1a public User getUser(@PathParam( id ) Long id) { System.out.println( Client address is + RpcContext.getContext().getRemoteAddressString()); } \u6ce8\u610f\uff1a\u8fd9\u79cd\u65b9\u5f0f\u53ea\u80fd\u5728\u8bbe\u7f6eserver=\"jetty\"\u6216\u8005server=\"tomcat\"\u6216\u8005server=\"servlet\"\u6216\u8005server=\"tjws\"\u7684\u65f6\u5019\u624d\u80fd\u5de5\u4f5c\u3002\u53e6\u5916\uff0c\u76ee\u524ddubbo\u7684RpcContext\u662f\u4e00\u79cd\u6bd4\u8f83\u6709\u4fb5\u5165\u6027\u7684\u7528\u6cd5\uff0c\u672a\u6765\u6211\u4eec\u5f88\u53ef\u80fd\u4f1a\u505a\u51fa\u91cd\u6784\u3002 \u5982\u679c\u4f60\u60f3\u4fdd\u6301\u4f60\u7684\u9879\u76ee\u5bf9JAX-RS\u7684\u517c\u5bb9\u6027\uff0c\u672a\u6765\u8131\u79bbdubbo\u4e5f\u53ef\u4ee5\u8fd0\u884c\uff0c\u8bf7\u9009\u62e9\u7b2c\u4e00\u79cd\u65b9\u5f0f\u3002\u5982\u679c\u4f60\u60f3\u8981\u66f4\u4f18\u96c5\u7684\u670d\u52a1\u63a5\u53e3\u5b9a\u4e49\uff0c\u8bf7\u9009\u7528\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u3002 \u6b64\u5916\uff0c\u5728\u6700\u65b0\u7684dubbo rest\u4e2d\uff0c\u8fd8\u652f\u6301\u901a\u8fc7RpcContext\u6765\u83b7\u53d6HttpServletRequest\u548cHttpServletResponse\uff0c\u4ee5\u63d0\u4f9b\u66f4\u5927\u7684\u7075\u6d3b\u6027\u6765\u65b9\u4fbf\u7528\u6237\u5b9e\u73b0\u67d0\u4e9b\u590d\u6742\u529f\u80fd\uff0c\u6bd4\u5982\u5728dubbo\u6807\u51c6\u7684filter\u4e2d\u8bbf\u95eeHTTP Header\u3002\u7528\u6cd5\u793a\u4f8b\u5982\u4e0b\uff1a if (RpcContext.getContext().getRequest() != null RpcContext.getContext().getRequest() instanceof HttpServletRequest) { System.out.println( Client address is + ((HttpServletRequest) RpcContext.getContext().getRequest()).getRemoteAddr()); } if (RpcContext.getContext().getResponse() != null RpcContext.getContext().getResponse() instanceof HttpServletResponse) { System.out.println( Response object from RpcContext: + RpcContext.getContext().getResponse()); } \u6ce8\u610f\uff1a\u4e3a\u4e86\u4fdd\u6301\u534f\u8bae\u7684\u4e2d\u7acb\u6027\uff0cRpcContext.getRequest()\u548cRpcContext.getResponse()\u8fd4\u56de\u7684\u4ec5\u4ec5\u662f\u4e00\u4e2aObject\u7c7b\uff0c\u800c\u4e14\u53ef\u80fd\u4e3anull\u3002\u6240\u4ee5\uff0c\u4f60\u5fc5\u987b\u81ea\u5df1\u505anull\u548c\u7c7b\u578b\u7684\u68c0\u67e5\u3002 \u6ce8\u610f\uff1a\u53ea\u6709\u5728\u8bbe\u7f6eserver=\"jetty\"\u6216\u8005server=\"tomcat\"\u6216\u8005server=\"servlet\"\u7684\u65f6\u5019\uff0c\u4f60\u624d\u80fd\u901a\u8fc7\u4ee5\u4e0a\u65b9\u6cd5\u6b63\u786e\u7684\u5f97\u5230HttpServletRequest\u548cHttpServletResponse\uff0c\u56e0\u4e3a\u53ea\u6709\u8fd9\u51e0\u79cdserver\u5b9e\u73b0\u4e86servlet\u5bb9\u5668\u3002 \u4e3a\u4e86\u7b80\u5316\u7f16\u7a0b\uff0c\u5728\u6b64\u4f60\u4e5f\u53ef\u4ee5\u7528\u6cdb\u578b\u7684\u65b9\u5f0f\u6765\u76f4\u63a5\u83b7\u53d6\u7279\u5b9a\u7c7b\u578b\u7684request/response\uff1a if (RpcContext.getContext().getRequest(HttpServletRequest.class) != null) { System.out.println( Client address is + RpcContext.getContext().getRequest(HttpServletRequest.class).getRemoteAddr()); } if (RpcContext.getContext().getResponse(HttpServletResponse.class) != null) { System.out.println( Response object from RpcContext: + RpcContext.getContext().getResponse(HttpServletResponse.class)); } \u5982\u679crequest/response\u4e0d\u7b26\u5408\u6307\u5b9a\u7684\u7c7b\u578b\uff0c\u8fd9\u91cc\u4e5f\u4f1a\u8fd4\u56denull\u3002 \u914d\u7f6e\u7aef\u53e3\u53f7\u548cContext Path dubbo\u4e2d\u7684rest\u534f\u8bae\u9ed8\u8ba4\u5c06\u91c7\u752880\u7aef\u53e3\uff0c\u5982\u679c\u60f3\u4fee\u6539\u7aef\u53e3\uff0c\u76f4\u63a5\u914d\u7f6e\uff1a dubbo:protocol name= rest port= 8888 / \u53e6\u5916\uff0c\u5982\u524d\u6240\u8ff0\uff0c\u6211\u4eec\u53ef\u4ee5\u7528@Path\u6765\u914d\u7f6e\u5355\u4e2arest\u670d\u52a1\u7684URL\u76f8\u5bf9\u8def\u5f84\u3002\u4f46\u5176\u5b9e\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u6240\u6709rest\u670d\u52a1\u90fd\u9002\u7528\u7684\u57fa\u7840\u76f8\u5bf9\u8def\u5f84\uff0c\u5373java web\u5e94\u7528\u4e2d\u5e38\u8bf4\u7684context path\u3002 \u53ea\u9700\u8981\u6dfb\u52a0\u5982\u4e0bcontextpath\u5c5e\u6027\u5373\u53ef\uff1a dubbo:protocol name= rest port= 8888 contextpath= services / \u4ee5\u524d\u9762\u4ee3\u7801\u4e3a\u4f8b\uff1a @Path( users ) public class UserServiceImpl implements UserService { @POST @Path( register ) @Consumes({MediaType.APPLICATION_JSON}) public void registerUser(User user) { // save the user... } } \u73b0\u5728registerUser()\u7684\u5b8c\u6574\u8bbf\u95ee\u8def\u5f84\u4e3a\uff1a http://localhost:8888/services/users/register \u6ce8\u610f\uff1a\u5982\u679c\u4f60\u662f\u9009\u7528\u5916\u90e8\u5e94\u7528\u670d\u52a1\u5668\u505arest server\uff0c\u5373\u914d\u7f6e: dubbo:protocol name= rest port= 8888 contextpath= services server= servlet / \u5219\u5fc5\u987b\u4fdd\u8bc1\u8fd9\u91cc\u8bbe\u7f6e\u7684port\u3001contextpath\uff0c\u4e0e\u5916\u90e8\u5e94\u7528\u670d\u52a1\u5668\u7684\u7aef\u53e3\u3001DispatcherServlet\u7684\u4e0a\u4e0b\u6587\u8def\u5f84\uff08\u5373webapp path\u52a0\u4e0aservlet url pattern\uff09\u4fdd\u6301\u4e00\u81f4\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u90e8\u7f72\u4e3atomcat ROOT\u8def\u5f84\u7684\u5e94\u7528\uff0c\u8fd9\u91cc\u7684contextpath\u5fc5\u987b\u4e0eweb.xml\u4e2dDispacherServlet\u7684 url-pattern/ \u5b8c\u5168\u4e00\u81f4\uff1a servlet-mapping servlet-name dispatcher /servlet-name url-pattern /services/* /url-pattern /servlet-mapping \u914d\u7f6e\u7ebf\u7a0b\u6570\u548cIO\u7ebf\u7a0b\u6570 \u53ef\u4ee5\u4e3arest\u670d\u52a1\u914d\u7f6e\u7ebf\u7a0b\u6c60\u5927\u5c0f\uff1a dubbo:protocol name= rest threads= 500 / \u6ce8\u610f\uff1a\u76ee\u524d\u7ebf\u7a0b\u6c60\u7684\u8bbe\u7f6e\u53ea\u6709\u5f53server=\"netty\"\u6216\u8005server=\"jetty\"\u6216\u8005server=\"tomcat\"\u7684\u65f6\u5019\u624d\u80fd\u751f\u6548\u3002\u53e6\u5916\uff0c\u5982\u679cserver=\"servlet\"\uff0c\u7531\u4e8e\u8fd9\u65f6\u5019\u542f\u7528\u7684\u662f\u5916\u90e8\u5e94\u7528\u670d\u52a1\u5668\u505arest server\uff0c\u4e0d\u53d7dubbo\u63a7\u5236\uff0c\u6240\u4ee5\u8fd9\u91cc\u7684\u7ebf\u7a0b\u6c60\u8bbe\u7f6e\u4e5f\u65e0\u6548\u3002 \u5982\u679c\u662f\u9009\u7528netty server\uff0c\u8fd8\u53ef\u4ee5\u914d\u7f6eNetty\u7684IO worker\u7ebf\u7a0b\u6570\uff1a dubbo:protocol name= rest iothreads= 5 threads= 100 / \u914d\u7f6e\u957f\u8fde\u63a5 Dubbo\u4e2d\u7684rest\u670d\u52a1\u9ed8\u8ba4\u90fd\u662f\u91c7\u7528http\u957f\u8fde\u63a5\u6765\u8bbf\u95ee\uff0c\u5982\u679c\u60f3\u5207\u6362\u4e3a\u77ed\u8fde\u63a5\uff0c\u76f4\u63a5\u914d\u7f6e\uff1a dubbo:protocol name= rest keepalive= false / \u6ce8\u610f\uff1a\u8fd9\u4e2a\u914d\u7f6e\u76ee\u524d\u53ea\u5bf9server=\"netty\"\u548cserver=\"tomcat\"\u624d\u80fd\u751f\u6548\u3002 \u914d\u7f6e\u6700\u5927\u7684HTTP\u8fde\u63a5\u6570 \u53ef\u4ee5\u914d\u7f6e\u670d\u52a1\u5668\u63d0\u4f9b\u7aef\u6240\u80fd\u540c\u65f6\u63a5\u6536\u7684\u6700\u5927HTTP\u8fde\u63a5\u6570\uff0c\u9632\u6b62REST server\u88ab\u8fc7\u591a\u8fde\u63a5\u6491\u7206\uff0c\u4ee5\u4f5c\u4e3a\u4e00\u79cd\u6700\u57fa\u672c\u7684\u81ea\u6211\u4fdd\u62a4\u673a\u5236\uff1a dubbo:protocol name= rest accepts= 500 server= tomcat/ \u6ce8\u610f\uff1a\u8fd9\u4e2a\u914d\u7f6e\u76ee\u524d\u53ea\u5bf9server=\"tomcat\"\u624d\u80fd\u751f\u6548\u3002 \u914d\u7f6e\u6bcf\u4e2a\u6d88\u8d39\u7aef\u7684\u8d85\u65f6\u65f6\u95f4\u548cHTTP\u8fde\u63a5\u6570 \u5982\u679crest\u670d\u52a1\u7684\u6d88\u8d39\u7aef\u4e5f\u662fdubbo\u7cfb\u7edf\uff0c\u53ef\u4ee5\u50cf\u5176\u4ed6dubbo RPC\u673a\u5236\u4e00\u6837\uff0c\u914d\u7f6e\u6d88\u8d39\u7aef\u8c03\u7528\u6b64rest\u670d\u52a1\u7684\u6700\u5927\u8d85\u65f6\u65f6\u95f4\u4ee5\u53ca\u6bcf\u4e2a\u6d88\u8d39\u7aef\u6240\u80fd\u542f\u52a8\u7684\u6700\u5927HTTP\u8fde\u63a5\u6570\u3002 dubbo:service interface= xxx ref= xxx protocol= rest timeout= 2000 connections= 10 / \u5f53\u7136\uff0c\u7531\u4e8e\u8fd9\u4e2a\u914d\u7f6e\u9488\u5bf9\u6d88\u8d39\u7aef\u751f\u6548\u7684\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u5728\u6d88\u8d39\u7aef\u914d\u7f6e\uff1a dubbo:reference id= xxx interface= xxx timeout= 2000 connections= 10 / \u4f46\u662f\uff0c\u901a\u5e38\u6211\u4eec\u5efa\u8bae\u914d\u7f6e\u5728\u670d\u52a1\u63d0\u4f9b\u7aef\u63d0\u4f9b\u6b64\u7c7b\u914d\u7f6e\u3002\u6309\u7167dubbo\u5b98\u65b9\u6587\u6863\u7684\u8bf4\u6cd5\uff1a\u201cProvider\u4e0a\u5c3d\u91cf\u591a\u914d\u7f6eConsumer\u7aef\u7684\u5c5e\u6027\uff0c\u8ba9Provider\u5b9e\u73b0\u8005\u4e00\u5f00\u59cb\u5c31\u601d\u8003Provider\u670d\u52a1\u7279\u70b9\u3001\u670d\u52a1\u8d28\u91cf\u7684\u95ee\u9898\u3002\u201d \u6ce8\u610f\uff1a\u5982\u679cdubbo\u7684REST\u670d\u52a1\u662f\u53d1\u5e03\u7ed9\u975edubbo\u7684\u5ba2\u6237\u7aef\u4f7f\u7528\uff0c\u5219\u8fd9\u91cc dubbo:service/ \u4e0a\u7684\u914d\u7f6e\u5b8c\u5168\u65e0\u6548\uff0c\u56e0\u4e3a\u8fd9\u79cd\u5ba2\u6237\u7aef\u4e0d\u53d7dubbo\u63a7\u5236\u3002 GZIP\u6570\u636e\u538b\u7f29 Dubbo\u7684REST\u652f\u6301\u7528GZIP\u538b\u7f29\u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u6570\u636e\uff0c\u4ee5\u51cf\u5c11\u7f51\u7edc\u4f20\u8f93\u65f6\u95f4\u548c\u5e26\u5bbd\u5360\u7528\uff0c\u4f46\u8fd9\u79cd\u65b9\u5f0f\u4f1a\u4e5f\u589e\u52a0CPU\u5f00\u9500\u3002 TODO more contents to add \u7528Annotation\u53d6\u4ee3\u90e8\u5206Spring XML\u914d\u7f6e \u4ee5\u4e0a\u6240\u6709\u7684\u8ba8\u8bba\u90fd\u662f\u57fa\u4e8edubbo\u5728spring\u4e2d\u7684xml\u914d\u7f6e\u3002\u4f46\u662f\uff0cdubbo/spring\u672c\u8eab\u4e5f\u652f\u6301\u7528annotation\u6765\u4f5c\u914d\u7f6e\uff0c\u6240\u4ee5\u6211\u4eec\u4e5f\u53ef\u4ee5\u6309dubbo\u5b98\u65b9\u6587\u6863\u4e2d\u7684\u6b65\u9aa4\uff0c\u628a\u76f8\u5173annotation\u52a0\u5230REST\u670d\u52a1\u7684\u5b9e\u73b0\u4e2d\uff0c\u53d6\u4ee3\u4e00\u4e9bxml\u914d\u7f6e\uff0c\u4f8b\u5982\uff1a @Service(protocol = rest ) @Path( users ) public class UserServiceImpl implements UserService { @Autowired private UserRepository userRepository; @POST @Path( register ) @Consumes({MediaType.APPLICATION_JSON}) public void registerUser(User user) { // save the user userRepository.save(user); } } annotation\u7684\u914d\u7f6e\u66f4\u7b80\u5355\u66f4\u7cbe\u786e\uff0c\u7ecf\u5e38\u4e5f\u66f4\u4fbf\u4e8e\u7ef4\u62a4\uff08\u5f53\u7136\u73b0\u4ee3IDE\u90fd\u53ef\u4ee5\u5728xml\u4e2d\u652f\u6301\u6bd4\u5982\u7c7b\u540d\u91cd\u6784\uff0c\u6240\u4ee5\u5c31\u8fd9\u91cc\u7684\u7279\u5b9a\u7528\u4f8b\u800c\u8a00\uff0cxml\u7684\u7ef4\u62a4\u6027\u4e5f\u5f88\u597d\uff09\u3002\u800cxml\u5bf9\u4ee3\u7801\u7684\u4fb5\u5165\u6027\u66f4\u5c0f\u4e00\u4e9b\uff0c\u5c24\u5176\u6709\u5229\u4e8e\u52a8\u6001\u4fee\u6539\u914d\u7f6e\uff0c\u7279\u522b\u662f\u6bd4\u5982\u4f60\u8981\u9488\u5bf9\u5355\u4e2a\u670d\u52a1\u914d\u7f6e\u8fde\u63a5\u8d85\u65f6\u65f6\u95f4\u3001\u6bcf\u5ba2\u6237\u7aef\u6700\u5927\u8fde\u63a5\u6570\u3001\u96c6\u7fa4\u7b56\u7565\u3001\u6743\u91cd\u7b49\u7b49\u3002\u53e6\u5916\uff0c\u7279\u522b\u5bf9\u590d\u6742\u5e94\u7528\u6216\u8005\u6a21\u5757\u6765\u8bf4\uff0cxml\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e2d\u5fc3\u70b9\u6765\u6db5\u76d6\u7684\u6240\u6709\u7ec4\u4ef6\u548c\u914d\u7f6e\uff0c\u66f4\u4e00\u76ee\u4e86\u7136\uff0c\u4e00\u822c\u66f4\u4fbf\u4e8e\u9879\u76ee\u957f\u65f6\u671f\u7684\u7ef4\u62a4\u3002 \u5f53\u7136\uff0c\u9009\u62e9\u54ea\u79cd\u914d\u7f6e\u65b9\u5f0f\u6ca1\u6709\u7edd\u5bf9\u7684\u4f18\u52a3\uff0c\u548c\u4e2a\u4eba\u7684\u504f\u597d\u4e5f\u4e0d\u65e0\u5173\u7cfb\u3002 \u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684Filter\u3001Interceptor\u7b49 Dubbo\u7684REST\u4e5f\u652f\u6301JAX-RS\u6807\u51c6\u7684Filter\u548cInterceptor\uff0c\u4ee5\u65b9\u4fbf\u5bf9REST\u7684\u8bf7\u6c42\u4e0e\u54cd\u5e94\u8fc7\u7a0b\u505a\u5b9a\u5236\u5316\u7684\u62e6\u622a\u5904\u7406\u3002 \u5176\u4e2d\uff0cFilter\u4e3b\u8981\u7528\u4e8e\u8bbf\u95ee\u548c\u8bbe\u7f6eHTTP\u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u53c2\u6570\u3001URI\u7b49\u7b49\u3002\u4f8b\u5982\uff0c\u8bbe\u7f6eHTTP\u54cd\u5e94\u7684cache header\uff1a public class CacheControlFilter implements ContainerResponseFilter { public void filter(ContainerRequestContext req, ContainerResponseContext res) { if (req.getMethod().equals( GET )) { res.getHeaders().add( Cache-Control , someValue ); } } } Interceptor\u4e3b\u8981\u7528\u4e8e\u8bbf\u95ee\u548c\u4fee\u6539\u8f93\u5165\u4e0e\u8f93\u51fa\u5b57\u8282\u6d41\uff0c\u4f8b\u5982\uff0c\u624b\u52a8\u6dfb\u52a0GZIP\u538b\u7f29\uff1a public class GZIPWriterInterceptor implements WriterInterceptor { @Override public void aroundWriteTo(WriterInterceptorContext context) throws IOException, WebApplicationException { OutputStream outputStream = context.getOutputStream(); context.setOutputStream(new GZIPOutputStream(outputStream)); context.proceed(); } } \u5728\u6807\u51c6JAX-RS\u5e94\u7528\u4e2d\uff0c\u6211\u4eec\u4e00\u822c\u662f\u4e3aFilter\u548cInterceptor\u6dfb\u52a0@Provider annotation\uff0c\u7136\u540eJAX-RS runtime\u4f1a\u81ea\u52a8\u53d1\u73b0\u5e76\u542f\u7528\u5b83\u4eec\u3002\u800c\u5728dubbo\u4e2d\uff0c\u6211\u4eec\u662f\u901a\u8fc7\u6dfb\u52a0XML\u914d\u7f6e\u7684\u65b9\u5f0f\u6765\u6ce8\u518cFilter\u548cInterceptor\uff1a dubbo:protocol name= rest port= 8888 extension= xxx.TraceInterceptor, xxx.TraceFilter / \u5728\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06Filter\u3001Interceptor\u548cDynamicFeature\u8fd9\u4e09\u79cd\u7c7b\u578b\u7684\u5bf9\u8c61\u90fd\u6dfb\u52a0\u5230 extension \u5c5e\u6027\u4e0a\uff0c\u591a\u4e2a\u4e4b\u95f4\u7528\u9017\u53f7\u5206\u9694\u3002\uff08DynamicFeature\u662f\u53e6\u4e00\u4e2a\u63a5\u53e3\uff0c\u53ef\u4ee5\u65b9\u4fbf\u6211\u4eec\u66f4\u52a8\u6001\u7684\u542f\u7528Filter\u548cInterceptor\uff0c\u611f\u5174\u8da3\u8bf7\u81ea\u884cgoogle\u3002\uff09 \u5f53\u7136\uff0cdubbo\u81ea\u8eab\u4e5f\u652f\u6301Filter\u7684\u6982\u5ff5\uff0c\u4f46\u6211\u4eec\u8fd9\u91cc\u8ba8\u8bba\u7684Filter\u548cInterceptor\u66f4\u52a0\u63a5\u8fd1\u534f\u8bae\u5b9e\u73b0\u7684\u5e95\u5c42\uff0c\u76f8\u6bd4dubbo\u7684filter\uff0c\u53ef\u4ee5\u505a\u66f4\u5e95\u5c42\u7684\u5b9a\u5236\u5316\u3002 \u6ce8\uff1a\u8fd9\u91cc\u7684XML\u5c5e\u6027\u53ebextension\uff0c\u800c\u4e0d\u662f\u53ebinterceptor\u6216\u8005filter\uff0c\u662f\u56e0\u4e3a\u9664\u4e86Interceptor\u548cFilter\uff0c\u672a\u6765\u6211\u4eec\u8fd8\u4f1a\u6dfb\u52a0\u66f4\u591a\u7684\u6269\u5c55\u7c7b\u578b\u3002 \u5982\u679cREST\u7684\u6d88\u8d39\u7aef\u4e5f\u662fdubbo\u7cfb\u7edf\uff08\u53c2\u89c1\u4e0b\u6587\u7684\u8ba8\u8bba\uff09\uff0c\u5219\u4e5f\u53ef\u4ee5\u7528\u7c7b\u4f3c\u65b9\u5f0f\u4e3a\u6d88\u8d39\u7aef\u914d\u7f6eInterceptor\u548cFilter\u3002\u4f46\u6ce8\u610f\uff0cJAX-RS\u4e2d\u6d88\u8d39\u7aef\u7684Filter\u548c\u63d0\u4f9b\u7aef\u7684Filter\u662f\u4e24\u79cd\u4e0d\u540c\u7684\u63a5\u53e3\u3002\u4f8b\u5982\u524d\u9762\u4f8b\u5b50\u4e2d\u670d\u52a1\u7aef\u662fContainerResponseFilter\u63a5\u53e3\uff0c\u800c\u6d88\u8d39\u7aef\u5bf9\u5e94\u7684\u662fClientResponseFilter: public class LoggingFilter implements ClientResponseFilter { public void filter(ClientRequestContext reqCtx, ClientResponseContext resCtx) throws IOException { System.out.println( status: + resCtx.getStatus()); System.out.println( date: + resCtx.getDate()); System.out.println( last-modified: + resCtx.getLastModified()); System.out.println( location: + resCtx.getLocation()); System.out.println( headers: ); for (Entry String, List String header : resCtx.getHeaders().entrySet()) { System.out.print( \\t + header.getKey() + : ); for (String value : header.getValue()) { System.out.print(value + , ); } System.out.print( \\n ); } System.out.println( media-type: + resCtx.getMediaType().getType()); } } \u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684Exception\u5904\u7406 Dubbo\u7684REST\u4e5f\u652f\u6301JAX-RS\u6807\u51c6\u7684ExceptionMapper\uff0c\u53ef\u4ee5\u7528\u6765\u5b9a\u5236\u7279\u5b9aexception\u53d1\u751f\u540e\u5e94\u8be5\u8fd4\u56de\u7684HTTP\u54cd\u5e94\u3002 public class CustomExceptionMapper implements ExceptionMapper NotFoundException { public Response toResponse(NotFoundException e) { return Response.status(Response.Status.NOT_FOUND).entity( Oops! the requested resource is not found! ).type( text/plain ).build(); } } \u548cInterceptor\u3001Filter\u7c7b\u4f3c\uff0c\u5c06\u5176\u6dfb\u52a0\u5230XML\u914d\u7f6e\u6587\u4ef6\u4e2d\u5373\u53ef\u542f\u7528\uff1a dubbo:protocol name= rest port= 8888 extension= xxx.CustomExceptionMapper / \u914d\u7f6eHTTP\u65e5\u5fd7\u8f93\u51fa Dubbo rest\u652f\u6301\u8f93\u51fa\u6240\u6709HTTP\u8bf7\u6c42/\u54cd\u5e94\u4e2d\u7684header\u5b57\u6bb5\u548cbody\u6d88\u606f\u4f53\u3002 \u5728XML\u914d\u7f6e\u4e2d\u6dfb\u52a0\u5982\u4e0b\u81ea\u5e26\u7684REST filter\uff1a dubbo:protocol name= rest port= 8888 extension= org.apache.dubbo.rpc.protocol.rest.support.LoggingFilter / \u7136\u540e\u5728logging\u914d\u7f6e\u4e2d\u81f3\u5c11\u4e3aorg.apache.dubbo.rpc.protocol.rest.support\u6253\u5f00INFO\u7ea7\u522b\u65e5\u5fd7\u8f93\u51fa \uff0c\u4f8b\u5982\uff0c\u5728log4j.xml\u4e2d\u914d\u7f6e\uff1a logger name= org.apache.dubbo.rpc.protocol.rest.support level value= INFO / appender-ref ref= CONSOLE / /logger \u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728ROOT logger\u6253\u5f00INFO\u7ea7\u522b\u65e5\u5fd7\u8f93\u51fa\uff1a root level value= INFO / appender-ref ref= CONSOLE / /root \u7136\u540e\u5728\u65e5\u5fd7\u4e2d\u4f1a\u6709\u7c7b\u4f3c\u5982\u4e0b\u7684\u5185\u5bb9\u8f93\u51fa\uff1a The HTTP headers are: accept: application/json;charset=UTF-8 accept-encoding: gzip, deflate connection: Keep-Alive content-length: 22 content-type: application/json host: 192.168.1.100:8888 user-agent: Apache-HttpClient/4.2.1 (java 1.5) The contents of request body is: { id :1, name : dang } \u6253\u5f00HTTP\u65e5\u5fd7\u8f93\u51fa\u540e\uff0c\u9664\u4e86\u6b63\u5e38\u65e5\u5fd7\u8f93\u51fa\u7684\u6027\u80fd\u5f00\u9500\u5916\uff0c\u4e5f\u4f1a\u5728\u6bd4\u5982HTTP\u8bf7\u6c42\u89e3\u6790\u65f6\u4ea7\u751f\u989d\u5916\u7684\u5f00\u9500\uff0c\u56e0\u4e3a\u9700\u8981\u5efa\u7acb\u989d\u5916\u7684\u5185\u5b58\u7f13\u51b2\u533a\u6765\u4e3a\u65e5\u5fd7\u7684\u8f93\u51fa\u505a\u6570\u636e\u51c6\u5907\u3002 \u8f93\u5165\u53c2\u6570\u7684\u6821\u9a8c dubbo\u7684rest\u652f\u6301\u91c7\u7528Java\u6807\u51c6\u7684bean validation annotation\uff08JSR 303)\u6765\u505a\u8f93\u5165\u6821\u9a8chttp://beanvalidation.org/ \u4e3a\u4e86\u548c\u5176\u4ed6dubbo\u8fdc\u7a0b\u8c03\u7528\u534f\u8bae\u4fdd\u6301\u4e00\u81f4\uff0c\u5728rest\u4e2d\u4f5c\u6821\u9a8c\u7684annotation\u5fc5\u987b\u653e\u5728\u670d\u52a1\u7684\u63a5\u53e3\u4e0a\uff0c\u4f8b\u5982\uff1a public interface UserService { User getUser(@Min(value=1L, message= User ID must be greater than 1 ) Long id); } \u5f53\u7136\uff0c\u5728\u5f88\u591a\u5176\u4ed6\u7684bean validation\u7684\u5e94\u7528\u573a\u666f\u90fd\u662f\u5c06annotation\u653e\u5230\u5b9e\u73b0\u7c7b\u800c\u4e0d\u662f\u63a5\u53e3\u4e0a\u3002\u628aannotation\u653e\u5728\u63a5\u53e3\u4e0a\u81f3\u5c11\u6709\u4e00\u4e2a\u597d\u5904\u662f\uff0cdubbo\u7684\u5ba2\u6237\u7aef\u53ef\u4ee5\u5171\u4eab\u8fd9\u4e2a\u63a5\u53e3\u7684\u4fe1\u606f\uff0cdubbo\u751a\u81f3\u4e0d\u9700\u8981\u505a\u8fdc\u7a0b\u8c03\u7528\uff0c\u5728\u672c\u5730\u5c31\u53ef\u4ee5\u5b8c\u6210\u8f93\u5165\u6821\u9a8c\u3002 \u7136\u540e\u6309\u7167dubbo\u7684\u6807\u51c6\u65b9\u5f0f\u5728XML\u914d\u7f6e\u4e2d\u6253\u5f00\u9a8c\u8bc1\uff1a dubbo:service interface=xxx.UserService ref= userService protocol= rest validation= true / \u5728dubbo\u7684\u5176\u4ed6\u5f88\u591a\u8fdc\u7a0b\u8c03\u7528\u534f\u8bae\u4e2d\uff0c\u5982\u679c\u8f93\u5165\u9a8c\u8bc1\u51fa\u9519\uff0c\u662f\u76f4\u63a5\u5c06 RpcException \u629b\u5411\u5ba2\u6237\u7aef\uff0c\u800c\u5728rest\u4e2d\u7531\u4e8e\u5ba2\u6237\u7aef\u7ecf\u5e38\u662f\u975edubbo\uff0c\u751a\u81f3\u975ejava\u7684\u7cfb\u7edf\uff0c\u6240\u4ee5\u4e0d\u4fbf\u76f4\u63a5\u629b\u51faJava\u5f02\u5e38\u3002\u56e0\u6b64\uff0c\u76ee\u524d\u6211\u4eec\u5c06\u6821\u9a8c\u9519\u8bef\u4ee5XML\u7684\u683c\u5f0f\u8fd4\u56de\uff1a violationReport constraintViolations path getUserArgument0 /path message User ID must be greater than 1 /message value 0 /value /constraintViolations /violationReport \u7a0d\u540e\u4e5f\u4f1a\u652f\u6301\u5176\u4ed6\u6570\u636e\u683c\u5f0f\u7684\u8fd4\u56de\u503c\u3002\u81f3\u4e8e\u5982\u4f55\u5bf9\u9a8c\u8bc1\u9519\u8bef\u6d88\u606f\u4f5c\u56fd\u9645\u5316\u5904\u7406\uff0c\u76f4\u63a5\u53c2\u8003bean validation\u7684\u76f8\u5173\u6587\u6863\u5373\u53ef\u3002 \u5982\u679c\u4f60\u8ba4\u4e3a\u9ed8\u8ba4\u7684\u6821\u9a8c\u9519\u8bef\u8fd4\u56de\u683c\u5f0f\u4e0d\u7b26\u5408\u4f60\u7684\u8981\u6c42\uff0c\u53ef\u4ee5\u5982\u4e0a\u9762\u7ae0\u8282\u6240\u8ff0\uff0c\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684ExceptionMapper\u6765\u81ea\u7531\u7684\u5b9a\u5236\u9519\u8bef\u8fd4\u56de\u683c\u5f0f\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2aExceptionMapper\u5fc5\u987b\u7528\u6cdb\u578b\u58f0\u660e\u6765\u6355\u83b7dubbo\u7684RpcException\uff0c\u624d\u80fd\u6210\u529f\u8986\u76d6dubbo rest\u9ed8\u8ba4\u7684\u5f02\u5e38\u5904\u7406\u7b56\u7565\u3002\u4e3a\u4e86\u7b80\u5316\u64cd\u4f5c\uff0c\u5176\u5b9e\u8fd9\u91cc\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u662f\u76f4\u63a5\u7ee7\u627fdubbo rest\u7684RpcExceptionMapper\uff0c\u5e76\u8986\u76d6\u5176\u4e2d\u5904\u7406\u6821\u9a8c\u5f02\u5e38\u7684\u65b9\u6cd5\u5373\u53ef\uff1a public class MyValidationExceptionMapper extends RpcExceptionMapper { protected Response handleConstraintViolationException(ConstraintViolationException cve) { ViolationReport report = new ViolationReport(); for (ConstraintViolation cv : cve.getConstraintViolations()) { report.addConstraintViolation(new RestConstraintViolation( cv.getPropertyPath().toString(), cv.getMessage(), cv.getInvalidValue() == null ? null : cv.getInvalidValue().toString())); } // \u91c7\u7528json\u8f93\u51fa\u4ee3\u66ffxml\u8f93\u51fa return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(report).type(ContentType.APPLICATION_JSON_UTF_8).build(); } } \u7136\u540e\u5c06\u8fd9\u4e2aExceptionMapper\u6dfb\u52a0\u5230XML\u914d\u7f6e\u4e2d\u5373\u53ef\uff1a dubbo:protocol name= rest port= 8888 extension= xxx.MyValidationExceptionMapper / \u662f\u5426\u5e94\u8be5\u900f\u660e\u53d1\u5e03REST\u670d\u52a1 Dubbo\u7684REST\u8c03\u7528\u548cdubbo\u4e2d\u5176\u5b83\u67d0\u4e9bRPC\u4e0d\u540c\u7684\u662f\uff0c\u9700\u8981\u5728\u670d\u52a1\u4ee3\u7801\u4e2d\u6dfb\u52a0JAX-RS\u7684annotation\uff08\u4ee5\u53caJAXB\u3001Jackson\u7684annotation\uff09\uff0c\u5982\u679c\u4f60\u89c9\u5f97\u8fd9\u4e9bannotation\u4e00\u5b9a\u7a0b\u5ea6\u201c\u6c61\u67d3\u201d\u4e86\u4f60\u7684\u670d\u52a1\u4ee3\u7801\uff0c\u4f60\u53ef\u4ee5\u8003\u8651\u7f16\u5199\u989d\u5916\u7684Facade\u548cDTO\u7c7b\uff0c\u5728Facade\u548cDTO\u4e0a\u6dfb\u52a0annotation\uff0c\u800cFacade\u5c06\u8c03\u7528\u8f6c\u53d1\u7ed9\u771f\u6b63\u7684\u670d\u52a1\u5b9e\u73b0\u7c7b\u3002\u5f53\u7136\u4e8b\u5b9e\u4e0a\uff0c\u76f4\u63a5\u5728\u670d\u52a1\u4ee3\u7801\u4e2d\u6dfb\u52a0annotation\u57fa\u672c\u6ca1\u6709\u4efb\u4f55\u8d1f\u9762\u4f5c\u7528\uff0c\u800c\u4e14\u8fd9\u672c\u8eab\u662fJava EE\u7684\u6807\u51c6\u7528\u6cd5\uff0c\u53e6\u5916JAX-RS\u548cJAXB\u7684annotation\u662f\u5c5e\u4e8ejava\u6807\u51c6\uff0c\u6bd4\u6211\u4eec\u7ecf\u5e38\u4f7f\u7528\u7684spring\u3001dubbo\u7b49\u7b49annotation\u66f4\u6ca1\u6709vendor lock-in\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u4e00\u822c\u6ca1\u6709\u5fc5\u8981\u56e0\u6b64\u800c\u5f15\u5165\u989d\u5916\u5bf9\u8c61\u3002 \u53e6\u5916\uff0c\u5982\u679c\u4f60\u60f3\u7528\u524d\u8ff0\u7684@Context annotation\uff0c\u901a\u8fc7\u65b9\u6cd5\u53c2\u6570\u6ce8\u5165HttpServletRequest\uff08\u5982 public User getUser(@PathParam(\"id\") Long id, @Context HttpServletRequest request) \uff09\uff0c\u8fd9\u65f6\u5019\u7531\u4e8e\u6539\u53d8\u4e86\u670d\u52a1\u7684\u65b9\u6cd5\u7b7e\u540d\uff0c\u5e76\u4e14HttpServletRequest\u662fREST\u7279\u6709\u7684\u53c2\u6570\uff0c \u6240\u4ee5\u5982\u679c\u4f60\u7684\u670d\u52a1\u8981\u652f\u6301\u591a\u79cdRPC\u673a\u5236\u7684\u8bdd \uff0c\u5219\u5f15\u5165\u989d\u5916\u7684Facade\u7c7b\u662f\u6bd4\u8f83\u9002\u5f53\u7684\u3002 \u5f53\u7136\uff0c\u5728\u6ca1\u6709\u6dfb\u52a0REST\u8c03\u7528\u4e4b\u524d\uff0c\u4f60\u7684\u670d\u52a1\u4ee3\u7801\u53ef\u80fd\u672c\u8eab\u5df2\u7ecf\u5c31\u5145\u5f53\u4e86Facade\u548cDTO\u7684\u89d2\u8272\uff08\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u6709\u4e9b\u573a\u666f\u9700\u8981\u8fd9\u4e9b\u89d2\u8272\uff0c\u6709\u5174\u8da3\u53ef\u53c2\u8003 \u5fae\u89c2SOA\uff1a\u670d\u52a1\u8bbe\u8ba1\u539f\u5219\u53ca\u5176\u5b9e\u8df5\u65b9\u5f0f \uff09\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5728\u6dfb\u52a0REST\u4e4b\u540e\uff0c\u5982\u679c\u4f60\u518d\u989d\u5916\u6dfb\u52a0\u4e0eREST\u76f8\u5173\u7684Facade\u548cDTO\uff0c\u5c31\u76f8\u5f53\u4e8e\u5bf9\u539f\u6709\u4ee3\u7801\u5bf9\u518d\u4e00\u6b21\u5305\u88c5\uff0c\u5373\u5f62\u6210\u5982\u4e0b\u8c03\u7528\u94fe\uff1a RestFacade/RestDTO - Facade/DTO - Service \u8fd9\u79cd\u4f53\u7cfb\u6bd4\u8f83\u7e41\u7410\uff0c\u6570\u636e\u8f6c\u6362\u4e4b\u7c7b\u7684\u5de5\u4f5c\u91cf\u4e5f\u4e0d\u5c0f\uff0c\u6240\u4ee5\u4e00\u822c\u5e94\u5c3d\u91cf\u907f\u514d\u5982\u6b64\u3002 REST\u670d\u52a1\u6d88\u8d39\u7aef\u8be6\u89e3 \u8fd9\u91cc\u6211\u4eec\u7528\u4e09\u79cd\u573a\u666f\u6765\u5206\u522b\u8ba8\u8bba\uff1a \u975edubbo\u7684\u6d88\u8d39\u7aef\u8c03\u7528dubbo\u7684REST\u670d\u52a1\uff08non-dubbo -- dubbo\uff09 dubbo\u6d88\u8d39\u7aef\u8c03\u7528dubbo\u7684REST\u670d\u52a1 \uff08dubbo -- dubbo\uff09 dubbo\u7684\u6d88\u8d39\u7aef\u8c03\u7528\u975edubbo\u7684REST\u670d\u52a1 \uff08dubbo -- non-dubbo\uff09 \u573a\u666f1\uff1a\u975edubbo\u7684\u6d88\u8d39\u7aef\u8c03\u7528dubbo\u7684REST\u670d\u52a1 \u8fd9\u79cd\u573a\u666f\u7684\u5ba2\u6237\u7aef\u4e0edubbo\u672c\u8eab\u65e0\u5173\uff0c\u76f4\u63a5\u9009\u7528\u76f8\u5e94\u8bed\u8a00\u548c\u6846\u67b6\u4e2d\u5408\u9002\u7684\u65b9\u5f0f\u5373\u53ef\u3002 \u5982\u679c\u662f\u8fd8\u662fjava\u7684\u5ba2\u6237\u7aef\uff08\u4f46\u6ca1\u7528dubbo\uff09\uff0c\u53ef\u4ee5\u8003\u8651\u76f4\u63a5\u4f7f\u7528\u6807\u51c6\u7684JAX-RS Client API\u6216\u8005\u7279\u5b9aREST\u5b9e\u73b0\u7684Client API\u6765\u8c03\u7528REST\u670d\u52a1\u3002\u4e0b\u9762\u662f\u7528JAX-RS Client API\u6765\u8bbf\u95ee\u4e0a\u8ff0\u7684UserService\u7684registerUser()\uff1a User user = new User(); user.setName( Larry ); Client client = ClientBuilder.newClient(); WebTarget target = client.target( http://localhost:8080/services/users/register.json ); Response response = target.request().post(Entity.entity(user, MediaType.APPLICATION_JSON_TYPE)); try { if (response.getStatus() != 200) { throw new RuntimeException( Failed with HTTP error code : + response.getStatus()); } System.out.println( The generated id is + response.readEntity(RegistrationResult.class).getId()); } finally { response.close(); client.close(); // \u5728\u771f\u6b63\u5f00\u53d1\u4e2d\u4e0d\u8981\u6bcf\u6b21\u5173\u95edclient\uff0c\u6bd4\u5982HTTP\u957f\u8fde\u63a5\u662f\u7531client\u6301\u6709\u7684 } \u4e0a\u9762\u4ee3\u7801\u7247\u6bb5\u4e2d\u7684User\u548cRegistrationResult\u7c7b\u90fd\u662f\u6d88\u8d39\u7aef\u81ea\u5df1\u7f16\u5199\u7684\uff0cJAX-RS Client API\u4f1a\u81ea\u52a8\u5bf9\u5b83\u4eec\u505a\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u3002 \u5f53\u7136\uff0c\u5728java\u4e2d\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528\u81ea\u5df1\u719f\u6089\u7684\u6bd4\u5982HttpClient\uff0cFastJson\uff0cXStream\u7b49\u7b49\u5404\u79cd\u4e0d\u540c\u6280\u672f\u6765\u5b9e\u73b0REST\u5ba2\u6237\u7aef\uff0c\u5728\u6b64\u4e0d\u518d\u8be6\u8ff0\u3002 \u573a\u666f2\uff1adubbo\u6d88\u8d39\u7aef\u8c03\u7528dubbo\u7684REST\u670d\u52a1 \u8fd9\u79cd\u573a\u666f\u4e0b\uff0c\u548c\u4f7f\u7528\u5176\u4ed6dubbo\u7684\u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f\u4e00\u6837\uff0c\u76f4\u63a5\u5728\u670d\u52a1\u63d0\u4f9b\u7aef\u548c\u670d\u52a1\u6d88\u8d39\u7aef\u5171\u4eabJava\u670d\u52a1\u63a5\u53e3\uff0c\u5e76\u6dfb\u52a0spring xml\u914d\u7f6e\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u7528spring/dubbo\u7684annotation\u914d\u7f6e\uff09\uff0c\u5373\u53ef\u900f\u660e\u7684\u8c03\u7528\u8fdc\u7a0bREST\u670d\u52a1\uff1a dubbo:reference id= userService interface= xxx.UserService / \u5982\u524d\u6240\u8ff0\uff0c\u8fd9\u79cd\u573a\u666f\u4e0b\u5fc5\u987b\u628aJAX-RS\u7684annotation\u6dfb\u52a0\u5230\u670d\u52a1\u63a5\u53e3\u4e0a\uff0c\u8fd9\u6837\u5728dubbo\u5728\u6d88\u8d39\u7aef\u624d\u80fd\u5171\u4eab\u76f8\u5e94\u7684REST\u914d\u7f6e\u4fe1\u606f\uff0c\u5e76\u636e\u4e4b\u505a\u8fdc\u7a0b\u8c03\u7528: @Path( users ) public interface UserService { @GET @Path( {id : \\\\d+} ) @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML}) User getUser(@PathParam( id ) Long id); } \u5982\u679c\u670d\u52a1\u63a5\u53e3\u7684annotation\u4e2d\u914d\u7f6e\u4e86\u591a\u79cd\u6570\u636e\u683c\u5f0f\uff0c\u8fd9\u91cc\u7531\u4e8e\u4e24\u7aef\u90fd\u662fdubbo\u7cfb\u7edf\uff0cREST\u7684\u5927\u91cf\u7ec6\u8282\u88ab\u5c4f\u853d\u4e86\uff0c\u6240\u4ee5\u4e0d\u5b58\u5728\u7528\u524d\u8ff0URL\u540e\u7f00\u4e4b\u7c7b\u9009\u62e9\u6570\u636e\u683c\u5f0f\u7684\u53ef\u80fd\u3002\u76ee\u524d\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6392\u540d\u6700\u9760\u524d\u7684\u6570\u636e\u683c\u5f0f\u5c06\u76f4\u63a5\u88ab\u4f7f\u7528\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5efa\u8bae\u4f60\u5728\u5b9a\u4e49annotation\u7684\u65f6\u5019\u6700\u597d\u628a\u6700\u5408\u9002\u7684\u6570\u636e\u683c\u5f0f\u653e\u5230\u524d\u9762\uff0c\u6bd4\u5982\u4ee5\u4e0a\u6211\u4eec\u662f\u628ajson\u653e\u5728xml\u524d\u9762\uff0c\u56e0\u4e3ajson\u7684\u4f20\u8f93\u6027\u80fd\u4f18\u4e8exml\u3002 \u573a\u666f3\uff1adubbo\u7684\u6d88\u8d39\u7aef\u8c03\u7528\u975edubbo\u7684REST\u670d\u52a1 \u8fd9\u79cd\u573a\u666f\u4e0b\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u573a\u666f1\u4e2d\u63cf\u8ff0\u7684Java\u7684\u65b9\u5f0f\u6765\u8c03\u7528REST\u670d\u52a1\u3002\u4f46\u5176\u5b9e\u4e5f\u53ef\u4ee5\u91c7\u7528\u573a\u666f2\u4e2d\u63cf\u8ff0\u7684\u65b9\u5f0f\uff0c\u5373\u66f4\u900f\u660e\u7684\u8c03\u7528REST\u670d\u52a1\uff0c\u5373\u4f7f\u8fd9\u4e2a\u670d\u52a1\u5e76\u4e0d\u662fdubbo\u63d0\u4f9b\u7684\u3002 \u5982\u679c\u7528\u573a\u666f2\u7684\u65b9\u5f0f\uff0c\u7531\u4e8e\u8fd9\u91ccREST\u670d\u52a1\u5e76\u975edubbo\u63d0\u4f9b\uff0c\u4e00\u822c\u4e5f\u5c31\u6ca1\u6709\u524d\u8ff0\u7684\u5171\u4eab\u7684Java\u670d\u52a1\u63a5\u53e3\uff0c\u6240\u4ee5\u5728\u6b64\u6211\u4eec\u9700\u8981\u6839\u636e\u5916\u90e8REST\u670d\u52a1\u7684\u60c5\u51b5\uff0c\u81ea\u5df1\u6765\u7f16\u5199Java\u63a5\u53e3\u4ee5\u53ca\u76f8\u5e94\u53c2\u6570\u7c7b\uff0c\u5e76\u6dfb\u52a0JAX-RS\u3001JAXB\u3001Jackson\u7b49\u7684annotation\uff0cdubbo\u7684REST\u5e95\u5c42\u5b9e\u73b0\u4f1a\u636e\u6b64\u53bb\u81ea\u52a8\u751f\u6210\u8bf7\u6c42\u6d88\u606f\uff0c\u81ea\u52a8\u89e3\u6790\u54cd\u5e94\u6d88\u606f\u7b49\u7b49\uff0c\u4ece\u800c\u900f\u660e\u7684\u505a\u8fdc\u7a0b\u8c03\u7528\u3002\u6216\u8005\u8fd9\u79cd\u65b9\u5f0f\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\uff0c\u6211\u4eec\u5c1d\u8bd5\u7528JAX-RS\u7684\u65b9\u5f0f\u53bb\u4eff\u9020\u5b9e\u73b0\u4e00\u904d\u5916\u90e8\u7684REST\u670d\u52a1\u63d0\u4f9b\u7aef\uff0c\u7136\u540e\u628a\u5199\u6210\u670d\u52a1\u63a5\u53e3\u653e\u5230\u5ba2\u6237\u7aef\u6765\u76f4\u63a5\u4f7f\u7528\uff0cdubbo\u7684REST\u5e95\u5c42\u5b9e\u73b0\u5c31\u80fd\u50cf\u8c03\u7528dubbo\u7684REST\u670d\u52a1\u4e00\u6837\u8c03\u7528\u5176\u4ed6REST\u670d\u52a1\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u8981\u8c03\u7528\u5982\u4e0b\u7684\u5916\u90e8\u670d\u52a1 http://api.foo.com/services/users/1001 http://api.foo.com/services/users/1002 \u83b7\u53d6\u4e0d\u540cID\u7684\u7528\u6237\u8d44\u6599\uff0c\u8fd4\u56de\u683c\u5f0f\u662fJSON { id : 1001, name : Larry } \u6211\u4eec\u53ef\u6839\u636e\u8fd9\u4e9b\u4fe1\u606f\uff0c\u7f16\u5199\u670d\u52a1\u63a5\u53e3\u548c\u53c2\u6570\u7c7b\u5373\u53ef\uff1a @Path( users ) public interface UserService { @GET @Path( {id : \\\\d+} ) @Produces({MediaType.APPLICATION_JSON}) User getUser(@PathParam( id ) Long id); } public class User implements Serializable { private Long id; private String name; // \u2026 } \u5bf9\u4e8espring\u4e2d\u7684\u914d\u7f6e\uff0c\u56e0\u4e3a\u8fd9\u91cc\u7684REST\u670d\u52a1\u4e0d\u662fdubbo\u63d0\u4f9b\u7684\uff0c\u6240\u4ee5\u65e0\u6cd5\u4f7f\u7528dubbo\u7684\u6ce8\u518c\u4e2d\u5fc3\uff0c\u76f4\u63a5\u914d\u7f6e\u5916\u90e8REST\u670d\u52a1\u7684url\u5730\u5740\u5373\u53ef\uff08\u5982\u591a\u4e2a\u5730\u5740\u7528\u9017\u53f7\u5206\u9694\uff09\uff1a dubbo:reference id= userService interface= xxx.UserService url= rest://api.foo.com/services/ / \u6ce8\u610f\uff1a\u8fd9\u91cc\u534f\u8bae\u5fc5\u987b\u7528rest://\u800c\u4e0d\u662fhttp://\u4e4b\u7c7b\u3002\u5982\u679c\u5916\u90e8\u7684REST\u670d\u52a1\u6709context path\uff0c\u5219\u5728url\u4e2d\u4e5f\u5fc5\u987b\u6dfb\u52a0\u4e0a\uff08\u9664\u975e\u4f60\u5728\u6bcf\u4e2a\u670d\u52a1\u63a5\u53e3\u7684@Path annotation\u4e2d\u90fd\u5e26\u4e0acontext path\uff09\uff0c\u4f8b\u5982\u4e0a\u9762\u7684/services/\u3002\u540c\u65f6\u8fd9\u91cc\u7684services\u540e\u9762\u5fc5\u987b\u5e26\u4e0a/\uff0c\u8fd9\u6837\u624d\u80fd\u4f7fdubbo\u6b63\u5e38\u5de5\u4f5c\u3002 \u53e6\u5916\uff0c\u8fd9\u91cc\u4f9d\u7136\u53ef\u4ee5\u914d\u7f6e\u5ba2\u6237\u7aef\u53ef\u542f\u52a8\u7684\u6700\u5927\u8fde\u63a5\u6570\u548c\u8d85\u65f6\u65f6\u95f4\uff1a dubbo:reference id= userService interface= xxx.UserService url= rest://api.foo.com/services/ timeout= 2000 connections= 10 / Dubbo\u4e2dJAX-RS\u7684\u9650\u5236 Dubbo\u4e2d\u7684REST\u5f00\u53d1\u662f\u5b8c\u5168\u517c\u5bb9\u6807\u51c6JAX-RS\u7684\uff0c\u4f46\u5176\u652f\u6301\u7684\u529f\u80fd\u76ee\u524d\u662f\u5b8c\u6574JAX-RS\u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u90e8\u5206\u56e0\u4e3a\u5b83\u8981\u53d7\u9650\u4e8edubbo\u548cspring\u7684\u7279\u5b9a\u4f53\u7cfb\u3002 \u5728dubbo\u4e2d\u4f7f\u7528\u7684JAX-RS\u7684\u5c40\u9650\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a \u670d\u52a1\u5b9e\u73b0\u53ea\u80fd\u662fsingleton\u7684\uff0c\u4e0d\u80fd\u652f\u6301per-request scope\u548cper-lookup scope \u4e0d\u652f\u6301\u7528@Context annotation\u5bf9\u670d\u52a1\u7684\u5b9e\u4f8b\u5b57\u6bb5\u6ce8\u5165 ServletConfig\u3001ServletContext\u3001HttpServletRequest\u3001HttpServletResponse\u7b49\u7b49\uff0c\u4f46\u53ef\u4ee5\u652f\u6301\u5bf9\u670d\u52a1\u65b9\u6cd5\u53c2\u6570\u7684\u6ce8\u5165\u3002\u4f46\u5bf9\u67d0\u4e9b\u7279\u5b9aREST server\u5b9e\u73b0\uff0c\uff08\u7965\u89c1\u524d\u9762\u7684\u53d9\u8ff0\uff09\uff0c\u4e5f\u4e0d\u652f\u6301\u5bf9\u670d\u52a1\u65b9\u6cd5\u53c2\u6570\u7684\u6ce8\u5165\u3002 REST\u5e38\u89c1\u95ee\u9898\u89e3\u7b54\uff08REST FAQ\uff09 Dubbo REST\u7684\u670d\u52a1\u80fd\u548cDubbo\u6ce8\u518c\u4e2d\u5fc3\u3001\u76d1\u63a7\u4e2d\u5fc3\u96c6\u6210\u5417\uff1f \u53ef\u4ee5\u7684\uff0c\u800c\u4e14\u662f\u81ea\u52a8\u96c6\u6210\u7684\uff0c\u4e5f\u5c31\u662f\u4f60\u5728dubbo\u4e2d\u5f00\u53d1\u7684\u6240\u6709REST\u670d\u52a1\u90fd\u4f1a\u81ea\u52a8\u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3\u548c\u76d1\u63a7\u4e2d\u5fc3\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b83\u4eec\u505a\u7ba1\u7406\u3002 \u4f46\u662f\uff0c\u53ea\u6709\u5f53REST\u7684\u6d88\u8d39\u7aef\u4e5f\u662f\u57fa\u4e8edubbo\u7684\u65f6\u5019\uff0c\u6ce8\u518c\u4e2d\u5fc3\u4e2d\u7684\u8bb8\u591a\u670d\u52a1\u6cbb\u7406\u64cd\u4f5c\u624d\u80fd\u5b8c\u5168\u8d77\u4f5c\u7528\u3002\u800c\u5982\u679c\u6d88\u8d39\u7aef\u662f\u975edubbo\u7684\uff0c\u81ea\u7136\u4e0d\u53d7\u6ce8\u518c\u4e2d\u5fc3\u7ba1\u7406\uff0c\u6240\u4ee5\u5176\u4e2d\u5f88\u591a\u64cd\u4f5c\u662f\u4e0d\u4f1a\u5bf9\u6d88\u8d39\u7aef\u8d77\u4f5c\u7528\u7684\u3002 Dubbo REST\u4e2d\u5982\u4f55\u5b9e\u73b0\u8d1f\u8f7d\u5747\u8861\u548c\u5bb9\u9519\uff08failover\uff09\uff1f \u5982\u679cdubbo REST\u7684\u6d88\u8d39\u7aef\u4e5f\u662fdubbo\u7684\uff0c\u5219Dubbo REST\u548c\u5176\u4ed6dubbo\u8fdc\u7a0b\u8c03\u7528\u534f\u8bae\u57fa\u672c\u5b8c\u5168\u4e00\u6837\uff0c\u7531dubbo\u6846\u67b6\u900f\u660e\u7684\u5728\u6d88\u8d39\u7aef\u505aload balance\u3001failover\u7b49\u7b49\u3002 \u5982\u679cdubbo REST\u7684\u6d88\u8d39\u7aef\u662f\u975edubbo\u7684\uff0c\u751a\u81f3\u662f\u975ejava\u7684\uff0c\u5219\u6700\u597d\u914d\u7f6e\u670d\u52a1\u63d0\u4f9b\u7aef\u7684\u8f6f\u8d1f\u8f7d\u5747\u8861\u673a\u5236\uff0c\u76ee\u524d\u53ef\u8003\u8651\u7528LVS\u3001HAProxy\u3001 Nginx\u7b49\u7b49\u5bf9HTTP\u8bf7\u6c42\u505a\u8d1f\u8f7d\u5747\u8861\u3002 JAX-RS\u4e2d\u91cd\u8f7d\u7684\u65b9\u6cd5\u80fd\u591f\u6620\u5c04\u5230\u540c\u4e00URL\u5730\u5740\u5417\uff1f http://stackoverflow.com/questions/17196766/can-resteasy-choose-method-based-on-query-params JAX-RS\u4e2d\u4f5cPOST\u7684\u65b9\u6cd5\u80fd\u591f\u63a5\u6536\u591a\u4e2a\u53c2\u6570\u5417\uff1f http://stackoverflow.com/questions/5553218/jax-rs-post-multiple-objects Dubbo\u5f53\u524d\u4f53\u7cfb\u7684\u4e0d\u8db3\u4e4b\u5904\uff08\u4e0eREST\u76f8\u5173\u7684\uff09 \u6211\u8ba4\u4e3adubbo\u5f53\u524d\u4f53\u7cfb\u4e2d\u663e\u7136\u4e5f\u6709\u4e0d\u5c11\u4e0d\u8db3\u4e4b\u5904\uff0c\u8fd9\u91cc\u5217\u51fa\u51e0\u4e2a\u4e0eREST\u6709\u5173\u7684\u3001\u5e76\u5f71\u54cd\u7528\u6237\u4f7f\u7528\u7684\u95ee\u9898\uff08\u4e0d\u5305\u62ec\u5185\u90e8\u5b9e\u73b0\u7684\u95ee\u9898\uff09\uff0c\u4f9b\u53c2\u8003\u8bc4\u8bba\uff0c\u4e3a\u4e0b\u4e00\u6b65\u91cd\u6784\u4f5c\u51c6\u5907\u3002 RpcContext\u7684\u4fb5\u5165\u6027 \u5728\u524d\u6587\uff0c\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u63d0\u5230\u8fc7RpcContext\u7528\u6cd5\u7684\u4fb5\u5165\u6027\uff0c\u7531\u4e8e\u5b83\u662f\u7528\u5355\u4f8b\u7684\u65b9\u5f0f\u6765\u8bbf\u95ee\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u8fd9\u5b8c\u5168\u4e0d\u7b26\u5408spring\u5e94\u7528\u7684\u4e00\u822c\u98ce\u683c\uff0c\u4e0d\u5229\u4e8e\u5e94\u7528\u6269\u5c55\u548c\u5355\u5143\u6d4b\u8bd5\u3002\u672a\u6765\u6211\u4eec\u53ef\u80fd\u7528\u4f9d\u8d56\u6ce8\u5165\u65b9\u5f0f\u6ce8\u5165\u4e00\u4e2a\u63a5\u53e3\uff0c\u518d\u7528\u5b83\u53bb\u8bbf\u95eeThreadLocal\u4e2d\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002 Protocol\u914d\u7f6e\u7684\u5c40\u9650\u6027 dubbo\u652f\u6301\u591a\u79cd\u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f\uff0c\u4f46\u6240\u6709\u8c03\u7528\u65b9\u5f0f\u90fd\u662f\u7528 dubbo:protocol/ \u6765\u914d\u7f6e\u7684\uff0c\u4f8b\u5982\uff1a dubbo:protocol name= dubbo port= 9090 server= netty client= netty codec= dubbo serialization= hessian2 charset= UTF-8 threadpool= fixed threads= 100 queues= 0 iothreads= 9 buffer= 8192 accepts= 1000 payload= 8388608 / \u5176\u5b9e\uff0c\u4e0a\u9762\u5f88\u591a\u5c5e\u6027\u5b9e\u9645\u4e0adubbo RPC\u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f\u7279\u6709\u7684\uff0c\u5f88\u591adubbo\u4e2d\u7684\u5176\u5b83\u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f\u6839\u672c\u5c31\u4e0d\u652f\u6301\u4f8b\u5982server, client, codec, iothreads, accepts, payload\u7b49\u7b49\uff08\u5f53\u7136\uff0c\u6709\u7684\u662f\u6761\u4ef6\u6240\u9650\u4e0d\u652f\u6301\uff0c\u6709\u7684\u662f\u6839\u672c\u6ca1\u6709\u5fc5\u8981\u652f\u6301\uff09\u3002\u8fd9\u7ed9\u7528\u6237\u7684\u4f7f\u7528\u5f92\u589e\u5f88\u591a\u56f0\u60d1\uff0c\u7528\u6237\u4e5f\u5e76\u4e0d\u77e5\u9053\u6709\u4e9b\u5c5e\u6027\uff08\u6bd4\u5982\u505a\u6027\u80fd\u8c03\u4f18\uff09\u6dfb\u52a0\u4e86\u5b9e\u9645\u4e0a\u662f\u4e0d\u8d77\u4f5c\u7528\u7684\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5404\u79cd\u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f\u5f80\u5f80\u6709\u5927\u91cf\u81ea\u5df1\u72ec\u7279\u7684\u914d\u7f6e\u9700\u8981\uff0c\u7279\u522b\u662f\u6211\u4eec\u9010\u6b65\u4e3a\u6bcf\u79cd\u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f\u90fd\u6dfb\u52a0\u66f4\u4e30\u5bcc\u3001\u66f4\u9ad8\u7ea7\u7684\u529f\u80fd\uff0c\u8fd9\u5c31\u4e0d\u53ef\u907f\u514d\u7684\u6269\u5c55 protocol/ \u4e2d\u7684\u5c5e\u6027\uff08\u4f8b\u5982\u76ee\u524d\u6211\u4eec\u5728REST\u4e2d\u5df2\u7ecf\u6dfb\u52a0\u4e86keepalive\u548cextension\u4e24\u4e2a\u5c5e\u6027\uff09\uff0c\u5230\u6700\u540e\u4f1a\u5bfc\u81f4 protocol/ \u81c3\u80bf\u4e0d\u582a\uff0c\u7528\u6237\u7684\u4f7f\u7528\u4e5f\u66f4\u52a0\u56f0\u60d1\u3002 \u5f53\u7136\uff0cdubbo\u4e2d\u6709\u4e00\u79cd\u6269\u5c55 protocol/ \u7684\u65b9\u5f0f\u662f\u7528 dubbo:parameter/ \uff0c\u4f46\u8fd9\u79cd\u65b9\u5f0f\u663e\u7136\u5f88\u6709\u5c40\u9650\u6027\uff0c\u800c\u4e14\u7528\u6cd5\u590d\u6742\uff0c\u7f3a\u4e4fschema\u6821\u9a8c\u3002 \u6240\u4ee5\uff0c\u6700\u597d\u7684\u65b9\u5f0f\u662f\u4e3a\u6bcf\u79cd\u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f\u8bbe\u7f6e\u81ea\u5df1\u7684protocol\u5143\u7d20\uff0c\u6bd4\u5982 protocol-dubbo/ \uff0c protocol-rest/ \u7b49\u7b49\uff0c\u6bcf\u79cd\u5143\u7d20\u7528XML schema\u89c4\u5b9a\u81ea\u5df1\u7684\u5c5e\u6027\uff08\u5f53\u7136\u5c5e\u6027\u5728\u5404\u79cd\u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f\u4e4b\u95f4\u80fd\u901a\u7528\u662f\u6700\u597d\u7684\uff09\u3002 \u5982\u6b64\u4e00\u6765\uff0c\u4f8b\u5982\u524d\u9762\u63d0\u5230\u8fc7\u7684extension\u914d\u7f6e\u4e5f\u53ef\u4ee5\u7528\u66f4\u81ea\u7531\u7684\u65b9\u5f0f\uff0c\u4ece\u800c\u66f4\u6e05\u695a\u66f4\u53ef\u6269\u5c55\uff08\u4ee5\u4e0b\u53ea\u662f\u4e3e\u4f8b\uff0c\u5f53\u7136\u4e5f\u8bb8\u6709\u66f4\u597d\u7684\u65b9\u5f0f\uff09: dubbo:protocol-rest port= 8080 dubbo:extension someInterceptor /dubbo:extension dubbo:extension someFilter /dubbo:extension dubbo:extension someDynamicFeature /dubbo:extension dubbo:extension someEntityProvider /dubbo:extension /dubbo:protocol-rest XML\u547d\u540d\u4e0d\u7b26\u5408spring\u89c4\u8303 dubbo\u7684XML\u914d\u7f6e\u4e2d\u5927\u91cf\u547d\u540d\u90fd\u4e0d\u7b26\u5408spring\u89c4\u8303\uff0c\u6bd4\u5982\uff1a dubbo:protocol name= dubbo port= 9090 server= netty client= netty codec= dubbo serialization= hessian2 charset= UTF-8 threadpool= fixed threads= 100 queues= 0 iothreads= 9 buffer= 8192 accepts= 1000 payload= 8388608 / \u4e0a\u9762threadpool\u5e94\u8be5\u6539\u4e3athread-pool\uff0ciothreads\u5e94\u8be5\u6539\u4e3aio-threads\uff0c\u5355\u8bcd\u4e4b\u95f4\u5e94\u8be5\u7528\"-\"\u5206\u9694\u3002\u8fd9\u867d\u7136\u770b\u8d77\u6765\u662f\u4e2a\u5c0f\u95ee\u9898\uff0c\u4f46\u4e5f\u6d89\u53ca\u5230\u4e86\u53ef\u8bfb\u6027\uff0c\u7279\u522b\u662f\u53ef\u6269\u5c55\u6027\uff0c\u56e0\u4e3a\u6709\u65f6\u5019\u6211\u4eec\u4e0d\u53ef\u907f\u514d\u8981\u7528\u66f4\u591a\u5355\u8bcd\u6765\u63cf\u8ff0XML\u5143\u7d20\u548c\u5c5e\u6027\u3002 \u5176\u5b9edubbo\u672c\u8eab\u4e5f\u662f\u5efa\u8bae\u9075\u5b88spring\u5230XML\u7684\u547d\u540d\u89c4\u8303\u3002 REST\u6700\u4f73\u5b9e\u8df5 TODO \u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5 \u6d4b\u8bd5\u73af\u5883 \u7c97\u7565\u5982\u4e0b\uff1a \u4e24\u53f0\u72ec\u7acb\u670d\u52a1\u5668 4\u6838Intel(R) Xeon(R) CPU E5-2603 0 @ 1.80GHz 8G\u5185\u5b58 \u670d\u52a1\u5668\u4e4b\u95f4\u7f51\u7edc\u901a\u8fc7\u767e\u5146\u4ea4\u6362\u673a CentOS 5 JDK 7 Tomcat 7 JVM\u53c2\u6570-server -Xms1g -Xmx1g -XX:PermSize=64M -XX:+UseConcMarkSweepGC \u6d4b\u8bd5\u811a\u672c \u548cdubbo\u81ea\u8eab\u7684\u57fa\u51c6\u6d4b\u8bd5\u4fdd\u6301\u63a5\u8fd1\uff1a 10\u4e2a\u5e76\u53d1\u5ba2\u6237\u7aef\u6301\u7eed\u4e0d\u65ad\u53d1\u51fa\u8bf7\u6c42\uff1a \u4f20\u5165\u5d4c\u5957\u590d\u6742\u5bf9\u8c61\uff08\u4f46\u5355\u4e2a\u6570\u636e\u91cf\u5f88\u5c0f\uff09\uff0c\u4e0d\u505a\u4efb\u4f55\u5904\u7406\uff0c\u539f\u6837\u8fd4\u56de \u4f20\u516550K\u5b57\u7b26\u4e32\uff0c\u4e0d\u505a\u4efb\u4f55\u5904\u7406\uff0c\u539f\u6837\u8fd4\u56de\uff08TODO\uff1a\u7ed3\u679c\u5c1a\u672a\u5217\u51fa\uff09 \u8fdb\u884c5\u5206\u949f\u6027\u80fd\u6d4b\u8bd5\u3002\uff08\u5f15\u7528dubbo\u81ea\u8eab\u6d4b\u8bd5\u7684\u8003\u8651\uff1a\u201c\u4e3b\u8981\u8003\u5bdf\u5e8f\u5217\u5316\u548c\u7f51\u7edcIO\u7684\u6027\u80fd\uff0c\u56e0\u6b64\u670d\u52a1\u7aef\u65e0\u4efb\u4f55\u4e1a\u52a1\u903b\u8f91\u3002\u53d610\u5e76\u53d1\u662f\u8003\u8651\u5230http\u534f\u8bae\u5728\u9ad8\u5e76\u53d1\u4e0b\u5bf9CPU\u7684\u4f7f\u7528\u7387\u8f83\u9ad8\u53ef\u80fd\u4f1a\u5148\u6253\u5230\u74f6\u9888\u3002\u201d\uff09 \u6d4b\u8bd5\u7ed3\u679c \u4e0b\u9762\u7684\u7ed3\u679c\u4e3b\u8981\u5bf9\u6bd4\u7684\u662fREST\u548cdubbo RPC\u4e24\u79cd\u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f\uff0c\u5e76\u5bf9\u5b83\u4eec\u4f5c\u4e0d\u540c\u7684\u914d\u7f6e\uff0c\u4f8b\u5982\uff1a \u201cREST: Jetty + XML + GZIP\u201d\u7684\u610f\u601d\u662f\uff1a\u6d4b\u8bd5REST\uff0c\u5e76\u91c7\u7528jetty server\uff0cXML\u6570\u636e\u683c\u5f0f\uff0c\u542f\u7528GZIP\u538b\u7f29\u3002 \u201cDubbo: hessian2\u201d\u7684\u610f\u601d\u662f\uff1a\u6d4b\u8bd5dubbo RPC\uff0c\u5e76\u91c7\u7528hessian2\u5e8f\u5217\u5316\u65b9\u5f0f\u3002 \u9488\u5bf9\u590d\u6742\u5bf9\u8c61\u7684\u7ed3\u679c\u5982\u4e0b\uff08\u54cd\u5e94\u65f6\u95f4\u8d8a\u5c0f\u8d8a\u597d\uff0cTPS\u8d8a\u5927\u8d8a\u597d\uff09\uff1a \u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f \u5e73\u5747\u54cd\u5e94\u65f6\u95f4 \u5e73\u5747TPS\uff08\u6bcf\u79d2\u4e8b\u52a1\u6570\uff09 REST: Jetty + JSON 7.806 1280 REST: Jetty + JSON + GZIP TODO TODO REST: Jetty + XML TODO TODO REST: Jetty + XML + GZIP TODO TODO REST: Tomcat + JSON 2.082 4796 REST: Netty + JSON 2.182 4576 Dubbo: FST 1.211 8244 Dubbo: kyro 1.182 8444 Dubbo: dubbo serialization 1.43 6982 Dubbo: hessian2 1.49 6701 Dubbo: fastjson 1.572 6352 \u4ec5\u5c31\u76ee\u524d\u7684\u7ed3\u679c\uff0c\u4e00\u70b9\u7b80\u5355\u603b\u7ed3\uff1a dubbo RPC\uff08\u7279\u522b\u662f\u57fa\u4e8e\u9ad8\u6548java\u5e8f\u5217\u5316\u65b9\u5f0f\u5982kryo\uff0cfst\uff09\u6bd4REST\u7684\u54cd\u5e94\u65f6\u95f4\u548c\u541e\u5410\u91cf\u90fd\u6709\u8f83\u663e\u8457\u4f18\u52bf\uff0c\u5185\u7f51\u7684dubbo\u7cfb\u7edf\u4e4b\u95f4\u4f18\u5148\u9009\u62e9dubbo RPC\u3002 \u5728REST\u7684\u5b9e\u73b0\u9009\u62e9\u4e0a\uff0c\u4ec5\u5c31\u6027\u80fd\u800c\u8a00\uff0c\u76ee\u524dtomcat7\u548cnetty\u6700\u4f18\uff08\u5f53\u7136\u76ee\u524d\u4f7f\u7528\u7684jetty\u548cnetty\u7248\u672c\u90fd\u8f83\u4f4e\uff09\u3002tjws\u548csun http server\u5728\u6027\u80fd\u6d4b\u8bd5\u4e2d\u8868\u73b0\u6781\u5dee\uff0c\u5e73\u5747\u54cd\u5e94\u65f6\u95f4\u8d85\u8fc7200ms\uff0c\u5e73\u5747tps\u53ea\u670950\u5de6\u53f3\uff08\u4e3a\u4e86\u907f\u514d\u5f71\u54cd\u56fe\u7247\u6548\u679c\uff0c\u6ca1\u5728\u4e0a\u9762\u5217\u51fa\uff09\u3002 \u5728REST\u4e2dJSON\u6570\u636e\u683c\u5f0f\u6027\u80fd\u4f18\u4e8eXML\uff08\u6570\u636e\u6682\u672a\u5728\u4ee5\u4e0a\u5217\u51fa\uff09\u3002 \u5728REST\u4e2d\u542f\u7528GZIP\u5bf9\u4f01\u4e1a\u5185\u7f51\u4e2d\u7684\u5c0f\u6570\u636e\u91cf\u590d\u6742\u5bf9\u8c61\u5e2e\u52a9\u4e0d\u5927\uff0c\u6027\u80fd\u53cd\u800c\u6709\u4e0b\u964d\uff08\u6570\u636e\u6682\u672a\u5728\u4ee5\u4e0a\u5217\u51fa\uff09\u3002 \u6027\u80fd\u4f18\u5316\u5efa\u8bae \u5982\u679c\u5c06dubbo REST\u90e8\u7f72\u5230\u5916\u90e8Tomcat\u4e0a\uff0c\u5e76\u914d\u7f6eserver=\"servlet\"\uff0c\u5373\u542f\u7528\u5916\u90e8\u7684tomcat\u6765\u505a\u4e3arest server\u7684\u5e95\u5c42\u5b9e\u73b0\uff0c\u5219\u6700\u597d\u5728tomcat\u4e0a\u6dfb\u52a0\u5982\u4e0b\u914d\u7f6e\uff1a Connector port= 8080 protocol= org.apache.coyote.http11.Http11NioProtocol connectionTimeout= 20000 redirectPort= 8443 minSpareThreads= 20 enableLookups= false maxThreads= 100 maxKeepAliveRequests= -1 keepAliveTimeout= 60000 / \u7279\u522b\u662fmaxKeepAliveRequests=\"-1\"\uff0c\u8fd9\u4e2a\u914d\u7f6e\u4e3b\u8981\u662f\u4fdd\u8bc1tomcat\u4e00\u76f4\u542f\u7528http\u957f\u8fde\u63a5\uff0c\u4ee5\u63d0\u9ad8REST\u8c03\u7528\u6027\u80fd\u3002\u4f46\u662f\u8bf7\u6ce8\u610f\uff0c\u5982\u679cREST\u6d88\u8d39\u7aef\u4e0d\u662f\u6301\u7eed\u7684\u8c03\u7528REST\u670d\u52a1\uff0c\u5219\u4e00\u76f4\u542f\u7528\u957f\u8fde\u63a5\u672a\u5fc5\u662f\u6700\u597d\u7684\u505a\u6cd5\u3002\u53e6\u5916\uff0c\u4e00\u76f4\u542f\u7528\u957f\u8fde\u63a5\u7684\u65b9\u5f0f\u4e00\u822c\u4e0d\u9002\u5408\u9488\u5bf9\u666e\u901awebapp\uff0c\u66f4\u9002\u5408\u8fd9\u79cd\u7c7b\u4f3crpc\u7684\u573a\u666f\u3002\u6240\u4ee5\u4e3a\u4e86\u9ad8\u6027\u80fd\uff0c\u5728tomcat\u4e2d\uff0cdubbo REST\u5e94\u7528\u548c\u666e\u901aweb\u5e94\u7528\u6700\u597d\u4e0d\u8981\u6df7\u5408\u90e8\u7f72\uff0c\u800c\u5e94\u8be5\u7528\u5355\u72ec\u7684\u5b9e\u4f8b\u3002 TODO more contents to add \u6269\u5c55\u8ba8\u8bba REST\u4e0eThrift\u3001Protobuf\u7b49\u7684\u5bf9\u6bd4 TODO REST\u4e0e\u4f20\u7edfWebServices\u7684\u5bf9\u6bd4 TODO JAX-RS\u4e0eSpring MVC\u7684\u5bf9\u6bd4 \u521d\u6b65\u770b\u6cd5\uff0c\u6458\u81eahttp://www.infoq.com/cn/news/2014/10/dubbox-open-source?utm_source=infoq utm_medium=popular_links_homepage#theCommentsSection \u8c22\u8c22\uff0c\u5bf9\u4e8ejax-rs\u548cspring mvc\uff0c\u5176\u5b9e\u6211\u5bf9spring mvc\u7684rest\u652f\u6301\u8fd8\u6ca1\u6709\u592a\u6df1\u5165\u7684\u770b\u8fc7\uff0c\u8bf4\u70b9\u521d\u6b65\u60f3\u6cd5\uff0c\u8bf7\u5927\u5bb6\u6307\u6b63\uff1a spring mvc\u4e5f\u652f\u6301annotation\u7684\u914d\u7f6e\uff0c\u5176\u5b9e\u548cjax-rs\u770b\u8d77\u6765\u662f\u975e\u5e38\u975e\u5e38\u7c7b\u4f3c\u7684\u3002 \u6211\u4e2a\u4eba\u8ba4\u4e3aspring mvc\u76f8\u5bf9\u66f4\u9002\u5408\u4e8e\u9762\u5411web\u5e94\u7528\u7684restful\u670d\u52a1\uff0c\u6bd4\u5982\u88abAJAX\u8c03\u7528\uff0c\u4e5f\u53ef\u80fd\u8f93\u51faHTML\u4e4b\u7c7b\u7684\uff0c\u5e94\u7528\u4e2d\u8fd8\u6709\u9875\u9762\u8df3\u8f6c\u6d41\u7a0b\u4e4b\u7c7b\uff0cspring mvc\u65e2\u53ef\u4ee5\u505a\u597d\u6b63\u5e38\u7684web\u9875\u9762\u8bf7\u6c42\u4e5f\u53ef\u4ee5\u540c\u65f6\u5904\u7406rest\u8bf7\u6c42\u3002\u4f46\u603b\u7684\u6765\u8bf4\u8fd9\u4e2arestful\u670d\u52a1\u662f\u5728\u5c55\u73b0\u5c42\u6216\u8005\u53ebweb\u5c42\u4e4b\u7c7b\u5b9e\u73b0\u7684 \u800cjax-rs\u76f8\u5bf9\u66f4\u9002\u5408\u7eaf\u7cb9\u7684\u670d\u52a1\u5316\u5e94\u7528\uff0c\u4e5f\u5c31\u662f\u4f20\u7edfJava EE\u4e2d\u6240\u8bf4\u7684\u4e2d\u95f4\u5c42\u670d\u52a1\uff0c\u6bd4\u5982\u5b83\u53ef\u4ee5\u628a\u4f20\u7edf\u7684EJB\u53d1\u5e03\u6210restful\u670d\u52a1\u3002\u5728spring\u5e94\u7528\u4e2d\uff0c\u4e5f\u5c31\u628aspring\u4e2d\u5145\u5f53service\u4e4b\u7c7b\u7684bean\u76f4\u63a5\u53d1\u5e03\u6210restful\u670d\u52a1\u3002\u603b\u7684\u6765\u8bf4\u8fd9\u4e2arestful\u670d\u52a1\u662f\u5728\u4e1a\u52a1\u3001\u5e94\u7528\u5c42\u6216\u8005facade\u5c42\u3002\u800cMVC\u5c42\u6b21\u548c\u6982\u5ff5\u5728\u8fd9\u79cd\u505a\u6bd4\u5982\uff08\u540e\u53f0\uff09\u670d\u52a1\u5316\u7684\u5e94\u7528\u4e2d\u901a\u5e38\u662f\u6ca1\u6709\u591a\u5927\u4ef7\u503c\u7684\u3002 \u5f53\u7136jax-rs\u7684\u6709\u4e9b\u5b9e\u73b0\u6bd4\u5982jersey\uff0c\u4e5f\u8bd5\u56fe\u63d0\u4f9bmvc\u652f\u6301\uff0c\u4ee5\u66f4\u597d\u7684\u9002\u5e94\u4e0a\u9762\u6240\u8bf4\u7684web\u5e94\u7528\uff0c\u4f46\u5e94\u8be5\u662f\u4e0d\u5982spring mvc\u3002 \u5728dubbo\u5e94\u7528\u4e2d\uff0c\u6211\u60f3\u5f88\u591a\u4eba\u90fd\u6bd4\u8f83\u559c\u6b22\u76f4\u63a5\u5c06\u4e00\u4e2a\u672c\u5730\u7684spring service bean\uff08\u6216\u8005\u53ebmanager\u4e4b\u7c7b\u7684\uff09\u5b8c\u5168\u900f\u660e\u7684\u53d1\u5e03\u6210\u8fdc\u7a0b\u670d\u52a1\uff0c\u5219\u8fd9\u91cc\u7528JAX-RS\u662f\u66f4\u81ea\u7136\u66f4\u76f4\u63a5\u7684\uff0c\u4e0d\u5fc5\u989d\u5916\u7684\u5f15\u5165MVC\u6982\u5ff5\u3002\u5f53\u7136\uff0c\u5148\u4e0d\u8ba8\u8bba\u900f\u660e\u53d1\u5e03\u8fdc\u7a0b\u670d\u52a1\u662f\u4e0d\u662f\u6700\u4f73\u5b9e\u8df5\uff0c\u8981\u4e0d\u8981\u6dfb\u52a0facade\u4e4b\u7c7b\u3002 \u5f53\u7136\uff0c\u6211\u77e5\u9053\u5728dubbo\u4e0d\u652f\u6301rest\u7684\u60c5\u51b5\u4e0b\uff0c\u5f88\u591a\u670b\u53cb\u91c7\u7528\u7684\u67b6\u6784\u662fspring mvc restful\u8c03\u7528dubbo (spring) service\u6765\u53d1\u5e03restful\u670d\u52a1\u7684\u3002\u8fd9\u79cd\u65b9\u5f0f\u6211\u89c9\u5f97\u4e5f\u975e\u5e38\u597d\uff0c\u53ea\u662f\u5982\u679c\u4e0d\u4fee\u6539spring mvc\u5e76\u5c06\u5176\u4e0edubbo\u6df1\u5ea6\u96c6\u6210\uff0crestful\u670d\u52a1\u4e0d\u80fd\u50cfdubbo\u4e2d\u7684\u5176\u4ed6\u8fdc\u7a0b\u8c03\u7528\u534f\u8bae\u6bd4\u5982webservices\u3001dubbo rpc\u3001hessian\u7b49\u7b49\u90a3\u6837\uff0c\u4eab\u53d7\u8bf8\u591a\u9ad8\u7ea7\u7684\u670d\u52a1\u6cbb\u7406\u7684\u529f\u80fd\uff0c\u6bd4\u5982\uff1a\u6ce8\u518c\u5230dubbo\u7684\u670d\u52a1\u6ce8\u518c\u4e2d\u5fc3\uff0c\u901a\u8fc7dubbo\u76d1\u63a7\u4e2d\u5fc3\u76d1\u63a7\u5176\u8c03\u7528\u6b21\u6570\u3001TPS\u3001\u54cd\u5e94\u65f6\u95f4\u4e4b\u7c7b\uff0c\u901a\u8fc7dubbo\u7684\u7edf\u4e00\u7684\u914d\u7f6e\u65b9\u5f0f\u63a7\u5236\u5176\u6bd4\u5982\u7ebf\u7a0b\u6c60\u5927\u5c0f\u3001\u6700\u5927\u8fde\u63a5\u6570\u7b49\u7b49\uff0c\u901a\u8fc7dubbo\u7edf\u4e00\u65b9\u5f0f\u505a\u670d\u52a1\u6d41\u91cf\u63a7\u5236\u3001\u6743\u9650\u63a7\u5236\u3001\u9891\u6b21\u63a7\u5236\u3002\u53e6\u5916spring mvc\u4ec5\u4ec5\u8d1f\u8d23\u670d\u52a1\u7aef\uff0c\u800c\u5728\u6d88\u8d39\u7aef\uff0c\u901a\u5e38\u662f\u7528spring restTemplate\uff0c\u5982\u679crestTemplate\u4e0d\u548cdubbo\u96c6\u6210\uff0c\u6709\u53ef\u80fd\u50cfdubbo\u670d\u52a1\u5ba2\u6237\u7aef\u90a3\u6837\u81ea\u52a8\u6216\u8005\u4eba\u5de5\u5e72\u9884\u505a\u670d\u52a1\u964d\u7ea7\u3002\u5982\u679c\u670d\u52a1\u7aef\u6d88\u8d39\u7aef\u90fd\u662fdubbo\u7cfb\u7edf\uff0c\u901a\u8fc7spring\u7684rest\u4ea4\u4e92\uff0c\u5982\u679cspring rest\u4e0d\u6df1\u5ea6\u6574\u5408dubbo\uff0c\u5219\u4e0d\u80fd\u7528dubbo\u7edf\u4e00\u7684\u8def\u7531\u5206\u6d41\u7b49\u529f\u80fd\u3002 \u5f53\u7136\uff0c\u5176\u5b9e\u6211\u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u4e9b\u4e1c\u897f\u4e0d\u5fc5\u8981\u975e\u6b64\u5373\u5f7c\u7684\u3002\u6211\u542c\u8bf4spring\u521b\u59cb\u4ebarod johnson\u603b\u662f\u7231\u8bf4\u4e00\u53e5\u8bdd\uff0cthe customer is always right\uff0c\u5176\u5b9e\u4e0e\u5176\u975e\u8981\u63a2\u8ba8\u54ea\u79cd\u65b9\u5f0f\u66f4\u597d\uff0c\u4e0d\u5982\u540c\u65f6\u652f\u6301\u4e24\u79cd\u65b9\u5f0f\u5c31\u662f\u4e86\uff0c\u6240\u4ee5\u539f\u6765\u5728\u6587\u6863\u4e2d\u4e5f\u5199\u8fc7\u8ba1\u5212\u652f\u6301spring rest annoation\uff0c\u53ea\u662f\u4e0d\u77e5\u9053\u5177\u4f53\u53ef\u884c\u6027\u6709\u591a\u9ad8\u3002 \u672a\u6765 \u7a0d\u540e\u53ef\u80fd\u8981\u5b9e\u73b0\u7684\u529f\u80fd\uff1a spring mvc\u7684rest annotation\u652f\u6301 \u5b89\u5168 OAuth \u5f02\u6b65\u8c03\u7528 \u5b8c\u5584gzip \u6700\u5927payload\u9650\u5236","title":"\u5728 Dubbo \u4e2d\u5f00\u53d1 REST \u98ce\u683c\u7684\u8fdc\u7a0b\u8c03\u7528\uff08RESTful Remoting\uff09"},{"location":"user/rest/#dubbo-rest-restful-remoting","text":"\u4f5c\u8005\uff1a\u6c88\u7406 \u6587\u6863\u7248\u6743\uff1a Apache 2.0\u8bb8\u53ef\u8bc1 \u7f72\u540d-\u7981\u6b62\u6f14\u7ece \u5b8c\u5584\u4e2d\u2026\u2026 \u672c\u6587\u7bc7\u5e45\u8f83\u957f\uff0c\u56e0\u4e3aREST\u672c\u8eab\u6d89\u53ca\u9762\u8f83\u591a\u3002\u53e6\u5916\uff0c\u672c\u6587\u53c2\u7167Spring\u7b49\u7684\u6587\u6863\u98ce\u683c\uff0c\u4e0d\u4ec5\u4ec5\u5c40\u9650\u4e8e\u6846\u67b6\u7528\u6cd5\u7684\u9610\u8ff0\uff0c\u540c\u65f6\u4e5f\u52aa\u529b\u5448\u73b0\u6846\u67b6\u7684\u8bbe\u8ba1\u7406\u5ff5\u548c\u4f18\u826f\u5e94\u7528\u7684\u67b6\u6784\u601d\u60f3\u3002 \u5bf9\u4e8e\u60f3\u7c97\u7565\u4e86\u89e3dubbo\u548cREST\u7684\u4eba\uff0c\u53ea\u9700\u6d4f\u89c8 \u6982\u8ff0 \u81f3 \u6807\u51c6Java REST API\uff1aJAX-RS\u7b80\u4ecb \u51e0\u8282\u5373\u53ef\u3002 TODO \u751f\u6210\u53ef\u70b9\u51fb\u7684\u76ee\u5f55","title":"\u5728 Dubbo \u4e2d\u5f00\u53d1 REST \u98ce\u683c\u7684\u8fdc\u7a0b\u8c03\u7528\uff08RESTful Remoting\uff09"},{"location":"user/rest/#_1","text":"\u6982\u8ff0 REST\u7684\u4f18\u70b9 \u5e94\u7528\u573a\u666f \u5feb\u901f\u5165\u95e8 \u6807\u51c6Java REST API\uff1aJAX-RS\u7b80\u4ecb REST\u670d\u52a1\u63d0\u4f9b\u7aef\u8be6\u89e3 HTTP POST/GET\u7684\u5b9e\u73b0 Annotation\u653e\u5728\u63a5\u53e3\u7c7b\u8fd8\u662f\u5b9e\u73b0\u7c7b JSON\u3001XML\u7b49\u591a\u6570\u636e\u683c\u5f0f\u7684\u652f\u6301 \u4e2d\u6587\u5b57\u7b26\u652f\u6301 XML\u6570\u636e\u683c\u5f0f\u7684\u989d\u5916\u8981\u6c42 \u5b9a\u5236\u5e8f\u5217\u5316 \u914d\u7f6eREST Server\u7684\u5b9e\u73b0 \u83b7\u53d6\u4e0a\u4e0b\u6587\uff08Context\uff09\u4fe1\u606f \u914d\u7f6e\u7aef\u53e3\u53f7\u548cContext Path \u914d\u7f6e\u7ebf\u7a0b\u6570\u548cIO\u7ebf\u7a0b\u6570 \u914d\u7f6e\u957f\u8fde\u63a5 \u914d\u7f6e\u6700\u5927\u7684HTTP\u8fde\u63a5\u6570 \u914d\u7f6e\u6bcf\u4e2a\u6d88\u8d39\u7aef\u7684\u8d85\u65f6\u65f6\u95f4\u548cHTTP\u8fde\u63a5\u6570 GZIP\u6570\u636e\u538b\u7f29 \u7528Annotation\u53d6\u4ee3\u90e8\u5206Spring XML\u914d\u7f6e \u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684Filter\u3001Interceptor\u7b49 \u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684Exception\u5904\u7406 \u914d\u7f6eHTTP\u65e5\u5fd7\u8f93\u51fa \u8f93\u5165\u53c2\u6570\u7684\u6821\u9a8c \u662f\u5426\u5e94\u8be5\u900f\u660e\u53d1\u5e03REST\u670d\u52a1 REST\u670d\u52a1\u6d88\u8d39\u7aef\u8be6\u89e3 \u573a\u666f1\uff1a\u975edubbo\u7684\u6d88\u8d39\u7aef\u8c03\u7528dubbo\u7684REST\u670d\u52a1 \u573a\u666f2\uff1adubbo\u6d88\u8d39\u7aef\u8c03\u7528dubbo\u7684REST\u670d\u52a1 \u573a\u666f3\uff1adubbo\u7684\u6d88\u8d39\u7aef\u8c03\u7528\u975edubbo\u7684REST\u670d\u52a1 Dubbo\u4e2dJAX-RS\u7684\u9650\u5236 REST\u5e38\u89c1\u95ee\u9898\u89e3\u7b54\uff08REST FAQ\uff09 Dubbo REST\u7684\u670d\u52a1\u80fd\u548cDubbo\u6ce8\u518c\u4e2d\u5fc3\u3001\u76d1\u63a7\u4e2d\u5fc3\u96c6\u6210\u5417\uff1f Dubbo REST\u4e2d\u5982\u4f55\u5b9e\u73b0\u8d1f\u8f7d\u5747\u8861\u548c\u5bb9\u9519\uff08failover\uff09\uff1f JAX-RS\u4e2d\u91cd\u8f7d\u7684\u65b9\u6cd5\u80fd\u591f\u6620\u5c04\u5230\u540c\u4e00URL\u5730\u5740\u5417\uff1f JAX-RS\u4e2d\u4f5cPOST\u7684\u65b9\u6cd5\u80fd\u591f\u63a5\u6536\u591a\u4e2a\u53c2\u6570\u5417\uff1f Dubbo\u5f53\u524d\u4f53\u7cfb\u53ef\u80fd\u7684\u4e0d\u8db3\u4e4b\u5904\uff08\u4e0eREST\u76f8\u5173\u7684\uff09 RpcContext\u7684\u4fb5\u5165\u6027 Protocol\u914d\u7f6e\u7684\u5c40\u9650\u6027 XML\u547d\u540d\u4e0d\u7b26\u5408spring\u89c4\u8303 REST\u6700\u4f73\u5b9e\u8df5 \u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5 \u6d4b\u8bd5\u73af\u5883 \u6d4b\u8bd5\u811a\u672c \u6d4b\u8bd5\u7ed3\u679c \u6269\u5c55\u8ba8\u8bba REST\u4e0eThrift\u3001Protobuf\u7b49\u7684\u5bf9\u6bd4 REST\u4e0e\u4f20\u7edfWebServices\u7684\u5bf9\u6bd4 JAX-RS\u4e0eSpring MVC\u7684\u5bf9\u6bd4 \u672a\u6765","title":"\u76ee\u5f55"},{"location":"user/rest/#_2","text":"dubbo\u652f\u6301\u591a\u79cd\u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f\uff0c\u4f8b\u5982dubbo RPC\uff08\u4e8c\u8fdb\u5236\u5e8f\u5217\u5316 + tcp\u534f\u8bae\uff09\u3001http invoker\uff08\u4e8c\u8fdb\u5236\u5e8f\u5217\u5316 + http\u534f\u8bae\uff0c\u81f3\u5c11\u5728\u5f00\u6e90\u7248\u672c\u6ca1\u53d1\u73b0\u5bf9\u6587\u672c\u5e8f\u5217\u5316\u7684\u652f\u6301\uff09\u3001hessian\uff08\u4e8c\u8fdb\u5236\u5e8f\u5217\u5316 + http\u534f\u8bae\uff09\u3001WebServices \uff08\u6587\u672c\u5e8f\u5217\u5316 + http\u534f\u8bae\uff09\u7b49\u7b49\uff0c\u4f46\u7f3a\u4e4f\u5bf9\u5f53\u4eca\u7279\u522b\u6d41\u884c\u7684REST\u98ce\u683c\u8fdc\u7a0b\u8c03\u7528\uff08\u6587\u672c\u5e8f\u5217\u5316 + http\u534f\u8bae\uff09\u7684\u652f\u6301\u3002 \u6709\u9274\u4e8e\u6b64\uff0c\u6211\u4eec\u57fa\u4e8e\u6807\u51c6\u7684Java REST API\u2014\u2014JAX-RS 2.0\uff08Java API for RESTful Web Services\u7684\u7b80\u5199\uff09\uff0c\u4e3adubbo\u63d0\u4f9b\u4e86\u63a5\u8fd1\u900f\u660e\u7684REST\u8c03\u7528\u652f\u6301\u3002\u7531\u4e8e\u5b8c\u5168\u517c\u5bb9Java\u6807\u51c6API\uff0c\u6240\u4ee5\u4e3adubbo\u5f00\u53d1\u7684\u6240\u6709REST\u670d\u52a1\uff0c\u672a\u6765\u8131\u79bbdubbo\u6216\u8005\u4efb\u4f55\u7279\u5b9a\u7684REST\u5e95\u5c42\u5b9e\u73b0\u4e00\u822c\u4e5f\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u3002 \u7279\u522b\u503c\u5f97\u6307\u51fa\u7684\u662f\uff0c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u5b8c\u5168\u4e25\u683c\u9075\u5b88REST\u7684\u539f\u59cb\u5b9a\u4e49\u548c\u67b6\u6784\u98ce\u683c\u3002\u5373\u4f7f\u8457\u540d\u7684Twitter REST API\u4e5f\u4f1a\u6839\u636e\u60c5\u51b5\u505a\u9002\u5ea6\u8c03\u6574\uff0c\u800c\u4e0d\u662f\u673a\u68b0\u7684\u9075\u5b88\u539f\u59cb\u7684REST\u98ce\u683c\u3002 \u9644\u6ce8\uff1a\u6211\u4eec\u5c06\u8fd9\u4e2a\u529f\u80fd\u79f0\u4e4b\u4e3aREST\u98ce\u683c\u7684\u8fdc\u7a0b\u8c03\u7528\uff0c\u5373RESTful Remoting\uff08\u62bd\u8c61\u7684\u8fdc\u7a0b\u5904\u7406\u6216\u8005\u8c03\u7528\uff09\uff0c\u800c\u4e0d\u662f\u53ebRESTful RPC\uff08\u5177\u4f53\u7684\u8fdc\u7a0b\u201c\u8fc7\u7a0b\u201d\u8c03\u7528\uff09\uff0c\u662f\u56e0\u4e3aREST\u548cRPC\u672c\u8eab\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u4e24\u79cd\u4e0d\u540c\u7684\u98ce\u683c\u3002\u5728dubbo\u7684REST\u5b9e\u73b0\u4e2d\uff0c\u53ef\u4ee5\u8bf4\u6709\u4e24\u4e2a\u9762\u5411\uff0c\u5176\u4e00\u662f\u63d0\u4f9b\u6216\u6d88\u8d39\u6b63\u5e38\u7684REST\u670d\u52a1\uff0c\u5176\u4e8c\u662f\u5c06REST\u4f5c\u4e3adubbo RPC\u4f53\u7cfb\u4e2d\u4e00\u79cd\u534f\u8bae\u5b9e\u73b0\uff0c\u800cRESTful Remoting\u540c\u65f6\u6db5\u76d6\u4e86\u8fd9\u4e24\u4e2a\u9762\u5411\u3002","title":"\u6982\u8ff0"},{"location":"user/rest/#rest","text":"\u4ee5\u4e0b\u6458\u81ea\u7ef4\u57fa\u767e\u79d1\uff1a \u53ef\u66f4\u9ad8\u6548\u5229\u7528\u7f13\u5b58\u6765\u63d0\u9ad8\u54cd\u5e94\u901f\u5ea6 \u901a\u8baf\u672c\u8eab\u7684\u65e0\u72b6\u6001\u6027\u53ef\u4ee5\u8ba9\u4e0d\u540c\u7684\u670d\u52a1\u5668\u7684\u5904\u7406\u4e00\u7cfb\u5217\u8bf7\u6c42\u4e2d\u7684\u4e0d\u540c\u8bf7\u6c42\uff0c\u63d0\u9ad8\u670d\u52a1\u5668\u7684\u6269\u5c55\u6027 \u6d4f\u89c8\u5668\u5373\u53ef\u4f5c\u4e3a\u5ba2\u6237\u7aef\uff0c\u7b80\u5316\u8f6f\u4ef6\u9700\u6c42 \u76f8\u5bf9\u4e8e\u5176\u4ed6\u53e0\u52a0\u5728HTTP\u534f\u8bae\u4e4b\u4e0a\u7684\u673a\u5236\uff0cREST\u7684\u8f6f\u4ef6\u4f9d\u8d56\u6027\u66f4\u5c0f \u4e0d\u9700\u8981\u989d\u5916\u7684\u8d44\u6e90\u53d1\u73b0\u673a\u5236 \u5728\u8f6f\u4ef6\u6280\u672f\u6f14\u8fdb\u4e2d\u7684\u957f\u671f\u7684\u517c\u5bb9\u6027\u66f4\u597d \u8fd9\u91cc\u6211\u8fd8\u60f3\u7279\u522b\u8865\u5145REST\u7684\u663e\u8457\u4f18\u70b9\uff1a\u57fa\u4e8e\u7b80\u5355\u7684\u6587\u672c\u683c\u5f0f\u6d88\u606f\u548c\u901a\u7528\u7684HTTP\u534f\u8bae\uff0c\u4f7f\u5b83\u5177\u5907\u6781\u5e7f\u7684\u9002\u7528\u6027\uff0c\u51e0\u4e4e\u6240\u6709\u8bed\u8a00\u548c\u5e73\u53f0\u90fd\u5bf9\u5b83\u63d0\u4f9b\u652f\u6301\uff0c\u540c\u65f6\u5176\u5b66\u4e60\u548c\u4f7f\u7528\u7684\u95e8\u69db\u4e5f\u8f83\u4f4e\u3002","title":"REST\u7684\u4f18\u70b9"},{"location":"user/rest/#_3","text":"\u6b63\u662f\u7531\u4e8eREST\u5728\u9002\u7528\u6027\u65b9\u9762\u7684\u4f18\u70b9\uff0c\u6240\u4ee5\u5728dubbo\u4e2d\u652f\u6301REST\uff0c\u53ef\u4ee5\u4e3a\u5f53\u4eca\u591a\u6570\u4e3b\u6d41\u7684\u8fdc\u7a0b\u8c03\u7528\u573a\u666f\u90fd\u5e26\u6765\uff08\u663e\u8457\uff09\u597d\u5904\uff1a \u663e\u8457\u7b80\u5316\u4f01\u4e1a\u5185\u90e8\u7684\u5f02\u6784\u7cfb\u7edf\u4e4b\u95f4\u7684\uff08\u8de8\u8bed\u8a00\uff09\u8c03\u7528\u3002\u6b64\u5904\u4e3b\u8981\u9488\u5bf9\u8fd9\u79cd\u573a\u666f\uff1adubbo\u7684\u7cfb\u7edf\u505a\u670d\u52a1\u63d0\u4f9b\u7aef\uff0c\u5176\u4ed6\u8bed\u8a00\u7684\u7cfb\u7edf\uff08\u4e5f\u5305\u62ec\u67d0\u4e9b\u4e0d\u57fa\u4e8edubbo\u7684java\u7cfb\u7edf\uff09\u505a\u670d\u52a1\u6d88\u8d39\u7aef\uff0c\u4e24\u8005\u901a\u8fc7HTTP\u548c\u6587\u672c\u6d88\u606f\u8fdb\u884c\u901a\u4fe1\u3002\u5373\u4f7f\u76f8\u6bd4Thrift\u3001ProtoBuf\u7b49\u4e8c\u8fdb\u5236\u8de8\u8bed\u8a00\u8c03\u7528\u65b9\u6848\uff0cREST\u4e5f\u6709\u81ea\u5df1\u72ec\u7279\u7684\u4f18\u52bf\uff08\u8be6\u89c1\u540e\u9762\u8ba8\u8bba\uff09 \u663e\u8457\u7b80\u5316\u5bf9\u5916Open API\uff08\u5f00\u653e\u5e73\u53f0\uff09\u7684\u5f00\u53d1\u3002\u65e2\u53ef\u4ee5\u7528dubbo\u6765\u5f00\u53d1\u4e13\u95e8\u7684Open API\u5e94\u7528\uff0c\u4e5f\u53ef\u4ee5\u5c06\u539f\u5185\u90e8\u4f7f\u7528\u7684dubbo service\u76f4\u63a5\u201c\u900f\u660e\u201d\u53d1\u5e03\u4e3a\u5bf9\u5916\u7684Open REST API\uff08\u5f53\u7136dubbo\u672c\u8eab\u672a\u6765\u6700\u597d\u53ef\u4ee5\u8f83\u900f\u660e\u7684\u63d0\u4f9b\u8bf8\u5982\u6743\u9650\u63a7\u5236\u3001\u9891\u6b21\u63a7\u5236\u3001\u8ba1\u8d39\u7b49\u8bf8\u591a\u529f\u80fd\uff09 \u663e\u8457\u7b80\u5316\u624b\u673a\uff08\u5e73\u677f\uff09APP\u6216\u8005PC\u684c\u9762\u5ba2\u6237\u7aef\u5f00\u53d1\u3002\u7c7b\u4f3c\u4e8e2\uff0c\u65e2\u53ef\u4ee5\u7528dubbo\u6765\u5f00\u53d1\u4e13\u95e8\u9488\u5bf9\u65e0\u7ebf\u6216\u8005\u684c\u9762\u7684\u670d\u52a1\u5668\u7aef\uff0c\u4e5f\u53ef\u4ee5\u5c06\u539f\u5185\u90e8\u4f7f\u7528\u7684dubbo service\u76f4\u63a5\u201d\u900f\u660e\u201c\u7684\u66b4\u9732\u7ed9\u624b\u673aAPP\u6216\u684c\u9762\u7a0b\u5e8f\u3002\u5f53\u7136\u5728\u6709\u4e9b\u9879\u76ee\u4e2d\uff0c\u624b\u673a\u6216\u684c\u9762\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u4ee5\u4e0a\u573a\u666f2\u4e2d\u6240\u8ff0\u7684Open API\u3002 \u663e\u8457\u7b80\u5316\u6d4f\u89c8\u5668AJAX\u5e94\u7528\u7684\u5f00\u53d1\u3002\u7c7b\u4f3c\u4e8e2\uff0c\u65e2\u53ef\u4ee5\u7528dubbo\u6765\u5f00\u53d1\u4e13\u95e8\u7684AJAX\u670d\u52a1\u5668\u7aef\uff0c\u4e5f\u53ef\u4ee5\u5c06\u539f\u5185\u90e8\u4f7f\u7528\u7684dubbo service\u76f4\u63a5\u201d\u900f\u660e\u201c\u7684\u66b4\u9732\u7ed9\u6d4f\u89c8\u5668\u4e2dJavaScript\u3002\u5f53\u7136\uff0c\u5f88\u591aAJAX\u5e94\u7528\u66f4\u9002\u5408\u4e0eweb\u6846\u67b6\u534f\u540c\u5de5\u4f5c\uff0c\u6240\u4ee5\u76f4\u63a5\u8bbf\u95eedubbo service\u5728\u5f88\u591aweb\u9879\u76ee\u4e2d\u672a\u5fc5\u662f\u4e00\u79cd\u975e\u5e38\u4f18\u96c5\u7684\u67b6\u6784\u3002 \u4e3a\u4f01\u4e1a\u5185\u90e8\u7684dubbo\u7cfb\u7edf\u4e4b\u95f4\uff08\u5373\u670d\u52a1\u63d0\u4f9b\u7aef\u548c\u6d88\u8d39\u7aef\u90fd\u662f\u57fa\u4e8edubbo\u7684\u7cfb\u7edf\uff09\u63d0\u4f9b\u4e00\u79cd\u57fa\u4e8e\u6587\u672c\u7684\u3001\u6613\u8bfb\u7684\u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f\u3002 \u4e00\u5b9a\u7a0b\u5ea6\u7b80\u5316dubbo\u7cfb\u7edf\u5bf9\u5176\u5b83\u5f02\u6784\u7cfb\u7edf\u7684\u8c03\u7528\u3002\u53ef\u4ee5\u7528\u7c7b\u4f3cdubbo\u7684\u7b80\u4fbf\u65b9\u5f0f\u201c\u900f\u660e\u201d\u7684\u8c03\u7528\u975edubbo\u7cfb\u7edf\u63d0\u4f9b\u7684REST\u670d\u52a1\uff08\u4e0d\u7ba1\u670d\u52a1\u63d0\u4f9b\u7aef\u662f\u5728\u4f01\u4e1a\u5185\u90e8\u8fd8\u662f\u5916\u90e8\uff09 \u9700\u8981\u6307\u51fa\u7684\u662f\uff0c\u6211\u8ba4\u4e3a1\uff5e3\u662fdubbo\u7684REST\u8c03\u7528\u6700\u6709\u4ef7\u503c\u7684\u4e09\u79cd\u5e94\u7528\u573a\u666f\uff0c\u5e76\u4e14\u6211\u4eec\u4e3adubbo\u6dfb\u52a0REST\u8c03\u7528\uff0c\u5176\u6700\u4e3b\u8981\u5230\u76ee\u7684\u4e5f\u662f\u9762\u5411\u670d\u52a1\u7684\u63d0\u4f9b\u7aef\uff0c\u5373\u5f00\u53d1REST\u670d\u52a1\u6765\u63d0\u4f9b\u7ed9\u975edubbo\u7684\uff08\u5f02\u6784\uff09\u6d88\u8d39\u7aef\u3002 \u5f52\u7eb3\u8d77\u6765\uff0c\u6240\u6709\u5e94\u7528\u573a\u666f\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u501f\u7528Java\u8fc7\u53bb\u6700\u6d41\u884c\u7684\u5ba3\u4f20\u8bed\uff0c\u4e3adubbo\u6dfb\u52a0REST\u8c03\u7528\u540e\uff0c\u53ef\u4ee5\u5b9e\u73b0\u670d\u52a1\u7684\u201d\u4e00\u6b21\u7f16\u5199\uff0c\u5230\u5904\u8bbf\u95ee\u201c\uff0c\u7406\u8bba\u4e0a\u53ef\u4ee5\u9762\u5411\u5168\u4e16\u754c\u5f00\u653e\uff0c\u4ece\u800c\u771f\u6b63\u5b9e\u73b0\u6bd4\u8f83\u7406\u60f3\u5316\u7684\u9762\u5411\u670d\u52a1\u67b6\u6784\uff08SOA\uff09\u3002 \u5f53\u7136\uff0c\u4f20\u7edf\u7684WebServices\uff08WSDL/SOAP\uff09\u4e5f\u57fa\u672c\u540c\u6837\u80fd\u6ee1\u8db3\u4ee5\u4e0a\u573a\u666f\uff08\u9664\u4e86\u573a\u666f4\uff09\u7684\u8981\u6c42\uff08\u751a\u81f3\u8fd8\u80fd\u6ee1\u8db3\u90a3\u4e9b\u9700\u8981\u4f01\u4e1a\u7ea7\u7279\u6027\u7684\u573a\u666f\uff09\uff0c\u4f46\u7531\u4e8e\u5176\u590d\u6742\u6027\u7b49\u95ee\u9898\uff0c\u73b0\u5728\u5df2\u7ecf\u8d8a\u6765\u8d8a\u5c11\u88ab\u5b9e\u9645\u91c7\u7528\u4e86\u3002","title":"\u5e94\u7528\u573a\u666f"},{"location":"user/rest/#_4","text":"\u5728dubbo\u4e2d\u5f00\u53d1\u4e00\u4e2aREST\u98ce\u683c\u7684\u670d\u52a1\u4f1a\u6bd4\u8f83\u7b80\u5355\uff0c\u4e0b\u9762\u4ee5\u4e00\u4e2a\u6ce8\u518c\u7528\u6237\u7684\u7b80\u5355\u670d\u52a1\u4e3a\u4f8b\u8bf4\u660e\u3002 \u8fd9\u4e2a\u670d\u52a1\u8981\u5b9e\u73b0\u7684\u529f\u80fd\u662f\u63d0\u4f9b\u5982\u4e0bURL\uff08\u6ce8\uff1a\u8fd9\u4e2aURL\u4e0d\u662f\u5b8c\u5168\u7b26\u5408REST\u7684\u98ce\u683c\uff0c\u4f46\u662f\u66f4\u7b80\u5355\u5b9e\u7528\uff09\uff1a http://localhost:8080/users/register \u800c\u4efb\u4f55\u5ba2\u6237\u7aef\u90fd\u53ef\u4ee5\u5c06\u5305\u542b\u7528\u6237\u4fe1\u606f\u7684JSON\u5b57\u7b26\u4e32POST\u5230\u4ee5\u4e0aURL\u6765\u5b8c\u6210\u7528\u6237\u6ce8\u518c\u3002 \u9996\u5148\uff0c\u5f00\u53d1\u670d\u52a1\u7684\u63a5\u53e3\uff1a public class UserService { void registerUser(User user); } \u7136\u540e\uff0c\u5f00\u53d1\u670d\u52a1\u7684\u5b9e\u73b0\uff1a @Path( users ) public class UserServiceImpl implements UserService { @POST @Path( register ) @Consumes({MediaType.APPLICATION_JSON}) public void registerUser(User user) { // save the user... } } \u4e0a\u9762\u7684\u670d\u52a1\u5b9e\u73b0\u4ee3\u7801\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u662f\u7531\u4e8eREST\u670d\u52a1\u662f\u8981\u88ab\u53d1\u5e03\u5230\u7279\u5b9aHTTP URL\uff0c\u4f9b\u4efb\u610f\u8bed\u8a00\u5ba2\u6237\u7aef\u751a\u81f3\u6d4f\u89c8\u5668\u6765\u8bbf\u95ee\uff0c\u6240\u4ee5\u8fd9\u91cc\u8981\u989d\u5916\u6dfb\u52a0\u4e86\u51e0\u4e2aJAX-RS\u7684\u6807\u51c6annotation\u6765\u505a\u76f8\u5173\u7684\u914d\u7f6e\uff1a @Path(\"users\")\uff1a\u6307\u5b9a\u8bbf\u95eeUserService\u7684URL\u76f8\u5bf9\u8def\u5f84\u662f/users\uff0c\u5373http://localhost:8080/users @Path(\"register\")\uff1a\u6307\u5b9a\u8bbf\u95eeregisterUser()\u65b9\u6cd5\u7684URL\u76f8\u5bf9\u8def\u5f84\u662f/register\uff0c\u518d\u7ed3\u5408\u4e0a\u4e00\u4e2a@Path\u4e3aUserService\u6307\u5b9a\u7684\u8def\u5f84\uff0c\u5219\u8c03\u7528UserService.register()\u7684\u5b8c\u6574\u8def\u5f84\u4e3ahttp://localhost:8080/users/register @POST\uff1a\u6307\u5b9a\u8bbf\u95eeregisterUser()\u7528HTTP POST\u65b9\u6cd5 @Consumes({MediaType.APPLICATION_JSON})\uff1a\u6307\u5b9aregisterUser()\u63a5\u6536JSON\u683c\u5f0f\u7684\u6570\u636e\u3002REST\u6846\u67b6\u4f1a\u81ea\u52a8\u5c06JSON\u6570\u636e\u53cd\u5e8f\u5217\u5316\u4e3aUser\u5bf9\u8c61 \u6700\u540e\uff0c\u5728spring\u914d\u7f6e\u6587\u4ef6\u4e2d\u6dfb\u52a0\u6b64\u670d\u52a1\uff0c\u5373\u5b8c\u6210\u6240\u6709\u670d\u52a1\u5f00\u53d1\u5de5\u4f5c\uff1a ```xml ## \u6807\u51c6Java REST API\uff1aJAX-RS\u7b80\u4ecb JAX-RS\u662f\u6807\u51c6\u7684Java REST API\uff0c\u5f97\u5230\u4e86\u4e1a\u754c\u7684\u5e7f\u6cdb\u652f\u6301\u548c\u5e94\u7528\uff0c\u5176\u8457\u540d\u7684\u5f00\u6e90\u5b9e\u73b0\u5c31\u6709\u5f88\u591a\uff0c\u5305\u62ecOracle\u7684Jersey\uff0cRedHat\u7684RestEasy\uff0cApache\u7684CXF\u548cWink\uff0c\u4ee5\u53carestlet\u7b49\u7b49\u3002\u53e6\u5916\uff0c\u6240\u6709\u652f\u6301JavaEE 6.0\u4ee5\u4e0a\u89c4\u8303\u7684\u5546\u7528JavaEE\u5e94\u7528\u670d\u52a1\u5668\u90fd\u5bf9JAX-RS\u63d0\u4f9b\u4e86\u652f\u6301\u3002\u56e0\u6b64\uff0cJAX-RS\u662f\u4e00\u79cd\u5df2\u7ecf\u975e\u5e38\u6210\u719f\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5e76\u4e14\u91c7\u7528\u5b83\u6ca1\u6709\u4efb\u4f55\u6240\u8c13vendor lock-in\u7684\u95ee\u9898\u3002 JAX-RS\u5728\u7f51\u4e0a\u7684\u8d44\u6599\u975e\u5e38\u4e30\u5bcc\uff0c\u4f8b\u5982\u4e0b\u9762\u7684\u5165\u95e8\u6559\u7a0b\uff1a * Oracle\u5b98\u65b9\u7684tutorial\uff1ahttp://docs.oracle.com/javaee/7/tutorial/doc/jaxrs.htm * IBM developerWorks\u4e2d\u56fd\u7ad9\u6587\u7ae0\uff1ahttp://www.ibm.com/developerworks/cn/java/j-lo-jaxrs/ \u66f4\u591a\u7684\u8d44\u6599\u8bf7\u81ea\u884cgoogle\u6216\u8005\u767e\u5ea6\u4e00\u4e0b\u3002\u5c31\u5b66\u4e60JAX-RS\u6765\u8bf4\uff0c\u4e00\u822c\u4e3b\u8981\u638c\u63e1\u5176\u5404\u79cdannotation\u7684\u7528\u6cd5\u5373\u53ef\u3002 \u6ce8\u610f\uff1adubbo\u662f\u57fa\u4e8eJAX-RS 2.0\u7248\u672c\u7684\uff0c\u6709\u65f6\u5019\u9700\u8981\u6ce8\u610f\u4e00\u4e0b\u8d44\u6599\u6216REST\u5b9e\u73b0\u6240\u6d89\u53ca\u7684\u7248\u672c\u3002 ## REST\u670d\u52a1\u63d0\u4f9b\u7aef\u8be6\u89e3 \u4e0b\u9762\u6211\u4eec\u6269\u5145\u201c\u5feb\u901f\u5165\u95e8\u201d\u4e2d\u7684UserService\uff0c\u8fdb\u4e00\u6b65\u5c55\u793a\u5728dubbo\u4e2dREST\u670d\u52a1\u63d0\u4f9b\u7aef\u7684\u5f00\u53d1\u8981\u70b9\u3002 ### HTTP POST/GET\u7684\u5b9e\u73b0 REST\u670d\u52a1\u4e2d\u867d\u7136\u5efa\u8bae\u4f7f\u7528HTTP\u534f\u8bae\u4e2d\u56db\u79cd\u6807\u51c6\u65b9\u6cd5POST\u3001DELETE\u3001PUT\u3001GET\u6765\u5206\u522b\u5b9e\u73b0\u5e38\u89c1\u7684\u201c\u589e\u5220\u6539\u67e5\u201d\uff0c\u4f46\u5b9e\u9645\u4e2d\uff0c\u6211\u4eec\u4e00\u822c\u60c5\u51b5\u76f4\u63a5\u7528POST\u6765\u5b9e\u73b0\u201c\u589e\u6539\u201d\uff0cGET\u6765\u5b9e\u73b0\u201c\u5220\u67e5\u201d\u5373\u53ef\uff08DELETE\u548cPUT\u751a\u81f3\u4f1a\u88ab\u4e00\u4e9b\u9632\u706b\u5899\u963b\u6321\uff09\u3002 \u524d\u9762\u5df2\u7ecf\u7b80\u5355\u6f14\u793a\u4e86POST\u7684\u5b9e\u73b0\uff0c\u5728\u6b64\uff0c\u6211\u4eec\u4e3aUserService\u6dfb\u52a0\u4e00\u4e2a\u83b7\u53d6\u6ce8\u518c\u7528\u6237\u8d44\u6599\u7684\u529f\u80fd\uff0c\u6765\u6f14\u793aGET\u7684\u5b9e\u73b0\u3002 \u8fd9\u4e2a\u529f\u80fd\u5c31\u662f\u8981\u5b9e\u73b0\u5ba2\u6237\u7aef\u901a\u8fc7\u8bbf\u95ee\u5982\u4e0b\u4e0d\u540cURL\u6765\u83b7\u53d6\u4e0d\u540cID\u7684\u7528\u6237\u8d44\u6599\uff1a http://localhost:8080/users/1001 http://localhost:8080/users/1002 http://localhost:8080/users/1003 \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5176\u4ed6\u5f62\u5f0f\u7684URL\u6765\u8bbf\u95ee\u4e0d\u540cID\u7684\u7528\u6237\u8d44\u6599\uff0c\u4f8b\u5982\uff1a http://localhost:8080/users/load?id=1001 JAX-RS\u672c\u8eab\u53ef\u4ee5\u652f\u6301\u6240\u6709\u8fd9\u4e9b\u5f62\u5f0f\u3002\u4f46\u662f\u4e0a\u9762\u90a3\u79cd\u5728URL\u8def\u5f84\u4e2d\u5305\u542b\u67e5\u8be2\u53c2\u6570\u7684\u5f62\u5f0f\uff08http://localhost:8080/users/1001\uff09 \u66f4\u7b26\u5408REST\u7684\u4e00\u822c\u4e60\u60ef\uff0c\u6240\u4ee5\u66f4\u63a8\u8350\u5927\u5bb6\u6765\u4f7f\u7528\u3002\u4e0b\u9762\u6211\u4eec\u5c31\u4e3aUserService\u6dfb\u52a0\u4e00\u4e2agetUser()\u65b9\u6cd5\u6765\u5b9e\u73b0\u8fd9\u79cd\u5f62\u5f0f\u7684URL\u8bbf\u95ee\uff1a ```java @GET @Path( {id : \\\\d+} ) @Produces({MediaType.APPLICATION_JSON}) public User getUser(@PathParam( id ) Long id) { // ... } @GET\uff1a\u6307\u5b9a\u7528HTTP GET\u65b9\u6cd5\u8bbf\u95ee @Path(\"{id : \\d+}\")\uff1a\u6839\u636e\u4e0a\u9762\u7684\u529f\u80fd\u9700\u6c42\uff0c\u8bbf\u95eegetUser()\u7684URL\u5e94\u5f53\u662f\u201chttp://localhost:8080/users/ + \u4efb\u610f\u6570\u5b57\"\uff0c\u5e76\u4e14\u8fd9\u4e2a\u6570\u5b57\u8981\u88ab\u505a\u4e3a\u53c2\u6570\u4f20\u5165getUser()\u65b9\u6cd5\u3002 \u8fd9\u91cc\u7684annotation\u914d\u7f6e\u4e2d\uff0c@Path\u4e2d\u95f4\u7684{id: xxx}\u6307\u5b9aURL\u76f8\u5bf9\u8def\u5f84\u4e2d\u5305\u542b\u4e86\u540d\u4e3aid\u53c2\u6570\uff0c\u800c\u5b83\u7684\u503c\u4e5f\u5c06\u88ab\u81ea\u52a8\u4f20\u9012\u7ed9\u4e0b\u9762\u7528@PathParam(\"id\")\u4fee\u9970\u7684\u65b9\u6cd5\u53c2\u6570id\u3002{id:\u540e\u9762\u7d27\u8ddf\u7684\\d+\u662f\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u6307\u5b9a\u4e86id\u53c2\u6570\u5fc5\u987b\u662f\u6570\u5b57\u3002 @Produces({MediaType.APPLICATION_JSON})\uff1a\u6307\u5b9agetUser()\u8f93\u51faJSON\u683c\u5f0f\u7684\u6570\u636e\u3002\u6846\u67b6\u4f1a\u81ea\u52a8\u5c06User\u5bf9\u8c61\u5e8f\u5217\u5316\u4e3aJSON\u6570\u636e\u3002","title":"\u5feb\u901f\u5165\u95e8"},{"location":"user/rest/#annotation","text":"\u5728Dubbo\u4e2d\u5f00\u53d1REST\u670d\u52a1\u4e3b\u8981\u90fd\u662f\u901a\u8fc7JAX-RS\u7684annotation\u6765\u5b8c\u6210\u914d\u7f6e\u7684\uff0c\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u90fd\u662f\u5c06annotation\u653e\u5728\u670d\u52a1\u7684\u5b9e\u73b0\u7c7b\u4e2d\u3002\u4f46\u5176\u5b9e\uff0c\u6211\u4eec\u5b8c\u5168\u4e5f\u53ef\u4ee5\u5c06annotation\u653e\u5230\u670d\u52a1\u7684\u63a5\u53e3\u4e0a\uff0c\u8fd9\u4e24\u79cd\u65b9\u5f0f\u662f\u5b8c\u5168\u7b49\u4ef7\u7684\uff0c\u4f8b\u5982\uff1a @Path( users ) public interface UserService { @GET @Path( {id : \\\\d+} ) @Produces({MediaType.APPLICATION_JSON}) User getUser(@PathParam( id ) Long id); } \u5728\u4e00\u822c\u5e94\u7528\u4e2d\uff0c\u6211\u4eec\u5efa\u8bae\u5c06annotation\u653e\u5230\u670d\u52a1\u5b9e\u73b0\u7c7b\uff0c\u8fd9\u6837annotation\u548cjava\u5b9e\u73b0\u4ee3\u7801\u4f4d\u7f6e\u66f4\u63a5\u8fd1\uff0c\u66f4\u4fbf\u4e8e\u5f00\u53d1\u548c\u7ef4\u62a4\u3002\u53e6\u5916\u66f4\u91cd\u8981\u7684\u662f\uff0c\u6211\u4eec\u4e00\u822c\u503e\u5411\u4e8e\u907f\u514d\u5bf9\u63a5\u53e3\u7684\u6c61\u67d3\uff0c\u4fdd\u6301\u63a5\u53e3\u7684\u7eaf\u51c0\u6027\u548c\u5e7f\u6cdb\u9002\u7528\u6027\u3002 \u4f46\u662f\uff0c\u5982\u540e\u6587\u6240\u8ff0\uff0c\u5982\u679c\u6211\u4eec\u8981\u7528dubbo\u76f4\u63a5\u5f00\u53d1\u7684\u6d88\u8d39\u7aef\u6765\u8bbf\u95ee\u6b64\u670d\u52a1\uff0c\u5219annotation\u5fc5\u987b\u653e\u5230\u63a5\u53e3\u4e0a\u3002 \u5982\u679c\u63a5\u53e3\u548c\u5b9e\u73b0\u7c7b\u90fd\u540c\u65f6\u6dfb\u52a0\u4e86annotation\uff0c\u5219\u5b9e\u73b0\u7c7b\u7684annotation\u914d\u7f6e\u4f1a\u751f\u6548\uff0c\u63a5\u53e3\u4e0a\u7684annotation\u88ab\u76f4\u63a5\u5ffd\u7565\u3002","title":"Annotation\u653e\u5728\u63a5\u53e3\u7c7b\u8fd8\u662f\u5b9e\u73b0\u7c7b"},{"location":"user/rest/#jsonxml","text":"\u5728dubbo\u4e2d\u5f00\u53d1\u7684REST\u670d\u52a1\u53ef\u4ee5\u540c\u65f6\u652f\u6301\u4f20\u8f93\u591a\u79cd\u683c\u5f0f\u7684\u6570\u636e\uff0c\u4ee5\u7ed9\u5ba2\u6237\u7aef\u63d0\u4f9b\u6700\u5927\u7684\u7075\u6d3b\u6027\u3002\u5176\u4e2d\u6211\u4eec\u76ee\u524d\u5bf9\u6700\u5e38\u7528\u7684JSON\u548cXML\u683c\u5f0f\u7279\u522b\u6dfb\u52a0\u4e86\u989d\u5916\u7684\u529f\u80fd\u3002 \u6bd4\u5982\uff0c\u6211\u4eec\u8981\u8ba9\u4e0a\u4f8b\u4e2d\u7684getUser()\u65b9\u6cd5\u652f\u6301\u5206\u522b\u8fd4\u56deJSON\u548cXML\u683c\u5f0f\u7684\u6570\u636e\uff0c\u53ea\u9700\u8981\u5728annotation\u4e2d\u540c\u65f6\u5305\u542b\u4e24\u79cd\u683c\u5f0f\u5373\u53ef\uff1a @Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_XML}) User getUser(@PathParam( id ) Long id); \u6216\u8005\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528\u5b57\u7b26\u4e32\uff08\u8fd8\u652f\u6301\u901a\u914d\u7b26\uff09\u8868\u793aMediaType\uff1a @Produces({ application/json , text/xml }) User getUser(@PathParam( id ) Long id); \u5982\u679c\u6240\u6709\u65b9\u6cd5\u90fd\u652f\u6301\u540c\u6837\u7c7b\u578b\u7684\u8f93\u5165\u8f93\u51fa\u6570\u636e\u683c\u5f0f\uff0c\u5219\u6211\u4eec\u65e0\u9700\u5728\u6bcf\u4e2a\u65b9\u6cd5\u4e0a\u505a\u914d\u7f6e\uff0c\u53ea\u9700\u8981\u5728\u670d\u52a1\u7c7b\u4e0a\u6dfb\u52a0annotation\u5373\u53ef\uff1a @Path( users ) @Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_XML}) @Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_XML}) public class UserServiceImpl implements UserService { // ... } \u5728\u4e00\u4e2aREST\u670d\u52a1\u540c\u65f6\u5bf9\u591a\u79cd\u6570\u636e\u683c\u5f0f\u652f\u6301\u7684\u60c5\u51b5\u4e0b\uff0c\u6839\u636eJAX-RS\u6807\u51c6\uff0c\u4e00\u822c\u662f\u901a\u8fc7HTTP\u4e2d\u7684MIME header\uff08content-type\u548caccept\uff09\u6765\u6307\u5b9a\u5f53\u524d\u60f3\u7528\u7684\u662f\u54ea\u79cd\u683c\u5f0f\u7684\u6570\u636e\u3002 \u4f46\u662f\u5728dubbo\u4e2d\uff0c\u6211\u4eec\u8fd8\u81ea\u52a8\u652f\u6301\u76ee\u524d\u4e1a\u754c\u666e\u904d\u4f7f\u7528\u7684\u65b9\u5f0f\uff0c\u5373\u7528\u4e00\u4e2aURL\u540e\u7f00\uff08.json\u548c.xml\uff09\u6765\u6307\u5b9a\u60f3\u7528\u7684\u6570\u636e\u683c\u5f0f\u3002\u4f8b\u5982\uff0c\u5728\u6dfb\u52a0\u4e0a\u8ff0annotation\u540e\uff0c\u76f4\u63a5\u8bbf\u95eehttp://localhost:8888/users/1001.json\u5219\u8868\u793a\u7528json\u683c\u5f0f\uff0c\u76f4\u63a5\u8bbf\u95eehttp://localhost:8888/users/1002.xml\u5219\u8868\u793a\u7528xml\u683c\u5f0f\uff0c\u6bd4\u7528HTTP Header\u66f4\u7b80\u5355\u76f4\u89c2\u3002Twitter\u3001\u5fae\u535a\u7b49\u7684REST API\u90fd\u662f\u91c7\u7528\u8fd9\u79cd\u65b9\u5f0f\u3002 \u5982\u679c\u4f60\u65e2\u4e0d\u52a0HTTP header\uff0c\u4e5f\u4e0d\u52a0\u540e\u7f00\uff0c\u5219dubbo\u7684REST\u4f1a\u4f18\u5148\u542f\u7528\u5728\u4ee5\u4e0aannotation\u5b9a\u4e49\u4e2d\u6392\u4f4d\u6700\u9760\u524d\u7684\u90a3\u79cd\u6570\u636e\u683c\u5f0f\u3002 \u6ce8\u610f\uff1a\u8fd9\u91cc\u8981\u652f\u6301XML\u683c\u5f0f\u6570\u636e\uff0c\u5728annotation\u4e2d\u65e2\u53ef\u4ee5\u7528MediaType.TEXT_XML\uff0c\u4e5f\u53ef\u4ee5\u7528MediaType.APPLICATION_XML\uff0c\u4f46\u662fTEXT_XML\u662f\u66f4\u5e38\u7528\u7684\uff0c\u5e76\u4e14\u5982\u679c\u8981\u5229\u7528\u4e0a\u8ff0\u7684URL\u540e\u7f00\u65b9\u5f0f\u6765\u6307\u5b9a\u6570\u636e\u683c\u5f0f\uff0c\u53ea\u80fd\u914d\u7f6e\u4e3aTEXT_XML\u624d\u80fd\u751f\u6548\u3002","title":"JSON\u3001XML\u7b49\u591a\u6570\u636e\u683c\u5f0f\u7684\u652f\u6301"},{"location":"user/rest/#_5","text":"\u4e3a\u4e86\u5728dubbo REST\u4e2d\u6b63\u5e38\u8f93\u51fa\u4e2d\u6587\u5b57\u7b26\uff0c\u548c\u901a\u5e38\u7684Java web\u5e94\u7528\u4e00\u6837\uff0c\u6211\u4eec\u9700\u8981\u5c06HTTP\u54cd\u5e94\u7684contentType\u8bbe\u7f6e\u4e3aUTF-8\u7f16\u7801\u3002 \u57fa\u4e8eJAX-RS\u7684\u6807\u51c6\u7528\u6cd5\uff0c\u6211\u4eec\u53ea\u9700\u8981\u505a\u5982\u4e0bannotation\u914d\u7f6e\u5373\u53ef\uff1a @Produces({ application/json; charset=UTF-8 , text/xml; charset=UTF-8 }) User getUser(@PathParam( id ) Long id); \u4e3a\u4e86\u65b9\u4fbf\u7528\u6237\uff0c\u6211\u4eec\u5728dubbo REST\u4e2d\u76f4\u63a5\u6dfb\u52a0\u4e86\u4e00\u4e2a\u652f\u6301\u7c7b\uff0c\u6765\u5b9a\u4e49\u4ee5\u4e0a\u7684\u5e38\u91cf\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\uff0c\u51cf\u5c11\u51fa\u9519\u7684\u53ef\u80fd\u6027\u3002 @Produces({ContentType.APPLICATION_JSON_UTF_8, ContentType.TEXT_XML_UTF_8}) User getUser(@PathParam( id ) Long id);","title":"\u4e2d\u6587\u5b57\u7b26\u652f\u6301"},{"location":"user/rest/#xml","text":"\u7531\u4e8eJAX-RS\u7684\u5b9e\u73b0\u4e00\u822c\u90fd\u7528\u6807\u51c6\u7684JAXB\uff08Java API for XML Binding\uff09\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316XML\u683c\u5f0f\u6570\u636e\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e3a\u6bcf\u4e00\u4e2a\u8981\u7528XML\u4f20\u8f93\u7684\u5bf9\u8c61\u6dfb\u52a0\u4e00\u4e2a\u7c7b\u7ea7\u522b\u7684JAXB annotation\uff0c\u5426\u5219\u5e8f\u5217\u5316\u5c06\u62a5\u9519\u3002\u4f8b\u5982\u4e3agetUser()\u4e2d\u8fd4\u56de\u7684User\u6dfb\u52a0\u5982\u4e0b\uff1a @XmlRootElement public class User implements Serializable { // ... } \u6b64\u5916\uff0c\u5982\u679cservice\u65b9\u6cd5\u4e2d\u7684\u8fd4\u56de\u503c\u662fJava\u7684 primitive\u7c7b\u578b\uff08\u5982int\uff0clong\uff0cfloat\uff0cdouble\u7b49\uff09\uff0c\u6700\u597d\u4e3a\u5b83\u4eec\u6dfb\u52a0\u4e00\u5c42wrapper\u5bf9\u8c61\uff0c\u56e0\u4e3aJAXB\u4e0d\u80fd\u76f4\u63a5\u5e8f\u5217\u5316primitive\u7c7b\u578b\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u60f3\u8ba9\u524d\u8ff0\u7684registerUser()\u65b9\u6cd5\u8fd4\u56de\u670d\u52a1\u5668\u7aef\u4e3a\u7528\u6237\u751f\u6210\u7684ID\u53f7\uff1a long registerUser(User user); \u7531\u4e8eprimitive\u7c7b\u578b\u4e0d\u88abJAXB\u5e8f\u5217\u5316\u652f\u6301\uff0c\u6240\u4ee5\u6dfb\u52a0\u4e00\u4e2awrapper\u5bf9\u8c61\uff1a @XmlRootElement public class RegistrationResult implements Serializable { private Long id; public RegistrationResult() { } public RegistrationResult(Long id) { this.id = id; } public Long getId() { return id; } public void setId(Long id) { this.id = id; } } \u5e76\u4fee\u6539service\u65b9\u6cd5\uff1a RegistrationResult registerUser(User user); \u8fd9\u6837\u4e0d\u4f46\u80fd\u591f\u89e3\u51b3XML\u5e8f\u5217\u5316\u7684\u95ee\u9898\uff0c\u800c\u4e14\u4f7f\u5f97\u8fd4\u56de\u7684\u6570\u636e\u90fd\u7b26\u5408XML\u548cJSON\u7684\u89c4\u8303\u3002\u4f8b\u5982\uff0c\u5728JSON\u4e2d\uff0c\u8fd4\u56de\u7684\u5c06\u662f\u5982\u4e0b\u5f62\u5f0f\uff1a { id : 1001} \u5982\u679c\u4e0d\u52a0wrapper\uff0cJSON\u8fd4\u56de\u503c\u5c06\u76f4\u63a5\u662f 1001 \u800c\u5728XML\u4e2d\uff0c\u52a0wrapper\u540e\u8fd4\u56de\u503c\u5c06\u662f\uff1a registrationResult id 1002 /id /registrationResult \u8fd9\u79cdwrapper\u5bf9\u8c61\u5176\u5b9e\u5229\u7528\u6240\u8c13Data Transfer Object\uff08DTO\uff09\u6a21\u5f0f\uff0c\u91c7\u7528DTO\u8fd8\u80fd\u5bf9\u4f20\u8f93\u6570\u636e\u505a\u66f4\u591a\u6709\u7528\u7684\u5b9a\u5236\u3002","title":"XML\u6570\u636e\u683c\u5f0f\u7684\u989d\u5916\u8981\u6c42"},{"location":"user/rest/#_6","text":"\u5982\u4e0a\u6240\u8ff0\uff0cREST\u7684\u5e95\u5c42\u5b9e\u73b0\u4f1a\u5728service\u7684\u5bf9\u8c61\u548cJSON/XML\u6570\u636e\u683c\u5f0f\u4e4b\u95f4\u81ea\u52a8\u505a\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u3002\u4f46\u6709\u4e9b\u573a\u666f\u4e0b\uff0c\u5982\u679c\u89c9\u5f97\u8fd9\u79cd\u81ea\u52a8\u8f6c\u6362\u4e0d\u6ee1\u8db3\u8981\u6c42\uff0c\u53ef\u4ee5\u5bf9\u5176\u505a\u5b9a\u5236\u3002 Dubbo\u4e2d\u7684REST\u5b9e\u73b0\u662f\u7528JAXB\u505aXML\u5e8f\u5217\u5316\uff0c\u7528Jackson\u505aJSON\u5e8f\u5217\u5316\uff0c\u6240\u4ee5\u5728\u5bf9\u8c61\u4e0a\u6dfb\u52a0JAXB\u6216Jackson\u7684annotation\u5373\u53ef\u4ee5\u5b9a\u5236\u6620\u5c04\u3002 \u4f8b\u5982\uff0c\u5b9a\u5236\u5bf9\u8c61\u5c5e\u6027\u6620\u5c04\u5230XML\u5143\u7d20\u7684\u540d\u5b57\uff1a @XmlRootElement @XmlAccessorType(XmlAccessType.FIELD) public class User implements Serializable { @XmlElement(name= username ) private String name; } \u5b9a\u5236\u5bf9\u8c61\u5c5e\u6027\u6620\u5c04\u5230JSON\u5b57\u6bb5\u7684\u540d\u5b57\uff1a public class User implements Serializable { @JsonProperty( username ) private String name; } \u66f4\u591a\u8d44\u6599\u8bf7\u53c2\u8003JAXB\u548cJackson\u7684\u5b98\u65b9\u6587\u6863\uff0c\u6216\u81ea\u884cgoogle\u3002","title":"\u5b9a\u5236\u5e8f\u5217\u5316"},{"location":"user/rest/#rest-server","text":"\u76ee\u524d\u5728dubbo\u4e2d\uff0c\u6211\u4eec\u652f\u63015\u79cd\u5d4c\u5165\u5f0frest server\u7684\u5b9e\u73b0\uff0c\u5e76\u540c\u65f6\u652f\u6301\u91c7\u7528\u5916\u90e8\u5e94\u7528\u670d\u52a1\u5668\u6765\u505arest server\u7684\u5b9e\u73b0\u3002rest server\u7684\u5b9e\u73b0\u662f\u901a\u8fc7\u5982\u4e0bserver\u8fd9\u4e2aXML\u5c5e\u6027\u6765\u9009\u62e9\u7684\uff1a dubbo:protocol name= rest server= jetty / \u4ee5\u4e0a\u914d\u7f6e\u9009\u7528\u4e86\u5d4c\u5165\u5f0f\u7684jetty\u6765\u505arest server\uff0c\u540c\u65f6\uff0c\u5982\u679c\u4e0d\u914d\u7f6eserver\u5c5e\u6027\uff0crest\u534f\u8bae\u9ed8\u8ba4\u4e5f\u662f\u9009\u7528jetty\u3002jetty\u662f\u975e\u5e38\u6210\u719f\u7684java servlet\u5bb9\u5668\uff0c\u5e76\u548cdubbo\u5df2\u7ecf\u6709\u8f83\u597d\u7684\u96c6\u6210\uff08\u76ee\u524d5\u79cd\u5d4c\u5165\u5f0fserver\u4e2d\u53ea\u6709jetty\u548c\u540e\u9762\u6240\u8ff0\u7684tomcat\u3001tjws\uff0c\u4e0edubbo\u76d1\u63a7\u7cfb\u7edf\u7b49\u5b8c\u6210\u4e86\u65e0\u7f1d\u7684\u96c6\u6210\uff09\uff0c\u6240\u4ee5\uff0c\u5982\u679c\u4f60\u7684dubbo\u7cfb\u7edf\u662f\u5355\u72ec\u542f\u52a8\u7684\u8fdb\u7a0b\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u9ed8\u8ba4\u91c7\u7528jetty\u5373\u53ef\u3002 dubbo:protocol name= rest server= tomcat / \u4ee5\u4e0a\u914d\u7f6e\u9009\u7528\u4e86\u5d4c\u5165\u5f0f\u7684tomcat\u6765\u505arest server\u3002\u5728\u5d4c\u5165\u5f0ftomcat\u4e0a\uff0cREST\u7684\u6027\u80fd\u6bd4jetty\u4e0a\u8981\u597d\u5f97\u591a\uff08\u53c2\u89c1\u540e\u9762\u7684\u57fa\u51c6\u6d4b\u8bd5\uff09\uff0c\u5efa\u8bae\u5728\u9700\u8981\u9ad8\u6027\u80fd\u7684\u573a\u666f\u4e0b\u91c7\u7528tomcat\u3002 dubbo:protocol name= rest server= netty / \u4ee5\u4e0a\u914d\u7f6e\u9009\u7528\u5d4c\u5165\u5f0f\u7684netty\u6765\u505arest server\u3002\uff08TODO more contents to add\uff09 dubbo:protocol name= rest server= tjws / (tjws is now deprecated) dubbo:protocol name= rest server= sunhttp / \u4ee5\u4e0a\u914d\u7f6e\u9009\u7528\u5d4c\u5165\u5f0f\u7684tjws\u6216Sun HTTP server\u6765\u505arest server\u3002\u8fd9\u4e24\u4e2aserver\u5b9e\u73b0\u975e\u5e38\u8f7b\u91cf\u7ea7\uff0c\u975e\u5e38\u65b9\u4fbf\u5728\u96c6\u6210\u6d4b\u8bd5\u4e2d\u5feb\u901f\u542f\u52a8\u4f7f\u7528\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u5728\u8d1f\u8377\u4e0d\u9ad8\u7684\u751f\u4ea7\u73af\u5883\u4e2d\u4f7f\u7528\u3002 \u6ce8\uff1atjws\u76ee\u524d\u5df2\u7ecf\u88abdeprecated\u6389\u4e86\uff0c\u56e0\u4e3a\u5b83\u4e0d\u80fd\u5f88\u597d\u7684\u548cservlet 3.1 API\u5de5\u4f5c\u3002 \u5982\u679c\u4f60\u7684dubbo\u7cfb\u7edf\u4e0d\u662f\u5355\u72ec\u542f\u52a8\u7684\u8fdb\u7a0b\uff0c\u800c\u662f\u90e8\u7f72\u5230\u4e86Java\u5e94\u7528\u670d\u52a1\u5668\u4e2d\uff0c\u5219\u5efa\u8bae\u4f60\u91c7\u7528\u4ee5\u4e0b\u914d\u7f6e\uff1a dubbo:protocol name= rest server= servlet / \u901a\u8fc7\u5c06server\u8bbe\u7f6e\u4e3aservlet\uff0cdubbo\u5c06\u91c7\u7528\u5916\u90e8\u5e94\u7528\u670d\u52a1\u5668\u7684servlet\u5bb9\u5668\u6765\u505arest server\u3002\u540c\u65f6\uff0c\u8fd8\u8981\u5728dubbo\u7cfb\u7edf\u7684web.xml\u4e2d\u6dfb\u52a0\u5982\u4e0b\u914d\u7f6e\uff1a web-app context-param param-name contextConfigLocation /param-name param-value /WEB-INF/classes/META-INF/spring/dubbo-demo-provider.xml /param-value /context-param listener listener-class org.apache.dubbo.remoting.http.servlet.BootstrapListener /listener-class /listener listener listener-class org.springframework.web.context.ContextLoaderListener /listener-class /listener servlet servlet-name dispatcher /servlet-name servlet-class org.apache.dubbo.remoting.http.servlet.DispatcherServlet /servlet-class load-on-startup 1 /load-on-startup /servlet servlet-mapping servlet-name dispatcher /servlet-name url-pattern /* /url-pattern /servlet-mapping /web-app \u5373\u5fc5\u987b\u5c06dubbo\u7684BootstrapListener\u548cDispatherServlet\u6dfb\u52a0\u5230web.xml\uff0c\u4ee5\u5b8c\u6210dubbo\u7684REST\u529f\u80fd\u4e0e\u5916\u90e8servlet\u5bb9\u5668\u7684\u96c6\u6210\u3002 \u6ce8\u610f\uff1a\u5982\u679c\u4f60\u662f\u7528spring\u7684ContextLoaderListener\u6765\u52a0\u8f7dspring\uff0c\u5219\u5fc5\u987b\u4fdd\u8bc1BootstrapListener\u914d\u7f6e\u5728ContextLoaderListener\u4e4b\u524d\uff0c\u5426\u5219dubbo\u521d\u59cb\u5316\u4f1a\u51fa\u9519\u3002 \u5176\u5b9e\uff0c\u8fd9\u79cd\u573a\u666f\u4e0b\u4f60\u4f9d\u7136\u53ef\u4ee5\u575a\u6301\u7528\u5d4c\u5165\u5f0fserver\uff0c\u4f46\u5916\u90e8\u5e94\u7528\u670d\u52a1\u5668\u7684servlet\u5bb9\u5668\u5f80\u5f80\u6bd4\u5d4c\u5165\u5f0fserver\u66f4\u52a0\u5f3a\u5927\uff08\u7279\u522b\u662f\u5982\u679c\u4f60\u662f\u90e8\u7f72\u5230\u66f4\u5065\u58ee\u66f4\u53ef\u4f38\u7f29\u7684WebLogic\uff0cWebSphere\u7b49\uff09\uff0c\u53e6\u5916\u6709\u65f6\u4e5f\u4fbf\u4e8e\u5728\u5e94\u7528\u670d\u52a1\u5668\u505a\u7edf\u4e00\u7ba1\u7406\u3001\u76d1\u63a7\u7b49\u7b49\u3002","title":"\u914d\u7f6eREST Server\u7684\u5b9e\u73b0"},{"location":"user/rest/#context","text":"\u5728\u8fdc\u7a0b\u8c03\u7528\u4e2d\uff0c\u503c\u5f97\u83b7\u53d6\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u53ef\u80fd\u6709\u5f88\u591a\u79cd\uff0c\u8fd9\u91cc\u7279\u522b\u4ee5\u83b7\u53d6\u5ba2\u6237\u7aefIP\u4e3a\u4f8b\u3002 \u5728dubbo\u7684REST\u4e2d\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u65b9\u5f0f\u83b7\u53d6\u5ba2\u6237\u7aefIP\u3002 \u7b2c\u4e00\u79cd\u65b9\u5f0f\uff0c\u7528JAX-RS\u6807\u51c6\u7684@Context annotation\uff1a public User getUser(@PathParam( id ) Long id, @Context HttpServletRequest request) { System.out.println( Client address is + request.getRemoteAddr()); } \u7528Context\u4fee\u9970getUser()\u7684\u4e00\u4e2a\u65b9\u6cd5\u53c2\u6570\u540e\uff0c\u5c31\u53ef\u4ee5\u5c06\u5f53\u524d\u7684HttpServletRequest\u6ce8\u5165\u8fdb\u6765\uff0c\u7136\u540e\u76f4\u63a5\u8c03\u7528servlet api\u83b7\u53d6IP\u3002 \u6ce8\u610f\uff1a\u8fd9\u79cd\u65b9\u5f0f\u53ea\u80fd\u5728\u8bbe\u7f6eserver=\"tjws\"\u6216\u8005server=\"tomcat\"\u6216\u8005server=\"jetty\"\u6216\u8005server=\"servlet\"\u7684\u65f6\u5019\u624d\u80fd\u5de5\u4f5c\uff0c\u56e0\u4e3a\u53ea\u6709\u8fd9\u51e0\u79cdREST server\u7684\u5b9e\u73b0\u624d\u63d0\u4f9b\u4e86servlet\u5bb9\u5668\u3002\u53e6\u5916\uff0c\u6807\u51c6\u7684JAX-RS\u8fd8\u652f\u6301\u7528@Context\u4fee\u9970service\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u5b57\u6bb5\u6765\u83b7\u53d6HttpServletRequest\uff0c\u4f46\u5728dubbo\u4e2d\u6211\u4eec\u6ca1\u6709\u5bf9\u6b64\u4f5c\u51fa\u652f\u6301\u3002 \u7b2c\u4e8c\u79cd\u65b9\u5f0f\uff0c\u7528dubbo\u4e2d\u5e38\u7528\u7684RpcContext\uff1a public User getUser(@PathParam( id ) Long id) { System.out.println( Client address is + RpcContext.getContext().getRemoteAddressString()); } \u6ce8\u610f\uff1a\u8fd9\u79cd\u65b9\u5f0f\u53ea\u80fd\u5728\u8bbe\u7f6eserver=\"jetty\"\u6216\u8005server=\"tomcat\"\u6216\u8005server=\"servlet\"\u6216\u8005server=\"tjws\"\u7684\u65f6\u5019\u624d\u80fd\u5de5\u4f5c\u3002\u53e6\u5916\uff0c\u76ee\u524ddubbo\u7684RpcContext\u662f\u4e00\u79cd\u6bd4\u8f83\u6709\u4fb5\u5165\u6027\u7684\u7528\u6cd5\uff0c\u672a\u6765\u6211\u4eec\u5f88\u53ef\u80fd\u4f1a\u505a\u51fa\u91cd\u6784\u3002 \u5982\u679c\u4f60\u60f3\u4fdd\u6301\u4f60\u7684\u9879\u76ee\u5bf9JAX-RS\u7684\u517c\u5bb9\u6027\uff0c\u672a\u6765\u8131\u79bbdubbo\u4e5f\u53ef\u4ee5\u8fd0\u884c\uff0c\u8bf7\u9009\u62e9\u7b2c\u4e00\u79cd\u65b9\u5f0f\u3002\u5982\u679c\u4f60\u60f3\u8981\u66f4\u4f18\u96c5\u7684\u670d\u52a1\u63a5\u53e3\u5b9a\u4e49\uff0c\u8bf7\u9009\u7528\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u3002 \u6b64\u5916\uff0c\u5728\u6700\u65b0\u7684dubbo rest\u4e2d\uff0c\u8fd8\u652f\u6301\u901a\u8fc7RpcContext\u6765\u83b7\u53d6HttpServletRequest\u548cHttpServletResponse\uff0c\u4ee5\u63d0\u4f9b\u66f4\u5927\u7684\u7075\u6d3b\u6027\u6765\u65b9\u4fbf\u7528\u6237\u5b9e\u73b0\u67d0\u4e9b\u590d\u6742\u529f\u80fd\uff0c\u6bd4\u5982\u5728dubbo\u6807\u51c6\u7684filter\u4e2d\u8bbf\u95eeHTTP Header\u3002\u7528\u6cd5\u793a\u4f8b\u5982\u4e0b\uff1a if (RpcContext.getContext().getRequest() != null RpcContext.getContext().getRequest() instanceof HttpServletRequest) { System.out.println( Client address is + ((HttpServletRequest) RpcContext.getContext().getRequest()).getRemoteAddr()); } if (RpcContext.getContext().getResponse() != null RpcContext.getContext().getResponse() instanceof HttpServletResponse) { System.out.println( Response object from RpcContext: + RpcContext.getContext().getResponse()); } \u6ce8\u610f\uff1a\u4e3a\u4e86\u4fdd\u6301\u534f\u8bae\u7684\u4e2d\u7acb\u6027\uff0cRpcContext.getRequest()\u548cRpcContext.getResponse()\u8fd4\u56de\u7684\u4ec5\u4ec5\u662f\u4e00\u4e2aObject\u7c7b\uff0c\u800c\u4e14\u53ef\u80fd\u4e3anull\u3002\u6240\u4ee5\uff0c\u4f60\u5fc5\u987b\u81ea\u5df1\u505anull\u548c\u7c7b\u578b\u7684\u68c0\u67e5\u3002 \u6ce8\u610f\uff1a\u53ea\u6709\u5728\u8bbe\u7f6eserver=\"jetty\"\u6216\u8005server=\"tomcat\"\u6216\u8005server=\"servlet\"\u7684\u65f6\u5019\uff0c\u4f60\u624d\u80fd\u901a\u8fc7\u4ee5\u4e0a\u65b9\u6cd5\u6b63\u786e\u7684\u5f97\u5230HttpServletRequest\u548cHttpServletResponse\uff0c\u56e0\u4e3a\u53ea\u6709\u8fd9\u51e0\u79cdserver\u5b9e\u73b0\u4e86servlet\u5bb9\u5668\u3002 \u4e3a\u4e86\u7b80\u5316\u7f16\u7a0b\uff0c\u5728\u6b64\u4f60\u4e5f\u53ef\u4ee5\u7528\u6cdb\u578b\u7684\u65b9\u5f0f\u6765\u76f4\u63a5\u83b7\u53d6\u7279\u5b9a\u7c7b\u578b\u7684request/response\uff1a if (RpcContext.getContext().getRequest(HttpServletRequest.class) != null) { System.out.println( Client address is + RpcContext.getContext().getRequest(HttpServletRequest.class).getRemoteAddr()); } if (RpcContext.getContext().getResponse(HttpServletResponse.class) != null) { System.out.println( Response object from RpcContext: + RpcContext.getContext().getResponse(HttpServletResponse.class)); } \u5982\u679crequest/response\u4e0d\u7b26\u5408\u6307\u5b9a\u7684\u7c7b\u578b\uff0c\u8fd9\u91cc\u4e5f\u4f1a\u8fd4\u56denull\u3002","title":"\u83b7\u53d6\u4e0a\u4e0b\u6587\uff08Context\uff09\u4fe1\u606f"},{"location":"user/rest/#context-path","text":"dubbo\u4e2d\u7684rest\u534f\u8bae\u9ed8\u8ba4\u5c06\u91c7\u752880\u7aef\u53e3\uff0c\u5982\u679c\u60f3\u4fee\u6539\u7aef\u53e3\uff0c\u76f4\u63a5\u914d\u7f6e\uff1a dubbo:protocol name= rest port= 8888 / \u53e6\u5916\uff0c\u5982\u524d\u6240\u8ff0\uff0c\u6211\u4eec\u53ef\u4ee5\u7528@Path\u6765\u914d\u7f6e\u5355\u4e2arest\u670d\u52a1\u7684URL\u76f8\u5bf9\u8def\u5f84\u3002\u4f46\u5176\u5b9e\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u6240\u6709rest\u670d\u52a1\u90fd\u9002\u7528\u7684\u57fa\u7840\u76f8\u5bf9\u8def\u5f84\uff0c\u5373java web\u5e94\u7528\u4e2d\u5e38\u8bf4\u7684context path\u3002 \u53ea\u9700\u8981\u6dfb\u52a0\u5982\u4e0bcontextpath\u5c5e\u6027\u5373\u53ef\uff1a dubbo:protocol name= rest port= 8888 contextpath= services / \u4ee5\u524d\u9762\u4ee3\u7801\u4e3a\u4f8b\uff1a @Path( users ) public class UserServiceImpl implements UserService { @POST @Path( register ) @Consumes({MediaType.APPLICATION_JSON}) public void registerUser(User user) { // save the user... } } \u73b0\u5728registerUser()\u7684\u5b8c\u6574\u8bbf\u95ee\u8def\u5f84\u4e3a\uff1a http://localhost:8888/services/users/register \u6ce8\u610f\uff1a\u5982\u679c\u4f60\u662f\u9009\u7528\u5916\u90e8\u5e94\u7528\u670d\u52a1\u5668\u505arest server\uff0c\u5373\u914d\u7f6e: dubbo:protocol name= rest port= 8888 contextpath= services server= servlet / \u5219\u5fc5\u987b\u4fdd\u8bc1\u8fd9\u91cc\u8bbe\u7f6e\u7684port\u3001contextpath\uff0c\u4e0e\u5916\u90e8\u5e94\u7528\u670d\u52a1\u5668\u7684\u7aef\u53e3\u3001DispatcherServlet\u7684\u4e0a\u4e0b\u6587\u8def\u5f84\uff08\u5373webapp path\u52a0\u4e0aservlet url pattern\uff09\u4fdd\u6301\u4e00\u81f4\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u90e8\u7f72\u4e3atomcat ROOT\u8def\u5f84\u7684\u5e94\u7528\uff0c\u8fd9\u91cc\u7684contextpath\u5fc5\u987b\u4e0eweb.xml\u4e2dDispacherServlet\u7684 url-pattern/ \u5b8c\u5168\u4e00\u81f4\uff1a servlet-mapping servlet-name dispatcher /servlet-name url-pattern /services/* /url-pattern /servlet-mapping","title":"\u914d\u7f6e\u7aef\u53e3\u53f7\u548cContext Path"},{"location":"user/rest/#io","text":"\u53ef\u4ee5\u4e3arest\u670d\u52a1\u914d\u7f6e\u7ebf\u7a0b\u6c60\u5927\u5c0f\uff1a dubbo:protocol name= rest threads= 500 / \u6ce8\u610f\uff1a\u76ee\u524d\u7ebf\u7a0b\u6c60\u7684\u8bbe\u7f6e\u53ea\u6709\u5f53server=\"netty\"\u6216\u8005server=\"jetty\"\u6216\u8005server=\"tomcat\"\u7684\u65f6\u5019\u624d\u80fd\u751f\u6548\u3002\u53e6\u5916\uff0c\u5982\u679cserver=\"servlet\"\uff0c\u7531\u4e8e\u8fd9\u65f6\u5019\u542f\u7528\u7684\u662f\u5916\u90e8\u5e94\u7528\u670d\u52a1\u5668\u505arest server\uff0c\u4e0d\u53d7dubbo\u63a7\u5236\uff0c\u6240\u4ee5\u8fd9\u91cc\u7684\u7ebf\u7a0b\u6c60\u8bbe\u7f6e\u4e5f\u65e0\u6548\u3002 \u5982\u679c\u662f\u9009\u7528netty server\uff0c\u8fd8\u53ef\u4ee5\u914d\u7f6eNetty\u7684IO worker\u7ebf\u7a0b\u6570\uff1a dubbo:protocol name= rest iothreads= 5 threads= 100 /","title":"\u914d\u7f6e\u7ebf\u7a0b\u6570\u548cIO\u7ebf\u7a0b\u6570"},{"location":"user/rest/#_7","text":"Dubbo\u4e2d\u7684rest\u670d\u52a1\u9ed8\u8ba4\u90fd\u662f\u91c7\u7528http\u957f\u8fde\u63a5\u6765\u8bbf\u95ee\uff0c\u5982\u679c\u60f3\u5207\u6362\u4e3a\u77ed\u8fde\u63a5\uff0c\u76f4\u63a5\u914d\u7f6e\uff1a dubbo:protocol name= rest keepalive= false / \u6ce8\u610f\uff1a\u8fd9\u4e2a\u914d\u7f6e\u76ee\u524d\u53ea\u5bf9server=\"netty\"\u548cserver=\"tomcat\"\u624d\u80fd\u751f\u6548\u3002","title":"\u914d\u7f6e\u957f\u8fde\u63a5"},{"location":"user/rest/#http","text":"\u53ef\u4ee5\u914d\u7f6e\u670d\u52a1\u5668\u63d0\u4f9b\u7aef\u6240\u80fd\u540c\u65f6\u63a5\u6536\u7684\u6700\u5927HTTP\u8fde\u63a5\u6570\uff0c\u9632\u6b62REST server\u88ab\u8fc7\u591a\u8fde\u63a5\u6491\u7206\uff0c\u4ee5\u4f5c\u4e3a\u4e00\u79cd\u6700\u57fa\u672c\u7684\u81ea\u6211\u4fdd\u62a4\u673a\u5236\uff1a dubbo:protocol name= rest accepts= 500 server= tomcat/ \u6ce8\u610f\uff1a\u8fd9\u4e2a\u914d\u7f6e\u76ee\u524d\u53ea\u5bf9server=\"tomcat\"\u624d\u80fd\u751f\u6548\u3002","title":"\u914d\u7f6e\u6700\u5927\u7684HTTP\u8fde\u63a5\u6570"},{"location":"user/rest/#http_1","text":"\u5982\u679crest\u670d\u52a1\u7684\u6d88\u8d39\u7aef\u4e5f\u662fdubbo\u7cfb\u7edf\uff0c\u53ef\u4ee5\u50cf\u5176\u4ed6dubbo RPC\u673a\u5236\u4e00\u6837\uff0c\u914d\u7f6e\u6d88\u8d39\u7aef\u8c03\u7528\u6b64rest\u670d\u52a1\u7684\u6700\u5927\u8d85\u65f6\u65f6\u95f4\u4ee5\u53ca\u6bcf\u4e2a\u6d88\u8d39\u7aef\u6240\u80fd\u542f\u52a8\u7684\u6700\u5927HTTP\u8fde\u63a5\u6570\u3002 dubbo:service interface= xxx ref= xxx protocol= rest timeout= 2000 connections= 10 / \u5f53\u7136\uff0c\u7531\u4e8e\u8fd9\u4e2a\u914d\u7f6e\u9488\u5bf9\u6d88\u8d39\u7aef\u751f\u6548\u7684\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u5728\u6d88\u8d39\u7aef\u914d\u7f6e\uff1a dubbo:reference id= xxx interface= xxx timeout= 2000 connections= 10 / \u4f46\u662f\uff0c\u901a\u5e38\u6211\u4eec\u5efa\u8bae\u914d\u7f6e\u5728\u670d\u52a1\u63d0\u4f9b\u7aef\u63d0\u4f9b\u6b64\u7c7b\u914d\u7f6e\u3002\u6309\u7167dubbo\u5b98\u65b9\u6587\u6863\u7684\u8bf4\u6cd5\uff1a\u201cProvider\u4e0a\u5c3d\u91cf\u591a\u914d\u7f6eConsumer\u7aef\u7684\u5c5e\u6027\uff0c\u8ba9Provider\u5b9e\u73b0\u8005\u4e00\u5f00\u59cb\u5c31\u601d\u8003Provider\u670d\u52a1\u7279\u70b9\u3001\u670d\u52a1\u8d28\u91cf\u7684\u95ee\u9898\u3002\u201d \u6ce8\u610f\uff1a\u5982\u679cdubbo\u7684REST\u670d\u52a1\u662f\u53d1\u5e03\u7ed9\u975edubbo\u7684\u5ba2\u6237\u7aef\u4f7f\u7528\uff0c\u5219\u8fd9\u91cc dubbo:service/ \u4e0a\u7684\u914d\u7f6e\u5b8c\u5168\u65e0\u6548\uff0c\u56e0\u4e3a\u8fd9\u79cd\u5ba2\u6237\u7aef\u4e0d\u53d7dubbo\u63a7\u5236\u3002","title":"\u914d\u7f6e\u6bcf\u4e2a\u6d88\u8d39\u7aef\u7684\u8d85\u65f6\u65f6\u95f4\u548cHTTP\u8fde\u63a5\u6570"},{"location":"user/rest/#gzip","text":"Dubbo\u7684REST\u652f\u6301\u7528GZIP\u538b\u7f29\u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u6570\u636e\uff0c\u4ee5\u51cf\u5c11\u7f51\u7edc\u4f20\u8f93\u65f6\u95f4\u548c\u5e26\u5bbd\u5360\u7528\uff0c\u4f46\u8fd9\u79cd\u65b9\u5f0f\u4f1a\u4e5f\u589e\u52a0CPU\u5f00\u9500\u3002 TODO more contents to add","title":"GZIP\u6570\u636e\u538b\u7f29"},{"location":"user/rest/#annotationspring-xml","text":"\u4ee5\u4e0a\u6240\u6709\u7684\u8ba8\u8bba\u90fd\u662f\u57fa\u4e8edubbo\u5728spring\u4e2d\u7684xml\u914d\u7f6e\u3002\u4f46\u662f\uff0cdubbo/spring\u672c\u8eab\u4e5f\u652f\u6301\u7528annotation\u6765\u4f5c\u914d\u7f6e\uff0c\u6240\u4ee5\u6211\u4eec\u4e5f\u53ef\u4ee5\u6309dubbo\u5b98\u65b9\u6587\u6863\u4e2d\u7684\u6b65\u9aa4\uff0c\u628a\u76f8\u5173annotation\u52a0\u5230REST\u670d\u52a1\u7684\u5b9e\u73b0\u4e2d\uff0c\u53d6\u4ee3\u4e00\u4e9bxml\u914d\u7f6e\uff0c\u4f8b\u5982\uff1a @Service(protocol = rest ) @Path( users ) public class UserServiceImpl implements UserService { @Autowired private UserRepository userRepository; @POST @Path( register ) @Consumes({MediaType.APPLICATION_JSON}) public void registerUser(User user) { // save the user userRepository.save(user); } } annotation\u7684\u914d\u7f6e\u66f4\u7b80\u5355\u66f4\u7cbe\u786e\uff0c\u7ecf\u5e38\u4e5f\u66f4\u4fbf\u4e8e\u7ef4\u62a4\uff08\u5f53\u7136\u73b0\u4ee3IDE\u90fd\u53ef\u4ee5\u5728xml\u4e2d\u652f\u6301\u6bd4\u5982\u7c7b\u540d\u91cd\u6784\uff0c\u6240\u4ee5\u5c31\u8fd9\u91cc\u7684\u7279\u5b9a\u7528\u4f8b\u800c\u8a00\uff0cxml\u7684\u7ef4\u62a4\u6027\u4e5f\u5f88\u597d\uff09\u3002\u800cxml\u5bf9\u4ee3\u7801\u7684\u4fb5\u5165\u6027\u66f4\u5c0f\u4e00\u4e9b\uff0c\u5c24\u5176\u6709\u5229\u4e8e\u52a8\u6001\u4fee\u6539\u914d\u7f6e\uff0c\u7279\u522b\u662f\u6bd4\u5982\u4f60\u8981\u9488\u5bf9\u5355\u4e2a\u670d\u52a1\u914d\u7f6e\u8fde\u63a5\u8d85\u65f6\u65f6\u95f4\u3001\u6bcf\u5ba2\u6237\u7aef\u6700\u5927\u8fde\u63a5\u6570\u3001\u96c6\u7fa4\u7b56\u7565\u3001\u6743\u91cd\u7b49\u7b49\u3002\u53e6\u5916\uff0c\u7279\u522b\u5bf9\u590d\u6742\u5e94\u7528\u6216\u8005\u6a21\u5757\u6765\u8bf4\uff0cxml\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e2d\u5fc3\u70b9\u6765\u6db5\u76d6\u7684\u6240\u6709\u7ec4\u4ef6\u548c\u914d\u7f6e\uff0c\u66f4\u4e00\u76ee\u4e86\u7136\uff0c\u4e00\u822c\u66f4\u4fbf\u4e8e\u9879\u76ee\u957f\u65f6\u671f\u7684\u7ef4\u62a4\u3002 \u5f53\u7136\uff0c\u9009\u62e9\u54ea\u79cd\u914d\u7f6e\u65b9\u5f0f\u6ca1\u6709\u7edd\u5bf9\u7684\u4f18\u52a3\uff0c\u548c\u4e2a\u4eba\u7684\u504f\u597d\u4e5f\u4e0d\u65e0\u5173\u7cfb\u3002","title":"\u7528Annotation\u53d6\u4ee3\u90e8\u5206Spring XML\u914d\u7f6e"},{"location":"user/rest/#filterinterceptor","text":"Dubbo\u7684REST\u4e5f\u652f\u6301JAX-RS\u6807\u51c6\u7684Filter\u548cInterceptor\uff0c\u4ee5\u65b9\u4fbf\u5bf9REST\u7684\u8bf7\u6c42\u4e0e\u54cd\u5e94\u8fc7\u7a0b\u505a\u5b9a\u5236\u5316\u7684\u62e6\u622a\u5904\u7406\u3002 \u5176\u4e2d\uff0cFilter\u4e3b\u8981\u7528\u4e8e\u8bbf\u95ee\u548c\u8bbe\u7f6eHTTP\u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u53c2\u6570\u3001URI\u7b49\u7b49\u3002\u4f8b\u5982\uff0c\u8bbe\u7f6eHTTP\u54cd\u5e94\u7684cache header\uff1a public class CacheControlFilter implements ContainerResponseFilter { public void filter(ContainerRequestContext req, ContainerResponseContext res) { if (req.getMethod().equals( GET )) { res.getHeaders().add( Cache-Control , someValue ); } } } Interceptor\u4e3b\u8981\u7528\u4e8e\u8bbf\u95ee\u548c\u4fee\u6539\u8f93\u5165\u4e0e\u8f93\u51fa\u5b57\u8282\u6d41\uff0c\u4f8b\u5982\uff0c\u624b\u52a8\u6dfb\u52a0GZIP\u538b\u7f29\uff1a public class GZIPWriterInterceptor implements WriterInterceptor { @Override public void aroundWriteTo(WriterInterceptorContext context) throws IOException, WebApplicationException { OutputStream outputStream = context.getOutputStream(); context.setOutputStream(new GZIPOutputStream(outputStream)); context.proceed(); } } \u5728\u6807\u51c6JAX-RS\u5e94\u7528\u4e2d\uff0c\u6211\u4eec\u4e00\u822c\u662f\u4e3aFilter\u548cInterceptor\u6dfb\u52a0@Provider annotation\uff0c\u7136\u540eJAX-RS runtime\u4f1a\u81ea\u52a8\u53d1\u73b0\u5e76\u542f\u7528\u5b83\u4eec\u3002\u800c\u5728dubbo\u4e2d\uff0c\u6211\u4eec\u662f\u901a\u8fc7\u6dfb\u52a0XML\u914d\u7f6e\u7684\u65b9\u5f0f\u6765\u6ce8\u518cFilter\u548cInterceptor\uff1a dubbo:protocol name= rest port= 8888 extension= xxx.TraceInterceptor, xxx.TraceFilter / \u5728\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06Filter\u3001Interceptor\u548cDynamicFeature\u8fd9\u4e09\u79cd\u7c7b\u578b\u7684\u5bf9\u8c61\u90fd\u6dfb\u52a0\u5230 extension \u5c5e\u6027\u4e0a\uff0c\u591a\u4e2a\u4e4b\u95f4\u7528\u9017\u53f7\u5206\u9694\u3002\uff08DynamicFeature\u662f\u53e6\u4e00\u4e2a\u63a5\u53e3\uff0c\u53ef\u4ee5\u65b9\u4fbf\u6211\u4eec\u66f4\u52a8\u6001\u7684\u542f\u7528Filter\u548cInterceptor\uff0c\u611f\u5174\u8da3\u8bf7\u81ea\u884cgoogle\u3002\uff09 \u5f53\u7136\uff0cdubbo\u81ea\u8eab\u4e5f\u652f\u6301Filter\u7684\u6982\u5ff5\uff0c\u4f46\u6211\u4eec\u8fd9\u91cc\u8ba8\u8bba\u7684Filter\u548cInterceptor\u66f4\u52a0\u63a5\u8fd1\u534f\u8bae\u5b9e\u73b0\u7684\u5e95\u5c42\uff0c\u76f8\u6bd4dubbo\u7684filter\uff0c\u53ef\u4ee5\u505a\u66f4\u5e95\u5c42\u7684\u5b9a\u5236\u5316\u3002 \u6ce8\uff1a\u8fd9\u91cc\u7684XML\u5c5e\u6027\u53ebextension\uff0c\u800c\u4e0d\u662f\u53ebinterceptor\u6216\u8005filter\uff0c\u662f\u56e0\u4e3a\u9664\u4e86Interceptor\u548cFilter\uff0c\u672a\u6765\u6211\u4eec\u8fd8\u4f1a\u6dfb\u52a0\u66f4\u591a\u7684\u6269\u5c55\u7c7b\u578b\u3002 \u5982\u679cREST\u7684\u6d88\u8d39\u7aef\u4e5f\u662fdubbo\u7cfb\u7edf\uff08\u53c2\u89c1\u4e0b\u6587\u7684\u8ba8\u8bba\uff09\uff0c\u5219\u4e5f\u53ef\u4ee5\u7528\u7c7b\u4f3c\u65b9\u5f0f\u4e3a\u6d88\u8d39\u7aef\u914d\u7f6eInterceptor\u548cFilter\u3002\u4f46\u6ce8\u610f\uff0cJAX-RS\u4e2d\u6d88\u8d39\u7aef\u7684Filter\u548c\u63d0\u4f9b\u7aef\u7684Filter\u662f\u4e24\u79cd\u4e0d\u540c\u7684\u63a5\u53e3\u3002\u4f8b\u5982\u524d\u9762\u4f8b\u5b50\u4e2d\u670d\u52a1\u7aef\u662fContainerResponseFilter\u63a5\u53e3\uff0c\u800c\u6d88\u8d39\u7aef\u5bf9\u5e94\u7684\u662fClientResponseFilter: public class LoggingFilter implements ClientResponseFilter { public void filter(ClientRequestContext reqCtx, ClientResponseContext resCtx) throws IOException { System.out.println( status: + resCtx.getStatus()); System.out.println( date: + resCtx.getDate()); System.out.println( last-modified: + resCtx.getLastModified()); System.out.println( location: + resCtx.getLocation()); System.out.println( headers: ); for (Entry String, List String header : resCtx.getHeaders().entrySet()) { System.out.print( \\t + header.getKey() + : ); for (String value : header.getValue()) { System.out.print(value + , ); } System.out.print( \\n ); } System.out.println( media-type: + resCtx.getMediaType().getType()); } }","title":"\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684Filter\u3001Interceptor\u7b49"},{"location":"user/rest/#exception","text":"Dubbo\u7684REST\u4e5f\u652f\u6301JAX-RS\u6807\u51c6\u7684ExceptionMapper\uff0c\u53ef\u4ee5\u7528\u6765\u5b9a\u5236\u7279\u5b9aexception\u53d1\u751f\u540e\u5e94\u8be5\u8fd4\u56de\u7684HTTP\u54cd\u5e94\u3002 public class CustomExceptionMapper implements ExceptionMapper NotFoundException { public Response toResponse(NotFoundException e) { return Response.status(Response.Status.NOT_FOUND).entity( Oops! the requested resource is not found! ).type( text/plain ).build(); } } \u548cInterceptor\u3001Filter\u7c7b\u4f3c\uff0c\u5c06\u5176\u6dfb\u52a0\u5230XML\u914d\u7f6e\u6587\u4ef6\u4e2d\u5373\u53ef\u542f\u7528\uff1a dubbo:protocol name= rest port= 8888 extension= xxx.CustomExceptionMapper /","title":"\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684Exception\u5904\u7406"},{"location":"user/rest/#http_2","text":"Dubbo rest\u652f\u6301\u8f93\u51fa\u6240\u6709HTTP\u8bf7\u6c42/\u54cd\u5e94\u4e2d\u7684header\u5b57\u6bb5\u548cbody\u6d88\u606f\u4f53\u3002 \u5728XML\u914d\u7f6e\u4e2d\u6dfb\u52a0\u5982\u4e0b\u81ea\u5e26\u7684REST filter\uff1a dubbo:protocol name= rest port= 8888 extension= org.apache.dubbo.rpc.protocol.rest.support.LoggingFilter / \u7136\u540e\u5728logging\u914d\u7f6e\u4e2d\u81f3\u5c11\u4e3aorg.apache.dubbo.rpc.protocol.rest.support\u6253\u5f00INFO\u7ea7\u522b\u65e5\u5fd7\u8f93\u51fa \uff0c\u4f8b\u5982\uff0c\u5728log4j.xml\u4e2d\u914d\u7f6e\uff1a logger name= org.apache.dubbo.rpc.protocol.rest.support level value= INFO / appender-ref ref= CONSOLE / /logger \u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728ROOT logger\u6253\u5f00INFO\u7ea7\u522b\u65e5\u5fd7\u8f93\u51fa\uff1a root level value= INFO / appender-ref ref= CONSOLE / /root \u7136\u540e\u5728\u65e5\u5fd7\u4e2d\u4f1a\u6709\u7c7b\u4f3c\u5982\u4e0b\u7684\u5185\u5bb9\u8f93\u51fa\uff1a The HTTP headers are: accept: application/json;charset=UTF-8 accept-encoding: gzip, deflate connection: Keep-Alive content-length: 22 content-type: application/json host: 192.168.1.100:8888 user-agent: Apache-HttpClient/4.2.1 (java 1.5) The contents of request body is: { id :1, name : dang } \u6253\u5f00HTTP\u65e5\u5fd7\u8f93\u51fa\u540e\uff0c\u9664\u4e86\u6b63\u5e38\u65e5\u5fd7\u8f93\u51fa\u7684\u6027\u80fd\u5f00\u9500\u5916\uff0c\u4e5f\u4f1a\u5728\u6bd4\u5982HTTP\u8bf7\u6c42\u89e3\u6790\u65f6\u4ea7\u751f\u989d\u5916\u7684\u5f00\u9500\uff0c\u56e0\u4e3a\u9700\u8981\u5efa\u7acb\u989d\u5916\u7684\u5185\u5b58\u7f13\u51b2\u533a\u6765\u4e3a\u65e5\u5fd7\u7684\u8f93\u51fa\u505a\u6570\u636e\u51c6\u5907\u3002","title":"\u914d\u7f6eHTTP\u65e5\u5fd7\u8f93\u51fa"},{"location":"user/rest/#_8","text":"dubbo\u7684rest\u652f\u6301\u91c7\u7528Java\u6807\u51c6\u7684bean validation annotation\uff08JSR 303)\u6765\u505a\u8f93\u5165\u6821\u9a8chttp://beanvalidation.org/ \u4e3a\u4e86\u548c\u5176\u4ed6dubbo\u8fdc\u7a0b\u8c03\u7528\u534f\u8bae\u4fdd\u6301\u4e00\u81f4\uff0c\u5728rest\u4e2d\u4f5c\u6821\u9a8c\u7684annotation\u5fc5\u987b\u653e\u5728\u670d\u52a1\u7684\u63a5\u53e3\u4e0a\uff0c\u4f8b\u5982\uff1a public interface UserService { User getUser(@Min(value=1L, message= User ID must be greater than 1 ) Long id); } \u5f53\u7136\uff0c\u5728\u5f88\u591a\u5176\u4ed6\u7684bean validation\u7684\u5e94\u7528\u573a\u666f\u90fd\u662f\u5c06annotation\u653e\u5230\u5b9e\u73b0\u7c7b\u800c\u4e0d\u662f\u63a5\u53e3\u4e0a\u3002\u628aannotation\u653e\u5728\u63a5\u53e3\u4e0a\u81f3\u5c11\u6709\u4e00\u4e2a\u597d\u5904\u662f\uff0cdubbo\u7684\u5ba2\u6237\u7aef\u53ef\u4ee5\u5171\u4eab\u8fd9\u4e2a\u63a5\u53e3\u7684\u4fe1\u606f\uff0cdubbo\u751a\u81f3\u4e0d\u9700\u8981\u505a\u8fdc\u7a0b\u8c03\u7528\uff0c\u5728\u672c\u5730\u5c31\u53ef\u4ee5\u5b8c\u6210\u8f93\u5165\u6821\u9a8c\u3002 \u7136\u540e\u6309\u7167dubbo\u7684\u6807\u51c6\u65b9\u5f0f\u5728XML\u914d\u7f6e\u4e2d\u6253\u5f00\u9a8c\u8bc1\uff1a dubbo:service interface=xxx.UserService ref= userService protocol= rest validation= true / \u5728dubbo\u7684\u5176\u4ed6\u5f88\u591a\u8fdc\u7a0b\u8c03\u7528\u534f\u8bae\u4e2d\uff0c\u5982\u679c\u8f93\u5165\u9a8c\u8bc1\u51fa\u9519\uff0c\u662f\u76f4\u63a5\u5c06 RpcException \u629b\u5411\u5ba2\u6237\u7aef\uff0c\u800c\u5728rest\u4e2d\u7531\u4e8e\u5ba2\u6237\u7aef\u7ecf\u5e38\u662f\u975edubbo\uff0c\u751a\u81f3\u975ejava\u7684\u7cfb\u7edf\uff0c\u6240\u4ee5\u4e0d\u4fbf\u76f4\u63a5\u629b\u51faJava\u5f02\u5e38\u3002\u56e0\u6b64\uff0c\u76ee\u524d\u6211\u4eec\u5c06\u6821\u9a8c\u9519\u8bef\u4ee5XML\u7684\u683c\u5f0f\u8fd4\u56de\uff1a violationReport constraintViolations path getUserArgument0 /path message User ID must be greater than 1 /message value 0 /value /constraintViolations /violationReport \u7a0d\u540e\u4e5f\u4f1a\u652f\u6301\u5176\u4ed6\u6570\u636e\u683c\u5f0f\u7684\u8fd4\u56de\u503c\u3002\u81f3\u4e8e\u5982\u4f55\u5bf9\u9a8c\u8bc1\u9519\u8bef\u6d88\u606f\u4f5c\u56fd\u9645\u5316\u5904\u7406\uff0c\u76f4\u63a5\u53c2\u8003bean validation\u7684\u76f8\u5173\u6587\u6863\u5373\u53ef\u3002 \u5982\u679c\u4f60\u8ba4\u4e3a\u9ed8\u8ba4\u7684\u6821\u9a8c\u9519\u8bef\u8fd4\u56de\u683c\u5f0f\u4e0d\u7b26\u5408\u4f60\u7684\u8981\u6c42\uff0c\u53ef\u4ee5\u5982\u4e0a\u9762\u7ae0\u8282\u6240\u8ff0\uff0c\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684ExceptionMapper\u6765\u81ea\u7531\u7684\u5b9a\u5236\u9519\u8bef\u8fd4\u56de\u683c\u5f0f\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2aExceptionMapper\u5fc5\u987b\u7528\u6cdb\u578b\u58f0\u660e\u6765\u6355\u83b7dubbo\u7684RpcException\uff0c\u624d\u80fd\u6210\u529f\u8986\u76d6dubbo rest\u9ed8\u8ba4\u7684\u5f02\u5e38\u5904\u7406\u7b56\u7565\u3002\u4e3a\u4e86\u7b80\u5316\u64cd\u4f5c\uff0c\u5176\u5b9e\u8fd9\u91cc\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u662f\u76f4\u63a5\u7ee7\u627fdubbo rest\u7684RpcExceptionMapper\uff0c\u5e76\u8986\u76d6\u5176\u4e2d\u5904\u7406\u6821\u9a8c\u5f02\u5e38\u7684\u65b9\u6cd5\u5373\u53ef\uff1a public class MyValidationExceptionMapper extends RpcExceptionMapper { protected Response handleConstraintViolationException(ConstraintViolationException cve) { ViolationReport report = new ViolationReport(); for (ConstraintViolation cv : cve.getConstraintViolations()) { report.addConstraintViolation(new RestConstraintViolation( cv.getPropertyPath().toString(), cv.getMessage(), cv.getInvalidValue() == null ? null : cv.getInvalidValue().toString())); } // \u91c7\u7528json\u8f93\u51fa\u4ee3\u66ffxml\u8f93\u51fa return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(report).type(ContentType.APPLICATION_JSON_UTF_8).build(); } } \u7136\u540e\u5c06\u8fd9\u4e2aExceptionMapper\u6dfb\u52a0\u5230XML\u914d\u7f6e\u4e2d\u5373\u53ef\uff1a dubbo:protocol name= rest port= 8888 extension= xxx.MyValidationExceptionMapper /","title":"\u8f93\u5165\u53c2\u6570\u7684\u6821\u9a8c"},{"location":"user/rest/#rest_1","text":"Dubbo\u7684REST\u8c03\u7528\u548cdubbo\u4e2d\u5176\u5b83\u67d0\u4e9bRPC\u4e0d\u540c\u7684\u662f\uff0c\u9700\u8981\u5728\u670d\u52a1\u4ee3\u7801\u4e2d\u6dfb\u52a0JAX-RS\u7684annotation\uff08\u4ee5\u53caJAXB\u3001Jackson\u7684annotation\uff09\uff0c\u5982\u679c\u4f60\u89c9\u5f97\u8fd9\u4e9bannotation\u4e00\u5b9a\u7a0b\u5ea6\u201c\u6c61\u67d3\u201d\u4e86\u4f60\u7684\u670d\u52a1\u4ee3\u7801\uff0c\u4f60\u53ef\u4ee5\u8003\u8651\u7f16\u5199\u989d\u5916\u7684Facade\u548cDTO\u7c7b\uff0c\u5728Facade\u548cDTO\u4e0a\u6dfb\u52a0annotation\uff0c\u800cFacade\u5c06\u8c03\u7528\u8f6c\u53d1\u7ed9\u771f\u6b63\u7684\u670d\u52a1\u5b9e\u73b0\u7c7b\u3002\u5f53\u7136\u4e8b\u5b9e\u4e0a\uff0c\u76f4\u63a5\u5728\u670d\u52a1\u4ee3\u7801\u4e2d\u6dfb\u52a0annotation\u57fa\u672c\u6ca1\u6709\u4efb\u4f55\u8d1f\u9762\u4f5c\u7528\uff0c\u800c\u4e14\u8fd9\u672c\u8eab\u662fJava EE\u7684\u6807\u51c6\u7528\u6cd5\uff0c\u53e6\u5916JAX-RS\u548cJAXB\u7684annotation\u662f\u5c5e\u4e8ejava\u6807\u51c6\uff0c\u6bd4\u6211\u4eec\u7ecf\u5e38\u4f7f\u7528\u7684spring\u3001dubbo\u7b49\u7b49annotation\u66f4\u6ca1\u6709vendor lock-in\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u4e00\u822c\u6ca1\u6709\u5fc5\u8981\u56e0\u6b64\u800c\u5f15\u5165\u989d\u5916\u5bf9\u8c61\u3002 \u53e6\u5916\uff0c\u5982\u679c\u4f60\u60f3\u7528\u524d\u8ff0\u7684@Context annotation\uff0c\u901a\u8fc7\u65b9\u6cd5\u53c2\u6570\u6ce8\u5165HttpServletRequest\uff08\u5982 public User getUser(@PathParam(\"id\") Long id, @Context HttpServletRequest request) \uff09\uff0c\u8fd9\u65f6\u5019\u7531\u4e8e\u6539\u53d8\u4e86\u670d\u52a1\u7684\u65b9\u6cd5\u7b7e\u540d\uff0c\u5e76\u4e14HttpServletRequest\u662fREST\u7279\u6709\u7684\u53c2\u6570\uff0c \u6240\u4ee5\u5982\u679c\u4f60\u7684\u670d\u52a1\u8981\u652f\u6301\u591a\u79cdRPC\u673a\u5236\u7684\u8bdd \uff0c\u5219\u5f15\u5165\u989d\u5916\u7684Facade\u7c7b\u662f\u6bd4\u8f83\u9002\u5f53\u7684\u3002 \u5f53\u7136\uff0c\u5728\u6ca1\u6709\u6dfb\u52a0REST\u8c03\u7528\u4e4b\u524d\uff0c\u4f60\u7684\u670d\u52a1\u4ee3\u7801\u53ef\u80fd\u672c\u8eab\u5df2\u7ecf\u5c31\u5145\u5f53\u4e86Facade\u548cDTO\u7684\u89d2\u8272\uff08\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u6709\u4e9b\u573a\u666f\u9700\u8981\u8fd9\u4e9b\u89d2\u8272\uff0c\u6709\u5174\u8da3\u53ef\u53c2\u8003 \u5fae\u89c2SOA\uff1a\u670d\u52a1\u8bbe\u8ba1\u539f\u5219\u53ca\u5176\u5b9e\u8df5\u65b9\u5f0f \uff09\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5728\u6dfb\u52a0REST\u4e4b\u540e\uff0c\u5982\u679c\u4f60\u518d\u989d\u5916\u6dfb\u52a0\u4e0eREST\u76f8\u5173\u7684Facade\u548cDTO\uff0c\u5c31\u76f8\u5f53\u4e8e\u5bf9\u539f\u6709\u4ee3\u7801\u5bf9\u518d\u4e00\u6b21\u5305\u88c5\uff0c\u5373\u5f62\u6210\u5982\u4e0b\u8c03\u7528\u94fe\uff1a RestFacade/RestDTO - Facade/DTO - Service \u8fd9\u79cd\u4f53\u7cfb\u6bd4\u8f83\u7e41\u7410\uff0c\u6570\u636e\u8f6c\u6362\u4e4b\u7c7b\u7684\u5de5\u4f5c\u91cf\u4e5f\u4e0d\u5c0f\uff0c\u6240\u4ee5\u4e00\u822c\u5e94\u5c3d\u91cf\u907f\u514d\u5982\u6b64\u3002","title":"\u662f\u5426\u5e94\u8be5\u900f\u660e\u53d1\u5e03REST\u670d\u52a1"},{"location":"user/rest/#rest_2","text":"\u8fd9\u91cc\u6211\u4eec\u7528\u4e09\u79cd\u573a\u666f\u6765\u5206\u522b\u8ba8\u8bba\uff1a \u975edubbo\u7684\u6d88\u8d39\u7aef\u8c03\u7528dubbo\u7684REST\u670d\u52a1\uff08non-dubbo -- dubbo\uff09 dubbo\u6d88\u8d39\u7aef\u8c03\u7528dubbo\u7684REST\u670d\u52a1 \uff08dubbo -- dubbo\uff09 dubbo\u7684\u6d88\u8d39\u7aef\u8c03\u7528\u975edubbo\u7684REST\u670d\u52a1 \uff08dubbo -- non-dubbo\uff09","title":"REST\u670d\u52a1\u6d88\u8d39\u7aef\u8be6\u89e3"},{"location":"user/rest/#1dubbodubborest","text":"\u8fd9\u79cd\u573a\u666f\u7684\u5ba2\u6237\u7aef\u4e0edubbo\u672c\u8eab\u65e0\u5173\uff0c\u76f4\u63a5\u9009\u7528\u76f8\u5e94\u8bed\u8a00\u548c\u6846\u67b6\u4e2d\u5408\u9002\u7684\u65b9\u5f0f\u5373\u53ef\u3002 \u5982\u679c\u662f\u8fd8\u662fjava\u7684\u5ba2\u6237\u7aef\uff08\u4f46\u6ca1\u7528dubbo\uff09\uff0c\u53ef\u4ee5\u8003\u8651\u76f4\u63a5\u4f7f\u7528\u6807\u51c6\u7684JAX-RS Client API\u6216\u8005\u7279\u5b9aREST\u5b9e\u73b0\u7684Client API\u6765\u8c03\u7528REST\u670d\u52a1\u3002\u4e0b\u9762\u662f\u7528JAX-RS Client API\u6765\u8bbf\u95ee\u4e0a\u8ff0\u7684UserService\u7684registerUser()\uff1a User user = new User(); user.setName( Larry ); Client client = ClientBuilder.newClient(); WebTarget target = client.target( http://localhost:8080/services/users/register.json ); Response response = target.request().post(Entity.entity(user, MediaType.APPLICATION_JSON_TYPE)); try { if (response.getStatus() != 200) { throw new RuntimeException( Failed with HTTP error code : + response.getStatus()); } System.out.println( The generated id is + response.readEntity(RegistrationResult.class).getId()); } finally { response.close(); client.close(); // \u5728\u771f\u6b63\u5f00\u53d1\u4e2d\u4e0d\u8981\u6bcf\u6b21\u5173\u95edclient\uff0c\u6bd4\u5982HTTP\u957f\u8fde\u63a5\u662f\u7531client\u6301\u6709\u7684 } \u4e0a\u9762\u4ee3\u7801\u7247\u6bb5\u4e2d\u7684User\u548cRegistrationResult\u7c7b\u90fd\u662f\u6d88\u8d39\u7aef\u81ea\u5df1\u7f16\u5199\u7684\uff0cJAX-RS Client API\u4f1a\u81ea\u52a8\u5bf9\u5b83\u4eec\u505a\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u3002 \u5f53\u7136\uff0c\u5728java\u4e2d\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528\u81ea\u5df1\u719f\u6089\u7684\u6bd4\u5982HttpClient\uff0cFastJson\uff0cXStream\u7b49\u7b49\u5404\u79cd\u4e0d\u540c\u6280\u672f\u6765\u5b9e\u73b0REST\u5ba2\u6237\u7aef\uff0c\u5728\u6b64\u4e0d\u518d\u8be6\u8ff0\u3002","title":"\u573a\u666f1\uff1a\u975edubbo\u7684\u6d88\u8d39\u7aef\u8c03\u7528dubbo\u7684REST\u670d\u52a1"},{"location":"user/rest/#2dubbodubborest","text":"\u8fd9\u79cd\u573a\u666f\u4e0b\uff0c\u548c\u4f7f\u7528\u5176\u4ed6dubbo\u7684\u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f\u4e00\u6837\uff0c\u76f4\u63a5\u5728\u670d\u52a1\u63d0\u4f9b\u7aef\u548c\u670d\u52a1\u6d88\u8d39\u7aef\u5171\u4eabJava\u670d\u52a1\u63a5\u53e3\uff0c\u5e76\u6dfb\u52a0spring xml\u914d\u7f6e\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u7528spring/dubbo\u7684annotation\u914d\u7f6e\uff09\uff0c\u5373\u53ef\u900f\u660e\u7684\u8c03\u7528\u8fdc\u7a0bREST\u670d\u52a1\uff1a dubbo:reference id= userService interface= xxx.UserService / \u5982\u524d\u6240\u8ff0\uff0c\u8fd9\u79cd\u573a\u666f\u4e0b\u5fc5\u987b\u628aJAX-RS\u7684annotation\u6dfb\u52a0\u5230\u670d\u52a1\u63a5\u53e3\u4e0a\uff0c\u8fd9\u6837\u5728dubbo\u5728\u6d88\u8d39\u7aef\u624d\u80fd\u5171\u4eab\u76f8\u5e94\u7684REST\u914d\u7f6e\u4fe1\u606f\uff0c\u5e76\u636e\u4e4b\u505a\u8fdc\u7a0b\u8c03\u7528: @Path( users ) public interface UserService { @GET @Path( {id : \\\\d+} ) @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML}) User getUser(@PathParam( id ) Long id); } \u5982\u679c\u670d\u52a1\u63a5\u53e3\u7684annotation\u4e2d\u914d\u7f6e\u4e86\u591a\u79cd\u6570\u636e\u683c\u5f0f\uff0c\u8fd9\u91cc\u7531\u4e8e\u4e24\u7aef\u90fd\u662fdubbo\u7cfb\u7edf\uff0cREST\u7684\u5927\u91cf\u7ec6\u8282\u88ab\u5c4f\u853d\u4e86\uff0c\u6240\u4ee5\u4e0d\u5b58\u5728\u7528\u524d\u8ff0URL\u540e\u7f00\u4e4b\u7c7b\u9009\u62e9\u6570\u636e\u683c\u5f0f\u7684\u53ef\u80fd\u3002\u76ee\u524d\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6392\u540d\u6700\u9760\u524d\u7684\u6570\u636e\u683c\u5f0f\u5c06\u76f4\u63a5\u88ab\u4f7f\u7528\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5efa\u8bae\u4f60\u5728\u5b9a\u4e49annotation\u7684\u65f6\u5019\u6700\u597d\u628a\u6700\u5408\u9002\u7684\u6570\u636e\u683c\u5f0f\u653e\u5230\u524d\u9762\uff0c\u6bd4\u5982\u4ee5\u4e0a\u6211\u4eec\u662f\u628ajson\u653e\u5728xml\u524d\u9762\uff0c\u56e0\u4e3ajson\u7684\u4f20\u8f93\u6027\u80fd\u4f18\u4e8exml\u3002","title":"\u573a\u666f2\uff1adubbo\u6d88\u8d39\u7aef\u8c03\u7528dubbo\u7684REST\u670d\u52a1"},{"location":"user/rest/#3dubbodubborest","text":"\u8fd9\u79cd\u573a\u666f\u4e0b\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u573a\u666f1\u4e2d\u63cf\u8ff0\u7684Java\u7684\u65b9\u5f0f\u6765\u8c03\u7528REST\u670d\u52a1\u3002\u4f46\u5176\u5b9e\u4e5f\u53ef\u4ee5\u91c7\u7528\u573a\u666f2\u4e2d\u63cf\u8ff0\u7684\u65b9\u5f0f\uff0c\u5373\u66f4\u900f\u660e\u7684\u8c03\u7528REST\u670d\u52a1\uff0c\u5373\u4f7f\u8fd9\u4e2a\u670d\u52a1\u5e76\u4e0d\u662fdubbo\u63d0\u4f9b\u7684\u3002 \u5982\u679c\u7528\u573a\u666f2\u7684\u65b9\u5f0f\uff0c\u7531\u4e8e\u8fd9\u91ccREST\u670d\u52a1\u5e76\u975edubbo\u63d0\u4f9b\uff0c\u4e00\u822c\u4e5f\u5c31\u6ca1\u6709\u524d\u8ff0\u7684\u5171\u4eab\u7684Java\u670d\u52a1\u63a5\u53e3\uff0c\u6240\u4ee5\u5728\u6b64\u6211\u4eec\u9700\u8981\u6839\u636e\u5916\u90e8REST\u670d\u52a1\u7684\u60c5\u51b5\uff0c\u81ea\u5df1\u6765\u7f16\u5199Java\u63a5\u53e3\u4ee5\u53ca\u76f8\u5e94\u53c2\u6570\u7c7b\uff0c\u5e76\u6dfb\u52a0JAX-RS\u3001JAXB\u3001Jackson\u7b49\u7684annotation\uff0cdubbo\u7684REST\u5e95\u5c42\u5b9e\u73b0\u4f1a\u636e\u6b64\u53bb\u81ea\u52a8\u751f\u6210\u8bf7\u6c42\u6d88\u606f\uff0c\u81ea\u52a8\u89e3\u6790\u54cd\u5e94\u6d88\u606f\u7b49\u7b49\uff0c\u4ece\u800c\u900f\u660e\u7684\u505a\u8fdc\u7a0b\u8c03\u7528\u3002\u6216\u8005\u8fd9\u79cd\u65b9\u5f0f\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\uff0c\u6211\u4eec\u5c1d\u8bd5\u7528JAX-RS\u7684\u65b9\u5f0f\u53bb\u4eff\u9020\u5b9e\u73b0\u4e00\u904d\u5916\u90e8\u7684REST\u670d\u52a1\u63d0\u4f9b\u7aef\uff0c\u7136\u540e\u628a\u5199\u6210\u670d\u52a1\u63a5\u53e3\u653e\u5230\u5ba2\u6237\u7aef\u6765\u76f4\u63a5\u4f7f\u7528\uff0cdubbo\u7684REST\u5e95\u5c42\u5b9e\u73b0\u5c31\u80fd\u50cf\u8c03\u7528dubbo\u7684REST\u670d\u52a1\u4e00\u6837\u8c03\u7528\u5176\u4ed6REST\u670d\u52a1\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u8981\u8c03\u7528\u5982\u4e0b\u7684\u5916\u90e8\u670d\u52a1 http://api.foo.com/services/users/1001 http://api.foo.com/services/users/1002 \u83b7\u53d6\u4e0d\u540cID\u7684\u7528\u6237\u8d44\u6599\uff0c\u8fd4\u56de\u683c\u5f0f\u662fJSON { id : 1001, name : Larry } \u6211\u4eec\u53ef\u6839\u636e\u8fd9\u4e9b\u4fe1\u606f\uff0c\u7f16\u5199\u670d\u52a1\u63a5\u53e3\u548c\u53c2\u6570\u7c7b\u5373\u53ef\uff1a @Path( users ) public interface UserService { @GET @Path( {id : \\\\d+} ) @Produces({MediaType.APPLICATION_JSON}) User getUser(@PathParam( id ) Long id); } public class User implements Serializable { private Long id; private String name; // \u2026 } \u5bf9\u4e8espring\u4e2d\u7684\u914d\u7f6e\uff0c\u56e0\u4e3a\u8fd9\u91cc\u7684REST\u670d\u52a1\u4e0d\u662fdubbo\u63d0\u4f9b\u7684\uff0c\u6240\u4ee5\u65e0\u6cd5\u4f7f\u7528dubbo\u7684\u6ce8\u518c\u4e2d\u5fc3\uff0c\u76f4\u63a5\u914d\u7f6e\u5916\u90e8REST\u670d\u52a1\u7684url\u5730\u5740\u5373\u53ef\uff08\u5982\u591a\u4e2a\u5730\u5740\u7528\u9017\u53f7\u5206\u9694\uff09\uff1a dubbo:reference id= userService interface= xxx.UserService url= rest://api.foo.com/services/ / \u6ce8\u610f\uff1a\u8fd9\u91cc\u534f\u8bae\u5fc5\u987b\u7528rest://\u800c\u4e0d\u662fhttp://\u4e4b\u7c7b\u3002\u5982\u679c\u5916\u90e8\u7684REST\u670d\u52a1\u6709context path\uff0c\u5219\u5728url\u4e2d\u4e5f\u5fc5\u987b\u6dfb\u52a0\u4e0a\uff08\u9664\u975e\u4f60\u5728\u6bcf\u4e2a\u670d\u52a1\u63a5\u53e3\u7684@Path annotation\u4e2d\u90fd\u5e26\u4e0acontext path\uff09\uff0c\u4f8b\u5982\u4e0a\u9762\u7684/services/\u3002\u540c\u65f6\u8fd9\u91cc\u7684services\u540e\u9762\u5fc5\u987b\u5e26\u4e0a/\uff0c\u8fd9\u6837\u624d\u80fd\u4f7fdubbo\u6b63\u5e38\u5de5\u4f5c\u3002 \u53e6\u5916\uff0c\u8fd9\u91cc\u4f9d\u7136\u53ef\u4ee5\u914d\u7f6e\u5ba2\u6237\u7aef\u53ef\u542f\u52a8\u7684\u6700\u5927\u8fde\u63a5\u6570\u548c\u8d85\u65f6\u65f6\u95f4\uff1a dubbo:reference id= userService interface= xxx.UserService url= rest://api.foo.com/services/ timeout= 2000 connections= 10 /","title":"\u573a\u666f3\uff1adubbo\u7684\u6d88\u8d39\u7aef\u8c03\u7528\u975edubbo\u7684REST\u670d\u52a1"},{"location":"user/rest/#dubbojax-rs","text":"Dubbo\u4e2d\u7684REST\u5f00\u53d1\u662f\u5b8c\u5168\u517c\u5bb9\u6807\u51c6JAX-RS\u7684\uff0c\u4f46\u5176\u652f\u6301\u7684\u529f\u80fd\u76ee\u524d\u662f\u5b8c\u6574JAX-RS\u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u90e8\u5206\u56e0\u4e3a\u5b83\u8981\u53d7\u9650\u4e8edubbo\u548cspring\u7684\u7279\u5b9a\u4f53\u7cfb\u3002 \u5728dubbo\u4e2d\u4f7f\u7528\u7684JAX-RS\u7684\u5c40\u9650\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a \u670d\u52a1\u5b9e\u73b0\u53ea\u80fd\u662fsingleton\u7684\uff0c\u4e0d\u80fd\u652f\u6301per-request scope\u548cper-lookup scope \u4e0d\u652f\u6301\u7528@Context annotation\u5bf9\u670d\u52a1\u7684\u5b9e\u4f8b\u5b57\u6bb5\u6ce8\u5165 ServletConfig\u3001ServletContext\u3001HttpServletRequest\u3001HttpServletResponse\u7b49\u7b49\uff0c\u4f46\u53ef\u4ee5\u652f\u6301\u5bf9\u670d\u52a1\u65b9\u6cd5\u53c2\u6570\u7684\u6ce8\u5165\u3002\u4f46\u5bf9\u67d0\u4e9b\u7279\u5b9aREST server\u5b9e\u73b0\uff0c\uff08\u7965\u89c1\u524d\u9762\u7684\u53d9\u8ff0\uff09\uff0c\u4e5f\u4e0d\u652f\u6301\u5bf9\u670d\u52a1\u65b9\u6cd5\u53c2\u6570\u7684\u6ce8\u5165\u3002","title":"Dubbo\u4e2dJAX-RS\u7684\u9650\u5236"},{"location":"user/rest/#restrest-faq","text":"","title":"REST\u5e38\u89c1\u95ee\u9898\u89e3\u7b54\uff08REST FAQ\uff09"},{"location":"user/rest/#dubbo-restdubbo","text":"\u53ef\u4ee5\u7684\uff0c\u800c\u4e14\u662f\u81ea\u52a8\u96c6\u6210\u7684\uff0c\u4e5f\u5c31\u662f\u4f60\u5728dubbo\u4e2d\u5f00\u53d1\u7684\u6240\u6709REST\u670d\u52a1\u90fd\u4f1a\u81ea\u52a8\u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3\u548c\u76d1\u63a7\u4e2d\u5fc3\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b83\u4eec\u505a\u7ba1\u7406\u3002 \u4f46\u662f\uff0c\u53ea\u6709\u5f53REST\u7684\u6d88\u8d39\u7aef\u4e5f\u662f\u57fa\u4e8edubbo\u7684\u65f6\u5019\uff0c\u6ce8\u518c\u4e2d\u5fc3\u4e2d\u7684\u8bb8\u591a\u670d\u52a1\u6cbb\u7406\u64cd\u4f5c\u624d\u80fd\u5b8c\u5168\u8d77\u4f5c\u7528\u3002\u800c\u5982\u679c\u6d88\u8d39\u7aef\u662f\u975edubbo\u7684\uff0c\u81ea\u7136\u4e0d\u53d7\u6ce8\u518c\u4e2d\u5fc3\u7ba1\u7406\uff0c\u6240\u4ee5\u5176\u4e2d\u5f88\u591a\u64cd\u4f5c\u662f\u4e0d\u4f1a\u5bf9\u6d88\u8d39\u7aef\u8d77\u4f5c\u7528\u7684\u3002","title":"Dubbo REST\u7684\u670d\u52a1\u80fd\u548cDubbo\u6ce8\u518c\u4e2d\u5fc3\u3001\u76d1\u63a7\u4e2d\u5fc3\u96c6\u6210\u5417\uff1f"},{"location":"user/rest/#dubbo-restfailover","text":"\u5982\u679cdubbo REST\u7684\u6d88\u8d39\u7aef\u4e5f\u662fdubbo\u7684\uff0c\u5219Dubbo REST\u548c\u5176\u4ed6dubbo\u8fdc\u7a0b\u8c03\u7528\u534f\u8bae\u57fa\u672c\u5b8c\u5168\u4e00\u6837\uff0c\u7531dubbo\u6846\u67b6\u900f\u660e\u7684\u5728\u6d88\u8d39\u7aef\u505aload balance\u3001failover\u7b49\u7b49\u3002 \u5982\u679cdubbo REST\u7684\u6d88\u8d39\u7aef\u662f\u975edubbo\u7684\uff0c\u751a\u81f3\u662f\u975ejava\u7684\uff0c\u5219\u6700\u597d\u914d\u7f6e\u670d\u52a1\u63d0\u4f9b\u7aef\u7684\u8f6f\u8d1f\u8f7d\u5747\u8861\u673a\u5236\uff0c\u76ee\u524d\u53ef\u8003\u8651\u7528LVS\u3001HAProxy\u3001 Nginx\u7b49\u7b49\u5bf9HTTP\u8bf7\u6c42\u505a\u8d1f\u8f7d\u5747\u8861\u3002","title":"Dubbo REST\u4e2d\u5982\u4f55\u5b9e\u73b0\u8d1f\u8f7d\u5747\u8861\u548c\u5bb9\u9519\uff08failover\uff09\uff1f"},{"location":"user/rest/#jax-rsurl","text":"http://stackoverflow.com/questions/17196766/can-resteasy-choose-method-based-on-query-params","title":"JAX-RS\u4e2d\u91cd\u8f7d\u7684\u65b9\u6cd5\u80fd\u591f\u6620\u5c04\u5230\u540c\u4e00URL\u5730\u5740\u5417\uff1f"},{"location":"user/rest/#jax-rspost","text":"http://stackoverflow.com/questions/5553218/jax-rs-post-multiple-objects","title":"JAX-RS\u4e2d\u4f5cPOST\u7684\u65b9\u6cd5\u80fd\u591f\u63a5\u6536\u591a\u4e2a\u53c2\u6570\u5417\uff1f"},{"location":"user/rest/#dubborest","text":"\u6211\u8ba4\u4e3adubbo\u5f53\u524d\u4f53\u7cfb\u4e2d\u663e\u7136\u4e5f\u6709\u4e0d\u5c11\u4e0d\u8db3\u4e4b\u5904\uff0c\u8fd9\u91cc\u5217\u51fa\u51e0\u4e2a\u4e0eREST\u6709\u5173\u7684\u3001\u5e76\u5f71\u54cd\u7528\u6237\u4f7f\u7528\u7684\u95ee\u9898\uff08\u4e0d\u5305\u62ec\u5185\u90e8\u5b9e\u73b0\u7684\u95ee\u9898\uff09\uff0c\u4f9b\u53c2\u8003\u8bc4\u8bba\uff0c\u4e3a\u4e0b\u4e00\u6b65\u91cd\u6784\u4f5c\u51c6\u5907\u3002","title":"Dubbo\u5f53\u524d\u4f53\u7cfb\u7684\u4e0d\u8db3\u4e4b\u5904\uff08\u4e0eREST\u76f8\u5173\u7684\uff09"},{"location":"user/rest/#rpccontext","text":"\u5728\u524d\u6587\uff0c\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u63d0\u5230\u8fc7RpcContext\u7528\u6cd5\u7684\u4fb5\u5165\u6027\uff0c\u7531\u4e8e\u5b83\u662f\u7528\u5355\u4f8b\u7684\u65b9\u5f0f\u6765\u8bbf\u95ee\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u8fd9\u5b8c\u5168\u4e0d\u7b26\u5408spring\u5e94\u7528\u7684\u4e00\u822c\u98ce\u683c\uff0c\u4e0d\u5229\u4e8e\u5e94\u7528\u6269\u5c55\u548c\u5355\u5143\u6d4b\u8bd5\u3002\u672a\u6765\u6211\u4eec\u53ef\u80fd\u7528\u4f9d\u8d56\u6ce8\u5165\u65b9\u5f0f\u6ce8\u5165\u4e00\u4e2a\u63a5\u53e3\uff0c\u518d\u7528\u5b83\u53bb\u8bbf\u95eeThreadLocal\u4e2d\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002","title":"RpcContext\u7684\u4fb5\u5165\u6027"},{"location":"user/rest/#protocol","text":"dubbo\u652f\u6301\u591a\u79cd\u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f\uff0c\u4f46\u6240\u6709\u8c03\u7528\u65b9\u5f0f\u90fd\u662f\u7528 dubbo:protocol/ \u6765\u914d\u7f6e\u7684\uff0c\u4f8b\u5982\uff1a dubbo:protocol name= dubbo port= 9090 server= netty client= netty codec= dubbo serialization= hessian2 charset= UTF-8 threadpool= fixed threads= 100 queues= 0 iothreads= 9 buffer= 8192 accepts= 1000 payload= 8388608 / \u5176\u5b9e\uff0c\u4e0a\u9762\u5f88\u591a\u5c5e\u6027\u5b9e\u9645\u4e0adubbo RPC\u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f\u7279\u6709\u7684\uff0c\u5f88\u591adubbo\u4e2d\u7684\u5176\u5b83\u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f\u6839\u672c\u5c31\u4e0d\u652f\u6301\u4f8b\u5982server, client, codec, iothreads, accepts, payload\u7b49\u7b49\uff08\u5f53\u7136\uff0c\u6709\u7684\u662f\u6761\u4ef6\u6240\u9650\u4e0d\u652f\u6301\uff0c\u6709\u7684\u662f\u6839\u672c\u6ca1\u6709\u5fc5\u8981\u652f\u6301\uff09\u3002\u8fd9\u7ed9\u7528\u6237\u7684\u4f7f\u7528\u5f92\u589e\u5f88\u591a\u56f0\u60d1\uff0c\u7528\u6237\u4e5f\u5e76\u4e0d\u77e5\u9053\u6709\u4e9b\u5c5e\u6027\uff08\u6bd4\u5982\u505a\u6027\u80fd\u8c03\u4f18\uff09\u6dfb\u52a0\u4e86\u5b9e\u9645\u4e0a\u662f\u4e0d\u8d77\u4f5c\u7528\u7684\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5404\u79cd\u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f\u5f80\u5f80\u6709\u5927\u91cf\u81ea\u5df1\u72ec\u7279\u7684\u914d\u7f6e\u9700\u8981\uff0c\u7279\u522b\u662f\u6211\u4eec\u9010\u6b65\u4e3a\u6bcf\u79cd\u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f\u90fd\u6dfb\u52a0\u66f4\u4e30\u5bcc\u3001\u66f4\u9ad8\u7ea7\u7684\u529f\u80fd\uff0c\u8fd9\u5c31\u4e0d\u53ef\u907f\u514d\u7684\u6269\u5c55 protocol/ \u4e2d\u7684\u5c5e\u6027\uff08\u4f8b\u5982\u76ee\u524d\u6211\u4eec\u5728REST\u4e2d\u5df2\u7ecf\u6dfb\u52a0\u4e86keepalive\u548cextension\u4e24\u4e2a\u5c5e\u6027\uff09\uff0c\u5230\u6700\u540e\u4f1a\u5bfc\u81f4 protocol/ \u81c3\u80bf\u4e0d\u582a\uff0c\u7528\u6237\u7684\u4f7f\u7528\u4e5f\u66f4\u52a0\u56f0\u60d1\u3002 \u5f53\u7136\uff0cdubbo\u4e2d\u6709\u4e00\u79cd\u6269\u5c55 protocol/ \u7684\u65b9\u5f0f\u662f\u7528 dubbo:parameter/ \uff0c\u4f46\u8fd9\u79cd\u65b9\u5f0f\u663e\u7136\u5f88\u6709\u5c40\u9650\u6027\uff0c\u800c\u4e14\u7528\u6cd5\u590d\u6742\uff0c\u7f3a\u4e4fschema\u6821\u9a8c\u3002 \u6240\u4ee5\uff0c\u6700\u597d\u7684\u65b9\u5f0f\u662f\u4e3a\u6bcf\u79cd\u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f\u8bbe\u7f6e\u81ea\u5df1\u7684protocol\u5143\u7d20\uff0c\u6bd4\u5982 protocol-dubbo/ \uff0c protocol-rest/ \u7b49\u7b49\uff0c\u6bcf\u79cd\u5143\u7d20\u7528XML schema\u89c4\u5b9a\u81ea\u5df1\u7684\u5c5e\u6027\uff08\u5f53\u7136\u5c5e\u6027\u5728\u5404\u79cd\u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f\u4e4b\u95f4\u80fd\u901a\u7528\u662f\u6700\u597d\u7684\uff09\u3002 \u5982\u6b64\u4e00\u6765\uff0c\u4f8b\u5982\u524d\u9762\u63d0\u5230\u8fc7\u7684extension\u914d\u7f6e\u4e5f\u53ef\u4ee5\u7528\u66f4\u81ea\u7531\u7684\u65b9\u5f0f\uff0c\u4ece\u800c\u66f4\u6e05\u695a\u66f4\u53ef\u6269\u5c55\uff08\u4ee5\u4e0b\u53ea\u662f\u4e3e\u4f8b\uff0c\u5f53\u7136\u4e5f\u8bb8\u6709\u66f4\u597d\u7684\u65b9\u5f0f\uff09: dubbo:protocol-rest port= 8080 dubbo:extension someInterceptor /dubbo:extension dubbo:extension someFilter /dubbo:extension dubbo:extension someDynamicFeature /dubbo:extension dubbo:extension someEntityProvider /dubbo:extension /dubbo:protocol-rest","title":"Protocol\u914d\u7f6e\u7684\u5c40\u9650\u6027"},{"location":"user/rest/#xmlspring","text":"dubbo\u7684XML\u914d\u7f6e\u4e2d\u5927\u91cf\u547d\u540d\u90fd\u4e0d\u7b26\u5408spring\u89c4\u8303\uff0c\u6bd4\u5982\uff1a dubbo:protocol name= dubbo port= 9090 server= netty client= netty codec= dubbo serialization= hessian2 charset= UTF-8 threadpool= fixed threads= 100 queues= 0 iothreads= 9 buffer= 8192 accepts= 1000 payload= 8388608 / \u4e0a\u9762threadpool\u5e94\u8be5\u6539\u4e3athread-pool\uff0ciothreads\u5e94\u8be5\u6539\u4e3aio-threads\uff0c\u5355\u8bcd\u4e4b\u95f4\u5e94\u8be5\u7528\"-\"\u5206\u9694\u3002\u8fd9\u867d\u7136\u770b\u8d77\u6765\u662f\u4e2a\u5c0f\u95ee\u9898\uff0c\u4f46\u4e5f\u6d89\u53ca\u5230\u4e86\u53ef\u8bfb\u6027\uff0c\u7279\u522b\u662f\u53ef\u6269\u5c55\u6027\uff0c\u56e0\u4e3a\u6709\u65f6\u5019\u6211\u4eec\u4e0d\u53ef\u907f\u514d\u8981\u7528\u66f4\u591a\u5355\u8bcd\u6765\u63cf\u8ff0XML\u5143\u7d20\u548c\u5c5e\u6027\u3002 \u5176\u5b9edubbo\u672c\u8eab\u4e5f\u662f\u5efa\u8bae\u9075\u5b88spring\u5230XML\u7684\u547d\u540d\u89c4\u8303\u3002","title":"XML\u547d\u540d\u4e0d\u7b26\u5408spring\u89c4\u8303"},{"location":"user/rest/#rest_3","text":"TODO","title":"REST\u6700\u4f73\u5b9e\u8df5"},{"location":"user/rest/#_9","text":"","title":"\u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5"},{"location":"user/rest/#_10","text":"\u7c97\u7565\u5982\u4e0b\uff1a \u4e24\u53f0\u72ec\u7acb\u670d\u52a1\u5668 4\u6838Intel(R) Xeon(R) CPU E5-2603 0 @ 1.80GHz 8G\u5185\u5b58 \u670d\u52a1\u5668\u4e4b\u95f4\u7f51\u7edc\u901a\u8fc7\u767e\u5146\u4ea4\u6362\u673a CentOS 5 JDK 7 Tomcat 7 JVM\u53c2\u6570-server -Xms1g -Xmx1g -XX:PermSize=64M -XX:+UseConcMarkSweepGC","title":"\u6d4b\u8bd5\u73af\u5883"},{"location":"user/rest/#_11","text":"\u548cdubbo\u81ea\u8eab\u7684\u57fa\u51c6\u6d4b\u8bd5\u4fdd\u6301\u63a5\u8fd1\uff1a 10\u4e2a\u5e76\u53d1\u5ba2\u6237\u7aef\u6301\u7eed\u4e0d\u65ad\u53d1\u51fa\u8bf7\u6c42\uff1a \u4f20\u5165\u5d4c\u5957\u590d\u6742\u5bf9\u8c61\uff08\u4f46\u5355\u4e2a\u6570\u636e\u91cf\u5f88\u5c0f\uff09\uff0c\u4e0d\u505a\u4efb\u4f55\u5904\u7406\uff0c\u539f\u6837\u8fd4\u56de \u4f20\u516550K\u5b57\u7b26\u4e32\uff0c\u4e0d\u505a\u4efb\u4f55\u5904\u7406\uff0c\u539f\u6837\u8fd4\u56de\uff08TODO\uff1a\u7ed3\u679c\u5c1a\u672a\u5217\u51fa\uff09 \u8fdb\u884c5\u5206\u949f\u6027\u80fd\u6d4b\u8bd5\u3002\uff08\u5f15\u7528dubbo\u81ea\u8eab\u6d4b\u8bd5\u7684\u8003\u8651\uff1a\u201c\u4e3b\u8981\u8003\u5bdf\u5e8f\u5217\u5316\u548c\u7f51\u7edcIO\u7684\u6027\u80fd\uff0c\u56e0\u6b64\u670d\u52a1\u7aef\u65e0\u4efb\u4f55\u4e1a\u52a1\u903b\u8f91\u3002\u53d610\u5e76\u53d1\u662f\u8003\u8651\u5230http\u534f\u8bae\u5728\u9ad8\u5e76\u53d1\u4e0b\u5bf9CPU\u7684\u4f7f\u7528\u7387\u8f83\u9ad8\u53ef\u80fd\u4f1a\u5148\u6253\u5230\u74f6\u9888\u3002\u201d\uff09","title":"\u6d4b\u8bd5\u811a\u672c"},{"location":"user/rest/#_12","text":"\u4e0b\u9762\u7684\u7ed3\u679c\u4e3b\u8981\u5bf9\u6bd4\u7684\u662fREST\u548cdubbo RPC\u4e24\u79cd\u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f\uff0c\u5e76\u5bf9\u5b83\u4eec\u4f5c\u4e0d\u540c\u7684\u914d\u7f6e\uff0c\u4f8b\u5982\uff1a \u201cREST: Jetty + XML + GZIP\u201d\u7684\u610f\u601d\u662f\uff1a\u6d4b\u8bd5REST\uff0c\u5e76\u91c7\u7528jetty server\uff0cXML\u6570\u636e\u683c\u5f0f\uff0c\u542f\u7528GZIP\u538b\u7f29\u3002 \u201cDubbo: hessian2\u201d\u7684\u610f\u601d\u662f\uff1a\u6d4b\u8bd5dubbo RPC\uff0c\u5e76\u91c7\u7528hessian2\u5e8f\u5217\u5316\u65b9\u5f0f\u3002 \u9488\u5bf9\u590d\u6742\u5bf9\u8c61\u7684\u7ed3\u679c\u5982\u4e0b\uff08\u54cd\u5e94\u65f6\u95f4\u8d8a\u5c0f\u8d8a\u597d\uff0cTPS\u8d8a\u5927\u8d8a\u597d\uff09\uff1a \u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f \u5e73\u5747\u54cd\u5e94\u65f6\u95f4 \u5e73\u5747TPS\uff08\u6bcf\u79d2\u4e8b\u52a1\u6570\uff09 REST: Jetty + JSON 7.806 1280 REST: Jetty + JSON + GZIP TODO TODO REST: Jetty + XML TODO TODO REST: Jetty + XML + GZIP TODO TODO REST: Tomcat + JSON 2.082 4796 REST: Netty + JSON 2.182 4576 Dubbo: FST 1.211 8244 Dubbo: kyro 1.182 8444 Dubbo: dubbo serialization 1.43 6982 Dubbo: hessian2 1.49 6701 Dubbo: fastjson 1.572 6352 \u4ec5\u5c31\u76ee\u524d\u7684\u7ed3\u679c\uff0c\u4e00\u70b9\u7b80\u5355\u603b\u7ed3\uff1a dubbo RPC\uff08\u7279\u522b\u662f\u57fa\u4e8e\u9ad8\u6548java\u5e8f\u5217\u5316\u65b9\u5f0f\u5982kryo\uff0cfst\uff09\u6bd4REST\u7684\u54cd\u5e94\u65f6\u95f4\u548c\u541e\u5410\u91cf\u90fd\u6709\u8f83\u663e\u8457\u4f18\u52bf\uff0c\u5185\u7f51\u7684dubbo\u7cfb\u7edf\u4e4b\u95f4\u4f18\u5148\u9009\u62e9dubbo RPC\u3002 \u5728REST\u7684\u5b9e\u73b0\u9009\u62e9\u4e0a\uff0c\u4ec5\u5c31\u6027\u80fd\u800c\u8a00\uff0c\u76ee\u524dtomcat7\u548cnetty\u6700\u4f18\uff08\u5f53\u7136\u76ee\u524d\u4f7f\u7528\u7684jetty\u548cnetty\u7248\u672c\u90fd\u8f83\u4f4e\uff09\u3002tjws\u548csun http server\u5728\u6027\u80fd\u6d4b\u8bd5\u4e2d\u8868\u73b0\u6781\u5dee\uff0c\u5e73\u5747\u54cd\u5e94\u65f6\u95f4\u8d85\u8fc7200ms\uff0c\u5e73\u5747tps\u53ea\u670950\u5de6\u53f3\uff08\u4e3a\u4e86\u907f\u514d\u5f71\u54cd\u56fe\u7247\u6548\u679c\uff0c\u6ca1\u5728\u4e0a\u9762\u5217\u51fa\uff09\u3002 \u5728REST\u4e2dJSON\u6570\u636e\u683c\u5f0f\u6027\u80fd\u4f18\u4e8eXML\uff08\u6570\u636e\u6682\u672a\u5728\u4ee5\u4e0a\u5217\u51fa\uff09\u3002 \u5728REST\u4e2d\u542f\u7528GZIP\u5bf9\u4f01\u4e1a\u5185\u7f51\u4e2d\u7684\u5c0f\u6570\u636e\u91cf\u590d\u6742\u5bf9\u8c61\u5e2e\u52a9\u4e0d\u5927\uff0c\u6027\u80fd\u53cd\u800c\u6709\u4e0b\u964d\uff08\u6570\u636e\u6682\u672a\u5728\u4ee5\u4e0a\u5217\u51fa\uff09\u3002","title":"\u6d4b\u8bd5\u7ed3\u679c"},{"location":"user/rest/#_13","text":"\u5982\u679c\u5c06dubbo REST\u90e8\u7f72\u5230\u5916\u90e8Tomcat\u4e0a\uff0c\u5e76\u914d\u7f6eserver=\"servlet\"\uff0c\u5373\u542f\u7528\u5916\u90e8\u7684tomcat\u6765\u505a\u4e3arest server\u7684\u5e95\u5c42\u5b9e\u73b0\uff0c\u5219\u6700\u597d\u5728tomcat\u4e0a\u6dfb\u52a0\u5982\u4e0b\u914d\u7f6e\uff1a Connector port= 8080 protocol= org.apache.coyote.http11.Http11NioProtocol connectionTimeout= 20000 redirectPort= 8443 minSpareThreads= 20 enableLookups= false maxThreads= 100 maxKeepAliveRequests= -1 keepAliveTimeout= 60000 / \u7279\u522b\u662fmaxKeepAliveRequests=\"-1\"\uff0c\u8fd9\u4e2a\u914d\u7f6e\u4e3b\u8981\u662f\u4fdd\u8bc1tomcat\u4e00\u76f4\u542f\u7528http\u957f\u8fde\u63a5\uff0c\u4ee5\u63d0\u9ad8REST\u8c03\u7528\u6027\u80fd\u3002\u4f46\u662f\u8bf7\u6ce8\u610f\uff0c\u5982\u679cREST\u6d88\u8d39\u7aef\u4e0d\u662f\u6301\u7eed\u7684\u8c03\u7528REST\u670d\u52a1\uff0c\u5219\u4e00\u76f4\u542f\u7528\u957f\u8fde\u63a5\u672a\u5fc5\u662f\u6700\u597d\u7684\u505a\u6cd5\u3002\u53e6\u5916\uff0c\u4e00\u76f4\u542f\u7528\u957f\u8fde\u63a5\u7684\u65b9\u5f0f\u4e00\u822c\u4e0d\u9002\u5408\u9488\u5bf9\u666e\u901awebapp\uff0c\u66f4\u9002\u5408\u8fd9\u79cd\u7c7b\u4f3crpc\u7684\u573a\u666f\u3002\u6240\u4ee5\u4e3a\u4e86\u9ad8\u6027\u80fd\uff0c\u5728tomcat\u4e2d\uff0cdubbo REST\u5e94\u7528\u548c\u666e\u901aweb\u5e94\u7528\u6700\u597d\u4e0d\u8981\u6df7\u5408\u90e8\u7f72\uff0c\u800c\u5e94\u8be5\u7528\u5355\u72ec\u7684\u5b9e\u4f8b\u3002 TODO more contents to add","title":"\u6027\u80fd\u4f18\u5316\u5efa\u8bae"},{"location":"user/rest/#_14","text":"","title":"\u6269\u5c55\u8ba8\u8bba"},{"location":"user/rest/#restthriftprotobuf","text":"TODO","title":"REST\u4e0eThrift\u3001Protobuf\u7b49\u7684\u5bf9\u6bd4"},{"location":"user/rest/#restwebservices","text":"TODO","title":"REST\u4e0e\u4f20\u7edfWebServices\u7684\u5bf9\u6bd4"},{"location":"user/rest/#jax-rsspring-mvc","text":"\u521d\u6b65\u770b\u6cd5\uff0c\u6458\u81eahttp://www.infoq.com/cn/news/2014/10/dubbox-open-source?utm_source=infoq utm_medium=popular_links_homepage#theCommentsSection \u8c22\u8c22\uff0c\u5bf9\u4e8ejax-rs\u548cspring mvc\uff0c\u5176\u5b9e\u6211\u5bf9spring mvc\u7684rest\u652f\u6301\u8fd8\u6ca1\u6709\u592a\u6df1\u5165\u7684\u770b\u8fc7\uff0c\u8bf4\u70b9\u521d\u6b65\u60f3\u6cd5\uff0c\u8bf7\u5927\u5bb6\u6307\u6b63\uff1a spring mvc\u4e5f\u652f\u6301annotation\u7684\u914d\u7f6e\uff0c\u5176\u5b9e\u548cjax-rs\u770b\u8d77\u6765\u662f\u975e\u5e38\u975e\u5e38\u7c7b\u4f3c\u7684\u3002 \u6211\u4e2a\u4eba\u8ba4\u4e3aspring mvc\u76f8\u5bf9\u66f4\u9002\u5408\u4e8e\u9762\u5411web\u5e94\u7528\u7684restful\u670d\u52a1\uff0c\u6bd4\u5982\u88abAJAX\u8c03\u7528\uff0c\u4e5f\u53ef\u80fd\u8f93\u51faHTML\u4e4b\u7c7b\u7684\uff0c\u5e94\u7528\u4e2d\u8fd8\u6709\u9875\u9762\u8df3\u8f6c\u6d41\u7a0b\u4e4b\u7c7b\uff0cspring mvc\u65e2\u53ef\u4ee5\u505a\u597d\u6b63\u5e38\u7684web\u9875\u9762\u8bf7\u6c42\u4e5f\u53ef\u4ee5\u540c\u65f6\u5904\u7406rest\u8bf7\u6c42\u3002\u4f46\u603b\u7684\u6765\u8bf4\u8fd9\u4e2arestful\u670d\u52a1\u662f\u5728\u5c55\u73b0\u5c42\u6216\u8005\u53ebweb\u5c42\u4e4b\u7c7b\u5b9e\u73b0\u7684 \u800cjax-rs\u76f8\u5bf9\u66f4\u9002\u5408\u7eaf\u7cb9\u7684\u670d\u52a1\u5316\u5e94\u7528\uff0c\u4e5f\u5c31\u662f\u4f20\u7edfJava EE\u4e2d\u6240\u8bf4\u7684\u4e2d\u95f4\u5c42\u670d\u52a1\uff0c\u6bd4\u5982\u5b83\u53ef\u4ee5\u628a\u4f20\u7edf\u7684EJB\u53d1\u5e03\u6210restful\u670d\u52a1\u3002\u5728spring\u5e94\u7528\u4e2d\uff0c\u4e5f\u5c31\u628aspring\u4e2d\u5145\u5f53service\u4e4b\u7c7b\u7684bean\u76f4\u63a5\u53d1\u5e03\u6210restful\u670d\u52a1\u3002\u603b\u7684\u6765\u8bf4\u8fd9\u4e2arestful\u670d\u52a1\u662f\u5728\u4e1a\u52a1\u3001\u5e94\u7528\u5c42\u6216\u8005facade\u5c42\u3002\u800cMVC\u5c42\u6b21\u548c\u6982\u5ff5\u5728\u8fd9\u79cd\u505a\u6bd4\u5982\uff08\u540e\u53f0\uff09\u670d\u52a1\u5316\u7684\u5e94\u7528\u4e2d\u901a\u5e38\u662f\u6ca1\u6709\u591a\u5927\u4ef7\u503c\u7684\u3002 \u5f53\u7136jax-rs\u7684\u6709\u4e9b\u5b9e\u73b0\u6bd4\u5982jersey\uff0c\u4e5f\u8bd5\u56fe\u63d0\u4f9bmvc\u652f\u6301\uff0c\u4ee5\u66f4\u597d\u7684\u9002\u5e94\u4e0a\u9762\u6240\u8bf4\u7684web\u5e94\u7528\uff0c\u4f46\u5e94\u8be5\u662f\u4e0d\u5982spring mvc\u3002 \u5728dubbo\u5e94\u7528\u4e2d\uff0c\u6211\u60f3\u5f88\u591a\u4eba\u90fd\u6bd4\u8f83\u559c\u6b22\u76f4\u63a5\u5c06\u4e00\u4e2a\u672c\u5730\u7684spring service bean\uff08\u6216\u8005\u53ebmanager\u4e4b\u7c7b\u7684\uff09\u5b8c\u5168\u900f\u660e\u7684\u53d1\u5e03\u6210\u8fdc\u7a0b\u670d\u52a1\uff0c\u5219\u8fd9\u91cc\u7528JAX-RS\u662f\u66f4\u81ea\u7136\u66f4\u76f4\u63a5\u7684\uff0c\u4e0d\u5fc5\u989d\u5916\u7684\u5f15\u5165MVC\u6982\u5ff5\u3002\u5f53\u7136\uff0c\u5148\u4e0d\u8ba8\u8bba\u900f\u660e\u53d1\u5e03\u8fdc\u7a0b\u670d\u52a1\u662f\u4e0d\u662f\u6700\u4f73\u5b9e\u8df5\uff0c\u8981\u4e0d\u8981\u6dfb\u52a0facade\u4e4b\u7c7b\u3002 \u5f53\u7136\uff0c\u6211\u77e5\u9053\u5728dubbo\u4e0d\u652f\u6301rest\u7684\u60c5\u51b5\u4e0b\uff0c\u5f88\u591a\u670b\u53cb\u91c7\u7528\u7684\u67b6\u6784\u662fspring mvc restful\u8c03\u7528dubbo (spring) service\u6765\u53d1\u5e03restful\u670d\u52a1\u7684\u3002\u8fd9\u79cd\u65b9\u5f0f\u6211\u89c9\u5f97\u4e5f\u975e\u5e38\u597d\uff0c\u53ea\u662f\u5982\u679c\u4e0d\u4fee\u6539spring mvc\u5e76\u5c06\u5176\u4e0edubbo\u6df1\u5ea6\u96c6\u6210\uff0crestful\u670d\u52a1\u4e0d\u80fd\u50cfdubbo\u4e2d\u7684\u5176\u4ed6\u8fdc\u7a0b\u8c03\u7528\u534f\u8bae\u6bd4\u5982webservices\u3001dubbo rpc\u3001hessian\u7b49\u7b49\u90a3\u6837\uff0c\u4eab\u53d7\u8bf8\u591a\u9ad8\u7ea7\u7684\u670d\u52a1\u6cbb\u7406\u7684\u529f\u80fd\uff0c\u6bd4\u5982\uff1a\u6ce8\u518c\u5230dubbo\u7684\u670d\u52a1\u6ce8\u518c\u4e2d\u5fc3\uff0c\u901a\u8fc7dubbo\u76d1\u63a7\u4e2d\u5fc3\u76d1\u63a7\u5176\u8c03\u7528\u6b21\u6570\u3001TPS\u3001\u54cd\u5e94\u65f6\u95f4\u4e4b\u7c7b\uff0c\u901a\u8fc7dubbo\u7684\u7edf\u4e00\u7684\u914d\u7f6e\u65b9\u5f0f\u63a7\u5236\u5176\u6bd4\u5982\u7ebf\u7a0b\u6c60\u5927\u5c0f\u3001\u6700\u5927\u8fde\u63a5\u6570\u7b49\u7b49\uff0c\u901a\u8fc7dubbo\u7edf\u4e00\u65b9\u5f0f\u505a\u670d\u52a1\u6d41\u91cf\u63a7\u5236\u3001\u6743\u9650\u63a7\u5236\u3001\u9891\u6b21\u63a7\u5236\u3002\u53e6\u5916spring mvc\u4ec5\u4ec5\u8d1f\u8d23\u670d\u52a1\u7aef\uff0c\u800c\u5728\u6d88\u8d39\u7aef\uff0c\u901a\u5e38\u662f\u7528spring restTemplate\uff0c\u5982\u679crestTemplate\u4e0d\u548cdubbo\u96c6\u6210\uff0c\u6709\u53ef\u80fd\u50cfdubbo\u670d\u52a1\u5ba2\u6237\u7aef\u90a3\u6837\u81ea\u52a8\u6216\u8005\u4eba\u5de5\u5e72\u9884\u505a\u670d\u52a1\u964d\u7ea7\u3002\u5982\u679c\u670d\u52a1\u7aef\u6d88\u8d39\u7aef\u90fd\u662fdubbo\u7cfb\u7edf\uff0c\u901a\u8fc7spring\u7684rest\u4ea4\u4e92\uff0c\u5982\u679cspring rest\u4e0d\u6df1\u5ea6\u6574\u5408dubbo\uff0c\u5219\u4e0d\u80fd\u7528dubbo\u7edf\u4e00\u7684\u8def\u7531\u5206\u6d41\u7b49\u529f\u80fd\u3002 \u5f53\u7136\uff0c\u5176\u5b9e\u6211\u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u4e9b\u4e1c\u897f\u4e0d\u5fc5\u8981\u975e\u6b64\u5373\u5f7c\u7684\u3002\u6211\u542c\u8bf4spring\u521b\u59cb\u4ebarod johnson\u603b\u662f\u7231\u8bf4\u4e00\u53e5\u8bdd\uff0cthe customer is always right\uff0c\u5176\u5b9e\u4e0e\u5176\u975e\u8981\u63a2\u8ba8\u54ea\u79cd\u65b9\u5f0f\u66f4\u597d\uff0c\u4e0d\u5982\u540c\u65f6\u652f\u6301\u4e24\u79cd\u65b9\u5f0f\u5c31\u662f\u4e86\uff0c\u6240\u4ee5\u539f\u6765\u5728\u6587\u6863\u4e2d\u4e5f\u5199\u8fc7\u8ba1\u5212\u652f\u6301spring rest annoation\uff0c\u53ea\u662f\u4e0d\u77e5\u9053\u5177\u4f53\u53ef\u884c\u6027\u6709\u591a\u9ad8\u3002","title":"JAX-RS\u4e0eSpring MVC\u7684\u5bf9\u6bd4"},{"location":"user/rest/#_15","text":"\u7a0d\u540e\u53ef\u80fd\u8981\u5b9e\u73b0\u7684\u529f\u80fd\uff1a spring mvc\u7684rest annotation\u652f\u6301 \u5b89\u5168 OAuth \u5f02\u6b65\u8c03\u7528 \u5b8c\u5584gzip \u6700\u5927payload\u9650\u5236","title":"\u672a\u6765"},{"location":"user/serialization/","text":"\u5728Dubbo\u4e2d\u4f7f\u7528\u9ad8\u6548\u7684Java\u5e8f\u5217\u5316\uff08Kryo\u548cFST\uff09 \u4f5c\u8005\uff1a\u6c88\u7406 \u6587\u6863\u7248\u6743\uff1a Apache 2.0\u8bb8\u53ef\u8bc1 \u7f72\u540d-\u7981\u6b62\u6f14\u7ece \u5b8c\u5584\u4e2d\u2026\u2026 TODO \u751f\u6210\u53ef\u70b9\u51fb\u7684\u76ee\u5f55 \u76ee\u5f55 \u5e8f\u5217\u5316\u6f2b\u8c08 \u542f\u7528Kryo\u548cFST \u6ce8\u518c\u88ab\u5e8f\u5217\u5316\u7c7b \u65e0\u53c2\u6784\u9020\u51fd\u6570\u548cSerializable\u63a5\u53e3 \u5e8f\u5217\u5316\u6027\u80fd\u5206\u6790\u4e0e\u6d4b\u8bd5 \u6d4b\u8bd5\u73af\u5883 \u6d4b\u8bd5\u811a\u672c Dubbo RPC\u4e2d\u4e0d\u540c\u5e8f\u5217\u5316\u751f\u6210\u5b57\u8282\u5927\u5c0f\u6bd4\u8f83 Dubbo RPC\u4e2d\u4e0d\u540c\u5e8f\u5217\u5316\u54cd\u5e94\u65f6\u95f4\u548c\u541e\u5410\u91cf\u5bf9\u6bd4 \u672a\u6765 \u5e8f\u5217\u5316\u6f2b\u8c08 dubbo RPC\u662fdubbo\u4f53\u7cfb\u4e2d\u6700\u6838\u5fc3\u7684\u4e00\u79cd\u9ad8\u6027\u80fd\u3001\u9ad8\u541e\u5410\u91cf\u7684\u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f\uff0c\u6211\u559c\u6b22\u79f0\u4e4b\u4e3a\u591a\u8def\u590d\u7528\u7684TCP\u957f\u8fde\u63a5\u8c03\u7528\uff0c\u7b80\u5355\u7684\u8bf4\uff1a \u957f\u8fde\u63a5\uff1a\u907f\u514d\u4e86\u6bcf\u6b21\u8c03\u7528\u65b0\u5efaTCP\u8fde\u63a5\uff0c\u63d0\u9ad8\u4e86\u8c03\u7528\u7684\u54cd\u5e94\u901f\u5ea6 \u591a\u8def\u590d\u7528\uff1a\u5355\u4e2aTCP\u8fde\u63a5\u53ef\u4ea4\u66ff\u4f20\u8f93\u591a\u4e2a\u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u6d88\u606f\uff0c\u964d\u4f4e\u4e86\u8fde\u63a5\u7684\u7b49\u5f85\u95f2\u7f6e\u65f6\u95f4\uff0c\u4ece\u800c\u51cf\u5c11\u4e86\u540c\u6837\u5e76\u53d1\u6570\u4e0b\u7684\u7f51\u7edc\u8fde\u63a5\u6570\uff0c\u63d0\u9ad8\u4e86\u7cfb\u7edf\u541e\u5410\u91cf\u3002 dubbo RPC\u4e3b\u8981\u7528\u4e8e\u4e24\u4e2adubbo\u7cfb\u7edf\u4e4b\u95f4\u4f5c\u8fdc\u7a0b\u8c03\u7528\uff0c\u7279\u522b\u9002\u5408\u9ad8\u5e76\u53d1\u3001\u5c0f\u6570\u636e\u7684\u4e92\u8054\u7f51\u573a\u666f\u3002 \u800c\u5e8f\u5217\u5316\u5bf9\u4e8e\u8fdc\u7a0b\u8c03\u7528\u7684\u54cd\u5e94\u901f\u5ea6\u3001\u541e\u5410\u91cf\u3001\u7f51\u7edc\u5e26\u5bbd\u6d88\u8017\u7b49\u540c\u6837\u4e5f\u8d77\u7740\u81f3\u5173\u91cd\u8981\u7684\u4f5c\u7528\uff0c\u662f\u6211\u4eec\u63d0\u5347\u5206\u5e03\u5f0f\u7cfb\u7edf\u6027\u80fd\u7684\u6700\u5173\u952e\u56e0\u7d20\u4e4b\u4e00\u3002 \u5728dubbo RPC\u4e2d\uff0c\u540c\u65f6\u652f\u6301\u591a\u79cd\u5e8f\u5217\u5316\u65b9\u5f0f\uff0c\u4f8b\u5982\uff1a dubbo\u5e8f\u5217\u5316\uff1a\u963f\u91cc\u5c1a\u672a\u5f00\u53d1\u6210\u719f\u7684\u9ad8\u6548java\u5e8f\u5217\u5316\u5b9e\u73b0\uff0c\u963f\u91cc\u4e0d\u5efa\u8bae\u5728\u751f\u4ea7\u73af\u5883\u4f7f\u7528\u5b83 hessian2\u5e8f\u5217\u5316\uff1ahessian\u662f\u4e00\u79cd\u8de8\u8bed\u8a00\u7684\u9ad8\u6548\u4e8c\u8fdb\u5236\u5e8f\u5217\u5316\u65b9\u5f0f\u3002\u4f46\u8fd9\u91cc\u5b9e\u9645\u4e0d\u662f\u539f\u751f\u7684hessian2\u5e8f\u5217\u5316\uff0c\u800c\u662f\u963f\u91cc\u4fee\u6539\u8fc7\u7684hessian lite\uff0c\u5b83\u662fdubbo RPC\u9ed8\u8ba4\u542f\u7528\u7684\u5e8f\u5217\u5316\u65b9\u5f0f json\u5e8f\u5217\u5316\uff1a\u76ee\u524d\u6709\u4e24\u79cd\u5b9e\u73b0\uff0c\u4e00\u79cd\u662f\u91c7\u7528\u7684\u963f\u91cc\u7684fastjson\u5e93\uff0c\u53e6\u4e00\u79cd\u662f\u91c7\u7528dubbo\u4e2d\u81ea\u5df1\u5b9e\u73b0\u7684\u7b80\u5355json\u5e93\uff0c\u4f46\u5176\u5b9e\u73b0\u90fd\u4e0d\u662f\u7279\u522b\u6210\u719f\uff0c\u800c\u4e14json\u8fd9\u79cd\u6587\u672c\u5e8f\u5217\u5316\u6027\u80fd\u4e00\u822c\u4e0d\u5982\u4e0a\u9762\u4e24\u79cd\u4e8c\u8fdb\u5236\u5e8f\u5217\u5316\u3002 java\u5e8f\u5217\u5316\uff1a\u4e3b\u8981\u662f\u91c7\u7528JDK\u81ea\u5e26\u7684Java\u5e8f\u5217\u5316\u5b9e\u73b0\uff0c\u6027\u80fd\u5f88\u4e0d\u7406\u60f3\u3002 \u5728\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd9\u56db\u79cd\u4e3b\u8981\u5e8f\u5217\u5316\u65b9\u5f0f\u7684\u6027\u80fd\u4ece\u4e0a\u5230\u4e0b\u4f9d\u6b21\u9012\u51cf\u3002\u5bf9\u4e8edubbo RPC\u8fd9\u79cd\u8ffd\u6c42\u9ad8\u6027\u80fd\u7684\u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f\u6765\u8bf4\uff0c\u5b9e\u9645\u4e0a\u53ea\u67091\u30012\u4e24\u79cd\u9ad8\u6548\u5e8f\u5217\u5316\u65b9\u5f0f\u6bd4\u8f83\u822c\u914d\uff0c\u800c\u7b2c1\u4e2adubbo\u5e8f\u5217\u5316\u7531\u4e8e\u8fd8\u4e0d\u6210\u719f\uff0c\u6240\u4ee5\u5b9e\u9645\u53ea\u5269\u4e0b2\u53ef\u7528\uff0c\u6240\u4ee5dubbo RPC\u9ed8\u8ba4\u91c7\u7528hessian2\u5e8f\u5217\u5316\u3002 \u4f46hessian\u662f\u4e00\u4e2a\u6bd4\u8f83\u8001\u7684\u5e8f\u5217\u5316\u5b9e\u73b0\u4e86\uff0c\u800c\u4e14\u5b83\u662f\u8de8\u8bed\u8a00\u7684\uff0c\u6240\u4ee5\u4e0d\u662f\u5355\u72ec\u9488\u5bf9java\u8fdb\u884c\u4f18\u5316\u7684\u3002\u800cdubbo RPC\u5b9e\u9645\u4e0a\u5b8c\u5168\u662f\u4e00\u79cdJava to Java\u7684\u8fdc\u7a0b\u8c03\u7528\uff0c\u5176\u5b9e\u6ca1\u6709\u5fc5\u8981\u91c7\u7528\u8de8\u8bed\u8a00\u7684\u5e8f\u5217\u5316\u65b9\u5f0f\uff08\u5f53\u7136\u80af\u5b9a\u4e5f\u4e0d\u6392\u65a5\u8de8\u8bed\u8a00\u7684\u5e8f\u5217\u5316\uff09\u3002 \u6700\u8fd1\u51e0\u5e74\uff0c\u5404\u79cd\u65b0\u7684\u9ad8\u6548\u5e8f\u5217\u5316\u65b9\u5f0f\u5c42\u51fa\u4e0d\u7a77\uff0c\u4e0d\u65ad\u5237\u65b0\u5e8f\u5217\u5316\u6027\u80fd\u7684\u4e0a\u9650\uff0c\u6700\u5178\u578b\u7684\u5305\u62ec\uff1a \u4e13\u95e8\u9488\u5bf9Java\u8bed\u8a00\u7684\uff1aKryo\uff0cFST\u7b49\u7b49 \u8de8\u8bed\u8a00\u7684\uff1aProtostuff\uff0cProtoBuf\uff0cThrift\uff0cAvro\uff0cMsgPack\u7b49\u7b49 \u8fd9\u4e9b\u5e8f\u5217\u5316\u65b9\u5f0f\u7684\u6027\u80fd\u591a\u6570\u90fd\u663e\u8457\u4f18\u4e8ehessian2\uff08\u751a\u81f3\u5305\u62ec\u5c1a\u672a\u6210\u719f\u7684dubbo\u5e8f\u5217\u5316\uff09\u3002 \u6709\u9274\u4e8e\u6b64\uff0c\u6211\u4eec\u4e3adubbo\u5f15\u5165Kryo\u548cFST\u8fd9\u4e24\u79cd\u9ad8\u6548Java\u5e8f\u5217\u5316\u5b9e\u73b0\uff0c\u6765\u9010\u6b65\u53d6\u4ee3hessian2\u3002 \u5176\u4e2d\uff0cKryo\u662f\u4e00\u79cd\u975e\u5e38\u6210\u719f\u7684\u5e8f\u5217\u5316\u5b9e\u73b0\uff0c\u5df2\u7ecf\u5728Twitter\u3001Groupon\u3001Yahoo\u4ee5\u53ca\u591a\u4e2a\u8457\u540d\u5f00\u6e90\u9879\u76ee\uff08\u5982Hive\u3001Storm\uff09\u4e2d\u5e7f\u6cdb\u7684\u4f7f\u7528\u3002\u800cFST\u662f\u4e00\u79cd\u8f83\u65b0\u7684\u5e8f\u5217\u5316\u5b9e\u73b0\uff0c\u76ee\u524d\u8fd8\u7f3a\u4e4f\u8db3\u591f\u591a\u7684\u6210\u719f\u4f7f\u7528\u6848\u4f8b\uff0c\u4f46\u6211\u8ba4\u4e3a\u5b83\u8fd8\u662f\u975e\u5e38\u6709\u524d\u9014\u7684\u3002 \u5728\u9762\u5411\u751f\u4ea7\u73af\u5883\u7684\u5e94\u7528\u4e2d\uff0c\u6211\u5efa\u8bae\u76ee\u524d\u66f4\u4f18\u5148\u9009\u62e9Kryo\u3002 \u542f\u7528Kryo\u548cFST \u4f7f\u7528Kryo\u548cFST\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5728dubbo RPC\u7684XML\u914d\u7f6e\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u5c5e\u6027\u5373\u53ef\uff1a dubbo:protocol name= dubbo serialization= kryo / dubbo:protocol name= dubbo serialization= fst / \u6ce8\u518c\u88ab\u5e8f\u5217\u5316\u7c7b \u8981\u8ba9Kryo\u548cFST\u5b8c\u5168\u53d1\u6325\u51fa\u9ad8\u6027\u80fd\uff0c\u6700\u597d\u5c06\u90a3\u4e9b\u9700\u8981\u88ab\u5e8f\u5217\u5316\u7684\u7c7b\u6ce8\u518c\u5230dubbo\u7cfb\u7edf\u4e2d\uff0c\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u5982\u4e0b\u56de\u8c03\u63a5\u53e3\uff1a public class SerializationOptimizerImpl implements SerializationOptimizer { public Collection Class getSerializableClasses() { List Class classes = new LinkedList Class (); classes.add(BidRequest.class); classes.add(BidResponse.class); classes.add(Device.class); classes.add(Geo.class); classes.add(Impression.class); classes.add(SeatBid.class); return classes; } } \u7136\u540e\u5728XML\u914d\u7f6e\u4e2d\u6dfb\u52a0\uff1a dubbo:protocol name= dubbo serialization= kryo optimizer= org.apache.dubbo.demo.SerializationOptimizerImpl / \u5728\u6ce8\u518c\u8fd9\u4e9b\u7c7b\u540e\uff0c\u5e8f\u5217\u5316\u7684\u6027\u80fd\u53ef\u80fd\u88ab\u5927\u5927\u63d0\u5347\uff0c\u7279\u522b\u9488\u5bf9\u5c0f\u6570\u91cf\u7684\u5d4c\u5957\u5bf9\u8c61\u7684\u65f6\u5019\u3002 \u5f53\u7136\uff0c\u5728\u5bf9\u4e00\u4e2a\u7c7b\u505a\u5e8f\u5217\u5316\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u8fd8\u7ea7\u8054\u5f15\u7528\u5230\u5f88\u591a\u7c7b\uff0c\u6bd4\u5982Java\u96c6\u5408\u7c7b\u3002\u9488\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5df2\u7ecf\u81ea\u52a8\u5c06JDK\u4e2d\u7684\u5e38\u7528\u7c7b\u8fdb\u884c\u4e86\u6ce8\u518c\uff0c\u6240\u4ee5\u4f60\u4e0d\u9700\u8981\u91cd\u590d\u6ce8\u518c\u5b83\u4eec\uff08\u5f53\u7136\u4f60\u91cd\u590d\u6ce8\u518c\u4e86\u4e5f\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\uff09\uff0c\u5305\u62ec\uff1a GregorianCalendar InvocationHandler BigDecimal BigInteger Pattern BitSet URI UUID HashMap ArrayList LinkedList HashSet TreeSet Hashtable Date Calendar ConcurrentHashMap SimpleDateFormat Vector BitSet StringBuffer StringBuilder Object Object[] String[] byte[] char[] int[] float[] double[] \u7531\u4e8e\u6ce8\u518c\u88ab\u5e8f\u5217\u5316\u7684\u7c7b\u4ec5\u4ec5\u662f\u51fa\u4e8e\u6027\u80fd\u4f18\u5316\u7684\u76ee\u7684\uff0c\u6240\u4ee5\u5373\u4f7f\u4f60\u5fd8\u8bb0\u6ce8\u518c\u67d0\u4e9b\u7c7b\u4e5f\u6ca1\u6709\u5173\u7cfb\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5373\u4f7f\u4e0d\u6ce8\u518c\u4efb\u4f55\u7c7b\uff0cKryo\u548cFST\u7684\u6027\u80fd\u4f9d\u7136\u666e\u904d\u4f18\u4e8ehessian\u548cdubbo\u5e8f\u5217\u5316\u3002 \u5f53\u7136\uff0c\u6709\u4eba\u53ef\u80fd\u4f1a\u95ee\u4e3a\u4ec0\u4e48\u4e0d\u7528\u914d\u7f6e\u6587\u4ef6\u6765\u6ce8\u518c\u8fd9\u4e9b\u7c7b\uff1f\u8fd9\u662f\u56e0\u4e3a\u8981\u6ce8\u518c\u7684\u7c7b\u5f80\u5f80\u6570\u91cf\u8f83\u591a\uff0c\u5bfc\u81f4\u914d\u7f6e\u6587\u4ef6\u5197\u957f\uff1b\u800c\u4e14\u5728\u6ca1\u6709\u597d\u7684IDE\u652f\u6301\u7684\u60c5\u51b5\u4e0b\uff0c\u914d\u7f6e\u6587\u4ef6\u7684\u7f16\u5199\u548c\u91cd\u6784\u90fd\u6bd4java\u7c7b\u9ebb\u70e6\u5f97\u591a\uff1b\u6700\u540e\uff0c\u8fd9\u4e9b\u6ce8\u518c\u7684\u7c7b\u4e00\u822c\u662f\u4e0d\u9700\u8981\u5728\u9879\u76ee\u7f16\u8bd1\u6253\u5305\u540e\u8fd8\u9700\u8981\u505a\u52a8\u6001\u4fee\u6539\u7684\u3002 \u53e6\u5916\uff0c\u6709\u4eba\u4e5f\u4f1a\u89c9\u5f97\u624b\u5de5\u6ce8\u518c\u88ab\u5e8f\u5217\u5316\u7684\u7c7b\u662f\u4e00\u79cd\u76f8\u5bf9\u7e41\u7410\u7684\u5de5\u4f5c\uff0c\u662f\u4e0d\u662f\u53ef\u4ee5\u7528annotation\u6765\u6807\u6ce8\uff0c\u7136\u540e\u7cfb\u7edf\u6765\u81ea\u52a8\u53d1\u73b0\u5e76\u6ce8\u518c\u3002\u4f46\u8fd9\u91ccannotation\u7684\u5c40\u9650\u662f\uff0c\u5b83\u53ea\u80fd\u7528\u6765\u6807\u6ce8\u4f60\u53ef\u4ee5\u4fee\u6539\u7684\u7c7b\uff0c\u800c\u5f88\u591a\u5e8f\u5217\u5316\u4e2d\u5f15\u7528\u7684\u7c7b\u5f88\u53ef\u80fd\u662f\u4f60\u6ca1\u6cd5\u505a\u4fee\u6539\u7684\uff08\u6bd4\u5982\u7b2c\u4e09\u65b9\u5e93\u6216\u8005JDK\u7cfb\u7edf\u7c7b\u6216\u8005\u5176\u4ed6\u9879\u76ee\u7684\u7c7b\uff09\u3002\u53e6\u5916\uff0c\u6dfb\u52a0annotation\u6bd5\u7adf\u7a0d\u5fae\u7684\u201c\u6c61\u67d3\u201d\u4e86\u4e00\u4e0b\u4ee3\u7801\uff0c\u4f7f\u5e94\u7528\u4ee3\u7801\u5bf9\u6846\u67b6\u589e\u52a0\u4e86\u4e00\u70b9\u70b9\u7684\u4f9d\u8d56\u6027\u3002 \u9664\u4e86annotation\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u8003\u8651\u7528\u5176\u5b83\u65b9\u5f0f\u6765\u81ea\u52a8\u6ce8\u518c\u88ab\u5e8f\u5217\u5316\u7684\u7c7b\uff0c\u4f8b\u5982\u626b\u63cf\u7c7b\u8def\u5f84\uff0c\u81ea\u52a8\u53d1\u73b0\u5b9e\u73b0Serializable\u63a5\u53e3\uff08\u751a\u81f3\u5305\u62ecExternalizable\uff09\u7684\u7c7b\u5e76\u5c06\u5b83\u4eec\u6ce8\u518c\u3002\u5f53\u7136\uff0c\u6211\u4eec\u77e5\u9053\u7c7b\u8def\u5f84\u4e0a\u80fd\u627e\u5230Serializable\u7c7b\u53ef\u80fd\u662f\u975e\u5e38\u591a\u7684\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u8003\u8651\u7528package\u524d\u7f00\u4e4b\u7c7b\u6765\u4e00\u5b9a\u7a0b\u5ea6\u9650\u5b9a\u626b\u63cf\u8303\u56f4\u3002 \u5f53\u7136\uff0c\u5728\u81ea\u52a8\u6ce8\u518c\u673a\u5236\u4e2d\uff0c\u7279\u522b\u9700\u8981\u8003\u8651\u5982\u4f55\u4fdd\u8bc1\u670d\u52a1\u63d0\u4f9b\u7aef\u548c\u6d88\u8d39\u7aef\u90fd\u4ee5\u540c\u6837\u7684\u987a\u5e8f\uff08\u6216\u8005ID\uff09\u6765\u6ce8\u518c\u7c7b\uff0c\u907f\u514d\u9519\u4f4d\uff0c\u6bd5\u7adf\u4e24\u7aef\u53ef\u88ab\u53d1\u73b0\u7136\u540e\u6ce8\u518c\u7684\u7c7b\u7684\u6570\u91cf\u53ef\u80fd\u90fd\u662f\u4e0d\u4e00\u6837\u7684\u3002 \u65e0\u53c2\u6784\u9020\u51fd\u6570\u548cSerializable\u63a5\u53e3 \u5982\u679c\u88ab\u5e8f\u5217\u5316\u7684\u7c7b\u4e2d\u4e0d\u5305\u542b\u65e0\u53c2\u7684\u6784\u9020\u51fd\u6570\uff0c\u5219\u5728Kryo\u7684\u5e8f\u5217\u5316\u4e2d\uff0c\u6027\u80fd\u5c06\u4f1a\u5927\u6253\u6298\u6263\uff0c\u56e0\u4e3a\u6b64\u65f6\u6211\u4eec\u5728\u5e95\u5c42\u5c06\u7528Java\u7684\u5e8f\u5217\u5316\u6765\u900f\u660e\u7684\u53d6\u4ee3Kryo\u5e8f\u5217\u5316\u3002\u6240\u4ee5\uff0c\u5c3d\u53ef\u80fd\u4e3a\u6bcf\u4e00\u4e2a\u88ab\u5e8f\u5217\u5316\u7684\u7c7b\u6dfb\u52a0\u65e0\u53c2\u6784\u9020\u51fd\u6570\u662f\u4e00\u79cd\u6700\u4f73\u5b9e\u8df5\uff08\u5f53\u7136\u4e00\u4e2ajava\u7c7b\u5982\u679c\u4e0d\u81ea\u5b9a\u4e49\u6784\u9020\u51fd\u6570\uff0c\u9ed8\u8ba4\u5c31\u6709\u65e0\u53c2\u6784\u9020\u51fd\u6570\uff09\u3002 \u53e6\u5916\uff0cKryo\u548cFST\u672c\u6765\u90fd\u4e0d\u9700\u8981\u88ab\u5e8f\u5217\u5316\u90fd\u7c7b\u5b9e\u73b0Serializable\u63a5\u53e3\uff0c\u4f46\u6211\u4eec\u8fd8\u662f\u5efa\u8bae\u6bcf\u4e2a\u88ab\u5e8f\u5217\u5316\u7c7b\u90fd\u53bb\u5b9e\u73b0\u5b83\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ef\u4ee5\u4fdd\u6301\u548cJava\u5e8f\u5217\u5316\u4ee5\u53cadubbo\u5e8f\u5217\u5316\u7684\u517c\u5bb9\u6027\uff0c\u53e6\u5916\u4e5f\u4f7f\u6211\u4eec\u672a\u6765\u91c7\u7528\u4e0a\u8ff0\u67d0\u4e9b\u81ea\u52a8\u6ce8\u518c\u673a\u5236\u5e26\u6765\u53ef\u80fd\u3002 \u5e8f\u5217\u5316\u6027\u80fd\u5206\u6790\u4e0e\u6d4b\u8bd5 \u672c\u6587\u6211\u4eec\u4e3b\u8981\u8ba8\u8bba\u7684\u662f\u5e8f\u5217\u5316\uff0c\u4f46\u5728\u505a\u6027\u80fd\u5206\u6790\u548c\u6d4b\u8bd5\u7684\u65f6\u5019\u6211\u4eec\u5e76\u4e0d\u5355\u72ec\u5904\u7406\u6bcf\u79cd\u5e8f\u5217\u5316\u65b9\u5f0f\uff0c\u800c\u662f\u628a\u5b83\u4eec\u653e\u5230dubbo RPC\u4e2d\u52a0\u4ee5\u5bf9\u6bd4\uff0c\u56e0\u4e3a\u8fd9\u6837\u66f4\u6709\u73b0\u5b9e\u610f\u4e49\u3002 \u6d4b\u8bd5\u73af\u5883 \u7c97\u7565\u5982\u4e0b\uff1a \u4e24\u53f0\u72ec\u7acb\u670d\u52a1\u5668 4\u6838Intel(R) Xeon(R) CPU E5-2603 0 @ 1.80GHz 8G\u5185\u5b58 \u865a\u62df\u673a\u4e4b\u95f4\u7f51\u7edc\u901a\u8fc7\u767e\u5146\u4ea4\u6362\u673a CentOS 5 JDK 7 Tomcat 7 JVM\u53c2\u6570-server -Xms1g -Xmx1g -XX:PermSize=64M -XX:+UseConcMarkSweepGC \u5f53\u7136\u8fd9\u4e2a\u6d4b\u8bd5\u73af\u5883\u8f83\u6709\u5c40\u9650\uff0c\u6545\u5f53\u524d\u6d4b\u8bd5\u7ed3\u679c\u672a\u5fc5\u6709\u975e\u5e38\u6743\u5a01\u7684\u4ee3\u8868\u6027\u3002 \u6d4b\u8bd5\u811a\u672c \u548cdubbo\u81ea\u8eab\u7684\u57fa\u51c6\u6d4b\u8bd5\u4fdd\u6301\u63a5\u8fd1\uff1a 10\u4e2a\u5e76\u53d1\u5ba2\u6237\u7aef\u6301\u7eed\u4e0d\u65ad\u53d1\u51fa\u8bf7\u6c42\uff1a \u4f20\u5165\u5d4c\u5957\u590d\u6742\u5bf9\u8c61\uff08\u4f46\u5355\u4e2a\u6570\u636e\u91cf\u5f88\u5c0f\uff09\uff0c\u4e0d\u505a\u4efb\u4f55\u5904\u7406\uff0c\u539f\u6837\u8fd4\u56de \u4f20\u516550K\u5b57\u7b26\u4e32\uff0c\u4e0d\u505a\u4efb\u4f55\u5904\u7406\uff0c\u539f\u6837\u8fd4\u56de\uff08TODO\uff1a\u7ed3\u679c\u5c1a\u672a\u5217\u51fa\uff09 \u8fdb\u884c5\u5206\u949f\u6027\u80fd\u6d4b\u8bd5\u3002\uff08\u5f15\u7528dubbo\u81ea\u8eab\u6d4b\u8bd5\u7684\u8003\u8651\uff1a\u201c\u4e3b\u8981\u8003\u5bdf\u5e8f\u5217\u5316\u548c\u7f51\u7edcIO\u7684\u6027\u80fd\uff0c\u56e0\u6b64\u670d\u52a1\u7aef\u65e0\u4efb\u4f55\u4e1a\u52a1\u903b\u8f91\u3002\u53d610\u5e76\u53d1\u662f\u8003\u8651\u5230http\u534f\u8bae\u5728\u9ad8\u5e76\u53d1\u4e0b\u5bf9CPU\u7684\u4f7f\u7528\u7387\u8f83\u9ad8\u53ef\u80fd\u4f1a\u5148\u6253\u5230\u74f6\u9888\u3002\u201d\uff09 Dubbo RPC\u4e2d\u4e0d\u540c\u5e8f\u5217\u5316\u751f\u6210\u5b57\u8282\u5927\u5c0f\u6bd4\u8f83 \u5e8f\u5217\u5316\u751f\u6210\u5b57\u8282\u7801\u7684\u5927\u5c0f\u662f\u4e00\u4e2a\u6bd4\u8f83\u6709\u786e\u5b9a\u6027\u7684\u6307\u6807\uff0c\u5b83\u51b3\u5b9a\u4e86\u8fdc\u7a0b\u8c03\u7528\u7684\u7f51\u7edc\u4f20\u8f93\u65f6\u95f4\u548c\u5e26\u5bbd\u5360\u7528\u3002 \u9488\u5bf9\u590d\u6742\u5bf9\u8c61\u7684\u7ed3\u679c\u5982\u4e0b\uff08\u6570\u503c\u8d8a\u5c0f\u8d8a\u597d\uff09\uff1a \u5e8f\u5217\u5316\u5b9e\u73b0 \u8bf7\u6c42\u5b57\u8282\u6570 \u54cd\u5e94\u5b57\u8282\u6570 Kryo 272 90 FST 288 96 Dubbo Serialization 430 186 Hessian 546 329 FastJson 461 218 Json 657 409 Java Serialization 963 630 Dubbo RPC\u4e2d\u4e0d\u540c\u5e8f\u5217\u5316\u54cd\u5e94\u65f6\u95f4\u548c\u541e\u5410\u91cf\u5bf9\u6bd4 \u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f \u5e73\u5747\u54cd\u5e94\u65f6\u95f4 \u5e73\u5747TPS\uff08\u6bcf\u79d2\u4e8b\u52a1\u6570\uff09 REST: Jetty + JSON 7.806 1280 REST: Jetty + JSON + GZIP TODO TODO REST: Jetty + XML TODO TODO REST: Jetty + XML + GZIP TODO TODO REST: Tomcat + JSON 2.082 4796 REST: Netty + JSON 2.182 4576 Dubbo: FST 1.211 8244 Dubbo: kyro 1.182 8444 Dubbo: dubbo serialization 1.43 6982 Dubbo: hessian2 1.49 6701 Dubbo: fastjson 1.572 6352 \u6d4b\u8bd5\u603b\u7ed3 \u5c31\u76ee\u524d\u7ed3\u679c\u800c\u8a00\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e0d\u7ba1\u4ece\u751f\u6210\u5b57\u8282\u7684\u5927\u5c0f\uff0c\u8fd8\u662f\u5e73\u5747\u54cd\u5e94\u65f6\u95f4\u548c\u5e73\u5747TPS\uff0cKryo\u548cFST\u76f8\u6bd4Dubbo RPC\u4e2d\u539f\u6709\u7684\u5e8f\u5217\u5316\u65b9\u5f0f\u90fd\u6709\u975e\u5e38\u663e\u8457\u7684\u6539\u8fdb\u3002 \u672a\u6765 \u672a\u6765\uff0c\u5f53Kryo\u6216\u8005FST\u5728dubbo\u4e2d\u5f53\u5e94\u7528\u8db3\u591f\u6210\u719f\u4e4b\u540e\uff0c\u6211\u4eec\u5f88\u53ef\u80fd\u4f1a\u5c06dubbo RPC\u7684\u9ed8\u8ba4\u5e8f\u5217\u5316\u4ecehessian2\u6539\u4e3a\u5b83\u4eec\u4e2d\u95f4\u7684\u67d0\u4e00\u4e2a\u3002","title":"\u5728Dubbo\u4e2d\u4f7f\u7528\u9ad8\u6548\u7684Java\u5e8f\u5217\u5316\uff08Kryo\u548cFST\uff09"},{"location":"user/serialization/#dubbojavakryofst","text":"\u4f5c\u8005\uff1a\u6c88\u7406 \u6587\u6863\u7248\u6743\uff1a Apache 2.0\u8bb8\u53ef\u8bc1 \u7f72\u540d-\u7981\u6b62\u6f14\u7ece \u5b8c\u5584\u4e2d\u2026\u2026 TODO \u751f\u6210\u53ef\u70b9\u51fb\u7684\u76ee\u5f55","title":"\u5728Dubbo\u4e2d\u4f7f\u7528\u9ad8\u6548\u7684Java\u5e8f\u5217\u5316\uff08Kryo\u548cFST\uff09"},{"location":"user/serialization/#_1","text":"\u5e8f\u5217\u5316\u6f2b\u8c08 \u542f\u7528Kryo\u548cFST \u6ce8\u518c\u88ab\u5e8f\u5217\u5316\u7c7b \u65e0\u53c2\u6784\u9020\u51fd\u6570\u548cSerializable\u63a5\u53e3 \u5e8f\u5217\u5316\u6027\u80fd\u5206\u6790\u4e0e\u6d4b\u8bd5 \u6d4b\u8bd5\u73af\u5883 \u6d4b\u8bd5\u811a\u672c Dubbo RPC\u4e2d\u4e0d\u540c\u5e8f\u5217\u5316\u751f\u6210\u5b57\u8282\u5927\u5c0f\u6bd4\u8f83 Dubbo RPC\u4e2d\u4e0d\u540c\u5e8f\u5217\u5316\u54cd\u5e94\u65f6\u95f4\u548c\u541e\u5410\u91cf\u5bf9\u6bd4 \u672a\u6765","title":"\u76ee\u5f55"},{"location":"user/serialization/#_2","text":"dubbo RPC\u662fdubbo\u4f53\u7cfb\u4e2d\u6700\u6838\u5fc3\u7684\u4e00\u79cd\u9ad8\u6027\u80fd\u3001\u9ad8\u541e\u5410\u91cf\u7684\u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f\uff0c\u6211\u559c\u6b22\u79f0\u4e4b\u4e3a\u591a\u8def\u590d\u7528\u7684TCP\u957f\u8fde\u63a5\u8c03\u7528\uff0c\u7b80\u5355\u7684\u8bf4\uff1a \u957f\u8fde\u63a5\uff1a\u907f\u514d\u4e86\u6bcf\u6b21\u8c03\u7528\u65b0\u5efaTCP\u8fde\u63a5\uff0c\u63d0\u9ad8\u4e86\u8c03\u7528\u7684\u54cd\u5e94\u901f\u5ea6 \u591a\u8def\u590d\u7528\uff1a\u5355\u4e2aTCP\u8fde\u63a5\u53ef\u4ea4\u66ff\u4f20\u8f93\u591a\u4e2a\u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u6d88\u606f\uff0c\u964d\u4f4e\u4e86\u8fde\u63a5\u7684\u7b49\u5f85\u95f2\u7f6e\u65f6\u95f4\uff0c\u4ece\u800c\u51cf\u5c11\u4e86\u540c\u6837\u5e76\u53d1\u6570\u4e0b\u7684\u7f51\u7edc\u8fde\u63a5\u6570\uff0c\u63d0\u9ad8\u4e86\u7cfb\u7edf\u541e\u5410\u91cf\u3002 dubbo RPC\u4e3b\u8981\u7528\u4e8e\u4e24\u4e2adubbo\u7cfb\u7edf\u4e4b\u95f4\u4f5c\u8fdc\u7a0b\u8c03\u7528\uff0c\u7279\u522b\u9002\u5408\u9ad8\u5e76\u53d1\u3001\u5c0f\u6570\u636e\u7684\u4e92\u8054\u7f51\u573a\u666f\u3002 \u800c\u5e8f\u5217\u5316\u5bf9\u4e8e\u8fdc\u7a0b\u8c03\u7528\u7684\u54cd\u5e94\u901f\u5ea6\u3001\u541e\u5410\u91cf\u3001\u7f51\u7edc\u5e26\u5bbd\u6d88\u8017\u7b49\u540c\u6837\u4e5f\u8d77\u7740\u81f3\u5173\u91cd\u8981\u7684\u4f5c\u7528\uff0c\u662f\u6211\u4eec\u63d0\u5347\u5206\u5e03\u5f0f\u7cfb\u7edf\u6027\u80fd\u7684\u6700\u5173\u952e\u56e0\u7d20\u4e4b\u4e00\u3002 \u5728dubbo RPC\u4e2d\uff0c\u540c\u65f6\u652f\u6301\u591a\u79cd\u5e8f\u5217\u5316\u65b9\u5f0f\uff0c\u4f8b\u5982\uff1a dubbo\u5e8f\u5217\u5316\uff1a\u963f\u91cc\u5c1a\u672a\u5f00\u53d1\u6210\u719f\u7684\u9ad8\u6548java\u5e8f\u5217\u5316\u5b9e\u73b0\uff0c\u963f\u91cc\u4e0d\u5efa\u8bae\u5728\u751f\u4ea7\u73af\u5883\u4f7f\u7528\u5b83 hessian2\u5e8f\u5217\u5316\uff1ahessian\u662f\u4e00\u79cd\u8de8\u8bed\u8a00\u7684\u9ad8\u6548\u4e8c\u8fdb\u5236\u5e8f\u5217\u5316\u65b9\u5f0f\u3002\u4f46\u8fd9\u91cc\u5b9e\u9645\u4e0d\u662f\u539f\u751f\u7684hessian2\u5e8f\u5217\u5316\uff0c\u800c\u662f\u963f\u91cc\u4fee\u6539\u8fc7\u7684hessian lite\uff0c\u5b83\u662fdubbo RPC\u9ed8\u8ba4\u542f\u7528\u7684\u5e8f\u5217\u5316\u65b9\u5f0f json\u5e8f\u5217\u5316\uff1a\u76ee\u524d\u6709\u4e24\u79cd\u5b9e\u73b0\uff0c\u4e00\u79cd\u662f\u91c7\u7528\u7684\u963f\u91cc\u7684fastjson\u5e93\uff0c\u53e6\u4e00\u79cd\u662f\u91c7\u7528dubbo\u4e2d\u81ea\u5df1\u5b9e\u73b0\u7684\u7b80\u5355json\u5e93\uff0c\u4f46\u5176\u5b9e\u73b0\u90fd\u4e0d\u662f\u7279\u522b\u6210\u719f\uff0c\u800c\u4e14json\u8fd9\u79cd\u6587\u672c\u5e8f\u5217\u5316\u6027\u80fd\u4e00\u822c\u4e0d\u5982\u4e0a\u9762\u4e24\u79cd\u4e8c\u8fdb\u5236\u5e8f\u5217\u5316\u3002 java\u5e8f\u5217\u5316\uff1a\u4e3b\u8981\u662f\u91c7\u7528JDK\u81ea\u5e26\u7684Java\u5e8f\u5217\u5316\u5b9e\u73b0\uff0c\u6027\u80fd\u5f88\u4e0d\u7406\u60f3\u3002 \u5728\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd9\u56db\u79cd\u4e3b\u8981\u5e8f\u5217\u5316\u65b9\u5f0f\u7684\u6027\u80fd\u4ece\u4e0a\u5230\u4e0b\u4f9d\u6b21\u9012\u51cf\u3002\u5bf9\u4e8edubbo RPC\u8fd9\u79cd\u8ffd\u6c42\u9ad8\u6027\u80fd\u7684\u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f\u6765\u8bf4\uff0c\u5b9e\u9645\u4e0a\u53ea\u67091\u30012\u4e24\u79cd\u9ad8\u6548\u5e8f\u5217\u5316\u65b9\u5f0f\u6bd4\u8f83\u822c\u914d\uff0c\u800c\u7b2c1\u4e2adubbo\u5e8f\u5217\u5316\u7531\u4e8e\u8fd8\u4e0d\u6210\u719f\uff0c\u6240\u4ee5\u5b9e\u9645\u53ea\u5269\u4e0b2\u53ef\u7528\uff0c\u6240\u4ee5dubbo RPC\u9ed8\u8ba4\u91c7\u7528hessian2\u5e8f\u5217\u5316\u3002 \u4f46hessian\u662f\u4e00\u4e2a\u6bd4\u8f83\u8001\u7684\u5e8f\u5217\u5316\u5b9e\u73b0\u4e86\uff0c\u800c\u4e14\u5b83\u662f\u8de8\u8bed\u8a00\u7684\uff0c\u6240\u4ee5\u4e0d\u662f\u5355\u72ec\u9488\u5bf9java\u8fdb\u884c\u4f18\u5316\u7684\u3002\u800cdubbo RPC\u5b9e\u9645\u4e0a\u5b8c\u5168\u662f\u4e00\u79cdJava to Java\u7684\u8fdc\u7a0b\u8c03\u7528\uff0c\u5176\u5b9e\u6ca1\u6709\u5fc5\u8981\u91c7\u7528\u8de8\u8bed\u8a00\u7684\u5e8f\u5217\u5316\u65b9\u5f0f\uff08\u5f53\u7136\u80af\u5b9a\u4e5f\u4e0d\u6392\u65a5\u8de8\u8bed\u8a00\u7684\u5e8f\u5217\u5316\uff09\u3002 \u6700\u8fd1\u51e0\u5e74\uff0c\u5404\u79cd\u65b0\u7684\u9ad8\u6548\u5e8f\u5217\u5316\u65b9\u5f0f\u5c42\u51fa\u4e0d\u7a77\uff0c\u4e0d\u65ad\u5237\u65b0\u5e8f\u5217\u5316\u6027\u80fd\u7684\u4e0a\u9650\uff0c\u6700\u5178\u578b\u7684\u5305\u62ec\uff1a \u4e13\u95e8\u9488\u5bf9Java\u8bed\u8a00\u7684\uff1aKryo\uff0cFST\u7b49\u7b49 \u8de8\u8bed\u8a00\u7684\uff1aProtostuff\uff0cProtoBuf\uff0cThrift\uff0cAvro\uff0cMsgPack\u7b49\u7b49 \u8fd9\u4e9b\u5e8f\u5217\u5316\u65b9\u5f0f\u7684\u6027\u80fd\u591a\u6570\u90fd\u663e\u8457\u4f18\u4e8ehessian2\uff08\u751a\u81f3\u5305\u62ec\u5c1a\u672a\u6210\u719f\u7684dubbo\u5e8f\u5217\u5316\uff09\u3002 \u6709\u9274\u4e8e\u6b64\uff0c\u6211\u4eec\u4e3adubbo\u5f15\u5165Kryo\u548cFST\u8fd9\u4e24\u79cd\u9ad8\u6548Java\u5e8f\u5217\u5316\u5b9e\u73b0\uff0c\u6765\u9010\u6b65\u53d6\u4ee3hessian2\u3002 \u5176\u4e2d\uff0cKryo\u662f\u4e00\u79cd\u975e\u5e38\u6210\u719f\u7684\u5e8f\u5217\u5316\u5b9e\u73b0\uff0c\u5df2\u7ecf\u5728Twitter\u3001Groupon\u3001Yahoo\u4ee5\u53ca\u591a\u4e2a\u8457\u540d\u5f00\u6e90\u9879\u76ee\uff08\u5982Hive\u3001Storm\uff09\u4e2d\u5e7f\u6cdb\u7684\u4f7f\u7528\u3002\u800cFST\u662f\u4e00\u79cd\u8f83\u65b0\u7684\u5e8f\u5217\u5316\u5b9e\u73b0\uff0c\u76ee\u524d\u8fd8\u7f3a\u4e4f\u8db3\u591f\u591a\u7684\u6210\u719f\u4f7f\u7528\u6848\u4f8b\uff0c\u4f46\u6211\u8ba4\u4e3a\u5b83\u8fd8\u662f\u975e\u5e38\u6709\u524d\u9014\u7684\u3002 \u5728\u9762\u5411\u751f\u4ea7\u73af\u5883\u7684\u5e94\u7528\u4e2d\uff0c\u6211\u5efa\u8bae\u76ee\u524d\u66f4\u4f18\u5148\u9009\u62e9Kryo\u3002","title":"\u5e8f\u5217\u5316\u6f2b\u8c08"},{"location":"user/serialization/#kryofst","text":"\u4f7f\u7528Kryo\u548cFST\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5728dubbo RPC\u7684XML\u914d\u7f6e\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u5c5e\u6027\u5373\u53ef\uff1a dubbo:protocol name= dubbo serialization= kryo / dubbo:protocol name= dubbo serialization= fst /","title":"\u542f\u7528Kryo\u548cFST"},{"location":"user/serialization/#_3","text":"\u8981\u8ba9Kryo\u548cFST\u5b8c\u5168\u53d1\u6325\u51fa\u9ad8\u6027\u80fd\uff0c\u6700\u597d\u5c06\u90a3\u4e9b\u9700\u8981\u88ab\u5e8f\u5217\u5316\u7684\u7c7b\u6ce8\u518c\u5230dubbo\u7cfb\u7edf\u4e2d\uff0c\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u5982\u4e0b\u56de\u8c03\u63a5\u53e3\uff1a public class SerializationOptimizerImpl implements SerializationOptimizer { public Collection Class getSerializableClasses() { List Class classes = new LinkedList Class (); classes.add(BidRequest.class); classes.add(BidResponse.class); classes.add(Device.class); classes.add(Geo.class); classes.add(Impression.class); classes.add(SeatBid.class); return classes; } } \u7136\u540e\u5728XML\u914d\u7f6e\u4e2d\u6dfb\u52a0\uff1a dubbo:protocol name= dubbo serialization= kryo optimizer= org.apache.dubbo.demo.SerializationOptimizerImpl / \u5728\u6ce8\u518c\u8fd9\u4e9b\u7c7b\u540e\uff0c\u5e8f\u5217\u5316\u7684\u6027\u80fd\u53ef\u80fd\u88ab\u5927\u5927\u63d0\u5347\uff0c\u7279\u522b\u9488\u5bf9\u5c0f\u6570\u91cf\u7684\u5d4c\u5957\u5bf9\u8c61\u7684\u65f6\u5019\u3002 \u5f53\u7136\uff0c\u5728\u5bf9\u4e00\u4e2a\u7c7b\u505a\u5e8f\u5217\u5316\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u8fd8\u7ea7\u8054\u5f15\u7528\u5230\u5f88\u591a\u7c7b\uff0c\u6bd4\u5982Java\u96c6\u5408\u7c7b\u3002\u9488\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5df2\u7ecf\u81ea\u52a8\u5c06JDK\u4e2d\u7684\u5e38\u7528\u7c7b\u8fdb\u884c\u4e86\u6ce8\u518c\uff0c\u6240\u4ee5\u4f60\u4e0d\u9700\u8981\u91cd\u590d\u6ce8\u518c\u5b83\u4eec\uff08\u5f53\u7136\u4f60\u91cd\u590d\u6ce8\u518c\u4e86\u4e5f\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\uff09\uff0c\u5305\u62ec\uff1a GregorianCalendar InvocationHandler BigDecimal BigInteger Pattern BitSet URI UUID HashMap ArrayList LinkedList HashSet TreeSet Hashtable Date Calendar ConcurrentHashMap SimpleDateFormat Vector BitSet StringBuffer StringBuilder Object Object[] String[] byte[] char[] int[] float[] double[] \u7531\u4e8e\u6ce8\u518c\u88ab\u5e8f\u5217\u5316\u7684\u7c7b\u4ec5\u4ec5\u662f\u51fa\u4e8e\u6027\u80fd\u4f18\u5316\u7684\u76ee\u7684\uff0c\u6240\u4ee5\u5373\u4f7f\u4f60\u5fd8\u8bb0\u6ce8\u518c\u67d0\u4e9b\u7c7b\u4e5f\u6ca1\u6709\u5173\u7cfb\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5373\u4f7f\u4e0d\u6ce8\u518c\u4efb\u4f55\u7c7b\uff0cKryo\u548cFST\u7684\u6027\u80fd\u4f9d\u7136\u666e\u904d\u4f18\u4e8ehessian\u548cdubbo\u5e8f\u5217\u5316\u3002 \u5f53\u7136\uff0c\u6709\u4eba\u53ef\u80fd\u4f1a\u95ee\u4e3a\u4ec0\u4e48\u4e0d\u7528\u914d\u7f6e\u6587\u4ef6\u6765\u6ce8\u518c\u8fd9\u4e9b\u7c7b\uff1f\u8fd9\u662f\u56e0\u4e3a\u8981\u6ce8\u518c\u7684\u7c7b\u5f80\u5f80\u6570\u91cf\u8f83\u591a\uff0c\u5bfc\u81f4\u914d\u7f6e\u6587\u4ef6\u5197\u957f\uff1b\u800c\u4e14\u5728\u6ca1\u6709\u597d\u7684IDE\u652f\u6301\u7684\u60c5\u51b5\u4e0b\uff0c\u914d\u7f6e\u6587\u4ef6\u7684\u7f16\u5199\u548c\u91cd\u6784\u90fd\u6bd4java\u7c7b\u9ebb\u70e6\u5f97\u591a\uff1b\u6700\u540e\uff0c\u8fd9\u4e9b\u6ce8\u518c\u7684\u7c7b\u4e00\u822c\u662f\u4e0d\u9700\u8981\u5728\u9879\u76ee\u7f16\u8bd1\u6253\u5305\u540e\u8fd8\u9700\u8981\u505a\u52a8\u6001\u4fee\u6539\u7684\u3002 \u53e6\u5916\uff0c\u6709\u4eba\u4e5f\u4f1a\u89c9\u5f97\u624b\u5de5\u6ce8\u518c\u88ab\u5e8f\u5217\u5316\u7684\u7c7b\u662f\u4e00\u79cd\u76f8\u5bf9\u7e41\u7410\u7684\u5de5\u4f5c\uff0c\u662f\u4e0d\u662f\u53ef\u4ee5\u7528annotation\u6765\u6807\u6ce8\uff0c\u7136\u540e\u7cfb\u7edf\u6765\u81ea\u52a8\u53d1\u73b0\u5e76\u6ce8\u518c\u3002\u4f46\u8fd9\u91ccannotation\u7684\u5c40\u9650\u662f\uff0c\u5b83\u53ea\u80fd\u7528\u6765\u6807\u6ce8\u4f60\u53ef\u4ee5\u4fee\u6539\u7684\u7c7b\uff0c\u800c\u5f88\u591a\u5e8f\u5217\u5316\u4e2d\u5f15\u7528\u7684\u7c7b\u5f88\u53ef\u80fd\u662f\u4f60\u6ca1\u6cd5\u505a\u4fee\u6539\u7684\uff08\u6bd4\u5982\u7b2c\u4e09\u65b9\u5e93\u6216\u8005JDK\u7cfb\u7edf\u7c7b\u6216\u8005\u5176\u4ed6\u9879\u76ee\u7684\u7c7b\uff09\u3002\u53e6\u5916\uff0c\u6dfb\u52a0annotation\u6bd5\u7adf\u7a0d\u5fae\u7684\u201c\u6c61\u67d3\u201d\u4e86\u4e00\u4e0b\u4ee3\u7801\uff0c\u4f7f\u5e94\u7528\u4ee3\u7801\u5bf9\u6846\u67b6\u589e\u52a0\u4e86\u4e00\u70b9\u70b9\u7684\u4f9d\u8d56\u6027\u3002 \u9664\u4e86annotation\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u8003\u8651\u7528\u5176\u5b83\u65b9\u5f0f\u6765\u81ea\u52a8\u6ce8\u518c\u88ab\u5e8f\u5217\u5316\u7684\u7c7b\uff0c\u4f8b\u5982\u626b\u63cf\u7c7b\u8def\u5f84\uff0c\u81ea\u52a8\u53d1\u73b0\u5b9e\u73b0Serializable\u63a5\u53e3\uff08\u751a\u81f3\u5305\u62ecExternalizable\uff09\u7684\u7c7b\u5e76\u5c06\u5b83\u4eec\u6ce8\u518c\u3002\u5f53\u7136\uff0c\u6211\u4eec\u77e5\u9053\u7c7b\u8def\u5f84\u4e0a\u80fd\u627e\u5230Serializable\u7c7b\u53ef\u80fd\u662f\u975e\u5e38\u591a\u7684\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u8003\u8651\u7528package\u524d\u7f00\u4e4b\u7c7b\u6765\u4e00\u5b9a\u7a0b\u5ea6\u9650\u5b9a\u626b\u63cf\u8303\u56f4\u3002 \u5f53\u7136\uff0c\u5728\u81ea\u52a8\u6ce8\u518c\u673a\u5236\u4e2d\uff0c\u7279\u522b\u9700\u8981\u8003\u8651\u5982\u4f55\u4fdd\u8bc1\u670d\u52a1\u63d0\u4f9b\u7aef\u548c\u6d88\u8d39\u7aef\u90fd\u4ee5\u540c\u6837\u7684\u987a\u5e8f\uff08\u6216\u8005ID\uff09\u6765\u6ce8\u518c\u7c7b\uff0c\u907f\u514d\u9519\u4f4d\uff0c\u6bd5\u7adf\u4e24\u7aef\u53ef\u88ab\u53d1\u73b0\u7136\u540e\u6ce8\u518c\u7684\u7c7b\u7684\u6570\u91cf\u53ef\u80fd\u90fd\u662f\u4e0d\u4e00\u6837\u7684\u3002","title":"\u6ce8\u518c\u88ab\u5e8f\u5217\u5316\u7c7b"},{"location":"user/serialization/#serializable","text":"\u5982\u679c\u88ab\u5e8f\u5217\u5316\u7684\u7c7b\u4e2d\u4e0d\u5305\u542b\u65e0\u53c2\u7684\u6784\u9020\u51fd\u6570\uff0c\u5219\u5728Kryo\u7684\u5e8f\u5217\u5316\u4e2d\uff0c\u6027\u80fd\u5c06\u4f1a\u5927\u6253\u6298\u6263\uff0c\u56e0\u4e3a\u6b64\u65f6\u6211\u4eec\u5728\u5e95\u5c42\u5c06\u7528Java\u7684\u5e8f\u5217\u5316\u6765\u900f\u660e\u7684\u53d6\u4ee3Kryo\u5e8f\u5217\u5316\u3002\u6240\u4ee5\uff0c\u5c3d\u53ef\u80fd\u4e3a\u6bcf\u4e00\u4e2a\u88ab\u5e8f\u5217\u5316\u7684\u7c7b\u6dfb\u52a0\u65e0\u53c2\u6784\u9020\u51fd\u6570\u662f\u4e00\u79cd\u6700\u4f73\u5b9e\u8df5\uff08\u5f53\u7136\u4e00\u4e2ajava\u7c7b\u5982\u679c\u4e0d\u81ea\u5b9a\u4e49\u6784\u9020\u51fd\u6570\uff0c\u9ed8\u8ba4\u5c31\u6709\u65e0\u53c2\u6784\u9020\u51fd\u6570\uff09\u3002 \u53e6\u5916\uff0cKryo\u548cFST\u672c\u6765\u90fd\u4e0d\u9700\u8981\u88ab\u5e8f\u5217\u5316\u90fd\u7c7b\u5b9e\u73b0Serializable\u63a5\u53e3\uff0c\u4f46\u6211\u4eec\u8fd8\u662f\u5efa\u8bae\u6bcf\u4e2a\u88ab\u5e8f\u5217\u5316\u7c7b\u90fd\u53bb\u5b9e\u73b0\u5b83\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ef\u4ee5\u4fdd\u6301\u548cJava\u5e8f\u5217\u5316\u4ee5\u53cadubbo\u5e8f\u5217\u5316\u7684\u517c\u5bb9\u6027\uff0c\u53e6\u5916\u4e5f\u4f7f\u6211\u4eec\u672a\u6765\u91c7\u7528\u4e0a\u8ff0\u67d0\u4e9b\u81ea\u52a8\u6ce8\u518c\u673a\u5236\u5e26\u6765\u53ef\u80fd\u3002","title":"\u65e0\u53c2\u6784\u9020\u51fd\u6570\u548cSerializable\u63a5\u53e3"},{"location":"user/serialization/#_4","text":"\u672c\u6587\u6211\u4eec\u4e3b\u8981\u8ba8\u8bba\u7684\u662f\u5e8f\u5217\u5316\uff0c\u4f46\u5728\u505a\u6027\u80fd\u5206\u6790\u548c\u6d4b\u8bd5\u7684\u65f6\u5019\u6211\u4eec\u5e76\u4e0d\u5355\u72ec\u5904\u7406\u6bcf\u79cd\u5e8f\u5217\u5316\u65b9\u5f0f\uff0c\u800c\u662f\u628a\u5b83\u4eec\u653e\u5230dubbo RPC\u4e2d\u52a0\u4ee5\u5bf9\u6bd4\uff0c\u56e0\u4e3a\u8fd9\u6837\u66f4\u6709\u73b0\u5b9e\u610f\u4e49\u3002","title":"\u5e8f\u5217\u5316\u6027\u80fd\u5206\u6790\u4e0e\u6d4b\u8bd5"},{"location":"user/serialization/#_5","text":"\u7c97\u7565\u5982\u4e0b\uff1a \u4e24\u53f0\u72ec\u7acb\u670d\u52a1\u5668 4\u6838Intel(R) Xeon(R) CPU E5-2603 0 @ 1.80GHz 8G\u5185\u5b58 \u865a\u62df\u673a\u4e4b\u95f4\u7f51\u7edc\u901a\u8fc7\u767e\u5146\u4ea4\u6362\u673a CentOS 5 JDK 7 Tomcat 7 JVM\u53c2\u6570-server -Xms1g -Xmx1g -XX:PermSize=64M -XX:+UseConcMarkSweepGC \u5f53\u7136\u8fd9\u4e2a\u6d4b\u8bd5\u73af\u5883\u8f83\u6709\u5c40\u9650\uff0c\u6545\u5f53\u524d\u6d4b\u8bd5\u7ed3\u679c\u672a\u5fc5\u6709\u975e\u5e38\u6743\u5a01\u7684\u4ee3\u8868\u6027\u3002","title":"\u6d4b\u8bd5\u73af\u5883"},{"location":"user/serialization/#_6","text":"\u548cdubbo\u81ea\u8eab\u7684\u57fa\u51c6\u6d4b\u8bd5\u4fdd\u6301\u63a5\u8fd1\uff1a 10\u4e2a\u5e76\u53d1\u5ba2\u6237\u7aef\u6301\u7eed\u4e0d\u65ad\u53d1\u51fa\u8bf7\u6c42\uff1a \u4f20\u5165\u5d4c\u5957\u590d\u6742\u5bf9\u8c61\uff08\u4f46\u5355\u4e2a\u6570\u636e\u91cf\u5f88\u5c0f\uff09\uff0c\u4e0d\u505a\u4efb\u4f55\u5904\u7406\uff0c\u539f\u6837\u8fd4\u56de \u4f20\u516550K\u5b57\u7b26\u4e32\uff0c\u4e0d\u505a\u4efb\u4f55\u5904\u7406\uff0c\u539f\u6837\u8fd4\u56de\uff08TODO\uff1a\u7ed3\u679c\u5c1a\u672a\u5217\u51fa\uff09 \u8fdb\u884c5\u5206\u949f\u6027\u80fd\u6d4b\u8bd5\u3002\uff08\u5f15\u7528dubbo\u81ea\u8eab\u6d4b\u8bd5\u7684\u8003\u8651\uff1a\u201c\u4e3b\u8981\u8003\u5bdf\u5e8f\u5217\u5316\u548c\u7f51\u7edcIO\u7684\u6027\u80fd\uff0c\u56e0\u6b64\u670d\u52a1\u7aef\u65e0\u4efb\u4f55\u4e1a\u52a1\u903b\u8f91\u3002\u53d610\u5e76\u53d1\u662f\u8003\u8651\u5230http\u534f\u8bae\u5728\u9ad8\u5e76\u53d1\u4e0b\u5bf9CPU\u7684\u4f7f\u7528\u7387\u8f83\u9ad8\u53ef\u80fd\u4f1a\u5148\u6253\u5230\u74f6\u9888\u3002\u201d\uff09","title":"\u6d4b\u8bd5\u811a\u672c"},{"location":"user/serialization/#dubbo-rpc","text":"\u5e8f\u5217\u5316\u751f\u6210\u5b57\u8282\u7801\u7684\u5927\u5c0f\u662f\u4e00\u4e2a\u6bd4\u8f83\u6709\u786e\u5b9a\u6027\u7684\u6307\u6807\uff0c\u5b83\u51b3\u5b9a\u4e86\u8fdc\u7a0b\u8c03\u7528\u7684\u7f51\u7edc\u4f20\u8f93\u65f6\u95f4\u548c\u5e26\u5bbd\u5360\u7528\u3002 \u9488\u5bf9\u590d\u6742\u5bf9\u8c61\u7684\u7ed3\u679c\u5982\u4e0b\uff08\u6570\u503c\u8d8a\u5c0f\u8d8a\u597d\uff09\uff1a \u5e8f\u5217\u5316\u5b9e\u73b0 \u8bf7\u6c42\u5b57\u8282\u6570 \u54cd\u5e94\u5b57\u8282\u6570 Kryo 272 90 FST 288 96 Dubbo Serialization 430 186 Hessian 546 329 FastJson 461 218 Json 657 409 Java Serialization 963 630","title":"Dubbo RPC\u4e2d\u4e0d\u540c\u5e8f\u5217\u5316\u751f\u6210\u5b57\u8282\u5927\u5c0f\u6bd4\u8f83"},{"location":"user/serialization/#dubbo-rpc_1","text":"\u8fdc\u7a0b\u8c03\u7528\u65b9\u5f0f \u5e73\u5747\u54cd\u5e94\u65f6\u95f4 \u5e73\u5747TPS\uff08\u6bcf\u79d2\u4e8b\u52a1\u6570\uff09 REST: Jetty + JSON 7.806 1280 REST: Jetty + JSON + GZIP TODO TODO REST: Jetty + XML TODO TODO REST: Jetty + XML + GZIP TODO TODO REST: Tomcat + JSON 2.082 4796 REST: Netty + JSON 2.182 4576 Dubbo: FST 1.211 8244 Dubbo: kyro 1.182 8444 Dubbo: dubbo serialization 1.43 6982 Dubbo: hessian2 1.49 6701 Dubbo: fastjson 1.572 6352","title":"Dubbo RPC\u4e2d\u4e0d\u540c\u5e8f\u5217\u5316\u54cd\u5e94\u65f6\u95f4\u548c\u541e\u5410\u91cf\u5bf9\u6bd4"},{"location":"user/serialization/#_7","text":"\u5c31\u76ee\u524d\u7ed3\u679c\u800c\u8a00\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e0d\u7ba1\u4ece\u751f\u6210\u5b57\u8282\u7684\u5927\u5c0f\uff0c\u8fd8\u662f\u5e73\u5747\u54cd\u5e94\u65f6\u95f4\u548c\u5e73\u5747TPS\uff0cKryo\u548cFST\u76f8\u6bd4Dubbo RPC\u4e2d\u539f\u6709\u7684\u5e8f\u5217\u5316\u65b9\u5f0f\u90fd\u6709\u975e\u5e38\u663e\u8457\u7684\u6539\u8fdb\u3002","title":"\u6d4b\u8bd5\u603b\u7ed3"},{"location":"user/serialization/#_8","text":"\u672a\u6765\uff0c\u5f53Kryo\u6216\u8005FST\u5728dubbo\u4e2d\u5f53\u5e94\u7528\u8db3\u591f\u6210\u719f\u4e4b\u540e\uff0c\u6211\u4eec\u5f88\u53ef\u80fd\u4f1a\u5c06dubbo RPC\u7684\u9ed8\u8ba4\u5e8f\u5217\u5316\u4ecehessian2\u6539\u4e3a\u5b83\u4eec\u4e2d\u95f4\u7684\u67d0\u4e00\u4e2a\u3002","title":"\u672a\u6765"},{"location":"user/simple-monitor/","text":"\u76d1\u63a7\u4e2d\u5fc3\u4e5f\u662f\u4e00\u4e2a\u6807\u51c6\u7684Dubbo\u670d\u52a1\uff0c\u53ef\u4ee5\u901a\u8fc7\u6ce8\u518c\u4e2d\u5fc3\u53d1\u73b0\uff0c\u4e5f\u53ef\u4ee5\u76f4\u8fde\u3002 \u7b80\u6613\u6ce8\u518c\u4e2d\u5fc3\u5b89\u88c5 \u66b4\u9732\u4e00\u4e2a\u7b80\u5355\u76d1\u63a7\u4e2d\u5fc3\u670d\u52a1\u5230\u6ce8\u518c\u4e2d\u5fc3: (\u5982\u679c\u662f\u7528\u5b89\u88c5\u5305\uff0c\u4e0d\u9700\u8981\u81ea\u5df1\u5199\u8fd9\u4e2a\u914d\u7f6e\uff0c\u5982\u679c\u662f\u81ea\u5df1\u5b9e\u73b0\u76d1\u63a7\u4e2d\u5fc3\uff0c\u5219\u9700\u8981) ```xml ``` \u901a\u8fc7\u6ce8\u518c\u4e2d\u5fc3\u53d1\u73b0\u76d1\u63a7\u4e2d\u5fc3\u670d\u52a1: xml dubbo:monitor protocol=\"registry\" / \u6216 dubbo.properties xml dubbo.monitor.protocol=registry \u66b4\u9732\u4e00\u4e2a\u7b80\u5355\u76d1\u63a7\u4e2d\u5fc3\u670d\u52a1\uff0c\u4f46\u4e0d\u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3: (\u5982\u679c\u662f\u7528\u5b89\u88c5\u5305\uff0c\u4e0d\u9700\u8981\u81ea\u5df1\u5199\u8fd9\u4e2a\u914d\u7f6e\uff0c\u5982\u679c\u662f\u81ea\u5df1\u5b9e\u73b0\u76d1\u63a7\u4e2d\u5fc3\uff0c\u5219\u9700\u8981) ```xml ``` \u76f4\u8fde\u76d1\u63a7\u4e2d\u5fc3\u670d\u52a1 xml dubbo:monitor address=\"dubbo://127.0.0.1:7070/org.apache.dubbo.monitor.MonitorService\" / \u6216\uff1a sh dubbo:monitor address=\"127.0.0.1:7070\" / \u6216\uff1a dubbo.properties sh dubbo.monitor.address=127.0.0.1:7070","title":"Simple monitor"},{"location":"user/configuration/","text":"\u914d\u7f6e","title":"\u914d\u7f6e"},{"location":"user/configuration/#_1","text":"","title":"\u914d\u7f6e"},{"location":"user/configuration/annotation/","text":"\u6ce8\u89e3\u914d\u7f6e \u9700\u8981 2.6.3 \u53ca\u4ee5\u4e0a\u7248\u672c\u652f\u6301 \u70b9\u6b64\u67e5\u770b \u5b8c\u6574\u793a\u4f8b \u670d\u52a1\u63d0\u4f9b\u65b9 Service \u6ce8\u89e3\u66b4\u9732\u670d\u52a1 @Service public class AnnotationServiceImpl implements AnnotationService { @Override public String sayHello(String name) { return annotation: hello, + name; } } \u589e\u52a0\u5e94\u7528\u5171\u4eab\u914d\u7f6e # dubbo-provider.properties dubbo.application.name=annotation-provider dubbo.registry.address=zookeeper://127.0.0.1:2181 dubbo.protocol.name=dubbo dubbo.protocol.port=20880 \u6307\u5b9aSpring\u626b\u63cf\u8def\u5f84 @Configuration @EnableDubbo(scanBasePackages = org.apache.dubbo.samples.simple.annotation.impl ) @PropertySource( classpath:/spring/dubbo-provider.properties ) static public class ProviderConfiguration { } \u670d\u52a1\u6d88\u8d39\u65b9 Reference \u6ce8\u89e3\u5f15\u7528\u670d\u52a1 @Component( annotationAction ) public class AnnotationAction { @Reference private AnnotationService annotationService; public String doSayHello(String name) { return annotationService.sayHello(name); } } \u589e\u52a0\u5e94\u7528\u5171\u4eab\u914d\u7f6e # dubbo-consumer.properties dubbo.application.name=annotation-consumer dubbo.registry.address=zookeeper://127.0.0.1:2181 dubbo.consumer.timeout=3000 \u6307\u5b9aSpring\u626b\u63cf\u8def\u5f84 @Configuration @EnableDubbo(scanBasePackages = org.apache.dubbo.samples.simple.annotation.action ) @PropertySource( classpath:/spring/dubbo-consumer.properties ) @ComponentScan(value = { org.apache.dubbo.samples.simple.annotation.action }) static public class ConsumerConfiguration { } \u8c03\u7528\u670d\u52a1 public static void main(String[] args) throws Exception { AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ConsumerConfiguration.class); context.start(); final AnnotationAction annotationAction = (AnnotationAction) context.getBean( annotationAction ); String hello = annotationAction.doSayHello( world ); }","title":"\u52a8\u6001\u914d\u7f6e\u4e2d\u5fc3"},{"location":"user/configuration/annotation/#_1","text":"\u9700\u8981 2.6.3 \u53ca\u4ee5\u4e0a\u7248\u672c\u652f\u6301 \u70b9\u6b64\u67e5\u770b \u5b8c\u6574\u793a\u4f8b","title":"\u6ce8\u89e3\u914d\u7f6e"},{"location":"user/configuration/annotation/#_2","text":"","title":"\u670d\u52a1\u63d0\u4f9b\u65b9"},{"location":"user/configuration/annotation/#service","text":"@Service public class AnnotationServiceImpl implements AnnotationService { @Override public String sayHello(String name) { return annotation: hello, + name; } }","title":"Service\u6ce8\u89e3\u66b4\u9732\u670d\u52a1"},{"location":"user/configuration/annotation/#_3","text":"# dubbo-provider.properties dubbo.application.name=annotation-provider dubbo.registry.address=zookeeper://127.0.0.1:2181 dubbo.protocol.name=dubbo dubbo.protocol.port=20880","title":"\u589e\u52a0\u5e94\u7528\u5171\u4eab\u914d\u7f6e"},{"location":"user/configuration/annotation/#spring","text":"@Configuration @EnableDubbo(scanBasePackages = org.apache.dubbo.samples.simple.annotation.impl ) @PropertySource( classpath:/spring/dubbo-provider.properties ) static public class ProviderConfiguration { }","title":"\u6307\u5b9aSpring\u626b\u63cf\u8def\u5f84"},{"location":"user/configuration/annotation/#_4","text":"","title":"\u670d\u52a1\u6d88\u8d39\u65b9"},{"location":"user/configuration/annotation/#reference","text":"@Component( annotationAction ) public class AnnotationAction { @Reference private AnnotationService annotationService; public String doSayHello(String name) { return annotationService.sayHello(name); } }","title":"Reference\u6ce8\u89e3\u5f15\u7528\u670d\u52a1"},{"location":"user/configuration/annotation/#_5","text":"# dubbo-consumer.properties dubbo.application.name=annotation-consumer dubbo.registry.address=zookeeper://127.0.0.1:2181 dubbo.consumer.timeout=3000","title":"\u589e\u52a0\u5e94\u7528\u5171\u4eab\u914d\u7f6e"},{"location":"user/configuration/annotation/#spring_1","text":"@Configuration @EnableDubbo(scanBasePackages = org.apache.dubbo.samples.simple.annotation.action ) @PropertySource( classpath:/spring/dubbo-consumer.properties ) @ComponentScan(value = { org.apache.dubbo.samples.simple.annotation.action }) static public class ConsumerConfiguration { }","title":"\u6307\u5b9aSpring\u626b\u63cf\u8def\u5f84"},{"location":"user/configuration/annotation/#_6","text":"public static void main(String[] args) throws Exception { AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ConsumerConfiguration.class); context.start(); final AnnotationAction annotationAction = (AnnotationAction) context.getBean( annotationAction ); String hello = annotationAction.doSayHello( world ); }","title":"\u8c03\u7528\u670d\u52a1"},{"location":"user/configuration/api/","text":"API \u914d\u7f6e API \u5c5e\u6027\u4e0e\u914d\u7f6e\u9879\u4e00\u5bf9\u4e00\uff0c\u5404\u5c5e\u6027\u542b\u4e49\uff0c\u8bf7\u53c2\u89c1\uff1a \u914d\u7f6e\u53c2\u8003\u624b\u518c \uff0c\u6bd4\u5982\uff1a ApplicationConfig.setName(\"xxx\") \u5bf9\u5e94 dubbo:application name=\"xxx\" / [^1] \u670d\u52a1\u63d0\u4f9b\u8005 import org.apache.dubbo.rpc.config.ApplicationConfig; import org.apache.dubbo.rpc.config.RegistryConfig; import org.apache.dubbo.rpc.config.ProviderConfig; import org.apache.dubbo.rpc.config.ServiceConfig; import com.xxx.XxxService; import com.xxx.XxxServiceImpl; // \u670d\u52a1\u5b9e\u73b0 XxxService xxxService = new XxxServiceImpl(); // \u5f53\u524d\u5e94\u7528\u914d\u7f6e ApplicationConfig application = new ApplicationConfig(); application.setName( xxx ); // \u8fde\u63a5\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e RegistryConfig registry = new RegistryConfig(); registry.setAddress( 10.20.130.230:9090 ); registry.setUsername( aaa ); registry.setPassword( bbb ); // \u670d\u52a1\u63d0\u4f9b\u8005\u534f\u8bae\u914d\u7f6e ProtocolConfig protocol = new ProtocolConfig(); protocol.setName( dubbo ); protocol.setPort(12345); protocol.setThreads(200); // \u6ce8\u610f\uff1aServiceConfig\u4e3a\u91cd\u5bf9\u8c61\uff0c\u5185\u90e8\u5c01\u88c5\u4e86\u4e0e\u6ce8\u518c\u4e2d\u5fc3\u7684\u8fde\u63a5\uff0c\u4ee5\u53ca\u5f00\u542f\u670d\u52a1\u7aef\u53e3 // \u670d\u52a1\u63d0\u4f9b\u8005\u66b4\u9732\u670d\u52a1\u914d\u7f6e ServiceConfig XxxService service = new ServiceConfig XxxService (); // \u6b64\u5b9e\u4f8b\u5f88\u91cd\uff0c\u5c01\u88c5\u4e86\u4e0e\u6ce8\u518c\u4e2d\u5fc3\u7684\u8fde\u63a5\uff0c\u8bf7\u81ea\u884c\u7f13\u5b58\uff0c\u5426\u5219\u53ef\u80fd\u9020\u6210\u5185\u5b58\u548c\u8fde\u63a5\u6cc4\u6f0f service.setApplication(application); service.setRegistry(registry); // \u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u53ef\u4ee5\u7528setRegistries() service.setProtocol(protocol); // \u591a\u4e2a\u534f\u8bae\u53ef\u4ee5\u7528setProtocols() service.setInterface(XxxService.class); service.setRef(xxxService); service.setVersion( 1.0.0 ); // \u66b4\u9732\u53ca\u6ce8\u518c\u670d\u52a1 service.export(); \u670d\u52a1\u6d88\u8d39\u8005 import org.apache.dubbo.rpc.config.ApplicationConfig; import org.apache.dubbo.rpc.config.RegistryConfig; import org.apache.dubbo.rpc.config.ConsumerConfig; import org.apache.dubbo.rpc.config.ReferenceConfig; import com.xxx.XxxService; // \u5f53\u524d\u5e94\u7528\u914d\u7f6e ApplicationConfig application = new ApplicationConfig(); application.setName( yyy ); // \u8fde\u63a5\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e RegistryConfig registry = new RegistryConfig(); registry.setAddress( 10.20.130.230:9090 ); registry.setUsername( aaa ); registry.setPassword( bbb ); // \u6ce8\u610f\uff1aReferenceConfig\u4e3a\u91cd\u5bf9\u8c61\uff0c\u5185\u90e8\u5c01\u88c5\u4e86\u4e0e\u6ce8\u518c\u4e2d\u5fc3\u7684\u8fde\u63a5\uff0c\u4ee5\u53ca\u4e0e\u670d\u52a1\u63d0\u4f9b\u65b9\u7684\u8fde\u63a5 // \u5f15\u7528\u8fdc\u7a0b\u670d\u52a1 ReferenceConfig XxxService reference = new ReferenceConfig XxxService (); // \u6b64\u5b9e\u4f8b\u5f88\u91cd\uff0c\u5c01\u88c5\u4e86\u4e0e\u6ce8\u518c\u4e2d\u5fc3\u7684\u8fde\u63a5\u4ee5\u53ca\u4e0e\u63d0\u4f9b\u8005\u7684\u8fde\u63a5\uff0c\u8bf7\u81ea\u884c\u7f13\u5b58\uff0c\u5426\u5219\u53ef\u80fd\u9020\u6210\u5185\u5b58\u548c\u8fde\u63a5\u6cc4\u6f0f reference.setApplication(application); reference.setRegistry(registry); // \u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u53ef\u4ee5\u7528setRegistries() reference.setInterface(XxxService.class); reference.setVersion( 1.0.0 ); // \u548c\u672c\u5730bean\u4e00\u6837\u4f7f\u7528xxxService XxxService xxxService = reference.get(); // \u6ce8\u610f\uff1a\u6b64\u4ee3\u7406\u5bf9\u8c61\u5185\u90e8\u5c01\u88c5\u4e86\u6240\u6709\u901a\u8baf\u7ec6\u8282\uff0c\u5bf9\u8c61\u8f83\u91cd\uff0c\u8bf7\u7f13\u5b58\u590d\u7528 \u7279\u6b8a\u573a\u666f \u4e0b\u9762\u53ea\u5217\u51fa\u4e0d\u540c\u7684\u5730\u65b9\uff0c\u5176\u5b83\u53c2\u89c1\u4e0a\u9762\u7684\u5199\u6cd5 \u65b9\u6cd5\u7ea7\u8bbe\u7f6e ... // \u65b9\u6cd5\u7ea7\u914d\u7f6e List MethodConfig methods = new ArrayList MethodConfig (); MethodConfig method = new MethodConfig(); method.setName( createXxx ); method.setTimeout(10000); method.setRetries(0); methods.add(method); // \u5f15\u7528\u8fdc\u7a0b\u670d\u52a1 ReferenceConfig XxxService reference = new ReferenceConfig XxxService (); // \u6b64\u5b9e\u4f8b\u5f88\u91cd\uff0c\u5c01\u88c5\u4e86\u4e0e\u6ce8\u518c\u4e2d\u5fc3\u7684\u8fde\u63a5\u4ee5\u53ca\u4e0e\u63d0\u4f9b\u8005\u7684\u8fde\u63a5\uff0c\u8bf7\u81ea\u884c\u7f13\u5b58\uff0c\u5426\u5219\u53ef\u80fd\u9020\u6210\u5185\u5b58\u548c\u8fde\u63a5\u6cc4\u6f0f ... reference.setMethods(methods); // \u8bbe\u7f6e\u65b9\u6cd5\u7ea7\u914d\u7f6e ... \u70b9\u5bf9\u70b9\u76f4\u8fde ... ReferenceConfig XxxService reference = new ReferenceConfig XxxService (); // \u6b64\u5b9e\u4f8b\u5f88\u91cd\uff0c\u5c01\u88c5\u4e86\u4e0e\u6ce8\u518c\u4e2d\u5fc3\u7684\u8fde\u63a5\u4ee5\u53ca\u4e0e\u63d0\u4f9b\u8005\u7684\u8fde\u63a5\uff0c\u8bf7\u81ea\u884c\u7f13\u5b58\uff0c\u5426\u5219\u53ef\u80fd\u9020\u6210\u5185\u5b58\u548c\u8fde\u63a5\u6cc4\u6f0f // \u5982\u679c\u70b9\u5bf9\u70b9\u76f4\u8fde\uff0c\u53ef\u4ee5\u7528reference.setUrl()\u6307\u5b9a\u76ee\u6807\u5730\u5740\uff0c\u8bbe\u7f6eurl\u540e\u5c06\u7ed5\u8fc7\u6ce8\u518c\u4e2d\u5fc3\uff0c // \u5176\u4e2d\uff0c\u534f\u8bae\u5bf9\u5e94provider.setProtocol()\u7684\u503c\uff0c\u7aef\u53e3\u5bf9\u5e94provider.setPort()\u7684\u503c\uff0c // \u8def\u5f84\u5bf9\u5e94service.setPath()\u7684\u503c\uff0c\u5982\u679c\u672a\u8bbe\u7f6epath\uff0c\u7f3a\u7701path\u4e3a\u63a5\u53e3\u540d reference.setUrl( dubbo://10.20.130.230:20880/com.xxx.XxxService ); ... [^1]: API\u4f7f\u7528\u8303\u56f4\u8bf4\u660e\uff1aAPI \u4ec5\u7528\u4e8e OpenAPI, ESB, Test, Mock \u7b49\u7cfb\u7edf\u96c6\u6210\uff0c\u666e\u901a\u670d\u52a1\u63d0\u4f9b\u65b9\u6216\u6d88\u8d39\u65b9\uff0c\u8bf7\u91c7\u7528 XML \u914d\u7f6e \u65b9\u5f0f\u4f7f\u7528 Dubbo","title":"API \u914d\u7f6e"},{"location":"user/configuration/api/#api","text":"API \u5c5e\u6027\u4e0e\u914d\u7f6e\u9879\u4e00\u5bf9\u4e00\uff0c\u5404\u5c5e\u6027\u542b\u4e49\uff0c\u8bf7\u53c2\u89c1\uff1a \u914d\u7f6e\u53c2\u8003\u624b\u518c \uff0c\u6bd4\u5982\uff1a ApplicationConfig.setName(\"xxx\") \u5bf9\u5e94 dubbo:application name=\"xxx\" / [^1]","title":"API \u914d\u7f6e"},{"location":"user/configuration/api/#_1","text":"import org.apache.dubbo.rpc.config.ApplicationConfig; import org.apache.dubbo.rpc.config.RegistryConfig; import org.apache.dubbo.rpc.config.ProviderConfig; import org.apache.dubbo.rpc.config.ServiceConfig; import com.xxx.XxxService; import com.xxx.XxxServiceImpl; // \u670d\u52a1\u5b9e\u73b0 XxxService xxxService = new XxxServiceImpl(); // \u5f53\u524d\u5e94\u7528\u914d\u7f6e ApplicationConfig application = new ApplicationConfig(); application.setName( xxx ); // \u8fde\u63a5\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e RegistryConfig registry = new RegistryConfig(); registry.setAddress( 10.20.130.230:9090 ); registry.setUsername( aaa ); registry.setPassword( bbb ); // \u670d\u52a1\u63d0\u4f9b\u8005\u534f\u8bae\u914d\u7f6e ProtocolConfig protocol = new ProtocolConfig(); protocol.setName( dubbo ); protocol.setPort(12345); protocol.setThreads(200); // \u6ce8\u610f\uff1aServiceConfig\u4e3a\u91cd\u5bf9\u8c61\uff0c\u5185\u90e8\u5c01\u88c5\u4e86\u4e0e\u6ce8\u518c\u4e2d\u5fc3\u7684\u8fde\u63a5\uff0c\u4ee5\u53ca\u5f00\u542f\u670d\u52a1\u7aef\u53e3 // \u670d\u52a1\u63d0\u4f9b\u8005\u66b4\u9732\u670d\u52a1\u914d\u7f6e ServiceConfig XxxService service = new ServiceConfig XxxService (); // \u6b64\u5b9e\u4f8b\u5f88\u91cd\uff0c\u5c01\u88c5\u4e86\u4e0e\u6ce8\u518c\u4e2d\u5fc3\u7684\u8fde\u63a5\uff0c\u8bf7\u81ea\u884c\u7f13\u5b58\uff0c\u5426\u5219\u53ef\u80fd\u9020\u6210\u5185\u5b58\u548c\u8fde\u63a5\u6cc4\u6f0f service.setApplication(application); service.setRegistry(registry); // \u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u53ef\u4ee5\u7528setRegistries() service.setProtocol(protocol); // \u591a\u4e2a\u534f\u8bae\u53ef\u4ee5\u7528setProtocols() service.setInterface(XxxService.class); service.setRef(xxxService); service.setVersion( 1.0.0 ); // \u66b4\u9732\u53ca\u6ce8\u518c\u670d\u52a1 service.export();","title":"\u670d\u52a1\u63d0\u4f9b\u8005"},{"location":"user/configuration/api/#_2","text":"import org.apache.dubbo.rpc.config.ApplicationConfig; import org.apache.dubbo.rpc.config.RegistryConfig; import org.apache.dubbo.rpc.config.ConsumerConfig; import org.apache.dubbo.rpc.config.ReferenceConfig; import com.xxx.XxxService; // \u5f53\u524d\u5e94\u7528\u914d\u7f6e ApplicationConfig application = new ApplicationConfig(); application.setName( yyy ); // \u8fde\u63a5\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e RegistryConfig registry = new RegistryConfig(); registry.setAddress( 10.20.130.230:9090 ); registry.setUsername( aaa ); registry.setPassword( bbb ); // \u6ce8\u610f\uff1aReferenceConfig\u4e3a\u91cd\u5bf9\u8c61\uff0c\u5185\u90e8\u5c01\u88c5\u4e86\u4e0e\u6ce8\u518c\u4e2d\u5fc3\u7684\u8fde\u63a5\uff0c\u4ee5\u53ca\u4e0e\u670d\u52a1\u63d0\u4f9b\u65b9\u7684\u8fde\u63a5 // \u5f15\u7528\u8fdc\u7a0b\u670d\u52a1 ReferenceConfig XxxService reference = new ReferenceConfig XxxService (); // \u6b64\u5b9e\u4f8b\u5f88\u91cd\uff0c\u5c01\u88c5\u4e86\u4e0e\u6ce8\u518c\u4e2d\u5fc3\u7684\u8fde\u63a5\u4ee5\u53ca\u4e0e\u63d0\u4f9b\u8005\u7684\u8fde\u63a5\uff0c\u8bf7\u81ea\u884c\u7f13\u5b58\uff0c\u5426\u5219\u53ef\u80fd\u9020\u6210\u5185\u5b58\u548c\u8fde\u63a5\u6cc4\u6f0f reference.setApplication(application); reference.setRegistry(registry); // \u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u53ef\u4ee5\u7528setRegistries() reference.setInterface(XxxService.class); reference.setVersion( 1.0.0 ); // \u548c\u672c\u5730bean\u4e00\u6837\u4f7f\u7528xxxService XxxService xxxService = reference.get(); // \u6ce8\u610f\uff1a\u6b64\u4ee3\u7406\u5bf9\u8c61\u5185\u90e8\u5c01\u88c5\u4e86\u6240\u6709\u901a\u8baf\u7ec6\u8282\uff0c\u5bf9\u8c61\u8f83\u91cd\uff0c\u8bf7\u7f13\u5b58\u590d\u7528","title":"\u670d\u52a1\u6d88\u8d39\u8005"},{"location":"user/configuration/api/#_3","text":"\u4e0b\u9762\u53ea\u5217\u51fa\u4e0d\u540c\u7684\u5730\u65b9\uff0c\u5176\u5b83\u53c2\u89c1\u4e0a\u9762\u7684\u5199\u6cd5","title":"\u7279\u6b8a\u573a\u666f"},{"location":"user/configuration/api/#_4","text":"... // \u65b9\u6cd5\u7ea7\u914d\u7f6e List MethodConfig methods = new ArrayList MethodConfig (); MethodConfig method = new MethodConfig(); method.setName( createXxx ); method.setTimeout(10000); method.setRetries(0); methods.add(method); // \u5f15\u7528\u8fdc\u7a0b\u670d\u52a1 ReferenceConfig XxxService reference = new ReferenceConfig XxxService (); // \u6b64\u5b9e\u4f8b\u5f88\u91cd\uff0c\u5c01\u88c5\u4e86\u4e0e\u6ce8\u518c\u4e2d\u5fc3\u7684\u8fde\u63a5\u4ee5\u53ca\u4e0e\u63d0\u4f9b\u8005\u7684\u8fde\u63a5\uff0c\u8bf7\u81ea\u884c\u7f13\u5b58\uff0c\u5426\u5219\u53ef\u80fd\u9020\u6210\u5185\u5b58\u548c\u8fde\u63a5\u6cc4\u6f0f ... reference.setMethods(methods); // \u8bbe\u7f6e\u65b9\u6cd5\u7ea7\u914d\u7f6e ...","title":"\u65b9\u6cd5\u7ea7\u8bbe\u7f6e"},{"location":"user/configuration/api/#_5","text":"... ReferenceConfig XxxService reference = new ReferenceConfig XxxService (); // \u6b64\u5b9e\u4f8b\u5f88\u91cd\uff0c\u5c01\u88c5\u4e86\u4e0e\u6ce8\u518c\u4e2d\u5fc3\u7684\u8fde\u63a5\u4ee5\u53ca\u4e0e\u63d0\u4f9b\u8005\u7684\u8fde\u63a5\uff0c\u8bf7\u81ea\u884c\u7f13\u5b58\uff0c\u5426\u5219\u53ef\u80fd\u9020\u6210\u5185\u5b58\u548c\u8fde\u63a5\u6cc4\u6f0f // \u5982\u679c\u70b9\u5bf9\u70b9\u76f4\u8fde\uff0c\u53ef\u4ee5\u7528reference.setUrl()\u6307\u5b9a\u76ee\u6807\u5730\u5740\uff0c\u8bbe\u7f6eurl\u540e\u5c06\u7ed5\u8fc7\u6ce8\u518c\u4e2d\u5fc3\uff0c // \u5176\u4e2d\uff0c\u534f\u8bae\u5bf9\u5e94provider.setProtocol()\u7684\u503c\uff0c\u7aef\u53e3\u5bf9\u5e94provider.setPort()\u7684\u503c\uff0c // \u8def\u5f84\u5bf9\u5e94service.setPath()\u7684\u503c\uff0c\u5982\u679c\u672a\u8bbe\u7f6epath\uff0c\u7f3a\u7701path\u4e3a\u63a5\u53e3\u540d reference.setUrl( dubbo://10.20.130.230:20880/com.xxx.XxxService ); ... [^1]: API\u4f7f\u7528\u8303\u56f4\u8bf4\u660e\uff1aAPI \u4ec5\u7528\u4e8e OpenAPI, ESB, Test, Mock \u7b49\u7cfb\u7edf\u96c6\u6210\uff0c\u666e\u901a\u670d\u52a1\u63d0\u4f9b\u65b9\u6216\u6d88\u8d39\u65b9\uff0c\u8bf7\u91c7\u7528 XML \u914d\u7f6e \u65b9\u5f0f\u4f7f\u7528 Dubbo","title":"\u70b9\u5bf9\u70b9\u76f4\u8fde"},{"location":"user/configuration/config-center/","text":"\u52a8\u6001\u914d\u7f6e\u4e2d\u5fc3 \u914d\u7f6e\u4e2d\u5fc3\uff08v2.7.0\uff09\u5728Dubbo\u4e2d\u627f\u62c5\u4e24\u4e2a\u804c\u8d23\uff1a \u5916\u90e8\u5316\u914d\u7f6e\u3002\u542f\u52a8\u914d\u7f6e\u7684\u96c6\u4e2d\u5f0f\u5b58\u50a8 \uff08\u7b80\u5355\u7406\u89e3\u4e3adubbo.properties\u7684\u5916\u90e8\u5316\u5b58\u50a8\uff09\u3002 \u670d\u52a1\u6cbb\u7406\u3002\u670d\u52a1\u6cbb\u7406\u89c4\u5219\u7684\u5b58\u50a8\u4e0e\u901a\u77e5\u3002 \u542f\u7528\u52a8\u6001\u914d\u7f6e\uff08\u4ee5Zookeeper\u4e3a\u4f8b\uff0c\u53ef\u67e5\u770b \u52a8\u6001\u914d\u7f6e\u914d\u7f6e\u9879\u8be6\u89e3 \uff09\uff1a dubbo:config-center address= zookeeper://127.0.0.1:2181 / \u6216\u8005 dubbo.config-center.address=zookeeper://127.0.0.1:2181 \u6216\u8005 ConfigCenterConfig configCenter = new ConfigCenterConfig(); configCenter.setAddress( zookeeper://127.0.0.1:2181 ); \u4e3a\u4e86\u517c\u5bb92.6.x\u7248\u672c\u914d\u7f6e\uff0c\u5728\u4f7f\u7528Zookeeper\u4f5c\u4e3a\u6ce8\u518c\u4e2d\u5fc3\uff0c\u4e14\u6ca1\u6709\u663e\u793a\u914d\u7f6e\u914d\u7f6e\u4e2d\u5fc3\u7684\u60c5\u51b5\u4e0b\uff0cDubbo\u6846\u67b6\u4f1a\u9ed8\u8ba4\u5c06\u6b64Zookeeper\u7528\u4f5c\u914d\u7f6e\u4e2d\u5fc3\uff0c\u4f46\u5c06\u53ea\u4f5c\u670d\u52a1\u6cbb\u7406\u7528\u9014\u3002 \u5916\u90e8\u5316\u914d\u7f6e \u5916\u90e8\u5316\u914d\u7f6e\u76ee\u7684\u4e4b\u4e00\u662f\u5b9e\u73b0\u914d\u7f6e\u7684\u96c6\u4e2d\u5f0f\u7ba1\u7406\uff0c\u8fd9\u90e8\u5206\u4e1a\u754c\u5df2\u7ecf\u6709\u5f88\u591a\u6210\u719f\u7684\u4e13\u4e1a\u914d\u7f6e\u7cfb\u7edf\u5982Apollo, Nacos\u7b49\uff0cDubbo\u6240\u505a\u7684\u4e3b\u8981\u662f\u4fdd\u8bc1\u80fd\u914d\u5408\u8fd9\u4e9b\u7cfb\u7edf\u6b63\u5e38\u5de5\u4f5c\u3002 \u5916\u90e8\u5316\u914d\u7f6e\u548c\u5176\u4ed6\u672c\u5730\u914d\u7f6e\u5728\u5185\u5bb9\u548c\u683c\u5f0f\u4e0a\u5e76\u65e0\u533a\u522b\uff0c\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a dubbo.properties \u7684\u5916\u90e8\u5316\u5b58\u50a8\uff0c\u914d\u7f6e\u4e2d\u5fc3\u66f4\u9002\u5408\u5c06\u4e00\u4e9b\u516c\u5171\u914d\u7f6e\u5982\u6ce8\u518c\u4e2d\u5fc3\u3001\u5143\u6570\u636e\u4e2d\u5fc3\u914d\u7f6e\u7b49\u62bd\u53d6\u4ee5\u4fbf\u505a\u96c6\u4e2d\u7ba1\u7406\u3002 # \u5c06\u6ce8\u518c\u4e2d\u5fc3\u5730\u5740\u3001\u5143\u6570\u636e\u4e2d\u5fc3\u5730\u5740\u7b49\u914d\u7f6e\u96c6\u4e2d\u7ba1\u7406\uff0c\u53ef\u4ee5\u505a\u5230\u7edf\u4e00\u73af\u5883\u3001\u51cf\u5c11\u5f00\u53d1\u4fa7\u611f\u77e5\u3002 dubbo.registry.address=zookeeper://127.0.0.1:2181 dubbo.registry.simplified=true dubbo.metadata-report.address=zookeeper://127.0.0.1:2181 dubbo.protocol.name=dubbo dubbo.protocol.port=20880 dubbo.application.qos.port=33333 \u4f18\u5148\u7ea7 \u5916\u90e8\u5316\u914d\u7f6e\u9ed8\u8ba4\u8f83\u672c\u5730\u914d\u7f6e\u6709\u66f4\u9ad8\u7684\u4f18\u5148\u7ea7\uff0c\u56e0\u6b64\u8fd9\u91cc\u914d\u7f6e\u7684\u5185\u5bb9\u4f1a\u8986\u76d6\u672c\u5730\u914d\u7f6e\u503c\uff0c\u5173\u4e8e \u5404\u914d\u7f6e\u5f62\u5f0f\u95f4\u7684\u8986\u76d6\u5173\u7cfb \u6709\u5355\u72ec\u4e00\u7ae0\u8bf4\u660e\uff0c\u4f60\u4e5f\u53ef\u901a\u8fc7\u4ee5\u4e0b\u9009\u9879\u8c03\u6574\u914d\u7f6e\u4e2d\u5fc3\u7684\u4f18\u5148\u7ea7\uff1a properties -Ddubbo.config-center.highest-priority=false \u4f5c\u7528\u57df \u5916\u90e8\u5316\u914d\u7f6e\u6709\u5168\u5c40\u548c\u5e94\u7528\u4e24\u4e2a\u7ea7\u522b\uff0c\u5168\u5c40\u914d\u7f6e\u662f\u6240\u6709\u5e94\u7528\u5171\u4eab\u7684\uff0c\u5e94\u7528\u7ea7\u914d\u7f6e\u662f\u7531\u6bcf\u4e2a\u5e94\u7528\u81ea\u5df1\u7ef4\u62a4\u4e14\u53ea\u5bf9\u81ea\u8eab\u53ef\u89c1\u7684\u3002 \u5f53\u524d\u5df2\u652f\u6301\u7684\u6269\u5c55\u5b9e\u73b0\u6709Zookeeper\u3001Apollo\u3002 Zookeeper dubbo:config-center address= zookeeper://127.0.0.1:2181 / \u9ed8\u8ba4\u6240\u6709\u7684\u914d\u7f6e\u90fd\u5b58\u50a8\u5728 /dubbo/config \u8282\u70b9\uff0c\u5177\u4f53\u8282\u70b9\u7ed3\u6784\u56fe\u5982\u4e0b\uff1a namespace\uff0c\u7528\u4e8e\u4e0d\u540c\u914d\u7f6e\u7684\u73af\u5883\u9694\u79bb\u3002 config\uff0cDubbo\u7ea6\u5b9a\u7684\u56fa\u5b9a\u8282\u70b9\uff0c\u4e0d\u53ef\u66f4\u6539\uff0c\u6240\u6709\u914d\u7f6e\u548c\u670d\u52a1\u6cbb\u7406\u89c4\u5219\u90fd\u5b58\u50a8\u5728\u6b64\u8282\u70b9\u4e0b\u3002 dubbo/application\uff0c\u5206\u522b\u7528\u6765\u9694\u79bb\u5168\u5c40\u914d\u7f6e\u3001\u5e94\u7528\u7ea7\u522b\u914d\u7f6e\uff1adubbo\u662f\u9ed8\u8ba4group\u503c\uff0capplication\u5bf9\u5e94\u5e94\u7528\u540d dubbo.properties\uff0c\u6b64\u8282\u70b9\u7684node value\u5b58\u50a8\u5177\u4f53\u914d\u7f6e\u5185\u5bb9 Apollo dubbo:config-center protocol= apollo address= 127.0.0.1:2181 / Apollo\u4e2d\u7684\u4e00\u4e2a\u6838\u5fc3\u6982\u5ff5\u662f\u547d\u540d\u7a7a\u95f4 - namespace\uff08\u548c\u4e0a\u9762zookeeper\u7684namespace\u6982\u5ff5\u4e0d\u540c\uff09\uff0c\u5728\u8fd9\u91cc\u5168\u5c40\u548c\u5e94\u7528\u7ea7\u522b\u914d\u7f6e\u5c31\u662f\u901a\u8fc7\u547d\u540d\u7a7a\u95f4\u6765\u533a\u5206\u7684\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cDubbo\u4f1a\u4ece\u540d\u53eb dubbo \uff08\u7531\u4e8e Apollo \u4e0d\u652f\u6301\u7279\u6b8a\u540e\u7f00 .properties \uff09\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u8bfb\u53d6\u5168\u5c40\u914d\u7f6e\uff08 dubbo:config-center namespace=\"your namespace\" \uff09 \u7531\u4e8e Apollo \u4e5f\u9ed8\u8ba4\u5c06\u4f1a\u5728 dubbo namespace \u4e2d\u5b58\u50a8\u670d\u52a1\u6cbb\u7406\u89c4\u5219\uff08\u5982\u8def\u7531\u89c4\u5219\uff09\uff0c\u5efa\u8bae\u901a\u8fc7\u5355\u72ec\u914d\u7f6e group \u5c06\u670d\u52a1\u6cbb\u7406\u548c\u914d\u7f6e\u6587\u4ef6\u6258\u7ba1\u5206\u79bb\u5f00\uff0c\u4ee5 XML \u914d\u7f6e\u65b9\u5f0f\u4e3a\u4f8b\uff1a dubbo namespace= governance group = dubbo / \u8fd9\u91cc\uff0c\u670d\u52a1\u6cbb\u7406\u89c4\u5219\u5c06\u5b58\u50a8\u5728 governance namespace\uff0c\u800c\u914d\u7f6e\u6587\u4ef6\u5c06\u5b58\u50a8\u5728 dubbo namespace\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5173\u4e8e\u6587\u4ef6\u914d\u7f6e\u6258\u7ba1\uff0c\u76f8\u5f53\u4e8e\u662f\u628a dubbo.properties \u914d\u7f6e\u6587\u4ef6\u7684\u5185\u5bb9\u5b58\u50a8\u5728\u4e86 Apollo \u4e2d\uff0c\u5e94\u7528\u901a\u8fc7\u5173\u8054\u5171\u4eab\u7684 dubbo namespace \u7ee7\u627f\u516c\u5171\u914d\u7f6e, \u5e94\u7528\u4e5f\u53ef\u4ee5\u6309\u7167 Apollo \u7684\u505a\u6cd5\u6765\u8986\u76d6\u4e2a\u522b\u914d\u7f6e\u9879\u3002 \u81ea\u5df1\u52a0\u8f7d\u5916\u90e8\u5316\u914d\u7f6e \u6240\u8c13Dubbo\u5bf9\u914d\u7f6e\u4e2d\u5fc3\u7684\u652f\u6301\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u628a .properties \u4ece\u8fdc\u7a0b\u62c9\u53d6\u5230\u672c\u5730\uff0c\u7136\u540e\u548c\u672c\u5730\u7684\u914d\u7f6e\u505a\u4e00\u6b21\u878d\u5408\u3002\u7406\u8bba\u4e0a\u53ea\u8981Dubbo\u6846\u67b6\u80fd\u62ff\u5230\u9700\u8981\u7684\u914d\u7f6e\u5c31\u53ef\u4ee5\u6b63\u5e38\u7684\u542f\u52a8\uff0c\u5b83\u5e76\u4e0d\u5173\u5fc3\u8fd9\u4e9b\u914d\u7f6e\u662f\u81ea\u5df1\u52a0\u8f7d\u5230\u7684\u8fd8\u662f\u5e94\u7528\u76f4\u63a5\u585e\u7ed9\u5b83\u7684\uff0c\u6240\u4ee5Dubbo\u8fd8\u63d0\u4f9b\u4e86\u4ee5\u4e0bAPI\uff0c\u8ba9\u7528\u6237\u5c06\u81ea\u5df1\u7ec4\u7ec7\u597d\u7684\u914d\u7f6e\u585e\u7ed9Dubbo\u6846\u67b6\uff08\u914d\u7f6e\u52a0\u8f7d\u7684\u8fc7\u7a0b\u662f\u7528\u6237\u8981\u5b8c\u6210\u7684\uff09\uff0c\u8fd9\u6837Dubbo\u6846\u67b6\u5c31\u4e0d\u518d\u76f4\u63a5\u548cApollo\u6216Zookeeper\u505a\u8bfb\u53d6\u914d\u7f6e\u4ea4\u4e92\u3002 // \u5e94\u7528\u81ea\u884c\u52a0\u8f7d\u914d\u7f6e Map String, String dubboConfigurations = new HashMap (); dubboConfigurations.put( dubbo.registry.address , zookeeper://127.0.0.1:2181 ); dubboConfigurations.put( dubbo.registry.simplified , true ); //\u5c06\u7ec4\u7ec7\u597d\u7684\u914d\u7f6e\u585e\u7ed9Dubbo\u6846\u67b6 ConfigCenterConfig configCenter = new ConfigCenterConfig(); configCenter.setExternalConfig(dubboConfigurations); \u670d\u52a1\u6cbb\u7406 Zookeeper \u9ed8\u8ba4\u8282\u70b9\u7ed3\u6784\uff1a namespace\uff0c\u7528\u4e8e\u4e0d\u540c\u914d\u7f6e\u7684\u73af\u5883\u9694\u79bb\u3002 config\uff0cDubbo\u7ea6\u5b9a\u7684\u56fa\u5b9a\u8282\u70b9\uff0c\u4e0d\u53ef\u66f4\u6539\uff0c\u6240\u6709\u914d\u7f6e\u548c\u670d\u52a1\u6cbb\u7406\u89c4\u5219\u90fd\u5b58\u50a8\u5728\u6b64\u8282\u70b9\u4e0b\u3002 dubbo\uff0c\u6240\u6709\u670d\u52a1\u6cbb\u7406\u89c4\u5219\u90fd\u662f\u5168\u5c40\u6027\u7684\uff0cdubbo\u4e3a\u9ed8\u8ba4\u8282\u70b9 configurators/tag-router/condition-router\uff0c\u4e0d\u540c\u7684\u670d\u52a1\u6cbb\u7406\u89c4\u5219\u7c7b\u578b\uff0cnode value\u5b58\u50a8\u5177\u4f53\u89c4\u5219\u5185\u5bb9 Apollo \u6240\u6709\u7684\u670d\u52a1\u6cbb\u7406\u89c4\u5219\u90fd\u662f\u5168\u5c40\u6027\u7684\uff0c\u9ed8\u8ba4\u4ece\u516c\u5171\u547d\u540d\u7a7a\u95f4 dubbo \u8bfb\u53d6\u548c\u8ba2\u9605\uff1a \u4e0d\u540c\u7684\u89c4\u5219\u4ee5\u4e0d\u540c\u7684key\u540e\u7f00\u533a\u5206\uff1a configurators\uff0c \u8986\u76d6\u89c4\u5219 tag-router\uff0c \u6807\u7b7e\u8def\u7531 condition-router\uff0c \u6761\u4ef6\u8def\u7531","title":"\u52a8\u6001\u914d\u7f6e\u4e2d\u5fc3"},{"location":"user/configuration/config-center/#_1","text":"\u914d\u7f6e\u4e2d\u5fc3\uff08v2.7.0\uff09\u5728Dubbo\u4e2d\u627f\u62c5\u4e24\u4e2a\u804c\u8d23\uff1a \u5916\u90e8\u5316\u914d\u7f6e\u3002\u542f\u52a8\u914d\u7f6e\u7684\u96c6\u4e2d\u5f0f\u5b58\u50a8 \uff08\u7b80\u5355\u7406\u89e3\u4e3adubbo.properties\u7684\u5916\u90e8\u5316\u5b58\u50a8\uff09\u3002 \u670d\u52a1\u6cbb\u7406\u3002\u670d\u52a1\u6cbb\u7406\u89c4\u5219\u7684\u5b58\u50a8\u4e0e\u901a\u77e5\u3002 \u542f\u7528\u52a8\u6001\u914d\u7f6e\uff08\u4ee5Zookeeper\u4e3a\u4f8b\uff0c\u53ef\u67e5\u770b \u52a8\u6001\u914d\u7f6e\u914d\u7f6e\u9879\u8be6\u89e3 \uff09\uff1a dubbo:config-center address= zookeeper://127.0.0.1:2181 / \u6216\u8005 dubbo.config-center.address=zookeeper://127.0.0.1:2181 \u6216\u8005 ConfigCenterConfig configCenter = new ConfigCenterConfig(); configCenter.setAddress( zookeeper://127.0.0.1:2181 ); \u4e3a\u4e86\u517c\u5bb92.6.x\u7248\u672c\u914d\u7f6e\uff0c\u5728\u4f7f\u7528Zookeeper\u4f5c\u4e3a\u6ce8\u518c\u4e2d\u5fc3\uff0c\u4e14\u6ca1\u6709\u663e\u793a\u914d\u7f6e\u914d\u7f6e\u4e2d\u5fc3\u7684\u60c5\u51b5\u4e0b\uff0cDubbo\u6846\u67b6\u4f1a\u9ed8\u8ba4\u5c06\u6b64Zookeeper\u7528\u4f5c\u914d\u7f6e\u4e2d\u5fc3\uff0c\u4f46\u5c06\u53ea\u4f5c\u670d\u52a1\u6cbb\u7406\u7528\u9014\u3002","title":"\u52a8\u6001\u914d\u7f6e\u4e2d\u5fc3"},{"location":"user/configuration/config-center/#_2","text":"\u5916\u90e8\u5316\u914d\u7f6e\u76ee\u7684\u4e4b\u4e00\u662f\u5b9e\u73b0\u914d\u7f6e\u7684\u96c6\u4e2d\u5f0f\u7ba1\u7406\uff0c\u8fd9\u90e8\u5206\u4e1a\u754c\u5df2\u7ecf\u6709\u5f88\u591a\u6210\u719f\u7684\u4e13\u4e1a\u914d\u7f6e\u7cfb\u7edf\u5982Apollo, Nacos\u7b49\uff0cDubbo\u6240\u505a\u7684\u4e3b\u8981\u662f\u4fdd\u8bc1\u80fd\u914d\u5408\u8fd9\u4e9b\u7cfb\u7edf\u6b63\u5e38\u5de5\u4f5c\u3002 \u5916\u90e8\u5316\u914d\u7f6e\u548c\u5176\u4ed6\u672c\u5730\u914d\u7f6e\u5728\u5185\u5bb9\u548c\u683c\u5f0f\u4e0a\u5e76\u65e0\u533a\u522b\uff0c\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a dubbo.properties \u7684\u5916\u90e8\u5316\u5b58\u50a8\uff0c\u914d\u7f6e\u4e2d\u5fc3\u66f4\u9002\u5408\u5c06\u4e00\u4e9b\u516c\u5171\u914d\u7f6e\u5982\u6ce8\u518c\u4e2d\u5fc3\u3001\u5143\u6570\u636e\u4e2d\u5fc3\u914d\u7f6e\u7b49\u62bd\u53d6\u4ee5\u4fbf\u505a\u96c6\u4e2d\u7ba1\u7406\u3002 # \u5c06\u6ce8\u518c\u4e2d\u5fc3\u5730\u5740\u3001\u5143\u6570\u636e\u4e2d\u5fc3\u5730\u5740\u7b49\u914d\u7f6e\u96c6\u4e2d\u7ba1\u7406\uff0c\u53ef\u4ee5\u505a\u5230\u7edf\u4e00\u73af\u5883\u3001\u51cf\u5c11\u5f00\u53d1\u4fa7\u611f\u77e5\u3002 dubbo.registry.address=zookeeper://127.0.0.1:2181 dubbo.registry.simplified=true dubbo.metadata-report.address=zookeeper://127.0.0.1:2181 dubbo.protocol.name=dubbo dubbo.protocol.port=20880 dubbo.application.qos.port=33333 \u4f18\u5148\u7ea7 \u5916\u90e8\u5316\u914d\u7f6e\u9ed8\u8ba4\u8f83\u672c\u5730\u914d\u7f6e\u6709\u66f4\u9ad8\u7684\u4f18\u5148\u7ea7\uff0c\u56e0\u6b64\u8fd9\u91cc\u914d\u7f6e\u7684\u5185\u5bb9\u4f1a\u8986\u76d6\u672c\u5730\u914d\u7f6e\u503c\uff0c\u5173\u4e8e \u5404\u914d\u7f6e\u5f62\u5f0f\u95f4\u7684\u8986\u76d6\u5173\u7cfb \u6709\u5355\u72ec\u4e00\u7ae0\u8bf4\u660e\uff0c\u4f60\u4e5f\u53ef\u901a\u8fc7\u4ee5\u4e0b\u9009\u9879\u8c03\u6574\u914d\u7f6e\u4e2d\u5fc3\u7684\u4f18\u5148\u7ea7\uff1a properties -Ddubbo.config-center.highest-priority=false \u4f5c\u7528\u57df \u5916\u90e8\u5316\u914d\u7f6e\u6709\u5168\u5c40\u548c\u5e94\u7528\u4e24\u4e2a\u7ea7\u522b\uff0c\u5168\u5c40\u914d\u7f6e\u662f\u6240\u6709\u5e94\u7528\u5171\u4eab\u7684\uff0c\u5e94\u7528\u7ea7\u914d\u7f6e\u662f\u7531\u6bcf\u4e2a\u5e94\u7528\u81ea\u5df1\u7ef4\u62a4\u4e14\u53ea\u5bf9\u81ea\u8eab\u53ef\u89c1\u7684\u3002 \u5f53\u524d\u5df2\u652f\u6301\u7684\u6269\u5c55\u5b9e\u73b0\u6709Zookeeper\u3001Apollo\u3002","title":"\u5916\u90e8\u5316\u914d\u7f6e"},{"location":"user/configuration/config-center/#zookeeper","text":"dubbo:config-center address= zookeeper://127.0.0.1:2181 / \u9ed8\u8ba4\u6240\u6709\u7684\u914d\u7f6e\u90fd\u5b58\u50a8\u5728 /dubbo/config \u8282\u70b9\uff0c\u5177\u4f53\u8282\u70b9\u7ed3\u6784\u56fe\u5982\u4e0b\uff1a namespace\uff0c\u7528\u4e8e\u4e0d\u540c\u914d\u7f6e\u7684\u73af\u5883\u9694\u79bb\u3002 config\uff0cDubbo\u7ea6\u5b9a\u7684\u56fa\u5b9a\u8282\u70b9\uff0c\u4e0d\u53ef\u66f4\u6539\uff0c\u6240\u6709\u914d\u7f6e\u548c\u670d\u52a1\u6cbb\u7406\u89c4\u5219\u90fd\u5b58\u50a8\u5728\u6b64\u8282\u70b9\u4e0b\u3002 dubbo/application\uff0c\u5206\u522b\u7528\u6765\u9694\u79bb\u5168\u5c40\u914d\u7f6e\u3001\u5e94\u7528\u7ea7\u522b\u914d\u7f6e\uff1adubbo\u662f\u9ed8\u8ba4group\u503c\uff0capplication\u5bf9\u5e94\u5e94\u7528\u540d dubbo.properties\uff0c\u6b64\u8282\u70b9\u7684node value\u5b58\u50a8\u5177\u4f53\u914d\u7f6e\u5185\u5bb9","title":"Zookeeper"},{"location":"user/configuration/config-center/#apollo","text":"dubbo:config-center protocol= apollo address= 127.0.0.1:2181 / Apollo\u4e2d\u7684\u4e00\u4e2a\u6838\u5fc3\u6982\u5ff5\u662f\u547d\u540d\u7a7a\u95f4 - namespace\uff08\u548c\u4e0a\u9762zookeeper\u7684namespace\u6982\u5ff5\u4e0d\u540c\uff09\uff0c\u5728\u8fd9\u91cc\u5168\u5c40\u548c\u5e94\u7528\u7ea7\u522b\u914d\u7f6e\u5c31\u662f\u901a\u8fc7\u547d\u540d\u7a7a\u95f4\u6765\u533a\u5206\u7684\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cDubbo\u4f1a\u4ece\u540d\u53eb dubbo \uff08\u7531\u4e8e Apollo \u4e0d\u652f\u6301\u7279\u6b8a\u540e\u7f00 .properties \uff09\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u8bfb\u53d6\u5168\u5c40\u914d\u7f6e\uff08 dubbo:config-center namespace=\"your namespace\" \uff09 \u7531\u4e8e Apollo \u4e5f\u9ed8\u8ba4\u5c06\u4f1a\u5728 dubbo namespace \u4e2d\u5b58\u50a8\u670d\u52a1\u6cbb\u7406\u89c4\u5219\uff08\u5982\u8def\u7531\u89c4\u5219\uff09\uff0c\u5efa\u8bae\u901a\u8fc7\u5355\u72ec\u914d\u7f6e group \u5c06\u670d\u52a1\u6cbb\u7406\u548c\u914d\u7f6e\u6587\u4ef6\u6258\u7ba1\u5206\u79bb\u5f00\uff0c\u4ee5 XML \u914d\u7f6e\u65b9\u5f0f\u4e3a\u4f8b\uff1a dubbo namespace= governance group = dubbo / \u8fd9\u91cc\uff0c\u670d\u52a1\u6cbb\u7406\u89c4\u5219\u5c06\u5b58\u50a8\u5728 governance namespace\uff0c\u800c\u914d\u7f6e\u6587\u4ef6\u5c06\u5b58\u50a8\u5728 dubbo namespace\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5173\u4e8e\u6587\u4ef6\u914d\u7f6e\u6258\u7ba1\uff0c\u76f8\u5f53\u4e8e\u662f\u628a dubbo.properties \u914d\u7f6e\u6587\u4ef6\u7684\u5185\u5bb9\u5b58\u50a8\u5728\u4e86 Apollo \u4e2d\uff0c\u5e94\u7528\u901a\u8fc7\u5173\u8054\u5171\u4eab\u7684 dubbo namespace \u7ee7\u627f\u516c\u5171\u914d\u7f6e, \u5e94\u7528\u4e5f\u53ef\u4ee5\u6309\u7167 Apollo \u7684\u505a\u6cd5\u6765\u8986\u76d6\u4e2a\u522b\u914d\u7f6e\u9879\u3002","title":"Apollo"},{"location":"user/configuration/config-center/#_3","text":"\u6240\u8c13Dubbo\u5bf9\u914d\u7f6e\u4e2d\u5fc3\u7684\u652f\u6301\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u628a .properties \u4ece\u8fdc\u7a0b\u62c9\u53d6\u5230\u672c\u5730\uff0c\u7136\u540e\u548c\u672c\u5730\u7684\u914d\u7f6e\u505a\u4e00\u6b21\u878d\u5408\u3002\u7406\u8bba\u4e0a\u53ea\u8981Dubbo\u6846\u67b6\u80fd\u62ff\u5230\u9700\u8981\u7684\u914d\u7f6e\u5c31\u53ef\u4ee5\u6b63\u5e38\u7684\u542f\u52a8\uff0c\u5b83\u5e76\u4e0d\u5173\u5fc3\u8fd9\u4e9b\u914d\u7f6e\u662f\u81ea\u5df1\u52a0\u8f7d\u5230\u7684\u8fd8\u662f\u5e94\u7528\u76f4\u63a5\u585e\u7ed9\u5b83\u7684\uff0c\u6240\u4ee5Dubbo\u8fd8\u63d0\u4f9b\u4e86\u4ee5\u4e0bAPI\uff0c\u8ba9\u7528\u6237\u5c06\u81ea\u5df1\u7ec4\u7ec7\u597d\u7684\u914d\u7f6e\u585e\u7ed9Dubbo\u6846\u67b6\uff08\u914d\u7f6e\u52a0\u8f7d\u7684\u8fc7\u7a0b\u662f\u7528\u6237\u8981\u5b8c\u6210\u7684\uff09\uff0c\u8fd9\u6837Dubbo\u6846\u67b6\u5c31\u4e0d\u518d\u76f4\u63a5\u548cApollo\u6216Zookeeper\u505a\u8bfb\u53d6\u914d\u7f6e\u4ea4\u4e92\u3002 // \u5e94\u7528\u81ea\u884c\u52a0\u8f7d\u914d\u7f6e Map String, String dubboConfigurations = new HashMap (); dubboConfigurations.put( dubbo.registry.address , zookeeper://127.0.0.1:2181 ); dubboConfigurations.put( dubbo.registry.simplified , true ); //\u5c06\u7ec4\u7ec7\u597d\u7684\u914d\u7f6e\u585e\u7ed9Dubbo\u6846\u67b6 ConfigCenterConfig configCenter = new ConfigCenterConfig(); configCenter.setExternalConfig(dubboConfigurations);","title":"\u81ea\u5df1\u52a0\u8f7d\u5916\u90e8\u5316\u914d\u7f6e"},{"location":"user/configuration/config-center/#_4","text":"","title":"\u670d\u52a1\u6cbb\u7406"},{"location":"user/configuration/config-center/#zookeeper_1","text":"\u9ed8\u8ba4\u8282\u70b9\u7ed3\u6784\uff1a namespace\uff0c\u7528\u4e8e\u4e0d\u540c\u914d\u7f6e\u7684\u73af\u5883\u9694\u79bb\u3002 config\uff0cDubbo\u7ea6\u5b9a\u7684\u56fa\u5b9a\u8282\u70b9\uff0c\u4e0d\u53ef\u66f4\u6539\uff0c\u6240\u6709\u914d\u7f6e\u548c\u670d\u52a1\u6cbb\u7406\u89c4\u5219\u90fd\u5b58\u50a8\u5728\u6b64\u8282\u70b9\u4e0b\u3002 dubbo\uff0c\u6240\u6709\u670d\u52a1\u6cbb\u7406\u89c4\u5219\u90fd\u662f\u5168\u5c40\u6027\u7684\uff0cdubbo\u4e3a\u9ed8\u8ba4\u8282\u70b9 configurators/tag-router/condition-router\uff0c\u4e0d\u540c\u7684\u670d\u52a1\u6cbb\u7406\u89c4\u5219\u7c7b\u578b\uff0cnode value\u5b58\u50a8\u5177\u4f53\u89c4\u5219\u5185\u5bb9","title":"Zookeeper"},{"location":"user/configuration/config-center/#apollo_1","text":"\u6240\u6709\u7684\u670d\u52a1\u6cbb\u7406\u89c4\u5219\u90fd\u662f\u5168\u5c40\u6027\u7684\uff0c\u9ed8\u8ba4\u4ece\u516c\u5171\u547d\u540d\u7a7a\u95f4 dubbo \u8bfb\u53d6\u548c\u8ba2\u9605\uff1a \u4e0d\u540c\u7684\u89c4\u5219\u4ee5\u4e0d\u540c\u7684key\u540e\u7f00\u533a\u5206\uff1a configurators\uff0c \u8986\u76d6\u89c4\u5219 tag-router\uff0c \u6807\u7b7e\u8def\u7531 condition-router\uff0c \u6761\u4ef6\u8def\u7531","title":"Apollo"},{"location":"user/configuration/configuration-load-process/","text":"\u914d\u7f6e\u52a0\u8f7d\u6d41\u7a0b \u6b64\u7bc7\u6587\u6863\u4e3b\u8981\u8bb2\u5728 \u5e94\u7528\u542f\u52a8\u9636\u6bb5\uff0cDubbo\u6846\u67b6\u5982\u4f55\u5c06\u6240\u9700\u8981\u7684\u914d\u7f6e\u91c7\u96c6\u8d77\u6765 \uff08\u5305\u62ec\u5e94\u7528\u914d\u7f6e\u3001\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e\u3001\u670d\u52a1\u914d\u7f6e\u7b49\uff09\uff0c\u4ee5\u5b8c\u6210\u670d\u52a1\u7684\u66b4\u9732\u548c\u5f15\u7528\u6d41\u7a0b\u3002 \u6839\u636e\u9a71\u52a8\u65b9\u5f0f\u7684\u4e0d\u540c\uff08\u6bd4\u5982Spring\u6216\u88f8API\u7f16\u7a0b\uff09\u914d\u7f6e\u5f62\u5f0f\u4e0a\u80af\u5b9a\u4f1a\u6709\u6240\u5dee\u5f02\uff0c\u5177\u4f53\u8bf7\u53c2\u8003 XML\u914d\u7f6e \u3001 Annotation\u914d\u7f6e \u3001 API\u914d\u7f6e \u4e09\u7bc7\u6587\u6863\u3002\u9664\u4e86\u5916\u56f4\u9a71\u52a8\u65b9\u5f0f\u4e0a\u7684\u5dee\u5f02\uff0cDubbo\u7684\u914d\u7f6e\u8bfb\u53d6\u603b\u4f53\u4e0a\u9075\u5faa\u4e86\u4ee5\u4e0b\u51e0\u4e2a\u539f\u5219\uff1a Dubbo\u652f\u6301\u4e86\u591a\u5c42\u7ea7\u7684\u914d\u7f6e\uff0c\u5e76\u6309\u9884\u5b9a\u4f18\u5148\u7ea7\u81ea\u52a8\u5b9e\u73b0\u914d\u7f6e\u95f4\u7684\u8986\u76d6\uff0c\u6700\u7ec8\u6240\u6709\u914d\u7f6e\u6c47\u603b\u5230\u6570\u636e\u603b\u7ebfURL\u540e\u9a71\u52a8\u540e\u7eed\u7684\u670d\u52a1\u66b4\u9732\u3001\u5f15\u7528\u7b49\u6d41\u7a0b\u3002 ApplicationConfig\u3001ServiceConfig\u3001ReferenceConfig\u53ef\u4ee5\u88ab\u7406\u89e3\u6210\u914d\u7f6e\u6765\u6e90\u7684\u4e00\u79cd\uff0c\u662f\u76f4\u63a5\u9762\u5411\u7528\u6237\u7f16\u7a0b\u7684\u914d\u7f6e\u91c7\u96c6\u65b9\u5f0f\u3002 \u914d\u7f6e\u683c\u5f0f\u4ee5Properties\u4e3a\u4e3b\uff0c\u5728\u914d\u7f6e\u5185\u5bb9\u4e0a\u9075\u5faa\u7ea6\u5b9a\u7684 path-based \u7684\u547d\u540d \u89c4\u8303 \u914d\u7f6e\u6765\u6e90 \u9996\u5148\uff0c\u4eceDubbo\u652f\u6301\u7684\u914d\u7f6e\u6765\u6e90\u8bf4\u8d77\uff0c\u9ed8\u8ba4\u6709\u56db\u79cd\u914d\u7f6e\u6765\u6e90\uff1a JVM System Properties\uff0c-D\u53c2\u6570 Externalized Configuration\uff0c\u5916\u90e8\u5316\u914d\u7f6e ServiceConfig\u3001ReferenceConfig\u7b49\u7f16\u7a0b\u63a5\u53e3\u91c7\u96c6\u7684\u914d\u7f6e \u672c\u5730\u914d\u7f6e\u6587\u4ef6dubbo.properties \u8986\u76d6\u5173\u7cfb \u4e0b\u56fe\u5c55\u793a\u4e86\u914d\u7f6e\u8986\u76d6\u5173\u7cfb\u7684\u4f18\u5148\u7ea7\uff0c\u4ece\u4e0a\u5230\u4e0b\u4f18\u5148\u7ea7\u4f9d\u6b21\u964d\u4f4e\uff1a \u70b9\u6b64\u67e5\u770b \u5916\u90e8\u5316\u914d\u7f6e\u8be6\u60c5 \u914d\u7f6e\u683c\u5f0f \u76ee\u524dDubbo\u652f\u6301\u7684\u6240\u6709\u914d\u7f6e\u90fd\u662f .properties \u683c\u5f0f\u7684\uff0c\u5305\u62ec -D \u3001 Externalized Configuration \u7b49\uff0c .properties \u4e2d\u7684\u6240\u6709\u914d\u7f6e\u9879\u9075\u5faa\u4e00\u79cd path-based \u7684\u914d\u7f6e\u683c\u5f0f\uff1a # \u5e94\u7528\u7ea7\u522b dubbo.{config-type}[.{config-id}].{config-item}={config-item-value} # \u670d\u52a1\u7ea7\u522b dubbo.service.{interface-name}[.{method-name}].{config-item}={config-item-value} dubbo.reference.{interface-name}[.{method-name}].{config-item}={config-item-value} # \u591a\u914d\u7f6e\u9879 dubbo.{config-type}s.{config-id}.{config-item}={config-item-value} \u5e94\u7528\u7ea7\u522b dubbo.application.name=demo-provider dubbo.registry.address=zookeeper://127.0.0.1:2181 dubbo.protocol.port=-1 \u670d\u52a1\u7ea7\u522b dubbo.service.org.apache.dubbo.samples.api.DemoService.timeout=5000 dubbo.reference.org.apache.dubbo.samples.api.DemoService.timeout=6000 dubbo.reference.org.apache.dubbo.samples.api.DemoService.sayHello.timeout=7000 \u591a\u914d\u7f6e\u9879 dubbo.registries.unit1.address=zookeeper://127.0.0.1:2181 dubbo.registries.unit2.address=zookeeper://127.0.0.1:2182 dubbo.protocols.dubbo.name=dubbo dubbo.protocols.dubbo.port=20880 dubbo.protocols.hessian.name=hessian dubbo.protocols.hessian.port=8089 \u6269\u5c55\u914d\u7f6e dubbo.application.parameters.item1=value1 dubbo.application.parameters.item2=value2 dubbo.registry.parameters.item3=value3 dubbo.reference.org.apache.dubbo.samples.api.DemoService.parameters.item4=value4 \u51e0\u79cd\u7f16\u7a0b\u914d\u7f6e\u65b9\u5f0f \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u9009\u62e9\u4e0d\u540c\u7684\u5f00\u53d1\u65b9\u5f0f\u65f6\uff0c\u5bf9\u5e94\u5230 ServiceConfig\u3001ReferenceConfig\u7b49\u7f16\u7a0b\u63a5\u53e3\u91c7\u96c6\u7684\u914d\u7f6e \u7684\u53d8\u5316\u3002 Spring XML \u53c2\u89c1 \u793a\u4f8b !-- dubbo-provier.xml -- dubbo:application name= demo-provider / dubbo:config-center address= zookeeper://127.0.0.1:2181 / dubbo:registry address= zookeeper://127.0.0.1:2181 simplified= true / dubbo:metadata-report address= redis://127.0.0.1:6379 / dubbo:protocol name= dubbo port= 20880 / bean id= demoService class= org.apache.dubbo.samples.basic.impl.DemoServiceImpl / dubbo:service interface= org.apache.dubbo.samples.basic.api.DemoService ref= demoService / ``` - Annotation \u53c2\u89c1[\u793a\u4f8b](https://github.com/apache/dubbo-samples/tree/master/dubbo-samples-annotation) ```java // AnnotationService\u670d\u52a1\u5b9e\u73b0 @Service public class AnnotationServiceImpl implements AnnotationService { @Override public String sayHello(String name) { System.out.println( async provider received: + name); return annotation: hello, + name; } } ``` ```properties ## dubbo.properties dubbo.application.name=annotation-provider dubbo.registry.address=zookeeper://127.0.0.1:2181 dubbo.protocol.name=dubbo dubbo.protocol.port=20880 Spring Boot \u53c2\u89c1 \u793a\u4f8b ## application.properties # Spring boot application spring.application.name=dubbo-externalized-configuration-provider-sample # Base packages to scan Dubbo Component: @com.alibaba.dubbo.config.annotation.Service dubbo.scan.base-packages=com.alibaba.boot.dubbo.demo.provider.service # Dubbo Application ## The default value of dubbo.application.name is ${spring.application.name} ## dubbo.application.name=${spring.application.name} # Dubbo Protocol dubbo.protocol.name=dubbo dubbo.protocol.port=12345 ## Dubbo Registry dubbo.registry.address=N/A ## DemoService version demo.service.version=1.0.0 API public static void main(String[] args) throws IOException { ServiceConfig GreetingsService service = new ServiceConfig (); service.setApplication(new ApplicationConfig( first-dubbo-provider )); service.setRegistry(new RegistryConfig( multicast://224.5.6.7:1234 )); service.setInterface(GreetingsService.class); service.setRef(new GreetingsServiceImpl()); service.export(); System.out.println( first-dubbo-provider is running. ); System.in.read(); } \u53c2\u8003 \u793a\u4f8b","title":"\u914d\u7f6e\u52a0\u8f7d\u6d41\u7a0b"},{"location":"user/configuration/configuration-load-process/#_1","text":"\u6b64\u7bc7\u6587\u6863\u4e3b\u8981\u8bb2\u5728 \u5e94\u7528\u542f\u52a8\u9636\u6bb5\uff0cDubbo\u6846\u67b6\u5982\u4f55\u5c06\u6240\u9700\u8981\u7684\u914d\u7f6e\u91c7\u96c6\u8d77\u6765 \uff08\u5305\u62ec\u5e94\u7528\u914d\u7f6e\u3001\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e\u3001\u670d\u52a1\u914d\u7f6e\u7b49\uff09\uff0c\u4ee5\u5b8c\u6210\u670d\u52a1\u7684\u66b4\u9732\u548c\u5f15\u7528\u6d41\u7a0b\u3002 \u6839\u636e\u9a71\u52a8\u65b9\u5f0f\u7684\u4e0d\u540c\uff08\u6bd4\u5982Spring\u6216\u88f8API\u7f16\u7a0b\uff09\u914d\u7f6e\u5f62\u5f0f\u4e0a\u80af\u5b9a\u4f1a\u6709\u6240\u5dee\u5f02\uff0c\u5177\u4f53\u8bf7\u53c2\u8003 XML\u914d\u7f6e \u3001 Annotation\u914d\u7f6e \u3001 API\u914d\u7f6e \u4e09\u7bc7\u6587\u6863\u3002\u9664\u4e86\u5916\u56f4\u9a71\u52a8\u65b9\u5f0f\u4e0a\u7684\u5dee\u5f02\uff0cDubbo\u7684\u914d\u7f6e\u8bfb\u53d6\u603b\u4f53\u4e0a\u9075\u5faa\u4e86\u4ee5\u4e0b\u51e0\u4e2a\u539f\u5219\uff1a Dubbo\u652f\u6301\u4e86\u591a\u5c42\u7ea7\u7684\u914d\u7f6e\uff0c\u5e76\u6309\u9884\u5b9a\u4f18\u5148\u7ea7\u81ea\u52a8\u5b9e\u73b0\u914d\u7f6e\u95f4\u7684\u8986\u76d6\uff0c\u6700\u7ec8\u6240\u6709\u914d\u7f6e\u6c47\u603b\u5230\u6570\u636e\u603b\u7ebfURL\u540e\u9a71\u52a8\u540e\u7eed\u7684\u670d\u52a1\u66b4\u9732\u3001\u5f15\u7528\u7b49\u6d41\u7a0b\u3002 ApplicationConfig\u3001ServiceConfig\u3001ReferenceConfig\u53ef\u4ee5\u88ab\u7406\u89e3\u6210\u914d\u7f6e\u6765\u6e90\u7684\u4e00\u79cd\uff0c\u662f\u76f4\u63a5\u9762\u5411\u7528\u6237\u7f16\u7a0b\u7684\u914d\u7f6e\u91c7\u96c6\u65b9\u5f0f\u3002 \u914d\u7f6e\u683c\u5f0f\u4ee5Properties\u4e3a\u4e3b\uff0c\u5728\u914d\u7f6e\u5185\u5bb9\u4e0a\u9075\u5faa\u7ea6\u5b9a\u7684 path-based \u7684\u547d\u540d \u89c4\u8303","title":"\u914d\u7f6e\u52a0\u8f7d\u6d41\u7a0b"},{"location":"user/configuration/configuration-load-process/#_2","text":"\u9996\u5148\uff0c\u4eceDubbo\u652f\u6301\u7684\u914d\u7f6e\u6765\u6e90\u8bf4\u8d77\uff0c\u9ed8\u8ba4\u6709\u56db\u79cd\u914d\u7f6e\u6765\u6e90\uff1a JVM System Properties\uff0c-D\u53c2\u6570 Externalized Configuration\uff0c\u5916\u90e8\u5316\u914d\u7f6e ServiceConfig\u3001ReferenceConfig\u7b49\u7f16\u7a0b\u63a5\u53e3\u91c7\u96c6\u7684\u914d\u7f6e \u672c\u5730\u914d\u7f6e\u6587\u4ef6dubbo.properties","title":"\u914d\u7f6e\u6765\u6e90"},{"location":"user/configuration/configuration-load-process/#_3","text":"\u4e0b\u56fe\u5c55\u793a\u4e86\u914d\u7f6e\u8986\u76d6\u5173\u7cfb\u7684\u4f18\u5148\u7ea7\uff0c\u4ece\u4e0a\u5230\u4e0b\u4f18\u5148\u7ea7\u4f9d\u6b21\u964d\u4f4e\uff1a \u70b9\u6b64\u67e5\u770b \u5916\u90e8\u5316\u914d\u7f6e\u8be6\u60c5","title":"\u8986\u76d6\u5173\u7cfb"},{"location":"user/configuration/configuration-load-process/#_4","text":"\u76ee\u524dDubbo\u652f\u6301\u7684\u6240\u6709\u914d\u7f6e\u90fd\u662f .properties \u683c\u5f0f\u7684\uff0c\u5305\u62ec -D \u3001 Externalized Configuration \u7b49\uff0c .properties \u4e2d\u7684\u6240\u6709\u914d\u7f6e\u9879\u9075\u5faa\u4e00\u79cd path-based \u7684\u914d\u7f6e\u683c\u5f0f\uff1a # \u5e94\u7528\u7ea7\u522b dubbo.{config-type}[.{config-id}].{config-item}={config-item-value} # \u670d\u52a1\u7ea7\u522b dubbo.service.{interface-name}[.{method-name}].{config-item}={config-item-value} dubbo.reference.{interface-name}[.{method-name}].{config-item}={config-item-value} # \u591a\u914d\u7f6e\u9879 dubbo.{config-type}s.{config-id}.{config-item}={config-item-value} \u5e94\u7528\u7ea7\u522b dubbo.application.name=demo-provider dubbo.registry.address=zookeeper://127.0.0.1:2181 dubbo.protocol.port=-1 \u670d\u52a1\u7ea7\u522b dubbo.service.org.apache.dubbo.samples.api.DemoService.timeout=5000 dubbo.reference.org.apache.dubbo.samples.api.DemoService.timeout=6000 dubbo.reference.org.apache.dubbo.samples.api.DemoService.sayHello.timeout=7000 \u591a\u914d\u7f6e\u9879 dubbo.registries.unit1.address=zookeeper://127.0.0.1:2181 dubbo.registries.unit2.address=zookeeper://127.0.0.1:2182 dubbo.protocols.dubbo.name=dubbo dubbo.protocols.dubbo.port=20880 dubbo.protocols.hessian.name=hessian dubbo.protocols.hessian.port=8089 \u6269\u5c55\u914d\u7f6e dubbo.application.parameters.item1=value1 dubbo.application.parameters.item2=value2 dubbo.registry.parameters.item3=value3 dubbo.reference.org.apache.dubbo.samples.api.DemoService.parameters.item4=value4","title":"\u914d\u7f6e\u683c\u5f0f"},{"location":"user/configuration/configuration-load-process/#_5","text":"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u9009\u62e9\u4e0d\u540c\u7684\u5f00\u53d1\u65b9\u5f0f\u65f6\uff0c\u5bf9\u5e94\u5230 ServiceConfig\u3001ReferenceConfig\u7b49\u7f16\u7a0b\u63a5\u53e3\u91c7\u96c6\u7684\u914d\u7f6e \u7684\u53d8\u5316\u3002","title":"\u51e0\u79cd\u7f16\u7a0b\u914d\u7f6e\u65b9\u5f0f"},{"location":"user/configuration/configuration-load-process/#spring","text":"XML \u53c2\u89c1 \u793a\u4f8b !-- dubbo-provier.xml -- dubbo:application name= demo-provider / dubbo:config-center address= zookeeper://127.0.0.1:2181 / dubbo:registry address= zookeeper://127.0.0.1:2181 simplified= true / dubbo:metadata-report address= redis://127.0.0.1:6379 / dubbo:protocol name= dubbo port= 20880 / bean id= demoService class= org.apache.dubbo.samples.basic.impl.DemoServiceImpl / dubbo:service interface= org.apache.dubbo.samples.basic.api.DemoService ref= demoService / ``` - Annotation \u53c2\u89c1[\u793a\u4f8b](https://github.com/apache/dubbo-samples/tree/master/dubbo-samples-annotation) ```java // AnnotationService\u670d\u52a1\u5b9e\u73b0 @Service public class AnnotationServiceImpl implements AnnotationService { @Override public String sayHello(String name) { System.out.println( async provider received: + name); return annotation: hello, + name; } } ``` ```properties ## dubbo.properties dubbo.application.name=annotation-provider dubbo.registry.address=zookeeper://127.0.0.1:2181 dubbo.protocol.name=dubbo dubbo.protocol.port=20880 Spring Boot \u53c2\u89c1 \u793a\u4f8b ## application.properties # Spring boot application spring.application.name=dubbo-externalized-configuration-provider-sample # Base packages to scan Dubbo Component: @com.alibaba.dubbo.config.annotation.Service dubbo.scan.base-packages=com.alibaba.boot.dubbo.demo.provider.service # Dubbo Application ## The default value of dubbo.application.name is ${spring.application.name} ## dubbo.application.name=${spring.application.name} # Dubbo Protocol dubbo.protocol.name=dubbo dubbo.protocol.port=12345 ## Dubbo Registry dubbo.registry.address=N/A ## DemoService version demo.service.version=1.0.0","title":"Spring"},{"location":"user/configuration/configuration-load-process/#api","text":"public static void main(String[] args) throws IOException { ServiceConfig GreetingsService service = new ServiceConfig (); service.setApplication(new ApplicationConfig( first-dubbo-provider )); service.setRegistry(new RegistryConfig( multicast://224.5.6.7:1234 )); service.setInterface(GreetingsService.class); service.setRef(new GreetingsServiceImpl()); service.export(); System.out.println( first-dubbo-provider is running. ); System.in.read(); } \u53c2\u8003 \u793a\u4f8b","title":"API"},{"location":"user/configuration/environment-variables/","text":"\u81ea\u52a8\u52a0\u8f7d\u73af\u5883\u53d8\u91cf \u4ece2.7.3\u7248\u672c\u5f00\u59cb\uff0cDubbo\u4f1a\u81ea\u52a8\u4ece\u7ea6\u5b9akey\u4e2d\u8bfb\u53d6\u914d\u7f6e\uff0c\u5e76\u5c06\u914d\u7f6e\u4ee5Key-Value\u7684\u5f62\u5f0f\u5199\u5165\u5230URL\u4e2d\u3002 \u652f\u6301\u7684key\u6709\u4ee5\u4e0b\u4e24\u4e2a\uff1a dubbo.labels \uff0c\u6307\u5b9a\u4e00\u4e9b\u5217\u914d\u7f6e\u5230URL\u4e2d\u7684\u952e\u503c\u5bf9\uff0c\u901a\u5e38\u901a\u8fc7JVM -D\u6216\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\u6307\u5b9a\u3002 \u589e\u52a0\u4ee5\u4e0b\u914d\u7f6e\uff1a ```properties JVM -Ddubbo.labels = \"tag1=value1; tag2=value2\" \u73af\u5883\u53d8\u91cf DUBBO_LABELS = \"tag1=value1; tag2=value2\" `` \u6700\u7ec8\u751f\u6210\u7684URL\u4f1a\u5305\u542b tag1\u3001tag2 \u4e24\u4e2a key: dubbo://xxx?tag1=value1 tag2=value2` dubbo.env.keys \uff0c\u6307\u5b9a\u73af\u5883\u53d8\u91cfkey\u503c\uff0cDubbo\u4f1a\u5c1d\u8bd5\u4ece\u73af\u5883\u53d8\u91cf\u52a0\u8f7d\u6bcf\u4e2a key ```properties JVM -Ddubbo.env.keys = \"DUBBO_TAG1, DUBBO_TAG2\" \u73af\u5883\u53d8\u91cf DUBBO_ENV_KEYS = \"DUBBO_TAG1, DUBBO_TAG2\" ``` \u6700\u7ec8\u751f\u6210\u7684URL\u4f1a\u5305\u542b DUBBO_TAG1\u3001DUBBO_TAG2 \u4e24\u4e2a key: dubbo://xxx?DUBBO_TAG1=value1 DUBBO_TAG2=value2","title":"\u81ea\u52a8\u52a0\u8f7d\u73af\u5883\u53d8\u91cf"},{"location":"user/configuration/environment-variables/#_1","text":"\u4ece2.7.3\u7248\u672c\u5f00\u59cb\uff0cDubbo\u4f1a\u81ea\u52a8\u4ece\u7ea6\u5b9akey\u4e2d\u8bfb\u53d6\u914d\u7f6e\uff0c\u5e76\u5c06\u914d\u7f6e\u4ee5Key-Value\u7684\u5f62\u5f0f\u5199\u5165\u5230URL\u4e2d\u3002 \u652f\u6301\u7684key\u6709\u4ee5\u4e0b\u4e24\u4e2a\uff1a dubbo.labels \uff0c\u6307\u5b9a\u4e00\u4e9b\u5217\u914d\u7f6e\u5230URL\u4e2d\u7684\u952e\u503c\u5bf9\uff0c\u901a\u5e38\u901a\u8fc7JVM -D\u6216\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\u6307\u5b9a\u3002 \u589e\u52a0\u4ee5\u4e0b\u914d\u7f6e\uff1a ```properties","title":"\u81ea\u52a8\u52a0\u8f7d\u73af\u5883\u53d8\u91cf"},{"location":"user/configuration/environment-variables/#jvm","text":"-Ddubbo.labels = \"tag1=value1; tag2=value2\"","title":"JVM"},{"location":"user/configuration/environment-variables/#_2","text":"DUBBO_LABELS = \"tag1=value1; tag2=value2\" `` \u6700\u7ec8\u751f\u6210\u7684URL\u4f1a\u5305\u542b tag1\u3001tag2 \u4e24\u4e2a key: dubbo://xxx?tag1=value1 tag2=value2` dubbo.env.keys \uff0c\u6307\u5b9a\u73af\u5883\u53d8\u91cfkey\u503c\uff0cDubbo\u4f1a\u5c1d\u8bd5\u4ece\u73af\u5883\u53d8\u91cf\u52a0\u8f7d\u6bcf\u4e2a key ```properties","title":"\u73af\u5883\u53d8\u91cf"},{"location":"user/configuration/environment-variables/#jvm_1","text":"-Ddubbo.env.keys = \"DUBBO_TAG1, DUBBO_TAG2\"","title":"JVM"},{"location":"user/configuration/environment-variables/#_3","text":"DUBBO_ENV_KEYS = \"DUBBO_TAG1, DUBBO_TAG2\" ``` \u6700\u7ec8\u751f\u6210\u7684URL\u4f1a\u5305\u542b DUBBO_TAG1\u3001DUBBO_TAG2 \u4e24\u4e2a key: dubbo://xxx?DUBBO_TAG1=value1 DUBBO_TAG2=value2","title":"\u73af\u5883\u53d8\u91cf"},{"location":"user/configuration/properties-deprecated/","text":"\u5c5e\u6027\u914d\u7f6e \u5982\u679c\u516c\u5171\u914d\u7f6e\u5f88\u7b80\u5355\uff0c\u6ca1\u6709\u591a\u6ce8\u518c\u4e2d\u5fc3\uff0c\u591a\u534f\u8bae\u7b49\u60c5\u51b5\uff0c\u6216\u8005\u60f3\u591a\u4e2a Spring \u5bb9\u5668\u60f3\u5171\u4eab\u914d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u7528 dubbo.properties \u4f5c\u4e3a\u7f3a\u7701\u914d\u7f6e\u3002 Dubbo \u5c06\u81ea\u52a8\u52a0\u8f7d classpath \u6839\u76ee\u5f55\u4e0b\u7684 dubbo.properties\uff0c\u53ef\u4ee5\u901a\u8fc7JVM\u542f\u52a8\u53c2\u6570 -Ddubbo.properties.file=xxx.properties \u6539\u53d8\u7f3a\u7701\u914d\u7f6e\u4f4d\u7f6e\u3002[^1] \u6620\u5c04\u89c4\u5219 \u5c06 XML \u914d\u7f6e\u7684\u6807\u7b7e\u540d\uff0c\u52a0\u5c5e\u6027\u540d\uff0c\u7528\u70b9\u5206\u9694\uff0c\u591a\u4e2a\u5c5e\u6027\u62c6\u6210\u591a\u884c \u6bd4\u5982\uff1a dubbo.application.name=foo \u7b49\u4ef7\u4e8e dubbo:application name=\"foo\" / \u6bd4\u5982\uff1a dubbo.registry.address=10.20.153.10:9090 \u7b49\u4ef7\u4e8e dubbo:registry address=\"10.20.153.10:9090\" / \u5982\u679c XML \u6709\u591a\u884c\u540c\u540d\u6807\u7b7e\u914d\u7f6e\uff0c\u53ef\u7528 id \u53f7\u533a\u5206\uff0c\u5982\u679c\u6ca1\u6709 id \u53f7\u5c06\u5bf9\u6240\u6709\u540c\u540d\u6807\u7b7e\u751f\u6548 \u6bd4\u5982\uff1a dubbo.protocol.rmi.port=1099 \u7b49\u4ef7\u4e8e dubbo:protocol id=\"rmi\" name=\"rmi\" port=\"1099\" / [^2] \u6bd4\u5982\uff1a dubbo.registry.china.address=10.20.153.10:9090 \u7b49\u4ef7\u4e8e dubbo:registry id=\"china\" address=\"10.20.153.10:9090\" / \u4e0b\u9762\u662f dubbo.properties \u7684\u4e00\u4e2a\u5178\u578b\u914d\u7f6e\uff1a dubbo.application.name=foo dubbo.application.owner=bar dubbo.registry.address=10.20.153.10:9090 \u8986\u76d6\u7b56\u7565 JVM \u542f\u52a8 -D \u53c2\u6570\u4f18\u5148\uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u7528\u6237\u5728\u90e8\u7f72\u548c\u542f\u52a8\u65f6\u8fdb\u884c\u53c2\u6570\u91cd\u5199\uff0c\u6bd4\u5982\u5728\u542f\u52a8\u65f6\u9700\u6539\u53d8\u534f\u8bae\u7684\u7aef\u53e3\u3002 XML \u6b21\u4e4b\uff0c\u5982\u679c\u5728 XML \u4e2d\u6709\u914d\u7f6e\uff0c\u5219 dubbo.properties \u4e2d\u7684\u76f8\u5e94\u914d\u7f6e\u9879\u65e0\u6548\u3002 Properties \u6700\u540e\uff0c\u76f8\u5f53\u4e8e\u7f3a\u7701\u503c\uff0c\u53ea\u6709 XML \u6ca1\u6709\u914d\u7f6e\u65f6\uff0cdubbo.properties \u7684\u76f8\u5e94\u914d\u7f6e\u9879\u624d\u4f1a\u751f\u6548\uff0c\u901a\u5e38\u7528\u4e8e\u5171\u4eab\u516c\u5171\u914d\u7f6e\uff0c\u6bd4\u5982\u5e94\u7528\u540d\u3002 [^1]: \u5982\u679c classpath \u6839\u76ee\u5f55\u4e0b\u5b58\u5728\u591a\u4e2a dubbo.properties\uff0c\u6bd4\u5982\u591a\u4e2a jar \u5305\u4e2d\u6709 dubbo.properties\uff0cDubbo \u4f1a\u4efb\u610f\u52a0\u8f7d\uff0c\u5e76\u6253\u5370 Error \u65e5\u5fd7\uff0c\u540e\u7eed\u53ef\u80fd\u6539\u4e3a\u629b\u5f02\u5e38\u3002 [^2]: \u534f\u8bae\u7684 id \u6ca1\u914d\u65f6\uff0c\u7f3a\u7701\u4f7f\u7528\u534f\u8bae\u540d\u4f5c\u4e3a id","title":"\u5c5e\u6027\u914d\u7f6e"},{"location":"user/configuration/properties-deprecated/#_1","text":"\u5982\u679c\u516c\u5171\u914d\u7f6e\u5f88\u7b80\u5355\uff0c\u6ca1\u6709\u591a\u6ce8\u518c\u4e2d\u5fc3\uff0c\u591a\u534f\u8bae\u7b49\u60c5\u51b5\uff0c\u6216\u8005\u60f3\u591a\u4e2a Spring \u5bb9\u5668\u60f3\u5171\u4eab\u914d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u7528 dubbo.properties \u4f5c\u4e3a\u7f3a\u7701\u914d\u7f6e\u3002 Dubbo \u5c06\u81ea\u52a8\u52a0\u8f7d classpath \u6839\u76ee\u5f55\u4e0b\u7684 dubbo.properties\uff0c\u53ef\u4ee5\u901a\u8fc7JVM\u542f\u52a8\u53c2\u6570 -Ddubbo.properties.file=xxx.properties \u6539\u53d8\u7f3a\u7701\u914d\u7f6e\u4f4d\u7f6e\u3002[^1]","title":"\u5c5e\u6027\u914d\u7f6e"},{"location":"user/configuration/properties-deprecated/#_2","text":"\u5c06 XML \u914d\u7f6e\u7684\u6807\u7b7e\u540d\uff0c\u52a0\u5c5e\u6027\u540d\uff0c\u7528\u70b9\u5206\u9694\uff0c\u591a\u4e2a\u5c5e\u6027\u62c6\u6210\u591a\u884c \u6bd4\u5982\uff1a dubbo.application.name=foo \u7b49\u4ef7\u4e8e dubbo:application name=\"foo\" / \u6bd4\u5982\uff1a dubbo.registry.address=10.20.153.10:9090 \u7b49\u4ef7\u4e8e dubbo:registry address=\"10.20.153.10:9090\" / \u5982\u679c XML \u6709\u591a\u884c\u540c\u540d\u6807\u7b7e\u914d\u7f6e\uff0c\u53ef\u7528 id \u53f7\u533a\u5206\uff0c\u5982\u679c\u6ca1\u6709 id \u53f7\u5c06\u5bf9\u6240\u6709\u540c\u540d\u6807\u7b7e\u751f\u6548 \u6bd4\u5982\uff1a dubbo.protocol.rmi.port=1099 \u7b49\u4ef7\u4e8e dubbo:protocol id=\"rmi\" name=\"rmi\" port=\"1099\" / [^2] \u6bd4\u5982\uff1a dubbo.registry.china.address=10.20.153.10:9090 \u7b49\u4ef7\u4e8e dubbo:registry id=\"china\" address=\"10.20.153.10:9090\" / \u4e0b\u9762\u662f dubbo.properties \u7684\u4e00\u4e2a\u5178\u578b\u914d\u7f6e\uff1a dubbo.application.name=foo dubbo.application.owner=bar dubbo.registry.address=10.20.153.10:9090","title":"\u6620\u5c04\u89c4\u5219"},{"location":"user/configuration/properties-deprecated/#_3","text":"JVM \u542f\u52a8 -D \u53c2\u6570\u4f18\u5148\uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u7528\u6237\u5728\u90e8\u7f72\u548c\u542f\u52a8\u65f6\u8fdb\u884c\u53c2\u6570\u91cd\u5199\uff0c\u6bd4\u5982\u5728\u542f\u52a8\u65f6\u9700\u6539\u53d8\u534f\u8bae\u7684\u7aef\u53e3\u3002 XML \u6b21\u4e4b\uff0c\u5982\u679c\u5728 XML \u4e2d\u6709\u914d\u7f6e\uff0c\u5219 dubbo.properties \u4e2d\u7684\u76f8\u5e94\u914d\u7f6e\u9879\u65e0\u6548\u3002 Properties \u6700\u540e\uff0c\u76f8\u5f53\u4e8e\u7f3a\u7701\u503c\uff0c\u53ea\u6709 XML \u6ca1\u6709\u914d\u7f6e\u65f6\uff0cdubbo.properties \u7684\u76f8\u5e94\u914d\u7f6e\u9879\u624d\u4f1a\u751f\u6548\uff0c\u901a\u5e38\u7528\u4e8e\u5171\u4eab\u516c\u5171\u914d\u7f6e\uff0c\u6bd4\u5982\u5e94\u7528\u540d\u3002 [^1]: \u5982\u679c classpath \u6839\u76ee\u5f55\u4e0b\u5b58\u5728\u591a\u4e2a dubbo.properties\uff0c\u6bd4\u5982\u591a\u4e2a jar \u5305\u4e2d\u6709 dubbo.properties\uff0cDubbo \u4f1a\u4efb\u610f\u52a0\u8f7d\uff0c\u5e76\u6253\u5370 Error \u65e5\u5fd7\uff0c\u540e\u7eed\u53ef\u80fd\u6539\u4e3a\u629b\u5f02\u5e38\u3002 [^2]: \u534f\u8bae\u7684 id \u6ca1\u914d\u65f6\uff0c\u7f3a\u7701\u4f7f\u7528\u534f\u8bae\u540d\u4f5c\u4e3a id","title":"\u8986\u76d6\u7b56\u7565"},{"location":"user/configuration/properties/","text":"\u5c5e\u6027\u914d\u7f6e \u5982\u679c\u4f60\u7684\u5e94\u7528\u8db3\u591f\u7b80\u5355\uff0c\u4f8b\u5982\uff0c\u4e0d\u9700\u8981\u591a\u6ce8\u518c\u4e2d\u5fc3\u6216\u591a\u534f\u8bae\uff0c\u5e76\u4e14\u9700\u8981\u5728spring\u5bb9\u5668\u4e2d\u5171\u4eab\u914d\u7f6e\uff0c\u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 dubbo.properties \u4f5c\u4e3a\u9ed8\u8ba4\u914d\u7f6e\u3002 Dubbo\u53ef\u4ee5\u81ea\u52a8\u52a0\u8f7dclasspath\u6839\u76ee\u5f55\u4e0b\u7684dubbo.properties\uff0c\u4f46\u662f\u4f60\u540c\u6837\u53ef\u4ee5\u4f7f\u7528JVM\u53c2\u6570\u6765\u6307\u5b9a\u8def\u5f84\uff1a -Ddubbo.properties.file=xxx.properties \u3002 \u6620\u5c04\u89c4\u5219 \u53ef\u4ee5\u5c06xml\u7684tag\u540d\u548c\u5c5e\u6027\u540d\u7ec4\u5408\u8d77\u6765\uff0c\u7528\u2018.\u2019\u5206\u9694\u3002\u6bcf\u884c\u4e00\u4e2a\u5c5e\u6027\u3002 dubbo.application.name=foo \u76f8\u5f53\u4e8e dubbo:application name=\"foo\" / dubbo.registry.address=10.20.153.10:9090 \u76f8\u5f53\u4e8e dubbo:registry address=\"10.20.153.10:9090\" / \u5982\u679c\u5728xml\u914d\u7f6e\u4e2d\u6709\u8d85\u8fc7\u4e00\u4e2a\u7684tag\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4f7f\u7528\u2018id\u2019\u8fdb\u884c\u533a\u5206\u3002\u5982\u679c\u4f60\u4e0d\u6307\u5b9aid\uff0c\u5b83\u5c06\u4f5c\u7528\u4e8e\u6240\u6709tag\u3002 dubbo.protocol.rmi.port=1099 \u76f8\u5f53\u4e8e dubbo:protocol id=\"rmi\" name=\"rmi\" port=\"1099\" / dubbo.registry.china.address=10.20.153.10:9090 \u76f8\u5f53\u4e8e dubbo:registry id=\"china\" address=\"10.20.153.10:9090\" / \u5982\u4e0b\uff0c\u662f\u4e00\u4e2a\u5178\u578b\u7684dubbo.properties\u914d\u7f6e\u6837\u4f8b\u3002 dubbo.application.name=foo dubbo.application.owner=bar dubbo.registry.address=10.20.153.10:9090 \u91cd\u5199\u4e0e\u4f18\u5148\u7ea7 \u4f18\u5148\u7ea7\u4ece\u9ad8\u5230\u4f4e\uff1a JVM -D\u53c2\u6570\uff0c\u5f53\u4f60\u90e8\u7f72\u6216\u8005\u542f\u52a8\u5e94\u7528\u65f6\uff0c\u5b83\u53ef\u4ee5\u8f7b\u6613\u5730\u91cd\u5199\u914d\u7f6e\uff0c\u6bd4\u5982\uff0c\u6539\u53d8dubbo\u534f\u8bae\u7aef\u53e3\uff1b XML, XML\u4e2d\u7684\u5f53\u524d\u914d\u7f6e\u4f1a\u91cd\u5199dubbo.properties\u4e2d\u7684\uff1b Properties\uff0c\u9ed8\u8ba4\u914d\u7f6e\uff0c\u4ec5\u4ec5\u4f5c\u7528\u4e8e\u4ee5\u4e0a\u4e24\u8005\u6ca1\u6709\u914d\u7f6e\u65f6\u3002 1\uff1a\u5982\u679c\u5728classpath\u4e0b\u6709\u8d85\u8fc7\u4e00\u4e2adubbo.properties\u6587\u4ef6\uff0c\u6bd4\u5982\uff0c\u4e24\u4e2ajar\u5305\u90fd\u5404\u81ea\u5305\u542b\u4e86dubbo.properties\uff0cdubbo\u5c06\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u52a0\u8f7d\uff0c\u5e76\u4e14\u6253\u5370\u9519\u8bef\u65e5\u5fd7\u3002 2\uff1a\u5982\u679c id \u6ca1\u6709\u5728 protocol \u4e2d\u914d\u7f6e\uff0c\u5c06\u4f7f\u7528 name \u4f5c\u4e3a\u9ed8\u8ba4\u5c5e\u6027\u3002","title":"\u5c5e\u6027\u914d\u7f6e"},{"location":"user/configuration/properties/#_1","text":"\u5982\u679c\u4f60\u7684\u5e94\u7528\u8db3\u591f\u7b80\u5355\uff0c\u4f8b\u5982\uff0c\u4e0d\u9700\u8981\u591a\u6ce8\u518c\u4e2d\u5fc3\u6216\u591a\u534f\u8bae\uff0c\u5e76\u4e14\u9700\u8981\u5728spring\u5bb9\u5668\u4e2d\u5171\u4eab\u914d\u7f6e\uff0c\u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 dubbo.properties \u4f5c\u4e3a\u9ed8\u8ba4\u914d\u7f6e\u3002 Dubbo\u53ef\u4ee5\u81ea\u52a8\u52a0\u8f7dclasspath\u6839\u76ee\u5f55\u4e0b\u7684dubbo.properties\uff0c\u4f46\u662f\u4f60\u540c\u6837\u53ef\u4ee5\u4f7f\u7528JVM\u53c2\u6570\u6765\u6307\u5b9a\u8def\u5f84\uff1a -Ddubbo.properties.file=xxx.properties \u3002","title":"\u5c5e\u6027\u914d\u7f6e"},{"location":"user/configuration/properties/#_2","text":"\u53ef\u4ee5\u5c06xml\u7684tag\u540d\u548c\u5c5e\u6027\u540d\u7ec4\u5408\u8d77\u6765\uff0c\u7528\u2018.\u2019\u5206\u9694\u3002\u6bcf\u884c\u4e00\u4e2a\u5c5e\u6027\u3002 dubbo.application.name=foo \u76f8\u5f53\u4e8e dubbo:application name=\"foo\" / dubbo.registry.address=10.20.153.10:9090 \u76f8\u5f53\u4e8e dubbo:registry address=\"10.20.153.10:9090\" / \u5982\u679c\u5728xml\u914d\u7f6e\u4e2d\u6709\u8d85\u8fc7\u4e00\u4e2a\u7684tag\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4f7f\u7528\u2018id\u2019\u8fdb\u884c\u533a\u5206\u3002\u5982\u679c\u4f60\u4e0d\u6307\u5b9aid\uff0c\u5b83\u5c06\u4f5c\u7528\u4e8e\u6240\u6709tag\u3002 dubbo.protocol.rmi.port=1099 \u76f8\u5f53\u4e8e dubbo:protocol id=\"rmi\" name=\"rmi\" port=\"1099\" / dubbo.registry.china.address=10.20.153.10:9090 \u76f8\u5f53\u4e8e dubbo:registry id=\"china\" address=\"10.20.153.10:9090\" / \u5982\u4e0b\uff0c\u662f\u4e00\u4e2a\u5178\u578b\u7684dubbo.properties\u914d\u7f6e\u6837\u4f8b\u3002 dubbo.application.name=foo dubbo.application.owner=bar dubbo.registry.address=10.20.153.10:9090","title":"\u6620\u5c04\u89c4\u5219"},{"location":"user/configuration/properties/#_3","text":"\u4f18\u5148\u7ea7\u4ece\u9ad8\u5230\u4f4e\uff1a JVM -D\u53c2\u6570\uff0c\u5f53\u4f60\u90e8\u7f72\u6216\u8005\u542f\u52a8\u5e94\u7528\u65f6\uff0c\u5b83\u53ef\u4ee5\u8f7b\u6613\u5730\u91cd\u5199\u914d\u7f6e\uff0c\u6bd4\u5982\uff0c\u6539\u53d8dubbo\u534f\u8bae\u7aef\u53e3\uff1b XML, XML\u4e2d\u7684\u5f53\u524d\u914d\u7f6e\u4f1a\u91cd\u5199dubbo.properties\u4e2d\u7684\uff1b Properties\uff0c\u9ed8\u8ba4\u914d\u7f6e\uff0c\u4ec5\u4ec5\u4f5c\u7528\u4e8e\u4ee5\u4e0a\u4e24\u8005\u6ca1\u6709\u914d\u7f6e\u65f6\u3002 1\uff1a\u5982\u679c\u5728classpath\u4e0b\u6709\u8d85\u8fc7\u4e00\u4e2adubbo.properties\u6587\u4ef6\uff0c\u6bd4\u5982\uff0c\u4e24\u4e2ajar\u5305\u90fd\u5404\u81ea\u5305\u542b\u4e86dubbo.properties\uff0cdubbo\u5c06\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u52a0\u8f7d\uff0c\u5e76\u4e14\u6253\u5370\u9519\u8bef\u65e5\u5fd7\u3002 2\uff1a\u5982\u679c id \u6ca1\u6709\u5728 protocol \u4e2d\u914d\u7f6e\uff0c\u5c06\u4f7f\u7528 name \u4f5c\u4e3a\u9ed8\u8ba4\u5c5e\u6027\u3002","title":"\u91cd\u5199\u4e0e\u4f18\u5148\u7ea7"},{"location":"user/configuration/xml/","text":"XML \u914d\u7f6e \u6709\u5173 XML \u7684\u8be6\u7ec6\u914d\u7f6e\u9879\uff0c\u8bf7\u53c2\u89c1\uff1a \u914d\u7f6e\u53c2\u8003\u624b\u518c \u3002\u5982\u679c\u4e0d\u60f3\u4f7f\u7528 Spring \u914d\u7f6e\uff0c\u800c\u5e0c\u671b\u901a\u8fc7 API \u7684\u65b9\u5f0f\u8fdb\u884c\u8c03\u7528\uff0c\u8bf7\u53c2\u89c1\uff1a API\u914d\u7f6e \u3002\u60f3\u77e5\u9053\u5982\u4f55\u4f7f\u7528\u914d\u7f6e\uff0c\u8bf7\u53c2\u89c1\uff1a \u5feb\u901f\u542f\u52a8 \u3002 \u8bf7\u5728\u6b64\u67e5\u770b\u6587\u6863\u63cf\u8ff0\u7684 \u5b8c\u6574\u793a\u4f8b provider.xml \u793a\u4f8b beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xmlns= http://www.springframework.org/schema/beans xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd dubbo:application name= demo-provider / dubbo:registry address= zookeeper://127.0.0.1:2181 / dubbo:protocol name= dubbo port= 20890 / bean id= demoService class= org.apache.dubbo.samples.basic.impl.DemoServiceImpl / dubbo:service interface= org.apache.dubbo.samples.basic.api.DemoService ref= demoService / /beans consumer.xml\u793a\u4f8b beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xmlns= http://www.springframework.org/schema/beans xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd dubbo:application name= demo-consumer / dubbo:registry group= aaa address= zookeeper://127.0.0.1:2181 / dubbo:reference id= demoService check= false interface= org.apache.dubbo.samples.basic.api.DemoService / /beans \u6240\u6709\u6807\u7b7e\u90fd\u652f\u6301\u81ea\u5b9a\u4e49\u53c2\u6570\uff0c\u7528\u4e8e\u4e0d\u540c\u6269\u5c55\u70b9\u5b9e\u73b0\u7684\u7279\u6b8a\u914d\u7f6e\uff0c\u5982\uff1a dubbo:protocol name= jms dubbo:parameter key= queue value= your_queue / /dubbo:protocol \u6216\uff1a [^1] beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xmlns:p= http://www.springframework.org/schema/p xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd dubbo:protocol name= jms p:queue= your_queue / /beans \u914d\u7f6e\u4e4b\u95f4\u7684\u5173\u7cfb \u6807\u7b7e \u7528\u9014 \u89e3\u91ca dubbo:service/ \u670d\u52a1\u914d\u7f6e \u7528\u4e8e\u66b4\u9732\u4e00\u4e2a\u670d\u52a1\uff0c\u5b9a\u4e49\u670d\u52a1\u7684\u5143\u4fe1\u606f\uff0c\u4e00\u4e2a\u670d\u52a1\u53ef\u4ee5\u7528\u591a\u4e2a\u534f\u8bae\u66b4\u9732\uff0c\u4e00\u4e2a\u670d\u52a1\u4e5f\u53ef\u4ee5\u6ce8\u518c\u5230\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3 dubbo:reference/ [^2] \u5f15\u7528\u914d\u7f6e \u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u8fdc\u7a0b\u670d\u52a1\u4ee3\u7406\uff0c\u4e00\u4e2a\u5f15\u7528\u53ef\u4ee5\u6307\u5411\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3 dubbo:protocol/ \u534f\u8bae\u914d\u7f6e \u7528\u4e8e\u914d\u7f6e\u63d0\u4f9b\u670d\u52a1\u7684\u534f\u8bae\u4fe1\u606f\uff0c\u534f\u8bae\u7531\u63d0\u4f9b\u65b9\u6307\u5b9a\uff0c\u6d88\u8d39\u65b9\u88ab\u52a8\u63a5\u53d7 dubbo:application/ \u5e94\u7528\u914d\u7f6e \u7528\u4e8e\u914d\u7f6e\u5f53\u524d\u5e94\u7528\u4fe1\u606f\uff0c\u4e0d\u7ba1\u8be5\u5e94\u7528\u662f\u63d0\u4f9b\u8005\u8fd8\u662f\u6d88\u8d39\u8005 dubbo:module/ \u6a21\u5757\u914d\u7f6e \u7528\u4e8e\u914d\u7f6e\u5f53\u524d\u6a21\u5757\u4fe1\u606f\uff0c\u53ef\u9009 dubbo:registry/ \u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e \u7528\u4e8e\u914d\u7f6e\u8fde\u63a5\u6ce8\u518c\u4e2d\u5fc3\u76f8\u5173\u4fe1\u606f dubbo:monitor/ \u76d1\u63a7\u4e2d\u5fc3\u914d\u7f6e \u7528\u4e8e\u914d\u7f6e\u8fde\u63a5\u76d1\u63a7\u4e2d\u5fc3\u76f8\u5173\u4fe1\u606f\uff0c\u53ef\u9009 dubbo:provider/ \u63d0\u4f9b\u65b9\u914d\u7f6e \u5f53 ProtocolConfig \u548c ServiceConfig \u67d0\u5c5e\u6027\u6ca1\u6709\u914d\u7f6e\u65f6\uff0c\u91c7\u7528\u6b64\u7f3a\u7701\u503c\uff0c\u53ef\u9009 dubbo:consumer/ \u6d88\u8d39\u65b9\u914d\u7f6e \u5f53 ReferenceConfig \u67d0\u5c5e\u6027\u6ca1\u6709\u914d\u7f6e\u65f6\uff0c\u91c7\u7528\u6b64\u7f3a\u7701\u503c\uff0c\u53ef\u9009 dubbo:method/ \u65b9\u6cd5\u914d\u7f6e \u7528\u4e8e ServiceConfig \u548c ReferenceConfig \u6307\u5b9a\u65b9\u6cd5\u7ea7\u7684\u914d\u7f6e\u4fe1\u606f dubbo:argument/ \u53c2\u6570\u914d\u7f6e \u7528\u4e8e\u6307\u5b9a\u65b9\u6cd5\u53c2\u6570\u914d\u7f6e \u4e0d\u540c\u7c92\u5ea6\u914d\u7f6e\u7684\u8986\u76d6\u5173\u7cfb \u4ee5 timeout \u4e3a\u4f8b\uff0c\u4e0b\u56fe\u663e\u793a\u4e86\u914d\u7f6e\u7684\u67e5\u627e\u987a\u5e8f\uff0c\u5176\u5b83 retries, loadbalance, actives \u7b49\u7c7b\u4f3c\uff1a \u65b9\u6cd5\u7ea7\u4f18\u5148\uff0c\u63a5\u53e3\u7ea7\u6b21\u4e4b\uff0c\u5168\u5c40\u914d\u7f6e\u518d\u6b21\u4e4b\u3002 \u5982\u679c\u7ea7\u522b\u4e00\u6837\uff0c\u5219\u6d88\u8d39\u65b9\u4f18\u5148\uff0c\u63d0\u4f9b\u65b9\u6b21\u4e4b\u3002 \u5176\u4e2d\uff0c\u670d\u52a1\u63d0\u4f9b\u65b9\u914d\u7f6e\uff0c\u901a\u8fc7 URL \u7ecf\u7531\u6ce8\u518c\u4e2d\u5fc3\u4f20\u9012\u7ed9\u6d88\u8d39\u65b9\u3002 \uff08\u5efa\u8bae\u7531\u670d\u52a1\u63d0\u4f9b\u65b9\u8bbe\u7f6e\u8d85\u65f6\uff0c\u56e0\u4e3a\u4e00\u4e2a\u65b9\u6cd5\u9700\u8981\u6267\u884c\u591a\u957f\u65f6\u95f4\uff0c\u670d\u52a1\u63d0\u4f9b\u65b9\u66f4\u6e05\u695a\uff0c\u5982\u679c\u4e00\u4e2a\u6d88\u8d39\u65b9\u540c\u65f6\u5f15\u7528\u591a\u4e2a\u670d\u52a1\uff0c\u5c31\u4e0d\u9700\u8981\u5173\u5fc3\u6bcf\u4e2a\u670d\u52a1\u7684\u8d85\u65f6\u8bbe\u7f6e\uff09\u3002 \u7406\u8bba\u4e0a ReferenceConfig \u4e2d\u9664\u4e86 interface \u8fd9\u4e00\u9879\uff0c\u5176\u4ed6\u6240\u6709\u914d\u7f6e\u9879\u90fd\u53ef\u4ee5\u7f3a\u7701\u4e0d\u914d\u7f6e\uff0c\u6846\u67b6\u4f1a\u81ea\u52a8\u4f7f\u7528ConsumerConfig\uff0cServiceConfig, ProviderConfig\u7b49\u63d0\u4f9b\u7684\u7f3a\u7701\u914d\u7f6e\u3002 [^1]: 2.1.0 \u5f00\u59cb\u652f\u6301\uff0c\u6ce8\u610f\u58f0\u660e\uff1a xmlns:p=\"http://www.springframework.org/schema/p\" [^2]: \u5f15\u7528\u7f3a\u7701\u662f\u5ef6\u8fdf\u521d\u59cb\u5316\u7684\uff0c\u53ea\u6709\u5f15\u7528\u88ab\u6ce8\u5165\u5230\u5176\u5b83 Bean\uff0c\u6216\u88ab getBean() \u83b7\u53d6\uff0c\u624d\u4f1a\u521d\u59cb\u5316\u3002\u5982\u679c\u9700\u8981\u9965\u997f\u52a0\u8f7d\uff0c\u5373\u6ca1\u6709\u4eba\u5f15\u7528\u4e5f\u7acb\u5373\u751f\u6210\u52a8\u6001\u4ee3\u7406\uff0c\u53ef\u4ee5\u914d\u7f6e\uff1a dubbo:reference ... init=\"true\" /","title":"XML \u914d\u7f6e"},{"location":"user/configuration/xml/#xml","text":"\u6709\u5173 XML \u7684\u8be6\u7ec6\u914d\u7f6e\u9879\uff0c\u8bf7\u53c2\u89c1\uff1a \u914d\u7f6e\u53c2\u8003\u624b\u518c \u3002\u5982\u679c\u4e0d\u60f3\u4f7f\u7528 Spring \u914d\u7f6e\uff0c\u800c\u5e0c\u671b\u901a\u8fc7 API \u7684\u65b9\u5f0f\u8fdb\u884c\u8c03\u7528\uff0c\u8bf7\u53c2\u89c1\uff1a API\u914d\u7f6e \u3002\u60f3\u77e5\u9053\u5982\u4f55\u4f7f\u7528\u914d\u7f6e\uff0c\u8bf7\u53c2\u89c1\uff1a \u5feb\u901f\u542f\u52a8 \u3002 \u8bf7\u5728\u6b64\u67e5\u770b\u6587\u6863\u63cf\u8ff0\u7684 \u5b8c\u6574\u793a\u4f8b","title":"XML \u914d\u7f6e"},{"location":"user/configuration/xml/#providerxml","text":"beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xmlns= http://www.springframework.org/schema/beans xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd dubbo:application name= demo-provider / dubbo:registry address= zookeeper://127.0.0.1:2181 / dubbo:protocol name= dubbo port= 20890 / bean id= demoService class= org.apache.dubbo.samples.basic.impl.DemoServiceImpl / dubbo:service interface= org.apache.dubbo.samples.basic.api.DemoService ref= demoService / /beans","title":"provider.xml \u793a\u4f8b"},{"location":"user/configuration/xml/#consumerxml","text":"beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xmlns= http://www.springframework.org/schema/beans xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd dubbo:application name= demo-consumer / dubbo:registry group= aaa address= zookeeper://127.0.0.1:2181 / dubbo:reference id= demoService check= false interface= org.apache.dubbo.samples.basic.api.DemoService / /beans \u6240\u6709\u6807\u7b7e\u90fd\u652f\u6301\u81ea\u5b9a\u4e49\u53c2\u6570\uff0c\u7528\u4e8e\u4e0d\u540c\u6269\u5c55\u70b9\u5b9e\u73b0\u7684\u7279\u6b8a\u914d\u7f6e\uff0c\u5982\uff1a dubbo:protocol name= jms dubbo:parameter key= queue value= your_queue / /dubbo:protocol \u6216\uff1a [^1] beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xmlns:p= http://www.springframework.org/schema/p xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd dubbo:protocol name= jms p:queue= your_queue / /beans","title":"consumer.xml\u793a\u4f8b"},{"location":"user/configuration/xml/#_1","text":"\u6807\u7b7e \u7528\u9014 \u89e3\u91ca dubbo:service/ \u670d\u52a1\u914d\u7f6e \u7528\u4e8e\u66b4\u9732\u4e00\u4e2a\u670d\u52a1\uff0c\u5b9a\u4e49\u670d\u52a1\u7684\u5143\u4fe1\u606f\uff0c\u4e00\u4e2a\u670d\u52a1\u53ef\u4ee5\u7528\u591a\u4e2a\u534f\u8bae\u66b4\u9732\uff0c\u4e00\u4e2a\u670d\u52a1\u4e5f\u53ef\u4ee5\u6ce8\u518c\u5230\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3 dubbo:reference/ [^2] \u5f15\u7528\u914d\u7f6e \u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u8fdc\u7a0b\u670d\u52a1\u4ee3\u7406\uff0c\u4e00\u4e2a\u5f15\u7528\u53ef\u4ee5\u6307\u5411\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3 dubbo:protocol/ \u534f\u8bae\u914d\u7f6e \u7528\u4e8e\u914d\u7f6e\u63d0\u4f9b\u670d\u52a1\u7684\u534f\u8bae\u4fe1\u606f\uff0c\u534f\u8bae\u7531\u63d0\u4f9b\u65b9\u6307\u5b9a\uff0c\u6d88\u8d39\u65b9\u88ab\u52a8\u63a5\u53d7 dubbo:application/ \u5e94\u7528\u914d\u7f6e \u7528\u4e8e\u914d\u7f6e\u5f53\u524d\u5e94\u7528\u4fe1\u606f\uff0c\u4e0d\u7ba1\u8be5\u5e94\u7528\u662f\u63d0\u4f9b\u8005\u8fd8\u662f\u6d88\u8d39\u8005 dubbo:module/ \u6a21\u5757\u914d\u7f6e \u7528\u4e8e\u914d\u7f6e\u5f53\u524d\u6a21\u5757\u4fe1\u606f\uff0c\u53ef\u9009 dubbo:registry/ \u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e \u7528\u4e8e\u914d\u7f6e\u8fde\u63a5\u6ce8\u518c\u4e2d\u5fc3\u76f8\u5173\u4fe1\u606f dubbo:monitor/ \u76d1\u63a7\u4e2d\u5fc3\u914d\u7f6e \u7528\u4e8e\u914d\u7f6e\u8fde\u63a5\u76d1\u63a7\u4e2d\u5fc3\u76f8\u5173\u4fe1\u606f\uff0c\u53ef\u9009 dubbo:provider/ \u63d0\u4f9b\u65b9\u914d\u7f6e \u5f53 ProtocolConfig \u548c ServiceConfig \u67d0\u5c5e\u6027\u6ca1\u6709\u914d\u7f6e\u65f6\uff0c\u91c7\u7528\u6b64\u7f3a\u7701\u503c\uff0c\u53ef\u9009 dubbo:consumer/ \u6d88\u8d39\u65b9\u914d\u7f6e \u5f53 ReferenceConfig \u67d0\u5c5e\u6027\u6ca1\u6709\u914d\u7f6e\u65f6\uff0c\u91c7\u7528\u6b64\u7f3a\u7701\u503c\uff0c\u53ef\u9009 dubbo:method/ \u65b9\u6cd5\u914d\u7f6e \u7528\u4e8e ServiceConfig \u548c ReferenceConfig \u6307\u5b9a\u65b9\u6cd5\u7ea7\u7684\u914d\u7f6e\u4fe1\u606f dubbo:argument/ \u53c2\u6570\u914d\u7f6e \u7528\u4e8e\u6307\u5b9a\u65b9\u6cd5\u53c2\u6570\u914d\u7f6e","title":"\u914d\u7f6e\u4e4b\u95f4\u7684\u5173\u7cfb"},{"location":"user/configuration/xml/#_2","text":"\u4ee5 timeout \u4e3a\u4f8b\uff0c\u4e0b\u56fe\u663e\u793a\u4e86\u914d\u7f6e\u7684\u67e5\u627e\u987a\u5e8f\uff0c\u5176\u5b83 retries, loadbalance, actives \u7b49\u7c7b\u4f3c\uff1a \u65b9\u6cd5\u7ea7\u4f18\u5148\uff0c\u63a5\u53e3\u7ea7\u6b21\u4e4b\uff0c\u5168\u5c40\u914d\u7f6e\u518d\u6b21\u4e4b\u3002 \u5982\u679c\u7ea7\u522b\u4e00\u6837\uff0c\u5219\u6d88\u8d39\u65b9\u4f18\u5148\uff0c\u63d0\u4f9b\u65b9\u6b21\u4e4b\u3002 \u5176\u4e2d\uff0c\u670d\u52a1\u63d0\u4f9b\u65b9\u914d\u7f6e\uff0c\u901a\u8fc7 URL \u7ecf\u7531\u6ce8\u518c\u4e2d\u5fc3\u4f20\u9012\u7ed9\u6d88\u8d39\u65b9\u3002 \uff08\u5efa\u8bae\u7531\u670d\u52a1\u63d0\u4f9b\u65b9\u8bbe\u7f6e\u8d85\u65f6\uff0c\u56e0\u4e3a\u4e00\u4e2a\u65b9\u6cd5\u9700\u8981\u6267\u884c\u591a\u957f\u65f6\u95f4\uff0c\u670d\u52a1\u63d0\u4f9b\u65b9\u66f4\u6e05\u695a\uff0c\u5982\u679c\u4e00\u4e2a\u6d88\u8d39\u65b9\u540c\u65f6\u5f15\u7528\u591a\u4e2a\u670d\u52a1\uff0c\u5c31\u4e0d\u9700\u8981\u5173\u5fc3\u6bcf\u4e2a\u670d\u52a1\u7684\u8d85\u65f6\u8bbe\u7f6e\uff09\u3002 \u7406\u8bba\u4e0a ReferenceConfig \u4e2d\u9664\u4e86 interface \u8fd9\u4e00\u9879\uff0c\u5176\u4ed6\u6240\u6709\u914d\u7f6e\u9879\u90fd\u53ef\u4ee5\u7f3a\u7701\u4e0d\u914d\u7f6e\uff0c\u6846\u67b6\u4f1a\u81ea\u52a8\u4f7f\u7528ConsumerConfig\uff0cServiceConfig, ProviderConfig\u7b49\u63d0\u4f9b\u7684\u7f3a\u7701\u914d\u7f6e\u3002 [^1]: 2.1.0 \u5f00\u59cb\u652f\u6301\uff0c\u6ce8\u610f\u58f0\u660e\uff1a xmlns:p=\"http://www.springframework.org/schema/p\" [^2]: \u5f15\u7528\u7f3a\u7701\u662f\u5ef6\u8fdf\u521d\u59cb\u5316\u7684\uff0c\u53ea\u6709\u5f15\u7528\u88ab\u6ce8\u5165\u5230\u5176\u5b83 Bean\uff0c\u6216\u88ab getBean() \u83b7\u53d6\uff0c\u624d\u4f1a\u521d\u59cb\u5316\u3002\u5982\u679c\u9700\u8981\u9965\u997f\u52a0\u8f7d\uff0c\u5373\u6ca1\u6709\u4eba\u5f15\u7528\u4e5f\u7acb\u5373\u751f\u6210\u52a8\u6001\u4ee3\u7406\uff0c\u53ef\u4ee5\u914d\u7f6e\uff1a dubbo:reference ... init=\"true\" /","title":"\u4e0d\u540c\u7c92\u5ea6\u914d\u7f6e\u7684\u8986\u76d6\u5173\u7cfb"},{"location":"user/demos/","text":"\u793a\u4f8b","title":"\u793a\u4f8b"},{"location":"user/demos/#_1","text":"","title":"\u793a\u4f8b"},{"location":"user/demos/GooglePb-generic-reference/","text":"GoogleProtobuf\u5bf9\u8c61\u6cdb\u5316\u8c03\u7528 \u6cdb\u5316\u63a5\u53e3\u8c03\u7528\u65b9\u5f0f\u4e3b\u8981\u7528\u4e8e\u5ba2\u6237\u7aef\u6ca1\u6709 API \u63a5\u53e3\u53ca\u6a21\u578b\u7c7b\u5143\u7684\u60c5\u51b5\uff0c\u53c2\u8003 \u6cdb\u5316\u8c03\u7528 \u3002 \u4e00\u822c\u6cdb\u5316\u8c03\u7528\u53ea\u80fd\u7528\u4e8e\u751f\u6210\u7684\u670d\u52a1\u53c2\u6570\u4e3aPOJO\u7684\u60c5\u51b5\uff0c\u800cGoogleProtobuf\u7684\u5bf9\u8c61\u662f\u57fa\u4e8eBuilder\u751f\u6210\u7684\u975e\u6b63\u5e38POJO\uff0c\u53ef\u4ee5\u901a\u8fc7protobuf-json\u6cdb\u5316\u8c03\u7528\u3002 GoogleProtobuf\u5e8f\u5217\u5316\u76f8\u5173\u7684Demo\u53ef\u4ee5\u53c2\u8003 protobuf-demo \u901a\u8fc7Spring\u5bf9Goolgle Protobuf\u5bf9\u8c61\u6cdb\u5316\u8c03\u7528 \u5728Spring\u4e2d\u914d\u7f6e\u58f0\u660egeneric = \"protobuf-json\" dubbo:reference id= barService interface= com.foo.BarService generic= protobuf-json / \u5728 Java \u4ee3\u7801\u83b7\u53d6 barService \u5e76\u5f00\u59cb\u6cdb\u5316\u8c03\u7528\uff1a GenericService barService = (GenericService) applicationContext.getBean( barService ); Object result = barService.$invoke( sayHello ,new String[]{ org.apache.dubbo.protobuf.GooglePbBasic$CDubboGooglePBRequestType }, new Object[]{ {\\ double\\ :0.0,\\ float\\ :0.0,\\ bytesType\\ :\\ Base64String\\ ,\\ int32\\ :0} }); \u901a\u8fc7 API \u65b9\u5f0f\u5bf9Goolgle Protobuf\u5bf9\u8c61\u6cdb\u5316\u8c03\u7528 ReferenceConfig GenericService reference = new ReferenceConfig GenericService (); // \u5f31\u7c7b\u578b\u63a5\u53e3\u540d reference.setInterface(GenericService.class.getName()); reference.setInterface( com.xxx.XxxService ); // \u58f0\u660e\u4e3aProtobuf-json reference.setGeneric(Constants.GENERIC_SERIALIZATION_PROTOBUF); GenericService genericService = reference.get(); Map String, Object person = new HashMap String, Object (); person.put( fixed64 , 0 ); person.put( int64 , 0 ); // \u53c2\u8003google\u5b98\u65b9\u7684protobuf 3 \u7684\u8bed\u6cd5\uff0c\u670d\u52a1\u7684\u6bcf\u4e2a\u65b9\u6cd5\u4e2d\u53ea\u4f20\u8f93\u4e00\u4e2aPOJO\u5bf9\u8c61 // protobuf\u7684\u6cdb\u5316\u8c03\u7528\u53ea\u5141\u8bb8\u4f20\u9012\u4e00\u4e2a\u7c7b\u578b\u4e3aString\u7684json\u5bf9\u8c61\u6765\u4ee3\u8868\u8bf7\u6c42\u53c2\u6570 String requestString = new Gson().toJson(person); // \u8fd4\u56de\u5bf9\u8c61\u662fGoolgeProtobuf\u54cd\u5e94\u5bf9\u8c61\u7684json\u5b57\u7b26\u4e32\u3002 Object result = genericService.$invoke( sayHello , new String[] { com.xxx.XxxService.GooglePbBasic$CDubboGooglePBRequestType }, new Object[] {requestString}); \u6709\u5173GoogleProtobuf\u5bf9\u8c61\u7684\u5904\u7406 GoogleProtobuf\u5bf9\u8c61\u662f\u7531Protocol\u5951\u7ea6\u751f\u6210,\u76f8\u5173\u77e5\u8bc6\u8bf7\u53c2\u8003 ProtocolBuffers\u6587\u6863 \u3002 \u5047\u5982\u6709\u5982\u4e0bProtobuf \u5951\u7ea6 syntax = proto3 ; package com.xxx.XxxService.GooglePbBasic.basic; message CDubboGooglePBRequestType { double double = 1; float float = 2; int32 int32 = 3; bool bool = 13; string string = 14; bytes bytesType = 15; } message CDubboGooglePBResponseType { string msg = 1; } service CDubboGooglePBService { rpc sayHello (CDubboGooglePBRequestType) returns (CDubboGooglePBResponseType); } \u5219\u5bf9\u5e94\u8bf7\u6c42\u6309\u7167\u5982\u4e0b\u65b9\u6cd5\u6784\u9020 Map String, Object person = new HashMap (); person.put( double , 1.000 ); person.put( float , 1.00 ); person.put( int32 , 1 ); person.put( bool , false ); //String \u7684\u5bf9\u8c61\u9700\u8981\u7ecf\u8fc7base64\u7f16\u7801 person.put( string , someBaseString ); person.put( bytesType , 150 ); GoogleProtobuf\u670d\u52a1\u5143\u6570\u636e\u89e3\u6790 Google Protobuf\u5bf9\u8c61\u7f3a\u5c11\u6807\u51c6\u7684JSON\u683c\u5f0f\uff0c\u751f\u6210\u7684\u670d\u52a1\u5143\u6570\u636e\u4fe1\u606f\u5b58\u5728\u9519\u8bef\u3002 \u8bf7\u6dfb\u52a0\u5982\u4e0b\u4f9d\u8d56\u5143\u6570\u636e\u89e3\u6790\u7684\u4f9d\u8d56\u3002 dependency groupId org.apache.dubbo /groupId artifactId dubbo-metadata-definition-protobuf /artifactId version ${dubbo.version} /version /dependency \u4ece\u670d\u52a1\u5143\u6570\u636e\u4e2d\u4e5f\u53ef\u4ee5\u6bd4\u8f83\u5bb9\u6613\u6784\u5efa\u6cdb\u5316\u8c03\u7528\u5bf9\u8c61\u3002","title":"GoogleProtobuf\u5bf9\u8c61\u6cdb\u5316\u8c03\u7528"},{"location":"user/demos/GooglePb-generic-reference/#googleprotobuf","text":"\u6cdb\u5316\u63a5\u53e3\u8c03\u7528\u65b9\u5f0f\u4e3b\u8981\u7528\u4e8e\u5ba2\u6237\u7aef\u6ca1\u6709 API \u63a5\u53e3\u53ca\u6a21\u578b\u7c7b\u5143\u7684\u60c5\u51b5\uff0c\u53c2\u8003 \u6cdb\u5316\u8c03\u7528 \u3002 \u4e00\u822c\u6cdb\u5316\u8c03\u7528\u53ea\u80fd\u7528\u4e8e\u751f\u6210\u7684\u670d\u52a1\u53c2\u6570\u4e3aPOJO\u7684\u60c5\u51b5\uff0c\u800cGoogleProtobuf\u7684\u5bf9\u8c61\u662f\u57fa\u4e8eBuilder\u751f\u6210\u7684\u975e\u6b63\u5e38POJO\uff0c\u53ef\u4ee5\u901a\u8fc7protobuf-json\u6cdb\u5316\u8c03\u7528\u3002 GoogleProtobuf\u5e8f\u5217\u5316\u76f8\u5173\u7684Demo\u53ef\u4ee5\u53c2\u8003 protobuf-demo","title":"GoogleProtobuf\u5bf9\u8c61\u6cdb\u5316\u8c03\u7528"},{"location":"user/demos/GooglePb-generic-reference/#springgoolgle-protobuf","text":"\u5728Spring\u4e2d\u914d\u7f6e\u58f0\u660egeneric = \"protobuf-json\" dubbo:reference id= barService interface= com.foo.BarService generic= protobuf-json / \u5728 Java \u4ee3\u7801\u83b7\u53d6 barService \u5e76\u5f00\u59cb\u6cdb\u5316\u8c03\u7528\uff1a GenericService barService = (GenericService) applicationContext.getBean( barService ); Object result = barService.$invoke( sayHello ,new String[]{ org.apache.dubbo.protobuf.GooglePbBasic$CDubboGooglePBRequestType }, new Object[]{ {\\ double\\ :0.0,\\ float\\ :0.0,\\ bytesType\\ :\\ Base64String\\ ,\\ int32\\ :0} });","title":"\u901a\u8fc7Spring\u5bf9Goolgle Protobuf\u5bf9\u8c61\u6cdb\u5316\u8c03\u7528"},{"location":"user/demos/GooglePb-generic-reference/#api-goolgle-protobuf","text":"ReferenceConfig GenericService reference = new ReferenceConfig GenericService (); // \u5f31\u7c7b\u578b\u63a5\u53e3\u540d reference.setInterface(GenericService.class.getName()); reference.setInterface( com.xxx.XxxService ); // \u58f0\u660e\u4e3aProtobuf-json reference.setGeneric(Constants.GENERIC_SERIALIZATION_PROTOBUF); GenericService genericService = reference.get(); Map String, Object person = new HashMap String, Object (); person.put( fixed64 , 0 ); person.put( int64 , 0 ); // \u53c2\u8003google\u5b98\u65b9\u7684protobuf 3 \u7684\u8bed\u6cd5\uff0c\u670d\u52a1\u7684\u6bcf\u4e2a\u65b9\u6cd5\u4e2d\u53ea\u4f20\u8f93\u4e00\u4e2aPOJO\u5bf9\u8c61 // protobuf\u7684\u6cdb\u5316\u8c03\u7528\u53ea\u5141\u8bb8\u4f20\u9012\u4e00\u4e2a\u7c7b\u578b\u4e3aString\u7684json\u5bf9\u8c61\u6765\u4ee3\u8868\u8bf7\u6c42\u53c2\u6570 String requestString = new Gson().toJson(person); // \u8fd4\u56de\u5bf9\u8c61\u662fGoolgeProtobuf\u54cd\u5e94\u5bf9\u8c61\u7684json\u5b57\u7b26\u4e32\u3002 Object result = genericService.$invoke( sayHello , new String[] { com.xxx.XxxService.GooglePbBasic$CDubboGooglePBRequestType }, new Object[] {requestString});","title":"\u901a\u8fc7 API \u65b9\u5f0f\u5bf9Goolgle Protobuf\u5bf9\u8c61\u6cdb\u5316\u8c03\u7528"},{"location":"user/demos/GooglePb-generic-reference/#googleprotobuf_1","text":"GoogleProtobuf\u5bf9\u8c61\u662f\u7531Protocol\u5951\u7ea6\u751f\u6210,\u76f8\u5173\u77e5\u8bc6\u8bf7\u53c2\u8003 ProtocolBuffers\u6587\u6863 \u3002 \u5047\u5982\u6709\u5982\u4e0bProtobuf \u5951\u7ea6 syntax = proto3 ; package com.xxx.XxxService.GooglePbBasic.basic; message CDubboGooglePBRequestType { double double = 1; float float = 2; int32 int32 = 3; bool bool = 13; string string = 14; bytes bytesType = 15; } message CDubboGooglePBResponseType { string msg = 1; } service CDubboGooglePBService { rpc sayHello (CDubboGooglePBRequestType) returns (CDubboGooglePBResponseType); } \u5219\u5bf9\u5e94\u8bf7\u6c42\u6309\u7167\u5982\u4e0b\u65b9\u6cd5\u6784\u9020 Map String, Object person = new HashMap (); person.put( double , 1.000 ); person.put( float , 1.00 ); person.put( int32 , 1 ); person.put( bool , false ); //String \u7684\u5bf9\u8c61\u9700\u8981\u7ecf\u8fc7base64\u7f16\u7801 person.put( string , someBaseString ); person.put( bytesType , 150 );","title":"\u6709\u5173GoogleProtobuf\u5bf9\u8c61\u7684\u5904\u7406"},{"location":"user/demos/GooglePb-generic-reference/#googleprotobuf_2","text":"Google Protobuf\u5bf9\u8c61\u7f3a\u5c11\u6807\u51c6\u7684JSON\u683c\u5f0f\uff0c\u751f\u6210\u7684\u670d\u52a1\u5143\u6570\u636e\u4fe1\u606f\u5b58\u5728\u9519\u8bef\u3002 \u8bf7\u6dfb\u52a0\u5982\u4e0b\u4f9d\u8d56\u5143\u6570\u636e\u89e3\u6790\u7684\u4f9d\u8d56\u3002 dependency groupId org.apache.dubbo /groupId artifactId dubbo-metadata-definition-protobuf /artifactId version ${dubbo.version} /version /dependency \u4ece\u670d\u52a1\u5143\u6570\u636e\u4e2d\u4e5f\u53ef\u4ee5\u6bd4\u8f83\u5bb9\u6613\u6784\u5efa\u6cdb\u5316\u8c03\u7528\u5bf9\u8c61\u3002","title":"GoogleProtobuf\u670d\u52a1\u5143\u6570\u636e\u89e3\u6790"},{"location":"user/demos/accesslog/","text":"\u8bbf\u95ee\u65e5\u5fd7 \u5982\u679c\u4f60\u60f3\u8bb0\u5f55\u6bcf\u4e00\u6b21\u8bf7\u6c42\u4fe1\u606f\uff0c\u53ef\u5f00\u542f\u8bbf\u95ee\u65e5\u5fd7\uff0c\u7c7b\u4f3c\u4e8eapache\u7684\u8bbf\u95ee\u65e5\u5fd7\u3002 \u6ce8\u610f \uff1a\u6b64\u65e5\u5fd7\u91cf\u6bd4\u8f83\u5927\uff0c\u8bf7\u6ce8\u610f\u78c1\u76d8\u5bb9\u91cf\u3002 \u5c06\u8bbf\u95ee\u65e5\u5fd7\u8f93\u51fa\u5230\u5f53\u524d\u5e94\u7528\u7684log4j\u65e5\u5fd7\uff1a dubbo:protocol accesslog= true / \u5c06\u8bbf\u95ee\u65e5\u5fd7\u8f93\u51fa\u5230\u6307\u5b9a\u6587\u4ef6\uff1a dubbo:protocol accesslog= http://10.20.160.198/wiki/display/dubbo/foo/bar.log /","title":"\u8bbf\u95ee\u65e5\u5fd7"},{"location":"user/demos/accesslog/#_1","text":"\u5982\u679c\u4f60\u60f3\u8bb0\u5f55\u6bcf\u4e00\u6b21\u8bf7\u6c42\u4fe1\u606f\uff0c\u53ef\u5f00\u542f\u8bbf\u95ee\u65e5\u5fd7\uff0c\u7c7b\u4f3c\u4e8eapache\u7684\u8bbf\u95ee\u65e5\u5fd7\u3002 \u6ce8\u610f \uff1a\u6b64\u65e5\u5fd7\u91cf\u6bd4\u8f83\u5927\uff0c\u8bf7\u6ce8\u610f\u78c1\u76d8\u5bb9\u91cf\u3002 \u5c06\u8bbf\u95ee\u65e5\u5fd7\u8f93\u51fa\u5230\u5f53\u524d\u5e94\u7528\u7684log4j\u65e5\u5fd7\uff1a dubbo:protocol accesslog= true / \u5c06\u8bbf\u95ee\u65e5\u5fd7\u8f93\u51fa\u5230\u6307\u5b9a\u6587\u4ef6\uff1a dubbo:protocol accesslog= http://10.20.160.198/wiki/display/dubbo/foo/bar.log /","title":"\u8bbf\u95ee\u65e5\u5fd7"},{"location":"user/demos/async-call-deprecated/","text":"\u5f02\u6b65\u8c03\u7528 \u57fa\u4e8e NIO \u7684\u975e\u963b\u585e\u5b9e\u73b0\u5e76\u884c\u8c03\u7528\uff0c\u5ba2\u6237\u7aef\u4e0d\u9700\u8981\u542f\u52a8\u591a\u7ebf\u7a0b\u5373\u53ef\u5b8c\u6210\u5e76\u884c\u8c03\u7528\u591a\u4e2a\u8fdc\u7a0b\u670d\u52a1\uff0c\u76f8\u5bf9\u591a\u7ebf\u7a0b\u5f00\u9500\u8f83\u5c0f\u3002 [^1] \u5728 consumer.xml \u4e2d\u914d\u7f6e\uff1a dubbo:reference id= fooService interface= com.alibaba.foo.FooService dubbo:method name= findFoo async= true / /dubbo:reference dubbo:reference id= barService interface= com.alibaba.bar.BarService dubbo:method name= findBar async= true / /dubbo:reference \u8c03\u7528\u4ee3\u7801: // \u6b64\u8c03\u7528\u4f1a\u7acb\u5373\u8fd4\u56denull fooService.findFoo(fooId); // \u62ff\u5230\u8c03\u7528\u7684Future\u5f15\u7528\uff0c\u5f53\u7ed3\u679c\u8fd4\u56de\u540e\uff0c\u4f1a\u88ab\u901a\u77e5\u548c\u8bbe\u7f6e\u5230\u6b64Future Future Foo fooFuture = RpcContext.getContext().getFuture(); // \u6b64\u8c03\u7528\u4f1a\u7acb\u5373\u8fd4\u56denull barService.findBar(barId); // \u62ff\u5230\u8c03\u7528\u7684Future\u5f15\u7528\uff0c\u5f53\u7ed3\u679c\u8fd4\u56de\u540e\uff0c\u4f1a\u88ab\u901a\u77e5\u548c\u8bbe\u7f6e\u5230\u6b64Future Future Bar barFuture = RpcContext.getContext().getFuture(); // \u6b64\u65f6findFoo\u548cfindBar\u7684\u8bf7\u6c42\u540c\u65f6\u5728\u6267\u884c\uff0c\u5ba2\u6237\u7aef\u4e0d\u9700\u8981\u542f\u52a8\u591a\u7ebf\u7a0b\u6765\u652f\u6301\u5e76\u884c\uff0c\u800c\u662f\u501f\u52a9NIO\u7684\u975e\u963b\u585e\u5b8c\u6210 // \u5982\u679cfoo\u5df2\u8fd4\u56de\uff0c\u76f4\u63a5\u62ff\u5230\u8fd4\u56de\u503c\uff0c\u5426\u5219\u7ebf\u7a0bwait\u4f4f\uff0c\u7b49\u5f85foo\u8fd4\u56de\u540e\uff0c\u7ebf\u7a0b\u4f1a\u88abnotify\u5524\u9192 Foo foo = fooFuture.get(); // \u540c\u7406\u7b49\u5f85bar\u8fd4\u56de Bar bar = barFuture.get(); // \u5982\u679cfoo\u9700\u89815\u79d2\u8fd4\u56de\uff0cbar\u9700\u89816\u79d2\u8fd4\u56de\uff0c\u5b9e\u9645\u53ea\u9700\u7b496\u79d2\uff0c\u5373\u53ef\u83b7\u53d6\u5230foo\u548cbar\uff0c\u8fdb\u884c\u63a5\u4e0b\u6765\u7684\u5904\u7406\u3002 \u4f60\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u662f\u5426\u7b49\u5f85\u6d88\u606f\u53d1\u51fa\uff1a ^2 sent=\"true\" \u7b49\u5f85\u6d88\u606f\u53d1\u51fa\uff0c\u6d88\u606f\u53d1\u9001\u5931\u8d25\u5c06\u629b\u51fa\u5f02\u5e38\u3002 sent=\"false\" \u4e0d\u7b49\u5f85\u6d88\u606f\u53d1\u51fa\uff0c\u5c06\u6d88\u606f\u653e\u5165 IO \u961f\u5217\uff0c\u5373\u523b\u8fd4\u56de\u3002 dubbo:method name= findFoo async= true sent= true / \u5982\u679c\u4f60\u53ea\u662f\u60f3\u5f02\u6b65\uff0c\u5b8c\u5168\u5ffd\u7565\u8fd4\u56de\u503c\uff0c\u53ef\u4ee5\u914d\u7f6e return=\"false\" \uff0c\u4ee5\u51cf\u5c11 Future \u5bf9\u8c61\u7684\u521b\u5efa\u548c\u7ba1\u7406\u6210\u672c\uff1a dubbo:method name= findFoo async= true return= false / [^1]: 2.0.6 \u53ca\u5176\u4ee5\u4e0a\u7248\u672c\u652f\u6301","title":"\u5f02\u6b65\u8c03\u7528"},{"location":"user/demos/async-call-deprecated/#_1","text":"\u57fa\u4e8e NIO \u7684\u975e\u963b\u585e\u5b9e\u73b0\u5e76\u884c\u8c03\u7528\uff0c\u5ba2\u6237\u7aef\u4e0d\u9700\u8981\u542f\u52a8\u591a\u7ebf\u7a0b\u5373\u53ef\u5b8c\u6210\u5e76\u884c\u8c03\u7528\u591a\u4e2a\u8fdc\u7a0b\u670d\u52a1\uff0c\u76f8\u5bf9\u591a\u7ebf\u7a0b\u5f00\u9500\u8f83\u5c0f\u3002 [^1] \u5728 consumer.xml \u4e2d\u914d\u7f6e\uff1a dubbo:reference id= fooService interface= com.alibaba.foo.FooService dubbo:method name= findFoo async= true / /dubbo:reference dubbo:reference id= barService interface= com.alibaba.bar.BarService dubbo:method name= findBar async= true / /dubbo:reference \u8c03\u7528\u4ee3\u7801: // \u6b64\u8c03\u7528\u4f1a\u7acb\u5373\u8fd4\u56denull fooService.findFoo(fooId); // \u62ff\u5230\u8c03\u7528\u7684Future\u5f15\u7528\uff0c\u5f53\u7ed3\u679c\u8fd4\u56de\u540e\uff0c\u4f1a\u88ab\u901a\u77e5\u548c\u8bbe\u7f6e\u5230\u6b64Future Future Foo fooFuture = RpcContext.getContext().getFuture(); // \u6b64\u8c03\u7528\u4f1a\u7acb\u5373\u8fd4\u56denull barService.findBar(barId); // \u62ff\u5230\u8c03\u7528\u7684Future\u5f15\u7528\uff0c\u5f53\u7ed3\u679c\u8fd4\u56de\u540e\uff0c\u4f1a\u88ab\u901a\u77e5\u548c\u8bbe\u7f6e\u5230\u6b64Future Future Bar barFuture = RpcContext.getContext().getFuture(); // \u6b64\u65f6findFoo\u548cfindBar\u7684\u8bf7\u6c42\u540c\u65f6\u5728\u6267\u884c\uff0c\u5ba2\u6237\u7aef\u4e0d\u9700\u8981\u542f\u52a8\u591a\u7ebf\u7a0b\u6765\u652f\u6301\u5e76\u884c\uff0c\u800c\u662f\u501f\u52a9NIO\u7684\u975e\u963b\u585e\u5b8c\u6210 // \u5982\u679cfoo\u5df2\u8fd4\u56de\uff0c\u76f4\u63a5\u62ff\u5230\u8fd4\u56de\u503c\uff0c\u5426\u5219\u7ebf\u7a0bwait\u4f4f\uff0c\u7b49\u5f85foo\u8fd4\u56de\u540e\uff0c\u7ebf\u7a0b\u4f1a\u88abnotify\u5524\u9192 Foo foo = fooFuture.get(); // \u540c\u7406\u7b49\u5f85bar\u8fd4\u56de Bar bar = barFuture.get(); // \u5982\u679cfoo\u9700\u89815\u79d2\u8fd4\u56de\uff0cbar\u9700\u89816\u79d2\u8fd4\u56de\uff0c\u5b9e\u9645\u53ea\u9700\u7b496\u79d2\uff0c\u5373\u53ef\u83b7\u53d6\u5230foo\u548cbar\uff0c\u8fdb\u884c\u63a5\u4e0b\u6765\u7684\u5904\u7406\u3002 \u4f60\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u662f\u5426\u7b49\u5f85\u6d88\u606f\u53d1\u51fa\uff1a ^2 sent=\"true\" \u7b49\u5f85\u6d88\u606f\u53d1\u51fa\uff0c\u6d88\u606f\u53d1\u9001\u5931\u8d25\u5c06\u629b\u51fa\u5f02\u5e38\u3002 sent=\"false\" \u4e0d\u7b49\u5f85\u6d88\u606f\u53d1\u51fa\uff0c\u5c06\u6d88\u606f\u653e\u5165 IO \u961f\u5217\uff0c\u5373\u523b\u8fd4\u56de\u3002 dubbo:method name= findFoo async= true sent= true / \u5982\u679c\u4f60\u53ea\u662f\u60f3\u5f02\u6b65\uff0c\u5b8c\u5168\u5ffd\u7565\u8fd4\u56de\u503c\uff0c\u53ef\u4ee5\u914d\u7f6e return=\"false\" \uff0c\u4ee5\u51cf\u5c11 Future \u5bf9\u8c61\u7684\u521b\u5efa\u548c\u7ba1\u7406\u6210\u672c\uff1a dubbo:method name= findFoo async= true return= false / [^1]: 2.0.6 \u53ca\u5176\u4ee5\u4e0a\u7248\u672c\u652f\u6301","title":"\u5f02\u6b65\u8c03\u7528"},{"location":"user/demos/async-call/","text":"\u5f02\u6b65\u8c03\u7528 \u4ecev2.7.0\u5f00\u59cb\uff0cDubbo\u7684\u6240\u6709\u5f02\u6b65\u7f16\u7a0b\u63a5\u53e3\u5f00\u59cb\u4ee5 CompletableFuture \u4e3a\u57fa\u7840 \u57fa\u4e8e NIO \u7684\u975e\u963b\u585e\u5b9e\u73b0\u5e76\u884c\u8c03\u7528\uff0c\u5ba2\u6237\u7aef\u4e0d\u9700\u8981\u542f\u52a8\u591a\u7ebf\u7a0b\u5373\u53ef\u5b8c\u6210\u5e76\u884c\u8c03\u7528\u591a\u4e2a\u8fdc\u7a0b\u670d\u52a1\uff0c\u76f8\u5bf9\u591a\u7ebf\u7a0b\u5f00\u9500\u8f83\u5c0f\u3002 \u4f7f\u7528CompletableFuture\u7b7e\u540d\u7684\u63a5\u53e3 \u9700\u8981\u670d\u52a1\u63d0\u4f9b\u8005\u4e8b\u5148\u5b9a\u4e49CompletableFuture\u7b7e\u540d\u7684\u670d\u52a1\uff0c\u5177\u4f53\u53c2\u89c1 \u670d\u52a1\u7aef\u5f02\u6b65\u6267\u884c \u63a5\u53e3\u5b9a\u4e49\uff1a public interface AsyncService { CompletableFuture String sayHello(String name); } \u6ce8\u610f\u63a5\u53e3\u7684\u8fd4\u56de\u7c7b\u578b\u662f CompletableFuture String \u3002 XML\u5f15\u7528\u670d\u52a1\uff1a dubbo:reference id= asyncService timeout= 10000 interface= com.alibaba.dubbo.samples.async.api.AsyncService / \u8c03\u7528\u8fdc\u7a0b\u670d\u52a1\uff1a // \u8c03\u7528\u76f4\u63a5\u8fd4\u56deCompletableFuture CompletableFuture String future = asyncService.sayHello( async call request ); // \u589e\u52a0\u56de\u8c03 future.whenComplete((v, t) - { if (t != null) { t.printStackTrace(); } else { System.out.println( Response: + v); } }); // \u65e9\u4e8e\u7ed3\u679c\u8f93\u51fa System.out.println( Executed before response return. ); \u4f7f\u7528RpcContext \u5728 consumer.xml \u4e2d\u914d\u7f6e\uff1a dubbo:reference id= asyncService interface= org.apache.dubbo.samples.governance.api.AsyncService dubbo:method name= sayHello async= true / /dubbo:reference \u8c03\u7528\u4ee3\u7801: // \u6b64\u8c03\u7528\u4f1a\u7acb\u5373\u8fd4\u56denull asyncService.sayHello( world ); // \u62ff\u5230\u8c03\u7528\u7684Future\u5f15\u7528\uff0c\u5f53\u7ed3\u679c\u8fd4\u56de\u540e\uff0c\u4f1a\u88ab\u901a\u77e5\u548c\u8bbe\u7f6e\u5230\u6b64Future CompletableFuture String helloFuture = RpcContext.getContext().getCompletableFuture(); // \u4e3aFuture\u6dfb\u52a0\u56de\u8c03 helloFuture.whenComplete((retValue, exception) - { if (exception == null) { System.out.println(retValue); } else { exception.printStackTrace(); } }); \u6216\u8005\uff0c\u4f60\u4e5f\u53ef\u4ee5\u8fd9\u6837\u505a\u5f02\u6b65\u8c03\u7528: CompletableFuture String future = RpcContext.getContext().asyncCall( () - { asyncService.sayHello( oneway call request1 ); } ); future.get(); \u91cd\u8f7d\u670d\u52a1\u63a5\u53e3 \u5982\u679c\u4f60\u53ea\u6709\u8fd9\u6837\u7684\u540c\u6b65\u670d\u52a1\u5b9a\u4e49\uff0c\u800c\u53c8\u4e0d\u559c\u6b22RpcContext\u7684\u5f02\u6b65\u4f7f\u7528\u65b9\u5f0f\u3002 public interface GreetingsService { String sayHi(String name); } \u90a3\u8fd8\u6709\u4e00\u79cd\u65b9\u5f0f\uff0c\u5c31\u662f\u5229\u7528Java 8\u63d0\u4f9b\u7684default\u63a5\u53e3\u5b9e\u73b0\uff0c\u91cd\u8f7d\u4e00\u4e2a\u5e26\u6709\u5e26\u6709CompletableFuture\u7b7e\u540d\u7684\u65b9\u6cd5\u3002 \u6709\u4e24\u79cd\u65b9\u5f0f\u6765\u5b9e\u73b0\uff1a \u63d0\u4f9b\u65b9\u6216\u6d88\u8d39\u65b9\u81ea\u5df1\u4fee\u6539\u63a5\u53e3\u7b7e\u540d public interface GreetingsService { String sayHi(String name); // AsyncSignal is totally optional, you can use any parameter type as long as java allows your to do that. default CompletableFuture String sayHi(String name, AsyncSignal signal) { return CompletableFuture.completedFuture(sayHi(name)); } } Dubbo\u5b98\u65b9\u63d0\u4f9bcompiler hacker\uff0c\u7f16\u8bd1\u671f\u81ea\u52a8\u91cd\u5199\u540c\u6b65\u65b9\u6cd5\uff0c\u8bf7 \u5728\u6b64 \u8ba8\u8bba\u548c\u8ddf\u8fdb\u5177\u4f53\u8fdb\u5c55\u3002 \u4f60\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u662f\u5426\u7b49\u5f85\u6d88\u606f\u53d1\u51fa\uff1a ^1 sent=\"true\" \u7b49\u5f85\u6d88\u606f\u53d1\u51fa\uff0c\u6d88\u606f\u53d1\u9001\u5931\u8d25\u5c06\u629b\u51fa\u5f02\u5e38\u3002 sent=\"false\" \u4e0d\u7b49\u5f85\u6d88\u606f\u53d1\u51fa\uff0c\u5c06\u6d88\u606f\u653e\u5165 IO \u961f\u5217\uff0c\u5373\u523b\u8fd4\u56de\u3002 dubbo:method name= findFoo async= true sent= true / \u5982\u679c\u4f60\u53ea\u662f\u60f3\u5f02\u6b65\uff0c\u5b8c\u5168\u5ffd\u7565\u8fd4\u56de\u503c\uff0c\u53ef\u4ee5\u914d\u7f6e return=\"false\" \uff0c\u4ee5\u51cf\u5c11 Future \u5bf9\u8c61\u7684\u521b\u5efa\u548c\u7ba1\u7406\u6210\u672c\uff1a dubbo:method name= findFoo async= true return= false /","title":"\u5f02\u6b65\u8c03\u7528"},{"location":"user/demos/async-call/#_1","text":"\u4ecev2.7.0\u5f00\u59cb\uff0cDubbo\u7684\u6240\u6709\u5f02\u6b65\u7f16\u7a0b\u63a5\u53e3\u5f00\u59cb\u4ee5 CompletableFuture \u4e3a\u57fa\u7840 \u57fa\u4e8e NIO \u7684\u975e\u963b\u585e\u5b9e\u73b0\u5e76\u884c\u8c03\u7528\uff0c\u5ba2\u6237\u7aef\u4e0d\u9700\u8981\u542f\u52a8\u591a\u7ebf\u7a0b\u5373\u53ef\u5b8c\u6210\u5e76\u884c\u8c03\u7528\u591a\u4e2a\u8fdc\u7a0b\u670d\u52a1\uff0c\u76f8\u5bf9\u591a\u7ebf\u7a0b\u5f00\u9500\u8f83\u5c0f\u3002","title":"\u5f02\u6b65\u8c03\u7528"},{"location":"user/demos/async-call/#completablefuture","text":"\u9700\u8981\u670d\u52a1\u63d0\u4f9b\u8005\u4e8b\u5148\u5b9a\u4e49CompletableFuture\u7b7e\u540d\u7684\u670d\u52a1\uff0c\u5177\u4f53\u53c2\u89c1 \u670d\u52a1\u7aef\u5f02\u6b65\u6267\u884c \u63a5\u53e3\u5b9a\u4e49\uff1a public interface AsyncService { CompletableFuture String sayHello(String name); } \u6ce8\u610f\u63a5\u53e3\u7684\u8fd4\u56de\u7c7b\u578b\u662f CompletableFuture String \u3002 XML\u5f15\u7528\u670d\u52a1\uff1a dubbo:reference id= asyncService timeout= 10000 interface= com.alibaba.dubbo.samples.async.api.AsyncService / \u8c03\u7528\u8fdc\u7a0b\u670d\u52a1\uff1a // \u8c03\u7528\u76f4\u63a5\u8fd4\u56deCompletableFuture CompletableFuture String future = asyncService.sayHello( async call request ); // \u589e\u52a0\u56de\u8c03 future.whenComplete((v, t) - { if (t != null) { t.printStackTrace(); } else { System.out.println( Response: + v); } }); // \u65e9\u4e8e\u7ed3\u679c\u8f93\u51fa System.out.println( Executed before response return. );","title":"\u4f7f\u7528CompletableFuture\u7b7e\u540d\u7684\u63a5\u53e3"},{"location":"user/demos/async-call/#rpccontext","text":"\u5728 consumer.xml \u4e2d\u914d\u7f6e\uff1a dubbo:reference id= asyncService interface= org.apache.dubbo.samples.governance.api.AsyncService dubbo:method name= sayHello async= true / /dubbo:reference \u8c03\u7528\u4ee3\u7801: // \u6b64\u8c03\u7528\u4f1a\u7acb\u5373\u8fd4\u56denull asyncService.sayHello( world ); // \u62ff\u5230\u8c03\u7528\u7684Future\u5f15\u7528\uff0c\u5f53\u7ed3\u679c\u8fd4\u56de\u540e\uff0c\u4f1a\u88ab\u901a\u77e5\u548c\u8bbe\u7f6e\u5230\u6b64Future CompletableFuture String helloFuture = RpcContext.getContext().getCompletableFuture(); // \u4e3aFuture\u6dfb\u52a0\u56de\u8c03 helloFuture.whenComplete((retValue, exception) - { if (exception == null) { System.out.println(retValue); } else { exception.printStackTrace(); } }); \u6216\u8005\uff0c\u4f60\u4e5f\u53ef\u4ee5\u8fd9\u6837\u505a\u5f02\u6b65\u8c03\u7528: CompletableFuture String future = RpcContext.getContext().asyncCall( () - { asyncService.sayHello( oneway call request1 ); } ); future.get();","title":"\u4f7f\u7528RpcContext"},{"location":"user/demos/async-call/#_2","text":"\u5982\u679c\u4f60\u53ea\u6709\u8fd9\u6837\u7684\u540c\u6b65\u670d\u52a1\u5b9a\u4e49\uff0c\u800c\u53c8\u4e0d\u559c\u6b22RpcContext\u7684\u5f02\u6b65\u4f7f\u7528\u65b9\u5f0f\u3002 public interface GreetingsService { String sayHi(String name); } \u90a3\u8fd8\u6709\u4e00\u79cd\u65b9\u5f0f\uff0c\u5c31\u662f\u5229\u7528Java 8\u63d0\u4f9b\u7684default\u63a5\u53e3\u5b9e\u73b0\uff0c\u91cd\u8f7d\u4e00\u4e2a\u5e26\u6709\u5e26\u6709CompletableFuture\u7b7e\u540d\u7684\u65b9\u6cd5\u3002 \u6709\u4e24\u79cd\u65b9\u5f0f\u6765\u5b9e\u73b0\uff1a \u63d0\u4f9b\u65b9\u6216\u6d88\u8d39\u65b9\u81ea\u5df1\u4fee\u6539\u63a5\u53e3\u7b7e\u540d public interface GreetingsService { String sayHi(String name); // AsyncSignal is totally optional, you can use any parameter type as long as java allows your to do that. default CompletableFuture String sayHi(String name, AsyncSignal signal) { return CompletableFuture.completedFuture(sayHi(name)); } } Dubbo\u5b98\u65b9\u63d0\u4f9bcompiler hacker\uff0c\u7f16\u8bd1\u671f\u81ea\u52a8\u91cd\u5199\u540c\u6b65\u65b9\u6cd5\uff0c\u8bf7 \u5728\u6b64 \u8ba8\u8bba\u548c\u8ddf\u8fdb\u5177\u4f53\u8fdb\u5c55\u3002 \u4f60\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u662f\u5426\u7b49\u5f85\u6d88\u606f\u53d1\u51fa\uff1a ^1 sent=\"true\" \u7b49\u5f85\u6d88\u606f\u53d1\u51fa\uff0c\u6d88\u606f\u53d1\u9001\u5931\u8d25\u5c06\u629b\u51fa\u5f02\u5e38\u3002 sent=\"false\" \u4e0d\u7b49\u5f85\u6d88\u606f\u53d1\u51fa\uff0c\u5c06\u6d88\u606f\u653e\u5165 IO \u961f\u5217\uff0c\u5373\u523b\u8fd4\u56de\u3002 dubbo:method name= findFoo async= true sent= true / \u5982\u679c\u4f60\u53ea\u662f\u60f3\u5f02\u6b65\uff0c\u5b8c\u5168\u5ffd\u7565\u8fd4\u56de\u503c\uff0c\u53ef\u4ee5\u914d\u7f6e return=\"false\" \uff0c\u4ee5\u51cf\u5c11 Future \u5bf9\u8c61\u7684\u521b\u5efa\u548c\u7ba1\u7406\u6210\u672c\uff1a dubbo:method name= findFoo async= true return= false /","title":"\u91cd\u8f7d\u670d\u52a1\u63a5\u53e3"},{"location":"user/demos/async-execute-on-provider/","text":"\u5f02\u6b65\u6267\u884c Provider\u7aef\u5f02\u6b65\u6267\u884c\u5c06\u963b\u585e\u7684\u4e1a\u52a1\u4eceDubbo\u5185\u90e8\u7ebf\u7a0b\u6c60\u5207\u6362\u5230\u4e1a\u52a1\u81ea\u5b9a\u4e49\u7ebf\u7a0b\uff0c\u907f\u514dDubbo\u7ebf\u7a0b\u6c60\u7684\u8fc7\u5ea6\u5360\u7528\uff0c\u6709\u52a9\u4e8e\u907f\u514d\u4e0d\u540c\u670d\u52a1\u95f4\u7684\u4e92\u76f8\u5f71\u54cd\u3002\u5f02\u6b65\u6267\u884c\u65e0\u76ca\u4e8e\u8282\u7701\u8d44\u6e90\u6216\u63d0\u5347RPC\u54cd\u5e94\u6027\u80fd\uff0c\u56e0\u4e3a\u5982\u679c\u4e1a\u52a1\u6267\u884c\u9700\u8981\u963b\u585e\uff0c\u5219\u59cb\u7ec8\u8fd8\u662f\u8981\u6709\u7ebf\u7a0b\u6765\u8d1f\u8d23\u6267\u884c\u3002 \u6ce8\u610f\uff1aProvider\u7aef\u5f02\u6b65\u6267\u884c\u548cConsumer\u7aef\u5f02\u6b65\u8c03\u7528\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u4f60\u53ef\u4ee5\u4efb\u610f\u6b63\u4ea4\u7ec4\u5408\u4e24\u7aef\u914d\u7f6e Consumer\u540c\u6b65 - Provider\u540c\u6b65 Consumer\u5f02\u6b65 - Provider\u540c\u6b65 Consumer\u540c\u6b65 - Provider\u5f02\u6b65 Consumer\u5f02\u6b65 - Provider\u5f02\u6b65 \u5b9a\u4e49CompletableFuture\u7b7e\u540d\u7684\u63a5\u53e3 \u670d\u52a1\u63a5\u53e3\u5b9a\u4e49\uff1a public interface AsyncService { CompletableFuture String sayHello(String name); } \u670d\u52a1\u5b9e\u73b0\uff1a public class AsyncServiceImpl implements AsyncService { @Override public CompletableFuture String sayHello(String name) { RpcContext savedContext = RpcContext.getContext(); // \u5efa\u8bae\u4e3asupplyAsync\u63d0\u4f9b\u81ea\u5b9a\u4e49\u7ebf\u7a0b\u6c60\uff0c\u907f\u514d\u4f7f\u7528JDK\u516c\u7528\u7ebf\u7a0b\u6c60 return CompletableFuture.supplyAsync(() - { System.out.println(savedContext.getAttachment( consumer-key1 )); try { Thread.sleep(5000); } catch (InterruptedException e) { e.printStackTrace(); } return async response from provider. ; }); } } \u901a\u8fc7 return CompletableFuture.supplyAsync() \uff0c\u4e1a\u52a1\u6267\u884c\u5df2\u4eceDubbo\u7ebf\u7a0b\u5207\u6362\u5230\u4e1a\u52a1\u7ebf\u7a0b\uff0c\u907f\u514d\u4e86\u5bf9Dubbo\u7ebf\u7a0b\u6c60\u7684\u963b\u585e\u3002 \u4f7f\u7528AsyncContext Dubbo\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7c7b\u4f3cServerlet 3.0\u7684\u5f02\u6b65\u63a5\u53e3 AsyncContext \uff0c\u5728\u6ca1\u6709CompletableFuture\u7b7e\u540d\u63a5\u53e3\u7684\u60c5\u51b5\u4e0b\uff0c\u4e5f\u53ef\u4ee5\u5b9e\u73b0Provider\u7aef\u7684\u5f02\u6b65\u6267\u884c\u3002 \u670d\u52a1\u63a5\u53e3\u5b9a\u4e49\uff1a public interface AsyncService { String sayHello(String name); } \u670d\u52a1\u66b4\u9732\uff0c\u548c\u666e\u901a\u670d\u52a1\u5b8c\u5168\u4e00\u81f4\uff1a bean id= asyncService class= org.apache.dubbo.samples.governance.impl.AsyncServiceImpl / dubbo:service interface= org.apache.dubbo.samples.governance.api.AsyncService ref= asyncService / \u670d\u52a1\u5b9e\u73b0\uff1a public class AsyncServiceImpl implements AsyncService { public String sayHello(String name) { final AsyncContext asyncContext = RpcContext.startAsync(); new Thread(() - { // \u5982\u679c\u8981\u4f7f\u7528\u4e0a\u4e0b\u6587\uff0c\u5219\u5fc5\u987b\u8981\u653e\u5728\u7b2c\u4e00\u53e5\u6267\u884c asyncContext.signalContextSwitch(); try { Thread.sleep(500); } catch (InterruptedException e) { e.printStackTrace(); } // \u5199\u56de\u54cd\u5e94 asyncContext.write( Hello + name + , response from provider. ); }).start(); return null; } }","title":"\u670d\u52a1\u7aef\u5f02\u6b65"},{"location":"user/demos/async-execute-on-provider/#_1","text":"Provider\u7aef\u5f02\u6b65\u6267\u884c\u5c06\u963b\u585e\u7684\u4e1a\u52a1\u4eceDubbo\u5185\u90e8\u7ebf\u7a0b\u6c60\u5207\u6362\u5230\u4e1a\u52a1\u81ea\u5b9a\u4e49\u7ebf\u7a0b\uff0c\u907f\u514dDubbo\u7ebf\u7a0b\u6c60\u7684\u8fc7\u5ea6\u5360\u7528\uff0c\u6709\u52a9\u4e8e\u907f\u514d\u4e0d\u540c\u670d\u52a1\u95f4\u7684\u4e92\u76f8\u5f71\u54cd\u3002\u5f02\u6b65\u6267\u884c\u65e0\u76ca\u4e8e\u8282\u7701\u8d44\u6e90\u6216\u63d0\u5347RPC\u54cd\u5e94\u6027\u80fd\uff0c\u56e0\u4e3a\u5982\u679c\u4e1a\u52a1\u6267\u884c\u9700\u8981\u963b\u585e\uff0c\u5219\u59cb\u7ec8\u8fd8\u662f\u8981\u6709\u7ebf\u7a0b\u6765\u8d1f\u8d23\u6267\u884c\u3002 \u6ce8\u610f\uff1aProvider\u7aef\u5f02\u6b65\u6267\u884c\u548cConsumer\u7aef\u5f02\u6b65\u8c03\u7528\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u4f60\u53ef\u4ee5\u4efb\u610f\u6b63\u4ea4\u7ec4\u5408\u4e24\u7aef\u914d\u7f6e Consumer\u540c\u6b65 - Provider\u540c\u6b65 Consumer\u5f02\u6b65 - Provider\u540c\u6b65 Consumer\u540c\u6b65 - Provider\u5f02\u6b65 Consumer\u5f02\u6b65 - Provider\u5f02\u6b65","title":"\u5f02\u6b65\u6267\u884c"},{"location":"user/demos/async-execute-on-provider/#completablefuture","text":"\u670d\u52a1\u63a5\u53e3\u5b9a\u4e49\uff1a public interface AsyncService { CompletableFuture String sayHello(String name); } \u670d\u52a1\u5b9e\u73b0\uff1a public class AsyncServiceImpl implements AsyncService { @Override public CompletableFuture String sayHello(String name) { RpcContext savedContext = RpcContext.getContext(); // \u5efa\u8bae\u4e3asupplyAsync\u63d0\u4f9b\u81ea\u5b9a\u4e49\u7ebf\u7a0b\u6c60\uff0c\u907f\u514d\u4f7f\u7528JDK\u516c\u7528\u7ebf\u7a0b\u6c60 return CompletableFuture.supplyAsync(() - { System.out.println(savedContext.getAttachment( consumer-key1 )); try { Thread.sleep(5000); } catch (InterruptedException e) { e.printStackTrace(); } return async response from provider. ; }); } } \u901a\u8fc7 return CompletableFuture.supplyAsync() \uff0c\u4e1a\u52a1\u6267\u884c\u5df2\u4eceDubbo\u7ebf\u7a0b\u5207\u6362\u5230\u4e1a\u52a1\u7ebf\u7a0b\uff0c\u907f\u514d\u4e86\u5bf9Dubbo\u7ebf\u7a0b\u6c60\u7684\u963b\u585e\u3002","title":"\u5b9a\u4e49CompletableFuture\u7b7e\u540d\u7684\u63a5\u53e3"},{"location":"user/demos/async-execute-on-provider/#asynccontext","text":"Dubbo\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7c7b\u4f3cServerlet 3.0\u7684\u5f02\u6b65\u63a5\u53e3 AsyncContext \uff0c\u5728\u6ca1\u6709CompletableFuture\u7b7e\u540d\u63a5\u53e3\u7684\u60c5\u51b5\u4e0b\uff0c\u4e5f\u53ef\u4ee5\u5b9e\u73b0Provider\u7aef\u7684\u5f02\u6b65\u6267\u884c\u3002 \u670d\u52a1\u63a5\u53e3\u5b9a\u4e49\uff1a public interface AsyncService { String sayHello(String name); } \u670d\u52a1\u66b4\u9732\uff0c\u548c\u666e\u901a\u670d\u52a1\u5b8c\u5168\u4e00\u81f4\uff1a bean id= asyncService class= org.apache.dubbo.samples.governance.impl.AsyncServiceImpl / dubbo:service interface= org.apache.dubbo.samples.governance.api.AsyncService ref= asyncService / \u670d\u52a1\u5b9e\u73b0\uff1a public class AsyncServiceImpl implements AsyncService { public String sayHello(String name) { final AsyncContext asyncContext = RpcContext.startAsync(); new Thread(() - { // \u5982\u679c\u8981\u4f7f\u7528\u4e0a\u4e0b\u6587\uff0c\u5219\u5fc5\u987b\u8981\u653e\u5728\u7b2c\u4e00\u53e5\u6267\u884c asyncContext.signalContextSwitch(); try { Thread.sleep(500); } catch (InterruptedException e) { e.printStackTrace(); } // \u5199\u56de\u54cd\u5e94 asyncContext.write( Hello + name + , response from provider. ); }).start(); return null; } }","title":"\u4f7f\u7528AsyncContext"},{"location":"user/demos/attachment/","text":"\u9690\u5f0f\u53c2\u6570 \u53ef\u4ee5\u901a\u8fc7 RpcContext \u4e0a\u7684 setAttachment \u548c getAttachment \u5728\u670d\u52a1\u6d88\u8d39\u65b9\u548c\u63d0\u4f9b\u65b9\u4e4b\u95f4\u8fdb\u884c\u53c2\u6570\u7684\u9690\u5f0f\u4f20\u9012\u3002 [^1] \u5728\u670d\u52a1\u6d88\u8d39\u65b9\u7aef\u8bbe\u7f6e\u9690\u5f0f\u53c2\u6570 setAttachment \u8bbe\u7f6e\u7684 KV \u5bf9\uff0c\u5728\u5b8c\u6210\u4e0b\u9762\u4e00\u6b21\u8fdc\u7a0b\u8c03\u7528\u4f1a\u88ab\u6e05\u7a7a\uff0c\u5373\u591a\u6b21\u8fdc\u7a0b\u8c03\u7528\u8981\u591a\u6b21\u8bbe\u7f6e\u3002 RpcContext.getContext().setAttachment( index , 1 ); // \u9690\u5f0f\u4f20\u53c2\uff0c\u540e\u9762\u7684\u8fdc\u7a0b\u8c03\u7528\u90fd\u4f1a\u9690\u5f0f\u5c06\u8fd9\u4e9b\u53c2\u6570\u53d1\u9001\u5230\u670d\u52a1\u5668\u7aef\uff0c\u7c7b\u4f3ccookie\uff0c\u7528\u4e8e\u6846\u67b6\u96c6\u6210\uff0c\u4e0d\u5efa\u8bae\u5e38\u89c4\u4e1a\u52a1\u4f7f\u7528 xxxService.xxx(); // \u8fdc\u7a0b\u8c03\u7528 // ... \u5728\u670d\u52a1\u63d0\u4f9b\u65b9\u7aef\u83b7\u53d6\u9690\u5f0f\u53c2\u6570 public class XxxServiceImpl implements XxxService { public void xxx() { // \u83b7\u53d6\u5ba2\u6237\u7aef\u9690\u5f0f\u4f20\u5165\u7684\u53c2\u6570\uff0c\u7528\u4e8e\u6846\u67b6\u96c6\u6210\uff0c\u4e0d\u5efa\u8bae\u5e38\u89c4\u4e1a\u52a1\u4f7f\u7528 String index = RpcContext.getContext().getAttachment( index ); } } [^1]: \u6ce8\u610f\uff1apath, group, version, dubbo, token, timeout \u51e0\u4e2a key \u662f\u4fdd\u7559\u5b57\u6bb5\uff0c\u8bf7\u4f7f\u7528\u5176\u5b83\u503c\u3002","title":"\u9690\u5f0f\u53c2\u6570"},{"location":"user/demos/attachment/#_1","text":"\u53ef\u4ee5\u901a\u8fc7 RpcContext \u4e0a\u7684 setAttachment \u548c getAttachment \u5728\u670d\u52a1\u6d88\u8d39\u65b9\u548c\u63d0\u4f9b\u65b9\u4e4b\u95f4\u8fdb\u884c\u53c2\u6570\u7684\u9690\u5f0f\u4f20\u9012\u3002 [^1]","title":"\u9690\u5f0f\u53c2\u6570"},{"location":"user/demos/attachment/#_2","text":"setAttachment \u8bbe\u7f6e\u7684 KV \u5bf9\uff0c\u5728\u5b8c\u6210\u4e0b\u9762\u4e00\u6b21\u8fdc\u7a0b\u8c03\u7528\u4f1a\u88ab\u6e05\u7a7a\uff0c\u5373\u591a\u6b21\u8fdc\u7a0b\u8c03\u7528\u8981\u591a\u6b21\u8bbe\u7f6e\u3002 RpcContext.getContext().setAttachment( index , 1 ); // \u9690\u5f0f\u4f20\u53c2\uff0c\u540e\u9762\u7684\u8fdc\u7a0b\u8c03\u7528\u90fd\u4f1a\u9690\u5f0f\u5c06\u8fd9\u4e9b\u53c2\u6570\u53d1\u9001\u5230\u670d\u52a1\u5668\u7aef\uff0c\u7c7b\u4f3ccookie\uff0c\u7528\u4e8e\u6846\u67b6\u96c6\u6210\uff0c\u4e0d\u5efa\u8bae\u5e38\u89c4\u4e1a\u52a1\u4f7f\u7528 xxxService.xxx(); // \u8fdc\u7a0b\u8c03\u7528 // ...","title":"\u5728\u670d\u52a1\u6d88\u8d39\u65b9\u7aef\u8bbe\u7f6e\u9690\u5f0f\u53c2\u6570"},{"location":"user/demos/attachment/#_3","text":"public class XxxServiceImpl implements XxxService { public void xxx() { // \u83b7\u53d6\u5ba2\u6237\u7aef\u9690\u5f0f\u4f20\u5165\u7684\u53c2\u6570\uff0c\u7528\u4e8e\u6846\u67b6\u96c6\u6210\uff0c\u4e0d\u5efa\u8bae\u5e38\u89c4\u4e1a\u52a1\u4f7f\u7528 String index = RpcContext.getContext().getAttachment( index ); } } [^1]: \u6ce8\u610f\uff1apath, group, version, dubbo, token, timeout \u51e0\u4e2a key \u662f\u4fdd\u7559\u5b57\u6bb5\uff0c\u8bf7\u4f7f\u7528\u5176\u5b83\u503c\u3002","title":"\u5728\u670d\u52a1\u63d0\u4f9b\u65b9\u7aef\u83b7\u53d6\u9690\u5f0f\u53c2\u6570"},{"location":"user/demos/auth/","text":"\u670d\u52a1\u9274\u6743 \u7c7b\u4f3c\u652f\u4ed8\u4e4b\u7c7b\u7684\u5bf9\u5b89\u5168\u6027\u654f\u611f\u7684\u4e1a\u52a1\u53ef\u80fd\u4f1a\u6709\u9650\u5236\u533f\u540d\u8c03\u7528\u7684\u9700\u6c42\u3002\u5728\u52a0\u56fa\u5b89\u5168\u6027\u65b9\u9762\uff0c2.7.5 \u5f15\u5165\u4e86\u57fa\u4e8eAK/SK\u673a\u5236\u7684\u8ba4\u8bc1\u9274\u6743\u673a\u5236\uff0c\u5e76\u4e14\u5f15\u5165\u4e86\u9274\u6743\u670d\u52a1\u4e2d\u5fc3\uff0c\u4e3b\u8981\u539f\u7406\u662f\u6d88\u8d39\u7aef\u5728\u8bf7\u6c42\u9700\u8981\u9274\u6743\u7684\u670d\u52a1\u65f6\uff0c\u4f1a\u901a\u8fc7SK\u3001\u8bf7\u6c42\u5143\u6570\u636e\u3001\u65f6\u95f4\u6233\u3001\u53c2\u6570\u7b49\u4fe1\u606f\u6765\u751f\u6210\u5bf9\u5e94\u7684\u8bf7\u6c42\u7b7e\u540d\uff0c\u901a\u8fc7Dubbo\u7684Attahcment\u673a\u5236\u643a\u5e26\u5230\u5bf9\u7aef\u8fdb\u884c\u9a8c\u7b7e\uff0c\u9a8c\u7b7e\u901a\u8fc7\u624d\u8fdb\u884c\u4e1a\u52a1\u903b\u8f91\u5904\u7406\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5177\u4f53\u7684\u63a5\u5165\u65b9\u5f0f\u4e5f\u5e76\u4e0d\u590d\u6742\uff1a \u4f7f\u7528\u8005\u9700\u8981\u5728\u5fae\u670d\u52a1\u7ad9\u70b9\u4e0a\u586b\u5199\u81ea\u5df1\u7684\u5e94\u7528\u4fe1\u606f\uff0c\u5e76\u4e3a\u8be5\u5e94\u7528\u751f\u6210\u552f\u4e00\u7684\u8bc1\u4e66\u51ed\u8bc1\u3002 \u4e4b\u540e\u5728\u7ba1\u7406\u7ad9\u70b9\u4e0a\u63d0\u4ea4\u5de5\u5355\uff0c\u7533\u8bf7\u67d0\u4e2a\u654f\u611f\u4e1a\u52a1\u670d\u52a1\u7684\u4f7f\u7528\u6743\u9650\uff0c\u5e76\u7531\u5bf9\u5e94\u4e1a\u52a1\u7ba1\u7406\u8005\u8fdb\u884c\u5ba1\u6279\uff0c\u5ba1\u6279\u901a\u8fc7\u4e4b\u540e\uff0c\u4f1a\u751f\u6210\u5bf9\u5e94\u7684AK/SK\u5230\u9274\u6743\u670d\u52a1\u4e2d\u5fc3\u3002 \u5bfc\u5165\u8be5\u8bc1\u4e66\u5230\u5bf9\u5e94\u7684\u5e94\u7528\u4e0b\uff0c\u5e76\u4e14\u8fdb\u884c\u914d\u7f6e\u3002\u914d\u7f6e\u65b9\u5f0f\u4e5f\u5341\u5206\u7b80\u5355\uff0c\u4ee5\u6ce8\u89e3\u65b9\u5f0f\u4e3a\u4f8b\uff1a \u670d\u52a1\u63d0\u4f9b\u7aef\uff0c\u53ea\u9700\u8981\u8bbe\u7f6e service.auth \u4e3atrue\uff0c\u8868\u793a\u8be5\u670d\u52a1\u7684\u8c03\u7528\u9700\u8981\u9274\u6743\u8ba4\u8bc1\u901a\u8fc7\u3002 param.sign \u4e3a true \u8868\u793a\u9700\u8981\u5bf9\u53c2\u6570\u4e5f\u8fdb\u884c\u6821\u9a8c\u3002 ```java @Service(parameters = {\"service.auth\",\"true\",\"param.sign\",\"true\"}) public class AuthDemoServiceImpl implements AuthService { } ``` \u670d\u52a1\u6d88\u8d39\u7aef\uff0c\u53ea\u9700\u8981\u914d\u7f6e\u597d\u5bf9\u5e94\u7684\u8bc1\u4e66\u7b49\u4fe1\u606f\u5373\u53ef\uff0c\u4e4b\u540e\u4f1a\u81ea\u52a8\u5730\u5728\u5bf9\u8fd9\u4e9b\u9700\u8981\u8ba4\u8bc1\u7684\u63a5\u53e3\u53d1\u8d77\u8c03\u7528\u524d\u8fdb\u884c\u7b7e\u540d\u64cd\u4f5c\uff0c\u901a\u8fc7\u4e0e\u9274\u6743\u670d\u52a1\u7684\u4ea4\u4e92\uff0c\u7528\u6237\u65e0\u9700\u5728\u4ee3\u7801\u4e2d\u914d\u7f6eAK/SK\u8fd9\u4e9b\u654f\u611f\u4fe1\u606f\uff0c\u5e76\u4e14\u5728\u4e0d\u91cd\u542f\u5e94\u7528\u7684\u60c5\u51b5\u4e0b\u5237\u65b0AK/SK\uff0c\u8fbe\u5230\u6743\u9650\u52a8\u6001\u4e0b\u53d1\u7684\u76ee\u7684\u3002 \u8be5\u65b9\u6848\u76ee\u524d\u5df2\u7ecf\u63d0\u4ea4\u7ed9Dubbo\u5f00\u6e90\u793e\u533a\uff0c\u5e76\u4e14\u5b8c\u6210\u4e86\u57fa\u672c\u6846\u67b6\u7684\u5408\u5e76\uff0c\u9664\u4e86AK/SK\u7684\u9274\u6743\u65b9\u5f0f\u4e4b\u5916\uff0c\u901a\u8fc7SPI\u673a\u5236\u652f\u6301\u7528\u6237\u53ef\u5b9a\u5236\u5316\u7684\u9274\u6743\u8ba4\u8bc1\u4ee5\u53ca\u9002\u914d\u516c\u53f8\u5185\u90e8\u57fa\u7840\u8bbe\u65bd\u7684\u5bc6\u94a5\u5b58\u50a8\u3002","title":"\u670d\u52a1\u9274\u6743"},{"location":"user/demos/auth/#_1","text":"\u7c7b\u4f3c\u652f\u4ed8\u4e4b\u7c7b\u7684\u5bf9\u5b89\u5168\u6027\u654f\u611f\u7684\u4e1a\u52a1\u53ef\u80fd\u4f1a\u6709\u9650\u5236\u533f\u540d\u8c03\u7528\u7684\u9700\u6c42\u3002\u5728\u52a0\u56fa\u5b89\u5168\u6027\u65b9\u9762\uff0c2.7.5 \u5f15\u5165\u4e86\u57fa\u4e8eAK/SK\u673a\u5236\u7684\u8ba4\u8bc1\u9274\u6743\u673a\u5236\uff0c\u5e76\u4e14\u5f15\u5165\u4e86\u9274\u6743\u670d\u52a1\u4e2d\u5fc3\uff0c\u4e3b\u8981\u539f\u7406\u662f\u6d88\u8d39\u7aef\u5728\u8bf7\u6c42\u9700\u8981\u9274\u6743\u7684\u670d\u52a1\u65f6\uff0c\u4f1a\u901a\u8fc7SK\u3001\u8bf7\u6c42\u5143\u6570\u636e\u3001\u65f6\u95f4\u6233\u3001\u53c2\u6570\u7b49\u4fe1\u606f\u6765\u751f\u6210\u5bf9\u5e94\u7684\u8bf7\u6c42\u7b7e\u540d\uff0c\u901a\u8fc7Dubbo\u7684Attahcment\u673a\u5236\u643a\u5e26\u5230\u5bf9\u7aef\u8fdb\u884c\u9a8c\u7b7e\uff0c\u9a8c\u7b7e\u901a\u8fc7\u624d\u8fdb\u884c\u4e1a\u52a1\u903b\u8f91\u5904\u7406\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5177\u4f53\u7684\u63a5\u5165\u65b9\u5f0f\u4e5f\u5e76\u4e0d\u590d\u6742\uff1a \u4f7f\u7528\u8005\u9700\u8981\u5728\u5fae\u670d\u52a1\u7ad9\u70b9\u4e0a\u586b\u5199\u81ea\u5df1\u7684\u5e94\u7528\u4fe1\u606f\uff0c\u5e76\u4e3a\u8be5\u5e94\u7528\u751f\u6210\u552f\u4e00\u7684\u8bc1\u4e66\u51ed\u8bc1\u3002 \u4e4b\u540e\u5728\u7ba1\u7406\u7ad9\u70b9\u4e0a\u63d0\u4ea4\u5de5\u5355\uff0c\u7533\u8bf7\u67d0\u4e2a\u654f\u611f\u4e1a\u52a1\u670d\u52a1\u7684\u4f7f\u7528\u6743\u9650\uff0c\u5e76\u7531\u5bf9\u5e94\u4e1a\u52a1\u7ba1\u7406\u8005\u8fdb\u884c\u5ba1\u6279\uff0c\u5ba1\u6279\u901a\u8fc7\u4e4b\u540e\uff0c\u4f1a\u751f\u6210\u5bf9\u5e94\u7684AK/SK\u5230\u9274\u6743\u670d\u52a1\u4e2d\u5fc3\u3002 \u5bfc\u5165\u8be5\u8bc1\u4e66\u5230\u5bf9\u5e94\u7684\u5e94\u7528\u4e0b\uff0c\u5e76\u4e14\u8fdb\u884c\u914d\u7f6e\u3002\u914d\u7f6e\u65b9\u5f0f\u4e5f\u5341\u5206\u7b80\u5355\uff0c\u4ee5\u6ce8\u89e3\u65b9\u5f0f\u4e3a\u4f8b\uff1a \u670d\u52a1\u63d0\u4f9b\u7aef\uff0c\u53ea\u9700\u8981\u8bbe\u7f6e service.auth \u4e3atrue\uff0c\u8868\u793a\u8be5\u670d\u52a1\u7684\u8c03\u7528\u9700\u8981\u9274\u6743\u8ba4\u8bc1\u901a\u8fc7\u3002 param.sign \u4e3a true \u8868\u793a\u9700\u8981\u5bf9\u53c2\u6570\u4e5f\u8fdb\u884c\u6821\u9a8c\u3002 ```java @Service(parameters = {\"service.auth\",\"true\",\"param.sign\",\"true\"}) public class AuthDemoServiceImpl implements AuthService { } ``` \u670d\u52a1\u6d88\u8d39\u7aef\uff0c\u53ea\u9700\u8981\u914d\u7f6e\u597d\u5bf9\u5e94\u7684\u8bc1\u4e66\u7b49\u4fe1\u606f\u5373\u53ef\uff0c\u4e4b\u540e\u4f1a\u81ea\u52a8\u5730\u5728\u5bf9\u8fd9\u4e9b\u9700\u8981\u8ba4\u8bc1\u7684\u63a5\u53e3\u53d1\u8d77\u8c03\u7528\u524d\u8fdb\u884c\u7b7e\u540d\u64cd\u4f5c\uff0c\u901a\u8fc7\u4e0e\u9274\u6743\u670d\u52a1\u7684\u4ea4\u4e92\uff0c\u7528\u6237\u65e0\u9700\u5728\u4ee3\u7801\u4e2d\u914d\u7f6eAK/SK\u8fd9\u4e9b\u654f\u611f\u4fe1\u606f\uff0c\u5e76\u4e14\u5728\u4e0d\u91cd\u542f\u5e94\u7528\u7684\u60c5\u51b5\u4e0b\u5237\u65b0AK/SK\uff0c\u8fbe\u5230\u6743\u9650\u52a8\u6001\u4e0b\u53d1\u7684\u76ee\u7684\u3002 \u8be5\u65b9\u6848\u76ee\u524d\u5df2\u7ecf\u63d0\u4ea4\u7ed9Dubbo\u5f00\u6e90\u793e\u533a\uff0c\u5e76\u4e14\u5b8c\u6210\u4e86\u57fa\u672c\u6846\u67b6\u7684\u5408\u5e76\uff0c\u9664\u4e86AK/SK\u7684\u9274\u6743\u65b9\u5f0f\u4e4b\u5916\uff0c\u901a\u8fc7SPI\u673a\u5236\u652f\u6301\u7528\u6237\u53ef\u5b9a\u5236\u5316\u7684\u9274\u6743\u8ba4\u8bc1\u4ee5\u53ca\u9002\u914d\u516c\u53f8\u5185\u90e8\u57fa\u7840\u8bbe\u65bd\u7684\u5bc6\u94a5\u5b58\u50a8\u3002","title":"\u670d\u52a1\u9274\u6743"},{"location":"user/demos/callback-parameter/","text":"\u53c2\u6570\u56de\u8c03 \u53c2\u6570\u56de\u8c03\u65b9\u5f0f\u4e0e\u8c03\u7528\u672c\u5730 callback \u6216 listener \u76f8\u540c\uff0c\u53ea\u9700\u8981\u5728 Spring \u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u58f0\u660e\u54ea\u4e2a\u53c2\u6570\u662f callback \u7c7b\u578b\u5373\u53ef\u3002Dubbo \u5c06\u57fa\u4e8e\u957f\u8fde\u63a5\u751f\u6210\u53cd\u5411\u4ee3\u7406\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4ece\u670d\u52a1\u5668\u7aef\u8c03\u7528\u5ba2\u6237\u7aef\u903b\u8f91 [^1]\u3002\u53ef\u4ee5\u53c2\u8003 dubbo \u9879\u76ee\u4e2d\u7684\u793a\u4f8b\u4ee3\u7801 \u3002 \u670d\u52a1\u63a5\u53e3\u793a\u4f8b CallbackService.java package com.callback; public interface CallbackService { void addListener(String key, CallbackListener listener); } CallbackListener.java package com.callback; public interface CallbackListener { void changed(String msg); } \u670d\u52a1\u63d0\u4f9b\u8005\u63a5\u53e3\u5b9e\u73b0\u793a\u4f8b package com.callback.impl; import java.text.SimpleDateFormat; import java.util.Date; import java.util.Map; import java.util.concurrent.ConcurrentHashMap; import com.callback.CallbackListener; import com.callback.CallbackService; public class CallbackServiceImpl implements CallbackService { private final Map String, CallbackListener listeners = new ConcurrentHashMap String, CallbackListener (); public CallbackServiceImpl() { Thread t = new Thread(new Runnable() { public void run() { while(true) { try { for(Map.Entry String, CallbackListener entry : listeners.entrySet()){ try { entry.getValue().changed(getChanged(entry.getKey())); } catch (Throwable t) { listeners.remove(entry.getKey()); } } Thread.sleep(5000); // \u5b9a\u65f6\u89e6\u53d1\u53d8\u66f4\u901a\u77e5 } catch (Throwable t) { // \u9632\u5fa1\u5bb9\u9519 t.printStackTrace(); } } } }); t.setDaemon(true); t.start(); } public void addListener(String key, CallbackListener listener) { listeners.put(key, listener); listener.changed(getChanged(key)); // \u53d1\u9001\u53d8\u66f4\u901a\u77e5 } private String getChanged(String key) { return Changed: + new SimpleDateFormat( yyyy-MM-dd HH:mm:ss ).format(new Date()); } } \u670d\u52a1\u63d0\u4f9b\u8005\u914d\u7f6e\u793a\u4f8b bean id= callbackService class= com.callback.impl.CallbackServiceImpl / dubbo:service interface= com.callback.CallbackService ref= callbackService connections= 1 callbacks= 1000 dubbo:method name= addListener dubbo:argument index= 1 callback= true / !--\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u7c7b\u578b\u7684\u65b9\u5f0f-- !-- dubbo:argument type= com.demo.CallbackListener callback= true / -- /dubbo:method /dubbo:service \u670d\u52a1\u6d88\u8d39\u8005\u914d\u7f6e\u793a\u4f8b dubbo:reference id= callbackService interface= com.callback.CallbackService / \u670d\u52a1\u6d88\u8d39\u8005\u8c03\u7528\u793a\u4f8b ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext( classpath:consumer.xml ); context.start(); CallbackService callbackService = (CallbackService) context.getBean( callbackService ); callbackService.addListener( foo.bar , new CallbackListener(){ public void changed(String msg) { System.out.println( callback1: + msg); } }); [^1]: 2.0.6 \u53ca\u5176\u4ee5\u4e0a\u7248\u672c\u652f\u6301","title":"\u53c2\u6570\u56de\u8c03"},{"location":"user/demos/callback-parameter/#_1","text":"\u53c2\u6570\u56de\u8c03\u65b9\u5f0f\u4e0e\u8c03\u7528\u672c\u5730 callback \u6216 listener \u76f8\u540c\uff0c\u53ea\u9700\u8981\u5728 Spring \u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u58f0\u660e\u54ea\u4e2a\u53c2\u6570\u662f callback \u7c7b\u578b\u5373\u53ef\u3002Dubbo \u5c06\u57fa\u4e8e\u957f\u8fde\u63a5\u751f\u6210\u53cd\u5411\u4ee3\u7406\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4ece\u670d\u52a1\u5668\u7aef\u8c03\u7528\u5ba2\u6237\u7aef\u903b\u8f91 [^1]\u3002\u53ef\u4ee5\u53c2\u8003 dubbo \u9879\u76ee\u4e2d\u7684\u793a\u4f8b\u4ee3\u7801 \u3002","title":"\u53c2\u6570\u56de\u8c03"},{"location":"user/demos/callback-parameter/#_2","text":"","title":"\u670d\u52a1\u63a5\u53e3\u793a\u4f8b"},{"location":"user/demos/callback-parameter/#callbackservicejava","text":"package com.callback; public interface CallbackService { void addListener(String key, CallbackListener listener); }","title":"CallbackService.java"},{"location":"user/demos/callback-parameter/#callbacklistenerjava","text":"package com.callback; public interface CallbackListener { void changed(String msg); }","title":"CallbackListener.java"},{"location":"user/demos/callback-parameter/#_3","text":"package com.callback.impl; import java.text.SimpleDateFormat; import java.util.Date; import java.util.Map; import java.util.concurrent.ConcurrentHashMap; import com.callback.CallbackListener; import com.callback.CallbackService; public class CallbackServiceImpl implements CallbackService { private final Map String, CallbackListener listeners = new ConcurrentHashMap String, CallbackListener (); public CallbackServiceImpl() { Thread t = new Thread(new Runnable() { public void run() { while(true) { try { for(Map.Entry String, CallbackListener entry : listeners.entrySet()){ try { entry.getValue().changed(getChanged(entry.getKey())); } catch (Throwable t) { listeners.remove(entry.getKey()); } } Thread.sleep(5000); // \u5b9a\u65f6\u89e6\u53d1\u53d8\u66f4\u901a\u77e5 } catch (Throwable t) { // \u9632\u5fa1\u5bb9\u9519 t.printStackTrace(); } } } }); t.setDaemon(true); t.start(); } public void addListener(String key, CallbackListener listener) { listeners.put(key, listener); listener.changed(getChanged(key)); // \u53d1\u9001\u53d8\u66f4\u901a\u77e5 } private String getChanged(String key) { return Changed: + new SimpleDateFormat( yyyy-MM-dd HH:mm:ss ).format(new Date()); } }","title":"\u670d\u52a1\u63d0\u4f9b\u8005\u63a5\u53e3\u5b9e\u73b0\u793a\u4f8b"},{"location":"user/demos/callback-parameter/#_4","text":"bean id= callbackService class= com.callback.impl.CallbackServiceImpl / dubbo:service interface= com.callback.CallbackService ref= callbackService connections= 1 callbacks= 1000 dubbo:method name= addListener dubbo:argument index= 1 callback= true / !--\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u7c7b\u578b\u7684\u65b9\u5f0f-- !-- dubbo:argument type= com.demo.CallbackListener callback= true / -- /dubbo:method /dubbo:service","title":"\u670d\u52a1\u63d0\u4f9b\u8005\u914d\u7f6e\u793a\u4f8b"},{"location":"user/demos/callback-parameter/#_5","text":"dubbo:reference id= callbackService interface= com.callback.CallbackService /","title":"\u670d\u52a1\u6d88\u8d39\u8005\u914d\u7f6e\u793a\u4f8b"},{"location":"user/demos/callback-parameter/#_6","text":"ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext( classpath:consumer.xml ); context.start(); CallbackService callbackService = (CallbackService) context.getBean( callbackService ); callbackService.addListener( foo.bar , new CallbackListener(){ public void changed(String msg) { System.out.println( callback1: + msg); } }); [^1]: 2.0.6 \u53ca\u5176\u4ee5\u4e0a\u7248\u672c\u652f\u6301","title":"\u670d\u52a1\u6d88\u8d39\u8005\u8c03\u7528\u793a\u4f8b"},{"location":"user/demos/concurrency-control/","text":"\u5e76\u53d1\u63a7\u5236 \u914d\u7f6e\u6837\u4f8b \u6837\u4f8b 1 \u9650\u5236 com.foo.BarService \u7684\u6bcf\u4e2a\u65b9\u6cd5\uff0c\u670d\u52a1\u5668\u7aef\u5e76\u53d1\u6267\u884c\uff08\u6216\u5360\u7528\u7ebf\u7a0b\u6c60\u7ebf\u7a0b\u6570\uff09\u4e0d\u80fd\u8d85\u8fc7 10 \u4e2a\uff1a dubbo:service interface= com.foo.BarService executes= 10 / \u6837\u4f8b 2 \u9650\u5236 com.foo.BarService \u7684 sayHello \u65b9\u6cd5\uff0c\u670d\u52a1\u5668\u7aef\u5e76\u53d1\u6267\u884c\uff08\u6216\u5360\u7528\u7ebf\u7a0b\u6c60\u7ebf\u7a0b\u6570\uff09\u4e0d\u80fd\u8d85\u8fc7 10 \u4e2a\uff1a dubbo:service interface= com.foo.BarService dubbo:method name= sayHello executes= 10 / /dubbo:service \u6837\u4f8b 3 \u9650\u5236 com.foo.BarService \u7684\u6bcf\u4e2a\u65b9\u6cd5\uff0c\u6bcf\u5ba2\u6237\u7aef\u5e76\u53d1\u6267\u884c\uff08\u6216\u5360\u7528\u8fde\u63a5\u7684\u8bf7\u6c42\u6570\uff09\u4e0d\u80fd\u8d85\u8fc7 10 \u4e2a\uff1a dubbo:service interface= com.foo.BarService actives= 10 / \u6216 dubbo:reference interface= com.foo.BarService actives= 10 / \u6837\u4f8b 4 \u9650\u5236 com.foo.BarService \u7684 sayHello \u65b9\u6cd5\uff0c\u6bcf\u5ba2\u6237\u7aef\u5e76\u53d1\u6267\u884c\uff08\u6216\u5360\u7528\u8fde\u63a5\u7684\u8bf7\u6c42\u6570\uff09\u4e0d\u80fd\u8d85\u8fc7 10 \u4e2a\uff1a dubbo:service interface= com.foo.BarService dubbo:method name= sayHello actives= 10 / /dubbo:service \u6216 dubbo:reference interface= com.foo.BarService dubbo:method name= sayHello actives= 10 / /dubbo:service \u5982\u679c dubbo:service \u548c dubbo:reference \u90fd\u914d\u4e86actives\uff0c dubbo:reference \u4f18\u5148\uff0c\u53c2\u89c1\uff1a \u914d\u7f6e\u7684\u8986\u76d6\u7b56\u7565 \u3002 Load Balance \u5747\u8861 \u914d\u7f6e\u670d\u52a1\u7684\u5ba2\u6237\u7aef\u7684 loadbalance \u5c5e\u6027\u4e3a leastactive \uff0c\u6b64 Loadbalance \u4f1a\u8c03\u7528\u5e76\u53d1\u6570\u6700\u5c0f\u7684 Provider\uff08Consumer\u7aef\u5e76\u53d1\u6570\uff09\u3002 dubbo:reference interface= com.foo.BarService loadbalance= leastactive / \u6216 dubbo:service interface= com.foo.BarService loadbalance= leastactive /","title":"\u5e76\u53d1\u63a7\u5236"},{"location":"user/demos/concurrency-control/#_1","text":"","title":"\u5e76\u53d1\u63a7\u5236"},{"location":"user/demos/concurrency-control/#_2","text":"","title":"\u914d\u7f6e\u6837\u4f8b"},{"location":"user/demos/concurrency-control/#1","text":"\u9650\u5236 com.foo.BarService \u7684\u6bcf\u4e2a\u65b9\u6cd5\uff0c\u670d\u52a1\u5668\u7aef\u5e76\u53d1\u6267\u884c\uff08\u6216\u5360\u7528\u7ebf\u7a0b\u6c60\u7ebf\u7a0b\u6570\uff09\u4e0d\u80fd\u8d85\u8fc7 10 \u4e2a\uff1a dubbo:service interface= com.foo.BarService executes= 10 /","title":"\u6837\u4f8b 1"},{"location":"user/demos/concurrency-control/#2","text":"\u9650\u5236 com.foo.BarService \u7684 sayHello \u65b9\u6cd5\uff0c\u670d\u52a1\u5668\u7aef\u5e76\u53d1\u6267\u884c\uff08\u6216\u5360\u7528\u7ebf\u7a0b\u6c60\u7ebf\u7a0b\u6570\uff09\u4e0d\u80fd\u8d85\u8fc7 10 \u4e2a\uff1a dubbo:service interface= com.foo.BarService dubbo:method name= sayHello executes= 10 / /dubbo:service","title":"\u6837\u4f8b 2"},{"location":"user/demos/concurrency-control/#3","text":"\u9650\u5236 com.foo.BarService \u7684\u6bcf\u4e2a\u65b9\u6cd5\uff0c\u6bcf\u5ba2\u6237\u7aef\u5e76\u53d1\u6267\u884c\uff08\u6216\u5360\u7528\u8fde\u63a5\u7684\u8bf7\u6c42\u6570\uff09\u4e0d\u80fd\u8d85\u8fc7 10 \u4e2a\uff1a dubbo:service interface= com.foo.BarService actives= 10 / \u6216 dubbo:reference interface= com.foo.BarService actives= 10 /","title":"\u6837\u4f8b 3"},{"location":"user/demos/concurrency-control/#4","text":"\u9650\u5236 com.foo.BarService \u7684 sayHello \u65b9\u6cd5\uff0c\u6bcf\u5ba2\u6237\u7aef\u5e76\u53d1\u6267\u884c\uff08\u6216\u5360\u7528\u8fde\u63a5\u7684\u8bf7\u6c42\u6570\uff09\u4e0d\u80fd\u8d85\u8fc7 10 \u4e2a\uff1a dubbo:service interface= com.foo.BarService dubbo:method name= sayHello actives= 10 / /dubbo:service \u6216 dubbo:reference interface= com.foo.BarService dubbo:method name= sayHello actives= 10 / /dubbo:service \u5982\u679c dubbo:service \u548c dubbo:reference \u90fd\u914d\u4e86actives\uff0c dubbo:reference \u4f18\u5148\uff0c\u53c2\u89c1\uff1a \u914d\u7f6e\u7684\u8986\u76d6\u7b56\u7565 \u3002","title":"\u6837\u4f8b 4"},{"location":"user/demos/concurrency-control/#load-balance","text":"\u914d\u7f6e\u670d\u52a1\u7684\u5ba2\u6237\u7aef\u7684 loadbalance \u5c5e\u6027\u4e3a leastactive \uff0c\u6b64 Loadbalance \u4f1a\u8c03\u7528\u5e76\u53d1\u6570\u6700\u5c0f\u7684 Provider\uff08Consumer\u7aef\u5e76\u53d1\u6570\uff09\u3002 dubbo:reference interface= com.foo.BarService loadbalance= leastactive / \u6216 dubbo:service interface= com.foo.BarService loadbalance= leastactive /","title":"Load Balance \u5747\u8861"},{"location":"user/demos/config-connections/","text":"\u8fde\u63a5\u63a7\u5236 \u670d\u52a1\u7aef\u8fde\u63a5\u63a7\u5236 \u9650\u5236\u670d\u52a1\u5668\u7aef\u63a5\u53d7\u7684\u8fde\u63a5\u4e0d\u80fd\u8d85\u8fc7 10 \u4e2a [^1]\uff1a dubbo:provider protocol= dubbo accepts= 10 / \u6216 dubbo:protocol name= dubbo accepts= 10 / \u5ba2\u6237\u7aef\u8fde\u63a5\u63a7\u5236 \u9650\u5236\u5ba2\u6237\u7aef\u670d\u52a1\u4f7f\u7528\u8fde\u63a5\u4e0d\u80fd\u8d85\u8fc7 10 \u4e2a [^2]\uff1a dubbo:reference interface= com.foo.BarService connections= 10 / \u6216 dubbo:service interface= com.foo.BarService connections= 10 / \u5982\u679c dubbo:service \u548c dubbo:reference \u90fd\u914d\u4e86 connections\uff0c dubbo:reference \u4f18\u5148\uff0c\u53c2\u89c1\uff1a \u914d\u7f6e\u7684\u8986\u76d6\u7b56\u7565 [^1]: \u56e0\u4e3a\u8fde\u63a5\u5728 Server\u4e0a\uff0c\u6240\u4ee5\u914d\u7f6e\u5728 Provider \u4e0a [^2]: \u5982\u679c\u662f\u957f\u8fde\u63a5\uff0c\u6bd4\u5982 Dubbo \u534f\u8bae\uff0cconnections \u8868\u793a\u8be5\u670d\u52a1\u5bf9\u6bcf\u4e2a\u63d0\u4f9b\u8005\u5efa\u7acb\u7684\u957f\u8fde\u63a5\u6570","title":"\u8fde\u63a5\u63a7\u5236"},{"location":"user/demos/config-connections/#_1","text":"","title":"\u8fde\u63a5\u63a7\u5236"},{"location":"user/demos/config-connections/#_2","text":"\u9650\u5236\u670d\u52a1\u5668\u7aef\u63a5\u53d7\u7684\u8fde\u63a5\u4e0d\u80fd\u8d85\u8fc7 10 \u4e2a [^1]\uff1a dubbo:provider protocol= dubbo accepts= 10 / \u6216 dubbo:protocol name= dubbo accepts= 10 /","title":"\u670d\u52a1\u7aef\u8fde\u63a5\u63a7\u5236"},{"location":"user/demos/config-connections/#_3","text":"\u9650\u5236\u5ba2\u6237\u7aef\u670d\u52a1\u4f7f\u7528\u8fde\u63a5\u4e0d\u80fd\u8d85\u8fc7 10 \u4e2a [^2]\uff1a dubbo:reference interface= com.foo.BarService connections= 10 / \u6216 dubbo:service interface= com.foo.BarService connections= 10 / \u5982\u679c dubbo:service \u548c dubbo:reference \u90fd\u914d\u4e86 connections\uff0c dubbo:reference \u4f18\u5148\uff0c\u53c2\u89c1\uff1a \u914d\u7f6e\u7684\u8986\u76d6\u7b56\u7565 [^1]: \u56e0\u4e3a\u8fde\u63a5\u5728 Server\u4e0a\uff0c\u6240\u4ee5\u914d\u7f6e\u5728 Provider \u4e0a [^2]: \u5982\u679c\u662f\u957f\u8fde\u63a5\uff0c\u6bd4\u5982 Dubbo \u534f\u8bae\uff0cconnections \u8868\u793a\u8be5\u670d\u52a1\u5bf9\u6bcf\u4e2a\u63d0\u4f9b\u8005\u5efa\u7acb\u7684\u957f\u8fde\u63a5\u6570","title":"\u5ba2\u6237\u7aef\u8fde\u63a5\u63a7\u5236"},{"location":"user/demos/config-rule-deprecated/","text":"\u914d\u7f6e\u89c4\u5219 \u5411\u6ce8\u518c\u4e2d\u5fc3\u5199\u5165\u52a8\u6001\u914d\u7f6e\u8986\u76d6\u89c4\u5219 [^1]\u3002\u8be5\u529f\u80fd\u901a\u5e38\u7531\u76d1\u63a7\u4e2d\u5fc3\u6216\u6cbb\u7406\u4e2d\u5fc3\u7684\u9875\u9762\u5b8c\u6210\u3002 RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension(); Registry registry = registryFactory.getRegistry(URL.valueOf( zookeeper://10.20.153.10:2181 )); registry.register(URL.valueOf( override://0.0.0.0/com.foo.BarService?category=configurators dynamic=false application=foo timeout=1000 )); \u5176\u4e2d\uff1a override:// \u8868\u793a\u6570\u636e\u91c7\u7528\u8986\u76d6\u65b9\u5f0f\uff0c\u652f\u6301 override \u548c absent \uff0c\u53ef\u6269\u5c55\uff0c \u5fc5\u586b \u3002 0.0.0.0 \u8868\u793a\u5bf9\u6240\u6709 IP \u5730\u5740\u751f\u6548\uff0c\u5982\u679c\u53ea\u60f3\u8986\u76d6\u67d0\u4e2a IP \u7684\u6570\u636e\uff0c\u8bf7\u586b\u5165\u5177\u4f53 IP\uff0c \u5fc5\u586b \u3002 com.foo.BarService \u8868\u793a\u53ea\u5bf9\u6307\u5b9a\u670d\u52a1\u751f\u6548\uff0c \u5fc5\u586b \u3002 category=configurators \u8868\u793a\u8be5\u6570\u636e\u4e3a\u52a8\u6001\u914d\u7f6e\u7c7b\u578b\uff0c \u5fc5\u586b \u3002 dynamic=false \u8868\u793a\u8be5\u6570\u636e\u4e3a\u6301\u4e45\u6570\u636e\uff0c\u5f53\u6ce8\u518c\u65b9\u9000\u51fa\u65f6\uff0c\u6570\u636e\u4f9d\u7136\u4fdd\u5b58\u5728\u6ce8\u518c\u4e2d\u5fc3\uff0c \u5fc5\u586b \u3002 enabled=true \u8986\u76d6\u89c4\u5219\u662f\u5426\u751f\u6548\uff0c\u53ef\u4e0d\u586b\uff0c\u7f3a\u7701\u751f\u6548\u3002 application=foo \u8868\u793a\u53ea\u5bf9\u6307\u5b9a\u5e94\u7528\u751f\u6548\uff0c\u53ef\u4e0d\u586b\uff0c\u8868\u793a\u5bf9\u6240\u6709\u5e94\u7528\u751f\u6548\u3002 timeout=1000 \u8868\u793a\u5c06\u6ee1\u8db3\u4ee5\u4e0a\u6761\u4ef6\u7684 timeout \u53c2\u6570\u7684\u503c\u8986\u76d6\u4e3a 1000\u3002\u5982\u679c\u60f3\u8986\u76d6\u5176\u5b83\u53c2\u6570\uff0c\u76f4\u63a5\u52a0\u5728 override \u7684 URL \u53c2\u6570\u4e0a\u3002 \u793a\u4f8b\uff1a \u7981\u7528\u63d0\u4f9b\u8005\uff1a(\u901a\u5e38\u7528\u4e8e\u4e34\u65f6\u8e22\u9664\u67d0\u53f0\u63d0\u4f9b\u8005\u673a\u5668\uff0c\u76f8\u4f3c\u7684\uff0c\u7981\u6b62\u6d88\u8d39\u8005\u8bbf\u95ee\u8bf7\u4f7f\u7528\u8def\u7531\u89c4\u5219) override://10.20.153.10/com.foo.BarService?category=configurators dynamic=false disbaled=true \u8c03\u6574\u6743\u91cd\uff1a(\u901a\u5e38\u7528\u4e8e\u5bb9\u91cf\u8bc4\u4f30\uff0c\u7f3a\u7701\u6743\u91cd\u4e3a 100) override://10.20.153.10/com.foo.BarService?category=configurators dynamic=false weight=200 \u8c03\u6574\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\uff1a(\u7f3a\u7701\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\u4e3a random) override://10.20.153.10/com.foo.BarService?category=configurators dynamic=false loadbalance=leastactive \u670d\u52a1\u964d\u7ea7\uff1a(\u901a\u5e38\u7528\u4e8e\u4e34\u65f6\u5c4f\u853d\u67d0\u4e2a\u51fa\u9519\u7684\u975e\u5173\u952e\u670d\u52a1) override://0.0.0.0/com.foo.BarService?category=configurators dynamic=false application=foo mock=force:return+null [^1]: 2.2.0 \u4ee5\u4e0a\u7248\u672c\u652f\u6301","title":"\u914d\u7f6e\u89c4\u5219"},{"location":"user/demos/config-rule-deprecated/#_1","text":"\u5411\u6ce8\u518c\u4e2d\u5fc3\u5199\u5165\u52a8\u6001\u914d\u7f6e\u8986\u76d6\u89c4\u5219 [^1]\u3002\u8be5\u529f\u80fd\u901a\u5e38\u7531\u76d1\u63a7\u4e2d\u5fc3\u6216\u6cbb\u7406\u4e2d\u5fc3\u7684\u9875\u9762\u5b8c\u6210\u3002 RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension(); Registry registry = registryFactory.getRegistry(URL.valueOf( zookeeper://10.20.153.10:2181 )); registry.register(URL.valueOf( override://0.0.0.0/com.foo.BarService?category=configurators dynamic=false application=foo timeout=1000 )); \u5176\u4e2d\uff1a override:// \u8868\u793a\u6570\u636e\u91c7\u7528\u8986\u76d6\u65b9\u5f0f\uff0c\u652f\u6301 override \u548c absent \uff0c\u53ef\u6269\u5c55\uff0c \u5fc5\u586b \u3002 0.0.0.0 \u8868\u793a\u5bf9\u6240\u6709 IP \u5730\u5740\u751f\u6548\uff0c\u5982\u679c\u53ea\u60f3\u8986\u76d6\u67d0\u4e2a IP \u7684\u6570\u636e\uff0c\u8bf7\u586b\u5165\u5177\u4f53 IP\uff0c \u5fc5\u586b \u3002 com.foo.BarService \u8868\u793a\u53ea\u5bf9\u6307\u5b9a\u670d\u52a1\u751f\u6548\uff0c \u5fc5\u586b \u3002 category=configurators \u8868\u793a\u8be5\u6570\u636e\u4e3a\u52a8\u6001\u914d\u7f6e\u7c7b\u578b\uff0c \u5fc5\u586b \u3002 dynamic=false \u8868\u793a\u8be5\u6570\u636e\u4e3a\u6301\u4e45\u6570\u636e\uff0c\u5f53\u6ce8\u518c\u65b9\u9000\u51fa\u65f6\uff0c\u6570\u636e\u4f9d\u7136\u4fdd\u5b58\u5728\u6ce8\u518c\u4e2d\u5fc3\uff0c \u5fc5\u586b \u3002 enabled=true \u8986\u76d6\u89c4\u5219\u662f\u5426\u751f\u6548\uff0c\u53ef\u4e0d\u586b\uff0c\u7f3a\u7701\u751f\u6548\u3002 application=foo \u8868\u793a\u53ea\u5bf9\u6307\u5b9a\u5e94\u7528\u751f\u6548\uff0c\u53ef\u4e0d\u586b\uff0c\u8868\u793a\u5bf9\u6240\u6709\u5e94\u7528\u751f\u6548\u3002 timeout=1000 \u8868\u793a\u5c06\u6ee1\u8db3\u4ee5\u4e0a\u6761\u4ef6\u7684 timeout \u53c2\u6570\u7684\u503c\u8986\u76d6\u4e3a 1000\u3002\u5982\u679c\u60f3\u8986\u76d6\u5176\u5b83\u53c2\u6570\uff0c\u76f4\u63a5\u52a0\u5728 override \u7684 URL \u53c2\u6570\u4e0a\u3002 \u793a\u4f8b\uff1a \u7981\u7528\u63d0\u4f9b\u8005\uff1a(\u901a\u5e38\u7528\u4e8e\u4e34\u65f6\u8e22\u9664\u67d0\u53f0\u63d0\u4f9b\u8005\u673a\u5668\uff0c\u76f8\u4f3c\u7684\uff0c\u7981\u6b62\u6d88\u8d39\u8005\u8bbf\u95ee\u8bf7\u4f7f\u7528\u8def\u7531\u89c4\u5219) override://10.20.153.10/com.foo.BarService?category=configurators dynamic=false disbaled=true \u8c03\u6574\u6743\u91cd\uff1a(\u901a\u5e38\u7528\u4e8e\u5bb9\u91cf\u8bc4\u4f30\uff0c\u7f3a\u7701\u6743\u91cd\u4e3a 100) override://10.20.153.10/com.foo.BarService?category=configurators dynamic=false weight=200 \u8c03\u6574\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\uff1a(\u7f3a\u7701\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\u4e3a random) override://10.20.153.10/com.foo.BarService?category=configurators dynamic=false loadbalance=leastactive \u670d\u52a1\u964d\u7ea7\uff1a(\u901a\u5e38\u7528\u4e8e\u4e34\u65f6\u5c4f\u853d\u67d0\u4e2a\u51fa\u9519\u7684\u975e\u5173\u952e\u670d\u52a1) override://0.0.0.0/com.foo.BarService?category=configurators dynamic=false application=foo mock=force:return+null [^1]: 2.2.0 \u4ee5\u4e0a\u7248\u672c\u652f\u6301","title":"\u914d\u7f6e\u89c4\u5219"},{"location":"user/demos/config-rule/","text":"\u914d\u7f6e\u89c4\u5219 \u67e5\u770b \u8001\u7248\u672c\u914d\u7f6e\u89c4\u5219 \u3002 \u8986\u76d6\u89c4\u5219\u662fDubbo\u8bbe\u8ba1\u7684\u5728\u65e0\u9700\u91cd\u542f\u5e94\u7528\u7684\u60c5\u51b5\u4e0b\uff0c\u52a8\u6001\u8c03\u6574RPC\u8c03\u7528\u884c\u4e3a\u7684\u4e00\u79cd\u80fd\u529b\u30022.7.0\u7248\u672c\u5f00\u59cb\uff0c\u652f\u6301\u4ece \u670d\u52a1 \u548c \u5e94\u7528 \u4e24\u4e2a\u7c92\u5ea6\u6765\u8c03\u6574\u52a8\u6001\u914d\u7f6e\u3002 \u6982\u89c8 \u8bf7\u5728 \u670d\u52a1\u6cbb\u7406\u63a7\u5236\u53f0 \u67e5\u770b\u6216\u4fee\u6539\u8986\u76d6\u89c4\u5219\u3002 \u5e94\u7528\u7c92\u5ea6 ```yaml # \u5c06\u5e94\u7528demo\uff08key:demo\uff09\u572820880\u7aef\u53e3\u4e0a\u63d0\u4f9b\uff08side:provider\uff09\u7684\u6240\u6709\u670d\u52a1\uff08scope:application\uff09\u7684\u6743\u91cd\u4fee\u6539\u4e3a1000\uff08weight:1000\uff09\u3002 configVersion: v2.7 scope: application key: demo enabled: true configs: - addresses: [\"0.0.0.0:20880\"] side: provider parameters: weight: 1000 ... ``` \u670d\u52a1\u7c92\u5ea6 ```yaml # \u6240\u6709\u6d88\u8d39\uff08side:consumer\uff09DemoService\u670d\u52a1\uff08key:org.apache.dubbo.samples.governance.api.DemoService\uff09\u7684\u5e94\u7528\u5b9e\u4f8b\uff08addresses:[0.0.0.0]\uff09\uff0c\u8d85\u65f6\u65f6\u95f4\u4fee\u6539\u4e3a6000ms configVersion: v2.7 scope: service key: org.apache.dubbo.samples.governance.api.DemoService enabled: true configs: - addresses: [0.0.0.0] side: consumer parameters: timeout: 6000 ... ``` \u89c4\u5219\u8be6\u89e3 \u914d\u7f6e\u6a21\u677f --- configVersion: v2.7 scope: application/service key: app-name/group+service+version enabled: true configs: - addresses: [ 0.0.0.0 ] providerAddresses: [ 1.1.1.1:20880 , 2.2.2.2:20881 ] side: consumer applications/services: [] parameters: timeout: 1000 cluster: failfase loadbalance: random - addresses: [ 0.0.0.0:20880 ] side: provider applications/services: [] parameters: threadpool: fixed threads: 200 iothreads: 4 dispatcher: all weight: 200 ... \u5176\u4e2d\uff1a - configVersion \u8868\u793adubbo\u7684\u7248\u672c - scope \u8868\u793a\u914d\u7f6e\u4f5c\u7528\u8303\u56f4\uff0c\u5206\u522b\u662f\u5e94\u7528\uff08application\uff09\u6216\u670d\u52a1\uff08service\uff09\u7c92\u5ea6\u3002 \u5fc5\u586b \u3002 - key \u6307\u5b9a\u89c4\u5219\u4f53\u4f5c\u7528\u5728\u54ea\u4e2a\u670d\u52a1\u6216\u5e94\u7528\u3002 \u5fc5\u586b \u3002 - scope=service\u65f6\uff0ckey\u53d6\u503c\u4e3a[{group}:]{service}[:{version}]\u7684\u7ec4\u5408 - scope=application\u65f6\uff0ckey\u53d6\u503c\u4e3aapplication\u540d\u79f0 - enabled=true \u8986\u76d6\u89c4\u5219\u662f\u5426\u751f\u6548\uff0c\u53ef\u4e0d\u586b\uff0c\u7f3a\u7701\u751f\u6548\u3002 - configs \u5b9a\u4e49\u5177\u4f53\u7684\u8986\u76d6\u89c4\u5219\u5185\u5bb9\uff0c\u53ef\u4ee5\u6307\u5b9an\uff08n =1\uff09\u4e2a\u89c4\u5219\u4f53\u3002 \u5fc5\u586b \u3002 - side\uff0c - applications - services - parameters - addresses - providerAddresses \u5bf9\u4e8e\u7edd\u5927\u591a\u6570\u914d\u7f6e\u573a\u666f\uff0c\u53ea\u9700\u8981\u7406\u6e05\u695a\u4ee5\u4e0b\u95ee\u9898\u57fa\u672c\u5c31\u77e5\u9053\u914d\u7f6e\u8be5\u600e\u4e48\u5199\u4e86\uff1a \u8981\u4fee\u6539\u6574\u4e2a\u5e94\u7528\u7684\u914d\u7f6e\u8fd8\u662f\u67d0\u4e2a\u670d\u52a1\u7684\u914d\u7f6e\u3002 \u5e94\u7528\uff1a scope: application, key: app-name \uff08\u8fd8\u53ef\u4f7f\u7528 services \u6307\u5b9a\u67d0\u51e0\u4e2a\u670d\u52a1\uff09\u3002 \u670d\u52a1\uff1a scope: service, key:group+service+version \u3002 \u4fee\u6539\u662f\u4f5c\u7528\u5230\u6d88\u8d39\u8005\u7aef\u8fd8\u662f\u63d0\u4f9b\u8005\u7aef\u3002 \u6d88\u8d39\u8005\uff1a side: consumer \uff0c\u4f5c\u7528\u5230\u6d88\u8d39\u7aef\u65f6\uff08\u4f60\u8fd8\u53ef\u4ee5\u8fdb\u4e00\u6b65\u4f7f\u7528 providerAddress , applications \u9009\u5b9a\u7279\u5b9a\u7684\u63d0\u4f9b\u8005\u793a\u4f8b\u6216\u5e94\u7528\uff09\u3002 \u63d0\u4f9b\u8005\uff1a side: provider \u3002 \u914d\u7f6e\u662f\u5426\u53ea\u5bf9\u67d0\u51e0\u4e2a\u7279\u5b9a\u5b9e\u4f8b\u751f\u6548\u3002 \u6240\u6709\u5b9e\u4f8b\uff1a addresses: [\"0.0.0.0\"] \u6216 addresses: [\"0.0.0.0:*\"] \u5177\u4f53\u7531side\u503c\u51b3\u5b9a\u3002 \u6307\u5b9a\u5b9e\u4f8b\uff1a addersses[\u5b9e\u4f8b\u5730\u5740\u5217\u8868] \u3002 \u8981\u4fee\u6539\u7684\u5c5e\u6027\u662f\u54ea\u4e2a\u3002 \u793a\u4f8b \u7981\u7528\u63d0\u4f9b\u8005\uff1a(\u901a\u5e38\u7528\u4e8e\u4e34\u65f6\u8e22\u9664\u67d0\u53f0\u63d0\u4f9b\u8005\u673a\u5668\uff0c\u76f8\u4f3c\u7684\uff0c\u7981\u6b62\u6d88\u8d39\u8005\u8bbf\u95ee\u8bf7\u4f7f\u7528\u8def\u7531\u89c4\u5219) ```yaml configVersion: v2.7 scope: application key: demo-provider enabled: true configs: - addresses: [\"10.20.153.10:20880\"] side: provider parameters: disabled: true ... ``` \u8c03\u6574\u6743\u91cd\uff1a(\u901a\u5e38\u7528\u4e8e\u5bb9\u91cf\u8bc4\u4f30\uff0c\u7f3a\u7701\u6743\u91cd\u4e3a 200) ```yaml configVersion: v2.7 scope: application key: demo-provider enabled: true configs: - addresses: [\"10.20.153.10:20880\"] side: provider parameters: weight: 200 ... ``` \u8c03\u6574\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\uff1a(\u7f3a\u7701\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\u4e3a random) ```yaml configVersion: v2.7 scope: application key: demo-consumer enabled: true configs: - side: consumer parameters: loadbalance: random ... ``` \u670d\u52a1\u964d\u7ea7\uff1a(\u901a\u5e38\u7528\u4e8e\u4e34\u65f6\u5c4f\u853d\u67d0\u4e2a\u51fa\u9519\u7684\u975e\u5173\u952e\u670d\u52a1) ```yaml configVersion: v2.7 scope: service key: org.apache.dubbo.samples.governance.api.DemoService enabled: true configs: - side: consumer parameters: force: return null ... ```","title":"\u914d\u7f6e\u89c4\u5219"},{"location":"user/demos/config-rule/#_1","text":"\u67e5\u770b \u8001\u7248\u672c\u914d\u7f6e\u89c4\u5219 \u3002 \u8986\u76d6\u89c4\u5219\u662fDubbo\u8bbe\u8ba1\u7684\u5728\u65e0\u9700\u91cd\u542f\u5e94\u7528\u7684\u60c5\u51b5\u4e0b\uff0c\u52a8\u6001\u8c03\u6574RPC\u8c03\u7528\u884c\u4e3a\u7684\u4e00\u79cd\u80fd\u529b\u30022.7.0\u7248\u672c\u5f00\u59cb\uff0c\u652f\u6301\u4ece \u670d\u52a1 \u548c \u5e94\u7528 \u4e24\u4e2a\u7c92\u5ea6\u6765\u8c03\u6574\u52a8\u6001\u914d\u7f6e\u3002","title":"\u914d\u7f6e\u89c4\u5219"},{"location":"user/demos/config-rule/#_2","text":"\u8bf7\u5728 \u670d\u52a1\u6cbb\u7406\u63a7\u5236\u53f0 \u67e5\u770b\u6216\u4fee\u6539\u8986\u76d6\u89c4\u5219\u3002 \u5e94\u7528\u7c92\u5ea6 ```yaml # \u5c06\u5e94\u7528demo\uff08key:demo\uff09\u572820880\u7aef\u53e3\u4e0a\u63d0\u4f9b\uff08side:provider\uff09\u7684\u6240\u6709\u670d\u52a1\uff08scope:application\uff09\u7684\u6743\u91cd\u4fee\u6539\u4e3a1000\uff08weight:1000\uff09\u3002 configVersion: v2.7 scope: application key: demo enabled: true configs: - addresses: [\"0.0.0.0:20880\"] side: provider parameters: weight: 1000 ... ``` \u670d\u52a1\u7c92\u5ea6 ```yaml # \u6240\u6709\u6d88\u8d39\uff08side:consumer\uff09DemoService\u670d\u52a1\uff08key:org.apache.dubbo.samples.governance.api.DemoService\uff09\u7684\u5e94\u7528\u5b9e\u4f8b\uff08addresses:[0.0.0.0]\uff09\uff0c\u8d85\u65f6\u65f6\u95f4\u4fee\u6539\u4e3a6000ms configVersion: v2.7 scope: service key: org.apache.dubbo.samples.governance.api.DemoService enabled: true configs: - addresses: [0.0.0.0] side: consumer parameters: timeout: 6000 ... ```","title":"\u6982\u89c8"},{"location":"user/demos/config-rule/#_3","text":"","title":"\u89c4\u5219\u8be6\u89e3"},{"location":"user/demos/config-rule/#_4","text":"--- configVersion: v2.7 scope: application/service key: app-name/group+service+version enabled: true configs: - addresses: [ 0.0.0.0 ] providerAddresses: [ 1.1.1.1:20880 , 2.2.2.2:20881 ] side: consumer applications/services: [] parameters: timeout: 1000 cluster: failfase loadbalance: random - addresses: [ 0.0.0.0:20880 ] side: provider applications/services: [] parameters: threadpool: fixed threads: 200 iothreads: 4 dispatcher: all weight: 200 ... \u5176\u4e2d\uff1a - configVersion \u8868\u793adubbo\u7684\u7248\u672c - scope \u8868\u793a\u914d\u7f6e\u4f5c\u7528\u8303\u56f4\uff0c\u5206\u522b\u662f\u5e94\u7528\uff08application\uff09\u6216\u670d\u52a1\uff08service\uff09\u7c92\u5ea6\u3002 \u5fc5\u586b \u3002 - key \u6307\u5b9a\u89c4\u5219\u4f53\u4f5c\u7528\u5728\u54ea\u4e2a\u670d\u52a1\u6216\u5e94\u7528\u3002 \u5fc5\u586b \u3002 - scope=service\u65f6\uff0ckey\u53d6\u503c\u4e3a[{group}:]{service}[:{version}]\u7684\u7ec4\u5408 - scope=application\u65f6\uff0ckey\u53d6\u503c\u4e3aapplication\u540d\u79f0 - enabled=true \u8986\u76d6\u89c4\u5219\u662f\u5426\u751f\u6548\uff0c\u53ef\u4e0d\u586b\uff0c\u7f3a\u7701\u751f\u6548\u3002 - configs \u5b9a\u4e49\u5177\u4f53\u7684\u8986\u76d6\u89c4\u5219\u5185\u5bb9\uff0c\u53ef\u4ee5\u6307\u5b9an\uff08n =1\uff09\u4e2a\u89c4\u5219\u4f53\u3002 \u5fc5\u586b \u3002 - side\uff0c - applications - services - parameters - addresses - providerAddresses \u5bf9\u4e8e\u7edd\u5927\u591a\u6570\u914d\u7f6e\u573a\u666f\uff0c\u53ea\u9700\u8981\u7406\u6e05\u695a\u4ee5\u4e0b\u95ee\u9898\u57fa\u672c\u5c31\u77e5\u9053\u914d\u7f6e\u8be5\u600e\u4e48\u5199\u4e86\uff1a \u8981\u4fee\u6539\u6574\u4e2a\u5e94\u7528\u7684\u914d\u7f6e\u8fd8\u662f\u67d0\u4e2a\u670d\u52a1\u7684\u914d\u7f6e\u3002 \u5e94\u7528\uff1a scope: application, key: app-name \uff08\u8fd8\u53ef\u4f7f\u7528 services \u6307\u5b9a\u67d0\u51e0\u4e2a\u670d\u52a1\uff09\u3002 \u670d\u52a1\uff1a scope: service, key:group+service+version \u3002 \u4fee\u6539\u662f\u4f5c\u7528\u5230\u6d88\u8d39\u8005\u7aef\u8fd8\u662f\u63d0\u4f9b\u8005\u7aef\u3002 \u6d88\u8d39\u8005\uff1a side: consumer \uff0c\u4f5c\u7528\u5230\u6d88\u8d39\u7aef\u65f6\uff08\u4f60\u8fd8\u53ef\u4ee5\u8fdb\u4e00\u6b65\u4f7f\u7528 providerAddress , applications \u9009\u5b9a\u7279\u5b9a\u7684\u63d0\u4f9b\u8005\u793a\u4f8b\u6216\u5e94\u7528\uff09\u3002 \u63d0\u4f9b\u8005\uff1a side: provider \u3002 \u914d\u7f6e\u662f\u5426\u53ea\u5bf9\u67d0\u51e0\u4e2a\u7279\u5b9a\u5b9e\u4f8b\u751f\u6548\u3002 \u6240\u6709\u5b9e\u4f8b\uff1a addresses: [\"0.0.0.0\"] \u6216 addresses: [\"0.0.0.0:*\"] \u5177\u4f53\u7531side\u503c\u51b3\u5b9a\u3002 \u6307\u5b9a\u5b9e\u4f8b\uff1a addersses[\u5b9e\u4f8b\u5730\u5740\u5217\u8868] \u3002 \u8981\u4fee\u6539\u7684\u5c5e\u6027\u662f\u54ea\u4e2a\u3002","title":"\u914d\u7f6e\u6a21\u677f"},{"location":"user/demos/config-rule/#_5","text":"\u7981\u7528\u63d0\u4f9b\u8005\uff1a(\u901a\u5e38\u7528\u4e8e\u4e34\u65f6\u8e22\u9664\u67d0\u53f0\u63d0\u4f9b\u8005\u673a\u5668\uff0c\u76f8\u4f3c\u7684\uff0c\u7981\u6b62\u6d88\u8d39\u8005\u8bbf\u95ee\u8bf7\u4f7f\u7528\u8def\u7531\u89c4\u5219) ```yaml configVersion: v2.7 scope: application key: demo-provider enabled: true configs: - addresses: [\"10.20.153.10:20880\"] side: provider parameters: disabled: true ... ``` \u8c03\u6574\u6743\u91cd\uff1a(\u901a\u5e38\u7528\u4e8e\u5bb9\u91cf\u8bc4\u4f30\uff0c\u7f3a\u7701\u6743\u91cd\u4e3a 200) ```yaml configVersion: v2.7 scope: application key: demo-provider enabled: true configs: - addresses: [\"10.20.153.10:20880\"] side: provider parameters: weight: 200 ... ``` \u8c03\u6574\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\uff1a(\u7f3a\u7701\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\u4e3a random) ```yaml configVersion: v2.7 scope: application key: demo-consumer enabled: true configs: - side: consumer parameters: loadbalance: random ... ``` \u670d\u52a1\u964d\u7ea7\uff1a(\u901a\u5e38\u7528\u4e8e\u4e34\u65f6\u5c4f\u853d\u67d0\u4e2a\u51fa\u9519\u7684\u975e\u5173\u952e\u670d\u52a1) ```yaml configVersion: v2.7 scope: service key: org.apache.dubbo.samples.governance.api.DemoService enabled: true configs: - side: consumer parameters: force: return null ... ```","title":"\u793a\u4f8b"},{"location":"user/demos/consumer-threadpool/","text":"\u6d88\u8d39\u7aef\u7ebf\u7a0b\u6c60\u6a21\u578b 2.7.5 \u7248\u672c\u5bf9\u6574\u4e2a\u8c03\u7528\u94fe\u8def\u505a\u4e86\u5168\u9762\u7684\u4f18\u5316\uff0c\u6839\u636e\u538b\u6d4b\u7ed3\u679c\u663e\u793a\uff0c\u603b\u4f53 QPS \u6027\u80fd\u63d0\u5347\u5c06\u8fd1 30%\uff0c\u540c\u65f6\u4e5f\u51cf\u5c11\u4e86\u8c03\u7528\u8fc7\u7a0b\u4e2d\u7684\u5185\u5b58\u5206\u914d\u5f00\u9500\u3002\u5176\u4e2d\u4e00\u4e2a\u503c\u5f97\u63d0\u53ca\u7684\u8bbe\u8ba1\u70b9\u662f 2.7.5 \u5f15\u5165\u4e86 Servicerepository \u7684\u6982\u5ff5\uff0c\u5728\u670d\u52a1\u6ce8\u518c\u9636\u6bb5\u63d0\u524d\u751f\u6210 ServiceDescriptor \u548c MethodDescriptor\uff0c\u4ee5\u51cf\u5c11 RPC \u8c03\u7528\u9636\u6bb5\u8ba1\u7b97 Service \u539f\u4fe1\u606f\u5e26\u6765\u7684\u8d44\u6e90\u6d88\u8017\u3002 \u6d88\u8d39\u7aef\u7ebf\u7a0b\u6c60\u6a21\u578b\u4f18\u5316 \u5bf9 2.7.5 \u7248\u672c\u4e4b\u524d\u7684 Dubbo \u5e94\u7528\uff0c\u5c24\u5176\u662f\u4e00\u4e9b\u6d88\u8d39\u7aef\u5e94\u7528\uff0c\u5f53\u9762\u4e34\u9700\u8981\u6d88\u8d39\u5927\u91cf\u670d\u52a1\u4e14\u5e76\u53d1\u6570\u6bd4\u8f83\u5927\u7684\u5927\u6d41\u91cf\u573a\u666f\u65f6\uff08\u5178\u578b\u5982\u7f51\u5173\u7c7b\u573a\u666f\uff09\uff0c\u7ecf\u5e38\u4f1a\u51fa\u73b0\u6d88\u8d39\u7aef\u7ebf\u7a0b\u6570\u5206\u914d\u8fc7\u591a\u7684\u95ee\u9898\uff0c\u5177\u4f53\u95ee\u9898\u8ba8\u8bba\u53ef\u53c2\u89c1\u4ee5\u4e0b issue \uff1a https://github.com/apache/dubbo/issues/2013 \u6539\u8fdb\u540e\u7684\u6d88\u8d39\u7aef\u7ebf\u7a0b\u6c60\u6a21\u578b\uff0c\u901a\u8fc7\u590d\u7528\u4e1a\u52a1\u7aef\u88ab\u963b\u585e\u7684\u7ebf\u7a0b\uff0c\u5f88\u597d\u7684\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002 \u8001\u7684\u7ebf\u7a0b\u6c60\u6a21\u578b \u6211\u4eec\u91cd\u70b9\u5173\u6ce8 Consumer \u90e8\u5206\uff1a \u4e1a\u52a1\u7ebf\u7a0b\u53d1\u51fa\u8bf7\u6c42\uff0c\u62ff\u5230\u4e00\u4e2a Future \u5b9e\u4f8b\u3002 \u4e1a\u52a1\u7ebf\u7a0b\u7d27\u63a5\u7740\u8c03\u7528 future.get \u963b\u585e\u7b49\u5f85\u4e1a\u52a1\u7ed3\u679c\u8fd4\u56de\u3002 \u5f53\u4e1a\u52a1\u6570\u636e\u8fd4\u56de\u540e\uff0c\u4ea4\u7531\u72ec\u7acb\u7684 Consumer \u7aef\u7ebf\u7a0b\u6c60\u8fdb\u884c\u53cd\u5e8f\u5217\u5316\u7b49\u5904\u7406\uff0c\u5e76\u8c03\u7528 future.set \u5c06\u53cd\u5e8f\u5217\u5316\u540e\u7684\u4e1a\u52a1\u7ed3\u679c\u7f6e\u56de\u3002 \u4e1a\u52a1\u7ebf\u7a0b\u62ff\u5230\u7ed3\u679c\u76f4\u63a5\u8fd4\u56de 2.7.5 \u7248\u672c\u5f15\u5165\u7684\u7ebf\u7a0b\u6c60\u6a21\u578b \u4e1a\u52a1\u7ebf\u7a0b\u53d1\u51fa\u8bf7\u6c42\uff0c\u62ff\u5230\u4e00\u4e2a Future \u5b9e\u4f8b\u3002 \u5728\u8c03\u7528 future.get() \u4e4b\u524d\uff0c\u5148\u8c03\u7528 ThreadlessExecutor.wait()\uff0cwait \u4f1a\u4f7f\u4e1a\u52a1\u7ebf\u7a0b\u5728\u4e00\u4e2a\u963b\u585e\u961f\u5217\u4e0a\u7b49\u5f85\uff0c\u76f4\u5230\u961f\u5217\u4e2d\u88ab\u52a0\u5165\u5143\u7d20\u3002 \u5f53\u4e1a\u52a1\u6570\u636e\u8fd4\u56de\u540e\uff0c\u751f\u6210\u4e00\u4e2a Runnable Task \u5e76\u653e\u5165 ThreadlessExecutor \u961f\u5217 \u4e1a\u52a1\u7ebf\u7a0b\u5c06 Task \u53d6\u51fa\u5e76\u5728\u672c\u7ebf\u7a0b\u4e2d\u6267\u884c\uff1a\u53cd\u5e8f\u5217\u5316\u4e1a\u52a1\u6570\u636e\u5e76 set \u5230 Future\u3002 \u4e1a\u52a1\u7ebf\u7a0b\u62ff\u5230\u7ed3\u679c\u76f4\u63a5\u8fd4\u56de \u8fd9\u6837\uff0c\u76f8\u6bd4\u4e8e\u8001\u7684\u7ebf\u7a0b\u6c60\u6a21\u578b\uff0c\u7531\u4e1a\u52a1\u7ebf\u7a0b\u81ea\u5df1\u8d1f\u8d23\u76d1\u6d4b\u5e76\u89e3\u6790\u8fd4\u56de\u7ed3\u679c\uff0c\u514d\u53bb\u4e86\u989d\u5916\u7684\u6d88\u8d39\u7aef\u7ebf\u7a0b\u6c60\u5f00\u9500\u3002 \u5173\u4e8e\u6027\u80fd\u4f18\u5316\uff0c\u5728\u63a5\u4e0b\u6765\u7684\u7248\u672c\u4e2d\u5c06\u4f1a\u6301\u7eed\u63a8\u8fdb\uff0c\u4e3b\u8981\u4ece\u4ee5\u4e0b\u4e24\u4e2a\u65b9\u9762\u5165\u624b\uff1a RPC \u8c03\u7528\u94fe\u8def\u3002\u76ee\u524d\u80fd\u770b\u5230\u7684\u70b9\u5305\u62ec\uff1a\u8fdb\u4e00\u6b65\u51cf\u5c11\u6267\u884c\u94fe\u8def\u7684\u5185\u5b58\u5206\u914d\u3001\u5728\u4fdd\u8bc1\u534f\u8bae\u517c\u5bb9\u6027\u7684\u524d\u63d0\u4e0b\u63d0\u9ad8\u534f\u8bae\u4f20\u8f93\u6548\u7387\u3001\u63d0\u9ad8 Filter\u3001Router \u7b49\u8ba1\u7b97\u6548\u7387\u3002 \u670d\u52a1\u6cbb\u7406\u94fe\u8def\u3002\u8fdb\u4e00\u6b65\u51cf\u5c11\u5730\u5740\u63a8\u9001\u3001\u670d\u52a1\u6cbb\u7406\u89c4\u5219\u63a8\u9001\u7b49\u9020\u6210\u7684\u5185\u5b58\u3001cpu \u8d44\u6e90\u6d88\u8017\u3002","title":"\u6d88\u8d39\u7aef\u7ebf\u7a0b\u6c60\u6a21\u578b"},{"location":"user/demos/consumer-threadpool/#_1","text":"2.7.5 \u7248\u672c\u5bf9\u6574\u4e2a\u8c03\u7528\u94fe\u8def\u505a\u4e86\u5168\u9762\u7684\u4f18\u5316\uff0c\u6839\u636e\u538b\u6d4b\u7ed3\u679c\u663e\u793a\uff0c\u603b\u4f53 QPS \u6027\u80fd\u63d0\u5347\u5c06\u8fd1 30%\uff0c\u540c\u65f6\u4e5f\u51cf\u5c11\u4e86\u8c03\u7528\u8fc7\u7a0b\u4e2d\u7684\u5185\u5b58\u5206\u914d\u5f00\u9500\u3002\u5176\u4e2d\u4e00\u4e2a\u503c\u5f97\u63d0\u53ca\u7684\u8bbe\u8ba1\u70b9\u662f 2.7.5 \u5f15\u5165\u4e86 Servicerepository \u7684\u6982\u5ff5\uff0c\u5728\u670d\u52a1\u6ce8\u518c\u9636\u6bb5\u63d0\u524d\u751f\u6210 ServiceDescriptor \u548c MethodDescriptor\uff0c\u4ee5\u51cf\u5c11 RPC \u8c03\u7528\u9636\u6bb5\u8ba1\u7b97 Service \u539f\u4fe1\u606f\u5e26\u6765\u7684\u8d44\u6e90\u6d88\u8017\u3002","title":"\u6d88\u8d39\u7aef\u7ebf\u7a0b\u6c60\u6a21\u578b"},{"location":"user/demos/consumer-threadpool/#_2","text":"\u5bf9 2.7.5 \u7248\u672c\u4e4b\u524d\u7684 Dubbo \u5e94\u7528\uff0c\u5c24\u5176\u662f\u4e00\u4e9b\u6d88\u8d39\u7aef\u5e94\u7528\uff0c\u5f53\u9762\u4e34\u9700\u8981\u6d88\u8d39\u5927\u91cf\u670d\u52a1\u4e14\u5e76\u53d1\u6570\u6bd4\u8f83\u5927\u7684\u5927\u6d41\u91cf\u573a\u666f\u65f6\uff08\u5178\u578b\u5982\u7f51\u5173\u7c7b\u573a\u666f\uff09\uff0c\u7ecf\u5e38\u4f1a\u51fa\u73b0\u6d88\u8d39\u7aef\u7ebf\u7a0b\u6570\u5206\u914d\u8fc7\u591a\u7684\u95ee\u9898\uff0c\u5177\u4f53\u95ee\u9898\u8ba8\u8bba\u53ef\u53c2\u89c1\u4ee5\u4e0b issue \uff1a https://github.com/apache/dubbo/issues/2013 \u6539\u8fdb\u540e\u7684\u6d88\u8d39\u7aef\u7ebf\u7a0b\u6c60\u6a21\u578b\uff0c\u901a\u8fc7\u590d\u7528\u4e1a\u52a1\u7aef\u88ab\u963b\u585e\u7684\u7ebf\u7a0b\uff0c\u5f88\u597d\u7684\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002 \u8001\u7684\u7ebf\u7a0b\u6c60\u6a21\u578b \u6211\u4eec\u91cd\u70b9\u5173\u6ce8 Consumer \u90e8\u5206\uff1a \u4e1a\u52a1\u7ebf\u7a0b\u53d1\u51fa\u8bf7\u6c42\uff0c\u62ff\u5230\u4e00\u4e2a Future \u5b9e\u4f8b\u3002 \u4e1a\u52a1\u7ebf\u7a0b\u7d27\u63a5\u7740\u8c03\u7528 future.get \u963b\u585e\u7b49\u5f85\u4e1a\u52a1\u7ed3\u679c\u8fd4\u56de\u3002 \u5f53\u4e1a\u52a1\u6570\u636e\u8fd4\u56de\u540e\uff0c\u4ea4\u7531\u72ec\u7acb\u7684 Consumer \u7aef\u7ebf\u7a0b\u6c60\u8fdb\u884c\u53cd\u5e8f\u5217\u5316\u7b49\u5904\u7406\uff0c\u5e76\u8c03\u7528 future.set \u5c06\u53cd\u5e8f\u5217\u5316\u540e\u7684\u4e1a\u52a1\u7ed3\u679c\u7f6e\u56de\u3002 \u4e1a\u52a1\u7ebf\u7a0b\u62ff\u5230\u7ed3\u679c\u76f4\u63a5\u8fd4\u56de 2.7.5 \u7248\u672c\u5f15\u5165\u7684\u7ebf\u7a0b\u6c60\u6a21\u578b \u4e1a\u52a1\u7ebf\u7a0b\u53d1\u51fa\u8bf7\u6c42\uff0c\u62ff\u5230\u4e00\u4e2a Future \u5b9e\u4f8b\u3002 \u5728\u8c03\u7528 future.get() \u4e4b\u524d\uff0c\u5148\u8c03\u7528 ThreadlessExecutor.wait()\uff0cwait \u4f1a\u4f7f\u4e1a\u52a1\u7ebf\u7a0b\u5728\u4e00\u4e2a\u963b\u585e\u961f\u5217\u4e0a\u7b49\u5f85\uff0c\u76f4\u5230\u961f\u5217\u4e2d\u88ab\u52a0\u5165\u5143\u7d20\u3002 \u5f53\u4e1a\u52a1\u6570\u636e\u8fd4\u56de\u540e\uff0c\u751f\u6210\u4e00\u4e2a Runnable Task \u5e76\u653e\u5165 ThreadlessExecutor \u961f\u5217 \u4e1a\u52a1\u7ebf\u7a0b\u5c06 Task \u53d6\u51fa\u5e76\u5728\u672c\u7ebf\u7a0b\u4e2d\u6267\u884c\uff1a\u53cd\u5e8f\u5217\u5316\u4e1a\u52a1\u6570\u636e\u5e76 set \u5230 Future\u3002 \u4e1a\u52a1\u7ebf\u7a0b\u62ff\u5230\u7ed3\u679c\u76f4\u63a5\u8fd4\u56de \u8fd9\u6837\uff0c\u76f8\u6bd4\u4e8e\u8001\u7684\u7ebf\u7a0b\u6c60\u6a21\u578b\uff0c\u7531\u4e1a\u52a1\u7ebf\u7a0b\u81ea\u5df1\u8d1f\u8d23\u76d1\u6d4b\u5e76\u89e3\u6790\u8fd4\u56de\u7ed3\u679c\uff0c\u514d\u53bb\u4e86\u989d\u5916\u7684\u6d88\u8d39\u7aef\u7ebf\u7a0b\u6c60\u5f00\u9500\u3002 \u5173\u4e8e\u6027\u80fd\u4f18\u5316\uff0c\u5728\u63a5\u4e0b\u6765\u7684\u7248\u672c\u4e2d\u5c06\u4f1a\u6301\u7eed\u63a8\u8fdb\uff0c\u4e3b\u8981\u4ece\u4ee5\u4e0b\u4e24\u4e2a\u65b9\u9762\u5165\u624b\uff1a RPC \u8c03\u7528\u94fe\u8def\u3002\u76ee\u524d\u80fd\u770b\u5230\u7684\u70b9\u5305\u62ec\uff1a\u8fdb\u4e00\u6b65\u51cf\u5c11\u6267\u884c\u94fe\u8def\u7684\u5185\u5b58\u5206\u914d\u3001\u5728\u4fdd\u8bc1\u534f\u8bae\u517c\u5bb9\u6027\u7684\u524d\u63d0\u4e0b\u63d0\u9ad8\u534f\u8bae\u4f20\u8f93\u6548\u7387\u3001\u63d0\u9ad8 Filter\u3001Router \u7b49\u8ba1\u7b97\u6548\u7387\u3002 \u670d\u52a1\u6cbb\u7406\u94fe\u8def\u3002\u8fdb\u4e00\u6b65\u51cf\u5c11\u5730\u5740\u63a8\u9001\u3001\u670d\u52a1\u6cbb\u7406\u89c4\u5219\u63a8\u9001\u7b49\u9020\u6210\u7684\u5185\u5b58\u3001cpu \u8d44\u6e90\u6d88\u8017\u3002","title":"\u6d88\u8d39\u7aef\u7ebf\u7a0b\u6c60\u6a21\u578b\u4f18\u5316"},{"location":"user/demos/context/","text":"\u4e0a\u4e0b\u6587\u4fe1\u606f \u4e0a\u4e0b\u6587\u4e2d\u5b58\u653e\u7684\u662f\u5f53\u524d\u8c03\u7528\u8fc7\u7a0b\u4e2d\u6240\u9700\u7684\u73af\u5883\u4fe1\u606f\u3002\u6240\u6709\u914d\u7f6e\u4fe1\u606f\u90fd\u5c06\u8f6c\u6362\u4e3a URL \u7684\u53c2\u6570\uff0c\u53c2\u89c1 schema \u914d\u7f6e\u53c2\u8003\u624b\u518c \u4e2d\u7684 \u5bf9\u5e94URL\u53c2\u6570 \u4e00\u5217\u3002 RpcContext \u662f\u4e00\u4e2a ThreadLocal \u7684\u4e34\u65f6\u72b6\u6001\u8bb0\u5f55\u5668\uff0c\u5f53\u63a5\u6536\u5230 RPC \u8bf7\u6c42\uff0c\u6216\u53d1\u8d77 RPC \u8bf7\u6c42\u65f6\uff0cRpcContext \u7684\u72b6\u6001\u90fd\u4f1a\u53d8\u5316\u3002\u6bd4\u5982\uff1aA \u8c03 B\uff0cB \u518d\u8c03 C\uff0c\u5219 B \u673a\u5668\u4e0a\uff0c\u5728 B \u8c03 C \u4e4b\u524d\uff0cRpcContext \u8bb0\u5f55\u7684\u662f A \u8c03 B \u7684\u4fe1\u606f\uff0c\u5728 B \u8c03 C \u4e4b\u540e\uff0cRpcContext \u8bb0\u5f55\u7684\u662f B \u8c03 C \u7684\u4fe1\u606f\u3002 \u670d\u52a1\u6d88\u8d39\u65b9 // \u8fdc\u7a0b\u8c03\u7528 xxxService.xxx(); // \u672c\u7aef\u662f\u5426\u4e3a\u6d88\u8d39\u7aef\uff0c\u8fd9\u91cc\u4f1a\u8fd4\u56detrue boolean isConsumerSide = RpcContext.getContext().isConsumerSide(); // \u83b7\u53d6\u6700\u540e\u4e00\u6b21\u8c03\u7528\u7684\u63d0\u4f9b\u65b9IP\u5730\u5740 String serverIP = RpcContext.getContext().getRemoteHost(); // \u83b7\u53d6\u5f53\u524d\u670d\u52a1\u914d\u7f6e\u4fe1\u606f\uff0c\u6240\u6709\u914d\u7f6e\u4fe1\u606f\u90fd\u5c06\u8f6c\u6362\u4e3aURL\u7684\u53c2\u6570 String application = RpcContext.getContext().getUrl().getParameter( application ); // \u6ce8\u610f\uff1a\u6bcf\u53d1\u8d77RPC\u8c03\u7528\uff0c\u4e0a\u4e0b\u6587\u72b6\u6001\u4f1a\u53d8\u5316 yyyService.yyy(); \u670d\u52a1\u63d0\u4f9b\u65b9 public class XxxServiceImpl implements XxxService { public void xxx() { // \u672c\u7aef\u662f\u5426\u4e3a\u63d0\u4f9b\u7aef\uff0c\u8fd9\u91cc\u4f1a\u8fd4\u56detrue boolean isProviderSide = RpcContext.getContext().isProviderSide(); // \u83b7\u53d6\u8c03\u7528\u65b9IP\u5730\u5740 String clientIP = RpcContext.getContext().getRemoteHost(); // \u83b7\u53d6\u5f53\u524d\u670d\u52a1\u914d\u7f6e\u4fe1\u606f\uff0c\u6240\u6709\u914d\u7f6e\u4fe1\u606f\u90fd\u5c06\u8f6c\u6362\u4e3aURL\u7684\u53c2\u6570 String application = RpcContext.getContext().getUrl().getParameter( application ); // \u6ce8\u610f\uff1a\u6bcf\u53d1\u8d77RPC\u8c03\u7528\uff0c\u4e0a\u4e0b\u6587\u72b6\u6001\u4f1a\u53d8\u5316 yyyService.yyy(); // \u6b64\u65f6\u672c\u7aef\u53d8\u6210\u6d88\u8d39\u7aef\uff0c\u8fd9\u91cc\u4f1a\u8fd4\u56defalse boolean isProviderSide = RpcContext.getContext().isProviderSide(); } }","title":"\u4e0a\u4e0b\u6587\u4fe1\u606f"},{"location":"user/demos/context/#_1","text":"\u4e0a\u4e0b\u6587\u4e2d\u5b58\u653e\u7684\u662f\u5f53\u524d\u8c03\u7528\u8fc7\u7a0b\u4e2d\u6240\u9700\u7684\u73af\u5883\u4fe1\u606f\u3002\u6240\u6709\u914d\u7f6e\u4fe1\u606f\u90fd\u5c06\u8f6c\u6362\u4e3a URL \u7684\u53c2\u6570\uff0c\u53c2\u89c1 schema \u914d\u7f6e\u53c2\u8003\u624b\u518c \u4e2d\u7684 \u5bf9\u5e94URL\u53c2\u6570 \u4e00\u5217\u3002 RpcContext \u662f\u4e00\u4e2a ThreadLocal \u7684\u4e34\u65f6\u72b6\u6001\u8bb0\u5f55\u5668\uff0c\u5f53\u63a5\u6536\u5230 RPC \u8bf7\u6c42\uff0c\u6216\u53d1\u8d77 RPC \u8bf7\u6c42\u65f6\uff0cRpcContext \u7684\u72b6\u6001\u90fd\u4f1a\u53d8\u5316\u3002\u6bd4\u5982\uff1aA \u8c03 B\uff0cB \u518d\u8c03 C\uff0c\u5219 B \u673a\u5668\u4e0a\uff0c\u5728 B \u8c03 C \u4e4b\u524d\uff0cRpcContext \u8bb0\u5f55\u7684\u662f A \u8c03 B \u7684\u4fe1\u606f\uff0c\u5728 B \u8c03 C \u4e4b\u540e\uff0cRpcContext \u8bb0\u5f55\u7684\u662f B \u8c03 C \u7684\u4fe1\u606f\u3002","title":"\u4e0a\u4e0b\u6587\u4fe1\u606f"},{"location":"user/demos/context/#_2","text":"// \u8fdc\u7a0b\u8c03\u7528 xxxService.xxx(); // \u672c\u7aef\u662f\u5426\u4e3a\u6d88\u8d39\u7aef\uff0c\u8fd9\u91cc\u4f1a\u8fd4\u56detrue boolean isConsumerSide = RpcContext.getContext().isConsumerSide(); // \u83b7\u53d6\u6700\u540e\u4e00\u6b21\u8c03\u7528\u7684\u63d0\u4f9b\u65b9IP\u5730\u5740 String serverIP = RpcContext.getContext().getRemoteHost(); // \u83b7\u53d6\u5f53\u524d\u670d\u52a1\u914d\u7f6e\u4fe1\u606f\uff0c\u6240\u6709\u914d\u7f6e\u4fe1\u606f\u90fd\u5c06\u8f6c\u6362\u4e3aURL\u7684\u53c2\u6570 String application = RpcContext.getContext().getUrl().getParameter( application ); // \u6ce8\u610f\uff1a\u6bcf\u53d1\u8d77RPC\u8c03\u7528\uff0c\u4e0a\u4e0b\u6587\u72b6\u6001\u4f1a\u53d8\u5316 yyyService.yyy();","title":"\u670d\u52a1\u6d88\u8d39\u65b9"},{"location":"user/demos/context/#_3","text":"public class XxxServiceImpl implements XxxService { public void xxx() { // \u672c\u7aef\u662f\u5426\u4e3a\u63d0\u4f9b\u7aef\uff0c\u8fd9\u91cc\u4f1a\u8fd4\u56detrue boolean isProviderSide = RpcContext.getContext().isProviderSide(); // \u83b7\u53d6\u8c03\u7528\u65b9IP\u5730\u5740 String clientIP = RpcContext.getContext().getRemoteHost(); // \u83b7\u53d6\u5f53\u524d\u670d\u52a1\u914d\u7f6e\u4fe1\u606f\uff0c\u6240\u6709\u914d\u7f6e\u4fe1\u606f\u90fd\u5c06\u8f6c\u6362\u4e3aURL\u7684\u53c2\u6570 String application = RpcContext.getContext().getUrl().getParameter( application ); // \u6ce8\u610f\uff1a\u6bcf\u53d1\u8d77RPC\u8c03\u7528\uff0c\u4e0a\u4e0b\u6587\u72b6\u6001\u4f1a\u53d8\u5316 yyyService.yyy(); // \u6b64\u65f6\u672c\u7aef\u53d8\u6210\u6d88\u8d39\u7aef\uff0c\u8fd9\u91cc\u4f1a\u8fd4\u56defalse boolean isProviderSide = RpcContext.getContext().isProviderSide(); } }","title":"\u670d\u52a1\u63d0\u4f9b\u65b9"},{"location":"user/demos/delay-publish/","text":"\u5ef6\u8fdf\u66b4\u9732 \u5982\u679c\u4f60\u7684\u670d\u52a1\u9700\u8981\u9884\u70ed\u65f6\u95f4\uff0c\u6bd4\u5982\u521d\u59cb\u5316\u7f13\u5b58\uff0c\u7b49\u5f85\u76f8\u5173\u8d44\u6e90\u5c31\u4f4d\u7b49\uff0c\u53ef\u4ee5\u4f7f\u7528 delay \u8fdb\u884c\u5ef6\u8fdf\u66b4\u9732\u3002\u6211\u4eec\u5728 Dubbo 2.6.5 \u7248\u672c\u4e2d\u5bf9\u670d\u52a1\u5ef6\u8fdf\u66b4\u9732\u903b\u8f91\u8fdb\u884c\u4e86\u7ec6\u5fae\u7684\u8c03\u6574\uff0c\u5c06\u9700\u8981\u5ef6\u8fdf\u66b4\u9732\uff08delay 0\uff09\u670d\u52a1\u7684\u5012\u8ba1\u65f6\u52a8\u4f5c\u63a8\u8fdf\u5230\u4e86 Spring \u521d\u59cb\u5316\u5b8c\u6210\u540e\u8fdb\u884c\u3002\u4f60\u5728\u4f7f\u7528 Dubbo \u7684\u8fc7\u7a0b\u4e2d\uff0c\u5e76\u4e0d\u4f1a\u611f\u77e5\u5230\u6b64\u53d8\u5316\uff0c\u56e0\u6b64\u8bf7\u653e\u5fc3\u4f7f\u7528\u3002 Dubbo-2.6.5 \u4e4b\u524d\u7248\u672c \u5ef6\u8fdf\u5230 Spring \u521d\u59cb\u5316\u5b8c\u6210\u540e\uff0c\u518d\u66b4\u9732\u670d\u52a1[^1] dubbo:service delay= -1 / \u5ef6\u8fdf 5 \u79d2\u66b4\u9732\u670d\u52a1 dubbo:service delay= 5000 / Dubbo-2.6.5 \u53ca\u4ee5\u540e\u7248\u672c \u6240\u6709\u670d\u52a1\u90fd\u5c06\u5728 Spring \u521d\u59cb\u5316\u5b8c\u6210\u540e\u8fdb\u884c\u66b4\u9732\uff0c\u5982\u679c\u4f60\u4e0d\u9700\u8981\u5ef6\u8fdf\u66b4\u9732\u670d\u52a1\uff0c\u65e0\u9700\u914d\u7f6e delay\u3002 \u5ef6\u8fdf 5 \u79d2\u66b4\u9732\u670d\u52a1 dubbo:service delay= 5000 / Spring 2.x \u521d\u59cb\u5316\u6b7b\u9501\u95ee\u9898 \u89e6\u53d1\u6761\u4ef6 \u5728 Spring \u89e3\u6790\u5230 dubbo:service / \u65f6\uff0c\u5c31\u5df2\u7ecf\u5411\u5916\u66b4\u9732\u4e86\u670d\u52a1\uff0c\u800c Spring \u8fd8\u5728\u63a5\u7740\u521d\u59cb\u5316\u5176\u5b83 Bean\u3002\u5982\u679c\u8fd9\u65f6\u6709\u8bf7\u6c42\u8fdb\u6765\uff0c\u5e76\u4e14\u670d\u52a1\u7684\u5b9e\u73b0\u7c7b\u91cc\u6709\u8c03\u7528 applicationContext.getBean() \u7684\u7528\u6cd5\u3002 \u8bf7\u6c42\u7ebf\u7a0b\u7684 applicationContext.getBean() \u8c03\u7528\uff0c\u5148\u540c\u6b65 singletonObjects \u5224\u65ad Bean \u662f\u5426\u5b58\u5728\uff0c\u4e0d\u5b58\u5728\u5c31\u540c\u6b65 beanDefinitionMap \u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5e76\u518d\u6b21\u540c\u6b65 singletonObjects \u5199\u5165 Bean \u5b9e\u4f8b\u7f13\u5b58\u3002 \u800c Spring \u521d\u59cb\u5316\u7ebf\u7a0b\uff0c\u56e0\u4e0d\u9700\u8981\u5224\u65ad Bean \u7684\u5b58\u5728\uff0c\u76f4\u63a5\u540c\u6b65 beanDefinitionMap \u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5e76\u540c\u6b65 singletonObjects \u5199\u5165 Bean \u5b9e\u4f8b\u7f13\u5b58\u3002 \u8fd9\u6837\u5c31\u5bfc\u81f4 getBean \u7ebf\u7a0b\uff0c\u5148\u9501 singletonObjects\uff0c\u518d\u9501 beanDefinitionMap\uff0c\u518d\u6b21\u9501 singletonObjects\u3002 \u800c Spring \u521d\u59cb\u5316\u7ebf\u7a0b\uff0c\u5148\u9501 beanDefinitionMap\uff0c\u518d\u9501 singletonObjects\u3002\u53cd\u5411\u9501\u5bfc\u81f4\u7ebf\u7a0b\u6b7b\u9501\uff0c\u4e0d\u80fd\u63d0\u4f9b\u670d\u52a1\uff0c\u542f\u52a8\u4e0d\u4e86\u3002 \u89c4\u907f\u529e\u6cd5 \u5f3a\u70c8\u5efa\u8bae\u4e0d\u8981\u5728\u670d\u52a1\u7684\u5b9e\u73b0\u7c7b\u4e2d\u6709 applicationContext.getBean() \u7684\u8c03\u7528\uff0c\u5168\u90e8\u91c7\u7528 IoC \u6ce8\u5165\u7684\u65b9\u5f0f\u4f7f\u7528 Spring\u7684Bean\u3002 \u5982\u679c\u5b9e\u5728\u8981\u8c03 getBean()\uff0c\u53ef\u4ee5\u5c06 Dubbo \u7684\u914d\u7f6e\u653e\u5728 Spring \u7684\u6700\u540e\u52a0\u8f7d\u3002 \u5982\u679c\u4e0d\u60f3\u4f9d\u8d56\u914d\u7f6e\u987a\u5e8f\uff0c\u53ef\u4ee5\u4f7f\u7528 dubbo:provider delay=\u201d-1\u201d / \uff0c\u4f7f Dubbo \u5728 Spring \u5bb9\u5668\u521d\u59cb\u5316\u5b8c\u540e\uff0c\u518d\u66b4\u9732\u670d\u52a1\u3002 \u5982\u679c\u5927\u91cf\u4f7f\u7528 getBean()\uff0c\u76f8\u5f53\u4e8e\u5df2\u7ecf\u628a Spring \u9000\u5316\u4e3a\u5de5\u5382\u6a21\u5f0f\u5728\u7528\uff0c\u53ef\u4ee5\u5c06 Dubbo \u7684\u670d\u52a1\u9694\u79bb\u5355\u72ec\u7684 Spring \u5bb9\u5668\u3002 [^1]: \u57fa\u4e8e Spring \u7684 ContextRefreshedEvent \u4e8b\u4ef6\u89e6\u53d1\u66b4\u9732","title":"\u5ef6\u8fdf\u66b4\u9732"},{"location":"user/demos/delay-publish/#_1","text":"\u5982\u679c\u4f60\u7684\u670d\u52a1\u9700\u8981\u9884\u70ed\u65f6\u95f4\uff0c\u6bd4\u5982\u521d\u59cb\u5316\u7f13\u5b58\uff0c\u7b49\u5f85\u76f8\u5173\u8d44\u6e90\u5c31\u4f4d\u7b49\uff0c\u53ef\u4ee5\u4f7f\u7528 delay \u8fdb\u884c\u5ef6\u8fdf\u66b4\u9732\u3002\u6211\u4eec\u5728 Dubbo 2.6.5 \u7248\u672c\u4e2d\u5bf9\u670d\u52a1\u5ef6\u8fdf\u66b4\u9732\u903b\u8f91\u8fdb\u884c\u4e86\u7ec6\u5fae\u7684\u8c03\u6574\uff0c\u5c06\u9700\u8981\u5ef6\u8fdf\u66b4\u9732\uff08delay 0\uff09\u670d\u52a1\u7684\u5012\u8ba1\u65f6\u52a8\u4f5c\u63a8\u8fdf\u5230\u4e86 Spring \u521d\u59cb\u5316\u5b8c\u6210\u540e\u8fdb\u884c\u3002\u4f60\u5728\u4f7f\u7528 Dubbo \u7684\u8fc7\u7a0b\u4e2d\uff0c\u5e76\u4e0d\u4f1a\u611f\u77e5\u5230\u6b64\u53d8\u5316\uff0c\u56e0\u6b64\u8bf7\u653e\u5fc3\u4f7f\u7528\u3002","title":"\u5ef6\u8fdf\u66b4\u9732"},{"location":"user/demos/delay-publish/#dubbo-265","text":"","title":"Dubbo-2.6.5 \u4e4b\u524d\u7248\u672c"},{"location":"user/demos/delay-publish/#spring-1","text":"dubbo:service delay= -1 /","title":"\u5ef6\u8fdf\u5230 Spring \u521d\u59cb\u5316\u5b8c\u6210\u540e\uff0c\u518d\u66b4\u9732\u670d\u52a1[^1]"},{"location":"user/demos/delay-publish/#5","text":"dubbo:service delay= 5000 /","title":"\u5ef6\u8fdf 5 \u79d2\u66b4\u9732\u670d\u52a1"},{"location":"user/demos/delay-publish/#dubbo-265_1","text":"\u6240\u6709\u670d\u52a1\u90fd\u5c06\u5728 Spring \u521d\u59cb\u5316\u5b8c\u6210\u540e\u8fdb\u884c\u66b4\u9732\uff0c\u5982\u679c\u4f60\u4e0d\u9700\u8981\u5ef6\u8fdf\u66b4\u9732\u670d\u52a1\uff0c\u65e0\u9700\u914d\u7f6e delay\u3002","title":"Dubbo-2.6.5 \u53ca\u4ee5\u540e\u7248\u672c"},{"location":"user/demos/delay-publish/#5_1","text":"dubbo:service delay= 5000 /","title":"\u5ef6\u8fdf 5 \u79d2\u66b4\u9732\u670d\u52a1"},{"location":"user/demos/delay-publish/#spring-2x","text":"","title":"Spring 2.x \u521d\u59cb\u5316\u6b7b\u9501\u95ee\u9898"},{"location":"user/demos/delay-publish/#_2","text":"\u5728 Spring \u89e3\u6790\u5230 dubbo:service / \u65f6\uff0c\u5c31\u5df2\u7ecf\u5411\u5916\u66b4\u9732\u4e86\u670d\u52a1\uff0c\u800c Spring \u8fd8\u5728\u63a5\u7740\u521d\u59cb\u5316\u5176\u5b83 Bean\u3002\u5982\u679c\u8fd9\u65f6\u6709\u8bf7\u6c42\u8fdb\u6765\uff0c\u5e76\u4e14\u670d\u52a1\u7684\u5b9e\u73b0\u7c7b\u91cc\u6709\u8c03\u7528 applicationContext.getBean() \u7684\u7528\u6cd5\u3002 \u8bf7\u6c42\u7ebf\u7a0b\u7684 applicationContext.getBean() \u8c03\u7528\uff0c\u5148\u540c\u6b65 singletonObjects \u5224\u65ad Bean \u662f\u5426\u5b58\u5728\uff0c\u4e0d\u5b58\u5728\u5c31\u540c\u6b65 beanDefinitionMap \u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5e76\u518d\u6b21\u540c\u6b65 singletonObjects \u5199\u5165 Bean \u5b9e\u4f8b\u7f13\u5b58\u3002 \u800c Spring \u521d\u59cb\u5316\u7ebf\u7a0b\uff0c\u56e0\u4e0d\u9700\u8981\u5224\u65ad Bean \u7684\u5b58\u5728\uff0c\u76f4\u63a5\u540c\u6b65 beanDefinitionMap \u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5e76\u540c\u6b65 singletonObjects \u5199\u5165 Bean \u5b9e\u4f8b\u7f13\u5b58\u3002 \u8fd9\u6837\u5c31\u5bfc\u81f4 getBean \u7ebf\u7a0b\uff0c\u5148\u9501 singletonObjects\uff0c\u518d\u9501 beanDefinitionMap\uff0c\u518d\u6b21\u9501 singletonObjects\u3002 \u800c Spring \u521d\u59cb\u5316\u7ebf\u7a0b\uff0c\u5148\u9501 beanDefinitionMap\uff0c\u518d\u9501 singletonObjects\u3002\u53cd\u5411\u9501\u5bfc\u81f4\u7ebf\u7a0b\u6b7b\u9501\uff0c\u4e0d\u80fd\u63d0\u4f9b\u670d\u52a1\uff0c\u542f\u52a8\u4e0d\u4e86\u3002","title":"\u89e6\u53d1\u6761\u4ef6"},{"location":"user/demos/delay-publish/#_3","text":"\u5f3a\u70c8\u5efa\u8bae\u4e0d\u8981\u5728\u670d\u52a1\u7684\u5b9e\u73b0\u7c7b\u4e2d\u6709 applicationContext.getBean() \u7684\u8c03\u7528\uff0c\u5168\u90e8\u91c7\u7528 IoC \u6ce8\u5165\u7684\u65b9\u5f0f\u4f7f\u7528 Spring\u7684Bean\u3002 \u5982\u679c\u5b9e\u5728\u8981\u8c03 getBean()\uff0c\u53ef\u4ee5\u5c06 Dubbo \u7684\u914d\u7f6e\u653e\u5728 Spring \u7684\u6700\u540e\u52a0\u8f7d\u3002 \u5982\u679c\u4e0d\u60f3\u4f9d\u8d56\u914d\u7f6e\u987a\u5e8f\uff0c\u53ef\u4ee5\u4f7f\u7528 dubbo:provider delay=\u201d-1\u201d / \uff0c\u4f7f Dubbo \u5728 Spring \u5bb9\u5668\u521d\u59cb\u5316\u5b8c\u540e\uff0c\u518d\u66b4\u9732\u670d\u52a1\u3002 \u5982\u679c\u5927\u91cf\u4f7f\u7528 getBean()\uff0c\u76f8\u5f53\u4e8e\u5df2\u7ecf\u628a Spring \u9000\u5316\u4e3a\u5de5\u5382\u6a21\u5f0f\u5728\u7528\uff0c\u53ef\u4ee5\u5c06 Dubbo \u7684\u670d\u52a1\u9694\u79bb\u5355\u72ec\u7684 Spring \u5bb9\u5668\u3002 [^1]: \u57fa\u4e8e Spring \u7684 ContextRefreshedEvent \u4e8b\u4ef6\u89e6\u53d1\u66b4\u9732","title":"\u89c4\u907f\u529e\u6cd5"},{"location":"user/demos/distributed-transaction/","text":"\u5206\u5e03\u5f0f\u4e8b\u52a1 \u5206\u5e03\u5f0f\u4e8b\u52a1\u57fa\u4e8e JTA/XA \u89c4\u8303\u5b9e\u73b0 ^1 \u3002 \u4e24\u9636\u6bb5\u63d0\u4ea4\uff1a","title":"\u5206\u5e03\u5f0f\u4e8b\u52a1"},{"location":"user/demos/distributed-transaction/#_1","text":"\u5206\u5e03\u5f0f\u4e8b\u52a1\u57fa\u4e8e JTA/XA \u89c4\u8303\u5b9e\u73b0 ^1 \u3002 \u4e24\u9636\u6bb5\u63d0\u4ea4\uff1a","title":"\u5206\u5e03\u5f0f\u4e8b\u52a1"},{"location":"user/demos/dump/","text":"\u5f53\u4e1a\u52a1\u7ebf\u7a0b\u6c60\u6ee1\u65f6\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u7ebf\u7a0b\u90fd\u5728\u7b49\u5f85\u54ea\u4e9b\u8d44\u6e90\u3001\u6761\u4ef6\uff0c\u4ee5\u627e\u5230\u7cfb\u7edf\u7684\u74f6\u9888\u70b9\u6216\u5f02\u5e38\u70b9\u3002dubbo\u901a\u8fc7Jstack\u81ea\u52a8\u5bfc\u51fa\u7ebf\u7a0b\u5806\u6808\u6765\u4fdd\u7559\u73b0\u573a\uff0c\u65b9\u4fbf\u6392\u67e5\u95ee\u9898 \u9ed8\u8ba4\u7b56\u7565: \u5bfc\u51fa\u8def\u5f84\uff0cuser.home\u6807\u8bc6\u7684\u7528\u6237\u4e3b\u76ee\u5f55 \u5bfc\u51fa\u95f4\u9694\uff0c\u6700\u77ed\u95f4\u9694\u5141\u8bb8\u6bcf\u969410\u5206\u949f\u5bfc\u51fa\u4e00\u6b21 \u6307\u5b9a\u5bfc\u51fa\u8def\u5f84\uff1a # dubbo.properties dubbo.application.dump.directory=/tmp dubbo:application ... dubbo:parameter key= dump.directory value= /tmp / /dubbo:application","title":"\u7ebf\u7a0b\u6808\u81ea\u52a8dump"},{"location":"user/demos/echo-service/","text":"\u56de\u58f0\u6d4b\u8bd5 \u56de\u58f0\u6d4b\u8bd5\u7528\u4e8e\u68c0\u6d4b\u670d\u52a1\u662f\u5426\u53ef\u7528\uff0c\u56de\u58f0\u6d4b\u8bd5\u6309\u7167\u6b63\u5e38\u8bf7\u6c42\u6d41\u7a0b\u6267\u884c\uff0c\u80fd\u591f\u6d4b\u8bd5\u6574\u4e2a\u8c03\u7528\u662f\u5426\u901a\u7545\uff0c\u53ef\u7528\u4e8e\u76d1\u63a7\u3002 \u6240\u6709\u670d\u52a1\u81ea\u52a8\u5b9e\u73b0 EchoService \u63a5\u53e3\uff0c\u53ea\u9700\u5c06\u4efb\u610f\u670d\u52a1\u5f15\u7528\u5f3a\u5236\u8f6c\u578b\u4e3a EchoService \uff0c\u5373\u53ef\u4f7f\u7528\u3002 Spring \u914d\u7f6e\uff1a dubbo:reference id= memberService interface= com.xxx.MemberService / \u4ee3\u7801\uff1a // \u8fdc\u7a0b\u670d\u52a1\u5f15\u7528 MemberService memberService = ctx.getBean( memberService ); EchoService echoService = (EchoService) memberService; // \u5f3a\u5236\u8f6c\u578b\u4e3aEchoService // \u56de\u58f0\u6d4b\u8bd5\u53ef\u7528\u6027 String status = echoService.$echo( OK ); assert(status.equals( OK ));","title":"\u56de\u58f0\u6d4b\u8bd5"},{"location":"user/demos/echo-service/#_1","text":"\u56de\u58f0\u6d4b\u8bd5\u7528\u4e8e\u68c0\u6d4b\u670d\u52a1\u662f\u5426\u53ef\u7528\uff0c\u56de\u58f0\u6d4b\u8bd5\u6309\u7167\u6b63\u5e38\u8bf7\u6c42\u6d41\u7a0b\u6267\u884c\uff0c\u80fd\u591f\u6d4b\u8bd5\u6574\u4e2a\u8c03\u7528\u662f\u5426\u901a\u7545\uff0c\u53ef\u7528\u4e8e\u76d1\u63a7\u3002 \u6240\u6709\u670d\u52a1\u81ea\u52a8\u5b9e\u73b0 EchoService \u63a5\u53e3\uff0c\u53ea\u9700\u5c06\u4efb\u610f\u670d\u52a1\u5f15\u7528\u5f3a\u5236\u8f6c\u578b\u4e3a EchoService \uff0c\u5373\u53ef\u4f7f\u7528\u3002 Spring \u914d\u7f6e\uff1a dubbo:reference id= memberService interface= com.xxx.MemberService / \u4ee3\u7801\uff1a // \u8fdc\u7a0b\u670d\u52a1\u5f15\u7528 MemberService memberService = ctx.getBean( memberService ); EchoService echoService = (EchoService) memberService; // \u5f3a\u5236\u8f6c\u578b\u4e3aEchoService // \u56de\u58f0\u6d4b\u8bd5\u53ef\u7528\u6027 String status = echoService.$echo( OK ); assert(status.equals( OK ));","title":"\u56de\u58f0\u6d4b\u8bd5"},{"location":"user/demos/events-notify/","text":"\u4e8b\u4ef6\u901a\u77e5 \u5728\u8c03\u7528\u4e4b\u524d\u3001\u8c03\u7528\u4e4b\u540e\u3001\u51fa\u73b0\u5f02\u5e38\u65f6\uff0c\u4f1a\u89e6\u53d1 oninvoke \u3001 onreturn \u3001 onthrow \u4e09\u4e2a\u4e8b\u4ef6\uff0c\u53ef\u4ee5\u914d\u7f6e\u5f53\u4e8b\u4ef6\u53d1\u751f\u65f6\uff0c\u901a\u77e5\u54ea\u4e2a\u7c7b\u7684\u54ea\u4e2a\u65b9\u6cd5 [^1]\u3002 \u670d\u52a1\u63d0\u4f9b\u8005\u4e0e\u6d88\u8d39\u8005\u5171\u4eab\u670d\u52a1\u63a5\u53e3 interface IDemoService { public Person get(int id); } \u670d\u52a1\u63d0\u4f9b\u8005\u5b9e\u73b0 class NormalDemoService implements IDemoService { public Person get(int id) { return new Person(id, charles`son , 4); } } \u670d\u52a1\u63d0\u4f9b\u8005\u914d\u7f6e dubbo:application name= rpc-callback-demo / dubbo:registry address= zookeeper://127.0.0.1:2181 / bean id= demoService class= org.apache.dubbo.callback.implicit.NormalDemoService / dubbo:service interface= org.apache.dubbo.callback.implicit.IDemoService ref= demoService version= 1.0.0 group= cn / \u670d\u52a1\u6d88\u8d39\u8005 Callback \u63a5\u53e3 interface Notify { public void onreturn(Person msg, Integer id); public void onthrow(Throwable ex, Integer id); } \u670d\u52a1\u6d88\u8d39\u8005 Callback \u5b9e\u73b0 class NotifyImpl implements Notify { public Map Integer, Person ret = new HashMap Integer, Person (); public Map Integer, Throwable errors = new HashMap Integer, Throwable (); public void onreturn(Person msg, Integer id) { System.out.println( onreturn: + msg); ret.put(id, msg); } public void onthrow(Throwable ex, Integer id) { errors.put(id, ex); } } \u670d\u52a1\u6d88\u8d39\u8005 Callback \u914d\u7f6e bean id = demoCallback class = org.apache.dubbo.callback.implicit.NofifyImpl / dubbo:reference id= demoService interface= org.apache.dubbo.callback.implicit.IDemoService version= 1.0.0 group= cn dubbo:method name= get async= true onreturn = demoCallback.onreturn onthrow= demoCallback.onthrow / /dubbo:reference callback \u4e0e async \u529f\u80fd\u6b63\u4ea4\u5206\u89e3\uff0c async=true \u8868\u793a\u7ed3\u679c\u662f\u5426\u9a6c\u4e0a\u8fd4\u56de\uff0c onreturn \u8868\u793a\u662f\u5426\u9700\u8981\u56de\u8c03\u3002 \u4e24\u8005\u53e0\u52a0\u5b58\u5728\u4ee5\u4e0b\u51e0\u79cd\u7ec4\u5408\u60c5\u51b5 [^2]\uff1a \u5f02\u6b65\u56de\u8c03\u6a21\u5f0f\uff1a async=true onreturn=\"xxx\" \u540c\u6b65\u56de\u8c03\u6a21\u5f0f\uff1a async=false onreturn=\"xxx\" \u5f02\u6b65\u65e0\u56de\u8c03 \uff1a async=true \u540c\u6b65\u65e0\u56de\u8c03 \uff1a async=false \u6d4b\u8bd5\u4ee3\u7801 IDemoService demoService = (IDemoService) context.getBean( demoService ); NofifyImpl notify = (NofifyImpl) context.getBean( demoCallback ); int requestId = 2; Person ret = demoService.get(requestId); Assert.assertEquals(null, ret); //for Test\uff1a\u53ea\u662f\u7528\u6765\u8bf4\u660ecallback\u6b63\u5e38\u88ab\u8c03\u7528\uff0c\u4e1a\u52a1\u5177\u4f53\u5b9e\u73b0\u81ea\u884c\u51b3\u5b9a. for (int i = 0; i 10; i++) { if (!notify.ret.containsKey(requestId)) { Thread.sleep(200); } else { break; } } Assert.assertEquals(requestId, notify.ret.get(requestId).getId()); [^1]: \u652f\u6301\u7248\u672c\uff1a 2.0.7 \u4e4b\u540e [^2]: async=false \u9ed8\u8ba4","title":"\u4e8b\u4ef6\u901a\u77e5"},{"location":"user/demos/events-notify/#_1","text":"\u5728\u8c03\u7528\u4e4b\u524d\u3001\u8c03\u7528\u4e4b\u540e\u3001\u51fa\u73b0\u5f02\u5e38\u65f6\uff0c\u4f1a\u89e6\u53d1 oninvoke \u3001 onreturn \u3001 onthrow \u4e09\u4e2a\u4e8b\u4ef6\uff0c\u53ef\u4ee5\u914d\u7f6e\u5f53\u4e8b\u4ef6\u53d1\u751f\u65f6\uff0c\u901a\u77e5\u54ea\u4e2a\u7c7b\u7684\u54ea\u4e2a\u65b9\u6cd5 [^1]\u3002","title":"\u4e8b\u4ef6\u901a\u77e5"},{"location":"user/demos/events-notify/#_2","text":"interface IDemoService { public Person get(int id); }","title":"\u670d\u52a1\u63d0\u4f9b\u8005\u4e0e\u6d88\u8d39\u8005\u5171\u4eab\u670d\u52a1\u63a5\u53e3"},{"location":"user/demos/events-notify/#_3","text":"class NormalDemoService implements IDemoService { public Person get(int id) { return new Person(id, charles`son , 4); } }","title":"\u670d\u52a1\u63d0\u4f9b\u8005\u5b9e\u73b0"},{"location":"user/demos/events-notify/#_4","text":"dubbo:application name= rpc-callback-demo / dubbo:registry address= zookeeper://127.0.0.1:2181 / bean id= demoService class= org.apache.dubbo.callback.implicit.NormalDemoService / dubbo:service interface= org.apache.dubbo.callback.implicit.IDemoService ref= demoService version= 1.0.0 group= cn /","title":"\u670d\u52a1\u63d0\u4f9b\u8005\u914d\u7f6e"},{"location":"user/demos/events-notify/#callback","text":"interface Notify { public void onreturn(Person msg, Integer id); public void onthrow(Throwable ex, Integer id); }","title":"\u670d\u52a1\u6d88\u8d39\u8005 Callback \u63a5\u53e3"},{"location":"user/demos/events-notify/#callback_1","text":"class NotifyImpl implements Notify { public Map Integer, Person ret = new HashMap Integer, Person (); public Map Integer, Throwable errors = new HashMap Integer, Throwable (); public void onreturn(Person msg, Integer id) { System.out.println( onreturn: + msg); ret.put(id, msg); } public void onthrow(Throwable ex, Integer id) { errors.put(id, ex); } }","title":"\u670d\u52a1\u6d88\u8d39\u8005 Callback \u5b9e\u73b0"},{"location":"user/demos/events-notify/#callback_2","text":"bean id = demoCallback class = org.apache.dubbo.callback.implicit.NofifyImpl / dubbo:reference id= demoService interface= org.apache.dubbo.callback.implicit.IDemoService version= 1.0.0 group= cn dubbo:method name= get async= true onreturn = demoCallback.onreturn onthrow= demoCallback.onthrow / /dubbo:reference callback \u4e0e async \u529f\u80fd\u6b63\u4ea4\u5206\u89e3\uff0c async=true \u8868\u793a\u7ed3\u679c\u662f\u5426\u9a6c\u4e0a\u8fd4\u56de\uff0c onreturn \u8868\u793a\u662f\u5426\u9700\u8981\u56de\u8c03\u3002 \u4e24\u8005\u53e0\u52a0\u5b58\u5728\u4ee5\u4e0b\u51e0\u79cd\u7ec4\u5408\u60c5\u51b5 [^2]\uff1a \u5f02\u6b65\u56de\u8c03\u6a21\u5f0f\uff1a async=true onreturn=\"xxx\" \u540c\u6b65\u56de\u8c03\u6a21\u5f0f\uff1a async=false onreturn=\"xxx\" \u5f02\u6b65\u65e0\u56de\u8c03 \uff1a async=true \u540c\u6b65\u65e0\u56de\u8c03 \uff1a async=false","title":"\u670d\u52a1\u6d88\u8d39\u8005 Callback \u914d\u7f6e"},{"location":"user/demos/events-notify/#_5","text":"IDemoService demoService = (IDemoService) context.getBean( demoService ); NofifyImpl notify = (NofifyImpl) context.getBean( demoCallback ); int requestId = 2; Person ret = demoService.get(requestId); Assert.assertEquals(null, ret); //for Test\uff1a\u53ea\u662f\u7528\u6765\u8bf4\u660ecallback\u6b63\u5e38\u88ab\u8c03\u7528\uff0c\u4e1a\u52a1\u5177\u4f53\u5b9e\u73b0\u81ea\u884c\u51b3\u5b9a. for (int i = 0; i 10; i++) { if (!notify.ret.containsKey(requestId)) { Thread.sleep(200); } else { break; } } Assert.assertEquals(requestId, notify.ret.get(requestId).getId()); [^1]: \u652f\u6301\u7248\u672c\uff1a 2.0.7 \u4e4b\u540e [^2]: async=false \u9ed8\u8ba4","title":"\u6d4b\u8bd5\u4ee3\u7801"},{"location":"user/demos/explicit-target/","text":"\u76f4\u8fde\u63d0\u4f9b\u8005 \u5728\u5f00\u53d1\u53ca\u6d4b\u8bd5\u73af\u5883\u4e0b\uff0c\u7ecf\u5e38\u9700\u8981\u7ed5\u8fc7\u6ce8\u518c\u4e2d\u5fc3\uff0c\u53ea\u6d4b\u8bd5\u6307\u5b9a\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u8fd9\u65f6\u5019\u53ef\u80fd\u9700\u8981\u70b9\u5bf9\u70b9\u76f4\u8fde\uff0c\u70b9\u5bf9\u70b9\u76f4\u8fde\u65b9\u5f0f\uff0c\u5c06\u4ee5\u670d\u52a1\u63a5\u53e3\u4e3a\u5355\u4f4d\uff0c\u5ffd\u7565\u6ce8\u518c\u4e2d\u5fc3\u7684\u63d0\u4f9b\u8005\u5217\u8868\uff0cA \u63a5\u53e3\u914d\u7f6e\u70b9\u5bf9\u70b9\uff0c\u4e0d\u5f71\u54cd B \u63a5\u53e3\u4ece\u6ce8\u518c\u4e2d\u5fc3\u83b7\u53d6\u5217\u8868\u3002 \u901a\u8fc7 XML \u914d\u7f6e \u5982\u679c\u662f\u7ebf\u4e0a\u9700\u6c42\u9700\u8981\u70b9\u5bf9\u70b9\uff0c\u53ef\u5728 dubbo:reference \u4e2d\u914d\u7f6e url \u6307\u5411\u63d0\u4f9b\u8005\uff0c\u5c06\u7ed5\u8fc7\u6ce8\u518c\u4e2d\u5fc3\uff0c\u591a\u4e2a\u5730\u5740\u7528\u5206\u53f7\u9694\u5f00\uff0c\u914d\u7f6e\u5982\u4e0b [^1]\uff1a dubbo:reference id= xxxService interface= com.alibaba.xxx.XxxService url= dubbo://localhost:20890 / \u901a\u8fc7 -D \u53c2\u6570\u6307\u5b9a \u5728 JVM \u542f\u52a8\u53c2\u6570\u4e2d\u52a0\u5165-D\u53c2\u6570\u6620\u5c04\u670d\u52a1\u5730\u5740 [^2]\uff0c\u5982\uff1a java -Dcom.alibaba.xxx.XxxService=dubbo://localhost:20890 \u901a\u8fc7\u6587\u4ef6\u6620\u5c04 \u5982\u679c\u670d\u52a1\u6bd4\u8f83\u591a\uff0c\u4e5f\u53ef\u4ee5\u7528\u6587\u4ef6\u6620\u5c04\uff0c\u7528 -Ddubbo.resolve.file \u6307\u5b9a\u6620\u5c04\u6587\u4ef6\u8def\u5f84\uff0c\u6b64\u914d\u7f6e\u4f18\u5148\u7ea7\u9ad8\u4e8e dubbo:reference \u4e2d\u7684\u914d\u7f6e [^3]\uff0c\u5982\uff1a java -Ddubbo.resolve.file=xxx.properties \u7136\u540e\u5728\u6620\u5c04\u6587\u4ef6 xxx.properties \u4e2d\u52a0\u5165\u914d\u7f6e\uff0c\u5176\u4e2d key \u4e3a\u670d\u52a1\u540d\uff0cvalue \u4e3a\u670d\u52a1\u63d0\u4f9b\u8005 URL\uff1a com.alibaba.xxx.XxxService=dubbo://localhost:20890 \u6ce8\u610f \u4e3a\u4e86\u907f\u514d\u590d\u6742\u5316\u7ebf\u4e0a\u73af\u5883\uff0c\u4e0d\u8981\u5728\u7ebf\u4e0a\u4f7f\u7528\u8fd9\u4e2a\u529f\u80fd\uff0c\u53ea\u5e94\u5728\u6d4b\u8bd5\u9636\u6bb5\u4f7f\u7528\u3002 [^1]: 1.0.6 \u53ca\u4ee5\u4e0a\u7248\u672c\u652f\u6301 [^2]: key \u4e3a\u670d\u52a1\u540d\uff0cvalue \u4e3a\u670d\u52a1\u63d0\u4f9b\u8005 url\uff0c\u6b64\u914d\u7f6e\u4f18\u5148\u7ea7\u6700\u9ad8\uff0c 1.0.15 \u53ca\u4ee5\u4e0a\u7248\u672c\u652f\u6301 [^3]: 1.0.15 \u53ca\u4ee5\u4e0a\u7248\u672c\u652f\u6301\uff0c 2.0 \u4ee5\u4e0a\u7248\u672c\u81ea\u52a8\u52a0\u8f7d ${user.home}/dubbo-resolve.properties\u6587\u4ef6\uff0c\u4e0d\u9700\u8981\u914d\u7f6e","title":"\u76f4\u8fde\u63d0\u4f9b\u8005"},{"location":"user/demos/explicit-target/#_1","text":"\u5728\u5f00\u53d1\u53ca\u6d4b\u8bd5\u73af\u5883\u4e0b\uff0c\u7ecf\u5e38\u9700\u8981\u7ed5\u8fc7\u6ce8\u518c\u4e2d\u5fc3\uff0c\u53ea\u6d4b\u8bd5\u6307\u5b9a\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u8fd9\u65f6\u5019\u53ef\u80fd\u9700\u8981\u70b9\u5bf9\u70b9\u76f4\u8fde\uff0c\u70b9\u5bf9\u70b9\u76f4\u8fde\u65b9\u5f0f\uff0c\u5c06\u4ee5\u670d\u52a1\u63a5\u53e3\u4e3a\u5355\u4f4d\uff0c\u5ffd\u7565\u6ce8\u518c\u4e2d\u5fc3\u7684\u63d0\u4f9b\u8005\u5217\u8868\uff0cA \u63a5\u53e3\u914d\u7f6e\u70b9\u5bf9\u70b9\uff0c\u4e0d\u5f71\u54cd B \u63a5\u53e3\u4ece\u6ce8\u518c\u4e2d\u5fc3\u83b7\u53d6\u5217\u8868\u3002","title":"\u76f4\u8fde\u63d0\u4f9b\u8005"},{"location":"user/demos/explicit-target/#xml","text":"\u5982\u679c\u662f\u7ebf\u4e0a\u9700\u6c42\u9700\u8981\u70b9\u5bf9\u70b9\uff0c\u53ef\u5728 dubbo:reference \u4e2d\u914d\u7f6e url \u6307\u5411\u63d0\u4f9b\u8005\uff0c\u5c06\u7ed5\u8fc7\u6ce8\u518c\u4e2d\u5fc3\uff0c\u591a\u4e2a\u5730\u5740\u7528\u5206\u53f7\u9694\u5f00\uff0c\u914d\u7f6e\u5982\u4e0b [^1]\uff1a dubbo:reference id= xxxService interface= com.alibaba.xxx.XxxService url= dubbo://localhost:20890 /","title":"\u901a\u8fc7 XML \u914d\u7f6e"},{"location":"user/demos/explicit-target/#-d","text":"\u5728 JVM \u542f\u52a8\u53c2\u6570\u4e2d\u52a0\u5165-D\u53c2\u6570\u6620\u5c04\u670d\u52a1\u5730\u5740 [^2]\uff0c\u5982\uff1a java -Dcom.alibaba.xxx.XxxService=dubbo://localhost:20890","title":"\u901a\u8fc7 -D \u53c2\u6570\u6307\u5b9a"},{"location":"user/demos/explicit-target/#_2","text":"\u5982\u679c\u670d\u52a1\u6bd4\u8f83\u591a\uff0c\u4e5f\u53ef\u4ee5\u7528\u6587\u4ef6\u6620\u5c04\uff0c\u7528 -Ddubbo.resolve.file \u6307\u5b9a\u6620\u5c04\u6587\u4ef6\u8def\u5f84\uff0c\u6b64\u914d\u7f6e\u4f18\u5148\u7ea7\u9ad8\u4e8e dubbo:reference \u4e2d\u7684\u914d\u7f6e [^3]\uff0c\u5982\uff1a java -Ddubbo.resolve.file=xxx.properties \u7136\u540e\u5728\u6620\u5c04\u6587\u4ef6 xxx.properties \u4e2d\u52a0\u5165\u914d\u7f6e\uff0c\u5176\u4e2d key \u4e3a\u670d\u52a1\u540d\uff0cvalue \u4e3a\u670d\u52a1\u63d0\u4f9b\u8005 URL\uff1a com.alibaba.xxx.XxxService=dubbo://localhost:20890 \u6ce8\u610f \u4e3a\u4e86\u907f\u514d\u590d\u6742\u5316\u7ebf\u4e0a\u73af\u5883\uff0c\u4e0d\u8981\u5728\u7ebf\u4e0a\u4f7f\u7528\u8fd9\u4e2a\u529f\u80fd\uff0c\u53ea\u5e94\u5728\u6d4b\u8bd5\u9636\u6bb5\u4f7f\u7528\u3002 [^1]: 1.0.6 \u53ca\u4ee5\u4e0a\u7248\u672c\u652f\u6301 [^2]: key \u4e3a\u670d\u52a1\u540d\uff0cvalue \u4e3a\u670d\u52a1\u63d0\u4f9b\u8005 url\uff0c\u6b64\u914d\u7f6e\u4f18\u5148\u7ea7\u6700\u9ad8\uff0c 1.0.15 \u53ca\u4ee5\u4e0a\u7248\u672c\u652f\u6301 [^3]: 1.0.15 \u53ca\u4ee5\u4e0a\u7248\u672c\u652f\u6301\uff0c 2.0 \u4ee5\u4e0a\u7248\u672c\u81ea\u52a8\u52a0\u8f7d ${user.home}/dubbo-resolve.properties\u6587\u4ef6\uff0c\u4e0d\u9700\u8981\u914d\u7f6e","title":"\u901a\u8fc7\u6587\u4ef6\u6620\u5c04"},{"location":"user/demos/fault-tolerent-strategy/","text":"\u96c6\u7fa4\u5bb9\u9519 \u5728\u96c6\u7fa4\u8c03\u7528\u5931\u8d25\u65f6\uff0cDubbo \u63d0\u4f9b\u4e86\u591a\u79cd\u5bb9\u9519\u65b9\u6848\uff0c\u7f3a\u7701\u4e3a failover \u91cd\u8bd5\u3002 \u5404\u8282\u70b9\u5173\u7cfb\uff1a \u8fd9\u91cc\u7684 Invoker \u662f Provider \u7684\u4e00\u4e2a\u53ef\u8c03\u7528 Service \u7684\u62bd\u8c61\uff0c Invoker \u5c01\u88c5\u4e86 Provider \u5730\u5740\u53ca Service \u63a5\u53e3\u4fe1\u606f Directory \u4ee3\u8868\u591a\u4e2a Invoker \uff0c\u53ef\u4ee5\u628a\u5b83\u770b\u6210 List Invoker \uff0c\u4f46\u4e0e List \u4e0d\u540c\u7684\u662f\uff0c\u5b83\u7684\u503c\u53ef\u80fd\u662f\u52a8\u6001\u53d8\u5316\u7684\uff0c\u6bd4\u5982\u6ce8\u518c\u4e2d\u5fc3\u63a8\u9001\u53d8\u66f4 Cluster \u5c06 Directory \u4e2d\u7684\u591a\u4e2a Invoker \u4f2a\u88c5\u6210\u4e00\u4e2a Invoker \uff0c\u5bf9\u4e0a\u5c42\u900f\u660e\uff0c\u4f2a\u88c5\u8fc7\u7a0b\u5305\u542b\u4e86\u5bb9\u9519\u903b\u8f91\uff0c\u8c03\u7528\u5931\u8d25\u540e\uff0c\u91cd\u8bd5\u53e6\u4e00\u4e2a Router \u8d1f\u8d23\u4ece\u591a\u4e2a Invoker \u4e2d\u6309\u8def\u7531\u89c4\u5219\u9009\u51fa\u5b50\u96c6\uff0c\u6bd4\u5982\u8bfb\u5199\u5206\u79bb\uff0c\u5e94\u7528\u9694\u79bb\u7b49 LoadBalance \u8d1f\u8d23\u4ece\u591a\u4e2a Invoker \u4e2d\u9009\u51fa\u5177\u4f53\u7684\u4e00\u4e2a\u7528\u4e8e\u672c\u6b21\u8c03\u7528\uff0c\u9009\u7684\u8fc7\u7a0b\u5305\u542b\u4e86\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\uff0c\u8c03\u7528\u5931\u8d25\u540e\uff0c\u9700\u8981\u91cd\u9009 \u96c6\u7fa4\u5bb9\u9519\u6a21\u5f0f \u53ef\u4ee5\u81ea\u884c\u6269\u5c55\u96c6\u7fa4\u5bb9\u9519\u7b56\u7565\uff0c\u53c2\u89c1\uff1a \u96c6\u7fa4\u6269\u5c55 Failover Cluster \u5931\u8d25\u81ea\u52a8\u5207\u6362\uff0c\u5f53\u51fa\u73b0\u5931\u8d25\uff0c\u91cd\u8bd5\u5176\u5b83\u670d\u52a1\u5668 ^1 \u3002\u901a\u5e38\u7528\u4e8e\u8bfb\u64cd\u4f5c\uff0c\u4f46\u91cd\u8bd5\u4f1a\u5e26\u6765\u66f4\u957f\u5ef6\u8fdf\u3002\u53ef\u901a\u8fc7 retries=\"2\" \u6765\u8bbe\u7f6e\u91cd\u8bd5\u6b21\u6570(\u4e0d\u542b\u7b2c\u4e00\u6b21)\u3002 \u91cd\u8bd5\u6b21\u6570\u914d\u7f6e\u5982\u4e0b\uff1a dubbo:service retries= 2 / \u6216 dubbo:reference retries= 2 / \u6216 dubbo:reference dubbo:method name= findFoo retries= 2 / /dubbo:reference Failfast Cluster \u5feb\u901f\u5931\u8d25\uff0c\u53ea\u53d1\u8d77\u4e00\u6b21\u8c03\u7528\uff0c\u5931\u8d25\u7acb\u5373\u62a5\u9519\u3002\u901a\u5e38\u7528\u4e8e\u975e\u5e42\u7b49\u6027\u7684\u5199\u64cd\u4f5c\uff0c\u6bd4\u5982\u65b0\u589e\u8bb0\u5f55\u3002 Failsafe Cluster \u5931\u8d25\u5b89\u5168\uff0c\u51fa\u73b0\u5f02\u5e38\u65f6\uff0c\u76f4\u63a5\u5ffd\u7565\u3002\u901a\u5e38\u7528\u4e8e\u5199\u5165\u5ba1\u8ba1\u65e5\u5fd7\u7b49\u64cd\u4f5c\u3002 Failback Cluster \u5931\u8d25\u81ea\u52a8\u6062\u590d\uff0c\u540e\u53f0\u8bb0\u5f55\u5931\u8d25\u8bf7\u6c42\uff0c\u5b9a\u65f6\u91cd\u53d1\u3002\u901a\u5e38\u7528\u4e8e\u6d88\u606f\u901a\u77e5\u64cd\u4f5c\u3002 Forking Cluster \u5e76\u884c\u8c03\u7528\u591a\u4e2a\u670d\u52a1\u5668\uff0c\u53ea\u8981\u4e00\u4e2a\u6210\u529f\u5373\u8fd4\u56de\u3002\u901a\u5e38\u7528\u4e8e\u5b9e\u65f6\u6027\u8981\u6c42\u8f83\u9ad8\u7684\u8bfb\u64cd\u4f5c\uff0c\u4f46\u9700\u8981\u6d6a\u8d39\u66f4\u591a\u670d\u52a1\u8d44\u6e90\u3002\u53ef\u901a\u8fc7 forks=\"2\" \u6765\u8bbe\u7f6e\u6700\u5927\u5e76\u884c\u6570\u3002 Broadcast Cluster \u5e7f\u64ad\u8c03\u7528\u6240\u6709\u63d0\u4f9b\u8005\uff0c\u9010\u4e2a\u8c03\u7528\uff0c\u4efb\u610f\u4e00\u53f0\u62a5\u9519\u5219\u62a5\u9519 [^2]\u3002\u901a\u5e38\u7528\u4e8e\u901a\u77e5\u6240\u6709\u63d0\u4f9b\u8005\u66f4\u65b0\u7f13\u5b58\u6216\u65e5\u5fd7\u7b49\u672c\u5730\u8d44\u6e90\u4fe1\u606f\u3002 \u96c6\u7fa4\u6a21\u5f0f\u914d\u7f6e \u6309\u7167\u4ee5\u4e0b\u793a\u4f8b\u5728\u670d\u52a1\u63d0\u4f9b\u65b9\u548c\u6d88\u8d39\u65b9\u914d\u7f6e\u96c6\u7fa4\u6a21\u5f0f dubbo:service cluster= failsafe / \u6216 dubbo:reference cluster= failsafe / [^2]: 2.1.0 \u5f00\u59cb\u652f\u6301","title":"\u96c6\u7fa4\u5bb9\u9519"},{"location":"user/demos/fault-tolerent-strategy/#_1","text":"\u5728\u96c6\u7fa4\u8c03\u7528\u5931\u8d25\u65f6\uff0cDubbo \u63d0\u4f9b\u4e86\u591a\u79cd\u5bb9\u9519\u65b9\u6848\uff0c\u7f3a\u7701\u4e3a failover \u91cd\u8bd5\u3002 \u5404\u8282\u70b9\u5173\u7cfb\uff1a \u8fd9\u91cc\u7684 Invoker \u662f Provider \u7684\u4e00\u4e2a\u53ef\u8c03\u7528 Service \u7684\u62bd\u8c61\uff0c Invoker \u5c01\u88c5\u4e86 Provider \u5730\u5740\u53ca Service \u63a5\u53e3\u4fe1\u606f Directory \u4ee3\u8868\u591a\u4e2a Invoker \uff0c\u53ef\u4ee5\u628a\u5b83\u770b\u6210 List Invoker \uff0c\u4f46\u4e0e List \u4e0d\u540c\u7684\u662f\uff0c\u5b83\u7684\u503c\u53ef\u80fd\u662f\u52a8\u6001\u53d8\u5316\u7684\uff0c\u6bd4\u5982\u6ce8\u518c\u4e2d\u5fc3\u63a8\u9001\u53d8\u66f4 Cluster \u5c06 Directory \u4e2d\u7684\u591a\u4e2a Invoker \u4f2a\u88c5\u6210\u4e00\u4e2a Invoker \uff0c\u5bf9\u4e0a\u5c42\u900f\u660e\uff0c\u4f2a\u88c5\u8fc7\u7a0b\u5305\u542b\u4e86\u5bb9\u9519\u903b\u8f91\uff0c\u8c03\u7528\u5931\u8d25\u540e\uff0c\u91cd\u8bd5\u53e6\u4e00\u4e2a Router \u8d1f\u8d23\u4ece\u591a\u4e2a Invoker \u4e2d\u6309\u8def\u7531\u89c4\u5219\u9009\u51fa\u5b50\u96c6\uff0c\u6bd4\u5982\u8bfb\u5199\u5206\u79bb\uff0c\u5e94\u7528\u9694\u79bb\u7b49 LoadBalance \u8d1f\u8d23\u4ece\u591a\u4e2a Invoker \u4e2d\u9009\u51fa\u5177\u4f53\u7684\u4e00\u4e2a\u7528\u4e8e\u672c\u6b21\u8c03\u7528\uff0c\u9009\u7684\u8fc7\u7a0b\u5305\u542b\u4e86\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\uff0c\u8c03\u7528\u5931\u8d25\u540e\uff0c\u9700\u8981\u91cd\u9009","title":"\u96c6\u7fa4\u5bb9\u9519"},{"location":"user/demos/fault-tolerent-strategy/#_2","text":"\u53ef\u4ee5\u81ea\u884c\u6269\u5c55\u96c6\u7fa4\u5bb9\u9519\u7b56\u7565\uff0c\u53c2\u89c1\uff1a \u96c6\u7fa4\u6269\u5c55","title":"\u96c6\u7fa4\u5bb9\u9519\u6a21\u5f0f"},{"location":"user/demos/fault-tolerent-strategy/#failover-cluster","text":"\u5931\u8d25\u81ea\u52a8\u5207\u6362\uff0c\u5f53\u51fa\u73b0\u5931\u8d25\uff0c\u91cd\u8bd5\u5176\u5b83\u670d\u52a1\u5668 ^1 \u3002\u901a\u5e38\u7528\u4e8e\u8bfb\u64cd\u4f5c\uff0c\u4f46\u91cd\u8bd5\u4f1a\u5e26\u6765\u66f4\u957f\u5ef6\u8fdf\u3002\u53ef\u901a\u8fc7 retries=\"2\" \u6765\u8bbe\u7f6e\u91cd\u8bd5\u6b21\u6570(\u4e0d\u542b\u7b2c\u4e00\u6b21)\u3002 \u91cd\u8bd5\u6b21\u6570\u914d\u7f6e\u5982\u4e0b\uff1a dubbo:service retries= 2 / \u6216 dubbo:reference retries= 2 / \u6216 dubbo:reference dubbo:method name= findFoo retries= 2 / /dubbo:reference","title":"Failover Cluster"},{"location":"user/demos/fault-tolerent-strategy/#failfast-cluster","text":"\u5feb\u901f\u5931\u8d25\uff0c\u53ea\u53d1\u8d77\u4e00\u6b21\u8c03\u7528\uff0c\u5931\u8d25\u7acb\u5373\u62a5\u9519\u3002\u901a\u5e38\u7528\u4e8e\u975e\u5e42\u7b49\u6027\u7684\u5199\u64cd\u4f5c\uff0c\u6bd4\u5982\u65b0\u589e\u8bb0\u5f55\u3002","title":"Failfast Cluster"},{"location":"user/demos/fault-tolerent-strategy/#failsafe-cluster","text":"\u5931\u8d25\u5b89\u5168\uff0c\u51fa\u73b0\u5f02\u5e38\u65f6\uff0c\u76f4\u63a5\u5ffd\u7565\u3002\u901a\u5e38\u7528\u4e8e\u5199\u5165\u5ba1\u8ba1\u65e5\u5fd7\u7b49\u64cd\u4f5c\u3002","title":"Failsafe Cluster"},{"location":"user/demos/fault-tolerent-strategy/#failback-cluster","text":"\u5931\u8d25\u81ea\u52a8\u6062\u590d\uff0c\u540e\u53f0\u8bb0\u5f55\u5931\u8d25\u8bf7\u6c42\uff0c\u5b9a\u65f6\u91cd\u53d1\u3002\u901a\u5e38\u7528\u4e8e\u6d88\u606f\u901a\u77e5\u64cd\u4f5c\u3002","title":"Failback Cluster"},{"location":"user/demos/fault-tolerent-strategy/#forking-cluster","text":"\u5e76\u884c\u8c03\u7528\u591a\u4e2a\u670d\u52a1\u5668\uff0c\u53ea\u8981\u4e00\u4e2a\u6210\u529f\u5373\u8fd4\u56de\u3002\u901a\u5e38\u7528\u4e8e\u5b9e\u65f6\u6027\u8981\u6c42\u8f83\u9ad8\u7684\u8bfb\u64cd\u4f5c\uff0c\u4f46\u9700\u8981\u6d6a\u8d39\u66f4\u591a\u670d\u52a1\u8d44\u6e90\u3002\u53ef\u901a\u8fc7 forks=\"2\" \u6765\u8bbe\u7f6e\u6700\u5927\u5e76\u884c\u6570\u3002","title":"Forking Cluster"},{"location":"user/demos/fault-tolerent-strategy/#broadcast-cluster","text":"\u5e7f\u64ad\u8c03\u7528\u6240\u6709\u63d0\u4f9b\u8005\uff0c\u9010\u4e2a\u8c03\u7528\uff0c\u4efb\u610f\u4e00\u53f0\u62a5\u9519\u5219\u62a5\u9519 [^2]\u3002\u901a\u5e38\u7528\u4e8e\u901a\u77e5\u6240\u6709\u63d0\u4f9b\u8005\u66f4\u65b0\u7f13\u5b58\u6216\u65e5\u5fd7\u7b49\u672c\u5730\u8d44\u6e90\u4fe1\u606f\u3002","title":"Broadcast Cluster"},{"location":"user/demos/fault-tolerent-strategy/#_3","text":"\u6309\u7167\u4ee5\u4e0b\u793a\u4f8b\u5728\u670d\u52a1\u63d0\u4f9b\u65b9\u548c\u6d88\u8d39\u65b9\u914d\u7f6e\u96c6\u7fa4\u6a21\u5f0f dubbo:service cluster= failsafe / \u6216 dubbo:reference cluster= failsafe / [^2]: 2.1.0 \u5f00\u59cb\u652f\u6301","title":"\u96c6\u7fa4\u6a21\u5f0f\u914d\u7f6e"},{"location":"user/demos/generic-reference/","text":"\u4f7f\u7528\u6cdb\u5316\u8c03\u7528 \u6cdb\u5316\u63a5\u53e3\u8c03\u7528\u65b9\u5f0f\u4e3b\u8981\u7528\u4e8e\u5ba2\u6237\u7aef\u6ca1\u6709 API \u63a5\u53e3\u53ca\u6a21\u578b\u7c7b\u5143\u7684\u60c5\u51b5\uff0c\u53c2\u6570\u53ca\u8fd4\u56de\u503c\u4e2d\u7684\u6240\u6709 POJO \u5747\u7528 Map \u8868\u793a\uff0c\u901a\u5e38\u7528\u4e8e\u6846\u67b6\u96c6\u6210\uff0c\u6bd4\u5982\uff1a\u5b9e\u73b0\u4e00\u4e2a\u901a\u7528\u7684\u670d\u52a1\u6d4b\u8bd5\u6846\u67b6\uff0c\u53ef\u901a\u8fc7 GenericService \u8c03\u7528\u6240\u6709\u670d\u52a1\u5b9e\u73b0\u3002 \u901a\u8fc7 Spring \u4f7f\u7528\u6cdb\u5316\u8c03\u7528 \u5728 Spring \u914d\u7f6e\u7533\u660e generic=\"true\" \uff1a dubbo:reference id= barService interface= com.foo.BarService generic= true / \u5728 Java \u4ee3\u7801\u83b7\u53d6 barService \u5e76\u5f00\u59cb\u6cdb\u5316\u8c03\u7528\uff1a GenericService barService = (GenericService) applicationContext.getBean( barService ); Object result = barService.$invoke( sayHello , new String[] { java.lang.String }, new Object[] { World }); \u901a\u8fc7 API \u65b9\u5f0f\u4f7f\u7528\u6cdb\u5316\u8c03\u7528 import org.apache.dubbo.rpc.service.GenericService; ... // \u5f15\u7528\u8fdc\u7a0b\u670d\u52a1 // \u8be5\u5b9e\u4f8b\u5f88\u91cd\u91cf\uff0c\u91cc\u9762\u5c01\u88c5\u4e86\u6240\u6709\u4e0e\u6ce8\u518c\u4e2d\u5fc3\u53ca\u670d\u52a1\u63d0\u4f9b\u65b9\u8fde\u63a5\uff0c\u8bf7\u7f13\u5b58 ReferenceConfig GenericService reference = new ReferenceConfig GenericService (); // \u5f31\u7c7b\u578b\u63a5\u53e3\u540d reference.setInterface( com.xxx.XxxService ); reference.setVersion( 1.0.0 ); // \u58f0\u660e\u4e3a\u6cdb\u5316\u63a5\u53e3 reference.setGeneric(true); // \u7528org.apache.dubbo.rpc.service.GenericService\u53ef\u4ee5\u66ff\u4ee3\u6240\u6709\u63a5\u53e3\u5f15\u7528 GenericService genericService = reference.get(); // \u57fa\u672c\u7c7b\u578b\u4ee5\u53caDate,List,Map\u7b49\u4e0d\u9700\u8981\u8f6c\u6362\uff0c\u76f4\u63a5\u8c03\u7528 Object result = genericService.$invoke( sayHello , new String[] { java.lang.String }, new Object[] { world }); // \u7528Map\u8868\u793aPOJO\u53c2\u6570\uff0c\u5982\u679c\u8fd4\u56de\u503c\u4e3aPOJO\u4e5f\u5c06\u81ea\u52a8\u8f6c\u6210Map Map String, Object person = new HashMap String, Object (); person.put( name , xxx ); person.put( password , yyy ); // \u5982\u679c\u8fd4\u56dePOJO\u5c06\u81ea\u52a8\u8f6c\u6210Map Object result = genericService.$invoke( findPerson , new String[] { com.xxx.Person }, new Object[]{person}); ... \u6709\u5173\u6cdb\u5316\u7c7b\u578b\u7684\u8fdb\u4e00\u6b65\u89e3\u91ca \u5047\u8bbe\u5b58\u5728 POJO \u5982\uff1a package com.xxx; public class PersonImpl implements Person { private String name; private String password; public String getName() { return name; } public void setName(String name) { this.name = name; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } } \u5219 POJO \u6570\u636e\uff1a Person person = new PersonImpl(); person.setName( xxx ); person.setPassword( yyy ); \u53ef\u7528\u4e0b\u9762 Map \u8868\u793a\uff1a Map String, Object map = new HashMap String, Object (); // \u6ce8\u610f\uff1a\u5982\u679c\u53c2\u6570\u7c7b\u578b\u662f\u63a5\u53e3\uff0c\u6216\u8005List\u7b49\u4e22\u5931\u6cdb\u578b\uff0c\u53ef\u901a\u8fc7class\u5c5e\u6027\u6307\u5b9a\u7c7b\u578b\u3002 map.put( class , com.xxx.PersonImpl ); map.put( name , xxx ); map.put( password , yyy );","title":"\u6cdb\u5316\u5f15\u7528"},{"location":"user/demos/generic-reference/#_1","text":"\u6cdb\u5316\u63a5\u53e3\u8c03\u7528\u65b9\u5f0f\u4e3b\u8981\u7528\u4e8e\u5ba2\u6237\u7aef\u6ca1\u6709 API \u63a5\u53e3\u53ca\u6a21\u578b\u7c7b\u5143\u7684\u60c5\u51b5\uff0c\u53c2\u6570\u53ca\u8fd4\u56de\u503c\u4e2d\u7684\u6240\u6709 POJO \u5747\u7528 Map \u8868\u793a\uff0c\u901a\u5e38\u7528\u4e8e\u6846\u67b6\u96c6\u6210\uff0c\u6bd4\u5982\uff1a\u5b9e\u73b0\u4e00\u4e2a\u901a\u7528\u7684\u670d\u52a1\u6d4b\u8bd5\u6846\u67b6\uff0c\u53ef\u901a\u8fc7 GenericService \u8c03\u7528\u6240\u6709\u670d\u52a1\u5b9e\u73b0\u3002","title":"\u4f7f\u7528\u6cdb\u5316\u8c03\u7528"},{"location":"user/demos/generic-reference/#spring","text":"\u5728 Spring \u914d\u7f6e\u7533\u660e generic=\"true\" \uff1a dubbo:reference id= barService interface= com.foo.BarService generic= true / \u5728 Java \u4ee3\u7801\u83b7\u53d6 barService \u5e76\u5f00\u59cb\u6cdb\u5316\u8c03\u7528\uff1a GenericService barService = (GenericService) applicationContext.getBean( barService ); Object result = barService.$invoke( sayHello , new String[] { java.lang.String }, new Object[] { World });","title":"\u901a\u8fc7 Spring \u4f7f\u7528\u6cdb\u5316\u8c03\u7528"},{"location":"user/demos/generic-reference/#api","text":"import org.apache.dubbo.rpc.service.GenericService; ... // \u5f15\u7528\u8fdc\u7a0b\u670d\u52a1 // \u8be5\u5b9e\u4f8b\u5f88\u91cd\u91cf\uff0c\u91cc\u9762\u5c01\u88c5\u4e86\u6240\u6709\u4e0e\u6ce8\u518c\u4e2d\u5fc3\u53ca\u670d\u52a1\u63d0\u4f9b\u65b9\u8fde\u63a5\uff0c\u8bf7\u7f13\u5b58 ReferenceConfig GenericService reference = new ReferenceConfig GenericService (); // \u5f31\u7c7b\u578b\u63a5\u53e3\u540d reference.setInterface( com.xxx.XxxService ); reference.setVersion( 1.0.0 ); // \u58f0\u660e\u4e3a\u6cdb\u5316\u63a5\u53e3 reference.setGeneric(true); // \u7528org.apache.dubbo.rpc.service.GenericService\u53ef\u4ee5\u66ff\u4ee3\u6240\u6709\u63a5\u53e3\u5f15\u7528 GenericService genericService = reference.get(); // \u57fa\u672c\u7c7b\u578b\u4ee5\u53caDate,List,Map\u7b49\u4e0d\u9700\u8981\u8f6c\u6362\uff0c\u76f4\u63a5\u8c03\u7528 Object result = genericService.$invoke( sayHello , new String[] { java.lang.String }, new Object[] { world }); // \u7528Map\u8868\u793aPOJO\u53c2\u6570\uff0c\u5982\u679c\u8fd4\u56de\u503c\u4e3aPOJO\u4e5f\u5c06\u81ea\u52a8\u8f6c\u6210Map Map String, Object person = new HashMap String, Object (); person.put( name , xxx ); person.put( password , yyy ); // \u5982\u679c\u8fd4\u56dePOJO\u5c06\u81ea\u52a8\u8f6c\u6210Map Object result = genericService.$invoke( findPerson , new String[] { com.xxx.Person }, new Object[]{person}); ...","title":"\u901a\u8fc7 API \u65b9\u5f0f\u4f7f\u7528\u6cdb\u5316\u8c03\u7528"},{"location":"user/demos/generic-reference/#_2","text":"\u5047\u8bbe\u5b58\u5728 POJO \u5982\uff1a package com.xxx; public class PersonImpl implements Person { private String name; private String password; public String getName() { return name; } public void setName(String name) { this.name = name; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } } \u5219 POJO \u6570\u636e\uff1a Person person = new PersonImpl(); person.setName( xxx ); person.setPassword( yyy ); \u53ef\u7528\u4e0b\u9762 Map \u8868\u793a\uff1a Map String, Object map = new HashMap String, Object (); // \u6ce8\u610f\uff1a\u5982\u679c\u53c2\u6570\u7c7b\u578b\u662f\u63a5\u53e3\uff0c\u6216\u8005List\u7b49\u4e22\u5931\u6cdb\u578b\uff0c\u53ef\u901a\u8fc7class\u5c5e\u6027\u6307\u5b9a\u7c7b\u578b\u3002 map.put( class , com.xxx.PersonImpl ); map.put( name , xxx ); map.put( password , yyy );","title":"\u6709\u5173\u6cdb\u5316\u7c7b\u578b\u7684\u8fdb\u4e00\u6b65\u89e3\u91ca"},{"location":"user/demos/generic-service/","text":"\u5b9e\u73b0\u6cdb\u5316\u8c03\u7528 \u6cdb\u63a5\u53e3\u5b9e\u73b0\u65b9\u5f0f\u4e3b\u8981\u7528\u4e8e\u670d\u52a1\u5668\u7aef\u6ca1\u6709API\u63a5\u53e3\u53ca\u6a21\u578b\u7c7b\u5143\u7684\u60c5\u51b5\uff0c\u53c2\u6570\u53ca\u8fd4\u56de\u503c\u4e2d\u7684\u6240\u6709POJO\u5747\u7528Map\u8868\u793a\uff0c\u901a\u5e38\u7528\u4e8e\u6846\u67b6\u96c6\u6210\uff0c\u6bd4\u5982\uff1a\u5b9e\u73b0\u4e00\u4e2a\u901a\u7528\u7684\u8fdc\u7a0b\u670d\u52a1Mock\u6846\u67b6\uff0c\u53ef\u901a\u8fc7\u5b9e\u73b0GenericService\u63a5\u53e3\u5904\u7406\u6240\u6709\u670d\u52a1\u8bf7\u6c42\u3002 \u5728 Java \u4ee3\u7801\u4e2d\u5b9e\u73b0 GenericService \u63a5\u53e3\uff1a package com.foo; public class MyGenericService implements GenericService { public Object $invoke(String methodName, String[] parameterTypes, Object[] args) throws GenericException { if ( sayHello .equals(methodName)) { return Welcome + args[0]; } } } \u901a\u8fc7 Spring \u66b4\u9732\u6cdb\u5316\u5b9e\u73b0 \u5728 Spring \u914d\u7f6e\u7533\u660e\u670d\u52a1\u7684\u5b9e\u73b0\uff1a bean id= genericService class= com.foo.MyGenericService / dubbo:service interface= com.foo.BarService ref= genericService / \u901a\u8fc7 API \u65b9\u5f0f\u66b4\u9732\u6cdb\u5316\u5b9e\u73b0 ... // \u7528org.apache.dubbo.rpc.service.GenericService\u53ef\u4ee5\u66ff\u4ee3\u6240\u6709\u63a5\u53e3\u5b9e\u73b0 GenericService xxxService = new XxxGenericService(); // \u8be5\u5b9e\u4f8b\u5f88\u91cd\u91cf\uff0c\u91cc\u9762\u5c01\u88c5\u4e86\u6240\u6709\u4e0e\u6ce8\u518c\u4e2d\u5fc3\u53ca\u670d\u52a1\u63d0\u4f9b\u65b9\u8fde\u63a5\uff0c\u8bf7\u7f13\u5b58 ServiceConfig GenericService service = new ServiceConfig GenericService (); // \u5f31\u7c7b\u578b\u63a5\u53e3\u540d service.setInterface( com.xxx.XxxService ); service.setVersion( 1.0.0 ); // \u6307\u5411\u4e00\u4e2a\u901a\u7528\u670d\u52a1\u5b9e\u73b0 service.setRef(xxxService); // \u66b4\u9732\u53ca\u6ce8\u518c\u670d\u52a1 service.export();","title":"\u6cdb\u5316\u5b9e\u73b0"},{"location":"user/demos/generic-service/#_1","text":"\u6cdb\u63a5\u53e3\u5b9e\u73b0\u65b9\u5f0f\u4e3b\u8981\u7528\u4e8e\u670d\u52a1\u5668\u7aef\u6ca1\u6709API\u63a5\u53e3\u53ca\u6a21\u578b\u7c7b\u5143\u7684\u60c5\u51b5\uff0c\u53c2\u6570\u53ca\u8fd4\u56de\u503c\u4e2d\u7684\u6240\u6709POJO\u5747\u7528Map\u8868\u793a\uff0c\u901a\u5e38\u7528\u4e8e\u6846\u67b6\u96c6\u6210\uff0c\u6bd4\u5982\uff1a\u5b9e\u73b0\u4e00\u4e2a\u901a\u7528\u7684\u8fdc\u7a0b\u670d\u52a1Mock\u6846\u67b6\uff0c\u53ef\u901a\u8fc7\u5b9e\u73b0GenericService\u63a5\u53e3\u5904\u7406\u6240\u6709\u670d\u52a1\u8bf7\u6c42\u3002 \u5728 Java \u4ee3\u7801\u4e2d\u5b9e\u73b0 GenericService \u63a5\u53e3\uff1a package com.foo; public class MyGenericService implements GenericService { public Object $invoke(String methodName, String[] parameterTypes, Object[] args) throws GenericException { if ( sayHello .equals(methodName)) { return Welcome + args[0]; } } }","title":"\u5b9e\u73b0\u6cdb\u5316\u8c03\u7528"},{"location":"user/demos/generic-service/#spring","text":"\u5728 Spring \u914d\u7f6e\u7533\u660e\u670d\u52a1\u7684\u5b9e\u73b0\uff1a bean id= genericService class= com.foo.MyGenericService / dubbo:service interface= com.foo.BarService ref= genericService /","title":"\u901a\u8fc7 Spring \u66b4\u9732\u6cdb\u5316\u5b9e\u73b0"},{"location":"user/demos/generic-service/#api","text":"... // \u7528org.apache.dubbo.rpc.service.GenericService\u53ef\u4ee5\u66ff\u4ee3\u6240\u6709\u63a5\u53e3\u5b9e\u73b0 GenericService xxxService = new XxxGenericService(); // \u8be5\u5b9e\u4f8b\u5f88\u91cd\u91cf\uff0c\u91cc\u9762\u5c01\u88c5\u4e86\u6240\u6709\u4e0e\u6ce8\u518c\u4e2d\u5fc3\u53ca\u670d\u52a1\u63d0\u4f9b\u65b9\u8fde\u63a5\uff0c\u8bf7\u7f13\u5b58 ServiceConfig GenericService service = new ServiceConfig GenericService (); // \u5f31\u7c7b\u578b\u63a5\u53e3\u540d service.setInterface( com.xxx.XxxService ); service.setVersion( 1.0.0 ); // \u6307\u5411\u4e00\u4e2a\u901a\u7528\u670d\u52a1\u5b9e\u73b0 service.setRef(xxxService); // \u66b4\u9732\u53ca\u6ce8\u518c\u670d\u52a1 service.export();","title":"\u901a\u8fc7 API \u65b9\u5f0f\u66b4\u9732\u6cdb\u5316\u5b9e\u73b0"},{"location":"user/demos/graceful-shutdown/","text":"\u4f18\u96c5\u505c\u673a Dubbo \u662f\u901a\u8fc7 JDK \u7684 ShutdownHook \u6765\u5b8c\u6210\u4f18\u96c5\u505c\u673a\u7684\uff0c\u6240\u4ee5\u5982\u679c\u7528\u6237\u4f7f\u7528 kill -9 PID \u7b49\u5f3a\u5236\u5173\u95ed\u6307\u4ee4\uff0c\u662f\u4e0d\u4f1a\u6267\u884c\u4f18\u96c5\u505c\u673a\u7684\uff0c\u53ea\u6709\u901a\u8fc7 kill PID \u65f6\uff0c\u624d\u4f1a\u6267\u884c\u3002 \u539f\u7406 \u670d\u52a1\u63d0\u4f9b\u65b9 \u505c\u6b62\u65f6\uff0c\u5148\u6807\u8bb0\u4e3a\u4e0d\u63a5\u6536\u65b0\u8bf7\u6c42\uff0c\u65b0\u8bf7\u6c42\u8fc7\u6765\u65f6\u76f4\u63a5\u62a5\u9519\uff0c\u8ba9\u5ba2\u6237\u7aef\u91cd\u8bd5\u5176\u5b83\u673a\u5668\u3002 \u7136\u540e\uff0c\u68c0\u6d4b\u7ebf\u7a0b\u6c60\u4e2d\u7684\u7ebf\u7a0b\u662f\u5426\u6b63\u5728\u8fd0\u884c\uff0c\u5982\u679c\u6709\uff0c\u7b49\u5f85\u6240\u6709\u7ebf\u7a0b\u6267\u884c\u5b8c\u6210\uff0c\u9664\u975e\u8d85\u65f6\uff0c\u5219\u5f3a\u5236\u5173\u95ed\u3002 \u670d\u52a1\u6d88\u8d39\u65b9 \u505c\u6b62\u65f6\uff0c\u4e0d\u518d\u53d1\u8d77\u65b0\u7684\u8c03\u7528\u8bf7\u6c42\uff0c\u6240\u6709\u65b0\u7684\u8c03\u7528\u5728\u5ba2\u6237\u7aef\u5373\u62a5\u9519\u3002 \u7136\u540e\uff0c\u68c0\u6d4b\u6709\u6ca1\u6709\u8bf7\u6c42\u7684\u54cd\u5e94\u8fd8\u6ca1\u6709\u8fd4\u56de\uff0c\u7b49\u5f85\u54cd\u5e94\u8fd4\u56de\uff0c\u9664\u975e\u8d85\u65f6\uff0c\u5219\u5f3a\u5236\u5173\u95ed\u3002 \u8bbe\u7f6e\u65b9\u5f0f \u8bbe\u7f6e\u4f18\u96c5\u505c\u673a\u8d85\u65f6\u65f6\u95f4\uff0c\u7f3a\u7701\u8d85\u65f6\u65f6\u95f4\u662f 10 \u79d2\uff0c\u5982\u679c\u8d85\u65f6\u5219\u5f3a\u5236\u5173\u95ed\u3002 # dubbo.properties dubbo.service.shutdown.wait=15000 \u5982\u679c ShutdownHook \u4e0d\u80fd\u751f\u6548\uff0c\u53ef\u4ee5\u81ea\u884c\u8c03\u7528\uff0c \u4f7f\u7528tomcat\u7b49\u5bb9\u5668\u90e8\u7f72\u7684\u573a\u666f\uff0c\u5efa\u8bae\u901a\u8fc7\u6269\u5c55ContextListener\u7b49\u81ea\u884c\u8c03\u7528\u4ee5\u4e0b\u4ee3\u7801\u5b9e\u73b0\u4f18\u96c5\u505c\u673a \uff1a DubboShutdownHook.destroyAll();","title":"\u4f18\u96c5\u505c\u673a"},{"location":"user/demos/graceful-shutdown/#_1","text":"Dubbo \u662f\u901a\u8fc7 JDK \u7684 ShutdownHook \u6765\u5b8c\u6210\u4f18\u96c5\u505c\u673a\u7684\uff0c\u6240\u4ee5\u5982\u679c\u7528\u6237\u4f7f\u7528 kill -9 PID \u7b49\u5f3a\u5236\u5173\u95ed\u6307\u4ee4\uff0c\u662f\u4e0d\u4f1a\u6267\u884c\u4f18\u96c5\u505c\u673a\u7684\uff0c\u53ea\u6709\u901a\u8fc7 kill PID \u65f6\uff0c\u624d\u4f1a\u6267\u884c\u3002","title":"\u4f18\u96c5\u505c\u673a"},{"location":"user/demos/graceful-shutdown/#_2","text":"","title":"\u539f\u7406"},{"location":"user/demos/graceful-shutdown/#_3","text":"\u505c\u6b62\u65f6\uff0c\u5148\u6807\u8bb0\u4e3a\u4e0d\u63a5\u6536\u65b0\u8bf7\u6c42\uff0c\u65b0\u8bf7\u6c42\u8fc7\u6765\u65f6\u76f4\u63a5\u62a5\u9519\uff0c\u8ba9\u5ba2\u6237\u7aef\u91cd\u8bd5\u5176\u5b83\u673a\u5668\u3002 \u7136\u540e\uff0c\u68c0\u6d4b\u7ebf\u7a0b\u6c60\u4e2d\u7684\u7ebf\u7a0b\u662f\u5426\u6b63\u5728\u8fd0\u884c\uff0c\u5982\u679c\u6709\uff0c\u7b49\u5f85\u6240\u6709\u7ebf\u7a0b\u6267\u884c\u5b8c\u6210\uff0c\u9664\u975e\u8d85\u65f6\uff0c\u5219\u5f3a\u5236\u5173\u95ed\u3002","title":"\u670d\u52a1\u63d0\u4f9b\u65b9"},{"location":"user/demos/graceful-shutdown/#_4","text":"\u505c\u6b62\u65f6\uff0c\u4e0d\u518d\u53d1\u8d77\u65b0\u7684\u8c03\u7528\u8bf7\u6c42\uff0c\u6240\u6709\u65b0\u7684\u8c03\u7528\u5728\u5ba2\u6237\u7aef\u5373\u62a5\u9519\u3002 \u7136\u540e\uff0c\u68c0\u6d4b\u6709\u6ca1\u6709\u8bf7\u6c42\u7684\u54cd\u5e94\u8fd8\u6ca1\u6709\u8fd4\u56de\uff0c\u7b49\u5f85\u54cd\u5e94\u8fd4\u56de\uff0c\u9664\u975e\u8d85\u65f6\uff0c\u5219\u5f3a\u5236\u5173\u95ed\u3002","title":"\u670d\u52a1\u6d88\u8d39\u65b9"},{"location":"user/demos/graceful-shutdown/#_5","text":"\u8bbe\u7f6e\u4f18\u96c5\u505c\u673a\u8d85\u65f6\u65f6\u95f4\uff0c\u7f3a\u7701\u8d85\u65f6\u65f6\u95f4\u662f 10 \u79d2\uff0c\u5982\u679c\u8d85\u65f6\u5219\u5f3a\u5236\u5173\u95ed\u3002 # dubbo.properties dubbo.service.shutdown.wait=15000 \u5982\u679c ShutdownHook \u4e0d\u80fd\u751f\u6548\uff0c\u53ef\u4ee5\u81ea\u884c\u8c03\u7528\uff0c \u4f7f\u7528tomcat\u7b49\u5bb9\u5668\u90e8\u7f72\u7684\u573a\u666f\uff0c\u5efa\u8bae\u901a\u8fc7\u6269\u5c55ContextListener\u7b49\u81ea\u884c\u8c03\u7528\u4ee5\u4e0b\u4ee3\u7801\u5b9e\u73b0\u4f18\u96c5\u505c\u673a \uff1a DubboShutdownHook.destroyAll();","title":"\u8bbe\u7f6e\u65b9\u5f0f"},{"location":"user/demos/group-merger/","text":"\u5206\u7ec4\u805a\u5408 \u6309\u7ec4\u5408\u5e76\u8fd4\u56de\u7ed3\u679c [^1]\uff0c\u6bd4\u5982\u83dc\u5355\u670d\u52a1\uff0c\u63a5\u53e3\u4e00\u6837\uff0c\u4f46\u6709\u591a\u79cd\u5b9e\u73b0\uff0c\u7528group\u533a\u5206\uff0c\u73b0\u5728\u6d88\u8d39\u65b9\u9700\u4ece\u6bcf\u79cdgroup\u4e2d\u8c03\u7528\u4e00\u6b21\u8fd4\u56de\u7ed3\u679c\uff0c\u5408\u5e76\u7ed3\u679c\u8fd4\u56de\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b9e\u73b0\u805a\u5408\u83dc\u5355\u9879\u3002 \u76f8\u5173\u4ee3\u7801\u53ef\u4ee5\u53c2\u8003 dubbo \u9879\u76ee\u4e2d\u7684\u793a\u4f8b \u914d\u7f6e \u641c\u7d22\u6240\u6709\u5206\u7ec4 dubbo:reference interface= com.xxx.MenuService group= * merger= true / \u5408\u5e76\u6307\u5b9a\u5206\u7ec4 dubbo:reference interface= com.xxx.MenuService group= aaa,bbb merger= true / \u6307\u5b9a\u65b9\u6cd5\u5408\u5e76\u7ed3\u679c\uff0c\u5176\u5b83\u672a\u6307\u5b9a\u7684\u65b9\u6cd5\uff0c\u5c06\u53ea\u8c03\u7528\u4e00\u4e2a Group dubbo:reference interface= com.xxx.MenuService group= * dubbo:method name= getMenuItems merger= true / /dubbo:reference \u67d0\u4e2a\u65b9\u6cd5\u4e0d\u5408\u5e76\u7ed3\u679c\uff0c\u5176\u5b83\u90fd\u5408\u5e76\u7ed3\u679c dubbo:reference interface= com.xxx.MenuService group= * merger= true dubbo:method name= getMenuItems merger= false / /dubbo:reference \u6307\u5b9a\u5408\u5e76\u7b56\u7565\uff0c\u7f3a\u7701\u6839\u636e\u8fd4\u56de\u503c\u7c7b\u578b\u81ea\u52a8\u5339\u914d\uff0c\u5982\u679c\u540c\u4e00\u7c7b\u578b\u6709\u4e24\u4e2a\u5408\u5e76\u5668\u65f6\uff0c\u9700\u6307\u5b9a\u5408\u5e76\u5668\u7684\u540d\u79f0 ^2 dubbo:reference interface= com.xxx.MenuService group= * dubbo:method name= getMenuItems merger= mymerge / /dubbo:reference \u6307\u5b9a\u5408\u5e76\u65b9\u6cd5\uff0c\u5c06\u8c03\u7528\u8fd4\u56de\u7ed3\u679c\u7684\u6307\u5b9a\u65b9\u6cd5\u8fdb\u884c\u5408\u5e76\uff0c\u5408\u5e76\u65b9\u6cd5\u7684\u53c2\u6570\u7c7b\u578b\u5fc5\u987b\u662f\u8fd4\u56de\u7ed3\u679c\u7c7b\u578b\u672c\u8eab dubbo:reference interface= com.xxx.MenuService group= * dubbo:method name= getMenuItems merger= .addAll / /dubbo:reference [^1]: \u4ece 2.1.0 \u7248\u672c\u5f00\u59cb\u652f\u6301","title":"\u5206\u7ec4\u805a\u5408"},{"location":"user/demos/group-merger/#_1","text":"\u6309\u7ec4\u5408\u5e76\u8fd4\u56de\u7ed3\u679c [^1]\uff0c\u6bd4\u5982\u83dc\u5355\u670d\u52a1\uff0c\u63a5\u53e3\u4e00\u6837\uff0c\u4f46\u6709\u591a\u79cd\u5b9e\u73b0\uff0c\u7528group\u533a\u5206\uff0c\u73b0\u5728\u6d88\u8d39\u65b9\u9700\u4ece\u6bcf\u79cdgroup\u4e2d\u8c03\u7528\u4e00\u6b21\u8fd4\u56de\u7ed3\u679c\uff0c\u5408\u5e76\u7ed3\u679c\u8fd4\u56de\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b9e\u73b0\u805a\u5408\u83dc\u5355\u9879\u3002 \u76f8\u5173\u4ee3\u7801\u53ef\u4ee5\u53c2\u8003 dubbo \u9879\u76ee\u4e2d\u7684\u793a\u4f8b","title":"\u5206\u7ec4\u805a\u5408"},{"location":"user/demos/group-merger/#_2","text":"\u641c\u7d22\u6240\u6709\u5206\u7ec4 dubbo:reference interface= com.xxx.MenuService group= * merger= true / \u5408\u5e76\u6307\u5b9a\u5206\u7ec4 dubbo:reference interface= com.xxx.MenuService group= aaa,bbb merger= true / \u6307\u5b9a\u65b9\u6cd5\u5408\u5e76\u7ed3\u679c\uff0c\u5176\u5b83\u672a\u6307\u5b9a\u7684\u65b9\u6cd5\uff0c\u5c06\u53ea\u8c03\u7528\u4e00\u4e2a Group dubbo:reference interface= com.xxx.MenuService group= * dubbo:method name= getMenuItems merger= true / /dubbo:reference \u67d0\u4e2a\u65b9\u6cd5\u4e0d\u5408\u5e76\u7ed3\u679c\uff0c\u5176\u5b83\u90fd\u5408\u5e76\u7ed3\u679c dubbo:reference interface= com.xxx.MenuService group= * merger= true dubbo:method name= getMenuItems merger= false / /dubbo:reference \u6307\u5b9a\u5408\u5e76\u7b56\u7565\uff0c\u7f3a\u7701\u6839\u636e\u8fd4\u56de\u503c\u7c7b\u578b\u81ea\u52a8\u5339\u914d\uff0c\u5982\u679c\u540c\u4e00\u7c7b\u578b\u6709\u4e24\u4e2a\u5408\u5e76\u5668\u65f6\uff0c\u9700\u6307\u5b9a\u5408\u5e76\u5668\u7684\u540d\u79f0 ^2 dubbo:reference interface= com.xxx.MenuService group= * dubbo:method name= getMenuItems merger= mymerge / /dubbo:reference \u6307\u5b9a\u5408\u5e76\u65b9\u6cd5\uff0c\u5c06\u8c03\u7528\u8fd4\u56de\u7ed3\u679c\u7684\u6307\u5b9a\u65b9\u6cd5\u8fdb\u884c\u5408\u5e76\uff0c\u5408\u5e76\u65b9\u6cd5\u7684\u53c2\u6570\u7c7b\u578b\u5fc5\u987b\u662f\u8fd4\u56de\u7ed3\u679c\u7c7b\u578b\u672c\u8eab dubbo:reference interface= com.xxx.MenuService group= * dubbo:method name= getMenuItems merger= .addAll / /dubbo:reference [^1]: \u4ece 2.1.0 \u7248\u672c\u5f00\u59cb\u652f\u6301","title":"\u914d\u7f6e"},{"location":"user/demos/hostname-binding/","text":"\u4e3b\u673a\u7ed1\u5b9a \u67e5\u627e\u987a\u5e8f \u7f3a\u7701\u4e3b\u673a IP \u67e5\u627e\u987a\u5e8f\uff1a \u901a\u8fc7 LocalHost.getLocalHost() \u83b7\u53d6\u672c\u673a\u5730\u5740\u3002 \u5982\u679c\u662f 127.* \u7b49 loopback \u5730\u5740\uff0c\u5219\u626b\u63cf\u5404\u7f51\u5361\uff0c\u83b7\u53d6\u7f51\u5361 IP\u3002 \u4e3b\u673a\u914d\u7f6e \u6ce8\u518c\u7684\u5730\u5740\u5982\u679c\u83b7\u53d6\u4e0d\u6b63\u786e\uff0c\u6bd4\u5982\u9700\u8981\u6ce8\u518c\u516c\u7f51\u5730\u5740\uff0c\u53ef\u4ee5\uff1a \u53ef\u4ee5\u5728 /etc/hosts \u4e2d\u52a0\u5165\uff1a\u673a\u5668\u540d \u516c\u7f51 IP\uff0c\u6bd4\u5982\uff1a test1 205.182.23.201 \u5728 dubbo.xml \u4e2d\u52a0\u5165\u4e3b\u673a\u5730\u5740\u7684\u914d\u7f6e\uff1a xml dubbo:protocol host=\"205.182.23.201\" \u6216\u5728 dubbo.properties \u4e2d\u52a0\u5165\u4e3b\u673a\u5730\u5740\u7684\u914d\u7f6e\uff1a properties dubbo.protocol.host=205.182.23.201 \u7aef\u53e3\u914d\u7f6e \u7f3a\u7701\u4e3b\u673a\u7aef\u53e3\u4e0e\u534f\u8bae\u76f8\u5173\uff1a \u534f\u8bae \u7aef\u53e3 dubbo 20880 rmi 1099 http 80 hessian 80 webservice 80 memcached 11211 redis 6379 \u53ef\u4ee5\u6309\u7167\u4e0b\u9762\u7684\u65b9\u5f0f\u914d\u7f6e\u7aef\u53e3\uff1a \u5728 dubbo.xml \u4e2d\u52a0\u5165\u4e3b\u673a\u5730\u5740\u7684\u914d\u7f6e\uff1a xml dubbo:protocol name=\"dubbo\" port=\"20880\" \u6216\u5728 dubbo.properties \u4e2d\u52a0\u5165\u4e3b\u673a\u5730\u5740\u7684\u914d\u7f6e\uff1a properties dubbo.protocol.dubbo.port=20880","title":"\u4e3b\u673a\u7ed1\u5b9a"},{"location":"user/demos/hostname-binding/#_1","text":"","title":"\u4e3b\u673a\u7ed1\u5b9a"},{"location":"user/demos/hostname-binding/#_2","text":"\u7f3a\u7701\u4e3b\u673a IP \u67e5\u627e\u987a\u5e8f\uff1a \u901a\u8fc7 LocalHost.getLocalHost() \u83b7\u53d6\u672c\u673a\u5730\u5740\u3002 \u5982\u679c\u662f 127.* \u7b49 loopback \u5730\u5740\uff0c\u5219\u626b\u63cf\u5404\u7f51\u5361\uff0c\u83b7\u53d6\u7f51\u5361 IP\u3002","title":"\u67e5\u627e\u987a\u5e8f"},{"location":"user/demos/hostname-binding/#_3","text":"\u6ce8\u518c\u7684\u5730\u5740\u5982\u679c\u83b7\u53d6\u4e0d\u6b63\u786e\uff0c\u6bd4\u5982\u9700\u8981\u6ce8\u518c\u516c\u7f51\u5730\u5740\uff0c\u53ef\u4ee5\uff1a \u53ef\u4ee5\u5728 /etc/hosts \u4e2d\u52a0\u5165\uff1a\u673a\u5668\u540d \u516c\u7f51 IP\uff0c\u6bd4\u5982\uff1a test1 205.182.23.201 \u5728 dubbo.xml \u4e2d\u52a0\u5165\u4e3b\u673a\u5730\u5740\u7684\u914d\u7f6e\uff1a xml dubbo:protocol host=\"205.182.23.201\" \u6216\u5728 dubbo.properties \u4e2d\u52a0\u5165\u4e3b\u673a\u5730\u5740\u7684\u914d\u7f6e\uff1a properties dubbo.protocol.host=205.182.23.201","title":"\u4e3b\u673a\u914d\u7f6e"},{"location":"user/demos/hostname-binding/#_4","text":"\u7f3a\u7701\u4e3b\u673a\u7aef\u53e3\u4e0e\u534f\u8bae\u76f8\u5173\uff1a \u534f\u8bae \u7aef\u53e3 dubbo 20880 rmi 1099 http 80 hessian 80 webservice 80 memcached 11211 redis 6379 \u53ef\u4ee5\u6309\u7167\u4e0b\u9762\u7684\u65b9\u5f0f\u914d\u7f6e\u7aef\u53e3\uff1a \u5728 dubbo.xml \u4e2d\u52a0\u5165\u4e3b\u673a\u5730\u5740\u7684\u914d\u7f6e\uff1a xml dubbo:protocol name=\"dubbo\" port=\"20880\" \u6216\u5728 dubbo.properties \u4e2d\u52a0\u5165\u4e3b\u673a\u5730\u5740\u7684\u914d\u7f6e\uff1a properties dubbo.protocol.dubbo.port=20880","title":"\u7aef\u53e3\u914d\u7f6e"},{"location":"user/demos/introduction/","text":"\u60f3\u5b8c\u6574\u7684\u8fd0\u884c\u8d77\u6765\uff0c\u8bf7\u53c2\u89c1\uff1a \u5feb\u901f\u542f\u52a8 \uff0c\u8fd9\u91cc\u53ea\u5217\u51fa\u5404\u79cd\u573a\u666f\u7684\u914d\u7f6e\u65b9\u5f0f\u3002 \u4ee5\u4e0b\u793a\u4f8b\u5168\u90e8\u4f7f\u7528\u57fa\u4e8eSpring\u7684 Xml\u914d\u7f6e \u4f5c\u4e3a\u53c2\u8003\uff0c\u5982\u679c\u4e0d\u60f3\u4f7f\u7528Spring\uff0c\u800c\u5e0c\u671b\u901a\u8fc7API\u7684\u65b9\u5f0f\u8fdb\u884c\u8c03\u7528\uff0c\u8bf7\u53c2\u89c1\uff1a API\u914d\u7f6e","title":"Introduction"},{"location":"user/demos/lazy-connect/","text":"\u5ef6\u8fdf\u8fde\u63a5 \u5ef6\u8fdf\u8fde\u63a5\u7528\u4e8e\u51cf\u5c11\u957f\u8fde\u63a5\u6570\u3002\u5f53\u6709\u8c03\u7528\u53d1\u8d77\u65f6\uff0c\u518d\u521b\u5efa\u957f\u8fde\u63a5\u3002[^1] dubbo:protocol name= dubbo lazy= true / [^1]: \u6ce8\u610f\uff1a\u8be5\u914d\u7f6e\u53ea\u5bf9\u4f7f\u7528\u957f\u8fde\u63a5\u7684 dubbo \u534f\u8bae\u751f\u6548\u3002","title":"\u5ef6\u8fdf\u8fde\u63a5"},{"location":"user/demos/lazy-connect/#_1","text":"\u5ef6\u8fdf\u8fde\u63a5\u7528\u4e8e\u51cf\u5c11\u957f\u8fde\u63a5\u6570\u3002\u5f53\u6709\u8c03\u7528\u53d1\u8d77\u65f6\uff0c\u518d\u521b\u5efa\u957f\u8fde\u63a5\u3002[^1] dubbo:protocol name= dubbo lazy= true / [^1]: \u6ce8\u610f\uff1a\u8be5\u914d\u7f6e\u53ea\u5bf9\u4f7f\u7528\u957f\u8fde\u63a5\u7684 dubbo \u534f\u8bae\u751f\u6548\u3002","title":"\u5ef6\u8fdf\u8fde\u63a5"},{"location":"user/demos/loadbalance/","text":"\u8d1f\u8f7d\u5747\u8861 \u5728\u96c6\u7fa4\u8d1f\u8f7d\u5747\u8861\u65f6\uff0cDubbo \u63d0\u4f9b\u4e86\u591a\u79cd\u5747\u8861\u7b56\u7565\uff0c\u7f3a\u7701\u4e3a random \u968f\u673a\u8c03\u7528\u3002 \u53ef\u4ee5\u81ea\u884c\u6269\u5c55\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\uff0c\u53c2\u89c1\uff1a \u8d1f\u8f7d\u5747\u8861\u6269\u5c55 \u8d1f\u8f7d\u5747\u8861\u7b56\u7565 Random LoadBalance \u968f\u673a \uff0c\u6309\u6743\u91cd\u8bbe\u7f6e\u968f\u673a\u6982\u7387\u3002 \u5728\u4e00\u4e2a\u622a\u9762\u4e0a\u78b0\u649e\u7684\u6982\u7387\u9ad8\uff0c\u4f46\u8c03\u7528\u91cf\u8d8a\u5927\u5206\u5e03\u8d8a\u5747\u5300\uff0c\u800c\u4e14\u6309\u6982\u7387\u4f7f\u7528\u6743\u91cd\u540e\u4e5f\u6bd4\u8f83\u5747\u5300\uff0c\u6709\u5229\u4e8e\u52a8\u6001\u8c03\u6574\u63d0\u4f9b\u8005\u6743\u91cd\u3002 RoundRobin LoadBalance \u8f6e\u8be2 \uff0c\u6309\u516c\u7ea6\u540e\u7684\u6743\u91cd\u8bbe\u7f6e\u8f6e\u8be2\u6bd4\u7387\u3002 \u5b58\u5728\u6162\u7684\u63d0\u4f9b\u8005\u7d2f\u79ef\u8bf7\u6c42\u7684\u95ee\u9898\uff0c\u6bd4\u5982\uff1a\u7b2c\u4e8c\u53f0\u673a\u5668\u5f88\u6162\uff0c\u4f46\u6ca1\u6302\uff0c\u5f53\u8bf7\u6c42\u8c03\u5230\u7b2c\u4e8c\u53f0\u65f6\u5c31\u5361\u5728\u90a3\uff0c\u4e45\u800c\u4e45\u4e4b\uff0c\u6240\u6709\u8bf7\u6c42\u90fd\u5361\u5728\u8c03\u5230\u7b2c\u4e8c\u53f0\u4e0a\u3002 LeastActive LoadBalance \u6700\u5c11\u6d3b\u8dc3\u8c03\u7528\u6570 \uff0c\u76f8\u540c\u6d3b\u8dc3\u6570\u7684\u968f\u673a\uff0c\u6d3b\u8dc3\u6570\u6307\u8c03\u7528\u524d\u540e\u8ba1\u6570\u5dee\u3002 \u4f7f\u6162\u7684\u63d0\u4f9b\u8005\u6536\u5230\u66f4\u5c11\u8bf7\u6c42\uff0c\u56e0\u4e3a\u8d8a\u6162\u7684\u63d0\u4f9b\u8005\u7684\u8c03\u7528\u524d\u540e\u8ba1\u6570\u5dee\u4f1a\u8d8a\u5927\u3002 ConsistentHash LoadBalance \u4e00\u81f4\u6027 Hash \uff0c\u76f8\u540c\u53c2\u6570\u7684\u8bf7\u6c42\u603b\u662f\u53d1\u5230\u540c\u4e00\u63d0\u4f9b\u8005\u3002 \u5f53\u67d0\u4e00\u53f0\u63d0\u4f9b\u8005\u6302\u65f6\uff0c\u539f\u672c\u53d1\u5f80\u8be5\u63d0\u4f9b\u8005\u7684\u8bf7\u6c42\uff0c\u57fa\u4e8e\u865a\u62df\u8282\u70b9\uff0c\u5e73\u644a\u5230\u5176\u5b83\u63d0\u4f9b\u8005\uff0c\u4e0d\u4f1a\u5f15\u8d77\u5267\u70c8\u53d8\u52a8\u3002 \u7b97\u6cd5\u53c2\u89c1\uff1ahttp://en.wikipedia.org/wiki/Consistent_hashing \u7f3a\u7701\u53ea\u5bf9\u7b2c\u4e00\u4e2a\u53c2\u6570 Hash\uff0c\u5982\u679c\u8981\u4fee\u6539\uff0c\u8bf7\u914d\u7f6e dubbo:parameter key=\"hash.arguments\" value=\"0,1\" / \u7f3a\u7701\u7528 160 \u4efd\u865a\u62df\u8282\u70b9\uff0c\u5982\u679c\u8981\u4fee\u6539\uff0c\u8bf7\u914d\u7f6e dubbo:parameter key=\"hash.nodes\" value=\"320\" / \u914d\u7f6e \u670d\u52a1\u7aef\u670d\u52a1\u7ea7\u522b dubbo:service interface= ... loadbalance= roundrobin / \u5ba2\u6237\u7aef\u670d\u52a1\u7ea7\u522b dubbo:reference interface= ... loadbalance= roundrobin / \u670d\u52a1\u7aef\u65b9\u6cd5\u7ea7\u522b dubbo:service interface= ... dubbo:method name= ... loadbalance= roundrobin / /dubbo:service \u5ba2\u6237\u7aef\u65b9\u6cd5\u7ea7\u522b dubbo:reference interface= ... dubbo:method name= ... loadbalance= roundrobin / /dubbo:reference","title":"\u8d1f\u8f7d\u5747\u8861"},{"location":"user/demos/loadbalance/#_1","text":"\u5728\u96c6\u7fa4\u8d1f\u8f7d\u5747\u8861\u65f6\uff0cDubbo \u63d0\u4f9b\u4e86\u591a\u79cd\u5747\u8861\u7b56\u7565\uff0c\u7f3a\u7701\u4e3a random \u968f\u673a\u8c03\u7528\u3002 \u53ef\u4ee5\u81ea\u884c\u6269\u5c55\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\uff0c\u53c2\u89c1\uff1a \u8d1f\u8f7d\u5747\u8861\u6269\u5c55","title":"\u8d1f\u8f7d\u5747\u8861"},{"location":"user/demos/loadbalance/#_2","text":"","title":"\u8d1f\u8f7d\u5747\u8861\u7b56\u7565"},{"location":"user/demos/loadbalance/#random-loadbalance","text":"\u968f\u673a \uff0c\u6309\u6743\u91cd\u8bbe\u7f6e\u968f\u673a\u6982\u7387\u3002 \u5728\u4e00\u4e2a\u622a\u9762\u4e0a\u78b0\u649e\u7684\u6982\u7387\u9ad8\uff0c\u4f46\u8c03\u7528\u91cf\u8d8a\u5927\u5206\u5e03\u8d8a\u5747\u5300\uff0c\u800c\u4e14\u6309\u6982\u7387\u4f7f\u7528\u6743\u91cd\u540e\u4e5f\u6bd4\u8f83\u5747\u5300\uff0c\u6709\u5229\u4e8e\u52a8\u6001\u8c03\u6574\u63d0\u4f9b\u8005\u6743\u91cd\u3002","title":"Random LoadBalance"},{"location":"user/demos/loadbalance/#roundrobin-loadbalance","text":"\u8f6e\u8be2 \uff0c\u6309\u516c\u7ea6\u540e\u7684\u6743\u91cd\u8bbe\u7f6e\u8f6e\u8be2\u6bd4\u7387\u3002 \u5b58\u5728\u6162\u7684\u63d0\u4f9b\u8005\u7d2f\u79ef\u8bf7\u6c42\u7684\u95ee\u9898\uff0c\u6bd4\u5982\uff1a\u7b2c\u4e8c\u53f0\u673a\u5668\u5f88\u6162\uff0c\u4f46\u6ca1\u6302\uff0c\u5f53\u8bf7\u6c42\u8c03\u5230\u7b2c\u4e8c\u53f0\u65f6\u5c31\u5361\u5728\u90a3\uff0c\u4e45\u800c\u4e45\u4e4b\uff0c\u6240\u6709\u8bf7\u6c42\u90fd\u5361\u5728\u8c03\u5230\u7b2c\u4e8c\u53f0\u4e0a\u3002","title":"RoundRobin LoadBalance"},{"location":"user/demos/loadbalance/#leastactive-loadbalance","text":"\u6700\u5c11\u6d3b\u8dc3\u8c03\u7528\u6570 \uff0c\u76f8\u540c\u6d3b\u8dc3\u6570\u7684\u968f\u673a\uff0c\u6d3b\u8dc3\u6570\u6307\u8c03\u7528\u524d\u540e\u8ba1\u6570\u5dee\u3002 \u4f7f\u6162\u7684\u63d0\u4f9b\u8005\u6536\u5230\u66f4\u5c11\u8bf7\u6c42\uff0c\u56e0\u4e3a\u8d8a\u6162\u7684\u63d0\u4f9b\u8005\u7684\u8c03\u7528\u524d\u540e\u8ba1\u6570\u5dee\u4f1a\u8d8a\u5927\u3002","title":"LeastActive LoadBalance"},{"location":"user/demos/loadbalance/#consistenthash-loadbalance","text":"\u4e00\u81f4\u6027 Hash \uff0c\u76f8\u540c\u53c2\u6570\u7684\u8bf7\u6c42\u603b\u662f\u53d1\u5230\u540c\u4e00\u63d0\u4f9b\u8005\u3002 \u5f53\u67d0\u4e00\u53f0\u63d0\u4f9b\u8005\u6302\u65f6\uff0c\u539f\u672c\u53d1\u5f80\u8be5\u63d0\u4f9b\u8005\u7684\u8bf7\u6c42\uff0c\u57fa\u4e8e\u865a\u62df\u8282\u70b9\uff0c\u5e73\u644a\u5230\u5176\u5b83\u63d0\u4f9b\u8005\uff0c\u4e0d\u4f1a\u5f15\u8d77\u5267\u70c8\u53d8\u52a8\u3002 \u7b97\u6cd5\u53c2\u89c1\uff1ahttp://en.wikipedia.org/wiki/Consistent_hashing \u7f3a\u7701\u53ea\u5bf9\u7b2c\u4e00\u4e2a\u53c2\u6570 Hash\uff0c\u5982\u679c\u8981\u4fee\u6539\uff0c\u8bf7\u914d\u7f6e dubbo:parameter key=\"hash.arguments\" value=\"0,1\" / \u7f3a\u7701\u7528 160 \u4efd\u865a\u62df\u8282\u70b9\uff0c\u5982\u679c\u8981\u4fee\u6539\uff0c\u8bf7\u914d\u7f6e dubbo:parameter key=\"hash.nodes\" value=\"320\" /","title":"ConsistentHash LoadBalance"},{"location":"user/demos/loadbalance/#_3","text":"","title":"\u914d\u7f6e"},{"location":"user/demos/loadbalance/#_4","text":"dubbo:service interface= ... loadbalance= roundrobin /","title":"\u670d\u52a1\u7aef\u670d\u52a1\u7ea7\u522b"},{"location":"user/demos/loadbalance/#_5","text":"dubbo:reference interface= ... loadbalance= roundrobin /","title":"\u5ba2\u6237\u7aef\u670d\u52a1\u7ea7\u522b"},{"location":"user/demos/loadbalance/#_6","text":"dubbo:service interface= ... dubbo:method name= ... loadbalance= roundrobin / /dubbo:service","title":"\u670d\u52a1\u7aef\u65b9\u6cd5\u7ea7\u522b"},{"location":"user/demos/loadbalance/#_7","text":"dubbo:reference interface= ... dubbo:method name= ... loadbalance= roundrobin / /dubbo:reference","title":"\u5ba2\u6237\u7aef\u65b9\u6cd5\u7ea7\u522b"},{"location":"user/demos/local-call/","text":"\u672c\u5730\u8c03\u7528 \u672c\u5730\u8c03\u7528\u4f7f\u7528\u4e86 injvm \u534f\u8bae\uff0c\u662f\u4e00\u4e2a\u4f2a\u534f\u8bae\uff0c\u5b83\u4e0d\u5f00\u542f\u7aef\u53e3\uff0c\u4e0d\u53d1\u8d77\u8fdc\u7a0b\u8c03\u7528\uff0c\u53ea\u5728 JVM \u5185\u76f4\u63a5\u5173\u8054\uff0c\u4f46\u6267\u884c Dubbo \u7684 Filter \u94fe\u3002 \u914d\u7f6e \u5b9a\u4e49 injvm \u534f\u8bae dubbo:protocol name= injvm / \u8bbe\u7f6e\u9ed8\u8ba4\u534f\u8bae dubbo:provider protocol= injvm / \u8bbe\u7f6e\u670d\u52a1\u534f\u8bae dubbo:service protocol= injvm / \u4f18\u5148\u4f7f\u7528 injvm dubbo:consumer injvm= true .../ dubbo:provider injvm= true .../ \u6216 dubbo:reference injvm= true .../ dubbo:service injvm= true .../ \u6ce8\u610f\uff1adubbo\u4ece 2.2.0 \u6bcf\u4e2a\u670d\u52a1\u9ed8\u8ba4\u90fd\u4f1a\u5728\u672c\u5730\u66b4\u9732,\u65e0\u9700\u8fdb\u884c\u4efb\u4f55\u914d\u7f6e\u5373\u53ef\u8fdb\u884c\u672c\u5730\u5f15\u7528,\u5982\u679c\u4e0d\u5e0c\u671b\u670d\u52a1\u8fdb\u884c\u8fdc\u7a0b\u66b4\u9732,\u53ea\u9700\u8981\u5728provider\u5c06protocol\u8bbe\u7f6e\u6210injvm\u5373\u53ef \u81ea\u52a8\u66b4\u9732\u3001\u5f15\u7528\u672c\u5730\u670d\u52a1 \u4ece 2.2.0 \u5f00\u59cb\uff0c\u6bcf\u4e2a\u670d\u52a1\u9ed8\u8ba4\u90fd\u4f1a\u5728\u672c\u5730\u66b4\u9732\u3002\u5728\u5f15\u7528\u670d\u52a1\u7684\u65f6\u5019\uff0c\u9ed8\u8ba4\u4f18\u5148\u5f15\u7528\u672c\u5730\u670d\u52a1\u3002\u5982\u679c\u5e0c\u671b\u5f15\u7528\u8fdc\u7a0b\u670d\u52a1\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e0b\u914d\u7f6e\u5f3a\u5236\u5f15\u7528\u8fdc\u7a0b\u670d\u52a1\u3002 dubbo:reference ... scope= remote /","title":"\u672c\u5730\u8c03\u7528"},{"location":"user/demos/local-call/#_1","text":"\u672c\u5730\u8c03\u7528\u4f7f\u7528\u4e86 injvm \u534f\u8bae\uff0c\u662f\u4e00\u4e2a\u4f2a\u534f\u8bae\uff0c\u5b83\u4e0d\u5f00\u542f\u7aef\u53e3\uff0c\u4e0d\u53d1\u8d77\u8fdc\u7a0b\u8c03\u7528\uff0c\u53ea\u5728 JVM \u5185\u76f4\u63a5\u5173\u8054\uff0c\u4f46\u6267\u884c Dubbo \u7684 Filter \u94fe\u3002","title":"\u672c\u5730\u8c03\u7528"},{"location":"user/demos/local-call/#_2","text":"\u5b9a\u4e49 injvm \u534f\u8bae dubbo:protocol name= injvm / \u8bbe\u7f6e\u9ed8\u8ba4\u534f\u8bae dubbo:provider protocol= injvm / \u8bbe\u7f6e\u670d\u52a1\u534f\u8bae dubbo:service protocol= injvm / \u4f18\u5148\u4f7f\u7528 injvm dubbo:consumer injvm= true .../ dubbo:provider injvm= true .../ \u6216 dubbo:reference injvm= true .../ dubbo:service injvm= true .../ \u6ce8\u610f\uff1adubbo\u4ece 2.2.0 \u6bcf\u4e2a\u670d\u52a1\u9ed8\u8ba4\u90fd\u4f1a\u5728\u672c\u5730\u66b4\u9732,\u65e0\u9700\u8fdb\u884c\u4efb\u4f55\u914d\u7f6e\u5373\u53ef\u8fdb\u884c\u672c\u5730\u5f15\u7528,\u5982\u679c\u4e0d\u5e0c\u671b\u670d\u52a1\u8fdb\u884c\u8fdc\u7a0b\u66b4\u9732,\u53ea\u9700\u8981\u5728provider\u5c06protocol\u8bbe\u7f6e\u6210injvm\u5373\u53ef","title":"\u914d\u7f6e"},{"location":"user/demos/local-call/#_3","text":"\u4ece 2.2.0 \u5f00\u59cb\uff0c\u6bcf\u4e2a\u670d\u52a1\u9ed8\u8ba4\u90fd\u4f1a\u5728\u672c\u5730\u66b4\u9732\u3002\u5728\u5f15\u7528\u670d\u52a1\u7684\u65f6\u5019\uff0c\u9ed8\u8ba4\u4f18\u5148\u5f15\u7528\u672c\u5730\u670d\u52a1\u3002\u5982\u679c\u5e0c\u671b\u5f15\u7528\u8fdc\u7a0b\u670d\u52a1\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e0b\u914d\u7f6e\u5f3a\u5236\u5f15\u7528\u8fdc\u7a0b\u670d\u52a1\u3002 dubbo:reference ... scope= remote /","title":"\u81ea\u52a8\u66b4\u9732\u3001\u5f15\u7528\u672c\u5730\u670d\u52a1"},{"location":"user/demos/local-mock/","text":"\u672c\u5730\u4f2a\u88c5 \u672c\u5730\u4f2a\u88c5 [^1] \u901a\u5e38\u7528\u4e8e\u670d\u52a1\u964d\u7ea7\uff0c\u6bd4\u5982\u67d0\u9a8c\u6743\u670d\u52a1\uff0c\u5f53\u670d\u52a1\u63d0\u4f9b\u65b9\u5168\u90e8\u6302\u6389\u540e\uff0c\u5ba2\u6237\u7aef\u4e0d\u629b\u51fa\u5f02\u5e38\uff0c\u800c\u662f\u901a\u8fc7 Mock \u6570\u636e\u8fd4\u56de\u6388\u6743\u5931\u8d25\u3002 \u5728 spring \u914d\u7f6e\u6587\u4ef6\u4e2d\u6309\u4ee5\u4e0b\u65b9\u5f0f\u914d\u7f6e\uff1a dubbo:reference interface= com.foo.BarService mock= true / \u6216 dubbo:reference interface= com.foo.BarService mock= com.foo.BarServiceMock / \u5728\u5de5\u7a0b\u4e2d\u63d0\u4f9b Mock \u5b9e\u73b0 [^2]\uff1a package com.foo; public class BarServiceMock implements BarService { public String sayHello(String name) { // \u4f60\u53ef\u4ee5\u4f2a\u9020\u5bb9\u9519\u6570\u636e\uff0c\u6b64\u65b9\u6cd5\u53ea\u5728\u51fa\u73b0RpcException\u65f6\u88ab\u6267\u884c return \u5bb9\u9519\u6570\u636e ; } } \u5982\u679c\u670d\u52a1\u7684\u6d88\u8d39\u65b9\u7ecf\u5e38\u9700\u8981 try-catch \u6355\u83b7\u5f02\u5e38\uff0c\u5982\uff1a Offer offer = null; try { offer = offerService.findOffer(offerId); } catch (RpcException e) { logger.error(e); } \u8bf7\u8003\u8651\u6539\u4e3a Mock \u5b9e\u73b0\uff0c\u5e76\u5728 Mock \u5b9e\u73b0\u4e2d return null\u3002\u5982\u679c\u53ea\u662f\u60f3\u7b80\u5355\u7684\u5ffd\u7565\u5f02\u5e38\uff0c\u5728 2.0.11 \u4ee5\u4e0a\u7248\u672c\u53ef\u7528\uff1a dubbo:reference interface= com.foo.BarService mock= return null / \u8fdb\u9636\u7528\u6cd5 return \u4f7f\u7528 return \u6765\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u5bf9\u8c61\uff0c\u4f5c\u4e3a Mock \u7684\u8fd4\u56de\u503c\u3002\u5408\u6cd5\u7684\u5b57\u7b26\u4e32\u53ef\u4ee5\u662f\uff1a * empty : \u4ee3\u8868\u7a7a\uff0c\u57fa\u672c\u7c7b\u578b\u7684\u9ed8\u8ba4\u503c\uff0c\u6216\u8005\u96c6\u5408\u7c7b\u7684\u7a7a\u503c * null : null * true : true * false : false * JSON \u683c\u5f0f : \u53cd\u5e8f\u5217\u5316 JSON \u6240\u5f97\u5230\u7684\u5bf9\u8c61 throw \u4f7f\u7528 throw \u6765\u8fd4\u56de\u4e00\u4e2a Exception \u5bf9\u8c61\uff0c\u4f5c\u4e3a Mock \u7684\u8fd4\u56de\u503c\u3002 \u5f53\u8c03\u7528\u51fa\u9519\u65f6\uff0c\u629b\u51fa\u4e00\u4e2a\u9ed8\u8ba4\u7684 RPCException: dubbo:reference interface= com.foo.BarService mock= throw / \u5f53\u8c03\u7528\u51fa\u9519\u65f6\uff0c\u629b\u51fa\u6307\u5b9a\u7684 Exception\uff1a dubbo:reference interface= com.foo.BarService mock= throw com.foo.MockException / force \u548c fail \u5728 2.6.6 \u4ee5\u4e0a\u7684\u7248\u672c\uff0c\u53ef\u4ee5\u5f00\u59cb\u5728 Spring XML \u914d\u7f6e\u6587\u4ef6\u4e2d\u4f7f\u7528 fail: \u548c force: \u3002 force: \u4ee3\u8868\u5f3a\u5236\u4f7f\u7528 Mock \u884c\u4e3a\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u8d70\u8fdc\u7a0b\u8c03\u7528\u3002 fail: \u4e0e\u9ed8\u8ba4\u884c\u4e3a\u4e00\u81f4\uff0c\u53ea\u6709\u5f53\u8fdc\u7a0b\u8c03\u7528\u53d1\u751f\u9519\u8bef\u65f6\u624d\u4f7f\u7528 Mock \u884c\u4e3a\u3002 force: \u548c fail: \u90fd\u652f\u6301\u4e0e throw \u6216\u8005 return \u7ec4\u5408\u4f7f\u7528\u3002 \u5f3a\u5236\u8fd4\u56de\u6307\u5b9a\u503c\uff1a dubbo:reference interface= com.foo.BarService mock= force:return fake / \u5f3a\u5236\u629b\u51fa\u6307\u5b9a\u5f02\u5e38\uff1a dubbo:reference interface= com.foo.BarService mock= force:throw com.foo.MockException / \u5728\u65b9\u6cd5\u7ea7\u522b\u914d\u7f6e Mock Mock \u53ef\u4ee5\u5728\u65b9\u6cd5\u7ea7\u522b\u4e0a\u6307\u5b9a\uff0c\u5047\u5b9a com.foo.BarService \u4e0a\u6709\u597d\u51e0\u4e2a\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5355\u72ec\u4e3a sayHello() \u65b9\u6cd5\u6307\u5b9a Mock \u884c\u4e3a\u3002\u5177\u4f53\u914d\u7f6e\u5982\u4e0b\u6240\u793a\uff0c\u5728\u672c\u4f8b\u4e2d\uff0c\u53ea\u8981 sayHello() \u88ab\u8c03\u7528\u5230\u65f6\uff0c\u5f3a\u5236\u8fd4\u56de \"fake\": dubbo:reference id= demoService check= false interface= com.foo.BarService dubbo:parameter key= sayHello.mock value= force:return fake / /dubbo:reference [^1]: Mock \u662f Stub \u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u4fbf\u4e8e\u670d\u52a1\u63d0\u4f9b\u65b9\u5728\u5ba2\u6237\u7aef\u6267\u884c\u5bb9\u9519\u903b\u8f91\uff0c\u56e0\u7ecf\u5e38\u9700\u8981\u5728\u51fa\u73b0 RpcException (\u6bd4\u5982\u7f51\u7edc\u5931\u8d25\uff0c\u8d85\u65f6\u7b49)\u65f6\u8fdb\u884c\u5bb9\u9519\uff0c\u800c\u5728\u51fa\u73b0\u4e1a\u52a1\u5f02\u5e38(\u6bd4\u5982\u767b\u5f55\u7528\u6237\u540d\u5bc6\u7801\u9519\u8bef)\u65f6\u4e0d\u9700\u8981\u5bb9\u9519\uff0c\u5982\u679c\u7528 Stub\uff0c\u53ef\u80fd\u5c31\u9700\u8981\u6355\u83b7\u5e76\u4f9d\u8d56 RpcException \u7c7b\uff0c\u800c\u7528 Mock \u5c31\u53ef\u4ee5\u4e0d\u4f9d\u8d56 RpcException\uff0c\u56e0\u4e3a\u5b83\u7684\u7ea6\u5b9a\u5c31\u662f\u53ea\u6709\u51fa\u73b0 RpcException \u65f6\u624d\u6267\u884c\u3002 [^2]: \u5728 interface \u65c1\u653e\u4e00\u4e2a Mock \u5b9e\u73b0\uff0c\u5b83\u5b9e\u73b0 BarService \u63a5\u53e3\uff0c\u5e76\u6709\u4e00\u4e2a\u65e0\u53c2\u6784\u9020\u51fd\u6570","title":"\u672c\u5730\u4f2a\u88c5"},{"location":"user/demos/local-mock/#_1","text":"\u672c\u5730\u4f2a\u88c5 [^1] \u901a\u5e38\u7528\u4e8e\u670d\u52a1\u964d\u7ea7\uff0c\u6bd4\u5982\u67d0\u9a8c\u6743\u670d\u52a1\uff0c\u5f53\u670d\u52a1\u63d0\u4f9b\u65b9\u5168\u90e8\u6302\u6389\u540e\uff0c\u5ba2\u6237\u7aef\u4e0d\u629b\u51fa\u5f02\u5e38\uff0c\u800c\u662f\u901a\u8fc7 Mock \u6570\u636e\u8fd4\u56de\u6388\u6743\u5931\u8d25\u3002 \u5728 spring \u914d\u7f6e\u6587\u4ef6\u4e2d\u6309\u4ee5\u4e0b\u65b9\u5f0f\u914d\u7f6e\uff1a dubbo:reference interface= com.foo.BarService mock= true / \u6216 dubbo:reference interface= com.foo.BarService mock= com.foo.BarServiceMock / \u5728\u5de5\u7a0b\u4e2d\u63d0\u4f9b Mock \u5b9e\u73b0 [^2]\uff1a package com.foo; public class BarServiceMock implements BarService { public String sayHello(String name) { // \u4f60\u53ef\u4ee5\u4f2a\u9020\u5bb9\u9519\u6570\u636e\uff0c\u6b64\u65b9\u6cd5\u53ea\u5728\u51fa\u73b0RpcException\u65f6\u88ab\u6267\u884c return \u5bb9\u9519\u6570\u636e ; } } \u5982\u679c\u670d\u52a1\u7684\u6d88\u8d39\u65b9\u7ecf\u5e38\u9700\u8981 try-catch \u6355\u83b7\u5f02\u5e38\uff0c\u5982\uff1a Offer offer = null; try { offer = offerService.findOffer(offerId); } catch (RpcException e) { logger.error(e); } \u8bf7\u8003\u8651\u6539\u4e3a Mock \u5b9e\u73b0\uff0c\u5e76\u5728 Mock \u5b9e\u73b0\u4e2d return null\u3002\u5982\u679c\u53ea\u662f\u60f3\u7b80\u5355\u7684\u5ffd\u7565\u5f02\u5e38\uff0c\u5728 2.0.11 \u4ee5\u4e0a\u7248\u672c\u53ef\u7528\uff1a dubbo:reference interface= com.foo.BarService mock= return null /","title":"\u672c\u5730\u4f2a\u88c5"},{"location":"user/demos/local-mock/#_2","text":"","title":"\u8fdb\u9636\u7528\u6cd5"},{"location":"user/demos/local-mock/#return","text":"\u4f7f\u7528 return \u6765\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u5bf9\u8c61\uff0c\u4f5c\u4e3a Mock \u7684\u8fd4\u56de\u503c\u3002\u5408\u6cd5\u7684\u5b57\u7b26\u4e32\u53ef\u4ee5\u662f\uff1a * empty : \u4ee3\u8868\u7a7a\uff0c\u57fa\u672c\u7c7b\u578b\u7684\u9ed8\u8ba4\u503c\uff0c\u6216\u8005\u96c6\u5408\u7c7b\u7684\u7a7a\u503c * null : null * true : true * false : false * JSON \u683c\u5f0f : \u53cd\u5e8f\u5217\u5316 JSON \u6240\u5f97\u5230\u7684\u5bf9\u8c61","title":"return"},{"location":"user/demos/local-mock/#throw","text":"\u4f7f\u7528 throw \u6765\u8fd4\u56de\u4e00\u4e2a Exception \u5bf9\u8c61\uff0c\u4f5c\u4e3a Mock \u7684\u8fd4\u56de\u503c\u3002 \u5f53\u8c03\u7528\u51fa\u9519\u65f6\uff0c\u629b\u51fa\u4e00\u4e2a\u9ed8\u8ba4\u7684 RPCException: dubbo:reference interface= com.foo.BarService mock= throw / \u5f53\u8c03\u7528\u51fa\u9519\u65f6\uff0c\u629b\u51fa\u6307\u5b9a\u7684 Exception\uff1a dubbo:reference interface= com.foo.BarService mock= throw com.foo.MockException /","title":"throw"},{"location":"user/demos/local-mock/#force-fail","text":"\u5728 2.6.6 \u4ee5\u4e0a\u7684\u7248\u672c\uff0c\u53ef\u4ee5\u5f00\u59cb\u5728 Spring XML \u914d\u7f6e\u6587\u4ef6\u4e2d\u4f7f\u7528 fail: \u548c force: \u3002 force: \u4ee3\u8868\u5f3a\u5236\u4f7f\u7528 Mock \u884c\u4e3a\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u8d70\u8fdc\u7a0b\u8c03\u7528\u3002 fail: \u4e0e\u9ed8\u8ba4\u884c\u4e3a\u4e00\u81f4\uff0c\u53ea\u6709\u5f53\u8fdc\u7a0b\u8c03\u7528\u53d1\u751f\u9519\u8bef\u65f6\u624d\u4f7f\u7528 Mock \u884c\u4e3a\u3002 force: \u548c fail: \u90fd\u652f\u6301\u4e0e throw \u6216\u8005 return \u7ec4\u5408\u4f7f\u7528\u3002 \u5f3a\u5236\u8fd4\u56de\u6307\u5b9a\u503c\uff1a dubbo:reference interface= com.foo.BarService mock= force:return fake / \u5f3a\u5236\u629b\u51fa\u6307\u5b9a\u5f02\u5e38\uff1a dubbo:reference interface= com.foo.BarService mock= force:throw com.foo.MockException /","title":"force \u548c fail"},{"location":"user/demos/local-mock/#mock","text":"Mock \u53ef\u4ee5\u5728\u65b9\u6cd5\u7ea7\u522b\u4e0a\u6307\u5b9a\uff0c\u5047\u5b9a com.foo.BarService \u4e0a\u6709\u597d\u51e0\u4e2a\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5355\u72ec\u4e3a sayHello() \u65b9\u6cd5\u6307\u5b9a Mock \u884c\u4e3a\u3002\u5177\u4f53\u914d\u7f6e\u5982\u4e0b\u6240\u793a\uff0c\u5728\u672c\u4f8b\u4e2d\uff0c\u53ea\u8981 sayHello() \u88ab\u8c03\u7528\u5230\u65f6\uff0c\u5f3a\u5236\u8fd4\u56de \"fake\": dubbo:reference id= demoService check= false interface= com.foo.BarService dubbo:parameter key= sayHello.mock value= force:return fake / /dubbo:reference [^1]: Mock \u662f Stub \u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u4fbf\u4e8e\u670d\u52a1\u63d0\u4f9b\u65b9\u5728\u5ba2\u6237\u7aef\u6267\u884c\u5bb9\u9519\u903b\u8f91\uff0c\u56e0\u7ecf\u5e38\u9700\u8981\u5728\u51fa\u73b0 RpcException (\u6bd4\u5982\u7f51\u7edc\u5931\u8d25\uff0c\u8d85\u65f6\u7b49)\u65f6\u8fdb\u884c\u5bb9\u9519\uff0c\u800c\u5728\u51fa\u73b0\u4e1a\u52a1\u5f02\u5e38(\u6bd4\u5982\u767b\u5f55\u7528\u6237\u540d\u5bc6\u7801\u9519\u8bef)\u65f6\u4e0d\u9700\u8981\u5bb9\u9519\uff0c\u5982\u679c\u7528 Stub\uff0c\u53ef\u80fd\u5c31\u9700\u8981\u6355\u83b7\u5e76\u4f9d\u8d56 RpcException \u7c7b\uff0c\u800c\u7528 Mock \u5c31\u53ef\u4ee5\u4e0d\u4f9d\u8d56 RpcException\uff0c\u56e0\u4e3a\u5b83\u7684\u7ea6\u5b9a\u5c31\u662f\u53ea\u6709\u51fa\u73b0 RpcException \u65f6\u624d\u6267\u884c\u3002 [^2]: \u5728 interface \u65c1\u653e\u4e00\u4e2a Mock \u5b9e\u73b0\uff0c\u5b83\u5b9e\u73b0 BarService \u63a5\u53e3\uff0c\u5e76\u6709\u4e00\u4e2a\u65e0\u53c2\u6784\u9020\u51fd\u6570","title":"\u5728\u65b9\u6cd5\u7ea7\u522b\u914d\u7f6e Mock"},{"location":"user/demos/local-stub/","text":"\u672c\u5730\u5b58\u6839 \u8fdc\u7a0b\u670d\u52a1\u540e\uff0c\u5ba2\u6237\u7aef\u901a\u5e38\u53ea\u5269\u4e0b\u63a5\u53e3\uff0c\u800c\u5b9e\u73b0\u5168\u5728\u670d\u52a1\u5668\u7aef\uff0c\u4f46\u63d0\u4f9b\u65b9\u6709\u4e9b\u65f6\u5019\u60f3\u5728\u5ba2\u6237\u7aef\u4e5f\u6267\u884c\u90e8\u5206\u903b\u8f91\uff0c\u6bd4\u5982\uff1a\u505a ThreadLocal \u7f13\u5b58\uff0c\u63d0\u524d\u9a8c\u8bc1\u53c2\u6570\uff0c\u8c03\u7528\u5931\u8d25\u540e\u4f2a\u9020\u5bb9\u9519\u6570\u636e\u7b49\u7b49\uff0c\u6b64\u65f6\u5c31\u9700\u8981\u5728 API \u4e2d\u5e26\u4e0a Stub\uff0c\u5ba2\u6237\u7aef\u751f\u6210 Proxy \u5b9e\u4f8b\uff0c\u4f1a\u628a Proxy \u901a\u8fc7\u6784\u9020\u51fd\u6570\u4f20\u7ed9 Stub [^1]\uff0c\u7136\u540e\u628a Stub \u66b4\u9732\u7ed9\u7528\u6237\uff0cStub \u53ef\u4ee5\u51b3\u5b9a\u8981\u4e0d\u8981\u53bb\u8c03 Proxy\u3002 \u5728 spring \u914d\u7f6e\u6587\u4ef6\u4e2d\u6309\u4ee5\u4e0b\u65b9\u5f0f\u914d\u7f6e\uff1a dubbo:service interface= com.foo.BarService stub= true / \u6216 dubbo:service interface= com.foo.BarService stub= com.foo.BarServiceStub / \u63d0\u4f9b Stub \u7684\u5b9e\u73b0 [^2]\uff1a package com.foo; public class BarServiceStub implements BarService { private final BarService barService; // \u6784\u9020\u51fd\u6570\u4f20\u5165\u771f\u6b63\u7684\u8fdc\u7a0b\u4ee3\u7406\u5bf9\u8c61 public BarServiceStub(BarService barService){ this.barService = barService; } public String sayHello(String name) { // \u6b64\u4ee3\u7801\u5728\u5ba2\u6237\u7aef\u6267\u884c, \u4f60\u53ef\u4ee5\u5728\u5ba2\u6237\u7aef\u505aThreadLocal\u672c\u5730\u7f13\u5b58\uff0c\u6216\u9884\u5148\u9a8c\u8bc1\u53c2\u6570\u662f\u5426\u5408\u6cd5\uff0c\u7b49\u7b49 try { return barService.sayHello(name); } catch (Exception e) { // \u4f60\u53ef\u4ee5\u5bb9\u9519\uff0c\u53ef\u4ee5\u505a\u4efb\u4f55AOP\u62e6\u622a\u4e8b\u9879 return \u5bb9\u9519\u6570\u636e ; } } } [^1]: Stub \u5fc5\u987b\u6709\u53ef\u4f20\u5165 Proxy \u7684\u6784\u9020\u51fd\u6570\u3002 [^2]: \u5728 interface \u65c1\u8fb9\u653e\u4e00\u4e2a Stub \u5b9e\u73b0\uff0c\u5b83\u5b9e\u73b0 BarService \u63a5\u53e3\uff0c\u5e76\u6709\u4e00\u4e2a\u4f20\u5165\u8fdc\u7a0b BarService \u5b9e\u4f8b\u7684\u6784\u9020\u51fd\u6570","title":"\u672c\u5730\u5b58\u6839"},{"location":"user/demos/local-stub/#_1","text":"\u8fdc\u7a0b\u670d\u52a1\u540e\uff0c\u5ba2\u6237\u7aef\u901a\u5e38\u53ea\u5269\u4e0b\u63a5\u53e3\uff0c\u800c\u5b9e\u73b0\u5168\u5728\u670d\u52a1\u5668\u7aef\uff0c\u4f46\u63d0\u4f9b\u65b9\u6709\u4e9b\u65f6\u5019\u60f3\u5728\u5ba2\u6237\u7aef\u4e5f\u6267\u884c\u90e8\u5206\u903b\u8f91\uff0c\u6bd4\u5982\uff1a\u505a ThreadLocal \u7f13\u5b58\uff0c\u63d0\u524d\u9a8c\u8bc1\u53c2\u6570\uff0c\u8c03\u7528\u5931\u8d25\u540e\u4f2a\u9020\u5bb9\u9519\u6570\u636e\u7b49\u7b49\uff0c\u6b64\u65f6\u5c31\u9700\u8981\u5728 API \u4e2d\u5e26\u4e0a Stub\uff0c\u5ba2\u6237\u7aef\u751f\u6210 Proxy \u5b9e\u4f8b\uff0c\u4f1a\u628a Proxy \u901a\u8fc7\u6784\u9020\u51fd\u6570\u4f20\u7ed9 Stub [^1]\uff0c\u7136\u540e\u628a Stub \u66b4\u9732\u7ed9\u7528\u6237\uff0cStub \u53ef\u4ee5\u51b3\u5b9a\u8981\u4e0d\u8981\u53bb\u8c03 Proxy\u3002 \u5728 spring \u914d\u7f6e\u6587\u4ef6\u4e2d\u6309\u4ee5\u4e0b\u65b9\u5f0f\u914d\u7f6e\uff1a dubbo:service interface= com.foo.BarService stub= true / \u6216 dubbo:service interface= com.foo.BarService stub= com.foo.BarServiceStub / \u63d0\u4f9b Stub \u7684\u5b9e\u73b0 [^2]\uff1a package com.foo; public class BarServiceStub implements BarService { private final BarService barService; // \u6784\u9020\u51fd\u6570\u4f20\u5165\u771f\u6b63\u7684\u8fdc\u7a0b\u4ee3\u7406\u5bf9\u8c61 public BarServiceStub(BarService barService){ this.barService = barService; } public String sayHello(String name) { // \u6b64\u4ee3\u7801\u5728\u5ba2\u6237\u7aef\u6267\u884c, \u4f60\u53ef\u4ee5\u5728\u5ba2\u6237\u7aef\u505aThreadLocal\u672c\u5730\u7f13\u5b58\uff0c\u6216\u9884\u5148\u9a8c\u8bc1\u53c2\u6570\u662f\u5426\u5408\u6cd5\uff0c\u7b49\u7b49 try { return barService.sayHello(name); } catch (Exception e) { // \u4f60\u53ef\u4ee5\u5bb9\u9519\uff0c\u53ef\u4ee5\u505a\u4efb\u4f55AOP\u62e6\u622a\u4e8b\u9879 return \u5bb9\u9519\u6570\u636e ; } } } [^1]: Stub \u5fc5\u987b\u6709\u53ef\u4f20\u5165 Proxy \u7684\u6784\u9020\u51fd\u6570\u3002 [^2]: \u5728 interface \u65c1\u8fb9\u653e\u4e00\u4e2a Stub \u5b9e\u73b0\uff0c\u5b83\u5b9e\u73b0 BarService \u63a5\u53e3\uff0c\u5e76\u6709\u4e00\u4e2a\u4f20\u5165\u8fdc\u7a0b BarService \u5b9e\u4f8b\u7684\u6784\u9020\u51fd\u6570","title":"\u672c\u5730\u5b58\u6839"},{"location":"user/demos/logger-strategy/","text":"\u65e5\u5fd7\u9002\u914d \u81ea 2.2.1 \u5f00\u59cb\uff0cdubbo \u5f00\u59cb\u5185\u7f6e log4j\u3001slf4j\u3001jcl\u3001jdk \u8fd9\u4e9b\u65e5\u5fd7\u6846\u67b6\u7684\u9002\u914d[1]\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u663e\u5f0f\u914d\u7f6e\u65e5\u5fd7\u8f93\u51fa\u7b56\u7565\uff1a \u547d\u4ee4\u884c sh java -Ddubbo.application.logger=log4j \u5728 dubbo.properties \u4e2d\u6307\u5b9a dubbo.application.logger=log4j \u5728 dubbo.xml \u4e2d\u914d\u7f6e xml dubbo:application logger=\"log4j\" / [1]: \u81ea\u5b9a\u4e49\u6269\u5c55\u53ef\u4ee5\u53c2\u8003 \u65e5\u5fd7\u9002\u914d\u6269\u5c55","title":"\u65e5\u5fd7\u9002\u914d"},{"location":"user/demos/logger-strategy/#_1","text":"\u81ea 2.2.1 \u5f00\u59cb\uff0cdubbo \u5f00\u59cb\u5185\u7f6e log4j\u3001slf4j\u3001jcl\u3001jdk \u8fd9\u4e9b\u65e5\u5fd7\u6846\u67b6\u7684\u9002\u914d[1]\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u663e\u5f0f\u914d\u7f6e\u65e5\u5fd7\u8f93\u51fa\u7b56\u7565\uff1a \u547d\u4ee4\u884c sh java -Ddubbo.application.logger=log4j \u5728 dubbo.properties \u4e2d\u6307\u5b9a dubbo.application.logger=log4j \u5728 dubbo.xml \u4e2d\u914d\u7f6e xml dubbo:application logger=\"log4j\" / [1]: \u81ea\u5b9a\u4e49\u6269\u5c55\u53ef\u4ee5\u53c2\u8003 \u65e5\u5fd7\u9002\u914d\u6269\u5c55","title":"\u65e5\u5fd7\u9002\u914d"},{"location":"user/demos/multi-protocols/","text":"\u591a\u534f\u8bae Dubbo \u5141\u8bb8\u914d\u7f6e\u591a\u534f\u8bae\uff0c\u5728\u4e0d\u540c\u670d\u52a1\u4e0a\u652f\u6301\u4e0d\u540c\u534f\u8bae\u6216\u8005\u540c\u4e00\u670d\u52a1\u4e0a\u540c\u65f6\u652f\u6301\u591a\u79cd\u534f\u8bae\u3002 \u4e0d\u540c\u670d\u52a1\u4e0d\u540c\u534f\u8bae \u4e0d\u540c\u670d\u52a1\u5728\u6027\u80fd\u4e0a\u9002\u7528\u4e0d\u540c\u534f\u8bae\u8fdb\u884c\u4f20\u8f93\uff0c\u6bd4\u5982\u5927\u6570\u636e\u7528\u77ed\u8fde\u63a5\u534f\u8bae\uff0c\u5c0f\u6570\u636e\u5927\u5e76\u53d1\u7528\u957f\u8fde\u63a5\u534f\u8bae ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd dubbo:application name= world / dubbo:registry id= registry address= 10.20.141.150:9090 username= admin password= hello1234 / !-- \u591a\u534f\u8bae\u914d\u7f6e -- dubbo:protocol name= dubbo port= 20880 / dubbo:protocol name= rmi port= 1099 / !-- \u4f7f\u7528dubbo\u534f\u8bae\u66b4\u9732\u670d\u52a1 -- dubbo:service interface= com.alibaba.hello.api.HelloService version= 1.0.0 ref= helloService protocol= dubbo / !-- \u4f7f\u7528rmi\u534f\u8bae\u66b4\u9732\u670d\u52a1 -- dubbo:service interface= com.alibaba.hello.api.DemoService version= 1.0.0 ref= demoService protocol= rmi / /beans \u591a\u534f\u8bae\u66b4\u9732\u670d\u52a1 \u9700\u8981\u4e0e http \u5ba2\u6237\u7aef\u4e92\u64cd\u4f5c ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd dubbo:application name= world / dubbo:registry id= registry address= 10.20.141.150:9090 username= admin password= hello1234 / !-- \u591a\u534f\u8bae\u914d\u7f6e -- dubbo:protocol name= dubbo port= 20880 / dubbo:protocol name= hessian port= 8080 / !-- \u4f7f\u7528\u591a\u4e2a\u534f\u8bae\u66b4\u9732\u670d\u52a1 -- dubbo:service id= helloService interface= com.alibaba.hello.api.HelloService version= 1.0.0 protocol= dubbo,hessian / /beans","title":"\u591a\u534f\u8bae"},{"location":"user/demos/multi-protocols/#_1","text":"Dubbo \u5141\u8bb8\u914d\u7f6e\u591a\u534f\u8bae\uff0c\u5728\u4e0d\u540c\u670d\u52a1\u4e0a\u652f\u6301\u4e0d\u540c\u534f\u8bae\u6216\u8005\u540c\u4e00\u670d\u52a1\u4e0a\u540c\u65f6\u652f\u6301\u591a\u79cd\u534f\u8bae\u3002","title":"\u591a\u534f\u8bae"},{"location":"user/demos/multi-protocols/#_2","text":"\u4e0d\u540c\u670d\u52a1\u5728\u6027\u80fd\u4e0a\u9002\u7528\u4e0d\u540c\u534f\u8bae\u8fdb\u884c\u4f20\u8f93\uff0c\u6bd4\u5982\u5927\u6570\u636e\u7528\u77ed\u8fde\u63a5\u534f\u8bae\uff0c\u5c0f\u6570\u636e\u5927\u5e76\u53d1\u7528\u957f\u8fde\u63a5\u534f\u8bae ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd dubbo:application name= world / dubbo:registry id= registry address= 10.20.141.150:9090 username= admin password= hello1234 / !-- \u591a\u534f\u8bae\u914d\u7f6e -- dubbo:protocol name= dubbo port= 20880 / dubbo:protocol name= rmi port= 1099 / !-- \u4f7f\u7528dubbo\u534f\u8bae\u66b4\u9732\u670d\u52a1 -- dubbo:service interface= com.alibaba.hello.api.HelloService version= 1.0.0 ref= helloService protocol= dubbo / !-- \u4f7f\u7528rmi\u534f\u8bae\u66b4\u9732\u670d\u52a1 -- dubbo:service interface= com.alibaba.hello.api.DemoService version= 1.0.0 ref= demoService protocol= rmi / /beans","title":"\u4e0d\u540c\u670d\u52a1\u4e0d\u540c\u534f\u8bae"},{"location":"user/demos/multi-protocols/#_3","text":"\u9700\u8981\u4e0e http \u5ba2\u6237\u7aef\u4e92\u64cd\u4f5c ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd dubbo:application name= world / dubbo:registry id= registry address= 10.20.141.150:9090 username= admin password= hello1234 / !-- \u591a\u534f\u8bae\u914d\u7f6e -- dubbo:protocol name= dubbo port= 20880 / dubbo:protocol name= hessian port= 8080 / !-- \u4f7f\u7528\u591a\u4e2a\u534f\u8bae\u66b4\u9732\u670d\u52a1 -- dubbo:service id= helloService interface= com.alibaba.hello.api.HelloService version= 1.0.0 protocol= dubbo,hessian / /beans","title":"\u591a\u534f\u8bae\u66b4\u9732\u670d\u52a1"},{"location":"user/demos/multi-registry/","text":"\u591a\u6ce8\u518c\u4e2d\u5fc3 Dubbo \u652f\u6301\u540c\u4e00\u670d\u52a1\u5411\u591a\u6ce8\u518c\u4e2d\u5fc3\u540c\u65f6\u6ce8\u518c\uff0c\u6216\u8005\u4e0d\u540c\u670d\u52a1\u5206\u522b\u6ce8\u518c\u5230\u4e0d\u540c\u7684\u6ce8\u518c\u4e2d\u5fc3\u4e0a\u53bb\uff0c\u751a\u81f3\u53ef\u4ee5\u540c\u65f6\u5f15\u7528\u6ce8\u518c\u5728\u4e0d\u540c\u6ce8\u518c\u4e2d\u5fc3\u4e0a\u7684\u540c\u540d\u670d\u52a1\u3002\u53e6\u5916\uff0c\u6ce8\u518c\u4e2d\u5fc3\u662f\u652f\u6301\u81ea\u5b9a\u4e49\u6269\u5c55\u7684 ^1 \u3002 \u591a\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c \u6bd4\u5982\uff1a\u4e2d\u6587\u7ad9\u6709\u4e9b\u670d\u52a1\u6765\u4e0d\u53ca\u5728\u9752\u5c9b\u90e8\u7f72\uff0c\u53ea\u5728\u676d\u5dde\u90e8\u7f72\uff0c\u800c\u9752\u5c9b\u7684\u5176\u5b83\u5e94\u7528\u9700\u8981\u5f15\u7528\u6b64\u670d\u52a1\uff0c\u5c31\u53ef\u4ee5\u5c06\u670d\u52a1\u540c\u65f6\u6ce8\u518c\u5230\u4e24\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u3002 ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd dubbo:application name= world / !-- \u591a\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e -- dubbo:registry id= hangzhouRegistry address= 10.20.141.150:9090 / dubbo:registry id= qingdaoRegistry address= 10.20.141.151:9010 default= false / !-- \u5411\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c -- dubbo:service interface= com.alibaba.hello.api.HelloService version= 1.0.0 ref= helloService registry= hangzhouRegistry,qingdaoRegistry / /beans \u4e0d\u540c\u670d\u52a1\u4f7f\u7528\u4e0d\u540c\u6ce8\u518c\u4e2d\u5fc3 \u6bd4\u5982\uff1aCRM \u6709\u4e9b\u670d\u52a1\u662f\u4e13\u95e8\u4e3a\u56fd\u9645\u7ad9\u8bbe\u8ba1\u7684\uff0c\u6709\u4e9b\u670d\u52a1\u662f\u4e13\u95e8\u4e3a\u4e2d\u6587\u7ad9\u8bbe\u8ba1\u7684\u3002 ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd dubbo:application name= world / !-- \u591a\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e -- dubbo:registry id= chinaRegistry address= 10.20.141.150:9090 / dubbo:registry id= intlRegistry address= 10.20.154.177:9010 default= false / !-- \u5411\u4e2d\u6587\u7ad9\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c -- dubbo:service interface= com.alibaba.hello.api.HelloService version= 1.0.0 ref= helloService registry= chinaRegistry / !-- \u5411\u56fd\u9645\u7ad9\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c -- dubbo:service interface= com.alibaba.hello.api.DemoService version= 1.0.0 ref= demoService registry= intlRegistry / /beans \u591a\u6ce8\u518c\u4e2d\u5fc3\u5f15\u7528 \u6bd4\u5982\uff1aCRM \u9700\u540c\u65f6\u8c03\u7528\u4e2d\u6587\u7ad9\u548c\u56fd\u9645\u7ad9\u7684 PC2 \u670d\u52a1\uff0cPC2 \u5728\u4e2d\u6587\u7ad9\u548c\u56fd\u9645\u7ad9\u5747\u6709\u90e8\u7f72\uff0c\u63a5\u53e3\u53ca\u7248\u672c\u53f7\u90fd\u4e00\u6837\uff0c\u4f46\u8fde\u7684\u6570\u636e\u5e93\u4e0d\u4e00\u6837\u3002 ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd dubbo:application name= world / !-- \u591a\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e -- dubbo:registry id= chinaRegistry address= 10.20.141.150:9090 / dubbo:registry id= intlRegistry address= 10.20.154.177:9010 default= false / !-- \u5f15\u7528\u4e2d\u6587\u7ad9\u670d\u52a1 -- dubbo:reference id= chinaHelloService interface= com.alibaba.hello.api.HelloService version= 1.0.0 registry= chinaRegistry / !-- \u5f15\u7528\u56fd\u9645\u7ad9\u7ad9\u670d\u52a1 -- dubbo:reference id= intlHelloService interface= com.alibaba.hello.api.HelloService version= 1.0.0 registry= intlRegistry / /beans \u5982\u679c\u53ea\u662f\u6d4b\u8bd5\u73af\u5883\u4e34\u65f6\u9700\u8981\u8fde\u63a5\u4e24\u4e2a\u4e0d\u540c\u6ce8\u518c\u4e2d\u5fc3\uff0c\u4f7f\u7528\u7ad6\u53f7\u5206\u9694\u591a\u4e2a\u4e0d\u540c\u6ce8\u518c\u4e2d\u5fc3\u5730\u5740\uff1a ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd dubbo:application name= world / !-- \u591a\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e\uff0c\u7ad6\u53f7\u5206\u9694\u8868\u793a\u540c\u65f6\u8fde\u63a5\u591a\u4e2a\u4e0d\u540c\u6ce8\u518c\u4e2d\u5fc3\uff0c\u540c\u4e00\u6ce8\u518c\u4e2d\u5fc3\u7684\u591a\u4e2a\u96c6\u7fa4\u5730\u5740\u7528\u9017\u53f7\u5206\u9694 -- dubbo:registry address= 10.20.141.150:9090|10.20.154.177:9010 / !-- \u5f15\u7528\u670d\u52a1 -- dubbo:reference id= helloService interface= com.alibaba.hello.api.HelloService version= 1.0.0 / /beans","title":"\u591a\u6ce8\u518c\u4e2d\u5fc3"},{"location":"user/demos/multi-registry/#_1","text":"Dubbo \u652f\u6301\u540c\u4e00\u670d\u52a1\u5411\u591a\u6ce8\u518c\u4e2d\u5fc3\u540c\u65f6\u6ce8\u518c\uff0c\u6216\u8005\u4e0d\u540c\u670d\u52a1\u5206\u522b\u6ce8\u518c\u5230\u4e0d\u540c\u7684\u6ce8\u518c\u4e2d\u5fc3\u4e0a\u53bb\uff0c\u751a\u81f3\u53ef\u4ee5\u540c\u65f6\u5f15\u7528\u6ce8\u518c\u5728\u4e0d\u540c\u6ce8\u518c\u4e2d\u5fc3\u4e0a\u7684\u540c\u540d\u670d\u52a1\u3002\u53e6\u5916\uff0c\u6ce8\u518c\u4e2d\u5fc3\u662f\u652f\u6301\u81ea\u5b9a\u4e49\u6269\u5c55\u7684 ^1 \u3002","title":"\u591a\u6ce8\u518c\u4e2d\u5fc3"},{"location":"user/demos/multi-registry/#_2","text":"\u6bd4\u5982\uff1a\u4e2d\u6587\u7ad9\u6709\u4e9b\u670d\u52a1\u6765\u4e0d\u53ca\u5728\u9752\u5c9b\u90e8\u7f72\uff0c\u53ea\u5728\u676d\u5dde\u90e8\u7f72\uff0c\u800c\u9752\u5c9b\u7684\u5176\u5b83\u5e94\u7528\u9700\u8981\u5f15\u7528\u6b64\u670d\u52a1\uff0c\u5c31\u53ef\u4ee5\u5c06\u670d\u52a1\u540c\u65f6\u6ce8\u518c\u5230\u4e24\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u3002 ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd dubbo:application name= world / !-- \u591a\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e -- dubbo:registry id= hangzhouRegistry address= 10.20.141.150:9090 / dubbo:registry id= qingdaoRegistry address= 10.20.141.151:9010 default= false / !-- \u5411\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c -- dubbo:service interface= com.alibaba.hello.api.HelloService version= 1.0.0 ref= helloService registry= hangzhouRegistry,qingdaoRegistry / /beans","title":"\u591a\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c"},{"location":"user/demos/multi-registry/#_3","text":"\u6bd4\u5982\uff1aCRM \u6709\u4e9b\u670d\u52a1\u662f\u4e13\u95e8\u4e3a\u56fd\u9645\u7ad9\u8bbe\u8ba1\u7684\uff0c\u6709\u4e9b\u670d\u52a1\u662f\u4e13\u95e8\u4e3a\u4e2d\u6587\u7ad9\u8bbe\u8ba1\u7684\u3002 ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd dubbo:application name= world / !-- \u591a\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e -- dubbo:registry id= chinaRegistry address= 10.20.141.150:9090 / dubbo:registry id= intlRegistry address= 10.20.154.177:9010 default= false / !-- \u5411\u4e2d\u6587\u7ad9\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c -- dubbo:service interface= com.alibaba.hello.api.HelloService version= 1.0.0 ref= helloService registry= chinaRegistry / !-- \u5411\u56fd\u9645\u7ad9\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c -- dubbo:service interface= com.alibaba.hello.api.DemoService version= 1.0.0 ref= demoService registry= intlRegistry / /beans","title":"\u4e0d\u540c\u670d\u52a1\u4f7f\u7528\u4e0d\u540c\u6ce8\u518c\u4e2d\u5fc3"},{"location":"user/demos/multi-registry/#_4","text":"\u6bd4\u5982\uff1aCRM \u9700\u540c\u65f6\u8c03\u7528\u4e2d\u6587\u7ad9\u548c\u56fd\u9645\u7ad9\u7684 PC2 \u670d\u52a1\uff0cPC2 \u5728\u4e2d\u6587\u7ad9\u548c\u56fd\u9645\u7ad9\u5747\u6709\u90e8\u7f72\uff0c\u63a5\u53e3\u53ca\u7248\u672c\u53f7\u90fd\u4e00\u6837\uff0c\u4f46\u8fde\u7684\u6570\u636e\u5e93\u4e0d\u4e00\u6837\u3002 ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd dubbo:application name= world / !-- \u591a\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e -- dubbo:registry id= chinaRegistry address= 10.20.141.150:9090 / dubbo:registry id= intlRegistry address= 10.20.154.177:9010 default= false / !-- \u5f15\u7528\u4e2d\u6587\u7ad9\u670d\u52a1 -- dubbo:reference id= chinaHelloService interface= com.alibaba.hello.api.HelloService version= 1.0.0 registry= chinaRegistry / !-- \u5f15\u7528\u56fd\u9645\u7ad9\u7ad9\u670d\u52a1 -- dubbo:reference id= intlHelloService interface= com.alibaba.hello.api.HelloService version= 1.0.0 registry= intlRegistry / /beans \u5982\u679c\u53ea\u662f\u6d4b\u8bd5\u73af\u5883\u4e34\u65f6\u9700\u8981\u8fde\u63a5\u4e24\u4e2a\u4e0d\u540c\u6ce8\u518c\u4e2d\u5fc3\uff0c\u4f7f\u7528\u7ad6\u53f7\u5206\u9694\u591a\u4e2a\u4e0d\u540c\u6ce8\u518c\u4e2d\u5fc3\u5730\u5740\uff1a ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd dubbo:application name= world / !-- \u591a\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e\uff0c\u7ad6\u53f7\u5206\u9694\u8868\u793a\u540c\u65f6\u8fde\u63a5\u591a\u4e2a\u4e0d\u540c\u6ce8\u518c\u4e2d\u5fc3\uff0c\u540c\u4e00\u6ce8\u518c\u4e2d\u5fc3\u7684\u591a\u4e2a\u96c6\u7fa4\u5730\u5740\u7528\u9017\u53f7\u5206\u9694 -- dubbo:registry address= 10.20.141.150:9090|10.20.154.177:9010 / !-- \u5f15\u7528\u670d\u52a1 -- dubbo:reference id= helloService interface= com.alibaba.hello.api.HelloService version= 1.0.0 / /beans","title":"\u591a\u6ce8\u518c\u4e2d\u5fc3\u5f15\u7528"},{"location":"user/demos/multi-versions/","text":"\u591a\u7248\u672c \u5f53\u4e00\u4e2a\u63a5\u53e3\u5b9e\u73b0\uff0c\u51fa\u73b0\u4e0d\u517c\u5bb9\u5347\u7ea7\u65f6\uff0c\u53ef\u4ee5\u7528\u7248\u672c\u53f7\u8fc7\u6e21\uff0c\u7248\u672c\u53f7\u4e0d\u540c\u7684\u670d\u52a1\u76f8\u4e92\u95f4\u4e0d\u5f15\u7528\u3002 \u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u7684\u6b65\u9aa4\u8fdb\u884c\u7248\u672c\u8fc1\u79fb\uff1a \u5728\u4f4e\u538b\u529b\u65f6\u95f4\u6bb5\uff0c\u5148\u5347\u7ea7\u4e00\u534a\u63d0\u4f9b\u8005\u4e3a\u65b0\u7248\u672c \u518d\u5c06\u6240\u6709\u6d88\u8d39\u8005\u5347\u7ea7\u4e3a\u65b0\u7248\u672c \u7136\u540e\u5c06\u5269\u4e0b\u7684\u4e00\u534a\u63d0\u4f9b\u8005\u5347\u7ea7\u4e3a\u65b0\u7248\u672c \u8001\u7248\u672c\u670d\u52a1\u63d0\u4f9b\u8005\u914d\u7f6e\uff1a dubbo:service interface= com.foo.BarService version= 1.0.0 / \u65b0\u7248\u672c\u670d\u52a1\u63d0\u4f9b\u8005\u914d\u7f6e\uff1a dubbo:service interface= com.foo.BarService version= 2.0.0 / \u8001\u7248\u672c\u670d\u52a1\u6d88\u8d39\u8005\u914d\u7f6e\uff1a dubbo:reference id= barService interface= com.foo.BarService version= 1.0.0 / \u65b0\u7248\u672c\u670d\u52a1\u6d88\u8d39\u8005\u914d\u7f6e\uff1a dubbo:reference id= barService interface= com.foo.BarService version= 2.0.0 / \u5982\u679c\u4e0d\u9700\u8981\u533a\u5206\u7248\u672c\uff0c\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u7684\u65b9\u5f0f\u914d\u7f6e [^1]\uff1a dubbo:reference id= barService interface= com.foo.BarService version= * / [^1]: 2.2.0 \u4ee5\u4e0a\u7248\u672c\u652f\u6301","title":"\u591a\u7248\u672c"},{"location":"user/demos/multi-versions/#_1","text":"\u5f53\u4e00\u4e2a\u63a5\u53e3\u5b9e\u73b0\uff0c\u51fa\u73b0\u4e0d\u517c\u5bb9\u5347\u7ea7\u65f6\uff0c\u53ef\u4ee5\u7528\u7248\u672c\u53f7\u8fc7\u6e21\uff0c\u7248\u672c\u53f7\u4e0d\u540c\u7684\u670d\u52a1\u76f8\u4e92\u95f4\u4e0d\u5f15\u7528\u3002 \u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u7684\u6b65\u9aa4\u8fdb\u884c\u7248\u672c\u8fc1\u79fb\uff1a \u5728\u4f4e\u538b\u529b\u65f6\u95f4\u6bb5\uff0c\u5148\u5347\u7ea7\u4e00\u534a\u63d0\u4f9b\u8005\u4e3a\u65b0\u7248\u672c \u518d\u5c06\u6240\u6709\u6d88\u8d39\u8005\u5347\u7ea7\u4e3a\u65b0\u7248\u672c \u7136\u540e\u5c06\u5269\u4e0b\u7684\u4e00\u534a\u63d0\u4f9b\u8005\u5347\u7ea7\u4e3a\u65b0\u7248\u672c \u8001\u7248\u672c\u670d\u52a1\u63d0\u4f9b\u8005\u914d\u7f6e\uff1a dubbo:service interface= com.foo.BarService version= 1.0.0 / \u65b0\u7248\u672c\u670d\u52a1\u63d0\u4f9b\u8005\u914d\u7f6e\uff1a dubbo:service interface= com.foo.BarService version= 2.0.0 / \u8001\u7248\u672c\u670d\u52a1\u6d88\u8d39\u8005\u914d\u7f6e\uff1a dubbo:reference id= barService interface= com.foo.BarService version= 1.0.0 / \u65b0\u7248\u672c\u670d\u52a1\u6d88\u8d39\u8005\u914d\u7f6e\uff1a dubbo:reference id= barService interface= com.foo.BarService version= 2.0.0 / \u5982\u679c\u4e0d\u9700\u8981\u533a\u5206\u7248\u672c\uff0c\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u7684\u65b9\u5f0f\u914d\u7f6e [^1]\uff1a dubbo:reference id= barService interface= com.foo.BarService version= * / [^1]: 2.2.0 \u4ee5\u4e0a\u7248\u672c\u652f\u6301","title":"\u591a\u7248\u672c"},{"location":"user/demos/netty4/","text":"dubbo 2.5.6\u7248\u672c\u65b0\u589e\u4e86\u5bf9netty4\u901a\u4fe1\u6a21\u5757\u7684\u652f\u6301\uff0c\u542f\u7528\u65b9\u5f0f\u5982\u4e0b provider\u7aef\uff1a dubbo:protocol server= netty4 / \u6216 dubbo:provider server= netty4 / consumer\u7aef\uff1a dubbo:consumer client= netty4 / \u6ce8\u610f 1. provider\u7aef\u5982\u9700\u4e0d\u540c\u7684\u534f\u8bae\u4f7f\u7528\u4e0d\u540c\u7684\u901a\u4fe1\u5c42\u6846\u67b6\uff0c\u8bf7\u914d\u7f6e\u591a\u4e2aprotocol\u5206\u522b\u8bbe\u7f6e 2. consumer\u7aef\u8bf7\u4f7f\u7528\u5982\u4e0b\u5f62\u5f0f\uff1a xml dubbo:consumer client=\"netty\" dubbo:reference / /dubbo:consumer xml dubbo:consumer client=\"netty4\" dubbo:reference / /dubbo:consumer \u63a5\u4e0b\u6765\u6211\u4eec\u4f1a\u7ee7\u7eed\u5b8c\u5584\uff1a 1. \u6027\u80fd\u6d4b\u8bd5\u6307\u6807\u53ca\u4e0enetty3\u7248\u672c\u7684\u6027\u80fd\u6d4b\u8bd5\u5bf9\u6bd4\uff0c\u6211\u4eec\u4f1a\u63d0\u4f9b\u4e00\u4efd\u53c2\u8003\u6570\u636e","title":"Netty4"},{"location":"user/demos/parameter-validation/","text":"\u53c2\u6570\u9a8c\u8bc1 \u53c2\u6570\u9a8c\u8bc1\u529f\u80fd [^1] \u662f\u57fa\u4e8e JSR303 \u5b9e\u73b0\u7684\uff0c\u7528\u6237\u53ea\u9700\u6807\u8bc6 JSR303 \u6807\u51c6\u7684\u9a8c\u8bc1 annotation\uff0c\u5e76\u901a\u8fc7\u58f0\u660e filter \u6765\u5b9e\u73b0\u9a8c\u8bc1 ^2 \u3002 Maven \u4f9d\u8d56 dependency groupId javax.validation /groupId artifactId validation-api /artifactId version 1.0.0.GA /version /dependency dependency groupId org.hibernate /groupId artifactId hibernate-validator /artifactId version 4.2.0.Final /version /dependency \u793a\u4f8b \u53c2\u6570\u6807\u6ce8\u793a\u4f8b import java.io.Serializable; import java.util.Date; import javax.validation.constraints.Future; import javax.validation.constraints.Max; import javax.validation.constraints.Min; import javax.validation.constraints.NotNull; import javax.validation.constraints.Past; import javax.validation.constraints.Pattern; import javax.validation.constraints.Size; public class ValidationParameter implements Serializable { private static final long serialVersionUID = 7158911668568000392L; @NotNull // \u4e0d\u5141\u8bb8\u4e3a\u7a7a @Size(min = 1, max = 20) // \u957f\u5ea6\u6216\u5927\u5c0f\u8303\u56f4 private String name; @NotNull(groups = ValidationService.Save.class) // \u4fdd\u5b58\u65f6\u4e0d\u5141\u8bb8\u4e3a\u7a7a\uff0c\u66f4\u65b0\u65f6\u5141\u8bb8\u4e3a\u7a7a \uff0c\u8868\u793a\u4e0d\u66f4\u65b0\u8be5\u5b57\u6bb5 @Pattern(regexp = ^\\\\s*\\\\w+(?:\\\\.{0,1}[\\\\w-]+)*@[a-zA-Z0-9]+(?:[-.][a-zA-Z0-9]+)*\\\\.[a-zA-Z]+\\\\s*$ ) private String email; @Min(18) // \u6700\u5c0f\u503c @Max(100) // \u6700\u5927\u503c private int age; @Past // \u5fc5\u987b\u4e3a\u4e00\u4e2a\u8fc7\u53bb\u7684\u65f6\u95f4 private Date loginDate; @Future // \u5fc5\u987b\u4e3a\u4e00\u4e2a\u672a\u6765\u7684\u65f6\u95f4 private Date expiryDate; public String getName() { return name; } public void setName(String name) { this.name = name; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public Date getLoginDate() { return loginDate; } public void setLoginDate(Date loginDate) { this.loginDate = loginDate; } public Date getExpiryDate() { return expiryDate; } public void setExpiryDate(Date expiryDate) { this.expiryDate = expiryDate; } } \u5206\u7ec4\u9a8c\u8bc1\u793a\u4f8b public interface ValidationService { // \u7f3a\u7701\u53ef\u6309\u670d\u52a1\u63a5\u53e3\u533a\u5206\u9a8c\u8bc1\u573a\u666f\uff0c\u5982\uff1a@NotNull(groups = ValidationService.class) @interface Save{} // \u4e0e\u65b9\u6cd5\u540c\u540d\u63a5\u53e3\uff0c\u9996\u5b57\u6bcd\u5927\u5199\uff0c\u7528\u4e8e\u533a\u5206\u9a8c\u8bc1\u573a\u666f\uff0c\u5982\uff1a@NotNull(groups = ValidationService.Save.class)\uff0c\u53ef\u9009 void save(ValidationParameter parameter); void update(ValidationParameter parameter); } \u5173\u8054\u9a8c\u8bc1\u793a\u4f8b import javax.validation.GroupSequence; public interface ValidationService { @GroupSequence(Update.class) // \u540c\u65f6\u9a8c\u8bc1Update\u7ec4\u89c4\u5219 @interface Save{} void save(ValidationParameter parameter); @interface Update{} void update(ValidationParameter parameter); } \u53c2\u6570\u9a8c\u8bc1\u793a\u4f8b import javax.validation.constraints.Min; import javax.validation.constraints.NotNull; public interface ValidationService { void save(@NotNull ValidationParameter parameter); // \u9a8c\u8bc1\u53c2\u6570\u4e0d\u4e3a\u7a7a void delete(@Min(1) int id); // \u76f4\u63a5\u5bf9\u57fa\u672c\u7c7b\u578b\u53c2\u6570\u9a8c\u8bc1 } \u914d\u7f6e \u5728\u5ba2\u6237\u7aef\u9a8c\u8bc1\u53c2\u6570 dubbo:reference id= validationService interface= org.apache.dubbo.examples.validation.api.ValidationService validation= true / \u5728\u670d\u52a1\u5668\u7aef\u9a8c\u8bc1\u53c2\u6570 dubbo:service interface= org.apache.dubbo.examples.validation.api.ValidationService ref= validationService validation= true / \u9a8c\u8bc1\u5f02\u5e38\u4fe1\u606f import javax.validation.ConstraintViolationException; import javax.validation.ConstraintViolationException; import org.springframework.context.support.ClassPathXmlApplicationContext; import org.apache.dubbo.examples.validation.api.ValidationParameter; import org.apache.dubbo.examples.validation.api.ValidationService; import org.apache.dubbo.rpc.RpcException; public class ValidationConsumer { public static void main(String[] args) throws Exception { String config = ValidationConsumer.class.getPackage().getName().replace('.', '/') + /validation-consumer.xml ; ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(config); context.start(); ValidationService validationService = (ValidationService)context.getBean( validationService ); // Error try { parameter = new ValidationParameter(); validationService.save(parameter); System.out.println( Validation ERROR ); } catch (RpcException e) { // \u629b\u51fa\u7684\u662fRpcException ConstraintViolationException ve = (ConstraintViolationException) e.getCause(); // \u91cc\u9762\u5d4c\u4e86\u4e00\u4e2aConstraintViolationException Set ConstraintViolation ? violations = ve.getConstraintViolations(); // \u53ef\u4ee5\u62ff\u5230\u4e00\u4e2a\u9a8c\u8bc1\u9519\u8bef\u8be6\u7ec6\u4fe1\u606f\u7684\u96c6\u5408 System.out.println(violations); } } } [^1]: \u81ea 2.1.0 \u7248\u672c\u5f00\u59cb\u652f\u6301, \u5982\u4f55\u4f7f\u7528\u53ef\u4ee5\u53c2\u8003 dubbo \u9879\u76ee\u4e2d\u7684\u793a\u4f8b\u4ee3\u7801","title":"\u53c2\u6570\u9a8c\u8bc1"},{"location":"user/demos/parameter-validation/#_1","text":"\u53c2\u6570\u9a8c\u8bc1\u529f\u80fd [^1] \u662f\u57fa\u4e8e JSR303 \u5b9e\u73b0\u7684\uff0c\u7528\u6237\u53ea\u9700\u6807\u8bc6 JSR303 \u6807\u51c6\u7684\u9a8c\u8bc1 annotation\uff0c\u5e76\u901a\u8fc7\u58f0\u660e filter \u6765\u5b9e\u73b0\u9a8c\u8bc1 ^2 \u3002","title":"\u53c2\u6570\u9a8c\u8bc1"},{"location":"user/demos/parameter-validation/#maven","text":"dependency groupId javax.validation /groupId artifactId validation-api /artifactId version 1.0.0.GA /version /dependency dependency groupId org.hibernate /groupId artifactId hibernate-validator /artifactId version 4.2.0.Final /version /dependency","title":"Maven \u4f9d\u8d56"},{"location":"user/demos/parameter-validation/#_2","text":"","title":"\u793a\u4f8b"},{"location":"user/demos/parameter-validation/#_3","text":"import java.io.Serializable; import java.util.Date; import javax.validation.constraints.Future; import javax.validation.constraints.Max; import javax.validation.constraints.Min; import javax.validation.constraints.NotNull; import javax.validation.constraints.Past; import javax.validation.constraints.Pattern; import javax.validation.constraints.Size; public class ValidationParameter implements Serializable { private static final long serialVersionUID = 7158911668568000392L; @NotNull // \u4e0d\u5141\u8bb8\u4e3a\u7a7a @Size(min = 1, max = 20) // \u957f\u5ea6\u6216\u5927\u5c0f\u8303\u56f4 private String name; @NotNull(groups = ValidationService.Save.class) // \u4fdd\u5b58\u65f6\u4e0d\u5141\u8bb8\u4e3a\u7a7a\uff0c\u66f4\u65b0\u65f6\u5141\u8bb8\u4e3a\u7a7a \uff0c\u8868\u793a\u4e0d\u66f4\u65b0\u8be5\u5b57\u6bb5 @Pattern(regexp = ^\\\\s*\\\\w+(?:\\\\.{0,1}[\\\\w-]+)*@[a-zA-Z0-9]+(?:[-.][a-zA-Z0-9]+)*\\\\.[a-zA-Z]+\\\\s*$ ) private String email; @Min(18) // \u6700\u5c0f\u503c @Max(100) // \u6700\u5927\u503c private int age; @Past // \u5fc5\u987b\u4e3a\u4e00\u4e2a\u8fc7\u53bb\u7684\u65f6\u95f4 private Date loginDate; @Future // \u5fc5\u987b\u4e3a\u4e00\u4e2a\u672a\u6765\u7684\u65f6\u95f4 private Date expiryDate; public String getName() { return name; } public void setName(String name) { this.name = name; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public Date getLoginDate() { return loginDate; } public void setLoginDate(Date loginDate) { this.loginDate = loginDate; } public Date getExpiryDate() { return expiryDate; } public void setExpiryDate(Date expiryDate) { this.expiryDate = expiryDate; } }","title":"\u53c2\u6570\u6807\u6ce8\u793a\u4f8b"},{"location":"user/demos/parameter-validation/#_4","text":"public interface ValidationService { // \u7f3a\u7701\u53ef\u6309\u670d\u52a1\u63a5\u53e3\u533a\u5206\u9a8c\u8bc1\u573a\u666f\uff0c\u5982\uff1a@NotNull(groups = ValidationService.class) @interface Save{} // \u4e0e\u65b9\u6cd5\u540c\u540d\u63a5\u53e3\uff0c\u9996\u5b57\u6bcd\u5927\u5199\uff0c\u7528\u4e8e\u533a\u5206\u9a8c\u8bc1\u573a\u666f\uff0c\u5982\uff1a@NotNull(groups = ValidationService.Save.class)\uff0c\u53ef\u9009 void save(ValidationParameter parameter); void update(ValidationParameter parameter); }","title":"\u5206\u7ec4\u9a8c\u8bc1\u793a\u4f8b"},{"location":"user/demos/parameter-validation/#_5","text":"import javax.validation.GroupSequence; public interface ValidationService { @GroupSequence(Update.class) // \u540c\u65f6\u9a8c\u8bc1Update\u7ec4\u89c4\u5219 @interface Save{} void save(ValidationParameter parameter); @interface Update{} void update(ValidationParameter parameter); }","title":"\u5173\u8054\u9a8c\u8bc1\u793a\u4f8b"},{"location":"user/demos/parameter-validation/#_6","text":"import javax.validation.constraints.Min; import javax.validation.constraints.NotNull; public interface ValidationService { void save(@NotNull ValidationParameter parameter); // \u9a8c\u8bc1\u53c2\u6570\u4e0d\u4e3a\u7a7a void delete(@Min(1) int id); // \u76f4\u63a5\u5bf9\u57fa\u672c\u7c7b\u578b\u53c2\u6570\u9a8c\u8bc1 }","title":"\u53c2\u6570\u9a8c\u8bc1\u793a\u4f8b"},{"location":"user/demos/parameter-validation/#_7","text":"","title":"\u914d\u7f6e"},{"location":"user/demos/parameter-validation/#_8","text":"dubbo:reference id= validationService interface= org.apache.dubbo.examples.validation.api.ValidationService validation= true /","title":"\u5728\u5ba2\u6237\u7aef\u9a8c\u8bc1\u53c2\u6570"},{"location":"user/demos/parameter-validation/#_9","text":"dubbo:service interface= org.apache.dubbo.examples.validation.api.ValidationService ref= validationService validation= true /","title":"\u5728\u670d\u52a1\u5668\u7aef\u9a8c\u8bc1\u53c2\u6570"},{"location":"user/demos/parameter-validation/#_10","text":"import javax.validation.ConstraintViolationException; import javax.validation.ConstraintViolationException; import org.springframework.context.support.ClassPathXmlApplicationContext; import org.apache.dubbo.examples.validation.api.ValidationParameter; import org.apache.dubbo.examples.validation.api.ValidationService; import org.apache.dubbo.rpc.RpcException; public class ValidationConsumer { public static void main(String[] args) throws Exception { String config = ValidationConsumer.class.getPackage().getName().replace('.', '/') + /validation-consumer.xml ; ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(config); context.start(); ValidationService validationService = (ValidationService)context.getBean( validationService ); // Error try { parameter = new ValidationParameter(); validationService.save(parameter); System.out.println( Validation ERROR ); } catch (RpcException e) { // \u629b\u51fa\u7684\u662fRpcException ConstraintViolationException ve = (ConstraintViolationException) e.getCause(); // \u91cc\u9762\u5d4c\u4e86\u4e00\u4e2aConstraintViolationException Set ConstraintViolation ? violations = ve.getConstraintViolations(); // \u53ef\u4ee5\u62ff\u5230\u4e00\u4e2a\u9a8c\u8bc1\u9519\u8bef\u8be6\u7ec6\u4fe1\u606f\u7684\u96c6\u5408 System.out.println(violations); } } } [^1]: \u81ea 2.1.0 \u7248\u672c\u5f00\u59cb\u652f\u6301, \u5982\u4f55\u4f7f\u7528\u53ef\u4ee5\u53c2\u8003 dubbo \u9879\u76ee\u4e2d\u7684\u793a\u4f8b\u4ee3\u7801","title":"\u9a8c\u8bc1\u5f02\u5e38\u4fe1\u606f"},{"location":"user/demos/preflight-check/","text":"\u542f\u52a8\u65f6\u68c0\u67e5 Dubbo \u7f3a\u7701\u4f1a\u5728\u542f\u52a8\u65f6\u68c0\u67e5\u4f9d\u8d56\u7684\u670d\u52a1\u662f\u5426\u53ef\u7528\uff0c\u4e0d\u53ef\u7528\u65f6\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u963b\u6b62 Spring \u521d\u59cb\u5316\u5b8c\u6210\uff0c\u4ee5\u4fbf\u4e0a\u7ebf\u65f6\uff0c\u80fd\u53ca\u65e9\u53d1\u73b0\u95ee\u9898\uff0c\u9ed8\u8ba4 check=\"true\" \u3002 \u53ef\u4ee5\u901a\u8fc7 check=\"false\" \u5173\u95ed\u68c0\u67e5\uff0c\u6bd4\u5982\uff0c\u6d4b\u8bd5\u65f6\uff0c\u6709\u4e9b\u670d\u52a1\u4e0d\u5173\u5fc3\uff0c\u6216\u8005\u51fa\u73b0\u4e86\u5faa\u73af\u4f9d\u8d56\uff0c\u5fc5\u987b\u6709\u4e00\u65b9\u5148\u542f\u52a8\u3002 \u53e6\u5916\uff0c\u5982\u679c\u4f60\u7684 Spring \u5bb9\u5668\u662f\u61d2\u52a0\u8f7d\u7684\uff0c\u6216\u8005\u901a\u8fc7 API \u7f16\u7a0b\u5ef6\u8fdf\u5f15\u7528\u670d\u52a1\uff0c\u8bf7\u5173\u95ed check\uff0c\u5426\u5219\u670d\u52a1\u4e34\u65f6\u4e0d\u53ef\u7528\u65f6\uff0c\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u62ff\u5230 null \u5f15\u7528\uff0c\u5982\u679c check=\"false\" \uff0c\u603b\u662f\u4f1a\u8fd4\u56de\u5f15\u7528\uff0c\u5f53\u670d\u52a1\u6062\u590d\u65f6\uff0c\u80fd\u81ea\u52a8\u8fde\u4e0a\u3002 \u793a\u4f8b \u901a\u8fc7 spring \u914d\u7f6e\u6587\u4ef6 \u5173\u95ed\u67d0\u4e2a\u670d\u52a1\u7684\u542f\u52a8\u65f6\u68c0\u67e5 (\u6ca1\u6709\u63d0\u4f9b\u8005\u65f6\u62a5\u9519)\uff1a dubbo:reference interface= com.foo.BarService check= false / \u5173\u95ed\u6240\u6709\u670d\u52a1\u7684\u542f\u52a8\u65f6\u68c0\u67e5 (\u6ca1\u6709\u63d0\u4f9b\u8005\u65f6\u62a5\u9519)\uff1a dubbo:consumer check= false / \u5173\u95ed\u6ce8\u518c\u4e2d\u5fc3\u542f\u52a8\u65f6\u68c0\u67e5 (\u6ce8\u518c\u8ba2\u9605\u5931\u8d25\u65f6\u62a5\u9519)\uff1a dubbo:registry check= false / \u901a\u8fc7 dubbo.properties dubbo.reference.com.foo.BarService.check=false dubbo.reference.check=false dubbo.consumer.check=false dubbo.registry.check=false \u901a\u8fc7 -D \u53c2\u6570 java -Ddubbo.reference.com.foo.BarService.check=false java -Ddubbo.reference.check=false java -Ddubbo.consumer.check=false java -Ddubbo.registry.check=false \u914d\u7f6e\u7684\u542b\u4e49 dubbo.reference.check=false \uff0c\u5f3a\u5236\u6539\u53d8\u6240\u6709 reference \u7684 check \u503c\uff0c\u5c31\u7b97\u914d\u7f6e\u4e2d\u6709\u58f0\u660e\uff0c\u4e5f\u4f1a\u88ab\u8986\u76d6\u3002 dubbo.consumer.check=false \uff0c\u662f\u8bbe\u7f6e check \u7684\u7f3a\u7701\u503c\uff0c\u5982\u679c\u914d\u7f6e\u4e2d\u6709\u663e\u5f0f\u7684\u58f0\u660e\uff0c\u5982\uff1a dubbo:reference check=\"true\"/ \uff0c\u4e0d\u4f1a\u53d7\u5f71\u54cd\u3002 dubbo.registry.check=false \uff0c\u524d\u9762\u4e24\u4e2a\u90fd\u662f\u6307\u8ba2\u9605\u6210\u529f\uff0c\u4f46\u63d0\u4f9b\u8005\u5217\u8868\u662f\u5426\u4e3a\u7a7a\u662f\u5426\u62a5\u9519\uff0c\u5982\u679c\u6ce8\u518c\u8ba2\u9605\u5931\u8d25\u65f6\uff0c\u4e5f\u5141\u8bb8\u542f\u52a8\uff0c\u9700\u4f7f\u7528\u6b64\u9009\u9879\uff0c\u5c06\u5728\u540e\u53f0\u5b9a\u65f6\u91cd\u8bd5\u3002","title":"\u542f\u52a8\u65f6\u68c0\u67e5"},{"location":"user/demos/preflight-check/#_1","text":"Dubbo \u7f3a\u7701\u4f1a\u5728\u542f\u52a8\u65f6\u68c0\u67e5\u4f9d\u8d56\u7684\u670d\u52a1\u662f\u5426\u53ef\u7528\uff0c\u4e0d\u53ef\u7528\u65f6\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u963b\u6b62 Spring \u521d\u59cb\u5316\u5b8c\u6210\uff0c\u4ee5\u4fbf\u4e0a\u7ebf\u65f6\uff0c\u80fd\u53ca\u65e9\u53d1\u73b0\u95ee\u9898\uff0c\u9ed8\u8ba4 check=\"true\" \u3002 \u53ef\u4ee5\u901a\u8fc7 check=\"false\" \u5173\u95ed\u68c0\u67e5\uff0c\u6bd4\u5982\uff0c\u6d4b\u8bd5\u65f6\uff0c\u6709\u4e9b\u670d\u52a1\u4e0d\u5173\u5fc3\uff0c\u6216\u8005\u51fa\u73b0\u4e86\u5faa\u73af\u4f9d\u8d56\uff0c\u5fc5\u987b\u6709\u4e00\u65b9\u5148\u542f\u52a8\u3002 \u53e6\u5916\uff0c\u5982\u679c\u4f60\u7684 Spring \u5bb9\u5668\u662f\u61d2\u52a0\u8f7d\u7684\uff0c\u6216\u8005\u901a\u8fc7 API \u7f16\u7a0b\u5ef6\u8fdf\u5f15\u7528\u670d\u52a1\uff0c\u8bf7\u5173\u95ed check\uff0c\u5426\u5219\u670d\u52a1\u4e34\u65f6\u4e0d\u53ef\u7528\u65f6\uff0c\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u62ff\u5230 null \u5f15\u7528\uff0c\u5982\u679c check=\"false\" \uff0c\u603b\u662f\u4f1a\u8fd4\u56de\u5f15\u7528\uff0c\u5f53\u670d\u52a1\u6062\u590d\u65f6\uff0c\u80fd\u81ea\u52a8\u8fde\u4e0a\u3002","title":"\u542f\u52a8\u65f6\u68c0\u67e5"},{"location":"user/demos/preflight-check/#_2","text":"","title":"\u793a\u4f8b"},{"location":"user/demos/preflight-check/#spring","text":"\u5173\u95ed\u67d0\u4e2a\u670d\u52a1\u7684\u542f\u52a8\u65f6\u68c0\u67e5 (\u6ca1\u6709\u63d0\u4f9b\u8005\u65f6\u62a5\u9519)\uff1a dubbo:reference interface= com.foo.BarService check= false / \u5173\u95ed\u6240\u6709\u670d\u52a1\u7684\u542f\u52a8\u65f6\u68c0\u67e5 (\u6ca1\u6709\u63d0\u4f9b\u8005\u65f6\u62a5\u9519)\uff1a dubbo:consumer check= false / \u5173\u95ed\u6ce8\u518c\u4e2d\u5fc3\u542f\u52a8\u65f6\u68c0\u67e5 (\u6ce8\u518c\u8ba2\u9605\u5931\u8d25\u65f6\u62a5\u9519)\uff1a dubbo:registry check= false /","title":"\u901a\u8fc7 spring \u914d\u7f6e\u6587\u4ef6"},{"location":"user/demos/preflight-check/#dubboproperties","text":"dubbo.reference.com.foo.BarService.check=false dubbo.reference.check=false dubbo.consumer.check=false dubbo.registry.check=false","title":"\u901a\u8fc7 dubbo.properties"},{"location":"user/demos/preflight-check/#-d","text":"java -Ddubbo.reference.com.foo.BarService.check=false java -Ddubbo.reference.check=false java -Ddubbo.consumer.check=false java -Ddubbo.registry.check=false","title":"\u901a\u8fc7 -D \u53c2\u6570"},{"location":"user/demos/preflight-check/#_3","text":"dubbo.reference.check=false \uff0c\u5f3a\u5236\u6539\u53d8\u6240\u6709 reference \u7684 check \u503c\uff0c\u5c31\u7b97\u914d\u7f6e\u4e2d\u6709\u58f0\u660e\uff0c\u4e5f\u4f1a\u88ab\u8986\u76d6\u3002 dubbo.consumer.check=false \uff0c\u662f\u8bbe\u7f6e check \u7684\u7f3a\u7701\u503c\uff0c\u5982\u679c\u914d\u7f6e\u4e2d\u6709\u663e\u5f0f\u7684\u58f0\u660e\uff0c\u5982\uff1a dubbo:reference check=\"true\"/ \uff0c\u4e0d\u4f1a\u53d7\u5f71\u54cd\u3002 dubbo.registry.check=false \uff0c\u524d\u9762\u4e24\u4e2a\u90fd\u662f\u6307\u8ba2\u9605\u6210\u529f\uff0c\u4f46\u63d0\u4f9b\u8005\u5217\u8868\u662f\u5426\u4e3a\u7a7a\u662f\u5426\u62a5\u9519\uff0c\u5982\u679c\u6ce8\u518c\u8ba2\u9605\u5931\u8d25\u65f6\uff0c\u4e5f\u5141\u8bb8\u542f\u52a8\uff0c\u9700\u4f7f\u7528\u6b64\u9009\u9879\uff0c\u5c06\u5728\u540e\u53f0\u5b9a\u65f6\u91cd\u8bd5\u3002","title":"\u914d\u7f6e\u7684\u542b\u4e49"},{"location":"user/demos/protobuf-idl/","text":"\u4f7f\u7528 IDL \u5b9a\u4e49\u670d\u52a1 \u5f53\u524d Dubbo \u7684\u670d\u52a1\u5b9a\u4e49\u548c\u5177\u4f53\u7684\u7f16\u7a0b\u8bed\u8a00\u7ed1\u5b9a\uff0c\u6ca1\u6709\u63d0\u4f9b\u4e00\u79cd\u8bed\u8a00\u4e2d\u7acb\u7684\u670d\u52a1\u63cf\u8ff0\u683c\u5f0f\uff0c\u6bd4\u5982 Java \u5c31\u662f\u5b9a\u4e49 Interface \u63a5\u53e3\uff0c\u5230\u4e86\u5176\u4ed6\u8bed\u8a00\u53c8\u5f97\u91cd\u65b0\u4ee5\u53e6\u5916\u7684\u683c\u5f0f\u5b9a\u4e49\u4e00\u904d\u3002 2.7.5 \u7248\u672c\u901a\u8fc7\u652f\u6301 Protobuf IDL \u5b9e\u73b0\u4e86\u8bed\u8a00\u4e2d\u7acb\u7684\u670d\u52a1\u5b9a\u4e49\u3002 \u65e5\u540e\uff0c\u4e0d\u8bba\u6211\u4eec\u4f7f\u7528\u4ec0\u4e48\u8bed\u8a00\u7248\u672c\u6765\u5f00\u53d1 Dubbo \u670d\u52a1\uff0c\u90fd\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 IDL \u5b9a\u4e49\u5982\u4e0b\u670d\u52a1\uff0c\u5177\u4f53\u8bf7 \u53c2\u89c1\u793a\u4f8b syntax = proto3 ; option java_multiple_files = true; option java_package = org.apache.dubbo.demo ; option java_outer_classname = DemoServiceProto ; option objc_class_prefix = DEMOSRV ; package demoservice; // The demo service definition. service DemoService { rpc SayHello (HelloRequest) returns (HelloReply) {} } // The request message containing the user's name. message HelloRequest { string name = 1; } // The response message containing the greetings message HelloReply { string message = 1; }","title":"\u4f7f\u7528 IDL \u5b9a\u4e49\u670d\u52a1"},{"location":"user/demos/protobuf-idl/#idl","text":"\u5f53\u524d Dubbo \u7684\u670d\u52a1\u5b9a\u4e49\u548c\u5177\u4f53\u7684\u7f16\u7a0b\u8bed\u8a00\u7ed1\u5b9a\uff0c\u6ca1\u6709\u63d0\u4f9b\u4e00\u79cd\u8bed\u8a00\u4e2d\u7acb\u7684\u670d\u52a1\u63cf\u8ff0\u683c\u5f0f\uff0c\u6bd4\u5982 Java \u5c31\u662f\u5b9a\u4e49 Interface \u63a5\u53e3\uff0c\u5230\u4e86\u5176\u4ed6\u8bed\u8a00\u53c8\u5f97\u91cd\u65b0\u4ee5\u53e6\u5916\u7684\u683c\u5f0f\u5b9a\u4e49\u4e00\u904d\u3002 2.7.5 \u7248\u672c\u901a\u8fc7\u652f\u6301 Protobuf IDL \u5b9e\u73b0\u4e86\u8bed\u8a00\u4e2d\u7acb\u7684\u670d\u52a1\u5b9a\u4e49\u3002 \u65e5\u540e\uff0c\u4e0d\u8bba\u6211\u4eec\u4f7f\u7528\u4ec0\u4e48\u8bed\u8a00\u7248\u672c\u6765\u5f00\u53d1 Dubbo \u670d\u52a1\uff0c\u90fd\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 IDL \u5b9a\u4e49\u5982\u4e0b\u670d\u52a1\uff0c\u5177\u4f53\u8bf7 \u53c2\u89c1\u793a\u4f8b syntax = proto3 ; option java_multiple_files = true; option java_package = org.apache.dubbo.demo ; option java_outer_classname = DemoServiceProto ; option objc_class_prefix = DEMOSRV ; package demoservice; // The demo service definition. service DemoService { rpc SayHello (HelloRequest) returns (HelloReply) {} } // The request message containing the user's name. message HelloRequest { string name = 1; } // The response message containing the greetings message HelloReply { string message = 1; }","title":"\u4f7f\u7528 IDL \u5b9a\u4e49\u670d\u52a1"},{"location":"user/demos/reference-config-cache/","text":"ReferenceConfig \u7f13\u5b58 ReferenceConfig \u5b9e\u4f8b\u5f88\u91cd\uff0c\u5c01\u88c5\u4e86\u4e0e\u6ce8\u518c\u4e2d\u5fc3\u7684\u8fde\u63a5\u4ee5\u53ca\u4e0e\u63d0\u4f9b\u8005\u7684\u8fde\u63a5\uff0c\u9700\u8981\u7f13\u5b58\u3002\u5426\u5219\u91cd\u590d\u751f\u6210 ReferenceConfig \u53ef\u80fd\u9020\u6210\u6027\u80fd\u95ee\u9898\u5e76\u4e14\u4f1a\u6709\u5185\u5b58\u548c\u8fde\u63a5\u6cc4\u6f0f\u3002\u5728 API \u65b9\u5f0f\u7f16\u7a0b\u65f6\uff0c\u5bb9\u6613\u5ffd\u7565\u6b64\u95ee\u9898\u3002 \u56e0\u6b64\uff0c\u81ea 2.4.0 \u7248\u672c\u5f00\u59cb\uff0c dubbo \u63d0\u4f9b\u4e86\u7b80\u5355\u7684\u5de5\u5177\u7c7b ReferenceConfigCache \u7528\u4e8e\u7f13\u5b58 ReferenceConfig \u5b9e\u4f8b\u3002 \u4f7f\u7528\u65b9\u5f0f\u5982\u4e0b\uff1a ReferenceConfig XxxService reference = new ReferenceConfig XxxService (); reference.setInterface(XxxService.class); reference.setVersion( 1.0.0 ); ...... ReferenceConfigCache cache = ReferenceConfigCache.getCache(); // cache.get\u65b9\u6cd5\u4e2d\u4f1a\u7f13\u5b58 Reference\u5bf9\u8c61\uff0c\u5e76\u4e14\u8c03\u7528ReferenceConfig.get\u65b9\u6cd5\u542f\u52a8ReferenceConfig XxxService xxxService = cache.get(reference); // \u6ce8\u610f\uff01 Cache\u4f1a\u6301\u6709ReferenceConfig\uff0c\u4e0d\u8981\u5728\u5916\u90e8\u518d\u8c03\u7528ReferenceConfig\u7684destroy\u65b9\u6cd5\uff0c\u5bfc\u81f4Cache\u5185\u7684ReferenceConfig\u5931\u6548\uff01 // \u4f7f\u7528xxxService\u5bf9\u8c61 xxxService.sayHello(); \u6d88\u9664 Cache \u4e2d\u7684 ReferenceConfig \uff0c\u5c06\u9500\u6bc1 ReferenceConfig \u5e76\u91ca\u653e\u5bf9\u5e94\u7684\u8d44\u6e90\u3002 ReferenceConfigCache cache = ReferenceConfigCache.getCache(); cache.destroy(reference); \u7f3a\u7701 ReferenceConfigCache \u628a\u76f8\u540c\u670d\u52a1 Group\u3001\u63a5\u53e3\u3001\u7248\u672c\u7684 ReferenceConfig \u8ba4\u4e3a\u662f\u76f8\u540c\uff0c\u7f13\u5b58\u4e00\u4efd\u3002\u5373\u4ee5\u670d\u52a1 Group\u3001\u63a5\u53e3\u3001\u7248\u672c\u4e3a\u7f13\u5b58\u7684 Key\u3002 \u53ef\u4ee5\u4fee\u6539\u8fd9\u4e2a\u7b56\u7565\uff0c\u5728 ReferenceConfigCache.getCache \u65f6\uff0c\u4f20\u4e00\u4e2a KeyGenerator \u3002\u8be6\u89c1 ReferenceConfigCache \u7c7b\u7684\u65b9\u6cd5\u3002 KeyGenerator keyGenerator = new ... ReferenceConfigCache cache = ReferenceConfigCache.getCache(keyGenerator );","title":"ReferenceConfig \u7f13\u5b58"},{"location":"user/demos/reference-config-cache/#referenceconfig","text":"ReferenceConfig \u5b9e\u4f8b\u5f88\u91cd\uff0c\u5c01\u88c5\u4e86\u4e0e\u6ce8\u518c\u4e2d\u5fc3\u7684\u8fde\u63a5\u4ee5\u53ca\u4e0e\u63d0\u4f9b\u8005\u7684\u8fde\u63a5\uff0c\u9700\u8981\u7f13\u5b58\u3002\u5426\u5219\u91cd\u590d\u751f\u6210 ReferenceConfig \u53ef\u80fd\u9020\u6210\u6027\u80fd\u95ee\u9898\u5e76\u4e14\u4f1a\u6709\u5185\u5b58\u548c\u8fde\u63a5\u6cc4\u6f0f\u3002\u5728 API \u65b9\u5f0f\u7f16\u7a0b\u65f6\uff0c\u5bb9\u6613\u5ffd\u7565\u6b64\u95ee\u9898\u3002 \u56e0\u6b64\uff0c\u81ea 2.4.0 \u7248\u672c\u5f00\u59cb\uff0c dubbo \u63d0\u4f9b\u4e86\u7b80\u5355\u7684\u5de5\u5177\u7c7b ReferenceConfigCache \u7528\u4e8e\u7f13\u5b58 ReferenceConfig \u5b9e\u4f8b\u3002 \u4f7f\u7528\u65b9\u5f0f\u5982\u4e0b\uff1a ReferenceConfig XxxService reference = new ReferenceConfig XxxService (); reference.setInterface(XxxService.class); reference.setVersion( 1.0.0 ); ...... ReferenceConfigCache cache = ReferenceConfigCache.getCache(); // cache.get\u65b9\u6cd5\u4e2d\u4f1a\u7f13\u5b58 Reference\u5bf9\u8c61\uff0c\u5e76\u4e14\u8c03\u7528ReferenceConfig.get\u65b9\u6cd5\u542f\u52a8ReferenceConfig XxxService xxxService = cache.get(reference); // \u6ce8\u610f\uff01 Cache\u4f1a\u6301\u6709ReferenceConfig\uff0c\u4e0d\u8981\u5728\u5916\u90e8\u518d\u8c03\u7528ReferenceConfig\u7684destroy\u65b9\u6cd5\uff0c\u5bfc\u81f4Cache\u5185\u7684ReferenceConfig\u5931\u6548\uff01 // \u4f7f\u7528xxxService\u5bf9\u8c61 xxxService.sayHello(); \u6d88\u9664 Cache \u4e2d\u7684 ReferenceConfig \uff0c\u5c06\u9500\u6bc1 ReferenceConfig \u5e76\u91ca\u653e\u5bf9\u5e94\u7684\u8d44\u6e90\u3002 ReferenceConfigCache cache = ReferenceConfigCache.getCache(); cache.destroy(reference); \u7f3a\u7701 ReferenceConfigCache \u628a\u76f8\u540c\u670d\u52a1 Group\u3001\u63a5\u53e3\u3001\u7248\u672c\u7684 ReferenceConfig \u8ba4\u4e3a\u662f\u76f8\u540c\uff0c\u7f13\u5b58\u4e00\u4efd\u3002\u5373\u4ee5\u670d\u52a1 Group\u3001\u63a5\u53e3\u3001\u7248\u672c\u4e3a\u7f13\u5b58\u7684 Key\u3002 \u53ef\u4ee5\u4fee\u6539\u8fd9\u4e2a\u7b56\u7565\uff0c\u5728 ReferenceConfigCache.getCache \u65f6\uff0c\u4f20\u4e00\u4e2a KeyGenerator \u3002\u8be6\u89c1 ReferenceConfigCache \u7c7b\u7684\u65b9\u6cd5\u3002 KeyGenerator keyGenerator = new ... ReferenceConfigCache cache = ReferenceConfigCache.getCache(keyGenerator );","title":"ReferenceConfig \u7f13\u5b58"},{"location":"user/demos/registry-only/","text":"\u53ea\u6ce8\u518c \u5982\u679c\u6709\u4e24\u4e2a\u955c\u50cf\u73af\u5883\uff0c\u4e24\u4e2a\u6ce8\u518c\u4e2d\u5fc3\uff0c\u6709\u4e00\u4e2a\u670d\u52a1\u53ea\u5728\u5176\u4e2d\u4e00\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u6709\u90e8\u7f72\uff0c\u53e6\u4e00\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u8fd8\u6ca1\u6765\u5f97\u53ca\u90e8\u7f72\uff0c\u800c\u4e24\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u7684\u5176\u5b83\u5e94\u7528\u90fd\u9700\u8981\u4f9d\u8d56\u6b64\u670d\u52a1\u3002\u8fd9\u4e2a\u65f6\u5019\uff0c\u53ef\u4ee5\u8ba9\u670d\u52a1\u63d0\u4f9b\u8005\u65b9\u53ea\u6ce8\u518c\u670d\u52a1\u5230\u53e6\u4e00\u6ce8\u518c\u4e2d\u5fc3\uff0c\u800c\u4e0d\u4ece\u53e6\u4e00\u6ce8\u518c\u4e2d\u5fc3\u8ba2\u9605\u670d\u52a1\u3002 \u7981\u7528\u8ba2\u9605\u914d\u7f6e dubbo:registry id= hzRegistry address= 10.20.153.10:9090 / dubbo:registry id= qdRegistry address= 10.20.141.150:9090 subscribe= false / \u6216\u8005 dubbo:registry id= hzRegistry address= 10.20.153.10:9090 / dubbo:registry id= qdRegistry address= 10.20.141.150:9090?subscribe=false /","title":"\u53ea\u6ce8\u518c"},{"location":"user/demos/registry-only/#_1","text":"\u5982\u679c\u6709\u4e24\u4e2a\u955c\u50cf\u73af\u5883\uff0c\u4e24\u4e2a\u6ce8\u518c\u4e2d\u5fc3\uff0c\u6709\u4e00\u4e2a\u670d\u52a1\u53ea\u5728\u5176\u4e2d\u4e00\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u6709\u90e8\u7f72\uff0c\u53e6\u4e00\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u8fd8\u6ca1\u6765\u5f97\u53ca\u90e8\u7f72\uff0c\u800c\u4e24\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u7684\u5176\u5b83\u5e94\u7528\u90fd\u9700\u8981\u4f9d\u8d56\u6b64\u670d\u52a1\u3002\u8fd9\u4e2a\u65f6\u5019\uff0c\u53ef\u4ee5\u8ba9\u670d\u52a1\u63d0\u4f9b\u8005\u65b9\u53ea\u6ce8\u518c\u670d\u52a1\u5230\u53e6\u4e00\u6ce8\u518c\u4e2d\u5fc3\uff0c\u800c\u4e0d\u4ece\u53e6\u4e00\u6ce8\u518c\u4e2d\u5fc3\u8ba2\u9605\u670d\u52a1\u3002 \u7981\u7528\u8ba2\u9605\u914d\u7f6e dubbo:registry id= hzRegistry address= 10.20.153.10:9090 / dubbo:registry id= qdRegistry address= 10.20.141.150:9090 subscribe= false / \u6216\u8005 dubbo:registry id= hzRegistry address= 10.20.153.10:9090 / dubbo:registry id= qdRegistry address= 10.20.141.150:9090?subscribe=false /","title":"\u53ea\u6ce8\u518c"},{"location":"user/demos/result-cache/","text":"\u7ed3\u679c\u7f13\u5b58 \u7ed3\u679c\u7f13\u5b58 [^1]\uff0c\u7528\u4e8e\u52a0\u901f\u70ed\u95e8\u6570\u636e\u7684\u8bbf\u95ee\u901f\u5ea6\uff0cDubbo \u63d0\u4f9b\u58f0\u660e\u5f0f\u7f13\u5b58\uff0c\u4ee5\u51cf\u5c11\u7528\u6237\u52a0\u7f13\u5b58\u7684\u5de5\u4f5c\u91cf ^2 \u3002 \u7f13\u5b58\u7c7b\u578b lru \u57fa\u4e8e\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u539f\u5219\u5220\u9664\u591a\u4f59\u7f13\u5b58\uff0c\u4fdd\u6301\u6700\u70ed\u7684\u6570\u636e\u88ab\u7f13\u5b58\u3002 threadlocal \u5f53\u524d\u7ebf\u7a0b\u7f13\u5b58\uff0c\u6bd4\u5982\u4e00\u4e2a\u9875\u9762\u6e32\u67d3\uff0c\u7528\u5230\u5f88\u591a portal\uff0c\u6bcf\u4e2a portal \u90fd\u8981\u53bb\u67e5\u7528\u6237\u4fe1\u606f\uff0c\u901a\u8fc7\u7ebf\u7a0b\u7f13\u5b58\uff0c\u53ef\u4ee5\u51cf\u5c11\u8fd9\u79cd\u591a\u4f59\u8bbf\u95ee\u3002 jcache \u4e0e JSR107 \u96c6\u6210\uff0c\u53ef\u4ee5\u6865\u63a5\u5404\u79cd\u7f13\u5b58\u5b9e\u73b0\u3002 \u7f13\u5b58\u7c7b\u578b\u53ef\u6269\u5c55\uff0c\u53c2\u89c1\uff1a \u7f13\u5b58\u6269\u5c55 \u914d\u7f6e dubbo:reference interface= com.foo.BarService cache= lru / \u6216\uff1a dubbo:reference interface= com.foo.BarService dubbo:method name= findBar cache= lru / /dubbo:reference [^1]: 2.1.0 \u4ee5\u4e0a\u7248\u672c\u652f\u6301","title":"\u7ed3\u679c\u7f13\u5b58"},{"location":"user/demos/result-cache/#_1","text":"\u7ed3\u679c\u7f13\u5b58 [^1]\uff0c\u7528\u4e8e\u52a0\u901f\u70ed\u95e8\u6570\u636e\u7684\u8bbf\u95ee\u901f\u5ea6\uff0cDubbo \u63d0\u4f9b\u58f0\u660e\u5f0f\u7f13\u5b58\uff0c\u4ee5\u51cf\u5c11\u7528\u6237\u52a0\u7f13\u5b58\u7684\u5de5\u4f5c\u91cf ^2 \u3002","title":"\u7ed3\u679c\u7f13\u5b58"},{"location":"user/demos/result-cache/#_2","text":"lru \u57fa\u4e8e\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u539f\u5219\u5220\u9664\u591a\u4f59\u7f13\u5b58\uff0c\u4fdd\u6301\u6700\u70ed\u7684\u6570\u636e\u88ab\u7f13\u5b58\u3002 threadlocal \u5f53\u524d\u7ebf\u7a0b\u7f13\u5b58\uff0c\u6bd4\u5982\u4e00\u4e2a\u9875\u9762\u6e32\u67d3\uff0c\u7528\u5230\u5f88\u591a portal\uff0c\u6bcf\u4e2a portal \u90fd\u8981\u53bb\u67e5\u7528\u6237\u4fe1\u606f\uff0c\u901a\u8fc7\u7ebf\u7a0b\u7f13\u5b58\uff0c\u53ef\u4ee5\u51cf\u5c11\u8fd9\u79cd\u591a\u4f59\u8bbf\u95ee\u3002 jcache \u4e0e JSR107 \u96c6\u6210\uff0c\u53ef\u4ee5\u6865\u63a5\u5404\u79cd\u7f13\u5b58\u5b9e\u73b0\u3002 \u7f13\u5b58\u7c7b\u578b\u53ef\u6269\u5c55\uff0c\u53c2\u89c1\uff1a \u7f13\u5b58\u6269\u5c55","title":"\u7f13\u5b58\u7c7b\u578b"},{"location":"user/demos/result-cache/#_3","text":"dubbo:reference interface= com.foo.BarService cache= lru / \u6216\uff1a dubbo:reference interface= com.foo.BarService dubbo:method name= findBar cache= lru / /dubbo:reference [^1]: 2.1.0 \u4ee5\u4e0a\u7248\u672c\u652f\u6301","title":"\u914d\u7f6e"},{"location":"user/demos/routing-rule-deprecated/","text":"\u8def\u7531\u89c4\u5219 \u8def\u7531\u89c4\u5219 [^1] \u51b3\u5b9a\u4e00\u6b21 dubbo \u670d\u52a1\u8c03\u7528\u7684\u76ee\u6807\u670d\u52a1\u5668\uff0c\u5206\u4e3a\u6761\u4ef6\u8def\u7531\u89c4\u5219\u548c\u811a\u672c\u8def\u7531\u89c4\u5219\uff0c\u5e76\u4e14\u652f\u6301\u53ef\u6269\u5c55 ^2 \u3002 \u5199\u5165\u8def\u7531\u89c4\u5219 \u5411\u6ce8\u518c\u4e2d\u5fc3\u5199\u5165\u8def\u7531\u89c4\u5219\u7684\u64cd\u4f5c\u901a\u5e38\u7531\u76d1\u63a7\u4e2d\u5fc3\u6216\u6cbb\u7406\u4e2d\u5fc3\u7684\u9875\u9762\u5b8c\u6210 RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension(); Registry registry = registryFactory.getRegistry(URL.valueOf( zookeeper://10.20.153.10:2181 )); registry.register(URL.valueOf( route://0.0.0.0/com.foo.BarService?category=routers dynamic=false rule= + URL.encode( host = 10.20.153.10 = host = 10.20.153.11 ))); \u5176\u4e2d\uff1a route:// \u8868\u793a\u8def\u7531\u89c4\u5219\u7684\u7c7b\u578b\uff0c\u652f\u6301\u6761\u4ef6\u8def\u7531\u89c4\u5219\u548c\u811a\u672c\u8def\u7531\u89c4\u5219\uff0c\u53ef\u6269\u5c55\uff0c \u5fc5\u586b \u3002 0.0.0.0 \u8868\u793a\u5bf9\u6240\u6709 IP \u5730\u5740\u751f\u6548\uff0c\u5982\u679c\u53ea\u60f3\u5bf9\u67d0\u4e2a IP \u7684\u751f\u6548\uff0c\u8bf7\u586b\u5165\u5177\u4f53 IP\uff0c \u5fc5\u586b \u3002 com.foo.BarService \u8868\u793a\u53ea\u5bf9\u6307\u5b9a\u670d\u52a1\u751f\u6548\uff0c \u5fc5\u586b \u3002 group=foo \u5bf9\u6307\u5b9a\u670d\u52a1\u7684\u6307\u5b9agroup\u751f\u6548\uff0c\u4e0d\u586b\u8868\u793a\u5bf9\u672a\u914d\u7f6egroup\u7684\u6307\u5b9a\u670d\u52a1\u751f\u6548 version=1.0 \u5bf9\u6307\u5b9a\u670d\u52a1\u7684\u6307\u5b9aversion\u751f\u6548\uff0c\u4e0d\u586b\u8868\u793a\u5bf9\u672a\u914d\u7f6eversion\u7684\u6307\u5b9a\u670d\u52a1\u751f\u6548 category=routers \u8868\u793a\u8be5\u6570\u636e\u4e3a\u52a8\u6001\u914d\u7f6e\u7c7b\u578b\uff0c \u5fc5\u586b \u3002 dynamic=false \u8868\u793a\u8be5\u6570\u636e\u4e3a\u6301\u4e45\u6570\u636e\uff0c\u5f53\u6ce8\u518c\u65b9\u9000\u51fa\u65f6\uff0c\u6570\u636e\u4f9d\u7136\u4fdd\u5b58\u5728\u6ce8\u518c\u4e2d\u5fc3\uff0c \u5fc5\u586b \u3002 enabled=true \u8986\u76d6\u89c4\u5219\u662f\u5426\u751f\u6548\uff0c\u53ef\u4e0d\u586b\uff0c\u7f3a\u7701\u751f\u6548\u3002 force=false \u5f53\u8def\u7531\u7ed3\u679c\u4e3a\u7a7a\u65f6\uff0c\u662f\u5426\u5f3a\u5236\u6267\u884c\uff0c\u5982\u679c\u4e0d\u5f3a\u5236\u6267\u884c\uff0c\u8def\u7531\u7ed3\u679c\u4e3a\u7a7a\u7684\u8def\u7531\u89c4\u5219\u5c06\u81ea\u52a8\u5931\u6548\uff0c\u53ef\u4e0d\u586b\uff0c\u7f3a\u7701\u4e3a false \u3002 runtime=false \u662f\u5426\u5728\u6bcf\u6b21\u8c03\u7528\u65f6\u6267\u884c\u8def\u7531\u89c4\u5219\uff0c\u5426\u5219\u53ea\u5728\u63d0\u4f9b\u8005\u5730\u5740\u5217\u8868\u53d8\u66f4\u65f6\u9884\u5148\u6267\u884c\u5e76\u7f13\u5b58\u7ed3\u679c\uff0c\u8c03\u7528\u65f6\u76f4\u63a5\u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6\u8def\u7531\u7ed3\u679c\u3002\u5982\u679c\u7528\u4e86\u53c2\u6570\u8def\u7531\uff0c\u5fc5\u987b\u8bbe\u4e3a true \uff0c\u9700\u8981\u6ce8\u610f\u8bbe\u7f6e\u4f1a\u5f71\u54cd\u8c03\u7528\u7684\u6027\u80fd\uff0c\u53ef\u4e0d\u586b\uff0c\u7f3a\u7701\u4e3a false \u3002 priority=1 \u8def\u7531\u89c4\u5219\u7684\u4f18\u5148\u7ea7\uff0c\u7528\u4e8e\u6392\u5e8f\uff0c\u4f18\u5148\u7ea7\u8d8a\u5927\u8d8a\u9760\u524d\u6267\u884c\uff0c\u53ef\u4e0d\u586b\uff0c\u7f3a\u7701\u4e3a 0 \u3002 rule=URL.encode(\"host = 10.20.153.10 = host = 10.20.153.11\") \u8868\u793a\u8def\u7531\u89c4\u5219\u7684\u5185\u5bb9\uff0c \u5fc5\u586b \u3002 \u6761\u4ef6\u8def\u7531\u89c4\u5219 \u57fa\u4e8e\u6761\u4ef6\u8868\u8fbe\u5f0f\u7684\u8def\u7531\u89c4\u5219\uff0c\u5982\uff1a host = 10.20.153.10 = host = 10.20.153.11 \u89c4\u5219\uff1a = \u4e4b\u524d\u7684\u4e3a\u6d88\u8d39\u8005\u5339\u914d\u6761\u4ef6\uff0c\u6240\u6709\u53c2\u6570\u548c\u6d88\u8d39\u8005\u7684 URL \u8fdb\u884c\u5bf9\u6bd4\uff0c\u5f53\u6d88\u8d39\u8005\u6ee1\u8db3\u5339\u914d\u6761\u4ef6\u65f6\uff0c\u5bf9\u8be5\u6d88\u8d39\u8005\u6267\u884c\u540e\u9762\u7684\u8fc7\u6ee4\u89c4\u5219\u3002 = \u4e4b\u540e\u4e3a\u63d0\u4f9b\u8005\u5730\u5740\u5217\u8868\u7684\u8fc7\u6ee4\u6761\u4ef6\uff0c\u6240\u6709\u53c2\u6570\u548c\u63d0\u4f9b\u8005\u7684 URL \u8fdb\u884c\u5bf9\u6bd4\uff0c\u6d88\u8d39\u8005\u6700\u7ec8\u53ea\u62ff\u5230\u8fc7\u6ee4\u540e\u7684\u5730\u5740\u5217\u8868\u3002 \u5982\u679c\u5339\u914d\u6761\u4ef6\u4e3a\u7a7a\uff0c\u8868\u793a\u5bf9\u6240\u6709\u6d88\u8d39\u65b9\u5e94\u7528\uff0c\u5982\uff1a = host != 10.20.153.11 \u5982\u679c\u8fc7\u6ee4\u6761\u4ef6\u4e3a\u7a7a\uff0c\u8868\u793a\u7981\u6b62\u8bbf\u95ee\uff0c\u5982\uff1a host = 10.20.153.10 = \u8868\u8fbe\u5f0f\uff1a \u53c2\u6570\u652f\u6301\uff1a \u670d\u52a1\u8c03\u7528\u4fe1\u606f\uff0c\u5982\uff1amethod, argument \u7b49\uff0c\u6682\u4e0d\u652f\u6301\u53c2\u6570\u8def\u7531 URL \u672c\u8eab\u7684\u5b57\u6bb5\uff0c\u5982\uff1aprotocol, host, port \u7b49 \u4ee5\u53ca URL \u4e0a\u7684\u6240\u6709\u53c2\u6570\uff0c\u5982\uff1aapplication, organization \u7b49 \u6761\u4ef6\u652f\u6301\uff1a \u7b49\u53f7 = \u8868\u793a\"\u5339\u914d\"\uff0c\u5982\uff1a host = 10.20.153.10 \u4e0d\u7b49\u53f7 != \u8868\u793a\"\u4e0d\u5339\u914d\"\uff0c\u5982\uff1a host != 10.20.153.10 \u503c\u652f\u6301\uff1a \u4ee5\u9017\u53f7 , \u5206\u9694\u591a\u4e2a\u503c\uff0c\u5982\uff1a host != 10.20.153.10,10.20.153.11 \u4ee5\u661f\u53f7 * \u7ed3\u5c3e\uff0c\u8868\u793a\u901a\u914d\uff0c\u5982\uff1a host != 10.20.* \u4ee5\u7f8e\u5143\u7b26 $ \u5f00\u5934\uff0c\u8868\u793a\u5f15\u7528\u6d88\u8d39\u8005\u53c2\u6570\uff0c\u5982\uff1a host = $host \u793a\u4f8b\uff1a \u6392\u9664\u9884\u53d1\u5e03\u673a\uff1a = host != 172.22.3.91 1. \u767d\u540d\u5355 ^3 \uff1a host != 10.20.153.10,10.20.153.11 = 2. \u9ed1\u540d\u5355\uff1a host = 10.20.153.10,10.20.153.11 = 3. \u670d\u52a1\u5bc4\u5bbf\u5728\u5e94\u7528\u4e0a\uff0c\u53ea\u66b4\u9732\u4e00\u90e8\u5206\u7684\u673a\u5668\uff0c\u9632\u6b62\u6574\u4e2a\u96c6\u7fa4\u6302\u6389\uff1a = host = 172.22.3.1*,172.22.3.2* 4. \u4e3a\u91cd\u8981\u5e94\u7528\u63d0\u4f9b\u989d\u5916\u7684\u673a\u5668\uff1a application != kylin = host != 172.22.3.95,172.22.3.96 5. \u8bfb\u5199\u5206\u79bb\uff1a method = find*,list*,get*,is* = host = 172.22.3.94,172.22.3.95,172.22.3.96 method != find*,list*,get*,is* = host = 172.22.3.97,172.22.3.98 \u524d\u540e\u53f0\u5206\u79bb\uff1a application = bops = host = 172.22.3.91,172.22.3.92,172.22.3.93 application != bops = host = 172.22.3.94,172.22.3.95,172.22.3.96 \u9694\u79bb\u4e0d\u540c\u673a\u623f\u7f51\u6bb5\uff1a host != 172.22.3.* = host != 172.22.3.* \u63d0\u4f9b\u8005\u4e0e\u6d88\u8d39\u8005\u90e8\u7f72\u5728\u540c\u96c6\u7fa4\u5185\uff0c\u672c\u673a\u53ea\u8bbf\u95ee\u672c\u673a\u7684\u670d\u52a1\uff1a = host = $host \u811a\u672c\u8def\u7531\u89c4\u5219 \u811a\u672c\u8def\u7531\u89c4\u5219 ^4 \u652f\u6301 JDK \u811a\u672c\u5f15\u64ce\u7684\u6240\u6709\u811a\u672c\uff0c\u6bd4\u5982\uff1ajavascript, jruby, groovy \u7b49\uff0c\u901a\u8fc7 type=javascript \u53c2\u6570\u8bbe\u7f6e\u811a\u672c\u7c7b\u578b\uff0c\u7f3a\u7701\u4e3a javascript\u3002 script://0.0.0.0/com.foo.BarService?category=routers dynamic=false rule= + URL.encode( \uff08function route(invokers) { ... } (invokers)\uff09 ) \u57fa\u4e8e\u811a\u672c\u5f15\u64ce\u7684\u8def\u7531\u89c4\u5219\uff0c\u5982\uff1a \uff08function route(invokers) { var result = new java.util.ArrayList(invokers.size()); for (i = 0; i invokers.size(); i ++) { if ( 10.20.153.10 .equals(invokers.get(i).getUrl().getHost())) { result.add(invokers.get(i)); } } return result; } (invokers)\uff09; // \u8868\u793a\u7acb\u5373\u6267\u884c\u65b9\u6cd5 \u6807\u7b7e\u8def\u7531\u89c4\u5219 \u6807\u7b7e\u8def\u7531\u89c4\u5219 [^5] \uff0c\u5f53\u5e94\u7528\u9009\u62e9\u88c5\u914d\u6807\u7b7e\u8def\u7531(TagRouter)\u4e4b\u540e\uff0c\u4e00\u6b21 dubbo \u8c03\u7528\u80fd\u591f\u6839\u636e\u8bf7\u6c42\u643a\u5e26\u7684 tag \u6807\u7b7e\u667a\u80fd\u5730\u9009\u62e9\u5bf9\u5e94 tag \u7684\u670d\u52a1\u63d0\u4f9b\u8005\u8fdb\u884c\u8c03\u7528\u3002 \u670d\u52a1\u63d0\u4f9b\u8005 \u7ed9\u5e94\u7528\u88c5\u914d\u6807\u7b7e\u8def\u7531\u5668\uff1a @Bean public ApplicationConfig applicationConfig() { ApplicationConfig applicationConfig = new ApplicationConfig(); applicationConfig.setName( provider-book ); applicationConfig.setQosEnable(false); // instruct tag router Map String,String parameters = new HashMap (); parameters.put(Constants.ROUTER_KEY, tag ); applicationConfig.setParameters(parameters); return applicationConfig; } \u7ed9\u5e94\u7528\u8bbe\u7f6e\u5177\u4f53\u7684\u6807\u7b7e\uff1a @Bean public ProviderConfig providerConfig(){ ProviderConfig providerConfig = new ProviderConfig(); providerConfig.setTag( red ); return providerConfig; } \u5e94\u7528\u672a\u88c5\u914d tag \u5c5e\u6027\u6216\u670d\u52a1\u63d0\u4f9b\u8005\u672a\u8bbe\u7f6e tag \u5c5e\u6027\uff0c\u90fd\u5c06\u88ab\u8ba4\u4e3a\u662f\u9ed8\u8ba4\u7684\u5e94\u7528\uff0c\u8fd9\u4e9b\u9ed8\u8ba4\u5e94\u7528\u5c06\u4f1a\u5728\u8c03\u7528\u65e0\u6cd5\u5339\u914d provider \u65f6\u5f53\u4f5c\u964d\u7ea7\u65b9\u6848\u3002 \u670d\u52a1\u6d88\u8d39\u8005 RpcContext.getContext().setAttachment(Constants.REQUEST_TAG_KEY, red ); \u8bf7\u6c42\u6807\u7b7e\u7684\u4f5c\u7528\u57df\u4e3a\u6bcf\u4e00\u6b21 invocation\uff0c\u4f7f\u7528 attachment \u6765\u4f20\u9012\u8bf7\u6c42\u6807\u7b7e\uff0c\u6ce8\u610f\u4fdd\u5b58\u5728 attachment \u4e2d\u7684\u503c\u5c06\u4f1a\u5728\u4e00\u6b21\u5b8c\u6574\u7684\u8fdc\u7a0b\u8c03\u7528\u4e2d\u6301\u7eed\u4f20\u9012\uff0c\u5f97\u76ca\u4e8e\u8fd9\u6837\u7684\u7279\u6027\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u8d77\u59cb\u8c03\u7528\u65f6\uff0c\u901a\u8fc7\u4e00\u884c\u4ee3\u7801\u7684\u8bbe\u7f6e\uff0c\u8fbe\u5230\u6807\u7b7e\u7684\u6301\u7eed\u4f20\u9012\u3002 \u76ee\u524d\u4ec5\u4ec5\u652f\u6301 hardcoding \u7684\u65b9\u5f0f\u8bbe\u7f6e requestTag\u3002\u6ce8\u610f\u5230 RpcContext \u662f\u7ebf\u7a0b\u7ed1\u5b9a\u7684\uff0c\u4f18\u96c5\u7684\u4f7f\u7528 TagRouter \u7279\u6027\uff0c\u5efa\u8bae\u901a\u8fc7 servlet \u8fc7\u6ee4\u5668(\u5728 web \u73af\u5883\u4e0b)\uff0c\u6216\u8005\u5b9a\u5236\u7684 SPI \u8fc7\u6ee4\u5668\u8bbe\u7f6e requestTag\u3002 \u89c4\u5219\u63cf\u8ff0 request.tag=red \u65f6\u4f18\u5148\u9009\u62e9 tag=red \u7684 provider\u3002\u82e5\u96c6\u7fa4\u4e2d\u4e0d\u5b58\u5728\u4e0e\u8bf7\u6c42\u6807\u8bb0\u5bf9\u5e94\u7684\u670d\u52a1\uff0c\u53ef\u4ee5\u964d\u7ea7\u8bf7\u6c42 tag=null \u7684 provider\uff0c\u5373\u9ed8\u8ba4 provider\u3002 request.tag=null \u65f6\uff0c\u53ea\u4f1a\u5339\u914d tag=null \u7684 provider\u3002\u5373\u4f7f\u96c6\u7fa4\u4e2d\u5b58\u5728\u53ef\u7528\u7684\u670d\u52a1\uff0c\u82e5 tag \u4e0d\u5339\u914d\u5c31\u65e0\u6cd5\u8c03\u7528\uff0c\u8fd9\u4e0e\u89c4\u52191\u4e0d\u540c\uff0c\u643a\u5e26\u6807\u7b7e\u7684\u8bf7\u6c42\u53ef\u4ee5\u964d\u7ea7\u8bbf\u95ee\u5230\u65e0\u6807\u7b7e\u7684\u670d\u52a1\uff0c\u4f46\u4e0d\u643a\u5e26\u6807\u7b7e/\u643a\u5e26\u5176\u4ed6\u79cd\u7c7b\u6807\u7b7e\u7684\u8bf7\u6c42\u6c38\u8fdc\u65e0\u6cd5\u8bbf\u95ee\u5230\u5176\u4ed6\u6807\u7b7e\u7684\u670d\u52a1\u3002 [^1]: 2.2.0 \u4ee5\u4e0a\u7248\u672c\u652f\u6301 [^5]: \u8be5\u7279\u6027\u5728 2.7.0 \u4ee5\u4e0a\u7248\u672c\u652f\u6301","title":"\u8def\u7531\u89c4\u5219"},{"location":"user/demos/routing-rule-deprecated/#_1","text":"\u8def\u7531\u89c4\u5219 [^1] \u51b3\u5b9a\u4e00\u6b21 dubbo \u670d\u52a1\u8c03\u7528\u7684\u76ee\u6807\u670d\u52a1\u5668\uff0c\u5206\u4e3a\u6761\u4ef6\u8def\u7531\u89c4\u5219\u548c\u811a\u672c\u8def\u7531\u89c4\u5219\uff0c\u5e76\u4e14\u652f\u6301\u53ef\u6269\u5c55 ^2 \u3002","title":"\u8def\u7531\u89c4\u5219"},{"location":"user/demos/routing-rule-deprecated/#_2","text":"\u5411\u6ce8\u518c\u4e2d\u5fc3\u5199\u5165\u8def\u7531\u89c4\u5219\u7684\u64cd\u4f5c\u901a\u5e38\u7531\u76d1\u63a7\u4e2d\u5fc3\u6216\u6cbb\u7406\u4e2d\u5fc3\u7684\u9875\u9762\u5b8c\u6210 RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension(); Registry registry = registryFactory.getRegistry(URL.valueOf( zookeeper://10.20.153.10:2181 )); registry.register(URL.valueOf( route://0.0.0.0/com.foo.BarService?category=routers dynamic=false rule= + URL.encode( host = 10.20.153.10 = host = 10.20.153.11 ))); \u5176\u4e2d\uff1a route:// \u8868\u793a\u8def\u7531\u89c4\u5219\u7684\u7c7b\u578b\uff0c\u652f\u6301\u6761\u4ef6\u8def\u7531\u89c4\u5219\u548c\u811a\u672c\u8def\u7531\u89c4\u5219\uff0c\u53ef\u6269\u5c55\uff0c \u5fc5\u586b \u3002 0.0.0.0 \u8868\u793a\u5bf9\u6240\u6709 IP \u5730\u5740\u751f\u6548\uff0c\u5982\u679c\u53ea\u60f3\u5bf9\u67d0\u4e2a IP \u7684\u751f\u6548\uff0c\u8bf7\u586b\u5165\u5177\u4f53 IP\uff0c \u5fc5\u586b \u3002 com.foo.BarService \u8868\u793a\u53ea\u5bf9\u6307\u5b9a\u670d\u52a1\u751f\u6548\uff0c \u5fc5\u586b \u3002 group=foo \u5bf9\u6307\u5b9a\u670d\u52a1\u7684\u6307\u5b9agroup\u751f\u6548\uff0c\u4e0d\u586b\u8868\u793a\u5bf9\u672a\u914d\u7f6egroup\u7684\u6307\u5b9a\u670d\u52a1\u751f\u6548 version=1.0 \u5bf9\u6307\u5b9a\u670d\u52a1\u7684\u6307\u5b9aversion\u751f\u6548\uff0c\u4e0d\u586b\u8868\u793a\u5bf9\u672a\u914d\u7f6eversion\u7684\u6307\u5b9a\u670d\u52a1\u751f\u6548 category=routers \u8868\u793a\u8be5\u6570\u636e\u4e3a\u52a8\u6001\u914d\u7f6e\u7c7b\u578b\uff0c \u5fc5\u586b \u3002 dynamic=false \u8868\u793a\u8be5\u6570\u636e\u4e3a\u6301\u4e45\u6570\u636e\uff0c\u5f53\u6ce8\u518c\u65b9\u9000\u51fa\u65f6\uff0c\u6570\u636e\u4f9d\u7136\u4fdd\u5b58\u5728\u6ce8\u518c\u4e2d\u5fc3\uff0c \u5fc5\u586b \u3002 enabled=true \u8986\u76d6\u89c4\u5219\u662f\u5426\u751f\u6548\uff0c\u53ef\u4e0d\u586b\uff0c\u7f3a\u7701\u751f\u6548\u3002 force=false \u5f53\u8def\u7531\u7ed3\u679c\u4e3a\u7a7a\u65f6\uff0c\u662f\u5426\u5f3a\u5236\u6267\u884c\uff0c\u5982\u679c\u4e0d\u5f3a\u5236\u6267\u884c\uff0c\u8def\u7531\u7ed3\u679c\u4e3a\u7a7a\u7684\u8def\u7531\u89c4\u5219\u5c06\u81ea\u52a8\u5931\u6548\uff0c\u53ef\u4e0d\u586b\uff0c\u7f3a\u7701\u4e3a false \u3002 runtime=false \u662f\u5426\u5728\u6bcf\u6b21\u8c03\u7528\u65f6\u6267\u884c\u8def\u7531\u89c4\u5219\uff0c\u5426\u5219\u53ea\u5728\u63d0\u4f9b\u8005\u5730\u5740\u5217\u8868\u53d8\u66f4\u65f6\u9884\u5148\u6267\u884c\u5e76\u7f13\u5b58\u7ed3\u679c\uff0c\u8c03\u7528\u65f6\u76f4\u63a5\u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6\u8def\u7531\u7ed3\u679c\u3002\u5982\u679c\u7528\u4e86\u53c2\u6570\u8def\u7531\uff0c\u5fc5\u987b\u8bbe\u4e3a true \uff0c\u9700\u8981\u6ce8\u610f\u8bbe\u7f6e\u4f1a\u5f71\u54cd\u8c03\u7528\u7684\u6027\u80fd\uff0c\u53ef\u4e0d\u586b\uff0c\u7f3a\u7701\u4e3a false \u3002 priority=1 \u8def\u7531\u89c4\u5219\u7684\u4f18\u5148\u7ea7\uff0c\u7528\u4e8e\u6392\u5e8f\uff0c\u4f18\u5148\u7ea7\u8d8a\u5927\u8d8a\u9760\u524d\u6267\u884c\uff0c\u53ef\u4e0d\u586b\uff0c\u7f3a\u7701\u4e3a 0 \u3002 rule=URL.encode(\"host = 10.20.153.10 = host = 10.20.153.11\") \u8868\u793a\u8def\u7531\u89c4\u5219\u7684\u5185\u5bb9\uff0c \u5fc5\u586b \u3002","title":"\u5199\u5165\u8def\u7531\u89c4\u5219"},{"location":"user/demos/routing-rule-deprecated/#_3","text":"\u57fa\u4e8e\u6761\u4ef6\u8868\u8fbe\u5f0f\u7684\u8def\u7531\u89c4\u5219\uff0c\u5982\uff1a host = 10.20.153.10 = host = 10.20.153.11","title":"\u6761\u4ef6\u8def\u7531\u89c4\u5219"},{"location":"user/demos/routing-rule-deprecated/#_4","text":"= \u4e4b\u524d\u7684\u4e3a\u6d88\u8d39\u8005\u5339\u914d\u6761\u4ef6\uff0c\u6240\u6709\u53c2\u6570\u548c\u6d88\u8d39\u8005\u7684 URL \u8fdb\u884c\u5bf9\u6bd4\uff0c\u5f53\u6d88\u8d39\u8005\u6ee1\u8db3\u5339\u914d\u6761\u4ef6\u65f6\uff0c\u5bf9\u8be5\u6d88\u8d39\u8005\u6267\u884c\u540e\u9762\u7684\u8fc7\u6ee4\u89c4\u5219\u3002 = \u4e4b\u540e\u4e3a\u63d0\u4f9b\u8005\u5730\u5740\u5217\u8868\u7684\u8fc7\u6ee4\u6761\u4ef6\uff0c\u6240\u6709\u53c2\u6570\u548c\u63d0\u4f9b\u8005\u7684 URL \u8fdb\u884c\u5bf9\u6bd4\uff0c\u6d88\u8d39\u8005\u6700\u7ec8\u53ea\u62ff\u5230\u8fc7\u6ee4\u540e\u7684\u5730\u5740\u5217\u8868\u3002 \u5982\u679c\u5339\u914d\u6761\u4ef6\u4e3a\u7a7a\uff0c\u8868\u793a\u5bf9\u6240\u6709\u6d88\u8d39\u65b9\u5e94\u7528\uff0c\u5982\uff1a = host != 10.20.153.11 \u5982\u679c\u8fc7\u6ee4\u6761\u4ef6\u4e3a\u7a7a\uff0c\u8868\u793a\u7981\u6b62\u8bbf\u95ee\uff0c\u5982\uff1a host = 10.20.153.10 =","title":"\u89c4\u5219\uff1a"},{"location":"user/demos/routing-rule-deprecated/#_5","text":"\u53c2\u6570\u652f\u6301\uff1a \u670d\u52a1\u8c03\u7528\u4fe1\u606f\uff0c\u5982\uff1amethod, argument \u7b49\uff0c\u6682\u4e0d\u652f\u6301\u53c2\u6570\u8def\u7531 URL \u672c\u8eab\u7684\u5b57\u6bb5\uff0c\u5982\uff1aprotocol, host, port \u7b49 \u4ee5\u53ca URL \u4e0a\u7684\u6240\u6709\u53c2\u6570\uff0c\u5982\uff1aapplication, organization \u7b49 \u6761\u4ef6\u652f\u6301\uff1a \u7b49\u53f7 = \u8868\u793a\"\u5339\u914d\"\uff0c\u5982\uff1a host = 10.20.153.10 \u4e0d\u7b49\u53f7 != \u8868\u793a\"\u4e0d\u5339\u914d\"\uff0c\u5982\uff1a host != 10.20.153.10 \u503c\u652f\u6301\uff1a \u4ee5\u9017\u53f7 , \u5206\u9694\u591a\u4e2a\u503c\uff0c\u5982\uff1a host != 10.20.153.10,10.20.153.11 \u4ee5\u661f\u53f7 * \u7ed3\u5c3e\uff0c\u8868\u793a\u901a\u914d\uff0c\u5982\uff1a host != 10.20.* \u4ee5\u7f8e\u5143\u7b26 $ \u5f00\u5934\uff0c\u8868\u793a\u5f15\u7528\u6d88\u8d39\u8005\u53c2\u6570\uff0c\u5982\uff1a host = $host","title":"\u8868\u8fbe\u5f0f\uff1a"},{"location":"user/demos/routing-rule-deprecated/#_6","text":"\u6392\u9664\u9884\u53d1\u5e03\u673a\uff1a = host != 172.22.3.91 1. \u767d\u540d\u5355 ^3 \uff1a host != 10.20.153.10,10.20.153.11 = 2. \u9ed1\u540d\u5355\uff1a host = 10.20.153.10,10.20.153.11 = 3. \u670d\u52a1\u5bc4\u5bbf\u5728\u5e94\u7528\u4e0a\uff0c\u53ea\u66b4\u9732\u4e00\u90e8\u5206\u7684\u673a\u5668\uff0c\u9632\u6b62\u6574\u4e2a\u96c6\u7fa4\u6302\u6389\uff1a = host = 172.22.3.1*,172.22.3.2* 4. \u4e3a\u91cd\u8981\u5e94\u7528\u63d0\u4f9b\u989d\u5916\u7684\u673a\u5668\uff1a application != kylin = host != 172.22.3.95,172.22.3.96 5. \u8bfb\u5199\u5206\u79bb\uff1a method = find*,list*,get*,is* = host = 172.22.3.94,172.22.3.95,172.22.3.96 method != find*,list*,get*,is* = host = 172.22.3.97,172.22.3.98 \u524d\u540e\u53f0\u5206\u79bb\uff1a application = bops = host = 172.22.3.91,172.22.3.92,172.22.3.93 application != bops = host = 172.22.3.94,172.22.3.95,172.22.3.96 \u9694\u79bb\u4e0d\u540c\u673a\u623f\u7f51\u6bb5\uff1a host != 172.22.3.* = host != 172.22.3.* \u63d0\u4f9b\u8005\u4e0e\u6d88\u8d39\u8005\u90e8\u7f72\u5728\u540c\u96c6\u7fa4\u5185\uff0c\u672c\u673a\u53ea\u8bbf\u95ee\u672c\u673a\u7684\u670d\u52a1\uff1a = host = $host","title":"\u793a\u4f8b\uff1a"},{"location":"user/demos/routing-rule-deprecated/#_7","text":"\u811a\u672c\u8def\u7531\u89c4\u5219 ^4 \u652f\u6301 JDK \u811a\u672c\u5f15\u64ce\u7684\u6240\u6709\u811a\u672c\uff0c\u6bd4\u5982\uff1ajavascript, jruby, groovy \u7b49\uff0c\u901a\u8fc7 type=javascript \u53c2\u6570\u8bbe\u7f6e\u811a\u672c\u7c7b\u578b\uff0c\u7f3a\u7701\u4e3a javascript\u3002 script://0.0.0.0/com.foo.BarService?category=routers dynamic=false rule= + URL.encode( \uff08function route(invokers) { ... } (invokers)\uff09 ) \u57fa\u4e8e\u811a\u672c\u5f15\u64ce\u7684\u8def\u7531\u89c4\u5219\uff0c\u5982\uff1a \uff08function route(invokers) { var result = new java.util.ArrayList(invokers.size()); for (i = 0; i invokers.size(); i ++) { if ( 10.20.153.10 .equals(invokers.get(i).getUrl().getHost())) { result.add(invokers.get(i)); } } return result; } (invokers)\uff09; // \u8868\u793a\u7acb\u5373\u6267\u884c\u65b9\u6cd5","title":"\u811a\u672c\u8def\u7531\u89c4\u5219"},{"location":"user/demos/routing-rule-deprecated/#_8","text":"\u6807\u7b7e\u8def\u7531\u89c4\u5219 [^5] \uff0c\u5f53\u5e94\u7528\u9009\u62e9\u88c5\u914d\u6807\u7b7e\u8def\u7531(TagRouter)\u4e4b\u540e\uff0c\u4e00\u6b21 dubbo \u8c03\u7528\u80fd\u591f\u6839\u636e\u8bf7\u6c42\u643a\u5e26\u7684 tag \u6807\u7b7e\u667a\u80fd\u5730\u9009\u62e9\u5bf9\u5e94 tag \u7684\u670d\u52a1\u63d0\u4f9b\u8005\u8fdb\u884c\u8c03\u7528\u3002","title":"\u6807\u7b7e\u8def\u7531\u89c4\u5219"},{"location":"user/demos/routing-rule-deprecated/#_9","text":"\u7ed9\u5e94\u7528\u88c5\u914d\u6807\u7b7e\u8def\u7531\u5668\uff1a @Bean public ApplicationConfig applicationConfig() { ApplicationConfig applicationConfig = new ApplicationConfig(); applicationConfig.setName( provider-book ); applicationConfig.setQosEnable(false); // instruct tag router Map String,String parameters = new HashMap (); parameters.put(Constants.ROUTER_KEY, tag ); applicationConfig.setParameters(parameters); return applicationConfig; } \u7ed9\u5e94\u7528\u8bbe\u7f6e\u5177\u4f53\u7684\u6807\u7b7e\uff1a @Bean public ProviderConfig providerConfig(){ ProviderConfig providerConfig = new ProviderConfig(); providerConfig.setTag( red ); return providerConfig; } \u5e94\u7528\u672a\u88c5\u914d tag \u5c5e\u6027\u6216\u670d\u52a1\u63d0\u4f9b\u8005\u672a\u8bbe\u7f6e tag \u5c5e\u6027\uff0c\u90fd\u5c06\u88ab\u8ba4\u4e3a\u662f\u9ed8\u8ba4\u7684\u5e94\u7528\uff0c\u8fd9\u4e9b\u9ed8\u8ba4\u5e94\u7528\u5c06\u4f1a\u5728\u8c03\u7528\u65e0\u6cd5\u5339\u914d provider \u65f6\u5f53\u4f5c\u964d\u7ea7\u65b9\u6848\u3002","title":"\u670d\u52a1\u63d0\u4f9b\u8005"},{"location":"user/demos/routing-rule-deprecated/#_10","text":"RpcContext.getContext().setAttachment(Constants.REQUEST_TAG_KEY, red ); \u8bf7\u6c42\u6807\u7b7e\u7684\u4f5c\u7528\u57df\u4e3a\u6bcf\u4e00\u6b21 invocation\uff0c\u4f7f\u7528 attachment \u6765\u4f20\u9012\u8bf7\u6c42\u6807\u7b7e\uff0c\u6ce8\u610f\u4fdd\u5b58\u5728 attachment \u4e2d\u7684\u503c\u5c06\u4f1a\u5728\u4e00\u6b21\u5b8c\u6574\u7684\u8fdc\u7a0b\u8c03\u7528\u4e2d\u6301\u7eed\u4f20\u9012\uff0c\u5f97\u76ca\u4e8e\u8fd9\u6837\u7684\u7279\u6027\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u8d77\u59cb\u8c03\u7528\u65f6\uff0c\u901a\u8fc7\u4e00\u884c\u4ee3\u7801\u7684\u8bbe\u7f6e\uff0c\u8fbe\u5230\u6807\u7b7e\u7684\u6301\u7eed\u4f20\u9012\u3002 \u76ee\u524d\u4ec5\u4ec5\u652f\u6301 hardcoding \u7684\u65b9\u5f0f\u8bbe\u7f6e requestTag\u3002\u6ce8\u610f\u5230 RpcContext \u662f\u7ebf\u7a0b\u7ed1\u5b9a\u7684\uff0c\u4f18\u96c5\u7684\u4f7f\u7528 TagRouter \u7279\u6027\uff0c\u5efa\u8bae\u901a\u8fc7 servlet \u8fc7\u6ee4\u5668(\u5728 web \u73af\u5883\u4e0b)\uff0c\u6216\u8005\u5b9a\u5236\u7684 SPI \u8fc7\u6ee4\u5668\u8bbe\u7f6e requestTag\u3002","title":"\u670d\u52a1\u6d88\u8d39\u8005"},{"location":"user/demos/routing-rule-deprecated/#_11","text":"request.tag=red \u65f6\u4f18\u5148\u9009\u62e9 tag=red \u7684 provider\u3002\u82e5\u96c6\u7fa4\u4e2d\u4e0d\u5b58\u5728\u4e0e\u8bf7\u6c42\u6807\u8bb0\u5bf9\u5e94\u7684\u670d\u52a1\uff0c\u53ef\u4ee5\u964d\u7ea7\u8bf7\u6c42 tag=null \u7684 provider\uff0c\u5373\u9ed8\u8ba4 provider\u3002 request.tag=null \u65f6\uff0c\u53ea\u4f1a\u5339\u914d tag=null \u7684 provider\u3002\u5373\u4f7f\u96c6\u7fa4\u4e2d\u5b58\u5728\u53ef\u7528\u7684\u670d\u52a1\uff0c\u82e5 tag \u4e0d\u5339\u914d\u5c31\u65e0\u6cd5\u8c03\u7528\uff0c\u8fd9\u4e0e\u89c4\u52191\u4e0d\u540c\uff0c\u643a\u5e26\u6807\u7b7e\u7684\u8bf7\u6c42\u53ef\u4ee5\u964d\u7ea7\u8bbf\u95ee\u5230\u65e0\u6807\u7b7e\u7684\u670d\u52a1\uff0c\u4f46\u4e0d\u643a\u5e26\u6807\u7b7e/\u643a\u5e26\u5176\u4ed6\u79cd\u7c7b\u6807\u7b7e\u7684\u8bf7\u6c42\u6c38\u8fdc\u65e0\u6cd5\u8bbf\u95ee\u5230\u5176\u4ed6\u6807\u7b7e\u7684\u670d\u52a1\u3002 [^1]: 2.2.0 \u4ee5\u4e0a\u7248\u672c\u652f\u6301 [^5]: \u8be5\u7279\u6027\u5728 2.7.0 \u4ee5\u4e0a\u7248\u672c\u652f\u6301","title":"\u89c4\u5219\u63cf\u8ff0"},{"location":"user/demos/routing-rule/","text":"\u8def\u7531\u89c4\u5219 \u5728\u6b64\u67e5\u770b \u8001\u7248\u672c\u8def\u7531\u89c4\u5219(2.6.x or before) \u8def\u7531\u89c4\u5219\u5728\u53d1\u8d77\u4e00\u6b21RPC\u8c03\u7528\u524d\u8d77\u5230\u8fc7\u6ee4\u76ee\u6807\u670d\u52a1\u5668\u5730\u5740\u7684\u4f5c\u7528\uff0c\u8fc7\u6ee4\u540e\u7684\u5730\u5740\u5217\u8868\uff0c\u5c06\u4f5c\u4e3a\u6d88\u8d39\u7aef\u6700\u7ec8\u53d1\u8d77RPC\u8c03\u7528\u7684\u5907\u9009\u5730\u5740\u3002 \u6761\u4ef6\u8def\u7531\u3002\u652f\u6301\u4ee5\u670d\u52a1\u6216Consumer\u5e94\u7528\u4e3a\u7c92\u5ea6\u914d\u7f6e\u8def\u7531\u89c4\u5219\u3002 \u6807\u7b7e\u8def\u7531\u3002\u4ee5Provider\u5e94\u7528\u4e3a\u7c92\u5ea6\u914d\u7f6e\u8def\u7531\u89c4\u5219\u3002 \u540e\u7eed\u6211\u4eec\u8ba1\u5212\u57282.6.x\u7248\u672c\u7684\u57fa\u7840\u4e0a\u7ee7\u7eed\u589e\u5f3a\u811a\u672c\u8def\u7531\u529f\u80fd\uff0c\u8001\u7248\u672c\u811a\u672c\u8def\u7531\u89c4\u5219\u914d\u7f6e\u65b9\u5f0f\u8bf7\u53c2\u89c1\u5f00\u7bc7\u94fe\u63a5\u3002 \u6761\u4ef6\u8def\u7531 \u60a8\u53ef\u4ee5\u968f\u65f6\u5728\u670d\u52a1\u6cbb\u7406\u63a7\u5236\u53f0 Dubbo-Admin \u5199\u5165\u8def\u7531\u89c4\u5219 \u7b80\u4ecb \u5e94\u7528\u7c92\u5ea6 ```yaml # app1\u7684\u6d88\u8d39\u8005\u53ea\u80fd\u6d88\u8d39\u6240\u6709\u7aef\u53e3\u4e3a20880\u7684\u670d\u52a1\u5b9e\u4f8b # app2\u7684\u6d88\u8d39\u8005\u53ea\u80fd\u6d88\u8d39\u6240\u6709\u7aef\u53e3\u4e3a20881\u7684\u670d\u52a1\u5b9e\u4f8b scope: application force: true runtime: true enabled: true key: governance-conditionrouter-consumer conditions: - application=app1 = address= :20880 - application=app2 = address= :20881 ... ``` \u670d\u52a1\u7c92\u5ea6 ```yaml # DemoService\u7684sayHello\u65b9\u6cd5\u53ea\u80fd\u6d88\u8d39\u6240\u6709\u7aef\u53e3\u4e3a20880\u7684\u670d\u52a1\u5b9e\u4f8b # DemoService\u7684sayHi\u65b9\u6cd5\u53ea\u80fd\u6d88\u8d39\u6240\u6709\u7aef\u53e3\u4e3a20881\u7684\u670d\u52a1\u5b9e\u4f8b scope: service force: true runtime: true enabled: true key: org.apache.dubbo.samples.governance.api.DemoService conditions: - method=sayHello = address= :20880 - method=sayHi = address= :20881 ... ``` \u89c4\u5219\u8be6\u89e3 \u5404\u5b57\u6bb5\u542b\u4e49 scope \u8868\u793a\u8def\u7531\u89c4\u5219\u7684\u4f5c\u7528\u7c92\u5ea6\uff0cscope\u7684\u53d6\u503c\u4f1a\u51b3\u5b9akey\u7684\u53d6\u503c\u3002 \u5fc5\u586b \u3002 service \u670d\u52a1\u7c92\u5ea6 application \u5e94\u7528\u7c92\u5ea6 Key \u660e\u786e\u89c4\u5219\u4f53\u4f5c\u7528\u5728\u54ea\u4e2a\u670d\u52a1\u6216\u5e94\u7528\u3002 \u5fc5\u586b \u3002 scope=service\u65f6\uff0ckey\u53d6\u503c\u4e3a[{group}:]{service}[:{version}]\u7684\u7ec4\u5408 scope=application\u65f6\uff0ckey\u53d6\u503c\u4e3aapplication\u540d\u79f0 enabled=true \u5f53\u524d\u8def\u7531\u89c4\u5219\u662f\u5426\u751f\u6548\uff0c\u53ef\u4e0d\u586b\uff0c\u7f3a\u7701\u751f\u6548\u3002 force=false \u5f53\u8def\u7531\u7ed3\u679c\u4e3a\u7a7a\u65f6\uff0c\u662f\u5426\u5f3a\u5236\u6267\u884c\uff0c\u5982\u679c\u4e0d\u5f3a\u5236\u6267\u884c\uff0c\u8def\u7531\u7ed3\u679c\u4e3a\u7a7a\u7684\u8def\u7531\u89c4\u5219\u5c06\u81ea\u52a8\u5931\u6548\uff0c\u53ef\u4e0d\u586b\uff0c\u7f3a\u7701\u4e3a false \u3002 runtime=false \u662f\u5426\u5728\u6bcf\u6b21\u8c03\u7528\u65f6\u6267\u884c\u8def\u7531\u89c4\u5219\uff0c\u5426\u5219\u53ea\u5728\u63d0\u4f9b\u8005\u5730\u5740\u5217\u8868\u53d8\u66f4\u65f6\u9884\u5148\u6267\u884c\u5e76\u7f13\u5b58\u7ed3\u679c\uff0c\u8c03\u7528\u65f6\u76f4\u63a5\u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6\u8def\u7531\u7ed3\u679c\u3002\u5982\u679c\u7528\u4e86\u53c2\u6570\u8def\u7531\uff0c\u5fc5\u987b\u8bbe\u4e3a true \uff0c\u9700\u8981\u6ce8\u610f\u8bbe\u7f6e\u4f1a\u5f71\u54cd\u8c03\u7528\u7684\u6027\u80fd\uff0c\u53ef\u4e0d\u586b\uff0c\u7f3a\u7701\u4e3a false \u3002 priority=1 \u8def\u7531\u89c4\u5219\u7684\u4f18\u5148\u7ea7\uff0c\u7528\u4e8e\u6392\u5e8f\uff0c\u4f18\u5148\u7ea7\u8d8a\u5927\u8d8a\u9760\u524d\u6267\u884c\uff0c\u53ef\u4e0d\u586b\uff0c\u7f3a\u7701\u4e3a 0 \u3002 conditions \u5b9a\u4e49\u5177\u4f53\u7684\u8def\u7531\u89c4\u5219\u5185\u5bb9\u3002 \u5fc5\u586b \u3002 Conditions\u89c4\u5219\u4f53 `conditions`\u90e8\u5206\u662f\u89c4\u5219\u7684\u4e3b\u4f53\uff0c\u75311\u5230\u4efb\u610f\u591a\u6761\u89c4\u5219\u7ec4\u6210\uff0c\u4e0b\u9762\u6211\u4eec\u5c31\u6bcf\u4e2a\u89c4\u5219\u7684\u914d\u7f6e\u8bed\u6cd5\u505a\u8be6\u7ec6\u8bf4\u660e\uff1a \u683c\u5f0f = \u4e4b\u524d\u7684\u4e3a\u6d88\u8d39\u8005\u5339\u914d\u6761\u4ef6\uff0c\u6240\u6709\u53c2\u6570\u548c\u6d88\u8d39\u8005\u7684 URL \u8fdb\u884c\u5bf9\u6bd4\uff0c\u5f53\u6d88\u8d39\u8005\u6ee1\u8db3\u5339\u914d\u6761\u4ef6\u65f6\uff0c\u5bf9\u8be5\u6d88\u8d39\u8005\u6267\u884c\u540e\u9762\u7684\u8fc7\u6ee4\u89c4\u5219\u3002 = \u4e4b\u540e\u4e3a\u63d0\u4f9b\u8005\u5730\u5740\u5217\u8868\u7684\u8fc7\u6ee4\u6761\u4ef6\uff0c\u6240\u6709\u53c2\u6570\u548c\u63d0\u4f9b\u8005\u7684 URL \u8fdb\u884c\u5bf9\u6bd4\uff0c\u6d88\u8d39\u8005\u6700\u7ec8\u53ea\u62ff\u5230\u8fc7\u6ee4\u540e\u7684\u5730\u5740\u5217\u8868\u3002 \u5982\u679c\u5339\u914d\u6761\u4ef6\u4e3a\u7a7a\uff0c\u8868\u793a\u5bf9\u6240\u6709\u6d88\u8d39\u65b9\u5e94\u7528\uff0c\u5982\uff1a = host != 10.20.153.11 \u5982\u679c\u8fc7\u6ee4\u6761\u4ef6\u4e3a\u7a7a\uff0c\u8868\u793a\u7981\u6b62\u8bbf\u95ee\uff0c\u5982\uff1a host = 10.20.153.10 = \u8868\u8fbe\u5f0f \u53c2\u6570\u652f\u6301\uff1a \u670d\u52a1\u8c03\u7528\u4fe1\u606f\uff0c\u5982\uff1amethod, argument \u7b49\uff0c\u6682\u4e0d\u652f\u6301\u53c2\u6570\u8def\u7531 URL \u672c\u8eab\u7684\u5b57\u6bb5\uff0c\u5982\uff1aprotocol, host, port \u7b49 \u4ee5\u53ca URL \u4e0a\u7684\u6240\u6709\u53c2\u6570\uff0c\u5982\uff1aapplication, organization \u7b49 \u6761\u4ef6\u652f\u6301\uff1a \u7b49\u53f7 = \u8868\u793a\"\u5339\u914d\"\uff0c\u5982\uff1a host = 10.20.153.10 \u4e0d\u7b49\u53f7 != \u8868\u793a\"\u4e0d\u5339\u914d\"\uff0c\u5982\uff1a host != 10.20.153.10 \u503c\u652f\u6301\uff1a \u4ee5\u9017\u53f7 , \u5206\u9694\u591a\u4e2a\u503c\uff0c\u5982\uff1a host != 10.20.153.10,10.20.153.11 \u4ee5\u661f\u53f7 * \u7ed3\u5c3e\uff0c\u8868\u793a\u901a\u914d\uff0c\u5982\uff1a host != 10.20.* \u4ee5\u7f8e\u5143\u7b26 $ \u5f00\u5934\uff0c\u8868\u793a\u5f15\u7528\u6d88\u8d39\u8005\u53c2\u6570\uff0c\u5982\uff1a host = $host Condition\u793a\u4f8b \u6392\u9664\u9884\u53d1\u5e03\u673a\uff1a = host != 172.22.3.91 \u767d\u540d\u5355 ^3 \uff1a host != 10.20.153.10,10.20.153.11 = \u9ed1\u540d\u5355\uff1a host = 10.20.153.10,10.20.153.11 = \u670d\u52a1\u5bc4\u5bbf\u5728\u5e94\u7528\u4e0a\uff0c\u53ea\u66b4\u9732\u4e00\u90e8\u5206\u7684\u673a\u5668\uff0c\u9632\u6b62\u6574\u4e2a\u96c6\u7fa4\u6302\u6389\uff1a = host = 172.22.3.1*,172.22.3.2* \u4e3a\u91cd\u8981\u5e94\u7528\u63d0\u4f9b\u989d\u5916\u7684\u673a\u5668\uff1a application != kylin = host != 172.22.3.95,172.22.3.96 \u8bfb\u5199\u5206\u79bb\uff1a method = find*,list*,get*,is* = host = 172.22.3.94,172.22.3.95,172.22.3.96 method != find*,list*,get*,is* = host = 172.22.3.97,172.22.3.98 \u524d\u540e\u53f0\u5206\u79bb\uff1a application = bops = host = 172.22.3.91,172.22.3.92,172.22.3.93 application != bops = host = 172.22.3.94,172.22.3.95,172.22.3.96 \u9694\u79bb\u4e0d\u540c\u673a\u623f\u7f51\u6bb5\uff1a host != 172.22.3.* = host != 172.22.3.* \u63d0\u4f9b\u8005\u4e0e\u6d88\u8d39\u8005\u90e8\u7f72\u5728\u540c\u96c6\u7fa4\u5185\uff0c\u672c\u673a\u53ea\u8bbf\u95ee\u672c\u673a\u7684\u670d\u52a1\uff1a = host = $host \u6807\u7b7e\u8def\u7531\u89c4\u5219 \u7b80\u4ecb \u6807\u7b7e\u8def\u7531\u901a\u8fc7\u5c06\u67d0\u4e00\u4e2a\u6216\u591a\u4e2a\u670d\u52a1\u7684\u63d0\u4f9b\u8005\u5212\u5206\u5230\u540c\u4e00\u4e2a\u5206\u7ec4\uff0c\u7ea6\u675f\u6d41\u91cf\u53ea\u5728\u6307\u5b9a\u5206\u7ec4\u4e2d\u6d41\u8f6c\uff0c\u4ece\u800c\u5b9e\u73b0\u6d41\u91cf\u9694\u79bb\u7684\u76ee\u7684\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u84dd\u7eff\u53d1\u5e03\u3001\u7070\u5ea6\u53d1\u5e03\u7b49\u573a\u666f\u7684\u80fd\u529b\u57fa\u7840\u3002 Provider \u6807\u7b7e\u4e3b\u8981\u662f\u6307\u5bf9Provider\u7aef\u5e94\u7528\u5b9e\u4f8b\u7684\u5206\u7ec4\uff0c\u76ee\u524d\u6709\u4e24\u79cd\u65b9\u5f0f\u53ef\u4ee5\u5b8c\u6210\u5b9e\u4f8b\u5206\u7ec4\uff0c\u5206\u522b\u662f \u52a8\u6001\u89c4\u5219\u6253\u6807 \u548c \u9759\u6001\u89c4\u5219\u6253\u6807 \uff0c\u5176\u4e2d\u52a8\u6001\u89c4\u5219\u76f8\u8f83\u4e8e\u9759\u6001\u89c4\u5219\u4f18\u5148\u7ea7\u66f4\u9ad8\uff0c\u800c\u5f53\u4e24\u79cd\u89c4\u5219\u540c\u65f6\u5b58\u5728\u4e14\u51fa\u73b0\u51b2\u7a81\u65f6\uff0c\u5c06\u4ee5\u52a8\u6001\u89c4\u5219\u4e3a\u51c6\u3002 \u52a8\u6001\u89c4\u5219\u6253\u6807\uff0c\u53ef\u968f\u65f6\u5728 \u670d\u52a1\u6cbb\u7406\u63a7\u5236\u53f0 \u4e0b\u53d1\u6807\u7b7e\u5f52\u7ec4\u89c4\u5219 ```yaml # governance-tagrouter-provider\u5e94\u7528\u589e\u52a0\u4e86\u4e24\u4e2a\u6807\u7b7e\u5206\u7ec4tag1\u548ctag2 # tag1\u5305\u542b\u4e00\u4e2a\u5b9e\u4f8b 127.0.0.1:20880 # tag2\u5305\u542b\u4e00\u4e2a\u5b9e\u4f8b 127.0.0.1:20881 force: false runtime: true enabled: true key: governance-tagrouter-provider tags: - name: tag1 addresses: [\"127.0.0.1:20880\"] - name: tag2 addresses: [\"127.0.0.1:20881\"] ... ``` \u9759\u6001\u6253\u6807 xml dubbo:provider tag=\"tag1\"/ or ```xml dubbo:service tag=\"tag1\"/ ``` or properties java -jar xxx-provider.jar -Ddubbo.provider.tag={the tag you want, may come from OS ENV} Consumer RpcContext.getContext().setAttachment(Constants.REQUEST_TAG_KEY, tag1 ); \u8bf7\u6c42\u6807\u7b7e\u7684\u4f5c\u7528\u57df\u4e3a\u6bcf\u4e00\u6b21 invocation\uff0c\u4f7f\u7528 attachment \u6765\u4f20\u9012\u8bf7\u6c42\u6807\u7b7e\uff0c\u6ce8\u610f\u4fdd\u5b58\u5728 attachment \u4e2d\u7684\u503c\u5c06\u4f1a\u5728\u4e00\u6b21\u5b8c\u6574\u7684\u8fdc\u7a0b\u8c03\u7528\u4e2d\u6301\u7eed\u4f20\u9012\uff0c\u5f97\u76ca\u4e8e\u8fd9\u6837\u7684\u7279\u6027\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u8d77\u59cb\u8c03\u7528\u65f6\uff0c\u901a\u8fc7\u4e00\u884c\u4ee3\u7801\u7684\u8bbe\u7f6e\uff0c\u8fbe\u5230\u6807\u7b7e\u7684\u6301\u7eed\u4f20\u9012\u3002 \u76ee\u524d\u4ec5\u4ec5\u652f\u6301 hardcoding \u7684\u65b9\u5f0f\u8bbe\u7f6e requestTag\u3002\u6ce8\u610f\u5230 RpcContext \u662f\u7ebf\u7a0b\u7ed1\u5b9a\u7684\uff0c\u4f18\u96c5\u7684\u4f7f\u7528 TagRouter \u7279\u6027\uff0c\u5efa\u8bae\u901a\u8fc7 servlet \u8fc7\u6ee4\u5668(\u5728 web \u73af\u5883\u4e0b)\uff0c\u6216\u8005\u5b9a\u5236\u7684 SPI \u8fc7\u6ee4\u5668\u8bbe\u7f6e requestTag\u3002 \u89c4\u5219\u8be6\u89e3 \u683c\u5f0f Key \u660e\u786e\u89c4\u5219\u4f53\u4f5c\u7528\u5230\u54ea\u4e2a\u5e94\u7528\u3002 \u5fc5\u586b \u3002 enabled=true \u5f53\u524d\u8def\u7531\u89c4\u5219\u662f\u5426\u751f\u6548\uff0c\u53ef\u4e0d\u586b\uff0c\u7f3a\u7701\u751f\u6548\u3002 force=false \u5f53\u8def\u7531\u7ed3\u679c\u4e3a\u7a7a\u65f6\uff0c\u662f\u5426\u5f3a\u5236\u6267\u884c\uff0c\u5982\u679c\u4e0d\u5f3a\u5236\u6267\u884c\uff0c\u8def\u7531\u7ed3\u679c\u4e3a\u7a7a\u7684\u8def\u7531\u89c4\u5219\u5c06\u81ea\u52a8\u5931\u6548\uff0c\u53ef\u4e0d\u586b\uff0c\u7f3a\u7701\u4e3a false \u3002 runtime=false \u662f\u5426\u5728\u6bcf\u6b21\u8c03\u7528\u65f6\u6267\u884c\u8def\u7531\u89c4\u5219\uff0c\u5426\u5219\u53ea\u5728\u63d0\u4f9b\u8005\u5730\u5740\u5217\u8868\u53d8\u66f4\u65f6\u9884\u5148\u6267\u884c\u5e76\u7f13\u5b58\u7ed3\u679c\uff0c\u8c03\u7528\u65f6\u76f4\u63a5\u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6\u8def\u7531\u7ed3\u679c\u3002\u5982\u679c\u7528\u4e86\u53c2\u6570\u8def\u7531\uff0c\u5fc5\u987b\u8bbe\u4e3a true \uff0c\u9700\u8981\u6ce8\u610f\u8bbe\u7f6e\u4f1a\u5f71\u54cd\u8c03\u7528\u7684\u6027\u80fd\uff0c\u53ef\u4e0d\u586b\uff0c\u7f3a\u7701\u4e3a false \u3002 priority=1 \u8def\u7531\u89c4\u5219\u7684\u4f18\u5148\u7ea7\uff0c\u7528\u4e8e\u6392\u5e8f\uff0c\u4f18\u5148\u7ea7\u8d8a\u5927\u8d8a\u9760\u524d\u6267\u884c\uff0c\u53ef\u4e0d\u586b\uff0c\u7f3a\u7701\u4e3a 0 \u3002 tags \u5b9a\u4e49\u5177\u4f53\u7684\u6807\u7b7e\u5206\u7ec4\u5185\u5bb9\uff0c\u53ef\u5b9a\u4e49\u4efb\u610fn\uff08n =1\uff09\u4e2a\u6807\u7b7e\u5e76\u4e3a\u6bcf\u4e2a\u6807\u7b7e\u6307\u5b9a\u5b9e\u4f8b\u5217\u8868\u3002 \u5fc5\u586b \u3002 name\uff0c \u6807\u7b7e\u540d\u79f0 addresses\uff0c \u5f53\u524d\u6807\u7b7e\u5305\u542b\u7684\u5b9e\u4f8b\u5217\u8868 \u964d\u7ea7\u7ea6\u5b9a request.tag=tag1 \u65f6\u4f18\u5148\u9009\u62e9 \u6807\u8bb0\u4e86 tag=tag1 \u7684 provider\u3002\u82e5\u96c6\u7fa4\u4e2d\u4e0d\u5b58\u5728\u4e0e\u8bf7\u6c42\u6807\u8bb0\u5bf9\u5e94\u7684\u670d\u52a1\uff0c\u9ed8\u8ba4\u5c06\u964d\u7ea7\u8bf7\u6c42 tag\u4e3a\u7a7a\u7684provider\uff1b\u5982\u679c\u8981\u6539\u53d8\u8fd9\u79cd\u9ed8\u8ba4\u884c\u4e3a\uff0c\u5373\u627e\u4e0d\u5230\u5339\u914dtag1\u7684provider\u8fd4\u56de\u5f02\u5e38\uff0c\u9700\u8bbe\u7f6e request.tag.force=true \u3002 request.tag \u672a\u8bbe\u7f6e\u65f6\uff0c\u53ea\u4f1a\u5339\u914dtag\u4e3a\u7a7a\u7684provider\u3002\u5373\u4f7f\u96c6\u7fa4\u4e2d\u5b58\u5728\u53ef\u7528\u7684\u670d\u52a1\uff0c\u82e5 tag \u4e0d\u5339\u914d\u4e5f\u5c31\u65e0\u6cd5\u8c03\u7528\uff0c\u8fd9\u4e0e\u7ea6\u5b9a1\u4e0d\u540c\uff0c\u643a\u5e26\u6807\u7b7e\u7684\u8bf7\u6c42\u53ef\u4ee5\u964d\u7ea7\u8bbf\u95ee\u5230\u65e0\u6807\u7b7e\u7684\u670d\u52a1\uff0c\u4f46\u4e0d\u643a\u5e26\u6807\u7b7e/\u643a\u5e26\u5176\u4ed6\u79cd\u7c7b\u6807\u7b7e\u7684\u8bf7\u6c42\u6c38\u8fdc\u65e0\u6cd5\u8bbf\u95ee\u5230\u5176\u4ed6\u6807\u7b7e\u7684\u670d\u52a1\u3002 [^1]: 2.2.0 \u4ee5\u4e0a\u7248\u672c\u652f\u6301","title":"\u8def\u7531\u89c4\u5219"},{"location":"user/demos/routing-rule/#_1","text":"\u5728\u6b64\u67e5\u770b \u8001\u7248\u672c\u8def\u7531\u89c4\u5219(2.6.x or before) \u8def\u7531\u89c4\u5219\u5728\u53d1\u8d77\u4e00\u6b21RPC\u8c03\u7528\u524d\u8d77\u5230\u8fc7\u6ee4\u76ee\u6807\u670d\u52a1\u5668\u5730\u5740\u7684\u4f5c\u7528\uff0c\u8fc7\u6ee4\u540e\u7684\u5730\u5740\u5217\u8868\uff0c\u5c06\u4f5c\u4e3a\u6d88\u8d39\u7aef\u6700\u7ec8\u53d1\u8d77RPC\u8c03\u7528\u7684\u5907\u9009\u5730\u5740\u3002 \u6761\u4ef6\u8def\u7531\u3002\u652f\u6301\u4ee5\u670d\u52a1\u6216Consumer\u5e94\u7528\u4e3a\u7c92\u5ea6\u914d\u7f6e\u8def\u7531\u89c4\u5219\u3002 \u6807\u7b7e\u8def\u7531\u3002\u4ee5Provider\u5e94\u7528\u4e3a\u7c92\u5ea6\u914d\u7f6e\u8def\u7531\u89c4\u5219\u3002 \u540e\u7eed\u6211\u4eec\u8ba1\u5212\u57282.6.x\u7248\u672c\u7684\u57fa\u7840\u4e0a\u7ee7\u7eed\u589e\u5f3a\u811a\u672c\u8def\u7531\u529f\u80fd\uff0c\u8001\u7248\u672c\u811a\u672c\u8def\u7531\u89c4\u5219\u914d\u7f6e\u65b9\u5f0f\u8bf7\u53c2\u89c1\u5f00\u7bc7\u94fe\u63a5\u3002","title":"\u8def\u7531\u89c4\u5219"},{"location":"user/demos/routing-rule/#_2","text":"\u60a8\u53ef\u4ee5\u968f\u65f6\u5728\u670d\u52a1\u6cbb\u7406\u63a7\u5236\u53f0 Dubbo-Admin \u5199\u5165\u8def\u7531\u89c4\u5219","title":"\u6761\u4ef6\u8def\u7531"},{"location":"user/demos/routing-rule/#_3","text":"\u5e94\u7528\u7c92\u5ea6 ```yaml # app1\u7684\u6d88\u8d39\u8005\u53ea\u80fd\u6d88\u8d39\u6240\u6709\u7aef\u53e3\u4e3a20880\u7684\u670d\u52a1\u5b9e\u4f8b # app2\u7684\u6d88\u8d39\u8005\u53ea\u80fd\u6d88\u8d39\u6240\u6709\u7aef\u53e3\u4e3a20881\u7684\u670d\u52a1\u5b9e\u4f8b scope: application force: true runtime: true enabled: true key: governance-conditionrouter-consumer conditions: - application=app1 = address= :20880 - application=app2 = address= :20881 ... ``` \u670d\u52a1\u7c92\u5ea6 ```yaml # DemoService\u7684sayHello\u65b9\u6cd5\u53ea\u80fd\u6d88\u8d39\u6240\u6709\u7aef\u53e3\u4e3a20880\u7684\u670d\u52a1\u5b9e\u4f8b # DemoService\u7684sayHi\u65b9\u6cd5\u53ea\u80fd\u6d88\u8d39\u6240\u6709\u7aef\u53e3\u4e3a20881\u7684\u670d\u52a1\u5b9e\u4f8b scope: service force: true runtime: true enabled: true key: org.apache.dubbo.samples.governance.api.DemoService conditions: - method=sayHello = address= :20880 - method=sayHi = address= :20881 ... ```","title":"\u7b80\u4ecb"},{"location":"user/demos/routing-rule/#_4","text":"","title":"\u89c4\u5219\u8be6\u89e3"},{"location":"user/demos/routing-rule/#_5","text":"scope \u8868\u793a\u8def\u7531\u89c4\u5219\u7684\u4f5c\u7528\u7c92\u5ea6\uff0cscope\u7684\u53d6\u503c\u4f1a\u51b3\u5b9akey\u7684\u53d6\u503c\u3002 \u5fc5\u586b \u3002 service \u670d\u52a1\u7c92\u5ea6 application \u5e94\u7528\u7c92\u5ea6 Key \u660e\u786e\u89c4\u5219\u4f53\u4f5c\u7528\u5728\u54ea\u4e2a\u670d\u52a1\u6216\u5e94\u7528\u3002 \u5fc5\u586b \u3002 scope=service\u65f6\uff0ckey\u53d6\u503c\u4e3a[{group}:]{service}[:{version}]\u7684\u7ec4\u5408 scope=application\u65f6\uff0ckey\u53d6\u503c\u4e3aapplication\u540d\u79f0 enabled=true \u5f53\u524d\u8def\u7531\u89c4\u5219\u662f\u5426\u751f\u6548\uff0c\u53ef\u4e0d\u586b\uff0c\u7f3a\u7701\u751f\u6548\u3002 force=false \u5f53\u8def\u7531\u7ed3\u679c\u4e3a\u7a7a\u65f6\uff0c\u662f\u5426\u5f3a\u5236\u6267\u884c\uff0c\u5982\u679c\u4e0d\u5f3a\u5236\u6267\u884c\uff0c\u8def\u7531\u7ed3\u679c\u4e3a\u7a7a\u7684\u8def\u7531\u89c4\u5219\u5c06\u81ea\u52a8\u5931\u6548\uff0c\u53ef\u4e0d\u586b\uff0c\u7f3a\u7701\u4e3a false \u3002 runtime=false \u662f\u5426\u5728\u6bcf\u6b21\u8c03\u7528\u65f6\u6267\u884c\u8def\u7531\u89c4\u5219\uff0c\u5426\u5219\u53ea\u5728\u63d0\u4f9b\u8005\u5730\u5740\u5217\u8868\u53d8\u66f4\u65f6\u9884\u5148\u6267\u884c\u5e76\u7f13\u5b58\u7ed3\u679c\uff0c\u8c03\u7528\u65f6\u76f4\u63a5\u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6\u8def\u7531\u7ed3\u679c\u3002\u5982\u679c\u7528\u4e86\u53c2\u6570\u8def\u7531\uff0c\u5fc5\u987b\u8bbe\u4e3a true \uff0c\u9700\u8981\u6ce8\u610f\u8bbe\u7f6e\u4f1a\u5f71\u54cd\u8c03\u7528\u7684\u6027\u80fd\uff0c\u53ef\u4e0d\u586b\uff0c\u7f3a\u7701\u4e3a false \u3002 priority=1 \u8def\u7531\u89c4\u5219\u7684\u4f18\u5148\u7ea7\uff0c\u7528\u4e8e\u6392\u5e8f\uff0c\u4f18\u5148\u7ea7\u8d8a\u5927\u8d8a\u9760\u524d\u6267\u884c\uff0c\u53ef\u4e0d\u586b\uff0c\u7f3a\u7701\u4e3a 0 \u3002 conditions \u5b9a\u4e49\u5177\u4f53\u7684\u8def\u7531\u89c4\u5219\u5185\u5bb9\u3002 \u5fc5\u586b \u3002","title":"\u5404\u5b57\u6bb5\u542b\u4e49"},{"location":"user/demos/routing-rule/#conditions","text":"`conditions`\u90e8\u5206\u662f\u89c4\u5219\u7684\u4e3b\u4f53\uff0c\u75311\u5230\u4efb\u610f\u591a\u6761\u89c4\u5219\u7ec4\u6210\uff0c\u4e0b\u9762\u6211\u4eec\u5c31\u6bcf\u4e2a\u89c4\u5219\u7684\u914d\u7f6e\u8bed\u6cd5\u505a\u8be6\u7ec6\u8bf4\u660e\uff1a \u683c\u5f0f = \u4e4b\u524d\u7684\u4e3a\u6d88\u8d39\u8005\u5339\u914d\u6761\u4ef6\uff0c\u6240\u6709\u53c2\u6570\u548c\u6d88\u8d39\u8005\u7684 URL \u8fdb\u884c\u5bf9\u6bd4\uff0c\u5f53\u6d88\u8d39\u8005\u6ee1\u8db3\u5339\u914d\u6761\u4ef6\u65f6\uff0c\u5bf9\u8be5\u6d88\u8d39\u8005\u6267\u884c\u540e\u9762\u7684\u8fc7\u6ee4\u89c4\u5219\u3002 = \u4e4b\u540e\u4e3a\u63d0\u4f9b\u8005\u5730\u5740\u5217\u8868\u7684\u8fc7\u6ee4\u6761\u4ef6\uff0c\u6240\u6709\u53c2\u6570\u548c\u63d0\u4f9b\u8005\u7684 URL \u8fdb\u884c\u5bf9\u6bd4\uff0c\u6d88\u8d39\u8005\u6700\u7ec8\u53ea\u62ff\u5230\u8fc7\u6ee4\u540e\u7684\u5730\u5740\u5217\u8868\u3002 \u5982\u679c\u5339\u914d\u6761\u4ef6\u4e3a\u7a7a\uff0c\u8868\u793a\u5bf9\u6240\u6709\u6d88\u8d39\u65b9\u5e94\u7528\uff0c\u5982\uff1a = host != 10.20.153.11 \u5982\u679c\u8fc7\u6ee4\u6761\u4ef6\u4e3a\u7a7a\uff0c\u8868\u793a\u7981\u6b62\u8bbf\u95ee\uff0c\u5982\uff1a host = 10.20.153.10 = \u8868\u8fbe\u5f0f \u53c2\u6570\u652f\u6301\uff1a \u670d\u52a1\u8c03\u7528\u4fe1\u606f\uff0c\u5982\uff1amethod, argument \u7b49\uff0c\u6682\u4e0d\u652f\u6301\u53c2\u6570\u8def\u7531 URL \u672c\u8eab\u7684\u5b57\u6bb5\uff0c\u5982\uff1aprotocol, host, port \u7b49 \u4ee5\u53ca URL \u4e0a\u7684\u6240\u6709\u53c2\u6570\uff0c\u5982\uff1aapplication, organization \u7b49 \u6761\u4ef6\u652f\u6301\uff1a \u7b49\u53f7 = \u8868\u793a\"\u5339\u914d\"\uff0c\u5982\uff1a host = 10.20.153.10 \u4e0d\u7b49\u53f7 != \u8868\u793a\"\u4e0d\u5339\u914d\"\uff0c\u5982\uff1a host != 10.20.153.10 \u503c\u652f\u6301\uff1a \u4ee5\u9017\u53f7 , \u5206\u9694\u591a\u4e2a\u503c\uff0c\u5982\uff1a host != 10.20.153.10,10.20.153.11 \u4ee5\u661f\u53f7 * \u7ed3\u5c3e\uff0c\u8868\u793a\u901a\u914d\uff0c\u5982\uff1a host != 10.20.* \u4ee5\u7f8e\u5143\u7b26 $ \u5f00\u5934\uff0c\u8868\u793a\u5f15\u7528\u6d88\u8d39\u8005\u53c2\u6570\uff0c\u5982\uff1a host = $host Condition\u793a\u4f8b \u6392\u9664\u9884\u53d1\u5e03\u673a\uff1a = host != 172.22.3.91 \u767d\u540d\u5355 ^3 \uff1a host != 10.20.153.10,10.20.153.11 = \u9ed1\u540d\u5355\uff1a host = 10.20.153.10,10.20.153.11 = \u670d\u52a1\u5bc4\u5bbf\u5728\u5e94\u7528\u4e0a\uff0c\u53ea\u66b4\u9732\u4e00\u90e8\u5206\u7684\u673a\u5668\uff0c\u9632\u6b62\u6574\u4e2a\u96c6\u7fa4\u6302\u6389\uff1a = host = 172.22.3.1*,172.22.3.2* \u4e3a\u91cd\u8981\u5e94\u7528\u63d0\u4f9b\u989d\u5916\u7684\u673a\u5668\uff1a application != kylin = host != 172.22.3.95,172.22.3.96 \u8bfb\u5199\u5206\u79bb\uff1a method = find*,list*,get*,is* = host = 172.22.3.94,172.22.3.95,172.22.3.96 method != find*,list*,get*,is* = host = 172.22.3.97,172.22.3.98 \u524d\u540e\u53f0\u5206\u79bb\uff1a application = bops = host = 172.22.3.91,172.22.3.92,172.22.3.93 application != bops = host = 172.22.3.94,172.22.3.95,172.22.3.96 \u9694\u79bb\u4e0d\u540c\u673a\u623f\u7f51\u6bb5\uff1a host != 172.22.3.* = host != 172.22.3.* \u63d0\u4f9b\u8005\u4e0e\u6d88\u8d39\u8005\u90e8\u7f72\u5728\u540c\u96c6\u7fa4\u5185\uff0c\u672c\u673a\u53ea\u8bbf\u95ee\u672c\u673a\u7684\u670d\u52a1\uff1a = host = $host","title":"Conditions\u89c4\u5219\u4f53"},{"location":"user/demos/routing-rule/#_6","text":"","title":"\u6807\u7b7e\u8def\u7531\u89c4\u5219"},{"location":"user/demos/routing-rule/#_7","text":"\u6807\u7b7e\u8def\u7531\u901a\u8fc7\u5c06\u67d0\u4e00\u4e2a\u6216\u591a\u4e2a\u670d\u52a1\u7684\u63d0\u4f9b\u8005\u5212\u5206\u5230\u540c\u4e00\u4e2a\u5206\u7ec4\uff0c\u7ea6\u675f\u6d41\u91cf\u53ea\u5728\u6307\u5b9a\u5206\u7ec4\u4e2d\u6d41\u8f6c\uff0c\u4ece\u800c\u5b9e\u73b0\u6d41\u91cf\u9694\u79bb\u7684\u76ee\u7684\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u84dd\u7eff\u53d1\u5e03\u3001\u7070\u5ea6\u53d1\u5e03\u7b49\u573a\u666f\u7684\u80fd\u529b\u57fa\u7840\u3002","title":"\u7b80\u4ecb"},{"location":"user/demos/routing-rule/#provider","text":"\u6807\u7b7e\u4e3b\u8981\u662f\u6307\u5bf9Provider\u7aef\u5e94\u7528\u5b9e\u4f8b\u7684\u5206\u7ec4\uff0c\u76ee\u524d\u6709\u4e24\u79cd\u65b9\u5f0f\u53ef\u4ee5\u5b8c\u6210\u5b9e\u4f8b\u5206\u7ec4\uff0c\u5206\u522b\u662f \u52a8\u6001\u89c4\u5219\u6253\u6807 \u548c \u9759\u6001\u89c4\u5219\u6253\u6807 \uff0c\u5176\u4e2d\u52a8\u6001\u89c4\u5219\u76f8\u8f83\u4e8e\u9759\u6001\u89c4\u5219\u4f18\u5148\u7ea7\u66f4\u9ad8\uff0c\u800c\u5f53\u4e24\u79cd\u89c4\u5219\u540c\u65f6\u5b58\u5728\u4e14\u51fa\u73b0\u51b2\u7a81\u65f6\uff0c\u5c06\u4ee5\u52a8\u6001\u89c4\u5219\u4e3a\u51c6\u3002 \u52a8\u6001\u89c4\u5219\u6253\u6807\uff0c\u53ef\u968f\u65f6\u5728 \u670d\u52a1\u6cbb\u7406\u63a7\u5236\u53f0 \u4e0b\u53d1\u6807\u7b7e\u5f52\u7ec4\u89c4\u5219 ```yaml # governance-tagrouter-provider\u5e94\u7528\u589e\u52a0\u4e86\u4e24\u4e2a\u6807\u7b7e\u5206\u7ec4tag1\u548ctag2 # tag1\u5305\u542b\u4e00\u4e2a\u5b9e\u4f8b 127.0.0.1:20880 # tag2\u5305\u542b\u4e00\u4e2a\u5b9e\u4f8b 127.0.0.1:20881 force: false runtime: true enabled: true key: governance-tagrouter-provider tags: - name: tag1 addresses: [\"127.0.0.1:20880\"] - name: tag2 addresses: [\"127.0.0.1:20881\"] ... ``` \u9759\u6001\u6253\u6807 xml dubbo:provider tag=\"tag1\"/ or ```xml dubbo:service tag=\"tag1\"/ ``` or properties java -jar xxx-provider.jar -Ddubbo.provider.tag={the tag you want, may come from OS ENV}","title":"Provider"},{"location":"user/demos/routing-rule/#consumer","text":"RpcContext.getContext().setAttachment(Constants.REQUEST_TAG_KEY, tag1 ); \u8bf7\u6c42\u6807\u7b7e\u7684\u4f5c\u7528\u57df\u4e3a\u6bcf\u4e00\u6b21 invocation\uff0c\u4f7f\u7528 attachment \u6765\u4f20\u9012\u8bf7\u6c42\u6807\u7b7e\uff0c\u6ce8\u610f\u4fdd\u5b58\u5728 attachment \u4e2d\u7684\u503c\u5c06\u4f1a\u5728\u4e00\u6b21\u5b8c\u6574\u7684\u8fdc\u7a0b\u8c03\u7528\u4e2d\u6301\u7eed\u4f20\u9012\uff0c\u5f97\u76ca\u4e8e\u8fd9\u6837\u7684\u7279\u6027\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u8d77\u59cb\u8c03\u7528\u65f6\uff0c\u901a\u8fc7\u4e00\u884c\u4ee3\u7801\u7684\u8bbe\u7f6e\uff0c\u8fbe\u5230\u6807\u7b7e\u7684\u6301\u7eed\u4f20\u9012\u3002 \u76ee\u524d\u4ec5\u4ec5\u652f\u6301 hardcoding \u7684\u65b9\u5f0f\u8bbe\u7f6e requestTag\u3002\u6ce8\u610f\u5230 RpcContext \u662f\u7ebf\u7a0b\u7ed1\u5b9a\u7684\uff0c\u4f18\u96c5\u7684\u4f7f\u7528 TagRouter \u7279\u6027\uff0c\u5efa\u8bae\u901a\u8fc7 servlet \u8fc7\u6ee4\u5668(\u5728 web \u73af\u5883\u4e0b)\uff0c\u6216\u8005\u5b9a\u5236\u7684 SPI \u8fc7\u6ee4\u5668\u8bbe\u7f6e requestTag\u3002","title":"Consumer"},{"location":"user/demos/routing-rule/#_8","text":"","title":"\u89c4\u5219\u8be6\u89e3"},{"location":"user/demos/routing-rule/#_9","text":"Key \u660e\u786e\u89c4\u5219\u4f53\u4f5c\u7528\u5230\u54ea\u4e2a\u5e94\u7528\u3002 \u5fc5\u586b \u3002 enabled=true \u5f53\u524d\u8def\u7531\u89c4\u5219\u662f\u5426\u751f\u6548\uff0c\u53ef\u4e0d\u586b\uff0c\u7f3a\u7701\u751f\u6548\u3002 force=false \u5f53\u8def\u7531\u7ed3\u679c\u4e3a\u7a7a\u65f6\uff0c\u662f\u5426\u5f3a\u5236\u6267\u884c\uff0c\u5982\u679c\u4e0d\u5f3a\u5236\u6267\u884c\uff0c\u8def\u7531\u7ed3\u679c\u4e3a\u7a7a\u7684\u8def\u7531\u89c4\u5219\u5c06\u81ea\u52a8\u5931\u6548\uff0c\u53ef\u4e0d\u586b\uff0c\u7f3a\u7701\u4e3a false \u3002 runtime=false \u662f\u5426\u5728\u6bcf\u6b21\u8c03\u7528\u65f6\u6267\u884c\u8def\u7531\u89c4\u5219\uff0c\u5426\u5219\u53ea\u5728\u63d0\u4f9b\u8005\u5730\u5740\u5217\u8868\u53d8\u66f4\u65f6\u9884\u5148\u6267\u884c\u5e76\u7f13\u5b58\u7ed3\u679c\uff0c\u8c03\u7528\u65f6\u76f4\u63a5\u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6\u8def\u7531\u7ed3\u679c\u3002\u5982\u679c\u7528\u4e86\u53c2\u6570\u8def\u7531\uff0c\u5fc5\u987b\u8bbe\u4e3a true \uff0c\u9700\u8981\u6ce8\u610f\u8bbe\u7f6e\u4f1a\u5f71\u54cd\u8c03\u7528\u7684\u6027\u80fd\uff0c\u53ef\u4e0d\u586b\uff0c\u7f3a\u7701\u4e3a false \u3002 priority=1 \u8def\u7531\u89c4\u5219\u7684\u4f18\u5148\u7ea7\uff0c\u7528\u4e8e\u6392\u5e8f\uff0c\u4f18\u5148\u7ea7\u8d8a\u5927\u8d8a\u9760\u524d\u6267\u884c\uff0c\u53ef\u4e0d\u586b\uff0c\u7f3a\u7701\u4e3a 0 \u3002 tags \u5b9a\u4e49\u5177\u4f53\u7684\u6807\u7b7e\u5206\u7ec4\u5185\u5bb9\uff0c\u53ef\u5b9a\u4e49\u4efb\u610fn\uff08n =1\uff09\u4e2a\u6807\u7b7e\u5e76\u4e3a\u6bcf\u4e2a\u6807\u7b7e\u6307\u5b9a\u5b9e\u4f8b\u5217\u8868\u3002 \u5fc5\u586b \u3002 name\uff0c \u6807\u7b7e\u540d\u79f0 addresses\uff0c \u5f53\u524d\u6807\u7b7e\u5305\u542b\u7684\u5b9e\u4f8b\u5217\u8868","title":"\u683c\u5f0f"},{"location":"user/demos/routing-rule/#_10","text":"request.tag=tag1 \u65f6\u4f18\u5148\u9009\u62e9 \u6807\u8bb0\u4e86 tag=tag1 \u7684 provider\u3002\u82e5\u96c6\u7fa4\u4e2d\u4e0d\u5b58\u5728\u4e0e\u8bf7\u6c42\u6807\u8bb0\u5bf9\u5e94\u7684\u670d\u52a1\uff0c\u9ed8\u8ba4\u5c06\u964d\u7ea7\u8bf7\u6c42 tag\u4e3a\u7a7a\u7684provider\uff1b\u5982\u679c\u8981\u6539\u53d8\u8fd9\u79cd\u9ed8\u8ba4\u884c\u4e3a\uff0c\u5373\u627e\u4e0d\u5230\u5339\u914dtag1\u7684provider\u8fd4\u56de\u5f02\u5e38\uff0c\u9700\u8bbe\u7f6e request.tag.force=true \u3002 request.tag \u672a\u8bbe\u7f6e\u65f6\uff0c\u53ea\u4f1a\u5339\u914dtag\u4e3a\u7a7a\u7684provider\u3002\u5373\u4f7f\u96c6\u7fa4\u4e2d\u5b58\u5728\u53ef\u7528\u7684\u670d\u52a1\uff0c\u82e5 tag \u4e0d\u5339\u914d\u4e5f\u5c31\u65e0\u6cd5\u8c03\u7528\uff0c\u8fd9\u4e0e\u7ea6\u5b9a1\u4e0d\u540c\uff0c\u643a\u5e26\u6807\u7b7e\u7684\u8bf7\u6c42\u53ef\u4ee5\u964d\u7ea7\u8bbf\u95ee\u5230\u65e0\u6807\u7b7e\u7684\u670d\u52a1\uff0c\u4f46\u4e0d\u643a\u5e26\u6807\u7b7e/\u643a\u5e26\u5176\u4ed6\u79cd\u7c7b\u6807\u7b7e\u7684\u8bf7\u6c42\u6c38\u8fdc\u65e0\u6cd5\u8bbf\u95ee\u5230\u5176\u4ed6\u6807\u7b7e\u7684\u670d\u52a1\u3002 [^1]: 2.2.0 \u4ee5\u4e0a\u7248\u672c\u652f\u6301","title":"\u964d\u7ea7\u7ea6\u5b9a"},{"location":"user/demos/serialization/","text":"\u5728Dubbo\u4e2d\u4f7f\u7528\u9ad8\u6548\u7684Java\u5e8f\u5217\u5316\uff08Kryo\u548cFST\uff09 \u542f\u7528Kryo\u548cFST \u4f7f\u7528Kryo\u548cFST\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5728dubbo RPC\u7684XML\u914d\u7f6e\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u5c5e\u6027\u5373\u53ef\uff1a dubbo:protocol name= dubbo serialization= kryo / dubbo:protocol name= dubbo serialization= fst / \u6ce8\u518c\u88ab\u5e8f\u5217\u5316\u7c7b \u8981\u8ba9Kryo\u548cFST\u5b8c\u5168\u53d1\u6325\u51fa\u9ad8\u6027\u80fd\uff0c\u6700\u597d\u5c06\u90a3\u4e9b\u9700\u8981\u88ab\u5e8f\u5217\u5316\u7684\u7c7b\u6ce8\u518c\u5230dubbo\u7cfb\u7edf\u4e2d\uff0c\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u5982\u4e0b\u56de\u8c03\u63a5\u53e3\uff1a public class SerializationOptimizerImpl implements SerializationOptimizer { public Collection Class getSerializableClasses() { List Class classes = new LinkedList Class (); classes.add(BidRequest.class); classes.add(BidResponse.class); classes.add(Device.class); classes.add(Geo.class); classes.add(Impression.class); classes.add(SeatBid.class); return classes; } } \u7136\u540e\u5728XML\u914d\u7f6e\u4e2d\u6dfb\u52a0\uff1a dubbo:protocol name= dubbo serialization= kryo optimizer= org.apache.dubbo.demo.SerializationOptimizerImpl / \u5728\u6ce8\u518c\u8fd9\u4e9b\u7c7b\u540e\uff0c\u5e8f\u5217\u5316\u7684\u6027\u80fd\u53ef\u80fd\u88ab\u5927\u5927\u63d0\u5347\uff0c\u7279\u522b\u9488\u5bf9\u5c0f\u6570\u91cf\u7684\u5d4c\u5957\u5bf9\u8c61\u7684\u65f6\u5019\u3002 \u5f53\u7136\uff0c\u5728\u5bf9\u4e00\u4e2a\u7c7b\u505a\u5e8f\u5217\u5316\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u8fd8\u7ea7\u8054\u5f15\u7528\u5230\u5f88\u591a\u7c7b\uff0c\u6bd4\u5982Java\u96c6\u5408\u7c7b\u3002\u9488\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5df2\u7ecf\u81ea\u52a8\u5c06JDK\u4e2d\u7684\u5e38\u7528\u7c7b\u8fdb\u884c\u4e86\u6ce8\u518c\uff0c\u6240\u4ee5\u4f60\u4e0d\u9700\u8981\u91cd\u590d\u6ce8\u518c\u5b83\u4eec\uff08\u5f53\u7136\u4f60\u91cd\u590d\u6ce8\u518c\u4e86\u4e5f\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\uff09\uff0c\u5305\u62ec\uff1a GregorianCalendar InvocationHandler BigDecimal BigInteger Pattern BitSet URI UUID HashMap ArrayList LinkedList HashSet TreeSet Hashtable Date Calendar ConcurrentHashMap SimpleDateFormat Vector BitSet StringBuffer StringBuilder Object Object[] String[] byte[] char[] int[] float[] double[] \u7531\u4e8e\u6ce8\u518c\u88ab\u5e8f\u5217\u5316\u7684\u7c7b\u4ec5\u4ec5\u662f\u51fa\u4e8e\u6027\u80fd\u4f18\u5316\u7684\u76ee\u7684\uff0c\u6240\u4ee5\u5373\u4f7f\u4f60\u5fd8\u8bb0\u6ce8\u518c\u67d0\u4e9b\u7c7b\u4e5f\u6ca1\u6709\u5173\u7cfb\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5373\u4f7f\u4e0d\u6ce8\u518c\u4efb\u4f55\u7c7b\uff0cKryo\u548cFST\u7684\u6027\u80fd\u4f9d\u7136\u666e\u904d\u4f18\u4e8ehessian\u548cdubbo\u5e8f\u5217\u5316\u3002","title":"Kryo\u548cFST\u5e8f\u5217\u5316"},{"location":"user/demos/serialization/#dubbojavakryofst","text":"","title":"\u5728Dubbo\u4e2d\u4f7f\u7528\u9ad8\u6548\u7684Java\u5e8f\u5217\u5316\uff08Kryo\u548cFST\uff09"},{"location":"user/demos/serialization/#kryofst","text":"\u4f7f\u7528Kryo\u548cFST\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5728dubbo RPC\u7684XML\u914d\u7f6e\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u5c5e\u6027\u5373\u53ef\uff1a dubbo:protocol name= dubbo serialization= kryo / dubbo:protocol name= dubbo serialization= fst /","title":"\u542f\u7528Kryo\u548cFST"},{"location":"user/demos/serialization/#_1","text":"\u8981\u8ba9Kryo\u548cFST\u5b8c\u5168\u53d1\u6325\u51fa\u9ad8\u6027\u80fd\uff0c\u6700\u597d\u5c06\u90a3\u4e9b\u9700\u8981\u88ab\u5e8f\u5217\u5316\u7684\u7c7b\u6ce8\u518c\u5230dubbo\u7cfb\u7edf\u4e2d\uff0c\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u5982\u4e0b\u56de\u8c03\u63a5\u53e3\uff1a public class SerializationOptimizerImpl implements SerializationOptimizer { public Collection Class getSerializableClasses() { List Class classes = new LinkedList Class (); classes.add(BidRequest.class); classes.add(BidResponse.class); classes.add(Device.class); classes.add(Geo.class); classes.add(Impression.class); classes.add(SeatBid.class); return classes; } } \u7136\u540e\u5728XML\u914d\u7f6e\u4e2d\u6dfb\u52a0\uff1a dubbo:protocol name= dubbo serialization= kryo optimizer= org.apache.dubbo.demo.SerializationOptimizerImpl / \u5728\u6ce8\u518c\u8fd9\u4e9b\u7c7b\u540e\uff0c\u5e8f\u5217\u5316\u7684\u6027\u80fd\u53ef\u80fd\u88ab\u5927\u5927\u63d0\u5347\uff0c\u7279\u522b\u9488\u5bf9\u5c0f\u6570\u91cf\u7684\u5d4c\u5957\u5bf9\u8c61\u7684\u65f6\u5019\u3002 \u5f53\u7136\uff0c\u5728\u5bf9\u4e00\u4e2a\u7c7b\u505a\u5e8f\u5217\u5316\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u8fd8\u7ea7\u8054\u5f15\u7528\u5230\u5f88\u591a\u7c7b\uff0c\u6bd4\u5982Java\u96c6\u5408\u7c7b\u3002\u9488\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5df2\u7ecf\u81ea\u52a8\u5c06JDK\u4e2d\u7684\u5e38\u7528\u7c7b\u8fdb\u884c\u4e86\u6ce8\u518c\uff0c\u6240\u4ee5\u4f60\u4e0d\u9700\u8981\u91cd\u590d\u6ce8\u518c\u5b83\u4eec\uff08\u5f53\u7136\u4f60\u91cd\u590d\u6ce8\u518c\u4e86\u4e5f\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\uff09\uff0c\u5305\u62ec\uff1a GregorianCalendar InvocationHandler BigDecimal BigInteger Pattern BitSet URI UUID HashMap ArrayList LinkedList HashSet TreeSet Hashtable Date Calendar ConcurrentHashMap SimpleDateFormat Vector BitSet StringBuffer StringBuilder Object Object[] String[] byte[] char[] int[] float[] double[] \u7531\u4e8e\u6ce8\u518c\u88ab\u5e8f\u5217\u5316\u7684\u7c7b\u4ec5\u4ec5\u662f\u51fa\u4e8e\u6027\u80fd\u4f18\u5316\u7684\u76ee\u7684\uff0c\u6240\u4ee5\u5373\u4f7f\u4f60\u5fd8\u8bb0\u6ce8\u518c\u67d0\u4e9b\u7c7b\u4e5f\u6ca1\u6709\u5173\u7cfb\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5373\u4f7f\u4e0d\u6ce8\u518c\u4efb\u4f55\u7c7b\uff0cKryo\u548cFST\u7684\u6027\u80fd\u4f9d\u7136\u666e\u904d\u4f18\u4e8ehessian\u548cdubbo\u5e8f\u5217\u5316\u3002","title":"\u6ce8\u518c\u88ab\u5e8f\u5217\u5316\u7c7b"},{"location":"user/demos/service-container/","text":"\u670d\u52a1\u5bb9\u5668 \u670d\u52a1\u5bb9\u5668\u662f\u4e00\u4e2a standalone \u7684\u542f\u52a8\u7a0b\u5e8f\uff0c\u56e0\u4e3a\u540e\u53f0\u670d\u52a1\u4e0d\u9700\u8981 Tomcat \u6216 JBoss \u7b49 Web \u5bb9\u5668\u7684\u529f\u80fd\uff0c\u5982\u679c\u786c\u8981\u7528 Web \u5bb9\u5668\u53bb\u52a0\u8f7d\u670d\u52a1\u63d0\u4f9b\u65b9\uff0c\u589e\u52a0\u590d\u6742\u6027\uff0c\u4e5f\u6d6a\u8d39\u8d44\u6e90\u3002 \u670d\u52a1\u5bb9\u5668\u53ea\u662f\u4e00\u4e2a\u7b80\u5355\u7684 Main \u65b9\u6cd5\uff0c\u5e76\u52a0\u8f7d\u4e00\u4e2a\u7b80\u5355\u7684 Spring \u5bb9\u5668\uff0c\u7528\u4e8e\u66b4\u9732\u670d\u52a1\u3002 \u670d\u52a1\u5bb9\u5668\u7684\u52a0\u8f7d\u5185\u5bb9\u53ef\u4ee5\u6269\u5c55\uff0c\u5185\u7f6e\u4e86 spring, jetty, log4j \u7b49\u52a0\u8f7d\uff0c\u53ef\u901a\u8fc7 \u5bb9\u5668\u6269\u5c55\u70b9 \u8fdb\u884c\u6269\u5c55\u3002\u914d\u7f6e\u914d\u5728 java \u547d\u4ee4\u7684 -D \u53c2\u6570\u6216\u8005 dubbo.properties \u4e2d\u3002 \u5bb9\u5668\u7c7b\u578b Spring Container \u81ea\u52a8\u52a0\u8f7d META-INF/spring \u76ee\u5f55\u4e0b\u7684\u6240\u6709 Spring \u914d\u7f6e\u3002 \u914d\u7f6e spring \u914d\u7f6e\u52a0\u8f7d\u4f4d\u7f6e\uff1a properties dubbo.spring.config=classpath*:META-INF/spring/*.xml Jetty Container \u542f\u52a8\u4e00\u4e2a\u5185\u5d4c Jetty\uff0c\u7528\u4e8e\u6c47\u62a5\u72b6\u6001\u3002 \u914d\u7f6e\uff1a dubbo.jetty.port=8080 \uff1a\u914d\u7f6e jetty \u542f\u52a8\u7aef\u53e3 dubbo.jetty.directory=/foo/bar \uff1a\u914d\u7f6e\u53ef\u901a\u8fc7 jetty \u76f4\u63a5\u8bbf\u95ee\u7684\u76ee\u5f55\uff0c\u7528\u4e8e\u5b58\u653e\u9759\u6001\u6587\u4ef6 dubbo.jetty.page=log,status,system \uff1a\u914d\u7f6e\u663e\u793a\u7684\u9875\u9762\uff0c\u7f3a\u7701\u52a0\u8f7d\u6240\u6709\u9875\u9762 Log4j Container \u81ea\u52a8\u914d\u7f6e log4j \u7684\u914d\u7f6e\uff0c\u5728\u591a\u8fdb\u7a0b\u542f\u52a8\u65f6\uff0c\u81ea\u52a8\u7ed9\u65e5\u5fd7\u6587\u4ef6\u6309\u8fdb\u7a0b\u5206\u76ee\u5f55\u3002 \u914d\u7f6e\uff1a dubbo.log4j.file=/foo/bar.log \uff1a\u914d\u7f6e\u65e5\u5fd7\u6587\u4ef6\u8def\u5f84 dubbo.log4j.level=WARN \uff1a\u914d\u7f6e\u65e5\u5fd7\u7ea7\u522b dubbo.log4j.subdirectory=20880 \uff1a\u914d\u7f6e\u65e5\u5fd7\u5b50\u76ee\u5f55\uff0c\u7528\u4e8e\u591a\u8fdb\u7a0b\u542f\u52a8\uff0c\u907f\u514d\u51b2\u7a81 \u5bb9\u5668\u542f\u52a8 \u7f3a\u7701\u53ea\u52a0\u8f7d spring java org.apache.dubbo.container.Main \u901a\u8fc7 main \u51fd\u6570\u53c2\u6570\u4f20\u5165\u8981\u52a0\u8f7d\u7684\u5bb9\u5668 java org.apache.dubbo.container.Main spring jetty log4j \u901a\u8fc7 JVM \u542f\u52a8\u53c2\u6570\u4f20\u5165\u8981\u52a0\u8f7d\u7684\u5bb9\u5668 java org.apache.dubbo.container.Main -Ddubbo.container=spring,jetty,log4j \u901a\u8fc7 classpath \u4e0b\u7684 dubbo.properties \u914d\u7f6e\u4f20\u5165\u8981\u52a0\u8f7d\u7684\u5bb9\u5668 dubbo.container=spring,jetty,log4j","title":"\u670d\u52a1\u5bb9\u5668"},{"location":"user/demos/service-container/#_1","text":"\u670d\u52a1\u5bb9\u5668\u662f\u4e00\u4e2a standalone \u7684\u542f\u52a8\u7a0b\u5e8f\uff0c\u56e0\u4e3a\u540e\u53f0\u670d\u52a1\u4e0d\u9700\u8981 Tomcat \u6216 JBoss \u7b49 Web \u5bb9\u5668\u7684\u529f\u80fd\uff0c\u5982\u679c\u786c\u8981\u7528 Web \u5bb9\u5668\u53bb\u52a0\u8f7d\u670d\u52a1\u63d0\u4f9b\u65b9\uff0c\u589e\u52a0\u590d\u6742\u6027\uff0c\u4e5f\u6d6a\u8d39\u8d44\u6e90\u3002 \u670d\u52a1\u5bb9\u5668\u53ea\u662f\u4e00\u4e2a\u7b80\u5355\u7684 Main \u65b9\u6cd5\uff0c\u5e76\u52a0\u8f7d\u4e00\u4e2a\u7b80\u5355\u7684 Spring \u5bb9\u5668\uff0c\u7528\u4e8e\u66b4\u9732\u670d\u52a1\u3002 \u670d\u52a1\u5bb9\u5668\u7684\u52a0\u8f7d\u5185\u5bb9\u53ef\u4ee5\u6269\u5c55\uff0c\u5185\u7f6e\u4e86 spring, jetty, log4j \u7b49\u52a0\u8f7d\uff0c\u53ef\u901a\u8fc7 \u5bb9\u5668\u6269\u5c55\u70b9 \u8fdb\u884c\u6269\u5c55\u3002\u914d\u7f6e\u914d\u5728 java \u547d\u4ee4\u7684 -D \u53c2\u6570\u6216\u8005 dubbo.properties \u4e2d\u3002","title":"\u670d\u52a1\u5bb9\u5668"},{"location":"user/demos/service-container/#_2","text":"","title":"\u5bb9\u5668\u7c7b\u578b"},{"location":"user/demos/service-container/#spring-container","text":"\u81ea\u52a8\u52a0\u8f7d META-INF/spring \u76ee\u5f55\u4e0b\u7684\u6240\u6709 Spring \u914d\u7f6e\u3002 \u914d\u7f6e spring \u914d\u7f6e\u52a0\u8f7d\u4f4d\u7f6e\uff1a properties dubbo.spring.config=classpath*:META-INF/spring/*.xml","title":"Spring Container"},{"location":"user/demos/service-container/#jetty-container","text":"\u542f\u52a8\u4e00\u4e2a\u5185\u5d4c Jetty\uff0c\u7528\u4e8e\u6c47\u62a5\u72b6\u6001\u3002 \u914d\u7f6e\uff1a dubbo.jetty.port=8080 \uff1a\u914d\u7f6e jetty \u542f\u52a8\u7aef\u53e3 dubbo.jetty.directory=/foo/bar \uff1a\u914d\u7f6e\u53ef\u901a\u8fc7 jetty \u76f4\u63a5\u8bbf\u95ee\u7684\u76ee\u5f55\uff0c\u7528\u4e8e\u5b58\u653e\u9759\u6001\u6587\u4ef6 dubbo.jetty.page=log,status,system \uff1a\u914d\u7f6e\u663e\u793a\u7684\u9875\u9762\uff0c\u7f3a\u7701\u52a0\u8f7d\u6240\u6709\u9875\u9762","title":"Jetty Container"},{"location":"user/demos/service-container/#log4j-container","text":"\u81ea\u52a8\u914d\u7f6e log4j \u7684\u914d\u7f6e\uff0c\u5728\u591a\u8fdb\u7a0b\u542f\u52a8\u65f6\uff0c\u81ea\u52a8\u7ed9\u65e5\u5fd7\u6587\u4ef6\u6309\u8fdb\u7a0b\u5206\u76ee\u5f55\u3002 \u914d\u7f6e\uff1a dubbo.log4j.file=/foo/bar.log \uff1a\u914d\u7f6e\u65e5\u5fd7\u6587\u4ef6\u8def\u5f84 dubbo.log4j.level=WARN \uff1a\u914d\u7f6e\u65e5\u5fd7\u7ea7\u522b dubbo.log4j.subdirectory=20880 \uff1a\u914d\u7f6e\u65e5\u5fd7\u5b50\u76ee\u5f55\uff0c\u7528\u4e8e\u591a\u8fdb\u7a0b\u542f\u52a8\uff0c\u907f\u514d\u51b2\u7a81","title":"Log4j Container"},{"location":"user/demos/service-container/#_3","text":"\u7f3a\u7701\u53ea\u52a0\u8f7d spring java org.apache.dubbo.container.Main \u901a\u8fc7 main \u51fd\u6570\u53c2\u6570\u4f20\u5165\u8981\u52a0\u8f7d\u7684\u5bb9\u5668 java org.apache.dubbo.container.Main spring jetty log4j \u901a\u8fc7 JVM \u542f\u52a8\u53c2\u6570\u4f20\u5165\u8981\u52a0\u8f7d\u7684\u5bb9\u5668 java org.apache.dubbo.container.Main -Ddubbo.container=spring,jetty,log4j \u901a\u8fc7 classpath \u4e0b\u7684 dubbo.properties \u914d\u7f6e\u4f20\u5165\u8981\u52a0\u8f7d\u7684\u5bb9\u5668 dubbo.container=spring,jetty,log4j","title":"\u5bb9\u5668\u542f\u52a8"},{"location":"user/demos/service-downgrade/","text":"\u670d\u52a1\u964d\u7ea7 \u53ef\u4ee5\u901a\u8fc7\u670d\u52a1\u964d\u7ea7\u529f\u80fd [^1] \u4e34\u65f6\u5c4f\u853d\u67d0\u4e2a\u51fa\u9519\u7684\u975e\u5173\u952e\u670d\u52a1\uff0c\u5e76\u5b9a\u4e49\u964d\u7ea7\u540e\u7684\u8fd4\u56de\u7b56\u7565\u3002 \u5411\u6ce8\u518c\u4e2d\u5fc3\u5199\u5165\u52a8\u6001\u914d\u7f6e\u8986\u76d6\u89c4\u5219\uff1a RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension(); Registry registry = registryFactory.getRegistry(URL.valueOf( zookeeper://10.20.153.10:2181 )); registry.register(URL.valueOf( override://0.0.0.0/com.foo.BarService?category=configurators dynamic=false application=foo mock=force:return+null )); \u5176\u4e2d\uff1a mock=force:return+null \u8868\u793a\u6d88\u8d39\u65b9\u5bf9\u8be5\u670d\u52a1\u7684\u65b9\u6cd5\u8c03\u7528\u90fd\u76f4\u63a5\u8fd4\u56de null \u503c\uff0c\u4e0d\u53d1\u8d77\u8fdc\u7a0b\u8c03\u7528\u3002\u7528\u6765\u5c4f\u853d\u4e0d\u91cd\u8981\u670d\u52a1\u4e0d\u53ef\u7528\u65f6\u5bf9\u8c03\u7528\u65b9\u7684\u5f71\u54cd\u3002 \u8fd8\u53ef\u4ee5\u6539\u4e3a mock=fail:return+null \u8868\u793a\u6d88\u8d39\u65b9\u5bf9\u8be5\u670d\u52a1\u7684\u65b9\u6cd5\u8c03\u7528\u5728\u5931\u8d25\u540e\uff0c\u518d\u8fd4\u56de null \u503c\uff0c\u4e0d\u629b\u5f02\u5e38\u3002\u7528\u6765\u5bb9\u5fcd\u4e0d\u91cd\u8981\u670d\u52a1\u4e0d\u7a33\u5b9a\u65f6\u5bf9\u8c03\u7528\u65b9\u7684\u5f71\u54cd\u3002 [^1]: 2.2.0 \u4ee5\u4e0a\u7248\u672c\u652f\u6301","title":"\u670d\u52a1\u964d\u7ea7"},{"location":"user/demos/service-downgrade/#_1","text":"\u53ef\u4ee5\u901a\u8fc7\u670d\u52a1\u964d\u7ea7\u529f\u80fd [^1] \u4e34\u65f6\u5c4f\u853d\u67d0\u4e2a\u51fa\u9519\u7684\u975e\u5173\u952e\u670d\u52a1\uff0c\u5e76\u5b9a\u4e49\u964d\u7ea7\u540e\u7684\u8fd4\u56de\u7b56\u7565\u3002 \u5411\u6ce8\u518c\u4e2d\u5fc3\u5199\u5165\u52a8\u6001\u914d\u7f6e\u8986\u76d6\u89c4\u5219\uff1a RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension(); Registry registry = registryFactory.getRegistry(URL.valueOf( zookeeper://10.20.153.10:2181 )); registry.register(URL.valueOf( override://0.0.0.0/com.foo.BarService?category=configurators dynamic=false application=foo mock=force:return+null )); \u5176\u4e2d\uff1a mock=force:return+null \u8868\u793a\u6d88\u8d39\u65b9\u5bf9\u8be5\u670d\u52a1\u7684\u65b9\u6cd5\u8c03\u7528\u90fd\u76f4\u63a5\u8fd4\u56de null \u503c\uff0c\u4e0d\u53d1\u8d77\u8fdc\u7a0b\u8c03\u7528\u3002\u7528\u6765\u5c4f\u853d\u4e0d\u91cd\u8981\u670d\u52a1\u4e0d\u53ef\u7528\u65f6\u5bf9\u8c03\u7528\u65b9\u7684\u5f71\u54cd\u3002 \u8fd8\u53ef\u4ee5\u6539\u4e3a mock=fail:return+null \u8868\u793a\u6d88\u8d39\u65b9\u5bf9\u8be5\u670d\u52a1\u7684\u65b9\u6cd5\u8c03\u7528\u5728\u5931\u8d25\u540e\uff0c\u518d\u8fd4\u56de null \u503c\uff0c\u4e0d\u629b\u5f02\u5e38\u3002\u7528\u6765\u5bb9\u5fcd\u4e0d\u91cd\u8981\u670d\u52a1\u4e0d\u7a33\u5b9a\u65f6\u5bf9\u8c03\u7528\u65b9\u7684\u5f71\u54cd\u3002 [^1]: 2.2.0 \u4ee5\u4e0a\u7248\u672c\u652f\u6301","title":"\u670d\u52a1\u964d\u7ea7"},{"location":"user/demos/service-group/","text":"\u670d\u52a1\u5206\u7ec4 \u5f53\u4e00\u4e2a\u63a5\u53e3\u6709\u591a\u79cd\u5b9e\u73b0\u65f6\uff0c\u53ef\u4ee5\u7528 group \u533a\u5206\u3002 \u670d\u52a1 dubbo:service group= feedback interface= com.xxx.IndexService / dubbo:service group= member interface= com.xxx.IndexService / \u5f15\u7528 dubbo:reference id= feedbackIndexService group= feedback interface= com.xxx.IndexService / dubbo:reference id= memberIndexService group= member interface= com.xxx.IndexService / \u4efb\u610f\u7ec4 [^1]\uff1a dubbo:reference id= barService interface= com.foo.BarService group= * / [^1]: 2.2.0 \u4ee5\u4e0a\u7248\u672c\u652f\u6301\uff0c\u603b\u662f\u53ea\u8c03\u4e00\u4e2a\u53ef\u7528\u7ec4\u7684\u5b9e\u73b0","title":"\u670d\u52a1\u5206\u7ec4"},{"location":"user/demos/service-group/#_1","text":"\u5f53\u4e00\u4e2a\u63a5\u53e3\u6709\u591a\u79cd\u5b9e\u73b0\u65f6\uff0c\u53ef\u4ee5\u7528 group \u533a\u5206\u3002","title":"\u670d\u52a1\u5206\u7ec4"},{"location":"user/demos/service-group/#_2","text":"dubbo:service group= feedback interface= com.xxx.IndexService / dubbo:service group= member interface= com.xxx.IndexService /","title":"\u670d\u52a1"},{"location":"user/demos/service-group/#_3","text":"dubbo:reference id= feedbackIndexService group= feedback interface= com.xxx.IndexService / dubbo:reference id= memberIndexService group= member interface= com.xxx.IndexService / \u4efb\u610f\u7ec4 [^1]\uff1a dubbo:reference id= barService interface= com.foo.BarService group= * / [^1]: 2.2.0 \u4ee5\u4e0a\u7248\u672c\u652f\u6301\uff0c\u603b\u662f\u53ea\u8c03\u4e00\u4e2a\u53ef\u7528\u7ec4\u7684\u5b9e\u73b0","title":"\u5f15\u7528"},{"location":"user/demos/set-host/","text":"\u80cc\u666f \u5728 dubbo \u4e2d, provider \u542f\u52a8\u65f6\u4e3b\u8981\u505a\u4e24\u4e2a\u4e8b\u60c5,\u4e00\u662f\u542f\u52a8server,\u4e8c\u662f\u5411\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u670d\u52a1.\u542f\u52a8server\u65f6\u9700\u8981\u7ed1\u5b9asocket,\u5411\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u670d\u52a1\u65f6\u4e5f\u9700\u8981\u53d1\u9001socket\u552f\u4e00\u6807\u8bc6\u670d\u52a1\u5730\u5740. dubbo \u4e2d\u4e0d\u8bbe\u7f6e host \u65f6\u9ed8\u8ba4 host \u662f\u4ec0\u4e48? \u90a3\u5728 dubbo \u4e2d\u5982\u4f55\u6307\u5b9a\u670d\u52a1\u7684 host ,\u6211\u4eec\u662f\u5426\u53ef\u4ee5\u7528hostname\u6216domain\u4ee3\u66ffIP\u5730\u5740\u4f5c\u4e3a host ? \u5728\u4f7f\u7528docker\u65f6,\u6709\u65f6\u9700\u8981\u8bbe\u7f6e\u7aef\u53e3\u6620\u5c04,\u6b64\u65f6,\u542f\u52a8server\u65f6\u7ed1\u5b9a\u7684socket\u548c\u5411\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u7684socket\u4f7f\u7528\u4e0d\u540c\u7684\u7aef\u53e3\u53f7,\u6b64\u65f6\u53c8\u8be5\u5982\u4f55\u8bbe\u7f6e? dubbo \u4e2d\u4e0d\u8bbe\u7f6e host \u65f6\u9ed8\u8ba4 host \u662f\u4ec0\u4e48 \u4e00\u822c\u7684 dubbo \u534f\u8bae\u914d\u7f6e\u5982\u4e0b: ... dubbo:protocol name= dubbo port= 20890 / ... \u53ef\u4ee5\u770b\u5230,\u53ea\u914d\u7f6e\u4e86\u7aef\u53e3\u53f7,\u6ca1\u6709\u914d\u7f6e host ,\u6b64\u65f6\u8bbe\u7f6e\u7684 host \u53c8\u662f\u4ec0\u4e48\u5462? \u67e5\u770b\u4ee3\u7801\u53d1\u73b0,\u5728 org.apache.dubbo.config.ServiceConfig#findConfigedHosts() \u4e2d,\u901a\u8fc7 InetAddress.getLocalHost().getHostAddress() \u83b7\u53d6\u9ed8\u8ba4 host .\u5176\u8fd4\u56de\u503c\u5982\u4e0b: \u672a\u8054\u7f51\u65f6,\u8fd4\u56de127.0.0.1 \u5728\u963f\u91cc\u4e91\u670d\u52a1\u5668\u4e2d,\u8fd4\u56de\u79c1\u6709\u5730\u5740,\u5982:172.18.46.234 \u5728\u672c\u673a\u6d4b\u8bd5\u65f6,\u8fd4\u56de\u516c\u6709\u5730\u5740,\u5982:30.5.10.11 \u90a3\u5728 dubbo \u4e2d\u5982\u4f55\u6307\u5b9a\u670d\u52a1\u7684socket? \u9664\u6b64\u4e4b\u5916,\u53ef\u4ee5\u901a\u8fc7 dubbo.protocol \u6216 dubbo.provider \u7684 host \u5c5e\u6027\u5bf9 host \u8fdb\u884c\u914d\u7f6e,\u652f\u6301IP\u5730\u5740\u548c\u57df\u540d,\u5982\u4e0b: ... dubbo:protocol name= dubbo port= 20890 host= www.example.com / ... \u5728\u4f7f\u7528docker\u65f6,\u6709\u65f6\u9700\u8981\u8bbe\u7f6e\u7aef\u53e3\u6620\u5c04,\u6b64\u65f6,\u542f\u52a8server\u65f6\u7ed1\u5b9a\u7684socket\u548c\u5411\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u7684socket\u4f7f\u7528\u4e0d\u540c\u7684\u7aef\u53e3\u53f7,\u6b64\u65f6\u53c8\u8be5\u5982\u4f55\u8bbe\u7f6e? \u89c1 dubbo\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u8bbe\u7f6ehost \u6709\u4e9b\u90e8\u7f72\u573a\u666f\u9700\u8981\u52a8\u6001\u6307\u5b9a\u670d\u52a1\u6ce8\u518c\u7684\u5730\u5740\uff0c\u5982docker bridge\u7f51\u7edc\u6a21\u5f0f\u4e0b\u8981\u6307\u5b9a\u6ce8\u518c\u5bbf\u4e3b\u673aip\u4ee5\u5b9e\u73b0\u5916\u7f51\u901a\u4fe1\u3002dubbo\u63d0\u4f9b\u4e86\u4e24\u5bf9\u542f\u52a8\u9636\u6bb5\u7684\u7cfb\u7edf\u5c5e\u6027\uff0c\u7528\u4e8e\u8bbe\u7f6e\u5bf9\u5916\u901a\u4fe1\u7684ip\u3001port\u5730\u5740 DUBBO_IP_TO_REGISTRY --- \u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3\u7684ip\u5730\u5740 DUBBO_PORT_TO_REGISTRY --- \u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3\u7684port\u7aef\u53e3 DUBBO_IP_TO_BIND --- \u76d1\u542cip\u5730\u5740 DUBBO_PORT_TO_BIND --- \u76d1\u542cport\u7aef\u53e3 \u4ee5\u4e0a\u56db\u4e2a\u914d\u7f6e\u9879\u5747\u4e3a\u53ef\u9009\u9879\uff0c\u5982\u4e0d\u914d\u7f6edubbo\u4f1a\u81ea\u52a8\u83b7\u53d6ip\u4e0e\u7aef\u53e3\uff0c\u8bf7\u6839\u636e\u5177\u4f53\u7684\u90e8\u7f72\u573a\u666f\u7075\u6d3b\u9009\u62e9\u914d\u7f6e\u3002 dubbo\u652f\u6301\u591a\u534f\u8bae\uff0c\u5982\u679c\u4e00\u4e2a\u5e94\u7528\u540c\u65f6\u66b4\u9732\u591a\u4e2a\u4e0d\u540c\u534f\u8bae\u670d\u52a1\uff0c\u4e14\u9700\u8981\u4e3a\u6bcf\u4e2a\u670d\u52a1\u5355\u72ec\u6307\u5b9aip\u6216port\uff0c\u8bf7\u5206\u522b\u5728\u4ee5\u4e0a\u5c5e\u6027\u524d\u52a0\u534f\u8bae\u524d\u7f00\u3002 \u5982\uff1a HESSIAN_DUBBO_PORT_TO_BIND hessian\u534f\u8bae\u7ed1\u5b9a\u7684port DUBBO_DUBBO_PORT_TO_BIND dubbo\u534f\u8bae\u7ed1\u5b9a\u7684port HESSIAN_DUBBO_IP_TO_REGISTRY hessian\u534f\u8bae\u6ce8\u518c\u7684ip DUBBO_DUBBO_PORT_TO_BIND dubbo\u534f\u8bae\u6ce8\u518c\u7684ip PORT_TO_REGISTRY\u6216IP_TO_REGISTRY\u4e0d\u4f1a\u7528\u4f5c\u9ed8\u8ba4PORT_TO_BIND\u6216IP_TO_BIND\uff0c\u4f46\u662f\u53cd\u8fc7\u6765\u662f\u6210\u7acb\u7684 \u5982\u8bbe\u7f6ePORT_TO_REGISTRY=20881 IP_TO_REGISTRY=30.5.97.6\uff0c\u5219PORT_TO_BIND IP_TO_BIND\u4e0d\u53d7\u5f71\u54cd \u5982\u679c\u8bbe\u7f6ePORT_TO_BIND=20881 IP_TO_BIND=30.5.97.6\uff0c\u5219\u9ed8\u8ba4PORT_TO_REGISTRY=20881 IP_TO_REGISTRY=30.5.97.6 \u603b\u7ed3 \u53ef\u4ee5\u901a\u8fc7 dubbo.protocol \u6216 dubbo.provider \u7684 host \u5c5e\u6027\u5bf9 host \u8fdb\u884c\u914d\u7f6e,\u652f\u6301IP\u5730\u5740\u548c\u57df\u540d.\u4f46\u6b64\u65f6\u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3\u7684IP\u5730\u5740\u548c\u76d1\u542cIP\u5730\u5740\u662f\u540c\u4e00\u4e2a\u503c \u4e3a\u4e86\u89e3\u51b3\u5728\u865a\u62df\u73af\u5883\u6216\u5c40\u57df\u7f51\u5185consumer\u65e0\u6cd5\u4e0eprovider\u901a\u4fe1\u7684\u95ee\u9898,\u53ef\u4ee5\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u5206\u522b\u8bbe\u7f6e\u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3\u7684IP\u5730\u5740\u548c\u76d1\u542cIP\u5730\u5740,\u5176\u4f18\u5148\u7ea7\u9ad8\u4e8e dubbo.protocol \u6216 dubbo.provider \u7684 host \u914d\u7f6e \u53c2\u8003 [Proposal]support hostname or domain in service discovery. dubbo\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u8bbe\u7f6ehost","title":"Set host"},{"location":"user/demos/set-host/#_1","text":"\u5728 dubbo \u4e2d, provider \u542f\u52a8\u65f6\u4e3b\u8981\u505a\u4e24\u4e2a\u4e8b\u60c5,\u4e00\u662f\u542f\u52a8server,\u4e8c\u662f\u5411\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u670d\u52a1.\u542f\u52a8server\u65f6\u9700\u8981\u7ed1\u5b9asocket,\u5411\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u670d\u52a1\u65f6\u4e5f\u9700\u8981\u53d1\u9001socket\u552f\u4e00\u6807\u8bc6\u670d\u52a1\u5730\u5740. dubbo \u4e2d\u4e0d\u8bbe\u7f6e host \u65f6\u9ed8\u8ba4 host \u662f\u4ec0\u4e48? \u90a3\u5728 dubbo \u4e2d\u5982\u4f55\u6307\u5b9a\u670d\u52a1\u7684 host ,\u6211\u4eec\u662f\u5426\u53ef\u4ee5\u7528hostname\u6216domain\u4ee3\u66ffIP\u5730\u5740\u4f5c\u4e3a host ? \u5728\u4f7f\u7528docker\u65f6,\u6709\u65f6\u9700\u8981\u8bbe\u7f6e\u7aef\u53e3\u6620\u5c04,\u6b64\u65f6,\u542f\u52a8server\u65f6\u7ed1\u5b9a\u7684socket\u548c\u5411\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u7684socket\u4f7f\u7528\u4e0d\u540c\u7684\u7aef\u53e3\u53f7,\u6b64\u65f6\u53c8\u8be5\u5982\u4f55\u8bbe\u7f6e?","title":"\u80cc\u666f"},{"location":"user/demos/set-host/#dubbohosthost","text":"\u4e00\u822c\u7684 dubbo \u534f\u8bae\u914d\u7f6e\u5982\u4e0b: ... dubbo:protocol name= dubbo port= 20890 / ... \u53ef\u4ee5\u770b\u5230,\u53ea\u914d\u7f6e\u4e86\u7aef\u53e3\u53f7,\u6ca1\u6709\u914d\u7f6e host ,\u6b64\u65f6\u8bbe\u7f6e\u7684 host \u53c8\u662f\u4ec0\u4e48\u5462? \u67e5\u770b\u4ee3\u7801\u53d1\u73b0,\u5728 org.apache.dubbo.config.ServiceConfig#findConfigedHosts() \u4e2d,\u901a\u8fc7 InetAddress.getLocalHost().getHostAddress() \u83b7\u53d6\u9ed8\u8ba4 host .\u5176\u8fd4\u56de\u503c\u5982\u4e0b: \u672a\u8054\u7f51\u65f6,\u8fd4\u56de127.0.0.1 \u5728\u963f\u91cc\u4e91\u670d\u52a1\u5668\u4e2d,\u8fd4\u56de\u79c1\u6709\u5730\u5740,\u5982:172.18.46.234 \u5728\u672c\u673a\u6d4b\u8bd5\u65f6,\u8fd4\u56de\u516c\u6709\u5730\u5740,\u5982:30.5.10.11","title":"dubbo\u4e2d\u4e0d\u8bbe\u7f6ehost\u65f6\u9ed8\u8ba4host\u662f\u4ec0\u4e48"},{"location":"user/demos/set-host/#dubbosocket","text":"\u9664\u6b64\u4e4b\u5916,\u53ef\u4ee5\u901a\u8fc7 dubbo.protocol \u6216 dubbo.provider \u7684 host \u5c5e\u6027\u5bf9 host \u8fdb\u884c\u914d\u7f6e,\u652f\u6301IP\u5730\u5740\u548c\u57df\u540d,\u5982\u4e0b: ... dubbo:protocol name= dubbo port= 20890 host= www.example.com / ...","title":"\u90a3\u5728dubbo\u4e2d\u5982\u4f55\u6307\u5b9a\u670d\u52a1\u7684socket?"},{"location":"user/demos/set-host/#dockerserversocketsocket","text":"\u89c1 dubbo\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u8bbe\u7f6ehost \u6709\u4e9b\u90e8\u7f72\u573a\u666f\u9700\u8981\u52a8\u6001\u6307\u5b9a\u670d\u52a1\u6ce8\u518c\u7684\u5730\u5740\uff0c\u5982docker bridge\u7f51\u7edc\u6a21\u5f0f\u4e0b\u8981\u6307\u5b9a\u6ce8\u518c\u5bbf\u4e3b\u673aip\u4ee5\u5b9e\u73b0\u5916\u7f51\u901a\u4fe1\u3002dubbo\u63d0\u4f9b\u4e86\u4e24\u5bf9\u542f\u52a8\u9636\u6bb5\u7684\u7cfb\u7edf\u5c5e\u6027\uff0c\u7528\u4e8e\u8bbe\u7f6e\u5bf9\u5916\u901a\u4fe1\u7684ip\u3001port\u5730\u5740 DUBBO_IP_TO_REGISTRY --- \u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3\u7684ip\u5730\u5740 DUBBO_PORT_TO_REGISTRY --- \u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3\u7684port\u7aef\u53e3 DUBBO_IP_TO_BIND --- \u76d1\u542cip\u5730\u5740 DUBBO_PORT_TO_BIND --- \u76d1\u542cport\u7aef\u53e3 \u4ee5\u4e0a\u56db\u4e2a\u914d\u7f6e\u9879\u5747\u4e3a\u53ef\u9009\u9879\uff0c\u5982\u4e0d\u914d\u7f6edubbo\u4f1a\u81ea\u52a8\u83b7\u53d6ip\u4e0e\u7aef\u53e3\uff0c\u8bf7\u6839\u636e\u5177\u4f53\u7684\u90e8\u7f72\u573a\u666f\u7075\u6d3b\u9009\u62e9\u914d\u7f6e\u3002 dubbo\u652f\u6301\u591a\u534f\u8bae\uff0c\u5982\u679c\u4e00\u4e2a\u5e94\u7528\u540c\u65f6\u66b4\u9732\u591a\u4e2a\u4e0d\u540c\u534f\u8bae\u670d\u52a1\uff0c\u4e14\u9700\u8981\u4e3a\u6bcf\u4e2a\u670d\u52a1\u5355\u72ec\u6307\u5b9aip\u6216port\uff0c\u8bf7\u5206\u522b\u5728\u4ee5\u4e0a\u5c5e\u6027\u524d\u52a0\u534f\u8bae\u524d\u7f00\u3002 \u5982\uff1a HESSIAN_DUBBO_PORT_TO_BIND hessian\u534f\u8bae\u7ed1\u5b9a\u7684port DUBBO_DUBBO_PORT_TO_BIND dubbo\u534f\u8bae\u7ed1\u5b9a\u7684port HESSIAN_DUBBO_IP_TO_REGISTRY hessian\u534f\u8bae\u6ce8\u518c\u7684ip DUBBO_DUBBO_PORT_TO_BIND dubbo\u534f\u8bae\u6ce8\u518c\u7684ip PORT_TO_REGISTRY\u6216IP_TO_REGISTRY\u4e0d\u4f1a\u7528\u4f5c\u9ed8\u8ba4PORT_TO_BIND\u6216IP_TO_BIND\uff0c\u4f46\u662f\u53cd\u8fc7\u6765\u662f\u6210\u7acb\u7684 \u5982\u8bbe\u7f6ePORT_TO_REGISTRY=20881 IP_TO_REGISTRY=30.5.97.6\uff0c\u5219PORT_TO_BIND IP_TO_BIND\u4e0d\u53d7\u5f71\u54cd \u5982\u679c\u8bbe\u7f6ePORT_TO_BIND=20881 IP_TO_BIND=30.5.97.6\uff0c\u5219\u9ed8\u8ba4PORT_TO_REGISTRY=20881 IP_TO_REGISTRY=30.5.97.6","title":"\u5728\u4f7f\u7528docker\u65f6,\u6709\u65f6\u9700\u8981\u8bbe\u7f6e\u7aef\u53e3\u6620\u5c04,\u6b64\u65f6,\u542f\u52a8server\u65f6\u7ed1\u5b9a\u7684socket\u548c\u5411\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u7684socket\u4f7f\u7528\u4e0d\u540c\u7684\u7aef\u53e3\u53f7,\u6b64\u65f6\u53c8\u8be5\u5982\u4f55\u8bbe\u7f6e?"},{"location":"user/demos/set-host/#_2","text":"\u53ef\u4ee5\u901a\u8fc7 dubbo.protocol \u6216 dubbo.provider \u7684 host \u5c5e\u6027\u5bf9 host \u8fdb\u884c\u914d\u7f6e,\u652f\u6301IP\u5730\u5740\u548c\u57df\u540d.\u4f46\u6b64\u65f6\u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3\u7684IP\u5730\u5740\u548c\u76d1\u542cIP\u5730\u5740\u662f\u540c\u4e00\u4e2a\u503c \u4e3a\u4e86\u89e3\u51b3\u5728\u865a\u62df\u73af\u5883\u6216\u5c40\u57df\u7f51\u5185consumer\u65e0\u6cd5\u4e0eprovider\u901a\u4fe1\u7684\u95ee\u9898,\u53ef\u4ee5\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u5206\u522b\u8bbe\u7f6e\u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3\u7684IP\u5730\u5740\u548c\u76d1\u542cIP\u5730\u5740,\u5176\u4f18\u5148\u7ea7\u9ad8\u4e8e dubbo.protocol \u6216 dubbo.provider \u7684 host \u914d\u7f6e","title":"\u603b\u7ed3"},{"location":"user/demos/set-host/#_3","text":"[Proposal]support hostname or domain in service discovery. dubbo\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u8bbe\u7f6ehost","title":"\u53c2\u8003"},{"location":"user/demos/simplify-registry-data/","text":"\u80cc\u666f dubbo provider\u4e2d\u7684\u670d\u52a1\u914d\u7f6e\u9879\u6709\u63a5\u8fd1 30\u4e2a\u914d\u7f6e\u9879 \u3002 \u6392\u9664\u6ce8\u518c\u4e2d\u5fc3\u670d\u52a1\u6cbb\u7406\u9700\u8981\u4e4b\u5916\uff0c\u5f88\u5927\u4e00\u90e8\u5206\u914d\u7f6e\u9879\u662fprovider\u81ea\u5df1\u4f7f\u7528\uff0c\u4e0d\u9700\u8981\u900f\u4f20\u7ed9\u6d88\u8d39\u8005\u3002\u8fd9\u90e8\u5206\u6570\u636e\u4e0d\u9700\u8981\u8fdb\u5165\u6ce8\u518c\u4e2d\u5fc3\uff0c\u800c\u53ea\u9700\u8981\u4ee5key-value\u5f62\u5f0f\u6301\u4e45\u5316\u5b58\u50a8\u3002 dubbo consumer\u4e2d\u7684\u914d\u7f6e\u9879\u4e5f\u6709 20+\u4e2a\u914d\u7f6e\u9879 \u3002\u5728\u6ce8\u518c\u4e2d\u5fc3\u4e4b\u4e2d\uff0c\u670d\u52a1\u6d88\u8d39\u8005\u5217\u8868\u4e2d\u53ea\u9700\u8981\u5173\u6ce8application\uff0cversion\uff0cgroup\uff0cip\uff0cdubbo\u7248\u672c\u7b49\u5c11\u91cf\u914d\u7f6e\uff0c\u5176\u4ed6\u914d\u7f6e\u4e5f\u53ef\u4ee5\u4ee5key-value\u5f62\u5f0f\u6301\u4e45\u5316\u5b58\u50a8\u3002 \u8fd9\u4e9b\u6570\u636e\u662f\u4ee5\u670d\u52a1\u4e3a\u7ef4\u5ea6\u6ce8\u518c\u8fdb\u5165\u6ce8\u518c\u4e2d\u5fc3\uff0c\u5bfc\u81f4\u4e86\u6570\u636e\u91cf\u7684\u81a8\u80c0\uff0c\u8fdb\u800c\u5f15\u53d1\u6ce8\u518c\u4e2d\u5fc3(\u5982zookeeper)\u7684\u7f51\u7edc\u5f00\u9500\u589e\u5927\uff0c\u6027\u80fd\u964d\u4f4e\u3002 \u73b0\u6709\u529f\u80fdsample \u5f53\u524d\u73b0\u72b6\u4e00\u4e2a\u7b80\u5355\u5c55\u793a\u3002\u901a\u8fc7\u8fd9\u4e2a\u5c55\u793a\uff0c\u5206\u6790\u4e0b\u4e3a\u4ec0\u4e48\u9700\u8981\u505a\u7b80\u5316\u914d\u7f6e\u3002 \u53c2\u8003sample\u5b50\u5de5\u7a0b\uff1a dubbo-samples-simplified-registry/dubbo-samples-simplified-registry-nosimple \uff08\u8dd1sample\u524d\uff0c\u5148\u8dd1\u4e0bZKClean\u8fdb\u884c\u914d\u7f6e\u9879\u6e05\u7406\uff09 dubbo-provider.xml\u914d\u7f6e dubbo:application name= simplified-registry-nosimple-provider / dubbo:registry address= zookeeper://127.0.0.1:2181 / bean id= demoService class= org.apache.dubbo.samples.simplified.registry.nosimple.impl.DemoServiceImpl / dubbo:service async= true interface= org.apache.dubbo.samples.simplified.registry.nosimple.api.DemoService version= 1.2.3 group= dubbo-simple ref= demoService executes= 4500 retries= 7 owner= vict timeout= 5300 / \u542f\u52a8provider\u7684main\u65b9\u6cd5\u4e4b\u540e\uff0c\u67e5\u770bzookeeper\u7684\u53f6\u5b50\u8282\u70b9\uff08\u8def\u5f84\u4e3a\uff1a/dubbo/org.apache.dubbo.samples.simplified.registry.nosimple.api.DemoService/providers\u76ee\u5f55\u4e0b\uff09\u7684\u5185\u5bb9\u5982\u4e0b\uff1a dubbo%3A%2F%2F30.5.124.158%3A20880%2Forg.apache.dubbo.samples.simplified.registry.nosimple.api.DemoService%3Fanyhost%3Dtrue%26application%3Dsimplified-registry-xml-provider%26async%3Dtrue%26dubbo%3D2.0.2%26 executes %3D4500%26generic%3Dfalse%26group%3Ddubbo-simple%26interface%3Dorg.apache.dubbo.samples.simplified.registry.nosimple.api.DemoService%26methods%3DsayHello%26 owner %3Dvict%26pid%3D2767%26 retries %3D7%26revision%3D1.2.3%26side%3Dprovider%26 timeout %3D5300%26timestamp%3D1542361152795%26valid%3Dtrue%26version%3D1.2.3 \u4ece\u52a0\u7c97\u5b57\u4f53\u4e2d\u80fd\u770b\u5230\u6709\uff1aexecutes, retries, owner, timeout. \u4f46\u662f\u8fd9\u4e9b\u5b57\u6bb5\u4e0d\u662f\u6bcf\u4e2a\u90fd\u9700\u8981\u4f20\u9012\u7ed9dubbo ops\u6216\u8005dubbo consumer\u3002 \u540c\u6837\u7684\uff0cconsumer\u4e5f\u6709\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ef\u4ee5\u5728\u4f8b\u5b50\u4e2d\u542f\u52a8Consumer\u7684main\u65b9\u6cd5\u8fdb\u884c\u67e5\u770b\u3002 \u8bbe\u8ba1\u76ee\u6807\u548c\u5b97\u65e8 \u671f\u671b\u7b80\u5316\u8fdb\u5165\u6ce8\u518c\u4e2d\u5fc3\u7684provider\u548cconsumer\u914d\u7f6e\u6570\u91cf\u3002 \u671f\u671b\u5c06\u90e8\u5206\u914d\u7f6e\u9879\u4ee5\u5176\u4ed6\u5f62\u5f0f\u5b58\u50a8\u3002\u8fd9\u4e9b\u914d\u7f6e\u9879\u9700\u8981\u6ee1\u8db3\uff1a\u4e0d\u5728\u670d\u52a1\u8c03\u7528\u94fe\u8def\u4e0a\uff0c\u540c\u65f6\u8fd9\u4e9b\u914d\u7f6e\u9879\u4e0d\u5728\u6ce8\u518c\u4e2d\u5fc3\u7684\u6838\u5fc3\u94fe\u8def\u4e0a(\u670d\u52a1\u67e5\u8be2\uff0c\u670d\u52a1\u5217\u8868)\u3002 \u914d\u7f6e \u7b80\u5316\u6ce8\u518c\u4e2d\u5fc3\u7684\u914d\u7f6e\uff0c\u53ea\u57282.7\u4e4b\u540e\u7684\u7248\u672c\u4e2d\u8fdb\u884c\u652f\u6301\u3002 \u5f00\u542fprovider\u6216\u8005consumer\u7b80\u5316\u914d\u7f6e\u4e4b\u540e\uff0c\u9ed8\u8ba4\u4fdd\u7559\u7684\u914d\u7f6e\u9879\u5982\u4e0b\uff1a provider\uff1a Constant Key Key remark APPLICATION_KEY application CODEC_KEY codec EXCHANGER_KEY exchanger SERIALIZATION_KEY serialization CLUSTER_KEY cluster CONNECTIONS_KEY connections DEPRECATED_KEY deprecated GROUP_KEY group LOADBALANCE_KEY loadbalance MOCK_KEY mock PATH_KEY path TIMEOUT_KEY timeout TOKEN_KEY token VERSION_KEY version WARMUP_KEY warmup WEIGHT_KEY weight TIMESTAMP_KEY timestamp DUBBO_VERSION_KEY dubbo SPECIFICATION_VERSION_KEY specVersion \u65b0\u589e\uff0c\u7528\u4e8e\u8868\u8ff0dubbo\u7248\u672c\uff0c\u59822.7.0 consumer\uff1a Constant Key Key remark APPLICATION_KEY application VERSION_KEY version GROUP_KEY group DUBBO_VERSION_KEY dubbo SPECIFICATION_VERSION_KEY specVersion \u65b0\u589e\uff0c\u7528\u4e8e\u8868\u8ff0dubbo\u7248\u672c\uff0c\u59822.7.0 Constant Key\u8868\u793a\u6765\u81ea\u4e8e\u7c7borg.apache.dubbo.common.Constants\u7684\u5b57\u6bb5\u3002 \u4e0b\u9762\u4ecb\u7ecd\u51e0\u79cd\u5e38\u7528\u7684\u4f7f\u7528\u65b9\u5f0f\u3002\u6240\u6709\u7684sample\uff0c\u90fd\u53ef\u4ee5\u67e5\u770b sample-2.7 \u65b9\u5f0f1. \u914d\u7f6edubbo.properties sample\u5728dubbo-samples-simplified-registry/dubbo-samples-simplified-registry-xml \u5de5\u7a0b\u4e0b \uff08\u8dd1sample\u524d\uff0c\u5148\u8dd1\u4e0bZKClean\u8fdb\u884c\u914d\u7f6e\u9879\u6e05\u7406\uff09 dubbo.properties dubbo.registry.simplified=true dubbo.registry.extra-keys=retries,owner \u600e\u4e48\u53bb\u9a8c\u8bc1\u5462\uff1f provider\u7aef\u9a8c\u8bc1 provider\u7aef\u914d\u7f6e beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xmlns= http://www.springframework.org/schema/beans xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd !-- optional -- dubbo:application name= simplified-registry-xml-provider / dubbo:registry address= zookeeper://127.0.0.1:2181 / bean id= demoService class= org.apache.dubbo.samples.simplified.registry.nosimple.impl.DemoServiceImpl / dubbo:service async= true interface= org.apache.dubbo.samples.simplified.registry.nosimple.api.DemoService version= 1.2.3 group= dubbo-simple ref= demoService executes= 4500 retries= 7 owner= vict timeout= 5300 / /beans \u5f97\u5230\u7684zookeeper\u7684\u53f6\u5b50\u8282\u70b9\u7684\u503c\u5982\u4e0b\uff1a dubbo%3A%2F%2F30.5.124.149%3A20880%2Forg.apache.dubbo.samples.simplified.registry.nosimple.api.DemoService%3Fapplication%3Dsimplified-registry-xml-provider%26dubbo%3D2.0.2%26group%3Ddubbo-simple%26 owner %3Dvict%26 retries %3D7%26 timeout %3D5300%26timestamp%3D1542594503305%26version%3D1.2.3 \u548c\u4e0a\u9762\u7684 \u73b0\u6709\u529f\u80fdsample \u8fdb\u884c\u5bf9\u6bd4\uff0c\u4e0a\u9762\u7684sample\u4e2d\uff0cexecutes, retries, owner, timeout\u56db\u4e2a\u914d\u7f6e\u9879\u90fd\u8fdb\u5165\u4e86\u6ce8\u518c\u4e2d\u5fc3\u3002\u4f46\u662f\u672c\u5b9e\u4f8b\u4e0d\u662f\uff1a * \u914d\u7f6e\u4e86\uff1adubbo.registry.simplified=true\uff0c \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0ctimeout\u5728\u9ed8\u8ba4\u7684\u914d\u7f6e\u9879\u5217\u8868\uff0c\u6240\u4ee5\u8fd8\u662f\u4f1a\u8fdb\u5165\u6ce8\u518c\u4e2d\u5fc3\uff1b * \u914d\u7f6e\u4e86\uff1adubbo.registry.extra-keys=retries,owner \uff0c \u6240\u4ee5retries\uff0cowner\u4e5f\u4f1a\u8fdb\u5165\u6ce8\u518c\u4e2d\u5fc3\u3002 \u603b\u7ed3\uff1atimeout\uff0cretries,owner\u8fdb\u5165\u4e86\u6ce8\u518c\u4e2d\u5fc3\uff0c\u800cexecutes\u6ca1\u6709\u8fdb\u5165\u3002 consumer\u7aef\u914d\u7f6e beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xmlns= http://www.springframework.org/schema/beans xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd !-- optional -- dubbo:application name= simplified-registry-xml-consumer / dubbo:registry address= zookeeper://127.0.0.1:2181 username= xxx password= yyy check= true / dubbo:reference id= demoService interface= org.apache.dubbo.samples.simplified.registry.nosimple.api.DemoService owner= vvv retries= 4 actives= 6 timeout= 4500 version= 1.2.3 group= dubbo-simple / /beans \u5f97\u5230\u7684zookeeper\u7684\u53f6\u5b50\u8282\u70b9\u7684\u503c\u5982\u4e0b\uff1a consumer%3A%2F%2F30.5.124.149%2Forg.apache.dubbo.samples.simplified.registry.nosimple.api.DemoService%3Factives%3D6%26application%3Dsimplified-registry-xml-consumer%26category%3Dconsumers%26check%3Dfalse%26dubbo%3D2.0.2%26group%3Ddubbo-simple%26owner%3Dvvv%26version%3D1.2.3 \u914d\u7f6e\u4e86\uff1adubbo.registry.simplified=true \uff0c \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0capplication,version,group,dubbo\u5728\u9ed8\u8ba4\u7684\u914d\u7f6e\u9879\u5217\u8868\uff0c\u6240\u4ee5\u8fd8\u662f\u4f1a\u8fdb\u5165\u6ce8\u518c\u4e2d\u5fc3\uff1b \u65b9\u5f0f2. \u58f0\u660espring bean sample\u5728dubbo-samples-simplified-registry/dubbo-samples-simplified-registry-annotation \u5de5\u7a0b\u4e0b \uff08\u8dd1sample\u524d\uff0c\u5148\u8dd1\u4e0bZKClean\u8fdb\u884c\u914d\u7f6e\u9879\u6e05\u7406\uff09 Provider\u914d\u7f6e privide\u7aefbean\u914d\u7f6e\uff1a // \u7b49\u540c\u4e8edubbo.properties\u914d\u7f6e\uff0c\u7528@Bean\u5f62\u5f0f\u8fdb\u884c\u914d\u7f6e @Bean public RegistryConfig registryConfig() { RegistryConfig registryConfig = new RegistryConfig(); registryConfig.setAddress( zookeeper://127.0.0.1:2181 ); registryConfig.setSimplified(true); registryConfig.setExtraKeys( retries,owner ); return registryConfig; } // \u66b4\u9732\u670d\u52a1 @Service(version = 1.1.8 , group = d-test , executes = 4500, retries = 7, owner = victanno , timeout = 5300) public class AnnotationServiceImpl implements AnnotationService { @Override public String sayHello(String name) { System.out.println( async provider received: + name); return annotation: hello, + name; } } \u548c\u4e0a\u9762sample\u4e2d\u7684dubbo.properties\u7684\u6548\u679c\u662f\u4e00\u81f4\u7684\u3002\u7ed3\u679c\u5982\u4e0b\uff1a * \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0ctimeout\u5728\u9ed8\u8ba4\u7684\u914d\u7f6e\u9879\u5217\u8868\uff0c\u6240\u4ee5\u8fd8\u662f\u4f1a\u8fdb\u5165\u6ce8\u518c\u4e2d\u5fc3\uff1b * \u914d\u7f6e\u4e86retries,owner \u4f5c\u4e3a\u989d\u5916\u7684key\u8fdb\u5165\u6ce8\u518c\u4e2d\u5fc3 \uff0c \u6240\u4ee5retries\uff0cowner\u4e5f\u4f1a\u8fdb\u5165\u6ce8\u518c\u4e2d\u5fc3\u3002 \u603b\u7ed3\uff1atimeout\uff0cretries,owner\u8fdb\u5165\u4e86\u6ce8\u518c\u4e2d\u5fc3\uff0c\u800cexecutes\u6ca1\u6709\u8fdb\u5165\u3002 Consumer\u914d\u7f6e consumer\u7aefbean\u914d\u7f6e\uff1a @Bean public RegistryConfig registryConfig() { RegistryConfig registryConfig = new RegistryConfig(); registryConfig.setAddress( zookeeper://127.0.0.1:2181 ); registryConfig.setSimplified(true); return registryConfig; } \u6d88\u8d39\u670d\u52a1\uff1a @Component( annotationAction ) public class AnnotationAction { @Reference(version = 1.1.8 , group = d-test , owner = vvvanno , retries = 4, actives = 6, timeout = 4500) private AnnotationService annotationService; public String doSayHello(String name) { return annotationService.sayHello(name); } } \u548c\u4e0a\u9762sample\u4e2dconsumer\u7aef\u7684\u914d\u7f6e\u662f\u4e00\u6837\u7684\u3002\u7ed3\u679c\u5982\u4e0b\uff1a * \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0capplication,version,group,dubbo\u5728\u9ed8\u8ba4\u7684\u914d\u7f6e\u9879\u5217\u8868\uff0c\u6240\u4ee5\u8fd8\u662f\u4f1a\u8fdb\u5165\u6ce8\u518c\u4e2d\u5fc3. \u6ce8\u610f\uff1a \u5982\u679c\u4e00\u4e2a\u5e94\u7528\u4e2d\u65e2\u6709provider\u53c8\u6709consumer\uff0c\u90a3\u4e48\u914d\u7f6e\u9700\u8981\u5408\u5e76\u6210\uff1a @Bean public RegistryConfig registryConfig() { RegistryConfig registryConfig = new RegistryConfig(); registryConfig.setAddress( zookeeper://127.0.0.1:2181 ); registryConfig.setSimplified(true); //\u53ea\u5bf9provider\u751f\u6548 registryConfig.setExtraKeys( retries,owner ); return registryConfig; } \u540e\u7eed\u89c4\u5212 \u672c\u7248\u672c\u8fd8\u4fdd\u7559\u4e86\u5927\u91cf\u7684\u914d\u7f6e\u9879\uff0c\u63a5\u4e0b\u6765\u7684\u7248\u672c\u4e2d\uff0c\u4f1a\u9010\u6e10\u5220\u9664\u6240\u6709\u7684\u914d\u7f6e\u9879\u3002","title":"\u7b80\u5316\u6ce8\u518c\u4e2d\u5fc3URL"},{"location":"user/demos/simplify-registry-data/#_1","text":"dubbo provider\u4e2d\u7684\u670d\u52a1\u914d\u7f6e\u9879\u6709\u63a5\u8fd1 30\u4e2a\u914d\u7f6e\u9879 \u3002 \u6392\u9664\u6ce8\u518c\u4e2d\u5fc3\u670d\u52a1\u6cbb\u7406\u9700\u8981\u4e4b\u5916\uff0c\u5f88\u5927\u4e00\u90e8\u5206\u914d\u7f6e\u9879\u662fprovider\u81ea\u5df1\u4f7f\u7528\uff0c\u4e0d\u9700\u8981\u900f\u4f20\u7ed9\u6d88\u8d39\u8005\u3002\u8fd9\u90e8\u5206\u6570\u636e\u4e0d\u9700\u8981\u8fdb\u5165\u6ce8\u518c\u4e2d\u5fc3\uff0c\u800c\u53ea\u9700\u8981\u4ee5key-value\u5f62\u5f0f\u6301\u4e45\u5316\u5b58\u50a8\u3002 dubbo consumer\u4e2d\u7684\u914d\u7f6e\u9879\u4e5f\u6709 20+\u4e2a\u914d\u7f6e\u9879 \u3002\u5728\u6ce8\u518c\u4e2d\u5fc3\u4e4b\u4e2d\uff0c\u670d\u52a1\u6d88\u8d39\u8005\u5217\u8868\u4e2d\u53ea\u9700\u8981\u5173\u6ce8application\uff0cversion\uff0cgroup\uff0cip\uff0cdubbo\u7248\u672c\u7b49\u5c11\u91cf\u914d\u7f6e\uff0c\u5176\u4ed6\u914d\u7f6e\u4e5f\u53ef\u4ee5\u4ee5key-value\u5f62\u5f0f\u6301\u4e45\u5316\u5b58\u50a8\u3002 \u8fd9\u4e9b\u6570\u636e\u662f\u4ee5\u670d\u52a1\u4e3a\u7ef4\u5ea6\u6ce8\u518c\u8fdb\u5165\u6ce8\u518c\u4e2d\u5fc3\uff0c\u5bfc\u81f4\u4e86\u6570\u636e\u91cf\u7684\u81a8\u80c0\uff0c\u8fdb\u800c\u5f15\u53d1\u6ce8\u518c\u4e2d\u5fc3(\u5982zookeeper)\u7684\u7f51\u7edc\u5f00\u9500\u589e\u5927\uff0c\u6027\u80fd\u964d\u4f4e\u3002","title":"\u80cc\u666f"},{"location":"user/demos/simplify-registry-data/#sample","text":"\u5f53\u524d\u73b0\u72b6\u4e00\u4e2a\u7b80\u5355\u5c55\u793a\u3002\u901a\u8fc7\u8fd9\u4e2a\u5c55\u793a\uff0c\u5206\u6790\u4e0b\u4e3a\u4ec0\u4e48\u9700\u8981\u505a\u7b80\u5316\u914d\u7f6e\u3002 \u53c2\u8003sample\u5b50\u5de5\u7a0b\uff1a dubbo-samples-simplified-registry/dubbo-samples-simplified-registry-nosimple \uff08\u8dd1sample\u524d\uff0c\u5148\u8dd1\u4e0bZKClean\u8fdb\u884c\u914d\u7f6e\u9879\u6e05\u7406\uff09","title":"\u73b0\u6709\u529f\u80fdsample"},{"location":"user/demos/simplify-registry-data/#dubbo-providerxml","text":"dubbo:application name= simplified-registry-nosimple-provider / dubbo:registry address= zookeeper://127.0.0.1:2181 / bean id= demoService class= org.apache.dubbo.samples.simplified.registry.nosimple.impl.DemoServiceImpl / dubbo:service async= true interface= org.apache.dubbo.samples.simplified.registry.nosimple.api.DemoService version= 1.2.3 group= dubbo-simple ref= demoService executes= 4500 retries= 7 owner= vict timeout= 5300 / \u542f\u52a8provider\u7684main\u65b9\u6cd5\u4e4b\u540e\uff0c\u67e5\u770bzookeeper\u7684\u53f6\u5b50\u8282\u70b9\uff08\u8def\u5f84\u4e3a\uff1a/dubbo/org.apache.dubbo.samples.simplified.registry.nosimple.api.DemoService/providers\u76ee\u5f55\u4e0b\uff09\u7684\u5185\u5bb9\u5982\u4e0b\uff1a dubbo%3A%2F%2F30.5.124.158%3A20880%2Forg.apache.dubbo.samples.simplified.registry.nosimple.api.DemoService%3Fanyhost%3Dtrue%26application%3Dsimplified-registry-xml-provider%26async%3Dtrue%26dubbo%3D2.0.2%26 executes %3D4500%26generic%3Dfalse%26group%3Ddubbo-simple%26interface%3Dorg.apache.dubbo.samples.simplified.registry.nosimple.api.DemoService%26methods%3DsayHello%26 owner %3Dvict%26pid%3D2767%26 retries %3D7%26revision%3D1.2.3%26side%3Dprovider%26 timeout %3D5300%26timestamp%3D1542361152795%26valid%3Dtrue%26version%3D1.2.3 \u4ece\u52a0\u7c97\u5b57\u4f53\u4e2d\u80fd\u770b\u5230\u6709\uff1aexecutes, retries, owner, timeout. \u4f46\u662f\u8fd9\u4e9b\u5b57\u6bb5\u4e0d\u662f\u6bcf\u4e2a\u90fd\u9700\u8981\u4f20\u9012\u7ed9dubbo ops\u6216\u8005dubbo consumer\u3002 \u540c\u6837\u7684\uff0cconsumer\u4e5f\u6709\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ef\u4ee5\u5728\u4f8b\u5b50\u4e2d\u542f\u52a8Consumer\u7684main\u65b9\u6cd5\u8fdb\u884c\u67e5\u770b\u3002","title":"dubbo-provider.xml\u914d\u7f6e"},{"location":"user/demos/simplify-registry-data/#_2","text":"\u671f\u671b\u7b80\u5316\u8fdb\u5165\u6ce8\u518c\u4e2d\u5fc3\u7684provider\u548cconsumer\u914d\u7f6e\u6570\u91cf\u3002 \u671f\u671b\u5c06\u90e8\u5206\u914d\u7f6e\u9879\u4ee5\u5176\u4ed6\u5f62\u5f0f\u5b58\u50a8\u3002\u8fd9\u4e9b\u914d\u7f6e\u9879\u9700\u8981\u6ee1\u8db3\uff1a\u4e0d\u5728\u670d\u52a1\u8c03\u7528\u94fe\u8def\u4e0a\uff0c\u540c\u65f6\u8fd9\u4e9b\u914d\u7f6e\u9879\u4e0d\u5728\u6ce8\u518c\u4e2d\u5fc3\u7684\u6838\u5fc3\u94fe\u8def\u4e0a(\u670d\u52a1\u67e5\u8be2\uff0c\u670d\u52a1\u5217\u8868)\u3002","title":"\u8bbe\u8ba1\u76ee\u6807\u548c\u5b97\u65e8"},{"location":"user/demos/simplify-registry-data/#_3","text":"\u7b80\u5316\u6ce8\u518c\u4e2d\u5fc3\u7684\u914d\u7f6e\uff0c\u53ea\u57282.7\u4e4b\u540e\u7684\u7248\u672c\u4e2d\u8fdb\u884c\u652f\u6301\u3002 \u5f00\u542fprovider\u6216\u8005consumer\u7b80\u5316\u914d\u7f6e\u4e4b\u540e\uff0c\u9ed8\u8ba4\u4fdd\u7559\u7684\u914d\u7f6e\u9879\u5982\u4e0b\uff1a provider\uff1a Constant Key Key remark APPLICATION_KEY application CODEC_KEY codec EXCHANGER_KEY exchanger SERIALIZATION_KEY serialization CLUSTER_KEY cluster CONNECTIONS_KEY connections DEPRECATED_KEY deprecated GROUP_KEY group LOADBALANCE_KEY loadbalance MOCK_KEY mock PATH_KEY path TIMEOUT_KEY timeout TOKEN_KEY token VERSION_KEY version WARMUP_KEY warmup WEIGHT_KEY weight TIMESTAMP_KEY timestamp DUBBO_VERSION_KEY dubbo SPECIFICATION_VERSION_KEY specVersion \u65b0\u589e\uff0c\u7528\u4e8e\u8868\u8ff0dubbo\u7248\u672c\uff0c\u59822.7.0 consumer\uff1a Constant Key Key remark APPLICATION_KEY application VERSION_KEY version GROUP_KEY group DUBBO_VERSION_KEY dubbo SPECIFICATION_VERSION_KEY specVersion \u65b0\u589e\uff0c\u7528\u4e8e\u8868\u8ff0dubbo\u7248\u672c\uff0c\u59822.7.0 Constant Key\u8868\u793a\u6765\u81ea\u4e8e\u7c7borg.apache.dubbo.common.Constants\u7684\u5b57\u6bb5\u3002 \u4e0b\u9762\u4ecb\u7ecd\u51e0\u79cd\u5e38\u7528\u7684\u4f7f\u7528\u65b9\u5f0f\u3002\u6240\u6709\u7684sample\uff0c\u90fd\u53ef\u4ee5\u67e5\u770b sample-2.7","title":"\u914d\u7f6e"},{"location":"user/demos/simplify-registry-data/#1-dubboproperties","text":"sample\u5728dubbo-samples-simplified-registry/dubbo-samples-simplified-registry-xml \u5de5\u7a0b\u4e0b \uff08\u8dd1sample\u524d\uff0c\u5148\u8dd1\u4e0bZKClean\u8fdb\u884c\u914d\u7f6e\u9879\u6e05\u7406\uff09 dubbo.properties dubbo.registry.simplified=true dubbo.registry.extra-keys=retries,owner \u600e\u4e48\u53bb\u9a8c\u8bc1\u5462\uff1f","title":"\u65b9\u5f0f1. \u914d\u7f6edubbo.properties"},{"location":"user/demos/simplify-registry-data/#provider","text":"provider\u7aef\u914d\u7f6e beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xmlns= http://www.springframework.org/schema/beans xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd !-- optional -- dubbo:application name= simplified-registry-xml-provider / dubbo:registry address= zookeeper://127.0.0.1:2181 / bean id= demoService class= org.apache.dubbo.samples.simplified.registry.nosimple.impl.DemoServiceImpl / dubbo:service async= true interface= org.apache.dubbo.samples.simplified.registry.nosimple.api.DemoService version= 1.2.3 group= dubbo-simple ref= demoService executes= 4500 retries= 7 owner= vict timeout= 5300 / /beans \u5f97\u5230\u7684zookeeper\u7684\u53f6\u5b50\u8282\u70b9\u7684\u503c\u5982\u4e0b\uff1a dubbo%3A%2F%2F30.5.124.149%3A20880%2Forg.apache.dubbo.samples.simplified.registry.nosimple.api.DemoService%3Fapplication%3Dsimplified-registry-xml-provider%26dubbo%3D2.0.2%26group%3Ddubbo-simple%26 owner %3Dvict%26 retries %3D7%26 timeout %3D5300%26timestamp%3D1542594503305%26version%3D1.2.3 \u548c\u4e0a\u9762\u7684 \u73b0\u6709\u529f\u80fdsample \u8fdb\u884c\u5bf9\u6bd4\uff0c\u4e0a\u9762\u7684sample\u4e2d\uff0cexecutes, retries, owner, timeout\u56db\u4e2a\u914d\u7f6e\u9879\u90fd\u8fdb\u5165\u4e86\u6ce8\u518c\u4e2d\u5fc3\u3002\u4f46\u662f\u672c\u5b9e\u4f8b\u4e0d\u662f\uff1a * \u914d\u7f6e\u4e86\uff1adubbo.registry.simplified=true\uff0c \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0ctimeout\u5728\u9ed8\u8ba4\u7684\u914d\u7f6e\u9879\u5217\u8868\uff0c\u6240\u4ee5\u8fd8\u662f\u4f1a\u8fdb\u5165\u6ce8\u518c\u4e2d\u5fc3\uff1b * \u914d\u7f6e\u4e86\uff1adubbo.registry.extra-keys=retries,owner \uff0c \u6240\u4ee5retries\uff0cowner\u4e5f\u4f1a\u8fdb\u5165\u6ce8\u518c\u4e2d\u5fc3\u3002 \u603b\u7ed3\uff1atimeout\uff0cretries,owner\u8fdb\u5165\u4e86\u6ce8\u518c\u4e2d\u5fc3\uff0c\u800cexecutes\u6ca1\u6709\u8fdb\u5165\u3002 consumer\u7aef\u914d\u7f6e beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xmlns= http://www.springframework.org/schema/beans xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd !-- optional -- dubbo:application name= simplified-registry-xml-consumer / dubbo:registry address= zookeeper://127.0.0.1:2181 username= xxx password= yyy check= true / dubbo:reference id= demoService interface= org.apache.dubbo.samples.simplified.registry.nosimple.api.DemoService owner= vvv retries= 4 actives= 6 timeout= 4500 version= 1.2.3 group= dubbo-simple / /beans \u5f97\u5230\u7684zookeeper\u7684\u53f6\u5b50\u8282\u70b9\u7684\u503c\u5982\u4e0b\uff1a consumer%3A%2F%2F30.5.124.149%2Forg.apache.dubbo.samples.simplified.registry.nosimple.api.DemoService%3Factives%3D6%26application%3Dsimplified-registry-xml-consumer%26category%3Dconsumers%26check%3Dfalse%26dubbo%3D2.0.2%26group%3Ddubbo-simple%26owner%3Dvvv%26version%3D1.2.3 \u914d\u7f6e\u4e86\uff1adubbo.registry.simplified=true \uff0c \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0capplication,version,group,dubbo\u5728\u9ed8\u8ba4\u7684\u914d\u7f6e\u9879\u5217\u8868\uff0c\u6240\u4ee5\u8fd8\u662f\u4f1a\u8fdb\u5165\u6ce8\u518c\u4e2d\u5fc3\uff1b","title":"provider\u7aef\u9a8c\u8bc1"},{"location":"user/demos/simplify-registry-data/#2-spring-bean","text":"sample\u5728dubbo-samples-simplified-registry/dubbo-samples-simplified-registry-annotation \u5de5\u7a0b\u4e0b \uff08\u8dd1sample\u524d\uff0c\u5148\u8dd1\u4e0bZKClean\u8fdb\u884c\u914d\u7f6e\u9879\u6e05\u7406\uff09","title":"\u65b9\u5f0f2. \u58f0\u660espring bean"},{"location":"user/demos/simplify-registry-data/#provider_1","text":"privide\u7aefbean\u914d\u7f6e\uff1a // \u7b49\u540c\u4e8edubbo.properties\u914d\u7f6e\uff0c\u7528@Bean\u5f62\u5f0f\u8fdb\u884c\u914d\u7f6e @Bean public RegistryConfig registryConfig() { RegistryConfig registryConfig = new RegistryConfig(); registryConfig.setAddress( zookeeper://127.0.0.1:2181 ); registryConfig.setSimplified(true); registryConfig.setExtraKeys( retries,owner ); return registryConfig; } // \u66b4\u9732\u670d\u52a1 @Service(version = 1.1.8 , group = d-test , executes = 4500, retries = 7, owner = victanno , timeout = 5300) public class AnnotationServiceImpl implements AnnotationService { @Override public String sayHello(String name) { System.out.println( async provider received: + name); return annotation: hello, + name; } } \u548c\u4e0a\u9762sample\u4e2d\u7684dubbo.properties\u7684\u6548\u679c\u662f\u4e00\u81f4\u7684\u3002\u7ed3\u679c\u5982\u4e0b\uff1a * \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0ctimeout\u5728\u9ed8\u8ba4\u7684\u914d\u7f6e\u9879\u5217\u8868\uff0c\u6240\u4ee5\u8fd8\u662f\u4f1a\u8fdb\u5165\u6ce8\u518c\u4e2d\u5fc3\uff1b * \u914d\u7f6e\u4e86retries,owner \u4f5c\u4e3a\u989d\u5916\u7684key\u8fdb\u5165\u6ce8\u518c\u4e2d\u5fc3 \uff0c \u6240\u4ee5retries\uff0cowner\u4e5f\u4f1a\u8fdb\u5165\u6ce8\u518c\u4e2d\u5fc3\u3002 \u603b\u7ed3\uff1atimeout\uff0cretries,owner\u8fdb\u5165\u4e86\u6ce8\u518c\u4e2d\u5fc3\uff0c\u800cexecutes\u6ca1\u6709\u8fdb\u5165\u3002","title":"Provider\u914d\u7f6e"},{"location":"user/demos/simplify-registry-data/#consumer","text":"consumer\u7aefbean\u914d\u7f6e\uff1a @Bean public RegistryConfig registryConfig() { RegistryConfig registryConfig = new RegistryConfig(); registryConfig.setAddress( zookeeper://127.0.0.1:2181 ); registryConfig.setSimplified(true); return registryConfig; } \u6d88\u8d39\u670d\u52a1\uff1a @Component( annotationAction ) public class AnnotationAction { @Reference(version = 1.1.8 , group = d-test , owner = vvvanno , retries = 4, actives = 6, timeout = 4500) private AnnotationService annotationService; public String doSayHello(String name) { return annotationService.sayHello(name); } } \u548c\u4e0a\u9762sample\u4e2dconsumer\u7aef\u7684\u914d\u7f6e\u662f\u4e00\u6837\u7684\u3002\u7ed3\u679c\u5982\u4e0b\uff1a * \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0capplication,version,group,dubbo\u5728\u9ed8\u8ba4\u7684\u914d\u7f6e\u9879\u5217\u8868\uff0c\u6240\u4ee5\u8fd8\u662f\u4f1a\u8fdb\u5165\u6ce8\u518c\u4e2d\u5fc3.","title":"Consumer\u914d\u7f6e"},{"location":"user/demos/simplify-registry-data/#_4","text":"\u5982\u679c\u4e00\u4e2a\u5e94\u7528\u4e2d\u65e2\u6709provider\u53c8\u6709consumer\uff0c\u90a3\u4e48\u914d\u7f6e\u9700\u8981\u5408\u5e76\u6210\uff1a @Bean public RegistryConfig registryConfig() { RegistryConfig registryConfig = new RegistryConfig(); registryConfig.setAddress( zookeeper://127.0.0.1:2181 ); registryConfig.setSimplified(true); //\u53ea\u5bf9provider\u751f\u6548 registryConfig.setExtraKeys( retries,owner ); return registryConfig; }","title":"\u6ce8\u610f\uff1a"},{"location":"user/demos/simplify-registry-data/#_5","text":"\u672c\u7248\u672c\u8fd8\u4fdd\u7559\u4e86\u5927\u91cf\u7684\u914d\u7f6e\u9879\uff0c\u63a5\u4e0b\u6765\u7684\u7248\u672c\u4e2d\uff0c\u4f1a\u9010\u6e10\u5220\u9664\u6240\u6709\u7684\u914d\u7f6e\u9879\u3002","title":"\u540e\u7eed\u89c4\u5212"},{"location":"user/demos/static-service/","text":"\u9759\u6001\u670d\u52a1 \u6709\u65f6\u5019\u5e0c\u671b\u4eba\u5de5\u7ba1\u7406\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u4e0a\u7ebf\u548c\u4e0b\u7ebf\uff0c\u6b64\u65f6\u9700\u5c06\u6ce8\u518c\u4e2d\u5fc3\u6807\u8bc6\u4e3a\u975e\u52a8\u6001\u7ba1\u7406\u6a21\u5f0f\u3002 dubbo:registry address= 10.20.141.150:9090 dynamic= false / \u6216\u8005 dubbo:registry address= 10.20.141.150:9090?dynamic=false / \u670d\u52a1\u63d0\u4f9b\u8005\u521d\u6b21\u6ce8\u518c\u65f6\u4e3a\u7981\u7528\u72b6\u6001\uff0c\u9700\u4eba\u5de5\u542f\u7528\u3002\u65ad\u7ebf\u65f6\uff0c\u5c06\u4e0d\u4f1a\u88ab\u81ea\u52a8\u5220\u9664\uff0c\u9700\u4eba\u5de5\u7981\u7528\u3002 \u5982\u679c\u662f\u4e00\u4e2a\u7b2c\u4e09\u65b9\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u6bd4\u5982 memcached\uff0c\u53ef\u4ee5\u76f4\u63a5\u5411\u6ce8\u518c\u4e2d\u5fc3\u5199\u5165\u63d0\u4f9b\u8005\u5730\u5740\u4fe1\u606f\uff0c\u6d88\u8d39\u8005\u6b63\u5e38\u4f7f\u7528 ^1 \uff1a RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension(); Registry registry = registryFactory.getRegistry(URL.valueOf( zookeeper://10.20.153.10:2181 )); registry.register(URL.valueOf( memcached://10.20.153.11/com.foo.BarService?category=providers dynamic=false application=foo ));","title":"\u9759\u6001\u670d\u52a1"},{"location":"user/demos/static-service/#_1","text":"\u6709\u65f6\u5019\u5e0c\u671b\u4eba\u5de5\u7ba1\u7406\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u4e0a\u7ebf\u548c\u4e0b\u7ebf\uff0c\u6b64\u65f6\u9700\u5c06\u6ce8\u518c\u4e2d\u5fc3\u6807\u8bc6\u4e3a\u975e\u52a8\u6001\u7ba1\u7406\u6a21\u5f0f\u3002 dubbo:registry address= 10.20.141.150:9090 dynamic= false / \u6216\u8005 dubbo:registry address= 10.20.141.150:9090?dynamic=false / \u670d\u52a1\u63d0\u4f9b\u8005\u521d\u6b21\u6ce8\u518c\u65f6\u4e3a\u7981\u7528\u72b6\u6001\uff0c\u9700\u4eba\u5de5\u542f\u7528\u3002\u65ad\u7ebf\u65f6\uff0c\u5c06\u4e0d\u4f1a\u88ab\u81ea\u52a8\u5220\u9664\uff0c\u9700\u4eba\u5de5\u7981\u7528\u3002 \u5982\u679c\u662f\u4e00\u4e2a\u7b2c\u4e09\u65b9\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u6bd4\u5982 memcached\uff0c\u53ef\u4ee5\u76f4\u63a5\u5411\u6ce8\u518c\u4e2d\u5fc3\u5199\u5165\u63d0\u4f9b\u8005\u5730\u5740\u4fe1\u606f\uff0c\u6d88\u8d39\u8005\u6b63\u5e38\u4f7f\u7528 ^1 \uff1a RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension(); Registry registry = registryFactory.getRegistry(URL.valueOf( zookeeper://10.20.153.10:2181 )); registry.register(URL.valueOf( memcached://10.20.153.11/com.foo.BarService?category=providers dynamic=false application=foo ));","title":"\u9759\u6001\u670d\u52a1"},{"location":"user/demos/stickiness/","text":"\u7c98\u6ede\u8fde\u63a5 \u7c98\u6ede\u8fde\u63a5\u7528\u4e8e\u6709\u72b6\u6001\u670d\u52a1\uff0c\u5c3d\u53ef\u80fd\u8ba9\u5ba2\u6237\u7aef\u603b\u662f\u5411\u540c\u4e00\u63d0\u4f9b\u8005\u53d1\u8d77\u8c03\u7528\uff0c\u9664\u975e\u8be5\u63d0\u4f9b\u8005\u6302\u4e86\uff0c\u518d\u8fde\u53e6\u4e00\u53f0\u3002 \u7c98\u6ede\u8fde\u63a5\u5c06\u81ea\u52a8\u5f00\u542f \u5ef6\u8fdf\u8fde\u63a5 \uff0c\u4ee5\u51cf\u5c11\u957f\u8fde\u63a5\u6570\u3002 dubbo:reference id= xxxService interface= com.xxx.XxxService sticky= true / Dubbo \u652f\u6301\u65b9\u6cd5\u7ea7\u522b\u7684\u7c98\u6ede\u8fde\u63a5\uff0c\u5982\u679c\u4f60\u60f3\u8fdb\u884c\u66f4\u7ec6\u7c92\u5ea6\u7684\u63a7\u5236\uff0c\u8fd8\u53ef\u4ee5\u8fd9\u6837\u914d\u7f6e\u3002 dubbo:reference id= xxxService interface= com.xxx.XxxService dubbo:mothod name= sayHello sticky= true / /dubbo:reference","title":"\u7c98\u6ede\u8fde\u63a5"},{"location":"user/demos/stickiness/#_1","text":"\u7c98\u6ede\u8fde\u63a5\u7528\u4e8e\u6709\u72b6\u6001\u670d\u52a1\uff0c\u5c3d\u53ef\u80fd\u8ba9\u5ba2\u6237\u7aef\u603b\u662f\u5411\u540c\u4e00\u63d0\u4f9b\u8005\u53d1\u8d77\u8c03\u7528\uff0c\u9664\u975e\u8be5\u63d0\u4f9b\u8005\u6302\u4e86\uff0c\u518d\u8fde\u53e6\u4e00\u53f0\u3002 \u7c98\u6ede\u8fde\u63a5\u5c06\u81ea\u52a8\u5f00\u542f \u5ef6\u8fdf\u8fde\u63a5 \uff0c\u4ee5\u51cf\u5c11\u957f\u8fde\u63a5\u6570\u3002 dubbo:reference id= xxxService interface= com.xxx.XxxService sticky= true / Dubbo \u652f\u6301\u65b9\u6cd5\u7ea7\u522b\u7684\u7c98\u6ede\u8fde\u63a5\uff0c\u5982\u679c\u4f60\u60f3\u8fdb\u884c\u66f4\u7ec6\u7c92\u5ea6\u7684\u63a7\u5236\uff0c\u8fd8\u53ef\u4ee5\u8fd9\u6837\u914d\u7f6e\u3002 dubbo:reference id= xxxService interface= com.xxx.XxxService dubbo:mothod name= sayHello sticky= true / /dubbo:reference","title":"\u7c98\u6ede\u8fde\u63a5"},{"location":"user/demos/subscribe-only/","text":"\u53ea\u8ba2\u9605 \u4e3a\u65b9\u4fbf\u5f00\u53d1\u6d4b\u8bd5\uff0c\u7ecf\u5e38\u4f1a\u5728\u7ebf\u4e0b\u5171\u7528\u4e00\u4e2a\u6240\u6709\u670d\u52a1\u53ef\u7528\u7684\u6ce8\u518c\u4e2d\u5fc3\uff0c\u8fd9\u65f6\uff0c\u5982\u679c\u4e00\u4e2a\u6b63\u5728\u5f00\u53d1\u4e2d\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u6ce8\u518c\uff0c\u53ef\u80fd\u4f1a\u5f71\u54cd\u6d88\u8d39\u8005\u4e0d\u80fd\u6b63\u5e38\u8fd0\u884c\u3002 \u53ef\u4ee5\u8ba9\u670d\u52a1\u63d0\u4f9b\u8005\u5f00\u53d1\u65b9\uff0c\u53ea\u8ba2\u9605\u670d\u52a1(\u5f00\u53d1\u7684\u670d\u52a1\u53ef\u80fd\u4f9d\u8d56\u5176\u5b83\u670d\u52a1)\uff0c\u800c\u4e0d\u6ce8\u518c\u6b63\u5728\u5f00\u53d1\u7684\u670d\u52a1\uff0c\u901a\u8fc7\u76f4\u8fde\u6d4b\u8bd5\u6b63\u5728\u5f00\u53d1\u7684\u670d\u52a1\u3002 \u7981\u7528\u6ce8\u518c\u914d\u7f6e dubbo:registry address= 10.20.153.10:9090 register= false / \u6216\u8005 dubbo:registry address= 10.20.153.10:9090?register=false /","title":"\u53ea\u8ba2\u9605"},{"location":"user/demos/subscribe-only/#_1","text":"\u4e3a\u65b9\u4fbf\u5f00\u53d1\u6d4b\u8bd5\uff0c\u7ecf\u5e38\u4f1a\u5728\u7ebf\u4e0b\u5171\u7528\u4e00\u4e2a\u6240\u6709\u670d\u52a1\u53ef\u7528\u7684\u6ce8\u518c\u4e2d\u5fc3\uff0c\u8fd9\u65f6\uff0c\u5982\u679c\u4e00\u4e2a\u6b63\u5728\u5f00\u53d1\u4e2d\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u6ce8\u518c\uff0c\u53ef\u80fd\u4f1a\u5f71\u54cd\u6d88\u8d39\u8005\u4e0d\u80fd\u6b63\u5e38\u8fd0\u884c\u3002 \u53ef\u4ee5\u8ba9\u670d\u52a1\u63d0\u4f9b\u8005\u5f00\u53d1\u65b9\uff0c\u53ea\u8ba2\u9605\u670d\u52a1(\u5f00\u53d1\u7684\u670d\u52a1\u53ef\u80fd\u4f9d\u8d56\u5176\u5b83\u670d\u52a1)\uff0c\u800c\u4e0d\u6ce8\u518c\u6b63\u5728\u5f00\u53d1\u7684\u670d\u52a1\uff0c\u901a\u8fc7\u76f4\u8fde\u6d4b\u8bd5\u6b63\u5728\u5f00\u53d1\u7684\u670d\u52a1\u3002 \u7981\u7528\u6ce8\u518c\u914d\u7f6e dubbo:registry address= 10.20.153.10:9090 register= false / \u6216\u8005 dubbo:registry address= 10.20.153.10:9090?register=false /","title":"\u53ea\u8ba2\u9605"},{"location":"user/demos/thread-model/","text":"\u7ebf\u7a0b\u6a21\u578b \u5982\u679c\u4e8b\u4ef6\u5904\u7406\u7684\u903b\u8f91\u80fd\u8fc5\u901f\u5b8c\u6210\uff0c\u5e76\u4e14\u4e0d\u4f1a\u53d1\u8d77\u65b0\u7684 IO \u8bf7\u6c42\uff0c\u6bd4\u5982\u53ea\u662f\u5728\u5185\u5b58\u4e2d\u8bb0\u4e2a\u6807\u8bc6\uff0c\u5219\u76f4\u63a5\u5728 IO \u7ebf\u7a0b\u4e0a\u5904\u7406\u66f4\u5feb\uff0c\u56e0\u4e3a\u51cf\u5c11\u4e86\u7ebf\u7a0b\u6c60\u8c03\u5ea6\u3002 \u4f46\u5982\u679c\u4e8b\u4ef6\u5904\u7406\u903b\u8f91\u8f83\u6162\uff0c\u6216\u8005\u9700\u8981\u53d1\u8d77\u65b0\u7684 IO \u8bf7\u6c42\uff0c\u6bd4\u5982\u9700\u8981\u67e5\u8be2\u6570\u636e\u5e93\uff0c\u5219\u5fc5\u987b\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\uff0c\u5426\u5219 IO \u7ebf\u7a0b\u963b\u585e\uff0c\u5c06\u5bfc\u81f4\u4e0d\u80fd\u63a5\u6536\u5176\u5b83\u8bf7\u6c42\u3002 \u5982\u679c\u7528 IO \u7ebf\u7a0b\u5904\u7406\u4e8b\u4ef6\uff0c\u53c8\u5728\u4e8b\u4ef6\u5904\u7406\u8fc7\u7a0b\u4e2d\u53d1\u8d77\u65b0\u7684 IO \u8bf7\u6c42\uff0c\u6bd4\u5982\u5728\u8fde\u63a5\u4e8b\u4ef6\u4e2d\u53d1\u8d77\u767b\u5f55\u8bf7\u6c42\uff0c\u4f1a\u62a5\u201c\u53ef\u80fd\u5f15\u53d1\u6b7b\u9501\u201d\u5f02\u5e38\uff0c\u4f46\u4e0d\u4f1a\u771f\u6b7b\u9501\u3002 \u56e0\u6b64\uff0c\u9700\u8981\u901a\u8fc7\u4e0d\u540c\u7684\u6d3e\u53d1\u7b56\u7565\u548c\u4e0d\u540c\u7684\u7ebf\u7a0b\u6c60\u914d\u7f6e\u7684\u7ec4\u5408\u6765\u5e94\u5bf9\u4e0d\u540c\u7684\u573a\u666f: dubbo:protocol name= dubbo dispatcher= all threadpool= fixed threads= 100 / Dispatcher all \u6240\u6709\u6d88\u606f\u90fd\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\uff0c\u5305\u62ec\u8bf7\u6c42\uff0c\u54cd\u5e94\uff0c\u8fde\u63a5\u4e8b\u4ef6\uff0c\u65ad\u5f00\u4e8b\u4ef6\uff0c\u5fc3\u8df3\u7b49\u3002 direct \u6240\u6709\u6d88\u606f\u90fd\u4e0d\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\uff0c\u5168\u90e8\u5728 IO \u7ebf\u7a0b\u4e0a\u76f4\u63a5\u6267\u884c\u3002 message \u53ea\u6709\u8bf7\u6c42\u54cd\u5e94\u6d88\u606f\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\uff0c\u5176\u5b83\u8fde\u63a5\u65ad\u5f00\u4e8b\u4ef6\uff0c\u5fc3\u8df3\u7b49\u6d88\u606f\uff0c\u76f4\u63a5\u5728 IO \u7ebf\u7a0b\u4e0a\u6267\u884c\u3002 execution \u53ea\u6709\u8bf7\u6c42\u6d88\u606f\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\uff0c\u4e0d\u542b\u54cd\u5e94\uff0c\u54cd\u5e94\u548c\u5176\u5b83\u8fde\u63a5\u65ad\u5f00\u4e8b\u4ef6\uff0c\u5fc3\u8df3\u7b49\u6d88\u606f\uff0c\u76f4\u63a5\u5728 IO \u7ebf\u7a0b\u4e0a\u6267\u884c\u3002 connection \u5728 IO \u7ebf\u7a0b\u4e0a\uff0c\u5c06\u8fde\u63a5\u65ad\u5f00\u4e8b\u4ef6\u653e\u5165\u961f\u5217\uff0c\u6709\u5e8f\u9010\u4e2a\u6267\u884c\uff0c\u5176\u5b83\u6d88\u606f\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\u3002 ThreadPool fixed \u56fa\u5b9a\u5927\u5c0f\u7ebf\u7a0b\u6c60\uff0c\u542f\u52a8\u65f6\u5efa\u7acb\u7ebf\u7a0b\uff0c\u4e0d\u5173\u95ed\uff0c\u4e00\u76f4\u6301\u6709\u3002(\u7f3a\u7701) cached \u7f13\u5b58\u7ebf\u7a0b\u6c60\uff0c\u7a7a\u95f2\u4e00\u5206\u949f\u81ea\u52a8\u5220\u9664\uff0c\u9700\u8981\u65f6\u91cd\u5efa\u3002 limited \u53ef\u4f38\u7f29\u7ebf\u7a0b\u6c60\uff0c\u4f46\u6c60\u4e2d\u7684\u7ebf\u7a0b\u6570\u53ea\u4f1a\u589e\u957f\u4e0d\u4f1a\u6536\u7f29\u3002\u53ea\u589e\u957f\u4e0d\u6536\u7f29\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u907f\u514d\u6536\u7f29\u65f6\u7a81\u7136\u6765\u4e86\u5927\u6d41\u91cf\u5f15\u8d77\u7684\u6027\u80fd\u95ee\u9898\u3002 eager \u4f18\u5148\u521b\u5efa Worker \u7ebf\u7a0b\u6c60\u3002\u5728\u4efb\u52a1\u6570\u91cf\u5927\u4e8e corePoolSize \u4f46\u662f\u5c0f\u4e8e maximumPoolSize \u65f6\uff0c\u4f18\u5148\u521b\u5efa Worker \u6765\u5904\u7406\u4efb\u52a1\u3002\u5f53\u4efb\u52a1\u6570\u91cf\u5927\u4e8e maximumPoolSize \u65f6\uff0c\u5c06\u4efb\u52a1\u653e\u5165\u963b\u585e\u961f\u5217\u4e2d\u3002\u963b\u585e\u961f\u5217\u5145\u6ee1\u65f6\u629b\u51fa RejectedExecutionException \u3002(\u76f8\u6bd4\u4e8e cached : cached \u5728\u4efb\u52a1\u6570\u91cf\u8d85\u8fc7 maximumPoolSize \u65f6\u76f4\u63a5\u629b\u51fa\u5f02\u5e38\u800c\u4e0d\u662f\u5c06\u4efb\u52a1\u653e\u5165\u963b\u585e\u961f\u5217)","title":"\u7ebf\u7a0b\u6a21\u578b"},{"location":"user/demos/thread-model/#_1","text":"\u5982\u679c\u4e8b\u4ef6\u5904\u7406\u7684\u903b\u8f91\u80fd\u8fc5\u901f\u5b8c\u6210\uff0c\u5e76\u4e14\u4e0d\u4f1a\u53d1\u8d77\u65b0\u7684 IO \u8bf7\u6c42\uff0c\u6bd4\u5982\u53ea\u662f\u5728\u5185\u5b58\u4e2d\u8bb0\u4e2a\u6807\u8bc6\uff0c\u5219\u76f4\u63a5\u5728 IO \u7ebf\u7a0b\u4e0a\u5904\u7406\u66f4\u5feb\uff0c\u56e0\u4e3a\u51cf\u5c11\u4e86\u7ebf\u7a0b\u6c60\u8c03\u5ea6\u3002 \u4f46\u5982\u679c\u4e8b\u4ef6\u5904\u7406\u903b\u8f91\u8f83\u6162\uff0c\u6216\u8005\u9700\u8981\u53d1\u8d77\u65b0\u7684 IO \u8bf7\u6c42\uff0c\u6bd4\u5982\u9700\u8981\u67e5\u8be2\u6570\u636e\u5e93\uff0c\u5219\u5fc5\u987b\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\uff0c\u5426\u5219 IO \u7ebf\u7a0b\u963b\u585e\uff0c\u5c06\u5bfc\u81f4\u4e0d\u80fd\u63a5\u6536\u5176\u5b83\u8bf7\u6c42\u3002 \u5982\u679c\u7528 IO \u7ebf\u7a0b\u5904\u7406\u4e8b\u4ef6\uff0c\u53c8\u5728\u4e8b\u4ef6\u5904\u7406\u8fc7\u7a0b\u4e2d\u53d1\u8d77\u65b0\u7684 IO \u8bf7\u6c42\uff0c\u6bd4\u5982\u5728\u8fde\u63a5\u4e8b\u4ef6\u4e2d\u53d1\u8d77\u767b\u5f55\u8bf7\u6c42\uff0c\u4f1a\u62a5\u201c\u53ef\u80fd\u5f15\u53d1\u6b7b\u9501\u201d\u5f02\u5e38\uff0c\u4f46\u4e0d\u4f1a\u771f\u6b7b\u9501\u3002 \u56e0\u6b64\uff0c\u9700\u8981\u901a\u8fc7\u4e0d\u540c\u7684\u6d3e\u53d1\u7b56\u7565\u548c\u4e0d\u540c\u7684\u7ebf\u7a0b\u6c60\u914d\u7f6e\u7684\u7ec4\u5408\u6765\u5e94\u5bf9\u4e0d\u540c\u7684\u573a\u666f: dubbo:protocol name= dubbo dispatcher= all threadpool= fixed threads= 100 / Dispatcher all \u6240\u6709\u6d88\u606f\u90fd\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\uff0c\u5305\u62ec\u8bf7\u6c42\uff0c\u54cd\u5e94\uff0c\u8fde\u63a5\u4e8b\u4ef6\uff0c\u65ad\u5f00\u4e8b\u4ef6\uff0c\u5fc3\u8df3\u7b49\u3002 direct \u6240\u6709\u6d88\u606f\u90fd\u4e0d\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\uff0c\u5168\u90e8\u5728 IO \u7ebf\u7a0b\u4e0a\u76f4\u63a5\u6267\u884c\u3002 message \u53ea\u6709\u8bf7\u6c42\u54cd\u5e94\u6d88\u606f\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\uff0c\u5176\u5b83\u8fde\u63a5\u65ad\u5f00\u4e8b\u4ef6\uff0c\u5fc3\u8df3\u7b49\u6d88\u606f\uff0c\u76f4\u63a5\u5728 IO \u7ebf\u7a0b\u4e0a\u6267\u884c\u3002 execution \u53ea\u6709\u8bf7\u6c42\u6d88\u606f\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\uff0c\u4e0d\u542b\u54cd\u5e94\uff0c\u54cd\u5e94\u548c\u5176\u5b83\u8fde\u63a5\u65ad\u5f00\u4e8b\u4ef6\uff0c\u5fc3\u8df3\u7b49\u6d88\u606f\uff0c\u76f4\u63a5\u5728 IO \u7ebf\u7a0b\u4e0a\u6267\u884c\u3002 connection \u5728 IO \u7ebf\u7a0b\u4e0a\uff0c\u5c06\u8fde\u63a5\u65ad\u5f00\u4e8b\u4ef6\u653e\u5165\u961f\u5217\uff0c\u6709\u5e8f\u9010\u4e2a\u6267\u884c\uff0c\u5176\u5b83\u6d88\u606f\u6d3e\u53d1\u5230\u7ebf\u7a0b\u6c60\u3002 ThreadPool fixed \u56fa\u5b9a\u5927\u5c0f\u7ebf\u7a0b\u6c60\uff0c\u542f\u52a8\u65f6\u5efa\u7acb\u7ebf\u7a0b\uff0c\u4e0d\u5173\u95ed\uff0c\u4e00\u76f4\u6301\u6709\u3002(\u7f3a\u7701) cached \u7f13\u5b58\u7ebf\u7a0b\u6c60\uff0c\u7a7a\u95f2\u4e00\u5206\u949f\u81ea\u52a8\u5220\u9664\uff0c\u9700\u8981\u65f6\u91cd\u5efa\u3002 limited \u53ef\u4f38\u7f29\u7ebf\u7a0b\u6c60\uff0c\u4f46\u6c60\u4e2d\u7684\u7ebf\u7a0b\u6570\u53ea\u4f1a\u589e\u957f\u4e0d\u4f1a\u6536\u7f29\u3002\u53ea\u589e\u957f\u4e0d\u6536\u7f29\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u907f\u514d\u6536\u7f29\u65f6\u7a81\u7136\u6765\u4e86\u5927\u6d41\u91cf\u5f15\u8d77\u7684\u6027\u80fd\u95ee\u9898\u3002 eager \u4f18\u5148\u521b\u5efa Worker \u7ebf\u7a0b\u6c60\u3002\u5728\u4efb\u52a1\u6570\u91cf\u5927\u4e8e corePoolSize \u4f46\u662f\u5c0f\u4e8e maximumPoolSize \u65f6\uff0c\u4f18\u5148\u521b\u5efa Worker \u6765\u5904\u7406\u4efb\u52a1\u3002\u5f53\u4efb\u52a1\u6570\u91cf\u5927\u4e8e maximumPoolSize \u65f6\uff0c\u5c06\u4efb\u52a1\u653e\u5165\u963b\u585e\u961f\u5217\u4e2d\u3002\u963b\u585e\u961f\u5217\u5145\u6ee1\u65f6\u629b\u51fa RejectedExecutionException \u3002(\u76f8\u6bd4\u4e8e cached : cached \u5728\u4efb\u52a1\u6570\u91cf\u8d85\u8fc7 maximumPoolSize \u65f6\u76f4\u63a5\u629b\u51fa\u5f02\u5e38\u800c\u4e0d\u662f\u5c06\u4efb\u52a1\u653e\u5165\u963b\u585e\u961f\u5217)","title":"\u7ebf\u7a0b\u6a21\u578b"},{"location":"user/demos/tls/","text":"\u5f00\u542f TLS 2.7.5 \u7248\u672c\u5728\u4f20\u8f93\u94fe\u8def\u7684\u5b89\u5168\u6027\u4e0a\u505a\u4e86\u5f88\u591a\u5de5\u4f5c\uff0c\u5bf9\u4e8e\u5185\u7f6e\u7684 Dubbo Netty Server \u548c\u65b0\u5f15\u5165\u7684 gRPC \u534f\u8bae\u90fd\u63d0\u4f9b\u4e86\u57fa\u4e8e TLS \u7684\u5b89\u5168\u94fe\u8def\u4f20\u8f93\u673a\u5236\u3002 TLS \u7684\u914d\u7f6e\u90fd\u6709\u7edf\u4e00\u7684\u5165\u53e3\uff0c\u5982\u4e0b\u6240\u793a\uff1a Provider \u7aef SslConfig sslConfig = new SslConfig(); sslConfig.setServerKeyCertChainPath( path to cert ); sslConfig.setServerPrivateKeyPath(args[1]); // \u5982\u679c\u5f00\u542f\u53cc\u5411 cert \u8ba4\u8bc1 if (mutualTls) { sslConfig.setServerTrustCertCollectionPath(args[2]); } ProtocolConfig protocolConfig = new ProtocolConfig( dubbo/grpc ); protocolConfig.setSslEnabled(true); Consumer \u7aef if (!mutualTls) {} sslConfig.setClientTrustCertCollectionPath(args[0]); } else { sslConfig.setClientTrustCertCollectionPath(args[0]); sslConfig.setClientKeyCertChainPath(args[1]); sslConfig.setClientPrivateKeyPath(args[2]); } \u4e3a\u5c3d\u53ef\u80fd\u4fdd\u8bc1\u5e94\u7528\u542f\u52a8\u7684\u7075\u6d3b\u6027\uff0cTLS Cert \u7684\u6307\u5b9a\u8fd8\u80fd\u901a\u8fc7 -D \u53c2\u6570\u6216\u73af\u5883\u53d8\u91cf\u7b49\u65b9\u5f0f\u6765\u5728\u542f\u52a8\u9636\u6bb5\u6839\u636e\u90e8\u7f72\u73af\u5883\u52a8\u6001\u6307\u5b9a\uff0c\u5177\u4f53\u8bf7\u53c2\u89c1 Dubbo \u914d\u7f6e\u8bfb\u53d6\u89c4\u5219\u4e0e TLS \u793a\u4f8b Dubbo \u914d\u7f6e\u8bfb\u53d6\u89c4\u5219\uff1ahttp://dubbo.apache.org/zh-cn/docs/user/configuration/configuration-load-process.html TLS \u793a\u4f8b\uff1ahttps://github.com/apache/dubbo-samples/tree/master/java/dubbo-samples-ssl \u5982\u679c\u8981\u4f7f\u7528\u7684\u662f gRPC \u534f\u8bae\uff0c\u5728\u5f00\u542f TLS \u65f6\u4f1a\u4f7f\u7528\u5230\u534f\u8bae\u534f\u5546\u673a\u5236\uff0c\u56e0\u6b64\u5fc5\u987b\u4f7f\u7528\u652f\u6301 ALPN \u673a\u5236\u7684 Provider\uff0c\u63a8\u8350\u4f7f\u7528\u7684\u662f netty-tcnative\uff0c\u5177\u4f53\u53ef\u53c2\u89c1 gRPC Java \u793e\u533a\u7684\u603b\u7ed3\uff1a https://github.com/grpc/grpc-java/blob/master/SECURITY.md \u5728\u670d\u52a1\u8c03\u7528\u7684\u5b89\u5168\u6027\u4e0a\uff0cDubbo \u5728\u540e\u7eed\u7684\u7248\u672c\u4e2d\u4f1a\u6301\u7eed\u6295\u5165\uff0c\u5176\u4e2d\u670d\u52a1\u53d1\u73b0/\u8c03\u7528\u7684\u9274\u6743\u673a\u5236\u9884\u8ba1\u5728\u63a5\u4e0b\u6765\u7684\u7248\u672c\u4e2d\u5c31\u4f1a\u548c\u5927\u5bb6\u89c1\u9762\u3002","title":"\u5f00\u542f TLS"},{"location":"user/demos/tls/#tls","text":"2.7.5 \u7248\u672c\u5728\u4f20\u8f93\u94fe\u8def\u7684\u5b89\u5168\u6027\u4e0a\u505a\u4e86\u5f88\u591a\u5de5\u4f5c\uff0c\u5bf9\u4e8e\u5185\u7f6e\u7684 Dubbo Netty Server \u548c\u65b0\u5f15\u5165\u7684 gRPC \u534f\u8bae\u90fd\u63d0\u4f9b\u4e86\u57fa\u4e8e TLS \u7684\u5b89\u5168\u94fe\u8def\u4f20\u8f93\u673a\u5236\u3002 TLS \u7684\u914d\u7f6e\u90fd\u6709\u7edf\u4e00\u7684\u5165\u53e3\uff0c\u5982\u4e0b\u6240\u793a\uff1a Provider \u7aef SslConfig sslConfig = new SslConfig(); sslConfig.setServerKeyCertChainPath( path to cert ); sslConfig.setServerPrivateKeyPath(args[1]); // \u5982\u679c\u5f00\u542f\u53cc\u5411 cert \u8ba4\u8bc1 if (mutualTls) { sslConfig.setServerTrustCertCollectionPath(args[2]); } ProtocolConfig protocolConfig = new ProtocolConfig( dubbo/grpc ); protocolConfig.setSslEnabled(true); Consumer \u7aef if (!mutualTls) {} sslConfig.setClientTrustCertCollectionPath(args[0]); } else { sslConfig.setClientTrustCertCollectionPath(args[0]); sslConfig.setClientKeyCertChainPath(args[1]); sslConfig.setClientPrivateKeyPath(args[2]); } \u4e3a\u5c3d\u53ef\u80fd\u4fdd\u8bc1\u5e94\u7528\u542f\u52a8\u7684\u7075\u6d3b\u6027\uff0cTLS Cert \u7684\u6307\u5b9a\u8fd8\u80fd\u901a\u8fc7 -D \u53c2\u6570\u6216\u73af\u5883\u53d8\u91cf\u7b49\u65b9\u5f0f\u6765\u5728\u542f\u52a8\u9636\u6bb5\u6839\u636e\u90e8\u7f72\u73af\u5883\u52a8\u6001\u6307\u5b9a\uff0c\u5177\u4f53\u8bf7\u53c2\u89c1 Dubbo \u914d\u7f6e\u8bfb\u53d6\u89c4\u5219\u4e0e TLS \u793a\u4f8b Dubbo \u914d\u7f6e\u8bfb\u53d6\u89c4\u5219\uff1ahttp://dubbo.apache.org/zh-cn/docs/user/configuration/configuration-load-process.html TLS \u793a\u4f8b\uff1ahttps://github.com/apache/dubbo-samples/tree/master/java/dubbo-samples-ssl \u5982\u679c\u8981\u4f7f\u7528\u7684\u662f gRPC \u534f\u8bae\uff0c\u5728\u5f00\u542f TLS \u65f6\u4f1a\u4f7f\u7528\u5230\u534f\u8bae\u534f\u5546\u673a\u5236\uff0c\u56e0\u6b64\u5fc5\u987b\u4f7f\u7528\u652f\u6301 ALPN \u673a\u5236\u7684 Provider\uff0c\u63a8\u8350\u4f7f\u7528\u7684\u662f netty-tcnative\uff0c\u5177\u4f53\u53ef\u53c2\u89c1 gRPC Java \u793e\u533a\u7684\u603b\u7ed3\uff1a https://github.com/grpc/grpc-java/blob/master/SECURITY.md \u5728\u670d\u52a1\u8c03\u7528\u7684\u5b89\u5168\u6027\u4e0a\uff0cDubbo \u5728\u540e\u7eed\u7684\u7248\u672c\u4e2d\u4f1a\u6301\u7eed\u6295\u5165\uff0c\u5176\u4e2d\u670d\u52a1\u53d1\u73b0/\u8c03\u7528\u7684\u9274\u6743\u673a\u5236\u9884\u8ba1\u5728\u63a5\u4e0b\u6765\u7684\u7248\u672c\u4e2d\u5c31\u4f1a\u548c\u5927\u5bb6\u89c1\u9762\u3002","title":"\u5f00\u542f TLS"},{"location":"user/demos/token-authorization/","text":"\u4ee4\u724c\u9a8c\u8bc1 \u901a\u8fc7\u4ee4\u724c\u9a8c\u8bc1\u5728\u6ce8\u518c\u4e2d\u5fc3\u63a7\u5236\u6743\u9650\uff0c\u4ee5\u51b3\u5b9a\u8981\u4e0d\u8981\u4e0b\u53d1\u4ee4\u724c\u7ed9\u6d88\u8d39\u8005\uff0c\u53ef\u4ee5\u9632\u6b62\u6d88\u8d39\u8005\u7ed5\u8fc7\u6ce8\u518c\u4e2d\u5fc3\u8bbf\u95ee\u63d0\u4f9b\u8005\uff0c\u53e6\u5916\u901a\u8fc7\u6ce8\u518c\u4e2d\u5fc3\u53ef\u7075\u6d3b\u6539\u53d8\u6388\u6743\u65b9\u5f0f\uff0c\u800c\u4e0d\u9700\u4fee\u6539\u6216\u5347\u7ea7\u63d0\u4f9b\u8005 \u53ef\u4ee5\u5168\u5c40\u8bbe\u7f6e\u5f00\u542f\u4ee4\u724c\u9a8c\u8bc1\uff1a !--\u968f\u673atoken\u4ee4\u724c\uff0c\u4f7f\u7528UUID\u751f\u6210-- dubbo:provider interface= com.foo.BarService token= true / \u6216 !--\u56fa\u5b9atoken\u4ee4\u724c\uff0c\u76f8\u5f53\u4e8e\u5bc6\u7801-- dubbo:provider interface= com.foo.BarService token= 123456 / \u4e5f\u53ef\u5728\u670d\u52a1\u7ea7\u522b\u8bbe\u7f6e\uff1a !--\u968f\u673atoken\u4ee4\u724c\uff0c\u4f7f\u7528UUID\u751f\u6210-- dubbo:service interface= com.foo.BarService token= true / \u6216 !--\u56fa\u5b9atoken\u4ee4\u724c\uff0c\u76f8\u5f53\u4e8e\u5bc6\u7801-- dubbo:service interface= com.foo.BarService token= 123456 /","title":"\u4ee4\u724c\u9a8c\u8bc1"},{"location":"user/demos/token-authorization/#_1","text":"\u901a\u8fc7\u4ee4\u724c\u9a8c\u8bc1\u5728\u6ce8\u518c\u4e2d\u5fc3\u63a7\u5236\u6743\u9650\uff0c\u4ee5\u51b3\u5b9a\u8981\u4e0d\u8981\u4e0b\u53d1\u4ee4\u724c\u7ed9\u6d88\u8d39\u8005\uff0c\u53ef\u4ee5\u9632\u6b62\u6d88\u8d39\u8005\u7ed5\u8fc7\u6ce8\u518c\u4e2d\u5fc3\u8bbf\u95ee\u63d0\u4f9b\u8005\uff0c\u53e6\u5916\u901a\u8fc7\u6ce8\u518c\u4e2d\u5fc3\u53ef\u7075\u6d3b\u6539\u53d8\u6388\u6743\u65b9\u5f0f\uff0c\u800c\u4e0d\u9700\u4fee\u6539\u6216\u5347\u7ea7\u63d0\u4f9b\u8005 \u53ef\u4ee5\u5168\u5c40\u8bbe\u7f6e\u5f00\u542f\u4ee4\u724c\u9a8c\u8bc1\uff1a !--\u968f\u673atoken\u4ee4\u724c\uff0c\u4f7f\u7528UUID\u751f\u6210-- dubbo:provider interface= com.foo.BarService token= true / \u6216 !--\u56fa\u5b9atoken\u4ee4\u724c\uff0c\u76f8\u5f53\u4e8e\u5bc6\u7801-- dubbo:provider interface= com.foo.BarService token= 123456 / \u4e5f\u53ef\u5728\u670d\u52a1\u7ea7\u522b\u8bbe\u7f6e\uff1a !--\u968f\u673atoken\u4ee4\u724c\uff0c\u4f7f\u7528UUID\u751f\u6210-- dubbo:service interface= com.foo.BarService token= true / \u6216 !--\u56fa\u5b9atoken\u4ee4\u724c\uff0c\u76f8\u5f53\u4e8e\u5bc6\u7801-- dubbo:service interface= com.foo.BarService token= 123456 /","title":"\u4ee4\u724c\u9a8c\u8bc1"},{"location":"user/languages/erlang/reference/","text":"\u6d88\u8d39\u8005\u914d\u7f6e \u57fa\u7840\u914d\u7f6e \u6d88\u8d39\u8005\u914d\u7f6e\u9879\u9700\u8981\u6dfb\u52a0\u5230 sys.config \u6587\u4ef6 dubboerl \u5e94\u7528\u914d\u7f6e\u9879\u91cc\u3002 {dubboerl,[ %% other config ... {consumer,[ { interface fullname ,[Option]}, %% eg: { org.apache.dubbo.erlang.sample.service.facade.UserOperator ,[]}, ]} ]} Option \u914d\u7f6e\u9879\u5f85\u6dfb\u52a0\u4e2d.","title":"\u6d88\u8d39\u8005\u914d\u7f6e"},{"location":"user/languages/erlang/reference/#_1","text":"","title":"\u6d88\u8d39\u8005\u914d\u7f6e"},{"location":"user/languages/erlang/reference/#_2","text":"\u6d88\u8d39\u8005\u914d\u7f6e\u9879\u9700\u8981\u6dfb\u52a0\u5230 sys.config \u6587\u4ef6 dubboerl \u5e94\u7528\u914d\u7f6e\u9879\u91cc\u3002 {dubboerl,[ %% other config ... {consumer,[ { interface fullname ,[Option]}, %% eg: { org.apache.dubbo.erlang.sample.service.facade.UserOperator ,[]}, ]} ]} Option \u914d\u7f6e\u9879\u5f85\u6dfb\u52a0\u4e2d.","title":"\u57fa\u7840\u914d\u7f6e"},{"location":"user/languages/erlang/serialization/","text":"\u5e8f\u5217\u5316\u914d\u7f6e\u9879 \u5f53\u524d\u8be5\u5e93\u53ea\u5b9e\u73b0\u4e86 dubbo:// \u901a\u8baf\u534f\u8bae\u3002 \u5e8f\u5217\u5316\u65b9\u5f0f\u5b9e\u73b0\u4e86 hessian \u548c json \u4e24\u79cd\u65b9\u5f0f\u3002 \u914d\u7f6e\u6837\u4f8b \u5e8f\u5217\u5316\u914d\u7f6e\u9700\u8981\u6dfb\u52a0\u5230 sys.config \u6587\u4ef6 dubboerl \u5e94\u7528\u914d\u7f6e\u9879\u91cc\u3002 {dubboerl,[ %% other config ... {protocol,hessian} ]} ConfigName Type DefaultValue Remarks protocol atom() hessian hessian,json","title":"\u5e8f\u5217\u5316\u914d\u7f6e\u9879"},{"location":"user/languages/erlang/serialization/#_1","text":"\u5f53\u524d\u8be5\u5e93\u53ea\u5b9e\u73b0\u4e86 dubbo:// \u901a\u8baf\u534f\u8bae\u3002 \u5e8f\u5217\u5316\u65b9\u5f0f\u5b9e\u73b0\u4e86 hessian \u548c json \u4e24\u79cd\u65b9\u5f0f\u3002","title":"\u5e8f\u5217\u5316\u914d\u7f6e\u9879"},{"location":"user/languages/erlang/serialization/#_2","text":"\u5e8f\u5217\u5316\u914d\u7f6e\u9700\u8981\u6dfb\u52a0\u5230 sys.config \u6587\u4ef6 dubboerl \u5e94\u7528\u914d\u7f6e\u9879\u91cc\u3002 {dubboerl,[ %% other config ... {protocol,hessian} ]} ConfigName Type DefaultValue Remarks protocol atom() hessian hessian,json","title":"\u914d\u7f6e\u6837\u4f8b"},{"location":"user/languages/erlang/service/","text":"\u63d0\u4f9b\u8005\u914d\u7f6e \u57fa\u672c\u914d\u7f6e \u63d0\u4f9b\u8005\u914d\u7f6e\u9879\u9700\u8981\u6dfb\u52a0\u5230 sys.config \u6587\u4ef6 dubboerl \u5e94\u7528\u914d\u7f6e\u9879\u91cc\u3002 {dubboerl,[ %% other config ... {provider,[ {module_implements,interface_module,interface_fullname,[Options]}, %% eg: {userOperator_impl,userOperator, org.apache.dubbo.erlang.sample.service.facade.UserOperator ,[Option]} ]} ]} ConfigName Type DefaultValue Remarks module_implements atom() - The service implements module name interface_module atom() - Interface module name is transfer form java jar interface_fullname binary() - Interface full name is the java class name Option is to be added.","title":"\u63d0\u4f9b\u8005\u914d\u7f6e"},{"location":"user/languages/erlang/service/#_1","text":"","title":"\u63d0\u4f9b\u8005\u914d\u7f6e"},{"location":"user/languages/erlang/service/#_2","text":"\u63d0\u4f9b\u8005\u914d\u7f6e\u9879\u9700\u8981\u6dfb\u52a0\u5230 sys.config \u6587\u4ef6 dubboerl \u5e94\u7528\u914d\u7f6e\u9879\u91cc\u3002 {dubboerl,[ %% other config ... {provider,[ {module_implements,interface_module,interface_fullname,[Options]}, %% eg: {userOperator_impl,userOperator, org.apache.dubbo.erlang.sample.service.facade.UserOperator ,[Option]} ]} ]} ConfigName Type DefaultValue Remarks module_implements atom() - The service implements module name interface_module atom() - Interface module name is transfer form java jar interface_fullname binary() - Interface full name is the java class name Option is to be added.","title":"\u57fa\u672c\u914d\u7f6e"},{"location":"user/languages/erlang/start/","text":"\u5feb\u901f\u5f00\u59cb \u5efa\u8bae\u5148\u4f7f\u7528java\u5b9a\u4e49\u63a5\u53e3jar\uff0c\u5e76\u4f7f\u7528 erlanalysis \u5de5\u5177\u89e3\u6790java\u63a5\u53e3\u81f3Erlang lib \u5bfc\u5165\u4f9d\u8d56\u5e93 \u4f7f\u7528 Rebar \u7f16\u8bd1\u5de5\u5177\u3002 Add dubblerl to rebar.config with your project {deps, [ {dubboerl, {git, https://github.com/apache/dubbo-erlang.git , {branch, master }}} ]}. \u4f7f\u7528 erlang.mk \u7f16\u8bd1\u5de5\u5177 \u5f85\u8865\u5145 \u5bfc\u5165\u63a5\u53e3\u5e93 Suppose the interface lib you exported is called dubbo_service. If you didn't upload your lib to your git repository, It is recommended that you copy the dubbo_service lib into the project's apps directory. If it is upload to your git repository, you can import like this: {deps, [ {dubboerl, {git, https://github.com/apache/dubbo-erlang.git , {branch, master }}}, {dubbo_service,{git, ${INTERFACE_LIB_URL} ,{branch, master }}} %% replace ${INTERFACE_LIB_URL} with your lib git repos url ]}. \u6d88\u8d39\u8005\u914d\u7f6e Please reference Reference Config Init dubbolib in your project It is need you dubboerl:init(). \u5982\u4f55\u8c03\u7528\uff1f \u540c\u6b65\u8c03\u7528 Request = #userInfoRequest{requestId = 123, username = testname }, {ok,RequestRef,Response,RpcContent} = userOperator:queryUserInfo(Request,#{sync= true}). If it occur error, is reponse {error,Reason} . \u5f02\u6b65\u8c03\u7528 Default is Async call. Request = #userInfoRequest{requestId = 123, username = testname }, {ok,RequestRef} = userOperator:queryUserInfo(Request). %% you can receive the message after. handle_cast({msg_back,RequestRef,Response,RpcContent},State). \u793a\u4f8b \u53c2\u8003\u9879\u76ee dubboerl_demo","title":"\u5feb\u901f\u5f00\u59cb"},{"location":"user/languages/erlang/start/#_1","text":"\u5efa\u8bae\u5148\u4f7f\u7528java\u5b9a\u4e49\u63a5\u53e3jar\uff0c\u5e76\u4f7f\u7528 erlanalysis \u5de5\u5177\u89e3\u6790java\u63a5\u53e3\u81f3Erlang lib","title":"\u5feb\u901f\u5f00\u59cb"},{"location":"user/languages/erlang/start/#_2","text":"","title":"\u5bfc\u5165\u4f9d\u8d56\u5e93"},{"location":"user/languages/erlang/start/#rebar","text":"Add dubblerl to rebar.config with your project {deps, [ {dubboerl, {git, https://github.com/apache/dubbo-erlang.git , {branch, master }}} ]}.","title":"\u4f7f\u7528 Rebar \u7f16\u8bd1\u5de5\u5177\u3002"},{"location":"user/languages/erlang/start/#erlangmk","text":"\u5f85\u8865\u5145","title":"\u4f7f\u7528 erlang.mk \u7f16\u8bd1\u5de5\u5177"},{"location":"user/languages/erlang/start/#_3","text":"Suppose the interface lib you exported is called dubbo_service. If you didn't upload your lib to your git repository, It is recommended that you copy the dubbo_service lib into the project's apps directory. If it is upload to your git repository, you can import like this: {deps, [ {dubboerl, {git, https://github.com/apache/dubbo-erlang.git , {branch, master }}}, {dubbo_service,{git, ${INTERFACE_LIB_URL} ,{branch, master }}} %% replace ${INTERFACE_LIB_URL} with your lib git repos url ]}.","title":"\u5bfc\u5165\u63a5\u53e3\u5e93"},{"location":"user/languages/erlang/start/#_4","text":"Please reference Reference Config","title":"\u6d88\u8d39\u8005\u914d\u7f6e"},{"location":"user/languages/erlang/start/#init-dubbolib-in-your-project","text":"It is need you dubboerl:init().","title":"Init dubbolib in your project"},{"location":"user/languages/erlang/start/#_5","text":"","title":"\u5982\u4f55\u8c03\u7528\uff1f"},{"location":"user/languages/erlang/start/#_6","text":"Request = #userInfoRequest{requestId = 123, username = testname }, {ok,RequestRef,Response,RpcContent} = userOperator:queryUserInfo(Request,#{sync= true}). If it occur error, is reponse {error,Reason} .","title":"\u540c\u6b65\u8c03\u7528"},{"location":"user/languages/erlang/start/#_7","text":"Default is Async call. Request = #userInfoRequest{requestId = 123, username = testname }, {ok,RequestRef} = userOperator:queryUserInfo(Request). %% you can receive the message after. handle_cast({msg_back,RequestRef,Response,RpcContent},State).","title":"\u5f02\u6b65\u8c03\u7528"},{"location":"user/languages/erlang/start/#_8","text":"\u53c2\u8003\u9879\u76ee dubboerl_demo","title":"\u793a\u4f8b"},{"location":"user/preface/","text":"\u5165\u95e8","title":"\u5165\u95e8"},{"location":"user/preface/#_1","text":"","title":"\u5165\u95e8"},{"location":"user/preface/architecture/","text":"\u67b6\u6784 \u8282\u70b9\u89d2\u8272\u8bf4\u660e \u8282\u70b9 \u89d2\u8272\u8bf4\u660e Provider \u66b4\u9732\u670d\u52a1\u7684\u670d\u52a1\u63d0\u4f9b\u65b9 Consumer \u8c03\u7528\u8fdc\u7a0b\u670d\u52a1\u7684\u670d\u52a1\u6d88\u8d39\u65b9 Registry \u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u7684\u6ce8\u518c\u4e2d\u5fc3 Monitor \u7edf\u8ba1\u670d\u52a1\u7684\u8c03\u7528\u6b21\u6570\u548c\u8c03\u7528\u65f6\u95f4\u7684\u76d1\u63a7\u4e2d\u5fc3 Container \u670d\u52a1\u8fd0\u884c\u5bb9\u5668 \u8c03\u7528\u5173\u7cfb\u8bf4\u660e \u670d\u52a1\u5bb9\u5668\u8d1f\u8d23\u542f\u52a8\uff0c\u52a0\u8f7d\uff0c\u8fd0\u884c\u670d\u52a1\u63d0\u4f9b\u8005\u3002 \u670d\u52a1\u63d0\u4f9b\u8005\u5728\u542f\u52a8\u65f6\uff0c\u5411\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u81ea\u5df1\u63d0\u4f9b\u7684\u670d\u52a1\u3002 \u670d\u52a1\u6d88\u8d39\u8005\u5728\u542f\u52a8\u65f6\uff0c\u5411\u6ce8\u518c\u4e2d\u5fc3\u8ba2\u9605\u81ea\u5df1\u6240\u9700\u7684\u670d\u52a1\u3002 \u6ce8\u518c\u4e2d\u5fc3\u8fd4\u56de\u670d\u52a1\u63d0\u4f9b\u8005\u5730\u5740\u5217\u8868\u7ed9\u6d88\u8d39\u8005\uff0c\u5982\u679c\u6709\u53d8\u66f4\uff0c\u6ce8\u518c\u4e2d\u5fc3\u5c06\u57fa\u4e8e\u957f\u8fde\u63a5\u63a8\u9001\u53d8\u66f4\u6570\u636e\u7ed9\u6d88\u8d39\u8005\u3002 \u670d\u52a1\u6d88\u8d39\u8005\uff0c\u4ece\u63d0\u4f9b\u8005\u5730\u5740\u5217\u8868\u4e2d\uff0c\u57fa\u4e8e\u8f6f\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\uff0c\u9009\u4e00\u53f0\u63d0\u4f9b\u8005\u8fdb\u884c\u8c03\u7528\uff0c\u5982\u679c\u8c03\u7528\u5931\u8d25\uff0c\u518d\u9009\u53e6\u4e00\u53f0\u8c03\u7528\u3002 \u670d\u52a1\u6d88\u8d39\u8005\u548c\u63d0\u4f9b\u8005\uff0c\u5728\u5185\u5b58\u4e2d\u7d2f\u8ba1\u8c03\u7528\u6b21\u6570\u548c\u8c03\u7528\u65f6\u95f4\uff0c\u5b9a\u65f6\u6bcf\u5206\u949f\u53d1\u9001\u4e00\u6b21\u7edf\u8ba1\u6570\u636e\u5230\u76d1\u63a7\u4e2d\u5fc3\u3002 Dubbo \u67b6\u6784\u5177\u6709\u4ee5\u4e0b\u51e0\u4e2a\u7279\u70b9\uff0c\u5206\u522b\u662f\u8fde\u901a\u6027\u3001\u5065\u58ee\u6027\u3001\u4f38\u7f29\u6027\u3001\u4ee5\u53ca\u5411\u672a\u6765\u67b6\u6784\u7684\u5347\u7ea7\u6027\u3002 \u8fde\u901a\u6027 \u6ce8\u518c\u4e2d\u5fc3\u8d1f\u8d23\u670d\u52a1\u5730\u5740\u7684\u6ce8\u518c\u4e0e\u67e5\u627e\uff0c\u76f8\u5f53\u4e8e\u76ee\u5f55\u670d\u52a1\uff0c\u670d\u52a1\u63d0\u4f9b\u8005\u548c\u6d88\u8d39\u8005\u53ea\u5728\u542f\u52a8\u65f6\u4e0e\u6ce8\u518c\u4e2d\u5fc3\u4ea4\u4e92\uff0c\u6ce8\u518c\u4e2d\u5fc3\u4e0d\u8f6c\u53d1\u8bf7\u6c42\uff0c\u538b\u529b\u8f83\u5c0f \u76d1\u63a7\u4e2d\u5fc3\u8d1f\u8d23\u7edf\u8ba1\u5404\u670d\u52a1\u8c03\u7528\u6b21\u6570\uff0c\u8c03\u7528\u65f6\u95f4\u7b49\uff0c\u7edf\u8ba1\u5148\u5728\u5185\u5b58\u6c47\u603b\u540e\u6bcf\u5206\u949f\u4e00\u6b21\u53d1\u9001\u5230\u76d1\u63a7\u4e2d\u5fc3\u670d\u52a1\u5668\uff0c\u5e76\u4ee5\u62a5\u8868\u5c55\u793a \u670d\u52a1\u63d0\u4f9b\u8005\u5411\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u5176\u63d0\u4f9b\u7684\u670d\u52a1\uff0c\u5e76\u6c47\u62a5\u8c03\u7528\u65f6\u95f4\u5230\u76d1\u63a7\u4e2d\u5fc3\uff0c\u6b64\u65f6\u95f4\u4e0d\u5305\u542b\u7f51\u7edc\u5f00\u9500 \u670d\u52a1\u6d88\u8d39\u8005\u5411\u6ce8\u518c\u4e2d\u5fc3\u83b7\u53d6\u670d\u52a1\u63d0\u4f9b\u8005\u5730\u5740\u5217\u8868\uff0c\u5e76\u6839\u636e\u8d1f\u8f7d\u7b97\u6cd5\u76f4\u63a5\u8c03\u7528\u63d0\u4f9b\u8005\uff0c\u540c\u65f6\u6c47\u62a5\u8c03\u7528\u65f6\u95f4\u5230\u76d1\u63a7\u4e2d\u5fc3\uff0c\u6b64\u65f6\u95f4\u5305\u542b\u7f51\u7edc\u5f00\u9500 \u6ce8\u518c\u4e2d\u5fc3\uff0c\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u670d\u52a1\u6d88\u8d39\u8005\u4e09\u8005\u4e4b\u95f4\u5747\u4e3a\u957f\u8fde\u63a5\uff0c\u76d1\u63a7\u4e2d\u5fc3\u9664\u5916 \u6ce8\u518c\u4e2d\u5fc3\u901a\u8fc7\u957f\u8fde\u63a5\u611f\u77e5\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u5b58\u5728\uff0c\u670d\u52a1\u63d0\u4f9b\u8005\u5b95\u673a\uff0c\u6ce8\u518c\u4e2d\u5fc3\u5c06\u7acb\u5373\u63a8\u9001\u4e8b\u4ef6\u901a\u77e5\u6d88\u8d39\u8005 \u6ce8\u518c\u4e2d\u5fc3\u548c\u76d1\u63a7\u4e2d\u5fc3\u5168\u90e8\u5b95\u673a\uff0c\u4e0d\u5f71\u54cd\u5df2\u8fd0\u884c\u7684\u63d0\u4f9b\u8005\u548c\u6d88\u8d39\u8005\uff0c\u6d88\u8d39\u8005\u5728\u672c\u5730\u7f13\u5b58\u4e86\u63d0\u4f9b\u8005\u5217\u8868 \u6ce8\u518c\u4e2d\u5fc3\u548c\u76d1\u63a7\u4e2d\u5fc3\u90fd\u662f\u53ef\u9009\u7684\uff0c\u670d\u52a1\u6d88\u8d39\u8005\u53ef\u4ee5\u76f4\u8fde\u670d\u52a1\u63d0\u4f9b\u8005 \u5065\u58ee\u6027 \u76d1\u63a7\u4e2d\u5fc3\u5b95\u6389\u4e0d\u5f71\u54cd\u4f7f\u7528\uff0c\u53ea\u662f\u4e22\u5931\u90e8\u5206\u91c7\u6837\u6570\u636e \u6570\u636e\u5e93\u5b95\u6389\u540e\uff0c\u6ce8\u518c\u4e2d\u5fc3\u4ecd\u80fd\u901a\u8fc7\u7f13\u5b58\u63d0\u4f9b\u670d\u52a1\u5217\u8868\u67e5\u8be2\uff0c\u4f46\u4e0d\u80fd\u6ce8\u518c\u65b0\u670d\u52a1 \u6ce8\u518c\u4e2d\u5fc3\u5bf9\u7b49\u96c6\u7fa4\uff0c\u4efb\u610f\u4e00\u53f0\u5b95\u6389\u540e\uff0c\u5c06\u81ea\u52a8\u5207\u6362\u5230\u53e6\u4e00\u53f0 \u6ce8\u518c\u4e2d\u5fc3\u5168\u90e8\u5b95\u6389\u540e\uff0c\u670d\u52a1\u63d0\u4f9b\u8005\u548c\u670d\u52a1\u6d88\u8d39\u8005\u4ecd\u80fd\u901a\u8fc7\u672c\u5730\u7f13\u5b58\u901a\u8baf \u670d\u52a1\u63d0\u4f9b\u8005\u65e0\u72b6\u6001\uff0c\u4efb\u610f\u4e00\u53f0\u5b95\u6389\u540e\uff0c\u4e0d\u5f71\u54cd\u4f7f\u7528 \u670d\u52a1\u63d0\u4f9b\u8005\u5168\u90e8\u5b95\u6389\u540e\uff0c\u670d\u52a1\u6d88\u8d39\u8005\u5e94\u7528\u5c06\u65e0\u6cd5\u4f7f\u7528\uff0c\u5e76\u65e0\u9650\u6b21\u91cd\u8fde\u7b49\u5f85\u670d\u52a1\u63d0\u4f9b\u8005\u6062\u590d \u4f38\u7f29\u6027 \u6ce8\u518c\u4e2d\u5fc3\u4e3a\u5bf9\u7b49\u96c6\u7fa4\uff0c\u53ef\u52a8\u6001\u589e\u52a0\u673a\u5668\u90e8\u7f72\u5b9e\u4f8b\uff0c\u6240\u6709\u5ba2\u6237\u7aef\u5c06\u81ea\u52a8\u53d1\u73b0\u65b0\u7684\u6ce8\u518c\u4e2d\u5fc3 \u670d\u52a1\u63d0\u4f9b\u8005\u65e0\u72b6\u6001\uff0c\u53ef\u52a8\u6001\u589e\u52a0\u673a\u5668\u90e8\u7f72\u5b9e\u4f8b\uff0c\u6ce8\u518c\u4e2d\u5fc3\u5c06\u63a8\u9001\u65b0\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u4fe1\u606f\u7ed9\u6d88\u8d39\u8005 \u5347\u7ea7\u6027 \u5f53\u670d\u52a1\u96c6\u7fa4\u89c4\u6a21\u8fdb\u4e00\u6b65\u6269\u5927\uff0c\u5e26\u52a8IT\u6cbb\u7406\u7ed3\u6784\u8fdb\u4e00\u6b65\u5347\u7ea7\uff0c\u9700\u8981\u5b9e\u73b0\u52a8\u6001\u90e8\u7f72\uff0c\u8fdb\u884c\u6d41\u52a8\u8ba1\u7b97\uff0c\u73b0\u6709\u5206\u5e03\u5f0f\u670d\u52a1\u67b6\u6784\u4e0d\u4f1a\u5e26\u6765\u963b\u529b\u3002\u4e0b\u56fe\u662f\u672a\u6765\u53ef\u80fd\u7684\u4e00\u79cd\u67b6\u6784\uff1a \u8282\u70b9\u89d2\u8272\u8bf4\u660e \u8282\u70b9 \u89d2\u8272\u8bf4\u660e Deployer \u81ea\u52a8\u90e8\u7f72\u670d\u52a1\u7684\u672c\u5730\u4ee3\u7406 Repository \u4ed3\u5e93\u7528\u4e8e\u5b58\u50a8\u670d\u52a1\u5e94\u7528\u53d1\u5e03\u5305 Scheduler \u8c03\u5ea6\u4e2d\u5fc3\u57fa\u4e8e\u8bbf\u95ee\u538b\u529b\u81ea\u52a8\u589e\u51cf\u670d\u52a1\u63d0\u4f9b\u8005 Admin \u7edf\u4e00\u7ba1\u7406\u63a7\u5236\u53f0 Registry \u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u7684\u6ce8\u518c\u4e2d\u5fc3 Monitor \u7edf\u8ba1\u670d\u52a1\u7684\u8c03\u7528\u6b21\u6570\u548c\u8c03\u7528\u65f6\u95f4\u7684\u76d1\u63a7\u4e2d\u5fc3","title":"\u67b6\u6784"},{"location":"user/preface/architecture/#_1","text":"","title":"\u67b6\u6784"},{"location":"user/preface/architecture/#_2","text":"\u8282\u70b9 \u89d2\u8272\u8bf4\u660e Provider \u66b4\u9732\u670d\u52a1\u7684\u670d\u52a1\u63d0\u4f9b\u65b9 Consumer \u8c03\u7528\u8fdc\u7a0b\u670d\u52a1\u7684\u670d\u52a1\u6d88\u8d39\u65b9 Registry \u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u7684\u6ce8\u518c\u4e2d\u5fc3 Monitor \u7edf\u8ba1\u670d\u52a1\u7684\u8c03\u7528\u6b21\u6570\u548c\u8c03\u7528\u65f6\u95f4\u7684\u76d1\u63a7\u4e2d\u5fc3 Container \u670d\u52a1\u8fd0\u884c\u5bb9\u5668","title":"\u8282\u70b9\u89d2\u8272\u8bf4\u660e"},{"location":"user/preface/architecture/#_3","text":"\u670d\u52a1\u5bb9\u5668\u8d1f\u8d23\u542f\u52a8\uff0c\u52a0\u8f7d\uff0c\u8fd0\u884c\u670d\u52a1\u63d0\u4f9b\u8005\u3002 \u670d\u52a1\u63d0\u4f9b\u8005\u5728\u542f\u52a8\u65f6\uff0c\u5411\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u81ea\u5df1\u63d0\u4f9b\u7684\u670d\u52a1\u3002 \u670d\u52a1\u6d88\u8d39\u8005\u5728\u542f\u52a8\u65f6\uff0c\u5411\u6ce8\u518c\u4e2d\u5fc3\u8ba2\u9605\u81ea\u5df1\u6240\u9700\u7684\u670d\u52a1\u3002 \u6ce8\u518c\u4e2d\u5fc3\u8fd4\u56de\u670d\u52a1\u63d0\u4f9b\u8005\u5730\u5740\u5217\u8868\u7ed9\u6d88\u8d39\u8005\uff0c\u5982\u679c\u6709\u53d8\u66f4\uff0c\u6ce8\u518c\u4e2d\u5fc3\u5c06\u57fa\u4e8e\u957f\u8fde\u63a5\u63a8\u9001\u53d8\u66f4\u6570\u636e\u7ed9\u6d88\u8d39\u8005\u3002 \u670d\u52a1\u6d88\u8d39\u8005\uff0c\u4ece\u63d0\u4f9b\u8005\u5730\u5740\u5217\u8868\u4e2d\uff0c\u57fa\u4e8e\u8f6f\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\uff0c\u9009\u4e00\u53f0\u63d0\u4f9b\u8005\u8fdb\u884c\u8c03\u7528\uff0c\u5982\u679c\u8c03\u7528\u5931\u8d25\uff0c\u518d\u9009\u53e6\u4e00\u53f0\u8c03\u7528\u3002 \u670d\u52a1\u6d88\u8d39\u8005\u548c\u63d0\u4f9b\u8005\uff0c\u5728\u5185\u5b58\u4e2d\u7d2f\u8ba1\u8c03\u7528\u6b21\u6570\u548c\u8c03\u7528\u65f6\u95f4\uff0c\u5b9a\u65f6\u6bcf\u5206\u949f\u53d1\u9001\u4e00\u6b21\u7edf\u8ba1\u6570\u636e\u5230\u76d1\u63a7\u4e2d\u5fc3\u3002 Dubbo \u67b6\u6784\u5177\u6709\u4ee5\u4e0b\u51e0\u4e2a\u7279\u70b9\uff0c\u5206\u522b\u662f\u8fde\u901a\u6027\u3001\u5065\u58ee\u6027\u3001\u4f38\u7f29\u6027\u3001\u4ee5\u53ca\u5411\u672a\u6765\u67b6\u6784\u7684\u5347\u7ea7\u6027\u3002","title":"\u8c03\u7528\u5173\u7cfb\u8bf4\u660e"},{"location":"user/preface/architecture/#_4","text":"\u6ce8\u518c\u4e2d\u5fc3\u8d1f\u8d23\u670d\u52a1\u5730\u5740\u7684\u6ce8\u518c\u4e0e\u67e5\u627e\uff0c\u76f8\u5f53\u4e8e\u76ee\u5f55\u670d\u52a1\uff0c\u670d\u52a1\u63d0\u4f9b\u8005\u548c\u6d88\u8d39\u8005\u53ea\u5728\u542f\u52a8\u65f6\u4e0e\u6ce8\u518c\u4e2d\u5fc3\u4ea4\u4e92\uff0c\u6ce8\u518c\u4e2d\u5fc3\u4e0d\u8f6c\u53d1\u8bf7\u6c42\uff0c\u538b\u529b\u8f83\u5c0f \u76d1\u63a7\u4e2d\u5fc3\u8d1f\u8d23\u7edf\u8ba1\u5404\u670d\u52a1\u8c03\u7528\u6b21\u6570\uff0c\u8c03\u7528\u65f6\u95f4\u7b49\uff0c\u7edf\u8ba1\u5148\u5728\u5185\u5b58\u6c47\u603b\u540e\u6bcf\u5206\u949f\u4e00\u6b21\u53d1\u9001\u5230\u76d1\u63a7\u4e2d\u5fc3\u670d\u52a1\u5668\uff0c\u5e76\u4ee5\u62a5\u8868\u5c55\u793a \u670d\u52a1\u63d0\u4f9b\u8005\u5411\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u5176\u63d0\u4f9b\u7684\u670d\u52a1\uff0c\u5e76\u6c47\u62a5\u8c03\u7528\u65f6\u95f4\u5230\u76d1\u63a7\u4e2d\u5fc3\uff0c\u6b64\u65f6\u95f4\u4e0d\u5305\u542b\u7f51\u7edc\u5f00\u9500 \u670d\u52a1\u6d88\u8d39\u8005\u5411\u6ce8\u518c\u4e2d\u5fc3\u83b7\u53d6\u670d\u52a1\u63d0\u4f9b\u8005\u5730\u5740\u5217\u8868\uff0c\u5e76\u6839\u636e\u8d1f\u8f7d\u7b97\u6cd5\u76f4\u63a5\u8c03\u7528\u63d0\u4f9b\u8005\uff0c\u540c\u65f6\u6c47\u62a5\u8c03\u7528\u65f6\u95f4\u5230\u76d1\u63a7\u4e2d\u5fc3\uff0c\u6b64\u65f6\u95f4\u5305\u542b\u7f51\u7edc\u5f00\u9500 \u6ce8\u518c\u4e2d\u5fc3\uff0c\u670d\u52a1\u63d0\u4f9b\u8005\uff0c\u670d\u52a1\u6d88\u8d39\u8005\u4e09\u8005\u4e4b\u95f4\u5747\u4e3a\u957f\u8fde\u63a5\uff0c\u76d1\u63a7\u4e2d\u5fc3\u9664\u5916 \u6ce8\u518c\u4e2d\u5fc3\u901a\u8fc7\u957f\u8fde\u63a5\u611f\u77e5\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u5b58\u5728\uff0c\u670d\u52a1\u63d0\u4f9b\u8005\u5b95\u673a\uff0c\u6ce8\u518c\u4e2d\u5fc3\u5c06\u7acb\u5373\u63a8\u9001\u4e8b\u4ef6\u901a\u77e5\u6d88\u8d39\u8005 \u6ce8\u518c\u4e2d\u5fc3\u548c\u76d1\u63a7\u4e2d\u5fc3\u5168\u90e8\u5b95\u673a\uff0c\u4e0d\u5f71\u54cd\u5df2\u8fd0\u884c\u7684\u63d0\u4f9b\u8005\u548c\u6d88\u8d39\u8005\uff0c\u6d88\u8d39\u8005\u5728\u672c\u5730\u7f13\u5b58\u4e86\u63d0\u4f9b\u8005\u5217\u8868 \u6ce8\u518c\u4e2d\u5fc3\u548c\u76d1\u63a7\u4e2d\u5fc3\u90fd\u662f\u53ef\u9009\u7684\uff0c\u670d\u52a1\u6d88\u8d39\u8005\u53ef\u4ee5\u76f4\u8fde\u670d\u52a1\u63d0\u4f9b\u8005","title":"\u8fde\u901a\u6027"},{"location":"user/preface/architecture/#_5","text":"\u76d1\u63a7\u4e2d\u5fc3\u5b95\u6389\u4e0d\u5f71\u54cd\u4f7f\u7528\uff0c\u53ea\u662f\u4e22\u5931\u90e8\u5206\u91c7\u6837\u6570\u636e \u6570\u636e\u5e93\u5b95\u6389\u540e\uff0c\u6ce8\u518c\u4e2d\u5fc3\u4ecd\u80fd\u901a\u8fc7\u7f13\u5b58\u63d0\u4f9b\u670d\u52a1\u5217\u8868\u67e5\u8be2\uff0c\u4f46\u4e0d\u80fd\u6ce8\u518c\u65b0\u670d\u52a1 \u6ce8\u518c\u4e2d\u5fc3\u5bf9\u7b49\u96c6\u7fa4\uff0c\u4efb\u610f\u4e00\u53f0\u5b95\u6389\u540e\uff0c\u5c06\u81ea\u52a8\u5207\u6362\u5230\u53e6\u4e00\u53f0 \u6ce8\u518c\u4e2d\u5fc3\u5168\u90e8\u5b95\u6389\u540e\uff0c\u670d\u52a1\u63d0\u4f9b\u8005\u548c\u670d\u52a1\u6d88\u8d39\u8005\u4ecd\u80fd\u901a\u8fc7\u672c\u5730\u7f13\u5b58\u901a\u8baf \u670d\u52a1\u63d0\u4f9b\u8005\u65e0\u72b6\u6001\uff0c\u4efb\u610f\u4e00\u53f0\u5b95\u6389\u540e\uff0c\u4e0d\u5f71\u54cd\u4f7f\u7528 \u670d\u52a1\u63d0\u4f9b\u8005\u5168\u90e8\u5b95\u6389\u540e\uff0c\u670d\u52a1\u6d88\u8d39\u8005\u5e94\u7528\u5c06\u65e0\u6cd5\u4f7f\u7528\uff0c\u5e76\u65e0\u9650\u6b21\u91cd\u8fde\u7b49\u5f85\u670d\u52a1\u63d0\u4f9b\u8005\u6062\u590d","title":"\u5065\u58ee\u6027"},{"location":"user/preface/architecture/#_6","text":"\u6ce8\u518c\u4e2d\u5fc3\u4e3a\u5bf9\u7b49\u96c6\u7fa4\uff0c\u53ef\u52a8\u6001\u589e\u52a0\u673a\u5668\u90e8\u7f72\u5b9e\u4f8b\uff0c\u6240\u6709\u5ba2\u6237\u7aef\u5c06\u81ea\u52a8\u53d1\u73b0\u65b0\u7684\u6ce8\u518c\u4e2d\u5fc3 \u670d\u52a1\u63d0\u4f9b\u8005\u65e0\u72b6\u6001\uff0c\u53ef\u52a8\u6001\u589e\u52a0\u673a\u5668\u90e8\u7f72\u5b9e\u4f8b\uff0c\u6ce8\u518c\u4e2d\u5fc3\u5c06\u63a8\u9001\u65b0\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u4fe1\u606f\u7ed9\u6d88\u8d39\u8005","title":"\u4f38\u7f29\u6027"},{"location":"user/preface/architecture/#_7","text":"\u5f53\u670d\u52a1\u96c6\u7fa4\u89c4\u6a21\u8fdb\u4e00\u6b65\u6269\u5927\uff0c\u5e26\u52a8IT\u6cbb\u7406\u7ed3\u6784\u8fdb\u4e00\u6b65\u5347\u7ea7\uff0c\u9700\u8981\u5b9e\u73b0\u52a8\u6001\u90e8\u7f72\uff0c\u8fdb\u884c\u6d41\u52a8\u8ba1\u7b97\uff0c\u73b0\u6709\u5206\u5e03\u5f0f\u670d\u52a1\u67b6\u6784\u4e0d\u4f1a\u5e26\u6765\u963b\u529b\u3002\u4e0b\u56fe\u662f\u672a\u6765\u53ef\u80fd\u7684\u4e00\u79cd\u67b6\u6784\uff1a","title":"\u5347\u7ea7\u6027"},{"location":"user/preface/architecture/#_8","text":"\u8282\u70b9 \u89d2\u8272\u8bf4\u660e Deployer \u81ea\u52a8\u90e8\u7f72\u670d\u52a1\u7684\u672c\u5730\u4ee3\u7406 Repository \u4ed3\u5e93\u7528\u4e8e\u5b58\u50a8\u670d\u52a1\u5e94\u7528\u53d1\u5e03\u5305 Scheduler \u8c03\u5ea6\u4e2d\u5fc3\u57fa\u4e8e\u8bbf\u95ee\u538b\u529b\u81ea\u52a8\u589e\u51cf\u670d\u52a1\u63d0\u4f9b\u8005 Admin \u7edf\u4e00\u7ba1\u7406\u63a7\u5236\u53f0 Registry \u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u7684\u6ce8\u518c\u4e2d\u5fc3 Monitor \u7edf\u8ba1\u670d\u52a1\u7684\u8c03\u7528\u6b21\u6570\u548c\u8c03\u7528\u65f6\u95f4\u7684\u76d1\u63a7\u4e2d\u5fc3","title":"\u8282\u70b9\u89d2\u8272\u8bf4\u660e"},{"location":"user/preface/background/","text":"\u80cc\u666f \u968f\u7740\u4e92\u8054\u7f51\u7684\u53d1\u5c55\uff0c\u7f51\u7ad9\u5e94\u7528\u7684\u89c4\u6a21\u4e0d\u65ad\u6269\u5927\uff0c\u5e38\u89c4\u7684\u5782\u76f4\u5e94\u7528\u67b6\u6784\u5df2\u65e0\u6cd5\u5e94\u5bf9\uff0c\u5206\u5e03\u5f0f\u670d\u52a1\u67b6\u6784\u4ee5\u53ca\u6d41\u52a8\u8ba1\u7b97\u67b6\u6784\u52bf\u5728\u5fc5\u884c\uff0c\u4e9f\u9700\u4e00\u4e2a\u6cbb\u7406\u7cfb\u7edf\u786e\u4fdd\u67b6\u6784\u6709\u6761\u4e0d\u7d0a\u7684\u6f14\u8fdb\u3002 \u5355\u4e00\u5e94\u7528\u67b6\u6784 \u5f53\u7f51\u7ad9\u6d41\u91cf\u5f88\u5c0f\u65f6\uff0c\u53ea\u9700\u4e00\u4e2a\u5e94\u7528\uff0c\u5c06\u6240\u6709\u529f\u80fd\u90fd\u90e8\u7f72\u5728\u4e00\u8d77\uff0c\u4ee5\u51cf\u5c11\u90e8\u7f72\u8282\u70b9\u548c\u6210\u672c\u3002\u6b64\u65f6\uff0c\u7528\u4e8e\u7b80\u5316\u589e\u5220\u6539\u67e5\u5de5\u4f5c\u91cf\u7684\u6570\u636e\u8bbf\u95ee\u6846\u67b6(ORM)\u662f\u5173\u952e\u3002 \u5782\u76f4\u5e94\u7528\u67b6\u6784 \u5f53\u8bbf\u95ee\u91cf\u9010\u6e10\u589e\u5927\uff0c\u5355\u4e00\u5e94\u7528\u589e\u52a0\u673a\u5668\u5e26\u6765\u7684\u52a0\u901f\u5ea6\u8d8a\u6765\u8d8a\u5c0f\uff0c\u63d0\u5347\u6548\u7387\u7684\u65b9\u6cd5\u4e4b\u4e00\u662f\u5c06\u5e94\u7528\u62c6\u6210\u4e92\u4e0d\u76f8\u5e72\u7684\u51e0\u4e2a\u5e94\u7528\uff0c\u4ee5\u63d0\u5347\u6548\u7387\u3002\u6b64\u65f6\uff0c\u7528\u4e8e\u52a0\u901f\u524d\u7aef\u9875\u9762\u5f00\u53d1\u7684Web\u6846\u67b6(MVC)\u662f\u5173\u952e\u3002 \u5206\u5e03\u5f0f\u670d\u52a1\u67b6\u6784 \u5f53\u5782\u76f4\u5e94\u7528\u8d8a\u6765\u8d8a\u591a\uff0c\u5e94\u7528\u4e4b\u95f4\u4ea4\u4e92\u4e0d\u53ef\u907f\u514d\uff0c\u5c06\u6838\u5fc3\u4e1a\u52a1\u62bd\u53d6\u51fa\u6765\uff0c\u4f5c\u4e3a\u72ec\u7acb\u7684\u670d\u52a1\uff0c\u9010\u6e10\u5f62\u6210\u7a33\u5b9a\u7684\u670d\u52a1\u4e2d\u5fc3\uff0c\u4f7f\u524d\u7aef\u5e94\u7528\u80fd\u66f4\u5feb\u901f\u7684\u54cd\u5e94\u591a\u53d8\u7684\u5e02\u573a\u9700\u6c42\u3002\u6b64\u65f6\uff0c\u7528\u4e8e\u63d0\u9ad8\u4e1a\u52a1\u590d\u7528\u53ca\u6574\u5408\u7684\u5206\u5e03\u5f0f\u670d\u52a1\u6846\u67b6(RPC)\u662f\u5173\u952e\u3002 \u6d41\u52a8\u8ba1\u7b97\u67b6\u6784 \u5f53\u670d\u52a1\u8d8a\u6765\u8d8a\u591a\uff0c\u5bb9\u91cf\u7684\u8bc4\u4f30\uff0c\u5c0f\u670d\u52a1\u8d44\u6e90\u7684\u6d6a\u8d39\u7b49\u95ee\u9898\u9010\u6e10\u663e\u73b0\uff0c\u6b64\u65f6\u9700\u589e\u52a0\u4e00\u4e2a\u8c03\u5ea6\u4e2d\u5fc3\u57fa\u4e8e\u8bbf\u95ee\u538b\u529b\u5b9e\u65f6\u7ba1\u7406\u96c6\u7fa4\u5bb9\u91cf\uff0c\u63d0\u9ad8\u96c6\u7fa4\u5229\u7528\u7387\u3002\u6b64\u65f6\uff0c\u7528\u4e8e\u63d0\u9ad8\u673a\u5668\u5229\u7528\u7387\u7684\u8d44\u6e90\u8c03\u5ea6\u548c\u6cbb\u7406\u4e2d\u5fc3(SOA)\u662f\u5173\u952e\u3002","title":"\u9700\u6c42"},{"location":"user/preface/background/#_1","text":"\u968f\u7740\u4e92\u8054\u7f51\u7684\u53d1\u5c55\uff0c\u7f51\u7ad9\u5e94\u7528\u7684\u89c4\u6a21\u4e0d\u65ad\u6269\u5927\uff0c\u5e38\u89c4\u7684\u5782\u76f4\u5e94\u7528\u67b6\u6784\u5df2\u65e0\u6cd5\u5e94\u5bf9\uff0c\u5206\u5e03\u5f0f\u670d\u52a1\u67b6\u6784\u4ee5\u53ca\u6d41\u52a8\u8ba1\u7b97\u67b6\u6784\u52bf\u5728\u5fc5\u884c\uff0c\u4e9f\u9700\u4e00\u4e2a\u6cbb\u7406\u7cfb\u7edf\u786e\u4fdd\u67b6\u6784\u6709\u6761\u4e0d\u7d0a\u7684\u6f14\u8fdb\u3002","title":"\u80cc\u666f"},{"location":"user/preface/background/#_2","text":"\u5f53\u7f51\u7ad9\u6d41\u91cf\u5f88\u5c0f\u65f6\uff0c\u53ea\u9700\u4e00\u4e2a\u5e94\u7528\uff0c\u5c06\u6240\u6709\u529f\u80fd\u90fd\u90e8\u7f72\u5728\u4e00\u8d77\uff0c\u4ee5\u51cf\u5c11\u90e8\u7f72\u8282\u70b9\u548c\u6210\u672c\u3002\u6b64\u65f6\uff0c\u7528\u4e8e\u7b80\u5316\u589e\u5220\u6539\u67e5\u5de5\u4f5c\u91cf\u7684\u6570\u636e\u8bbf\u95ee\u6846\u67b6(ORM)\u662f\u5173\u952e\u3002","title":"\u5355\u4e00\u5e94\u7528\u67b6\u6784"},{"location":"user/preface/background/#_3","text":"\u5f53\u8bbf\u95ee\u91cf\u9010\u6e10\u589e\u5927\uff0c\u5355\u4e00\u5e94\u7528\u589e\u52a0\u673a\u5668\u5e26\u6765\u7684\u52a0\u901f\u5ea6\u8d8a\u6765\u8d8a\u5c0f\uff0c\u63d0\u5347\u6548\u7387\u7684\u65b9\u6cd5\u4e4b\u4e00\u662f\u5c06\u5e94\u7528\u62c6\u6210\u4e92\u4e0d\u76f8\u5e72\u7684\u51e0\u4e2a\u5e94\u7528\uff0c\u4ee5\u63d0\u5347\u6548\u7387\u3002\u6b64\u65f6\uff0c\u7528\u4e8e\u52a0\u901f\u524d\u7aef\u9875\u9762\u5f00\u53d1\u7684Web\u6846\u67b6(MVC)\u662f\u5173\u952e\u3002","title":"\u5782\u76f4\u5e94\u7528\u67b6\u6784"},{"location":"user/preface/background/#_4","text":"\u5f53\u5782\u76f4\u5e94\u7528\u8d8a\u6765\u8d8a\u591a\uff0c\u5e94\u7528\u4e4b\u95f4\u4ea4\u4e92\u4e0d\u53ef\u907f\u514d\uff0c\u5c06\u6838\u5fc3\u4e1a\u52a1\u62bd\u53d6\u51fa\u6765\uff0c\u4f5c\u4e3a\u72ec\u7acb\u7684\u670d\u52a1\uff0c\u9010\u6e10\u5f62\u6210\u7a33\u5b9a\u7684\u670d\u52a1\u4e2d\u5fc3\uff0c\u4f7f\u524d\u7aef\u5e94\u7528\u80fd\u66f4\u5feb\u901f\u7684\u54cd\u5e94\u591a\u53d8\u7684\u5e02\u573a\u9700\u6c42\u3002\u6b64\u65f6\uff0c\u7528\u4e8e\u63d0\u9ad8\u4e1a\u52a1\u590d\u7528\u53ca\u6574\u5408\u7684\u5206\u5e03\u5f0f\u670d\u52a1\u6846\u67b6(RPC)\u662f\u5173\u952e\u3002","title":"\u5206\u5e03\u5f0f\u670d\u52a1\u67b6\u6784"},{"location":"user/preface/background/#_5","text":"\u5f53\u670d\u52a1\u8d8a\u6765\u8d8a\u591a\uff0c\u5bb9\u91cf\u7684\u8bc4\u4f30\uff0c\u5c0f\u670d\u52a1\u8d44\u6e90\u7684\u6d6a\u8d39\u7b49\u95ee\u9898\u9010\u6e10\u663e\u73b0\uff0c\u6b64\u65f6\u9700\u589e\u52a0\u4e00\u4e2a\u8c03\u5ea6\u4e2d\u5fc3\u57fa\u4e8e\u8bbf\u95ee\u538b\u529b\u5b9e\u65f6\u7ba1\u7406\u96c6\u7fa4\u5bb9\u91cf\uff0c\u63d0\u9ad8\u96c6\u7fa4\u5229\u7528\u7387\u3002\u6b64\u65f6\uff0c\u7528\u4e8e\u63d0\u9ad8\u673a\u5668\u5229\u7528\u7387\u7684\u8d44\u6e90\u8c03\u5ea6\u548c\u6cbb\u7406\u4e2d\u5fc3(SOA)\u662f\u5173\u952e\u3002","title":"\u6d41\u52a8\u8ba1\u7b97\u67b6\u6784"},{"location":"user/preface/requirements/","text":"\u9700\u6c42 \u5728\u5927\u89c4\u6a21\u670d\u52a1\u5316\u4e4b\u524d\uff0c\u5e94\u7528\u53ef\u80fd\u53ea\u662f\u901a\u8fc7 RMI \u6216 Hessian \u7b49\u5de5\u5177\uff0c\u7b80\u5355\u7684\u66b4\u9732\u548c\u5f15\u7528\u8fdc\u7a0b\u670d\u52a1\uff0c\u901a\u8fc7\u914d\u7f6e\u670d\u52a1\u7684URL\u5730\u5740\u8fdb\u884c\u8c03\u7528\uff0c\u901a\u8fc7 F5 \u7b49\u786c\u4ef6\u8fdb\u884c\u8d1f\u8f7d\u5747\u8861\u3002 \u5f53\u670d\u52a1\u8d8a\u6765\u8d8a\u591a\u65f6\uff0c\u670d\u52a1 URL \u914d\u7f6e\u7ba1\u7406\u53d8\u5f97\u975e\u5e38\u56f0\u96be\uff0cF5 \u786c\u4ef6\u8d1f\u8f7d\u5747\u8861\u5668\u7684\u5355\u70b9\u538b\u529b\u4e5f\u8d8a\u6765\u8d8a\u5927\u3002 \u6b64\u65f6\u9700\u8981\u4e00\u4e2a\u670d\u52a1\u6ce8\u518c\u4e2d\u5fc3\uff0c\u52a8\u6001\u5730\u6ce8\u518c\u548c\u53d1\u73b0\u670d\u52a1\uff0c\u4f7f\u670d\u52a1\u7684\u4f4d\u7f6e\u900f\u660e\u3002\u5e76\u901a\u8fc7\u5728\u6d88\u8d39\u65b9\u83b7\u53d6\u670d\u52a1\u63d0\u4f9b\u65b9\u5730\u5740\u5217\u8868\uff0c\u5b9e\u73b0\u8f6f\u8d1f\u8f7d\u5747\u8861\u548c Failover\uff0c\u964d\u4f4e\u5bf9 F5 \u786c\u4ef6\u8d1f\u8f7d\u5747\u8861\u5668\u7684\u4f9d\u8d56\uff0c\u4e5f\u80fd\u51cf\u5c11\u90e8\u5206\u6210\u672c\u3002 \u5f53\u8fdb\u4e00\u6b65\u53d1\u5c55\uff0c\u670d\u52a1\u95f4\u4f9d\u8d56\u5173\u7cfb\u53d8\u5f97\u9519\u8e2a\u590d\u6742\uff0c\u751a\u81f3\u5206\u4e0d\u6e05\u54ea\u4e2a\u5e94\u7528\u8981\u5728\u54ea\u4e2a\u5e94\u7528\u4e4b\u524d\u542f\u52a8\uff0c\u67b6\u6784\u5e08\u90fd\u4e0d\u80fd\u5b8c\u6574\u7684\u63cf\u8ff0\u5e94\u7528\u7684\u67b6\u6784\u5173\u7cfb\u3002 \u8fd9\u65f6\uff0c\u9700\u8981\u81ea\u52a8\u753b\u51fa\u5e94\u7528\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u56fe\uff0c\u4ee5\u5e2e\u52a9\u67b6\u6784\u5e08\u7406\u6e05\u5173\u7cfb\u3002 \u63a5\u7740\uff0c\u670d\u52a1\u7684\u8c03\u7528\u91cf\u8d8a\u6765\u8d8a\u5927\uff0c\u670d\u52a1\u7684\u5bb9\u91cf\u95ee\u9898\u5c31\u66b4\u9732\u51fa\u6765\uff0c\u8fd9\u4e2a\u670d\u52a1\u9700\u8981\u591a\u5c11\u673a\u5668\u652f\u6491\uff1f\u4ec0\u4e48\u65f6\u5019\u8be5\u52a0\u673a\u5668\uff1f \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff0c\u7b2c\u4e00\u6b65\uff0c\u8981\u5c06\u670d\u52a1\u73b0\u5728\u6bcf\u5929\u7684\u8c03\u7528\u91cf\uff0c\u54cd\u5e94\u65f6\u95f4\uff0c\u90fd\u7edf\u8ba1\u51fa\u6765\uff0c\u4f5c\u4e3a\u5bb9\u91cf\u89c4\u5212\u7684\u53c2\u8003\u6307\u6807\u3002\u5176\u6b21\uff0c\u8981\u53ef\u4ee5\u52a8\u6001\u8c03\u6574\u6743\u91cd\uff0c\u5728\u7ebf\u4e0a\uff0c\u5c06\u67d0\u53f0\u673a\u5668\u7684\u6743\u91cd\u4e00\u76f4\u52a0\u5927\uff0c\u5e76\u5728\u52a0\u5927\u7684\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u54cd\u5e94\u65f6\u95f4\u7684\u53d8\u5316\uff0c\u76f4\u5230\u54cd\u5e94\u65f6\u95f4\u5230\u8fbe\u9608\u503c\uff0c\u8bb0\u5f55\u6b64\u65f6\u7684\u8bbf\u95ee\u91cf\uff0c\u518d\u4ee5\u6b64\u8bbf\u95ee\u91cf\u4e58\u4ee5\u673a\u5668\u6570\u53cd\u63a8\u603b\u5bb9\u91cf\u3002 \u4ee5\u4e0a\u662f Dubbo \u6700\u57fa\u672c\u7684\u51e0\u4e2a\u9700\u6c42\u3002","title":"\u9700\u6c42"},{"location":"user/preface/requirements/#_1","text":"\u5728\u5927\u89c4\u6a21\u670d\u52a1\u5316\u4e4b\u524d\uff0c\u5e94\u7528\u53ef\u80fd\u53ea\u662f\u901a\u8fc7 RMI \u6216 Hessian \u7b49\u5de5\u5177\uff0c\u7b80\u5355\u7684\u66b4\u9732\u548c\u5f15\u7528\u8fdc\u7a0b\u670d\u52a1\uff0c\u901a\u8fc7\u914d\u7f6e\u670d\u52a1\u7684URL\u5730\u5740\u8fdb\u884c\u8c03\u7528\uff0c\u901a\u8fc7 F5 \u7b49\u786c\u4ef6\u8fdb\u884c\u8d1f\u8f7d\u5747\u8861\u3002 \u5f53\u670d\u52a1\u8d8a\u6765\u8d8a\u591a\u65f6\uff0c\u670d\u52a1 URL \u914d\u7f6e\u7ba1\u7406\u53d8\u5f97\u975e\u5e38\u56f0\u96be\uff0cF5 \u786c\u4ef6\u8d1f\u8f7d\u5747\u8861\u5668\u7684\u5355\u70b9\u538b\u529b\u4e5f\u8d8a\u6765\u8d8a\u5927\u3002 \u6b64\u65f6\u9700\u8981\u4e00\u4e2a\u670d\u52a1\u6ce8\u518c\u4e2d\u5fc3\uff0c\u52a8\u6001\u5730\u6ce8\u518c\u548c\u53d1\u73b0\u670d\u52a1\uff0c\u4f7f\u670d\u52a1\u7684\u4f4d\u7f6e\u900f\u660e\u3002\u5e76\u901a\u8fc7\u5728\u6d88\u8d39\u65b9\u83b7\u53d6\u670d\u52a1\u63d0\u4f9b\u65b9\u5730\u5740\u5217\u8868\uff0c\u5b9e\u73b0\u8f6f\u8d1f\u8f7d\u5747\u8861\u548c Failover\uff0c\u964d\u4f4e\u5bf9 F5 \u786c\u4ef6\u8d1f\u8f7d\u5747\u8861\u5668\u7684\u4f9d\u8d56\uff0c\u4e5f\u80fd\u51cf\u5c11\u90e8\u5206\u6210\u672c\u3002 \u5f53\u8fdb\u4e00\u6b65\u53d1\u5c55\uff0c\u670d\u52a1\u95f4\u4f9d\u8d56\u5173\u7cfb\u53d8\u5f97\u9519\u8e2a\u590d\u6742\uff0c\u751a\u81f3\u5206\u4e0d\u6e05\u54ea\u4e2a\u5e94\u7528\u8981\u5728\u54ea\u4e2a\u5e94\u7528\u4e4b\u524d\u542f\u52a8\uff0c\u67b6\u6784\u5e08\u90fd\u4e0d\u80fd\u5b8c\u6574\u7684\u63cf\u8ff0\u5e94\u7528\u7684\u67b6\u6784\u5173\u7cfb\u3002 \u8fd9\u65f6\uff0c\u9700\u8981\u81ea\u52a8\u753b\u51fa\u5e94\u7528\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u56fe\uff0c\u4ee5\u5e2e\u52a9\u67b6\u6784\u5e08\u7406\u6e05\u5173\u7cfb\u3002 \u63a5\u7740\uff0c\u670d\u52a1\u7684\u8c03\u7528\u91cf\u8d8a\u6765\u8d8a\u5927\uff0c\u670d\u52a1\u7684\u5bb9\u91cf\u95ee\u9898\u5c31\u66b4\u9732\u51fa\u6765\uff0c\u8fd9\u4e2a\u670d\u52a1\u9700\u8981\u591a\u5c11\u673a\u5668\u652f\u6491\uff1f\u4ec0\u4e48\u65f6\u5019\u8be5\u52a0\u673a\u5668\uff1f \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff0c\u7b2c\u4e00\u6b65\uff0c\u8981\u5c06\u670d\u52a1\u73b0\u5728\u6bcf\u5929\u7684\u8c03\u7528\u91cf\uff0c\u54cd\u5e94\u65f6\u95f4\uff0c\u90fd\u7edf\u8ba1\u51fa\u6765\uff0c\u4f5c\u4e3a\u5bb9\u91cf\u89c4\u5212\u7684\u53c2\u8003\u6307\u6807\u3002\u5176\u6b21\uff0c\u8981\u53ef\u4ee5\u52a8\u6001\u8c03\u6574\u6743\u91cd\uff0c\u5728\u7ebf\u4e0a\uff0c\u5c06\u67d0\u53f0\u673a\u5668\u7684\u6743\u91cd\u4e00\u76f4\u52a0\u5927\uff0c\u5e76\u5728\u52a0\u5927\u7684\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u54cd\u5e94\u65f6\u95f4\u7684\u53d8\u5316\uff0c\u76f4\u5230\u54cd\u5e94\u65f6\u95f4\u5230\u8fbe\u9608\u503c\uff0c\u8bb0\u5f55\u6b64\u65f6\u7684\u8bbf\u95ee\u91cf\uff0c\u518d\u4ee5\u6b64\u8bbf\u95ee\u91cf\u4e58\u4ee5\u673a\u5668\u6570\u53cd\u63a8\u603b\u5bb9\u91cf\u3002 \u4ee5\u4e0a\u662f Dubbo \u6700\u57fa\u672c\u7684\u51e0\u4e2a\u9700\u6c42\u3002","title":"\u9700\u6c42"},{"location":"user/preface/usage/","text":"\u7528\u6cd5 \u672c\u5730\u670d\u52a1 Spring \u914d\u7f6e local.xml: bean id=\u201cxxxService\u201d class=\u201ccom.xxx.XxxServiceImpl\u201d / bean id=\u201cxxxAction\u201d class=\u201ccom.xxx.XxxAction\u201d property name=\u201cxxxService\u201d ref=\u201cxxxService\u201d / /bean \u8fdc\u7a0b\u670d\u52a1 Spring \u914d\u7f6e \u5728\u672c\u5730\u670d\u52a1\u7684\u57fa\u7840\u4e0a\uff0c\u53ea\u9700\u505a\u7b80\u5355\u914d\u7f6e\uff0c\u5373\u53ef\u5b8c\u6210\u8fdc\u7a0b\u5316\uff1a \u5c06\u4e0a\u9762\u7684 local.xml \u914d\u7f6e\u62c6\u5206\u6210\u4e24\u4efd\uff0c\u5c06\u670d\u52a1\u5b9a\u4e49\u90e8\u5206\u653e\u5728\u670d\u52a1\u63d0\u4f9b\u65b9 remote-provider.xml \uff0c\u5c06\u670d\u52a1\u5f15\u7528\u90e8\u5206\u653e\u5728\u670d\u52a1\u6d88\u8d39\u65b9 remote-consumer.xml \u3002 \u5e76\u5728\u63d0\u4f9b\u65b9\u589e\u52a0\u66b4\u9732\u670d\u52a1\u914d\u7f6e dubbo:service \uff0c\u5728\u6d88\u8d39\u65b9\u589e\u52a0\u5f15\u7528\u670d\u52a1\u914d\u7f6e dubbo:reference \u3002 remote-provider.xml: !-- \u548c\u672c\u5730\u670d\u52a1\u4e00\u6837\u5b9e\u73b0\u8fdc\u7a0b\u670d\u52a1 -- bean id=\u201cxxxService\u201d class=\u201ccom.xxx.XxxServiceImpl\u201d / !-- \u589e\u52a0\u66b4\u9732\u8fdc\u7a0b\u670d\u52a1\u914d\u7f6e -- dubbo:service interface=\u201ccom.xxx.XxxService\u201d ref=\u201cxxxService\u201d / remote-consumer.xml: !-- \u589e\u52a0\u5f15\u7528\u8fdc\u7a0b\u670d\u52a1\u914d\u7f6e -- dubbo:reference id=\u201cxxxService\u201d interface=\u201ccom.xxx.XxxService\u201d / !-- \u548c\u672c\u5730\u670d\u52a1\u4e00\u6837\u4f7f\u7528\u8fdc\u7a0b\u670d\u52a1 -- bean id=\u201cxxxAction\u201d class=\u201ccom.xxx.XxxAction\u201d property name=\u201cxxxService\u201d ref=\u201cxxxService\u201d / /bean","title":"\u7528\u6cd5"},{"location":"user/preface/usage/#_1","text":"","title":"\u7528\u6cd5"},{"location":"user/preface/usage/#spring","text":"local.xml: bean id=\u201cxxxService\u201d class=\u201ccom.xxx.XxxServiceImpl\u201d / bean id=\u201cxxxAction\u201d class=\u201ccom.xxx.XxxAction\u201d property name=\u201cxxxService\u201d ref=\u201cxxxService\u201d / /bean","title":"\u672c\u5730\u670d\u52a1 Spring \u914d\u7f6e"},{"location":"user/preface/usage/#spring_1","text":"\u5728\u672c\u5730\u670d\u52a1\u7684\u57fa\u7840\u4e0a\uff0c\u53ea\u9700\u505a\u7b80\u5355\u914d\u7f6e\uff0c\u5373\u53ef\u5b8c\u6210\u8fdc\u7a0b\u5316\uff1a \u5c06\u4e0a\u9762\u7684 local.xml \u914d\u7f6e\u62c6\u5206\u6210\u4e24\u4efd\uff0c\u5c06\u670d\u52a1\u5b9a\u4e49\u90e8\u5206\u653e\u5728\u670d\u52a1\u63d0\u4f9b\u65b9 remote-provider.xml \uff0c\u5c06\u670d\u52a1\u5f15\u7528\u90e8\u5206\u653e\u5728\u670d\u52a1\u6d88\u8d39\u65b9 remote-consumer.xml \u3002 \u5e76\u5728\u63d0\u4f9b\u65b9\u589e\u52a0\u66b4\u9732\u670d\u52a1\u914d\u7f6e dubbo:service \uff0c\u5728\u6d88\u8d39\u65b9\u589e\u52a0\u5f15\u7528\u670d\u52a1\u914d\u7f6e dubbo:reference \u3002 remote-provider.xml: !-- \u548c\u672c\u5730\u670d\u52a1\u4e00\u6837\u5b9e\u73b0\u8fdc\u7a0b\u670d\u52a1 -- bean id=\u201cxxxService\u201d class=\u201ccom.xxx.XxxServiceImpl\u201d / !-- \u589e\u52a0\u66b4\u9732\u8fdc\u7a0b\u670d\u52a1\u914d\u7f6e -- dubbo:service interface=\u201ccom.xxx.XxxService\u201d ref=\u201cxxxService\u201d / remote-consumer.xml: !-- \u589e\u52a0\u5f15\u7528\u8fdc\u7a0b\u670d\u52a1\u914d\u7f6e -- dubbo:reference id=\u201cxxxService\u201d interface=\u201ccom.xxx.XxxService\u201d / !-- \u548c\u672c\u5730\u670d\u52a1\u4e00\u6837\u4f7f\u7528\u8fdc\u7a0b\u670d\u52a1 -- bean id=\u201cxxxAction\u201d class=\u201ccom.xxx.XxxAction\u201d property name=\u201cxxxService\u201d ref=\u201cxxxService\u201d / /bean","title":"\u8fdc\u7a0b\u670d\u52a1 Spring \u914d\u7f6e"},{"location":"user/references/api/","text":"API \u53c2\u8003\u624b\u518c Dubbo \u7684\u5e38\u89c4\u529f\u80fd\uff0c\u90fd\u4fdd\u6301\u96f6\u4fb5\u5165\uff0c\u4f46\u6709\u4e9b\u529f\u80fd\u4e0d\u5f97\u4e0d\u7528 API \u4fb5\u5165\u624d\u80fd\u5b9e\u73b0 [^1]\u3002 API \u6c47\u603b\u5982\u4e0b\uff1a \u914d\u7f6e API org.apache.dubbo.config.ServiceConfig org.apache.dubbo.config.ReferenceConfig org.apache.dubbo.config.ProtocolConfig org.apache.dubbo.config.RegistryConfig org.apache.dubbo.config.MonitorConfig org.apache.dubbo.config.ApplicationConfig org.apache.dubbo.config.ModuleConfig org.apache.dubbo.config.ProviderConfig org.apache.dubbo.config.ConsumerConfig org.apache.dubbo.config.MethodConfig org.apache.dubbo.config.ArgumentConfig \u8be6\u7ec6\u53c2\u89c1\uff1a API\u914d\u7f6e \u6ce8\u89e3 API org.apache.dubbo.config.annotation.Service org.apache.dubbo.config.annotation.Reference \u8be6\u7ec6\u53c2\u89c1\uff1a \u6ce8\u89e3\u914d\u7f6e \u6a21\u578b API org.apache.dubbo.common.URL org.apache.dubbo.rpc.RpcException \u4e0a\u4e0b\u6587 API org.apache.dubbo.rpc.RpcContext \u8be6\u7ec6\u53c2\u89c1\uff1a \u4e0a\u4e0b\u6587\u4fe1\u606f \u9690\u5f0f\u4f20\u53c2 \u5f02\u6b65\u8c03\u7528 \u670d\u52a1API org.apache.dubbo.rpc.service.GenericService org.apache.dubbo.rpc.service.GenericException \u8be6\u7ec6\u53c2\u89c1\uff1a \u6cdb\u5316\u5f15\u7528 \u6cdb\u5316\u5b9e\u73b0 org.apache.dubbo.rpc.service.EchoService \u8be6\u7ec6\u53c2\u89c1\uff1a \u56de\u58f0\u6d4b\u8bd5 [^1]: \u6ce8\u610f\uff1aDubbo \u4e2d\u9664\u8fd9\u91cc\u58f0\u660e\u4ee5\u5916\u7684\u63a5\u53e3\u6216\u7c7b\uff0c\u90fd\u662f\u5185\u90e8\u63a5\u53e3\u6216\u6269\u5c55\u63a5\u53e3\uff0c\u666e\u901a\u7528\u6237\u8bf7\u4e0d\u8981\u76f4\u63a5\u4f9d\u8d56\uff0c\u5426\u5219\u5347\u7ea7\u7248\u672c\u53ef\u80fd\u51fa\u73b0\u4e0d\u517c\u5bb9\u3002","title":"API \u53c2\u8003\u624b\u518c"},{"location":"user/references/api/#api","text":"Dubbo \u7684\u5e38\u89c4\u529f\u80fd\uff0c\u90fd\u4fdd\u6301\u96f6\u4fb5\u5165\uff0c\u4f46\u6709\u4e9b\u529f\u80fd\u4e0d\u5f97\u4e0d\u7528 API \u4fb5\u5165\u624d\u80fd\u5b9e\u73b0 [^1]\u3002 API \u6c47\u603b\u5982\u4e0b\uff1a","title":"API \u53c2\u8003\u624b\u518c"},{"location":"user/references/api/#api_1","text":"org.apache.dubbo.config.ServiceConfig org.apache.dubbo.config.ReferenceConfig org.apache.dubbo.config.ProtocolConfig org.apache.dubbo.config.RegistryConfig org.apache.dubbo.config.MonitorConfig org.apache.dubbo.config.ApplicationConfig org.apache.dubbo.config.ModuleConfig org.apache.dubbo.config.ProviderConfig org.apache.dubbo.config.ConsumerConfig org.apache.dubbo.config.MethodConfig org.apache.dubbo.config.ArgumentConfig \u8be6\u7ec6\u53c2\u89c1\uff1a API\u914d\u7f6e","title":"\u914d\u7f6e API"},{"location":"user/references/api/#api_2","text":"org.apache.dubbo.config.annotation.Service org.apache.dubbo.config.annotation.Reference \u8be6\u7ec6\u53c2\u89c1\uff1a \u6ce8\u89e3\u914d\u7f6e","title":"\u6ce8\u89e3 API"},{"location":"user/references/api/#api_3","text":"org.apache.dubbo.common.URL org.apache.dubbo.rpc.RpcException","title":"\u6a21\u578b API"},{"location":"user/references/api/#api_4","text":"org.apache.dubbo.rpc.RpcContext \u8be6\u7ec6\u53c2\u89c1\uff1a \u4e0a\u4e0b\u6587\u4fe1\u606f \u9690\u5f0f\u4f20\u53c2 \u5f02\u6b65\u8c03\u7528","title":"\u4e0a\u4e0b\u6587 API"},{"location":"user/references/api/#api_5","text":"org.apache.dubbo.rpc.service.GenericService org.apache.dubbo.rpc.service.GenericException \u8be6\u7ec6\u53c2\u89c1\uff1a \u6cdb\u5316\u5f15\u7528 \u6cdb\u5316\u5b9e\u73b0 org.apache.dubbo.rpc.service.EchoService \u8be6\u7ec6\u53c2\u89c1\uff1a \u56de\u58f0\u6d4b\u8bd5 [^1]: \u6ce8\u610f\uff1aDubbo \u4e2d\u9664\u8fd9\u91cc\u58f0\u660e\u4ee5\u5916\u7684\u63a5\u53e3\u6216\u7c7b\uff0c\u90fd\u662f\u5185\u90e8\u63a5\u53e3\u6216\u6269\u5c55\u63a5\u53e3\uff0c\u666e\u901a\u7528\u6237\u8bf7\u4e0d\u8981\u76f4\u63a5\u4f9d\u8d56\uff0c\u5426\u5219\u5347\u7ea7\u7248\u672c\u53ef\u80fd\u51fa\u73b0\u4e0d\u517c\u5bb9\u3002","title":"\u670d\u52a1API"},{"location":"user/references/maven/","text":"Maven \u63d2\u4ef6\u53c2\u8003\u624b\u518c \u542f\u52a8\u4e00\u4e2a\u7b80\u6613\u6ce8\u518c\u4e2d\u5fc3 \u4ee5\u6307\u5b9a\u76849099\u7aef\u53e3\u542f\u52a8\u4e00\u4e2a\u7b80\u6613\u6ce8\u518c\u4e2d\u5fc3 [^1]\uff1a mvn dubbo:registry -Dport=9099 \u751f\u6210demo\u670d\u52a1\u63d0\u4f9b\u8005\u5e94\u7528 \u751f\u6210\u6307\u5b9a\u63a5\u53e3\u548c\u7248\u672c\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u5e94\u7528\uff1a mvn dubbo:create -Dapplication=xxx -Dpackage=com.alibaba.xxx -Dservice=XxxService,YyyService -Dversion=1.0.0 [^1]: \u5982\u679c\u7aef\u53e3\u4e0d\u6307\u5b9a\uff0c\u9ed8\u8ba4\u7aef\u53e3\u4e3a 9090","title":"maven \u63d2\u4ef6\u53c2\u8003\u624b\u518c"},{"location":"user/references/maven/#maven","text":"","title":"Maven \u63d2\u4ef6\u53c2\u8003\u624b\u518c"},{"location":"user/references/maven/#_1","text":"\u4ee5\u6307\u5b9a\u76849099\u7aef\u53e3\u542f\u52a8\u4e00\u4e2a\u7b80\u6613\u6ce8\u518c\u4e2d\u5fc3 [^1]\uff1a mvn dubbo:registry -Dport=9099","title":"\u542f\u52a8\u4e00\u4e2a\u7b80\u6613\u6ce8\u518c\u4e2d\u5fc3"},{"location":"user/references/maven/#demo","text":"\u751f\u6210\u6307\u5b9a\u63a5\u53e3\u548c\u7248\u672c\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u5e94\u7528\uff1a mvn dubbo:create -Dapplication=xxx -Dpackage=com.alibaba.xxx -Dservice=XxxService,YyyService -Dversion=1.0.0 [^1]: \u5982\u679c\u7aef\u53e3\u4e0d\u6307\u5b9a\uff0c\u9ed8\u8ba4\u7aef\u53e3\u4e3a 9090","title":"\u751f\u6210demo\u670d\u52a1\u63d0\u4f9b\u8005\u5e94\u7528"},{"location":"user/references/qos/","text":"\u65b0\u7248\u672c telnet \u547d\u4ee4\u4f7f\u7528\u8bf4\u660e dubbo 2.5.8 \u65b0\u7248\u672c\u589e\u52a0\u4e86 QOS \u6a21\u5757\uff0c\u63d0\u4f9b\u4e86\u65b0\u7684 telnet \u547d\u4ee4\u652f\u6301\u3002 \u7aef\u53e3 \u65b0\u7248\u672c\u7684 telnet \u7aef\u53e3 \u4e0e dubbo \u534f\u8bae\u7684\u7aef\u53e3\u662f\u4e0d\u540c\u7684\u7aef\u53e3\uff0c\u9ed8\u8ba4\u4e3a 22222 \uff0c\u53ef\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6 dubbo.properties \u4fee\u6539: dubbo.application.qos.port=33333 \u6216\u8005\u901a\u8fc7\u8bbe\u7f6e JVM \u53c2\u6570: -Ddubbo.application.qos.port=33333 \u5b89\u5168 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cdubbo \u63a5\u6536\u4efb\u4f55\u4e3b\u673a\u53d1\u8d77\u7684\u547d\u4ee4\uff0c\u53ef\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6 dubbo.properties \u4fee\u6539: dubbo.application.qos.accept.foreign.ip=false \u6216\u8005\u901a\u8fc7\u8bbe\u7f6e JVM \u53c2\u6570: -Ddubbo.application.qos.accept.foreign.ip=false \u62d2\u7edd\u8fdc\u7aef\u4e3b\u673a\u53d1\u51fa\u7684\u547d\u4ee4\uff0c\u53ea\u5141\u8bb8\u670d\u52a1\u672c\u673a\u6267\u884c telnet \u4e0e http \u534f\u8bae telnet \u6a21\u5757\u73b0\u5728\u540c\u65f6\u652f\u6301 http \u534f\u8bae\u548c telnet \u534f\u8bae\uff0c\u65b9\u4fbf\u5404\u79cd\u60c5\u51b5\u7684\u4f7f\u7528 \u793a\u4f8b\u5982\u4e0b\uff1a \u279c ~ telnet localhost 22222 Trying ::1... telnet: connect to address ::1: Connection refused Trying 127.0.0.1... Connected to localhost. Escape character is '^]'. \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584 \u2588\u2588\u2588 \u2588\u2584 \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584 \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584 \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2584 \u2588\u2588\u2588 \u2580\u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2584\u2588\u2588\u2588\u2584\u2584\u2584\u2588\u2588\u2580 \u2584\u2588\u2588\u2588\u2584\u2584\u2584\u2588\u2588\u2580 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2580\u2580\u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2584 \u2580\u2580\u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2584 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2584 \u2588\u2588\u2588 \u2588\u2588\u2584 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2584\u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580 \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580 \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580 \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580 dubbo ls As Provider side: +----------------------------------+---+ | Provider Service Name |PUB| +----------------------------------+---+ |org.apache.dubbo.demo.DemoService| N | +----------------------------------+---+ As Consumer side: +---------------------+---+ |Consumer Service Name|NUM| +---------------------+---+ dubbo \u279c ~ curl localhost:22222/ls?arg1=xxx arg2=xxxx As Provider side: +----------------------------------+---+ | Provider Service Name |PUB| +----------------------------------+---+ |org.apache.dubbo.demo.DemoService| N | +----------------------------------+---+ As Consumer side: +---------------------+---+ |Consumer Service Name|NUM| +---------------------+---+ \u652f\u6301\u7684\u547d\u4ee4 ls \u5217\u51fa\u6d88\u8d39\u8005\u548c\u63d0\u4f9b\u8005 dubbo ls As Provider side: +----------------------------------+---+ | Provider Service Name |PUB| +----------------------------------+---+ |org.apache.dubbo.demo.DemoService| Y | +----------------------------------+---+ As Consumer side: +---------------------+---+ |Consumer Service Name|NUM| +---------------------+---+ \u5217\u51fa dubbo \u7684\u6240\u63d0\u4f9b\u7684\u670d\u52a1\u548c\u6d88\u8d39\u7684\u670d\u52a1\uff0c\u4ee5\u53ca\u6d88\u8d39\u7684\u670d\u52a1\u5730\u5740\u6570 Online \u4e0a\u7ebf\u670d\u52a1\u547d\u4ee4 \u5f53\u4f7f\u7528\u5ef6\u8fdf\u53d1\u5e03\u529f\u80fd\u7684\u65f6\u5019(\u901a\u8fc7\u8bbe\u7f6e org.apache.dubbo.config.AbstractServiceConfig#register \u4e3a false)\uff0c\u540e\u7eed\u9700\u8981\u4e0a\u7ebf\u7684\u65f6\u5019\uff0c\u53ef\u901a\u8fc7 Online \u547d\u4ee4 //\u4e0a\u7ebf\u6240\u6709\u670d\u52a1 dubbo online OK //\u6839\u636e\u6b63\u5219\uff0c\u4e0a\u7ebf\u90e8\u5206\u670d\u52a1 dubbo online com.* OK \u5e38\u89c1\u4f7f\u7528\u573a\u666f\uff1a \u5f53\u7ebf\u4e0a\u7684 QPS \u6bd4\u8f83\u9ad8\u7684\u65f6\u5019\uff0c\u5f53\u521a\u91cd\u542f\u673a\u5668\u7684\u65f6\u5019\uff0c\u7531\u4e8e\u6ca1\u6709\u8fdb\u884cJIT \u9884\u70ed\u6216\u76f8\u5173\u8d44\u6e90\u6ca1\u6709\u9884\u70ed\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5927\u91cf\u8d85\u65f6\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u53ef\u901a\u8fc7\u5206\u6279\u53d1\u5e03\u670d\u52a1\uff0c\u9010\u6e10\u52a0\u5927\u6d41\u91cf \u5f53\u7531\u4e8e\u67d0\u53f0\u673a\u5668\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\uff0c\u9700\u8981\u4e0b\u7ebf\u670d\u52a1\uff0c\u7136\u540e\u53c8\u9700\u8981\u91cd\u65b0\u4e0a\u7ebf\u670d\u52a1 Offline \u4e0b\u7ebf\u670d\u52a1\u547d\u4ee4 \u7531\u4e8e\u6545\u969c\u7b49\u539f\u56e0\uff0c\u9700\u8981\u4e34\u65f6\u4e0b\u7ebf\u670d\u52a1\u4fdd\u6301\u73b0\u573a\uff0c\u53ef\u4ee5\u4f7f\u7528 Offline \u4e0b\u7ebf\u547d\u4ee4\u3002 //\u4e0b\u7ebf\u6240\u6709\u670d\u52a1 dubbo offline OK //\u6839\u636e\u6b63\u5219\uff0c\u4e0b\u7ebf\u90e8\u5206\u670d\u52a1 dubbo offline com.* OK help \u547d\u4ee4 //\u5217\u51fa\u6240\u6709\u547d\u4ee4 dubbo help //\u5217\u51fa\u5355\u4e2a\u547d\u4ee4\u7684\u5177\u4f53\u4f7f\u7528\u60c5\u51b5 dubbo help online +--------------+----------------------------------------------------------------------------------+ | COMMAND NAME | online | +--------------+----------------------------------------------------------------------------------+ | EXAMPLE | online dubbo | | | online xx.xx.xxx.service | +--------------+----------------------------------------------------------------------------------+ dubbo \u76f8\u5173\u53c2\u6570\u8bf4\u660e QoS\u63d0\u4f9b\u4e86\u4e00\u4e9b\u542f\u52a8\u53c2\u6570\uff0c\u6765\u5bf9\u542f\u52a8\u8fdb\u884c\u914d\u7f6e\uff0c\u4ed6\u4eec\u4e3b\u8981\u5305\u62ec\uff1a \u53c2\u6570 \u8bf4\u660e \u9ed8\u8ba4\u503c qosEnable \u662f\u5426\u542f\u52a8QoS true qosPort \u542f\u52a8QoS\u7ed1\u5b9a\u7684\u7aef\u53e3 22222 qosAcceptForeignIp \u662f\u5426\u5141\u8bb8\u8fdc\u7a0b\u8bbf\u95ee false \u6ce8\u610f\uff0c\u4ece2.6.4/2.7.0\u5f00\u59cb\uff0cqosAcceptForeignIp\u9ed8\u8ba4\u914d\u7f6e\u6539\u4e3afalse\uff0c\u5982\u679cqosAcceptForeignIp\u8bbe\u7f6e\u4e3atrue\uff0c\u6709\u53ef\u80fd\u5e26\u6765\u5b89\u5168\u98ce\u9669\uff0c\u8bf7\u4ed4\u7ec6\u8bc4\u4f30\u540e\u518d\u6253\u5f00\u3002 QoS\u53c2\u6570\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u8fdb\u884c\u914d\u7f6e \u7cfb\u7edf\u5c5e\u6027 dubbo.properties XML\u65b9\u5f0f Spring-boot\u81ea\u52a8\u88c5\u914d\u65b9\u5f0f \u5176\u4e2d\uff0c\u4e0a\u8ff0\u65b9\u5f0f\u7684\u4f18\u5148\u987a\u5e8f\u4e3a\u7cfb\u7edf\u5c5e\u6027 dubbo.properties XML/Spring-boot\u81ea\u52a8\u88c5\u914d\u65b9\u5f0f\u3002 \u4f7f\u7528\u7cfb\u7edf\u5c5e\u6027\u65b9\u5f0f\u8fdb\u884c\u914d\u7f6e -Ddubbo.application.qos.enable=true -Ddubbo.application.qos.port=33333 -Ddubbo.application.qos.accept.foreign.ip=false \u4f7f\u7528dubbo.properties\u6587\u4ef6\u8fdb\u884c\u914d\u7f6e \u5728\u9879\u76ee\u7684 src/main/resources \u76ee\u5f55\u4e0b\u6dfb\u52a0dubbo.properties\u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b: dubbo.application.qos.enable=true dubbo.application.qos.port=33333 dubbo.application.qos.accept.foreign.ip=false \u4f7f\u7528XML\u65b9\u6cd5\u8fdb\u884c\u914d\u7f6e \u5982\u679c\u8981\u901a\u8fc7XML\u914d\u7f6e\u54cd\u5e94\u7684QoS\u76f8\u5173\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u8fdb\u884c\u5982\u4e0b\u914d\u7f6e\uff1a ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd dubbo:application name= demo-provider dubbo:parameter key= qos.enable value= true / dubbo:parameter key= qos.accept.foreign.ip value= false / dubbo:parameter key= qos.port value= 33333 / /dubbo:application dubbo:registry address= multicast://224.5.6.7:1234 / dubbo:protocol name= dubbo port= 20880 / dubbo:service interface= org.apache.dubbo.demo.provider.DemoService ref= demoService / bean id= demoService class= org.apache.dubbo.demo.provider.DemoServiceImpl / /beans \u4f7f\u7528spring-boot\u81ea\u52a8\u88c5\u914d\u65b9\u5f0f\u914d\u7f6e \u5982\u679c\u662fspring-boot\u7684\u5e94\u7528\uff0c\u53ef\u4ee5\u5728 application.properties \u6216\u8005 application.yml \u4e0a\u914d\u7f6e: dubbo.application.qosEnable=true dubbo.application.qosPort=33333 dubbo.application.qosAcceptForeignIp=false","title":"\u5728\u7ebf\u8fd0\u7ef4\u547d\u4ee4-QOS"},{"location":"user/references/qos/#telnet","text":"dubbo 2.5.8 \u65b0\u7248\u672c\u589e\u52a0\u4e86 QOS \u6a21\u5757\uff0c\u63d0\u4f9b\u4e86\u65b0\u7684 telnet \u547d\u4ee4\u652f\u6301\u3002","title":"\u65b0\u7248\u672c telnet \u547d\u4ee4\u4f7f\u7528\u8bf4\u660e"},{"location":"user/references/qos/#_1","text":"\u65b0\u7248\u672c\u7684 telnet \u7aef\u53e3 \u4e0e dubbo \u534f\u8bae\u7684\u7aef\u53e3\u662f\u4e0d\u540c\u7684\u7aef\u53e3\uff0c\u9ed8\u8ba4\u4e3a 22222 \uff0c\u53ef\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6 dubbo.properties \u4fee\u6539: dubbo.application.qos.port=33333 \u6216\u8005\u901a\u8fc7\u8bbe\u7f6e JVM \u53c2\u6570: -Ddubbo.application.qos.port=33333","title":"\u7aef\u53e3"},{"location":"user/references/qos/#_2","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cdubbo \u63a5\u6536\u4efb\u4f55\u4e3b\u673a\u53d1\u8d77\u7684\u547d\u4ee4\uff0c\u53ef\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6 dubbo.properties \u4fee\u6539: dubbo.application.qos.accept.foreign.ip=false \u6216\u8005\u901a\u8fc7\u8bbe\u7f6e JVM \u53c2\u6570: -Ddubbo.application.qos.accept.foreign.ip=false \u62d2\u7edd\u8fdc\u7aef\u4e3b\u673a\u53d1\u51fa\u7684\u547d\u4ee4\uff0c\u53ea\u5141\u8bb8\u670d\u52a1\u672c\u673a\u6267\u884c","title":"\u5b89\u5168"},{"location":"user/references/qos/#telnet-http","text":"telnet \u6a21\u5757\u73b0\u5728\u540c\u65f6\u652f\u6301 http \u534f\u8bae\u548c telnet \u534f\u8bae\uff0c\u65b9\u4fbf\u5404\u79cd\u60c5\u51b5\u7684\u4f7f\u7528 \u793a\u4f8b\u5982\u4e0b\uff1a \u279c ~ telnet localhost 22222 Trying ::1... telnet: connect to address ::1: Connection refused Trying 127.0.0.1... Connected to localhost. Escape character is '^]'. \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584 \u2588\u2588\u2588 \u2588\u2584 \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584 \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584 \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2584 \u2588\u2588\u2588 \u2580\u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2584\u2588\u2588\u2588\u2584\u2584\u2584\u2588\u2588\u2580 \u2584\u2588\u2588\u2588\u2584\u2584\u2584\u2588\u2588\u2580 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2580\u2580\u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2584 \u2580\u2580\u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2584 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2584 \u2588\u2588\u2588 \u2588\u2588\u2584 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2584\u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580 \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580 \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580 \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580 dubbo ls As Provider side: +----------------------------------+---+ | Provider Service Name |PUB| +----------------------------------+---+ |org.apache.dubbo.demo.DemoService| N | +----------------------------------+---+ As Consumer side: +---------------------+---+ |Consumer Service Name|NUM| +---------------------+---+ dubbo \u279c ~ curl localhost:22222/ls?arg1=xxx arg2=xxxx As Provider side: +----------------------------------+---+ | Provider Service Name |PUB| +----------------------------------+---+ |org.apache.dubbo.demo.DemoService| N | +----------------------------------+---+ As Consumer side: +---------------------+---+ |Consumer Service Name|NUM| +---------------------+---+","title":"telnet \u4e0e http \u534f\u8bae"},{"location":"user/references/qos/#_3","text":"","title":"\u652f\u6301\u7684\u547d\u4ee4"},{"location":"user/references/qos/#ls","text":"dubbo ls As Provider side: +----------------------------------+---+ | Provider Service Name |PUB| +----------------------------------+---+ |org.apache.dubbo.demo.DemoService| Y | +----------------------------------+---+ As Consumer side: +---------------------+---+ |Consumer Service Name|NUM| +---------------------+---+ \u5217\u51fa dubbo \u7684\u6240\u63d0\u4f9b\u7684\u670d\u52a1\u548c\u6d88\u8d39\u7684\u670d\u52a1\uff0c\u4ee5\u53ca\u6d88\u8d39\u7684\u670d\u52a1\u5730\u5740\u6570","title":"ls \u5217\u51fa\u6d88\u8d39\u8005\u548c\u63d0\u4f9b\u8005"},{"location":"user/references/qos/#online","text":"\u5f53\u4f7f\u7528\u5ef6\u8fdf\u53d1\u5e03\u529f\u80fd\u7684\u65f6\u5019(\u901a\u8fc7\u8bbe\u7f6e org.apache.dubbo.config.AbstractServiceConfig#register \u4e3a false)\uff0c\u540e\u7eed\u9700\u8981\u4e0a\u7ebf\u7684\u65f6\u5019\uff0c\u53ef\u901a\u8fc7 Online \u547d\u4ee4 //\u4e0a\u7ebf\u6240\u6709\u670d\u52a1 dubbo online OK //\u6839\u636e\u6b63\u5219\uff0c\u4e0a\u7ebf\u90e8\u5206\u670d\u52a1 dubbo online com.* OK \u5e38\u89c1\u4f7f\u7528\u573a\u666f\uff1a \u5f53\u7ebf\u4e0a\u7684 QPS \u6bd4\u8f83\u9ad8\u7684\u65f6\u5019\uff0c\u5f53\u521a\u91cd\u542f\u673a\u5668\u7684\u65f6\u5019\uff0c\u7531\u4e8e\u6ca1\u6709\u8fdb\u884cJIT \u9884\u70ed\u6216\u76f8\u5173\u8d44\u6e90\u6ca1\u6709\u9884\u70ed\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5927\u91cf\u8d85\u65f6\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u53ef\u901a\u8fc7\u5206\u6279\u53d1\u5e03\u670d\u52a1\uff0c\u9010\u6e10\u52a0\u5927\u6d41\u91cf \u5f53\u7531\u4e8e\u67d0\u53f0\u673a\u5668\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\uff0c\u9700\u8981\u4e0b\u7ebf\u670d\u52a1\uff0c\u7136\u540e\u53c8\u9700\u8981\u91cd\u65b0\u4e0a\u7ebf\u670d\u52a1","title":"Online \u4e0a\u7ebf\u670d\u52a1\u547d\u4ee4"},{"location":"user/references/qos/#offline","text":"\u7531\u4e8e\u6545\u969c\u7b49\u539f\u56e0\uff0c\u9700\u8981\u4e34\u65f6\u4e0b\u7ebf\u670d\u52a1\u4fdd\u6301\u73b0\u573a\uff0c\u53ef\u4ee5\u4f7f\u7528 Offline \u4e0b\u7ebf\u547d\u4ee4\u3002 //\u4e0b\u7ebf\u6240\u6709\u670d\u52a1 dubbo offline OK //\u6839\u636e\u6b63\u5219\uff0c\u4e0b\u7ebf\u90e8\u5206\u670d\u52a1 dubbo offline com.* OK","title":"Offline \u4e0b\u7ebf\u670d\u52a1\u547d\u4ee4"},{"location":"user/references/qos/#help","text":"//\u5217\u51fa\u6240\u6709\u547d\u4ee4 dubbo help //\u5217\u51fa\u5355\u4e2a\u547d\u4ee4\u7684\u5177\u4f53\u4f7f\u7528\u60c5\u51b5 dubbo help online +--------------+----------------------------------------------------------------------------------+ | COMMAND NAME | online | +--------------+----------------------------------------------------------------------------------+ | EXAMPLE | online dubbo | | | online xx.xx.xxx.service | +--------------+----------------------------------------------------------------------------------+ dubbo","title":"help \u547d\u4ee4"},{"location":"user/references/qos/#_4","text":"QoS\u63d0\u4f9b\u4e86\u4e00\u4e9b\u542f\u52a8\u53c2\u6570\uff0c\u6765\u5bf9\u542f\u52a8\u8fdb\u884c\u914d\u7f6e\uff0c\u4ed6\u4eec\u4e3b\u8981\u5305\u62ec\uff1a \u53c2\u6570 \u8bf4\u660e \u9ed8\u8ba4\u503c qosEnable \u662f\u5426\u542f\u52a8QoS true qosPort \u542f\u52a8QoS\u7ed1\u5b9a\u7684\u7aef\u53e3 22222 qosAcceptForeignIp \u662f\u5426\u5141\u8bb8\u8fdc\u7a0b\u8bbf\u95ee false \u6ce8\u610f\uff0c\u4ece2.6.4/2.7.0\u5f00\u59cb\uff0cqosAcceptForeignIp\u9ed8\u8ba4\u914d\u7f6e\u6539\u4e3afalse\uff0c\u5982\u679cqosAcceptForeignIp\u8bbe\u7f6e\u4e3atrue\uff0c\u6709\u53ef\u80fd\u5e26\u6765\u5b89\u5168\u98ce\u9669\uff0c\u8bf7\u4ed4\u7ec6\u8bc4\u4f30\u540e\u518d\u6253\u5f00\u3002 QoS\u53c2\u6570\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u8fdb\u884c\u914d\u7f6e \u7cfb\u7edf\u5c5e\u6027 dubbo.properties XML\u65b9\u5f0f Spring-boot\u81ea\u52a8\u88c5\u914d\u65b9\u5f0f \u5176\u4e2d\uff0c\u4e0a\u8ff0\u65b9\u5f0f\u7684\u4f18\u5148\u987a\u5e8f\u4e3a\u7cfb\u7edf\u5c5e\u6027 dubbo.properties XML/Spring-boot\u81ea\u52a8\u88c5\u914d\u65b9\u5f0f\u3002","title":"\u76f8\u5173\u53c2\u6570\u8bf4\u660e"},{"location":"user/references/qos/#_5","text":"-Ddubbo.application.qos.enable=true -Ddubbo.application.qos.port=33333 -Ddubbo.application.qos.accept.foreign.ip=false","title":"\u4f7f\u7528\u7cfb\u7edf\u5c5e\u6027\u65b9\u5f0f\u8fdb\u884c\u914d\u7f6e"},{"location":"user/references/qos/#dubboproperties","text":"\u5728\u9879\u76ee\u7684 src/main/resources \u76ee\u5f55\u4e0b\u6dfb\u52a0dubbo.properties\u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b: dubbo.application.qos.enable=true dubbo.application.qos.port=33333 dubbo.application.qos.accept.foreign.ip=false","title":"\u4f7f\u7528dubbo.properties\u6587\u4ef6\u8fdb\u884c\u914d\u7f6e"},{"location":"user/references/qos/#xml","text":"\u5982\u679c\u8981\u901a\u8fc7XML\u914d\u7f6e\u54cd\u5e94\u7684QoS\u76f8\u5173\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u8fdb\u884c\u5982\u4e0b\u914d\u7f6e\uff1a ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd dubbo:application name= demo-provider dubbo:parameter key= qos.enable value= true / dubbo:parameter key= qos.accept.foreign.ip value= false / dubbo:parameter key= qos.port value= 33333 / /dubbo:application dubbo:registry address= multicast://224.5.6.7:1234 / dubbo:protocol name= dubbo port= 20880 / dubbo:service interface= org.apache.dubbo.demo.provider.DemoService ref= demoService / bean id= demoService class= org.apache.dubbo.demo.provider.DemoServiceImpl / /beans","title":"\u4f7f\u7528XML\u65b9\u6cd5\u8fdb\u884c\u914d\u7f6e"},{"location":"user/references/qos/#spring-boot","text":"\u5982\u679c\u662fspring-boot\u7684\u5e94\u7528\uff0c\u53ef\u4ee5\u5728 application.properties \u6216\u8005 application.yml \u4e0a\u914d\u7f6e: dubbo.application.qosEnable=true dubbo.application.qosPort=33333 dubbo.application.qosAcceptForeignIp=false","title":"\u4f7f\u7528spring-boot\u81ea\u52a8\u88c5\u914d\u65b9\u5f0f\u914d\u7f6e"},{"location":"user/references/telnet/","text":"Telnet \u547d\u4ee4\u53c2\u8003\u624b\u518c \u4ece 2.0.5 \u7248\u672c\u5f00\u59cb\uff0cdubbo \u5f00\u59cb\u652f\u6301\u901a\u8fc7 telnet \u547d\u4ee4\u6765\u8fdb\u884c\u670d\u52a1\u6cbb\u7406\u3002 \u4f7f\u7528 telnet localhost 20880 \u6216\u8005\uff1a echo status | nc -i 1 localhost 20880 status\u547d\u4ee4\u6240\u68c0\u67e5\u7684\u8d44\u6e90\u4e5f\u53ef\u4ee5\u6269\u5c55\uff0c\u53c2\u89c1\uff1a \u6269\u5c55\u53c2\u8003\u624b\u518c \u3002 \u547d\u4ee4 \u4ee5\u4e0b\u5c55\u793a\u4e86 dubbo \u5185\u5efa\u7684 telnet \u547d\u4ee4\u7684\u8bf4\u660e\u548c\u7528\u6cd5\uff0c\u6b64\u5916\uff0ctelnet \u547d\u4ee4\u8fd8\u652f\u6301\u7528\u6237\u81ea\u884c\u6269\u5c55\uff0c\u53c2\u89c1\uff1a Telnet \u547d\u4ee4\u6269\u5c55 \u3002 ls ls : \u663e\u793a\u670d\u52a1\u5217\u8868 ls -l : \u663e\u793a\u670d\u52a1\u8be6\u7ec6\u4fe1\u606f\u5217\u8868 ls XxxService : \u663e\u793a\u670d\u52a1\u7684\u65b9\u6cd5\u5217\u8868 ls -l XxxService : \u663e\u793a\u670d\u52a1\u7684\u65b9\u6cd5\u8be6\u7ec6\u4fe1\u606f\u5217\u8868 ps ps : \u663e\u793a\u670d\u52a1\u7aef\u53e3\u5217\u8868 ps -l : \u663e\u793a\u670d\u52a1\u5730\u5740\u5217\u8868 ps 20880 : \u663e\u793a\u7aef\u53e3\u4e0a\u7684\u8fde\u63a5\u4fe1\u606f ps -l 20880 : \u663e\u793a\u7aef\u53e3\u4e0a\u7684\u8fde\u63a5\u8be6\u7ec6\u4fe1\u606f cd cd XxxService : \u6539\u53d8\u7f3a\u7701\u670d\u52a1\uff0c\u5f53\u8bbe\u7f6e\u4e86\u7f3a\u7701\u670d\u52a1\uff0c\u51e1\u662f\u9700\u8981\u8f93\u5165\u670d\u52a1\u540d\u4f5c\u4e3a\u53c2\u6570\u7684\u547d\u4ee4\uff0c\u90fd\u53ef\u4ee5\u7701\u7565\u670d\u52a1\u53c2\u6570 cd / : \u53d6\u6d88\u7f3a\u7701\u670d\u52a1 pwd pwd : \u663e\u793a\u5f53\u524d\u7f3a\u7701\u670d\u52a1 trace trace XxxService : \u8ddf\u8e2a 1 \u6b21\u670d\u52a1\u4efb\u610f\u65b9\u6cd5\u7684\u8c03\u7528\u60c5\u51b5 trace XxxService 10 : \u8ddf\u8e2a 10 \u6b21\u670d\u52a1\u4efb\u610f\u65b9\u6cd5\u7684\u8c03\u7528\u60c5\u51b5 trace XxxService xxxMethod : \u8ddf\u8e2a 1 \u6b21\u670d\u52a1\u65b9\u6cd5\u7684\u8c03\u7528\u60c5\u51b5 trace XxxService xxxMethod 10 : \u8ddf\u8e2a 10 \u6b21\u670d\u52a1\u65b9\u6cd5\u7684\u8c03\u7528\u60c5\u51b5 count count XxxService : \u7edf\u8ba1 1 \u6b21\u670d\u52a1\u4efb\u610f\u65b9\u6cd5\u7684\u8c03\u7528\u60c5\u51b5 count XxxService 10 : \u7edf\u8ba1 10 \u6b21\u670d\u52a1\u4efb\u610f\u65b9\u6cd5\u7684\u8c03\u7528\u60c5\u51b5 count XxxService xxxMethod : \u7edf\u8ba1 1 \u6b21\u670d\u52a1\u65b9\u6cd5\u7684\u8c03\u7528\u60c5\u51b5 count XxxService xxxMethod 10 : \u7edf\u8ba1 10 \u6b21\u670d\u52a1\u65b9\u6cd5\u7684\u8c03\u7528\u60c5\u51b5 invoke invoke XxxService.xxxMethod(1234, \"abcd\", {\"prop\" : \"value\"}) : \u8c03\u7528\u670d\u52a1\u7684\u65b9\u6cd5 invoke com.xxx.XxxService.XxxService.xxxMethod(1234, \"abcd\", {\"prop\" : \"value\"}) : \u8c03\u7528\u5168\u8def\u5f84\u670d\u52a1\u7684\u65b9\u6cd5 invoke xxxMethod(1234, \"abcd\", {\"prop\" : \"value\"}) : \u8c03\u7528\u670d\u52a1\u7684\u65b9\u6cd5(\u81ea\u52a8\u67e5\u627e\u5305\u542b\u6b64\u65b9\u6cd5\u7684\u670d\u52a1) invoke xxxMethod({\"name\":\"zhangsan\",\"age\":12,\"class\":\"org.apache.dubbo.qos.legacy.service.Person\"}) :\u5f53\u6709\u53c2\u6570\u91cd\u8f7d\uff0c\u6216\u8005\u7c7b\u578b\u8f6c\u6362\u5931\u8d25\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0class\u5c5e\u6027\u6307\u5b9a\u9700\u8981\u8f6c\u6362\u7c7b \u5f53\u53c2\u6570\u4e3aMap \uff0ckey\u7684\u7c7b\u578b\u4e3aInteger\u65f6\uff0c\u5efa\u8bae\u6307\u5b9a\u7c7b\u578b\u3002\u4f8b\u5982 invoke com.xxx.xxxApiService({\"3\":0.123, \"class\":\"java.util.HashMap\"}) select [^2] select 1 : \u5f53 invoke \u547d\u4ee4\u5339\u914d\u5230\u591a\u4e2a\u65b9\u6cd5\u65f6\u4f7f\u7528\uff0c\u6839\u636e\u63d0\u793a\u5217\u8868\u9009\u62e9\u9700\u8981\u8c03\u7528\u7684\u65b9\u6cd5 status status : \u663e\u793a\u6c47\u603b\u72b6\u6001\uff0c\u8be5\u72b6\u6001\u5c06\u6c47\u603b\u6240\u6709\u8d44\u6e90\u7684\u72b6\u6001\uff0c\u5f53\u5168\u90e8 OK \u65f6\u5219\u663e\u793a OK\uff0c\u53ea\u8981\u6709\u4e00\u4e2a ERROR \u5219\u663e\u793a ERROR\uff0c\u53ea\u8981\u6709\u4e00\u4e2a WARN \u5219\u663e\u793a WARN status -l : \u663e\u793a\u72b6\u6001\u5217\u8868 log [^1] log debug : \u4fee\u6539 dubbo logger \u7684\u65e5\u5fd7\u7ea7\u522b log 100 : \u67e5\u770b file logger \u7684\u6700\u540e 100 \u5b57\u7b26\u7684\u65e5\u5fd7 help help : \u663e\u793a telnet \u547d\u5e2e\u52a9\u4fe1\u606f help xxx : \u663e\u793axxx\u547d\u4ee4\u7684\u8be6\u7ec6\u5e2e\u52a9\u4fe1\u606f clear clear : \u6e05\u9664\u5c4f\u5e55\u4e0a\u7684\u5185\u5bb9 clear 100 : \u6e05\u9664\u5c4f\u5e55\u4e0a\u7684\u6307\u5b9a\u884c\u6570\u7684\u5185\u5bb9 exit exit : \u9000\u51fa\u5f53\u524d telnet \u547d\u4ee4\u884c shutdown [^2] shutdown : \u5173\u95ed dubbo \u5e94\u7528 shutdown -t 1000 : \u5ef6\u8fdf 1000 \u6beb\u79d2\u5173\u95ed dubbo \u5e94\u7528 [^1]: 2.0.6 \u4ee5\u4e0a\u7248\u672c\u652f\u6301 [^2]: 2.7.1 \u4ee5\u4e0a\u7248\u672c\u652f\u6301","title":"telnet \u547d\u4ee4\u53c2\u8003\u624b\u518c"},{"location":"user/references/telnet/#telnet","text":"\u4ece 2.0.5 \u7248\u672c\u5f00\u59cb\uff0cdubbo \u5f00\u59cb\u652f\u6301\u901a\u8fc7 telnet \u547d\u4ee4\u6765\u8fdb\u884c\u670d\u52a1\u6cbb\u7406\u3002","title":"Telnet \u547d\u4ee4\u53c2\u8003\u624b\u518c"},{"location":"user/references/telnet/#_1","text":"telnet localhost 20880 \u6216\u8005\uff1a echo status | nc -i 1 localhost 20880 status\u547d\u4ee4\u6240\u68c0\u67e5\u7684\u8d44\u6e90\u4e5f\u53ef\u4ee5\u6269\u5c55\uff0c\u53c2\u89c1\uff1a \u6269\u5c55\u53c2\u8003\u624b\u518c \u3002","title":"\u4f7f\u7528"},{"location":"user/references/telnet/#_2","text":"\u4ee5\u4e0b\u5c55\u793a\u4e86 dubbo \u5185\u5efa\u7684 telnet \u547d\u4ee4\u7684\u8bf4\u660e\u548c\u7528\u6cd5\uff0c\u6b64\u5916\uff0ctelnet \u547d\u4ee4\u8fd8\u652f\u6301\u7528\u6237\u81ea\u884c\u6269\u5c55\uff0c\u53c2\u89c1\uff1a Telnet \u547d\u4ee4\u6269\u5c55 \u3002","title":"\u547d\u4ee4"},{"location":"user/references/telnet/#ls","text":"ls : \u663e\u793a\u670d\u52a1\u5217\u8868 ls -l : \u663e\u793a\u670d\u52a1\u8be6\u7ec6\u4fe1\u606f\u5217\u8868 ls XxxService : \u663e\u793a\u670d\u52a1\u7684\u65b9\u6cd5\u5217\u8868 ls -l XxxService : \u663e\u793a\u670d\u52a1\u7684\u65b9\u6cd5\u8be6\u7ec6\u4fe1\u606f\u5217\u8868","title":"ls"},{"location":"user/references/telnet/#ps","text":"ps : \u663e\u793a\u670d\u52a1\u7aef\u53e3\u5217\u8868 ps -l : \u663e\u793a\u670d\u52a1\u5730\u5740\u5217\u8868 ps 20880 : \u663e\u793a\u7aef\u53e3\u4e0a\u7684\u8fde\u63a5\u4fe1\u606f ps -l 20880 : \u663e\u793a\u7aef\u53e3\u4e0a\u7684\u8fde\u63a5\u8be6\u7ec6\u4fe1\u606f","title":"ps"},{"location":"user/references/telnet/#cd","text":"cd XxxService : \u6539\u53d8\u7f3a\u7701\u670d\u52a1\uff0c\u5f53\u8bbe\u7f6e\u4e86\u7f3a\u7701\u670d\u52a1\uff0c\u51e1\u662f\u9700\u8981\u8f93\u5165\u670d\u52a1\u540d\u4f5c\u4e3a\u53c2\u6570\u7684\u547d\u4ee4\uff0c\u90fd\u53ef\u4ee5\u7701\u7565\u670d\u52a1\u53c2\u6570 cd / : \u53d6\u6d88\u7f3a\u7701\u670d\u52a1","title":"cd"},{"location":"user/references/telnet/#pwd","text":"pwd : \u663e\u793a\u5f53\u524d\u7f3a\u7701\u670d\u52a1","title":"pwd"},{"location":"user/references/telnet/#trace","text":"trace XxxService : \u8ddf\u8e2a 1 \u6b21\u670d\u52a1\u4efb\u610f\u65b9\u6cd5\u7684\u8c03\u7528\u60c5\u51b5 trace XxxService 10 : \u8ddf\u8e2a 10 \u6b21\u670d\u52a1\u4efb\u610f\u65b9\u6cd5\u7684\u8c03\u7528\u60c5\u51b5 trace XxxService xxxMethod : \u8ddf\u8e2a 1 \u6b21\u670d\u52a1\u65b9\u6cd5\u7684\u8c03\u7528\u60c5\u51b5 trace XxxService xxxMethod 10 : \u8ddf\u8e2a 10 \u6b21\u670d\u52a1\u65b9\u6cd5\u7684\u8c03\u7528\u60c5\u51b5","title":"trace"},{"location":"user/references/telnet/#count","text":"count XxxService : \u7edf\u8ba1 1 \u6b21\u670d\u52a1\u4efb\u610f\u65b9\u6cd5\u7684\u8c03\u7528\u60c5\u51b5 count XxxService 10 : \u7edf\u8ba1 10 \u6b21\u670d\u52a1\u4efb\u610f\u65b9\u6cd5\u7684\u8c03\u7528\u60c5\u51b5 count XxxService xxxMethod : \u7edf\u8ba1 1 \u6b21\u670d\u52a1\u65b9\u6cd5\u7684\u8c03\u7528\u60c5\u51b5 count XxxService xxxMethod 10 : \u7edf\u8ba1 10 \u6b21\u670d\u52a1\u65b9\u6cd5\u7684\u8c03\u7528\u60c5\u51b5","title":"count"},{"location":"user/references/telnet/#invoke","text":"invoke XxxService.xxxMethod(1234, \"abcd\", {\"prop\" : \"value\"}) : \u8c03\u7528\u670d\u52a1\u7684\u65b9\u6cd5 invoke com.xxx.XxxService.XxxService.xxxMethod(1234, \"abcd\", {\"prop\" : \"value\"}) : \u8c03\u7528\u5168\u8def\u5f84\u670d\u52a1\u7684\u65b9\u6cd5 invoke xxxMethod(1234, \"abcd\", {\"prop\" : \"value\"}) : \u8c03\u7528\u670d\u52a1\u7684\u65b9\u6cd5(\u81ea\u52a8\u67e5\u627e\u5305\u542b\u6b64\u65b9\u6cd5\u7684\u670d\u52a1) invoke xxxMethod({\"name\":\"zhangsan\",\"age\":12,\"class\":\"org.apache.dubbo.qos.legacy.service.Person\"}) :\u5f53\u6709\u53c2\u6570\u91cd\u8f7d\uff0c\u6216\u8005\u7c7b\u578b\u8f6c\u6362\u5931\u8d25\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0class\u5c5e\u6027\u6307\u5b9a\u9700\u8981\u8f6c\u6362\u7c7b \u5f53\u53c2\u6570\u4e3aMap \uff0ckey\u7684\u7c7b\u578b\u4e3aInteger\u65f6\uff0c\u5efa\u8bae\u6307\u5b9a\u7c7b\u578b\u3002\u4f8b\u5982 invoke com.xxx.xxxApiService({\"3\":0.123, \"class\":\"java.util.HashMap\"})","title":"invoke"},{"location":"user/references/telnet/#select-2","text":"select 1 : \u5f53 invoke \u547d\u4ee4\u5339\u914d\u5230\u591a\u4e2a\u65b9\u6cd5\u65f6\u4f7f\u7528\uff0c\u6839\u636e\u63d0\u793a\u5217\u8868\u9009\u62e9\u9700\u8981\u8c03\u7528\u7684\u65b9\u6cd5","title":"select [^2]"},{"location":"user/references/telnet/#status","text":"status : \u663e\u793a\u6c47\u603b\u72b6\u6001\uff0c\u8be5\u72b6\u6001\u5c06\u6c47\u603b\u6240\u6709\u8d44\u6e90\u7684\u72b6\u6001\uff0c\u5f53\u5168\u90e8 OK \u65f6\u5219\u663e\u793a OK\uff0c\u53ea\u8981\u6709\u4e00\u4e2a ERROR \u5219\u663e\u793a ERROR\uff0c\u53ea\u8981\u6709\u4e00\u4e2a WARN \u5219\u663e\u793a WARN status -l : \u663e\u793a\u72b6\u6001\u5217\u8868","title":"status"},{"location":"user/references/telnet/#log-1","text":"log debug : \u4fee\u6539 dubbo logger \u7684\u65e5\u5fd7\u7ea7\u522b log 100 : \u67e5\u770b file logger \u7684\u6700\u540e 100 \u5b57\u7b26\u7684\u65e5\u5fd7","title":"log [^1]"},{"location":"user/references/telnet/#help","text":"help : \u663e\u793a telnet \u547d\u5e2e\u52a9\u4fe1\u606f help xxx : \u663e\u793axxx\u547d\u4ee4\u7684\u8be6\u7ec6\u5e2e\u52a9\u4fe1\u606f","title":"help"},{"location":"user/references/telnet/#clear","text":"clear : \u6e05\u9664\u5c4f\u5e55\u4e0a\u7684\u5185\u5bb9 clear 100 : \u6e05\u9664\u5c4f\u5e55\u4e0a\u7684\u6307\u5b9a\u884c\u6570\u7684\u5185\u5bb9","title":"clear"},{"location":"user/references/telnet/#exit","text":"exit : \u9000\u51fa\u5f53\u524d telnet \u547d\u4ee4\u884c","title":"exit"},{"location":"user/references/telnet/#shutdown-2","text":"shutdown : \u5173\u95ed dubbo \u5e94\u7528 shutdown -t 1000 : \u5ef6\u8fdf 1000 \u6beb\u79d2\u5173\u95ed dubbo \u5e94\u7528 [^1]: 2.0.6 \u4ee5\u4e0a\u7248\u672c\u652f\u6301 [^2]: 2.7.1 \u4ee5\u4e0a\u7248\u672c\u652f\u6301","title":"shutdown [^2]"},{"location":"user/references/metadata/introduction/","text":"\u80cc\u666f dubbo provider\u4e2d\u7684\u670d\u52a1\u914d\u7f6e\u9879\u6709\u63a5\u8fd1 30\u4e2a\u914d\u7f6e\u9879 \u3002 \u6392\u9664\u6ce8\u518c\u4e2d\u5fc3\u670d\u52a1\u6cbb\u7406\u9700\u8981\u4e4b\u5916\uff0c\u5f88\u5927\u4e00\u90e8\u5206\u914d\u7f6e\u9879\u662fprovider\u81ea\u5df1\u4f7f\u7528\uff0c\u4e0d\u9700\u8981\u900f\u4f20\u7ed9\u6d88\u8d39\u8005\u3002\u8fd9\u90e8\u5206\u6570\u636e\u4e0d\u9700\u8981\u8fdb\u5165\u6ce8\u518c\u4e2d\u5fc3\uff0c\u800c\u53ea\u9700\u8981\u4ee5key-value\u5f62\u5f0f\u6301\u4e45\u5316\u5b58\u50a8\u3002 dubbo consumer\u4e2d\u7684\u914d\u7f6e\u9879\u4e5f\u6709 20+\u4e2a\u914d\u7f6e\u9879 \u3002\u5728\u6ce8\u518c\u4e2d\u5fc3\u4e4b\u4e2d\uff0c\u670d\u52a1\u6d88\u8d39\u8005\u5217\u8868\u4e2d\u53ea\u9700\u8981\u5173\u6ce8application\uff0cversion\uff0cgroup\uff0cip\uff0cdubbo\u7248\u672c\u7b49\u5c11\u91cf\u914d\u7f6e\uff0c\u5176\u4ed6\u914d\u7f6e\u4e5f\u53ef\u4ee5\u4ee5key-value\u5f62\u5f0f\u6301\u4e45\u5316\u5b58\u50a8\u3002 \u8fd9\u4e9b\u6570\u636e\u662f\u4ee5\u670d\u52a1\u4e3a\u7ef4\u5ea6\u6ce8\u518c\u8fdb\u5165\u6ce8\u518c\u4e2d\u5fc3\uff0c\u5bfc\u81f4\u4e86\u6570\u636e\u91cf\u7684\u81a8\u80c0\uff0c\u8fdb\u800c\u5f15\u53d1\u6ce8\u518c\u4e2d\u5fc3(\u5982zookeeper)\u7684\u7f51\u7edc\u5f00\u9500\u589e\u5927\uff0c\u6027\u80fd\u964d\u4f4e\u3002 \u9664\u4e86\u4e0a\u8ff0\u914d\u7f6e\u9879\u7684\u5b58\u50a8\u4e4b\u5916\uff0cdubbo\u670d\u52a1\u5143\u6570\u636e\u4fe1\u606f\u4e5f\u9700\u8981\u88ab\u5b58\u50a8\u4e0b\u6765\u3002\u5143\u6570\u636e\u4fe1\u606f\u5305\u62ec\u670d\u52a1\u63a5\u53e3\uff0c\u53ca\u63a5\u53e3\u7684\u65b9\u6cd5\u4fe1\u606f\u3002\u8fd9\u4e9b\u4fe1\u606f\u5c06\u88ab\u7528\u4e8e\u670d\u52a1mock\uff0c\u670d\u52a1\u6d4b\u8bd5\u3002 \u76ee\u6807 \u9700\u8981\u5c06\u6ce8\u518c\u4e2d\u5fc3\u539f\u6765\u7684\u6570\u636e\u4fe1\u606f\u548c\u5143\u6570\u636e\u4fe1\u606f\u4fdd\u5b58\u5230\u72ec\u7acb\u7684key-value\u7684\u5b58\u50a8\u4e2d\uff0c\u8fd9\u4e2akey-value\u53ef\u4ee5\u662fDB\uff0credis\u6216\u8005\u5176\u4ed6\u6301\u4e45\u5316\u5b58\u50a8\u3002\u6838\u5fc3\u4ee3\u7801\u4e2d\u652f\u6301\u4e86zookeeper\uff0credis(\u63a8\u8350)\u7684\u9ed8\u8ba4\u652f\u6301\u3002 provider\u5b58\u50a8\u5185\u5bb9\u7684\u683c\u5f0f\uff0c\u53c2\u89c1\uff1aorg.apache.dubbo.metadata.definition.model.FullServiceDefinition\u3002\u662f\u8be5\u7c7b\u578bgson\u5316\u4e4b\u540e\u7684\u5b58\u50a8\u3002 Consumer\u5b58\u50a8\u5185\u5bb9\uff0c\u4e3aMap\u683c\u5f0f\u3002\u4eceConsumer\u7aef\u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3\u7684URL\u4e2d\u7684\u83b7\u53d6\u53c2\u6570\u4fe1\u606f\u3002\u5373\u901a\u8fc7URL.getParameterMap()\u83b7\u53d6\u5230\u7684Map\uff0c\u8fdb\u884cgson\u5316\u4e4b\u540e\u8fdb\u884c\u5b58\u50a8\u3002 \u8be6\u7ec6\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u7684sample\u8f93\u51fa\u3002 \u914d\u7f6e \u9ed8\u8ba4\u7684\u5143\u6570\u636e\u5b58\u50a8\uff0c\u989d\u5916\u652f\u6301\u4ee5\u4e0b\u51e0\u4e2a\u7279\u6027\uff1a * \u5931\u8d25\u91cd\u8bd5 * \u6bcf\u5929\u5b9a\u65f6\u91cd\u5237 \u5931\u8d25\u91cd\u8bd5 \u5931\u8d25\u91cd\u8bd5\u53ef\u4ee5\u901a\u8fc7retrytimes \uff08\u91cd\u8bd5\u6b21\u6570,\u9ed8\u8ba4100\uff09\uff0cretryperiod\uff08\u91cd\u8bd5\u5468\u671f\uff0c\u9ed8\u8ba43000ms\uff09\u8fdb\u884c\u8bbe\u7f6e\u3002 \u5b9a\u65f6\u5237\u65b0 \u9ed8\u8ba4\u5f00\u542f\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6ecycleReport=false\u8fdb\u884c\u5173\u95ed\u3002 \u5b8c\u6574\u7684\u914d\u7f6e\u9879\uff1a dubbo.metadata-report.address=zookeeper://127.0.0.1:2181 dubbo.metadata-report.username=xxx ##\u975e\u5fc5\u987b dubbo.metadata-report.password=xxx ##\u975e\u5fc5\u987b dubbo.metadata-report.retry-times=30 ##\u975e\u5fc5\u987b,default\u503c100 dubbo.metadata-report.retry-period=5000 ##\u975e\u5fc5\u987b,default\u503c3000 dubbo.metadata-report.cycle-report=false ##\u975e\u5fc5\u987b,default\u503ctrue \u5982\u679c\u5143\u6570\u636e\u5730\u5740(dubbo.metadata-report.address)\u4e5f\u4e0d\u8fdb\u884c\u914d\u7f6e\uff0c\u6574\u4e2a\u5143\u6570\u636e\u7684\u5199\u5165\u4e0d\u4f1a\u751f\u6548\uff0c\u4f46\u662f\u4e0d\u5f71\u54cd\u7a0b\u5e8f\u8fd0\u884c\u3002 \u63a5\u4e0b\u6765\u770b\u51e0\u4e2asample\u7684\u914d\u7f6e\u3002\u65e0\u8bba\u54ea\u79cd\u914d\u7f6e\u65b9\u5f0f\uff0c\u90fd\u9700\u8981\u5f15\u5165maven\u4f9d\u8d56\uff1a dependency groupId org.apache.dubbo /groupId artifactId dubbo-metadata-report-zookeeper /artifactId /dependency \u5982\u679c\u9700\u8981\u4f7f\u7528redis\uff0c\u53ef\u4ee5\u5f15\u5165\u5bf9\u5e94\u7684redis\u7684\u4f9d\u8d56\uff1a dependency groupId org.apache.dubbo /groupId artifactId dubbo-metadata-report-redis /artifactId /dependency \u5b8c\u6574\u7684sample\uff0c\u67e5\u770b sample-2.7 \u65b9\u5f0f\u4e00\uff1a\u5728\u914d\u7f6e\u4e2d\u5fc3\u914d\u7f6e \u53c2\u8003sample\uff1adubbo-samples-metadata-report/dubbo-samples-metadata-report-configcenter \u5de5\u7a0b\u3002 \u914d\u7f6e\u4e2d\u5fc3\u914d\u7f6e \u914d\u7f6e\u4e2d\u5fc3\u7684\u914d\u7f6e\uff0c\u53ef\u4ee5\u53c2\u8003configcenter\u7684\u6587\u6863\u3002\u914d\u7f6e\u7684\u5185\u5bb9\u5982\u4e0b\uff1a dubbo.registry.address=zookeeper://127.0.0.1:2181 ### \u6ce8\u610f\u9a7c\u5cf0\u5f0f\u98ce\u683c dubbo.metadata-report.address=zookeeper://127.0.0.1:2181 ###\u5143\u6570\u636e\u5b58\u50a8\u7684\u5730\u5740 \u5728sample\u4e2d\uff0c\u4f7f\u7528\u4e86Zookeeper\u4f5c\u4e3a\u914d\u7f6e\u4e2d\u5fc3\u3002\u542f\u52a8\u672c\u5730zookeeper\u670d\u52a1\u4e4b\u540e\uff0c\u76f4\u63a5\u8fd0\u884c\uff1aorg.apache.dubbo.samples.metadatareport.configcenter.ZKTools \u5c31\u53ef\u4ee5\u5b8c\u6210\u5199\u5165\u3002 \u5982\u679c\u914d\u7f6e\u4e2d\u5fc3\u4f7f\u7528\u4e86nacos\uff0capollo\uff0c\u8fd9\u4e9b\u4ea7\u54c1\u672c\u8eab\u652f\u6301ops\u914d\u7f6e\u3002 \u5e94\u7528\u914d\u7f6e ###dubbo.properties dubbo.config-center.address=zookeeper://127.0.0.1:2181 ... \u5b8c\u6210\u4e0a\u8ff0\u4e24\u6b65\u4e4b\u540e\uff0c\u6ce8\u518c\u4e2d\u5fc3\u5730\u5740\u3001\u5143\u6570\u636e\u5730\u5740\u5c06\u4ece\u914d\u7f6e\u4e2d\u5fc3\u8fdb\u884c\u83b7\u53d6\u3002\u73b0\u5728\u53ef\u4ee5\u4f9d\u6b21\u8fd0\u884cProvider\u7c7b\u548cConsumer\u7c7b\uff0c\u4f1a\u5728console\u4e2d\u5f97\u5230\u5bf9\u5e94\u7684\u8f93\u51fa\u6216\u8005\u76f4\u63a5\u901a\u8fc7zookeeper\u7684cli\u67e5\u770b\u3002 Provider\u914d\u7f6e provider\u7aef\u5b58\u50a8\u7684\u5143\u6570\u636e\u5185\u5bb9\u5982\u4e0b\uff1a { parameters : { side : provider , methods : sayHello , dubbo : 2.0.2 , threads : 100 , interface : org.apache.dubbo.samples.metadatareport.configcenter.api.AnnotationService , threadpool : fixed , version : 1.1.1 , generic : false , revision : 1.1.1 , valid : true , application : metadatareport-configcenter-provider , default.timeout : 5000 , group : d-test , anyhost : true }, canonicalName : org.apache.dubbo.samples.metadatareport.configcenter.api.AnnotationService , codeSource : file:/Users/cvictory/workspace/work-mw/dubbo-samples/dubbo-samples-metadata-report/dubbo-samples-metadata-report-configcenter/target/classes/ , methods : [{ name : sayHello , parameterTypes : [ java.lang.String ], returnType : java.lang.String }], types : [{ type : java.lang.String , properties : { value : { type : char[] }, hash : { type : int } } }, { type : int }, { type : char }] } provider\u5b58\u50a8\u7684\u5185\u5bb9\u5305\u62ec\u4e86provider\u670d\u52a1\u5f80\u6ce8\u518c\u4e2d\u5fc3\u586b\u5199\u7684\u5168\u90e8\u53c2\u6570\uff0c\u4ee5\u53ca\u670d\u52a1\u7684\u65b9\u6cd5\u4fe1\u606f\uff08\u65b9\u6cd5\u540d\uff0c\u5165\u53c2\u51fa\u53c2\u7684\u683c\u5f0f\uff09\u3002 Consumer\u914d\u7f6e\uff1a { valid : true , side : consumer , application : metadatareport-configcenter-consumer , methods : sayHello , default.timeout : 6666 , dubbo : 2.0.2 , interface : org.apache.dubbo.samples.metadatareport.configcenter.api.AnnotationService , version : 1.1.1 , revision : 1.1.1 , group : d-test } consumer\u7aef\u5b58\u50a8\u4e86consumer\u5f80\u6ce8\u518c\u4e2d\u5fc3\u586b\u5199\u7684\u5168\u90e8\u53c2\u6570\u3002 \u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u4e3b\u8981\u662f\u5c06\u5143\u6570\u636e\u5730\u5740\u653e\u5728\u914d\u7f6e\u4e2d\u5fc3\uff0c\u5728\u5143\u6570\u636e\u533a\u5b58\u50a8\u4e0b\u6765\u7684provider\u7aef\u670d\u52a1\u4fe1\u606f\u548cconsumer\u7aef\u670d\u52a1\u4fe1\u606f\u7684\u5c55\u793a\u3002 \u63a5\u4e0b\u6765\u7684\u4e24\u4e2a\u4f8b\u5b50\uff0c\u4e3b\u8981\u8bb2\u89e3\u5728\u5de5\u7a0b\u4e2d\u914d\u7f6e\uff1axml\u65b9\u5f0f\uff0cannotation\u65b9\u5f0f\u3002 \u65b9\u5f0f\u4e8c\uff1a\u914d\u7f6e\u5728\u9879\u76ee\u4e2d-properties\u65b9\u5f0f\u5f15\u5165\u914d\u7f6e \u53c2\u8003sample\uff1adubbo-samples-metadata-report/dubbo-samples-metadata-report-local-xml\u5de5\u7a0b\u3002 dubbo.properties dubbo.metadata-report.address=zookeeper://127.0.0.1:2181 \u914d\u7f6e\u5b8c\u6210\u8fd9\u4e2a\u4e4b\u540e\uff0c\u5176\u4f59\u7684\u4e0d\u7528\u7279\u522b\u5173\u6ce8\u3002\u4e5f\u53ef\u4ee5\u76f4\u63a5\u67e5\u770b\u5bf9\u5e94\u7684provider\u548cconsumer\u7aef\u7684\u670d\u52a1\u4fe1\u606f\u3002 provider\u5b58\u50a8\u7684\u67d0\u4e2a\u670d\u52a1\u7684\u5185\u5bb9\uff1a { parameters : { valid : true , async : true , side : provider , application : metadatareport-local-xml-provider , methods : sayHello , dubbo : 2.0.2 , interface : org.apache.dubbo.samples.metadatareport.local.xml.api.DemoService , generic : false , anyhost : true }, canonicalName : org.apache.dubbo.samples.metadatareport.local.xml.api.DemoService , codeSource : file:/Users/cvictory/workspace/work-mw/dubbo-samples/dubbo-samples-metadata-report/dubbo-samples-metadata-report-local-xml/target/classes/ , methods : [{ name : sayHello , parameterTypes : [ java.lang.String ], returnType : java.lang.String }], types : [{ type : int }, { type : char }, { type : java.lang.String , properties : { value : { type : char[] }, hash : { type : int } } }] } consumer\u7aef\u5b58\u50a8\u7684\u5185\u5bb9\uff1a { valid : true , side : consumer , application : metadatareport-local-xml-consumer , methods : sayHello , dubbo : 2.0.2 , interface : org.apache.dubbo.samples.metadatareport.local.xml.api.DemoService } \u65b9\u5f0f\u4e09\uff1a\u914d\u7f6e\u5728\u9879\u76ee\u4e2d-annotation\u65b9\u5f0f\u5f15\u5165\u914d\u7f6e \u53c2\u8003sample\uff1adubbo-samples-metadata-report/dubbo-samples-metadata-report-local-annotaion\u5de5\u7a0b\u3002 @Bean \u5f15\u5165bean @Bean public MetadataReportConfig metadataReportConfig() { MetadataReportConfig metadataReportConfig = new MetadataReportConfig(); metadataReportConfig.setAddress( zookeeper://127.0.0.1:2181 ); return metadataReportConfig; } \u5f15\u5165Bean\u4e4b\u540e\uff0c\u5176\u4f59\u7684\u5730\u65b9\u4e5f\u4e0d\u9700\u8981\u7279\u522b\u914d\u7f6e\u3002\u76f4\u63a5\u67e5\u770b\u5bf9\u5e94\u7684\u670d\u52a1\u4fe1\u606f\uff1a provider\u5b58\u50a8\u7684\u67d0\u4e2a\u670d\u52a1\u7684\u5185\u5bb9\uff1a { parameters : { side : provider , methods : sayHello , dubbo : 2.0.2 , interface : org.apache.dubbo.samples.metadatareport.local.annotation.api.AnnotationService , version : 1.1.8 , generic : false , revision : 1.1.8 , valid : true , application : metadatareport-local-annotaion-provider , default.timeout : 1000 , group : d-test , anyhost : true }, canonicalName : org.apache.dubbo.samples.metadatareport.local.annotation.api.AnnotationService , codeSource : file:/Users/cvictory/workspace/work-mw/dubbo-samples/dubbo-samples-metadata-report/dubbo-samples-metadata-report-local-annotaion/target/classes/ , methods : [{ name : sayHello , parameterTypes : [ java.lang.String ], returnType : java.lang.String }], types : [{ type : int }, { type : java.lang.String , properties : { value : { type : char[] }, hash : { type : int } } }, { type : char }] } consumer\u7aef\u5b58\u50a8\u7684\u5185\u5bb9\uff1a { valid : true , side : consumer , application : metadatareport-local-annotaion-consumer , methods : sayHello , dubbo : 2.0.2 , interface : org.apache.dubbo.samples.metadatareport.local.annotation.api.AnnotationService , version : 1.1.8 , revision : 1.1.8 , group : d-test } \u6269\u5c55 SPI\u5b9a\u4e49 \u53c2\u8003\uff1aorg.apache.dubbo.metadata.store.MetadataReportFactory \uff0c org.apache.dubbo.metadata.store.MetadataReport @SPI( redis ) public interface MetadataReportFactory { @Adaptive({ protocol }) MetadataReport getMetadataReport(URL url); } \u81ea\u5b9a\u4e49\u5143\u6570\u636e\u7684\u5b58\u50a8 \u4e0b\u9762\u4ee5Redis\u5b58\u50a8\u4e3a\u4f8b\u8fdb\u884c\u8bf4\u660e\u3002 \u65b0\u5efa\u4e00\u4e2aproject\uff0c\u9700\u8981\u652f\u6301\u4ee5\u4e0b\u4fee\u6539\uff1a \u6269\u5c55AbstractMetadataReport public class RedisMetadataReport extends AbstractMetadataReport { private final static Logger logger = LoggerFactory.getLogger(RedisMetadataReport.class); final JedisPool pool; public RedisMetadataReport(URL url) { super(url); pool = new JedisPool(new JedisPoolConfig(), url.getHost(), url.getPort()); } @Override protected void doStoreProviderMetadata(ProviderMetadataIdentifier providerMetadataIdentifier, String serviceDefinitions) { this.storeMetadata(providerMetadataIdentifier, serviceDefinitions); } @Override protected void doStoreConsumerMetadata(ConsumerMetadataIdentifier consumerMetadataIdentifier, String value) { this.storeMetadata(consumerMetadataIdentifier, value); } private void storeMetadata(MetadataIdentifier metadataIdentifier, String v) { try (Jedis jedis = pool.getResource()) { jedis.set(metadataIdentifier.getIdentifierKey() + META_DATA_SOTRE_TAG, v); } catch (Throwable e) { logger.error( Failed to put + metadataIdentifier + to redis + v + , cause: + e.getMessage(), e); throw new RpcException( Failed to put + metadataIdentifier + to redis + v + , cause: + e.getMessage(), e); } } } \u6269\u5c55AbstractMetadataReportFactory public class RedisMetadataReportFactory extends AbstractMetadataReportFactory { @Override public MetadataReport createMetadataReport(URL url) { return new RedisMetadataReport(url); } } \u589e\u52a0META-INF/dubbo/internal/org.apache.dubbo.metadata.store.MetadataReportFactory redis=org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory \u53ea\u8981\u5c06\u4e0a\u9762\u7684\u4fee\u6539\u548cproject\u6253\u5305\u6210jar\u5305\uff0c\u7136\u540e\u914d\u7f6e\u5143\u6570\u636e\u4e2d\u5fc3\u7684url\uff1aredis://10.20.153.10:6379\u3002 \u81f3\u6b64\uff0c\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u5143\u6570\u636e\u5b58\u50a8\u5c31\u53ef\u4ee5\u8fd0\u884c\u4e86\u3002","title":"\u80cc\u666f"},{"location":"user/references/metadata/introduction/#_1","text":"dubbo provider\u4e2d\u7684\u670d\u52a1\u914d\u7f6e\u9879\u6709\u63a5\u8fd1 30\u4e2a\u914d\u7f6e\u9879 \u3002 \u6392\u9664\u6ce8\u518c\u4e2d\u5fc3\u670d\u52a1\u6cbb\u7406\u9700\u8981\u4e4b\u5916\uff0c\u5f88\u5927\u4e00\u90e8\u5206\u914d\u7f6e\u9879\u662fprovider\u81ea\u5df1\u4f7f\u7528\uff0c\u4e0d\u9700\u8981\u900f\u4f20\u7ed9\u6d88\u8d39\u8005\u3002\u8fd9\u90e8\u5206\u6570\u636e\u4e0d\u9700\u8981\u8fdb\u5165\u6ce8\u518c\u4e2d\u5fc3\uff0c\u800c\u53ea\u9700\u8981\u4ee5key-value\u5f62\u5f0f\u6301\u4e45\u5316\u5b58\u50a8\u3002 dubbo consumer\u4e2d\u7684\u914d\u7f6e\u9879\u4e5f\u6709 20+\u4e2a\u914d\u7f6e\u9879 \u3002\u5728\u6ce8\u518c\u4e2d\u5fc3\u4e4b\u4e2d\uff0c\u670d\u52a1\u6d88\u8d39\u8005\u5217\u8868\u4e2d\u53ea\u9700\u8981\u5173\u6ce8application\uff0cversion\uff0cgroup\uff0cip\uff0cdubbo\u7248\u672c\u7b49\u5c11\u91cf\u914d\u7f6e\uff0c\u5176\u4ed6\u914d\u7f6e\u4e5f\u53ef\u4ee5\u4ee5key-value\u5f62\u5f0f\u6301\u4e45\u5316\u5b58\u50a8\u3002 \u8fd9\u4e9b\u6570\u636e\u662f\u4ee5\u670d\u52a1\u4e3a\u7ef4\u5ea6\u6ce8\u518c\u8fdb\u5165\u6ce8\u518c\u4e2d\u5fc3\uff0c\u5bfc\u81f4\u4e86\u6570\u636e\u91cf\u7684\u81a8\u80c0\uff0c\u8fdb\u800c\u5f15\u53d1\u6ce8\u518c\u4e2d\u5fc3(\u5982zookeeper)\u7684\u7f51\u7edc\u5f00\u9500\u589e\u5927\uff0c\u6027\u80fd\u964d\u4f4e\u3002 \u9664\u4e86\u4e0a\u8ff0\u914d\u7f6e\u9879\u7684\u5b58\u50a8\u4e4b\u5916\uff0cdubbo\u670d\u52a1\u5143\u6570\u636e\u4fe1\u606f\u4e5f\u9700\u8981\u88ab\u5b58\u50a8\u4e0b\u6765\u3002\u5143\u6570\u636e\u4fe1\u606f\u5305\u62ec\u670d\u52a1\u63a5\u53e3\uff0c\u53ca\u63a5\u53e3\u7684\u65b9\u6cd5\u4fe1\u606f\u3002\u8fd9\u4e9b\u4fe1\u606f\u5c06\u88ab\u7528\u4e8e\u670d\u52a1mock\uff0c\u670d\u52a1\u6d4b\u8bd5\u3002","title":"\u80cc\u666f"},{"location":"user/references/metadata/introduction/#_2","text":"\u9700\u8981\u5c06\u6ce8\u518c\u4e2d\u5fc3\u539f\u6765\u7684\u6570\u636e\u4fe1\u606f\u548c\u5143\u6570\u636e\u4fe1\u606f\u4fdd\u5b58\u5230\u72ec\u7acb\u7684key-value\u7684\u5b58\u50a8\u4e2d\uff0c\u8fd9\u4e2akey-value\u53ef\u4ee5\u662fDB\uff0credis\u6216\u8005\u5176\u4ed6\u6301\u4e45\u5316\u5b58\u50a8\u3002\u6838\u5fc3\u4ee3\u7801\u4e2d\u652f\u6301\u4e86zookeeper\uff0credis(\u63a8\u8350)\u7684\u9ed8\u8ba4\u652f\u6301\u3002 provider\u5b58\u50a8\u5185\u5bb9\u7684\u683c\u5f0f\uff0c\u53c2\u89c1\uff1aorg.apache.dubbo.metadata.definition.model.FullServiceDefinition\u3002\u662f\u8be5\u7c7b\u578bgson\u5316\u4e4b\u540e\u7684\u5b58\u50a8\u3002 Consumer\u5b58\u50a8\u5185\u5bb9\uff0c\u4e3aMap\u683c\u5f0f\u3002\u4eceConsumer\u7aef\u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3\u7684URL\u4e2d\u7684\u83b7\u53d6\u53c2\u6570\u4fe1\u606f\u3002\u5373\u901a\u8fc7URL.getParameterMap()\u83b7\u53d6\u5230\u7684Map\uff0c\u8fdb\u884cgson\u5316\u4e4b\u540e\u8fdb\u884c\u5b58\u50a8\u3002 \u8be6\u7ec6\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u7684sample\u8f93\u51fa\u3002","title":"\u76ee\u6807"},{"location":"user/references/metadata/introduction/#_3","text":"\u9ed8\u8ba4\u7684\u5143\u6570\u636e\u5b58\u50a8\uff0c\u989d\u5916\u652f\u6301\u4ee5\u4e0b\u51e0\u4e2a\u7279\u6027\uff1a * \u5931\u8d25\u91cd\u8bd5 * \u6bcf\u5929\u5b9a\u65f6\u91cd\u5237","title":"\u914d\u7f6e"},{"location":"user/references/metadata/introduction/#_4","text":"\u5931\u8d25\u91cd\u8bd5\u53ef\u4ee5\u901a\u8fc7retrytimes \uff08\u91cd\u8bd5\u6b21\u6570,\u9ed8\u8ba4100\uff09\uff0cretryperiod\uff08\u91cd\u8bd5\u5468\u671f\uff0c\u9ed8\u8ba43000ms\uff09\u8fdb\u884c\u8bbe\u7f6e\u3002","title":"\u5931\u8d25\u91cd\u8bd5"},{"location":"user/references/metadata/introduction/#_5","text":"\u9ed8\u8ba4\u5f00\u542f\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6ecycleReport=false\u8fdb\u884c\u5173\u95ed\u3002","title":"\u5b9a\u65f6\u5237\u65b0"},{"location":"user/references/metadata/introduction/#_6","text":"dubbo.metadata-report.address=zookeeper://127.0.0.1:2181 dubbo.metadata-report.username=xxx ##\u975e\u5fc5\u987b dubbo.metadata-report.password=xxx ##\u975e\u5fc5\u987b dubbo.metadata-report.retry-times=30 ##\u975e\u5fc5\u987b,default\u503c100 dubbo.metadata-report.retry-period=5000 ##\u975e\u5fc5\u987b,default\u503c3000 dubbo.metadata-report.cycle-report=false ##\u975e\u5fc5\u987b,default\u503ctrue \u5982\u679c\u5143\u6570\u636e\u5730\u5740(dubbo.metadata-report.address)\u4e5f\u4e0d\u8fdb\u884c\u914d\u7f6e\uff0c\u6574\u4e2a\u5143\u6570\u636e\u7684\u5199\u5165\u4e0d\u4f1a\u751f\u6548\uff0c\u4f46\u662f\u4e0d\u5f71\u54cd\u7a0b\u5e8f\u8fd0\u884c\u3002 \u63a5\u4e0b\u6765\u770b\u51e0\u4e2asample\u7684\u914d\u7f6e\u3002\u65e0\u8bba\u54ea\u79cd\u914d\u7f6e\u65b9\u5f0f\uff0c\u90fd\u9700\u8981\u5f15\u5165maven\u4f9d\u8d56\uff1a dependency groupId org.apache.dubbo /groupId artifactId dubbo-metadata-report-zookeeper /artifactId /dependency \u5982\u679c\u9700\u8981\u4f7f\u7528redis\uff0c\u53ef\u4ee5\u5f15\u5165\u5bf9\u5e94\u7684redis\u7684\u4f9d\u8d56\uff1a dependency groupId org.apache.dubbo /groupId artifactId dubbo-metadata-report-redis /artifactId /dependency \u5b8c\u6574\u7684sample\uff0c\u67e5\u770b sample-2.7","title":"\u5b8c\u6574\u7684\u914d\u7f6e\u9879\uff1a"},{"location":"user/references/metadata/introduction/#_7","text":"\u53c2\u8003sample\uff1adubbo-samples-metadata-report/dubbo-samples-metadata-report-configcenter \u5de5\u7a0b\u3002","title":"\u65b9\u5f0f\u4e00\uff1a\u5728\u914d\u7f6e\u4e2d\u5fc3\u914d\u7f6e"},{"location":"user/references/metadata/introduction/#_8","text":"\u914d\u7f6e\u4e2d\u5fc3\u7684\u914d\u7f6e\uff0c\u53ef\u4ee5\u53c2\u8003configcenter\u7684\u6587\u6863\u3002\u914d\u7f6e\u7684\u5185\u5bb9\u5982\u4e0b\uff1a dubbo.registry.address=zookeeper://127.0.0.1:2181 ### \u6ce8\u610f\u9a7c\u5cf0\u5f0f\u98ce\u683c dubbo.metadata-report.address=zookeeper://127.0.0.1:2181 ###\u5143\u6570\u636e\u5b58\u50a8\u7684\u5730\u5740 \u5728sample\u4e2d\uff0c\u4f7f\u7528\u4e86Zookeeper\u4f5c\u4e3a\u914d\u7f6e\u4e2d\u5fc3\u3002\u542f\u52a8\u672c\u5730zookeeper\u670d\u52a1\u4e4b\u540e\uff0c\u76f4\u63a5\u8fd0\u884c\uff1aorg.apache.dubbo.samples.metadatareport.configcenter.ZKTools \u5c31\u53ef\u4ee5\u5b8c\u6210\u5199\u5165\u3002 \u5982\u679c\u914d\u7f6e\u4e2d\u5fc3\u4f7f\u7528\u4e86nacos\uff0capollo\uff0c\u8fd9\u4e9b\u4ea7\u54c1\u672c\u8eab\u652f\u6301ops\u914d\u7f6e\u3002","title":"\u914d\u7f6e\u4e2d\u5fc3\u914d\u7f6e"},{"location":"user/references/metadata/introduction/#_9","text":"###dubbo.properties dubbo.config-center.address=zookeeper://127.0.0.1:2181 ... \u5b8c\u6210\u4e0a\u8ff0\u4e24\u6b65\u4e4b\u540e\uff0c\u6ce8\u518c\u4e2d\u5fc3\u5730\u5740\u3001\u5143\u6570\u636e\u5730\u5740\u5c06\u4ece\u914d\u7f6e\u4e2d\u5fc3\u8fdb\u884c\u83b7\u53d6\u3002\u73b0\u5728\u53ef\u4ee5\u4f9d\u6b21\u8fd0\u884cProvider\u7c7b\u548cConsumer\u7c7b\uff0c\u4f1a\u5728console\u4e2d\u5f97\u5230\u5bf9\u5e94\u7684\u8f93\u51fa\u6216\u8005\u76f4\u63a5\u901a\u8fc7zookeeper\u7684cli\u67e5\u770b\u3002","title":"\u5e94\u7528\u914d\u7f6e"},{"location":"user/references/metadata/introduction/#provider","text":"provider\u7aef\u5b58\u50a8\u7684\u5143\u6570\u636e\u5185\u5bb9\u5982\u4e0b\uff1a { parameters : { side : provider , methods : sayHello , dubbo : 2.0.2 , threads : 100 , interface : org.apache.dubbo.samples.metadatareport.configcenter.api.AnnotationService , threadpool : fixed , version : 1.1.1 , generic : false , revision : 1.1.1 , valid : true , application : metadatareport-configcenter-provider , default.timeout : 5000 , group : d-test , anyhost : true }, canonicalName : org.apache.dubbo.samples.metadatareport.configcenter.api.AnnotationService , codeSource : file:/Users/cvictory/workspace/work-mw/dubbo-samples/dubbo-samples-metadata-report/dubbo-samples-metadata-report-configcenter/target/classes/ , methods : [{ name : sayHello , parameterTypes : [ java.lang.String ], returnType : java.lang.String }], types : [{ type : java.lang.String , properties : { value : { type : char[] }, hash : { type : int } } }, { type : int }, { type : char }] } provider\u5b58\u50a8\u7684\u5185\u5bb9\u5305\u62ec\u4e86provider\u670d\u52a1\u5f80\u6ce8\u518c\u4e2d\u5fc3\u586b\u5199\u7684\u5168\u90e8\u53c2\u6570\uff0c\u4ee5\u53ca\u670d\u52a1\u7684\u65b9\u6cd5\u4fe1\u606f\uff08\u65b9\u6cd5\u540d\uff0c\u5165\u53c2\u51fa\u53c2\u7684\u683c\u5f0f\uff09\u3002","title":"Provider\u914d\u7f6e"},{"location":"user/references/metadata/introduction/#consumer","text":"{ valid : true , side : consumer , application : metadatareport-configcenter-consumer , methods : sayHello , default.timeout : 6666 , dubbo : 2.0.2 , interface : org.apache.dubbo.samples.metadatareport.configcenter.api.AnnotationService , version : 1.1.1 , revision : 1.1.1 , group : d-test } consumer\u7aef\u5b58\u50a8\u4e86consumer\u5f80\u6ce8\u518c\u4e2d\u5fc3\u586b\u5199\u7684\u5168\u90e8\u53c2\u6570\u3002 \u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u4e3b\u8981\u662f\u5c06\u5143\u6570\u636e\u5730\u5740\u653e\u5728\u914d\u7f6e\u4e2d\u5fc3\uff0c\u5728\u5143\u6570\u636e\u533a\u5b58\u50a8\u4e0b\u6765\u7684provider\u7aef\u670d\u52a1\u4fe1\u606f\u548cconsumer\u7aef\u670d\u52a1\u4fe1\u606f\u7684\u5c55\u793a\u3002 \u63a5\u4e0b\u6765\u7684\u4e24\u4e2a\u4f8b\u5b50\uff0c\u4e3b\u8981\u8bb2\u89e3\u5728\u5de5\u7a0b\u4e2d\u914d\u7f6e\uff1axml\u65b9\u5f0f\uff0cannotation\u65b9\u5f0f\u3002","title":"Consumer\u914d\u7f6e\uff1a"},{"location":"user/references/metadata/introduction/#-properties","text":"\u53c2\u8003sample\uff1adubbo-samples-metadata-report/dubbo-samples-metadata-report-local-xml\u5de5\u7a0b\u3002","title":"\u65b9\u5f0f\u4e8c\uff1a\u914d\u7f6e\u5728\u9879\u76ee\u4e2d-properties\u65b9\u5f0f\u5f15\u5165\u914d\u7f6e"},{"location":"user/references/metadata/introduction/#dubboproperties","text":"dubbo.metadata-report.address=zookeeper://127.0.0.1:2181 \u914d\u7f6e\u5b8c\u6210\u8fd9\u4e2a\u4e4b\u540e\uff0c\u5176\u4f59\u7684\u4e0d\u7528\u7279\u522b\u5173\u6ce8\u3002\u4e5f\u53ef\u4ee5\u76f4\u63a5\u67e5\u770b\u5bf9\u5e94\u7684provider\u548cconsumer\u7aef\u7684\u670d\u52a1\u4fe1\u606f\u3002","title":"dubbo.properties"},{"location":"user/references/metadata/introduction/#provider_1","text":"{ parameters : { valid : true , async : true , side : provider , application : metadatareport-local-xml-provider , methods : sayHello , dubbo : 2.0.2 , interface : org.apache.dubbo.samples.metadatareport.local.xml.api.DemoService , generic : false , anyhost : true }, canonicalName : org.apache.dubbo.samples.metadatareport.local.xml.api.DemoService , codeSource : file:/Users/cvictory/workspace/work-mw/dubbo-samples/dubbo-samples-metadata-report/dubbo-samples-metadata-report-local-xml/target/classes/ , methods : [{ name : sayHello , parameterTypes : [ java.lang.String ], returnType : java.lang.String }], types : [{ type : int }, { type : char }, { type : java.lang.String , properties : { value : { type : char[] }, hash : { type : int } } }] }","title":"provider\u5b58\u50a8\u7684\u67d0\u4e2a\u670d\u52a1\u7684\u5185\u5bb9\uff1a"},{"location":"user/references/metadata/introduction/#consumer_1","text":"{ valid : true , side : consumer , application : metadatareport-local-xml-consumer , methods : sayHello , dubbo : 2.0.2 , interface : org.apache.dubbo.samples.metadatareport.local.xml.api.DemoService }","title":"consumer\u7aef\u5b58\u50a8\u7684\u5185\u5bb9\uff1a"},{"location":"user/references/metadata/introduction/#-annotation","text":"\u53c2\u8003sample\uff1adubbo-samples-metadata-report/dubbo-samples-metadata-report-local-annotaion\u5de5\u7a0b\u3002","title":"\u65b9\u5f0f\u4e09\uff1a\u914d\u7f6e\u5728\u9879\u76ee\u4e2d-annotation\u65b9\u5f0f\u5f15\u5165\u914d\u7f6e"},{"location":"user/references/metadata/introduction/#bean-bean","text":"@Bean public MetadataReportConfig metadataReportConfig() { MetadataReportConfig metadataReportConfig = new MetadataReportConfig(); metadataReportConfig.setAddress( zookeeper://127.0.0.1:2181 ); return metadataReportConfig; } \u5f15\u5165Bean\u4e4b\u540e\uff0c\u5176\u4f59\u7684\u5730\u65b9\u4e5f\u4e0d\u9700\u8981\u7279\u522b\u914d\u7f6e\u3002\u76f4\u63a5\u67e5\u770b\u5bf9\u5e94\u7684\u670d\u52a1\u4fe1\u606f\uff1a","title":"@Bean \u5f15\u5165bean"},{"location":"user/references/metadata/introduction/#provider_2","text":"{ parameters : { side : provider , methods : sayHello , dubbo : 2.0.2 , interface : org.apache.dubbo.samples.metadatareport.local.annotation.api.AnnotationService , version : 1.1.8 , generic : false , revision : 1.1.8 , valid : true , application : metadatareport-local-annotaion-provider , default.timeout : 1000 , group : d-test , anyhost : true }, canonicalName : org.apache.dubbo.samples.metadatareport.local.annotation.api.AnnotationService , codeSource : file:/Users/cvictory/workspace/work-mw/dubbo-samples/dubbo-samples-metadata-report/dubbo-samples-metadata-report-local-annotaion/target/classes/ , methods : [{ name : sayHello , parameterTypes : [ java.lang.String ], returnType : java.lang.String }], types : [{ type : int }, { type : java.lang.String , properties : { value : { type : char[] }, hash : { type : int } } }, { type : char }] }","title":"provider\u5b58\u50a8\u7684\u67d0\u4e2a\u670d\u52a1\u7684\u5185\u5bb9\uff1a"},{"location":"user/references/metadata/introduction/#consumer_2","text":"{ valid : true , side : consumer , application : metadatareport-local-annotaion-consumer , methods : sayHello , dubbo : 2.0.2 , interface : org.apache.dubbo.samples.metadatareport.local.annotation.api.AnnotationService , version : 1.1.8 , revision : 1.1.8 , group : d-test }","title":"consumer\u7aef\u5b58\u50a8\u7684\u5185\u5bb9\uff1a"},{"location":"user/references/metadata/introduction/#_10","text":"","title":"\u6269\u5c55"},{"location":"user/references/metadata/introduction/#spi","text":"\u53c2\u8003\uff1aorg.apache.dubbo.metadata.store.MetadataReportFactory \uff0c org.apache.dubbo.metadata.store.MetadataReport @SPI( redis ) public interface MetadataReportFactory { @Adaptive({ protocol }) MetadataReport getMetadataReport(URL url); }","title":"SPI\u5b9a\u4e49"},{"location":"user/references/metadata/introduction/#_11","text":"\u4e0b\u9762\u4ee5Redis\u5b58\u50a8\u4e3a\u4f8b\u8fdb\u884c\u8bf4\u660e\u3002 \u65b0\u5efa\u4e00\u4e2aproject\uff0c\u9700\u8981\u652f\u6301\u4ee5\u4e0b\u4fee\u6539\uff1a","title":"\u81ea\u5b9a\u4e49\u5143\u6570\u636e\u7684\u5b58\u50a8"},{"location":"user/references/metadata/introduction/#abstractmetadatareport","text":"public class RedisMetadataReport extends AbstractMetadataReport { private final static Logger logger = LoggerFactory.getLogger(RedisMetadataReport.class); final JedisPool pool; public RedisMetadataReport(URL url) { super(url); pool = new JedisPool(new JedisPoolConfig(), url.getHost(), url.getPort()); } @Override protected void doStoreProviderMetadata(ProviderMetadataIdentifier providerMetadataIdentifier, String serviceDefinitions) { this.storeMetadata(providerMetadataIdentifier, serviceDefinitions); } @Override protected void doStoreConsumerMetadata(ConsumerMetadataIdentifier consumerMetadataIdentifier, String value) { this.storeMetadata(consumerMetadataIdentifier, value); } private void storeMetadata(MetadataIdentifier metadataIdentifier, String v) { try (Jedis jedis = pool.getResource()) { jedis.set(metadataIdentifier.getIdentifierKey() + META_DATA_SOTRE_TAG, v); } catch (Throwable e) { logger.error( Failed to put + metadataIdentifier + to redis + v + , cause: + e.getMessage(), e); throw new RpcException( Failed to put + metadataIdentifier + to redis + v + , cause: + e.getMessage(), e); } } }","title":"\u6269\u5c55AbstractMetadataReport"},{"location":"user/references/metadata/introduction/#abstractmetadatareportfactory","text":"public class RedisMetadataReportFactory extends AbstractMetadataReportFactory { @Override public MetadataReport createMetadataReport(URL url) { return new RedisMetadataReport(url); } }","title":"\u6269\u5c55AbstractMetadataReportFactory"},{"location":"user/references/metadata/introduction/#meta-infdubbointernalorgapachedubbometadatastoremetadatareportfactory","text":"redis=org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory \u53ea\u8981\u5c06\u4e0a\u9762\u7684\u4fee\u6539\u548cproject\u6253\u5305\u6210jar\u5305\uff0c\u7136\u540e\u914d\u7f6e\u5143\u6570\u636e\u4e2d\u5fc3\u7684url\uff1aredis://10.20.153.10:6379\u3002 \u81f3\u6b64\uff0c\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u5143\u6570\u636e\u5b58\u50a8\u5c31\u53ef\u4ee5\u8fd0\u884c\u4e86\u3002","title":"\u589e\u52a0META-INF/dubbo/internal/org.apache.dubbo.metadata.store.MetadataReportFactory"},{"location":"user/references/metadata/metadata-redis/","text":"\u6301\u7eed\u66f4\u65b0\u4e2d","title":"Redis \u5143\u6570\u636e\u4e2d\u5fc3"},{"location":"user/references/metadata/metadata-redis/#_1","text":"","title":"\u6301\u7eed\u66f4\u65b0\u4e2d"},{"location":"user/references/metadata/metadata-zookeeper/","text":"\u6301\u7eed\u66f4\u65b0\u4e2d","title":"Zookeeper \u5143\u6570\u636e\u4e2d\u5fc3"},{"location":"user/references/metadata/metadata-zookeeper/#_1","text":"","title":"\u6301\u7eed\u66f4\u65b0\u4e2d"},{"location":"user/references/protocol/dubbo/","text":"dubbo:// Dubbo \u7f3a\u7701\u534f\u8bae\u91c7\u7528\u5355\u4e00\u957f\u8fde\u63a5\u548c NIO \u5f02\u6b65\u901a\u8baf\uff0c\u9002\u5408\u4e8e\u5c0f\u6570\u636e\u91cf\u5927\u5e76\u53d1\u7684\u670d\u52a1\u8c03\u7528\uff0c\u4ee5\u53ca\u670d\u52a1\u6d88\u8d39\u8005\u673a\u5668\u6570\u8fdc\u5927\u4e8e\u670d\u52a1\u63d0\u4f9b\u8005\u673a\u5668\u6570\u7684\u60c5\u51b5\u3002 \u53cd\u4e4b\uff0cDubbo \u7f3a\u7701\u534f\u8bae\u4e0d\u9002\u5408\u4f20\u9001\u5927\u6570\u636e\u91cf\u7684\u670d\u52a1\uff0c\u6bd4\u5982\u4f20\u6587\u4ef6\uff0c\u4f20\u89c6\u9891\u7b49\uff0c\u9664\u975e\u8bf7\u6c42\u91cf\u5f88\u4f4e\u3002 Transporter: mina, netty, grizzy Serialization: dubbo, hessian2, java, json Dispatcher: all, direct, message, execution, connection ThreadPool: fixed, cached \u7279\u6027 \u7f3a\u7701\u534f\u8bae\uff0c\u4f7f\u7528\u57fa\u4e8e mina 1.1.7 \u548c hessian 3.2.1 \u7684 tbremoting \u4ea4\u4e92\u3002 \u8fde\u63a5\u4e2a\u6570\uff1a\u5355\u8fde\u63a5 \u8fde\u63a5\u65b9\u5f0f\uff1a\u957f\u8fde\u63a5 \u4f20\u8f93\u534f\u8bae\uff1aTCP \u4f20\u8f93\u65b9\u5f0f\uff1aNIO \u5f02\u6b65\u4f20\u8f93 \u5e8f\u5217\u5316\uff1aHessian \u4e8c\u8fdb\u5236\u5e8f\u5217\u5316 \u9002\u7528\u8303\u56f4\uff1a\u4f20\u5165\u4f20\u51fa\u53c2\u6570\u6570\u636e\u5305\u8f83\u5c0f\uff08\u5efa\u8bae\u5c0f\u4e8e100K\uff09\uff0c\u6d88\u8d39\u8005\u6bd4\u63d0\u4f9b\u8005\u4e2a\u6570\u591a\uff0c\u5355\u4e00\u6d88\u8d39\u8005\u65e0\u6cd5\u538b\u6ee1\u63d0\u4f9b\u8005\uff0c\u5c3d\u91cf\u4e0d\u8981\u7528 dubbo \u534f\u8bae\u4f20\u8f93\u5927\u6587\u4ef6\u6216\u8d85\u5927\u5b57\u7b26\u4e32\u3002 \u9002\u7528\u573a\u666f\uff1a\u5e38\u89c4\u8fdc\u7a0b\u670d\u52a1\u65b9\u6cd5\u8c03\u7528 \u7ea6\u675f \u53c2\u6570\u53ca\u8fd4\u56de\u503c\u9700\u5b9e\u73b0 Serializable \u63a5\u53e3 \u53c2\u6570\u53ca\u8fd4\u56de\u503c\u4e0d\u80fd\u81ea\u5b9a\u4e49\u5b9e\u73b0 List , Map , Number , Date , Calendar \u7b49\u63a5\u53e3\uff0c\u53ea\u80fd\u7528 JDK \u81ea\u5e26\u7684\u5b9e\u73b0\uff0c\u56e0\u4e3a hessian \u4f1a\u505a\u7279\u6b8a\u5904\u7406\uff0c\u81ea\u5b9a\u4e49\u5b9e\u73b0\u7c7b\u4e2d\u7684\u5c5e\u6027\u503c\u90fd\u4f1a\u4e22\u5931\u3002 Hessian \u5e8f\u5217\u5316\uff0c\u53ea\u4f20\u6210\u5458\u5c5e\u6027\u503c\u548c\u503c\u7684\u7c7b\u578b\uff0c\u4e0d\u4f20\u65b9\u6cd5\u6216\u9759\u6001\u53d8\u91cf\uff0c\u517c\u5bb9\u60c5\u51b5 ^1 \uff1a \u6570\u636e\u901a\u8baf \u60c5\u51b5 \u7ed3\u679c A- B \u7c7bA\u591a\u4e00\u79cd \u5c5e\u6027\uff08\u6216\u8005\u8bf4\u7c7bB\u5c11\u4e00\u79cd \u5c5e\u6027\uff09 \u4e0d\u629b\u5f02\u5e38\uff0cA\u591a\u7684\u90a3 \u4e2a\u5c5e\u6027\u7684\u503c\uff0cB\u6ca1\u6709\uff0c \u5176\u4ed6\u6b63\u5e38 A- B \u679a\u4e3eA\u591a\u4e00\u79cd \u679a\u4e3e\uff08\u6216\u8005\u8bf4B\u5c11\u4e00\u79cd \u679a\u4e3e\uff09\uff0cA\u4f7f\u7528\u591a \u51fa\u6765\u7684\u679a\u4e3e\u8fdb\u884c\u4f20\u8f93 \u629b\u5f02\u5e38 A- B \u679a\u4e3eA\u591a\u4e00\u79cd \u679a\u4e3e\uff08\u6216\u8005\u8bf4B\u5c11\u4e00\u79cd \u679a\u4e3e\uff09\uff0cA\u4e0d\u4f7f\u7528 \u591a\u51fa\u6765\u7684\u679a\u4e3e\u8fdb\u884c\u4f20\u8f93 \u4e0d\u629b\u5f02\u5e38\uff0cB\u6b63\u5e38\u63a5 \u6536\u6570\u636e A- B A\u548cB\u7684\u5c5e\u6027 \u540d\u76f8\u540c\uff0c\u4f46\u7c7b\u578b\u4e0d\u76f8\u540c \u629b\u5f02\u5e38 A- B serialId \u4e0d\u76f8\u540c \u6b63\u5e38\u4f20\u8f93 \u63a5\u53e3\u589e\u52a0\u65b9\u6cd5\uff0c\u5bf9\u5ba2\u6237\u7aef\u65e0\u5f71\u54cd\uff0c\u5982\u679c\u8be5\u65b9\u6cd5\u4e0d\u662f\u5ba2\u6237\u7aef\u9700\u8981\u7684\uff0c\u5ba2\u6237\u7aef\u4e0d\u9700\u8981\u91cd\u65b0\u90e8\u7f72\u3002\u8f93\u5165\u53c2\u6570\u548c\u7ed3\u679c\u96c6\u4e2d\u589e\u52a0\u5c5e\u6027\uff0c\u5bf9\u5ba2\u6237\u7aef\u65e0\u5f71\u54cd\uff0c\u5982\u679c\u5ba2\u6237\u7aef\u5e76\u4e0d\u9700\u8981\u65b0\u5c5e\u6027\uff0c\u4e0d\u7528\u91cd\u65b0\u90e8\u7f72\u3002 \u8f93\u5165\u53c2\u6570\u548c\u7ed3\u679c\u96c6\u5c5e\u6027\u540d\u53d8\u5316\uff0c\u5bf9\u5ba2\u6237\u7aef\u5e8f\u5217\u5316\u65e0\u5f71\u54cd\uff0c\u4f46\u662f\u5982\u679c\u5ba2\u6237\u7aef\u4e0d\u91cd\u65b0\u90e8\u7f72\uff0c\u4e0d\u7ba1\u8f93\u5165\u8fd8\u662f\u8f93\u51fa\uff0c\u5c5e\u6027\u540d\u53d8\u5316\u7684\u5c5e\u6027\u503c\u662f\u83b7\u53d6\u4e0d\u5230\u7684\u3002 \u603b\u7ed3\uff1a\u670d\u52a1\u5668\u7aef\u548c\u5ba2\u6237\u7aef\u5bf9\u9886\u57df\u5bf9\u8c61\u5e76\u4e0d\u9700\u8981\u5b8c\u5168\u4e00\u81f4\uff0c\u800c\u662f\u6309\u7167\u6700\u5927\u5339\u914d\u539f\u5219\u3002 \u914d\u7f6e \u914d\u7f6e\u534f\u8bae\uff1a dubbo:protocol name= dubbo port= 20880 / \u8bbe\u7f6e\u9ed8\u8ba4\u534f\u8bae\uff1a dubbo:provider protocol= dubbo / \u8bbe\u7f6e\u670d\u52a1\u534f\u8bae\uff1a dubbo:service protocol= dubbo / \u591a\u7aef\u53e3\uff1a dubbo:protocol id= dubbo1 name= dubbo port= 20880 / dubbo:protocol id= dubbo2 name= dubbo port= 20881 / \u914d\u7f6e\u534f\u8bae\u9009\u9879\uff1a dubbo:protocol name=\u201cdubbo\u201d port=\u201c9090\u201d server=\u201cnetty\u201d client=\u201cnetty\u201d codec=\u201cdubbo\u201d serialization=\u201chessian2\u201d charset=\u201cUTF-8\u201d threadpool=\u201cfixed\u201d threads=\u201c100\u201d queues=\u201c0\u201d iothreads=\u201c9\u201d buffer=\u201c8192\u201d accepts=\u201c1000\u201d payload=\u201c8388608\u201d / \u591a\u8fde\u63a5\u914d\u7f6e\uff1a Dubbo \u534f\u8bae\u7f3a\u7701\u6bcf\u670d\u52a1\u6bcf\u63d0\u4f9b\u8005\u6bcf\u6d88\u8d39\u8005\u4f7f\u7528\u5355\u4e00\u957f\u8fde\u63a5\uff0c\u5982\u679c\u6570\u636e\u91cf\u8f83\u5927\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u8fde\u63a5\u3002 dubbo:service connections= 1 / dubbo:reference connections= 1 / dubbo:service connections=\"0\" \u6216 dubbo:reference connections=\"0\" \u8868\u793a\u8be5\u670d\u52a1\u4f7f\u7528 JVM \u5171\u4eab\u957f\u8fde\u63a5\u3002 \u7f3a\u7701 dubbo:service connections=\"1\" \u6216 dubbo:reference connections=\"1\" \u8868\u793a\u8be5\u670d\u52a1\u4f7f\u7528\u72ec\u7acb\u957f\u8fde\u63a5\u3002 dubbo:service connections=\"2\" \u6216 dubbo:reference connections=\"2\" \u8868\u793a\u8be5\u670d\u52a1\u4f7f\u7528\u72ec\u7acb\u4e24\u6761\u957f\u8fde\u63a5\u3002 \u4e3a\u9632\u6b62\u88ab\u5927\u91cf\u8fde\u63a5\u6491\u6302\uff0c\u53ef\u5728\u670d\u52a1\u63d0\u4f9b\u65b9\u9650\u5236\u5927\u63a5\u6536\u8fde\u63a5\u6570\uff0c\u4ee5\u5b9e\u73b0\u670d\u52a1\u63d0\u4f9b\u65b9\u81ea\u6211\u4fdd\u62a4\u3002 dubbo:protocol name= dubbo accepts= 1000 / dubbo.properties \u914d\u7f6e\uff1a dubbo.service.protocol=dubbo \u5e38\u89c1\u95ee\u9898 \u4e3a\u4ec0\u4e48\u8981\u6d88\u8d39\u8005\u6bd4\u63d0\u4f9b\u8005\u4e2a\u6570\u591a? \u56e0 dubbo \u534f\u8bae\u91c7\u7528\u5355\u4e00\u957f\u8fde\u63a5\uff0c\u5047\u8bbe\u7f51\u7edc\u4e3a\u5343\u5146\u7f51\u5361 ^3 \uff0c\u6839\u636e\u6d4b\u8bd5\u7ecf\u9a8c\u6570\u636e\u6bcf\u6761\u8fde\u63a5\u6700\u591a\u53ea\u80fd\u538b\u6ee1 7MByte(\u4e0d\u540c\u7684\u73af\u5883\u53ef\u80fd\u4e0d\u4e00\u6837\uff0c\u4f9b\u53c2\u8003)\uff0c\u7406\u8bba\u4e0a 1 \u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u9700\u8981 20 \u4e2a\u670d\u52a1\u6d88\u8d39\u8005\u624d\u80fd\u538b\u6ee1\u7f51\u5361\u3002 \u4e3a\u4ec0\u4e48\u4e0d\u80fd\u4f20\u5927\u5305? \u56e0 dubbo \u534f\u8bae\u91c7\u7528\u5355\u4e00\u957f\u8fde\u63a5\uff0c\u5982\u679c\u6bcf\u6b21\u8bf7\u6c42\u7684\u6570\u636e\u5305\u5927\u5c0f\u4e3a 500KByte\uff0c\u5047\u8bbe\u7f51\u7edc\u4e3a\u5343\u5146\u7f51\u5361 ^3 \uff0c\u6bcf\u6761\u8fde\u63a5\u6700\u5927 7MByte(\u4e0d\u540c\u7684\u73af\u5883\u53ef\u80fd\u4e0d\u4e00\u6837\uff0c\u4f9b\u53c2\u8003)\uff0c\u5355\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u7684 TPS(\u6bcf\u79d2\u5904\u7406\u4e8b\u52a1\u6570)\u6700\u5927\u4e3a\uff1a128MByte / 500KByte = 262\u3002\u5355\u4e2a\u6d88\u8d39\u8005\u8c03\u7528\u5355\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u7684 TPS(\u6bcf\u79d2\u5904\u7406\u4e8b\u52a1\u6570)\u6700\u5927\u4e3a\uff1a7MByte / 500KByte = 14\u3002\u5982\u679c\u80fd\u63a5\u53d7\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\uff0c\u5426\u5219\u7f51\u7edc\u5c06\u6210\u4e3a\u74f6\u9888\u3002 \u4e3a\u4ec0\u4e48\u91c7\u7528\u5f02\u6b65\u5355\u4e00\u957f\u8fde\u63a5? \u56e0\u4e3a\u670d\u52a1\u7684\u73b0\u72b6\u5927\u90fd\u662f\u670d\u52a1\u63d0\u4f9b\u8005\u5c11\uff0c\u901a\u5e38\u53ea\u6709\u51e0\u53f0\u673a\u5668\uff0c\u800c\u670d\u52a1\u7684\u6d88\u8d39\u8005\u591a\uff0c\u53ef\u80fd\u6574\u4e2a\u7f51\u7ad9\u90fd\u5728\u8bbf\u95ee\u8be5\u670d\u52a1\uff0c\u6bd4\u5982 Morgan \u7684\u63d0\u4f9b\u8005\u53ea\u6709 6 \u53f0\u63d0\u4f9b\u8005\uff0c\u5374\u6709\u4e0a\u767e\u53f0\u6d88\u8d39\u8005\uff0c\u6bcf\u5929\u6709 1.5 \u4ebf\u6b21\u8c03\u7528\uff0c\u5982\u679c\u91c7\u7528\u5e38\u89c4\u7684 hessian \u670d\u52a1\uff0c\u670d\u52a1\u63d0\u4f9b\u8005\u5f88\u5bb9\u6613\u5c31\u88ab\u538b\u8de8\uff0c\u901a\u8fc7\u5355\u4e00\u8fde\u63a5\uff0c\u4fdd\u8bc1\u5355\u4e00\u6d88\u8d39\u8005\u4e0d\u4f1a\u538b\u6b7b\u63d0\u4f9b\u8005\uff0c\u957f\u8fde\u63a5\uff0c\u51cf\u5c11\u8fde\u63a5\u63e1\u624b\u9a8c\u8bc1\u7b49\uff0c\u5e76\u4f7f\u7528\u5f02\u6b65 IO\uff0c\u590d\u7528\u7ebf\u7a0b\u6c60\uff0c\u9632\u6b62 C10K \u95ee\u9898\u3002","title":"dubbo://"},{"location":"user/references/protocol/dubbo/#dubbo","text":"Dubbo \u7f3a\u7701\u534f\u8bae\u91c7\u7528\u5355\u4e00\u957f\u8fde\u63a5\u548c NIO \u5f02\u6b65\u901a\u8baf\uff0c\u9002\u5408\u4e8e\u5c0f\u6570\u636e\u91cf\u5927\u5e76\u53d1\u7684\u670d\u52a1\u8c03\u7528\uff0c\u4ee5\u53ca\u670d\u52a1\u6d88\u8d39\u8005\u673a\u5668\u6570\u8fdc\u5927\u4e8e\u670d\u52a1\u63d0\u4f9b\u8005\u673a\u5668\u6570\u7684\u60c5\u51b5\u3002 \u53cd\u4e4b\uff0cDubbo \u7f3a\u7701\u534f\u8bae\u4e0d\u9002\u5408\u4f20\u9001\u5927\u6570\u636e\u91cf\u7684\u670d\u52a1\uff0c\u6bd4\u5982\u4f20\u6587\u4ef6\uff0c\u4f20\u89c6\u9891\u7b49\uff0c\u9664\u975e\u8bf7\u6c42\u91cf\u5f88\u4f4e\u3002 Transporter: mina, netty, grizzy Serialization: dubbo, hessian2, java, json Dispatcher: all, direct, message, execution, connection ThreadPool: fixed, cached","title":"dubbo://"},{"location":"user/references/protocol/dubbo/#_1","text":"\u7f3a\u7701\u534f\u8bae\uff0c\u4f7f\u7528\u57fa\u4e8e mina 1.1.7 \u548c hessian 3.2.1 \u7684 tbremoting \u4ea4\u4e92\u3002 \u8fde\u63a5\u4e2a\u6570\uff1a\u5355\u8fde\u63a5 \u8fde\u63a5\u65b9\u5f0f\uff1a\u957f\u8fde\u63a5 \u4f20\u8f93\u534f\u8bae\uff1aTCP \u4f20\u8f93\u65b9\u5f0f\uff1aNIO \u5f02\u6b65\u4f20\u8f93 \u5e8f\u5217\u5316\uff1aHessian \u4e8c\u8fdb\u5236\u5e8f\u5217\u5316 \u9002\u7528\u8303\u56f4\uff1a\u4f20\u5165\u4f20\u51fa\u53c2\u6570\u6570\u636e\u5305\u8f83\u5c0f\uff08\u5efa\u8bae\u5c0f\u4e8e100K\uff09\uff0c\u6d88\u8d39\u8005\u6bd4\u63d0\u4f9b\u8005\u4e2a\u6570\u591a\uff0c\u5355\u4e00\u6d88\u8d39\u8005\u65e0\u6cd5\u538b\u6ee1\u63d0\u4f9b\u8005\uff0c\u5c3d\u91cf\u4e0d\u8981\u7528 dubbo \u534f\u8bae\u4f20\u8f93\u5927\u6587\u4ef6\u6216\u8d85\u5927\u5b57\u7b26\u4e32\u3002 \u9002\u7528\u573a\u666f\uff1a\u5e38\u89c4\u8fdc\u7a0b\u670d\u52a1\u65b9\u6cd5\u8c03\u7528","title":"\u7279\u6027"},{"location":"user/references/protocol/dubbo/#_2","text":"\u53c2\u6570\u53ca\u8fd4\u56de\u503c\u9700\u5b9e\u73b0 Serializable \u63a5\u53e3 \u53c2\u6570\u53ca\u8fd4\u56de\u503c\u4e0d\u80fd\u81ea\u5b9a\u4e49\u5b9e\u73b0 List , Map , Number , Date , Calendar \u7b49\u63a5\u53e3\uff0c\u53ea\u80fd\u7528 JDK \u81ea\u5e26\u7684\u5b9e\u73b0\uff0c\u56e0\u4e3a hessian \u4f1a\u505a\u7279\u6b8a\u5904\u7406\uff0c\u81ea\u5b9a\u4e49\u5b9e\u73b0\u7c7b\u4e2d\u7684\u5c5e\u6027\u503c\u90fd\u4f1a\u4e22\u5931\u3002 Hessian \u5e8f\u5217\u5316\uff0c\u53ea\u4f20\u6210\u5458\u5c5e\u6027\u503c\u548c\u503c\u7684\u7c7b\u578b\uff0c\u4e0d\u4f20\u65b9\u6cd5\u6216\u9759\u6001\u53d8\u91cf\uff0c\u517c\u5bb9\u60c5\u51b5 ^1 \uff1a \u6570\u636e\u901a\u8baf \u60c5\u51b5 \u7ed3\u679c A- B \u7c7bA\u591a\u4e00\u79cd \u5c5e\u6027\uff08\u6216\u8005\u8bf4\u7c7bB\u5c11\u4e00\u79cd \u5c5e\u6027\uff09 \u4e0d\u629b\u5f02\u5e38\uff0cA\u591a\u7684\u90a3 \u4e2a\u5c5e\u6027\u7684\u503c\uff0cB\u6ca1\u6709\uff0c \u5176\u4ed6\u6b63\u5e38 A- B \u679a\u4e3eA\u591a\u4e00\u79cd \u679a\u4e3e\uff08\u6216\u8005\u8bf4B\u5c11\u4e00\u79cd \u679a\u4e3e\uff09\uff0cA\u4f7f\u7528\u591a \u51fa\u6765\u7684\u679a\u4e3e\u8fdb\u884c\u4f20\u8f93 \u629b\u5f02\u5e38 A- B \u679a\u4e3eA\u591a\u4e00\u79cd \u679a\u4e3e\uff08\u6216\u8005\u8bf4B\u5c11\u4e00\u79cd \u679a\u4e3e\uff09\uff0cA\u4e0d\u4f7f\u7528 \u591a\u51fa\u6765\u7684\u679a\u4e3e\u8fdb\u884c\u4f20\u8f93 \u4e0d\u629b\u5f02\u5e38\uff0cB\u6b63\u5e38\u63a5 \u6536\u6570\u636e A- B A\u548cB\u7684\u5c5e\u6027 \u540d\u76f8\u540c\uff0c\u4f46\u7c7b\u578b\u4e0d\u76f8\u540c \u629b\u5f02\u5e38 A- B serialId \u4e0d\u76f8\u540c \u6b63\u5e38\u4f20\u8f93 \u63a5\u53e3\u589e\u52a0\u65b9\u6cd5\uff0c\u5bf9\u5ba2\u6237\u7aef\u65e0\u5f71\u54cd\uff0c\u5982\u679c\u8be5\u65b9\u6cd5\u4e0d\u662f\u5ba2\u6237\u7aef\u9700\u8981\u7684\uff0c\u5ba2\u6237\u7aef\u4e0d\u9700\u8981\u91cd\u65b0\u90e8\u7f72\u3002\u8f93\u5165\u53c2\u6570\u548c\u7ed3\u679c\u96c6\u4e2d\u589e\u52a0\u5c5e\u6027\uff0c\u5bf9\u5ba2\u6237\u7aef\u65e0\u5f71\u54cd\uff0c\u5982\u679c\u5ba2\u6237\u7aef\u5e76\u4e0d\u9700\u8981\u65b0\u5c5e\u6027\uff0c\u4e0d\u7528\u91cd\u65b0\u90e8\u7f72\u3002 \u8f93\u5165\u53c2\u6570\u548c\u7ed3\u679c\u96c6\u5c5e\u6027\u540d\u53d8\u5316\uff0c\u5bf9\u5ba2\u6237\u7aef\u5e8f\u5217\u5316\u65e0\u5f71\u54cd\uff0c\u4f46\u662f\u5982\u679c\u5ba2\u6237\u7aef\u4e0d\u91cd\u65b0\u90e8\u7f72\uff0c\u4e0d\u7ba1\u8f93\u5165\u8fd8\u662f\u8f93\u51fa\uff0c\u5c5e\u6027\u540d\u53d8\u5316\u7684\u5c5e\u6027\u503c\u662f\u83b7\u53d6\u4e0d\u5230\u7684\u3002 \u603b\u7ed3\uff1a\u670d\u52a1\u5668\u7aef\u548c\u5ba2\u6237\u7aef\u5bf9\u9886\u57df\u5bf9\u8c61\u5e76\u4e0d\u9700\u8981\u5b8c\u5168\u4e00\u81f4\uff0c\u800c\u662f\u6309\u7167\u6700\u5927\u5339\u914d\u539f\u5219\u3002","title":"\u7ea6\u675f"},{"location":"user/references/protocol/dubbo/#_3","text":"\u914d\u7f6e\u534f\u8bae\uff1a dubbo:protocol name= dubbo port= 20880 / \u8bbe\u7f6e\u9ed8\u8ba4\u534f\u8bae\uff1a dubbo:provider protocol= dubbo / \u8bbe\u7f6e\u670d\u52a1\u534f\u8bae\uff1a dubbo:service protocol= dubbo / \u591a\u7aef\u53e3\uff1a dubbo:protocol id= dubbo1 name= dubbo port= 20880 / dubbo:protocol id= dubbo2 name= dubbo port= 20881 / \u914d\u7f6e\u534f\u8bae\u9009\u9879\uff1a dubbo:protocol name=\u201cdubbo\u201d port=\u201c9090\u201d server=\u201cnetty\u201d client=\u201cnetty\u201d codec=\u201cdubbo\u201d serialization=\u201chessian2\u201d charset=\u201cUTF-8\u201d threadpool=\u201cfixed\u201d threads=\u201c100\u201d queues=\u201c0\u201d iothreads=\u201c9\u201d buffer=\u201c8192\u201d accepts=\u201c1000\u201d payload=\u201c8388608\u201d / \u591a\u8fde\u63a5\u914d\u7f6e\uff1a Dubbo \u534f\u8bae\u7f3a\u7701\u6bcf\u670d\u52a1\u6bcf\u63d0\u4f9b\u8005\u6bcf\u6d88\u8d39\u8005\u4f7f\u7528\u5355\u4e00\u957f\u8fde\u63a5\uff0c\u5982\u679c\u6570\u636e\u91cf\u8f83\u5927\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u8fde\u63a5\u3002 dubbo:service connections= 1 / dubbo:reference connections= 1 / dubbo:service connections=\"0\" \u6216 dubbo:reference connections=\"0\" \u8868\u793a\u8be5\u670d\u52a1\u4f7f\u7528 JVM \u5171\u4eab\u957f\u8fde\u63a5\u3002 \u7f3a\u7701 dubbo:service connections=\"1\" \u6216 dubbo:reference connections=\"1\" \u8868\u793a\u8be5\u670d\u52a1\u4f7f\u7528\u72ec\u7acb\u957f\u8fde\u63a5\u3002 dubbo:service connections=\"2\" \u6216 dubbo:reference connections=\"2\" \u8868\u793a\u8be5\u670d\u52a1\u4f7f\u7528\u72ec\u7acb\u4e24\u6761\u957f\u8fde\u63a5\u3002 \u4e3a\u9632\u6b62\u88ab\u5927\u91cf\u8fde\u63a5\u6491\u6302\uff0c\u53ef\u5728\u670d\u52a1\u63d0\u4f9b\u65b9\u9650\u5236\u5927\u63a5\u6536\u8fde\u63a5\u6570\uff0c\u4ee5\u5b9e\u73b0\u670d\u52a1\u63d0\u4f9b\u65b9\u81ea\u6211\u4fdd\u62a4\u3002 dubbo:protocol name= dubbo accepts= 1000 / dubbo.properties \u914d\u7f6e\uff1a dubbo.service.protocol=dubbo","title":"\u914d\u7f6e"},{"location":"user/references/protocol/dubbo/#_4","text":"","title":"\u5e38\u89c1\u95ee\u9898"},{"location":"user/references/protocol/dubbo/#_5","text":"\u56e0 dubbo \u534f\u8bae\u91c7\u7528\u5355\u4e00\u957f\u8fde\u63a5\uff0c\u5047\u8bbe\u7f51\u7edc\u4e3a\u5343\u5146\u7f51\u5361 ^3 \uff0c\u6839\u636e\u6d4b\u8bd5\u7ecf\u9a8c\u6570\u636e\u6bcf\u6761\u8fde\u63a5\u6700\u591a\u53ea\u80fd\u538b\u6ee1 7MByte(\u4e0d\u540c\u7684\u73af\u5883\u53ef\u80fd\u4e0d\u4e00\u6837\uff0c\u4f9b\u53c2\u8003)\uff0c\u7406\u8bba\u4e0a 1 \u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u9700\u8981 20 \u4e2a\u670d\u52a1\u6d88\u8d39\u8005\u624d\u80fd\u538b\u6ee1\u7f51\u5361\u3002","title":"\u4e3a\u4ec0\u4e48\u8981\u6d88\u8d39\u8005\u6bd4\u63d0\u4f9b\u8005\u4e2a\u6570\u591a?"},{"location":"user/references/protocol/dubbo/#_6","text":"\u56e0 dubbo \u534f\u8bae\u91c7\u7528\u5355\u4e00\u957f\u8fde\u63a5\uff0c\u5982\u679c\u6bcf\u6b21\u8bf7\u6c42\u7684\u6570\u636e\u5305\u5927\u5c0f\u4e3a 500KByte\uff0c\u5047\u8bbe\u7f51\u7edc\u4e3a\u5343\u5146\u7f51\u5361 ^3 \uff0c\u6bcf\u6761\u8fde\u63a5\u6700\u5927 7MByte(\u4e0d\u540c\u7684\u73af\u5883\u53ef\u80fd\u4e0d\u4e00\u6837\uff0c\u4f9b\u53c2\u8003)\uff0c\u5355\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u7684 TPS(\u6bcf\u79d2\u5904\u7406\u4e8b\u52a1\u6570)\u6700\u5927\u4e3a\uff1a128MByte / 500KByte = 262\u3002\u5355\u4e2a\u6d88\u8d39\u8005\u8c03\u7528\u5355\u4e2a\u670d\u52a1\u63d0\u4f9b\u8005\u7684 TPS(\u6bcf\u79d2\u5904\u7406\u4e8b\u52a1\u6570)\u6700\u5927\u4e3a\uff1a7MByte / 500KByte = 14\u3002\u5982\u679c\u80fd\u63a5\u53d7\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\uff0c\u5426\u5219\u7f51\u7edc\u5c06\u6210\u4e3a\u74f6\u9888\u3002","title":"\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u4f20\u5927\u5305?"},{"location":"user/references/protocol/dubbo/#_7","text":"\u56e0\u4e3a\u670d\u52a1\u7684\u73b0\u72b6\u5927\u90fd\u662f\u670d\u52a1\u63d0\u4f9b\u8005\u5c11\uff0c\u901a\u5e38\u53ea\u6709\u51e0\u53f0\u673a\u5668\uff0c\u800c\u670d\u52a1\u7684\u6d88\u8d39\u8005\u591a\uff0c\u53ef\u80fd\u6574\u4e2a\u7f51\u7ad9\u90fd\u5728\u8bbf\u95ee\u8be5\u670d\u52a1\uff0c\u6bd4\u5982 Morgan \u7684\u63d0\u4f9b\u8005\u53ea\u6709 6 \u53f0\u63d0\u4f9b\u8005\uff0c\u5374\u6709\u4e0a\u767e\u53f0\u6d88\u8d39\u8005\uff0c\u6bcf\u5929\u6709 1.5 \u4ebf\u6b21\u8c03\u7528\uff0c\u5982\u679c\u91c7\u7528\u5e38\u89c4\u7684 hessian \u670d\u52a1\uff0c\u670d\u52a1\u63d0\u4f9b\u8005\u5f88\u5bb9\u6613\u5c31\u88ab\u538b\u8de8\uff0c\u901a\u8fc7\u5355\u4e00\u8fde\u63a5\uff0c\u4fdd\u8bc1\u5355\u4e00\u6d88\u8d39\u8005\u4e0d\u4f1a\u538b\u6b7b\u63d0\u4f9b\u8005\uff0c\u957f\u8fde\u63a5\uff0c\u51cf\u5c11\u8fde\u63a5\u63e1\u624b\u9a8c\u8bc1\u7b49\uff0c\u5e76\u4f7f\u7528\u5f02\u6b65 IO\uff0c\u590d\u7528\u7ebf\u7a0b\u6c60\uff0c\u9632\u6b62 C10K \u95ee\u9898\u3002","title":"\u4e3a\u4ec0\u4e48\u91c7\u7528\u5f02\u6b65\u5355\u4e00\u957f\u8fde\u63a5?"},{"location":"user/references/protocol/gRPC/","text":"grpc:// Dubbo \u81ea 2.7.5 \u7248\u672c\u5f00\u59cb\u652f\u6301 gRPC \u534f\u8bae\uff0c\u5bf9\u4e8e\u8ba1\u5212\u4f7f\u7528 HTTP/2 \u901a\u4fe1\uff0c\u6216\u8005\u60f3\u5229\u7528 gRPC \u5e26\u6765\u7684 Stream\u3001\u53cd\u538b\u3001Reactive \u7f16\u7a0b\u7b49\u80fd\u529b\u7684\u5f00\u53d1\u8005\u6765\u8bf4\uff0c \u90fd\u53ef\u4ee5\u8003\u8651\u542f\u7528 gRPC \u534f\u8bae\u3002 \u652f\u6301 gRPC \u7684\u597d\u5904 \u4e3a\u671f\u671b\u4f7f\u7528 gRPC \u534f\u8bae\u7684\u7528\u6237\u5e26\u6765\u670d\u52a1\u6cbb\u7406\u80fd\u529b\uff0c\u65b9\u4fbf\u63a5\u5165 Dubbo \u4f53\u7cfb \u7528\u6237\u53ef\u4ee5\u4f7f\u7528 Dubbo \u98ce\u683c\u7684\uff0c\u57fa\u4e8e\u63a5\u53e3\u7684\u7f16\u7a0b\u98ce\u683c\u6765\u5b9a\u4e49\u548c\u4f7f\u7528\u8fdc\u7a0b\u670d\u52a1 \u5982\u4f55\u5728 Dubbo \u4e2d\u4f7f\u7528 gRPC \u5927\u6982\u9700\u8981\u4ee5\u4e0b\u6b65\u9aa4\uff1a 1. \u4f7f\u7528 IDL \u5b9a\u4e49\u670d\u52a1 2. \u914d\u7f6e compiler \u63d2\u4ef6\uff0c\u672c\u5730\u9884\u7f16\u8bd1 3. \u914d\u7f6e\u66b4\u9732/\u5f15\u7528 Dubbo \u670d\u52a1 \u5177\u4f53\u53ef\u53c2\u89c1\u4ee5\u4e0b \u793a\u4f8b \u9664\u4e86\u539f\u751f StreamObserver \u63a5\u53e3\u7c7b\u578b\u4e4b\u5916\uff0cDubbo \u8fd8\u652f\u6301 RxJava \u3001 Reactor \u7f16\u7a0b\u98ce\u683c\u7684 API","title":"grpc://"},{"location":"user/references/protocol/gRPC/#grpc","text":"Dubbo \u81ea 2.7.5 \u7248\u672c\u5f00\u59cb\u652f\u6301 gRPC \u534f\u8bae\uff0c\u5bf9\u4e8e\u8ba1\u5212\u4f7f\u7528 HTTP/2 \u901a\u4fe1\uff0c\u6216\u8005\u60f3\u5229\u7528 gRPC \u5e26\u6765\u7684 Stream\u3001\u53cd\u538b\u3001Reactive \u7f16\u7a0b\u7b49\u80fd\u529b\u7684\u5f00\u53d1\u8005\u6765\u8bf4\uff0c \u90fd\u53ef\u4ee5\u8003\u8651\u542f\u7528 gRPC \u534f\u8bae\u3002","title":"grpc://"},{"location":"user/references/protocol/gRPC/#grpc_1","text":"\u4e3a\u671f\u671b\u4f7f\u7528 gRPC \u534f\u8bae\u7684\u7528\u6237\u5e26\u6765\u670d\u52a1\u6cbb\u7406\u80fd\u529b\uff0c\u65b9\u4fbf\u63a5\u5165 Dubbo \u4f53\u7cfb \u7528\u6237\u53ef\u4ee5\u4f7f\u7528 Dubbo \u98ce\u683c\u7684\uff0c\u57fa\u4e8e\u63a5\u53e3\u7684\u7f16\u7a0b\u98ce\u683c\u6765\u5b9a\u4e49\u548c\u4f7f\u7528\u8fdc\u7a0b\u670d\u52a1","title":"\u652f\u6301 gRPC \u7684\u597d\u5904"},{"location":"user/references/protocol/gRPC/#dubbo-grpc","text":"\u5927\u6982\u9700\u8981\u4ee5\u4e0b\u6b65\u9aa4\uff1a 1. \u4f7f\u7528 IDL \u5b9a\u4e49\u670d\u52a1 2. \u914d\u7f6e compiler \u63d2\u4ef6\uff0c\u672c\u5730\u9884\u7f16\u8bd1 3. \u914d\u7f6e\u66b4\u9732/\u5f15\u7528 Dubbo \u670d\u52a1 \u5177\u4f53\u53ef\u53c2\u89c1\u4ee5\u4e0b \u793a\u4f8b \u9664\u4e86\u539f\u751f StreamObserver \u63a5\u53e3\u7c7b\u578b\u4e4b\u5916\uff0cDubbo \u8fd8\u652f\u6301 RxJava \u3001 Reactor \u7f16\u7a0b\u98ce\u683c\u7684 API","title":"\u5982\u4f55\u5728 Dubbo \u4e2d\u4f7f\u7528 gRPC"},{"location":"user/references/protocol/hessian/","text":"hessian:// Hessian [^1] \u534f\u8bae\u7528\u4e8e\u96c6\u6210 Hessian \u7684\u670d\u52a1\uff0cHessian \u5e95\u5c42\u91c7\u7528 Http \u901a\u8baf\uff0c\u91c7\u7528 Servlet \u66b4\u9732\u670d\u52a1\uff0cDubbo \u7f3a\u7701\u5185\u5d4c Jetty \u4f5c\u4e3a\u670d\u52a1\u5668\u5b9e\u73b0\u3002 Dubbo \u7684 Hessian \u534f\u8bae\u53ef\u4ee5\u548c\u539f\u751f Hessian \u670d\u52a1\u4e92\u64cd\u4f5c\uff0c\u5373\uff1a \u63d0\u4f9b\u8005\u7528 Dubbo \u7684 Hessian \u534f\u8bae\u66b4\u9732\u670d\u52a1\uff0c\u6d88\u8d39\u8005\u76f4\u63a5\u7528\u6807\u51c6 Hessian \u63a5\u53e3\u8c03\u7528 \u6216\u8005\u63d0\u4f9b\u65b9\u7528\u6807\u51c6 Hessian \u66b4\u9732\u670d\u52a1\uff0c\u6d88\u8d39\u65b9\u7528 Dubbo \u7684 Hessian \u534f\u8bae\u8c03\u7528\u3002 \u7279\u6027 \u8fde\u63a5\u4e2a\u6570\uff1a\u591a\u8fde\u63a5 \u8fde\u63a5\u65b9\u5f0f\uff1a\u77ed\u8fde\u63a5 \u4f20\u8f93\u534f\u8bae\uff1aHTTP \u4f20\u8f93\u65b9\u5f0f\uff1a\u540c\u6b65\u4f20\u8f93 \u5e8f\u5217\u5316\uff1aHessian\u4e8c\u8fdb\u5236\u5e8f\u5217\u5316 \u9002\u7528\u8303\u56f4\uff1a\u4f20\u5165\u4f20\u51fa\u53c2\u6570\u6570\u636e\u5305\u8f83\u5927\uff0c\u63d0\u4f9b\u8005\u6bd4\u6d88\u8d39\u8005\u4e2a\u6570\u591a\uff0c\u63d0\u4f9b\u8005\u538b\u529b\u8f83\u5927\uff0c\u53ef\u4f20\u6587\u4ef6\u3002 \u9002\u7528\u573a\u666f\uff1a\u9875\u9762\u4f20\u8f93\uff0c\u6587\u4ef6\u4f20\u8f93\uff0c\u6216\u4e0e\u539f\u751fhessian\u670d\u52a1\u4e92\u64cd\u4f5c \u4f9d\u8d56 dependency groupId com.caucho /groupId artifactId hessian /artifactId version 4.0.7 /version /dependency \u7ea6\u675f \u53c2\u6570\u53ca\u8fd4\u56de\u503c\u9700\u5b9e\u73b0 Serializable \u63a5\u53e3 \u53c2\u6570\u53ca\u8fd4\u56de\u503c\u4e0d\u80fd\u81ea\u5b9a\u4e49\u5b9e\u73b0 List , Map , Number , Date , Calendar \u7b49\u63a5\u53e3\uff0c\u53ea\u80fd\u7528 JDK \u81ea\u5e26\u7684\u5b9e\u73b0\uff0c\u56e0\u4e3a hessian \u4f1a\u505a\u7279\u6b8a\u5904\u7406\uff0c\u81ea\u5b9a\u4e49\u5b9e\u73b0\u7c7b\u4e2d\u7684\u5c5e\u6027\u503c\u90fd\u4f1a\u4e22\u5931\u3002 \u914d\u7f6e \u5b9a\u4e49 hessian \u534f\u8bae\uff1a dubbo:protocol name= hessian port= 8080 server= jetty / \u8bbe\u7f6e\u9ed8\u8ba4\u534f\u8bae\uff1a dubbo:provider protocol= hessian / \u8bbe\u7f6e service \u534f\u8bae\uff1a dubbo:service protocol= hessian / \u591a\u7aef\u53e3\uff1a dubbo:protocol id= hessian1 name= hessian port= 8080 / dubbo:protocol id= hessian2 name= hessian port= 8081 / \u76f4\u8fde\uff1a dubbo:reference id= helloService interface= HelloWorld url= hessian://10.20.153.10:8080/helloWorld / [^1]: Hessian \u662f Caucho \u5f00\u6e90\u7684\u4e00\u4e2a RPC \u6846\u67b6\uff0c\u5176\u901a\u8baf\u6548\u7387\u9ad8\u4e8e WebService \u548c Java \u81ea\u5e26\u7684\u5e8f\u5217\u5316\u3002","title":"hessian://"},{"location":"user/references/protocol/hessian/#hessian","text":"Hessian [^1] \u534f\u8bae\u7528\u4e8e\u96c6\u6210 Hessian \u7684\u670d\u52a1\uff0cHessian \u5e95\u5c42\u91c7\u7528 Http \u901a\u8baf\uff0c\u91c7\u7528 Servlet \u66b4\u9732\u670d\u52a1\uff0cDubbo \u7f3a\u7701\u5185\u5d4c Jetty \u4f5c\u4e3a\u670d\u52a1\u5668\u5b9e\u73b0\u3002 Dubbo \u7684 Hessian \u534f\u8bae\u53ef\u4ee5\u548c\u539f\u751f Hessian \u670d\u52a1\u4e92\u64cd\u4f5c\uff0c\u5373\uff1a \u63d0\u4f9b\u8005\u7528 Dubbo \u7684 Hessian \u534f\u8bae\u66b4\u9732\u670d\u52a1\uff0c\u6d88\u8d39\u8005\u76f4\u63a5\u7528\u6807\u51c6 Hessian \u63a5\u53e3\u8c03\u7528 \u6216\u8005\u63d0\u4f9b\u65b9\u7528\u6807\u51c6 Hessian \u66b4\u9732\u670d\u52a1\uff0c\u6d88\u8d39\u65b9\u7528 Dubbo \u7684 Hessian \u534f\u8bae\u8c03\u7528\u3002","title":"hessian://"},{"location":"user/references/protocol/hessian/#_1","text":"\u8fde\u63a5\u4e2a\u6570\uff1a\u591a\u8fde\u63a5 \u8fde\u63a5\u65b9\u5f0f\uff1a\u77ed\u8fde\u63a5 \u4f20\u8f93\u534f\u8bae\uff1aHTTP \u4f20\u8f93\u65b9\u5f0f\uff1a\u540c\u6b65\u4f20\u8f93 \u5e8f\u5217\u5316\uff1aHessian\u4e8c\u8fdb\u5236\u5e8f\u5217\u5316 \u9002\u7528\u8303\u56f4\uff1a\u4f20\u5165\u4f20\u51fa\u53c2\u6570\u6570\u636e\u5305\u8f83\u5927\uff0c\u63d0\u4f9b\u8005\u6bd4\u6d88\u8d39\u8005\u4e2a\u6570\u591a\uff0c\u63d0\u4f9b\u8005\u538b\u529b\u8f83\u5927\uff0c\u53ef\u4f20\u6587\u4ef6\u3002 \u9002\u7528\u573a\u666f\uff1a\u9875\u9762\u4f20\u8f93\uff0c\u6587\u4ef6\u4f20\u8f93\uff0c\u6216\u4e0e\u539f\u751fhessian\u670d\u52a1\u4e92\u64cd\u4f5c","title":"\u7279\u6027"},{"location":"user/references/protocol/hessian/#_2","text":"dependency groupId com.caucho /groupId artifactId hessian /artifactId version 4.0.7 /version /dependency","title":"\u4f9d\u8d56"},{"location":"user/references/protocol/hessian/#_3","text":"\u53c2\u6570\u53ca\u8fd4\u56de\u503c\u9700\u5b9e\u73b0 Serializable \u63a5\u53e3 \u53c2\u6570\u53ca\u8fd4\u56de\u503c\u4e0d\u80fd\u81ea\u5b9a\u4e49\u5b9e\u73b0 List , Map , Number , Date , Calendar \u7b49\u63a5\u53e3\uff0c\u53ea\u80fd\u7528 JDK \u81ea\u5e26\u7684\u5b9e\u73b0\uff0c\u56e0\u4e3a hessian \u4f1a\u505a\u7279\u6b8a\u5904\u7406\uff0c\u81ea\u5b9a\u4e49\u5b9e\u73b0\u7c7b\u4e2d\u7684\u5c5e\u6027\u503c\u90fd\u4f1a\u4e22\u5931\u3002","title":"\u7ea6\u675f"},{"location":"user/references/protocol/hessian/#_4","text":"\u5b9a\u4e49 hessian \u534f\u8bae\uff1a dubbo:protocol name= hessian port= 8080 server= jetty / \u8bbe\u7f6e\u9ed8\u8ba4\u534f\u8bae\uff1a dubbo:provider protocol= hessian / \u8bbe\u7f6e service \u534f\u8bae\uff1a dubbo:service protocol= hessian / \u591a\u7aef\u53e3\uff1a dubbo:protocol id= hessian1 name= hessian port= 8080 / dubbo:protocol id= hessian2 name= hessian port= 8081 / \u76f4\u8fde\uff1a dubbo:reference id= helloService interface= HelloWorld url= hessian://10.20.153.10:8080/helloWorld / [^1]: Hessian \u662f Caucho \u5f00\u6e90\u7684\u4e00\u4e2a RPC \u6846\u67b6\uff0c\u5176\u901a\u8baf\u6548\u7387\u9ad8\u4e8e WebService \u548c Java \u81ea\u5e26\u7684\u5e8f\u5217\u5316\u3002","title":"\u914d\u7f6e"},{"location":"user/references/protocol/http/","text":"http:// \u57fa\u4e8e HTTP \u8868\u5355\u7684\u8fdc\u7a0b\u8c03\u7528\u534f\u8bae\uff0c\u91c7\u7528 Spring \u7684 HttpInvoker \u5b9e\u73b0 [^1] \u7279\u6027 \u8fde\u63a5\u4e2a\u6570\uff1a\u591a\u8fde\u63a5 \u8fde\u63a5\u65b9\u5f0f\uff1a\u77ed\u8fde\u63a5 \u4f20\u8f93\u534f\u8bae\uff1aHTTP \u4f20\u8f93\u65b9\u5f0f\uff1a\u540c\u6b65\u4f20\u8f93 \u5e8f\u5217\u5316\uff1a\u8868\u5355\u5e8f\u5217\u5316 \u9002\u7528\u8303\u56f4\uff1a\u4f20\u5165\u4f20\u51fa\u53c2\u6570\u6570\u636e\u5305\u5927\u5c0f\u6df7\u5408\uff0c\u63d0\u4f9b\u8005\u6bd4\u6d88\u8d39\u8005\u4e2a\u6570\u591a\uff0c\u53ef\u7528\u6d4f\u89c8\u5668\u67e5\u770b\uff0c\u53ef\u7528\u8868\u5355\u6216URL\u4f20\u5165\u53c2\u6570\uff0c\u6682\u4e0d\u652f\u6301\u4f20\u6587\u4ef6\u3002 \u9002\u7528\u573a\u666f\uff1a\u9700\u540c\u65f6\u7ed9\u5e94\u7528\u7a0b\u5e8f\u548c\u6d4f\u89c8\u5668 JS \u4f7f\u7528\u7684\u670d\u52a1\u3002 \u7ea6\u675f \u53c2\u6570\u53ca\u8fd4\u56de\u503c\u9700\u7b26\u5408 Bean \u89c4\u8303 \u914d\u7f6e \u914d\u7f6e\u534f\u8bae\uff1a dubbo:protocol name= http port= 8080 / \u914d\u7f6e Jetty Server (\u9ed8\u8ba4)\uff1a dubbo:protocol ... server= jetty / \u914d\u7f6e Servlet Bridge Server (\u63a8\u8350\u4f7f\u7528)\uff1a dubbo:protocol ... server= servlet / \u914d\u7f6e DispatcherServlet\uff1a servlet servlet-name dubbo /servlet-name servlet-class org.apache.dubbo.remoting.http.servlet.DispatcherServlet /servlet-class load-on-startup 1 /load-on-startup /servlet servlet-mapping servlet-name dubbo /servlet-name url-pattern /* /url-pattern /servlet-mapping \u6ce8\u610f\uff0c\u5982\u679c\u4f7f\u7528 servlet \u6d3e\u53d1\u8bf7\u6c42\uff1a \u534f\u8bae\u7684\u7aef\u53e3 dubbo:protocol port=\"8080\" / \u5fc5\u987b\u4e0e servlet \u5bb9\u5668\u7684\u7aef\u53e3\u76f8\u540c\uff0c \u534f\u8bae\u7684\u4e0a\u4e0b\u6587\u8def\u5f84 dubbo:protocol contextpath=\"foo\" / \u5fc5\u987b\u4e0e servlet \u5e94\u7528\u7684\u4e0a\u4e0b\u6587\u8def\u5f84\u76f8\u540c\u3002 [^1]: 2.3.0 \u4ee5\u4e0a\u7248\u672c\u652f\u6301","title":"http://"},{"location":"user/references/protocol/http/#http","text":"\u57fa\u4e8e HTTP \u8868\u5355\u7684\u8fdc\u7a0b\u8c03\u7528\u534f\u8bae\uff0c\u91c7\u7528 Spring \u7684 HttpInvoker \u5b9e\u73b0 [^1]","title":"http://"},{"location":"user/references/protocol/http/#_1","text":"\u8fde\u63a5\u4e2a\u6570\uff1a\u591a\u8fde\u63a5 \u8fde\u63a5\u65b9\u5f0f\uff1a\u77ed\u8fde\u63a5 \u4f20\u8f93\u534f\u8bae\uff1aHTTP \u4f20\u8f93\u65b9\u5f0f\uff1a\u540c\u6b65\u4f20\u8f93 \u5e8f\u5217\u5316\uff1a\u8868\u5355\u5e8f\u5217\u5316 \u9002\u7528\u8303\u56f4\uff1a\u4f20\u5165\u4f20\u51fa\u53c2\u6570\u6570\u636e\u5305\u5927\u5c0f\u6df7\u5408\uff0c\u63d0\u4f9b\u8005\u6bd4\u6d88\u8d39\u8005\u4e2a\u6570\u591a\uff0c\u53ef\u7528\u6d4f\u89c8\u5668\u67e5\u770b\uff0c\u53ef\u7528\u8868\u5355\u6216URL\u4f20\u5165\u53c2\u6570\uff0c\u6682\u4e0d\u652f\u6301\u4f20\u6587\u4ef6\u3002 \u9002\u7528\u573a\u666f\uff1a\u9700\u540c\u65f6\u7ed9\u5e94\u7528\u7a0b\u5e8f\u548c\u6d4f\u89c8\u5668 JS \u4f7f\u7528\u7684\u670d\u52a1\u3002","title":"\u7279\u6027"},{"location":"user/references/protocol/http/#_2","text":"\u53c2\u6570\u53ca\u8fd4\u56de\u503c\u9700\u7b26\u5408 Bean \u89c4\u8303","title":"\u7ea6\u675f"},{"location":"user/references/protocol/http/#_3","text":"\u914d\u7f6e\u534f\u8bae\uff1a dubbo:protocol name= http port= 8080 / \u914d\u7f6e Jetty Server (\u9ed8\u8ba4)\uff1a dubbo:protocol ... server= jetty / \u914d\u7f6e Servlet Bridge Server (\u63a8\u8350\u4f7f\u7528)\uff1a dubbo:protocol ... server= servlet / \u914d\u7f6e DispatcherServlet\uff1a servlet servlet-name dubbo /servlet-name servlet-class org.apache.dubbo.remoting.http.servlet.DispatcherServlet /servlet-class load-on-startup 1 /load-on-startup /servlet servlet-mapping servlet-name dubbo /servlet-name url-pattern /* /url-pattern /servlet-mapping \u6ce8\u610f\uff0c\u5982\u679c\u4f7f\u7528 servlet \u6d3e\u53d1\u8bf7\u6c42\uff1a \u534f\u8bae\u7684\u7aef\u53e3 dubbo:protocol port=\"8080\" / \u5fc5\u987b\u4e0e servlet \u5bb9\u5668\u7684\u7aef\u53e3\u76f8\u540c\uff0c \u534f\u8bae\u7684\u4e0a\u4e0b\u6587\u8def\u5f84 dubbo:protocol contextpath=\"foo\" / \u5fc5\u987b\u4e0e servlet \u5e94\u7528\u7684\u4e0a\u4e0b\u6587\u8def\u5f84\u76f8\u540c\u3002 [^1]: 2.3.0 \u4ee5\u4e0a\u7248\u672c\u652f\u6301","title":"\u914d\u7f6e"},{"location":"user/references/protocol/introduction/","text":"\u534f\u8bae\u53c2\u8003\u624b\u518c \u63a8\u8350\u4f7f\u7528 Dubbo \u534f\u8bae\u3002\u5404\u534f\u8bae\u7684\u6027\u80fd\u60c5\u51b5\uff0c\u8bf7\u53c2\u89c1\uff1a \u6027\u80fd\u6d4b\u8bd5\u62a5\u544a","title":"\u534f\u8bae\u53c2\u8003\u624b\u518c"},{"location":"user/references/protocol/introduction/#_1","text":"\u63a8\u8350\u4f7f\u7528 Dubbo \u534f\u8bae\u3002\u5404\u534f\u8bae\u7684\u6027\u80fd\u60c5\u51b5\uff0c\u8bf7\u53c2\u89c1\uff1a \u6027\u80fd\u6d4b\u8bd5\u62a5\u544a","title":"\u534f\u8bae\u53c2\u8003\u624b\u518c"},{"location":"user/references/protocol/memcached/","text":"memcached:// \u57fa\u4e8e memcached [^1] \u5b9e\u73b0\u7684 RPC \u534f\u8bae [^2]\u3002 \u6ce8\u518c memcached \u670d\u52a1\u7684\u5730\u5740 RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension(); Registry registry = registryFactory.getRegistry(URL.valueOf( zookeeper://10.20.153.10:2181 )); registry.register(URL.valueOf( memcached://10.20.153.11/com.foo.BarService?category=providers dynamic=false application=foo group=member loadbalance=consistenthash )); \u5728\u5ba2\u6237\u7aef\u5f15\u7528 \u5728\u5ba2\u6237\u7aef\u4f7f\u7528 [^3]\uff1a dubbo:reference id= cache interface= java.util.Map group= member / \u6216\u8005\uff0c\u70b9\u5bf9\u70b9\u76f4\u8fde\uff1a dubbo:reference id= cache interface= java.util.Map url= memcached://10.20.153.10:11211 / \u4e5f\u53ef\u4ee5\u4f7f\u7528\u81ea\u5b9a\u4e49\u63a5\u53e3\uff1a dubbo:reference id= cache interface= com.foo.CacheService url= memcached://10.20.153.10:11211 / \u65b9\u6cd5\u540d\u5efa\u8bae\u548c memcached \u7684\u6807\u51c6\u65b9\u6cd5\u540d\u76f8\u540c\uff0c\u5373\uff1aget(key), set(key, value), delete(key)\u3002 \u5982\u679c\u65b9\u6cd5\u540d\u548c memcached \u7684\u6807\u51c6\u65b9\u6cd5\u540d\u4e0d\u76f8\u540c\uff0c\u5219\u9700\u8981\u914d\u7f6e\u6620\u5c04\u5173\u7cfb [^4]\uff1a dubbo:reference id= cache interface= com.foo.CacheService url= memcached://10.20.153.10:11211 p:set= putFoo p:get= getFoo p:delete= removeFoo / [^1]: Memcached \u662f\u4e00\u4e2a\u9ad8\u6548\u7684 KV \u7f13\u5b58\u670d\u52a1\u5668 [^2]: 2.3.0 \u4ee5\u4e0a\u7248\u672c\u652f\u6301 [^3]: \u4e0d\u9700\u8981\u611f\u77e5 Memcached \u7684\u5730\u5740 [^4]: \u5176\u4e2d \"p:xxx\" \u4e3a spring \u7684\u6807\u51c6 p \u6807\u7b7e","title":"memcached://"},{"location":"user/references/protocol/memcached/#memcached","text":"\u57fa\u4e8e memcached [^1] \u5b9e\u73b0\u7684 RPC \u534f\u8bae [^2]\u3002","title":"memcached://"},{"location":"user/references/protocol/memcached/#memcached_1","text":"RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension(); Registry registry = registryFactory.getRegistry(URL.valueOf( zookeeper://10.20.153.10:2181 )); registry.register(URL.valueOf( memcached://10.20.153.11/com.foo.BarService?category=providers dynamic=false application=foo group=member loadbalance=consistenthash ));","title":"\u6ce8\u518c memcached \u670d\u52a1\u7684\u5730\u5740"},{"location":"user/references/protocol/memcached/#_1","text":"\u5728\u5ba2\u6237\u7aef\u4f7f\u7528 [^3]\uff1a dubbo:reference id= cache interface= java.util.Map group= member / \u6216\u8005\uff0c\u70b9\u5bf9\u70b9\u76f4\u8fde\uff1a dubbo:reference id= cache interface= java.util.Map url= memcached://10.20.153.10:11211 / \u4e5f\u53ef\u4ee5\u4f7f\u7528\u81ea\u5b9a\u4e49\u63a5\u53e3\uff1a dubbo:reference id= cache interface= com.foo.CacheService url= memcached://10.20.153.10:11211 / \u65b9\u6cd5\u540d\u5efa\u8bae\u548c memcached \u7684\u6807\u51c6\u65b9\u6cd5\u540d\u76f8\u540c\uff0c\u5373\uff1aget(key), set(key, value), delete(key)\u3002 \u5982\u679c\u65b9\u6cd5\u540d\u548c memcached \u7684\u6807\u51c6\u65b9\u6cd5\u540d\u4e0d\u76f8\u540c\uff0c\u5219\u9700\u8981\u914d\u7f6e\u6620\u5c04\u5173\u7cfb [^4]\uff1a dubbo:reference id= cache interface= com.foo.CacheService url= memcached://10.20.153.10:11211 p:set= putFoo p:get= getFoo p:delete= removeFoo / [^1]: Memcached \u662f\u4e00\u4e2a\u9ad8\u6548\u7684 KV \u7f13\u5b58\u670d\u52a1\u5668 [^2]: 2.3.0 \u4ee5\u4e0a\u7248\u672c\u652f\u6301 [^3]: \u4e0d\u9700\u8981\u611f\u77e5 Memcached \u7684\u5730\u5740 [^4]: \u5176\u4e2d \"p:xxx\" \u4e3a spring \u7684\u6807\u51c6 p \u6807\u7b7e","title":"\u5728\u5ba2\u6237\u7aef\u5f15\u7528"},{"location":"user/references/protocol/redis/","text":"redis:// \u57fa\u4e8e Redis [^1] \u5b9e\u73b0\u7684 RPC \u534f\u8bae [^2]\u3002 \u6ce8\u518c redis \u670d\u52a1\u7684\u5730\u5740 RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension(); Registry registry = registryFactory.getRegistry(URL.valueOf( zookeeper://10.20.153.10:2181 )); registry.register(URL.valueOf( redis://10.20.153.11/com.foo.BarService?category=providers dynamic=false application=foo group=member loadbalance=consistenthash )); \u5728\u5ba2\u6237\u7aef\u5f15\u7528 \u5728\u5ba2\u6237\u7aef\u4f7f\u7528 [^3]\uff1a dubbo:reference id= store interface= java.util.Map group= member / \u6216\u8005\uff0c\u70b9\u5bf9\u70b9\u76f4\u8fde\uff1a dubbo:reference id= store interface= java.util.Map url= redis://10.20.153.10:6379 / \u4e5f\u53ef\u4ee5\u4f7f\u7528\u81ea\u5b9a\u4e49\u63a5\u53e3\uff1a dubbo:reference id= store interface= com.foo.StoreService url= redis://10.20.153.10:6379 / \u65b9\u6cd5\u540d\u5efa\u8bae\u548c redis \u7684\u6807\u51c6\u65b9\u6cd5\u540d\u76f8\u540c\uff0c\u5373\uff1aget(key), set(key, value), delete(key)\u3002 \u5982\u679c\u65b9\u6cd5\u540d\u548c redis \u7684\u6807\u51c6\u65b9\u6cd5\u540d\u4e0d\u76f8\u540c\uff0c\u5219\u9700\u8981\u914d\u7f6e\u6620\u5c04\u5173\u7cfb [^4]\uff1a dubbo:reference id= cache interface= com.foo.CacheService url= redis://10.20.153.10:6379 p:set= putFoo p:get= getFoo p:delete= removeFoo / [^1]: Redis \u662f\u4e00\u4e2a\u9ad8\u6548\u7684 KV \u5b58\u50a8\u670d\u52a1\u5668 [^2]: 2.3.0 \u4ee5\u4e0a\u7248\u672c\u652f\u6301 [^3]: \u4e0d\u9700\u8981\u611f\u77e5 Redis \u7684\u5730\u5740 [^4]: \u5176\u4e2d \"p:xxx\" \u4e3a spring \u7684\u6807\u51c6 p \u6807\u7b7e","title":"redis://"},{"location":"user/references/protocol/redis/#redis","text":"\u57fa\u4e8e Redis [^1] \u5b9e\u73b0\u7684 RPC \u534f\u8bae [^2]\u3002","title":"redis://"},{"location":"user/references/protocol/redis/#redis_1","text":"RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension(); Registry registry = registryFactory.getRegistry(URL.valueOf( zookeeper://10.20.153.10:2181 )); registry.register(URL.valueOf( redis://10.20.153.11/com.foo.BarService?category=providers dynamic=false application=foo group=member loadbalance=consistenthash ));","title":"\u6ce8\u518c redis \u670d\u52a1\u7684\u5730\u5740"},{"location":"user/references/protocol/redis/#_1","text":"\u5728\u5ba2\u6237\u7aef\u4f7f\u7528 [^3]\uff1a dubbo:reference id= store interface= java.util.Map group= member / \u6216\u8005\uff0c\u70b9\u5bf9\u70b9\u76f4\u8fde\uff1a dubbo:reference id= store interface= java.util.Map url= redis://10.20.153.10:6379 / \u4e5f\u53ef\u4ee5\u4f7f\u7528\u81ea\u5b9a\u4e49\u63a5\u53e3\uff1a dubbo:reference id= store interface= com.foo.StoreService url= redis://10.20.153.10:6379 / \u65b9\u6cd5\u540d\u5efa\u8bae\u548c redis \u7684\u6807\u51c6\u65b9\u6cd5\u540d\u76f8\u540c\uff0c\u5373\uff1aget(key), set(key, value), delete(key)\u3002 \u5982\u679c\u65b9\u6cd5\u540d\u548c redis \u7684\u6807\u51c6\u65b9\u6cd5\u540d\u4e0d\u76f8\u540c\uff0c\u5219\u9700\u8981\u914d\u7f6e\u6620\u5c04\u5173\u7cfb [^4]\uff1a dubbo:reference id= cache interface= com.foo.CacheService url= redis://10.20.153.10:6379 p:set= putFoo p:get= getFoo p:delete= removeFoo / [^1]: Redis \u662f\u4e00\u4e2a\u9ad8\u6548\u7684 KV \u5b58\u50a8\u670d\u52a1\u5668 [^2]: 2.3.0 \u4ee5\u4e0a\u7248\u672c\u652f\u6301 [^3]: \u4e0d\u9700\u8981\u611f\u77e5 Redis \u7684\u5730\u5740 [^4]: \u5176\u4e2d \"p:xxx\" \u4e3a spring \u7684\u6807\u51c6 p \u6807\u7b7e","title":"\u5728\u5ba2\u6237\u7aef\u5f15\u7528"},{"location":"user/references/protocol/rest/","text":"rest:// \u57fa\u4e8e\u6807\u51c6\u7684Java REST API\u2014\u2014JAX-RS 2.0\uff08Java API for RESTful Web Services\u7684\u7b80\u5199\uff09\u5b9e\u73b0\u7684REST\u8c03\u7528\u652f\u6301 \u5feb\u901f\u5165\u95e8 \u5728dubbo\u4e2d\u5f00\u53d1\u4e00\u4e2aREST\u98ce\u683c\u7684\u670d\u52a1\u4f1a\u6bd4\u8f83\u7b80\u5355\uff0c\u4e0b\u9762\u4ee5\u4e00\u4e2a\u6ce8\u518c\u7528\u6237\u7684\u7b80\u5355\u670d\u52a1\u4e3a\u4f8b\u8bf4\u660e\u3002 \u8fd9\u4e2a\u670d\u52a1\u8981\u5b9e\u73b0\u7684\u529f\u80fd\u662f\u63d0\u4f9b\u5982\u4e0bURL\uff08\u6ce8\uff1a\u8fd9\u4e2aURL\u4e0d\u662f\u5b8c\u5168\u7b26\u5408REST\u7684\u98ce\u683c\uff0c\u4f46\u662f\u66f4\u7b80\u5355\u5b9e\u7528\uff09\uff1a http://localhost:8080/users/register \u800c\u4efb\u4f55\u5ba2\u6237\u7aef\u90fd\u53ef\u4ee5\u5c06\u5305\u542b\u7528\u6237\u4fe1\u606f\u7684JSON\u5b57\u7b26\u4e32POST\u5230\u4ee5\u4e0aURL\u6765\u5b8c\u6210\u7528\u6237\u6ce8\u518c\u3002 \u9996\u5148\uff0c\u5f00\u53d1\u670d\u52a1\u7684\u63a5\u53e3\uff1a public interface UserService { void registerUser(User user); } \u7136\u540e\uff0c\u5f00\u53d1\u670d\u52a1\u7684\u5b9e\u73b0\uff1a @Path( /users ) public class UserServiceImpl implements UserService { @POST @Path( /register ) @Consumes({MediaType.APPLICATION_JSON}) public void registerUser(User user) { // save the user... } } \u4e0a\u9762\u7684\u5b9e\u73b0\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u662f\u7531\u4e8e\u8be5 REST \u670d\u52a1\u662f\u8981\u53d1\u5e03\u5230\u6307\u5b9a URL \u4e0a\uff0c\u4f9b\u4efb\u610f\u8bed\u8a00\u7684\u5ba2\u6237\u7aef\u751a\u81f3\u6d4f\u89c8\u5668\u6765\u8bbf\u95ee\uff0c\u6240\u4ee5\u8fd9\u91cc\u989d\u5916\u6dfb\u52a0\u4e86\u51e0\u4e2a JAX-RS \u7684\u6807\u51c6 annotation \u6765\u505a\u76f8\u5173\u7684\u914d\u7f6e\u3002 @Path(\"/users\")\uff1a\u6307\u5b9a\u8bbf\u95eeUserService\u7684URL\u76f8\u5bf9\u8def\u5f84\u662f/users\uff0c\u5373http://localhost:8080/users @Path(\"/register\")\uff1a\u6307\u5b9a\u8bbf\u95eeregisterUser()\u65b9\u6cd5\u7684URL\u76f8\u5bf9\u8def\u5f84\u662f/register\uff0c\u518d\u7ed3\u5408\u4e0a\u4e00\u4e2a@Path\u4e3aUserService\u6307\u5b9a\u7684\u8def\u5f84\uff0c\u5219\u8c03\u7528UserService.register()\u7684\u5b8c\u6574\u8def\u5f84\u4e3ahttp://localhost:8080/users/register @POST\uff1a\u6307\u5b9a\u8bbf\u95eeregisterUser()\u7528HTTP POST\u65b9\u6cd5 @Consumes({MediaType.APPLICATION_JSON})\uff1a\u6307\u5b9aregisterUser()\u63a5\u6536JSON\u683c\u5f0f\u7684\u6570\u636e\u3002REST\u6846\u67b6\u4f1a\u81ea\u52a8\u5c06JSON\u6570\u636e\u53cd\u5e8f\u5217\u5316\u4e3aUser\u5bf9\u8c61 \u6700\u540e\uff0c\u5728spring\u914d\u7f6e\u6587\u4ef6\u4e2d\u6dfb\u52a0\u6b64\u670d\u52a1\uff0c\u5373\u5b8c\u6210\u6240\u6709\u670d\u52a1\u5f00\u53d1\u5de5\u4f5c\uff1a ```xml ## REST\u670d\u52a1\u63d0\u4f9b\u7aef\u8be6\u89e3 \u4e0b\u9762\u6211\u4eec\u6269\u5145\u201c\u5feb\u901f\u5165\u95e8\u201d\u4e2d\u7684UserService\uff0c\u8fdb\u4e00\u6b65\u5c55\u793a\u5728dubbo\u4e2dREST\u670d\u52a1\u63d0\u4f9b\u7aef\u7684\u5f00\u53d1\u8981\u70b9\u3002 ### HTTP POST/GET\u7684\u5b9e\u73b0 REST\u670d\u52a1\u4e2d\u867d\u7136\u5efa\u8bae\u4f7f\u7528HTTP\u534f\u8bae\u4e2d\u56db\u79cd\u6807\u51c6\u65b9\u6cd5POST\u3001DELETE\u3001PUT\u3001GET\u6765\u5206\u522b\u5b9e\u73b0\u5e38\u89c1\u7684\u201c\u589e\u5220\u6539\u67e5\u201d\uff0c\u4f46\u5b9e\u9645\u4e2d\uff0c\u6211\u4eec\u4e00\u822c\u60c5\u51b5\u76f4\u63a5\u7528POST\u6765\u5b9e\u73b0\u201c\u589e\u6539\u201d\uff0cGET\u6765\u5b9e\u73b0\u201c\u5220\u67e5\u201d\u5373\u53ef\uff08DELETE\u548cPUT\u751a\u81f3\u4f1a\u88ab\u4e00\u4e9b\u9632\u706b\u5899\u963b\u6321\uff09\u3002 \u524d\u9762\u5df2\u7ecf\u7b80\u5355\u6f14\u793a\u4e86POST\u7684\u5b9e\u73b0\uff0c\u5728\u6b64\uff0c\u6211\u4eec\u4e3aUserService\u6dfb\u52a0\u4e00\u4e2a\u83b7\u53d6\u6ce8\u518c\u7528\u6237\u8d44\u6599\u7684\u529f\u80fd\uff0c\u6765\u6f14\u793aGET\u7684\u5b9e\u73b0\u3002 \u8fd9\u4e2a\u529f\u80fd\u5c31\u662f\u8981\u5b9e\u73b0\u5ba2\u6237\u7aef\u901a\u8fc7\u8bbf\u95ee\u5982\u4e0b\u4e0d\u540cURL\u6765\u83b7\u53d6\u4e0d\u540cID\u7684\u7528\u6237\u8d44\u6599\uff1a http://localhost:8080/users/1001 http://localhost:8080/users/1002 http://localhost:8080/users/1003 \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5176\u4ed6\u5f62\u5f0f\u7684URL\u6765\u8bbf\u95ee\u4e0d\u540cID\u7684\u7528\u6237\u8d44\u6599\uff0c\u4f8b\u5982\uff1a http://localhost:8080/users/load?id=1001 JAX-RS\u672c\u8eab\u53ef\u4ee5\u652f\u6301\u6240\u6709\u8fd9\u4e9b\u5f62\u5f0f\u3002\u4f46\u662f\u4e0a\u9762\u90a3\u79cd\u5728URL\u8def\u5f84\u4e2d\u5305\u542b\u67e5\u8be2\u53c2\u6570\u7684\u5f62\u5f0f\uff08http://localhost:8080/users/1001\uff09 \u66f4\u7b26\u5408REST\u7684\u4e00\u822c\u4e60\u60ef\uff0c\u6240\u4ee5\u66f4\u63a8\u8350\u5927\u5bb6\u6765\u4f7f\u7528\u3002\u4e0b\u9762\u6211\u4eec\u5c31\u4e3aUserService\u6dfb\u52a0\u4e00\u4e2agetUser()\u65b9\u6cd5\u6765\u5b9e\u73b0\u8fd9\u79cd\u5f62\u5f0f\u7684URL\u8bbf\u95ee\uff1a ```java @GET @Path( /{id : \\\\d+} ) @Produces({MediaType.APPLICATION_JSON}) public User getUser(@PathParam( id ) Long id) { // ... } @GET\uff1a\u6307\u5b9a\u7528HTTP GET\u65b9\u6cd5\u8bbf\u95ee @Path(\"/{id : \\d+}\")\uff1a\u6839\u636e\u4e0a\u9762\u7684\u529f\u80fd\u9700\u6c42\uff0c\u8bbf\u95eegetUser()\u7684URL\u5e94\u5f53\u662f\u201chttp://localhost:8080/users/ + \u4efb\u610f\u6570\u5b57\"\uff0c\u5e76\u4e14\u8fd9\u4e2a\u6570\u5b57\u8981\u88ab\u505a\u4e3a\u53c2\u6570\u4f20\u5165getUser()\u65b9\u6cd5\u3002 \u8fd9\u91cc\u7684annotation\u914d\u7f6e\u4e2d\uff0c@Path\u4e2d\u95f4\u7684{id: xxx}\u6307\u5b9aURL\u76f8\u5bf9\u8def\u5f84\u4e2d\u5305\u542b\u4e86\u540d\u4e3aid\u53c2\u6570\uff0c\u800c\u5b83\u7684\u503c\u4e5f\u5c06\u88ab\u81ea\u52a8\u4f20\u9012\u7ed9\u4e0b\u9762\u7528@PathParam(\"id\")\u4fee\u9970\u7684\u65b9\u6cd5\u53c2\u6570id\u3002{id:\u540e\u9762\u7d27\u8ddf\u7684\\d+\u662f\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u6307\u5b9a\u4e86id\u53c2\u6570\u5fc5\u987b\u662f\u6570\u5b57\u3002 @Produces({MediaType.APPLICATION_JSON})\uff1a\u6307\u5b9agetUser()\u8f93\u51faJSON\u683c\u5f0f\u7684\u6570\u636e\u3002\u6846\u67b6\u4f1a\u81ea\u52a8\u5c06User\u5bf9\u8c61\u5e8f\u5217\u5316\u4e3aJSON\u6570\u636e\u3002 Annotation\u653e\u5728\u63a5\u53e3\u7c7b\u8fd8\u662f\u5b9e\u73b0\u7c7b \u5728Dubbo\u4e2d\u5f00\u53d1REST\u670d\u52a1\u4e3b\u8981\u90fd\u662f\u901a\u8fc7JAX-RS\u7684annotation\u6765\u5b8c\u6210\u914d\u7f6e\u7684\uff0c\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u90fd\u662f\u5c06annotation\u653e\u5728\u670d\u52a1\u7684\u5b9e\u73b0\u7c7b\u4e2d\u3002\u4f46\u5176\u5b9e\uff0c\u6211\u4eec\u5b8c\u5168\u4e5f\u53ef\u4ee5\u5c06annotation\u653e\u5230\u670d\u52a1\u7684\u63a5\u53e3\u4e0a\uff0c\u8fd9\u4e24\u79cd\u65b9\u5f0f\u662f\u5b8c\u5168\u7b49\u4ef7\u7684\uff0c\u4f8b\u5982\uff1a @Path( /users ) public interface UserService { @GET @Path( /{id : \\\\d+} ) @Produces({MediaType.APPLICATION_JSON}) User getUser(@PathParam( id ) Long id); } \u5728\u4e00\u822c\u5e94\u7528\u4e2d\uff0c\u6211\u4eec\u5efa\u8bae\u5c06annotation\u653e\u5230\u670d\u52a1\u5b9e\u73b0\u7c7b\uff0c\u8fd9\u6837annotation\u548cjava\u5b9e\u73b0\u4ee3\u7801\u4f4d\u7f6e\u66f4\u63a5\u8fd1\uff0c\u66f4\u4fbf\u4e8e\u5f00\u53d1\u548c\u7ef4\u62a4\u3002\u53e6\u5916\u66f4\u91cd\u8981\u7684\u662f\uff0c\u6211\u4eec\u4e00\u822c\u503e\u5411\u4e8e\u907f\u514d\u5bf9\u63a5\u53e3\u7684\u6c61\u67d3\uff0c\u4fdd\u6301\u63a5\u53e3\u7684\u7eaf\u51c0\u6027\u548c\u5e7f\u6cdb\u9002\u7528\u6027\u3002 \u4f46\u662f\uff0c\u5982\u540e\u6587\u6240\u8ff0\uff0c\u5982\u679c\u6211\u4eec\u8981\u7528dubbo\u76f4\u63a5\u5f00\u53d1\u7684\u6d88\u8d39\u7aef\u6765\u8bbf\u95ee\u6b64\u670d\u52a1\uff0c\u5219annotation\u5fc5\u987b\u653e\u5230\u63a5\u53e3\u4e0a\u3002 \u5982\u679c\u63a5\u53e3\u548c\u5b9e\u73b0\u7c7b\u90fd\u540c\u65f6\u6dfb\u52a0\u4e86annotation\uff0c\u5219\u5b9e\u73b0\u7c7b\u7684annotation\u914d\u7f6e\u4f1a\u751f\u6548\uff0c\u63a5\u53e3\u4e0a\u7684annotation\u88ab\u76f4\u63a5\u5ffd\u7565\u3002 JSON\u3001XML\u7b49\u591a\u6570\u636e\u683c\u5f0f\u7684\u652f\u6301 \u5728dubbo\u4e2d\u5f00\u53d1\u7684REST\u670d\u52a1\u53ef\u4ee5\u540c\u65f6\u652f\u6301\u4f20\u8f93\u591a\u79cd\u683c\u5f0f\u7684\u6570\u636e\uff0c\u4ee5\u7ed9\u5ba2\u6237\u7aef\u63d0\u4f9b\u6700\u5927\u7684\u7075\u6d3b\u6027\u3002\u5176\u4e2d\u6211\u4eec\u76ee\u524d\u5bf9\u6700\u5e38\u7528\u7684JSON\u548cXML\u683c\u5f0f\u7279\u522b\u6dfb\u52a0\u4e86\u989d\u5916\u7684\u529f\u80fd\u3002 \u6bd4\u5982\uff0c\u6211\u4eec\u8981\u8ba9\u4e0a\u4f8b\u4e2d\u7684getUser()\u65b9\u6cd5\u652f\u6301\u5206\u522b\u8fd4\u56deJSON\u548cXML\u683c\u5f0f\u7684\u6570\u636e\uff0c\u53ea\u9700\u8981\u5728annotation\u4e2d\u540c\u65f6\u5305\u542b\u4e24\u79cd\u683c\u5f0f\u5373\u53ef\uff1a @Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_XML}) User getUser(@PathParam( id ) Long id); \u6216\u8005\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528\u5b57\u7b26\u4e32\uff08\u8fd8\u652f\u6301\u901a\u914d\u7b26\uff09\u8868\u793aMediaType\uff1a @Produces({ application/json , text/xml }) User getUser(@PathParam( id ) Long id); \u5982\u679c\u6240\u6709\u65b9\u6cd5\u90fd\u652f\u6301\u540c\u6837\u7c7b\u578b\u7684\u8f93\u5165\u8f93\u51fa\u6570\u636e\u683c\u5f0f\uff0c\u5219\u6211\u4eec\u65e0\u9700\u5728\u6bcf\u4e2a\u65b9\u6cd5\u4e0a\u505a\u914d\u7f6e\uff0c\u53ea\u9700\u8981\u5728\u670d\u52a1\u7c7b\u4e0a\u6dfb\u52a0annotation\u5373\u53ef\uff1a @Path( /users ) @Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_XML}) @Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_XML}) public class UserServiceImpl implements UserService { // ... } \u5728\u4e00\u4e2aREST\u670d\u52a1\u540c\u65f6\u5bf9\u591a\u79cd\u6570\u636e\u683c\u5f0f\u652f\u6301\u7684\u60c5\u51b5\u4e0b\uff0c\u6839\u636eJAX-RS\u6807\u51c6\uff0c\u4e00\u822c\u662f\u901a\u8fc7HTTP\u4e2d\u7684MIME header\uff08content-type\u548caccept\uff09\u6765\u6307\u5b9a\u5f53\u524d\u60f3\u7528\u7684\u662f\u54ea\u79cd\u683c\u5f0f\u7684\u6570\u636e\u3002 \u4f46\u662f\u5728dubbo\u4e2d\uff0c\u6211\u4eec\u8fd8\u81ea\u52a8\u652f\u6301\u76ee\u524d\u4e1a\u754c\u666e\u904d\u4f7f\u7528\u7684\u65b9\u5f0f\uff0c\u5373\u7528\u4e00\u4e2aURL\u540e\u7f00\uff08.json\u548c.xml\uff09\u6765\u6307\u5b9a\u60f3\u7528\u7684\u6570\u636e\u683c\u5f0f\u3002\u4f8b\u5982\uff0c\u5728\u6dfb\u52a0\u4e0a\u8ff0annotation\u540e\uff0c\u76f4\u63a5\u8bbf\u95eehttp://localhost:8888/users/1001.json\u5219\u8868\u793a\u7528json\u683c\u5f0f\uff0c\u76f4\u63a5\u8bbf\u95eehttp://localhost:8888/users/1002.xml\u5219\u8868\u793a\u7528xml\u683c\u5f0f\uff0c\u6bd4\u7528HTTP Header\u66f4\u7b80\u5355\u76f4\u89c2\u3002Twitter\u3001\u5fae\u535a\u7b49\u7684REST API\u90fd\u662f\u91c7\u7528\u8fd9\u79cd\u65b9\u5f0f\u3002 \u5982\u679c\u4f60\u65e2\u4e0d\u52a0HTTP header\uff0c\u4e5f\u4e0d\u52a0\u540e\u7f00\uff0c\u5219dubbo\u7684REST\u4f1a\u4f18\u5148\u542f\u7528\u5728\u4ee5\u4e0aannotation\u5b9a\u4e49\u4e2d\u6392\u4f4d\u6700\u9760\u524d\u7684\u90a3\u79cd\u6570\u636e\u683c\u5f0f\u3002 \u6ce8\u610f\uff1a\u8fd9\u91cc\u8981\u652f\u6301XML\u683c\u5f0f\u6570\u636e\uff0c\u5728annotation\u4e2d\u65e2\u53ef\u4ee5\u7528MediaType.TEXT_XML\uff0c\u4e5f\u53ef\u4ee5\u7528MediaType.APPLICATION_XML\uff0c\u4f46\u662fTEXT_XML\u662f\u66f4\u5e38\u7528\u7684\uff0c\u5e76\u4e14\u5982\u679c\u8981\u5229\u7528\u4e0a\u8ff0\u7684URL\u540e\u7f00\u65b9\u5f0f\u6765\u6307\u5b9a\u6570\u636e\u683c\u5f0f\uff0c\u53ea\u80fd\u914d\u7f6e\u4e3aTEXT_XML\u624d\u80fd\u751f\u6548\u3002 \u4e2d\u6587\u5b57\u7b26\u652f\u6301 \u4e3a\u4e86\u5728dubbo REST\u4e2d\u6b63\u5e38\u8f93\u51fa\u4e2d\u6587\u5b57\u7b26\uff0c\u548c\u901a\u5e38\u7684Java web\u5e94\u7528\u4e00\u6837\uff0c\u6211\u4eec\u9700\u8981\u5c06HTTP\u54cd\u5e94\u7684contentType\u8bbe\u7f6e\u4e3aUTF-8\u7f16\u7801\u3002 \u57fa\u4e8eJAX-RS\u7684\u6807\u51c6\u7528\u6cd5\uff0c\u6211\u4eec\u53ea\u9700\u8981\u505a\u5982\u4e0bannotation\u914d\u7f6e\u5373\u53ef\uff1a @Produces({ application/json; charset=UTF-8 , text/xml; charset=UTF-8 }) User getUser(@PathParam( id ) Long id); \u4e3a\u4e86\u65b9\u4fbf\u7528\u6237\uff0c\u6211\u4eec\u5728dubbo REST\u4e2d\u76f4\u63a5\u6dfb\u52a0\u4e86\u4e00\u4e2a\u652f\u6301\u7c7b\uff0c\u6765\u5b9a\u4e49\u4ee5\u4e0a\u7684\u5e38\u91cf\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\uff0c\u51cf\u5c11\u51fa\u9519\u7684\u53ef\u80fd\u6027\u3002 @Produces({ContentType.APPLICATION_JSON_UTF_8, ContentType.TEXT_XML_UTF_8}) User getUser(@PathParam( id ) Long id); XML\u6570\u636e\u683c\u5f0f\u7684\u989d\u5916\u8981\u6c42 \u7531\u4e8eJAX-RS\u7684\u5b9e\u73b0\u4e00\u822c\u90fd\u7528\u6807\u51c6\u7684JAXB\uff08Java API for XML Binding\uff09\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316XML\u683c\u5f0f\u6570\u636e\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e3a\u6bcf\u4e00\u4e2a\u8981\u7528XML\u4f20\u8f93\u7684\u5bf9\u8c61\u6dfb\u52a0\u4e00\u4e2a\u7c7b\u7ea7\u522b\u7684JAXB annotation\uff0c\u5426\u5219\u5e8f\u5217\u5316\u5c06\u62a5\u9519\u3002\u4f8b\u5982\u4e3agetUser()\u4e2d\u8fd4\u56de\u7684User\u6dfb\u52a0\u5982\u4e0b\uff1a @XmlRootElement public class User implements Serializable { // ... } \u6b64\u5916\uff0c\u5982\u679cservice\u65b9\u6cd5\u4e2d\u7684\u8fd4\u56de\u503c\u662fJava\u7684 primitive\u7c7b\u578b\uff08\u5982int\uff0clong\uff0cfloat\uff0cdouble\u7b49\uff09\uff0c\u6700\u597d\u4e3a\u5b83\u4eec\u6dfb\u52a0\u4e00\u5c42wrapper\u5bf9\u8c61\uff0c\u56e0\u4e3aJAXB\u4e0d\u80fd\u76f4\u63a5\u5e8f\u5217\u5316primitive\u7c7b\u578b\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u60f3\u8ba9\u524d\u8ff0\u7684registerUser()\u65b9\u6cd5\u8fd4\u56de\u670d\u52a1\u5668\u7aef\u4e3a\u7528\u6237\u751f\u6210\u7684ID\u53f7\uff1a long registerUser(User user); \u7531\u4e8eprimitive\u7c7b\u578b\u4e0d\u88abJAXB\u5e8f\u5217\u5316\u652f\u6301\uff0c\u6240\u4ee5\u6dfb\u52a0\u4e00\u4e2awrapper\u5bf9\u8c61\uff1a @XmlRootElement public class RegistrationResult implements Serializable { private Long id; public RegistrationResult() { } public RegistrationResult(Long id) { this.id = id; } public Long getId() { return id; } public void setId(Long id) { this.id = id; } } \u5e76\u4fee\u6539service\u65b9\u6cd5\uff1a RegistrationResult registerUser(User user); \u8fd9\u6837\u4e0d\u4f46\u80fd\u591f\u89e3\u51b3XML\u5e8f\u5217\u5316\u7684\u95ee\u9898\uff0c\u800c\u4e14\u4f7f\u5f97\u8fd4\u56de\u7684\u6570\u636e\u90fd\u7b26\u5408XML\u548cJSON\u7684\u89c4\u8303\u3002\u4f8b\u5982\uff0c\u5728JSON\u4e2d\uff0c\u8fd4\u56de\u7684\u5c06\u662f\u5982\u4e0b\u5f62\u5f0f\uff1a { id : 1001} \u5982\u679c\u4e0d\u52a0wrapper\uff0cJSON\u8fd4\u56de\u503c\u5c06\u76f4\u63a5\u662f 1001 \u800c\u5728XML\u4e2d\uff0c\u52a0wrapper\u540e\u8fd4\u56de\u503c\u5c06\u662f\uff1a registrationResult id 1002 /id /registrationResult \u8fd9\u79cdwrapper\u5bf9\u8c61\u5176\u5b9e\u5229\u7528\u6240\u8c13Data Transfer Object\uff08DTO\uff09\u6a21\u5f0f\uff0c\u91c7\u7528DTO\u8fd8\u80fd\u5bf9\u4f20\u8f93\u6570\u636e\u505a\u66f4\u591a\u6709\u7528\u7684\u5b9a\u5236\u3002 \u5b9a\u5236\u5e8f\u5217\u5316 \u5982\u4e0a\u6240\u8ff0\uff0cREST\u7684\u5e95\u5c42\u5b9e\u73b0\u4f1a\u5728service\u7684\u5bf9\u8c61\u548cJSON/XML\u6570\u636e\u683c\u5f0f\u4e4b\u95f4\u81ea\u52a8\u505a\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u3002\u4f46\u6709\u4e9b\u573a\u666f\u4e0b\uff0c\u5982\u679c\u89c9\u5f97\u8fd9\u79cd\u81ea\u52a8\u8f6c\u6362\u4e0d\u6ee1\u8db3\u8981\u6c42\uff0c\u53ef\u4ee5\u5bf9\u5176\u505a\u5b9a\u5236\u3002 Dubbo\u4e2d\u7684REST\u5b9e\u73b0\u662f\u7528JAXB\u505aXML\u5e8f\u5217\u5316\uff0c\u7528Jackson\u505aJSON\u5e8f\u5217\u5316\uff0c\u6240\u4ee5\u5728\u5bf9\u8c61\u4e0a\u6dfb\u52a0JAXB\u6216Jackson\u7684annotation\u5373\u53ef\u4ee5\u5b9a\u5236\u6620\u5c04\u3002 \u4f8b\u5982\uff0c\u5b9a\u5236\u5bf9\u8c61\u5c5e\u6027\u6620\u5c04\u5230XML\u5143\u7d20\u7684\u540d\u5b57\uff1a @XmlRootElement @XmlAccessorType(XmlAccessType.FIELD) public class User implements Serializable { @XmlElement(name= username ) private String name; } \u5b9a\u5236\u5bf9\u8c61\u5c5e\u6027\u6620\u5c04\u5230JSON\u5b57\u6bb5\u7684\u540d\u5b57\uff1a public class User implements Serializable { @JsonProperty( username ) private String name; } \u66f4\u591a\u8d44\u6599\u8bf7\u53c2\u8003JAXB\u548cJackson\u7684\u5b98\u65b9\u6587\u6863\uff0c\u6216\u81ea\u884cgoogle\u3002 \u914d\u7f6eREST Server\u7684\u5b9e\u73b0 \u76ee\u524d\u5728dubbo\u4e2d\uff0c\u6211\u4eec\u652f\u63015\u79cd\u5d4c\u5165\u5f0frest server\u7684\u5b9e\u73b0\uff0c\u5e76\u540c\u65f6\u652f\u6301\u91c7\u7528\u5916\u90e8\u5e94\u7528\u670d\u52a1\u5668\u6765\u505arest server\u7684\u5b9e\u73b0\u3002rest server\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u914d\u7f6e\u5b9e\u73b0\uff1a dubbo:protocol name= rest server= jetty / \u4ee5\u4e0a\u914d\u7f6e\u9009\u7528\u4e86\u5d4c\u5165\u5f0f\u7684jetty\u6765\u505arest server\uff0c\u540c\u65f6\uff0c\u5982\u679c\u4e0d\u914d\u7f6eserver\u5c5e\u6027\uff0crest\u534f\u8bae\u9ed8\u8ba4\u4e5f\u662f\u9009\u7528jetty\u3002jetty\u662f\u975e\u5e38\u6210\u719f\u7684java servlet\u5bb9\u5668\uff0c\u5e76\u548cdubbo\u5df2\u7ecf\u6709\u8f83\u597d\u7684\u96c6\u6210\uff08\u76ee\u524d5\u79cd\u5d4c\u5165\u5f0fserver\u4e2d\u53ea\u6709jetty\u548c\u540e\u9762\u6240\u8ff0\u7684tomcat\u3001tjws\uff0c\u4e0edubbo\u76d1\u63a7\u7cfb\u7edf\u7b49\u5b8c\u6210\u4e86\u65e0\u7f1d\u7684\u96c6\u6210\uff09\uff0c\u6240\u4ee5\uff0c\u5982\u679c\u4f60\u7684dubbo\u7cfb\u7edf\u662f\u5355\u72ec\u542f\u52a8\u7684\u8fdb\u7a0b\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u9ed8\u8ba4\u91c7\u7528jetty\u5373\u53ef\u3002 dubbo:protocol name= rest server= tomcat / \u4ee5\u4e0a\u914d\u7f6e\u9009\u7528\u4e86\u5d4c\u5165\u5f0f\u7684tomcat\u6765\u505arest server\u3002\u5728\u5d4c\u5165\u5f0ftomcat\u4e0a\uff0cREST\u7684\u6027\u80fd\u6bd4jetty\u4e0a\u8981\u597d\u5f97\u591a\uff08\u53c2\u89c1\u540e\u9762\u7684\u57fa\u51c6\u6d4b\u8bd5\uff09\uff0c\u5efa\u8bae\u5728\u9700\u8981\u9ad8\u6027\u80fd\u7684\u573a\u666f\u4e0b\u91c7\u7528tomcat\u3002 dubbo:protocol name= rest server= netty / \u4ee5\u4e0a\u914d\u7f6e\u9009\u7528\u5d4c\u5165\u5f0f\u7684netty\u6765\u505arest server\u3002\uff08TODO more contents to add\uff09 dubbo:protocol name= rest server= tjws / (tjws is now deprecated) dubbo:protocol name= rest server= sunhttp / \u4ee5\u4e0a\u914d\u7f6e\u9009\u7528\u5d4c\u5165\u5f0f\u7684tjws\u6216Sun HTTP server\u6765\u505arest server\u3002\u8fd9\u4e24\u4e2aserver\u5b9e\u73b0\u975e\u5e38\u8f7b\u91cf\u7ea7\uff0c\u975e\u5e38\u65b9\u4fbf\u5728\u96c6\u6210\u6d4b\u8bd5\u4e2d\u5feb\u901f\u542f\u52a8\u4f7f\u7528\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u5728\u8d1f\u8377\u4e0d\u9ad8\u7684\u751f\u4ea7\u73af\u5883\u4e2d\u4f7f\u7528\u3002 \u6ce8\uff1atjws\u76ee\u524d\u5df2\u7ecf\u88abdeprecated\u6389\u4e86\uff0c\u56e0\u4e3a\u5b83\u4e0d\u80fd\u5f88\u597d\u7684\u548cservlet 3.1 API\u5de5\u4f5c\u3002 \u5982\u679c\u4f60\u7684dubbo\u7cfb\u7edf\u4e0d\u662f\u5355\u72ec\u542f\u52a8\u7684\u8fdb\u7a0b\uff0c\u800c\u662f\u90e8\u7f72\u5230\u4e86Java\u5e94\u7528\u670d\u52a1\u5668\u4e2d\uff0c\u5219\u5efa\u8bae\u4f60\u91c7\u7528\u4ee5\u4e0b\u914d\u7f6e\uff1a dubbo:protocol name= rest server= servlet / \u901a\u8fc7\u5c06server\u8bbe\u7f6e\u4e3aservlet\uff0cdubbo\u5c06\u91c7\u7528\u5916\u90e8\u5e94\u7528\u670d\u52a1\u5668\u7684servlet\u5bb9\u5668\u6765\u505arest server\u3002\u540c\u65f6\uff0c\u8fd8\u8981\u5728dubbo\u7cfb\u7edf\u7684web.xml\u4e2d\u6dfb\u52a0\u5982\u4e0b\u914d\u7f6e\uff1a web-app context-param param-name contextConfigLocation /param-name param-value /WEB-INF/classes/META-INF/spring/dubbo-demo-provider.xml /param-value /context-param listener listener-class org.apache.dubbo.remoting.http.servlet.BootstrapListener /listener-class /listener listener listener-class org.springframework.web.context.ContextLoaderListener /listener-class /listener servlet servlet-name dispatcher /servlet-name servlet-class org.apache.dubbo.remoting.http.servlet.DispatcherServlet /servlet-class load-on-startup 1 /load-on-startup /servlet servlet-mapping servlet-name dispatcher /servlet-name url-pattern /* /url-pattern /servlet-mapping /web-app \u5373\u5fc5\u987b\u5c06dubbo\u7684BootstrapListener\u548cDispatherServlet\u6dfb\u52a0\u5230web.xml\uff0c\u4ee5\u5b8c\u6210dubbo\u7684REST\u529f\u80fd\u4e0e\u5916\u90e8servlet\u5bb9\u5668\u7684\u96c6\u6210\u3002 \u6ce8\u610f\uff1a\u5982\u679c\u4f60\u662f\u7528spring\u7684ContextLoaderListener\u6765\u52a0\u8f7dspring\uff0c\u5219\u5fc5\u987b\u4fdd\u8bc1BootstrapListener\u914d\u7f6e\u5728ContextLoaderListener\u4e4b\u524d\uff0c\u5426\u5219dubbo\u521d\u59cb\u5316\u4f1a\u51fa\u9519\u3002 \u5176\u5b9e\uff0c\u8fd9\u79cd\u573a\u666f\u4e0b\u4f60\u4f9d\u7136\u53ef\u4ee5\u575a\u6301\u7528\u5d4c\u5165\u5f0fserver\uff0c\u4f46\u5916\u90e8\u5e94\u7528\u670d\u52a1\u5668\u7684servlet\u5bb9\u5668\u5f80\u5f80\u6bd4\u5d4c\u5165\u5f0fserver\u66f4\u52a0\u5f3a\u5927\uff08\u7279\u522b\u662f\u5982\u679c\u4f60\u662f\u90e8\u7f72\u5230\u66f4\u5065\u58ee\u66f4\u53ef\u4f38\u7f29\u7684WebLogic\uff0cWebSphere\u7b49\uff09\uff0c\u53e6\u5916\u6709\u65f6\u4e5f\u4fbf\u4e8e\u5728\u5e94\u7528\u670d\u52a1\u5668\u505a\u7edf\u4e00\u7ba1\u7406\u3001\u76d1\u63a7\u7b49\u7b49\u3002 \u83b7\u53d6\u4e0a\u4e0b\u6587\uff08Context\uff09\u4fe1\u606f \u5728\u8fdc\u7a0b\u8c03\u7528\u4e2d\uff0c\u503c\u5f97\u83b7\u53d6\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u53ef\u80fd\u6709\u5f88\u591a\u79cd\uff0c\u8fd9\u91cc\u7279\u522b\u4ee5\u83b7\u53d6\u5ba2\u6237\u7aefIP\u4e3a\u4f8b\u3002 \u5728dubbo\u7684REST\u4e2d\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u65b9\u5f0f\u83b7\u53d6\u5ba2\u6237\u7aefIP\u3002 \u7b2c\u4e00\u79cd\u65b9\u5f0f\uff0c\u7528JAX-RS\u6807\u51c6\u7684@Context annotation\uff1a public User getUser(@PathParam( id ) Long id, @Context HttpServletRequest request) { System.out.println( Client address is + request.getRemoteAddr()); } \u7528Context\u4fee\u9970getUser()\u7684\u4e00\u4e2a\u65b9\u6cd5\u53c2\u6570\u540e\uff0c\u5c31\u53ef\u4ee5\u5c06\u5f53\u524d\u7684HttpServletRequest\u6ce8\u5165\u8fdb\u6765\uff0c\u7136\u540e\u76f4\u63a5\u8c03\u7528servlet api\u83b7\u53d6IP\u3002 \u6ce8\u610f\uff1a\u8fd9\u79cd\u65b9\u5f0f\u53ea\u80fd\u5728\u5c06server\u8bbe\u7f6e\u4e3a tjws\u3001tomcat\u3001jetty \u6216\u8005 servlet \u7684\u65f6\u5019\u624d\u80fd\u5de5\u4f5c\uff0c\u56e0\u4e3a\u53ea\u6709\u8fd9\u51e0\u79cd server \u7684\u5b9e\u73b0\u624d\u63d0\u4f9b\u4e86 servlet \u5bb9\u5668\u3002\u53e6\u5916\uff0c\u6807\u51c6\u7684JAX-RS\u8fd8\u652f\u6301\u7528@Context\u4fee\u9970service\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u5b57\u6bb5\u6765\u83b7\u53d6HttpServletRequest\uff0c\u4f46\u5728dubbo\u4e2d\u6211\u4eec\u6ca1\u6709\u5bf9\u6b64\u4f5c\u51fa\u652f\u6301\u3002 \u7b2c\u4e8c\u79cd\u65b9\u5f0f\uff0c\u7528dubbo\u4e2d\u5e38\u7528\u7684RpcContext\uff1a public User getUser(@PathParam( id ) Long id) { System.out.println( Client address is + RpcContext.getContext().getRemoteAddressString()); } \u6ce8\u610f\uff1a\u8fd9\u79cd\u65b9\u5f0f\u53ea\u80fd\u5728\u8bbe\u7f6eserver=\"jetty\"\u6216\u8005server=\"tomcat\"\u6216\u8005server=\"servlet\"\u6216\u8005server=\"tjws\"\u7684\u65f6\u5019\u624d\u80fd\u5de5\u4f5c\u3002\u53e6\u5916\uff0c\u76ee\u524ddubbo\u7684RpcContext\u662f\u4e00\u79cd\u6bd4\u8f83\u6709\u4fb5\u5165\u6027\u7684\u7528\u6cd5\uff0c\u672a\u6765\u6211\u4eec\u5f88\u53ef\u80fd\u4f1a\u505a\u51fa\u91cd\u6784\u3002 \u5982\u679c\u4f60\u60f3\u4fdd\u6301\u4f60\u7684\u9879\u76ee\u5bf9JAX-RS\u7684\u517c\u5bb9\u6027\uff0c\u672a\u6765\u8131\u79bbdubbo\u4e5f\u53ef\u4ee5\u8fd0\u884c\uff0c\u8bf7\u9009\u62e9\u7b2c\u4e00\u79cd\u65b9\u5f0f\u3002\u5982\u679c\u4f60\u60f3\u8981\u66f4\u4f18\u96c5\u7684\u670d\u52a1\u63a5\u53e3\u5b9a\u4e49\uff0c\u8bf7\u9009\u7528\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u3002 \u6b64\u5916\uff0c\u5728\u6700\u65b0\u7684dubbo rest\u4e2d\uff0c\u8fd8\u652f\u6301\u901a\u8fc7RpcContext\u6765\u83b7\u53d6HttpServletRequest\u548cHttpServletResponse\uff0c\u4ee5\u63d0\u4f9b\u66f4\u5927\u7684\u7075\u6d3b\u6027\u6765\u65b9\u4fbf\u7528\u6237\u5b9e\u73b0\u67d0\u4e9b\u590d\u6742\u529f\u80fd\uff0c\u6bd4\u5982\u5728dubbo\u6807\u51c6\u7684filter\u4e2d\u8bbf\u95eeHTTP Header\u3002\u7528\u6cd5\u793a\u4f8b\u5982\u4e0b\uff1a if (RpcContext.getContext().getRequest() != null RpcContext.getContext().getRequest() instanceof HttpServletRequest) { System.out.println( Client address is + ((HttpServletRequest) RpcContext.getContext().getRequest()).getRemoteAddr()); } if (RpcContext.getContext().getResponse() != null RpcContext.getContext().getResponse() instanceof HttpServletResponse) { System.out.println( Response object from RpcContext: + RpcContext.getContext().getResponse()); } \u6ce8\u610f\uff1a\u4e3a\u4e86\u4fdd\u6301\u534f\u8bae\u7684\u4e2d\u7acb\u6027\uff0cRpcContext.getRequest()\u548cRpcContext.getResponse()\u8fd4\u56de\u7684\u4ec5\u4ec5\u662f\u4e00\u4e2aObject\u7c7b\uff0c\u800c\u4e14\u53ef\u80fd\u4e3anull\u3002\u6240\u4ee5\uff0c\u4f60\u5fc5\u987b\u81ea\u5df1\u505anull\u548c\u7c7b\u578b\u7684\u68c0\u67e5\u3002 \u6ce8\u610f\uff1a\u53ea\u6709\u5728\u8bbe\u7f6eserver=\"jetty\"\u6216\u8005server=\"tomcat\"\u6216\u8005server=\"servlet\"\u7684\u65f6\u5019\uff0c\u4f60\u624d\u80fd\u901a\u8fc7\u4ee5\u4e0a\u65b9\u6cd5\u6b63\u786e\u7684\u5f97\u5230HttpServletRequest\u548cHttpServletResponse\uff0c\u56e0\u4e3a\u53ea\u6709\u8fd9\u51e0\u79cdserver\u5b9e\u73b0\u4e86servlet\u5bb9\u5668\u3002 \u4e3a\u4e86\u7b80\u5316\u7f16\u7a0b\uff0c\u5728\u6b64\u4f60\u4e5f\u53ef\u4ee5\u7528\u6cdb\u578b\u7684\u65b9\u5f0f\u6765\u76f4\u63a5\u83b7\u53d6\u7279\u5b9a\u7c7b\u578b\u7684request/response\uff1a if (RpcContext.getContext().getRequest(HttpServletRequest.class) != null) { System.out.println( Client address is + RpcContext.getContext().getRequest(HttpServletRequest.class).getRemoteAddr()); } if (RpcContext.getContext().getResponse(HttpServletResponse.class) != null) { System.out.println( Response object from RpcContext: + RpcContext.getContext().getResponse(HttpServletResponse.class)); } \u5982\u679crequest/response\u4e0d\u7b26\u5408\u6307\u5b9a\u7684\u7c7b\u578b\uff0c\u8fd9\u91cc\u4e5f\u4f1a\u8fd4\u56denull\u3002 \u914d\u7f6e\u7aef\u53e3\u53f7\u548cContext Path dubbo\u4e2d\u7684rest\u534f\u8bae\u9ed8\u8ba4\u5c06\u91c7\u752880\u7aef\u53e3\uff0c\u5982\u679c\u60f3\u4fee\u6539\u7aef\u53e3\uff0c\u76f4\u63a5\u914d\u7f6e\uff1a dubbo:protocol name= rest port= 8888 / \u53e6\u5916\uff0c\u5982\u524d\u6240\u8ff0\uff0c\u6211\u4eec\u53ef\u4ee5\u7528@Path\u6765\u914d\u7f6e\u5355\u4e2arest\u670d\u52a1\u7684URL\u76f8\u5bf9\u8def\u5f84\u3002\u4f46\u5176\u5b9e\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u6240\u6709rest\u670d\u52a1\u90fd\u9002\u7528\u7684\u57fa\u7840\u76f8\u5bf9\u8def\u5f84\uff0c\u5373java web\u5e94\u7528\u4e2d\u5e38\u8bf4\u7684context path\u3002 \u53ea\u9700\u8981\u6dfb\u52a0\u5982\u4e0bcontextpath\u5c5e\u6027\u5373\u53ef\uff1a dubbo:protocol name= rest port= 8888 contextpath= services / \u4ee5\u524d\u9762\u4ee3\u7801\u4e3a\u4f8b\uff1a @Path( /users ) public class UserServiceImpl implements UserService { @POST @Path( /register ) @Consumes({MediaType.APPLICATION_JSON}) public void registerUser(User user) { // save the user... } } \u73b0\u5728registerUser()\u7684\u5b8c\u6574\u8bbf\u95ee\u8def\u5f84\u4e3a\uff1a http://localhost:8888/services/users/register \u6ce8\u610f\uff1a\u5982\u679c\u4f60\u662f\u9009\u7528\u5916\u90e8\u5e94\u7528\u670d\u52a1\u5668\u505arest server\uff0c\u5373\u914d\u7f6e: dubbo:protocol name= rest port= 8888 contextpath= services server= servlet / \u5219\u5fc5\u987b\u4fdd\u8bc1\u8fd9\u91cc\u8bbe\u7f6e\u7684port\u3001contextpath\uff0c\u4e0e\u5916\u90e8\u5e94\u7528\u670d\u52a1\u5668\u7684\u7aef\u53e3\u3001DispatcherServlet\u7684\u4e0a\u4e0b\u6587\u8def\u5f84\uff08\u5373webapp path\u52a0\u4e0aservlet url pattern\uff09\u4fdd\u6301\u4e00\u81f4\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u90e8\u7f72\u4e3atomcat ROOT\u8def\u5f84\u7684\u5e94\u7528\uff0c\u8fd9\u91cc\u7684contextpath\u5fc5\u987b\u4e0eweb.xml\u4e2dDispacherServlet\u7684 url-pattern/ \u5b8c\u5168\u4e00\u81f4\uff1a servlet-mapping servlet-name dispatcher /servlet-name url-pattern /services/* /url-pattern /servlet-mapping \u914d\u7f6e\u7ebf\u7a0b\u6570\u548cIO\u7ebf\u7a0b\u6570 \u53ef\u4ee5\u4e3arest\u670d\u52a1\u914d\u7f6e\u7ebf\u7a0b\u6c60\u5927\u5c0f\uff1a dubbo:protocol name= rest threads= 500 / \u6ce8\u610f\uff1a\u76ee\u524d\u7ebf\u7a0b\u6c60\u7684\u8bbe\u7f6e\u53ea\u6709\u5f53server=\"netty\"\u6216\u8005server=\"jetty\"\u6216\u8005server=\"tomcat\"\u7684\u65f6\u5019\u624d\u80fd\u751f\u6548\u3002\u53e6\u5916\uff0c\u5982\u679cserver=\"servlet\"\uff0c\u7531\u4e8e\u8fd9\u65f6\u5019\u542f\u7528\u7684\u662f\u5916\u90e8\u5e94\u7528\u670d\u52a1\u5668\u505arest server\uff0c\u4e0d\u53d7dubbo\u63a7\u5236\uff0c\u6240\u4ee5\u8fd9\u91cc\u7684\u7ebf\u7a0b\u6c60\u8bbe\u7f6e\u4e5f\u65e0\u6548\u3002 \u5982\u679c\u662f\u9009\u7528netty server\uff0c\u8fd8\u53ef\u4ee5\u914d\u7f6eNetty\u7684IO worker\u7ebf\u7a0b\u6570\uff1a dubbo:protocol name= rest iothreads= 5 threads= 100 / \u914d\u7f6e\u957f\u8fde\u63a5 Dubbo\u4e2d\u7684rest\u670d\u52a1\u9ed8\u8ba4\u90fd\u662f\u91c7\u7528http\u957f\u8fde\u63a5\u6765\u8bbf\u95ee\uff0c\u5982\u679c\u60f3\u5207\u6362\u4e3a\u77ed\u8fde\u63a5\uff0c\u76f4\u63a5\u914d\u7f6e\uff1a dubbo:protocol name= rest keepalive= false / \u6ce8\u610f\uff1a\u8fd9\u4e2a\u914d\u7f6e\u76ee\u524d\u53ea\u5bf9server=\"netty\"\u548cserver=\"tomcat\"\u624d\u80fd\u751f\u6548\u3002 \u914d\u7f6e\u6700\u5927\u7684HTTP\u8fde\u63a5\u6570 \u53ef\u4ee5\u914d\u7f6e\u670d\u52a1\u5668\u63d0\u4f9b\u7aef\u6240\u80fd\u540c\u65f6\u63a5\u6536\u7684\u6700\u5927HTTP\u8fde\u63a5\u6570\uff0c\u9632\u6b62REST server\u88ab\u8fc7\u591a\u8fde\u63a5\u6491\u7206\uff0c\u4ee5\u4f5c\u4e3a\u4e00\u79cd\u6700\u57fa\u672c\u7684\u81ea\u6211\u4fdd\u62a4\u673a\u5236\uff1a dubbo:protocol name= rest accepts= 500 server= tomcat/ \u6ce8\u610f\uff1a\u8fd9\u4e2a\u914d\u7f6e\u76ee\u524d\u53ea\u5bf9server=\"tomcat\"\u624d\u80fd\u751f\u6548\u3002 \u914d\u7f6e\u6bcf\u4e2a\u6d88\u8d39\u7aef\u7684\u8d85\u65f6\u65f6\u95f4\u548cHTTP\u8fde\u63a5\u6570 \u5982\u679crest\u670d\u52a1\u7684\u6d88\u8d39\u7aef\u4e5f\u662fdubbo\u7cfb\u7edf\uff0c\u53ef\u4ee5\u50cf\u5176\u4ed6dubbo RPC\u673a\u5236\u4e00\u6837\uff0c\u914d\u7f6e\u6d88\u8d39\u7aef\u8c03\u7528\u6b64rest\u670d\u52a1\u7684\u6700\u5927\u8d85\u65f6\u65f6\u95f4\u4ee5\u53ca\u6bcf\u4e2a\u6d88\u8d39\u7aef\u6240\u80fd\u542f\u52a8\u7684\u6700\u5927HTTP\u8fde\u63a5\u6570\u3002 dubbo:service interface= xxx ref= xxx protocol= rest timeout= 2000 connections= 10 / \u5f53\u7136\uff0c\u7531\u4e8e\u8fd9\u4e2a\u914d\u7f6e\u9488\u5bf9\u6d88\u8d39\u7aef\u751f\u6548\u7684\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u5728\u6d88\u8d39\u7aef\u914d\u7f6e\uff1a dubbo:reference id= xxx interface= xxx timeout= 2000 connections= 10 / \u4f46\u662f\uff0c\u901a\u5e38\u6211\u4eec\u5efa\u8bae\u914d\u7f6e\u5728\u670d\u52a1\u63d0\u4f9b\u7aef\u63d0\u4f9b\u6b64\u7c7b\u914d\u7f6e\u3002\u6309\u7167dubbo\u5b98\u65b9\u6587\u6863\u7684\u8bf4\u6cd5\uff1a\u201cProvider\u4e0a\u5c3d\u91cf\u591a\u914d\u7f6eConsumer\u7aef\u7684\u5c5e\u6027\uff0c\u8ba9Provider\u5b9e\u73b0\u8005\u4e00\u5f00\u59cb\u5c31\u601d\u8003Provider\u670d\u52a1\u7279\u70b9\u3001\u670d\u52a1\u8d28\u91cf\u7684\u95ee\u9898\u3002\u201d \u6ce8\u610f\uff1a\u5982\u679cdubbo\u7684REST\u670d\u52a1\u662f\u53d1\u5e03\u7ed9\u975edubbo\u7684\u5ba2\u6237\u7aef\u4f7f\u7528\uff0c\u5219\u8fd9\u91cc dubbo:service/ \u4e0a\u7684\u914d\u7f6e\u5b8c\u5168\u65e0\u6548\uff0c\u56e0\u4e3a\u8fd9\u79cd\u5ba2\u6237\u7aef\u4e0d\u53d7dubbo\u63a7\u5236\u3002 \u7528Annotation\u53d6\u4ee3\u90e8\u5206Spring XML\u914d\u7f6e \u4ee5\u4e0a\u6240\u6709\u7684\u8ba8\u8bba\u90fd\u662f\u57fa\u4e8edubbo\u5728spring\u4e2d\u7684xml\u914d\u7f6e\u3002\u4f46\u662f\uff0cdubbo/spring\u672c\u8eab\u4e5f\u652f\u6301\u7528annotation\u6765\u4f5c\u914d\u7f6e\uff0c\u6240\u4ee5\u6211\u4eec\u4e5f\u53ef\u4ee5\u6309dubbo\u5b98\u65b9\u6587\u6863\u4e2d\u7684\u6b65\u9aa4\uff0c\u628a\u76f8\u5173annotation\u52a0\u5230REST\u670d\u52a1\u7684\u5b9e\u73b0\u4e2d\uff0c\u53d6\u4ee3\u4e00\u4e9bxml\u914d\u7f6e\uff0c\u4f8b\u5982\uff1a @Service(protocol = rest ) @Path( /users ) public class UserServiceImpl implements UserService { @Autowired private UserRepository userRepository; @POST @Path( /register ) @Consumes({MediaType.APPLICATION_JSON}) public void registerUser(User user) { // save the user userRepository.save(user); } } annotation\u7684\u914d\u7f6e\u66f4\u7b80\u5355\u66f4\u7cbe\u786e\uff0c\u901a\u5e38\u4e5f\u66f4\u4fbf\u4e8e\u7ef4\u62a4\uff08\u5f53\u7136\u73b0\u4ee3IDE\u90fd\u53ef\u4ee5\u5728xml\u4e2d\u652f\u6301\u6bd4\u5982\u7c7b\u540d\u91cd\u6784\uff0c\u6240\u4ee5\u5c31\u8fd9\u91cc\u7684\u7279\u5b9a\u7528\u4f8b\u800c\u8a00\uff0cxml\u7684\u7ef4\u62a4\u6027\u4e5f\u5f88\u597d\uff09\u3002\u800cxml\u5bf9\u4ee3\u7801\u7684\u4fb5\u5165\u6027\u66f4\u5c0f\u4e00\u4e9b\uff0c\u5c24\u5176\u6709\u5229\u4e8e\u52a8\u6001\u4fee\u6539\u914d\u7f6e\uff0c\u7279\u522b\u662f\u6bd4\u5982\u4f60\u8981\u9488\u5bf9\u5355\u4e2a\u670d\u52a1\u914d\u7f6e\u8fde\u63a5\u8d85\u65f6\u65f6\u95f4\u3001\u6bcf\u5ba2\u6237\u7aef\u6700\u5927\u8fde\u63a5\u6570\u3001\u96c6\u7fa4\u7b56\u7565\u3001\u6743\u91cd\u7b49\u7b49\u3002\u53e6\u5916\uff0c\u7279\u522b\u5bf9\u590d\u6742\u5e94\u7528\u6216\u8005\u6a21\u5757\u6765\u8bf4\uff0cxml\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e2d\u5fc3\u70b9\u6765\u6db5\u76d6\u7684\u6240\u6709\u7ec4\u4ef6\u548c\u914d\u7f6e\uff0c\u66f4\u4e00\u76ee\u4e86\u7136\uff0c\u4e00\u822c\u66f4\u4fbf\u4e8e\u9879\u76ee\u957f\u65f6\u671f\u7684\u7ef4\u62a4\u3002 \u5f53\u7136\uff0c\u9009\u62e9\u54ea\u79cd\u914d\u7f6e\u65b9\u5f0f\u6ca1\u6709\u7edd\u5bf9\u7684\u4f18\u52a3\uff0c\u548c\u4e2a\u4eba\u7684\u504f\u597d\u4e5f\u4e0d\u65e0\u5173\u7cfb\u3002 \u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684Filter\u3001Interceptor\u7b49 Dubbo\u7684REST\u4e5f\u652f\u6301JAX-RS\u6807\u51c6\u7684Filter\u548cInterceptor\uff0c\u4ee5\u65b9\u4fbf\u5bf9REST\u7684\u8bf7\u6c42\u4e0e\u54cd\u5e94\u8fc7\u7a0b\u505a\u5b9a\u5236\u5316\u7684\u62e6\u622a\u5904\u7406\u3002 \u5176\u4e2d\uff0cFilter\u4e3b\u8981\u7528\u4e8e\u8bbf\u95ee\u548c\u8bbe\u7f6eHTTP\u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u53c2\u6570\u3001URI\u7b49\u7b49\u3002\u4f8b\u5982\uff0c\u8bbe\u7f6eHTTP\u54cd\u5e94\u7684cache header\uff1a public class CacheControlFilter implements ContainerResponseFilter { public void filter(ContainerRequestContext req, ContainerResponseContext res) { if (req.getMethod().equals( GET )) { res.getHeaders().add( Cache-Control , someValue ); } } } Interceptor\u4e3b\u8981\u7528\u4e8e\u8bbf\u95ee\u548c\u4fee\u6539\u8f93\u5165\u4e0e\u8f93\u51fa\u5b57\u8282\u6d41\uff0c\u4f8b\u5982\uff0c\u624b\u52a8\u6dfb\u52a0GZIP\u538b\u7f29\uff1a public class GZIPWriterInterceptor implements WriterInterceptor { @Override public void aroundWriteTo(WriterInterceptorContext context) throws IOException, WebApplicationException { OutputStream outputStream = context.getOutputStream(); context.setOutputStream(new GZIPOutputStream(outputStream)); context.proceed(); } } \u5728\u6807\u51c6JAX-RS\u5e94\u7528\u4e2d\uff0c\u6211\u4eec\u4e00\u822c\u662f\u4e3aFilter\u548cInterceptor\u6dfb\u52a0@Provider annotation\uff0c\u7136\u540eJAX-RS runtime\u4f1a\u81ea\u52a8\u53d1\u73b0\u5e76\u542f\u7528\u5b83\u4eec\u3002\u800c\u5728dubbo\u4e2d\uff0c\u6211\u4eec\u662f\u901a\u8fc7\u6dfb\u52a0XML\u914d\u7f6e\u7684\u65b9\u5f0f\u6765\u6ce8\u518cFilter\u548cInterceptor\uff1a dubbo:protocol name= rest port= 8888 extension= xxx.TraceInterceptor, xxx.TraceFilter / \u5728\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06Filter\u3001Interceptor\u548cDynamicFeature\u8fd9\u4e09\u79cd\u7c7b\u578b\u7684\u5bf9\u8c61\u90fd\u6dfb\u52a0\u5230 extension \u5c5e\u6027\u4e0a\uff0c\u591a\u4e2a\u4e4b\u95f4\u7528\u9017\u53f7\u5206\u9694\u3002\uff08DynamicFeature\u662f\u53e6\u4e00\u4e2a\u63a5\u53e3\uff0c\u53ef\u4ee5\u65b9\u4fbf\u6211\u4eec\u66f4\u52a8\u6001\u7684\u542f\u7528Filter\u548cInterceptor\uff0c\u611f\u5174\u8da3\u8bf7\u81ea\u884cgoogle\u3002\uff09 \u5f53\u7136\uff0cdubbo\u81ea\u8eab\u4e5f\u652f\u6301Filter\u7684\u6982\u5ff5\uff0c\u4f46\u6211\u4eec\u8fd9\u91cc\u8ba8\u8bba\u7684Filter\u548cInterceptor\u66f4\u52a0\u63a5\u8fd1\u534f\u8bae\u5b9e\u73b0\u7684\u5e95\u5c42\uff0c\u76f8\u6bd4dubbo\u7684filter\uff0c\u53ef\u4ee5\u505a\u66f4\u5e95\u5c42\u7684\u5b9a\u5236\u5316\u3002 \u6ce8\uff1a\u8fd9\u91cc\u7684XML\u5c5e\u6027\u53ebextension\uff0c\u800c\u4e0d\u662f\u53ebinterceptor\u6216\u8005filter\uff0c\u662f\u56e0\u4e3a\u9664\u4e86Interceptor\u548cFilter\uff0c\u672a\u6765\u6211\u4eec\u8fd8\u4f1a\u6dfb\u52a0\u66f4\u591a\u7684\u6269\u5c55\u7c7b\u578b\u3002 \u5982\u679cREST\u7684\u6d88\u8d39\u7aef\u4e5f\u662fdubbo\u7cfb\u7edf\uff08\u53c2\u89c1\u4e0b\u6587\u7684\u8ba8\u8bba\uff09\uff0c\u5219\u4e5f\u53ef\u4ee5\u7528\u7c7b\u4f3c\u65b9\u5f0f\u4e3a\u6d88\u8d39\u7aef\u914d\u7f6eInterceptor\u548cFilter\u3002\u4f46\u6ce8\u610f\uff0cJAX-RS\u4e2d\u6d88\u8d39\u7aef\u7684Filter\u548c\u63d0\u4f9b\u7aef\u7684Filter\u662f\u4e24\u79cd\u4e0d\u540c\u7684\u63a5\u53e3\u3002\u4f8b\u5982\u524d\u9762\u4f8b\u5b50\u4e2d\u670d\u52a1\u7aef\u662fContainerResponseFilter\u63a5\u53e3\uff0c\u800c\u6d88\u8d39\u7aef\u5bf9\u5e94\u7684\u662fClientResponseFilter: public class LoggingFilter implements ClientResponseFilter { public void filter(ClientRequestContext reqCtx, ClientResponseContext resCtx) throws IOException { System.out.println( status: + resCtx.getStatus()); System.out.println( date: + resCtx.getDate()); System.out.println( last-modified: + resCtx.getLastModified()); System.out.println( location: + resCtx.getLocation()); System.out.println( headers: ); for (Entry String, List String header : resCtx.getHeaders().entrySet()) { System.out.print( \\t + header.getKey() + : ); for (String value : header.getValue()) { System.out.print(value + , ); } System.out.print( \\n ); } System.out.println( media-type: + resCtx.getMediaType().getType()); } } \u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684Exception\u5904\u7406 Dubbo\u7684REST\u4e5f\u652f\u6301JAX-RS\u6807\u51c6\u7684ExceptionMapper\uff0c\u53ef\u4ee5\u7528\u6765\u5b9a\u5236\u7279\u5b9aexception\u53d1\u751f\u540e\u5e94\u8be5\u8fd4\u56de\u7684HTTP\u54cd\u5e94\u3002 public class CustomExceptionMapper implements ExceptionMapper NotFoundException { public Response toResponse(NotFoundException e) { return Response.status(Response.Status.NOT_FOUND).entity( Oops! the requested resource is not found! ).type( text/plain ).build(); } } \u548cInterceptor\u3001Filter\u7c7b\u4f3c\uff0c\u5c06\u5176\u6dfb\u52a0\u5230XML\u914d\u7f6e\u6587\u4ef6\u4e2d\u5373\u53ef\u542f\u7528\uff1a dubbo:protocol name= rest port= 8888 extension= xxx.CustomExceptionMapper / \u914d\u7f6eHTTP\u65e5\u5fd7\u8f93\u51fa Dubbo rest\u652f\u6301\u8f93\u51fa\u6240\u6709HTTP\u8bf7\u6c42/\u54cd\u5e94\u4e2d\u7684header\u5b57\u6bb5\u548cbody\u6d88\u606f\u4f53\u3002 \u5728XML\u914d\u7f6e\u4e2d\u6dfb\u52a0\u5982\u4e0b\u81ea\u5e26\u7684REST filter\uff1a dubbo:protocol name= rest port= 8888 extension= org.apache.dubbo.rpc.protocol.rest.support.LoggingFilter / \u7136\u540e\u914d\u7f6e\u5728logging\u914d\u7f6e\u4e2d\u81f3\u5c11\u4e3aorg.apache.dubbo.rpc.protocol.rest.support\u6253\u5f00INFO\u7ea7\u522b\u65e5\u5fd7\u8f93\u51fa\uff0c\u4f8b\u5982\uff0c\u5728log4j.xml\u4e2d\u914d\u7f6e\uff1a logger name= org.apache.dubbo.rpc.protocol.rest.support level value= INFO / appender-ref ref= CONSOLE / /logger \u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728ROOT logger\u6253\u5f00INFO\u7ea7\u522b\u65e5\u5fd7\u8f93\u51fa\uff1a root level value= INFO / appender-ref ref= CONSOLE / /root \u7136\u540e\u5728\u65e5\u5fd7\u4e2d\u4f1a\u6709\u7c7b\u4f3c\u5982\u4e0b\u7684\u5185\u5bb9\u8f93\u51fa\uff1a The HTTP headers are: accept: application/json;charset=UTF-8 accept-encoding: gzip, deflate connection: Keep-Alive content-length: 22 content-type: application/json host: 192.168.1.100:8888 user-agent: Apache-HttpClient/4.2.1 (java 1.5) The contents of request body is: { id :1, name : dang } \u6253\u5f00HTTP\u65e5\u5fd7\u8f93\u51fa\u540e\uff0c\u9664\u4e86\u6b63\u5e38\u65e5\u5fd7\u8f93\u51fa\u7684\u6027\u80fd\u5f00\u9500\u5916\uff0c\u4e5f\u4f1a\u5728\u6bd4\u5982HTTP\u8bf7\u6c42\u89e3\u6790\u65f6\u4ea7\u751f\u989d\u5916\u7684\u5f00\u9500\uff0c\u56e0\u4e3a\u9700\u8981\u5efa\u7acb\u989d\u5916\u7684\u5185\u5b58\u7f13\u51b2\u533a\u6765\u4e3a\u65e5\u5fd7\u7684\u8f93\u51fa\u505a\u6570\u636e\u51c6\u5907\u3002 \u8f93\u5165\u53c2\u6570\u7684\u6821\u9a8c dubbo\u7684rest\u652f\u6301\u91c7\u7528Java\u6807\u51c6\u7684bean validation annotation\uff08JSR 303)\u6765\u505a\u8f93\u5165\u6821\u9a8chttp://beanvalidation.org/ \u4e3a\u4e86\u548c\u5176\u4ed6dubbo\u8fdc\u7a0b\u8c03\u7528\u534f\u8bae\u4fdd\u6301\u4e00\u81f4\uff0c\u5728rest\u4e2d\u4f5c\u6821\u9a8c\u7684annotation\u5fc5\u987b\u653e\u5728\u670d\u52a1\u7684\u63a5\u53e3\u4e0a\uff0c\u4f8b\u5982\uff1a public interface UserService { User getUser(@Min(value=1L, message= User ID must be greater than 1 ) Long id); } \u5f53\u7136\uff0c\u5728\u5f88\u591a\u5176\u4ed6\u7684bean validation\u7684\u5e94\u7528\u573a\u666f\u90fd\u662f\u5c06annotation\u653e\u5230\u5b9e\u73b0\u7c7b\u800c\u4e0d\u662f\u63a5\u53e3\u4e0a\u3002\u628aannotation\u653e\u5728\u63a5\u53e3\u4e0a\u81f3\u5c11\u6709\u4e00\u4e2a\u597d\u5904\u662f\uff0cdubbo\u7684\u5ba2\u6237\u7aef\u53ef\u4ee5\u5171\u4eab\u8fd9\u4e2a\u63a5\u53e3\u7684\u4fe1\u606f\uff0cdubbo\u751a\u81f3\u4e0d\u9700\u8981\u505a\u8fdc\u7a0b\u8c03\u7528\uff0c\u5728\u672c\u5730\u5c31\u53ef\u4ee5\u5b8c\u6210\u8f93\u5165\u6821\u9a8c\u3002 \u7136\u540e\u6309\u7167dubbo\u7684\u6807\u51c6\u65b9\u5f0f\u5728XML\u914d\u7f6e\u4e2d\u6253\u5f00\u9a8c\u8bc1\uff1a dubbo:service interface=xxx.UserService ref= userService protocol= rest validation= true / \u5728dubbo\u7684\u5176\u4ed6\u5f88\u591a\u8fdc\u7a0b\u8c03\u7528\u534f\u8bae\u4e2d\uff0c\u5982\u679c\u8f93\u5165\u9a8c\u8bc1\u51fa\u9519\uff0c\u662f\u76f4\u63a5\u5c06 RpcException \u629b\u5411\u5ba2\u6237\u7aef\uff0c\u800c\u5728rest\u4e2d\u7531\u4e8e\u5ba2\u6237\u7aef\u7ecf\u5e38\u662f\u975edubbo\uff0c\u751a\u81f3\u975ejava\u7684\u7cfb\u7edf\uff0c\u6240\u4ee5\u4e0d\u4fbf\u76f4\u63a5\u629b\u51faJava\u5f02\u5e38\u3002\u56e0\u6b64\uff0c\u76ee\u524d\u6211\u4eec\u5c06\u6821\u9a8c\u9519\u8bef\u4ee5XML\u7684\u683c\u5f0f\u8fd4\u56de\uff1a violationReport constraintViolations path getUserArgument0 /path message User ID must be greater than 1 /message value 0 /value /constraintViolations /violationReport \u7a0d\u540e\u4e5f\u4f1a\u652f\u6301\u5176\u4ed6\u6570\u636e\u683c\u5f0f\u7684\u8fd4\u56de\u503c\u3002\u81f3\u4e8e\u5982\u4f55\u5bf9\u9a8c\u8bc1\u9519\u8bef\u6d88\u606f\u4f5c\u56fd\u9645\u5316\u5904\u7406\uff0c\u76f4\u63a5\u53c2\u8003bean validation\u7684\u76f8\u5173\u6587\u6863\u5373\u53ef\u3002 \u5982\u679c\u4f60\u8ba4\u4e3a\u9ed8\u8ba4\u7684\u6821\u9a8c\u9519\u8bef\u8fd4\u56de\u683c\u5f0f\u4e0d\u7b26\u5408\u4f60\u7684\u8981\u6c42\uff0c\u53ef\u4ee5\u5982\u4e0a\u9762\u7ae0\u8282\u6240\u8ff0\uff0c\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684ExceptionMapper\u6765\u81ea\u7531\u7684\u5b9a\u5236\u9519\u8bef\u8fd4\u56de\u683c\u5f0f\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2aExceptionMapper\u5fc5\u987b\u7528\u6cdb\u578b\u58f0\u660e\u6765\u6355\u83b7dubbo\u7684RpcException\uff0c\u624d\u80fd\u6210\u529f\u8986\u76d6dubbo rest\u9ed8\u8ba4\u7684\u5f02\u5e38\u5904\u7406\u7b56\u7565\u3002\u4e3a\u4e86\u7b80\u5316\u64cd\u4f5c\uff0c\u5176\u5b9e\u8fd9\u91cc\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u662f\u76f4\u63a5\u7ee7\u627fdubbo rest\u7684RpcExceptionMapper\uff0c\u5e76\u8986\u76d6\u5176\u4e2d\u5904\u7406\u6821\u9a8c\u5f02\u5e38\u7684\u65b9\u6cd5\u5373\u53ef\uff1a public class MyValidationExceptionMapper extends RpcExceptionMapper { protected Response handleConstraintViolationException(ConstraintViolationException cve) { ViolationReport report = new ViolationReport(); for (ConstraintViolation cv : cve.getConstraintViolations()) { report.addConstraintViolation(new RestConstraintViolation( cv.getPropertyPath().toString(), cv.getMessage(), cv.getInvalidValue() == null ? null : cv.getInvalidValue().toString())); } // \u91c7\u7528json\u8f93\u51fa\u4ee3\u66ffxml\u8f93\u51fa return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(report).type(ContentType.APPLICATION_JSON_UTF_8).build(); } } \u7136\u540e\u5c06\u8fd9\u4e2aExceptionMapper\u6dfb\u52a0\u5230XML\u914d\u7f6e\u4e2d\u5373\u53ef\uff1a dubbo:protocol name= rest port= 8888 extension= xxx.MyValidationExceptionMapper /","title":"rest://"},{"location":"user/references/protocol/rest/#rest","text":"\u57fa\u4e8e\u6807\u51c6\u7684Java REST API\u2014\u2014JAX-RS 2.0\uff08Java API for RESTful Web Services\u7684\u7b80\u5199\uff09\u5b9e\u73b0\u7684REST\u8c03\u7528\u652f\u6301","title":"rest://"},{"location":"user/references/protocol/rest/#_1","text":"\u5728dubbo\u4e2d\u5f00\u53d1\u4e00\u4e2aREST\u98ce\u683c\u7684\u670d\u52a1\u4f1a\u6bd4\u8f83\u7b80\u5355\uff0c\u4e0b\u9762\u4ee5\u4e00\u4e2a\u6ce8\u518c\u7528\u6237\u7684\u7b80\u5355\u670d\u52a1\u4e3a\u4f8b\u8bf4\u660e\u3002 \u8fd9\u4e2a\u670d\u52a1\u8981\u5b9e\u73b0\u7684\u529f\u80fd\u662f\u63d0\u4f9b\u5982\u4e0bURL\uff08\u6ce8\uff1a\u8fd9\u4e2aURL\u4e0d\u662f\u5b8c\u5168\u7b26\u5408REST\u7684\u98ce\u683c\uff0c\u4f46\u662f\u66f4\u7b80\u5355\u5b9e\u7528\uff09\uff1a http://localhost:8080/users/register \u800c\u4efb\u4f55\u5ba2\u6237\u7aef\u90fd\u53ef\u4ee5\u5c06\u5305\u542b\u7528\u6237\u4fe1\u606f\u7684JSON\u5b57\u7b26\u4e32POST\u5230\u4ee5\u4e0aURL\u6765\u5b8c\u6210\u7528\u6237\u6ce8\u518c\u3002 \u9996\u5148\uff0c\u5f00\u53d1\u670d\u52a1\u7684\u63a5\u53e3\uff1a public interface UserService { void registerUser(User user); } \u7136\u540e\uff0c\u5f00\u53d1\u670d\u52a1\u7684\u5b9e\u73b0\uff1a @Path( /users ) public class UserServiceImpl implements UserService { @POST @Path( /register ) @Consumes({MediaType.APPLICATION_JSON}) public void registerUser(User user) { // save the user... } } \u4e0a\u9762\u7684\u5b9e\u73b0\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u662f\u7531\u4e8e\u8be5 REST \u670d\u52a1\u662f\u8981\u53d1\u5e03\u5230\u6307\u5b9a URL \u4e0a\uff0c\u4f9b\u4efb\u610f\u8bed\u8a00\u7684\u5ba2\u6237\u7aef\u751a\u81f3\u6d4f\u89c8\u5668\u6765\u8bbf\u95ee\uff0c\u6240\u4ee5\u8fd9\u91cc\u989d\u5916\u6dfb\u52a0\u4e86\u51e0\u4e2a JAX-RS \u7684\u6807\u51c6 annotation \u6765\u505a\u76f8\u5173\u7684\u914d\u7f6e\u3002 @Path(\"/users\")\uff1a\u6307\u5b9a\u8bbf\u95eeUserService\u7684URL\u76f8\u5bf9\u8def\u5f84\u662f/users\uff0c\u5373http://localhost:8080/users @Path(\"/register\")\uff1a\u6307\u5b9a\u8bbf\u95eeregisterUser()\u65b9\u6cd5\u7684URL\u76f8\u5bf9\u8def\u5f84\u662f/register\uff0c\u518d\u7ed3\u5408\u4e0a\u4e00\u4e2a@Path\u4e3aUserService\u6307\u5b9a\u7684\u8def\u5f84\uff0c\u5219\u8c03\u7528UserService.register()\u7684\u5b8c\u6574\u8def\u5f84\u4e3ahttp://localhost:8080/users/register @POST\uff1a\u6307\u5b9a\u8bbf\u95eeregisterUser()\u7528HTTP POST\u65b9\u6cd5 @Consumes({MediaType.APPLICATION_JSON})\uff1a\u6307\u5b9aregisterUser()\u63a5\u6536JSON\u683c\u5f0f\u7684\u6570\u636e\u3002REST\u6846\u67b6\u4f1a\u81ea\u52a8\u5c06JSON\u6570\u636e\u53cd\u5e8f\u5217\u5316\u4e3aUser\u5bf9\u8c61 \u6700\u540e\uff0c\u5728spring\u914d\u7f6e\u6587\u4ef6\u4e2d\u6dfb\u52a0\u6b64\u670d\u52a1\uff0c\u5373\u5b8c\u6210\u6240\u6709\u670d\u52a1\u5f00\u53d1\u5de5\u4f5c\uff1a ```xml ## REST\u670d\u52a1\u63d0\u4f9b\u7aef\u8be6\u89e3 \u4e0b\u9762\u6211\u4eec\u6269\u5145\u201c\u5feb\u901f\u5165\u95e8\u201d\u4e2d\u7684UserService\uff0c\u8fdb\u4e00\u6b65\u5c55\u793a\u5728dubbo\u4e2dREST\u670d\u52a1\u63d0\u4f9b\u7aef\u7684\u5f00\u53d1\u8981\u70b9\u3002 ### HTTP POST/GET\u7684\u5b9e\u73b0 REST\u670d\u52a1\u4e2d\u867d\u7136\u5efa\u8bae\u4f7f\u7528HTTP\u534f\u8bae\u4e2d\u56db\u79cd\u6807\u51c6\u65b9\u6cd5POST\u3001DELETE\u3001PUT\u3001GET\u6765\u5206\u522b\u5b9e\u73b0\u5e38\u89c1\u7684\u201c\u589e\u5220\u6539\u67e5\u201d\uff0c\u4f46\u5b9e\u9645\u4e2d\uff0c\u6211\u4eec\u4e00\u822c\u60c5\u51b5\u76f4\u63a5\u7528POST\u6765\u5b9e\u73b0\u201c\u589e\u6539\u201d\uff0cGET\u6765\u5b9e\u73b0\u201c\u5220\u67e5\u201d\u5373\u53ef\uff08DELETE\u548cPUT\u751a\u81f3\u4f1a\u88ab\u4e00\u4e9b\u9632\u706b\u5899\u963b\u6321\uff09\u3002 \u524d\u9762\u5df2\u7ecf\u7b80\u5355\u6f14\u793a\u4e86POST\u7684\u5b9e\u73b0\uff0c\u5728\u6b64\uff0c\u6211\u4eec\u4e3aUserService\u6dfb\u52a0\u4e00\u4e2a\u83b7\u53d6\u6ce8\u518c\u7528\u6237\u8d44\u6599\u7684\u529f\u80fd\uff0c\u6765\u6f14\u793aGET\u7684\u5b9e\u73b0\u3002 \u8fd9\u4e2a\u529f\u80fd\u5c31\u662f\u8981\u5b9e\u73b0\u5ba2\u6237\u7aef\u901a\u8fc7\u8bbf\u95ee\u5982\u4e0b\u4e0d\u540cURL\u6765\u83b7\u53d6\u4e0d\u540cID\u7684\u7528\u6237\u8d44\u6599\uff1a http://localhost:8080/users/1001 http://localhost:8080/users/1002 http://localhost:8080/users/1003 \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5176\u4ed6\u5f62\u5f0f\u7684URL\u6765\u8bbf\u95ee\u4e0d\u540cID\u7684\u7528\u6237\u8d44\u6599\uff0c\u4f8b\u5982\uff1a http://localhost:8080/users/load?id=1001 JAX-RS\u672c\u8eab\u53ef\u4ee5\u652f\u6301\u6240\u6709\u8fd9\u4e9b\u5f62\u5f0f\u3002\u4f46\u662f\u4e0a\u9762\u90a3\u79cd\u5728URL\u8def\u5f84\u4e2d\u5305\u542b\u67e5\u8be2\u53c2\u6570\u7684\u5f62\u5f0f\uff08http://localhost:8080/users/1001\uff09 \u66f4\u7b26\u5408REST\u7684\u4e00\u822c\u4e60\u60ef\uff0c\u6240\u4ee5\u66f4\u63a8\u8350\u5927\u5bb6\u6765\u4f7f\u7528\u3002\u4e0b\u9762\u6211\u4eec\u5c31\u4e3aUserService\u6dfb\u52a0\u4e00\u4e2agetUser()\u65b9\u6cd5\u6765\u5b9e\u73b0\u8fd9\u79cd\u5f62\u5f0f\u7684URL\u8bbf\u95ee\uff1a ```java @GET @Path( /{id : \\\\d+} ) @Produces({MediaType.APPLICATION_JSON}) public User getUser(@PathParam( id ) Long id) { // ... } @GET\uff1a\u6307\u5b9a\u7528HTTP GET\u65b9\u6cd5\u8bbf\u95ee @Path(\"/{id : \\d+}\")\uff1a\u6839\u636e\u4e0a\u9762\u7684\u529f\u80fd\u9700\u6c42\uff0c\u8bbf\u95eegetUser()\u7684URL\u5e94\u5f53\u662f\u201chttp://localhost:8080/users/ + \u4efb\u610f\u6570\u5b57\"\uff0c\u5e76\u4e14\u8fd9\u4e2a\u6570\u5b57\u8981\u88ab\u505a\u4e3a\u53c2\u6570\u4f20\u5165getUser()\u65b9\u6cd5\u3002 \u8fd9\u91cc\u7684annotation\u914d\u7f6e\u4e2d\uff0c@Path\u4e2d\u95f4\u7684{id: xxx}\u6307\u5b9aURL\u76f8\u5bf9\u8def\u5f84\u4e2d\u5305\u542b\u4e86\u540d\u4e3aid\u53c2\u6570\uff0c\u800c\u5b83\u7684\u503c\u4e5f\u5c06\u88ab\u81ea\u52a8\u4f20\u9012\u7ed9\u4e0b\u9762\u7528@PathParam(\"id\")\u4fee\u9970\u7684\u65b9\u6cd5\u53c2\u6570id\u3002{id:\u540e\u9762\u7d27\u8ddf\u7684\\d+\u662f\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u6307\u5b9a\u4e86id\u53c2\u6570\u5fc5\u987b\u662f\u6570\u5b57\u3002 @Produces({MediaType.APPLICATION_JSON})\uff1a\u6307\u5b9agetUser()\u8f93\u51faJSON\u683c\u5f0f\u7684\u6570\u636e\u3002\u6846\u67b6\u4f1a\u81ea\u52a8\u5c06User\u5bf9\u8c61\u5e8f\u5217\u5316\u4e3aJSON\u6570\u636e\u3002","title":"\u5feb\u901f\u5165\u95e8"},{"location":"user/references/protocol/rest/#annotation","text":"\u5728Dubbo\u4e2d\u5f00\u53d1REST\u670d\u52a1\u4e3b\u8981\u90fd\u662f\u901a\u8fc7JAX-RS\u7684annotation\u6765\u5b8c\u6210\u914d\u7f6e\u7684\uff0c\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u90fd\u662f\u5c06annotation\u653e\u5728\u670d\u52a1\u7684\u5b9e\u73b0\u7c7b\u4e2d\u3002\u4f46\u5176\u5b9e\uff0c\u6211\u4eec\u5b8c\u5168\u4e5f\u53ef\u4ee5\u5c06annotation\u653e\u5230\u670d\u52a1\u7684\u63a5\u53e3\u4e0a\uff0c\u8fd9\u4e24\u79cd\u65b9\u5f0f\u662f\u5b8c\u5168\u7b49\u4ef7\u7684\uff0c\u4f8b\u5982\uff1a @Path( /users ) public interface UserService { @GET @Path( /{id : \\\\d+} ) @Produces({MediaType.APPLICATION_JSON}) User getUser(@PathParam( id ) Long id); } \u5728\u4e00\u822c\u5e94\u7528\u4e2d\uff0c\u6211\u4eec\u5efa\u8bae\u5c06annotation\u653e\u5230\u670d\u52a1\u5b9e\u73b0\u7c7b\uff0c\u8fd9\u6837annotation\u548cjava\u5b9e\u73b0\u4ee3\u7801\u4f4d\u7f6e\u66f4\u63a5\u8fd1\uff0c\u66f4\u4fbf\u4e8e\u5f00\u53d1\u548c\u7ef4\u62a4\u3002\u53e6\u5916\u66f4\u91cd\u8981\u7684\u662f\uff0c\u6211\u4eec\u4e00\u822c\u503e\u5411\u4e8e\u907f\u514d\u5bf9\u63a5\u53e3\u7684\u6c61\u67d3\uff0c\u4fdd\u6301\u63a5\u53e3\u7684\u7eaf\u51c0\u6027\u548c\u5e7f\u6cdb\u9002\u7528\u6027\u3002 \u4f46\u662f\uff0c\u5982\u540e\u6587\u6240\u8ff0\uff0c\u5982\u679c\u6211\u4eec\u8981\u7528dubbo\u76f4\u63a5\u5f00\u53d1\u7684\u6d88\u8d39\u7aef\u6765\u8bbf\u95ee\u6b64\u670d\u52a1\uff0c\u5219annotation\u5fc5\u987b\u653e\u5230\u63a5\u53e3\u4e0a\u3002 \u5982\u679c\u63a5\u53e3\u548c\u5b9e\u73b0\u7c7b\u90fd\u540c\u65f6\u6dfb\u52a0\u4e86annotation\uff0c\u5219\u5b9e\u73b0\u7c7b\u7684annotation\u914d\u7f6e\u4f1a\u751f\u6548\uff0c\u63a5\u53e3\u4e0a\u7684annotation\u88ab\u76f4\u63a5\u5ffd\u7565\u3002","title":"Annotation\u653e\u5728\u63a5\u53e3\u7c7b\u8fd8\u662f\u5b9e\u73b0\u7c7b"},{"location":"user/references/protocol/rest/#jsonxml","text":"\u5728dubbo\u4e2d\u5f00\u53d1\u7684REST\u670d\u52a1\u53ef\u4ee5\u540c\u65f6\u652f\u6301\u4f20\u8f93\u591a\u79cd\u683c\u5f0f\u7684\u6570\u636e\uff0c\u4ee5\u7ed9\u5ba2\u6237\u7aef\u63d0\u4f9b\u6700\u5927\u7684\u7075\u6d3b\u6027\u3002\u5176\u4e2d\u6211\u4eec\u76ee\u524d\u5bf9\u6700\u5e38\u7528\u7684JSON\u548cXML\u683c\u5f0f\u7279\u522b\u6dfb\u52a0\u4e86\u989d\u5916\u7684\u529f\u80fd\u3002 \u6bd4\u5982\uff0c\u6211\u4eec\u8981\u8ba9\u4e0a\u4f8b\u4e2d\u7684getUser()\u65b9\u6cd5\u652f\u6301\u5206\u522b\u8fd4\u56deJSON\u548cXML\u683c\u5f0f\u7684\u6570\u636e\uff0c\u53ea\u9700\u8981\u5728annotation\u4e2d\u540c\u65f6\u5305\u542b\u4e24\u79cd\u683c\u5f0f\u5373\u53ef\uff1a @Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_XML}) User getUser(@PathParam( id ) Long id); \u6216\u8005\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528\u5b57\u7b26\u4e32\uff08\u8fd8\u652f\u6301\u901a\u914d\u7b26\uff09\u8868\u793aMediaType\uff1a @Produces({ application/json , text/xml }) User getUser(@PathParam( id ) Long id); \u5982\u679c\u6240\u6709\u65b9\u6cd5\u90fd\u652f\u6301\u540c\u6837\u7c7b\u578b\u7684\u8f93\u5165\u8f93\u51fa\u6570\u636e\u683c\u5f0f\uff0c\u5219\u6211\u4eec\u65e0\u9700\u5728\u6bcf\u4e2a\u65b9\u6cd5\u4e0a\u505a\u914d\u7f6e\uff0c\u53ea\u9700\u8981\u5728\u670d\u52a1\u7c7b\u4e0a\u6dfb\u52a0annotation\u5373\u53ef\uff1a @Path( /users ) @Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_XML}) @Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_XML}) public class UserServiceImpl implements UserService { // ... } \u5728\u4e00\u4e2aREST\u670d\u52a1\u540c\u65f6\u5bf9\u591a\u79cd\u6570\u636e\u683c\u5f0f\u652f\u6301\u7684\u60c5\u51b5\u4e0b\uff0c\u6839\u636eJAX-RS\u6807\u51c6\uff0c\u4e00\u822c\u662f\u901a\u8fc7HTTP\u4e2d\u7684MIME header\uff08content-type\u548caccept\uff09\u6765\u6307\u5b9a\u5f53\u524d\u60f3\u7528\u7684\u662f\u54ea\u79cd\u683c\u5f0f\u7684\u6570\u636e\u3002 \u4f46\u662f\u5728dubbo\u4e2d\uff0c\u6211\u4eec\u8fd8\u81ea\u52a8\u652f\u6301\u76ee\u524d\u4e1a\u754c\u666e\u904d\u4f7f\u7528\u7684\u65b9\u5f0f\uff0c\u5373\u7528\u4e00\u4e2aURL\u540e\u7f00\uff08.json\u548c.xml\uff09\u6765\u6307\u5b9a\u60f3\u7528\u7684\u6570\u636e\u683c\u5f0f\u3002\u4f8b\u5982\uff0c\u5728\u6dfb\u52a0\u4e0a\u8ff0annotation\u540e\uff0c\u76f4\u63a5\u8bbf\u95eehttp://localhost:8888/users/1001.json\u5219\u8868\u793a\u7528json\u683c\u5f0f\uff0c\u76f4\u63a5\u8bbf\u95eehttp://localhost:8888/users/1002.xml\u5219\u8868\u793a\u7528xml\u683c\u5f0f\uff0c\u6bd4\u7528HTTP Header\u66f4\u7b80\u5355\u76f4\u89c2\u3002Twitter\u3001\u5fae\u535a\u7b49\u7684REST API\u90fd\u662f\u91c7\u7528\u8fd9\u79cd\u65b9\u5f0f\u3002 \u5982\u679c\u4f60\u65e2\u4e0d\u52a0HTTP header\uff0c\u4e5f\u4e0d\u52a0\u540e\u7f00\uff0c\u5219dubbo\u7684REST\u4f1a\u4f18\u5148\u542f\u7528\u5728\u4ee5\u4e0aannotation\u5b9a\u4e49\u4e2d\u6392\u4f4d\u6700\u9760\u524d\u7684\u90a3\u79cd\u6570\u636e\u683c\u5f0f\u3002 \u6ce8\u610f\uff1a\u8fd9\u91cc\u8981\u652f\u6301XML\u683c\u5f0f\u6570\u636e\uff0c\u5728annotation\u4e2d\u65e2\u53ef\u4ee5\u7528MediaType.TEXT_XML\uff0c\u4e5f\u53ef\u4ee5\u7528MediaType.APPLICATION_XML\uff0c\u4f46\u662fTEXT_XML\u662f\u66f4\u5e38\u7528\u7684\uff0c\u5e76\u4e14\u5982\u679c\u8981\u5229\u7528\u4e0a\u8ff0\u7684URL\u540e\u7f00\u65b9\u5f0f\u6765\u6307\u5b9a\u6570\u636e\u683c\u5f0f\uff0c\u53ea\u80fd\u914d\u7f6e\u4e3aTEXT_XML\u624d\u80fd\u751f\u6548\u3002","title":"JSON\u3001XML\u7b49\u591a\u6570\u636e\u683c\u5f0f\u7684\u652f\u6301"},{"location":"user/references/protocol/rest/#_2","text":"\u4e3a\u4e86\u5728dubbo REST\u4e2d\u6b63\u5e38\u8f93\u51fa\u4e2d\u6587\u5b57\u7b26\uff0c\u548c\u901a\u5e38\u7684Java web\u5e94\u7528\u4e00\u6837\uff0c\u6211\u4eec\u9700\u8981\u5c06HTTP\u54cd\u5e94\u7684contentType\u8bbe\u7f6e\u4e3aUTF-8\u7f16\u7801\u3002 \u57fa\u4e8eJAX-RS\u7684\u6807\u51c6\u7528\u6cd5\uff0c\u6211\u4eec\u53ea\u9700\u8981\u505a\u5982\u4e0bannotation\u914d\u7f6e\u5373\u53ef\uff1a @Produces({ application/json; charset=UTF-8 , text/xml; charset=UTF-8 }) User getUser(@PathParam( id ) Long id); \u4e3a\u4e86\u65b9\u4fbf\u7528\u6237\uff0c\u6211\u4eec\u5728dubbo REST\u4e2d\u76f4\u63a5\u6dfb\u52a0\u4e86\u4e00\u4e2a\u652f\u6301\u7c7b\uff0c\u6765\u5b9a\u4e49\u4ee5\u4e0a\u7684\u5e38\u91cf\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\uff0c\u51cf\u5c11\u51fa\u9519\u7684\u53ef\u80fd\u6027\u3002 @Produces({ContentType.APPLICATION_JSON_UTF_8, ContentType.TEXT_XML_UTF_8}) User getUser(@PathParam( id ) Long id);","title":"\u4e2d\u6587\u5b57\u7b26\u652f\u6301"},{"location":"user/references/protocol/rest/#xml","text":"\u7531\u4e8eJAX-RS\u7684\u5b9e\u73b0\u4e00\u822c\u90fd\u7528\u6807\u51c6\u7684JAXB\uff08Java API for XML Binding\uff09\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316XML\u683c\u5f0f\u6570\u636e\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e3a\u6bcf\u4e00\u4e2a\u8981\u7528XML\u4f20\u8f93\u7684\u5bf9\u8c61\u6dfb\u52a0\u4e00\u4e2a\u7c7b\u7ea7\u522b\u7684JAXB annotation\uff0c\u5426\u5219\u5e8f\u5217\u5316\u5c06\u62a5\u9519\u3002\u4f8b\u5982\u4e3agetUser()\u4e2d\u8fd4\u56de\u7684User\u6dfb\u52a0\u5982\u4e0b\uff1a @XmlRootElement public class User implements Serializable { // ... } \u6b64\u5916\uff0c\u5982\u679cservice\u65b9\u6cd5\u4e2d\u7684\u8fd4\u56de\u503c\u662fJava\u7684 primitive\u7c7b\u578b\uff08\u5982int\uff0clong\uff0cfloat\uff0cdouble\u7b49\uff09\uff0c\u6700\u597d\u4e3a\u5b83\u4eec\u6dfb\u52a0\u4e00\u5c42wrapper\u5bf9\u8c61\uff0c\u56e0\u4e3aJAXB\u4e0d\u80fd\u76f4\u63a5\u5e8f\u5217\u5316primitive\u7c7b\u578b\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u60f3\u8ba9\u524d\u8ff0\u7684registerUser()\u65b9\u6cd5\u8fd4\u56de\u670d\u52a1\u5668\u7aef\u4e3a\u7528\u6237\u751f\u6210\u7684ID\u53f7\uff1a long registerUser(User user); \u7531\u4e8eprimitive\u7c7b\u578b\u4e0d\u88abJAXB\u5e8f\u5217\u5316\u652f\u6301\uff0c\u6240\u4ee5\u6dfb\u52a0\u4e00\u4e2awrapper\u5bf9\u8c61\uff1a @XmlRootElement public class RegistrationResult implements Serializable { private Long id; public RegistrationResult() { } public RegistrationResult(Long id) { this.id = id; } public Long getId() { return id; } public void setId(Long id) { this.id = id; } } \u5e76\u4fee\u6539service\u65b9\u6cd5\uff1a RegistrationResult registerUser(User user); \u8fd9\u6837\u4e0d\u4f46\u80fd\u591f\u89e3\u51b3XML\u5e8f\u5217\u5316\u7684\u95ee\u9898\uff0c\u800c\u4e14\u4f7f\u5f97\u8fd4\u56de\u7684\u6570\u636e\u90fd\u7b26\u5408XML\u548cJSON\u7684\u89c4\u8303\u3002\u4f8b\u5982\uff0c\u5728JSON\u4e2d\uff0c\u8fd4\u56de\u7684\u5c06\u662f\u5982\u4e0b\u5f62\u5f0f\uff1a { id : 1001} \u5982\u679c\u4e0d\u52a0wrapper\uff0cJSON\u8fd4\u56de\u503c\u5c06\u76f4\u63a5\u662f 1001 \u800c\u5728XML\u4e2d\uff0c\u52a0wrapper\u540e\u8fd4\u56de\u503c\u5c06\u662f\uff1a registrationResult id 1002 /id /registrationResult \u8fd9\u79cdwrapper\u5bf9\u8c61\u5176\u5b9e\u5229\u7528\u6240\u8c13Data Transfer Object\uff08DTO\uff09\u6a21\u5f0f\uff0c\u91c7\u7528DTO\u8fd8\u80fd\u5bf9\u4f20\u8f93\u6570\u636e\u505a\u66f4\u591a\u6709\u7528\u7684\u5b9a\u5236\u3002","title":"XML\u6570\u636e\u683c\u5f0f\u7684\u989d\u5916\u8981\u6c42"},{"location":"user/references/protocol/rest/#_3","text":"\u5982\u4e0a\u6240\u8ff0\uff0cREST\u7684\u5e95\u5c42\u5b9e\u73b0\u4f1a\u5728service\u7684\u5bf9\u8c61\u548cJSON/XML\u6570\u636e\u683c\u5f0f\u4e4b\u95f4\u81ea\u52a8\u505a\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u3002\u4f46\u6709\u4e9b\u573a\u666f\u4e0b\uff0c\u5982\u679c\u89c9\u5f97\u8fd9\u79cd\u81ea\u52a8\u8f6c\u6362\u4e0d\u6ee1\u8db3\u8981\u6c42\uff0c\u53ef\u4ee5\u5bf9\u5176\u505a\u5b9a\u5236\u3002 Dubbo\u4e2d\u7684REST\u5b9e\u73b0\u662f\u7528JAXB\u505aXML\u5e8f\u5217\u5316\uff0c\u7528Jackson\u505aJSON\u5e8f\u5217\u5316\uff0c\u6240\u4ee5\u5728\u5bf9\u8c61\u4e0a\u6dfb\u52a0JAXB\u6216Jackson\u7684annotation\u5373\u53ef\u4ee5\u5b9a\u5236\u6620\u5c04\u3002 \u4f8b\u5982\uff0c\u5b9a\u5236\u5bf9\u8c61\u5c5e\u6027\u6620\u5c04\u5230XML\u5143\u7d20\u7684\u540d\u5b57\uff1a @XmlRootElement @XmlAccessorType(XmlAccessType.FIELD) public class User implements Serializable { @XmlElement(name= username ) private String name; } \u5b9a\u5236\u5bf9\u8c61\u5c5e\u6027\u6620\u5c04\u5230JSON\u5b57\u6bb5\u7684\u540d\u5b57\uff1a public class User implements Serializable { @JsonProperty( username ) private String name; } \u66f4\u591a\u8d44\u6599\u8bf7\u53c2\u8003JAXB\u548cJackson\u7684\u5b98\u65b9\u6587\u6863\uff0c\u6216\u81ea\u884cgoogle\u3002","title":"\u5b9a\u5236\u5e8f\u5217\u5316"},{"location":"user/references/protocol/rest/#rest-server","text":"\u76ee\u524d\u5728dubbo\u4e2d\uff0c\u6211\u4eec\u652f\u63015\u79cd\u5d4c\u5165\u5f0frest server\u7684\u5b9e\u73b0\uff0c\u5e76\u540c\u65f6\u652f\u6301\u91c7\u7528\u5916\u90e8\u5e94\u7528\u670d\u52a1\u5668\u6765\u505arest server\u7684\u5b9e\u73b0\u3002rest server\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u914d\u7f6e\u5b9e\u73b0\uff1a dubbo:protocol name= rest server= jetty / \u4ee5\u4e0a\u914d\u7f6e\u9009\u7528\u4e86\u5d4c\u5165\u5f0f\u7684jetty\u6765\u505arest server\uff0c\u540c\u65f6\uff0c\u5982\u679c\u4e0d\u914d\u7f6eserver\u5c5e\u6027\uff0crest\u534f\u8bae\u9ed8\u8ba4\u4e5f\u662f\u9009\u7528jetty\u3002jetty\u662f\u975e\u5e38\u6210\u719f\u7684java servlet\u5bb9\u5668\uff0c\u5e76\u548cdubbo\u5df2\u7ecf\u6709\u8f83\u597d\u7684\u96c6\u6210\uff08\u76ee\u524d5\u79cd\u5d4c\u5165\u5f0fserver\u4e2d\u53ea\u6709jetty\u548c\u540e\u9762\u6240\u8ff0\u7684tomcat\u3001tjws\uff0c\u4e0edubbo\u76d1\u63a7\u7cfb\u7edf\u7b49\u5b8c\u6210\u4e86\u65e0\u7f1d\u7684\u96c6\u6210\uff09\uff0c\u6240\u4ee5\uff0c\u5982\u679c\u4f60\u7684dubbo\u7cfb\u7edf\u662f\u5355\u72ec\u542f\u52a8\u7684\u8fdb\u7a0b\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u9ed8\u8ba4\u91c7\u7528jetty\u5373\u53ef\u3002 dubbo:protocol name= rest server= tomcat / \u4ee5\u4e0a\u914d\u7f6e\u9009\u7528\u4e86\u5d4c\u5165\u5f0f\u7684tomcat\u6765\u505arest server\u3002\u5728\u5d4c\u5165\u5f0ftomcat\u4e0a\uff0cREST\u7684\u6027\u80fd\u6bd4jetty\u4e0a\u8981\u597d\u5f97\u591a\uff08\u53c2\u89c1\u540e\u9762\u7684\u57fa\u51c6\u6d4b\u8bd5\uff09\uff0c\u5efa\u8bae\u5728\u9700\u8981\u9ad8\u6027\u80fd\u7684\u573a\u666f\u4e0b\u91c7\u7528tomcat\u3002 dubbo:protocol name= rest server= netty / \u4ee5\u4e0a\u914d\u7f6e\u9009\u7528\u5d4c\u5165\u5f0f\u7684netty\u6765\u505arest server\u3002\uff08TODO more contents to add\uff09 dubbo:protocol name= rest server= tjws / (tjws is now deprecated) dubbo:protocol name= rest server= sunhttp / \u4ee5\u4e0a\u914d\u7f6e\u9009\u7528\u5d4c\u5165\u5f0f\u7684tjws\u6216Sun HTTP server\u6765\u505arest server\u3002\u8fd9\u4e24\u4e2aserver\u5b9e\u73b0\u975e\u5e38\u8f7b\u91cf\u7ea7\uff0c\u975e\u5e38\u65b9\u4fbf\u5728\u96c6\u6210\u6d4b\u8bd5\u4e2d\u5feb\u901f\u542f\u52a8\u4f7f\u7528\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u5728\u8d1f\u8377\u4e0d\u9ad8\u7684\u751f\u4ea7\u73af\u5883\u4e2d\u4f7f\u7528\u3002 \u6ce8\uff1atjws\u76ee\u524d\u5df2\u7ecf\u88abdeprecated\u6389\u4e86\uff0c\u56e0\u4e3a\u5b83\u4e0d\u80fd\u5f88\u597d\u7684\u548cservlet 3.1 API\u5de5\u4f5c\u3002 \u5982\u679c\u4f60\u7684dubbo\u7cfb\u7edf\u4e0d\u662f\u5355\u72ec\u542f\u52a8\u7684\u8fdb\u7a0b\uff0c\u800c\u662f\u90e8\u7f72\u5230\u4e86Java\u5e94\u7528\u670d\u52a1\u5668\u4e2d\uff0c\u5219\u5efa\u8bae\u4f60\u91c7\u7528\u4ee5\u4e0b\u914d\u7f6e\uff1a dubbo:protocol name= rest server= servlet / \u901a\u8fc7\u5c06server\u8bbe\u7f6e\u4e3aservlet\uff0cdubbo\u5c06\u91c7\u7528\u5916\u90e8\u5e94\u7528\u670d\u52a1\u5668\u7684servlet\u5bb9\u5668\u6765\u505arest server\u3002\u540c\u65f6\uff0c\u8fd8\u8981\u5728dubbo\u7cfb\u7edf\u7684web.xml\u4e2d\u6dfb\u52a0\u5982\u4e0b\u914d\u7f6e\uff1a web-app context-param param-name contextConfigLocation /param-name param-value /WEB-INF/classes/META-INF/spring/dubbo-demo-provider.xml /param-value /context-param listener listener-class org.apache.dubbo.remoting.http.servlet.BootstrapListener /listener-class /listener listener listener-class org.springframework.web.context.ContextLoaderListener /listener-class /listener servlet servlet-name dispatcher /servlet-name servlet-class org.apache.dubbo.remoting.http.servlet.DispatcherServlet /servlet-class load-on-startup 1 /load-on-startup /servlet servlet-mapping servlet-name dispatcher /servlet-name url-pattern /* /url-pattern /servlet-mapping /web-app \u5373\u5fc5\u987b\u5c06dubbo\u7684BootstrapListener\u548cDispatherServlet\u6dfb\u52a0\u5230web.xml\uff0c\u4ee5\u5b8c\u6210dubbo\u7684REST\u529f\u80fd\u4e0e\u5916\u90e8servlet\u5bb9\u5668\u7684\u96c6\u6210\u3002 \u6ce8\u610f\uff1a\u5982\u679c\u4f60\u662f\u7528spring\u7684ContextLoaderListener\u6765\u52a0\u8f7dspring\uff0c\u5219\u5fc5\u987b\u4fdd\u8bc1BootstrapListener\u914d\u7f6e\u5728ContextLoaderListener\u4e4b\u524d\uff0c\u5426\u5219dubbo\u521d\u59cb\u5316\u4f1a\u51fa\u9519\u3002 \u5176\u5b9e\uff0c\u8fd9\u79cd\u573a\u666f\u4e0b\u4f60\u4f9d\u7136\u53ef\u4ee5\u575a\u6301\u7528\u5d4c\u5165\u5f0fserver\uff0c\u4f46\u5916\u90e8\u5e94\u7528\u670d\u52a1\u5668\u7684servlet\u5bb9\u5668\u5f80\u5f80\u6bd4\u5d4c\u5165\u5f0fserver\u66f4\u52a0\u5f3a\u5927\uff08\u7279\u522b\u662f\u5982\u679c\u4f60\u662f\u90e8\u7f72\u5230\u66f4\u5065\u58ee\u66f4\u53ef\u4f38\u7f29\u7684WebLogic\uff0cWebSphere\u7b49\uff09\uff0c\u53e6\u5916\u6709\u65f6\u4e5f\u4fbf\u4e8e\u5728\u5e94\u7528\u670d\u52a1\u5668\u505a\u7edf\u4e00\u7ba1\u7406\u3001\u76d1\u63a7\u7b49\u7b49\u3002","title":"\u914d\u7f6eREST Server\u7684\u5b9e\u73b0"},{"location":"user/references/protocol/rest/#context","text":"\u5728\u8fdc\u7a0b\u8c03\u7528\u4e2d\uff0c\u503c\u5f97\u83b7\u53d6\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u53ef\u80fd\u6709\u5f88\u591a\u79cd\uff0c\u8fd9\u91cc\u7279\u522b\u4ee5\u83b7\u53d6\u5ba2\u6237\u7aefIP\u4e3a\u4f8b\u3002 \u5728dubbo\u7684REST\u4e2d\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u65b9\u5f0f\u83b7\u53d6\u5ba2\u6237\u7aefIP\u3002 \u7b2c\u4e00\u79cd\u65b9\u5f0f\uff0c\u7528JAX-RS\u6807\u51c6\u7684@Context annotation\uff1a public User getUser(@PathParam( id ) Long id, @Context HttpServletRequest request) { System.out.println( Client address is + request.getRemoteAddr()); } \u7528Context\u4fee\u9970getUser()\u7684\u4e00\u4e2a\u65b9\u6cd5\u53c2\u6570\u540e\uff0c\u5c31\u53ef\u4ee5\u5c06\u5f53\u524d\u7684HttpServletRequest\u6ce8\u5165\u8fdb\u6765\uff0c\u7136\u540e\u76f4\u63a5\u8c03\u7528servlet api\u83b7\u53d6IP\u3002 \u6ce8\u610f\uff1a\u8fd9\u79cd\u65b9\u5f0f\u53ea\u80fd\u5728\u5c06server\u8bbe\u7f6e\u4e3a tjws\u3001tomcat\u3001jetty \u6216\u8005 servlet \u7684\u65f6\u5019\u624d\u80fd\u5de5\u4f5c\uff0c\u56e0\u4e3a\u53ea\u6709\u8fd9\u51e0\u79cd server \u7684\u5b9e\u73b0\u624d\u63d0\u4f9b\u4e86 servlet \u5bb9\u5668\u3002\u53e6\u5916\uff0c\u6807\u51c6\u7684JAX-RS\u8fd8\u652f\u6301\u7528@Context\u4fee\u9970service\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u5b57\u6bb5\u6765\u83b7\u53d6HttpServletRequest\uff0c\u4f46\u5728dubbo\u4e2d\u6211\u4eec\u6ca1\u6709\u5bf9\u6b64\u4f5c\u51fa\u652f\u6301\u3002 \u7b2c\u4e8c\u79cd\u65b9\u5f0f\uff0c\u7528dubbo\u4e2d\u5e38\u7528\u7684RpcContext\uff1a public User getUser(@PathParam( id ) Long id) { System.out.println( Client address is + RpcContext.getContext().getRemoteAddressString()); } \u6ce8\u610f\uff1a\u8fd9\u79cd\u65b9\u5f0f\u53ea\u80fd\u5728\u8bbe\u7f6eserver=\"jetty\"\u6216\u8005server=\"tomcat\"\u6216\u8005server=\"servlet\"\u6216\u8005server=\"tjws\"\u7684\u65f6\u5019\u624d\u80fd\u5de5\u4f5c\u3002\u53e6\u5916\uff0c\u76ee\u524ddubbo\u7684RpcContext\u662f\u4e00\u79cd\u6bd4\u8f83\u6709\u4fb5\u5165\u6027\u7684\u7528\u6cd5\uff0c\u672a\u6765\u6211\u4eec\u5f88\u53ef\u80fd\u4f1a\u505a\u51fa\u91cd\u6784\u3002 \u5982\u679c\u4f60\u60f3\u4fdd\u6301\u4f60\u7684\u9879\u76ee\u5bf9JAX-RS\u7684\u517c\u5bb9\u6027\uff0c\u672a\u6765\u8131\u79bbdubbo\u4e5f\u53ef\u4ee5\u8fd0\u884c\uff0c\u8bf7\u9009\u62e9\u7b2c\u4e00\u79cd\u65b9\u5f0f\u3002\u5982\u679c\u4f60\u60f3\u8981\u66f4\u4f18\u96c5\u7684\u670d\u52a1\u63a5\u53e3\u5b9a\u4e49\uff0c\u8bf7\u9009\u7528\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u3002 \u6b64\u5916\uff0c\u5728\u6700\u65b0\u7684dubbo rest\u4e2d\uff0c\u8fd8\u652f\u6301\u901a\u8fc7RpcContext\u6765\u83b7\u53d6HttpServletRequest\u548cHttpServletResponse\uff0c\u4ee5\u63d0\u4f9b\u66f4\u5927\u7684\u7075\u6d3b\u6027\u6765\u65b9\u4fbf\u7528\u6237\u5b9e\u73b0\u67d0\u4e9b\u590d\u6742\u529f\u80fd\uff0c\u6bd4\u5982\u5728dubbo\u6807\u51c6\u7684filter\u4e2d\u8bbf\u95eeHTTP Header\u3002\u7528\u6cd5\u793a\u4f8b\u5982\u4e0b\uff1a if (RpcContext.getContext().getRequest() != null RpcContext.getContext().getRequest() instanceof HttpServletRequest) { System.out.println( Client address is + ((HttpServletRequest) RpcContext.getContext().getRequest()).getRemoteAddr()); } if (RpcContext.getContext().getResponse() != null RpcContext.getContext().getResponse() instanceof HttpServletResponse) { System.out.println( Response object from RpcContext: + RpcContext.getContext().getResponse()); } \u6ce8\u610f\uff1a\u4e3a\u4e86\u4fdd\u6301\u534f\u8bae\u7684\u4e2d\u7acb\u6027\uff0cRpcContext.getRequest()\u548cRpcContext.getResponse()\u8fd4\u56de\u7684\u4ec5\u4ec5\u662f\u4e00\u4e2aObject\u7c7b\uff0c\u800c\u4e14\u53ef\u80fd\u4e3anull\u3002\u6240\u4ee5\uff0c\u4f60\u5fc5\u987b\u81ea\u5df1\u505anull\u548c\u7c7b\u578b\u7684\u68c0\u67e5\u3002 \u6ce8\u610f\uff1a\u53ea\u6709\u5728\u8bbe\u7f6eserver=\"jetty\"\u6216\u8005server=\"tomcat\"\u6216\u8005server=\"servlet\"\u7684\u65f6\u5019\uff0c\u4f60\u624d\u80fd\u901a\u8fc7\u4ee5\u4e0a\u65b9\u6cd5\u6b63\u786e\u7684\u5f97\u5230HttpServletRequest\u548cHttpServletResponse\uff0c\u56e0\u4e3a\u53ea\u6709\u8fd9\u51e0\u79cdserver\u5b9e\u73b0\u4e86servlet\u5bb9\u5668\u3002 \u4e3a\u4e86\u7b80\u5316\u7f16\u7a0b\uff0c\u5728\u6b64\u4f60\u4e5f\u53ef\u4ee5\u7528\u6cdb\u578b\u7684\u65b9\u5f0f\u6765\u76f4\u63a5\u83b7\u53d6\u7279\u5b9a\u7c7b\u578b\u7684request/response\uff1a if (RpcContext.getContext().getRequest(HttpServletRequest.class) != null) { System.out.println( Client address is + RpcContext.getContext().getRequest(HttpServletRequest.class).getRemoteAddr()); } if (RpcContext.getContext().getResponse(HttpServletResponse.class) != null) { System.out.println( Response object from RpcContext: + RpcContext.getContext().getResponse(HttpServletResponse.class)); } \u5982\u679crequest/response\u4e0d\u7b26\u5408\u6307\u5b9a\u7684\u7c7b\u578b\uff0c\u8fd9\u91cc\u4e5f\u4f1a\u8fd4\u56denull\u3002","title":"\u83b7\u53d6\u4e0a\u4e0b\u6587\uff08Context\uff09\u4fe1\u606f"},{"location":"user/references/protocol/rest/#context-path","text":"dubbo\u4e2d\u7684rest\u534f\u8bae\u9ed8\u8ba4\u5c06\u91c7\u752880\u7aef\u53e3\uff0c\u5982\u679c\u60f3\u4fee\u6539\u7aef\u53e3\uff0c\u76f4\u63a5\u914d\u7f6e\uff1a dubbo:protocol name= rest port= 8888 / \u53e6\u5916\uff0c\u5982\u524d\u6240\u8ff0\uff0c\u6211\u4eec\u53ef\u4ee5\u7528@Path\u6765\u914d\u7f6e\u5355\u4e2arest\u670d\u52a1\u7684URL\u76f8\u5bf9\u8def\u5f84\u3002\u4f46\u5176\u5b9e\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u6240\u6709rest\u670d\u52a1\u90fd\u9002\u7528\u7684\u57fa\u7840\u76f8\u5bf9\u8def\u5f84\uff0c\u5373java web\u5e94\u7528\u4e2d\u5e38\u8bf4\u7684context path\u3002 \u53ea\u9700\u8981\u6dfb\u52a0\u5982\u4e0bcontextpath\u5c5e\u6027\u5373\u53ef\uff1a dubbo:protocol name= rest port= 8888 contextpath= services / \u4ee5\u524d\u9762\u4ee3\u7801\u4e3a\u4f8b\uff1a @Path( /users ) public class UserServiceImpl implements UserService { @POST @Path( /register ) @Consumes({MediaType.APPLICATION_JSON}) public void registerUser(User user) { // save the user... } } \u73b0\u5728registerUser()\u7684\u5b8c\u6574\u8bbf\u95ee\u8def\u5f84\u4e3a\uff1a http://localhost:8888/services/users/register \u6ce8\u610f\uff1a\u5982\u679c\u4f60\u662f\u9009\u7528\u5916\u90e8\u5e94\u7528\u670d\u52a1\u5668\u505arest server\uff0c\u5373\u914d\u7f6e: dubbo:protocol name= rest port= 8888 contextpath= services server= servlet / \u5219\u5fc5\u987b\u4fdd\u8bc1\u8fd9\u91cc\u8bbe\u7f6e\u7684port\u3001contextpath\uff0c\u4e0e\u5916\u90e8\u5e94\u7528\u670d\u52a1\u5668\u7684\u7aef\u53e3\u3001DispatcherServlet\u7684\u4e0a\u4e0b\u6587\u8def\u5f84\uff08\u5373webapp path\u52a0\u4e0aservlet url pattern\uff09\u4fdd\u6301\u4e00\u81f4\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u90e8\u7f72\u4e3atomcat ROOT\u8def\u5f84\u7684\u5e94\u7528\uff0c\u8fd9\u91cc\u7684contextpath\u5fc5\u987b\u4e0eweb.xml\u4e2dDispacherServlet\u7684 url-pattern/ \u5b8c\u5168\u4e00\u81f4\uff1a servlet-mapping servlet-name dispatcher /servlet-name url-pattern /services/* /url-pattern /servlet-mapping","title":"\u914d\u7f6e\u7aef\u53e3\u53f7\u548cContext Path"},{"location":"user/references/protocol/rest/#io","text":"\u53ef\u4ee5\u4e3arest\u670d\u52a1\u914d\u7f6e\u7ebf\u7a0b\u6c60\u5927\u5c0f\uff1a dubbo:protocol name= rest threads= 500 / \u6ce8\u610f\uff1a\u76ee\u524d\u7ebf\u7a0b\u6c60\u7684\u8bbe\u7f6e\u53ea\u6709\u5f53server=\"netty\"\u6216\u8005server=\"jetty\"\u6216\u8005server=\"tomcat\"\u7684\u65f6\u5019\u624d\u80fd\u751f\u6548\u3002\u53e6\u5916\uff0c\u5982\u679cserver=\"servlet\"\uff0c\u7531\u4e8e\u8fd9\u65f6\u5019\u542f\u7528\u7684\u662f\u5916\u90e8\u5e94\u7528\u670d\u52a1\u5668\u505arest server\uff0c\u4e0d\u53d7dubbo\u63a7\u5236\uff0c\u6240\u4ee5\u8fd9\u91cc\u7684\u7ebf\u7a0b\u6c60\u8bbe\u7f6e\u4e5f\u65e0\u6548\u3002 \u5982\u679c\u662f\u9009\u7528netty server\uff0c\u8fd8\u53ef\u4ee5\u914d\u7f6eNetty\u7684IO worker\u7ebf\u7a0b\u6570\uff1a dubbo:protocol name= rest iothreads= 5 threads= 100 /","title":"\u914d\u7f6e\u7ebf\u7a0b\u6570\u548cIO\u7ebf\u7a0b\u6570"},{"location":"user/references/protocol/rest/#_4","text":"Dubbo\u4e2d\u7684rest\u670d\u52a1\u9ed8\u8ba4\u90fd\u662f\u91c7\u7528http\u957f\u8fde\u63a5\u6765\u8bbf\u95ee\uff0c\u5982\u679c\u60f3\u5207\u6362\u4e3a\u77ed\u8fde\u63a5\uff0c\u76f4\u63a5\u914d\u7f6e\uff1a dubbo:protocol name= rest keepalive= false / \u6ce8\u610f\uff1a\u8fd9\u4e2a\u914d\u7f6e\u76ee\u524d\u53ea\u5bf9server=\"netty\"\u548cserver=\"tomcat\"\u624d\u80fd\u751f\u6548\u3002","title":"\u914d\u7f6e\u957f\u8fde\u63a5"},{"location":"user/references/protocol/rest/#http","text":"\u53ef\u4ee5\u914d\u7f6e\u670d\u52a1\u5668\u63d0\u4f9b\u7aef\u6240\u80fd\u540c\u65f6\u63a5\u6536\u7684\u6700\u5927HTTP\u8fde\u63a5\u6570\uff0c\u9632\u6b62REST server\u88ab\u8fc7\u591a\u8fde\u63a5\u6491\u7206\uff0c\u4ee5\u4f5c\u4e3a\u4e00\u79cd\u6700\u57fa\u672c\u7684\u81ea\u6211\u4fdd\u62a4\u673a\u5236\uff1a dubbo:protocol name= rest accepts= 500 server= tomcat/ \u6ce8\u610f\uff1a\u8fd9\u4e2a\u914d\u7f6e\u76ee\u524d\u53ea\u5bf9server=\"tomcat\"\u624d\u80fd\u751f\u6548\u3002","title":"\u914d\u7f6e\u6700\u5927\u7684HTTP\u8fde\u63a5\u6570"},{"location":"user/references/protocol/rest/#http_1","text":"\u5982\u679crest\u670d\u52a1\u7684\u6d88\u8d39\u7aef\u4e5f\u662fdubbo\u7cfb\u7edf\uff0c\u53ef\u4ee5\u50cf\u5176\u4ed6dubbo RPC\u673a\u5236\u4e00\u6837\uff0c\u914d\u7f6e\u6d88\u8d39\u7aef\u8c03\u7528\u6b64rest\u670d\u52a1\u7684\u6700\u5927\u8d85\u65f6\u65f6\u95f4\u4ee5\u53ca\u6bcf\u4e2a\u6d88\u8d39\u7aef\u6240\u80fd\u542f\u52a8\u7684\u6700\u5927HTTP\u8fde\u63a5\u6570\u3002 dubbo:service interface= xxx ref= xxx protocol= rest timeout= 2000 connections= 10 / \u5f53\u7136\uff0c\u7531\u4e8e\u8fd9\u4e2a\u914d\u7f6e\u9488\u5bf9\u6d88\u8d39\u7aef\u751f\u6548\u7684\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u5728\u6d88\u8d39\u7aef\u914d\u7f6e\uff1a dubbo:reference id= xxx interface= xxx timeout= 2000 connections= 10 / \u4f46\u662f\uff0c\u901a\u5e38\u6211\u4eec\u5efa\u8bae\u914d\u7f6e\u5728\u670d\u52a1\u63d0\u4f9b\u7aef\u63d0\u4f9b\u6b64\u7c7b\u914d\u7f6e\u3002\u6309\u7167dubbo\u5b98\u65b9\u6587\u6863\u7684\u8bf4\u6cd5\uff1a\u201cProvider\u4e0a\u5c3d\u91cf\u591a\u914d\u7f6eConsumer\u7aef\u7684\u5c5e\u6027\uff0c\u8ba9Provider\u5b9e\u73b0\u8005\u4e00\u5f00\u59cb\u5c31\u601d\u8003Provider\u670d\u52a1\u7279\u70b9\u3001\u670d\u52a1\u8d28\u91cf\u7684\u95ee\u9898\u3002\u201d \u6ce8\u610f\uff1a\u5982\u679cdubbo\u7684REST\u670d\u52a1\u662f\u53d1\u5e03\u7ed9\u975edubbo\u7684\u5ba2\u6237\u7aef\u4f7f\u7528\uff0c\u5219\u8fd9\u91cc dubbo:service/ \u4e0a\u7684\u914d\u7f6e\u5b8c\u5168\u65e0\u6548\uff0c\u56e0\u4e3a\u8fd9\u79cd\u5ba2\u6237\u7aef\u4e0d\u53d7dubbo\u63a7\u5236\u3002","title":"\u914d\u7f6e\u6bcf\u4e2a\u6d88\u8d39\u7aef\u7684\u8d85\u65f6\u65f6\u95f4\u548cHTTP\u8fde\u63a5\u6570"},{"location":"user/references/protocol/rest/#annotationspring-xml","text":"\u4ee5\u4e0a\u6240\u6709\u7684\u8ba8\u8bba\u90fd\u662f\u57fa\u4e8edubbo\u5728spring\u4e2d\u7684xml\u914d\u7f6e\u3002\u4f46\u662f\uff0cdubbo/spring\u672c\u8eab\u4e5f\u652f\u6301\u7528annotation\u6765\u4f5c\u914d\u7f6e\uff0c\u6240\u4ee5\u6211\u4eec\u4e5f\u53ef\u4ee5\u6309dubbo\u5b98\u65b9\u6587\u6863\u4e2d\u7684\u6b65\u9aa4\uff0c\u628a\u76f8\u5173annotation\u52a0\u5230REST\u670d\u52a1\u7684\u5b9e\u73b0\u4e2d\uff0c\u53d6\u4ee3\u4e00\u4e9bxml\u914d\u7f6e\uff0c\u4f8b\u5982\uff1a @Service(protocol = rest ) @Path( /users ) public class UserServiceImpl implements UserService { @Autowired private UserRepository userRepository; @POST @Path( /register ) @Consumes({MediaType.APPLICATION_JSON}) public void registerUser(User user) { // save the user userRepository.save(user); } } annotation\u7684\u914d\u7f6e\u66f4\u7b80\u5355\u66f4\u7cbe\u786e\uff0c\u901a\u5e38\u4e5f\u66f4\u4fbf\u4e8e\u7ef4\u62a4\uff08\u5f53\u7136\u73b0\u4ee3IDE\u90fd\u53ef\u4ee5\u5728xml\u4e2d\u652f\u6301\u6bd4\u5982\u7c7b\u540d\u91cd\u6784\uff0c\u6240\u4ee5\u5c31\u8fd9\u91cc\u7684\u7279\u5b9a\u7528\u4f8b\u800c\u8a00\uff0cxml\u7684\u7ef4\u62a4\u6027\u4e5f\u5f88\u597d\uff09\u3002\u800cxml\u5bf9\u4ee3\u7801\u7684\u4fb5\u5165\u6027\u66f4\u5c0f\u4e00\u4e9b\uff0c\u5c24\u5176\u6709\u5229\u4e8e\u52a8\u6001\u4fee\u6539\u914d\u7f6e\uff0c\u7279\u522b\u662f\u6bd4\u5982\u4f60\u8981\u9488\u5bf9\u5355\u4e2a\u670d\u52a1\u914d\u7f6e\u8fde\u63a5\u8d85\u65f6\u65f6\u95f4\u3001\u6bcf\u5ba2\u6237\u7aef\u6700\u5927\u8fde\u63a5\u6570\u3001\u96c6\u7fa4\u7b56\u7565\u3001\u6743\u91cd\u7b49\u7b49\u3002\u53e6\u5916\uff0c\u7279\u522b\u5bf9\u590d\u6742\u5e94\u7528\u6216\u8005\u6a21\u5757\u6765\u8bf4\uff0cxml\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e2d\u5fc3\u70b9\u6765\u6db5\u76d6\u7684\u6240\u6709\u7ec4\u4ef6\u548c\u914d\u7f6e\uff0c\u66f4\u4e00\u76ee\u4e86\u7136\uff0c\u4e00\u822c\u66f4\u4fbf\u4e8e\u9879\u76ee\u957f\u65f6\u671f\u7684\u7ef4\u62a4\u3002 \u5f53\u7136\uff0c\u9009\u62e9\u54ea\u79cd\u914d\u7f6e\u65b9\u5f0f\u6ca1\u6709\u7edd\u5bf9\u7684\u4f18\u52a3\uff0c\u548c\u4e2a\u4eba\u7684\u504f\u597d\u4e5f\u4e0d\u65e0\u5173\u7cfb\u3002","title":"\u7528Annotation\u53d6\u4ee3\u90e8\u5206Spring XML\u914d\u7f6e"},{"location":"user/references/protocol/rest/#filterinterceptor","text":"Dubbo\u7684REST\u4e5f\u652f\u6301JAX-RS\u6807\u51c6\u7684Filter\u548cInterceptor\uff0c\u4ee5\u65b9\u4fbf\u5bf9REST\u7684\u8bf7\u6c42\u4e0e\u54cd\u5e94\u8fc7\u7a0b\u505a\u5b9a\u5236\u5316\u7684\u62e6\u622a\u5904\u7406\u3002 \u5176\u4e2d\uff0cFilter\u4e3b\u8981\u7528\u4e8e\u8bbf\u95ee\u548c\u8bbe\u7f6eHTTP\u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u53c2\u6570\u3001URI\u7b49\u7b49\u3002\u4f8b\u5982\uff0c\u8bbe\u7f6eHTTP\u54cd\u5e94\u7684cache header\uff1a public class CacheControlFilter implements ContainerResponseFilter { public void filter(ContainerRequestContext req, ContainerResponseContext res) { if (req.getMethod().equals( GET )) { res.getHeaders().add( Cache-Control , someValue ); } } } Interceptor\u4e3b\u8981\u7528\u4e8e\u8bbf\u95ee\u548c\u4fee\u6539\u8f93\u5165\u4e0e\u8f93\u51fa\u5b57\u8282\u6d41\uff0c\u4f8b\u5982\uff0c\u624b\u52a8\u6dfb\u52a0GZIP\u538b\u7f29\uff1a public class GZIPWriterInterceptor implements WriterInterceptor { @Override public void aroundWriteTo(WriterInterceptorContext context) throws IOException, WebApplicationException { OutputStream outputStream = context.getOutputStream(); context.setOutputStream(new GZIPOutputStream(outputStream)); context.proceed(); } } \u5728\u6807\u51c6JAX-RS\u5e94\u7528\u4e2d\uff0c\u6211\u4eec\u4e00\u822c\u662f\u4e3aFilter\u548cInterceptor\u6dfb\u52a0@Provider annotation\uff0c\u7136\u540eJAX-RS runtime\u4f1a\u81ea\u52a8\u53d1\u73b0\u5e76\u542f\u7528\u5b83\u4eec\u3002\u800c\u5728dubbo\u4e2d\uff0c\u6211\u4eec\u662f\u901a\u8fc7\u6dfb\u52a0XML\u914d\u7f6e\u7684\u65b9\u5f0f\u6765\u6ce8\u518cFilter\u548cInterceptor\uff1a dubbo:protocol name= rest port= 8888 extension= xxx.TraceInterceptor, xxx.TraceFilter / \u5728\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06Filter\u3001Interceptor\u548cDynamicFeature\u8fd9\u4e09\u79cd\u7c7b\u578b\u7684\u5bf9\u8c61\u90fd\u6dfb\u52a0\u5230 extension \u5c5e\u6027\u4e0a\uff0c\u591a\u4e2a\u4e4b\u95f4\u7528\u9017\u53f7\u5206\u9694\u3002\uff08DynamicFeature\u662f\u53e6\u4e00\u4e2a\u63a5\u53e3\uff0c\u53ef\u4ee5\u65b9\u4fbf\u6211\u4eec\u66f4\u52a8\u6001\u7684\u542f\u7528Filter\u548cInterceptor\uff0c\u611f\u5174\u8da3\u8bf7\u81ea\u884cgoogle\u3002\uff09 \u5f53\u7136\uff0cdubbo\u81ea\u8eab\u4e5f\u652f\u6301Filter\u7684\u6982\u5ff5\uff0c\u4f46\u6211\u4eec\u8fd9\u91cc\u8ba8\u8bba\u7684Filter\u548cInterceptor\u66f4\u52a0\u63a5\u8fd1\u534f\u8bae\u5b9e\u73b0\u7684\u5e95\u5c42\uff0c\u76f8\u6bd4dubbo\u7684filter\uff0c\u53ef\u4ee5\u505a\u66f4\u5e95\u5c42\u7684\u5b9a\u5236\u5316\u3002 \u6ce8\uff1a\u8fd9\u91cc\u7684XML\u5c5e\u6027\u53ebextension\uff0c\u800c\u4e0d\u662f\u53ebinterceptor\u6216\u8005filter\uff0c\u662f\u56e0\u4e3a\u9664\u4e86Interceptor\u548cFilter\uff0c\u672a\u6765\u6211\u4eec\u8fd8\u4f1a\u6dfb\u52a0\u66f4\u591a\u7684\u6269\u5c55\u7c7b\u578b\u3002 \u5982\u679cREST\u7684\u6d88\u8d39\u7aef\u4e5f\u662fdubbo\u7cfb\u7edf\uff08\u53c2\u89c1\u4e0b\u6587\u7684\u8ba8\u8bba\uff09\uff0c\u5219\u4e5f\u53ef\u4ee5\u7528\u7c7b\u4f3c\u65b9\u5f0f\u4e3a\u6d88\u8d39\u7aef\u914d\u7f6eInterceptor\u548cFilter\u3002\u4f46\u6ce8\u610f\uff0cJAX-RS\u4e2d\u6d88\u8d39\u7aef\u7684Filter\u548c\u63d0\u4f9b\u7aef\u7684Filter\u662f\u4e24\u79cd\u4e0d\u540c\u7684\u63a5\u53e3\u3002\u4f8b\u5982\u524d\u9762\u4f8b\u5b50\u4e2d\u670d\u52a1\u7aef\u662fContainerResponseFilter\u63a5\u53e3\uff0c\u800c\u6d88\u8d39\u7aef\u5bf9\u5e94\u7684\u662fClientResponseFilter: public class LoggingFilter implements ClientResponseFilter { public void filter(ClientRequestContext reqCtx, ClientResponseContext resCtx) throws IOException { System.out.println( status: + resCtx.getStatus()); System.out.println( date: + resCtx.getDate()); System.out.println( last-modified: + resCtx.getLastModified()); System.out.println( location: + resCtx.getLocation()); System.out.println( headers: ); for (Entry String, List String header : resCtx.getHeaders().entrySet()) { System.out.print( \\t + header.getKey() + : ); for (String value : header.getValue()) { System.out.print(value + , ); } System.out.print( \\n ); } System.out.println( media-type: + resCtx.getMediaType().getType()); } }","title":"\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684Filter\u3001Interceptor\u7b49"},{"location":"user/references/protocol/rest/#exception","text":"Dubbo\u7684REST\u4e5f\u652f\u6301JAX-RS\u6807\u51c6\u7684ExceptionMapper\uff0c\u53ef\u4ee5\u7528\u6765\u5b9a\u5236\u7279\u5b9aexception\u53d1\u751f\u540e\u5e94\u8be5\u8fd4\u56de\u7684HTTP\u54cd\u5e94\u3002 public class CustomExceptionMapper implements ExceptionMapper NotFoundException { public Response toResponse(NotFoundException e) { return Response.status(Response.Status.NOT_FOUND).entity( Oops! the requested resource is not found! ).type( text/plain ).build(); } } \u548cInterceptor\u3001Filter\u7c7b\u4f3c\uff0c\u5c06\u5176\u6dfb\u52a0\u5230XML\u914d\u7f6e\u6587\u4ef6\u4e2d\u5373\u53ef\u542f\u7528\uff1a dubbo:protocol name= rest port= 8888 extension= xxx.CustomExceptionMapper /","title":"\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684Exception\u5904\u7406"},{"location":"user/references/protocol/rest/#http_2","text":"Dubbo rest\u652f\u6301\u8f93\u51fa\u6240\u6709HTTP\u8bf7\u6c42/\u54cd\u5e94\u4e2d\u7684header\u5b57\u6bb5\u548cbody\u6d88\u606f\u4f53\u3002 \u5728XML\u914d\u7f6e\u4e2d\u6dfb\u52a0\u5982\u4e0b\u81ea\u5e26\u7684REST filter\uff1a dubbo:protocol name= rest port= 8888 extension= org.apache.dubbo.rpc.protocol.rest.support.LoggingFilter / \u7136\u540e\u914d\u7f6e\u5728logging\u914d\u7f6e\u4e2d\u81f3\u5c11\u4e3aorg.apache.dubbo.rpc.protocol.rest.support\u6253\u5f00INFO\u7ea7\u522b\u65e5\u5fd7\u8f93\u51fa\uff0c\u4f8b\u5982\uff0c\u5728log4j.xml\u4e2d\u914d\u7f6e\uff1a logger name= org.apache.dubbo.rpc.protocol.rest.support level value= INFO / appender-ref ref= CONSOLE / /logger \u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728ROOT logger\u6253\u5f00INFO\u7ea7\u522b\u65e5\u5fd7\u8f93\u51fa\uff1a root level value= INFO / appender-ref ref= CONSOLE / /root \u7136\u540e\u5728\u65e5\u5fd7\u4e2d\u4f1a\u6709\u7c7b\u4f3c\u5982\u4e0b\u7684\u5185\u5bb9\u8f93\u51fa\uff1a The HTTP headers are: accept: application/json;charset=UTF-8 accept-encoding: gzip, deflate connection: Keep-Alive content-length: 22 content-type: application/json host: 192.168.1.100:8888 user-agent: Apache-HttpClient/4.2.1 (java 1.5) The contents of request body is: { id :1, name : dang } \u6253\u5f00HTTP\u65e5\u5fd7\u8f93\u51fa\u540e\uff0c\u9664\u4e86\u6b63\u5e38\u65e5\u5fd7\u8f93\u51fa\u7684\u6027\u80fd\u5f00\u9500\u5916\uff0c\u4e5f\u4f1a\u5728\u6bd4\u5982HTTP\u8bf7\u6c42\u89e3\u6790\u65f6\u4ea7\u751f\u989d\u5916\u7684\u5f00\u9500\uff0c\u56e0\u4e3a\u9700\u8981\u5efa\u7acb\u989d\u5916\u7684\u5185\u5b58\u7f13\u51b2\u533a\u6765\u4e3a\u65e5\u5fd7\u7684\u8f93\u51fa\u505a\u6570\u636e\u51c6\u5907\u3002","title":"\u914d\u7f6eHTTP\u65e5\u5fd7\u8f93\u51fa"},{"location":"user/references/protocol/rest/#_5","text":"dubbo\u7684rest\u652f\u6301\u91c7\u7528Java\u6807\u51c6\u7684bean validation annotation\uff08JSR 303)\u6765\u505a\u8f93\u5165\u6821\u9a8chttp://beanvalidation.org/ \u4e3a\u4e86\u548c\u5176\u4ed6dubbo\u8fdc\u7a0b\u8c03\u7528\u534f\u8bae\u4fdd\u6301\u4e00\u81f4\uff0c\u5728rest\u4e2d\u4f5c\u6821\u9a8c\u7684annotation\u5fc5\u987b\u653e\u5728\u670d\u52a1\u7684\u63a5\u53e3\u4e0a\uff0c\u4f8b\u5982\uff1a public interface UserService { User getUser(@Min(value=1L, message= User ID must be greater than 1 ) Long id); } \u5f53\u7136\uff0c\u5728\u5f88\u591a\u5176\u4ed6\u7684bean validation\u7684\u5e94\u7528\u573a\u666f\u90fd\u662f\u5c06annotation\u653e\u5230\u5b9e\u73b0\u7c7b\u800c\u4e0d\u662f\u63a5\u53e3\u4e0a\u3002\u628aannotation\u653e\u5728\u63a5\u53e3\u4e0a\u81f3\u5c11\u6709\u4e00\u4e2a\u597d\u5904\u662f\uff0cdubbo\u7684\u5ba2\u6237\u7aef\u53ef\u4ee5\u5171\u4eab\u8fd9\u4e2a\u63a5\u53e3\u7684\u4fe1\u606f\uff0cdubbo\u751a\u81f3\u4e0d\u9700\u8981\u505a\u8fdc\u7a0b\u8c03\u7528\uff0c\u5728\u672c\u5730\u5c31\u53ef\u4ee5\u5b8c\u6210\u8f93\u5165\u6821\u9a8c\u3002 \u7136\u540e\u6309\u7167dubbo\u7684\u6807\u51c6\u65b9\u5f0f\u5728XML\u914d\u7f6e\u4e2d\u6253\u5f00\u9a8c\u8bc1\uff1a dubbo:service interface=xxx.UserService ref= userService protocol= rest validation= true / \u5728dubbo\u7684\u5176\u4ed6\u5f88\u591a\u8fdc\u7a0b\u8c03\u7528\u534f\u8bae\u4e2d\uff0c\u5982\u679c\u8f93\u5165\u9a8c\u8bc1\u51fa\u9519\uff0c\u662f\u76f4\u63a5\u5c06 RpcException \u629b\u5411\u5ba2\u6237\u7aef\uff0c\u800c\u5728rest\u4e2d\u7531\u4e8e\u5ba2\u6237\u7aef\u7ecf\u5e38\u662f\u975edubbo\uff0c\u751a\u81f3\u975ejava\u7684\u7cfb\u7edf\uff0c\u6240\u4ee5\u4e0d\u4fbf\u76f4\u63a5\u629b\u51faJava\u5f02\u5e38\u3002\u56e0\u6b64\uff0c\u76ee\u524d\u6211\u4eec\u5c06\u6821\u9a8c\u9519\u8bef\u4ee5XML\u7684\u683c\u5f0f\u8fd4\u56de\uff1a violationReport constraintViolations path getUserArgument0 /path message User ID must be greater than 1 /message value 0 /value /constraintViolations /violationReport \u7a0d\u540e\u4e5f\u4f1a\u652f\u6301\u5176\u4ed6\u6570\u636e\u683c\u5f0f\u7684\u8fd4\u56de\u503c\u3002\u81f3\u4e8e\u5982\u4f55\u5bf9\u9a8c\u8bc1\u9519\u8bef\u6d88\u606f\u4f5c\u56fd\u9645\u5316\u5904\u7406\uff0c\u76f4\u63a5\u53c2\u8003bean validation\u7684\u76f8\u5173\u6587\u6863\u5373\u53ef\u3002 \u5982\u679c\u4f60\u8ba4\u4e3a\u9ed8\u8ba4\u7684\u6821\u9a8c\u9519\u8bef\u8fd4\u56de\u683c\u5f0f\u4e0d\u7b26\u5408\u4f60\u7684\u8981\u6c42\uff0c\u53ef\u4ee5\u5982\u4e0a\u9762\u7ae0\u8282\u6240\u8ff0\uff0c\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684ExceptionMapper\u6765\u81ea\u7531\u7684\u5b9a\u5236\u9519\u8bef\u8fd4\u56de\u683c\u5f0f\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2aExceptionMapper\u5fc5\u987b\u7528\u6cdb\u578b\u58f0\u660e\u6765\u6355\u83b7dubbo\u7684RpcException\uff0c\u624d\u80fd\u6210\u529f\u8986\u76d6dubbo rest\u9ed8\u8ba4\u7684\u5f02\u5e38\u5904\u7406\u7b56\u7565\u3002\u4e3a\u4e86\u7b80\u5316\u64cd\u4f5c\uff0c\u5176\u5b9e\u8fd9\u91cc\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u662f\u76f4\u63a5\u7ee7\u627fdubbo rest\u7684RpcExceptionMapper\uff0c\u5e76\u8986\u76d6\u5176\u4e2d\u5904\u7406\u6821\u9a8c\u5f02\u5e38\u7684\u65b9\u6cd5\u5373\u53ef\uff1a public class MyValidationExceptionMapper extends RpcExceptionMapper { protected Response handleConstraintViolationException(ConstraintViolationException cve) { ViolationReport report = new ViolationReport(); for (ConstraintViolation cv : cve.getConstraintViolations()) { report.addConstraintViolation(new RestConstraintViolation( cv.getPropertyPath().toString(), cv.getMessage(), cv.getInvalidValue() == null ? null : cv.getInvalidValue().toString())); } // \u91c7\u7528json\u8f93\u51fa\u4ee3\u66ffxml\u8f93\u51fa return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(report).type(ContentType.APPLICATION_JSON_UTF_8).build(); } } \u7136\u540e\u5c06\u8fd9\u4e2aExceptionMapper\u6dfb\u52a0\u5230XML\u914d\u7f6e\u4e2d\u5373\u53ef\uff1a dubbo:protocol name= rest port= 8888 extension= xxx.MyValidationExceptionMapper /","title":"\u8f93\u5165\u53c2\u6570\u7684\u6821\u9a8c"},{"location":"user/references/protocol/rmi/","text":"rmi:// RMI \u534f\u8bae\u91c7\u7528 JDK \u6807\u51c6\u7684 java.rmi.* \u5b9e\u73b0\uff0c\u91c7\u7528\u963b\u585e\u5f0f\u77ed\u8fde\u63a5\u548c JDK \u6807\u51c6\u5e8f\u5217\u5316\u65b9\u5f0f\u3002 \u6ce8\u610f\uff1a\u5982\u679c\u6b63\u5728\u4f7f\u7528 RMI \u63d0\u4f9b\u670d\u52a1\u7ed9\u5916\u90e8\u8bbf\u95ee ^1 \uff0c\u540c\u65f6\u5e94\u7528\u91cc\u4f9d\u8d56\u4e86\u8001\u7684 common-collections \u5305 [^2] \u7684\u60c5\u51b5\u4e0b\uff0c\u5b58\u5728\u53cd\u5e8f\u5217\u5316\u5b89\u5168\u98ce\u9669 [^3]\u3002 \u7279\u6027 \u8fde\u63a5\u4e2a\u6570\uff1a\u591a\u8fde\u63a5 \u8fde\u63a5\u65b9\u5f0f\uff1a\u77ed\u8fde\u63a5 \u4f20\u8f93\u534f\u8bae\uff1aTCP \u4f20\u8f93\u65b9\u5f0f\uff1a\u540c\u6b65\u4f20\u8f93 \u5e8f\u5217\u5316\uff1aJava \u6807\u51c6\u4e8c\u8fdb\u5236\u5e8f\u5217\u5316 \u9002\u7528\u8303\u56f4\uff1a\u4f20\u5165\u4f20\u51fa\u53c2\u6570\u6570\u636e\u5305\u5927\u5c0f\u6df7\u5408\uff0c\u6d88\u8d39\u8005\u4e0e\u63d0\u4f9b\u8005\u4e2a\u6570\u5dee\u4e0d\u591a\uff0c\u53ef\u4f20\u6587\u4ef6\u3002 \u9002\u7528\u573a\u666f\uff1a\u5e38\u89c4\u8fdc\u7a0b\u670d\u52a1\u65b9\u6cd5\u8c03\u7528\uff0c\u4e0e\u539f\u751fRMI\u670d\u52a1\u4e92\u64cd\u4f5c \u7ea6\u675f \u53c2\u6570\u53ca\u8fd4\u56de\u503c\u9700\u5b9e\u73b0 Serializable \u63a5\u53e3 dubbo \u914d\u7f6e\u4e2d\u7684\u8d85\u65f6\u65f6\u95f4\u5bf9 RMI \u65e0\u6548\uff0c\u9700\u4f7f\u7528 java \u542f\u52a8\u53c2\u6570\u8bbe\u7f6e\uff1a -Dsun.rmi.transport.tcp.responseTimeout=3000 \uff0c\u53c2\u89c1\u4e0b\u9762\u7684 RMI \u914d\u7f6e dubbo.properties \u914d\u7f6e dubbo.service.protocol=rmi RMI\u914d\u7f6e java -Dsun.rmi.transport.tcp.responseTimeout=3000 \u66f4\u591a RMI \u4f18\u5316\u53c2\u6570\u8bf7\u67e5\u770b JDK \u6587\u6863 \u63a5\u53e3 \u5982\u679c\u670d\u52a1\u63a5\u53e3\u7ee7\u627f\u4e86 java.rmi.Remote \u63a5\u53e3\uff0c\u53ef\u4ee5\u548c\u539f\u751f RMI \u4e92\u64cd\u4f5c\uff0c\u5373\uff1a \u63d0\u4f9b\u8005\u7528 Dubbo \u7684 RMI \u534f\u8bae\u66b4\u9732\u670d\u52a1\uff0c\u6d88\u8d39\u8005\u76f4\u63a5\u7528\u6807\u51c6 RMI \u63a5\u53e3\u8c03\u7528\uff0c \u6216\u8005\u63d0\u4f9b\u65b9\u7528\u6807\u51c6 RMI \u66b4\u9732\u670d\u52a1\uff0c\u6d88\u8d39\u65b9\u7528 Dubbo \u7684 RMI \u534f\u8bae\u8c03\u7528\u3002 \u5982\u679c\u670d\u52a1\u63a5\u53e3\u6ca1\u6709\u7ee7\u627f java.rmi.Remote \u63a5\u53e3\uff1a \u7f3a\u7701 Dubbo \u5c06\u81ea\u52a8\u751f\u6210\u4e00\u4e2a com.xxx.XxxService$Remote \u7684\u63a5\u53e3\uff0c\u5e76\u7ee7\u627f java.rmi.Remote \u63a5\u53e3\uff0c\u5e76\u4ee5\u6b64\u63a5\u53e3\u66b4\u9732\u670d\u52a1\uff0c \u4f46\u5982\u679c\u8bbe\u7f6e\u4e86 dubbo:protocol name=\"rmi\" codec=\"spring\" / \uff0c\u5c06\u4e0d\u751f\u6210 $Remote \u63a5\u53e3\uff0c\u800c\u4f7f\u7528 Spring \u7684 RmiInvocationHandler \u63a5\u53e3\u66b4\u9732\u670d\u52a1\uff0c\u548c Spring \u517c\u5bb9\u3002 \u914d\u7f6e \u5b9a\u4e49 RMI \u534f\u8bae\uff1a dubbo:protocol name= rmi port= 1099 / \u8bbe\u7f6e\u9ed8\u8ba4\u534f\u8bae\uff1a dubbo:provider protocol= rmi / \u8bbe\u7f6e\u670d\u52a1\u534f\u8bae\uff1a dubbo:service protocol= rmi / \u591a\u7aef\u53e3\uff1a dubbo:protocol id= rmi1 name= rmi port= 1099 / dubbo:protocol id= rmi2 name= rmi port= 2099 / dubbo:service protocol= rmi1 / Spring \u517c\u5bb9\u6027\uff1a dubbo:protocol name= rmi codec= spring / [^2]: dubbo \u4e0d\u4f1a\u4f9d\u8d56\u8fd9\u4e2a\u5305\uff0c\u8bf7\u6392\u67e5\u81ea\u5df1\u7684\u5e94\u7528\u6709\u6ca1\u6709\u4f7f\u7528 [^3]: \u8bf7\u68c0\u67e5\u5e94\u7528\uff1a\u5c06 commons-collections3 \u8bf7\u5347\u7ea7\u5230 3.2.2 \uff1b\u5c06 commons-collections4 \u8bf7\u5347\u7ea7\u5230 4.1 \u3002\u65b0\u7248\u672c\u7684 commons-collections \u89e3\u51b3\u4e86\u8be5\u95ee\u9898","title":"rmi://"},{"location":"user/references/protocol/rmi/#rmi","text":"RMI \u534f\u8bae\u91c7\u7528 JDK \u6807\u51c6\u7684 java.rmi.* \u5b9e\u73b0\uff0c\u91c7\u7528\u963b\u585e\u5f0f\u77ed\u8fde\u63a5\u548c JDK \u6807\u51c6\u5e8f\u5217\u5316\u65b9\u5f0f\u3002 \u6ce8\u610f\uff1a\u5982\u679c\u6b63\u5728\u4f7f\u7528 RMI \u63d0\u4f9b\u670d\u52a1\u7ed9\u5916\u90e8\u8bbf\u95ee ^1 \uff0c\u540c\u65f6\u5e94\u7528\u91cc\u4f9d\u8d56\u4e86\u8001\u7684 common-collections \u5305 [^2] \u7684\u60c5\u51b5\u4e0b\uff0c\u5b58\u5728\u53cd\u5e8f\u5217\u5316\u5b89\u5168\u98ce\u9669 [^3]\u3002","title":"rmi://"},{"location":"user/references/protocol/rmi/#_1","text":"\u8fde\u63a5\u4e2a\u6570\uff1a\u591a\u8fde\u63a5 \u8fde\u63a5\u65b9\u5f0f\uff1a\u77ed\u8fde\u63a5 \u4f20\u8f93\u534f\u8bae\uff1aTCP \u4f20\u8f93\u65b9\u5f0f\uff1a\u540c\u6b65\u4f20\u8f93 \u5e8f\u5217\u5316\uff1aJava \u6807\u51c6\u4e8c\u8fdb\u5236\u5e8f\u5217\u5316 \u9002\u7528\u8303\u56f4\uff1a\u4f20\u5165\u4f20\u51fa\u53c2\u6570\u6570\u636e\u5305\u5927\u5c0f\u6df7\u5408\uff0c\u6d88\u8d39\u8005\u4e0e\u63d0\u4f9b\u8005\u4e2a\u6570\u5dee\u4e0d\u591a\uff0c\u53ef\u4f20\u6587\u4ef6\u3002 \u9002\u7528\u573a\u666f\uff1a\u5e38\u89c4\u8fdc\u7a0b\u670d\u52a1\u65b9\u6cd5\u8c03\u7528\uff0c\u4e0e\u539f\u751fRMI\u670d\u52a1\u4e92\u64cd\u4f5c","title":"\u7279\u6027"},{"location":"user/references/protocol/rmi/#_2","text":"\u53c2\u6570\u53ca\u8fd4\u56de\u503c\u9700\u5b9e\u73b0 Serializable \u63a5\u53e3 dubbo \u914d\u7f6e\u4e2d\u7684\u8d85\u65f6\u65f6\u95f4\u5bf9 RMI \u65e0\u6548\uff0c\u9700\u4f7f\u7528 java \u542f\u52a8\u53c2\u6570\u8bbe\u7f6e\uff1a -Dsun.rmi.transport.tcp.responseTimeout=3000 \uff0c\u53c2\u89c1\u4e0b\u9762\u7684 RMI \u914d\u7f6e","title":"\u7ea6\u675f"},{"location":"user/references/protocol/rmi/#dubboproperties","text":"dubbo.service.protocol=rmi","title":"dubbo.properties \u914d\u7f6e"},{"location":"user/references/protocol/rmi/#rmi_1","text":"java -Dsun.rmi.transport.tcp.responseTimeout=3000 \u66f4\u591a RMI \u4f18\u5316\u53c2\u6570\u8bf7\u67e5\u770b JDK \u6587\u6863","title":"RMI\u914d\u7f6e"},{"location":"user/references/protocol/rmi/#_3","text":"\u5982\u679c\u670d\u52a1\u63a5\u53e3\u7ee7\u627f\u4e86 java.rmi.Remote \u63a5\u53e3\uff0c\u53ef\u4ee5\u548c\u539f\u751f RMI \u4e92\u64cd\u4f5c\uff0c\u5373\uff1a \u63d0\u4f9b\u8005\u7528 Dubbo \u7684 RMI \u534f\u8bae\u66b4\u9732\u670d\u52a1\uff0c\u6d88\u8d39\u8005\u76f4\u63a5\u7528\u6807\u51c6 RMI \u63a5\u53e3\u8c03\u7528\uff0c \u6216\u8005\u63d0\u4f9b\u65b9\u7528\u6807\u51c6 RMI \u66b4\u9732\u670d\u52a1\uff0c\u6d88\u8d39\u65b9\u7528 Dubbo \u7684 RMI \u534f\u8bae\u8c03\u7528\u3002 \u5982\u679c\u670d\u52a1\u63a5\u53e3\u6ca1\u6709\u7ee7\u627f java.rmi.Remote \u63a5\u53e3\uff1a \u7f3a\u7701 Dubbo \u5c06\u81ea\u52a8\u751f\u6210\u4e00\u4e2a com.xxx.XxxService$Remote \u7684\u63a5\u53e3\uff0c\u5e76\u7ee7\u627f java.rmi.Remote \u63a5\u53e3\uff0c\u5e76\u4ee5\u6b64\u63a5\u53e3\u66b4\u9732\u670d\u52a1\uff0c \u4f46\u5982\u679c\u8bbe\u7f6e\u4e86 dubbo:protocol name=\"rmi\" codec=\"spring\" / \uff0c\u5c06\u4e0d\u751f\u6210 $Remote \u63a5\u53e3\uff0c\u800c\u4f7f\u7528 Spring \u7684 RmiInvocationHandler \u63a5\u53e3\u66b4\u9732\u670d\u52a1\uff0c\u548c Spring \u517c\u5bb9\u3002","title":"\u63a5\u53e3"},{"location":"user/references/protocol/rmi/#_4","text":"\u5b9a\u4e49 RMI \u534f\u8bae\uff1a dubbo:protocol name= rmi port= 1099 / \u8bbe\u7f6e\u9ed8\u8ba4\u534f\u8bae\uff1a dubbo:provider protocol= rmi / \u8bbe\u7f6e\u670d\u52a1\u534f\u8bae\uff1a dubbo:service protocol= rmi / \u591a\u7aef\u53e3\uff1a dubbo:protocol id= rmi1 name= rmi port= 1099 / dubbo:protocol id= rmi2 name= rmi port= 2099 / dubbo:service protocol= rmi1 / Spring \u517c\u5bb9\u6027\uff1a dubbo:protocol name= rmi codec= spring / [^2]: dubbo \u4e0d\u4f1a\u4f9d\u8d56\u8fd9\u4e2a\u5305\uff0c\u8bf7\u6392\u67e5\u81ea\u5df1\u7684\u5e94\u7528\u6709\u6ca1\u6709\u4f7f\u7528 [^3]: \u8bf7\u68c0\u67e5\u5e94\u7528\uff1a\u5c06 commons-collections3 \u8bf7\u5347\u7ea7\u5230 3.2.2 \uff1b\u5c06 commons-collections4 \u8bf7\u5347\u7ea7\u5230 4.1 \u3002\u65b0\u7248\u672c\u7684 commons-collections \u89e3\u51b3\u4e86\u8be5\u95ee\u9898","title":"\u914d\u7f6e"},{"location":"user/references/protocol/thrift/","text":"thrift:// \u5f53\u524d dubbo \u652f\u6301 [^1]\u7684 thrift \u534f\u8bae\u662f\u5bf9 thrift \u539f\u751f\u534f\u8bae [^2] \u7684\u6269\u5c55\uff0c\u5728\u539f\u751f\u534f\u8bae\u7684\u57fa\u7840\u4e0a\u6dfb\u52a0\u4e86\u4e00\u4e9b\u989d\u5916\u7684\u5934\u4fe1\u606f\uff0c\u6bd4\u5982 service name\uff0cmagic number \u7b49\u3002 \u4f7f\u7528 dubbo thrift \u534f\u8bae\u540c\u6837\u9700\u8981\u4f7f\u7528 thrift \u7684 idl compiler \u7f16\u8bd1\u751f\u6210\u76f8\u5e94\u7684 java \u4ee3\u7801\uff0c\u540e\u7eed\u7248\u672c\u4e2d\u4f1a\u5728\u8fd9\u65b9\u9762\u505a\u4e00\u4e9b\u589e\u5f3a\u3002 \u4f9d\u8d56 dependency groupId org.apache.thrift /groupId artifactId libthrift /artifactId version 0.8.0 /version /dependency \u914d\u7f6e \u6240\u6709\u670d\u52a1\u5171\u7528\u4e00\u4e2a\u7aef\u53e3 ^3 \uff1a dubbo:protocol name= thrift port= 3030 / \u4f7f\u7528 \u53ef\u4ee5\u53c2\u8003 dubbo \u9879\u76ee\u4e2d\u7684\u793a\u4f8b\u4ee3\u7801 \u5e38\u89c1\u95ee\u9898 Thrift \u4e0d\u652f\u6301 null \u503c\uff0c\u5373\uff1a\u4e0d\u80fd\u5728\u534f\u8bae\u4e2d\u4f20\u9012 null \u503c [^1]: 2.3.0 \u4ee5\u4e0a\u7248\u672c\u652f\u6301 [^2]: Thrift \u662f Facebook \u6350\u7ed9 Apache \u7684\u4e00\u4e2a RPC \u6846\u67b6","title":"thrift://"},{"location":"user/references/protocol/thrift/#thrift","text":"\u5f53\u524d dubbo \u652f\u6301 [^1]\u7684 thrift \u534f\u8bae\u662f\u5bf9 thrift \u539f\u751f\u534f\u8bae [^2] \u7684\u6269\u5c55\uff0c\u5728\u539f\u751f\u534f\u8bae\u7684\u57fa\u7840\u4e0a\u6dfb\u52a0\u4e86\u4e00\u4e9b\u989d\u5916\u7684\u5934\u4fe1\u606f\uff0c\u6bd4\u5982 service name\uff0cmagic number \u7b49\u3002 \u4f7f\u7528 dubbo thrift \u534f\u8bae\u540c\u6837\u9700\u8981\u4f7f\u7528 thrift \u7684 idl compiler \u7f16\u8bd1\u751f\u6210\u76f8\u5e94\u7684 java \u4ee3\u7801\uff0c\u540e\u7eed\u7248\u672c\u4e2d\u4f1a\u5728\u8fd9\u65b9\u9762\u505a\u4e00\u4e9b\u589e\u5f3a\u3002","title":"thrift://"},{"location":"user/references/protocol/thrift/#_1","text":"dependency groupId org.apache.thrift /groupId artifactId libthrift /artifactId version 0.8.0 /version /dependency","title":"\u4f9d\u8d56"},{"location":"user/references/protocol/thrift/#_2","text":"\u6240\u6709\u670d\u52a1\u5171\u7528\u4e00\u4e2a\u7aef\u53e3 ^3 \uff1a dubbo:protocol name= thrift port= 3030 /","title":"\u914d\u7f6e"},{"location":"user/references/protocol/thrift/#_3","text":"\u53ef\u4ee5\u53c2\u8003 dubbo \u9879\u76ee\u4e2d\u7684\u793a\u4f8b\u4ee3\u7801","title":"\u4f7f\u7528"},{"location":"user/references/protocol/thrift/#_4","text":"Thrift \u4e0d\u652f\u6301 null \u503c\uff0c\u5373\uff1a\u4e0d\u80fd\u5728\u534f\u8bae\u4e2d\u4f20\u9012 null \u503c [^1]: 2.3.0 \u4ee5\u4e0a\u7248\u672c\u652f\u6301 [^2]: Thrift \u662f Facebook \u6350\u7ed9 Apache \u7684\u4e00\u4e2a RPC \u6846\u67b6","title":"\u5e38\u89c1\u95ee\u9898"},{"location":"user/references/protocol/webservice/","text":"webservice:// \u57fa\u4e8e WebService \u7684\u8fdc\u7a0b\u8c03\u7528\u534f\u8bae\uff0c\u57fa\u4e8e Apache CXF [^1] \u7684 frontend-simple \u548c transports-http \u5b9e\u73b0 [^2]\u3002 \u53ef\u4ee5\u548c\u539f\u751f WebService \u670d\u52a1\u4e92\u64cd\u4f5c\uff0c\u5373\uff1a \u63d0\u4f9b\u8005\u7528 Dubbo \u7684 WebService \u534f\u8bae\u66b4\u9732\u670d\u52a1\uff0c\u6d88\u8d39\u8005\u76f4\u63a5\u7528\u6807\u51c6 WebService \u63a5\u53e3\u8c03\u7528\uff0c \u6216\u8005\u63d0\u4f9b\u65b9\u7528\u6807\u51c6 WebService \u66b4\u9732\u670d\u52a1\uff0c\u6d88\u8d39\u65b9\u7528 Dubbo \u7684 WebService \u534f\u8bae\u8c03\u7528\u3002 \u4f9d\u8d56 dependency groupId org.apache.cxf /groupId artifactId cxf-rt-frontend-simple /artifactId version 2.6.1 /version /dependency dependency groupId org.apache.cxf /groupId artifactId cxf-rt-transports-http /artifactId version 2.6.1 /version /dependency \u7279\u6027 \u8fde\u63a5\u4e2a\u6570\uff1a\u591a\u8fde\u63a5 \u8fde\u63a5\u65b9\u5f0f\uff1a\u77ed\u8fde\u63a5 \u4f20\u8f93\u534f\u8bae\uff1aHTTP \u4f20\u8f93\u65b9\u5f0f\uff1a\u540c\u6b65\u4f20\u8f93 \u5e8f\u5217\u5316\uff1aSOAP \u6587\u672c\u5e8f\u5217\u5316 \u9002\u7528\u573a\u666f\uff1a\u7cfb\u7edf\u96c6\u6210\uff0c\u8de8\u8bed\u8a00\u8c03\u7528 \u7ea6\u675f \u53c2\u6570\u53ca\u8fd4\u56de\u503c\u9700\u5b9e\u73b0 Serializable \u63a5\u53e3 \u53c2\u6570\u5c3d\u91cf\u4f7f\u7528\u57fa\u672c\u7c7b\u578b\u548c POJO \u914d\u7f6e \u914d\u7f6e\u534f\u8bae\uff1a dubbo:protocol name= webservice port= 8080 server= jetty / \u914d\u7f6e\u9ed8\u8ba4\u534f\u8bae\uff1a dubbo:provider protocol= webservice / \u914d\u7f6e\u670d\u52a1\u534f\u8bae\uff1a dubbo:service protocol= webservice / \u591a\u7aef\u53e3\uff1a dubbo:protocol id= webservice1 name= webservice port= 8080 / dubbo:protocol id= webservice2 name= webservice port= 8081 / \u76f4\u8fde\uff1a dubbo:reference id= helloService interface= HelloWorld url= webservice://10.20.153.10:8080/com.foo.HelloWorld / WSDL\uff1a http://10.20.153.10:8080/com.foo.HelloWorld?wsdl Jetty Server (\u9ed8\u8ba4)\uff1a dubbo:protocol ... server= jetty / Servlet Bridge Server (\u63a8\u8350)\uff1a dubbo:protocol ... server= servlet / \u914d\u7f6e DispatcherServlet\uff1a servlet servlet-name dubbo /servlet-name servlet-class org.apache.dubbo.remoting.http.servlet.DispatcherServlet /servlet-class load-on-startup 1 /load-on-startup /servlet servlet-mapping servlet-name dubbo /servlet-name url-pattern /* /url-pattern /servlet-mapping \u6ce8\u610f\uff0c\u5982\u679c\u4f7f\u7528 servlet \u6d3e\u53d1\u8bf7\u6c42\uff1a \u534f\u8bae\u7684\u7aef\u53e3 dubbo:protocol port=\"8080\" / \u5fc5\u987b\u4e0e servlet \u5bb9\u5668\u7684\u7aef\u53e3\u76f8\u540c\uff0c \u534f\u8bae\u7684\u4e0a\u4e0b\u6587\u8def\u5f84 dubbo:protocol contextpath=\"foo\" / \u5fc5\u987b\u4e0e servlet \u5e94\u7528\u7684\u4e0a\u4e0b\u6587\u8def\u5f84\u76f8\u540c\u3002 [^1]: CXF \u662f Apache \u5f00\u6e90\u7684\u4e00\u4e2a RPC \u6846\u67b6\uff0c\u7531 Xfire \u548c Celtix \u5408\u5e76\u800c\u6765 [^2]: 2.3.0 \u4ee5\u4e0a\u7248\u672c\u652f\u6301","title":"webservice://"},{"location":"user/references/protocol/webservice/#webservice","text":"\u57fa\u4e8e WebService \u7684\u8fdc\u7a0b\u8c03\u7528\u534f\u8bae\uff0c\u57fa\u4e8e Apache CXF [^1] \u7684 frontend-simple \u548c transports-http \u5b9e\u73b0 [^2]\u3002 \u53ef\u4ee5\u548c\u539f\u751f WebService \u670d\u52a1\u4e92\u64cd\u4f5c\uff0c\u5373\uff1a \u63d0\u4f9b\u8005\u7528 Dubbo \u7684 WebService \u534f\u8bae\u66b4\u9732\u670d\u52a1\uff0c\u6d88\u8d39\u8005\u76f4\u63a5\u7528\u6807\u51c6 WebService \u63a5\u53e3\u8c03\u7528\uff0c \u6216\u8005\u63d0\u4f9b\u65b9\u7528\u6807\u51c6 WebService \u66b4\u9732\u670d\u52a1\uff0c\u6d88\u8d39\u65b9\u7528 Dubbo \u7684 WebService \u534f\u8bae\u8c03\u7528\u3002","title":"webservice://"},{"location":"user/references/protocol/webservice/#_1","text":"dependency groupId org.apache.cxf /groupId artifactId cxf-rt-frontend-simple /artifactId version 2.6.1 /version /dependency dependency groupId org.apache.cxf /groupId artifactId cxf-rt-transports-http /artifactId version 2.6.1 /version /dependency","title":"\u4f9d\u8d56"},{"location":"user/references/protocol/webservice/#_2","text":"\u8fde\u63a5\u4e2a\u6570\uff1a\u591a\u8fde\u63a5 \u8fde\u63a5\u65b9\u5f0f\uff1a\u77ed\u8fde\u63a5 \u4f20\u8f93\u534f\u8bae\uff1aHTTP \u4f20\u8f93\u65b9\u5f0f\uff1a\u540c\u6b65\u4f20\u8f93 \u5e8f\u5217\u5316\uff1aSOAP \u6587\u672c\u5e8f\u5217\u5316 \u9002\u7528\u573a\u666f\uff1a\u7cfb\u7edf\u96c6\u6210\uff0c\u8de8\u8bed\u8a00\u8c03\u7528","title":"\u7279\u6027"},{"location":"user/references/protocol/webservice/#_3","text":"\u53c2\u6570\u53ca\u8fd4\u56de\u503c\u9700\u5b9e\u73b0 Serializable \u63a5\u53e3 \u53c2\u6570\u5c3d\u91cf\u4f7f\u7528\u57fa\u672c\u7c7b\u578b\u548c POJO","title":"\u7ea6\u675f"},{"location":"user/references/protocol/webservice/#_4","text":"\u914d\u7f6e\u534f\u8bae\uff1a dubbo:protocol name= webservice port= 8080 server= jetty / \u914d\u7f6e\u9ed8\u8ba4\u534f\u8bae\uff1a dubbo:provider protocol= webservice / \u914d\u7f6e\u670d\u52a1\u534f\u8bae\uff1a dubbo:service protocol= webservice / \u591a\u7aef\u53e3\uff1a dubbo:protocol id= webservice1 name= webservice port= 8080 / dubbo:protocol id= webservice2 name= webservice port= 8081 / \u76f4\u8fde\uff1a dubbo:reference id= helloService interface= HelloWorld url= webservice://10.20.153.10:8080/com.foo.HelloWorld / WSDL\uff1a http://10.20.153.10:8080/com.foo.HelloWorld?wsdl Jetty Server (\u9ed8\u8ba4)\uff1a dubbo:protocol ... server= jetty / Servlet Bridge Server (\u63a8\u8350)\uff1a dubbo:protocol ... server= servlet / \u914d\u7f6e DispatcherServlet\uff1a servlet servlet-name dubbo /servlet-name servlet-class org.apache.dubbo.remoting.http.servlet.DispatcherServlet /servlet-class load-on-startup 1 /load-on-startup /servlet servlet-mapping servlet-name dubbo /servlet-name url-pattern /* /url-pattern /servlet-mapping \u6ce8\u610f\uff0c\u5982\u679c\u4f7f\u7528 servlet \u6d3e\u53d1\u8bf7\u6c42\uff1a \u534f\u8bae\u7684\u7aef\u53e3 dubbo:protocol port=\"8080\" / \u5fc5\u987b\u4e0e servlet \u5bb9\u5668\u7684\u7aef\u53e3\u76f8\u540c\uff0c \u534f\u8bae\u7684\u4e0a\u4e0b\u6587\u8def\u5f84 dubbo:protocol contextpath=\"foo\" / \u5fc5\u987b\u4e0e servlet \u5e94\u7528\u7684\u4e0a\u4e0b\u6587\u8def\u5f84\u76f8\u540c\u3002 [^1]: CXF \u662f Apache \u5f00\u6e90\u7684\u4e00\u4e2a RPC \u6846\u67b6\uff0c\u7531 Xfire \u548c Celtix \u5408\u5e76\u800c\u6765 [^2]: 2.3.0 \u4ee5\u4e0a\u7248\u672c\u652f\u6301","title":"\u914d\u7f6e"},{"location":"user/references/registry/introduction/","text":"\u6ce8\u518c\u4e2d\u5fc3\u53c2\u8003\u624b\u518c \u63a8\u8350\u4f7f\u7528 Zookeeper \u6ce8\u518c\u4e2d\u5fc3","title":"Introduction"},{"location":"user/references/registry/introduction/#_1","text":"\u63a8\u8350\u4f7f\u7528 Zookeeper \u6ce8\u518c\u4e2d\u5fc3","title":"\u6ce8\u518c\u4e2d\u5fc3\u53c2\u8003\u624b\u518c"},{"location":"user/references/registry/multicast/","text":"Multicast \u6ce8\u518c\u4e2d\u5fc3 Multicast \u6ce8\u518c\u4e2d\u5fc3\u4e0d\u9700\u8981\u542f\u52a8\u4efb\u4f55\u4e2d\u5fc3\u8282\u70b9\uff0c\u53ea\u8981\u5e7f\u64ad\u5730\u5740\u4e00\u6837\uff0c\u5c31\u53ef\u4ee5\u4e92\u76f8\u53d1\u73b0\u3002 \u63d0\u4f9b\u65b9\u542f\u52a8\u65f6\u5e7f\u64ad\u81ea\u5df1\u7684\u5730\u5740 \u6d88\u8d39\u65b9\u542f\u52a8\u65f6\u5e7f\u64ad\u8ba2\u9605\u8bf7\u6c42 \u63d0\u4f9b\u65b9\u6536\u5230\u8ba2\u9605\u8bf7\u6c42\u65f6\uff0c\u5355\u64ad\u81ea\u5df1\u7684\u5730\u5740\u7ed9\u8ba2\u9605\u8005\uff0c\u5982\u679c\u8bbe\u7f6e\u4e86 unicast=false \uff0c\u5219\u5e7f\u64ad\u7ed9\u8ba2\u9605\u8005 \u6d88\u8d39\u65b9\u6536\u5230\u63d0\u4f9b\u65b9\u5730\u5740\u65f6\uff0c\u8fde\u63a5\u8be5\u5730\u5740\u8fdb\u884c RPC \u8c03\u7528\u3002 \u7ec4\u64ad\u53d7\u7f51\u7edc\u7ed3\u6784\u9650\u5236\uff0c\u53ea\u9002\u5408\u5c0f\u89c4\u6a21\u5e94\u7528\u6216\u5f00\u53d1\u9636\u6bb5\u4f7f\u7528\u3002\u7ec4\u64ad\u5730\u5740\u6bb5: 224.0.0.0 - 239.255.255.255 \u914d\u7f6e dubbo:registry address= multicast://224.5.6.7:1234 / \u6216 dubbo:registry protocol= multicast address= 224.5.6.7:1234 / \u4e3a\u4e86\u51cf\u5c11\u5e7f\u64ad\u91cf\uff0cDubbo \u7f3a\u7701\u4f7f\u7528\u5355\u64ad\u53d1\u9001\u63d0\u4f9b\u8005\u5730\u5740\u4fe1\u606f\u7ed9\u6d88\u8d39\u8005\uff0c\u5982\u679c\u4e00\u4e2a\u673a\u5668\u4e0a\u540c\u65f6\u542f\u4e86\u591a\u4e2a\u6d88\u8d39\u8005\u8fdb\u7a0b\uff0c\u6d88\u8d39\u8005\u9700\u58f0\u660e unicast=false \uff0c\u5426\u5219\u53ea\u4f1a\u6709\u4e00\u4e2a\u6d88\u8d39\u8005\u80fd\u6536\u5230\u6d88\u606f;\u5f53\u670d\u52a1\u8005\u548c\u6d88\u8d39\u8005\u8fd0\u884c\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a\uff0c\u6d88\u8d39\u8005\u540c\u6837\u9700\u8981\u58f0\u660e unicast=false \uff0c\u5426\u5219\u6d88\u8d39\u8005\u65e0\u6cd5\u6536\u5230\u6d88\u606f\uff0c\u5bfc\u81f4No provider available for the service\u5f02\u5e38\uff1a dubbo:registry address= multicast://224.5.6.7:1234?unicast=false / \u6216 dubbo:registry protocol= multicast address= 224.5.6.7:1234 dubbo:parameter key= unicast value= false / /dubbo:registry","title":"Multicast \u6ce8\u518c\u4e2d\u5fc3"},{"location":"user/references/registry/multicast/#multicast","text":"Multicast \u6ce8\u518c\u4e2d\u5fc3\u4e0d\u9700\u8981\u542f\u52a8\u4efb\u4f55\u4e2d\u5fc3\u8282\u70b9\uff0c\u53ea\u8981\u5e7f\u64ad\u5730\u5740\u4e00\u6837\uff0c\u5c31\u53ef\u4ee5\u4e92\u76f8\u53d1\u73b0\u3002 \u63d0\u4f9b\u65b9\u542f\u52a8\u65f6\u5e7f\u64ad\u81ea\u5df1\u7684\u5730\u5740 \u6d88\u8d39\u65b9\u542f\u52a8\u65f6\u5e7f\u64ad\u8ba2\u9605\u8bf7\u6c42 \u63d0\u4f9b\u65b9\u6536\u5230\u8ba2\u9605\u8bf7\u6c42\u65f6\uff0c\u5355\u64ad\u81ea\u5df1\u7684\u5730\u5740\u7ed9\u8ba2\u9605\u8005\uff0c\u5982\u679c\u8bbe\u7f6e\u4e86 unicast=false \uff0c\u5219\u5e7f\u64ad\u7ed9\u8ba2\u9605\u8005 \u6d88\u8d39\u65b9\u6536\u5230\u63d0\u4f9b\u65b9\u5730\u5740\u65f6\uff0c\u8fde\u63a5\u8be5\u5730\u5740\u8fdb\u884c RPC \u8c03\u7528\u3002 \u7ec4\u64ad\u53d7\u7f51\u7edc\u7ed3\u6784\u9650\u5236\uff0c\u53ea\u9002\u5408\u5c0f\u89c4\u6a21\u5e94\u7528\u6216\u5f00\u53d1\u9636\u6bb5\u4f7f\u7528\u3002\u7ec4\u64ad\u5730\u5740\u6bb5: 224.0.0.0 - 239.255.255.255","title":"Multicast \u6ce8\u518c\u4e2d\u5fc3"},{"location":"user/references/registry/multicast/#_1","text":"dubbo:registry address= multicast://224.5.6.7:1234 / \u6216 dubbo:registry protocol= multicast address= 224.5.6.7:1234 / \u4e3a\u4e86\u51cf\u5c11\u5e7f\u64ad\u91cf\uff0cDubbo \u7f3a\u7701\u4f7f\u7528\u5355\u64ad\u53d1\u9001\u63d0\u4f9b\u8005\u5730\u5740\u4fe1\u606f\u7ed9\u6d88\u8d39\u8005\uff0c\u5982\u679c\u4e00\u4e2a\u673a\u5668\u4e0a\u540c\u65f6\u542f\u4e86\u591a\u4e2a\u6d88\u8d39\u8005\u8fdb\u7a0b\uff0c\u6d88\u8d39\u8005\u9700\u58f0\u660e unicast=false \uff0c\u5426\u5219\u53ea\u4f1a\u6709\u4e00\u4e2a\u6d88\u8d39\u8005\u80fd\u6536\u5230\u6d88\u606f;\u5f53\u670d\u52a1\u8005\u548c\u6d88\u8d39\u8005\u8fd0\u884c\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a\uff0c\u6d88\u8d39\u8005\u540c\u6837\u9700\u8981\u58f0\u660e unicast=false \uff0c\u5426\u5219\u6d88\u8d39\u8005\u65e0\u6cd5\u6536\u5230\u6d88\u606f\uff0c\u5bfc\u81f4No provider available for the service\u5f02\u5e38\uff1a dubbo:registry address= multicast://224.5.6.7:1234?unicast=false / \u6216 dubbo:registry protocol= multicast address= 224.5.6.7:1234 dubbo:parameter key= unicast value= false / /dubbo:registry","title":"\u914d\u7f6e"},{"location":"user/references/registry/nacos/","text":"Nacos \u6ce8\u518c\u4e2d\u5fc3 Nacos \u662f Dubbo \u751f\u6001\u7cfb\u7edf\u4e2d\u91cd\u8981\u7684\u6ce8\u518c\u4e2d\u5fc3\u5b9e\u73b0\uff0c\u5176\u4e2d dubbo-registry-nacos \u5219\u662f Dubbo \u878d\u5408 Nacos \u6ce8\u518c\u4e2d\u5fc3\u7684\u5b9e\u73b0\u3002 \u9884\u5907\u5de5\u4f5c \u5f53\u60a8\u5c06 dubbo-registry-nacos \u6574\u5408\u5230\u60a8\u7684 Dubbo \u5de5\u7a0b\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u540e\u53f0\u5df2\u7ecf\u542f\u52a8 Nacos \u670d\u52a1\u3002\u5982\u679c\u60a8\u5c1a\u4e14\u4e0d\u719f\u6089 Nacos \u7684\u57fa\u672c\u4f7f\u7528\u7684\u8bdd\uff0c\u53ef\u5148\u884c\u53c2\u8003 Nacos \u5feb\u901f\u5165\u95e8 \u3002\u5efa\u8bae\u4f7f\u7528 Nacos 1.0.0 \u53ca\u4ee5\u4e0a\u7684\u7248\u672c\u3002 \u5feb\u901f\u4e0a\u624b Dubbo \u878d\u5408 Nacos \u6210\u4e3a\u6ce8\u518c\u4e2d\u5fc3\u7684\u64cd\u4f5c\u6b65\u9aa4\u975e\u5e38\u7b80\u5355\uff0c\u5927\u81f4\u6b65\u9aa4\u53ef\u5206\u4e3a\u201c\u589e\u52a0 Maven \u4f9d\u8d56\u201d\u4ee5\u53ca\u201c\u914d\u7f6e\u6ce8\u518c\u4e2d\u5fc3\u201c\u3002 \u589e\u52a0 Maven \u4f9d\u8d56 \u9996\u5148\uff0c\u60a8\u9700\u8981 dubbo-registry-nacos \u7684 Maven \u4f9d\u8d56\u6dfb\u52a0\u5230\u60a8\u7684\u9879\u76ee\u4e2d pom.xml \u6587\u4ef6\u4e2d\uff0c\u5e76\u4e14\u5f3a\u70c8\u5730\u63a8\u8350\u60a8\u4f7f\u7528 Dubbo 2.6.5 \uff1a dependencies ... !-- Dubbo Nacos registry dependency -- dependency groupId com.alibaba /groupId artifactId dubbo-registry-nacos /artifactId version 0.0.2 /version /dependency !-- Keep latest Nacos client version -- dependency groupId com.alibaba.nacos /groupId artifactId nacos-client /artifactId version [0.6.1,) /version /dependency !-- Dubbo dependency -- dependency groupId com.alibaba /groupId artifactId dubbo /artifactId version 2.6.5 /version /dependency !-- Alibaba Spring Context extension -- dependency groupId com.alibaba.spring /groupId artifactId spring-context-support /artifactId version 1.0.2 /version /dependency ... /dependencies \u5f53\u9879\u76ee\u4e2d\u6dfb\u52a0 dubbo-registry-nacos \u540e\uff0c\u60a8\u65e0\u9700\u663e\u793a\u5730\u7f16\u7a0b\u5b9e\u73b0\u670d\u52a1\u53d1\u73b0\u548c\u6ce8\u518c\u903b\u8f91\uff0c\u5b9e\u9645\u5b9e\u73b0\u7531\u8be5\u4e09\u65b9\u5305\u63d0\u4f9b\uff0c\u63a5\u4e0b\u6765\u914d\u7f6e Naocs \u6ce8\u518c\u4e2d\u5fc3\u3002 \u914d\u7f6e\u6ce8\u518c\u4e2d\u5fc3 \u5047\u8bbe\u60a8 Dubbo \u5e94\u7528\u4f7f\u7528 Spring Framework \u88c5\u914d\uff0c\u5c06\u6709\u4e24\u79cd\u914d\u7f6e\u65b9\u6cd5\u53ef\u9009\uff0c\u5206\u522b\u4e3a\uff1a Dubbo Spring \u5916\u90e8\u5316\u914d\u7f6e \u4ee5\u53ca Spring XML \u914d\u7f6e\u6587\u4ef6\u4ee5\u53ca \uff0c\u63a8\u8350\u524d\u8005\u3002 Dubbo Spring \u5916\u90e8\u5316\u914d\u7f6e Dubbo Spring \u5916\u90e8\u5316\u914d\u7f6e\u662f\u7531 Dubbo 2.5.8 \u5f15\u5165\u7684\u65b0\u7279\u6027\uff0c\u53ef\u901a\u8fc7 Spring Environment \u5c5e\u6027\u81ea\u52a8\u5730\u751f\u6210\u5e76\u7ed1\u5b9a Dubbo \u914d\u7f6e Bean\uff0c\u5b9e\u73b0\u914d\u7f6e\u7b80\u5316\uff0c\u5e76\u4e14\u964d\u4f4e\u5fae\u670d\u52a1\u5f00\u53d1\u95e8\u69db\u3002 \u5047\u8bbe\u60a8\u7684 Nacos Server \u540c\u6837\u8fd0\u884c\u5728\u670d\u52a1\u5668 10.20.153.10 \u4e0a\uff0c\u5e76\u4f7f\u7528\u9ed8\u8ba4 Nacos \u670d\u52a1\u7aef\u53e3 8848 \uff0c\u60a8\u53ea\u9700\u5c06 dubbo.registry.address \u5c5e\u6027\u8c03\u6574\u5982\u4e0b\uff1a ## \u5176\u4ed6\u5c5e\u6027\u4fdd\u6301\u4e0d\u53d8 ## Nacos registry address dubbo.registry.address = nacos://10.20.153.10:8848 ... \u968f\u540e\uff0c\u91cd\u542f\u60a8\u7684 Dubbo \u5e94\u7528\uff0cDubbo \u7684\u670d\u52a1\u63d0\u4f9b\u548c\u6d88\u8d39\u4fe1\u606f\u5728 Nacos \u63a7\u5236\u53f0\u4e2d\u53ef\u4ee5\u663e\u793a\uff1a \u5982\u56fe\u6240\u793a\uff0c\u670d\u52a1\u540d\u524d\u7f00\u4e3a providers: \u7684\u4fe1\u606f\u4e3a\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u5143\u4fe1\u606f\uff0c consumers: \u5219\u4ee3\u8868\u670d\u52a1\u6d88\u8d39\u8005\u7684\u5143\u4fe1\u606f\u3002\u70b9\u51fb\u201c \u8be6\u60c5 \u201d\u53ef\u67e5\u770b\u670d\u52a1\u72b6\u6001\u8be6\u60c5\uff1a \u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528 Spring XML \u914d\u7f6e\u6587\u4ef6\u88c5\u914d Dubbo \u6ce8\u518c\u4e2d\u5fc3\u7684\u8bdd\uff0c\u8bf7\u53c2\u8003\u4e0b\u4e00\u8282\u3002 Spring XML \u914d\u7f6e\u6587\u4ef6 \u4e0e Dubbo Spring \u5916\u90e8\u5316\u914d\u7f6e \u914d\u7f6e\u7c7b\u4f3c\uff0c\u53ea\u9700\u8981\u8c03\u6574 address \u5c5e\u6027\u914d\u7f6e\u5373\u53ef\uff1a ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd !-- \u63d0\u4f9b\u65b9\u5e94\u7528\u4fe1\u606f\uff0c\u7528\u4e8e\u8ba1\u7b97\u4f9d\u8d56\u5173\u7cfb -- dubbo:application name= dubbo-provider-xml-demo / !-- \u4f7f\u7528 Nacos \u6ce8\u518c\u4e2d\u5fc3 -- dubbo:registry address= nacos://10.20.153.10:8848 / ... /beans \u91cd\u542f Dubbo \u5e94\u7528\u540e\uff0c\u60a8\u540c\u6837\u4e5f\u80fd\u53d1\u73b0\u670d\u52a1\u63d0\u4f9b\u65b9\u548c\u6d88\u8d39\u65b9\u7684\u6ce8\u518c\u5143\u4fe1\u606f\u5448\u73b0\u5728 Nacos \u63a7\u5236\u53f0\u4e2d\uff1a","title":"Nacos \u6ce8\u518c\u4e2d\u5fc3"},{"location":"user/references/registry/nacos/#nacos","text":"Nacos \u662f Dubbo \u751f\u6001\u7cfb\u7edf\u4e2d\u91cd\u8981\u7684\u6ce8\u518c\u4e2d\u5fc3\u5b9e\u73b0\uff0c\u5176\u4e2d dubbo-registry-nacos \u5219\u662f Dubbo \u878d\u5408 Nacos \u6ce8\u518c\u4e2d\u5fc3\u7684\u5b9e\u73b0\u3002","title":"Nacos \u6ce8\u518c\u4e2d\u5fc3"},{"location":"user/references/registry/nacos/#_1","text":"\u5f53\u60a8\u5c06 dubbo-registry-nacos \u6574\u5408\u5230\u60a8\u7684 Dubbo \u5de5\u7a0b\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u540e\u53f0\u5df2\u7ecf\u542f\u52a8 Nacos \u670d\u52a1\u3002\u5982\u679c\u60a8\u5c1a\u4e14\u4e0d\u719f\u6089 Nacos \u7684\u57fa\u672c\u4f7f\u7528\u7684\u8bdd\uff0c\u53ef\u5148\u884c\u53c2\u8003 Nacos \u5feb\u901f\u5165\u95e8 \u3002\u5efa\u8bae\u4f7f\u7528 Nacos 1.0.0 \u53ca\u4ee5\u4e0a\u7684\u7248\u672c\u3002","title":"\u9884\u5907\u5de5\u4f5c"},{"location":"user/references/registry/nacos/#_2","text":"Dubbo \u878d\u5408 Nacos \u6210\u4e3a\u6ce8\u518c\u4e2d\u5fc3\u7684\u64cd\u4f5c\u6b65\u9aa4\u975e\u5e38\u7b80\u5355\uff0c\u5927\u81f4\u6b65\u9aa4\u53ef\u5206\u4e3a\u201c\u589e\u52a0 Maven \u4f9d\u8d56\u201d\u4ee5\u53ca\u201c\u914d\u7f6e\u6ce8\u518c\u4e2d\u5fc3\u201c\u3002","title":"\u5feb\u901f\u4e0a\u624b"},{"location":"user/references/registry/nacos/#maven","text":"\u9996\u5148\uff0c\u60a8\u9700\u8981 dubbo-registry-nacos \u7684 Maven \u4f9d\u8d56\u6dfb\u52a0\u5230\u60a8\u7684\u9879\u76ee\u4e2d pom.xml \u6587\u4ef6\u4e2d\uff0c\u5e76\u4e14\u5f3a\u70c8\u5730\u63a8\u8350\u60a8\u4f7f\u7528 Dubbo 2.6.5 \uff1a dependencies ... !-- Dubbo Nacos registry dependency -- dependency groupId com.alibaba /groupId artifactId dubbo-registry-nacos /artifactId version 0.0.2 /version /dependency !-- Keep latest Nacos client version -- dependency groupId com.alibaba.nacos /groupId artifactId nacos-client /artifactId version [0.6.1,) /version /dependency !-- Dubbo dependency -- dependency groupId com.alibaba /groupId artifactId dubbo /artifactId version 2.6.5 /version /dependency !-- Alibaba Spring Context extension -- dependency groupId com.alibaba.spring /groupId artifactId spring-context-support /artifactId version 1.0.2 /version /dependency ... /dependencies \u5f53\u9879\u76ee\u4e2d\u6dfb\u52a0 dubbo-registry-nacos \u540e\uff0c\u60a8\u65e0\u9700\u663e\u793a\u5730\u7f16\u7a0b\u5b9e\u73b0\u670d\u52a1\u53d1\u73b0\u548c\u6ce8\u518c\u903b\u8f91\uff0c\u5b9e\u9645\u5b9e\u73b0\u7531\u8be5\u4e09\u65b9\u5305\u63d0\u4f9b\uff0c\u63a5\u4e0b\u6765\u914d\u7f6e Naocs \u6ce8\u518c\u4e2d\u5fc3\u3002","title":"\u589e\u52a0 Maven \u4f9d\u8d56"},{"location":"user/references/registry/nacos/#_3","text":"\u5047\u8bbe\u60a8 Dubbo \u5e94\u7528\u4f7f\u7528 Spring Framework \u88c5\u914d\uff0c\u5c06\u6709\u4e24\u79cd\u914d\u7f6e\u65b9\u6cd5\u53ef\u9009\uff0c\u5206\u522b\u4e3a\uff1a Dubbo Spring \u5916\u90e8\u5316\u914d\u7f6e \u4ee5\u53ca Spring XML \u914d\u7f6e\u6587\u4ef6\u4ee5\u53ca \uff0c\u63a8\u8350\u524d\u8005\u3002","title":"\u914d\u7f6e\u6ce8\u518c\u4e2d\u5fc3"},{"location":"user/references/registry/nacos/#dubbo-spring","text":"Dubbo Spring \u5916\u90e8\u5316\u914d\u7f6e\u662f\u7531 Dubbo 2.5.8 \u5f15\u5165\u7684\u65b0\u7279\u6027\uff0c\u53ef\u901a\u8fc7 Spring Environment \u5c5e\u6027\u81ea\u52a8\u5730\u751f\u6210\u5e76\u7ed1\u5b9a Dubbo \u914d\u7f6e Bean\uff0c\u5b9e\u73b0\u914d\u7f6e\u7b80\u5316\uff0c\u5e76\u4e14\u964d\u4f4e\u5fae\u670d\u52a1\u5f00\u53d1\u95e8\u69db\u3002 \u5047\u8bbe\u60a8\u7684 Nacos Server \u540c\u6837\u8fd0\u884c\u5728\u670d\u52a1\u5668 10.20.153.10 \u4e0a\uff0c\u5e76\u4f7f\u7528\u9ed8\u8ba4 Nacos \u670d\u52a1\u7aef\u53e3 8848 \uff0c\u60a8\u53ea\u9700\u5c06 dubbo.registry.address \u5c5e\u6027\u8c03\u6574\u5982\u4e0b\uff1a ## \u5176\u4ed6\u5c5e\u6027\u4fdd\u6301\u4e0d\u53d8 ## Nacos registry address dubbo.registry.address = nacos://10.20.153.10:8848 ... \u968f\u540e\uff0c\u91cd\u542f\u60a8\u7684 Dubbo \u5e94\u7528\uff0cDubbo \u7684\u670d\u52a1\u63d0\u4f9b\u548c\u6d88\u8d39\u4fe1\u606f\u5728 Nacos \u63a7\u5236\u53f0\u4e2d\u53ef\u4ee5\u663e\u793a\uff1a \u5982\u56fe\u6240\u793a\uff0c\u670d\u52a1\u540d\u524d\u7f00\u4e3a providers: \u7684\u4fe1\u606f\u4e3a\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u5143\u4fe1\u606f\uff0c consumers: \u5219\u4ee3\u8868\u670d\u52a1\u6d88\u8d39\u8005\u7684\u5143\u4fe1\u606f\u3002\u70b9\u51fb\u201c \u8be6\u60c5 \u201d\u53ef\u67e5\u770b\u670d\u52a1\u72b6\u6001\u8be6\u60c5\uff1a \u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528 Spring XML \u914d\u7f6e\u6587\u4ef6\u88c5\u914d Dubbo \u6ce8\u518c\u4e2d\u5fc3\u7684\u8bdd\uff0c\u8bf7\u53c2\u8003\u4e0b\u4e00\u8282\u3002","title":"Dubbo Spring \u5916\u90e8\u5316\u914d\u7f6e"},{"location":"user/references/registry/nacos/#spring-xml","text":"\u4e0e Dubbo Spring \u5916\u90e8\u5316\u914d\u7f6e \u914d\u7f6e\u7c7b\u4f3c\uff0c\u53ea\u9700\u8981\u8c03\u6574 address \u5c5e\u6027\u914d\u7f6e\u5373\u53ef\uff1a ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd !-- \u63d0\u4f9b\u65b9\u5e94\u7528\u4fe1\u606f\uff0c\u7528\u4e8e\u8ba1\u7b97\u4f9d\u8d56\u5173\u7cfb -- dubbo:application name= dubbo-provider-xml-demo / !-- \u4f7f\u7528 Nacos \u6ce8\u518c\u4e2d\u5fc3 -- dubbo:registry address= nacos://10.20.153.10:8848 / ... /beans \u91cd\u542f Dubbo \u5e94\u7528\u540e\uff0c\u60a8\u540c\u6837\u4e5f\u80fd\u53d1\u73b0\u670d\u52a1\u63d0\u4f9b\u65b9\u548c\u6d88\u8d39\u65b9\u7684\u6ce8\u518c\u5143\u4fe1\u606f\u5448\u73b0\u5728 Nacos \u63a7\u5236\u53f0\u4e2d\uff1a","title":"Spring XML \u914d\u7f6e\u6587\u4ef6"},{"location":"user/references/registry/redis/","text":"Redis \u6ce8\u518c\u4e2d\u5fc3 \u57fa\u4e8e Redis [^1] \u5b9e\u73b0\u7684\u6ce8\u518c\u4e2d\u5fc3 [^2]\u3002 \u4f7f\u7528 Redis \u7684 Key/Map \u7ed3\u6784\u5b58\u50a8\u6570\u636e\u7ed3\u6784\uff1a \u4e3b Key \u4e3a\u670d\u52a1\u540d\u548c\u7c7b\u578b Map \u4e2d\u7684 Key \u4e3a URL \u5730\u5740 Map \u4e2d\u7684 Value \u4e3a\u8fc7\u671f\u65f6\u95f4\uff0c\u7528\u4e8e\u5224\u65ad\u810f\u6570\u636e\uff0c\u810f\u6570\u636e\u7531\u76d1\u63a7\u4e2d\u5fc3\u5220\u9664 [^3] \u4f7f\u7528 Redis \u7684 Publish/Subscribe \u4e8b\u4ef6\u901a\u77e5\u6570\u636e\u53d8\u66f4\uff1a \u901a\u8fc7\u4e8b\u4ef6\u7684\u503c\u533a\u5206\u4e8b\u4ef6\u7c7b\u578b\uff1a register , unregister , subscribe , unsubscribe \u666e\u901a\u6d88\u8d39\u8005\u76f4\u63a5\u8ba2\u9605\u6307\u5b9a\u670d\u52a1\u63d0\u4f9b\u8005\u7684 Key\uff0c\u53ea\u4f1a\u6536\u5230\u6307\u5b9a\u670d\u52a1\u7684 register , unregister \u4e8b\u4ef6 \u76d1\u63a7\u4e2d\u5fc3\u901a\u8fc7 psubscribe \u529f\u80fd\u8ba2\u9605 /dubbo/* \uff0c\u4f1a\u6536\u5230\u6240\u6709\u670d\u52a1\u7684\u6240\u6709\u53d8\u66f4\u4e8b\u4ef6 \u8c03\u7528\u8fc7\u7a0b\uff1a \u670d\u52a1\u63d0\u4f9b\u65b9\u542f\u52a8\u65f6\uff0c\u5411 Key:/dubbo/com.foo.BarService/providers \u4e0b\uff0c\u6dfb\u52a0\u5f53\u524d\u63d0\u4f9b\u8005\u7684\u5730\u5740 \u5e76\u5411 Channel:/dubbo/com.foo.BarService/providers \u53d1\u9001 register \u4e8b\u4ef6 \u670d\u52a1\u6d88\u8d39\u65b9\u542f\u52a8\u65f6\uff0c\u4ece Channel:/dubbo/com.foo.BarService/providers \u8ba2\u9605 register \u548c unregister \u4e8b\u4ef6 \u5e76\u5411 Key:/dubbo/com.foo.BarService/consumers \u4e0b\uff0c\u6dfb\u52a0\u5f53\u524d\u6d88\u8d39\u8005\u7684\u5730\u5740 \u670d\u52a1\u6d88\u8d39\u65b9\u6536\u5230 register \u548c unregister \u4e8b\u4ef6\u540e\uff0c\u4ece Key:/dubbo/com.foo.BarService/providers \u4e0b\u83b7\u53d6\u63d0\u4f9b\u8005\u5730\u5740\u5217\u8868 \u670d\u52a1\u76d1\u63a7\u4e2d\u5fc3\u542f\u52a8\u65f6\uff0c\u4ece Channel:/dubbo/* \u8ba2\u9605 register \u548c unregister \uff0c\u4ee5\u53ca subscribe \u548c unsubsribe \u4e8b\u4ef6 \u670d\u52a1\u76d1\u63a7\u4e2d\u5fc3\u6536\u5230 register \u548c unregister \u4e8b\u4ef6\u540e\uff0c\u4ece Key:/dubbo/com.foo.BarService/providers \u4e0b\u83b7\u53d6\u63d0\u4f9b\u8005\u5730\u5740\u5217\u8868 \u670d\u52a1\u76d1\u63a7\u4e2d\u5fc3\u6536\u5230 subscribe \u548c unsubsribe \u4e8b\u4ef6\u540e\uff0c\u4ece Key:/dubbo/com.foo.BarService/consumers \u4e0b\u83b7\u53d6\u6d88\u8d39\u8005\u5730\u5740\u5217\u8868 \u914d\u7f6e dubbo:registry address= redis://10.20.153.10:6379 / \u6216 dubbo:registry address= redis://10.20.153.10:6379?backup=10.20.153.11:6379,10.20.153.12:6379 / \u6216 dubbo:registry protocol= redis address= 10.20.153.10:6379 / \u6216 dubbo:registry protocol= redis address= 10.20.153.10:6379,10.20.153.11:6379,10.20.153.12:6379 / \u9009\u9879 \u53ef\u901a\u8fc7 dubbo:registry group=\"dubbo\" / \u8bbe\u7f6e redis \u4e2d key \u7684\u524d\u7f00\uff0c\u7f3a\u7701\u4e3a dubbo \u3002 \u53ef\u901a\u8fc7 dubbo:registry cluster=\"replicate\" / \u8bbe\u7f6e redis \u96c6\u7fa4\u7b56\u7565\uff0c\u7f3a\u7701\u4e3a failover \uff1a failover : \u53ea\u5199\u5165\u548c\u8bfb\u53d6\u4efb\u610f\u4e00\u53f0\uff0c\u5931\u8d25\u65f6\u91cd\u8bd5\u53e6\u4e00\u53f0\uff0c\u9700\u8981\u670d\u52a1\u5668\u7aef\u81ea\u884c\u914d\u7f6e\u6570\u636e\u540c\u6b65 replicate : \u5728\u5ba2\u6237\u7aef\u540c\u65f6\u5199\u5165\u6240\u6709\u670d\u52a1\u5668\uff0c\u53ea\u8bfb\u53d6\u5355\u53f0\uff0c\u670d\u52a1\u5668\u7aef\u4e0d\u9700\u8981\u540c\u6b65\uff0c\u6ce8\u518c\u4e2d\u5fc3\u96c6\u7fa4\u589e\u5927\uff0c\u6027\u80fd\u538b\u529b\u4e5f\u4f1a\u66f4\u5927 \u53ef\u9760\u6027\u58f0\u660e \u963f\u91cc\u5185\u90e8\u5e76\u6ca1\u6709\u91c7\u7528 Redis \u505a\u4e3a\u6ce8\u518c\u4e2d\u5fc3\uff0c\u800c\u662f\u4f7f\u7528\u81ea\u5df1\u5b9e\u73b0\u7684\u57fa\u4e8e\u6570\u636e\u5e93\u7684\u6ce8\u518c\u4e2d\u5fc3\uff0c\u5373\uff1aRedis \u6ce8\u518c\u4e2d\u5fc3\u5e76\u6ca1\u6709\u5728\u963f\u91cc\u5185\u90e8\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u53ef\u9760\u6027\u4fdd\u969c\uff0c\u6b64 Redis \u6865\u63a5\u5b9e\u73b0\u53ea\u4e3a\u5f00\u6e90\u7248\u672c\u63d0\u4f9b\uff0c\u5176\u53ef\u9760\u6027\u4f9d\u8d56\u4e8e Redis \u672c\u8eab\u7684\u53ef\u9760\u6027\u3002 \u5b89\u88c5 \u5b89\u88c5\u65b9\u5f0f\u53c2\u89c1: Redis\u5b89\u88c5\u624b\u518c \uff0c\u53ea\u9700\u642d\u4e00\u4e2a\u539f\u751f\u7684 Redis \u670d\u52a1\u5668\uff0c\u5e76\u5c06 Quick Start \u4e2d Provider \u548c Consumer \u91cc\u7684 conf/dubbo.properties \u4e2d\u7684 dubbo.registry.address \u7684\u503c\u6539\u4e3a redis://127.0.0.1:6379 \u5373\u53ef\u4f7f\u7528\u3002 [^1]: Redis \u662f\u4e00\u4e2a\u9ad8\u6548\u7684 KV \u5b58\u50a8\u670d\u52a1\u5668 [^2]: \u4ece 2.1.0 \u7248\u672c\u5f00\u59cb\u652f\u6301 [^3]: Redis \u8fc7\u671f\u6570\u636e\u901a\u8fc7\u5fc3\u8df3\u7684\u65b9\u5f0f\u68c0\u6d4b\u810f\u6570\u636e\uff0c\u670d\u52a1\u5668\u65f6\u95f4\u5fc5\u987b\u540c\u6b65\uff0c\u5e76\u4e14\u5bf9\u670d\u52a1\u5668\u6709\u4e00\u5b9a\u538b\u529b\uff0c\u5426\u5219\u8fc7\u671f\u68c0\u6d4b\u4f1a\u4e0d\u51c6\u786e","title":"Redis \u6ce8\u518c\u4e2d\u5fc3"},{"location":"user/references/registry/redis/#redis","text":"\u57fa\u4e8e Redis [^1] \u5b9e\u73b0\u7684\u6ce8\u518c\u4e2d\u5fc3 [^2]\u3002 \u4f7f\u7528 Redis \u7684 Key/Map \u7ed3\u6784\u5b58\u50a8\u6570\u636e\u7ed3\u6784\uff1a \u4e3b Key \u4e3a\u670d\u52a1\u540d\u548c\u7c7b\u578b Map \u4e2d\u7684 Key \u4e3a URL \u5730\u5740 Map \u4e2d\u7684 Value \u4e3a\u8fc7\u671f\u65f6\u95f4\uff0c\u7528\u4e8e\u5224\u65ad\u810f\u6570\u636e\uff0c\u810f\u6570\u636e\u7531\u76d1\u63a7\u4e2d\u5fc3\u5220\u9664 [^3] \u4f7f\u7528 Redis \u7684 Publish/Subscribe \u4e8b\u4ef6\u901a\u77e5\u6570\u636e\u53d8\u66f4\uff1a \u901a\u8fc7\u4e8b\u4ef6\u7684\u503c\u533a\u5206\u4e8b\u4ef6\u7c7b\u578b\uff1a register , unregister , subscribe , unsubscribe \u666e\u901a\u6d88\u8d39\u8005\u76f4\u63a5\u8ba2\u9605\u6307\u5b9a\u670d\u52a1\u63d0\u4f9b\u8005\u7684 Key\uff0c\u53ea\u4f1a\u6536\u5230\u6307\u5b9a\u670d\u52a1\u7684 register , unregister \u4e8b\u4ef6 \u76d1\u63a7\u4e2d\u5fc3\u901a\u8fc7 psubscribe \u529f\u80fd\u8ba2\u9605 /dubbo/* \uff0c\u4f1a\u6536\u5230\u6240\u6709\u670d\u52a1\u7684\u6240\u6709\u53d8\u66f4\u4e8b\u4ef6 \u8c03\u7528\u8fc7\u7a0b\uff1a \u670d\u52a1\u63d0\u4f9b\u65b9\u542f\u52a8\u65f6\uff0c\u5411 Key:/dubbo/com.foo.BarService/providers \u4e0b\uff0c\u6dfb\u52a0\u5f53\u524d\u63d0\u4f9b\u8005\u7684\u5730\u5740 \u5e76\u5411 Channel:/dubbo/com.foo.BarService/providers \u53d1\u9001 register \u4e8b\u4ef6 \u670d\u52a1\u6d88\u8d39\u65b9\u542f\u52a8\u65f6\uff0c\u4ece Channel:/dubbo/com.foo.BarService/providers \u8ba2\u9605 register \u548c unregister \u4e8b\u4ef6 \u5e76\u5411 Key:/dubbo/com.foo.BarService/consumers \u4e0b\uff0c\u6dfb\u52a0\u5f53\u524d\u6d88\u8d39\u8005\u7684\u5730\u5740 \u670d\u52a1\u6d88\u8d39\u65b9\u6536\u5230 register \u548c unregister \u4e8b\u4ef6\u540e\uff0c\u4ece Key:/dubbo/com.foo.BarService/providers \u4e0b\u83b7\u53d6\u63d0\u4f9b\u8005\u5730\u5740\u5217\u8868 \u670d\u52a1\u76d1\u63a7\u4e2d\u5fc3\u542f\u52a8\u65f6\uff0c\u4ece Channel:/dubbo/* \u8ba2\u9605 register \u548c unregister \uff0c\u4ee5\u53ca subscribe \u548c unsubsribe \u4e8b\u4ef6 \u670d\u52a1\u76d1\u63a7\u4e2d\u5fc3\u6536\u5230 register \u548c unregister \u4e8b\u4ef6\u540e\uff0c\u4ece Key:/dubbo/com.foo.BarService/providers \u4e0b\u83b7\u53d6\u63d0\u4f9b\u8005\u5730\u5740\u5217\u8868 \u670d\u52a1\u76d1\u63a7\u4e2d\u5fc3\u6536\u5230 subscribe \u548c unsubsribe \u4e8b\u4ef6\u540e\uff0c\u4ece Key:/dubbo/com.foo.BarService/consumers \u4e0b\u83b7\u53d6\u6d88\u8d39\u8005\u5730\u5740\u5217\u8868","title":"Redis \u6ce8\u518c\u4e2d\u5fc3"},{"location":"user/references/registry/redis/#_1","text":"dubbo:registry address= redis://10.20.153.10:6379 / \u6216 dubbo:registry address= redis://10.20.153.10:6379?backup=10.20.153.11:6379,10.20.153.12:6379 / \u6216 dubbo:registry protocol= redis address= 10.20.153.10:6379 / \u6216 dubbo:registry protocol= redis address= 10.20.153.10:6379,10.20.153.11:6379,10.20.153.12:6379 /","title":"\u914d\u7f6e"},{"location":"user/references/registry/redis/#_2","text":"\u53ef\u901a\u8fc7 dubbo:registry group=\"dubbo\" / \u8bbe\u7f6e redis \u4e2d key \u7684\u524d\u7f00\uff0c\u7f3a\u7701\u4e3a dubbo \u3002 \u53ef\u901a\u8fc7 dubbo:registry cluster=\"replicate\" / \u8bbe\u7f6e redis \u96c6\u7fa4\u7b56\u7565\uff0c\u7f3a\u7701\u4e3a failover \uff1a failover : \u53ea\u5199\u5165\u548c\u8bfb\u53d6\u4efb\u610f\u4e00\u53f0\uff0c\u5931\u8d25\u65f6\u91cd\u8bd5\u53e6\u4e00\u53f0\uff0c\u9700\u8981\u670d\u52a1\u5668\u7aef\u81ea\u884c\u914d\u7f6e\u6570\u636e\u540c\u6b65 replicate : \u5728\u5ba2\u6237\u7aef\u540c\u65f6\u5199\u5165\u6240\u6709\u670d\u52a1\u5668\uff0c\u53ea\u8bfb\u53d6\u5355\u53f0\uff0c\u670d\u52a1\u5668\u7aef\u4e0d\u9700\u8981\u540c\u6b65\uff0c\u6ce8\u518c\u4e2d\u5fc3\u96c6\u7fa4\u589e\u5927\uff0c\u6027\u80fd\u538b\u529b\u4e5f\u4f1a\u66f4\u5927","title":"\u9009\u9879"},{"location":"user/references/registry/redis/#_3","text":"\u963f\u91cc\u5185\u90e8\u5e76\u6ca1\u6709\u91c7\u7528 Redis \u505a\u4e3a\u6ce8\u518c\u4e2d\u5fc3\uff0c\u800c\u662f\u4f7f\u7528\u81ea\u5df1\u5b9e\u73b0\u7684\u57fa\u4e8e\u6570\u636e\u5e93\u7684\u6ce8\u518c\u4e2d\u5fc3\uff0c\u5373\uff1aRedis \u6ce8\u518c\u4e2d\u5fc3\u5e76\u6ca1\u6709\u5728\u963f\u91cc\u5185\u90e8\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u53ef\u9760\u6027\u4fdd\u969c\uff0c\u6b64 Redis \u6865\u63a5\u5b9e\u73b0\u53ea\u4e3a\u5f00\u6e90\u7248\u672c\u63d0\u4f9b\uff0c\u5176\u53ef\u9760\u6027\u4f9d\u8d56\u4e8e Redis \u672c\u8eab\u7684\u53ef\u9760\u6027\u3002","title":"\u53ef\u9760\u6027\u58f0\u660e"},{"location":"user/references/registry/redis/#_4","text":"\u5b89\u88c5\u65b9\u5f0f\u53c2\u89c1: Redis\u5b89\u88c5\u624b\u518c \uff0c\u53ea\u9700\u642d\u4e00\u4e2a\u539f\u751f\u7684 Redis \u670d\u52a1\u5668\uff0c\u5e76\u5c06 Quick Start \u4e2d Provider \u548c Consumer \u91cc\u7684 conf/dubbo.properties \u4e2d\u7684 dubbo.registry.address \u7684\u503c\u6539\u4e3a redis://127.0.0.1:6379 \u5373\u53ef\u4f7f\u7528\u3002 [^1]: Redis \u662f\u4e00\u4e2a\u9ad8\u6548\u7684 KV \u5b58\u50a8\u670d\u52a1\u5668 [^2]: \u4ece 2.1.0 \u7248\u672c\u5f00\u59cb\u652f\u6301 [^3]: Redis \u8fc7\u671f\u6570\u636e\u901a\u8fc7\u5fc3\u8df3\u7684\u65b9\u5f0f\u68c0\u6d4b\u810f\u6570\u636e\uff0c\u670d\u52a1\u5668\u65f6\u95f4\u5fc5\u987b\u540c\u6b65\uff0c\u5e76\u4e14\u5bf9\u670d\u52a1\u5668\u6709\u4e00\u5b9a\u538b\u529b\uff0c\u5426\u5219\u8fc7\u671f\u68c0\u6d4b\u4f1a\u4e0d\u51c6\u786e","title":"\u5b89\u88c5"},{"location":"user/references/registry/simple/","text":"Simple \u6ce8\u518c\u4e2d\u5fc3 Simple \u6ce8\u518c\u4e2d\u5fc3\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u666e\u901a\u7684 Dubbo \u670d\u52a1\uff0c\u53ef\u4ee5\u51cf\u5c11\u7b2c\u4e09\u65b9\u4f9d\u8d56\uff0c\u4f7f\u6574\u4f53\u901a\u8baf\u65b9\u5f0f\u4e00\u81f4\u3002 \u914d\u7f6e \u5c06 Simple \u6ce8\u518c\u4e2d\u5fc3\u66b4\u9732\u6210 Dubbo \u670d\u52a1\uff1a ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd !-- \u5f53\u524d\u5e94\u7528\u4fe1\u606f\u914d\u7f6e -- dubbo:application name= simple-registry / !-- \u66b4\u9732\u670d\u52a1\u534f\u8bae\u914d\u7f6e -- dubbo:protocol port= 9090 / !-- \u66b4\u9732\u670d\u52a1\u914d\u7f6e -- dubbo:service interface= org.apache.dubbo.registry.RegistryService ref= registryService registry= N/A ondisconnect= disconnect callbacks= 1000 dubbo:method name= subscribe dubbo:argument index= 1 callback= true / /dubbo:method dubbo:method name= unsubscribe dubbo:argument index= 1 callback= false / /dubbo:method /dubbo:service !-- \u7b80\u5355\u6ce8\u518c\u4e2d\u5fc3\u5b9e\u73b0\uff0c\u53ef\u81ea\u884c\u6269\u5c55\u5b9e\u73b0\u96c6\u7fa4\u548c\u72b6\u6001\u540c\u6b65 -- bean id= registryService class= org.apache.dubbo.registry.simple.SimpleRegistryService / /beans \u5f15\u7528 Simple Registry \u670d\u52a1\uff1a dubbo:registry address= 127.0.0.1:9090 / \u6216\u8005\uff1a dubbo:service interface= org.apache.dubbo.registry.RegistryService group= simple version= 1.0.0 ... \u6216\u8005\uff1a dubbo:registry address= 127.0.0.1:9090 group= simple version= 1.0.0 / \u9002\u7528\u6027\u8bf4\u660e \u6b64 SimpleRegistryService \u53ea\u662f\u7b80\u5355\u5b9e\u73b0\uff0c\u4e0d\u652f\u6301\u96c6\u7fa4\uff0c\u53ef\u4f5c\u4e3a\u81ea\u5b9a\u4e49\u6ce8\u518c\u4e2d\u5fc3\u7684\u53c2\u8003\uff0c\u4f46\u4e0d\u9002\u5408\u76f4\u63a5\u7528\u4e8e\u751f\u4ea7\u73af\u5883\u3002","title":"Simple \u6ce8\u518c\u4e2d\u5fc3"},{"location":"user/references/registry/simple/#simple","text":"Simple \u6ce8\u518c\u4e2d\u5fc3\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u666e\u901a\u7684 Dubbo \u670d\u52a1\uff0c\u53ef\u4ee5\u51cf\u5c11\u7b2c\u4e09\u65b9\u4f9d\u8d56\uff0c\u4f7f\u6574\u4f53\u901a\u8baf\u65b9\u5f0f\u4e00\u81f4\u3002","title":"Simple \u6ce8\u518c\u4e2d\u5fc3"},{"location":"user/references/registry/simple/#_1","text":"\u5c06 Simple \u6ce8\u518c\u4e2d\u5fc3\u66b4\u9732\u6210 Dubbo \u670d\u52a1\uff1a ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:dubbo= http://dubbo.apache.org/schema/dubbo xsi:schemaLocation= http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd !-- \u5f53\u524d\u5e94\u7528\u4fe1\u606f\u914d\u7f6e -- dubbo:application name= simple-registry / !-- \u66b4\u9732\u670d\u52a1\u534f\u8bae\u914d\u7f6e -- dubbo:protocol port= 9090 / !-- \u66b4\u9732\u670d\u52a1\u914d\u7f6e -- dubbo:service interface= org.apache.dubbo.registry.RegistryService ref= registryService registry= N/A ondisconnect= disconnect callbacks= 1000 dubbo:method name= subscribe dubbo:argument index= 1 callback= true / /dubbo:method dubbo:method name= unsubscribe dubbo:argument index= 1 callback= false / /dubbo:method /dubbo:service !-- \u7b80\u5355\u6ce8\u518c\u4e2d\u5fc3\u5b9e\u73b0\uff0c\u53ef\u81ea\u884c\u6269\u5c55\u5b9e\u73b0\u96c6\u7fa4\u548c\u72b6\u6001\u540c\u6b65 -- bean id= registryService class= org.apache.dubbo.registry.simple.SimpleRegistryService / /beans \u5f15\u7528 Simple Registry \u670d\u52a1\uff1a dubbo:registry address= 127.0.0.1:9090 / \u6216\u8005\uff1a dubbo:service interface= org.apache.dubbo.registry.RegistryService group= simple version= 1.0.0 ... \u6216\u8005\uff1a dubbo:registry address= 127.0.0.1:9090 group= simple version= 1.0.0 /","title":"\u914d\u7f6e"},{"location":"user/references/registry/simple/#_2","text":"\u6b64 SimpleRegistryService \u53ea\u662f\u7b80\u5355\u5b9e\u73b0\uff0c\u4e0d\u652f\u6301\u96c6\u7fa4\uff0c\u53ef\u4f5c\u4e3a\u81ea\u5b9a\u4e49\u6ce8\u518c\u4e2d\u5fc3\u7684\u53c2\u8003\uff0c\u4f46\u4e0d\u9002\u5408\u76f4\u63a5\u7528\u4e8e\u751f\u4ea7\u73af\u5883\u3002","title":"\u9002\u7528\u6027\u8bf4\u660e"},{"location":"user/references/registry/zookeeper/","text":"zookeeper \u6ce8\u518c\u4e2d\u5fc3 Zookeeper \u662f Apache Hadoop \u7684\u5b50\u9879\u76ee\uff0c\u662f\u4e00\u4e2a\u6811\u578b\u7684\u76ee\u5f55\u670d\u52a1\uff0c\u652f\u6301\u53d8\u66f4\u63a8\u9001\uff0c\u9002\u5408\u4f5c\u4e3a Dubbo \u670d\u52a1\u7684\u6ce8\u518c\u4e2d\u5fc3\uff0c\u5de5\u4e1a\u5f3a\u5ea6\u8f83\u9ad8\uff0c\u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883\uff0c\u5e76\u63a8\u8350\u4f7f\u7528 [^1]\u3002 \u6d41\u7a0b\u8bf4\u660e\uff1a \u670d\u52a1\u63d0\u4f9b\u8005\u542f\u52a8\u65f6: \u5411 /dubbo/com.foo.BarService/providers \u76ee\u5f55\u4e0b\u5199\u5165\u81ea\u5df1\u7684 URL \u5730\u5740 \u670d\u52a1\u6d88\u8d39\u8005\u542f\u52a8\u65f6: \u8ba2\u9605 /dubbo/com.foo.BarService/providers \u76ee\u5f55\u4e0b\u7684\u63d0\u4f9b\u8005 URL \u5730\u5740\u3002\u5e76\u5411 /dubbo/com.foo.BarService/consumers \u76ee\u5f55\u4e0b\u5199\u5165\u81ea\u5df1\u7684 URL \u5730\u5740 \u76d1\u63a7\u4e2d\u5fc3\u542f\u52a8\u65f6: \u8ba2\u9605 /dubbo/com.foo.BarService \u76ee\u5f55\u4e0b\u7684\u6240\u6709\u63d0\u4f9b\u8005\u548c\u6d88\u8d39\u8005 URL \u5730\u5740\u3002 \u652f\u6301\u4ee5\u4e0b\u529f\u80fd\uff1a \u5f53\u63d0\u4f9b\u8005\u51fa\u73b0\u65ad\u7535\u7b49\u5f02\u5e38\u505c\u673a\u65f6\uff0c\u6ce8\u518c\u4e2d\u5fc3\u80fd\u81ea\u52a8\u5220\u9664\u63d0\u4f9b\u8005\u4fe1\u606f \u5f53\u6ce8\u518c\u4e2d\u5fc3\u91cd\u542f\u65f6\uff0c\u80fd\u81ea\u52a8\u6062\u590d\u6ce8\u518c\u6570\u636e\uff0c\u4ee5\u53ca\u8ba2\u9605\u8bf7\u6c42 \u5f53\u4f1a\u8bdd\u8fc7\u671f\u65f6\uff0c\u80fd\u81ea\u52a8\u6062\u590d\u6ce8\u518c\u6570\u636e\uff0c\u4ee5\u53ca\u8ba2\u9605\u8bf7\u6c42 \u5f53\u8bbe\u7f6e dubbo:registry check=\"false\" / \u65f6\uff0c\u8bb0\u5f55\u5931\u8d25\u6ce8\u518c\u548c\u8ba2\u9605\u8bf7\u6c42\uff0c\u540e\u53f0\u5b9a\u65f6\u91cd\u8bd5 \u53ef\u901a\u8fc7 dubbo:registry username=\"admin\" password=\"1234\" / \u8bbe\u7f6e zookeeper \u767b\u5f55\u4fe1\u606f \u53ef\u901a\u8fc7 dubbo:registry group=\"dubbo\" / \u8bbe\u7f6e zookeeper \u7684\u6839\u8282\u70b9\uff0c\u4e0d\u914d\u7f6e\u5c06\u4f7f\u7528\u9ed8\u8ba4\u7684\u6839\u8282\u70b9\u3002 \u652f\u6301 * \u53f7\u901a\u914d\u7b26 dubbo:reference group=\"*\" version=\"*\" / \uff0c\u53ef\u8ba2\u9605\u670d\u52a1\u7684\u6240\u6709\u5206\u7ec4\u548c\u6240\u6709\u7248\u672c\u7684\u63d0\u4f9b\u8005 \u4f7f\u7528 \u5728 provider \u548c consumer \u4e2d\u589e\u52a0 zookeeper \u5ba2\u6237\u7aef jar \u5305\u4f9d\u8d56\uff1a dependency groupId org.apache.zookeeper /groupId artifactId zookeeper /artifactId version 3.3.3 /version /dependency \u6216\u76f4\u63a5 \u4e0b\u8f7d \u3002 Dubbo \u652f\u6301 zkclient \u548c curator \u4e24\u79cd Zookeeper \u5ba2\u6237\u7aef\u5b9e\u73b0\uff1a \u6ce8\u610f:\u57282.7.x\u7684\u7248\u672c\u4e2d\u5df2\u7ecf\u79fb\u9664\u4e86zkclient\u7684\u5b9e\u73b0,\u5982\u679c\u8981\u4f7f\u7528zkclient\u5ba2\u6237\u7aef,\u9700\u8981\u81ea\u884c\u62d3\u5c55 \u4f7f\u7528 zkclient \u5ba2\u6237\u7aef \u4ece 2.2.0 \u7248\u672c\u5f00\u59cb\u7f3a\u7701\u4e3a zkclient \u5b9e\u73b0\uff0c\u4ee5\u63d0\u5347 zookeeper \u5ba2\u6237\u7aef\u7684\u5065\u58ee\u6027\u3002 zkclient \u662f Datameer \u5f00\u6e90\u7684\u4e00\u4e2a Zookeeper \u5ba2\u6237\u7aef\u5b9e\u73b0\u3002 \u7f3a\u7701\u914d\u7f6e\uff1a dubbo:registry ... client= zkclient / \u6216\uff1a dubbo.registry.client=zkclient \u6216\uff1a zookeeper://10.20.153.10:2181?client=zkclient \u9700\u4f9d\u8d56\u6216\u76f4\u63a5 \u4e0b\u8f7d \uff1a dependency groupId com.github.sgroschupf /groupId artifactId zkclient /artifactId version 0.1 /version /dependency \u4f7f\u7528 curator \u5ba2\u6237\u7aef \u4ece 2.3.0 \u7248\u672c\u5f00\u59cb\u652f\u6301\u53ef\u9009 curator \u5b9e\u73b0\u3002 Curator \u662f Netflix \u5f00\u6e90\u7684\u4e00\u4e2a Zookeeper \u5ba2\u6237\u7aef\u5b9e\u73b0\u3002 \u5982\u679c\u9700\u8981\u6539\u4e3a curator \u5b9e\u73b0\uff0c\u8bf7\u914d\u7f6e\uff1a dubbo:registry ... client= curator / \u6216\uff1a dubbo.registry.client=curator \u6216\uff1a zookeeper://10.20.153.10:2181?client=curator \u9700\u4f9d\u8d56\u6216\u76f4\u63a5 \u4e0b\u8f7d \uff1a dependency groupId com.netflix.curator /groupId artifactId curator-framework /artifactId version 1.1.10 /version /dependency Zookeeper \u5355\u673a\u914d\u7f6e: dubbo:registry address= zookeeper://10.20.153.10:2181 / \u6216\uff1a dubbo:registry protocol= zookeeper address= 10.20.153.10:2181 / Zookeeper \u96c6\u7fa4\u914d\u7f6e\uff1a dubbo:registry address= zookeeper://10.20.153.10:2181?backup=10.20.153.11:2181,10.20.153.12:2181 / \u6216\uff1a dubbo:registry protocol= zookeeper address= 10.20.153.10:2181,10.20.153.11:2181,10.20.153.12:2181 / \u540c\u4e00 Zookeeper\uff0c\u5206\u6210\u591a\u7ec4\u6ce8\u518c\u4e2d\u5fc3: dubbo:registry id= chinaRegistry protocol= zookeeper address= 10.20.153.10:2181 group= china / dubbo:registry id= intlRegistry protocol= zookeeper address= 10.20.153.10:2181 group= intl / zookeeper \u5b89\u88c5 \u5b89\u88c5\u65b9\u5f0f\u53c2\u89c1: Zookeeper\u5b89\u88c5\u624b\u518c \uff0c\u53ea\u9700\u642d\u4e00\u4e2a\u539f\u751f\u7684 Zookeeper \u670d\u52a1\u5668\uff0c\u5e76\u5c06 Quick Start \u4e2d Provider \u548c Consumer \u91cc\u7684 conf/dubbo.properties \u4e2d\u7684 dubbo.registry.address \u7684\u503c\u6539\u4e3a zookeeper://127.0.0.1:2181 \u5373\u53ef\u4f7f\u7528\u3002 \u53ef\u9760\u6027\u58f0\u660e \u963f\u91cc\u5185\u90e8\u5e76\u6ca1\u6709\u91c7\u7528 Zookeeper \u505a\u4e3a\u6ce8\u518c\u4e2d\u5fc3\uff0c\u800c\u662f\u4f7f\u7528\u81ea\u5df1\u5b9e\u73b0\u7684\u57fa\u4e8e\u6570\u636e\u5e93\u7684\u6ce8\u518c\u4e2d\u5fc3\uff0c\u5373\uff1aZookeeper \u6ce8\u518c\u4e2d\u5fc3\u5e76\u6ca1\u6709\u5728\u963f\u91cc\u5185\u90e8\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u53ef\u9760\u6027\u4fdd\u969c\uff0c\u6b64 Zookeeper \u6865\u63a5\u5b9e\u73b0\u53ea\u4e3a\u5f00\u6e90\u7248\u672c\u63d0\u4f9b\uff0c\u5176\u53ef\u9760\u6027\u4f9d\u8d56\u4e8e Zookeeper \u672c\u8eab\u7684\u53ef\u9760\u6027\u3002 \u517c\u5bb9\u6027\u58f0\u660e \u56e0 2.0.8 \u6700\u521d\u8bbe\u8ba1\u7684 zookeeper \u5b58\u50a8\u7ed3\u6784\u4e0d\u80fd\u6269\u5145\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\uff0c 2.0.9 \u7248\u672c\u505a\u4e86\u8c03\u6574\uff0c\u6240\u4ee5\u4e0d\u517c\u5bb9\uff0c\u9700\u5168\u90e8\u6539\u7528 2.0.9 \u7248\u672c\u624d\u884c\uff0c\u4ee5\u540e\u7684\u7248\u672c\u4f1a\u4fdd\u6301\u517c\u5bb9 2.0.9 \u3002 2.2.0 \u7248\u672c\u6539\u4e3a\u57fa\u4e8e zkclient \u5b9e\u73b0\uff0c\u9700\u589e\u52a0 zkclient \u7684\u4f9d\u8d56\u5305\uff0c 2.3.0 \u7248\u672c\u589e\u52a0\u4e86\u57fa\u4e8e curator \u7684\u5b9e\u73b0\uff0c\u4f5c\u4e3a\u53ef\u9009\u5b9e\u73b0\u7b56\u7565\u3002 [^1]: \u5efa\u8bae\u4f7f\u7528 2.3.3 \u4ee5\u4e0a\u7248\u672c\u7684 zookeeper \u6ce8\u518c\u4e2d\u5fc3\u5ba2\u6237\u7aef","title":"Zookeeper \u6ce8\u518c\u4e2d\u5fc3"},{"location":"user/references/registry/zookeeper/#zookeeper","text":"Zookeeper \u662f Apache Hadoop \u7684\u5b50\u9879\u76ee\uff0c\u662f\u4e00\u4e2a\u6811\u578b\u7684\u76ee\u5f55\u670d\u52a1\uff0c\u652f\u6301\u53d8\u66f4\u63a8\u9001\uff0c\u9002\u5408\u4f5c\u4e3a Dubbo \u670d\u52a1\u7684\u6ce8\u518c\u4e2d\u5fc3\uff0c\u5de5\u4e1a\u5f3a\u5ea6\u8f83\u9ad8\uff0c\u53ef\u7528\u4e8e\u751f\u4ea7\u73af\u5883\uff0c\u5e76\u63a8\u8350\u4f7f\u7528 [^1]\u3002 \u6d41\u7a0b\u8bf4\u660e\uff1a \u670d\u52a1\u63d0\u4f9b\u8005\u542f\u52a8\u65f6: \u5411 /dubbo/com.foo.BarService/providers \u76ee\u5f55\u4e0b\u5199\u5165\u81ea\u5df1\u7684 URL \u5730\u5740 \u670d\u52a1\u6d88\u8d39\u8005\u542f\u52a8\u65f6: \u8ba2\u9605 /dubbo/com.foo.BarService/providers \u76ee\u5f55\u4e0b\u7684\u63d0\u4f9b\u8005 URL \u5730\u5740\u3002\u5e76\u5411 /dubbo/com.foo.BarService/consumers \u76ee\u5f55\u4e0b\u5199\u5165\u81ea\u5df1\u7684 URL \u5730\u5740 \u76d1\u63a7\u4e2d\u5fc3\u542f\u52a8\u65f6: \u8ba2\u9605 /dubbo/com.foo.BarService \u76ee\u5f55\u4e0b\u7684\u6240\u6709\u63d0\u4f9b\u8005\u548c\u6d88\u8d39\u8005 URL \u5730\u5740\u3002 \u652f\u6301\u4ee5\u4e0b\u529f\u80fd\uff1a \u5f53\u63d0\u4f9b\u8005\u51fa\u73b0\u65ad\u7535\u7b49\u5f02\u5e38\u505c\u673a\u65f6\uff0c\u6ce8\u518c\u4e2d\u5fc3\u80fd\u81ea\u52a8\u5220\u9664\u63d0\u4f9b\u8005\u4fe1\u606f \u5f53\u6ce8\u518c\u4e2d\u5fc3\u91cd\u542f\u65f6\uff0c\u80fd\u81ea\u52a8\u6062\u590d\u6ce8\u518c\u6570\u636e\uff0c\u4ee5\u53ca\u8ba2\u9605\u8bf7\u6c42 \u5f53\u4f1a\u8bdd\u8fc7\u671f\u65f6\uff0c\u80fd\u81ea\u52a8\u6062\u590d\u6ce8\u518c\u6570\u636e\uff0c\u4ee5\u53ca\u8ba2\u9605\u8bf7\u6c42 \u5f53\u8bbe\u7f6e dubbo:registry check=\"false\" / \u65f6\uff0c\u8bb0\u5f55\u5931\u8d25\u6ce8\u518c\u548c\u8ba2\u9605\u8bf7\u6c42\uff0c\u540e\u53f0\u5b9a\u65f6\u91cd\u8bd5 \u53ef\u901a\u8fc7 dubbo:registry username=\"admin\" password=\"1234\" / \u8bbe\u7f6e zookeeper \u767b\u5f55\u4fe1\u606f \u53ef\u901a\u8fc7 dubbo:registry group=\"dubbo\" / \u8bbe\u7f6e zookeeper \u7684\u6839\u8282\u70b9\uff0c\u4e0d\u914d\u7f6e\u5c06\u4f7f\u7528\u9ed8\u8ba4\u7684\u6839\u8282\u70b9\u3002 \u652f\u6301 * \u53f7\u901a\u914d\u7b26 dubbo:reference group=\"*\" version=\"*\" / \uff0c\u53ef\u8ba2\u9605\u670d\u52a1\u7684\u6240\u6709\u5206\u7ec4\u548c\u6240\u6709\u7248\u672c\u7684\u63d0\u4f9b\u8005","title":"zookeeper \u6ce8\u518c\u4e2d\u5fc3"},{"location":"user/references/registry/zookeeper/#_1","text":"\u5728 provider \u548c consumer \u4e2d\u589e\u52a0 zookeeper \u5ba2\u6237\u7aef jar \u5305\u4f9d\u8d56\uff1a dependency groupId org.apache.zookeeper /groupId artifactId zookeeper /artifactId version 3.3.3 /version /dependency \u6216\u76f4\u63a5 \u4e0b\u8f7d \u3002 Dubbo \u652f\u6301 zkclient \u548c curator \u4e24\u79cd Zookeeper \u5ba2\u6237\u7aef\u5b9e\u73b0\uff1a \u6ce8\u610f:\u57282.7.x\u7684\u7248\u672c\u4e2d\u5df2\u7ecf\u79fb\u9664\u4e86zkclient\u7684\u5b9e\u73b0,\u5982\u679c\u8981\u4f7f\u7528zkclient\u5ba2\u6237\u7aef,\u9700\u8981\u81ea\u884c\u62d3\u5c55","title":"\u4f7f\u7528"},{"location":"user/references/registry/zookeeper/#zkclient","text":"\u4ece 2.2.0 \u7248\u672c\u5f00\u59cb\u7f3a\u7701\u4e3a zkclient \u5b9e\u73b0\uff0c\u4ee5\u63d0\u5347 zookeeper \u5ba2\u6237\u7aef\u7684\u5065\u58ee\u6027\u3002 zkclient \u662f Datameer \u5f00\u6e90\u7684\u4e00\u4e2a Zookeeper \u5ba2\u6237\u7aef\u5b9e\u73b0\u3002 \u7f3a\u7701\u914d\u7f6e\uff1a dubbo:registry ... client= zkclient / \u6216\uff1a dubbo.registry.client=zkclient \u6216\uff1a zookeeper://10.20.153.10:2181?client=zkclient \u9700\u4f9d\u8d56\u6216\u76f4\u63a5 \u4e0b\u8f7d \uff1a dependency groupId com.github.sgroschupf /groupId artifactId zkclient /artifactId version 0.1 /version /dependency","title":"\u4f7f\u7528 zkclient \u5ba2\u6237\u7aef"},{"location":"user/references/registry/zookeeper/#curator","text":"\u4ece 2.3.0 \u7248\u672c\u5f00\u59cb\u652f\u6301\u53ef\u9009 curator \u5b9e\u73b0\u3002 Curator \u662f Netflix \u5f00\u6e90\u7684\u4e00\u4e2a Zookeeper \u5ba2\u6237\u7aef\u5b9e\u73b0\u3002 \u5982\u679c\u9700\u8981\u6539\u4e3a curator \u5b9e\u73b0\uff0c\u8bf7\u914d\u7f6e\uff1a dubbo:registry ... client= curator / \u6216\uff1a dubbo.registry.client=curator \u6216\uff1a zookeeper://10.20.153.10:2181?client=curator \u9700\u4f9d\u8d56\u6216\u76f4\u63a5 \u4e0b\u8f7d \uff1a dependency groupId com.netflix.curator /groupId artifactId curator-framework /artifactId version 1.1.10 /version /dependency Zookeeper \u5355\u673a\u914d\u7f6e: dubbo:registry address= zookeeper://10.20.153.10:2181 / \u6216\uff1a dubbo:registry protocol= zookeeper address= 10.20.153.10:2181 / Zookeeper \u96c6\u7fa4\u914d\u7f6e\uff1a dubbo:registry address= zookeeper://10.20.153.10:2181?backup=10.20.153.11:2181,10.20.153.12:2181 / \u6216\uff1a dubbo:registry protocol= zookeeper address= 10.20.153.10:2181,10.20.153.11:2181,10.20.153.12:2181 / \u540c\u4e00 Zookeeper\uff0c\u5206\u6210\u591a\u7ec4\u6ce8\u518c\u4e2d\u5fc3: dubbo:registry id= chinaRegistry protocol= zookeeper address= 10.20.153.10:2181 group= china / dubbo:registry id= intlRegistry protocol= zookeeper address= 10.20.153.10:2181 group= intl /","title":"\u4f7f\u7528 curator \u5ba2\u6237\u7aef"},{"location":"user/references/registry/zookeeper/#zookeeper_1","text":"\u5b89\u88c5\u65b9\u5f0f\u53c2\u89c1: Zookeeper\u5b89\u88c5\u624b\u518c \uff0c\u53ea\u9700\u642d\u4e00\u4e2a\u539f\u751f\u7684 Zookeeper \u670d\u52a1\u5668\uff0c\u5e76\u5c06 Quick Start \u4e2d Provider \u548c Consumer \u91cc\u7684 conf/dubbo.properties \u4e2d\u7684 dubbo.registry.address \u7684\u503c\u6539\u4e3a zookeeper://127.0.0.1:2181 \u5373\u53ef\u4f7f\u7528\u3002","title":"zookeeper \u5b89\u88c5"},{"location":"user/references/registry/zookeeper/#_2","text":"\u963f\u91cc\u5185\u90e8\u5e76\u6ca1\u6709\u91c7\u7528 Zookeeper \u505a\u4e3a\u6ce8\u518c\u4e2d\u5fc3\uff0c\u800c\u662f\u4f7f\u7528\u81ea\u5df1\u5b9e\u73b0\u7684\u57fa\u4e8e\u6570\u636e\u5e93\u7684\u6ce8\u518c\u4e2d\u5fc3\uff0c\u5373\uff1aZookeeper \u6ce8\u518c\u4e2d\u5fc3\u5e76\u6ca1\u6709\u5728\u963f\u91cc\u5185\u90e8\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u53ef\u9760\u6027\u4fdd\u969c\uff0c\u6b64 Zookeeper \u6865\u63a5\u5b9e\u73b0\u53ea\u4e3a\u5f00\u6e90\u7248\u672c\u63d0\u4f9b\uff0c\u5176\u53ef\u9760\u6027\u4f9d\u8d56\u4e8e Zookeeper \u672c\u8eab\u7684\u53ef\u9760\u6027\u3002","title":"\u53ef\u9760\u6027\u58f0\u660e"},{"location":"user/references/registry/zookeeper/#_3","text":"\u56e0 2.0.8 \u6700\u521d\u8bbe\u8ba1\u7684 zookeeper \u5b58\u50a8\u7ed3\u6784\u4e0d\u80fd\u6269\u5145\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\uff0c 2.0.9 \u7248\u672c\u505a\u4e86\u8c03\u6574\uff0c\u6240\u4ee5\u4e0d\u517c\u5bb9\uff0c\u9700\u5168\u90e8\u6539\u7528 2.0.9 \u7248\u672c\u624d\u884c\uff0c\u4ee5\u540e\u7684\u7248\u672c\u4f1a\u4fdd\u6301\u517c\u5bb9 2.0.9 \u3002 2.2.0 \u7248\u672c\u6539\u4e3a\u57fa\u4e8e zkclient \u5b9e\u73b0\uff0c\u9700\u589e\u52a0 zkclient \u7684\u4f9d\u8d56\u5305\uff0c 2.3.0 \u7248\u672c\u589e\u52a0\u4e86\u57fa\u4e8e curator \u7684\u5b9e\u73b0\uff0c\u4f5c\u4e3a\u53ef\u9009\u5b9e\u73b0\u7b56\u7565\u3002 [^1]: \u5efa\u8bae\u4f7f\u7528 2.3.3 \u4ee5\u4e0a\u7248\u672c\u7684 zookeeper \u6ce8\u518c\u4e2d\u5fc3\u5ba2\u6237\u7aef","title":"\u517c\u5bb9\u6027\u58f0\u660e"},{"location":"user/references/xml/dubbo-application/","text":"dubbo:application \u5e94\u7528\u4fe1\u606f\u914d\u7f6e\u3002\u5bf9\u5e94\u7684\u914d\u7f6e\u7c7b\uff1a org.apache.dubbo.config.ApplicationConfig \u5c5e\u6027 \u5bf9\u5e94URL\u53c2\u6570 \u7c7b\u578b \u662f\u5426\u5fc5\u586b \u7f3a\u7701\u503c \u4f5c\u7528 \u63cf\u8ff0 \u517c\u5bb9\u6027 name application string \u5fc5\u586b \u670d\u52a1\u6cbb\u7406 \u5f53\u524d\u5e94\u7528\u540d\u79f0\uff0c\u7528\u4e8e\u6ce8\u518c\u4e2d\u5fc3\u8ba1\u7b97\u5e94\u7528\u95f4\u4f9d\u8d56\u5173\u7cfb\uff0c\u6ce8\u610f\uff1a\u6d88\u8d39\u8005\u548c\u63d0\u4f9b\u8005\u5e94\u7528\u540d\u4e0d\u8981\u4e00\u6837\uff0c\u6b64\u53c2\u6570\u4e0d\u662f\u5339\u914d\u6761\u4ef6\uff0c\u4f60\u5f53\u524d\u9879\u76ee\u53eb\u4ec0\u4e48\u540d\u5b57\u5c31\u586b\u4ec0\u4e48\uff0c\u548c\u63d0\u4f9b\u8005\u6d88\u8d39\u8005\u89d2\u8272\u65e0\u5173\uff0c\u6bd4\u5982\uff1akylin\u5e94\u7528\u8c03\u7528\u4e86morgan\u5e94\u7528\u7684\u670d\u52a1\uff0c\u5219kylin\u9879\u76ee\u914d\u6210kylin\uff0cmorgan\u9879\u76ee\u914d\u6210morgan\uff0c\u53ef\u80fdkylin\u4e5f\u63d0\u4f9b\u5176\u5b83\u670d\u52a1\u7ed9\u522b\u4eba\u4f7f\u7528\uff0c\u4f46kylin\u9879\u76ee\u6c38\u8fdc\u914d\u6210kylin\uff0c\u8fd9\u6837\u6ce8\u518c\u4e2d\u5fc3\u5c06\u663e\u793akylin\u4f9d\u8d56\u4e8emorgan 1.0.16\u4ee5\u4e0a\u7248\u672c version application.version string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u5f53\u524d\u5e94\u7528\u7684\u7248\u672c 2.2.0\u4ee5\u4e0a\u7248\u672c owner owner string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u5e94\u7528\u8d1f\u8d23\u4eba\uff0c\u7528\u4e8e\u670d\u52a1\u6cbb\u7406\uff0c\u8bf7\u586b\u5199\u8d1f\u8d23\u4eba\u516c\u53f8\u90ae\u7bb1\u524d\u7f00 2.0.5\u4ee5\u4e0a\u7248\u672c organization organization string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u7ec4\u7ec7\u540d\u79f0(BU\u6216\u90e8\u95e8)\uff0c\u7528\u4e8e\u6ce8\u518c\u4e2d\u5fc3\u533a\u5206\u670d\u52a1\u6765\u6e90\uff0c\u6b64\u914d\u7f6e\u9879\u5efa\u8bae\u4e0d\u8981\u4f7f\u7528autoconfig\uff0c\u76f4\u63a5\u5199\u6b7b\u5728\u914d\u7f6e\u4e2d\uff0c\u6bd4\u5982china,intl,itu,crm,asc,dw,aliexpress\u7b49 2.0.0\u4ee5\u4e0a\u7248\u672c architecture architecture string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u7528\u4e8e\u670d\u52a1\u5206\u5c42\u5bf9\u5e94\u7684\u67b6\u6784\u3002\u5982\uff0cintl\u3001china\u3002\u4e0d\u540c\u7684\u67b6\u6784\u4f7f\u7528\u4e0d\u540c\u7684\u5206\u5c42\u3002 2.0.7\u4ee5\u4e0a\u7248\u672c environment environment string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u5e94\u7528\u73af\u5883\uff0c\u5982\uff1adevelop/test/product\uff0c\u4e0d\u540c\u73af\u5883\u4f7f\u7528\u4e0d\u540c\u7684\u7f3a\u7701\u503c\uff0c\u4ee5\u53ca\u4f5c\u4e3a\u53ea\u7528\u4e8e\u5f00\u53d1\u6d4b\u8bd5\u529f\u80fd\u7684\u9650\u5236\u6761\u4ef6 2.0.0\u4ee5\u4e0a\u7248\u672c compiler compiler string \u53ef\u9009 javassist \u6027\u80fd\u4f18\u5316 Java\u5b57\u8282\u7801\u7f16\u8bd1\u5668\uff0c\u7528\u4e8e\u52a8\u6001\u7c7b\u7684\u751f\u6210\uff0c\u53ef\u9009\uff1ajdk\u6216javassist 2.1.0\u4ee5\u4e0a\u7248\u672c logger logger string \u53ef\u9009 slf4j \u6027\u80fd\u4f18\u5316 \u65e5\u5fd7\u8f93\u51fa\u65b9\u5f0f\uff0c\u53ef\u9009\uff1aslf4j,jcl,log4j,log4j2,jdk 2.2.0\u4ee5\u4e0a\u7248\u672c","title":"dubbo:application"},{"location":"user/references/xml/dubbo-application/#dubboapplication","text":"\u5e94\u7528\u4fe1\u606f\u914d\u7f6e\u3002\u5bf9\u5e94\u7684\u914d\u7f6e\u7c7b\uff1a org.apache.dubbo.config.ApplicationConfig \u5c5e\u6027 \u5bf9\u5e94URL\u53c2\u6570 \u7c7b\u578b \u662f\u5426\u5fc5\u586b \u7f3a\u7701\u503c \u4f5c\u7528 \u63cf\u8ff0 \u517c\u5bb9\u6027 name application string \u5fc5\u586b \u670d\u52a1\u6cbb\u7406 \u5f53\u524d\u5e94\u7528\u540d\u79f0\uff0c\u7528\u4e8e\u6ce8\u518c\u4e2d\u5fc3\u8ba1\u7b97\u5e94\u7528\u95f4\u4f9d\u8d56\u5173\u7cfb\uff0c\u6ce8\u610f\uff1a\u6d88\u8d39\u8005\u548c\u63d0\u4f9b\u8005\u5e94\u7528\u540d\u4e0d\u8981\u4e00\u6837\uff0c\u6b64\u53c2\u6570\u4e0d\u662f\u5339\u914d\u6761\u4ef6\uff0c\u4f60\u5f53\u524d\u9879\u76ee\u53eb\u4ec0\u4e48\u540d\u5b57\u5c31\u586b\u4ec0\u4e48\uff0c\u548c\u63d0\u4f9b\u8005\u6d88\u8d39\u8005\u89d2\u8272\u65e0\u5173\uff0c\u6bd4\u5982\uff1akylin\u5e94\u7528\u8c03\u7528\u4e86morgan\u5e94\u7528\u7684\u670d\u52a1\uff0c\u5219kylin\u9879\u76ee\u914d\u6210kylin\uff0cmorgan\u9879\u76ee\u914d\u6210morgan\uff0c\u53ef\u80fdkylin\u4e5f\u63d0\u4f9b\u5176\u5b83\u670d\u52a1\u7ed9\u522b\u4eba\u4f7f\u7528\uff0c\u4f46kylin\u9879\u76ee\u6c38\u8fdc\u914d\u6210kylin\uff0c\u8fd9\u6837\u6ce8\u518c\u4e2d\u5fc3\u5c06\u663e\u793akylin\u4f9d\u8d56\u4e8emorgan 1.0.16\u4ee5\u4e0a\u7248\u672c version application.version string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u5f53\u524d\u5e94\u7528\u7684\u7248\u672c 2.2.0\u4ee5\u4e0a\u7248\u672c owner owner string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u5e94\u7528\u8d1f\u8d23\u4eba\uff0c\u7528\u4e8e\u670d\u52a1\u6cbb\u7406\uff0c\u8bf7\u586b\u5199\u8d1f\u8d23\u4eba\u516c\u53f8\u90ae\u7bb1\u524d\u7f00 2.0.5\u4ee5\u4e0a\u7248\u672c organization organization string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u7ec4\u7ec7\u540d\u79f0(BU\u6216\u90e8\u95e8)\uff0c\u7528\u4e8e\u6ce8\u518c\u4e2d\u5fc3\u533a\u5206\u670d\u52a1\u6765\u6e90\uff0c\u6b64\u914d\u7f6e\u9879\u5efa\u8bae\u4e0d\u8981\u4f7f\u7528autoconfig\uff0c\u76f4\u63a5\u5199\u6b7b\u5728\u914d\u7f6e\u4e2d\uff0c\u6bd4\u5982china,intl,itu,crm,asc,dw,aliexpress\u7b49 2.0.0\u4ee5\u4e0a\u7248\u672c architecture architecture string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u7528\u4e8e\u670d\u52a1\u5206\u5c42\u5bf9\u5e94\u7684\u67b6\u6784\u3002\u5982\uff0cintl\u3001china\u3002\u4e0d\u540c\u7684\u67b6\u6784\u4f7f\u7528\u4e0d\u540c\u7684\u5206\u5c42\u3002 2.0.7\u4ee5\u4e0a\u7248\u672c environment environment string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u5e94\u7528\u73af\u5883\uff0c\u5982\uff1adevelop/test/product\uff0c\u4e0d\u540c\u73af\u5883\u4f7f\u7528\u4e0d\u540c\u7684\u7f3a\u7701\u503c\uff0c\u4ee5\u53ca\u4f5c\u4e3a\u53ea\u7528\u4e8e\u5f00\u53d1\u6d4b\u8bd5\u529f\u80fd\u7684\u9650\u5236\u6761\u4ef6 2.0.0\u4ee5\u4e0a\u7248\u672c compiler compiler string \u53ef\u9009 javassist \u6027\u80fd\u4f18\u5316 Java\u5b57\u8282\u7801\u7f16\u8bd1\u5668\uff0c\u7528\u4e8e\u52a8\u6001\u7c7b\u7684\u751f\u6210\uff0c\u53ef\u9009\uff1ajdk\u6216javassist 2.1.0\u4ee5\u4e0a\u7248\u672c logger logger string \u53ef\u9009 slf4j \u6027\u80fd\u4f18\u5316 \u65e5\u5fd7\u8f93\u51fa\u65b9\u5f0f\uff0c\u53ef\u9009\uff1aslf4j,jcl,log4j,log4j2,jdk 2.2.0\u4ee5\u4e0a\u7248\u672c","title":"dubbo:application"},{"location":"user/references/xml/dubbo-argument/","text":"dubbo:argument \u65b9\u6cd5\u53c2\u6570\u914d\u7f6e\u3002\u5bf9\u5e94\u7684\u914d\u7f6e\u7c7b\uff1a org.apache.dubbo.config.ArgumentConfig \u3002\u8be5\u6807\u7b7e\u4e3a dubbo:method \u7684\u5b50\u6807\u7b7e\uff0c\u7528\u4e8e\u65b9\u6cd5\u53c2\u6570\u7684\u7279\u5f81\u63cf\u8ff0\uff0c\u6bd4\u5982\uff1a dubbo:method name= findXxx timeout= 3000 retries= 2 dubbo:argument index= 0 callback= true / /dubbo:method \u5c5e\u6027 \u5bf9\u5e94URL\u53c2\u6570 \u7c7b\u578b \u662f\u5426\u5fc5\u586b \u7f3a\u7701\u503c \u4f5c\u7528 \u63cf\u8ff0 \u517c\u5bb9\u6027 index int \u5fc5\u586b \u6807\u8bc6 \u53c2\u6570\u7d22\u5f15 2.0.6\u4ee5\u4e0a\u7248\u672c type String \u4e0eindex\u4e8c\u9009\u4e00 \u6807\u8bc6 \u901a\u8fc7\u53c2\u6570\u7c7b\u578b\u67e5\u627e\u53c2\u6570\u7684index 2.0.6\u4ee5\u4e0a\u7248\u672c callback metodName index .retries boolean \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u53c2\u6570\u662f\u5426\u4e3acallback\u63a5\u53e3\uff0c\u5982\u679c\u4e3acallback\uff0c\u670d\u52a1\u63d0\u4f9b\u65b9\u5c06\u751f\u6210\u53cd\u5411\u4ee3\u7406\uff0c\u53ef\u4ee5\u4ece\u670d\u52a1\u63d0\u4f9b\u65b9\u53cd\u5411\u8c03\u7528\u6d88\u8d39\u65b9\uff0c\u901a\u5e38\u7528\u4e8e\u4e8b\u4ef6\u63a8\u9001. 2.0.6\u4ee5\u4e0a\u7248\u672c","title":"dubbo:argument"},{"location":"user/references/xml/dubbo-argument/#dubboargument","text":"\u65b9\u6cd5\u53c2\u6570\u914d\u7f6e\u3002\u5bf9\u5e94\u7684\u914d\u7f6e\u7c7b\uff1a org.apache.dubbo.config.ArgumentConfig \u3002\u8be5\u6807\u7b7e\u4e3a dubbo:method \u7684\u5b50\u6807\u7b7e\uff0c\u7528\u4e8e\u65b9\u6cd5\u53c2\u6570\u7684\u7279\u5f81\u63cf\u8ff0\uff0c\u6bd4\u5982\uff1a dubbo:method name= findXxx timeout= 3000 retries= 2 dubbo:argument index= 0 callback= true / /dubbo:method \u5c5e\u6027 \u5bf9\u5e94URL\u53c2\u6570 \u7c7b\u578b \u662f\u5426\u5fc5\u586b \u7f3a\u7701\u503c \u4f5c\u7528 \u63cf\u8ff0 \u517c\u5bb9\u6027 index int \u5fc5\u586b \u6807\u8bc6 \u53c2\u6570\u7d22\u5f15 2.0.6\u4ee5\u4e0a\u7248\u672c type String \u4e0eindex\u4e8c\u9009\u4e00 \u6807\u8bc6 \u901a\u8fc7\u53c2\u6570\u7c7b\u578b\u67e5\u627e\u53c2\u6570\u7684index 2.0.6\u4ee5\u4e0a\u7248\u672c callback metodName index .retries boolean \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u53c2\u6570\u662f\u5426\u4e3acallback\u63a5\u53e3\uff0c\u5982\u679c\u4e3acallback\uff0c\u670d\u52a1\u63d0\u4f9b\u65b9\u5c06\u751f\u6210\u53cd\u5411\u4ee3\u7406\uff0c\u53ef\u4ee5\u4ece\u670d\u52a1\u63d0\u4f9b\u65b9\u53cd\u5411\u8c03\u7528\u6d88\u8d39\u65b9\uff0c\u901a\u5e38\u7528\u4e8e\u4e8b\u4ef6\u63a8\u9001. 2.0.6\u4ee5\u4e0a\u7248\u672c","title":"dubbo:argument"},{"location":"user/references/xml/dubbo-config-center/","text":"dubbo:config-center \u914d\u7f6e\u4e2d\u5fc3\u3002\u5bf9\u5e94\u7684\u914d\u7f6e\u7c7b\uff1a org.apache.dubbo.config.ConfigCenterConfig \u5c5e\u6027 \u5bf9\u5e94URL\u53c2\u6570 \u7c7b\u578b \u662f\u5426\u5fc5\u586b \u7f3a\u7701\u503c \u63cf\u8ff0 \u517c\u5bb9\u6027 protocol config.protocol string \u53ef\u9009 zookeeper \u4f7f\u7528\u54ea\u4e2a\u914d\u7f6e\u4e2d\u5fc3\uff1aapollo\u3001zookeeper\u3001nacos\u7b49\u3002 \u4ee5zookeeper\u4e3a\u4f8b 1. \u6307\u5b9aprotocol\uff0c\u5219address\u53ef\u4ee5\u7b80\u5316\u4e3a 127.0.0.1:2181 \uff1b 2. \u4e0d\u6307\u5b9aprotocol\uff0c\u5219address\u53d6\u503c\u4e3a zookeeper://127.0.0.1:2181 2.7.0+ address config.address string \u5fc5\u586b \u914d\u7f6e\u4e2d\u5fc3\u5730\u5740\u3002 \u53d6\u503c\u53c2\u89c1protocol\u8bf4\u660e 2.7.0+ highest-priority config.highestPriority boolean \u53ef\u9009 true \u6765\u81ea\u914d\u7f6e\u4e2d\u5fc3\u7684\u914d\u7f6e\u9879\u5177\u6709\u6700\u9ad8\u4f18\u5148\u7ea7\uff0c\u5373\u4f1a\u8986\u76d6\u672c\u5730\u914d\u7f6e\u9879\u3002 2.7.0+ namespace config.namespace string \u53ef\u9009 dubbo \u901a\u5e38\u7528\u4e8e\u591a\u79df\u6237\u9694\u79bb\uff0c\u5b9e\u9645\u542b\u4e49\u89c6\u5177\u4f53\u914d\u7f6e\u4e2d\u5fc3\u800c\u4e0d\u540c\u3002 \u5982\uff1a zookeeper - \u73af\u5883\u9694\u79bb\uff0c\u9ed8\u8ba4\u503c dubbo \uff1b apollo - \u533a\u5206\u4e0d\u540c\u9886\u57df\u7684\u914d\u7f6e\u96c6\u5408\uff0c\u9ed8\u8ba4\u4f7f\u7528 dubbo \u548c application 2.7.0+ cluster config.cluster string \u53ef\u9009 \u542b\u4e49\u89c6\u6240\u9009\u5b9a\u7684\u914d\u7f6e\u4e2d\u5fc3\u800c\u4e0d\u540c\u3002 \u5982Apollo\u4e2d\u7528\u6765\u533a\u5206\u4e0d\u540c\u7684\u914d\u7f6e\u96c6\u7fa4 2.7.0+ group config.group string \u53ef\u9009 dubbo \u542b\u4e49\u89c6\u6240\u9009\u5b9a\u7684\u914d\u7f6e\u4e2d\u5fc3\u800c\u4e0d\u540c\u3002 nacos - \u9694\u79bb\u4e0d\u540c\u914d\u7f6e\u96c6 zookeeper - \u9694\u79bb\u4e0d\u540c\u914d\u7f6e\u96c6 2.7.0+ check config.check boolean \u53ef\u9009 true \u5f53\u914d\u7f6e\u4e2d\u5fc3\u8fde\u63a5\u5931\u8d25\u65f6\uff0c\u662f\u5426\u7ec8\u6b62\u5e94\u7528\u542f\u52a8\u3002 2.7.0+ config-file config.configFile string \u53ef\u9009 dubbo.properties \u5168\u5c40\u7ea7\u914d\u7f6e\u6587\u4ef6\u6240\u6620\u5c04\u5230\u7684key zookeeper - \u9ed8\u8ba4\u8def\u5f84/dubbo/config/dubbo/dubbo.properties apollo - dubbo namespace\u4e2d\u7684dubbo.properties\u952e 2.7.0+ timeout config.timeout integer 3000ms \u83b7\u53d6\u914d\u7f6e\u7684\u8d85\u65f6\u65f6\u95f4 2.7.0+ username string \u5982\u679c\u914d\u7f6e\u4e2d\u5fc3\u9700\u8981\u505a\u6821\u9a8c\uff0c\u7528\u6237\u540d Apollo\u6682\u672a\u542f\u7528 2.7.0+ password string \u5982\u679c\u914d\u7f6e\u4e2d\u5fc3\u9700\u8981\u505a\u6821\u9a8c\uff0c\u5bc6\u7801 Apollo\u6682\u672a\u542f\u7528 2.7.0+ parameters Map \u6269\u5c55\u53c2\u6570\uff0c\u7528\u6765\u652f\u6301\u4e0d\u540c\u914d\u7f6e\u4e2d\u5fc3\u7684\u5b9a\u5236\u5316\u914d\u7f6e\u53c2\u6570 2.7.0+ include-spring-env boolean \u53ef\u9009 false \u4f7f\u7528Spring\u6846\u67b6\u65f6\u652f\u6301\uff0c\u4e3atrue\u65f6\uff0c\u4f1a\u81ea\u52a8\u4eceSpring Environment\u4e2d\u8bfb\u53d6\u914d\u7f6e\u3002 \u9ed8\u8ba4\u4f9d\u6b21\u8bfb\u53d6 key\u4e3adubbo.properties\u7684\u914d\u7f6e key\u4e3adubbo.properties\u7684PropertySource 2.7.0+","title":"dubbo:config-center"},{"location":"user/references/xml/dubbo-config-center/#dubboconfig-center","text":"\u914d\u7f6e\u4e2d\u5fc3\u3002\u5bf9\u5e94\u7684\u914d\u7f6e\u7c7b\uff1a org.apache.dubbo.config.ConfigCenterConfig \u5c5e\u6027 \u5bf9\u5e94URL\u53c2\u6570 \u7c7b\u578b \u662f\u5426\u5fc5\u586b \u7f3a\u7701\u503c \u63cf\u8ff0 \u517c\u5bb9\u6027 protocol config.protocol string \u53ef\u9009 zookeeper \u4f7f\u7528\u54ea\u4e2a\u914d\u7f6e\u4e2d\u5fc3\uff1aapollo\u3001zookeeper\u3001nacos\u7b49\u3002 \u4ee5zookeeper\u4e3a\u4f8b 1. \u6307\u5b9aprotocol\uff0c\u5219address\u53ef\u4ee5\u7b80\u5316\u4e3a 127.0.0.1:2181 \uff1b 2. \u4e0d\u6307\u5b9aprotocol\uff0c\u5219address\u53d6\u503c\u4e3a zookeeper://127.0.0.1:2181 2.7.0+ address config.address string \u5fc5\u586b \u914d\u7f6e\u4e2d\u5fc3\u5730\u5740\u3002 \u53d6\u503c\u53c2\u89c1protocol\u8bf4\u660e 2.7.0+ highest-priority config.highestPriority boolean \u53ef\u9009 true \u6765\u81ea\u914d\u7f6e\u4e2d\u5fc3\u7684\u914d\u7f6e\u9879\u5177\u6709\u6700\u9ad8\u4f18\u5148\u7ea7\uff0c\u5373\u4f1a\u8986\u76d6\u672c\u5730\u914d\u7f6e\u9879\u3002 2.7.0+ namespace config.namespace string \u53ef\u9009 dubbo \u901a\u5e38\u7528\u4e8e\u591a\u79df\u6237\u9694\u79bb\uff0c\u5b9e\u9645\u542b\u4e49\u89c6\u5177\u4f53\u914d\u7f6e\u4e2d\u5fc3\u800c\u4e0d\u540c\u3002 \u5982\uff1a zookeeper - \u73af\u5883\u9694\u79bb\uff0c\u9ed8\u8ba4\u503c dubbo \uff1b apollo - \u533a\u5206\u4e0d\u540c\u9886\u57df\u7684\u914d\u7f6e\u96c6\u5408\uff0c\u9ed8\u8ba4\u4f7f\u7528 dubbo \u548c application 2.7.0+ cluster config.cluster string \u53ef\u9009 \u542b\u4e49\u89c6\u6240\u9009\u5b9a\u7684\u914d\u7f6e\u4e2d\u5fc3\u800c\u4e0d\u540c\u3002 \u5982Apollo\u4e2d\u7528\u6765\u533a\u5206\u4e0d\u540c\u7684\u914d\u7f6e\u96c6\u7fa4 2.7.0+ group config.group string \u53ef\u9009 dubbo \u542b\u4e49\u89c6\u6240\u9009\u5b9a\u7684\u914d\u7f6e\u4e2d\u5fc3\u800c\u4e0d\u540c\u3002 nacos - \u9694\u79bb\u4e0d\u540c\u914d\u7f6e\u96c6 zookeeper - \u9694\u79bb\u4e0d\u540c\u914d\u7f6e\u96c6 2.7.0+ check config.check boolean \u53ef\u9009 true \u5f53\u914d\u7f6e\u4e2d\u5fc3\u8fde\u63a5\u5931\u8d25\u65f6\uff0c\u662f\u5426\u7ec8\u6b62\u5e94\u7528\u542f\u52a8\u3002 2.7.0+ config-file config.configFile string \u53ef\u9009 dubbo.properties \u5168\u5c40\u7ea7\u914d\u7f6e\u6587\u4ef6\u6240\u6620\u5c04\u5230\u7684key zookeeper - \u9ed8\u8ba4\u8def\u5f84/dubbo/config/dubbo/dubbo.properties apollo - dubbo namespace\u4e2d\u7684dubbo.properties\u952e 2.7.0+ timeout config.timeout integer 3000ms \u83b7\u53d6\u914d\u7f6e\u7684\u8d85\u65f6\u65f6\u95f4 2.7.0+ username string \u5982\u679c\u914d\u7f6e\u4e2d\u5fc3\u9700\u8981\u505a\u6821\u9a8c\uff0c\u7528\u6237\u540d Apollo\u6682\u672a\u542f\u7528 2.7.0+ password string \u5982\u679c\u914d\u7f6e\u4e2d\u5fc3\u9700\u8981\u505a\u6821\u9a8c\uff0c\u5bc6\u7801 Apollo\u6682\u672a\u542f\u7528 2.7.0+ parameters Map \u6269\u5c55\u53c2\u6570\uff0c\u7528\u6765\u652f\u6301\u4e0d\u540c\u914d\u7f6e\u4e2d\u5fc3\u7684\u5b9a\u5236\u5316\u914d\u7f6e\u53c2\u6570 2.7.0+ include-spring-env boolean \u53ef\u9009 false \u4f7f\u7528Spring\u6846\u67b6\u65f6\u652f\u6301\uff0c\u4e3atrue\u65f6\uff0c\u4f1a\u81ea\u52a8\u4eceSpring Environment\u4e2d\u8bfb\u53d6\u914d\u7f6e\u3002 \u9ed8\u8ba4\u4f9d\u6b21\u8bfb\u53d6 key\u4e3adubbo.properties\u7684\u914d\u7f6e key\u4e3adubbo.properties\u7684PropertySource 2.7.0+","title":"dubbo:config-center"},{"location":"user/references/xml/dubbo-consumer/","text":"dubbo:consumer \u670d\u52a1\u6d88\u8d39\u8005\u7f3a\u7701\u503c\u914d\u7f6e\u3002\u914d\u7f6e\u7c7b\uff1a org.apache.dubbo.config.ConsumerConfig \u3002\u540c\u65f6\u8be5\u6807\u7b7e\u4e3a dubbo:reference \u6807\u7b7e\u7684\u7f3a\u7701\u503c\u8bbe\u7f6e\u3002 \u5c5e\u6027 \u5bf9\u5e94URL\u53c2\u6570 \u7c7b\u578b \u662f\u5426\u5fc5\u586b \u7f3a\u7701\u503c \u4f5c\u7528 \u63cf\u8ff0 \u517c\u5bb9\u6027 timeout default.timeout int \u53ef\u9009 1000 \u6027\u80fd\u8c03\u4f18 \u8fdc\u7a0b\u670d\u52a1\u8c03\u7528\u8d85\u65f6\u65f6\u95f4(\u6beb\u79d2) 1.0.16\u4ee5\u4e0a\u7248\u672c retries default.retries int \u53ef\u9009 2 \u6027\u80fd\u8c03\u4f18 \u8fdc\u7a0b\u670d\u52a1\u8c03\u7528\u91cd\u8bd5\u6b21\u6570\uff0c\u4e0d\u5305\u62ec\u7b2c\u4e00\u6b21\u8c03\u7528\uff0c\u4e0d\u9700\u8981\u91cd\u8bd5\u8bf7\u8bbe\u4e3a0,\u4ec5\u5728cluster\u4e3afailback/failover\u65f6\u6709\u6548 1.0.16\u4ee5\u4e0a\u7248\u672c loadbalance default.loadbalance string \u53ef\u9009 random \u6027\u80fd\u8c03\u4f18 \u8d1f\u8f7d\u5747\u8861\u7b56\u7565\uff0c\u53ef\u9009\u503c\uff1arandom,roundrobin,leastactive\uff0c\u5206\u522b\u8868\u793a\uff1a\u968f\u673a\uff0c\u8f6e\u8be2\uff0c\u6700\u5c11\u6d3b\u8dc3\u8c03\u7528 1.0.16\u4ee5\u4e0a\u7248\u672c async default.async boolean \u53ef\u9009 false \u6027\u80fd\u8c03\u4f18 \u662f\u5426\u7f3a\u7701\u5f02\u6b65\u6267\u884c\uff0c\u4e0d\u53ef\u9760\u5f02\u6b65\uff0c\u53ea\u662f\u5ffd\u7565\u8fd4\u56de\u503c\uff0c\u4e0d\u963b\u585e\u6267\u884c\u7ebf\u7a0b 2.0.0\u4ee5\u4e0a\u7248\u672c connections default.connections int \u53ef\u9009 100 \u6027\u80fd\u8c03\u4f18 \u6bcf\u4e2a\u670d\u52a1\u5bf9\u6bcf\u4e2a\u63d0\u4f9b\u8005\u7684\u6700\u5927\u8fde\u63a5\u6570\uff0crmi\u3001http\u3001hessian\u7b49\u77ed\u8fde\u63a5\u534f\u8bae\u652f\u6301\u6b64\u914d\u7f6e\uff0cdubbo\u534f\u8bae\u957f\u8fde\u63a5\u4e0d\u652f\u6301\u6b64\u914d\u7f6e 1.0.16\u4ee5\u4e0a\u7248\u672c generic generic boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u662f\u5426\u7f3a\u7701\u6cdb\u5316\u63a5\u53e3\uff0c\u5982\u679c\u4e3a\u6cdb\u5316\u63a5\u53e3\uff0c\u5c06\u8fd4\u56deGenericService 2.0.0\u4ee5\u4e0a\u7248\u672c check check boolean \u53ef\u9009 true \u670d\u52a1\u6cbb\u7406 \u542f\u52a8\u65f6\u68c0\u67e5\u63d0\u4f9b\u8005\u662f\u5426\u5b58\u5728\uff0ctrue\u62a5\u9519\uff0cfalse\u5ffd\u7565 1.0.16\u4ee5\u4e0a\u7248\u672c proxy proxy string \u53ef\u9009 javassist \u6027\u80fd\u8c03\u4f18 \u751f\u6210\u52a8\u6001\u4ee3\u7406\u65b9\u5f0f\uff0c\u53ef\u9009\uff1ajdk/javassist 2.0.5\u4ee5\u4e0a\u7248\u672c owner owner string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u8c03\u7528\u670d\u52a1\u8d1f\u8d23\u4eba\uff0c\u7528\u4e8e\u670d\u52a1\u6cbb\u7406\uff0c\u8bf7\u586b\u5199\u8d1f\u8d23\u4eba\u516c\u53f8\u90ae\u7bb1\u524d\u7f00 2.0.5\u4ee5\u4e0a\u7248\u672c actives default.actives int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u6bcf\u670d\u52a1\u6d88\u8d39\u8005\u6bcf\u670d\u52a1\u6bcf\u65b9\u6cd5\u6700\u5927\u5e76\u53d1\u8c03\u7528\u6570 2.0.5\u4ee5\u4e0a\u7248\u672c cluster default.cluster string \u53ef\u9009 failover \u6027\u80fd\u8c03\u4f18 \u96c6\u7fa4\u65b9\u5f0f\uff0c\u53ef\u9009\uff1afailover/failfast/failsafe/failback/forking 2.0.5\u4ee5\u4e0a\u7248\u672c filter reference.filter string \u53ef\u9009 \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u6d88\u8d39\u65b9\u8fdc\u7a0b\u8c03\u7528\u8fc7\u7a0b\u62e6\u622a\u5668\u540d\u79f0\uff0c\u591a\u4e2a\u540d\u79f0\u7528\u9017\u53f7\u5206\u9694 2.0.5\u4ee5\u4e0a\u7248\u672c listener invoker.listener string \u53ef\u9009 \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u6d88\u8d39\u65b9\u5f15\u7528\u670d\u52a1\u76d1\u542c\u5668\u540d\u79f0\uff0c\u591a\u4e2a\u540d\u79f0\u7528\u9017\u53f7\u5206\u9694 2.0.5\u4ee5\u4e0a\u7248\u672c registry string \u53ef\u9009 \u7f3a\u7701\u5411\u6240\u6709registry\u6ce8\u518c \u914d\u7f6e\u5173\u8054 \u5411\u6307\u5b9a\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\uff0c\u5728\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u65f6\u4f7f\u7528\uff0c\u503c\u4e3a dubbo:registry \u7684id\u5c5e\u6027\uff0c\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3ID\u7528\u9017\u53f7\u5206\u9694\uff0c\u5982\u679c\u4e0d\u60f3\u5c06\u8be5\u670d\u52a1\u6ce8\u518c\u5230\u4efb\u4f55registry\uff0c\u53ef\u5c06\u503c\u8bbe\u4e3aN/A 2.0.5\u4ee5\u4e0a\u7248\u672c layer layer string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u8c03\u7528\u8005\u6240\u5728\u7684\u5206\u5c42\u3002\u5982\uff1abiz\u3001dao\u3001intl:web\u3001china:acton\u3002 2.0.7\u4ee5\u4e0a\u7248\u672c init init boolean \u53ef\u9009 false \u6027\u80fd\u8c03\u4f18 \u662f\u5426\u5728afterPropertiesSet()\u65f6\u9965\u997f\u521d\u59cb\u5316\u5f15\u7528\uff0c\u5426\u5219\u7b49\u5230\u6709\u4eba\u6ce8\u5165\u6216\u5f15\u7528\u8be5\u5b9e\u4f8b\u65f6\u518d\u521d\u59cb\u5316\u3002 2.0.10\u4ee5\u4e0a\u7248\u672c cache cache string/boolean \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u4ee5\u8c03\u7528\u53c2\u6570\u4e3akey\uff0c\u7f13\u5b58\u8fd4\u56de\u7ed3\u679c\uff0c\u53ef\u9009\uff1alru, threadlocal, jcache\u7b49 Dubbo2.1.0\u53ca\u5176\u4ee5\u4e0a\u7248\u672c\u652f\u6301 validation validation boolean \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u662f\u5426\u542f\u7528JSR303\u6807\u51c6\u6ce8\u89e3\u9a8c\u8bc1\uff0c\u5982\u679c\u542f\u7528\uff0c\u5c06\u5bf9\u65b9\u6cd5\u53c2\u6570\u4e0a\u7684\u6ce8\u89e3\u8fdb\u884c\u6821\u9a8c Dubbo2.1.0\u53ca\u5176\u4ee5\u4e0a\u7248\u672c\u652f\u6301","title":"dubbo:consumer"},{"location":"user/references/xml/dubbo-consumer/#dubboconsumer","text":"\u670d\u52a1\u6d88\u8d39\u8005\u7f3a\u7701\u503c\u914d\u7f6e\u3002\u914d\u7f6e\u7c7b\uff1a org.apache.dubbo.config.ConsumerConfig \u3002\u540c\u65f6\u8be5\u6807\u7b7e\u4e3a dubbo:reference \u6807\u7b7e\u7684\u7f3a\u7701\u503c\u8bbe\u7f6e\u3002 \u5c5e\u6027 \u5bf9\u5e94URL\u53c2\u6570 \u7c7b\u578b \u662f\u5426\u5fc5\u586b \u7f3a\u7701\u503c \u4f5c\u7528 \u63cf\u8ff0 \u517c\u5bb9\u6027 timeout default.timeout int \u53ef\u9009 1000 \u6027\u80fd\u8c03\u4f18 \u8fdc\u7a0b\u670d\u52a1\u8c03\u7528\u8d85\u65f6\u65f6\u95f4(\u6beb\u79d2) 1.0.16\u4ee5\u4e0a\u7248\u672c retries default.retries int \u53ef\u9009 2 \u6027\u80fd\u8c03\u4f18 \u8fdc\u7a0b\u670d\u52a1\u8c03\u7528\u91cd\u8bd5\u6b21\u6570\uff0c\u4e0d\u5305\u62ec\u7b2c\u4e00\u6b21\u8c03\u7528\uff0c\u4e0d\u9700\u8981\u91cd\u8bd5\u8bf7\u8bbe\u4e3a0,\u4ec5\u5728cluster\u4e3afailback/failover\u65f6\u6709\u6548 1.0.16\u4ee5\u4e0a\u7248\u672c loadbalance default.loadbalance string \u53ef\u9009 random \u6027\u80fd\u8c03\u4f18 \u8d1f\u8f7d\u5747\u8861\u7b56\u7565\uff0c\u53ef\u9009\u503c\uff1arandom,roundrobin,leastactive\uff0c\u5206\u522b\u8868\u793a\uff1a\u968f\u673a\uff0c\u8f6e\u8be2\uff0c\u6700\u5c11\u6d3b\u8dc3\u8c03\u7528 1.0.16\u4ee5\u4e0a\u7248\u672c async default.async boolean \u53ef\u9009 false \u6027\u80fd\u8c03\u4f18 \u662f\u5426\u7f3a\u7701\u5f02\u6b65\u6267\u884c\uff0c\u4e0d\u53ef\u9760\u5f02\u6b65\uff0c\u53ea\u662f\u5ffd\u7565\u8fd4\u56de\u503c\uff0c\u4e0d\u963b\u585e\u6267\u884c\u7ebf\u7a0b 2.0.0\u4ee5\u4e0a\u7248\u672c connections default.connections int \u53ef\u9009 100 \u6027\u80fd\u8c03\u4f18 \u6bcf\u4e2a\u670d\u52a1\u5bf9\u6bcf\u4e2a\u63d0\u4f9b\u8005\u7684\u6700\u5927\u8fde\u63a5\u6570\uff0crmi\u3001http\u3001hessian\u7b49\u77ed\u8fde\u63a5\u534f\u8bae\u652f\u6301\u6b64\u914d\u7f6e\uff0cdubbo\u534f\u8bae\u957f\u8fde\u63a5\u4e0d\u652f\u6301\u6b64\u914d\u7f6e 1.0.16\u4ee5\u4e0a\u7248\u672c generic generic boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u662f\u5426\u7f3a\u7701\u6cdb\u5316\u63a5\u53e3\uff0c\u5982\u679c\u4e3a\u6cdb\u5316\u63a5\u53e3\uff0c\u5c06\u8fd4\u56deGenericService 2.0.0\u4ee5\u4e0a\u7248\u672c check check boolean \u53ef\u9009 true \u670d\u52a1\u6cbb\u7406 \u542f\u52a8\u65f6\u68c0\u67e5\u63d0\u4f9b\u8005\u662f\u5426\u5b58\u5728\uff0ctrue\u62a5\u9519\uff0cfalse\u5ffd\u7565 1.0.16\u4ee5\u4e0a\u7248\u672c proxy proxy string \u53ef\u9009 javassist \u6027\u80fd\u8c03\u4f18 \u751f\u6210\u52a8\u6001\u4ee3\u7406\u65b9\u5f0f\uff0c\u53ef\u9009\uff1ajdk/javassist 2.0.5\u4ee5\u4e0a\u7248\u672c owner owner string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u8c03\u7528\u670d\u52a1\u8d1f\u8d23\u4eba\uff0c\u7528\u4e8e\u670d\u52a1\u6cbb\u7406\uff0c\u8bf7\u586b\u5199\u8d1f\u8d23\u4eba\u516c\u53f8\u90ae\u7bb1\u524d\u7f00 2.0.5\u4ee5\u4e0a\u7248\u672c actives default.actives int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u6bcf\u670d\u52a1\u6d88\u8d39\u8005\u6bcf\u670d\u52a1\u6bcf\u65b9\u6cd5\u6700\u5927\u5e76\u53d1\u8c03\u7528\u6570 2.0.5\u4ee5\u4e0a\u7248\u672c cluster default.cluster string \u53ef\u9009 failover \u6027\u80fd\u8c03\u4f18 \u96c6\u7fa4\u65b9\u5f0f\uff0c\u53ef\u9009\uff1afailover/failfast/failsafe/failback/forking 2.0.5\u4ee5\u4e0a\u7248\u672c filter reference.filter string \u53ef\u9009 \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u6d88\u8d39\u65b9\u8fdc\u7a0b\u8c03\u7528\u8fc7\u7a0b\u62e6\u622a\u5668\u540d\u79f0\uff0c\u591a\u4e2a\u540d\u79f0\u7528\u9017\u53f7\u5206\u9694 2.0.5\u4ee5\u4e0a\u7248\u672c listener invoker.listener string \u53ef\u9009 \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u6d88\u8d39\u65b9\u5f15\u7528\u670d\u52a1\u76d1\u542c\u5668\u540d\u79f0\uff0c\u591a\u4e2a\u540d\u79f0\u7528\u9017\u53f7\u5206\u9694 2.0.5\u4ee5\u4e0a\u7248\u672c registry string \u53ef\u9009 \u7f3a\u7701\u5411\u6240\u6709registry\u6ce8\u518c \u914d\u7f6e\u5173\u8054 \u5411\u6307\u5b9a\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\uff0c\u5728\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u65f6\u4f7f\u7528\uff0c\u503c\u4e3a dubbo:registry \u7684id\u5c5e\u6027\uff0c\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3ID\u7528\u9017\u53f7\u5206\u9694\uff0c\u5982\u679c\u4e0d\u60f3\u5c06\u8be5\u670d\u52a1\u6ce8\u518c\u5230\u4efb\u4f55registry\uff0c\u53ef\u5c06\u503c\u8bbe\u4e3aN/A 2.0.5\u4ee5\u4e0a\u7248\u672c layer layer string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u8c03\u7528\u8005\u6240\u5728\u7684\u5206\u5c42\u3002\u5982\uff1abiz\u3001dao\u3001intl:web\u3001china:acton\u3002 2.0.7\u4ee5\u4e0a\u7248\u672c init init boolean \u53ef\u9009 false \u6027\u80fd\u8c03\u4f18 \u662f\u5426\u5728afterPropertiesSet()\u65f6\u9965\u997f\u521d\u59cb\u5316\u5f15\u7528\uff0c\u5426\u5219\u7b49\u5230\u6709\u4eba\u6ce8\u5165\u6216\u5f15\u7528\u8be5\u5b9e\u4f8b\u65f6\u518d\u521d\u59cb\u5316\u3002 2.0.10\u4ee5\u4e0a\u7248\u672c cache cache string/boolean \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u4ee5\u8c03\u7528\u53c2\u6570\u4e3akey\uff0c\u7f13\u5b58\u8fd4\u56de\u7ed3\u679c\uff0c\u53ef\u9009\uff1alru, threadlocal, jcache\u7b49 Dubbo2.1.0\u53ca\u5176\u4ee5\u4e0a\u7248\u672c\u652f\u6301 validation validation boolean \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u662f\u5426\u542f\u7528JSR303\u6807\u51c6\u6ce8\u89e3\u9a8c\u8bc1\uff0c\u5982\u679c\u542f\u7528\uff0c\u5c06\u5bf9\u65b9\u6cd5\u53c2\u6570\u4e0a\u7684\u6ce8\u89e3\u8fdb\u884c\u6821\u9a8c Dubbo2.1.0\u53ca\u5176\u4ee5\u4e0a\u7248\u672c\u652f\u6301","title":"dubbo:consumer"},{"location":"user/references/xml/dubbo-method/","text":"dubbo:method \u65b9\u6cd5\u7ea7\u914d\u7f6e\u3002\u5bf9\u5e94\u7684\u914d\u7f6e\u7c7b\uff1a org.apache.dubbo.config.MethodConfig \u3002\u540c\u65f6\u8be5\u6807\u7b7e\u4e3a dubbo:service \u6216 dubbo:reference \u7684\u5b50\u6807\u7b7e\uff0c\u7528\u4e8e\u63a7\u5236\u5230\u65b9\u6cd5\u7ea7\u3002 \u5c5e\u6027 \u5bf9\u5e94URL\u53c2\u6570 \u7c7b\u578b \u662f\u5426\u5fc5\u586b \u7f3a\u7701\u503c \u4f5c\u7528 \u63cf\u8ff0 \u517c\u5bb9\u6027 name string \u5fc5\u586b \u6807\u8bc6 \u65b9\u6cd5\u540d 1.0.8\u4ee5\u4e0a\u7248\u672c timeout methodName .timeout int \u53ef\u9009 \u7f3a\u7701\u4e3a\u7684timeout \u6027\u80fd\u8c03\u4f18 \u65b9\u6cd5\u8c03\u7528\u8d85\u65f6\u65f6\u95f4(\u6beb\u79d2) 1.0.8\u4ee5\u4e0a\u7248\u672c retries methodName .retries int \u53ef\u9009 \u7f3a\u7701\u4e3a dubbo:reference \u7684retries \u6027\u80fd\u8c03\u4f18 \u8fdc\u7a0b\u670d\u52a1\u8c03\u7528\u91cd\u8bd5\u6b21\u6570\uff0c\u4e0d\u5305\u62ec\u7b2c\u4e00\u6b21\u8c03\u7528\uff0c\u4e0d\u9700\u8981\u91cd\u8bd5\u8bf7\u8bbe\u4e3a0 2.0.0\u4ee5\u4e0a\u7248\u672c loadbalance methodName .loadbalance string \u53ef\u9009 \u7f3a\u7701\u4e3a\u7684loadbalance \u6027\u80fd\u8c03\u4f18 \u8d1f\u8f7d\u5747\u8861\u7b56\u7565\uff0c\u53ef\u9009\u503c\uff1arandom,roundrobin,leastactive\uff0c\u5206\u522b\u8868\u793a\uff1a\u968f\u673a\uff0c\u8f6e\u8be2\uff0c\u6700\u5c11\u6d3b\u8dc3\u8c03\u7528 2.0.0\u4ee5\u4e0a\u7248\u672c async methodName .async boolean \u53ef\u9009 \u7f3a\u7701\u4e3a dubbo:reference \u7684async \u6027\u80fd\u8c03\u4f18 \u662f\u5426\u5f02\u6b65\u6267\u884c\uff0c\u4e0d\u53ef\u9760\u5f02\u6b65\uff0c\u53ea\u662f\u5ffd\u7565\u8fd4\u56de\u503c\uff0c\u4e0d\u963b\u585e\u6267\u884c\u7ebf\u7a0b 1.0.9\u4ee5\u4e0a\u7248\u672c sent methodName .sent boolean \u53ef\u9009 true \u6027\u80fd\u8c03\u4f18 \u5f02\u6b65\u8c03\u7528\u65f6\uff0c\u6807\u8bb0sent=true\u65f6\uff0c\u8868\u793a\u7f51\u7edc\u5df2\u53d1\u51fa\u6570\u636e 2.0.6\u4ee5\u4e0a\u7248\u672c actives methodName .actives int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u6bcf\u670d\u52a1\u6d88\u8d39\u8005\u6700\u5927\u5e76\u53d1\u8c03\u7528\u9650\u5236 2.0.5\u4ee5\u4e0a\u7248\u672c executes methodName .executes int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u6bcf\u670d\u52a1\u6bcf\u65b9\u6cd5\u6700\u5927\u4f7f\u7528\u7ebf\u7a0b\u6570\u9650\u5236 \uff0c\u6b64\u5c5e\u6027\u53ea\u5728 dubbo:method \u4f5c\u4e3a dubbo:service \u5b50\u6807\u7b7e\u65f6\u6709\u6548 2.0.5\u4ee5\u4e0a\u7248\u672c deprecated methodName .deprecated boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u65b9\u6cd5\u662f\u5426\u8fc7\u65f6\uff0c\u6b64\u5c5e\u6027\u53ea\u5728 dubbo:method \u4f5c\u4e3a dubbo:service \u5b50\u6807\u7b7e\u65f6\u6709\u6548 2.0.5\u4ee5\u4e0a\u7248\u672c sticky methodName .sticky boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u8bbe\u7f6etrue \u8be5\u63a5\u53e3\u4e0a\u7684\u6240\u6709\u65b9\u6cd5\u4f7f\u7528\u540c\u4e00\u4e2aprovider.\u5982\u679c\u9700\u8981\u66f4\u590d\u6742\u7684\u89c4\u5219\uff0c\u8bf7\u4f7f\u7528\u7528\u8def\u7531 2.0.6\u4ee5\u4e0a\u7248\u672c return methodName .return boolean \u53ef\u9009 true \u6027\u80fd\u8c03\u4f18 \u65b9\u6cd5\u8c03\u7528\u662f\u5426\u9700\u8981\u8fd4\u56de\u503c,async\u8bbe\u7f6e\u4e3atrue\u65f6\u624d\u751f\u6548\uff0c\u5982\u679c\u8bbe\u7f6e\u4e3atrue\uff0c\u5219\u8fd4\u56defuture\uff0c\u6216\u56de\u8c03onreturn\u7b49\u65b9\u6cd5\uff0c\u5982\u679c\u8bbe\u7f6e\u4e3afalse\uff0c\u5219\u8bf7\u6c42\u53d1\u9001\u6210\u529f\u540e\u76f4\u63a5\u8fd4\u56deNull 2.0.6\u4ee5\u4e0a\u7248\u672c oninvoke attribute\u5c5e\u6027\uff0c\u4e0d\u5728URL\u4e2d\u4f53\u73b0 String \u53ef\u9009 \u6027\u80fd\u8c03\u4f18 \u65b9\u6cd5\u6267\u884c\u524d\u62e6\u622a 2.0.6\u4ee5\u4e0a\u7248\u672c onreturn attribute\u5c5e\u6027\uff0c\u4e0d\u5728URL\u4e2d\u4f53\u73b0 String \u53ef\u9009 \u6027\u80fd\u8c03\u4f18 \u65b9\u6cd5\u6267\u884c\u8fd4\u56de\u540e\u62e6\u622a 2.0.6\u4ee5\u4e0a\u7248\u672c onthrow attribute\u5c5e\u6027\uff0c\u4e0d\u5728URL\u4e2d\u4f53\u73b0 String \u53ef\u9009 \u6027\u80fd\u8c03\u4f18 \u65b9\u6cd5\u6267\u884c\u6709\u5f02\u5e38\u62e6\u622a 2.0.6\u4ee5\u4e0a\u7248\u672c cache methodName .cache string/boolean \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u4ee5\u8c03\u7528\u53c2\u6570\u4e3akey\uff0c\u7f13\u5b58\u8fd4\u56de\u7ed3\u679c\uff0c\u53ef\u9009\uff1alru, threadlocal, jcache\u7b49 Dubbo2.1.0\u53ca\u5176\u4ee5\u4e0a\u7248\u672c\u652f\u6301 validation methodName .validation boolean \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u662f\u5426\u542f\u7528JSR303\u6807\u51c6\u6ce8\u89e3\u9a8c\u8bc1\uff0c\u5982\u679c\u542f\u7528\uff0c\u5c06\u5bf9\u65b9\u6cd5\u53c2\u6570\u4e0a\u7684\u6ce8\u89e3\u8fdb\u884c\u6821\u9a8c Dubbo2.1.0\u53ca\u5176\u4ee5\u4e0a\u7248\u672c\u652f\u6301 \u6bd4\u5982: dubbo:reference interface= com.xxx.XxxService dubbo:method name= findXxx timeout= 3000 retries= 2 / /dubbo:reference","title":"dubbo:method"},{"location":"user/references/xml/dubbo-method/#dubbomethod","text":"\u65b9\u6cd5\u7ea7\u914d\u7f6e\u3002\u5bf9\u5e94\u7684\u914d\u7f6e\u7c7b\uff1a org.apache.dubbo.config.MethodConfig \u3002\u540c\u65f6\u8be5\u6807\u7b7e\u4e3a dubbo:service \u6216 dubbo:reference \u7684\u5b50\u6807\u7b7e\uff0c\u7528\u4e8e\u63a7\u5236\u5230\u65b9\u6cd5\u7ea7\u3002 \u5c5e\u6027 \u5bf9\u5e94URL\u53c2\u6570 \u7c7b\u578b \u662f\u5426\u5fc5\u586b \u7f3a\u7701\u503c \u4f5c\u7528 \u63cf\u8ff0 \u517c\u5bb9\u6027 name string \u5fc5\u586b \u6807\u8bc6 \u65b9\u6cd5\u540d 1.0.8\u4ee5\u4e0a\u7248\u672c timeout methodName .timeout int \u53ef\u9009 \u7f3a\u7701\u4e3a\u7684timeout \u6027\u80fd\u8c03\u4f18 \u65b9\u6cd5\u8c03\u7528\u8d85\u65f6\u65f6\u95f4(\u6beb\u79d2) 1.0.8\u4ee5\u4e0a\u7248\u672c retries methodName .retries int \u53ef\u9009 \u7f3a\u7701\u4e3a dubbo:reference \u7684retries \u6027\u80fd\u8c03\u4f18 \u8fdc\u7a0b\u670d\u52a1\u8c03\u7528\u91cd\u8bd5\u6b21\u6570\uff0c\u4e0d\u5305\u62ec\u7b2c\u4e00\u6b21\u8c03\u7528\uff0c\u4e0d\u9700\u8981\u91cd\u8bd5\u8bf7\u8bbe\u4e3a0 2.0.0\u4ee5\u4e0a\u7248\u672c loadbalance methodName .loadbalance string \u53ef\u9009 \u7f3a\u7701\u4e3a\u7684loadbalance \u6027\u80fd\u8c03\u4f18 \u8d1f\u8f7d\u5747\u8861\u7b56\u7565\uff0c\u53ef\u9009\u503c\uff1arandom,roundrobin,leastactive\uff0c\u5206\u522b\u8868\u793a\uff1a\u968f\u673a\uff0c\u8f6e\u8be2\uff0c\u6700\u5c11\u6d3b\u8dc3\u8c03\u7528 2.0.0\u4ee5\u4e0a\u7248\u672c async methodName .async boolean \u53ef\u9009 \u7f3a\u7701\u4e3a dubbo:reference \u7684async \u6027\u80fd\u8c03\u4f18 \u662f\u5426\u5f02\u6b65\u6267\u884c\uff0c\u4e0d\u53ef\u9760\u5f02\u6b65\uff0c\u53ea\u662f\u5ffd\u7565\u8fd4\u56de\u503c\uff0c\u4e0d\u963b\u585e\u6267\u884c\u7ebf\u7a0b 1.0.9\u4ee5\u4e0a\u7248\u672c sent methodName .sent boolean \u53ef\u9009 true \u6027\u80fd\u8c03\u4f18 \u5f02\u6b65\u8c03\u7528\u65f6\uff0c\u6807\u8bb0sent=true\u65f6\uff0c\u8868\u793a\u7f51\u7edc\u5df2\u53d1\u51fa\u6570\u636e 2.0.6\u4ee5\u4e0a\u7248\u672c actives methodName .actives int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u6bcf\u670d\u52a1\u6d88\u8d39\u8005\u6700\u5927\u5e76\u53d1\u8c03\u7528\u9650\u5236 2.0.5\u4ee5\u4e0a\u7248\u672c executes methodName .executes int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u6bcf\u670d\u52a1\u6bcf\u65b9\u6cd5\u6700\u5927\u4f7f\u7528\u7ebf\u7a0b\u6570\u9650\u5236 \uff0c\u6b64\u5c5e\u6027\u53ea\u5728 dubbo:method \u4f5c\u4e3a dubbo:service \u5b50\u6807\u7b7e\u65f6\u6709\u6548 2.0.5\u4ee5\u4e0a\u7248\u672c deprecated methodName .deprecated boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u65b9\u6cd5\u662f\u5426\u8fc7\u65f6\uff0c\u6b64\u5c5e\u6027\u53ea\u5728 dubbo:method \u4f5c\u4e3a dubbo:service \u5b50\u6807\u7b7e\u65f6\u6709\u6548 2.0.5\u4ee5\u4e0a\u7248\u672c sticky methodName .sticky boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u8bbe\u7f6etrue \u8be5\u63a5\u53e3\u4e0a\u7684\u6240\u6709\u65b9\u6cd5\u4f7f\u7528\u540c\u4e00\u4e2aprovider.\u5982\u679c\u9700\u8981\u66f4\u590d\u6742\u7684\u89c4\u5219\uff0c\u8bf7\u4f7f\u7528\u7528\u8def\u7531 2.0.6\u4ee5\u4e0a\u7248\u672c return methodName .return boolean \u53ef\u9009 true \u6027\u80fd\u8c03\u4f18 \u65b9\u6cd5\u8c03\u7528\u662f\u5426\u9700\u8981\u8fd4\u56de\u503c,async\u8bbe\u7f6e\u4e3atrue\u65f6\u624d\u751f\u6548\uff0c\u5982\u679c\u8bbe\u7f6e\u4e3atrue\uff0c\u5219\u8fd4\u56defuture\uff0c\u6216\u56de\u8c03onreturn\u7b49\u65b9\u6cd5\uff0c\u5982\u679c\u8bbe\u7f6e\u4e3afalse\uff0c\u5219\u8bf7\u6c42\u53d1\u9001\u6210\u529f\u540e\u76f4\u63a5\u8fd4\u56deNull 2.0.6\u4ee5\u4e0a\u7248\u672c oninvoke attribute\u5c5e\u6027\uff0c\u4e0d\u5728URL\u4e2d\u4f53\u73b0 String \u53ef\u9009 \u6027\u80fd\u8c03\u4f18 \u65b9\u6cd5\u6267\u884c\u524d\u62e6\u622a 2.0.6\u4ee5\u4e0a\u7248\u672c onreturn attribute\u5c5e\u6027\uff0c\u4e0d\u5728URL\u4e2d\u4f53\u73b0 String \u53ef\u9009 \u6027\u80fd\u8c03\u4f18 \u65b9\u6cd5\u6267\u884c\u8fd4\u56de\u540e\u62e6\u622a 2.0.6\u4ee5\u4e0a\u7248\u672c onthrow attribute\u5c5e\u6027\uff0c\u4e0d\u5728URL\u4e2d\u4f53\u73b0 String \u53ef\u9009 \u6027\u80fd\u8c03\u4f18 \u65b9\u6cd5\u6267\u884c\u6709\u5f02\u5e38\u62e6\u622a 2.0.6\u4ee5\u4e0a\u7248\u672c cache methodName .cache string/boolean \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u4ee5\u8c03\u7528\u53c2\u6570\u4e3akey\uff0c\u7f13\u5b58\u8fd4\u56de\u7ed3\u679c\uff0c\u53ef\u9009\uff1alru, threadlocal, jcache\u7b49 Dubbo2.1.0\u53ca\u5176\u4ee5\u4e0a\u7248\u672c\u652f\u6301 validation methodName .validation boolean \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u662f\u5426\u542f\u7528JSR303\u6807\u51c6\u6ce8\u89e3\u9a8c\u8bc1\uff0c\u5982\u679c\u542f\u7528\uff0c\u5c06\u5bf9\u65b9\u6cd5\u53c2\u6570\u4e0a\u7684\u6ce8\u89e3\u8fdb\u884c\u6821\u9a8c Dubbo2.1.0\u53ca\u5176\u4ee5\u4e0a\u7248\u672c\u652f\u6301 \u6bd4\u5982: dubbo:reference interface= com.xxx.XxxService dubbo:method name= findXxx timeout= 3000 retries= 2 / /dubbo:reference","title":"dubbo:method"},{"location":"user/references/xml/dubbo-module/","text":"dubbo:module \u6a21\u5757\u4fe1\u606f\u914d\u7f6e\u3002\u5bf9\u5e94\u7684\u914d\u7f6e\u7c7b org.apache.dubbo.config.ModuleConfig \u5c5e\u6027 \u5bf9\u5e94URL\u53c2\u6570 \u7c7b\u578b \u662f\u5426\u5fc5\u586b \u7f3a\u7701\u503c \u4f5c\u7528 \u63cf\u8ff0 \u517c\u5bb9\u6027 name module string \u5fc5\u586b \u670d\u52a1\u6cbb\u7406 \u5f53\u524d\u6a21\u5757\u540d\u79f0\uff0c\u7528\u4e8e\u6ce8\u518c\u4e2d\u5fc3\u8ba1\u7b97\u6a21\u5757\u95f4\u4f9d\u8d56\u5173\u7cfb 2.2.0\u4ee5\u4e0a\u7248\u672c version module.version string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u5f53\u524d\u6a21\u5757\u7684\u7248\u672c 2.2.0\u4ee5\u4e0a\u7248\u672c owner owner string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u6a21\u5757\u8d1f\u8d23\u4eba\uff0c\u7528\u4e8e\u670d\u52a1\u6cbb\u7406\uff0c\u8bf7\u586b\u5199\u8d1f\u8d23\u4eba\u516c\u53f8\u90ae\u7bb1\u524d\u7f00 2.2.0\u4ee5\u4e0a\u7248\u672c organization organization string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u7ec4\u7ec7\u540d\u79f0(BU\u6216\u90e8\u95e8)\uff0c\u7528\u4e8e\u6ce8\u518c\u4e2d\u5fc3\u533a\u5206\u670d\u52a1\u6765\u6e90\uff0c\u6b64\u914d\u7f6e\u9879\u5efa\u8bae\u4e0d\u8981\u4f7f\u7528autoconfig\uff0c\u76f4\u63a5\u5199\u6b7b\u5728\u914d\u7f6e\u4e2d\uff0c\u6bd4\u5982china,intl,itu,crm,asc,dw,aliexpress\u7b49 2.2.0\u4ee5\u4e0a\u7248\u672c","title":"dubbo:module"},{"location":"user/references/xml/dubbo-module/#dubbomodule","text":"\u6a21\u5757\u4fe1\u606f\u914d\u7f6e\u3002\u5bf9\u5e94\u7684\u914d\u7f6e\u7c7b org.apache.dubbo.config.ModuleConfig \u5c5e\u6027 \u5bf9\u5e94URL\u53c2\u6570 \u7c7b\u578b \u662f\u5426\u5fc5\u586b \u7f3a\u7701\u503c \u4f5c\u7528 \u63cf\u8ff0 \u517c\u5bb9\u6027 name module string \u5fc5\u586b \u670d\u52a1\u6cbb\u7406 \u5f53\u524d\u6a21\u5757\u540d\u79f0\uff0c\u7528\u4e8e\u6ce8\u518c\u4e2d\u5fc3\u8ba1\u7b97\u6a21\u5757\u95f4\u4f9d\u8d56\u5173\u7cfb 2.2.0\u4ee5\u4e0a\u7248\u672c version module.version string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u5f53\u524d\u6a21\u5757\u7684\u7248\u672c 2.2.0\u4ee5\u4e0a\u7248\u672c owner owner string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u6a21\u5757\u8d1f\u8d23\u4eba\uff0c\u7528\u4e8e\u670d\u52a1\u6cbb\u7406\uff0c\u8bf7\u586b\u5199\u8d1f\u8d23\u4eba\u516c\u53f8\u90ae\u7bb1\u524d\u7f00 2.2.0\u4ee5\u4e0a\u7248\u672c organization organization string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u7ec4\u7ec7\u540d\u79f0(BU\u6216\u90e8\u95e8)\uff0c\u7528\u4e8e\u6ce8\u518c\u4e2d\u5fc3\u533a\u5206\u670d\u52a1\u6765\u6e90\uff0c\u6b64\u914d\u7f6e\u9879\u5efa\u8bae\u4e0d\u8981\u4f7f\u7528autoconfig\uff0c\u76f4\u63a5\u5199\u6b7b\u5728\u914d\u7f6e\u4e2d\uff0c\u6bd4\u5982china,intl,itu,crm,asc,dw,aliexpress\u7b49 2.2.0\u4ee5\u4e0a\u7248\u672c","title":"dubbo:module"},{"location":"user/references/xml/dubbo-monitor/","text":"dubbo:monitor \u76d1\u63a7\u4e2d\u5fc3\u914d\u7f6e\u3002\u5bf9\u5e94\u7684\u914d\u7f6e\u7c7b\uff1a org.apache.dubbo.config.MonitorConfig \u5c5e\u6027 \u5bf9\u5e94URL\u53c2\u6570 \u7c7b\u578b \u662f\u5426\u5fc5\u586b \u7f3a\u7701\u503c \u4f5c\u7528 \u63cf\u8ff0 \u517c\u5bb9\u6027 protocol protocol string \u53ef\u9009 dubbo \u670d\u52a1\u6cbb\u7406 \u76d1\u63a7\u4e2d\u5fc3\u534f\u8bae\uff0c\u5982\u679c\u4e3aprotocol=\"registry\"\uff0c\u8868\u793a\u4ece\u6ce8\u518c\u4e2d\u5fc3\u53d1\u73b0\u76d1\u63a7\u4e2d\u5fc3\u5730\u5740\uff0c\u5426\u5219\u76f4\u8fde\u76d1\u63a7\u4e2d\u5fc3\u3002 2.0.9\u4ee5\u4e0a\u7248\u672c address url string \u53ef\u9009 N/A \u670d\u52a1\u6cbb\u7406 \u76f4\u8fde\u76d1\u63a7\u4e2d\u5fc3\u670d\u52a1\u5668\u5730\u5740\uff0caddress=\"10.20.130.230:12080\" 1.0.16\u4ee5\u4e0a\u7248\u672c","title":"dubbo:monitor"},{"location":"user/references/xml/dubbo-monitor/#dubbomonitor","text":"\u76d1\u63a7\u4e2d\u5fc3\u914d\u7f6e\u3002\u5bf9\u5e94\u7684\u914d\u7f6e\u7c7b\uff1a org.apache.dubbo.config.MonitorConfig \u5c5e\u6027 \u5bf9\u5e94URL\u53c2\u6570 \u7c7b\u578b \u662f\u5426\u5fc5\u586b \u7f3a\u7701\u503c \u4f5c\u7528 \u63cf\u8ff0 \u517c\u5bb9\u6027 protocol protocol string \u53ef\u9009 dubbo \u670d\u52a1\u6cbb\u7406 \u76d1\u63a7\u4e2d\u5fc3\u534f\u8bae\uff0c\u5982\u679c\u4e3aprotocol=\"registry\"\uff0c\u8868\u793a\u4ece\u6ce8\u518c\u4e2d\u5fc3\u53d1\u73b0\u76d1\u63a7\u4e2d\u5fc3\u5730\u5740\uff0c\u5426\u5219\u76f4\u8fde\u76d1\u63a7\u4e2d\u5fc3\u3002 2.0.9\u4ee5\u4e0a\u7248\u672c address url string \u53ef\u9009 N/A \u670d\u52a1\u6cbb\u7406 \u76f4\u8fde\u76d1\u63a7\u4e2d\u5fc3\u670d\u52a1\u5668\u5730\u5740\uff0caddress=\"10.20.130.230:12080\" 1.0.16\u4ee5\u4e0a\u7248\u672c","title":"dubbo:monitor"},{"location":"user/references/xml/dubbo-parameter/","text":"dubbo:parameter \u9009\u9879\u53c2\u6570\u914d\u7f6e\u3002\u5bf9\u5e94\u7684\u914d\u7f6e\u7c7b\uff1a java.util.Map \u3002\u540c\u65f6\u8be5\u6807\u7b7e\u4e3a dubbo:protocol \u6216 dubbo:service \u6216 dubbo:provider \u6216 dubbo:reference \u6216 dubbo:consumer \u7684\u5b50\u6807\u7b7e\uff0c\u7528\u4e8e\u914d\u7f6e\u81ea\u5b9a\u4e49\u53c2\u6570\uff0c\u8be5\u914d\u7f6e\u9879\u5c06\u4f5c\u4e3a\u6269\u5c55\u70b9\u8bbe\u7f6e\u81ea\u5b9a\u4e49\u53c2\u6570\u4f7f\u7528\u3002 \u5c5e\u6027 \u5bf9\u5e94URL\u53c2\u6570 \u7c7b\u578b \u662f\u5426\u5fc5\u586b \u7f3a\u7701\u503c \u4f5c\u7528 \u63cf\u8ff0 \u517c\u5bb9\u6027 key key string \u5fc5\u586b \u670d\u52a1\u6cbb\u7406 \u8def\u7531\u53c2\u6570\u952e 2.0.0\u4ee5\u4e0a\u7248\u672c value value string \u5fc5\u586b \u670d\u52a1\u6cbb\u7406 \u8def\u7531\u53c2\u6570\u503c 2.0.0\u4ee5\u4e0a\u7248\u672c \u6bd4\u5982\uff1a dubbo:protocol name= napoli dubbo:parameter key= http://10.20.160.198/wiki/display/dubbo/napoli.queue.name value= xxx / /dubbo:protocol \u4e5f\u53ef\u4ee5\uff1a dubbo:protocol name= jms p:queue= xxx /","title":"dubbo:parameter"},{"location":"user/references/xml/dubbo-parameter/#dubboparameter","text":"\u9009\u9879\u53c2\u6570\u914d\u7f6e\u3002\u5bf9\u5e94\u7684\u914d\u7f6e\u7c7b\uff1a java.util.Map \u3002\u540c\u65f6\u8be5\u6807\u7b7e\u4e3a dubbo:protocol \u6216 dubbo:service \u6216 dubbo:provider \u6216 dubbo:reference \u6216 dubbo:consumer \u7684\u5b50\u6807\u7b7e\uff0c\u7528\u4e8e\u914d\u7f6e\u81ea\u5b9a\u4e49\u53c2\u6570\uff0c\u8be5\u914d\u7f6e\u9879\u5c06\u4f5c\u4e3a\u6269\u5c55\u70b9\u8bbe\u7f6e\u81ea\u5b9a\u4e49\u53c2\u6570\u4f7f\u7528\u3002 \u5c5e\u6027 \u5bf9\u5e94URL\u53c2\u6570 \u7c7b\u578b \u662f\u5426\u5fc5\u586b \u7f3a\u7701\u503c \u4f5c\u7528 \u63cf\u8ff0 \u517c\u5bb9\u6027 key key string \u5fc5\u586b \u670d\u52a1\u6cbb\u7406 \u8def\u7531\u53c2\u6570\u952e 2.0.0\u4ee5\u4e0a\u7248\u672c value value string \u5fc5\u586b \u670d\u52a1\u6cbb\u7406 \u8def\u7531\u53c2\u6570\u503c 2.0.0\u4ee5\u4e0a\u7248\u672c \u6bd4\u5982\uff1a dubbo:protocol name= napoli dubbo:parameter key= http://10.20.160.198/wiki/display/dubbo/napoli.queue.name value= xxx / /dubbo:protocol \u4e5f\u53ef\u4ee5\uff1a dubbo:protocol name= jms p:queue= xxx /","title":"dubbo:parameter"},{"location":"user/references/xml/dubbo-protocol/","text":"dubbo:protocol \u670d\u52a1\u63d0\u4f9b\u8005\u534f\u8bae\u914d\u7f6e\u3002\u5bf9\u5e94\u7684\u914d\u7f6e\u7c7b\uff1a org.apache.dubbo.config.ProtocolConfig \u3002\u540c\u65f6\uff0c\u5982\u679c\u9700\u8981\u652f\u6301\u591a\u534f\u8bae\uff0c\u53ef\u4ee5\u58f0\u660e\u591a\u4e2a dubbo:protocol \u6807\u7b7e\uff0c\u5e76\u5728 dubbo:service \u4e2d\u901a\u8fc7 protocol \u5c5e\u6027\u6307\u5b9a\u4f7f\u7528\u7684\u534f\u8bae\u3002 \u5c5e\u6027 \u5bf9\u5e94URL\u53c2\u6570 \u7c7b\u578b \u662f\u5426\u5fc5\u586b \u7f3a\u7701\u503c \u4f5c\u7528 \u63cf\u8ff0 \u517c\u5bb9\u6027 id string \u53ef\u9009 dubbo \u914d\u7f6e\u5173\u8054 \u534f\u8baeBeanId\uff0c\u53ef\u4ee5\u5728 dubbo:service protocol=\"\" \u4e2d\u5f15\u7528\u6b64ID\uff0c\u5982\u679cID\u4e0d\u586b\uff0c\u7f3a\u7701\u548cname\u5c5e\u6027\u503c\u4e00\u6837\uff0c\u91cd\u590d\u5219\u5728name\u540e\u52a0\u5e8f\u53f7\u3002 2.0.5\u4ee5\u4e0a\u7248\u672c name protocol string \u5fc5\u586b dubbo \u6027\u80fd\u8c03\u4f18 \u534f\u8bae\u540d\u79f0 2.0.5\u4ee5\u4e0a\u7248\u672c port port int \u53ef\u9009 dubbo\u534f\u8bae\u7f3a\u7701\u7aef\u53e3\u4e3a20880\uff0crmi\u534f\u8bae\u7f3a\u7701\u7aef\u53e3\u4e3a1099\uff0chttp\u548chessian\u534f\u8bae\u7f3a\u7701\u7aef\u53e3\u4e3a80\uff1b\u5982\u679c \u6ca1\u6709 \u914d\u7f6eport\uff0c\u5219\u81ea\u52a8\u91c7\u7528\u9ed8\u8ba4\u7aef\u53e3\uff0c\u5982\u679c\u914d\u7f6e\u4e3a -1 \uff0c\u5219\u4f1a\u5206\u914d\u4e00\u4e2a\u6ca1\u6709\u88ab\u5360\u7528\u7684\u7aef\u53e3\u3002Dubbo 2.4.0+\uff0c\u5206\u914d\u7684\u7aef\u53e3\u5728\u534f\u8bae\u7f3a\u7701\u7aef\u53e3\u7684\u57fa\u7840\u4e0a\u589e\u957f\uff0c\u786e\u4fdd\u7aef\u53e3\u6bb5\u53ef\u63a7\u3002 \u670d\u52a1\u53d1\u73b0 \u670d\u52a1\u7aef\u53e3 2.0.5\u4ee5\u4e0a\u7248\u672c host host string \u53ef\u9009 \u81ea\u52a8\u67e5\u627e\u672c\u673aIP \u670d\u52a1\u53d1\u73b0 \u670d\u52a1\u4e3b\u673a\u540d\uff0c\u591a\u7f51\u5361\u9009\u62e9\u6216\u6307\u5b9aVIP\u53ca\u57df\u540d\u65f6\u4f7f\u7528\uff0c\u4e3a\u7a7a\u5219\u81ea\u52a8\u67e5\u627e\u672c\u673aIP\uff0c \u5efa\u8bae\u4e0d\u8981\u914d\u7f6e\uff0c\u8ba9Dubbo\u81ea\u52a8\u83b7\u53d6\u672c\u673aIP 2.0.5\u4ee5\u4e0a\u7248\u672c threadpool threadpool string \u53ef\u9009 fixed \u6027\u80fd\u8c03\u4f18 \u7ebf\u7a0b\u6c60\u7c7b\u578b\uff0c\u53ef\u9009\uff1afixed/cached 2.0.5\u4ee5\u4e0a\u7248\u672c threads threads int \u53ef\u9009 200 \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u7ebf\u7a0b\u6c60\u5927\u5c0f(\u56fa\u5b9a\u5927\u5c0f) 2.0.5\u4ee5\u4e0a\u7248\u672c iothreads threads int \u53ef\u9009 cpu\u4e2a\u6570+1 \u6027\u80fd\u8c03\u4f18 io\u7ebf\u7a0b\u6c60\u5927\u5c0f(\u56fa\u5b9a\u5927\u5c0f) 2.0.5\u4ee5\u4e0a\u7248\u672c accepts accepts int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u63d0\u4f9b\u65b9\u6700\u5927\u53ef\u63a5\u53d7\u8fde\u63a5\u6570 2.0.5\u4ee5\u4e0a\u7248\u672c payload payload int \u53ef\u9009 8388608(=8M) \u6027\u80fd\u8c03\u4f18 \u8bf7\u6c42\u53ca\u54cd\u5e94\u6570\u636e\u5305\u5927\u5c0f\u9650\u5236\uff0c\u5355\u4f4d\uff1a\u5b57\u8282 2.0.5\u4ee5\u4e0a\u7248\u672c codec codec string \u53ef\u9009 dubbo \u6027\u80fd\u8c03\u4f18 \u534f\u8bae\u7f16\u7801\u65b9\u5f0f 2.0.5\u4ee5\u4e0a\u7248\u672c serialization serialization string \u53ef\u9009 dubbo\u534f\u8bae\u7f3a\u7701\u4e3ahessian2\uff0crmi\u534f\u8bae\u7f3a\u7701\u4e3ajava\uff0chttp\u534f\u8bae\u7f3a\u7701\u4e3ajson \u6027\u80fd\u8c03\u4f18 \u534f\u8bae\u5e8f\u5217\u5316\u65b9\u5f0f\uff0c\u5f53\u534f\u8bae\u652f\u6301\u591a\u79cd\u5e8f\u5217\u5316\u65b9\u5f0f\u65f6\u4f7f\u7528\uff0c\u6bd4\u5982\uff1adubbo\u534f\u8bae\u7684dubbo,hessian2,java,compactedjava\uff0c\u4ee5\u53cahttp\u534f\u8bae\u7684json\u7b49 2.0.5\u4ee5\u4e0a\u7248\u672c accesslog accesslog string/boolean \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u8bbe\u4e3atrue\uff0c\u5c06\u5411logger\u4e2d\u8f93\u51fa\u8bbf\u95ee\u65e5\u5fd7\uff0c\u4e5f\u53ef\u586b\u5199\u8bbf\u95ee\u65e5\u5fd7\u6587\u4ef6\u8def\u5f84\uff0c\u76f4\u63a5\u628a\u8bbf\u95ee\u65e5\u5fd7\u8f93\u51fa\u5230\u6307\u5b9a\u6587\u4ef6 2.0.5\u4ee5\u4e0a\u7248\u672c path path string \u53ef\u9009 \u670d\u52a1\u53d1\u73b0 \u63d0\u4f9b\u8005\u4e0a\u4e0b\u6587\u8def\u5f84\uff0c\u4e3a\u670d\u52a1path\u7684\u524d\u7f00 2.0.5\u4ee5\u4e0a\u7248\u672c transporter transporter string \u53ef\u9009 dubbo\u534f\u8bae\u7f3a\u7701\u4e3anetty \u6027\u80fd\u8c03\u4f18 \u534f\u8bae\u7684\u670d\u52a1\u7aef\u548c\u5ba2\u6237\u7aef\u5b9e\u73b0\u7c7b\u578b\uff0c\u6bd4\u5982\uff1adubbo\u534f\u8bae\u7684mina,netty\u7b49\uff0c\u53ef\u4ee5\u5206\u62c6\u4e3aserver\u548cclient\u914d\u7f6e 2.0.5\u4ee5\u4e0a\u7248\u672c server server string \u53ef\u9009 dubbo\u534f\u8bae\u7f3a\u7701\u4e3anetty\uff0chttp\u534f\u8bae\u7f3a\u7701\u4e3aservlet \u6027\u80fd\u8c03\u4f18 \u534f\u8bae\u7684\u670d\u52a1\u5668\u7aef\u5b9e\u73b0\u7c7b\u578b\uff0c\u6bd4\u5982\uff1adubbo\u534f\u8bae\u7684mina,netty\u7b49\uff0chttp\u534f\u8bae\u7684jetty,servlet\u7b49 2.0.5\u4ee5\u4e0a\u7248\u672c client client string \u53ef\u9009 dubbo\u534f\u8bae\u7f3a\u7701\u4e3anetty \u6027\u80fd\u8c03\u4f18 \u534f\u8bae\u7684\u5ba2\u6237\u7aef\u5b9e\u73b0\u7c7b\u578b\uff0c\u6bd4\u5982\uff1adubbo\u534f\u8bae\u7684mina,netty\u7b49 2.0.5\u4ee5\u4e0a\u7248\u672c dispatcher dispatcher string \u53ef\u9009 dubbo\u534f\u8bae\u7f3a\u7701\u4e3aall \u6027\u80fd\u8c03\u4f18 \u534f\u8bae\u7684\u6d88\u606f\u6d3e\u53d1\u65b9\u5f0f\uff0c\u7528\u4e8e\u6307\u5b9a\u7ebf\u7a0b\u6a21\u578b\uff0c\u6bd4\u5982\uff1adubbo\u534f\u8bae\u7684all, direct, message, execution, connection\u7b49 2.1.0\u4ee5\u4e0a\u7248\u672c queues queues int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u7ebf\u7a0b\u6c60\u961f\u5217\u5927\u5c0f\uff0c\u5f53\u7ebf\u7a0b\u6c60\u6ee1\u65f6\uff0c\u6392\u961f\u7b49\u5f85\u6267\u884c\u7684\u961f\u5217\u5927\u5c0f\uff0c\u5efa\u8bae\u4e0d\u8981\u8bbe\u7f6e\uff0c\u5f53\u7ebf\u7a0b\u6c60\u6ee1\u65f6\u5e94\u7acb\u5373\u5931\u8d25\uff0c\u91cd\u8bd5\u5176\u5b83\u670d\u52a1\u63d0\u4f9b\u673a\u5668\uff0c\u800c\u4e0d\u662f\u6392\u961f\uff0c\u9664\u975e\u6709\u7279\u6b8a\u9700\u6c42\u3002 2.0.5\u4ee5\u4e0a\u7248\u672c charset charset string \u53ef\u9009 UTF-8 \u6027\u80fd\u8c03\u4f18 \u5e8f\u5217\u5316\u7f16\u7801 2.0.5\u4ee5\u4e0a\u7248\u672c buffer buffer int \u53ef\u9009 8192 \u6027\u80fd\u8c03\u4f18 \u7f51\u7edc\u8bfb\u5199\u7f13\u51b2\u533a\u5927\u5c0f 2.0.5\u4ee5\u4e0a\u7248\u672c heartbeat heartbeat int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u5fc3\u8df3\u95f4\u9694\uff0c\u5bf9\u4e8e\u957f\u8fde\u63a5\uff0c\u5f53\u7269\u7406\u5c42\u65ad\u5f00\u65f6\uff0c\u6bd4\u5982\u62d4\u7f51\u7ebf\uff0cTCP\u7684FIN\u6d88\u606f\u6765\u4e0d\u53ca\u53d1\u9001\uff0c\u5bf9\u65b9\u6536\u4e0d\u5230\u65ad\u5f00\u4e8b\u4ef6\uff0c\u6b64\u65f6\u9700\u8981\u5fc3\u8df3\u6765\u5e2e\u52a9\u68c0\u67e5\u8fde\u63a5\u662f\u5426\u5df2\u65ad\u5f00 2.0.10\u4ee5\u4e0a\u7248\u672c telnet telnet string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u6240\u652f\u6301\u7684telnet\u547d\u4ee4\uff0c\u591a\u4e2a\u547d\u4ee4\u7528\u9017\u53f7\u5206\u9694 2.0.5\u4ee5\u4e0a\u7248\u672c register register boolean \u53ef\u9009 true \u670d\u52a1\u6cbb\u7406 \u8be5\u534f\u8bae\u7684\u670d\u52a1\u662f\u5426\u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3 2.0.8\u4ee5\u4e0a\u7248\u672c contextpath contextpath String \u53ef\u9009 \u7f3a\u7701\u4e3a\u7a7a\u4e32 \u670d\u52a1\u6cbb\u7406 2.0.6\u4ee5\u4e0a\u7248\u672c","title":"dubbo:protocol"},{"location":"user/references/xml/dubbo-protocol/#dubboprotocol","text":"\u670d\u52a1\u63d0\u4f9b\u8005\u534f\u8bae\u914d\u7f6e\u3002\u5bf9\u5e94\u7684\u914d\u7f6e\u7c7b\uff1a org.apache.dubbo.config.ProtocolConfig \u3002\u540c\u65f6\uff0c\u5982\u679c\u9700\u8981\u652f\u6301\u591a\u534f\u8bae\uff0c\u53ef\u4ee5\u58f0\u660e\u591a\u4e2a dubbo:protocol \u6807\u7b7e\uff0c\u5e76\u5728 dubbo:service \u4e2d\u901a\u8fc7 protocol \u5c5e\u6027\u6307\u5b9a\u4f7f\u7528\u7684\u534f\u8bae\u3002 \u5c5e\u6027 \u5bf9\u5e94URL\u53c2\u6570 \u7c7b\u578b \u662f\u5426\u5fc5\u586b \u7f3a\u7701\u503c \u4f5c\u7528 \u63cf\u8ff0 \u517c\u5bb9\u6027 id string \u53ef\u9009 dubbo \u914d\u7f6e\u5173\u8054 \u534f\u8baeBeanId\uff0c\u53ef\u4ee5\u5728 dubbo:service protocol=\"\" \u4e2d\u5f15\u7528\u6b64ID\uff0c\u5982\u679cID\u4e0d\u586b\uff0c\u7f3a\u7701\u548cname\u5c5e\u6027\u503c\u4e00\u6837\uff0c\u91cd\u590d\u5219\u5728name\u540e\u52a0\u5e8f\u53f7\u3002 2.0.5\u4ee5\u4e0a\u7248\u672c name protocol string \u5fc5\u586b dubbo \u6027\u80fd\u8c03\u4f18 \u534f\u8bae\u540d\u79f0 2.0.5\u4ee5\u4e0a\u7248\u672c port port int \u53ef\u9009 dubbo\u534f\u8bae\u7f3a\u7701\u7aef\u53e3\u4e3a20880\uff0crmi\u534f\u8bae\u7f3a\u7701\u7aef\u53e3\u4e3a1099\uff0chttp\u548chessian\u534f\u8bae\u7f3a\u7701\u7aef\u53e3\u4e3a80\uff1b\u5982\u679c \u6ca1\u6709 \u914d\u7f6eport\uff0c\u5219\u81ea\u52a8\u91c7\u7528\u9ed8\u8ba4\u7aef\u53e3\uff0c\u5982\u679c\u914d\u7f6e\u4e3a -1 \uff0c\u5219\u4f1a\u5206\u914d\u4e00\u4e2a\u6ca1\u6709\u88ab\u5360\u7528\u7684\u7aef\u53e3\u3002Dubbo 2.4.0+\uff0c\u5206\u914d\u7684\u7aef\u53e3\u5728\u534f\u8bae\u7f3a\u7701\u7aef\u53e3\u7684\u57fa\u7840\u4e0a\u589e\u957f\uff0c\u786e\u4fdd\u7aef\u53e3\u6bb5\u53ef\u63a7\u3002 \u670d\u52a1\u53d1\u73b0 \u670d\u52a1\u7aef\u53e3 2.0.5\u4ee5\u4e0a\u7248\u672c host host string \u53ef\u9009 \u81ea\u52a8\u67e5\u627e\u672c\u673aIP \u670d\u52a1\u53d1\u73b0 \u670d\u52a1\u4e3b\u673a\u540d\uff0c\u591a\u7f51\u5361\u9009\u62e9\u6216\u6307\u5b9aVIP\u53ca\u57df\u540d\u65f6\u4f7f\u7528\uff0c\u4e3a\u7a7a\u5219\u81ea\u52a8\u67e5\u627e\u672c\u673aIP\uff0c \u5efa\u8bae\u4e0d\u8981\u914d\u7f6e\uff0c\u8ba9Dubbo\u81ea\u52a8\u83b7\u53d6\u672c\u673aIP 2.0.5\u4ee5\u4e0a\u7248\u672c threadpool threadpool string \u53ef\u9009 fixed \u6027\u80fd\u8c03\u4f18 \u7ebf\u7a0b\u6c60\u7c7b\u578b\uff0c\u53ef\u9009\uff1afixed/cached 2.0.5\u4ee5\u4e0a\u7248\u672c threads threads int \u53ef\u9009 200 \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u7ebf\u7a0b\u6c60\u5927\u5c0f(\u56fa\u5b9a\u5927\u5c0f) 2.0.5\u4ee5\u4e0a\u7248\u672c iothreads threads int \u53ef\u9009 cpu\u4e2a\u6570+1 \u6027\u80fd\u8c03\u4f18 io\u7ebf\u7a0b\u6c60\u5927\u5c0f(\u56fa\u5b9a\u5927\u5c0f) 2.0.5\u4ee5\u4e0a\u7248\u672c accepts accepts int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u63d0\u4f9b\u65b9\u6700\u5927\u53ef\u63a5\u53d7\u8fde\u63a5\u6570 2.0.5\u4ee5\u4e0a\u7248\u672c payload payload int \u53ef\u9009 8388608(=8M) \u6027\u80fd\u8c03\u4f18 \u8bf7\u6c42\u53ca\u54cd\u5e94\u6570\u636e\u5305\u5927\u5c0f\u9650\u5236\uff0c\u5355\u4f4d\uff1a\u5b57\u8282 2.0.5\u4ee5\u4e0a\u7248\u672c codec codec string \u53ef\u9009 dubbo \u6027\u80fd\u8c03\u4f18 \u534f\u8bae\u7f16\u7801\u65b9\u5f0f 2.0.5\u4ee5\u4e0a\u7248\u672c serialization serialization string \u53ef\u9009 dubbo\u534f\u8bae\u7f3a\u7701\u4e3ahessian2\uff0crmi\u534f\u8bae\u7f3a\u7701\u4e3ajava\uff0chttp\u534f\u8bae\u7f3a\u7701\u4e3ajson \u6027\u80fd\u8c03\u4f18 \u534f\u8bae\u5e8f\u5217\u5316\u65b9\u5f0f\uff0c\u5f53\u534f\u8bae\u652f\u6301\u591a\u79cd\u5e8f\u5217\u5316\u65b9\u5f0f\u65f6\u4f7f\u7528\uff0c\u6bd4\u5982\uff1adubbo\u534f\u8bae\u7684dubbo,hessian2,java,compactedjava\uff0c\u4ee5\u53cahttp\u534f\u8bae\u7684json\u7b49 2.0.5\u4ee5\u4e0a\u7248\u672c accesslog accesslog string/boolean \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u8bbe\u4e3atrue\uff0c\u5c06\u5411logger\u4e2d\u8f93\u51fa\u8bbf\u95ee\u65e5\u5fd7\uff0c\u4e5f\u53ef\u586b\u5199\u8bbf\u95ee\u65e5\u5fd7\u6587\u4ef6\u8def\u5f84\uff0c\u76f4\u63a5\u628a\u8bbf\u95ee\u65e5\u5fd7\u8f93\u51fa\u5230\u6307\u5b9a\u6587\u4ef6 2.0.5\u4ee5\u4e0a\u7248\u672c path path string \u53ef\u9009 \u670d\u52a1\u53d1\u73b0 \u63d0\u4f9b\u8005\u4e0a\u4e0b\u6587\u8def\u5f84\uff0c\u4e3a\u670d\u52a1path\u7684\u524d\u7f00 2.0.5\u4ee5\u4e0a\u7248\u672c transporter transporter string \u53ef\u9009 dubbo\u534f\u8bae\u7f3a\u7701\u4e3anetty \u6027\u80fd\u8c03\u4f18 \u534f\u8bae\u7684\u670d\u52a1\u7aef\u548c\u5ba2\u6237\u7aef\u5b9e\u73b0\u7c7b\u578b\uff0c\u6bd4\u5982\uff1adubbo\u534f\u8bae\u7684mina,netty\u7b49\uff0c\u53ef\u4ee5\u5206\u62c6\u4e3aserver\u548cclient\u914d\u7f6e 2.0.5\u4ee5\u4e0a\u7248\u672c server server string \u53ef\u9009 dubbo\u534f\u8bae\u7f3a\u7701\u4e3anetty\uff0chttp\u534f\u8bae\u7f3a\u7701\u4e3aservlet \u6027\u80fd\u8c03\u4f18 \u534f\u8bae\u7684\u670d\u52a1\u5668\u7aef\u5b9e\u73b0\u7c7b\u578b\uff0c\u6bd4\u5982\uff1adubbo\u534f\u8bae\u7684mina,netty\u7b49\uff0chttp\u534f\u8bae\u7684jetty,servlet\u7b49 2.0.5\u4ee5\u4e0a\u7248\u672c client client string \u53ef\u9009 dubbo\u534f\u8bae\u7f3a\u7701\u4e3anetty \u6027\u80fd\u8c03\u4f18 \u534f\u8bae\u7684\u5ba2\u6237\u7aef\u5b9e\u73b0\u7c7b\u578b\uff0c\u6bd4\u5982\uff1adubbo\u534f\u8bae\u7684mina,netty\u7b49 2.0.5\u4ee5\u4e0a\u7248\u672c dispatcher dispatcher string \u53ef\u9009 dubbo\u534f\u8bae\u7f3a\u7701\u4e3aall \u6027\u80fd\u8c03\u4f18 \u534f\u8bae\u7684\u6d88\u606f\u6d3e\u53d1\u65b9\u5f0f\uff0c\u7528\u4e8e\u6307\u5b9a\u7ebf\u7a0b\u6a21\u578b\uff0c\u6bd4\u5982\uff1adubbo\u534f\u8bae\u7684all, direct, message, execution, connection\u7b49 2.1.0\u4ee5\u4e0a\u7248\u672c queues queues int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u7ebf\u7a0b\u6c60\u961f\u5217\u5927\u5c0f\uff0c\u5f53\u7ebf\u7a0b\u6c60\u6ee1\u65f6\uff0c\u6392\u961f\u7b49\u5f85\u6267\u884c\u7684\u961f\u5217\u5927\u5c0f\uff0c\u5efa\u8bae\u4e0d\u8981\u8bbe\u7f6e\uff0c\u5f53\u7ebf\u7a0b\u6c60\u6ee1\u65f6\u5e94\u7acb\u5373\u5931\u8d25\uff0c\u91cd\u8bd5\u5176\u5b83\u670d\u52a1\u63d0\u4f9b\u673a\u5668\uff0c\u800c\u4e0d\u662f\u6392\u961f\uff0c\u9664\u975e\u6709\u7279\u6b8a\u9700\u6c42\u3002 2.0.5\u4ee5\u4e0a\u7248\u672c charset charset string \u53ef\u9009 UTF-8 \u6027\u80fd\u8c03\u4f18 \u5e8f\u5217\u5316\u7f16\u7801 2.0.5\u4ee5\u4e0a\u7248\u672c buffer buffer int \u53ef\u9009 8192 \u6027\u80fd\u8c03\u4f18 \u7f51\u7edc\u8bfb\u5199\u7f13\u51b2\u533a\u5927\u5c0f 2.0.5\u4ee5\u4e0a\u7248\u672c heartbeat heartbeat int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u5fc3\u8df3\u95f4\u9694\uff0c\u5bf9\u4e8e\u957f\u8fde\u63a5\uff0c\u5f53\u7269\u7406\u5c42\u65ad\u5f00\u65f6\uff0c\u6bd4\u5982\u62d4\u7f51\u7ebf\uff0cTCP\u7684FIN\u6d88\u606f\u6765\u4e0d\u53ca\u53d1\u9001\uff0c\u5bf9\u65b9\u6536\u4e0d\u5230\u65ad\u5f00\u4e8b\u4ef6\uff0c\u6b64\u65f6\u9700\u8981\u5fc3\u8df3\u6765\u5e2e\u52a9\u68c0\u67e5\u8fde\u63a5\u662f\u5426\u5df2\u65ad\u5f00 2.0.10\u4ee5\u4e0a\u7248\u672c telnet telnet string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u6240\u652f\u6301\u7684telnet\u547d\u4ee4\uff0c\u591a\u4e2a\u547d\u4ee4\u7528\u9017\u53f7\u5206\u9694 2.0.5\u4ee5\u4e0a\u7248\u672c register register boolean \u53ef\u9009 true \u670d\u52a1\u6cbb\u7406 \u8be5\u534f\u8bae\u7684\u670d\u52a1\u662f\u5426\u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3 2.0.8\u4ee5\u4e0a\u7248\u672c contextpath contextpath String \u53ef\u9009 \u7f3a\u7701\u4e3a\u7a7a\u4e32 \u670d\u52a1\u6cbb\u7406 2.0.6\u4ee5\u4e0a\u7248\u672c","title":"dubbo:protocol"},{"location":"user/references/xml/dubbo-provider/","text":"dubbo:provider \u670d\u52a1\u63d0\u4f9b\u8005\u7f3a\u7701\u503c\u914d\u7f6e\u3002\u5bf9\u5e94\u7684\u914d\u7f6e\u7c7b\uff1a org.apache.dubbo.config.ProviderConfig \u3002\u540c\u65f6\u8be5\u6807\u7b7e\u4e3a dubbo:service \u548c dubbo:protocol \u6807\u7b7e\u7684\u7f3a\u7701\u503c\u8bbe\u7f6e\u3002 \u5c5e\u6027 \u5bf9\u5e94URL\u53c2\u6570 \u7c7b\u578b \u662f\u5426\u5fc5\u586b \u7f3a\u7701\u503c \u4f5c\u7528 \u63cf\u8ff0 \u517c\u5bb9\u6027 id string \u53ef\u9009 dubbo \u914d\u7f6e\u5173\u8054 \u534f\u8baeBeanId\uff0c\u53ef\u4ee5\u5728 dubbo:service proivder=\"\" \u4e2d\u5f15\u7528\u6b64ID 1.0.16\u4ee5\u4e0a\u7248\u672c protocol protocol string \u53ef\u9009 dubbo \u6027\u80fd\u8c03\u4f18 \u534f\u8bae\u540d\u79f0 1.0.16\u4ee5\u4e0a\u7248\u672c host host string \u53ef\u9009 \u81ea\u52a8\u67e5\u627e\u672c\u673aIP \u670d\u52a1\u53d1\u73b0 \u670d\u52a1\u4e3b\u673a\u540d\uff0c\u591a\u7f51\u5361\u9009\u62e9\u6216\u6307\u5b9aVIP\u53ca\u57df\u540d\u65f6\u4f7f\u7528\uff0c\u4e3a\u7a7a\u5219\u81ea\u52a8\u67e5\u627e\u672c\u673aIP\uff0c\u5efa\u8bae\u4e0d\u8981\u914d\u7f6e\uff0c\u8ba9Dubbo\u81ea\u52a8\u83b7\u53d6\u672c\u673aIP 1.0.16\u4ee5\u4e0a\u7248\u672c threads threads int \u53ef\u9009 200 \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u7ebf\u7a0b\u6c60\u5927\u5c0f(\u56fa\u5b9a\u5927\u5c0f) 1.0.16\u4ee5\u4e0a\u7248\u672c payload payload int \u53ef\u9009 8388608(=8M) \u6027\u80fd\u8c03\u4f18 \u8bf7\u6c42\u53ca\u54cd\u5e94\u6570\u636e\u5305\u5927\u5c0f\u9650\u5236\uff0c\u5355\u4f4d\uff1a\u5b57\u8282 2.0.0\u4ee5\u4e0a\u7248\u672c path path string \u53ef\u9009 \u670d\u52a1\u53d1\u73b0 \u63d0\u4f9b\u8005\u4e0a\u4e0b\u6587\u8def\u5f84\uff0c\u4e3a\u670d\u52a1path\u7684\u524d\u7f00 2.0.0\u4ee5\u4e0a\u7248\u672c server server string \u53ef\u9009 dubbo\u534f\u8bae\u7f3a\u7701\u4e3anetty\uff0chttp\u534f\u8bae\u7f3a\u7701\u4e3aservlet \u6027\u80fd\u8c03\u4f18 \u534f\u8bae\u7684\u670d\u52a1\u5668\u7aef\u5b9e\u73b0\u7c7b\u578b\uff0c\u6bd4\u5982\uff1adubbo\u534f\u8bae\u7684mina,netty\u7b49\uff0chttp\u534f\u8bae\u7684jetty,servlet\u7b49 2.0.0\u4ee5\u4e0a\u7248\u672c client client string \u53ef\u9009 dubbo\u534f\u8bae\u7f3a\u7701\u4e3anetty \u6027\u80fd\u8c03\u4f18 \u534f\u8bae\u7684\u5ba2\u6237\u7aef\u5b9e\u73b0\u7c7b\u578b\uff0c\u6bd4\u5982\uff1adubbo\u534f\u8bae\u7684mina,netty\u7b49 2.0.0\u4ee5\u4e0a\u7248\u672c codec codec string \u53ef\u9009 dubbo \u6027\u80fd\u8c03\u4f18 \u534f\u8bae\u7f16\u7801\u65b9\u5f0f 2.0.0\u4ee5\u4e0a\u7248\u672c serialization serialization string \u53ef\u9009 dubbo\u534f\u8bae\u7f3a\u7701\u4e3ahessian2\uff0crmi\u534f\u8bae\u7f3a\u7701\u4e3ajava\uff0chttp\u534f\u8bae\u7f3a\u7701\u4e3ajson \u6027\u80fd\u8c03\u4f18 \u534f\u8bae\u5e8f\u5217\u5316\u65b9\u5f0f\uff0c\u5f53\u534f\u8bae\u652f\u6301\u591a\u79cd\u5e8f\u5217\u5316\u65b9\u5f0f\u65f6\u4f7f\u7528\uff0c\u6bd4\u5982\uff1adubbo\u534f\u8bae\u7684dubbo,hessian2,java,compactedjava\uff0c\u4ee5\u53cahttp\u534f\u8bae\u7684json,xml\u7b49 2.0.5\u4ee5\u4e0a\u7248\u672c default boolean \u53ef\u9009 false \u914d\u7f6e\u5173\u8054 \u662f\u5426\u4e3a\u7f3a\u7701\u534f\u8bae\uff0c\u7528\u4e8e\u591a\u534f\u8bae 1.0.16\u4ee5\u4e0a\u7248\u672c filter service.filter string \u53ef\u9009 \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u63d0\u4f9b\u65b9\u8fdc\u7a0b\u8c03\u7528\u8fc7\u7a0b\u62e6\u622a\u5668\u540d\u79f0\uff0c\u591a\u4e2a\u540d\u79f0\u7528\u9017\u53f7\u5206\u9694 2.0.5\u4ee5\u4e0a\u7248\u672c listener exporter.listener string \u53ef\u9009 \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u63d0\u4f9b\u65b9\u5bfc\u51fa\u670d\u52a1\u76d1\u542c\u5668\u540d\u79f0\uff0c\u591a\u4e2a\u540d\u79f0\u7528\u9017\u53f7\u5206\u9694 2.0.5\u4ee5\u4e0a\u7248\u672c threadpool threadpool string \u53ef\u9009 fixed \u6027\u80fd\u8c03\u4f18 \u7ebf\u7a0b\u6c60\u7c7b\u578b\uff0c\u53ef\u9009\uff1afixed/cached/limit(2.5.3\u4ee5\u4e0a)/eager(2.6.x\u4ee5\u4e0a) 2.0.5\u4ee5\u4e0a\u7248\u672c accepts accepts int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u63d0\u4f9b\u8005\u6700\u5927\u53ef\u63a5\u53d7\u8fde\u63a5\u6570 2.0.5\u4ee5\u4e0a\u7248\u672c version version string \u53ef\u9009 0.0.0 \u670d\u52a1\u53d1\u73b0 \u670d\u52a1\u7248\u672c\uff0c\u5efa\u8bae\u4f7f\u7528\u4e24\u4f4d\u6570\u5b57\u7248\u672c\uff0c\u5982\uff1a1.0\uff0c\u901a\u5e38\u5728\u63a5\u53e3\u4e0d\u517c\u5bb9\u65f6\u7248\u672c\u53f7\u624d\u9700\u8981\u5347\u7ea7 2.0.5\u4ee5\u4e0a\u7248\u672c group group string \u53ef\u9009 \u670d\u52a1\u53d1\u73b0 \u670d\u52a1\u5206\u7ec4\uff0c\u5f53\u4e00\u4e2a\u63a5\u53e3\u6709\u591a\u4e2a\u5b9e\u73b0\uff0c\u53ef\u4ee5\u7528\u5206\u7ec4\u533a\u5206 2.0.5\u4ee5\u4e0a\u7248\u672c delay delay int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u5ef6\u8fdf\u6ce8\u518c\u670d\u52a1\u65f6\u95f4(\u6beb\u79d2) \uff0c\u8bbe\u4e3a-1\u65f6\uff0c\u8868\u793a\u5ef6\u8fdf\u5230Spring\u5bb9\u5668\u521d\u59cb\u5316\u5b8c\u6210\u65f6\u66b4\u9732\u670d\u52a1 2.0.5\u4ee5\u4e0a\u7248\u672c timeout default.timeout int \u53ef\u9009 1000 \u6027\u80fd\u8c03\u4f18 \u8fdc\u7a0b\u670d\u52a1\u8c03\u7528\u8d85\u65f6\u65f6\u95f4(\u6beb\u79d2) 2.0.5\u4ee5\u4e0a\u7248\u672c retries default.retries int \u53ef\u9009 2 \u6027\u80fd\u8c03\u4f18 \u8fdc\u7a0b\u670d\u52a1\u8c03\u7528\u91cd\u8bd5\u6b21\u6570\uff0c\u4e0d\u5305\u62ec\u7b2c\u4e00\u6b21\u8c03\u7528\uff0c\u4e0d\u9700\u8981\u91cd\u8bd5\u8bf7\u8bbe\u4e3a0 2.0.5\u4ee5\u4e0a\u7248\u672c connections default.connections int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u5bf9\u6bcf\u4e2a\u63d0\u4f9b\u8005\u7684\u6700\u5927\u8fde\u63a5\u6570\uff0crmi\u3001http\u3001hessian\u7b49\u77ed\u8fde\u63a5\u534f\u8bae\u8868\u793a\u9650\u5236\u8fde\u63a5\u6570\uff0cdubbo\u7b49\u957f\u8fde\u63a5\u534f\u8868\u793a\u5efa\u7acb\u7684\u957f\u8fde\u63a5\u4e2a\u6570 2.0.5\u4ee5\u4e0a\u7248\u672c loadbalance default.loadbalance string \u53ef\u9009 random \u6027\u80fd\u8c03\u4f18 \u8d1f\u8f7d\u5747\u8861\u7b56\u7565\uff0c\u53ef\u9009\u503c\uff1arandom,roundrobin,leastactive\uff0c\u5206\u522b\u8868\u793a\uff1a\u968f\u673a\uff0c\u8f6e\u8be2\uff0c\u6700\u5c11\u6d3b\u8dc3\u8c03\u7528 2.0.5\u4ee5\u4e0a\u7248\u672c async default.async boolean \u53ef\u9009 false \u6027\u80fd\u8c03\u4f18 \u662f\u5426\u7f3a\u7701\u5f02\u6b65\u6267\u884c\uff0c\u4e0d\u53ef\u9760\u5f02\u6b65\uff0c\u53ea\u662f\u5ffd\u7565\u8fd4\u56de\u503c\uff0c\u4e0d\u963b\u585e\u6267\u884c\u7ebf\u7a0b 2.0.5\u4ee5\u4e0a\u7248\u672c stub stub boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u8bbe\u4e3atrue\uff0c\u8868\u793a\u4f7f\u7528\u7f3a\u7701\u4ee3\u7406\u7c7b\u540d\uff0c\u5373\uff1a\u63a5\u53e3\u540d + Local\u540e\u7f00\u3002 2.0.5\u4ee5\u4e0a\u7248\u672c mock mock boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u8bbe\u4e3atrue\uff0c\u8868\u793a\u4f7f\u7528\u7f3a\u7701Mock\u7c7b\u540d\uff0c\u5373\uff1a\u63a5\u53e3\u540d + Mock\u540e\u7f00\u3002 2.0.5\u4ee5\u4e0a\u7248\u672c token token boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u4ee4\u724c\u9a8c\u8bc1\uff0c\u4e3a\u7a7a\u8868\u793a\u4e0d\u5f00\u542f\uff0c\u5982\u679c\u4e3atrue\uff0c\u8868\u793a\u968f\u673a\u751f\u6210\u52a8\u6001\u4ee4\u724c 2.0.5\u4ee5\u4e0a\u7248\u672c registry registry string \u53ef\u9009 \u7f3a\u7701\u5411\u6240\u6709registry\u6ce8\u518c \u914d\u7f6e\u5173\u8054 \u5411\u6307\u5b9a\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\uff0c\u5728\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u65f6\u4f7f\u7528\uff0c\u503c\u4e3a dubbo:registry \u7684id\u5c5e\u6027\uff0c\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3ID\u7528\u9017\u53f7\u5206\u9694\uff0c\u5982\u679c\u4e0d\u60f3\u5c06\u8be5\u670d\u52a1\u6ce8\u518c\u5230\u4efb\u4f55registry\uff0c\u53ef\u5c06\u503c\u8bbe\u4e3aN/A 2.0.5\u4ee5\u4e0a\u7248\u672c dynamic dynamic boolean \u53ef\u9009 true \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u662f\u5426\u52a8\u6001\u6ce8\u518c\uff0c\u5982\u679c\u8bbe\u4e3afalse\uff0c\u6ce8\u518c\u540e\u5c06\u663e\u793a\u540edisable\u72b6\u6001\uff0c\u9700\u4eba\u5de5\u542f\u7528\uff0c\u5e76\u4e14\u670d\u52a1\u63d0\u4f9b\u8005\u505c\u6b62\u65f6\uff0c\u4e5f\u4e0d\u4f1a\u81ea\u52a8\u53d6\u6d88\u518c\uff0c\u9700\u4eba\u5de5\u7981\u7528\u3002 2.0.5\u4ee5\u4e0a\u7248\u672c accesslog accesslog string/boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u8bbe\u4e3atrue\uff0c\u5c06\u5411logger\u4e2d\u8f93\u51fa\u8bbf\u95ee\u65e5\u5fd7\uff0c\u4e5f\u53ef\u586b\u5199\u8bbf\u95ee\u65e5\u5fd7\u6587\u4ef6\u8def\u5f84\uff0c\u76f4\u63a5\u628a\u8bbf\u95ee\u65e5\u5fd7\u8f93\u51fa\u5230\u6307\u5b9a\u6587\u4ef6 2.0.5\u4ee5\u4e0a\u7248\u672c owner owner string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u8d1f\u8d23\u4eba\uff0c\u7528\u4e8e\u670d\u52a1\u6cbb\u7406\uff0c\u8bf7\u586b\u5199\u8d1f\u8d23\u4eba\u516c\u53f8\u90ae\u7bb1\u524d\u7f00 2.0.5\u4ee5\u4e0a\u7248\u672c document document string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u6587\u6863URL 2.0.5\u4ee5\u4e0a\u7248\u672c weight weight int \u53ef\u9009 \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u6743\u91cd 2.0.5\u4ee5\u4e0a\u7248\u672c executes executes int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u63d0\u4f9b\u8005\u6bcf\u670d\u52a1\u6bcf\u65b9\u6cd5\u6700\u5927\u53ef\u5e76\u884c\u6267\u884c\u8bf7\u6c42\u6570 2.0.5\u4ee5\u4e0a\u7248\u672c actives default.actives int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u6bcf\u670d\u52a1\u6d88\u8d39\u8005\u6bcf\u670d\u52a1\u6bcf\u65b9\u6cd5\u6700\u5927\u5e76\u53d1\u8c03\u7528\u6570 2.0.5\u4ee5\u4e0a\u7248\u672c proxy proxy string \u53ef\u9009 javassist \u6027\u80fd\u8c03\u4f18 \u751f\u6210\u52a8\u6001\u4ee3\u7406\u65b9\u5f0f\uff0c\u53ef\u9009\uff1ajdk/javassist 2.0.5\u4ee5\u4e0a\u7248\u672c cluster default.cluster string \u53ef\u9009 failover \u6027\u80fd\u8c03\u4f18 \u96c6\u7fa4\u65b9\u5f0f\uff0c\u53ef\u9009\uff1afailover/failfast/failsafe/failback/forking 2.0.5\u4ee5\u4e0a\u7248\u672c deprecated deprecated boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u662f\u5426\u8fc7\u65f6\uff0c\u5982\u679c\u8bbe\u4e3atrue\uff0c\u6d88\u8d39\u65b9\u5f15\u7528\u65f6\u5c06\u6253\u5370\u670d\u52a1\u8fc7\u65f6\u8b66\u544aerror\u65e5\u5fd7 2.0.5\u4ee5\u4e0a\u7248\u672c queues queues int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u7ebf\u7a0b\u6c60\u961f\u5217\u5927\u5c0f\uff0c\u5f53\u7ebf\u7a0b\u6c60\u6ee1\u65f6\uff0c\u6392\u961f\u7b49\u5f85\u6267\u884c\u7684\u961f\u5217\u5927\u5c0f\uff0c\u5efa\u8bae\u4e0d\u8981\u8bbe\u7f6e\uff0c\u5f53\u7ebf\u7a0b\u6c60\u6ee1\u65f6\u5e94\u7acb\u5373\u5931\u8d25\uff0c\u91cd\u8bd5\u5176\u5b83\u670d\u52a1\u63d0\u4f9b\u673a\u5668\uff0c\u800c\u4e0d\u662f\u6392\u961f\uff0c\u9664\u975e\u6709\u7279\u6b8a\u9700\u6c42\u3002 2.0.5\u4ee5\u4e0a\u7248\u672c charset charset string \u53ef\u9009 UTF-8 \u6027\u80fd\u8c03\u4f18 \u5e8f\u5217\u5316\u7f16\u7801 2.0.5\u4ee5\u4e0a\u7248\u672c buffer buffer int \u53ef\u9009 8192 \u6027\u80fd\u8c03\u4f18 \u7f51\u7edc\u8bfb\u5199\u7f13\u51b2\u533a\u5927\u5c0f 2.0.5\u4ee5\u4e0a\u7248\u672c iothreads iothreads int \u53ef\u9009 CPU + 1 \u6027\u80fd\u8c03\u4f18 IO\u7ebf\u7a0b\u6c60\uff0c\u63a5\u6536\u7f51\u7edc\u8bfb\u5199\u4e2d\u65ad\uff0c\u4ee5\u53ca\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\uff0c\u4e0d\u5904\u7406\u4e1a\u52a1\uff0c\u4e1a\u52a1\u7ebf\u7a0b\u6c60\u53c2\u89c1threads\u914d\u7f6e\uff0c\u6b64\u7ebf\u7a0b\u6c60\u548cCPU\u76f8\u5173\uff0c\u4e0d\u5efa\u8bae\u914d\u7f6e\u3002 2.0.5\u4ee5\u4e0a\u7248\u672c telnet telnet string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u6240\u652f\u6301\u7684telnet\u547d\u4ee4\uff0c\u591a\u4e2a\u547d\u4ee4\u7528\u9017\u53f7\u5206\u9694 2.0.5\u4ee5\u4e0a\u7248\u672c dubbo:service contextpath contextpath String \u53ef\u9009 \u7f3a\u7701\u4e3a\u7a7a\u4e32 \u670d\u52a1\u6cbb\u7406 layer layer string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u63d0\u4f9b\u8005\u6240\u5728\u7684\u5206\u5c42\u3002\u5982\uff1abiz\u3001dao\u3001intl:web\u3001china:acton\u3002 2.0.7\u4ee5\u4e0a\u7248\u672c","title":"dubbo:provider"},{"location":"user/references/xml/dubbo-provider/#dubboprovider","text":"\u670d\u52a1\u63d0\u4f9b\u8005\u7f3a\u7701\u503c\u914d\u7f6e\u3002\u5bf9\u5e94\u7684\u914d\u7f6e\u7c7b\uff1a org.apache.dubbo.config.ProviderConfig \u3002\u540c\u65f6\u8be5\u6807\u7b7e\u4e3a dubbo:service \u548c dubbo:protocol \u6807\u7b7e\u7684\u7f3a\u7701\u503c\u8bbe\u7f6e\u3002 \u5c5e\u6027 \u5bf9\u5e94URL\u53c2\u6570 \u7c7b\u578b \u662f\u5426\u5fc5\u586b \u7f3a\u7701\u503c \u4f5c\u7528 \u63cf\u8ff0 \u517c\u5bb9\u6027 id string \u53ef\u9009 dubbo \u914d\u7f6e\u5173\u8054 \u534f\u8baeBeanId\uff0c\u53ef\u4ee5\u5728 dubbo:service proivder=\"\" \u4e2d\u5f15\u7528\u6b64ID 1.0.16\u4ee5\u4e0a\u7248\u672c protocol protocol string \u53ef\u9009 dubbo \u6027\u80fd\u8c03\u4f18 \u534f\u8bae\u540d\u79f0 1.0.16\u4ee5\u4e0a\u7248\u672c host host string \u53ef\u9009 \u81ea\u52a8\u67e5\u627e\u672c\u673aIP \u670d\u52a1\u53d1\u73b0 \u670d\u52a1\u4e3b\u673a\u540d\uff0c\u591a\u7f51\u5361\u9009\u62e9\u6216\u6307\u5b9aVIP\u53ca\u57df\u540d\u65f6\u4f7f\u7528\uff0c\u4e3a\u7a7a\u5219\u81ea\u52a8\u67e5\u627e\u672c\u673aIP\uff0c\u5efa\u8bae\u4e0d\u8981\u914d\u7f6e\uff0c\u8ba9Dubbo\u81ea\u52a8\u83b7\u53d6\u672c\u673aIP 1.0.16\u4ee5\u4e0a\u7248\u672c threads threads int \u53ef\u9009 200 \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u7ebf\u7a0b\u6c60\u5927\u5c0f(\u56fa\u5b9a\u5927\u5c0f) 1.0.16\u4ee5\u4e0a\u7248\u672c payload payload int \u53ef\u9009 8388608(=8M) \u6027\u80fd\u8c03\u4f18 \u8bf7\u6c42\u53ca\u54cd\u5e94\u6570\u636e\u5305\u5927\u5c0f\u9650\u5236\uff0c\u5355\u4f4d\uff1a\u5b57\u8282 2.0.0\u4ee5\u4e0a\u7248\u672c path path string \u53ef\u9009 \u670d\u52a1\u53d1\u73b0 \u63d0\u4f9b\u8005\u4e0a\u4e0b\u6587\u8def\u5f84\uff0c\u4e3a\u670d\u52a1path\u7684\u524d\u7f00 2.0.0\u4ee5\u4e0a\u7248\u672c server server string \u53ef\u9009 dubbo\u534f\u8bae\u7f3a\u7701\u4e3anetty\uff0chttp\u534f\u8bae\u7f3a\u7701\u4e3aservlet \u6027\u80fd\u8c03\u4f18 \u534f\u8bae\u7684\u670d\u52a1\u5668\u7aef\u5b9e\u73b0\u7c7b\u578b\uff0c\u6bd4\u5982\uff1adubbo\u534f\u8bae\u7684mina,netty\u7b49\uff0chttp\u534f\u8bae\u7684jetty,servlet\u7b49 2.0.0\u4ee5\u4e0a\u7248\u672c client client string \u53ef\u9009 dubbo\u534f\u8bae\u7f3a\u7701\u4e3anetty \u6027\u80fd\u8c03\u4f18 \u534f\u8bae\u7684\u5ba2\u6237\u7aef\u5b9e\u73b0\u7c7b\u578b\uff0c\u6bd4\u5982\uff1adubbo\u534f\u8bae\u7684mina,netty\u7b49 2.0.0\u4ee5\u4e0a\u7248\u672c codec codec string \u53ef\u9009 dubbo \u6027\u80fd\u8c03\u4f18 \u534f\u8bae\u7f16\u7801\u65b9\u5f0f 2.0.0\u4ee5\u4e0a\u7248\u672c serialization serialization string \u53ef\u9009 dubbo\u534f\u8bae\u7f3a\u7701\u4e3ahessian2\uff0crmi\u534f\u8bae\u7f3a\u7701\u4e3ajava\uff0chttp\u534f\u8bae\u7f3a\u7701\u4e3ajson \u6027\u80fd\u8c03\u4f18 \u534f\u8bae\u5e8f\u5217\u5316\u65b9\u5f0f\uff0c\u5f53\u534f\u8bae\u652f\u6301\u591a\u79cd\u5e8f\u5217\u5316\u65b9\u5f0f\u65f6\u4f7f\u7528\uff0c\u6bd4\u5982\uff1adubbo\u534f\u8bae\u7684dubbo,hessian2,java,compactedjava\uff0c\u4ee5\u53cahttp\u534f\u8bae\u7684json,xml\u7b49 2.0.5\u4ee5\u4e0a\u7248\u672c default boolean \u53ef\u9009 false \u914d\u7f6e\u5173\u8054 \u662f\u5426\u4e3a\u7f3a\u7701\u534f\u8bae\uff0c\u7528\u4e8e\u591a\u534f\u8bae 1.0.16\u4ee5\u4e0a\u7248\u672c filter service.filter string \u53ef\u9009 \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u63d0\u4f9b\u65b9\u8fdc\u7a0b\u8c03\u7528\u8fc7\u7a0b\u62e6\u622a\u5668\u540d\u79f0\uff0c\u591a\u4e2a\u540d\u79f0\u7528\u9017\u53f7\u5206\u9694 2.0.5\u4ee5\u4e0a\u7248\u672c listener exporter.listener string \u53ef\u9009 \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u63d0\u4f9b\u65b9\u5bfc\u51fa\u670d\u52a1\u76d1\u542c\u5668\u540d\u79f0\uff0c\u591a\u4e2a\u540d\u79f0\u7528\u9017\u53f7\u5206\u9694 2.0.5\u4ee5\u4e0a\u7248\u672c threadpool threadpool string \u53ef\u9009 fixed \u6027\u80fd\u8c03\u4f18 \u7ebf\u7a0b\u6c60\u7c7b\u578b\uff0c\u53ef\u9009\uff1afixed/cached/limit(2.5.3\u4ee5\u4e0a)/eager(2.6.x\u4ee5\u4e0a) 2.0.5\u4ee5\u4e0a\u7248\u672c accepts accepts int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u63d0\u4f9b\u8005\u6700\u5927\u53ef\u63a5\u53d7\u8fde\u63a5\u6570 2.0.5\u4ee5\u4e0a\u7248\u672c version version string \u53ef\u9009 0.0.0 \u670d\u52a1\u53d1\u73b0 \u670d\u52a1\u7248\u672c\uff0c\u5efa\u8bae\u4f7f\u7528\u4e24\u4f4d\u6570\u5b57\u7248\u672c\uff0c\u5982\uff1a1.0\uff0c\u901a\u5e38\u5728\u63a5\u53e3\u4e0d\u517c\u5bb9\u65f6\u7248\u672c\u53f7\u624d\u9700\u8981\u5347\u7ea7 2.0.5\u4ee5\u4e0a\u7248\u672c group group string \u53ef\u9009 \u670d\u52a1\u53d1\u73b0 \u670d\u52a1\u5206\u7ec4\uff0c\u5f53\u4e00\u4e2a\u63a5\u53e3\u6709\u591a\u4e2a\u5b9e\u73b0\uff0c\u53ef\u4ee5\u7528\u5206\u7ec4\u533a\u5206 2.0.5\u4ee5\u4e0a\u7248\u672c delay delay int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u5ef6\u8fdf\u6ce8\u518c\u670d\u52a1\u65f6\u95f4(\u6beb\u79d2) \uff0c\u8bbe\u4e3a-1\u65f6\uff0c\u8868\u793a\u5ef6\u8fdf\u5230Spring\u5bb9\u5668\u521d\u59cb\u5316\u5b8c\u6210\u65f6\u66b4\u9732\u670d\u52a1 2.0.5\u4ee5\u4e0a\u7248\u672c timeout default.timeout int \u53ef\u9009 1000 \u6027\u80fd\u8c03\u4f18 \u8fdc\u7a0b\u670d\u52a1\u8c03\u7528\u8d85\u65f6\u65f6\u95f4(\u6beb\u79d2) 2.0.5\u4ee5\u4e0a\u7248\u672c retries default.retries int \u53ef\u9009 2 \u6027\u80fd\u8c03\u4f18 \u8fdc\u7a0b\u670d\u52a1\u8c03\u7528\u91cd\u8bd5\u6b21\u6570\uff0c\u4e0d\u5305\u62ec\u7b2c\u4e00\u6b21\u8c03\u7528\uff0c\u4e0d\u9700\u8981\u91cd\u8bd5\u8bf7\u8bbe\u4e3a0 2.0.5\u4ee5\u4e0a\u7248\u672c connections default.connections int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u5bf9\u6bcf\u4e2a\u63d0\u4f9b\u8005\u7684\u6700\u5927\u8fde\u63a5\u6570\uff0crmi\u3001http\u3001hessian\u7b49\u77ed\u8fde\u63a5\u534f\u8bae\u8868\u793a\u9650\u5236\u8fde\u63a5\u6570\uff0cdubbo\u7b49\u957f\u8fde\u63a5\u534f\u8868\u793a\u5efa\u7acb\u7684\u957f\u8fde\u63a5\u4e2a\u6570 2.0.5\u4ee5\u4e0a\u7248\u672c loadbalance default.loadbalance string \u53ef\u9009 random \u6027\u80fd\u8c03\u4f18 \u8d1f\u8f7d\u5747\u8861\u7b56\u7565\uff0c\u53ef\u9009\u503c\uff1arandom,roundrobin,leastactive\uff0c\u5206\u522b\u8868\u793a\uff1a\u968f\u673a\uff0c\u8f6e\u8be2\uff0c\u6700\u5c11\u6d3b\u8dc3\u8c03\u7528 2.0.5\u4ee5\u4e0a\u7248\u672c async default.async boolean \u53ef\u9009 false \u6027\u80fd\u8c03\u4f18 \u662f\u5426\u7f3a\u7701\u5f02\u6b65\u6267\u884c\uff0c\u4e0d\u53ef\u9760\u5f02\u6b65\uff0c\u53ea\u662f\u5ffd\u7565\u8fd4\u56de\u503c\uff0c\u4e0d\u963b\u585e\u6267\u884c\u7ebf\u7a0b 2.0.5\u4ee5\u4e0a\u7248\u672c stub stub boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u8bbe\u4e3atrue\uff0c\u8868\u793a\u4f7f\u7528\u7f3a\u7701\u4ee3\u7406\u7c7b\u540d\uff0c\u5373\uff1a\u63a5\u53e3\u540d + Local\u540e\u7f00\u3002 2.0.5\u4ee5\u4e0a\u7248\u672c mock mock boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u8bbe\u4e3atrue\uff0c\u8868\u793a\u4f7f\u7528\u7f3a\u7701Mock\u7c7b\u540d\uff0c\u5373\uff1a\u63a5\u53e3\u540d + Mock\u540e\u7f00\u3002 2.0.5\u4ee5\u4e0a\u7248\u672c token token boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u4ee4\u724c\u9a8c\u8bc1\uff0c\u4e3a\u7a7a\u8868\u793a\u4e0d\u5f00\u542f\uff0c\u5982\u679c\u4e3atrue\uff0c\u8868\u793a\u968f\u673a\u751f\u6210\u52a8\u6001\u4ee4\u724c 2.0.5\u4ee5\u4e0a\u7248\u672c registry registry string \u53ef\u9009 \u7f3a\u7701\u5411\u6240\u6709registry\u6ce8\u518c \u914d\u7f6e\u5173\u8054 \u5411\u6307\u5b9a\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\uff0c\u5728\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u65f6\u4f7f\u7528\uff0c\u503c\u4e3a dubbo:registry \u7684id\u5c5e\u6027\uff0c\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3ID\u7528\u9017\u53f7\u5206\u9694\uff0c\u5982\u679c\u4e0d\u60f3\u5c06\u8be5\u670d\u52a1\u6ce8\u518c\u5230\u4efb\u4f55registry\uff0c\u53ef\u5c06\u503c\u8bbe\u4e3aN/A 2.0.5\u4ee5\u4e0a\u7248\u672c dynamic dynamic boolean \u53ef\u9009 true \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u662f\u5426\u52a8\u6001\u6ce8\u518c\uff0c\u5982\u679c\u8bbe\u4e3afalse\uff0c\u6ce8\u518c\u540e\u5c06\u663e\u793a\u540edisable\u72b6\u6001\uff0c\u9700\u4eba\u5de5\u542f\u7528\uff0c\u5e76\u4e14\u670d\u52a1\u63d0\u4f9b\u8005\u505c\u6b62\u65f6\uff0c\u4e5f\u4e0d\u4f1a\u81ea\u52a8\u53d6\u6d88\u518c\uff0c\u9700\u4eba\u5de5\u7981\u7528\u3002 2.0.5\u4ee5\u4e0a\u7248\u672c accesslog accesslog string/boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u8bbe\u4e3atrue\uff0c\u5c06\u5411logger\u4e2d\u8f93\u51fa\u8bbf\u95ee\u65e5\u5fd7\uff0c\u4e5f\u53ef\u586b\u5199\u8bbf\u95ee\u65e5\u5fd7\u6587\u4ef6\u8def\u5f84\uff0c\u76f4\u63a5\u628a\u8bbf\u95ee\u65e5\u5fd7\u8f93\u51fa\u5230\u6307\u5b9a\u6587\u4ef6 2.0.5\u4ee5\u4e0a\u7248\u672c owner owner string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u8d1f\u8d23\u4eba\uff0c\u7528\u4e8e\u670d\u52a1\u6cbb\u7406\uff0c\u8bf7\u586b\u5199\u8d1f\u8d23\u4eba\u516c\u53f8\u90ae\u7bb1\u524d\u7f00 2.0.5\u4ee5\u4e0a\u7248\u672c document document string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u6587\u6863URL 2.0.5\u4ee5\u4e0a\u7248\u672c weight weight int \u53ef\u9009 \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u6743\u91cd 2.0.5\u4ee5\u4e0a\u7248\u672c executes executes int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u63d0\u4f9b\u8005\u6bcf\u670d\u52a1\u6bcf\u65b9\u6cd5\u6700\u5927\u53ef\u5e76\u884c\u6267\u884c\u8bf7\u6c42\u6570 2.0.5\u4ee5\u4e0a\u7248\u672c actives default.actives int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u6bcf\u670d\u52a1\u6d88\u8d39\u8005\u6bcf\u670d\u52a1\u6bcf\u65b9\u6cd5\u6700\u5927\u5e76\u53d1\u8c03\u7528\u6570 2.0.5\u4ee5\u4e0a\u7248\u672c proxy proxy string \u53ef\u9009 javassist \u6027\u80fd\u8c03\u4f18 \u751f\u6210\u52a8\u6001\u4ee3\u7406\u65b9\u5f0f\uff0c\u53ef\u9009\uff1ajdk/javassist 2.0.5\u4ee5\u4e0a\u7248\u672c cluster default.cluster string \u53ef\u9009 failover \u6027\u80fd\u8c03\u4f18 \u96c6\u7fa4\u65b9\u5f0f\uff0c\u53ef\u9009\uff1afailover/failfast/failsafe/failback/forking 2.0.5\u4ee5\u4e0a\u7248\u672c deprecated deprecated boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u662f\u5426\u8fc7\u65f6\uff0c\u5982\u679c\u8bbe\u4e3atrue\uff0c\u6d88\u8d39\u65b9\u5f15\u7528\u65f6\u5c06\u6253\u5370\u670d\u52a1\u8fc7\u65f6\u8b66\u544aerror\u65e5\u5fd7 2.0.5\u4ee5\u4e0a\u7248\u672c queues queues int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u7ebf\u7a0b\u6c60\u961f\u5217\u5927\u5c0f\uff0c\u5f53\u7ebf\u7a0b\u6c60\u6ee1\u65f6\uff0c\u6392\u961f\u7b49\u5f85\u6267\u884c\u7684\u961f\u5217\u5927\u5c0f\uff0c\u5efa\u8bae\u4e0d\u8981\u8bbe\u7f6e\uff0c\u5f53\u7ebf\u7a0b\u6c60\u6ee1\u65f6\u5e94\u7acb\u5373\u5931\u8d25\uff0c\u91cd\u8bd5\u5176\u5b83\u670d\u52a1\u63d0\u4f9b\u673a\u5668\uff0c\u800c\u4e0d\u662f\u6392\u961f\uff0c\u9664\u975e\u6709\u7279\u6b8a\u9700\u6c42\u3002 2.0.5\u4ee5\u4e0a\u7248\u672c charset charset string \u53ef\u9009 UTF-8 \u6027\u80fd\u8c03\u4f18 \u5e8f\u5217\u5316\u7f16\u7801 2.0.5\u4ee5\u4e0a\u7248\u672c buffer buffer int \u53ef\u9009 8192 \u6027\u80fd\u8c03\u4f18 \u7f51\u7edc\u8bfb\u5199\u7f13\u51b2\u533a\u5927\u5c0f 2.0.5\u4ee5\u4e0a\u7248\u672c iothreads iothreads int \u53ef\u9009 CPU + 1 \u6027\u80fd\u8c03\u4f18 IO\u7ebf\u7a0b\u6c60\uff0c\u63a5\u6536\u7f51\u7edc\u8bfb\u5199\u4e2d\u65ad\uff0c\u4ee5\u53ca\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\uff0c\u4e0d\u5904\u7406\u4e1a\u52a1\uff0c\u4e1a\u52a1\u7ebf\u7a0b\u6c60\u53c2\u89c1threads\u914d\u7f6e\uff0c\u6b64\u7ebf\u7a0b\u6c60\u548cCPU\u76f8\u5173\uff0c\u4e0d\u5efa\u8bae\u914d\u7f6e\u3002 2.0.5\u4ee5\u4e0a\u7248\u672c telnet telnet string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u6240\u652f\u6301\u7684telnet\u547d\u4ee4\uff0c\u591a\u4e2a\u547d\u4ee4\u7528\u9017\u53f7\u5206\u9694 2.0.5\u4ee5\u4e0a\u7248\u672c dubbo:service contextpath contextpath String \u53ef\u9009 \u7f3a\u7701\u4e3a\u7a7a\u4e32 \u670d\u52a1\u6cbb\u7406 layer layer string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u63d0\u4f9b\u8005\u6240\u5728\u7684\u5206\u5c42\u3002\u5982\uff1abiz\u3001dao\u3001intl:web\u3001china:acton\u3002 2.0.7\u4ee5\u4e0a\u7248\u672c","title":"dubbo:provider"},{"location":"user/references/xml/dubbo-reference/","text":"dubbo:reference \u670d\u52a1\u6d88\u8d39\u8005\u5f15\u7528\u670d\u52a1\u914d\u7f6e\u3002\u5bf9\u5e94\u7684\u914d\u7f6e\u7c7b\uff1a org.apache.dubbo.config.ReferenceConfig \u5c5e\u6027 \u5bf9\u5e94URL\u53c2\u6570 \u7c7b\u578b \u662f\u5426\u5fc5\u586b \u7f3a\u7701\u503c \u4f5c\u7528 \u63cf\u8ff0 \u517c\u5bb9\u6027 id string \u5fc5\u586b \u914d\u7f6e\u5173\u8054 \u670d\u52a1\u5f15\u7528BeanId 1.0.0\u4ee5\u4e0a\u7248\u672c interface class \u5fc5\u586b \u670d\u52a1\u53d1\u73b0 \u670d\u52a1\u63a5\u53e3\u540d 1.0.0\u4ee5\u4e0a\u7248\u672c version version string \u53ef\u9009 \u670d\u52a1\u53d1\u73b0 \u670d\u52a1\u7248\u672c\uff0c\u4e0e\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u7248\u672c\u4e00\u81f4 1.0.0\u4ee5\u4e0a\u7248\u672c group group string \u53ef\u9009 \u670d\u52a1\u53d1\u73b0 \u670d\u52a1\u5206\u7ec4\uff0c\u5f53\u4e00\u4e2a\u63a5\u53e3\u6709\u591a\u4e2a\u5b9e\u73b0\uff0c\u53ef\u4ee5\u7528\u5206\u7ec4\u533a\u5206\uff0c\u5fc5\u9700\u548c\u670d\u52a1\u63d0\u4f9b\u65b9\u4e00\u81f4 1.0.7\u4ee5\u4e0a\u7248\u672c timeout timeout long \u53ef\u9009 \u7f3a\u7701\u4f7f\u7528 dubbo:consumer \u7684timeout \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u65b9\u6cd5\u8c03\u7528\u8d85\u65f6\u65f6\u95f4(\u6beb\u79d2) 1.0.5\u4ee5\u4e0a\u7248\u672c retries retries int \u53ef\u9009 \u7f3a\u7701\u4f7f\u7528 dubbo:consumer \u7684retries \u6027\u80fd\u8c03\u4f18 \u8fdc\u7a0b\u670d\u52a1\u8c03\u7528\u91cd\u8bd5\u6b21\u6570\uff0c\u4e0d\u5305\u62ec\u7b2c\u4e00\u6b21\u8c03\u7528\uff0c\u4e0d\u9700\u8981\u91cd\u8bd5\u8bf7\u8bbe\u4e3a0 2.0.0\u4ee5\u4e0a\u7248\u672c connections connections int \u53ef\u9009 \u7f3a\u7701\u4f7f\u7528 dubbo:consumer \u7684connections \u6027\u80fd\u8c03\u4f18 \u5bf9\u6bcf\u4e2a\u63d0\u4f9b\u8005\u7684\u6700\u5927\u8fde\u63a5\u6570\uff0crmi\u3001http\u3001hessian\u7b49\u77ed\u8fde\u63a5\u534f\u8bae\u8868\u793a\u9650\u5236\u8fde\u63a5\u6570\uff0cdubbo\u7b49\u957f\u8fde\u63a5\u534f\u8868\u793a\u5efa\u7acb\u7684\u957f\u8fde\u63a5\u4e2a\u6570 2.0.0\u4ee5\u4e0a\u7248\u672c loadbalance loadbalance string \u53ef\u9009 \u7f3a\u7701\u4f7f\u7528 dubbo:consumer \u7684loadbalance \u6027\u80fd\u8c03\u4f18 \u8d1f\u8f7d\u5747\u8861\u7b56\u7565\uff0c\u53ef\u9009\u503c\uff1arandom,roundrobin,leastactive\uff0c\u5206\u522b\u8868\u793a\uff1a\u968f\u673a\uff0c\u8f6e\u8be2\uff0c\u6700\u5c11\u6d3b\u8dc3\u8c03\u7528 2.0.0\u4ee5\u4e0a\u7248\u672c async async boolean \u53ef\u9009 \u7f3a\u7701\u4f7f\u7528 dubbo:consumer \u7684async \u6027\u80fd\u8c03\u4f18 \u662f\u5426\u5f02\u6b65\u6267\u884c\uff0c\u4e0d\u53ef\u9760\u5f02\u6b65\uff0c\u53ea\u662f\u5ffd\u7565\u8fd4\u56de\u503c\uff0c\u4e0d\u963b\u585e\u6267\u884c\u7ebf\u7a0b 2.0.0\u4ee5\u4e0a\u7248\u672c generic generic boolean \u53ef\u9009 \u7f3a\u7701\u4f7f\u7528 dubbo:consumer \u7684generic \u670d\u52a1\u6cbb\u7406 \u662f\u5426\u7f3a\u7701\u6cdb\u5316\u63a5\u53e3\uff0c\u5982\u679c\u4e3a\u6cdb\u5316\u63a5\u53e3\uff0c\u5c06\u8fd4\u56deGenericService 2.0.0\u4ee5\u4e0a\u7248\u672c check check boolean \u53ef\u9009 \u7f3a\u7701\u4f7f\u7528 dubbo:consumer \u7684check \u670d\u52a1\u6cbb\u7406 \u542f\u52a8\u65f6\u68c0\u67e5\u63d0\u4f9b\u8005\u662f\u5426\u5b58\u5728\uff0ctrue\u62a5\u9519\uff0cfalse\u5ffd\u7565 2.0.0\u4ee5\u4e0a\u7248\u672c url url string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u70b9\u5bf9\u70b9\u76f4\u8fde\u670d\u52a1\u63d0\u4f9b\u8005\u5730\u5740\uff0c\u5c06\u7ed5\u8fc7\u6ce8\u518c\u4e2d\u5fc3 1.0.6\u4ee5\u4e0a\u7248\u672c stub stub class/boolean \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u63a5\u53e3\u5ba2\u6237\u7aef\u672c\u5730\u4ee3\u7406\u7c7b\u540d\uff0c\u7528\u4e8e\u5728\u5ba2\u6237\u7aef\u6267\u884c\u672c\u5730\u903b\u8f91\uff0c\u5982\u672c\u5730\u7f13\u5b58\u7b49\uff0c\u8be5\u672c\u5730\u4ee3\u7406\u7c7b\u7684\u6784\u9020\u51fd\u6570\u5fc5\u987b\u5141\u8bb8\u4f20\u5165\u8fdc\u7a0b\u4ee3\u7406\u5bf9\u8c61\uff0c\u6784\u9020\u51fd\u6570\u5982\uff1apublic XxxServiceLocal(XxxService xxxService) 2.0.0\u4ee5\u4e0a\u7248\u672c mock mock class/boolean \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u63a5\u53e3\u8c03\u7528\u5931\u8d25Mock\u5b9e\u73b0\u7c7b\u540d\uff0c\u8be5Mock\u7c7b\u5fc5\u987b\u6709\u4e00\u4e2a\u65e0\u53c2\u6784\u9020\u51fd\u6570\uff0c\u4e0eLocal\u7684\u533a\u522b\u5728\u4e8e\uff0cLocal\u603b\u662f\u88ab\u6267\u884c\uff0c\u800cMock\u53ea\u5728\u51fa\u73b0\u975e\u4e1a\u52a1\u5f02\u5e38(\u6bd4\u5982\u8d85\u65f6\uff0c\u7f51\u7edc\u5f02\u5e38\u7b49)\u65f6\u6267\u884c\uff0cLocal\u5728\u8fdc\u7a0b\u8c03\u7528\u4e4b\u524d\u6267\u884c\uff0cMock\u5728\u8fdc\u7a0b\u8c03\u7528\u540e\u6267\u884c\u3002 Dubbo1.0.13\u53ca\u5176\u4ee5\u4e0a\u7248\u672c\u652f\u6301 cache cache string/boolean \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u4ee5\u8c03\u7528\u53c2\u6570\u4e3akey\uff0c\u7f13\u5b58\u8fd4\u56de\u7ed3\u679c\uff0c\u53ef\u9009\uff1alru, threadlocal, jcache\u7b49 Dubbo2.1.0\u53ca\u5176\u4ee5\u4e0a\u7248\u672c\u652f\u6301 validation validation boolean \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u662f\u5426\u542f\u7528JSR303\u6807\u51c6\u6ce8\u89e3\u9a8c\u8bc1\uff0c\u5982\u679c\u542f\u7528\uff0c\u5c06\u5bf9\u65b9\u6cd5\u53c2\u6570\u4e0a\u7684\u6ce8\u89e3\u8fdb\u884c\u6821\u9a8c Dubbo2.1.0\u53ca\u5176\u4ee5\u4e0a\u7248\u672c\u652f\u6301 proxy proxy boolean \u53ef\u9009 javassist \u6027\u80fd\u8c03\u4f18 \u9009\u62e9\u52a8\u6001\u4ee3\u7406\u5b9e\u73b0\u7b56\u7565\uff0c\u53ef\u9009\uff1ajavassist, jdk 2.0.2\u4ee5\u4e0a\u7248\u672c client client string \u53ef\u9009 \u6027\u80fd\u8c03\u4f18 \u5ba2\u6237\u7aef\u4f20\u8f93\u7c7b\u578b\u8bbe\u7f6e\uff0c\u5982Dubbo\u534f\u8bae\u7684netty\u6216mina\u3002 Dubbo2.0.0\u4ee5\u4e0a\u7248\u672c\u652f\u6301 registry string \u53ef\u9009 \u7f3a\u7701\u5c06\u4ece\u6240\u6709\u6ce8\u518c\u4e2d\u5fc3\u83b7\u670d\u52a1\u5217\u8868\u540e\u5408\u5e76\u7ed3\u679c \u914d\u7f6e\u5173\u8054 \u4ece\u6307\u5b9a\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u83b7\u53d6\u670d\u52a1\u5217\u8868\uff0c\u5728\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u65f6\u4f7f\u7528\uff0c\u503c\u4e3a dubbo:registry \u7684id\u5c5e\u6027\uff0c\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3ID\u7528\u9017\u53f7\u5206\u9694 2.0.0\u4ee5\u4e0a\u7248\u672c owner owner string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u8c03\u7528\u670d\u52a1\u8d1f\u8d23\u4eba\uff0c\u7528\u4e8e\u670d\u52a1\u6cbb\u7406\uff0c\u8bf7\u586b\u5199\u8d1f\u8d23\u4eba\u516c\u53f8\u90ae\u7bb1\u524d\u7f00 2.0.5\u4ee5\u4e0a\u7248\u672c actives actives int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u6bcf\u670d\u52a1\u6d88\u8d39\u8005\u6bcf\u670d\u52a1\u6bcf\u65b9\u6cd5\u6700\u5927\u5e76\u53d1\u8c03\u7528\u6570 2.0.5\u4ee5\u4e0a\u7248\u672c cluster cluster string \u53ef\u9009 failover \u6027\u80fd\u8c03\u4f18 \u96c6\u7fa4\u65b9\u5f0f\uff0c\u53ef\u9009\uff1afailover/failfast/failsafe/failback/forking 2.0.5\u4ee5\u4e0a\u7248\u672c filter reference.filter string \u53ef\u9009 default \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u6d88\u8d39\u65b9\u8fdc\u7a0b\u8c03\u7528\u8fc7\u7a0b\u62e6\u622a\u5668\u540d\u79f0\uff0c\u591a\u4e2a\u540d\u79f0\u7528\u9017\u53f7\u5206\u9694 2.0.5\u4ee5\u4e0a\u7248\u672c listener invoker.listener string \u53ef\u9009 default \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u6d88\u8d39\u65b9\u5f15\u7528\u670d\u52a1\u76d1\u542c\u5668\u540d\u79f0\uff0c\u591a\u4e2a\u540d\u79f0\u7528\u9017\u53f7\u5206\u9694 2.0.5\u4ee5\u4e0a\u7248\u672c layer layer string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u8c03\u7528\u8005\u6240\u5728\u7684\u5206\u5c42\u3002\u5982\uff1abiz\u3001dao\u3001intl:web\u3001china:acton\u3002 2.0.7\u4ee5\u4e0a\u7248\u672c init init boolean \u53ef\u9009 false \u6027\u80fd\u8c03\u4f18 \u662f\u5426\u5728afterPropertiesSet()\u65f6\u9965\u997f\u521d\u59cb\u5316\u5f15\u7528\uff0c\u5426\u5219\u7b49\u5230\u6709\u4eba\u6ce8\u5165\u6216\u5f15\u7528\u8be5\u5b9e\u4f8b\u65f6\u518d\u521d\u59cb\u5316\u3002 2.0.10\u4ee5\u4e0a\u7248\u672c protocol protocol string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u53ea\u8c03\u7528\u6307\u5b9a\u534f\u8bae\u7684\u670d\u52a1\u63d0\u4f9b\u65b9\uff0c\u5176\u5b83\u534f\u8bae\u5ffd\u7565\u3002 2.2.0\u4ee5\u4e0a\u7248\u672c","title":"dubbo:reference"},{"location":"user/references/xml/dubbo-reference/#dubboreference","text":"\u670d\u52a1\u6d88\u8d39\u8005\u5f15\u7528\u670d\u52a1\u914d\u7f6e\u3002\u5bf9\u5e94\u7684\u914d\u7f6e\u7c7b\uff1a org.apache.dubbo.config.ReferenceConfig \u5c5e\u6027 \u5bf9\u5e94URL\u53c2\u6570 \u7c7b\u578b \u662f\u5426\u5fc5\u586b \u7f3a\u7701\u503c \u4f5c\u7528 \u63cf\u8ff0 \u517c\u5bb9\u6027 id string \u5fc5\u586b \u914d\u7f6e\u5173\u8054 \u670d\u52a1\u5f15\u7528BeanId 1.0.0\u4ee5\u4e0a\u7248\u672c interface class \u5fc5\u586b \u670d\u52a1\u53d1\u73b0 \u670d\u52a1\u63a5\u53e3\u540d 1.0.0\u4ee5\u4e0a\u7248\u672c version version string \u53ef\u9009 \u670d\u52a1\u53d1\u73b0 \u670d\u52a1\u7248\u672c\uff0c\u4e0e\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u7248\u672c\u4e00\u81f4 1.0.0\u4ee5\u4e0a\u7248\u672c group group string \u53ef\u9009 \u670d\u52a1\u53d1\u73b0 \u670d\u52a1\u5206\u7ec4\uff0c\u5f53\u4e00\u4e2a\u63a5\u53e3\u6709\u591a\u4e2a\u5b9e\u73b0\uff0c\u53ef\u4ee5\u7528\u5206\u7ec4\u533a\u5206\uff0c\u5fc5\u9700\u548c\u670d\u52a1\u63d0\u4f9b\u65b9\u4e00\u81f4 1.0.7\u4ee5\u4e0a\u7248\u672c timeout timeout long \u53ef\u9009 \u7f3a\u7701\u4f7f\u7528 dubbo:consumer \u7684timeout \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u65b9\u6cd5\u8c03\u7528\u8d85\u65f6\u65f6\u95f4(\u6beb\u79d2) 1.0.5\u4ee5\u4e0a\u7248\u672c retries retries int \u53ef\u9009 \u7f3a\u7701\u4f7f\u7528 dubbo:consumer \u7684retries \u6027\u80fd\u8c03\u4f18 \u8fdc\u7a0b\u670d\u52a1\u8c03\u7528\u91cd\u8bd5\u6b21\u6570\uff0c\u4e0d\u5305\u62ec\u7b2c\u4e00\u6b21\u8c03\u7528\uff0c\u4e0d\u9700\u8981\u91cd\u8bd5\u8bf7\u8bbe\u4e3a0 2.0.0\u4ee5\u4e0a\u7248\u672c connections connections int \u53ef\u9009 \u7f3a\u7701\u4f7f\u7528 dubbo:consumer \u7684connections \u6027\u80fd\u8c03\u4f18 \u5bf9\u6bcf\u4e2a\u63d0\u4f9b\u8005\u7684\u6700\u5927\u8fde\u63a5\u6570\uff0crmi\u3001http\u3001hessian\u7b49\u77ed\u8fde\u63a5\u534f\u8bae\u8868\u793a\u9650\u5236\u8fde\u63a5\u6570\uff0cdubbo\u7b49\u957f\u8fde\u63a5\u534f\u8868\u793a\u5efa\u7acb\u7684\u957f\u8fde\u63a5\u4e2a\u6570 2.0.0\u4ee5\u4e0a\u7248\u672c loadbalance loadbalance string \u53ef\u9009 \u7f3a\u7701\u4f7f\u7528 dubbo:consumer \u7684loadbalance \u6027\u80fd\u8c03\u4f18 \u8d1f\u8f7d\u5747\u8861\u7b56\u7565\uff0c\u53ef\u9009\u503c\uff1arandom,roundrobin,leastactive\uff0c\u5206\u522b\u8868\u793a\uff1a\u968f\u673a\uff0c\u8f6e\u8be2\uff0c\u6700\u5c11\u6d3b\u8dc3\u8c03\u7528 2.0.0\u4ee5\u4e0a\u7248\u672c async async boolean \u53ef\u9009 \u7f3a\u7701\u4f7f\u7528 dubbo:consumer \u7684async \u6027\u80fd\u8c03\u4f18 \u662f\u5426\u5f02\u6b65\u6267\u884c\uff0c\u4e0d\u53ef\u9760\u5f02\u6b65\uff0c\u53ea\u662f\u5ffd\u7565\u8fd4\u56de\u503c\uff0c\u4e0d\u963b\u585e\u6267\u884c\u7ebf\u7a0b 2.0.0\u4ee5\u4e0a\u7248\u672c generic generic boolean \u53ef\u9009 \u7f3a\u7701\u4f7f\u7528 dubbo:consumer \u7684generic \u670d\u52a1\u6cbb\u7406 \u662f\u5426\u7f3a\u7701\u6cdb\u5316\u63a5\u53e3\uff0c\u5982\u679c\u4e3a\u6cdb\u5316\u63a5\u53e3\uff0c\u5c06\u8fd4\u56deGenericService 2.0.0\u4ee5\u4e0a\u7248\u672c check check boolean \u53ef\u9009 \u7f3a\u7701\u4f7f\u7528 dubbo:consumer \u7684check \u670d\u52a1\u6cbb\u7406 \u542f\u52a8\u65f6\u68c0\u67e5\u63d0\u4f9b\u8005\u662f\u5426\u5b58\u5728\uff0ctrue\u62a5\u9519\uff0cfalse\u5ffd\u7565 2.0.0\u4ee5\u4e0a\u7248\u672c url url string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u70b9\u5bf9\u70b9\u76f4\u8fde\u670d\u52a1\u63d0\u4f9b\u8005\u5730\u5740\uff0c\u5c06\u7ed5\u8fc7\u6ce8\u518c\u4e2d\u5fc3 1.0.6\u4ee5\u4e0a\u7248\u672c stub stub class/boolean \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u63a5\u53e3\u5ba2\u6237\u7aef\u672c\u5730\u4ee3\u7406\u7c7b\u540d\uff0c\u7528\u4e8e\u5728\u5ba2\u6237\u7aef\u6267\u884c\u672c\u5730\u903b\u8f91\uff0c\u5982\u672c\u5730\u7f13\u5b58\u7b49\uff0c\u8be5\u672c\u5730\u4ee3\u7406\u7c7b\u7684\u6784\u9020\u51fd\u6570\u5fc5\u987b\u5141\u8bb8\u4f20\u5165\u8fdc\u7a0b\u4ee3\u7406\u5bf9\u8c61\uff0c\u6784\u9020\u51fd\u6570\u5982\uff1apublic XxxServiceLocal(XxxService xxxService) 2.0.0\u4ee5\u4e0a\u7248\u672c mock mock class/boolean \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u63a5\u53e3\u8c03\u7528\u5931\u8d25Mock\u5b9e\u73b0\u7c7b\u540d\uff0c\u8be5Mock\u7c7b\u5fc5\u987b\u6709\u4e00\u4e2a\u65e0\u53c2\u6784\u9020\u51fd\u6570\uff0c\u4e0eLocal\u7684\u533a\u522b\u5728\u4e8e\uff0cLocal\u603b\u662f\u88ab\u6267\u884c\uff0c\u800cMock\u53ea\u5728\u51fa\u73b0\u975e\u4e1a\u52a1\u5f02\u5e38(\u6bd4\u5982\u8d85\u65f6\uff0c\u7f51\u7edc\u5f02\u5e38\u7b49)\u65f6\u6267\u884c\uff0cLocal\u5728\u8fdc\u7a0b\u8c03\u7528\u4e4b\u524d\u6267\u884c\uff0cMock\u5728\u8fdc\u7a0b\u8c03\u7528\u540e\u6267\u884c\u3002 Dubbo1.0.13\u53ca\u5176\u4ee5\u4e0a\u7248\u672c\u652f\u6301 cache cache string/boolean \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u4ee5\u8c03\u7528\u53c2\u6570\u4e3akey\uff0c\u7f13\u5b58\u8fd4\u56de\u7ed3\u679c\uff0c\u53ef\u9009\uff1alru, threadlocal, jcache\u7b49 Dubbo2.1.0\u53ca\u5176\u4ee5\u4e0a\u7248\u672c\u652f\u6301 validation validation boolean \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u662f\u5426\u542f\u7528JSR303\u6807\u51c6\u6ce8\u89e3\u9a8c\u8bc1\uff0c\u5982\u679c\u542f\u7528\uff0c\u5c06\u5bf9\u65b9\u6cd5\u53c2\u6570\u4e0a\u7684\u6ce8\u89e3\u8fdb\u884c\u6821\u9a8c Dubbo2.1.0\u53ca\u5176\u4ee5\u4e0a\u7248\u672c\u652f\u6301 proxy proxy boolean \u53ef\u9009 javassist \u6027\u80fd\u8c03\u4f18 \u9009\u62e9\u52a8\u6001\u4ee3\u7406\u5b9e\u73b0\u7b56\u7565\uff0c\u53ef\u9009\uff1ajavassist, jdk 2.0.2\u4ee5\u4e0a\u7248\u672c client client string \u53ef\u9009 \u6027\u80fd\u8c03\u4f18 \u5ba2\u6237\u7aef\u4f20\u8f93\u7c7b\u578b\u8bbe\u7f6e\uff0c\u5982Dubbo\u534f\u8bae\u7684netty\u6216mina\u3002 Dubbo2.0.0\u4ee5\u4e0a\u7248\u672c\u652f\u6301 registry string \u53ef\u9009 \u7f3a\u7701\u5c06\u4ece\u6240\u6709\u6ce8\u518c\u4e2d\u5fc3\u83b7\u670d\u52a1\u5217\u8868\u540e\u5408\u5e76\u7ed3\u679c \u914d\u7f6e\u5173\u8054 \u4ece\u6307\u5b9a\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u83b7\u53d6\u670d\u52a1\u5217\u8868\uff0c\u5728\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u65f6\u4f7f\u7528\uff0c\u503c\u4e3a dubbo:registry \u7684id\u5c5e\u6027\uff0c\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3ID\u7528\u9017\u53f7\u5206\u9694 2.0.0\u4ee5\u4e0a\u7248\u672c owner owner string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u8c03\u7528\u670d\u52a1\u8d1f\u8d23\u4eba\uff0c\u7528\u4e8e\u670d\u52a1\u6cbb\u7406\uff0c\u8bf7\u586b\u5199\u8d1f\u8d23\u4eba\u516c\u53f8\u90ae\u7bb1\u524d\u7f00 2.0.5\u4ee5\u4e0a\u7248\u672c actives actives int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u6bcf\u670d\u52a1\u6d88\u8d39\u8005\u6bcf\u670d\u52a1\u6bcf\u65b9\u6cd5\u6700\u5927\u5e76\u53d1\u8c03\u7528\u6570 2.0.5\u4ee5\u4e0a\u7248\u672c cluster cluster string \u53ef\u9009 failover \u6027\u80fd\u8c03\u4f18 \u96c6\u7fa4\u65b9\u5f0f\uff0c\u53ef\u9009\uff1afailover/failfast/failsafe/failback/forking 2.0.5\u4ee5\u4e0a\u7248\u672c filter reference.filter string \u53ef\u9009 default \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u6d88\u8d39\u65b9\u8fdc\u7a0b\u8c03\u7528\u8fc7\u7a0b\u62e6\u622a\u5668\u540d\u79f0\uff0c\u591a\u4e2a\u540d\u79f0\u7528\u9017\u53f7\u5206\u9694 2.0.5\u4ee5\u4e0a\u7248\u672c listener invoker.listener string \u53ef\u9009 default \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u6d88\u8d39\u65b9\u5f15\u7528\u670d\u52a1\u76d1\u542c\u5668\u540d\u79f0\uff0c\u591a\u4e2a\u540d\u79f0\u7528\u9017\u53f7\u5206\u9694 2.0.5\u4ee5\u4e0a\u7248\u672c layer layer string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u8c03\u7528\u8005\u6240\u5728\u7684\u5206\u5c42\u3002\u5982\uff1abiz\u3001dao\u3001intl:web\u3001china:acton\u3002 2.0.7\u4ee5\u4e0a\u7248\u672c init init boolean \u53ef\u9009 false \u6027\u80fd\u8c03\u4f18 \u662f\u5426\u5728afterPropertiesSet()\u65f6\u9965\u997f\u521d\u59cb\u5316\u5f15\u7528\uff0c\u5426\u5219\u7b49\u5230\u6709\u4eba\u6ce8\u5165\u6216\u5f15\u7528\u8be5\u5b9e\u4f8b\u65f6\u518d\u521d\u59cb\u5316\u3002 2.0.10\u4ee5\u4e0a\u7248\u672c protocol protocol string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u53ea\u8c03\u7528\u6307\u5b9a\u534f\u8bae\u7684\u670d\u52a1\u63d0\u4f9b\u65b9\uff0c\u5176\u5b83\u534f\u8bae\u5ffd\u7565\u3002 2.2.0\u4ee5\u4e0a\u7248\u672c","title":"dubbo:reference"},{"location":"user/references/xml/dubbo-registry/","text":"dubbo:registry \u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e\u3002\u5bf9\u5e94\u7684\u914d\u7f6e\u7c7b\uff1a org.apache.dubbo.config.RegistryConfig \u3002\u540c\u65f6\u5982\u679c\u6709\u591a\u4e2a\u4e0d\u540c\u7684\u6ce8\u518c\u4e2d\u5fc3\uff0c\u53ef\u4ee5\u58f0\u660e\u591a\u4e2a dubbo:registry \u6807\u7b7e\uff0c\u5e76\u5728 dubbo:service \u6216 dubbo:reference \u7684 registry \u5c5e\u6027\u6307\u5b9a\u4f7f\u7528\u7684\u6ce8\u518c\u4e2d\u5fc3\u3002 \u5c5e\u6027 \u5bf9\u5e94URL\u53c2\u6570 \u7c7b\u578b \u662f\u5426\u5fc5\u586b \u7f3a\u7701\u503c \u4f5c\u7528 \u63cf\u8ff0 \u517c\u5bb9\u6027 id string \u53ef\u9009 \u914d\u7f6e\u5173\u8054 \u6ce8\u518c\u4e2d\u5fc3\u5f15\u7528BeanId\uff0c\u53ef\u4ee5\u5728 dubbo:service registry=\"\" \u6216 dubbo:reference registry=\"\" \u4e2d\u5f15\u7528\u6b64ID 1.0.16\u4ee5\u4e0a\u7248\u672c address host:port string \u5fc5\u586b \u670d\u52a1\u53d1\u73b0 \u6ce8\u518c\u4e2d\u5fc3\u670d\u52a1\u5668\u5730\u5740\uff0c\u5982\u679c\u5730\u5740\u6ca1\u6709\u7aef\u53e3\u7f3a\u7701\u4e3a9090\uff0c\u540c\u4e00\u96c6\u7fa4\u5185\u7684\u591a\u4e2a\u5730\u5740\u7528\u9017\u53f7\u5206\u9694\uff0c\u5982\uff1aip:port,ip:port\uff0c\u4e0d\u540c\u96c6\u7fa4\u7684\u6ce8\u518c\u4e2d\u5fc3\uff0c\u8bf7\u914d\u7f6e\u591a\u4e2a dubbo:registry \u6807\u7b7e 1.0.16\u4ee5\u4e0a\u7248\u672c protocol protocol string \u53ef\u9009 dubbo \u670d\u52a1\u53d1\u73b0 \u6ce8\u518c\u4e2d\u5fc3\u5730\u5740\u534f\u8bae\uff0c\u652f\u6301 dubbo , multicast , zookeeper , redis , consul(2.7.1) , sofa(2.7.2) , etcd(2.7.2) , nacos(2.7.2) \u7b49\u534f\u8bae 2.0.0\u4ee5\u4e0a\u7248\u672c port port int \u53ef\u9009 9090 \u670d\u52a1\u53d1\u73b0 \u6ce8\u518c\u4e2d\u5fc3\u7f3a\u7701\u7aef\u53e3\uff0c\u5f53address\u6ca1\u6709\u5e26\u7aef\u53e3\u65f6\u4f7f\u7528\u6b64\u7aef\u53e3\u505a\u4e3a\u7f3a\u7701\u503c 2.0.0\u4ee5\u4e0a\u7248\u672c username username string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u767b\u5f55\u6ce8\u518c\u4e2d\u5fc3\u7528\u6237\u540d\uff0c\u5982\u679c\u6ce8\u518c\u4e2d\u5fc3\u4e0d\u9700\u8981\u9a8c\u8bc1\u53ef\u4e0d\u586b 2.0.0\u4ee5\u4e0a\u7248\u672c password password string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u767b\u5f55\u6ce8\u518c\u4e2d\u5fc3\u5bc6\u7801\uff0c\u5982\u679c\u6ce8\u518c\u4e2d\u5fc3\u4e0d\u9700\u8981\u9a8c\u8bc1\u53ef\u4e0d\u586b 2.0.0\u4ee5\u4e0a\u7248\u672c transport registry.transporter string \u53ef\u9009 netty \u6027\u80fd\u8c03\u4f18 \u7f51\u7edc\u4f20\u8f93\u65b9\u5f0f\uff0c\u53ef\u9009mina,netty 2.0.0\u4ee5\u4e0a\u7248\u672c timeout registry.timeout int \u53ef\u9009 5000 \u6027\u80fd\u8c03\u4f18 \u6ce8\u518c\u4e2d\u5fc3\u8bf7\u6c42\u8d85\u65f6\u65f6\u95f4(\u6beb\u79d2) 2.0.0\u4ee5\u4e0a\u7248\u672c session registry.session int \u53ef\u9009 60000 \u6027\u80fd\u8c03\u4f18 \u6ce8\u518c\u4e2d\u5fc3\u4f1a\u8bdd\u8d85\u65f6\u65f6\u95f4(\u6beb\u79d2)\uff0c\u7528\u4e8e\u68c0\u6d4b\u63d0\u4f9b\u8005\u975e\u6b63\u5e38\u65ad\u7ebf\u540e\u7684\u810f\u6570\u636e\uff0c\u6bd4\u5982\u7528\u5fc3\u8df3\u68c0\u6d4b\u7684\u5b9e\u73b0\uff0c\u6b64\u65f6\u95f4\u5c31\u662f\u5fc3\u8df3\u95f4\u9694\uff0c\u4e0d\u540c\u6ce8\u518c\u4e2d\u5fc3\u5b9e\u73b0\u4e0d\u4e00\u6837\u3002 2.1.0\u4ee5\u4e0a\u7248\u672c file registry.file string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u4f7f\u7528\u6587\u4ef6\u7f13\u5b58\u6ce8\u518c\u4e2d\u5fc3\u5730\u5740\u5217\u8868\u53ca\u670d\u52a1\u63d0\u4f9b\u8005\u5217\u8868\uff0c\u5e94\u7528\u91cd\u542f\u65f6\u5c06\u57fa\u4e8e\u6b64\u6587\u4ef6\u6062\u590d\uff0c\u6ce8\u610f\uff1a\u4e24\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u4e0d\u80fd\u4f7f\u7528\u540c\u4e00\u6587\u4ef6\u5b58\u50a8 2.0.0\u4ee5\u4e0a\u7248\u672c wait registry.wait int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u505c\u6b62\u65f6\u7b49\u5f85\u901a\u77e5\u5b8c\u6210\u65f6\u95f4(\u6beb\u79d2) 2.0.0\u4ee5\u4e0a\u7248\u672c check check boolean \u53ef\u9009 true \u670d\u52a1\u6cbb\u7406 \u6ce8\u518c\u4e2d\u5fc3\u4e0d\u5b58\u5728\u65f6\uff0c\u662f\u5426\u62a5\u9519 2.0.0\u4ee5\u4e0a\u7248\u672c register register boolean \u53ef\u9009 true \u670d\u52a1\u6cbb\u7406 \u662f\u5426\u5411\u6b64\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u670d\u52a1\uff0c\u5982\u679c\u8bbe\u4e3afalse\uff0c\u5c06\u53ea\u8ba2\u9605\uff0c\u4e0d\u6ce8\u518c 2.0.5\u4ee5\u4e0a\u7248\u672c subscribe subscribe boolean \u53ef\u9009 true \u670d\u52a1\u6cbb\u7406 \u662f\u5426\u5411\u6b64\u6ce8\u518c\u4e2d\u5fc3\u8ba2\u9605\u670d\u52a1\uff0c\u5982\u679c\u8bbe\u4e3afalse\uff0c\u5c06\u53ea\u6ce8\u518c\uff0c\u4e0d\u8ba2\u9605 2.0.5\u4ee5\u4e0a\u7248\u672c dynamic dynamic boolean \u53ef\u9009 true \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u662f\u5426\u52a8\u6001\u6ce8\u518c\uff0c\u5982\u679c\u8bbe\u4e3afalse\uff0c\u6ce8\u518c\u540e\u5c06\u663e\u793a\u4e3adisable\u72b6\u6001\uff0c\u9700\u4eba\u5de5\u542f\u7528\uff0c\u5e76\u4e14\u670d\u52a1\u63d0\u4f9b\u8005\u505c\u6b62\u65f6\uff0c\u4e5f\u4e0d\u4f1a\u81ea\u52a8\u53d6\u6d88\u6ce8\u518c\uff0c\u9700\u4eba\u5de5\u7981\u7528\u3002 2.0.5\u4ee5\u4e0a\u7248\u672c group group string \u53ef\u9009 dubbo \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u6ce8\u518c\u5206\u7ec4\uff0c\u8de8\u7ec4\u7684\u670d\u52a1\u4e0d\u4f1a\u76f8\u4e92\u5f71\u54cd\uff0c\u4e5f\u65e0\u6cd5\u76f8\u4e92\u8c03\u7528\uff0c\u9002\u7528\u4e8e\u73af\u5883\u9694\u79bb\u3002 2.0.5\u4ee5\u4e0a\u7248\u672c simplified simplified boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3\u7684URL\u662f\u5426\u91c7\u7528\u7cbe\u7b80\u6a21\u5f0f\u7684\uff08\u4e0e\u4f4e\u7248\u672c\u517c\u5bb9\uff09 2.7.0\u4ee5\u4e0a\u7248\u672c extra-keys extraKeys string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u5728simplified=true\u65f6\uff0cextraKeys\u5141\u8bb8\u4f60\u5728\u9ed8\u8ba4\u53c2\u6570\u5916\u5c06\u989d\u5916\u7684key\u653e\u5230URL\u4e2d\uff0c\u683c\u5f0f\uff1a\"interface,key1,key2\"\u3002 2.7.0\u4ee5\u4e0a\u7248\u672c","title":"dubbo:registry"},{"location":"user/references/xml/dubbo-registry/#dubboregistry","text":"\u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e\u3002\u5bf9\u5e94\u7684\u914d\u7f6e\u7c7b\uff1a org.apache.dubbo.config.RegistryConfig \u3002\u540c\u65f6\u5982\u679c\u6709\u591a\u4e2a\u4e0d\u540c\u7684\u6ce8\u518c\u4e2d\u5fc3\uff0c\u53ef\u4ee5\u58f0\u660e\u591a\u4e2a dubbo:registry \u6807\u7b7e\uff0c\u5e76\u5728 dubbo:service \u6216 dubbo:reference \u7684 registry \u5c5e\u6027\u6307\u5b9a\u4f7f\u7528\u7684\u6ce8\u518c\u4e2d\u5fc3\u3002 \u5c5e\u6027 \u5bf9\u5e94URL\u53c2\u6570 \u7c7b\u578b \u662f\u5426\u5fc5\u586b \u7f3a\u7701\u503c \u4f5c\u7528 \u63cf\u8ff0 \u517c\u5bb9\u6027 id string \u53ef\u9009 \u914d\u7f6e\u5173\u8054 \u6ce8\u518c\u4e2d\u5fc3\u5f15\u7528BeanId\uff0c\u53ef\u4ee5\u5728 dubbo:service registry=\"\" \u6216 dubbo:reference registry=\"\" \u4e2d\u5f15\u7528\u6b64ID 1.0.16\u4ee5\u4e0a\u7248\u672c address host:port string \u5fc5\u586b \u670d\u52a1\u53d1\u73b0 \u6ce8\u518c\u4e2d\u5fc3\u670d\u52a1\u5668\u5730\u5740\uff0c\u5982\u679c\u5730\u5740\u6ca1\u6709\u7aef\u53e3\u7f3a\u7701\u4e3a9090\uff0c\u540c\u4e00\u96c6\u7fa4\u5185\u7684\u591a\u4e2a\u5730\u5740\u7528\u9017\u53f7\u5206\u9694\uff0c\u5982\uff1aip:port,ip:port\uff0c\u4e0d\u540c\u96c6\u7fa4\u7684\u6ce8\u518c\u4e2d\u5fc3\uff0c\u8bf7\u914d\u7f6e\u591a\u4e2a dubbo:registry \u6807\u7b7e 1.0.16\u4ee5\u4e0a\u7248\u672c protocol protocol string \u53ef\u9009 dubbo \u670d\u52a1\u53d1\u73b0 \u6ce8\u518c\u4e2d\u5fc3\u5730\u5740\u534f\u8bae\uff0c\u652f\u6301 dubbo , multicast , zookeeper , redis , consul(2.7.1) , sofa(2.7.2) , etcd(2.7.2) , nacos(2.7.2) \u7b49\u534f\u8bae 2.0.0\u4ee5\u4e0a\u7248\u672c port port int \u53ef\u9009 9090 \u670d\u52a1\u53d1\u73b0 \u6ce8\u518c\u4e2d\u5fc3\u7f3a\u7701\u7aef\u53e3\uff0c\u5f53address\u6ca1\u6709\u5e26\u7aef\u53e3\u65f6\u4f7f\u7528\u6b64\u7aef\u53e3\u505a\u4e3a\u7f3a\u7701\u503c 2.0.0\u4ee5\u4e0a\u7248\u672c username username string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u767b\u5f55\u6ce8\u518c\u4e2d\u5fc3\u7528\u6237\u540d\uff0c\u5982\u679c\u6ce8\u518c\u4e2d\u5fc3\u4e0d\u9700\u8981\u9a8c\u8bc1\u53ef\u4e0d\u586b 2.0.0\u4ee5\u4e0a\u7248\u672c password password string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u767b\u5f55\u6ce8\u518c\u4e2d\u5fc3\u5bc6\u7801\uff0c\u5982\u679c\u6ce8\u518c\u4e2d\u5fc3\u4e0d\u9700\u8981\u9a8c\u8bc1\u53ef\u4e0d\u586b 2.0.0\u4ee5\u4e0a\u7248\u672c transport registry.transporter string \u53ef\u9009 netty \u6027\u80fd\u8c03\u4f18 \u7f51\u7edc\u4f20\u8f93\u65b9\u5f0f\uff0c\u53ef\u9009mina,netty 2.0.0\u4ee5\u4e0a\u7248\u672c timeout registry.timeout int \u53ef\u9009 5000 \u6027\u80fd\u8c03\u4f18 \u6ce8\u518c\u4e2d\u5fc3\u8bf7\u6c42\u8d85\u65f6\u65f6\u95f4(\u6beb\u79d2) 2.0.0\u4ee5\u4e0a\u7248\u672c session registry.session int \u53ef\u9009 60000 \u6027\u80fd\u8c03\u4f18 \u6ce8\u518c\u4e2d\u5fc3\u4f1a\u8bdd\u8d85\u65f6\u65f6\u95f4(\u6beb\u79d2)\uff0c\u7528\u4e8e\u68c0\u6d4b\u63d0\u4f9b\u8005\u975e\u6b63\u5e38\u65ad\u7ebf\u540e\u7684\u810f\u6570\u636e\uff0c\u6bd4\u5982\u7528\u5fc3\u8df3\u68c0\u6d4b\u7684\u5b9e\u73b0\uff0c\u6b64\u65f6\u95f4\u5c31\u662f\u5fc3\u8df3\u95f4\u9694\uff0c\u4e0d\u540c\u6ce8\u518c\u4e2d\u5fc3\u5b9e\u73b0\u4e0d\u4e00\u6837\u3002 2.1.0\u4ee5\u4e0a\u7248\u672c file registry.file string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u4f7f\u7528\u6587\u4ef6\u7f13\u5b58\u6ce8\u518c\u4e2d\u5fc3\u5730\u5740\u5217\u8868\u53ca\u670d\u52a1\u63d0\u4f9b\u8005\u5217\u8868\uff0c\u5e94\u7528\u91cd\u542f\u65f6\u5c06\u57fa\u4e8e\u6b64\u6587\u4ef6\u6062\u590d\uff0c\u6ce8\u610f\uff1a\u4e24\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u4e0d\u80fd\u4f7f\u7528\u540c\u4e00\u6587\u4ef6\u5b58\u50a8 2.0.0\u4ee5\u4e0a\u7248\u672c wait registry.wait int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u505c\u6b62\u65f6\u7b49\u5f85\u901a\u77e5\u5b8c\u6210\u65f6\u95f4(\u6beb\u79d2) 2.0.0\u4ee5\u4e0a\u7248\u672c check check boolean \u53ef\u9009 true \u670d\u52a1\u6cbb\u7406 \u6ce8\u518c\u4e2d\u5fc3\u4e0d\u5b58\u5728\u65f6\uff0c\u662f\u5426\u62a5\u9519 2.0.0\u4ee5\u4e0a\u7248\u672c register register boolean \u53ef\u9009 true \u670d\u52a1\u6cbb\u7406 \u662f\u5426\u5411\u6b64\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\u670d\u52a1\uff0c\u5982\u679c\u8bbe\u4e3afalse\uff0c\u5c06\u53ea\u8ba2\u9605\uff0c\u4e0d\u6ce8\u518c 2.0.5\u4ee5\u4e0a\u7248\u672c subscribe subscribe boolean \u53ef\u9009 true \u670d\u52a1\u6cbb\u7406 \u662f\u5426\u5411\u6b64\u6ce8\u518c\u4e2d\u5fc3\u8ba2\u9605\u670d\u52a1\uff0c\u5982\u679c\u8bbe\u4e3afalse\uff0c\u5c06\u53ea\u6ce8\u518c\uff0c\u4e0d\u8ba2\u9605 2.0.5\u4ee5\u4e0a\u7248\u672c dynamic dynamic boolean \u53ef\u9009 true \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u662f\u5426\u52a8\u6001\u6ce8\u518c\uff0c\u5982\u679c\u8bbe\u4e3afalse\uff0c\u6ce8\u518c\u540e\u5c06\u663e\u793a\u4e3adisable\u72b6\u6001\uff0c\u9700\u4eba\u5de5\u542f\u7528\uff0c\u5e76\u4e14\u670d\u52a1\u63d0\u4f9b\u8005\u505c\u6b62\u65f6\uff0c\u4e5f\u4e0d\u4f1a\u81ea\u52a8\u53d6\u6d88\u6ce8\u518c\uff0c\u9700\u4eba\u5de5\u7981\u7528\u3002 2.0.5\u4ee5\u4e0a\u7248\u672c group group string \u53ef\u9009 dubbo \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u6ce8\u518c\u5206\u7ec4\uff0c\u8de8\u7ec4\u7684\u670d\u52a1\u4e0d\u4f1a\u76f8\u4e92\u5f71\u54cd\uff0c\u4e5f\u65e0\u6cd5\u76f8\u4e92\u8c03\u7528\uff0c\u9002\u7528\u4e8e\u73af\u5883\u9694\u79bb\u3002 2.0.5\u4ee5\u4e0a\u7248\u672c simplified simplified boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3\u7684URL\u662f\u5426\u91c7\u7528\u7cbe\u7b80\u6a21\u5f0f\u7684\uff08\u4e0e\u4f4e\u7248\u672c\u517c\u5bb9\uff09 2.7.0\u4ee5\u4e0a\u7248\u672c extra-keys extraKeys string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u5728simplified=true\u65f6\uff0cextraKeys\u5141\u8bb8\u4f60\u5728\u9ed8\u8ba4\u53c2\u6570\u5916\u5c06\u989d\u5916\u7684key\u653e\u5230URL\u4e2d\uff0c\u683c\u5f0f\uff1a\"interface,key1,key2\"\u3002 2.7.0\u4ee5\u4e0a\u7248\u672c","title":"dubbo:registry"},{"location":"user/references/xml/dubbo-service/","text":"dubbo:service \u670d\u52a1\u63d0\u4f9b\u8005\u66b4\u9732\u670d\u52a1\u914d\u7f6e\u3002\u5bf9\u5e94\u7684\u914d\u7f6e\u7c7b\uff1a org.apache.dubbo.config.ServiceConfig \u5c5e\u6027 \u5bf9\u5e94URL\u53c2\u6570 \u7c7b\u578b \u662f\u5426\u5fc5\u586b \u7f3a\u7701\u503c \u4f5c\u7528 \u63cf\u8ff0 \u517c\u5bb9\u6027 interface class \u5fc5\u586b \u670d\u52a1\u53d1\u73b0 \u670d\u52a1\u63a5\u53e3\u540d 1.0.0\u4ee5\u4e0a\u7248\u672c ref object \u5fc5\u586b \u670d\u52a1\u53d1\u73b0 \u670d\u52a1\u5bf9\u8c61\u5b9e\u73b0\u5f15\u7528 1.0.0\u4ee5\u4e0a\u7248\u672c version version string \u53ef\u9009 0.0.0 \u670d\u52a1\u53d1\u73b0 \u670d\u52a1\u7248\u672c\uff0c\u5efa\u8bae\u4f7f\u7528\u4e24\u4f4d\u6570\u5b57\u7248\u672c\uff0c\u5982\uff1a1.0\uff0c\u901a\u5e38\u5728\u63a5\u53e3\u4e0d\u517c\u5bb9\u65f6\u7248\u672c\u53f7\u624d\u9700\u8981\u5347\u7ea7 1.0.0\u4ee5\u4e0a\u7248\u672c group group string \u53ef\u9009 \u670d\u52a1\u53d1\u73b0 \u670d\u52a1\u5206\u7ec4\uff0c\u5f53\u4e00\u4e2a\u63a5\u53e3\u6709\u591a\u4e2a\u5b9e\u73b0\uff0c\u53ef\u4ee5\u7528\u5206\u7ec4\u533a\u5206 1.0.7\u4ee5\u4e0a\u7248\u672c path path string \u53ef\u9009 \u7f3a\u7701\u4e3a\u63a5\u53e3\u540d \u670d\u52a1\u53d1\u73b0 \u670d\u52a1\u8def\u5f84 (\u6ce8\u610f\uff1a1.0\u4e0d\u652f\u6301\u81ea\u5b9a\u4e49\u8def\u5f84\uff0c\u603b\u662f\u4f7f\u7528\u63a5\u53e3\u540d\uff0c\u5982\u679c\u67091.0\u8c032.0\uff0c\u914d\u7f6e\u670d\u52a1\u8def\u5f84\u53ef\u80fd\u4e0d\u517c\u5bb9) 1.0.12\u4ee5\u4e0a\u7248\u672c delay delay int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u5ef6\u8fdf\u6ce8\u518c\u670d\u52a1\u65f6\u95f4(\u6beb\u79d2) \uff0c\u8bbe\u4e3a-1\u65f6\uff0c\u8868\u793a\u5ef6\u8fdf\u5230Spring\u5bb9\u5668\u521d\u59cb\u5316\u5b8c\u6210\u65f6\u66b4\u9732\u670d\u52a1 1.0.14\u4ee5\u4e0a\u7248\u672c timeout timeout int \u53ef\u9009 1000 \u6027\u80fd\u8c03\u4f18 \u8fdc\u7a0b\u670d\u52a1\u8c03\u7528\u8d85\u65f6\u65f6\u95f4(\u6beb\u79d2) 2.0.0\u4ee5\u4e0a\u7248\u672c retries retries int \u53ef\u9009 2 \u6027\u80fd\u8c03\u4f18 \u8fdc\u7a0b\u670d\u52a1\u8c03\u7528\u91cd\u8bd5\u6b21\u6570\uff0c\u4e0d\u5305\u62ec\u7b2c\u4e00\u6b21\u8c03\u7528\uff0c\u4e0d\u9700\u8981\u91cd\u8bd5\u8bf7\u8bbe\u4e3a0 2.0.0\u4ee5\u4e0a\u7248\u672c connections connections int \u53ef\u9009 100 \u6027\u80fd\u8c03\u4f18 \u5bf9\u6bcf\u4e2a\u63d0\u4f9b\u8005\u7684\u6700\u5927\u8fde\u63a5\u6570\uff0crmi\u3001http\u3001hessian\u7b49\u77ed\u8fde\u63a5\u534f\u8bae\u8868\u793a\u9650\u5236\u8fde\u63a5\u6570\uff0cdubbo\u7b49\u957f\u8fde\u63a5\u534f\u8868\u793a\u5efa\u7acb\u7684\u957f\u8fde\u63a5\u4e2a\u6570 2.0.0\u4ee5\u4e0a\u7248\u672c loadbalance loadbalance string \u53ef\u9009 random \u6027\u80fd\u8c03\u4f18 \u8d1f\u8f7d\u5747\u8861\u7b56\u7565\uff0c\u53ef\u9009\u503c\uff1arandom,roundrobin,leastactive\uff0c\u5206\u522b\u8868\u793a\uff1a\u968f\u673a\uff0c\u8f6e\u8be2\uff0c\u6700\u5c11\u6d3b\u8dc3\u8c03\u7528 2.0.0\u4ee5\u4e0a\u7248\u672c async async boolean \u53ef\u9009 false \u6027\u80fd\u8c03\u4f18 \u662f\u5426\u7f3a\u7701\u5f02\u6b65\u6267\u884c\uff0c\u4e0d\u53ef\u9760\u5f02\u6b65\uff0c\u53ea\u662f\u5ffd\u7565\u8fd4\u56de\u503c\uff0c\u4e0d\u963b\u585e\u6267\u884c\u7ebf\u7a0b 2.0.0\u4ee5\u4e0a\u7248\u672c local local class/boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u8bbe\u4e3atrue\uff0c\u8868\u793a\u4f7f\u7528\u7f3a\u7701\u4ee3\u7406\u7c7b\u540d\uff0c\u5373\uff1a\u63a5\u53e3\u540d + Local\u540e\u7f00\uff0c\u5df2\u5e9f\u5f03\uff0c\u8bf7\u4f7f\u7528stub 2.0.0\u4ee5\u4e0a\u7248\u672c stub stub class/boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u8bbe\u4e3atrue\uff0c\u8868\u793a\u4f7f\u7528\u7f3a\u7701\u4ee3\u7406\u7c7b\u540d\uff0c\u5373\uff1a\u63a5\u53e3\u540d + Stub\u540e\u7f00\uff0c\u670d\u52a1\u63a5\u53e3\u5ba2\u6237\u7aef\u672c\u5730\u4ee3\u7406\u7c7b\u540d\uff0c\u7528\u4e8e\u5728\u5ba2\u6237\u7aef\u6267\u884c\u672c\u5730\u903b\u8f91\uff0c\u5982\u672c\u5730\u7f13\u5b58\u7b49\uff0c\u8be5\u672c\u5730\u4ee3\u7406\u7c7b\u7684\u6784\u9020\u51fd\u6570\u5fc5\u987b\u5141\u8bb8\u4f20\u5165\u8fdc\u7a0b\u4ee3\u7406\u5bf9\u8c61\uff0c\u6784\u9020\u51fd\u6570\u5982\uff1apublic XxxServiceStub(XxxService xxxService) 2.0.0\u4ee5\u4e0a\u7248\u672c mock mock class/boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u8bbe\u4e3atrue\uff0c\u8868\u793a\u4f7f\u7528\u7f3a\u7701Mock\u7c7b\u540d\uff0c\u5373\uff1a\u63a5\u53e3\u540d + Mock\u540e\u7f00\uff0c\u670d\u52a1\u63a5\u53e3\u8c03\u7528\u5931\u8d25Mock\u5b9e\u73b0\u7c7b\uff0c\u8be5Mock\u7c7b\u5fc5\u987b\u6709\u4e00\u4e2a\u65e0\u53c2\u6784\u9020\u51fd\u6570\uff0c\u4e0eLocal\u7684\u533a\u522b\u5728\u4e8e\uff0cLocal\u603b\u662f\u88ab\u6267\u884c\uff0c\u800cMock\u53ea\u5728\u51fa\u73b0\u975e\u4e1a\u52a1\u5f02\u5e38(\u6bd4\u5982\u8d85\u65f6\uff0c\u7f51\u7edc\u5f02\u5e38\u7b49)\u65f6\u6267\u884c\uff0cLocal\u5728\u8fdc\u7a0b\u8c03\u7528\u4e4b\u524d\u6267\u884c\uff0cMock\u5728\u8fdc\u7a0b\u8c03\u7528\u540e\u6267\u884c\u3002 2.0.0\u4ee5\u4e0a\u7248\u672c token token string/boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u4ee4\u724c\u9a8c\u8bc1\uff0c\u4e3a\u7a7a\u8868\u793a\u4e0d\u5f00\u542f\uff0c\u5982\u679c\u4e3atrue\uff0c\u8868\u793a\u968f\u673a\u751f\u6210\u52a8\u6001\u4ee4\u724c\uff0c\u5426\u5219\u4f7f\u7528\u9759\u6001\u4ee4\u724c\uff0c\u4ee4\u724c\u7684\u4f5c\u7528\u662f\u9632\u6b62\u6d88\u8d39\u8005\u7ed5\u8fc7\u6ce8\u518c\u4e2d\u5fc3\u76f4\u63a5\u8bbf\u95ee\uff0c\u4fdd\u8bc1\u6ce8\u518c\u4e2d\u5fc3\u7684\u6388\u6743\u529f\u80fd\u6709\u6548\uff0c\u5982\u679c\u4f7f\u7528\u70b9\u5bf9\u70b9\u8c03\u7528\uff0c\u9700\u5173\u95ed\u4ee4\u724c\u529f\u80fd 2.0.0\u4ee5\u4e0a\u7248\u672c registry string \u53ef\u9009 \u7f3a\u7701\u5411\u6240\u6709registry\u6ce8\u518c \u914d\u7f6e\u5173\u8054 \u5411\u6307\u5b9a\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\uff0c\u5728\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u65f6\u4f7f\u7528\uff0c\u503c\u4e3a dubbo:registry \u7684id\u5c5e\u6027\uff0c\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3ID\u7528\u9017\u53f7\u5206\u9694\uff0c\u5982\u679c\u4e0d\u60f3\u5c06\u8be5\u670d\u52a1\u6ce8\u518c\u5230\u4efb\u4f55registry\uff0c\u53ef\u5c06\u503c\u8bbe\u4e3aN/A 2.0.0\u4ee5\u4e0a\u7248\u672c provider string \u53ef\u9009 \u7f3a\u7701\u4f7f\u7528\u7b2c\u4e00\u4e2aprovider\u914d\u7f6e \u914d\u7f6e\u5173\u8054 \u6307\u5b9aprovider\uff0c\u503c\u4e3a dubbo:provider \u7684id\u5c5e\u6027 2.0.0\u4ee5\u4e0a\u7248\u672c deprecated deprecated boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u662f\u5426\u8fc7\u65f6\uff0c\u5982\u679c\u8bbe\u4e3atrue\uff0c\u6d88\u8d39\u65b9\u5f15\u7528\u65f6\u5c06\u6253\u5370\u670d\u52a1\u8fc7\u65f6\u8b66\u544aerror\u65e5\u5fd7 2.0.5\u4ee5\u4e0a\u7248\u672c dynamic dynamic boolean \u53ef\u9009 true \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u662f\u5426\u52a8\u6001\u6ce8\u518c\uff0c\u5982\u679c\u8bbe\u4e3afalse\uff0c\u6ce8\u518c\u540e\u5c06\u663e\u793a\u540edisable\u72b6\u6001\uff0c\u9700\u4eba\u5de5\u542f\u7528\uff0c\u5e76\u4e14\u670d\u52a1\u63d0\u4f9b\u8005\u505c\u6b62\u65f6\uff0c\u4e5f\u4e0d\u4f1a\u81ea\u52a8\u53d6\u6d88\u518c\uff0c\u9700\u4eba\u5de5\u7981\u7528\u3002 2.0.5\u4ee5\u4e0a\u7248\u672c accesslog accesslog string/boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u8bbe\u4e3atrue\uff0c\u5c06\u5411logger\u4e2d\u8f93\u51fa\u8bbf\u95ee\u65e5\u5fd7\uff0c\u4e5f\u53ef\u586b\u5199\u8bbf\u95ee\u65e5\u5fd7\u6587\u4ef6\u8def\u5f84\uff0c\u76f4\u63a5\u628a\u8bbf\u95ee\u65e5\u5fd7\u8f93\u51fa\u5230\u6307\u5b9a\u6587\u4ef6 2.0.5\u4ee5\u4e0a\u7248\u672c owner owner string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u8d1f\u8d23\u4eba\uff0c\u7528\u4e8e\u670d\u52a1\u6cbb\u7406\uff0c\u8bf7\u586b\u5199\u8d1f\u8d23\u4eba\u516c\u53f8\u90ae\u7bb1\u524d\u7f00 2.0.5\u4ee5\u4e0a\u7248\u672c document document string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u6587\u6863URL 2.0.5\u4ee5\u4e0a\u7248\u672c weight weight int \u53ef\u9009 \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u6743\u91cd 2.0.5\u4ee5\u4e0a\u7248\u672c executes executes int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u63d0\u4f9b\u8005\u6bcf\u670d\u52a1\u6bcf\u65b9\u6cd5\u6700\u5927\u53ef\u5e76\u884c\u6267\u884c\u8bf7\u6c42\u6570 2.0.5\u4ee5\u4e0a\u7248\u672c proxy proxy string \u53ef\u9009 javassist \u6027\u80fd\u8c03\u4f18 \u751f\u6210\u52a8\u6001\u4ee3\u7406\u65b9\u5f0f\uff0c\u53ef\u9009\uff1ajdk/javassist 2.0.5\u4ee5\u4e0a\u7248\u672c cluster cluster string \u53ef\u9009 failover \u6027\u80fd\u8c03\u4f18 \u96c6\u7fa4\u65b9\u5f0f\uff0c\u53ef\u9009\uff1afailover/failfast/failsafe/failback/forking 2.0.5\u4ee5\u4e0a\u7248\u672c filter service.filter string \u53ef\u9009 default \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u63d0\u4f9b\u65b9\u8fdc\u7a0b\u8c03\u7528\u8fc7\u7a0b\u62e6\u622a\u5668\u540d\u79f0\uff0c\u591a\u4e2a\u540d\u79f0\u7528\u9017\u53f7\u5206\u9694 2.0.5\u4ee5\u4e0a\u7248\u672c listener exporter.listener string \u53ef\u9009 default \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u63d0\u4f9b\u65b9\u5bfc\u51fa\u670d\u52a1\u76d1\u542c\u5668\u540d\u79f0\uff0c\u591a\u4e2a\u540d\u79f0\u7528\u9017\u53f7\u5206\u9694 protocol string \u53ef\u9009 \u914d\u7f6e\u5173\u8054 \u4f7f\u7528\u6307\u5b9a\u7684\u534f\u8bae\u66b4\u9732\u670d\u52a1\uff0c\u5728\u591a\u534f\u8bae\u65f6\u4f7f\u7528\uff0c\u503c\u4e3a dubbo:protocol \u7684id\u5c5e\u6027\uff0c\u591a\u4e2a\u534f\u8baeID\u7528\u9017\u53f7\u5206\u9694 2.0.5\u4ee5\u4e0a\u7248\u672c layer layer string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u63d0\u4f9b\u8005\u6240\u5728\u7684\u5206\u5c42\u3002\u5982\uff1abiz\u3001dao\u3001intl:web\u3001china:acton\u3002 2.0.7\u4ee5\u4e0a\u7248\u672c register register boolean \u53ef\u9009 true \u670d\u52a1\u6cbb\u7406 \u8be5\u534f\u8bae\u7684\u670d\u52a1\u662f\u5426\u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3 2.0.8\u4ee5\u4e0a\u7248\u672c","title":"dubbo:service"},{"location":"user/references/xml/dubbo-service/#dubboservice","text":"\u670d\u52a1\u63d0\u4f9b\u8005\u66b4\u9732\u670d\u52a1\u914d\u7f6e\u3002\u5bf9\u5e94\u7684\u914d\u7f6e\u7c7b\uff1a org.apache.dubbo.config.ServiceConfig \u5c5e\u6027 \u5bf9\u5e94URL\u53c2\u6570 \u7c7b\u578b \u662f\u5426\u5fc5\u586b \u7f3a\u7701\u503c \u4f5c\u7528 \u63cf\u8ff0 \u517c\u5bb9\u6027 interface class \u5fc5\u586b \u670d\u52a1\u53d1\u73b0 \u670d\u52a1\u63a5\u53e3\u540d 1.0.0\u4ee5\u4e0a\u7248\u672c ref object \u5fc5\u586b \u670d\u52a1\u53d1\u73b0 \u670d\u52a1\u5bf9\u8c61\u5b9e\u73b0\u5f15\u7528 1.0.0\u4ee5\u4e0a\u7248\u672c version version string \u53ef\u9009 0.0.0 \u670d\u52a1\u53d1\u73b0 \u670d\u52a1\u7248\u672c\uff0c\u5efa\u8bae\u4f7f\u7528\u4e24\u4f4d\u6570\u5b57\u7248\u672c\uff0c\u5982\uff1a1.0\uff0c\u901a\u5e38\u5728\u63a5\u53e3\u4e0d\u517c\u5bb9\u65f6\u7248\u672c\u53f7\u624d\u9700\u8981\u5347\u7ea7 1.0.0\u4ee5\u4e0a\u7248\u672c group group string \u53ef\u9009 \u670d\u52a1\u53d1\u73b0 \u670d\u52a1\u5206\u7ec4\uff0c\u5f53\u4e00\u4e2a\u63a5\u53e3\u6709\u591a\u4e2a\u5b9e\u73b0\uff0c\u53ef\u4ee5\u7528\u5206\u7ec4\u533a\u5206 1.0.7\u4ee5\u4e0a\u7248\u672c path path string \u53ef\u9009 \u7f3a\u7701\u4e3a\u63a5\u53e3\u540d \u670d\u52a1\u53d1\u73b0 \u670d\u52a1\u8def\u5f84 (\u6ce8\u610f\uff1a1.0\u4e0d\u652f\u6301\u81ea\u5b9a\u4e49\u8def\u5f84\uff0c\u603b\u662f\u4f7f\u7528\u63a5\u53e3\u540d\uff0c\u5982\u679c\u67091.0\u8c032.0\uff0c\u914d\u7f6e\u670d\u52a1\u8def\u5f84\u53ef\u80fd\u4e0d\u517c\u5bb9) 1.0.12\u4ee5\u4e0a\u7248\u672c delay delay int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u5ef6\u8fdf\u6ce8\u518c\u670d\u52a1\u65f6\u95f4(\u6beb\u79d2) \uff0c\u8bbe\u4e3a-1\u65f6\uff0c\u8868\u793a\u5ef6\u8fdf\u5230Spring\u5bb9\u5668\u521d\u59cb\u5316\u5b8c\u6210\u65f6\u66b4\u9732\u670d\u52a1 1.0.14\u4ee5\u4e0a\u7248\u672c timeout timeout int \u53ef\u9009 1000 \u6027\u80fd\u8c03\u4f18 \u8fdc\u7a0b\u670d\u52a1\u8c03\u7528\u8d85\u65f6\u65f6\u95f4(\u6beb\u79d2) 2.0.0\u4ee5\u4e0a\u7248\u672c retries retries int \u53ef\u9009 2 \u6027\u80fd\u8c03\u4f18 \u8fdc\u7a0b\u670d\u52a1\u8c03\u7528\u91cd\u8bd5\u6b21\u6570\uff0c\u4e0d\u5305\u62ec\u7b2c\u4e00\u6b21\u8c03\u7528\uff0c\u4e0d\u9700\u8981\u91cd\u8bd5\u8bf7\u8bbe\u4e3a0 2.0.0\u4ee5\u4e0a\u7248\u672c connections connections int \u53ef\u9009 100 \u6027\u80fd\u8c03\u4f18 \u5bf9\u6bcf\u4e2a\u63d0\u4f9b\u8005\u7684\u6700\u5927\u8fde\u63a5\u6570\uff0crmi\u3001http\u3001hessian\u7b49\u77ed\u8fde\u63a5\u534f\u8bae\u8868\u793a\u9650\u5236\u8fde\u63a5\u6570\uff0cdubbo\u7b49\u957f\u8fde\u63a5\u534f\u8868\u793a\u5efa\u7acb\u7684\u957f\u8fde\u63a5\u4e2a\u6570 2.0.0\u4ee5\u4e0a\u7248\u672c loadbalance loadbalance string \u53ef\u9009 random \u6027\u80fd\u8c03\u4f18 \u8d1f\u8f7d\u5747\u8861\u7b56\u7565\uff0c\u53ef\u9009\u503c\uff1arandom,roundrobin,leastactive\uff0c\u5206\u522b\u8868\u793a\uff1a\u968f\u673a\uff0c\u8f6e\u8be2\uff0c\u6700\u5c11\u6d3b\u8dc3\u8c03\u7528 2.0.0\u4ee5\u4e0a\u7248\u672c async async boolean \u53ef\u9009 false \u6027\u80fd\u8c03\u4f18 \u662f\u5426\u7f3a\u7701\u5f02\u6b65\u6267\u884c\uff0c\u4e0d\u53ef\u9760\u5f02\u6b65\uff0c\u53ea\u662f\u5ffd\u7565\u8fd4\u56de\u503c\uff0c\u4e0d\u963b\u585e\u6267\u884c\u7ebf\u7a0b 2.0.0\u4ee5\u4e0a\u7248\u672c local local class/boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u8bbe\u4e3atrue\uff0c\u8868\u793a\u4f7f\u7528\u7f3a\u7701\u4ee3\u7406\u7c7b\u540d\uff0c\u5373\uff1a\u63a5\u53e3\u540d + Local\u540e\u7f00\uff0c\u5df2\u5e9f\u5f03\uff0c\u8bf7\u4f7f\u7528stub 2.0.0\u4ee5\u4e0a\u7248\u672c stub stub class/boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u8bbe\u4e3atrue\uff0c\u8868\u793a\u4f7f\u7528\u7f3a\u7701\u4ee3\u7406\u7c7b\u540d\uff0c\u5373\uff1a\u63a5\u53e3\u540d + Stub\u540e\u7f00\uff0c\u670d\u52a1\u63a5\u53e3\u5ba2\u6237\u7aef\u672c\u5730\u4ee3\u7406\u7c7b\u540d\uff0c\u7528\u4e8e\u5728\u5ba2\u6237\u7aef\u6267\u884c\u672c\u5730\u903b\u8f91\uff0c\u5982\u672c\u5730\u7f13\u5b58\u7b49\uff0c\u8be5\u672c\u5730\u4ee3\u7406\u7c7b\u7684\u6784\u9020\u51fd\u6570\u5fc5\u987b\u5141\u8bb8\u4f20\u5165\u8fdc\u7a0b\u4ee3\u7406\u5bf9\u8c61\uff0c\u6784\u9020\u51fd\u6570\u5982\uff1apublic XxxServiceStub(XxxService xxxService) 2.0.0\u4ee5\u4e0a\u7248\u672c mock mock class/boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u8bbe\u4e3atrue\uff0c\u8868\u793a\u4f7f\u7528\u7f3a\u7701Mock\u7c7b\u540d\uff0c\u5373\uff1a\u63a5\u53e3\u540d + Mock\u540e\u7f00\uff0c\u670d\u52a1\u63a5\u53e3\u8c03\u7528\u5931\u8d25Mock\u5b9e\u73b0\u7c7b\uff0c\u8be5Mock\u7c7b\u5fc5\u987b\u6709\u4e00\u4e2a\u65e0\u53c2\u6784\u9020\u51fd\u6570\uff0c\u4e0eLocal\u7684\u533a\u522b\u5728\u4e8e\uff0cLocal\u603b\u662f\u88ab\u6267\u884c\uff0c\u800cMock\u53ea\u5728\u51fa\u73b0\u975e\u4e1a\u52a1\u5f02\u5e38(\u6bd4\u5982\u8d85\u65f6\uff0c\u7f51\u7edc\u5f02\u5e38\u7b49)\u65f6\u6267\u884c\uff0cLocal\u5728\u8fdc\u7a0b\u8c03\u7528\u4e4b\u524d\u6267\u884c\uff0cMock\u5728\u8fdc\u7a0b\u8c03\u7528\u540e\u6267\u884c\u3002 2.0.0\u4ee5\u4e0a\u7248\u672c token token string/boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u4ee4\u724c\u9a8c\u8bc1\uff0c\u4e3a\u7a7a\u8868\u793a\u4e0d\u5f00\u542f\uff0c\u5982\u679c\u4e3atrue\uff0c\u8868\u793a\u968f\u673a\u751f\u6210\u52a8\u6001\u4ee4\u724c\uff0c\u5426\u5219\u4f7f\u7528\u9759\u6001\u4ee4\u724c\uff0c\u4ee4\u724c\u7684\u4f5c\u7528\u662f\u9632\u6b62\u6d88\u8d39\u8005\u7ed5\u8fc7\u6ce8\u518c\u4e2d\u5fc3\u76f4\u63a5\u8bbf\u95ee\uff0c\u4fdd\u8bc1\u6ce8\u518c\u4e2d\u5fc3\u7684\u6388\u6743\u529f\u80fd\u6709\u6548\uff0c\u5982\u679c\u4f7f\u7528\u70b9\u5bf9\u70b9\u8c03\u7528\uff0c\u9700\u5173\u95ed\u4ee4\u724c\u529f\u80fd 2.0.0\u4ee5\u4e0a\u7248\u672c registry string \u53ef\u9009 \u7f3a\u7701\u5411\u6240\u6709registry\u6ce8\u518c \u914d\u7f6e\u5173\u8054 \u5411\u6307\u5b9a\u6ce8\u518c\u4e2d\u5fc3\u6ce8\u518c\uff0c\u5728\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u65f6\u4f7f\u7528\uff0c\u503c\u4e3a dubbo:registry \u7684id\u5c5e\u6027\uff0c\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3ID\u7528\u9017\u53f7\u5206\u9694\uff0c\u5982\u679c\u4e0d\u60f3\u5c06\u8be5\u670d\u52a1\u6ce8\u518c\u5230\u4efb\u4f55registry\uff0c\u53ef\u5c06\u503c\u8bbe\u4e3aN/A 2.0.0\u4ee5\u4e0a\u7248\u672c provider string \u53ef\u9009 \u7f3a\u7701\u4f7f\u7528\u7b2c\u4e00\u4e2aprovider\u914d\u7f6e \u914d\u7f6e\u5173\u8054 \u6307\u5b9aprovider\uff0c\u503c\u4e3a dubbo:provider \u7684id\u5c5e\u6027 2.0.0\u4ee5\u4e0a\u7248\u672c deprecated deprecated boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u662f\u5426\u8fc7\u65f6\uff0c\u5982\u679c\u8bbe\u4e3atrue\uff0c\u6d88\u8d39\u65b9\u5f15\u7528\u65f6\u5c06\u6253\u5370\u670d\u52a1\u8fc7\u65f6\u8b66\u544aerror\u65e5\u5fd7 2.0.5\u4ee5\u4e0a\u7248\u672c dynamic dynamic boolean \u53ef\u9009 true \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u662f\u5426\u52a8\u6001\u6ce8\u518c\uff0c\u5982\u679c\u8bbe\u4e3afalse\uff0c\u6ce8\u518c\u540e\u5c06\u663e\u793a\u540edisable\u72b6\u6001\uff0c\u9700\u4eba\u5de5\u542f\u7528\uff0c\u5e76\u4e14\u670d\u52a1\u63d0\u4f9b\u8005\u505c\u6b62\u65f6\uff0c\u4e5f\u4e0d\u4f1a\u81ea\u52a8\u53d6\u6d88\u518c\uff0c\u9700\u4eba\u5de5\u7981\u7528\u3002 2.0.5\u4ee5\u4e0a\u7248\u672c accesslog accesslog string/boolean \u53ef\u9009 false \u670d\u52a1\u6cbb\u7406 \u8bbe\u4e3atrue\uff0c\u5c06\u5411logger\u4e2d\u8f93\u51fa\u8bbf\u95ee\u65e5\u5fd7\uff0c\u4e5f\u53ef\u586b\u5199\u8bbf\u95ee\u65e5\u5fd7\u6587\u4ef6\u8def\u5f84\uff0c\u76f4\u63a5\u628a\u8bbf\u95ee\u65e5\u5fd7\u8f93\u51fa\u5230\u6307\u5b9a\u6587\u4ef6 2.0.5\u4ee5\u4e0a\u7248\u672c owner owner string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u8d1f\u8d23\u4eba\uff0c\u7528\u4e8e\u670d\u52a1\u6cbb\u7406\uff0c\u8bf7\u586b\u5199\u8d1f\u8d23\u4eba\u516c\u53f8\u90ae\u7bb1\u524d\u7f00 2.0.5\u4ee5\u4e0a\u7248\u672c document document string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u6587\u6863URL 2.0.5\u4ee5\u4e0a\u7248\u672c weight weight int \u53ef\u9009 \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u6743\u91cd 2.0.5\u4ee5\u4e0a\u7248\u672c executes executes int \u53ef\u9009 0 \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u63d0\u4f9b\u8005\u6bcf\u670d\u52a1\u6bcf\u65b9\u6cd5\u6700\u5927\u53ef\u5e76\u884c\u6267\u884c\u8bf7\u6c42\u6570 2.0.5\u4ee5\u4e0a\u7248\u672c proxy proxy string \u53ef\u9009 javassist \u6027\u80fd\u8c03\u4f18 \u751f\u6210\u52a8\u6001\u4ee3\u7406\u65b9\u5f0f\uff0c\u53ef\u9009\uff1ajdk/javassist 2.0.5\u4ee5\u4e0a\u7248\u672c cluster cluster string \u53ef\u9009 failover \u6027\u80fd\u8c03\u4f18 \u96c6\u7fa4\u65b9\u5f0f\uff0c\u53ef\u9009\uff1afailover/failfast/failsafe/failback/forking 2.0.5\u4ee5\u4e0a\u7248\u672c filter service.filter string \u53ef\u9009 default \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u63d0\u4f9b\u65b9\u8fdc\u7a0b\u8c03\u7528\u8fc7\u7a0b\u62e6\u622a\u5668\u540d\u79f0\uff0c\u591a\u4e2a\u540d\u79f0\u7528\u9017\u53f7\u5206\u9694 2.0.5\u4ee5\u4e0a\u7248\u672c listener exporter.listener string \u53ef\u9009 default \u6027\u80fd\u8c03\u4f18 \u670d\u52a1\u63d0\u4f9b\u65b9\u5bfc\u51fa\u670d\u52a1\u76d1\u542c\u5668\u540d\u79f0\uff0c\u591a\u4e2a\u540d\u79f0\u7528\u9017\u53f7\u5206\u9694 protocol string \u53ef\u9009 \u914d\u7f6e\u5173\u8054 \u4f7f\u7528\u6307\u5b9a\u7684\u534f\u8bae\u66b4\u9732\u670d\u52a1\uff0c\u5728\u591a\u534f\u8bae\u65f6\u4f7f\u7528\uff0c\u503c\u4e3a dubbo:protocol \u7684id\u5c5e\u6027\uff0c\u591a\u4e2a\u534f\u8baeID\u7528\u9017\u53f7\u5206\u9694 2.0.5\u4ee5\u4e0a\u7248\u672c layer layer string \u53ef\u9009 \u670d\u52a1\u6cbb\u7406 \u670d\u52a1\u63d0\u4f9b\u8005\u6240\u5728\u7684\u5206\u5c42\u3002\u5982\uff1abiz\u3001dao\u3001intl:web\u3001china:acton\u3002 2.0.7\u4ee5\u4e0a\u7248\u672c register register boolean \u53ef\u9009 true \u670d\u52a1\u6cbb\u7406 \u8be5\u534f\u8bae\u7684\u670d\u52a1\u662f\u5426\u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3 2.0.8\u4ee5\u4e0a\u7248\u672c","title":"dubbo:service"},{"location":"user/references/xml/introduction/","text":"schema \u914d\u7f6e\u53c2\u8003\u624b\u518c \u8fd9\u91cc\u4ee5 XML Config [^1] \u4e3a\u51c6\uff0c\u5217\u4e3e\u6240\u6709\u914d\u7f6e\u9879 [^2]\u3002\u5176\u5b83\u914d\u7f6e\u65b9\u5f0f\uff0c\u8bf7\u53c2\u89c1\u76f8\u5e94\u8f6c\u6362\u5173\u7cfb\uff1a \u5c5e\u6027\u914d\u7f6e \uff0c \u6ce8\u89e3\u914d\u7f6e \uff0c API \u914d\u7f6e \u3002 \u6240\u6709\u914d\u7f6e\u9879\u5206\u4e3a\u4e09\u5927\u7c7b\uff0c\u53c2\u89c1\u4e0b\u8868\u4e2d\u7684\"\u4f5c\u7528\" \u4e00\u5217\u3002 \u670d\u52a1\u53d1\u73b0\uff1a\u8868\u793a\u8be5\u914d\u7f6e\u9879\u7528\u4e8e\u670d\u52a1\u7684\u6ce8\u518c\u4e0e\u53d1\u73b0\uff0c\u76ee\u7684\u662f\u8ba9\u6d88\u8d39\u65b9\u627e\u5230\u63d0\u4f9b\u65b9\u3002 \u670d\u52a1\u6cbb\u7406\uff1a\u8868\u793a\u8be5\u914d\u7f6e\u9879\u7528\u4e8e\u6cbb\u7406\u670d\u52a1\u95f4\u7684\u5173\u7cfb\uff0c\u6216\u4e3a\u5f00\u53d1\u6d4b\u8bd5\u63d0\u4f9b\u4fbf\u5229\u6761\u4ef6\u3002 \u6027\u80fd\u8c03\u4f18\uff1a\u8868\u793a\u8be5\u914d\u7f6e\u9879\u7528\u4e8e\u8c03\u4f18\u6027\u80fd\uff0c\u4e0d\u540c\u7684\u9009\u9879\u5bf9\u6027\u80fd\u4f1a\u4ea7\u751f\u5f71\u54cd\u3002 \u6240\u6709\u914d\u7f6e\u6700\u7ec8\u90fd\u5c06\u8f6c\u6362\u4e3a URL [^3] \u8868\u793a\uff0c\u5e76\u7531\u670d\u52a1\u63d0\u4f9b\u65b9\u751f\u6210\uff0c\u7ecf\u6ce8\u518c\u4e2d\u5fc3\u4f20\u9012\u7ed9\u6d88\u8d39\u65b9\uff0c\u5404\u5c5e\u6027\u5bf9\u5e94 URL \u7684\u53c2\u6570\uff0c\u53c2\u89c1\u914d\u7f6e\u9879\u4e00\u89c8\u8868\u4e2d\u7684 \"\u5bf9\u5e94URL\u53c2\u6570\" \u5217\u3002 [^1]: XML Schema: http://dubbo.apache.org/schema/dubbo/dubbo.xsd [^2]: \u6ce8\u610f\uff1a\u53ea\u6709 group\uff0cinterface\uff0cversion \u662f\u670d\u52a1\u7684\u5339\u914d\u6761\u4ef6\uff0c\u4e09\u8005\u51b3\u5b9a\u662f\u4e0d\u662f\u540c\u4e00\u4e2a\u670d\u52a1\uff0c\u5176\u5b83\u914d\u7f6e\u9879\u5747\u4e3a\u8c03\u4f18\u548c\u6cbb\u7406\u53c2\u6570\u3002 [^3]: URL \u683c\u5f0f\uff1a protocol://username:password@host:port/path?key=value key=value","title":"schema \u914d\u7f6e\u53c2\u8003\u624b\u518c"},{"location":"user/references/xml/introduction/#schema","text":"\u8fd9\u91cc\u4ee5 XML Config [^1] \u4e3a\u51c6\uff0c\u5217\u4e3e\u6240\u6709\u914d\u7f6e\u9879 [^2]\u3002\u5176\u5b83\u914d\u7f6e\u65b9\u5f0f\uff0c\u8bf7\u53c2\u89c1\u76f8\u5e94\u8f6c\u6362\u5173\u7cfb\uff1a \u5c5e\u6027\u914d\u7f6e \uff0c \u6ce8\u89e3\u914d\u7f6e \uff0c API \u914d\u7f6e \u3002 \u6240\u6709\u914d\u7f6e\u9879\u5206\u4e3a\u4e09\u5927\u7c7b\uff0c\u53c2\u89c1\u4e0b\u8868\u4e2d\u7684\"\u4f5c\u7528\" \u4e00\u5217\u3002 \u670d\u52a1\u53d1\u73b0\uff1a\u8868\u793a\u8be5\u914d\u7f6e\u9879\u7528\u4e8e\u670d\u52a1\u7684\u6ce8\u518c\u4e0e\u53d1\u73b0\uff0c\u76ee\u7684\u662f\u8ba9\u6d88\u8d39\u65b9\u627e\u5230\u63d0\u4f9b\u65b9\u3002 \u670d\u52a1\u6cbb\u7406\uff1a\u8868\u793a\u8be5\u914d\u7f6e\u9879\u7528\u4e8e\u6cbb\u7406\u670d\u52a1\u95f4\u7684\u5173\u7cfb\uff0c\u6216\u4e3a\u5f00\u53d1\u6d4b\u8bd5\u63d0\u4f9b\u4fbf\u5229\u6761\u4ef6\u3002 \u6027\u80fd\u8c03\u4f18\uff1a\u8868\u793a\u8be5\u914d\u7f6e\u9879\u7528\u4e8e\u8c03\u4f18\u6027\u80fd\uff0c\u4e0d\u540c\u7684\u9009\u9879\u5bf9\u6027\u80fd\u4f1a\u4ea7\u751f\u5f71\u54cd\u3002 \u6240\u6709\u914d\u7f6e\u6700\u7ec8\u90fd\u5c06\u8f6c\u6362\u4e3a URL [^3] \u8868\u793a\uff0c\u5e76\u7531\u670d\u52a1\u63d0\u4f9b\u65b9\u751f\u6210\uff0c\u7ecf\u6ce8\u518c\u4e2d\u5fc3\u4f20\u9012\u7ed9\u6d88\u8d39\u65b9\uff0c\u5404\u5c5e\u6027\u5bf9\u5e94 URL \u7684\u53c2\u6570\uff0c\u53c2\u89c1\u914d\u7f6e\u9879\u4e00\u89c8\u8868\u4e2d\u7684 \"\u5bf9\u5e94URL\u53c2\u6570\" \u5217\u3002 [^1]: XML Schema: http://dubbo.apache.org/schema/dubbo/dubbo.xsd [^2]: \u6ce8\u610f\uff1a\u53ea\u6709 group\uff0cinterface\uff0cversion \u662f\u670d\u52a1\u7684\u5339\u914d\u6761\u4ef6\uff0c\u4e09\u8005\u51b3\u5b9a\u662f\u4e0d\u662f\u540c\u4e00\u4e2a\u670d\u52a1\uff0c\u5176\u5b83\u914d\u7f6e\u9879\u5747\u4e3a\u8c03\u4f18\u548c\u6cbb\u7406\u53c2\u6570\u3002 [^3]: URL \u683c\u5f0f\uff1a protocol://username:password@host:port/path?key=value key=value","title":"schema \u914d\u7f6e\u53c2\u8003\u624b\u518c"},{"location":"user/versions/","text":"\u7248\u672c\u4e0e\u5347\u7ea7 2.7.x\u5347\u7ea7\u6b65\u9aa4\u53ca\u6ce8\u610f\u4e8b\u9879","title":"\u7248\u672c\u4e0e\u5347\u7ea7"},{"location":"user/versions/#_1","text":"2.7.x\u5347\u7ea7\u6b65\u9aa4\u53ca\u6ce8\u610f\u4e8b\u9879","title":"\u7248\u672c\u4e0e\u5347\u7ea7"},{"location":"user/versions/version-270/","text":"\u5347\u7ea7\u4e0e\u53ef\u80fd\u7684\u517c\u5bb9\u6027\u95ee\u9898\u603b\u7ed3 \u73af\u5883\u8981\u6c42\uff1a\u9700\u8981 Java 8 \u53ca\u4ee5\u4e0a\u7248\u672c\u3002 2.7.0\u7248\u672c\u5728\u6539\u9020\u7684\u8fc7\u7a0b\u4e2d\u9075\u5faa\u4e86\u4e00\u4e2a\u539f\u5219\uff0c\u5373 \u4fdd\u6301\u4e0e\u4f4e\u7248\u672c\u7684\u517c\u5bb9\u6027\uff0c\u56e0\u6b64\u4ece\u529f\u80fd\u5c42\u9762\u6765\u8bf4\u5b83\u662f\u4e0e2.6.x\u53ca\u66f4\u4f4e\u7248\u672c\u5b8c\u5168\u517c\u5bb9\u7684 \uff0c\u800c\u63a5\u4e0b\u6765\u5c06\u8981\u63d0\u5230\u7684\u517c\u5bb9\u6027\u95ee\u9898\u4e3b\u8981\u662f \u5305\u91cd\u547d\u540d \u5e26\u6765\u7684\u3002\u53e6\u5916\uff0c\u867d\u7136\u529f\u80fd\u7528\u6cd5\u4fdd\u6301\u5411\u540e\u517c\u5bb9\uff0c\u4f46\u53c2\u8003\u672c\u6587\u80fd\u5e2e\u52a9\u60a8\u5c3d\u5feb\u7528\u52302.7.0\u7248\u672c\u7684\u65b0\u7279\u6027\u3002 \u5347\u7ea7\u6b65\u9aa4 \u5347\u7ea7pom\u52302.7.0\uff08\u4ee5all-in-one\u4f9d\u8d56\u4e3a\u4f8b\uff09\u3002 properties dubbo.version 2.7.0 /dubbo.version /properties dependencyManagement dependencies dependency groupId org.apache.dubbo /groupId artifactId dubbo-dependencies-bom /artifactId version ${dubbo.version} /version type pom /type scope import /scope /dependency /dependencies /dependencyManagement dependencies dependency groupId org.apache.dubbo /groupId artifactId dubbo /artifactId version ${dubbo.version} /version /dependency dependency groupId io.netty /groupId artifactId netty-all /artifactId /dependency /dependencies \u5982\u679c\u5347\u7ea7\u4f9d\u8d56\u540e\u51fa\u73b0API\u6216SPI\u6269\u5c55\u76f8\u5173\u7684\u7f16\u8bd1\u9519\u8bef\uff0c\u8bf7\u53c2\u8003 \u5305\u517c\u5bb9\u6027\u95ee\u9898 \u6b64\u65f6\u91cd\u65b0\u90e8\u7f72\u5e94\u7528\uff0c\u6240\u6709\u9ed8\u8ba4\u884c\u4e3a\u548c2.6.x\u4fdd\u6301\u4e00\u81f4\uff0c\u5982\u679c\u8981\u7528\u52302.7\u7684\u65b0\u7279\u6027\uff0c\u5219\u9700\u8981\u7ee7\u7eed\u505a\u4ee5\u4e0b\u914d\u7f6e\uff08\u53ef\u9009\uff09\uff1a \u7b80\u5316\u7684URL \u914d\u7f6e\u5143\u6570\u636e\u4e2d\u5fc3 \u4f7f\u7528\u5916\u90e8\u5316\u914d\u7f6e \u670d\u52a1\u6cbb\u7406\u89c4\u5219 \u4f7f\u7528\u5f02\u6b65API \u4e0b\u9762\u6211\u4eec\u5c31\u5bf9\u8fd9\u51e0\u90e8\u5206\u7684\u914d\u7f6e\u5206\u522b\u505a\u8be6\u7ec6\u8bf4\u660e\u3002 \u7b80\u5316\u7684URL !-- simplified= true \u8868\u793a\u6ce8\u518c\u7b80\u5316\u7248\u7684URL\u5230Registry -- dubbo:registry address= zookeeper://127.0.0.1:2181 simplified= true / dubbo.registry.simplified=true \u5efa\u8bae\u5c06\u6b64\u914d\u7f6e\u96c6\u4e2d\u7ba1\u7406\uff0c\u53c2\u8003 \u5916\u90e8\u5316\u914d\u7f6e \u3002 URL\u7b80\u5316\u53ea\u662f\u5254\u9664\u4e86\u4e00\u4e9b\u7eaf\u7cb9\u7684\u67e5\u8be2\u7528\u7684\u53c2\u6570\uff0c\u5e76\u6ca1\u6709\u505a\u5927\u5200\u9614\u65a7\u7684\u670d\u52a1\u53d1\u73b0\u6a21\u578b\u6539\u9020\uff0c\u56e0\u6b64\u7cbe\u7b80\u540e\u7684URL\u5b8c\u5168\u53ef\u4ee5\u88ab2.6\u53ca\u4ee5\u4e0b\u7248\u672c\u7684\u6d88\u8d39\u7aef\u5b9e\u73b0\u670d\u52a1\u53d1\u73b0\u4e0e\u8c03\u7528\uff0c\u540c\u68372.7\u7248\u672c\u4e5f\u53ef\u4ee5\u53d1\u73b0\u548c\u8c03\u7528\u4f4e\u7248\u672c\u7684\u63d0\u4f9b\u8005\u3002 \u914d\u7f6e\u5143\u6570\u636e\u4e2d\u5fc3 dubbo:metadata-report address= redis://127.0.0.1:6379 / dubbo.metadataReport.address=redis://127.0.0.1:6379 \u5efa\u8bae\u5c06\u6b64\u914d\u7f6e\u96c6\u4e2d\u7ba1\u7406\uff0c\u53c2\u8003 \u5916\u90e8\u5316\u914d\u7f6e \u3002 \u5728\u6b64\u4e86\u89e3\u66f4\u591a \u5143\u6570\u636e\u4e2d\u5fc3 \u8bbe\u8ba1\u76ee\u7684\u4e0e\u7528\u9014\u3002 \u4f7f\u7528\u5916\u90e8\u5316\u914d\u7f6e \u9700\u8981\u5728\u9879\u76ee\u542f\u52a8\u524d\uff0c\u4f7f\u7528 \u6700\u65b0\u7248\u672cDubbo-OPS \u5b8c\u6210\u5916\u90e8\u5316\u914d\u7f6e\u8fc1\u79fb\uff0c\u7406\u8bba\u4e0a\u914d\u7f6e\u4e2d\u5fc3\u652f\u6301\u6240\u6709\u672c\u5730dubbo.properties\u6240\u652f\u6301\u7684\u914d\u7f6e\u9879\u3002 \u4ee5XML\u5f00\u53d1\u5f62\u5f0f\u4e3a\u4f8b\uff0c\u5047\u8bbe\u6211\u4eec\u672c\u5730\u6709\u5982\u4e0b\u914d\u7f6e\uff1a dubbo:application name= demo-provider / dubbo:config-center address= zookeeper://127.0.0.1:2181 / dubbo:registry address= zookeeper://127.0.0.1:2181 simplified= true / dubbo:metadata-report address= redis://127.0.0.1:6379 / dubbo:protocol name= dubbo port= 20880 / bean id= demoService class= org.apache.dubbo.samples.basic.impl.DemoServiceImpl / dubbo:service interface= org.apache.dubbo.samples.basic.api.DemoService ref= demoService / \u901a\u8fc7 OPS\u63a7\u5236\u53f0 \u5c06\u4ee5\u4e0b\u5168\u5c40\u914d\u7f6e\u8fc1\u79fb\u5230\u914d\u7f6e\u4e2d\u5fc3\uff0c\u6210\u4e3a\u6240\u6709\u5e94\u7528\u5171\u4eab\u7684\u914d\u7f6e\u3002 dubbo.registry.address=zookeeper://127.0.0.1:2181 dubbo.registry.simplified=true dubbo.metadataReport.address=redis://127.0.0.1:6379 dubbo.protocol.name=dubbo dubbo.protocol.port=20880 \u8fd9\u6837\u5e94\u7528\u5f00\u53d1\u8005\u53ea\u9700\u8981\u5173\u5fc3\u914d\u7f6e\u4e2d\u5fc3\u7684\u914d\u7f6e\u3002 dubbo:application name= demo-provider / dubbo:config-center address= zookeeper://127.0.0.1:2181 / bean id= demoService class= org.apache.dubbo.samples.basic.impl.DemoServiceImpl / dubbo:service interface= org.apache.dubbo.samples.basic.api.DemoService ref= demoService / \u8fd9\u91cc\u589e\u52a0\u4e86\u4e00\u7bc7 Dubbo\u914d\u7f6e\u65b9\u5f0f \u7684\u8bf4\u660e\u6587\u6863\uff0c\u8be6\u7ec6\u63cf\u8ff0\u4e86Dubbo\u5f53\u524d\u652f\u6301\u7684\u914d\u7f6e\u7c7b\u578b\u3001\u4e0d\u540c\u914d\u7f6e\u4e4b\u95f4\u7684\u8986\u76d6\u5173\u7cfb\u7b49\u3002 \u670d\u52a1\u6cbb\u7406\u89c4\u5219\u8fc1\u79fb 2.7\u7248\u672c\u53ef\u4ee5\u8bfb\u53d6\u5230\u8001\u7684\u6cbb\u7406\u89c4\u5219\uff0c\u56e0\u6b64\u4e0d\u7528\u62c5\u5fc3\u5347\u7ea72.7\u7684\u5e94\u7528\u540e\u8001\u89c4\u5219\u4f1a\u5931\u6548\uff0c\u53ef\u4ee5\u9009\u62e9\u5148\u5347\u7ea7\u4e0a\u7ebf\uff0c\u518d\u6162\u6162\u7684\u505a\u589e\u91cf\u5f0f\u89c4\u5219\u8fc1\u79fb\u3002 \u8bf7\u53c2\u8003 OPS - \u670d\u52a1\u6cbb\u7406 \u4e86\u89e3\u89c4\u5219\u914d\u7f6e\u65b9\u5f0f\uff0c\u8fd9\u91cc\u6211\u4eec\u91cd\u70b9\u5173\u6ce8\u7684\u662f\u89c4\u5219\u683c\u5f0f\uff0c\u4ee5\u4e0b\u63d0\u4f9b\u51e0\u4e2a\u7b80\u5355\u793a\u4f8b\uff1a \u6761\u4ef6\u8def\u7531 ```yaml scope: application force: true runtime: true enabled: true key: governance-conditionrouter-consumer conditions: - application=app1 = address= :20880 - application=app2 = address= :20881 ... ``` \u6807\u7b7e\u8def\u7531 ```yaml force: false runtime: true enabled: true key: governance-tagrouter-provider tags: - name: tag1 addresses: [\"127.0.0.1:20880\"] - name: tag2 addresses: [\"127.0.0.1:20881\"] ... ``` \u52a8\u6001\u914d\u7f6e\uff08\u8986\u76d6\u89c4\u5219\uff09 ```yaml scope: service key: org.apache.dubbo.samples.governance.api.DemoService enabled: true configs: - addresses: [0.0.0.0] side: consumer parameters: timeout: 6000 ... ``` \u5173\u4e8e\u6cbb\u7406\u89c4\u5219\u66f4\u591a\u8be6\u7ec6\u8bf4\u660e\uff0c\u8bf7\u53c2\u8003 \u8def\u7531\u89c4\u5219 \u548c \u8986\u76d6\u89c4\u5219 \u7528\u6237\u6587\u6863\u3002 \u4e5f\u53ef\u7ee7\u7eed\u4e86\u89e3 \u4f7f\u7528\u793a\u4f8b \u3002 \u4f7f\u7528\u5f02\u6b65API \u8fd9\u90e8\u5206\u7684\u63a5\u53e3\u548c\u4f4e\u7248\u672c\u540c\u6837\u662f\u5b8c\u5168\u517c\u5bb9\u7684\uff0c\u4f60\u4ec5\u987b\u5728\u6253\u7b97\u4f7f\u7528CompletableFuture \u63d0\u4f9b\u7684\u56de\u8c03\u6216\u8005\u5f02\u6b65\u7ec4\u88c5\u80fd\u529b\u65f6\uff0c\u518d\u8003\u8651\u5347\u7ea7\u8fd9\u90e8\u5206\u5185\u5bb9\u5373\u53ef\u3002 \u5b9a\u4e49CompletableFuture \u7c7b\u578b\u63a5\u53e3 \u540c\u6b65\u7b7e\u540d\u63a5\u53e3\u5b9e\u73b0Provider\u7aef\u5f02\u6b65\u6267\u884c \u611f\u77e5\u5f02\u6b65\u8fd4\u56de\u503c\u7684Filter\u94fe\u8def \u70b9\u51fb\u94fe\u63a5\uff0c\u4e86\u89e3\u5173\u4e8e\u5f02\u6b65API\u5982\u4f55\u4f7f\u7528\u7684\u66f4\u591a \u4f7f\u7528\u793a\u4f8b \u3002 \u5305\u540d\u6539\u9020 Maven\u5750\u6807 groupId \u7531 com.alibaba \u6539\u4e3a org.apache.dubbo package package \u7531 com.alibaba.dubbo \u6539\u4e3a org.apache.dubbo Maven\u5750\u6807\u5347\u7ea7\u6bd4\u8f83\u76f4\u89c2\uff0c\u53ea\u9700\u8981\u4fee\u6539\u76f8\u5e94\u7684pom\u6587\u4ef6\u5c31\u53ef\u4ee5\u4e86\uff1b\u800cpackage\u53d8\u66f4\u5219\u53ef\u80fd\u4f1a\u5e26\u6765\u7f16\u8bd1\u95ee\u9898\uff0c\u5347\u7ea7\u8fc7\u7a0b\u9700\u8981\u7528\u6237\u4fee\u6539\u4ee3\u7801\u3002\u56e0\u6b64\u4e3a\u4e86\u51cf\u5c11\u7528\u6237\u5347\u7ea7\u6210\u672c\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u505a\u5230\u6e10\u8fdb\u5f0f\u5347\u7ea7\uff0c2.7.0\u7248\u672c\u7ee7\u7eed\u4fdd\u7559\u4e86\u4e00\u4e9b\u5e38\u7528\u57fa\u7840API\u548cSPI com.alibaba.dubbo \u7684\u652f\u6301\u3002 API\u7f16\u7a0b\u63a5\u53e3 \u6ce8\u89e3 \u6ce8\u89e3 \u8bf4\u660e @Reference \u6d88\u8d39\u7aef\u670d\u52a1\u5f15\u7528\u6ce8\u89e3 @Service \u63d0\u4f9b\u7aef\u670d\u52a1\u66b4\u9732\u6ce8\u89e3 @EnableDubbo \u5176\u4ed6\u5e38\u7528Spring\u6ce8\u89e3API \u7f16\u7a0bAPI API \u8bf4\u660e ReferenceConfig Service\u914d\u7f6e\u91c7\u96c6\u548c\u5f15\u7528\u7f16\u7a0b\u63a5\u53e3 ServiceConfig Service\u914d\u7f6e\u91c7\u96c6\u548c\u66b4\u9732\u7f16\u7a0b\u63a5\u53e3 ApplicationConfig Application\u914d\u7f6e\u91c7\u96c6API RegistryConfig \u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e\u91c7\u96c6API ConsumerConfig \u6d88\u8d39\u7aef\u9ed8\u8ba4\u914d\u7f6e\u91c7\u96c6API ProviderConfig \u63d0\u4f9b\u7aef\u9ed8\u8ba4\u914d\u7f6e\u91c7\u96c6API ProtocolConfig RPC\u534f\u8bae\u914d\u7f6e\u91c7\u96c6API ArcumentConfig \u670d\u52a1\u53c2\u6570\u7ea7\u914d\u7f6e\u91c7\u96c6API MethodConfig \u670d\u52a1\u65b9\u6cd5\u7ea7\u914d\u7f6e\u91c7\u96c6API ModuleConfig \u670d\u52a1\u6cbb\u7406Module\u914d\u7f6e\u91c7\u96c6API MonitorConfig \u76d1\u63a7\u914d\u7f6e\u91c7\u96c6API RpcContext \u7f16\u7a0b\u4e0a\u4e0b\u6587API SPI\u6269\u5c55 \u5982\u679c\u516c\u53f8\u5185\u90e8\u6709\u7ef4\u62a4\u7684\u81ea\u5b9a\u4e49SPI\u6269\u5c55\u5e93\uff0c\u5728\u4e1a\u52a1\u5de5\u7a0b\u5347\u7ea7\u52302.7.0\u4e4b\u524d\uff0c\u8bf7\u52a1\u5fc5\u5148\u786e\u4fdd\u6269\u5c55\u5e93\u4e0e2.7.0\u7684\u517c\u5bb9\u6027\u3002\u5982\u679c\u53d1\u73b0\u6709\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u8bf7\u901a\u8fc7\u4fee\u6539\u5305\u540d\u5f15\u7528\u7684\u65b9\u5f0f\u5b8c\u6210\u5347\u7ea7\uff0c\u5e76\u91cd\u65b0\u6253\u5305\u3002 SPI\u6269\u5c55\u70b9 \u8bf4\u660e Registry \u5305\u62ec RegistryFactory , Registry , RegistryService \u7b49\u6269\u5c55\u70b9 Protocol RPC\u534f\u8bae\u6269\u5c55 Serialization \u5e8f\u5217\u5316\u534f\u8bae\u6269\u5c55 Cluster \u96c6\u7fa4\u5bb9\u9519\u7b56\u7565\u6269\u5c55\uff0c\u5982Failover, Failfast\u7b49 Loadbalance \u8d1f\u8f7d\u5747\u8861\u7b56\u7565\u6269\u5c55 Transporter \u4f20\u8f93\u6846\u67b6\u6269\u5c55\uff0c\u5982Netty\u7b49 Monitor \u76d1\u63a7\u4e2d\u5fc3\u6269\u5c55\uff0c\u5305\u62ecMonitorFactory, Monitor, MonitorService\u7b49 Router \u8def\u7531\u89c4\u5219\u6269\u5c55 Filter \u62e6\u622a\u5668\u6269\u5c55 FAQ \u5347\u7ea7\u540e\u542f\u52a8\u51fa\u73b0curator\u4f9d\u8d56\u62a5\u9519","title":"\u5347\u7ea7\u4e0e\u53ef\u80fd\u7684\u517c\u5bb9\u6027\u95ee\u9898\u603b\u7ed3"},{"location":"user/versions/version-270/#_1","text":"\u73af\u5883\u8981\u6c42\uff1a\u9700\u8981 Java 8 \u53ca\u4ee5\u4e0a\u7248\u672c\u3002 2.7.0\u7248\u672c\u5728\u6539\u9020\u7684\u8fc7\u7a0b\u4e2d\u9075\u5faa\u4e86\u4e00\u4e2a\u539f\u5219\uff0c\u5373 \u4fdd\u6301\u4e0e\u4f4e\u7248\u672c\u7684\u517c\u5bb9\u6027\uff0c\u56e0\u6b64\u4ece\u529f\u80fd\u5c42\u9762\u6765\u8bf4\u5b83\u662f\u4e0e2.6.x\u53ca\u66f4\u4f4e\u7248\u672c\u5b8c\u5168\u517c\u5bb9\u7684 \uff0c\u800c\u63a5\u4e0b\u6765\u5c06\u8981\u63d0\u5230\u7684\u517c\u5bb9\u6027\u95ee\u9898\u4e3b\u8981\u662f \u5305\u91cd\u547d\u540d \u5e26\u6765\u7684\u3002\u53e6\u5916\uff0c\u867d\u7136\u529f\u80fd\u7528\u6cd5\u4fdd\u6301\u5411\u540e\u517c\u5bb9\uff0c\u4f46\u53c2\u8003\u672c\u6587\u80fd\u5e2e\u52a9\u60a8\u5c3d\u5feb\u7528\u52302.7.0\u7248\u672c\u7684\u65b0\u7279\u6027\u3002","title":"\u5347\u7ea7\u4e0e\u53ef\u80fd\u7684\u517c\u5bb9\u6027\u95ee\u9898\u603b\u7ed3"},{"location":"user/versions/version-270/#_2","text":"\u5347\u7ea7pom\u52302.7.0\uff08\u4ee5all-in-one\u4f9d\u8d56\u4e3a\u4f8b\uff09\u3002 properties dubbo.version 2.7.0 /dubbo.version /properties dependencyManagement dependencies dependency groupId org.apache.dubbo /groupId artifactId dubbo-dependencies-bom /artifactId version ${dubbo.version} /version type pom /type scope import /scope /dependency /dependencies /dependencyManagement dependencies dependency groupId org.apache.dubbo /groupId artifactId dubbo /artifactId version ${dubbo.version} /version /dependency dependency groupId io.netty /groupId artifactId netty-all /artifactId /dependency /dependencies \u5982\u679c\u5347\u7ea7\u4f9d\u8d56\u540e\u51fa\u73b0API\u6216SPI\u6269\u5c55\u76f8\u5173\u7684\u7f16\u8bd1\u9519\u8bef\uff0c\u8bf7\u53c2\u8003 \u5305\u517c\u5bb9\u6027\u95ee\u9898 \u6b64\u65f6\u91cd\u65b0\u90e8\u7f72\u5e94\u7528\uff0c\u6240\u6709\u9ed8\u8ba4\u884c\u4e3a\u548c2.6.x\u4fdd\u6301\u4e00\u81f4\uff0c\u5982\u679c\u8981\u7528\u52302.7\u7684\u65b0\u7279\u6027\uff0c\u5219\u9700\u8981\u7ee7\u7eed\u505a\u4ee5\u4e0b\u914d\u7f6e\uff08\u53ef\u9009\uff09\uff1a \u7b80\u5316\u7684URL \u914d\u7f6e\u5143\u6570\u636e\u4e2d\u5fc3 \u4f7f\u7528\u5916\u90e8\u5316\u914d\u7f6e \u670d\u52a1\u6cbb\u7406\u89c4\u5219 \u4f7f\u7528\u5f02\u6b65API \u4e0b\u9762\u6211\u4eec\u5c31\u5bf9\u8fd9\u51e0\u90e8\u5206\u7684\u914d\u7f6e\u5206\u522b\u505a\u8be6\u7ec6\u8bf4\u660e\u3002","title":"\u5347\u7ea7\u6b65\u9aa4"},{"location":"user/versions/version-270/#url","text":"!-- simplified= true \u8868\u793a\u6ce8\u518c\u7b80\u5316\u7248\u7684URL\u5230Registry -- dubbo:registry address= zookeeper://127.0.0.1:2181 simplified= true / dubbo.registry.simplified=true \u5efa\u8bae\u5c06\u6b64\u914d\u7f6e\u96c6\u4e2d\u7ba1\u7406\uff0c\u53c2\u8003 \u5916\u90e8\u5316\u914d\u7f6e \u3002 URL\u7b80\u5316\u53ea\u662f\u5254\u9664\u4e86\u4e00\u4e9b\u7eaf\u7cb9\u7684\u67e5\u8be2\u7528\u7684\u53c2\u6570\uff0c\u5e76\u6ca1\u6709\u505a\u5927\u5200\u9614\u65a7\u7684\u670d\u52a1\u53d1\u73b0\u6a21\u578b\u6539\u9020\uff0c\u56e0\u6b64\u7cbe\u7b80\u540e\u7684URL\u5b8c\u5168\u53ef\u4ee5\u88ab2.6\u53ca\u4ee5\u4e0b\u7248\u672c\u7684\u6d88\u8d39\u7aef\u5b9e\u73b0\u670d\u52a1\u53d1\u73b0\u4e0e\u8c03\u7528\uff0c\u540c\u68372.7\u7248\u672c\u4e5f\u53ef\u4ee5\u53d1\u73b0\u548c\u8c03\u7528\u4f4e\u7248\u672c\u7684\u63d0\u4f9b\u8005\u3002","title":"\u7b80\u5316\u7684URL"},{"location":"user/versions/version-270/#_3","text":"dubbo:metadata-report address= redis://127.0.0.1:6379 / dubbo.metadataReport.address=redis://127.0.0.1:6379 \u5efa\u8bae\u5c06\u6b64\u914d\u7f6e\u96c6\u4e2d\u7ba1\u7406\uff0c\u53c2\u8003 \u5916\u90e8\u5316\u914d\u7f6e \u3002 \u5728\u6b64\u4e86\u89e3\u66f4\u591a \u5143\u6570\u636e\u4e2d\u5fc3 \u8bbe\u8ba1\u76ee\u7684\u4e0e\u7528\u9014\u3002","title":"\u914d\u7f6e\u5143\u6570\u636e\u4e2d\u5fc3"},{"location":"user/versions/version-270/#_4","text":"2.7\u7248\u672c\u53ef\u4ee5\u8bfb\u53d6\u5230\u8001\u7684\u6cbb\u7406\u89c4\u5219\uff0c\u56e0\u6b64\u4e0d\u7528\u62c5\u5fc3\u5347\u7ea72.7\u7684\u5e94\u7528\u540e\u8001\u89c4\u5219\u4f1a\u5931\u6548\uff0c\u53ef\u4ee5\u9009\u62e9\u5148\u5347\u7ea7\u4e0a\u7ebf\uff0c\u518d\u6162\u6162\u7684\u505a\u589e\u91cf\u5f0f\u89c4\u5219\u8fc1\u79fb\u3002 \u8bf7\u53c2\u8003 OPS - \u670d\u52a1\u6cbb\u7406 \u4e86\u89e3\u89c4\u5219\u914d\u7f6e\u65b9\u5f0f\uff0c\u8fd9\u91cc\u6211\u4eec\u91cd\u70b9\u5173\u6ce8\u7684\u662f\u89c4\u5219\u683c\u5f0f\uff0c\u4ee5\u4e0b\u63d0\u4f9b\u51e0\u4e2a\u7b80\u5355\u793a\u4f8b\uff1a \u6761\u4ef6\u8def\u7531 ```yaml scope: application force: true runtime: true enabled: true key: governance-conditionrouter-consumer conditions: - application=app1 = address= :20880 - application=app2 = address= :20881 ... ``` \u6807\u7b7e\u8def\u7531 ```yaml force: false runtime: true enabled: true key: governance-tagrouter-provider tags: - name: tag1 addresses: [\"127.0.0.1:20880\"] - name: tag2 addresses: [\"127.0.0.1:20881\"] ... ``` \u52a8\u6001\u914d\u7f6e\uff08\u8986\u76d6\u89c4\u5219\uff09 ```yaml scope: service key: org.apache.dubbo.samples.governance.api.DemoService enabled: true configs: - addresses: [0.0.0.0] side: consumer parameters: timeout: 6000 ... ``` \u5173\u4e8e\u6cbb\u7406\u89c4\u5219\u66f4\u591a\u8be6\u7ec6\u8bf4\u660e\uff0c\u8bf7\u53c2\u8003 \u8def\u7531\u89c4\u5219 \u548c \u8986\u76d6\u89c4\u5219 \u7528\u6237\u6587\u6863\u3002 \u4e5f\u53ef\u7ee7\u7eed\u4e86\u89e3 \u4f7f\u7528\u793a\u4f8b \u3002","title":"\u670d\u52a1\u6cbb\u7406\u89c4\u5219\u8fc1\u79fb"},{"location":"user/versions/version-270/#api","text":"\u8fd9\u90e8\u5206\u7684\u63a5\u53e3\u548c\u4f4e\u7248\u672c\u540c\u6837\u662f\u5b8c\u5168\u517c\u5bb9\u7684\uff0c\u4f60\u4ec5\u987b\u5728\u6253\u7b97\u4f7f\u7528CompletableFuture \u63d0\u4f9b\u7684\u56de\u8c03\u6216\u8005\u5f02\u6b65\u7ec4\u88c5\u80fd\u529b\u65f6\uff0c\u518d\u8003\u8651\u5347\u7ea7\u8fd9\u90e8\u5206\u5185\u5bb9\u5373\u53ef\u3002 \u5b9a\u4e49CompletableFuture \u7c7b\u578b\u63a5\u53e3 \u540c\u6b65\u7b7e\u540d\u63a5\u53e3\u5b9e\u73b0Provider\u7aef\u5f02\u6b65\u6267\u884c \u611f\u77e5\u5f02\u6b65\u8fd4\u56de\u503c\u7684Filter\u94fe\u8def \u70b9\u51fb\u94fe\u63a5\uff0c\u4e86\u89e3\u5173\u4e8e\u5f02\u6b65API\u5982\u4f55\u4f7f\u7528\u7684\u66f4\u591a \u4f7f\u7528\u793a\u4f8b \u3002","title":"\u4f7f\u7528\u5f02\u6b65API"},{"location":"user/versions/version-270/#api_1","text":"\u6ce8\u89e3 \u6ce8\u89e3 \u8bf4\u660e @Reference \u6d88\u8d39\u7aef\u670d\u52a1\u5f15\u7528\u6ce8\u89e3 @Service \u63d0\u4f9b\u7aef\u670d\u52a1\u66b4\u9732\u6ce8\u89e3 @EnableDubbo \u5176\u4ed6\u5e38\u7528Spring\u6ce8\u89e3API \u7f16\u7a0bAPI API \u8bf4\u660e ReferenceConfig Service\u914d\u7f6e\u91c7\u96c6\u548c\u5f15\u7528\u7f16\u7a0b\u63a5\u53e3 ServiceConfig Service\u914d\u7f6e\u91c7\u96c6\u548c\u66b4\u9732\u7f16\u7a0b\u63a5\u53e3 ApplicationConfig Application\u914d\u7f6e\u91c7\u96c6API RegistryConfig \u6ce8\u518c\u4e2d\u5fc3\u914d\u7f6e\u91c7\u96c6API ConsumerConfig \u6d88\u8d39\u7aef\u9ed8\u8ba4\u914d\u7f6e\u91c7\u96c6API ProviderConfig \u63d0\u4f9b\u7aef\u9ed8\u8ba4\u914d\u7f6e\u91c7\u96c6API ProtocolConfig RPC\u534f\u8bae\u914d\u7f6e\u91c7\u96c6API ArcumentConfig \u670d\u52a1\u53c2\u6570\u7ea7\u914d\u7f6e\u91c7\u96c6API MethodConfig \u670d\u52a1\u65b9\u6cd5\u7ea7\u914d\u7f6e\u91c7\u96c6API ModuleConfig \u670d\u52a1\u6cbb\u7406Module\u914d\u7f6e\u91c7\u96c6API MonitorConfig \u76d1\u63a7\u914d\u7f6e\u91c7\u96c6API RpcContext \u7f16\u7a0b\u4e0a\u4e0b\u6587API","title":"API\u7f16\u7a0b\u63a5\u53e3"},{"location":"user/versions/version-270/#spi","text":"\u5982\u679c\u516c\u53f8\u5185\u90e8\u6709\u7ef4\u62a4\u7684\u81ea\u5b9a\u4e49SPI\u6269\u5c55\u5e93\uff0c\u5728\u4e1a\u52a1\u5de5\u7a0b\u5347\u7ea7\u52302.7.0\u4e4b\u524d\uff0c\u8bf7\u52a1\u5fc5\u5148\u786e\u4fdd\u6269\u5c55\u5e93\u4e0e2.7.0\u7684\u517c\u5bb9\u6027\u3002\u5982\u679c\u53d1\u73b0\u6709\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u8bf7\u901a\u8fc7\u4fee\u6539\u5305\u540d\u5f15\u7528\u7684\u65b9\u5f0f\u5b8c\u6210\u5347\u7ea7\uff0c\u5e76\u91cd\u65b0\u6253\u5305\u3002 SPI\u6269\u5c55\u70b9 \u8bf4\u660e Registry \u5305\u62ec RegistryFactory , Registry , RegistryService \u7b49\u6269\u5c55\u70b9 Protocol RPC\u534f\u8bae\u6269\u5c55 Serialization \u5e8f\u5217\u5316\u534f\u8bae\u6269\u5c55 Cluster \u96c6\u7fa4\u5bb9\u9519\u7b56\u7565\u6269\u5c55\uff0c\u5982Failover, Failfast\u7b49 Loadbalance \u8d1f\u8f7d\u5747\u8861\u7b56\u7565\u6269\u5c55 Transporter \u4f20\u8f93\u6846\u67b6\u6269\u5c55\uff0c\u5982Netty\u7b49 Monitor \u76d1\u63a7\u4e2d\u5fc3\u6269\u5c55\uff0c\u5305\u62ecMonitorFactory, Monitor, MonitorService\u7b49 Router \u8def\u7531\u89c4\u5219\u6269\u5c55 Filter \u62e6\u622a\u5668\u6269\u5c55","title":"SPI\u6269\u5c55"},{"location":"user/versions/version-270/#faq","text":"\u5347\u7ea7\u540e\u542f\u52a8\u51fa\u73b0curator\u4f9d\u8d56\u62a5\u9519","title":"FAQ"}]}