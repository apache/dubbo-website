{
  "filename": "dubbo-fescar.md",
  "__html": "<h1>How to use Fescar to ensure consistency between Dubbo Microservices</h1>\n<h2>Use case</h2>\n<p>A business logic for user purchasing commodities. The whole business logic is powered by 3 microservices:</p>\n<ul>\n<li>Storage service: deduct storage count on given commodity.</li>\n<li>Order service: create order according to purchase request.</li>\n<li>Account service: debit the balance of user's account.</li>\n</ul>\n<h3>Architecture</h3>\n<p><img src=\"../../img/blog/fescar/fescar-1.png\" alt=\"Architecture\"></p>\n<h3>StorageService</h3>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">StorageService</span> </span>{\n\n    <span class=\"hljs-comment\">/**\n     * deduct storage count\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deduct</span><span class=\"hljs-params\">(String commodityCode, <span class=\"hljs-keyword\">int</span> count)</span></span>;\n}\n</code></pre>\n<h3>OrderService</h3>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">OrderService</span> </span>{\n\n    <span class=\"hljs-comment\">/**\n     * create order\n     */</span>\n    <span class=\"hljs-function\">Order <span class=\"hljs-title\">create</span><span class=\"hljs-params\">(String userId, String commodityCode, <span class=\"hljs-keyword\">int</span> orderCount)</span></span>;\n}\n</code></pre>\n<h3>AccountService</h3>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">AccountService</span> </span>{\n\n    <span class=\"hljs-comment\">/**\n     * debit balance of user's account\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">debit</span><span class=\"hljs-params\">(String userId, <span class=\"hljs-keyword\">int</span> money)</span></span>;\n}\n</code></pre>\n<h3>Main business logic</h3>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BusinessServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">BusinessService</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> StorageService storageService;\n\n    <span class=\"hljs-keyword\">private</span> OrderService orderService;\n\n    <span class=\"hljs-comment\">/**\n     * purchase\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">purchase</span><span class=\"hljs-params\">(String userId, String commodityCode, <span class=\"hljs-keyword\">int</span> orderCount)</span> </span>{\n\n        storageService.deduct(commodityCode, orderCount);\n\n        orderService.create(userId, commodityCode, orderCount);\n    }\n}\n</code></pre>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StorageServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">StorageService</span> </span>{\n\n  <span class=\"hljs-keyword\">private</span> StorageDAO storageDAO;\n  \n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deduct</span><span class=\"hljs-params\">(String commodityCode, <span class=\"hljs-keyword\">int</span> count)</span> </span>{\n        Storage storage = <span class=\"hljs-keyword\">new</span> Storage();\n        storage.setCount(count);\n        storage.setCommodityCode(commodityCode);\n        storageDAO.update(storage);\n    }\n}\n</code></pre>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">OrderServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">OrderService</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> OrderDAO orderDAO;\n\n    <span class=\"hljs-keyword\">private</span> AccountService accountService;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Order <span class=\"hljs-title\">create</span><span class=\"hljs-params\">(String userId, String commodityCode, <span class=\"hljs-keyword\">int</span> orderCount)</span> </span>{\n\n        <span class=\"hljs-keyword\">int</span> orderMoney = calculate(commodityCode, orderCount);\n\n        accountService.debit(userId, orderMoney);\n\n        Order order = <span class=\"hljs-keyword\">new</span> Order();\n        order.userId = userId;\n        order.commodityCode = commodityCode;\n        order.count = orderCount;\n        order.money = orderMoney;\n\n        <span class=\"hljs-keyword\">return</span> orderDAO.insert(order);\n    }\n}\n</code></pre>\n<h2>Distributed Transaction Solution with Fescar</h2>\n<p><img src=\"../../img/blog/fescar/fescar-2.png\" alt=\"undefined\"></p>\n<p>We just need an annotation <code>@GlobalTransactional</code> on business method:</p>\n<pre><code class=\"language-java\">\n    <span class=\"hljs-meta\">@GlobalTransactional</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">purchase</span><span class=\"hljs-params\">(String userId, String commodityCode, <span class=\"hljs-keyword\">int</span> orderCount)</span> </span>{\n        ......\n    }\n</code></pre>\n<h2>Example powered by Dubbo + Fescar</h2>\n<h3>Step 1: Setup database</h3>\n<ul>\n<li>Requirement: MySQL with InnoDB engine.</li>\n</ul>\n<p><strong>Note:</strong> In fact, there should be 3 database for the 3 services in the example use case. However, we can just create one database and configure 3 data sources for simple.</p>\n<p>Modify Spring XML with the database URL/username/password you just created.</p>\n<p>dubbo-account-service.xml\ndubbo-order-service.xml\ndubbo-storage-service.xml</p>\n<pre><code class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"url\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"jdbc:mysql://x.x.x.x:3306/xxx\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"username\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"xxx\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"password\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"xxx\"</span> /&gt;</span>\n</code></pre>\n<h3>Step 2: Create undo_log table for Fescar</h3>\n<p><code>UNDO_LOG</code> table is required by Fescar AT mode.</p>\n<pre><code class=\"language-sql\"><span class=\"hljs-comment\">-- Note that when Fescar version is upgraded to 0.3.0+, it is changed from the previous normal index to the unique index.</span>\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`undo_log`</span> (\n  <span class=\"hljs-string\">`id`</span> <span class=\"hljs-built_in\">bigint</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> AUTO_INCREMENT,\n  <span class=\"hljs-string\">`branch_id`</span> <span class=\"hljs-built_in\">bigint</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`xid`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">100</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`rollback_info`</span> longblob <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`log_status`</span> <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`log_created`</span> datetime <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`log_modified`</span> datetime <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`ext`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">100</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\n  PRIMARY <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-string\">`id`</span>),\n  <span class=\"hljs-keyword\">UNIQUE</span> <span class=\"hljs-keyword\">KEY</span> <span class=\"hljs-string\">`ux_undo_log`</span> (<span class=\"hljs-string\">`xid`</span>,<span class=\"hljs-string\">`branch_id`</span>)\n) <span class=\"hljs-keyword\">ENGINE</span>=<span class=\"hljs-keyword\">InnoDB</span> AUTO_INCREMENT=<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">CHARSET</span>=utf8;\n</code></pre>\n<h3>Step 3: Create tables for example business</h3>\n<pre><code class=\"language-sql\">\n<span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-keyword\">IF</span> <span class=\"hljs-keyword\">EXISTS</span> <span class=\"hljs-string\">`storage_tbl`</span>;\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`storage_tbl`</span> (\n  <span class=\"hljs-string\">`id`</span> <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> AUTO_INCREMENT,\n  <span class=\"hljs-string\">`commodity_code`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`count`</span> <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-number\">0</span>,\n  PRIMARY <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-string\">`id`</span>),\n  <span class=\"hljs-keyword\">UNIQUE</span> <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-string\">`commodity_code`</span>)\n) <span class=\"hljs-keyword\">ENGINE</span>=<span class=\"hljs-keyword\">InnoDB</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">CHARSET</span>=utf8;\n\n\n<span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-keyword\">IF</span> <span class=\"hljs-keyword\">EXISTS</span> <span class=\"hljs-string\">`order_tbl`</span>;\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`order_tbl`</span> (\n  <span class=\"hljs-string\">`id`</span> <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> AUTO_INCREMENT,\n  <span class=\"hljs-string\">`user_id`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`commodity_code`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`count`</span> <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-string\">`money`</span> <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-number\">0</span>,\n  PRIMARY <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-string\">`id`</span>)\n) <span class=\"hljs-keyword\">ENGINE</span>=<span class=\"hljs-keyword\">InnoDB</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">CHARSET</span>=utf8;\n\n\n<span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-keyword\">IF</span> <span class=\"hljs-keyword\">EXISTS</span> <span class=\"hljs-string\">`account_tbl`</span>;\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`account_tbl`</span> (\n  <span class=\"hljs-string\">`id`</span> <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> AUTO_INCREMENT,\n  <span class=\"hljs-string\">`user_id`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\n  <span class=\"hljs-string\">`money`</span> <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-number\">0</span>,\n  PRIMARY <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-string\">`id`</span>)\n) <span class=\"hljs-keyword\">ENGINE</span>=<span class=\"hljs-keyword\">InnoDB</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">CHARSET</span>=utf8;\n</code></pre>\n<h3>Step 4: Start Fescar-Server</h3>\n<ul>\n<li>Download server <a href=\"https://github.com/alibaba/fescar/releases\">package</a>, unzip it.</li>\n<li>Start Fescar-Server</li>\n</ul>\n<pre><code class=\"language-shell\">sh fescar-server.sh $LISTEN_PORT $PATH_FOR_PERSISTENT_DATA\n\ne.g.\n\nsh fescar-server.sh 8091 /home/admin/fescar/data/\n</code></pre>\n<h3>Step 5: Run example</h3>\n<ul>\n<li>Start AccountService (<a href=\"https://github.com/fescar-group/fescar-samples/blob/master/dubbo/src/main/java/com/alibaba/fescar/samples/dubbo/starter/DubboAccountServiceStarter.java\">DubboAccountServiceStarter</a>).</li>\n<li>Start StorageService (<a href=\"https://github.com/fescar-group/fescar-samples/blob/master/dubbo/src/main/java/com/alibaba/fescar/samples/dubbo/starter/DubboStorageServiceStarter.java\">DubboStorageServiceStarter</a>).</li>\n<li>Start OrderService (<a href=\"https://github.com/fescar-group/fescar-samples/blob/master/dubbo/src/main/java/com/alibaba/fescar/samples/dubbo/starter/DubboOrderServiceStarter.java\">DubboOrderServiceStarter</a>).</li>\n<li>Run BusinessService for test (<a href=\"https://github.com/fescar-group/fescar-samples/blob/master/dubbo/src/main/java/com/alibaba/fescar/samples/dubbo/starter/DubboBusinessTester.java\">DubboBusinessTester</a>).</li>\n</ul>\n<h3>Related projects</h3>\n<ul>\n<li>fescar:          <a href=\"https://github.com/alibaba/fescar/\">https://github.com/alibaba/fescar/</a></li>\n<li>fescar-samples : <a href=\"https://github.com/fescar-group/fescar-samples\">https://github.com/fescar-group/fescar-samples</a></li>\n</ul>\n",
  "link": "/en-us/blog/dubbo-fescar.html",
  "meta": {
    "title": "How to use Fescar to ensure consistency between Dubbo Microservices",
    "keywords": "Dubbo,Fescar,Consistency",
    "description": "This article will introduce you how to use Fescar to ensure consistency between Dubbo Microservices."
  }
}