{
  "filename": "introduction-to-dubbo-qos.md",
  "__html": "<h1>Manipulating Services Dynamically via QoS</h1>\n<p>QoS (short form of <strong>Quality of Service</strong>), is a common terminology talking about network devices. For example, by adjusting and manipulating the weights of ports of a router dynamically via QoS, engineers could give priority to services running on these ports and make sure these services' quality and reliability.</p>\n<p>In Dubbo, QoS is used to query and manipulate services dynamically, like getting a list of active provider and consumer services, and launching or withdrawing services (i.e registering to or unregistering services from registration center).</p>\n<h2>Mechanism of QoS</h2>\n<p>From 2.5.8, QoS is introduced into Dubbo and is activated by default. All QoS's features are abstracted to commands, which could be executed to get responses from QoS.</p>\n<blockquote>\n<p>QoS is based on Netty4. In versions earlier than 2.6.x, Dubbo relies on Netty3, so you have to add Netty4 as a dependency explicitly to ensure that Netty4 works. If you generate a Dubbo application on <a href=\"http://start.dubbo.io\">http://start.dubbo.io</a>, there's no need to add configurations because Netty4 is listed as a dependency by default.</p>\n</blockquote>\n<p><img src=\"../../img/blog/qos-architecture.png\" alt=\"undefined\"></p>\n<p>The picture above shows how QoS works:</p>\n<ol>\n<li>Start and listen to a port (22222 by default).</li>\n<li>Choose a corresponding request handler by detecting the protocol (telnet or http) a request comply with.</li>\n<li>Decode and parse the request to generate corresponding command according to the protocol.</li>\n<li>Execute commands and return with responses.</li>\n</ol>\n<h3>QoS Commands:</h3>\n<p>Commands that QoS supports at the current moment include:</p>\n<ul>\n<li><code>help</code>, list available commands</li>\n<li><code>ls</code>: list all active provider services and consumer services</li>\n<li><code>online</code>: dynamically register a service or all services to registration center</li>\n<li><code>offline</code>: dynamically remove (unregister) a services or all services from registration center</li>\n<li><code>quit</code>: quit the current telnet session</li>\n</ul>\n<p>Now we are going to demonstrate how to manipulate services dynamically via QoS.</p>\n<h4>Access QoS via Telnet</h4>\n<p>Assuming that our Dubbo server has started, connect to it via telnet:</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> telnet localhost 22222</span>\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n  ?????????  ???    ??  ???????????  ???????????   ????????\n  ???   ???? ???    ???   ???    ???   ???    ??? ???    ???\n  ???    ??? ???    ???   ???    ???   ???    ??? ???    ???\n  ???    ??? ???    ???  ??????????   ??????????  ???    ???\n  ???    ??? ???    ??? ???????????  ???????????  ???    ???\n  ???    ??? ???    ???   ???    ???   ???    ??? ???    ???\n  ???   ???? ???    ???   ???    ???   ???    ??? ???    ???\n  ?????????  ?????????  ???????????  ???????????   ????????\n<span class=\"hljs-meta\">\n\ndubbo&gt;</span><span class=\"bash\"></span>\n</code></pre>\n<p>A <code>dubbo&gt;</code> prompt would show up once you connect to server. Now input <code>help</code>:</p>\n<pre><code class=\"language-sh\">dubbo&gt;<span class=\"hljs-built_in\">help</span>\n+---------+----------------------------------------------------------------------------------+\n|    <span class=\"hljs-built_in\">help</span> | <span class=\"hljs-built_in\">help</span> <span class=\"hljs-built_in\">command</span>                                                                     |\n+---------+----------------------------------------------------------------------------------+\n|      ls | ls service                                                                       |\n+---------+----------------------------------------------------------------------------------+\n| offline | offline dubbo                                                                    |\n+---------+----------------------------------------------------------------------------------+\n|  online | online dubbo                                                                     |\n+---------+----------------------------------------------------------------------------------+\n|    quit | quit telnet console                                                              |\n+---------+----------------------------------------------------------------------------------+\n\ndubbo&gt;\n</code></pre>\n<p>This command lists all available commands with explanations.</p>\n<p>You can also use <code>help</code> to a specific command to read examples of that command.</p>\n<pre><code class=\"language-sh\">dubbo&gt;<span class=\"hljs-built_in\">help</span> online\n+--------------+----------------------------------------------------------------------------------+\n| COMMAND NAME | online                                                                           |\n+--------------+----------------------------------------------------------------------------------+\n|      EXAMPLE | online dubbo                                                                     |\n|              | online xx.xx.xxx.service                                                         |\n+--------------+----------------------------------------------------------------------------------+\n</code></pre>\n<p>Use <code>ls</code> to check services' status:</p>\n<pre><code class=\"language-sh\">dubbo&gt;ls\nAs Provider side:\n+------------------------------------------+---+\n|           Provider Service Name          |PUB|\n+------------------------------------------+---+\n|org.apache.dubbo.demo.provider.DemoService| Y |\n+------------------------------------------+---+\nAs Consumer side:\n+---------------------+---+\n|Consumer Service Name|NUM|\n+---------------------+---+\n</code></pre>\n<p>There is a service named <code>org.apache.dubbo.demo.provider.DemoService</code> in the provider side. <code>PUB=Y</code> in the second columns means that the service has been published to the registration center, waiting to be called by the consumer side.</p>\n<p>Assuming that we need to withdraw a service dynamically, we can use <code>offline</code> command:</p>\n<pre><code>dubbo&gt;offline org.apache.dubbo.demo.provider.DemoService\nOK\n</code></pre>\n<p>You can see that the command responds with <code>OK</code>. Check the services' status using <code>ls</code>:</p>\n<pre><code class=\"language-sh\">dubbo&gt;ls\nAs Provider side:\n+------------------------------------------+---+\n|           Provider Service Name          |PUB|\n+------------------------------------------+---+\n|org.apache.dubbo.demo.provider.DemoService| N |\n+------------------------------------------+---+\nAs Consumer side:\n+---------------------+---+\n|Consumer Service Name|NUM|\n+---------------------+---+\n</code></pre>\n<p>You can see that <code>PUB</code> of <code>org.apache.dubbo.demo.provider.DemoService</code> has been set to <code>N</code>.</p>\n<p>Quit the current telnet session using <code>quit</code>:</p>\n<pre><code class=\"language-sh\">dubbo&gt;quit\nBYE!\nConnection closed by foreign host.\n</code></pre>\n<h4>Access QoS via HTTP</h4>\n<p>In the example above we performed an offline action to <code>org.apache.dubbo.demo.provider.DemoService</code>. Now we are going to demonstrate how to register the service above via HTTP.</p>\n<pre><code class=\"language-sh\">$ curl -i http://localhost:22222/online?service=org.apache.dubbo.demo.provider.DemoService\nHTTP/1.1 200 OK\nContent-Type: text/plain\nContent-Length: 2\n\nOK%\n</code></pre>\n<blockquote>\n<p>Beware of the parameters of online action. They need to be provided in the form of <code>key=value</code>. However, <code>key</code> would be ignored actually.</p>\n</blockquote>\n<p>The action responds with <code>OK</code>. Now use <code>ls</code> to check providers' status at the current moment.</p>\n<pre><code>$ curl -i http://localhost:22222/ls\nHTTP/1.1 200 OK\nContent-Type: text/plain\nContent-Length: 365\n\nAs Provider side:\n+------------------------------------------+---+\n|           Provider Service Name          |PUB|\n+------------------------------------------+---+\n|org.apache.dubbo.demo.provider.DemoService| Y |\n+------------------------------------------+---+\nAs Consumer side:\n+---------------------+---+\n|Consumer Service Name|NUM|\n+---------------------+---+\n</code></pre>\n<p>You can see that the service's <code>PUB</code> status has been changed to <code>Y</code>.</p>\n<h3>QoS' Parameters</h3>\n<p>You can use parameters that QoS provides to config its startup. These parameters include:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Explanation</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>qosEnable</td>\n<td>Activate QoS or not</td>\n<td>true</td>\n</tr>\n<tr>\n<td>qosPort</td>\n<td>The port QoS would bind to</td>\n<td>22222</td>\n</tr>\n<tr>\n<td>qosAcceptForeignIp</td>\n<td>Enable remote access or not</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Attention. From 2.6.4/2.7.0, <code>qosAcceptForeignIp</code> is set to <code>false</code> by default, because it's risky if this property is set to <code>true</code>. Think twice before you turn it on.</p>\n</blockquote>\n<p>You can configure these parameters in the following ways:</p>\n<ul>\n<li>System property</li>\n<li><code>dubbo.properties</code></li>\n<li>XML</li>\n<li>Spring-boot auto configuration</li>\n</ul>\n<p>They have priority in the following order: system property &gt; <code>dubbo.properties</code> &gt; XML &gt; spring-boot.</p>\n<h4>System Property</h4>\n<pre><code>-Ddubbo.application.qos.enable=true\n-Ddubbo.application.qos.port=33333\n-Ddubbo.application.qos.accept.foreign.ip=false\n</code></pre>\n<h4><code>Dubbo.properties</code></h4>\n<p>Create a <code>dubbo.properties</code> file in this directory <code>src/main/resources</code> in your project, and copy the following codes into it:</p>\n<pre><code>dubbo.application.qos.enable=true\ndubbo.application.qos.port=33333\ndubbo.application.qos.accept.foreign.ip=false\n</code></pre>\n<h4>XML</h4>\n<p>If you are going to config using XML, you can try this:</p>\n<pre><code class=\"language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?</span>xml version=<span class=\"hljs-string\">\"1.0\"</span> encoding=<span class=\"hljs-string\">\"UTF-8\"</span><span class=\"hljs-meta\">?&gt;</span></span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n       <span class=\"hljs-attr\">xmlns:dubbo</span>=<span class=\"hljs-string\">\"http://dubbo.apache.org/schema/dubbo\"</span>\n       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:application</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"demo-provider\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:parameter</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">\"qos.enable\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:parameter</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">\"qos.accept.foreign.ip\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"false\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:parameter</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">\"qos.port\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"33333\"</span>/&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dubbo:application</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"multicast://224.5.6.7:1234\"</span>/&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:protocol</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo\"</span> <span class=\"hljs-attr\">port</span>=<span class=\"hljs-string\">\"20880\"</span>/&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"org.apache.dubbo.demo.provider.DemoService\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"demoService\"</span>/&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"demoService\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.apache.dubbo.demo.provider.DemoServiceImpl\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<h4><code>spring-boot</code> auto configuration</h4>\n<p>If you are developing a spring-boot application, you can configure in <code>application.properties</code> or <code>application.yml</code>:</p>\n<pre><code>dubbo.application.qosEnable=true\ndubbo.application.qosPort=33333\ndubbo.application.qosAcceptForeignIp=false\n</code></pre>\n",
  "title": "Manipulating Services Dynamically via QoS",
  "keywords": "Dubbo, qos",
  "description": "This article introduces how to use Dubbo's QoS to achieve dynamic configuration."
}