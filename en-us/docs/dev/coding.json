{
  "filename": "coding.md",
  "__html": "<h1>Coding convention</h1>\n<h2>Code style</h2>\n<p>The source and JavaDoc of Dubbo follow below specifications:</p>\n<ul>\n<li><a href=\"http://www.oracle.com/technetwork/java/codeconvtoc-136057.html\">Code Conventions for the Java Programming Language</a></li>\n<li><a href=\"http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html\">How to Write Doc Comments for the Javadoc Tool</a></li>\n</ul>\n<h2>Exception and Logging</h2>\n<ul>\n<li>Log more context information as possible, such as error reason, error server address, client address, registry center address, dubbo version and so on.</li>\n<li>Try to put the main cause at the front, and display all other context information with key-value paris after it.</li>\n<li>Log is not printed where the exception is thrown, log level is determined by the final exception handler, and must print log when dicarding exception.</li>\n<li><code>ERROR</code> log means NEED TO ALARM, <code>WARN</code> log means COULD AUTO RECOVERY, <code>INFO</code> long mean NORMAL.</li>\n<li>Suggestion: config <code>ERROR</code> log in Monitor center for real-time alarm, summary and send <code>WARN</code> log weekly.</li>\n<li><code>RpcException</code> is the ONLY external exception of Dubbo，all internal exceptions mush be transfered to <code>RpcException</code> if need to throw out to user.</li>\n<li><code>RpcException</code> CAN NOT have sub-class, all types of information are identified with ErrorCode in order to keep compatible.</li>\n</ul>\n<h2>Configuration and URL</h2>\n<ul>\n<li>Use initials and camelCase for multiple words for object properties <sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>.</li>\n<li>Use lowercase and split by '-' for multiple words for config properties <sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup>.</li>\n<li>Use lowercase and split by '.' for multiple words for URL properties <sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup>.</li>\n<li>Use URL transfer parameters as possible, Don't define Map or other types, config information also transfer to URL style.</li>\n<li>Minimize URL nesting to keep URL simplicity.</li>\n</ul>\n<h2>Unit testing and integration testing</h2>\n<ul>\n<li>Use JUnit and EasyMock for unit testing, use TestNG for integration testing, use DBUnit for database testing.</li>\n<li>Don't put large integration test case in unit testing for running speed of unit test case.</li>\n<li>Use <code>try...finally</code> or <code>tearDown</code> to release resource for all test cases of unit testing.</li>\n<li>Minimize test case that with <code>while</code> loop which need waiting repsonse, use to make the logic in timer as function for timer and net testing.</li>\n<li>For fail-safe testing, unified use <code>LogUtil</code> assertion log output.</li>\n</ul>\n<h2>Extension point base class and AOP</h2>\n<ul>\n<li>AOP class should be named as <code>XxxWrapper</code>，Base class should be named as <code>AbstractXxx</code>.</li>\n<li>Use AOP for combine relationship between extension points, <code>ExtensionLoader</code> only loads extension points, including AOP extension.</li>\n<li>Try to use Ioc inject dependency of extension points, Don't direct dependent on factory method of <code>ExtensionLoader</code>.</li>\n<li>Try to use AOP implement the common action of extension points, instead of using base class, such as the <code>isAvailable</code> checking before load balancing, which is independent of load balance. Close the URL paramters which no need to check.</li>\n<li>Use base class for abstaction for a variety of similar types, such as RMI, Hessian 3rd protocols which have generated interface proxy, only transfer interface proxy to <code>Invoker</code> to complete bridging, and public base class can do the logic.</li>\n<li>The base class is also part of the SPI, and each extension should have a convenient base class support.</li>\n</ul>\n<h2>Module and packaging</h2>\n<ul>\n<li>Base on reusability for packaging, dividing the interface, base class and large implementation into separate modules.</li>\n<li>Put all interfaces under the base package of module, and put base classes in support subpackage, different implementations are placed under the subpackage named by extension point.</li>\n<li>Try to keep subpackage dependent on parent package, NOT reverse.</li>\n</ul>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>Java convention <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p>Spring convention <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p>Dubbo convention <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n"
}