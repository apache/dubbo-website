{
  "filename": "protocol.md",
  "__html": "<h1>Protocol Extension</h1>\n<h2>Summary</h2>\n<p>Extension to RPC protocol, hide details of remote call.</p>\n<p>Contract:</p>\n<ul>\n<li>When user calls <code>invoke()</code> method of <code>Invoker</code> object which's returned from <code>refer()</code> call, the protocol needs to correspondingly execute <code>invoke()</code> method of <code>Invoker</code> object passed from remote <code>export()</code> method associated with the same URL.</li>\n<li>Moreover, it's protocol's responsibility to implement <code>Invoker</code> which's returned from <code>refer()</code>. Generally speaking, protocol sends remote request in the <code>Invoker</code> implementation, but needs not to care about the <code>Invoker</code> passed into <code>export()</code> since the framework will implement the logic and pass in the instance.</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>Protocol does not need to care about the proxy of the business interface. The upper layer of the framework will convert <code>Invoker</code> into business interface.</li>\n<li>It is not a requirement that the protocol must use TCP for network communication. It could be file-sharing, IPC, or others.</li>\n</ul>\n<h2>Extension Interface</h2>\n<ul>\n<li><code>org.apache.dubbo.rpc.Protocol</code></li>\n<li><code>org.apache.dubbo.rpc.Exporter</code></li>\n<li><code>org.apache.dubbo.rpc.Invoker</code></li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Protocol</span> </span>{\n    <span class=\"hljs-comment\">/**\n     * Export remote service: &lt;br&gt;\n     * 1. Should save address info for the request when the protocol receives it: RpcContext.getContext().setRemoteAddress();&lt;br&gt;\n     * 2. export() must be implemented as idempotent, that is, it should not introduce side effect when the implementation gets called with the same Invoker for more than once.\n     * 3. Invoker is passed by the framework, and the protocol should not care about it. &lt;br&gt;\n     * \n     * <span class=\"hljs-doctag\">@param</span> &lt;T&gt; Service type\n     * <span class=\"hljs-doctag\">@param</span> invoker Service invoker\n     * <span class=\"hljs-doctag\">@return</span> exporter The reference of service exporter, used for cancelling service export.\n     * <span class=\"hljs-doctag\">@throws</span> RpcException throw when there's any error during service export, e.g. the port is occupied\n     */</span>\n    &lt;T&gt; <span class=\"hljs-function\">Exporter&lt;T&gt; <span class=\"hljs-title\">export</span><span class=\"hljs-params\">(Invoker&lt;T&gt; invoker)</span> <span class=\"hljs-keyword\">throws</span> RpcException</span>;\n \n    <span class=\"hljs-comment\">/**\n     * Reference remote service: &lt;br&gt;\n     * 1. When user calls `invoke()` method of `Invoker` object which's returned from `refer()` call, the protocol needs to correspondingly execute `invoke()` method of `Invoker` object passed from remote `export()` method associated with the same URL. &lt;br&gt;\n     * 2. It's protocol's responsibility to implement `Invoker` which's returned from `refer()`. Generally speaking, protocol sends remote request in the `Invoker` implementation. &lt;br&gt;\n     * 3. When there's check=false set in URL, the implementation must not throw exception but try to recover when connection fails.\n     * \n     * <span class=\"hljs-doctag\">@param</span> &lt;T&gt; Service type\n     * <span class=\"hljs-doctag\">@param</span> type Service type\n     * <span class=\"hljs-doctag\">@param</span> url URL address for the remote service\n     * <span class=\"hljs-doctag\">@return</span> invoker service's local proxy\n     * <span class=\"hljs-doctag\">@throws</span> RpcException throw when there's any error while connecting to the service provider\n     */</span>\n    &lt;T&gt; <span class=\"hljs-function\">Invoker&lt;T&gt; <span class=\"hljs-title\">refer</span><span class=\"hljs-params\">(Class&lt;T&gt; type, URL url)</span> <span class=\"hljs-keyword\">throws</span> RpcException</span>;\n \n}\n</code></pre>\n<h2>Extension Configuration</h2>\n<pre><code class=\"language-xml\"><span class=\"hljs-comment\">&lt;!-- declare protocol, if id is not set, then use the value of name for id --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:protocol</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"xxx1\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"xxx\"</span> /&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- reference protocol, if protocol's attribute is not set, then protocol configuration will be scanned automatically from ApplicationContext --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">protocol</span>=<span class=\"hljs-string\">\"xxx1\"</span> /&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- default value for referenced protocol, it will be used if protocol attribute is not configured in &lt;dubbo:service&gt; --&gt;</span> \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:provider</span> <span class=\"hljs-attr\">protocol</span>=<span class=\"hljs-string\">\"xxx1\"</span> /&gt;</span>\n</code></pre>\n<h2>Existing Protocol</h2>\n<ul>\n<li><code>org.apache.dubbo.rpc.injvm.InjvmProtocol</code></li>\n<li><code>org.apache.dubbo.rpc.dubbo.DubboProtocol</code></li>\n<li><code>org.apache.dubbo.rpc.rmi.RmiProtocol</code></li>\n<li><code>org.apache.dubbo.rpc.http.HttpProtocol</code></li>\n<li><code>org.apache.dubbo.rpc.http.hessian.HessianProtocol</code></li>\n</ul>\n<h2>Extension Guide</h2>\n<p>Directory layout:</p>\n<pre><code>src\n |-main\n    |-java\n        |-com\n            |-xxx\n                |-XxxProtocol.java (Protocol implementation)\n                |-XxxExporter.java (Exporter implementation)\n                |-XxxInvoker.java (Invoker implementation)\n    |-resources\n        |-META-INF\n            |-dubbo\n                |-org.apache.dubbo.rpc.Protocol (plain text file with the content: xxx=com.xxx.XxxProtocol)\n</code></pre>\n<p>XxxProtocol.java：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.xxx;\n \n<span class=\"hljs-keyword\">import</span> org.apache.dubbo.rpc.Protocol;\n \n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">XxxProtocol</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Protocol</span> </span>{\n    <span class=\"hljs-keyword\">public</span> &lt;T&gt; <span class=\"hljs-function\">Exporter&lt;T&gt; <span class=\"hljs-title\">export</span><span class=\"hljs-params\">(Invoker&lt;T&gt; invoker)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> XxxExporter(invoker);\n    }\n    <span class=\"hljs-keyword\">public</span> &lt;T&gt; <span class=\"hljs-function\">Invoker&lt;T&gt; <span class=\"hljs-title\">refer</span><span class=\"hljs-params\">(Class&lt;T&gt; type, URL url)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> XxxInvoker(type, url);\n    }\n}\n</code></pre>\n<p>XxxExporter.java：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.xxx;\n \n<span class=\"hljs-keyword\">import</span> org.apache.dubbo.rpc.support.AbstractExporter;\n \n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">XxxExporter</span>&lt;<span class=\"hljs-title\">T</span>&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractExporter</span>&lt;<span class=\"hljs-title\">T</span>&gt; </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">XxxExporter</span><span class=\"hljs-params\">(Invoker&lt;T&gt; invoker)</span> <span class=\"hljs-keyword\">throws</span> RemotingException</span>{\n        <span class=\"hljs-keyword\">super</span>(invoker);\n        <span class=\"hljs-comment\">// ...</span>\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">unexport</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">super</span>.unexport();\n        <span class=\"hljs-comment\">// ...</span>\n    }\n}\n</code></pre>\n<p>XxxInvoker.java：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.xxx;\n \n<span class=\"hljs-keyword\">import</span> org.apache.dubbo.rpc.support.AbstractInvoker;\n \n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">XxxInvoker</span>&lt;<span class=\"hljs-title\">T</span>&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractInvoker</span>&lt;<span class=\"hljs-title\">T</span>&gt; </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">XxxInvoker</span><span class=\"hljs-params\">(Class&lt;T&gt; type, URL url)</span> <span class=\"hljs-keyword\">throws</span> RemotingException</span>{\n        <span class=\"hljs-keyword\">super</span>(type, url);\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">abstract</span> Object <span class=\"hljs-title\">doInvoke</span><span class=\"hljs-params\">(Invocation invocation)</span> <span class=\"hljs-keyword\">throws</span> Throwable </span>{\n        <span class=\"hljs-comment\">// ...</span>\n    }\n}\n</code></pre>\n<p>META-INF/dubbo/org.apache.dubbo.rpc.Protocol：</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-attr\">xxx</span>=<span class=\"hljs-string\">com.xxx.XxxProtocol</span>\n</code></pre>\n",
  "link": "/en-us/docs/dev/impls/protocol.html",
  "meta": {}
}