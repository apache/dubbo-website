{
  "filename": "registry.md",
  "__html": "<h1>Registry Extension</h1>\n<h2>Summary</h2>\n<p>Registry extension is used for service registration and discovery.</p>\n<h2>Extension Interface</h2>\n<ul>\n<li><code>org.apache.dubbo.registry.RegistryFactory</code></li>\n<li><code>org.apache.dubbo.registry.Registry</code></li>\n</ul>\n<h2>Extension Configuration</h2>\n<pre><code class=\"language-xml\"><span class=\"hljs-comment\">&lt;!-- config registry server --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"xxx1\"</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"xxx://ip:port\"</span> /&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- reference registry server, if registry attribute is not specified, then ApplicationContext will be scanned to find if there's any --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">registry</span>=<span class=\"hljs-string\">\"xxx1\"</span> /&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- default configuration for referencing registry server, it will take effect if there's no registry attribute specified in &lt;dubbo:service&gt; --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:provider</span> <span class=\"hljs-attr\">registry</span>=<span class=\"hljs-string\">\"xxx1\"</span> /&gt;</span>\n</code></pre>\n<h2>Extension Contract</h2>\n<p>RegistryFactory.java：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">RegistryFactory</span> </span>{\n    <span class=\"hljs-comment\">/**\n     * Connect to registry server\n     * \n     * The contract for connecting to registry server: &lt;br&gt;\n     * 1. Will not check connection when check=false is set, otherwise exception will be thrown if connection fails. &lt;br&gt;\n     * 2. Support authorizing against username:password in the URL &lt;br&gt;\n     * 3. Support registry server backup with backup=10.20.153.10 &lt;br&gt;\n     * 4. Support cache on local disk with file=registry.cache &lt;br&gt;\n     * 5. Support timeout setup with timeout=1000 &lt;br&gt;\n     * 6. Support session expiration setup with session=60000 &lt;br&gt;\n     * \n     * <span class=\"hljs-doctag\">@param</span> url registry server address, null is not allowed\n     * <span class=\"hljs-doctag\">@return</span> reference to registry server, never return null\n     */</span>\n    <span class=\"hljs-function\">Registry <span class=\"hljs-title\">getRegistry</span><span class=\"hljs-params\">(URL url)</span></span>; \n}\n</code></pre>\n<p>RegistryService.java：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">RegistryService</span> </span>{ <span class=\"hljs-comment\">// Registry extends RegistryService </span>\n    <span class=\"hljs-comment\">/**\n     * Register service.\n     * \n     * Contract for registering service: &lt;br&gt;\n     * 1. Registration failure will be ignored and kept retrying if check=false is set in URL, otherwise exception will be thrown &lt;br&gt;\n     * 2. Persistence is required if dynamic=false is set in URL, otherwise, the registration info will be removed automatically when register quits accidentally &lt;br&gt;\n     * 3. Persistent by category if category=overrides is set in URL, default category is providers. It is possible to notify by category. &lt;br&gt;\n     * 4. Data lost is not tolerant when registry server reboots or network jitter happens. &lt;br&gt; \n     * 5. It is not allowed to override each other when URLs have same URI part but different parameters &lt;br&gt;\n     * \n     * <span class=\"hljs-doctag\">@param</span> url registration info，null is not allowed, e.g.: dubbo://10.20.153.10/com.alibaba.foo.BarService?version=1.0.0&amp;application=kylin\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">register</span><span class=\"hljs-params\">(URL url)</span></span>;\n \n    <span class=\"hljs-comment\">/**\n     * Unregister service.\n     * \n     * Contract for unregistering service: &lt;br&gt;\n     * 1. IllegalStateException should be thrown when registration info which's supposed to be persistent (with dynamic=false set) cannot be found, otherwise it should be ignored. &lt;br&gt;\n     * 2. To cancel one service, extract match on its URL will be honored &lt;br&gt;\n     * \n     * <span class=\"hljs-doctag\">@param</span> url registration info，null is not allowed, e.g.: dubbo://10.20.153.10/com.alibaba.foo.BarService?version=1.0.0&amp;application=kylin\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">unregister</span><span class=\"hljs-params\">(URL url)</span></span>;\n \n    <span class=\"hljs-comment\">/**\n     * 订阅服务.\n     * Subscribe service.\n     * \n     * Contract for subscribing service: &lt;br&gt;\n     * 1. Subscription failure will be ignored and kept retrying if check=false is set in URL &lt;br&gt;\n     * 2. Only the specified category will be notified if category=overrides is set in URL. Categories are seperated with comma, and all categorized data will be subscribed when wildcard \"*\" is specified. &lt;br&gt;\n     * 3. Allow to query by interface, group, version, classifier, e.g.: interface=com.alibaba.foo.BarService&amp;version=1.0.0&lt;br&gt;\n     * 4. Allow to query with wildcard \"*\" to subscribe all versions under all categories for all interfaces, e.g.: interface=*&amp;group=*&amp;version=*&amp;classifier=*&lt;br&gt;\n     * 5. Subscription will be automatically recoverred when registry server reboots or network jitter happens. &lt;br&gt;\n     * 6. It is not allowed to override each other when URLs have same URI part but different parameters &lt;br&gt;\n     * 7. Subscription procedure will not return until the first notification happens. &lt;br&gt;\n     * \n     * <span class=\"hljs-doctag\">@param</span> url URL for subscription, null isn't allowed, e.g.: consumer://10.20.153.10/com.alibaba.foo.BarService?version=1.0.0&amp;application=kylin\n     * <span class=\"hljs-doctag\">@param</span> listener notification listener, null is not allowed\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">subscribe</span><span class=\"hljs-params\">(URL url, NotifyListener listener)</span></span>;\n \n    <span class=\"hljs-comment\">/**\n     * Unsubscribe service.\n     * \n     * Contract for unsubscribing service: &lt;br&gt;\n     * 1. Simply ignore if not subscribe &lt;br&gt;\n     * 2. Unsubscribe with URL exact match &lt;br&gt;\n     * \n     * <span class=\"hljs-doctag\">@param</span> url URL for unsubscription, null is not allowed, e.g.: consumer://10.20.153.10/com.alibaba.foo.BarService?version=1.0.0&amp;application=kylin\n     * <span class=\"hljs-doctag\">@param</span> listener notification listener, null is not allowed\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">unsubscribe</span><span class=\"hljs-params\">(URL url, NotifyListener listener)</span></span>;\n \n    <span class=\"hljs-comment\">/**\n     * 查询注册列表，与订阅的推模式相对应，这里为拉模式，只返回一次结果。\n     * Lookup subscription list. Compared to push mode for subscription, this is pull mode and returns result only once.\n     * \n     * <span class=\"hljs-doctag\">@see</span> org.apache.dubbo.registry.NotifyListener#notify(List)\n     * <span class=\"hljs-doctag\">@param</span> url URL for  query, null is not allowed, e.g.: consumer://10.20.153.10/com.alibaba.foo.BarService?version=1.0.0&amp;application=kylin\n     * <span class=\"hljs-doctag\">@return</span> subscription list, could be null, has the same meaning as the parameters in {<span class=\"hljs-doctag\">@link</span> org.apache.dubbo.registry.NotifyListener#notify(List&lt;URL&gt;)}.\n     */</span>\n    <span class=\"hljs-function\">List&lt;URL&gt; <span class=\"hljs-title\">lookup</span><span class=\"hljs-params\">(URL url)</span></span>;\n \n}\n</code></pre>\n<p>NotifyListener.java：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">NotifyListener</span> </span>{ \n    <span class=\"hljs-comment\">/**\n     * Fire event when receive service change notification.\n     * \n     * Contract for notify: &lt;br&gt;\n     * 1. Always notify with the whole data instead of partial data from the perspective of service interface and data type. In this way, user needs not compare with the previous result. &lt;br&gt;\n     * 2. First notification for subscription must contain the full set of data for one particular service &lt;br&gt;\n     * 3. It is allowed to separate the different type of data in the upcoming notifications, e.g.: it is legal to only notify one of types among providers, consumers, routes or overrides each time, but pls. note for this particular type, the data must be a full set. &lt;br&gt;\n     * 4. If the data for one particular type is empty, need to notify with a special URL which has empty as its protocol and has category parameter for this particluar type.\n     * 5. Notifier (usually it is monitor center) needs to guarantee the notification sequence by, for say: single thread push, queuing in order,  versioning, etc. &lt;br&gt;\n     * \n     * <span class=\"hljs-doctag\">@param</span> urls subscription list, always not empty, equivalent to the return result of {<span class=\"hljs-doctag\">@link</span> org.apache.dubbo.registry.RegistryService#lookup(URL)}.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">notify</span><span class=\"hljs-params\">(List&lt;URL&gt; urls)</span></span>;\n \n}\n</code></pre>\n<h2>Existing Extension</h2>\n<p><code>org.apache.dubbo.registry.support.dubbo.DubboRegistryFactory</code></p>\n<h2>Extension Guide</h2>\n<p>Directory structure:</p>\n<pre><code>src\n |-main\n    |-java\n        |-com\n            |-xxx\n                |-XxxRegistryFactoryjava (RegistryFactory implementation)\n                |-XxxRegistry.java (Registry implementation)\n    |-resources\n        |-META-INF\n            |-dubbo\n                |-org.apache.dubbo.registry.RegistryFactory (plain text file with the content: xxx=com.xxx.XxxRegistryFactory)\n</code></pre>\n<p>XxxRegistryFactory.java：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.xxx;\n \n<span class=\"hljs-keyword\">import</span> org.apache.dubbo.registry.RegistryFactory;\n<span class=\"hljs-keyword\">import</span> org.apache.dubbo.registry.Registry;\n<span class=\"hljs-keyword\">import</span> org.apache.dubbo.common.URL;\n \n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">XxxRegistryFactory</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">RegistryFactory</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Registry <span class=\"hljs-title\">getRegistry</span><span class=\"hljs-params\">(URL url)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> XxxRegistry(url);\n    }\n}\n</code></pre>\n<p>XxxRegistry.java：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.xxx;\n \n<span class=\"hljs-keyword\">import</span> org.apache.dubbo.registry.Registry;\n<span class=\"hljs-keyword\">import</span> org.apache.dubbo.registry.NotifyListener;\n<span class=\"hljs-keyword\">import</span> org.apache.dubbo.common.URL;\n \n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">XxxRegistry</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Registry</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">register</span><span class=\"hljs-params\">(URL url)</span> </span>{\n        <span class=\"hljs-comment\">// ...</span>\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">unregister</span><span class=\"hljs-params\">(URL url)</span> </span>{\n        <span class=\"hljs-comment\">// ...</span>\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">subscribe</span><span class=\"hljs-params\">(URL url, NotifyListener listener)</span> </span>{\n        <span class=\"hljs-comment\">// ...</span>\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">unsubscribe</span><span class=\"hljs-params\">(URL url, NotifyListener listener)</span> </span>{\n        <span class=\"hljs-comment\">// ...</span>\n    }\n}\n</code></pre>\n<p>META-INF/dubbo/org.apache.dubbo.registry.RegistryFactory：</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-attr\">xxx</span>=<span class=\"hljs-string\">com.xxx.XxxRegistryFactory</span>\n</code></pre>\n",
  "link": "/en-us/docs/dev/impls/registry.html",
  "meta": {}
}