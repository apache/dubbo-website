{
  "filename": "release.md",
  "__html": "<h1>Versions</h1>\n<p><strong>New feature development</strong> and <strong>stability improvement</strong> are equally important to product. But adding new features will affect stability, dubbo uses the following version development pattern to achieve a good balance.</p>\n<h2>Two versions evolving at the same time</h2>\n<ul>\n<li>BugFix Version：low version，e.g. <code>2.4.x</code>. This is called the GA version, which can be applied in production. We are supposed only to fix bugs in this version, and increase the third version number when release.</li>\n<li>Feature Version：high version, e.g. <code>2.5.x</code>. We add new features to this version, so applications have opportunities try new features.</li>\n</ul>\n<p>When features in <code>2.5.x</code> are proved stable enough, we will announce <code>2.5.x</code> as a beta release.</p>\n<p>When <code>2.5.x</code> proved stable after enough test on enough applications：</p>\n<ul>\n<li><code>2.5.x</code>, the GA Version, only do BugFix, the main version to be used. We can try to promote applications to upgrade to GA at the desired time.</li>\n<li><code>2.4.x</code>, no longer maintained. When bugs appear, applications have no choice but upgrade to the latest stable version- Sunset Clause</li>\n<li>We create a new branch <code>2.6.0</code> based on <code>2.5.x</code> for new features.</li>\n</ul>\n<h2>Pros</h2>\n<ul>\n<li>GA Version are promised stable:\n<ul>\n<li>only BugFix</li>\n<li>GA Version got enough tests before promotion</li>\n</ul>\n</li>\n<li>New features can respond quickly in Feature Version and allow applications to try that</li>\n<li>Significantly reduces development and maintenance costs</li>\n</ul>\n<h2>The responsibilities of users</h2>\n<p>Users should always keep in track with the GA Version, make sure all bugs were fixed.</p>\n<p>There is a fake proposition: regular upgrades bring more risks. Here's the reasons:</p>\n<ul>\n<li>GA remains stable after a trial period.</li>\n<li>Bugs find on GA will be fixed immediately.</li>\n<li>Comparing with the on-need-upgrade (only upgrade when find a serious problem, and may span multiple versions), upgrade periodically can flat risk. Experienced a long cycle of large projects, students will have such an experience, the tripartite library version does not upgrade for a long time, the result of the problem had to upgrade to the new version (across multiple versions) a huge risk.</li>\n</ul>\n"
}