{
  "filename": "async-call.md",
  "__html": "<h1>Asynchronous Call</h1>\n<p>As dubbo is based on a non-blocking NIO network layer, the client can start parallel call to multiple remote services without explicitly starting mulithreads, which costs relatively fewer resources.</p>\n<p><img src=\"../sources/images/future.jpg\" alt=\"/user-guide/images/future.jpg\"></p>\n<p>You can config at <code>consumer.xml</code> for setup asynchronous call some remote service.</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:reference</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"fooService\"</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"com.alibaba.foo.FooService\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:method</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"findFoo\"</span> <span class=\"hljs-attr\">async</span>=<span class=\"hljs-string\">\"true\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dubbo:reference</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:reference</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"barService\"</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"com.alibaba.bar.BarService\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:method</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"findBar\"</span> <span class=\"hljs-attr\">async</span>=<span class=\"hljs-string\">\"true\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dubbo:reference</span>&gt;</span>\n</code></pre>\n<p>Configure the above configuration information,you can invoke the remote service in your code.</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// the invoke will return null immediately</span>\nfooService.findFoo(fooId);\n<span class=\"hljs-comment\">// get current invoke Future instance,when the remote service has return result,will notify this Future instance.</span>\nFuture&lt;Foo&gt; fooFuture = RpcContext.getContext().getFuture();\n\n<span class=\"hljs-comment\">// the invoke will return null immediately</span>\nbarService.findBar(barId);\n<span class=\"hljs-comment\">// get current invoke Future instance,when the remote service has return result,will notify this Future instance.</span>\nFuture&lt;Bar&gt; barFuture = RpcContext.getContext().getFuture();\n\n<span class=\"hljs-comment\">// now the request of findFoo and findBar was executed at same time,The client not need setup multithreading for parallel call, which is NIO-based non-blocking implementation of parallel calls</span>\n\n<span class=\"hljs-comment\">// Current thread will be blocking,and wait findFoo has return. when remote service has return findFoo result,the current thread will be wake up.</span>\nFoo foo = fooFuture.get();\n<span class=\"hljs-comment\">// same to findFoo</span>\nBar bar = barFuture.get();\n\n<span class=\"hljs-comment\">// if findFoo expend five second for wait remote service  return result,and findBar expend six second. Actually,only expend six second will get findFoo and findBar result,and proceed to the next step.</span>\n</code></pre>\n<p>You can also set whether to wait for the message to be sent:</p>\n<ul>\n<li><code>sent=&quot;true&quot;</code> wait for the message to be send,if send failureï¼Œwill throw exception.</li>\n<li><code>sent=&quot;false&quot;</code> do not wait for the message to be send,when the message will push into io queue,will return immediately.</li>\n</ul>\n<p>The Example:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:method</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"findFoo\"</span> <span class=\"hljs-attr\">async</span>=<span class=\"hljs-string\">\"true\"</span> <span class=\"hljs-attr\">sent</span>=<span class=\"hljs-string\">\"true\"</span> /&gt;</span>\n</code></pre>\n<p>if you only want to asynchronous call,and don't care the return.you can config <code>return=&quot;false&quot;</code>,To reduce the cost of creating and managing Future objects.</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:method</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"findFoo\"</span> <span class=\"hljs-attr\">async</span>=<span class=\"hljs-string\">\"true\"</span> <span class=\"hljs-attr\">return</span>=<span class=\"hljs-string\">\"false\"</span> /&gt;</span>\n</code></pre>\n<p><strong>Note</strong>\n<code>2.0.6+</code> version supported.</p>\n",
  "link": "/en-us/docs/user/demos/async-call.html",
  "meta": {}
}