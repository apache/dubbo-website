{
  "filename": "config-rule.md",
  "__html": "<h1>Configure rule</h1>\n<p>Write then dynamic configuration to the registry center,This feature is usually done by the monitoring center or the center's page.</p>\n<pre><code class=\"language-java\">RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension();\nRegistry registry = registryFactory.getRegistry(URL.valueOf(<span class=\"hljs-string\">\"zookeeper://10.20.153.10:2181\"</span>));\nregistry.register(URL.valueOf(<span class=\"hljs-string\">\"override://0.0.0.0/com.foo.BarService?category=configurators&amp;dynamic=false&amp;application=foo&amp;timeout=1000\"</span>));\n</code></pre>\n<p>In the config override url：</p>\n<ul>\n<li><code>override://</code> Indicates that the data is overwritten,support <code>override</code> and  <code>absent</code>，can extends，<strong>Required</strong>.</li>\n<li><code>0.0.0.0</code> Indicates that the configurations is valid for all IP addresses，If only want to overwritten specified ip data,you can replace that specified ip address.<strong>Required</strong>.</li>\n<li><code>com.foo.BarService</code> Indicates that is valid for specified service,<strong>Required</strong>.</li>\n<li><code>category=configurators</code> Indicates that the data is dynamic configuration,<strong>Required</strong>。</li>\n<li><code>dynamic=false</code> Indicates that the data is persistent,When the registered party withdraws,the data is still stored in the registry <strong>Required</strong>。</li>\n<li><code>enabled=true</code> override strategy is enable,can absent,if absent,then enable.</li>\n<li><code>application=foo</code> Indicates that is valid for specified application,can absent,if absent,then valid for all application.</li>\n<li><code>timeout=1000</code> Indicates that the value of the <code>timeout</code> parameter that satisfies the above conditions is overwritten by 1000,if want to override another parameters, add directly to the <code>override</code> URL parameter.</li>\n</ul>\n<p>Example：</p>\n<ol>\n<li>\n<p>Disable service provider.(Usually used to temporarily kick off a provider machine, similar to the prohibition of consumer access, please use the routing rules)</p>\n<pre><code>override://10.20.153.10/com.foo.BarService?category=configurators&amp;dynamic=false&amp;disbaled=true\n</code></pre>\n</li>\n<li>\n<p>Adjustment weight:(Usually used to capacity assessment,default is 100)</p>\n<pre><code>override://10.20.153.10/com.foo.BarService?category=configurators&amp;dynamic=false&amp;weight=200\n</code></pre>\n</li>\n<li>\n<p>Adjustment load balance strategy.(default random)</p>\n<pre><code>override://10.20.153.10/com.foo.BarService?category=configurators&amp;dynamic=false&amp;loadbalance=leastactive\n</code></pre>\n</li>\n<li>\n<p>Service downgrade:(Usually used to temporarily mask an error of non-critical services)</p>\n<pre><code>override://0.0.0.0/com.foo.BarService?category=configurators&amp;dynamic=false&amp;application=foo&amp;mock=force:return+null\n</code></pre>\n</li>\n</ol>\n<p><strong>NOTE</strong>: <code>2.2.0+</code> version supported.</p>\n"
}