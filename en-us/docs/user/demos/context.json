{
  "filename": "context.md",
  "__html": "<h1>Context Information</h1>\n<p>All environment information of during the current call will put into the context,and all configuration information will convert the parameters of <code>URL</code> instance,Ref to the column of <strong>URL parameters</strong> at the <a href=\"../references/xml/introduction.md\">schema configuration reference book</a></p>\n<p><code>RpcContext</code> is a temporary status recorder of <code>ThreadLocal</code>,when accept <code>RPC</code> request or send <code>RPC</code> request,The <code>RpcContext</code> will be  changed.Such as: <code>A</code> call <code>B</code> and <code>B</code> call <code>C</code>. On <code>B</code> machine,before <code>B</code> call <code>C</code>,the <code>RpcContext</code> will record the information of <code>A</code> call <code>B</code>.After <code>B</code> call <code>C</code>,the <code>RpcContext</code> record the information of <code>B</code> call <code>C</code>.</p>\n<h2>At service consumer</h2>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// remote invoke</span>\nxxxService.xxx();\n<span class=\"hljs-comment\">// if return true,then the current side is consumer.</span>\n<span class=\"hljs-keyword\">boolean</span> isConsumerSide = RpcContext.getContext().isConsumerSide();\n<span class=\"hljs-comment\">// get the provider ip address of the last invoke.</span>\nString serverIP = RpcContext.getContext().getRemoteHost();\n<span class=\"hljs-comment\">// because all configuration information has convert the URL's  parameters,so at this place can get the application parameter value.</span>\nString application = RpcContext.getContext().getUrl().getParameter(<span class=\"hljs-string\">\"application\"</span>);\n<span class=\"hljs-comment\">// Note:every rpc invoke,then context will be changed.</span>\nyyyService.yyy();\n</code></pre>\n<h2>At service provider</h2>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">XxxServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">XxxService</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">xxx</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-comment\">// if return true,then the current side is provider.</span>\n        <span class=\"hljs-keyword\">boolean</span> isProviderSide = RpcContext.getContext().isProviderSide();\n        <span class=\"hljs-comment\">// get the invoker ip</span>\n        String clientIP = RpcContext.getContext().getRemoteHost();\n        <span class=\"hljs-comment\">// because all configuration information has convert the URL's  parameters,so at this place can get the application parameter value.</span>\n        String application = RpcContext.getContext().getUrl().getParameter(<span class=\"hljs-string\">\"application\"</span>);\n        <span class=\"hljs-comment\">// Note:every rpc invoke,then context will be changed.</span>\n        yyyService.yyy();;\n    }\n}\n</code></pre>\n",
  "link": "/en-us/docs/user/demos/context.html",
  "meta": {}
}