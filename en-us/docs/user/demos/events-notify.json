{
  "filename": "events-notify.md",
  "__html": "<h1>Event Notify</h1>\n<p>Before calling, after calling, when an exception occurs,will trigger <code>oninvoke</code>, <code>onreturn</code>, <code>onthrow</code> events.You can configure which method to notify when an event occurs.</p>\n<h2>Service Interface</h2>\n<pre><code class=\"language-java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">IDemoService</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Person <span class=\"hljs-title\">get</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> id)</span></span>;\n}\n</code></pre>\n<h2>Service provider implement the service.</h2>\n<pre><code class=\"language-java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NormalDemoService</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">IDemoService</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Person <span class=\"hljs-title\">get</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> id)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Person(id, <span class=\"hljs-string\">\"charles`son\"</span>, <span class=\"hljs-number\">4</span>);\n    }\n}\n</code></pre>\n<h2>Service provider configure the service which it provided.</h2>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:application</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"rpc-callback-demo\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"zookeeper://127.0.0.1:2181\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"demoService\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.apache.dubbo.callback.implicit.NormalDemoService\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"org.apache.dubbo.callback.implicit.IDemoService\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"demoService\"</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">\"1.0.0\"</span> <span class=\"hljs-attr\">group</span>=<span class=\"hljs-string\">\"cn\"</span>/&gt;</span>\n</code></pre>\n<h2>Declare the Callback interface at service consumer-side.</h2>\n<pre><code class=\"language-java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Notify</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onreturn</span><span class=\"hljs-params\">(Person msg, Integer id)</span></span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onthrow</span><span class=\"hljs-params\">(Throwable ex, Integer id)</span></span>;\n}\n</code></pre>\n<h2>Implement the Callback at service consumer-side.</h2>\n<pre><code class=\"language-java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NotifyImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Notify</span> </span>{\n    <span class=\"hljs-keyword\">public</span> Map&lt;Integer, Person&gt;    ret    = <span class=\"hljs-keyword\">new</span> HashMap&lt;Integer, Person&gt;();\n    <span class=\"hljs-keyword\">public</span> Map&lt;Integer, Throwable&gt; errors = <span class=\"hljs-keyword\">new</span> HashMap&lt;Integer, Throwable&gt;();\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onreturn</span><span class=\"hljs-params\">(Person msg, Integer id)</span> </span>{\n        System.out.println(<span class=\"hljs-string\">\"onreturn:\"</span> + msg);\n        ret.put(id, msg);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onthrow</span><span class=\"hljs-params\">(Throwable ex, Integer id)</span> </span>{\n        errors.put(id, ex);\n    }\n}\n</code></pre>\n<h2>Configure the Callback at service consumer-side.</h2>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span> =<span class=\"hljs-string\">\"demoCallback\"</span> <span class=\"hljs-attr\">class</span> = <span class=\"hljs-string\">\"org.apache.dubbo.callback.implicit.NofifyImpl\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:reference</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"demoService\"</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"org.apache.dubbo.callback.implicit.IDemoService\"</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">\"1.0.0\"</span> <span class=\"hljs-attr\">group</span>=<span class=\"hljs-string\">\"cn\"</span> &gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:method</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"get\"</span> <span class=\"hljs-attr\">async</span>=<span class=\"hljs-string\">\"true\"</span> <span class=\"hljs-attr\">onreturn</span> = <span class=\"hljs-string\">\"demoCallback.onreturn\"</span> <span class=\"hljs-attr\">onthrow</span>=<span class=\"hljs-string\">\"demoCallback.onthrow\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dubbo:reference</span>&gt;</span>\n</code></pre>\n<p><code>callback</code> and<code>async</code> functions are orthogonally decomposed. <code>async = true</code> means that the result is returned immediately.<code>onreturn</code> means that a callback is required.</p>\n<p>There are several situations with the tow attributes[^2].</p>\n<ul>\n<li>Asynchronous callback mode:<code>async=true onreturn=&quot;xxx&quot;</code></li>\n<li>Synchronous callback mode:<code>async=false onreturn=&quot;xxx&quot;</code></li>\n<li>Asynchronous no callback:<code>async=true</code></li>\n<li>Synchronous no callback:<code>async=true</code></li>\n</ul>\n<h2>Testing code</h2>\n<pre><code class=\"language-java\">IDemoService demoService = (IDemoService) context.getBean(<span class=\"hljs-string\">\"demoService\"</span>);\nNofifyImpl notify = (NofifyImpl) context.getBean(<span class=\"hljs-string\">\"demoCallback\"</span>);\n<span class=\"hljs-keyword\">int</span> requestId = <span class=\"hljs-number\">2</span>;\nPerson ret = demoService.get(requestId);\nAssert.assertEquals(<span class=\"hljs-keyword\">null</span>, ret);\n<span class=\"hljs-comment\">//for Test:Just used to illustrate the normal callback callback, the specific business decisions.</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) {\n    <span class=\"hljs-keyword\">if</span> (!notify.ret.containsKey(requestId)) {\n        Thread.sleep(<span class=\"hljs-number\">200</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">break</span>;\n    }\n}\nAssert.assertEquals(requestId, notify.ret.get(requestId).getId());\n</code></pre>\n<p><strong>NOTE</strong><code>2.0.7+</code> version,<code>async=false</code> is default.</p>\n",
  "link": "/en-us/docs/user/demos/events-notify.html",
  "meta": {}
}