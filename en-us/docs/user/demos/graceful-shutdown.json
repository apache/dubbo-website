{
  "filename": "graceful-shutdown.md",
  "__html": "<h1>Graceful Shutdown</h1>\n<p>Dubbo is graceful shutdown through the <code>ShutdownHook</code> of the JDK, so graceful shutdowns are not performed if you force shutdown the command, such as <code>kill -9 PID</code>, and will only be executed if <code>kill PID</code> is passed.</p>\n<h2>Howto</h2>\n<h3>Service provider</h3>\n<ul>\n<li>When stop, first marked as not receiving new requests, the new request directly return the error, so that the client retries other machines.</li>\n<li>Then check thread pool thread is running, if any, waiting for all threads to complete execution, unless overtime, then forced to close.</li>\n</ul>\n<h3>Service consumer</h3>\n<ul>\n<li>When stop, No longer initiate a new request, all request on the client that got an error.</li>\n<li>Then check the request has not returned the response, waiting for the response to return, unless overtime, then forced to close.</li>\n</ul>\n<h2>Configuration shutdown wait time</h2>\n<p>Set graceful shutdown timeout, the default timeout is 10 seconds, if the overtime is forced to close.</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\"># dubbo.properties</span>\n<span class=\"hljs-meta\">dubbo.service.shutdown.wait</span>=<span class=\"hljs-string\">15000</span>\n</code></pre>\n<p>If ShutdownHook does not take effect, you can call it yourself, <strong>in tomcat, it is recommended by extending the ContextListener and call the following code for graceful shutdown</strong>ï¼š</p>\n<pre><code class=\"language-java\">ProtocolConfig.destroyAll();\n</code></pre>\n",
  "link": "/en-us/docs/user/demos/graceful-shutdown.html",
  "meta": {}
}