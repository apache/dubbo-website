{
  "filename": "reference-config-cache.md",
  "__html": "<h1>ReferenceConfig Cache</h1>\n<p>The instance of <code>ReferenceConfig</code> is heavy. It encapsulates the connection to the registry and the connection to the provider, so it need to be cached. Otherwise, repeatedly generating <code>ReferenceConfig</code> may cause performance problems , memory and connection leaks. This problem is easy to ignored when programming in API mode.</p>\n<p>Therefore, since <code>2.4.0</code>, dubbo provides a simple utility ReferenceConfigCache for caching instances of <code>ReferenceConfig</code>.</p>\n<p>Use as follows：</p>\n<pre><code class=\"language-java\">ReferenceConfig&lt;XxxService&gt; reference = <span class=\"hljs-keyword\">new</span> ReferenceConfig&lt;XxxService&gt;();\nreference.setInterface(XxxService.class);\nreference.setVersion(<span class=\"hljs-string\">\"1.0.0\"</span>);\n......\nReferenceConfigCache cache = ReferenceConfigCache.getCache();\n<span class=\"hljs-comment\">// cache.get will cache the instance of Reference ，and call ReferenceConfig.get method to start ReferenceConfig</span>\nXxxService xxxService = cache.get(reference);\n<span class=\"hljs-comment\">// Note: Cache will hold ReferenceConfig, do not call destroy method of ReferenceConfig outside. If you do this, it will invalidate ReferenceConfig in Cache!</span>\n<span class=\"hljs-comment\">// Use xxxService instance</span>\nxxxService.sayHello();\n</code></pre>\n<p>Destroy <code>ReferenceConfig</code> in the Cache, it also remove <code>ReferenceConfig</code> and release the corresponding resources。</p>\n<pre><code class=\"language-java\">ReferenceConfigCache cache = ReferenceConfigCache.getCache();\ncache.destroy(reference);\n</code></pre>\n<p>By default ,<code>ReferenceConfigCache</code> caches one <code>ReferenceConfig</code> for the same service Group, interface, version. The key of <code>ReferenceConfigCache</code> is from the group of service Group, interface, and the version.</p>\n<p>You can modify the strategy. Define an instance of KeyGenerator, pass it as parameter of getCache method. Refer to <code>ReferenceConfigCache</code> for information。</p>\n<pre><code class=\"language-java\">KeyGenerator keyGenerator = <span class=\"hljs-keyword\">new</span> ...\nReferenceConfigCache cache = ReferenceConfigCache.getCache(keyGenerator );\n</code></pre>\n",
  "link": "/en-us/docs/user/demos/reference-config-cache.html",
  "meta": {}
}