{
  "filename": "quick-start.md",
  "__html": "<h1>Quick start</h1>\n<p>The most common way to use Dubbo is to run it in Spring framework. The following content will guide you to develop a Dubbo application with Spring framework's <a href=\"https://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/xsd-configuration.html\">XML configuration</a>.</p>\n<p>If you don't want to rely on Spring, you can try using <a href=\"./configuration/api.md\">API configuration</a>.</p>\n<p>First let's create a root directory called dubbo-demo:</p>\n<pre><code>mkdir dubbo-demo\ncd dubbo-demo\n</code></pre>\n<p>Next, we are going to create 3 sub-directories under root directory:</p>\n<ul>\n<li>dubbo-demo-api: the common service api</li>\n<li>dubbo-demo-provider: the demo provider codes</li>\n<li>dubbo-demo-consumer: the demo consumer codes</li>\n</ul>\n<h2>Service provider</h2>\n<h3>Defining service interfaces</h3>\n<p>DemoService.java <sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.apache.dubbo.demo;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">DemoService</span> </span>{\n    <span class=\"hljs-function\">String <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(String name)</span></span>;\n\n}\n</code></pre>\n<p>The proejct structure should look like this:</p>\n<pre><code>.\n├── dubbo-demo-api\n│   ├── pom.xml\n│   └── src\n│       └── main\n│           └── java\n│               └── org\n│                   └── apache\n│                       └── dubbo\n│                           └── demo\n│                               └── DemoService.java\n</code></pre>\n<h3>Implement interface in service provider</h3>\n<p>DemoServiceImpl.java <sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup>：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.apache.dubbo.demo.provider;\n<span class=\"hljs-keyword\">import</span> org.apache.dubbo.demo.DemoService;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DemoServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">DemoService</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(String name)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hello \"</span> + name;\n    }\n}\n</code></pre>\n<h3>Exposing service with Spring configuration</h3>\n<p>provider.xml：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n       <span class=\"hljs-attr\">xmlns:dubbo</span>=<span class=\"hljs-string\">\"http://dubbo.apache.org/schema/dubbo\"</span>\n       <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd\n       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\"</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- provider's application name, used for tracing dependency relationship --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:application</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"demo-provider\"</span>/&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- use multicast registry center to export service --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"multicast://224.5.6.7:1234\"</span>/&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- use dubbo protocol to export service on port 20880 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:protocol</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo\"</span> <span class=\"hljs-attr\">port</span>=<span class=\"hljs-string\">\"20880\"</span>/&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- service implementation, as same as regular local bean --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"demoService\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.apache.dubbo.demo.provider.DemoServiceImpl\"</span>/&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- declare the service interface to be exported --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"org.apache.dubbo.demo.DemoService\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"demoService\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<p>The demo uses multicast as the registry since it is simple and does not require to extra installation.\nIf you prefer a registiry like zookeeper, please check out examples <a href=\"https://github.com/dubbo/dubbo-samples\">here</a>.</p>\n<h3>Configure the logging system</h3>\n<p>Dubbo use log4j as logging system by default, it also support slf4j, Apache Commons Logging, and JUL logging.</p>\n<p>Following is a sample configuration:</p>\n<p>log4j.properties</p>\n<pre><code>###set log levels###\nlog4j.rootLogger=info, stdout\n###output to the console###\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.Target=System.out\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=[%d{dd/MM/yy hh:mm:ss:sss z}] %t %5p %c{2}: %m%n\n</code></pre>\n<h3>Bootstrap the service provider</h3>\n<p>Provider.java</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> org.apache.dubbo.demo.provider;\n\n<span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Provider</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        System.setProperty(<span class=\"hljs-string\">\"java.net.preferIPv4Stack\"</span>, <span class=\"hljs-string\">\"true\"</span>);\n        ClassPathXmlApplicationContext context = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-keyword\">new</span> String[]{<span class=\"hljs-string\">\"META-INF/spring/dubbo-demo-provider.xml\"</span>});\n        context.start();\n        System.out.println(<span class=\"hljs-string\">\"Provider started.\"</span>);\n        System.in.read(); <span class=\"hljs-comment\">// press any key to exit</span>\n    }\n}\n</code></pre>\n<p>Finally, the project structure should look like this:</p>\n<pre><code>├── dubbo-demo-provider\n│   ├── pom.xml\n│   └── src\n│       └── main\n│           ├── java\n│           │   └── org\n│           │       └── apache\n│           │           └── dubbo\n│           │               └── demo\n│           │                   └── provider\n│           │                       ├── DemoServiceImpl.java\n│           │                       └── Provider.java\n│           └── resources\n│               ├── META-INF\n│               │   └── spring\n│               │       └── dubbo-demo-provider.xml\n│               └── log4j.properties\n</code></pre>\n<h2>Service consumer</h2>\n<p>Complete installation steps, see：<a href=\"../admin/install/consumer-demo.md\">Consumer demo installation</a></p>\n<h3>Using the Spring configuration to reference a remote service</h3>\n<p>consumer.xml：</p>\n<pre><code class=\"language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?</span>xml version=<span class=\"hljs-string\">\"1.0\"</span> encoding=<span class=\"hljs-string\">\"UTF-8\"</span><span class=\"hljs-meta\">?&gt;</span></span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n       <span class=\"hljs-attr\">xmlns:dubbo</span>=<span class=\"hljs-string\">\"http://dubbo.apache.org/schema/dubbo\"</span>\n       <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd\n       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\"</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- consumer's application name, used for tracing dependency relationship (not a matching criterion),\n    don't set it same as provider --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:application</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"demo-consumer\"</span>/&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- use multicast registry center to discover service --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"multicast://224.5.6.7:1234\"</span>/&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- generate proxy for the remote service, then demoService can be used in the same way as the\n    local regular interface --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:reference</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"demoService\"</span> <span class=\"hljs-attr\">check</span>=<span class=\"hljs-string\">\"false\"</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"org.apache.dubbo.demo.DemoService\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<h3>Bootstrap the consumer</h3>\n<p>Consumer.java <sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup>：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;\n<span class=\"hljs-keyword\">import</span> org.apache.dubbo.demo.DemoService;\n \n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Consumer</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        ClassPathXmlApplicationContext context = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-keyword\">new</span> String[] {<span class=\"hljs-string\">\"META-INF/spring/dubbo-demo-consumer.xml\"</span>});\n        context.start();\n        <span class=\"hljs-comment\">// Obtaining a remote service proxy</span>\n        DemoService demoService = (DemoService)context.getBean(<span class=\"hljs-string\">\"demoService\"</span>);\n        <span class=\"hljs-comment\">// Executing remote methods</span>\n        String hello = demoService.sayHello(<span class=\"hljs-string\">\"world\"</span>);\n        <span class=\"hljs-comment\">// Display the call result</span>\n        System.out.println(hello);\n    }\n}\n</code></pre>\n<h3>Config the logging system</h3>\n<p>This is the same as how to config it on provider side.</p>\n<p>Finally, the project structure should be look like this:</p>\n<pre><code>├── dubbo-demo-consumer\n│   ├── pom.xml\n│   └── src\n│       └── main\n│           ├── java\n│           │   └── org\n│           │       └── apache\n│           │           └── dubbo\n│           │               └── demo\n│           │                   └── consumer\n│           │                       └── Consumer.java\n│           └── resources\n│               ├── META-INF\n│               │   └── spring\n│               │       └── dubbo-demo-consumer.xml\n│               └── log4j.properties\n</code></pre>\n<h2>Start the demo</h2>\n<h3>Start service provider</h3>\n<p>Run the <code>org.apache.dubbo.demo.provider.Provider</code> class to start the provider.</p>\n<h3>Start service consumer</h3>\n<p>Run the <code>org.apache.dubbo.demo.provider.Consumer</code> class to start the consumer, and you should be able to see the following result:</p>\n<pre><code>Hello world\n</code></pre>\n<h2>Complete example</h2>\n<p>You can find the complete example code in the Github repository.</p>\n<ul>\n<li><a href=\"../admin/install/provider-demo.md\">Provider demo</a></li>\n<li><a href=\"../admin/install/consumer-demo.md\">Consumer demo</a></li>\n</ul>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>The interface needs to be packaged separately, shared by the service provider and the consumer <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p>Hidden realization of service consumer <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p>IoC injection can also be used <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n"
}