<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dubbo Design Principals on Apache Dubbo</title><link>https://cn.dubbo.apache.org/en/docs/v2.7/dev/principals/</link><description>Recent content in Dubbo Design Principals on Apache Dubbo</description><generator>Hugo</generator><language>en</language><atom:link href="https://cn.dubbo.apache.org/en/docs/v2.7/dev/principals/index.xml" rel="self" type="application/rss+xml"/><item><title>The Devil Is In The Details</title><link>https://cn.dubbo.apache.org/en/docs/v2.7/dev/principals/code-detail/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs/v2.7/dev/principals/code-detail/</guid><description>&lt;p>Recently, I have been worried about the quality of the Dubbo distributed service framework. If there are more maintenance personnel or changes, there will be a decline in quality. I am thinking, is there any need for everyone to abide by it, according to a habit when writing code, I have summarized it. The code process, especially the framework code, should always keep in mind the details. Maybe the following will be said, everyone will feel very simple, very basic, but always keep in mind. Considering these factors in every line of code requires a lot of patience. It is often said that the devil is in the details.&lt;/p></description></item><item><title>The Configuration Design</title><link>https://cn.dubbo.apache.org/en/docs/v2.7/dev/principals/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs/v2.7/dev/principals/configuration/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="http://javatar.iteye.com/blog/949527">http://javatar.iteye.com/blog/949527&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Dubbo design is now completely unobtrusive, namely the user only depends on the configuration of contract.After multiple versions of the development, in order to meet the demand of various scenarios, configuration is more and more.In order to maintain compatibility with only grow, lurking inside all sorts of styles, convention, rules.The new version will also be configured for a adjustment, remove the dubbo, properties, instead of all the spring configuration.Will think of some written in this memo.&lt;/p></description></item><item><title> "Fool-proof" Design</title><link>https://cn.dubbo.apache.org/en/docs/v2.7/dev/principals/dummy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs/v2.7/dev/principals/dummy/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="http://javatar.iteye.com/blog/804187">http://javatar.iteye.com/blog/804187&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Recently I was feeling stupid because I solved too many stupid problems. The service framework is becoming more widely used. Every day, I have to help the endpoint user to resolve problems. Gradually, it is found that most of the problems are configuration errors, or duplicated files or classes, or network failure. So I prepare to add some &amp;ldquo;fool-proof&amp;rdquo; design to the further version. It may be very simple, but it is still a little help for troubleshooting speed. I hope that I can throw a brick to attract jade, and everyone can help to come up with more preventive measures to share.&lt;/p></description></item><item><title>Talk About Expansion Of Extension And Incremental Extension</title><link>https://cn.dubbo.apache.org/en/docs/v2.7/dev/principals/expansibility/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs/v2.7/dev/principals/expansibility/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="http://javatar.iteye.com/blog/690845">http://javatar.iteye.com/blog/690845&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>There are more and more products in our platform, the function of the product also more and more.Platform products in order to meet the requirement of each BU and department as well as product line, will surely will be a lot of irrelevant function together, the customer can use selective.In order to compatible with more demand for each product, each framework, are constantly expanding, and we often choose some extension of the extension, namely to old and new function expanded into a general implementation.I want to discuss is, in some cases also can consider to the expansion of the incremental way, also is to retain the original function of simplicity, new feature implementation independence.I have been doing the development of distributed service framework, and then take such problem in our project.&lt;/p></description></item><item><title>Extension Points To Reconstruct</title><link>https://cn.dubbo.apache.org/en/docs/v2.7/dev/principals/extension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs/v2.7/dev/principals/extension/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="http://javatar.iteye.com/blog/1041832">http://javatar.iteye.com/blog/1041832&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>With the promotion of service, the website of Dubbo service framework requirements gradually increase, Dubbo existing developers can implement demand is limited, many requirements have been delay, and site classmates also want to participate, combined with field, so the platform will be open to internal part of the project, let everyone together to implement, Dubbo as one of the pilot project.&lt;/p>
&lt;p>Now that want to open it, about to take some extension point Dubbo, let participants black box extend as far as possible, rather than a white box to modify the code, or branch, quality, merger, the conflict will be hard to manage.&lt;/p></description></item><item><title>Some In The Design Of The Basic Common Sense</title><link>https://cn.dubbo.apache.org/en/docs/v2.7/dev/principals/general-knowledge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs/v2.7/dev/principals/general-knowledge/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="http://javatar.iteye.com/blog/706098">http://javatar.iteye.com/blog/706098&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Recently told the new team some design on the common sense, is likely to be new and some other help, the thought of a few temporarily, first write here.&lt;/p>
&lt;h2 id="the-api-and-spi-separation">The API and SPI separation&lt;/h2>
&lt;p>Framework or component there are generally two types of customers, one is a consumer, is an extension.API (Application Programming Interface) is used to users, and SPI (Service dojo.provide Interface) is used to expand.At design time, try to put them off, and don&amp;rsquo;t mix.In other words, the user is can&amp;rsquo;t see write the implementation of the extension.&lt;/p></description></item><item><title>The Robustness Of The Design Implementation</title><link>https://cn.dubbo.apache.org/en/docs/v2.7/dev/principals/robustness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs/v2.7/dev/principals/robustness/</guid><description>&lt;p>Dubbo as a remote service exposure, calls and management solutions, through the meridians of the application is running, its itself to achieve robustness of importance is self-evident.&lt;/p>
&lt;p>Here are some Dubbo principle and method of use.&lt;/p>
&lt;h2 id="the-log">The log&lt;/h2>
&lt;p>Logging is one of the most commonly used way to find, discover problems. Log quality is often neglected, there is no log on using expressly agreed upon. Attaches great importance to the use of the Log, and improve the concentration of the Log information. Log too much, too much chaos, could lead to useful information.&lt;/p></description></item></channel></rss>