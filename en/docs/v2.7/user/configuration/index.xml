<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dubbo Configuration on Apache Dubbo</title><link>https://dubbo.apache.org/en/docs/v2.7/user/configuration/</link><description>Recent content in Dubbo Configuration on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://dubbo.apache.org/en/docs/v2.7/user/configuration/index.xml" rel="self" type="application/rss+xml"/><item><title>XML Configuration</title><link>https://dubbo.apache.org/en/docs/v2.7/user/configuration/xml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/configuration/xml/</guid><description>About the XML configuration items, seeï¼šXML References. If you prefer use API directly instead of using Spring, see API Configuration. Want an example of how to use configuration, see Quick Start.
provider.xml demo &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:dubbo=&amp;#34;http://dubbo.apache.org/schema/dubbo&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&amp;#34;&amp;gt; &amp;lt;dubbo:application name=&amp;#34;hello-world-app&amp;#34; /&amp;gt; &amp;lt;dubbo:registry address=&amp;#34;multicast://224.5.6.7:1234&amp;#34; /&amp;gt; &amp;lt;dubbo:protocol name=&amp;#34;dubbo&amp;#34; port=&amp;#34;20880&amp;#34; /&amp;gt; &amp;lt;dubbo:service interface=&amp;#34;org.apache.dubbo.demo.DemoService&amp;#34; ref=&amp;#34;demoServiceLocal&amp;#34; /&amp;gt; &amp;lt;dubbo:reference id=&amp;#34;demoServiceRemote&amp;#34; interface=&amp;#34;org.apache.dubbo.demo.DemoService&amp;#34; /&amp;gt; &amp;lt;/beans&amp;gt; All tags support custom parameters, so we can meet the special config requirements at different extension points, such as:</description></item><item><title>Properties Configuration</title><link>https://dubbo.apache.org/en/docs/v2.7/user/configuration/properties/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/configuration/properties/</guid><description>If your application is simple enough, say, you do not need multi-registries or multi-protocols, and you want to share configuration among Spring containers. You can use dubbo.properties as default configuration.
Dubbo will load dubbo.properties under the root of classpath automatically, you can also specify the path for loading this file by using JVM parameter: -Ddubbo.properties.file=xxx.properties.
Mapping Rules Combine the tag name and attribute name of the XML tag, use . to split.</description></item><item><title>API Configuration</title><link>https://dubbo.apache.org/en/docs/v2.7/user/configuration/api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/configuration/api/</guid><description>All API properties have counterparts in XML, see XML References for details. For example ApplicationConfig.setName(&amp;quot;xxx&amp;quot;) equals to &amp;lt;dubbo:application name=&amp;quot;xxx&amp;quot; /&amp;gt; 1
Provider Side import org.apache.dubbo.rpc.config.ApplicationConfig; import org.apache.dubbo.rpc.config.RegistryConfig; import org.apache.dubbo.rpc.config.ProviderConfig; import org.apache.dubbo.rpc.config.ServiceConfig; import com.xxx.XxxService; import com.xxx.XxxServiceImpl; // Implementation XxxService xxxService = new XxxServiceImpl(); // Application Info ApplicationConfig application = new ApplicationConfig(); application.setName(&amp;#34;xxx&amp;#34;); // Registry Info RegistryConfig registry = new RegistryConfig(); registry.setAddress(&amp;#34;10.20.130.230:9090&amp;#34;); registry.setUsername(&amp;#34;aaa&amp;#34;); registry.setPassword(&amp;#34;bbb&amp;#34;); // Protocol ProtocolConfig protocol = new ProtocolConfig(); protocol.</description></item><item><title>Annotation Configuration</title><link>https://dubbo.apache.org/en/docs/v2.7/user/configuration/annotation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/configuration/annotation/</guid><description>Requires2.6.3 or higher, click here to view the complete sample
Provider Side k
@DubboService annotation for exporting @DubboService public class AnnotationServiceImpl implements AnnotationService { @Override public String sayHello(String name) { return &amp;#34;annotation: hello, &amp;#34; + name; } } Add application sharing configuration # dubbo-provider.properties dubbo.application.name=annotation-provider dubbo.registry.address=zookeeper://127.0.0.1:2181 dubbo.protocol.name=dubbo dubbo.protocol.port=20880 Spring scan path @Configuration @EnableDubbo(scanBasePackages = &amp;#34;org.apache.dubbo.samples.simple.annotation.impl&amp;#34;) @PropertySource(&amp;#34;classpath:/spring/dubbo-provider.properties&amp;#34;) static public class ProviderConfiguration { } Consumer Side @Reference annotation for reference @Component(&amp;#34;annotationAction&amp;#34;) public class AnnotationAction { @Reference private AnnotationService annotationService; public String doSayHello(String name) { return annotationService.</description></item><item><title>Configuration Loading Process</title><link>https://dubbo.apache.org/en/docs/v2.7/user/configuration/configuration-load-process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/configuration/configuration-load-process/</guid><description>This document focuses on how the Dubbo framework collects the required configuration (including application configuration, registry configuration, service configuration, etc.) during the application startup phase to complete the process of service exposure and reference.
Depending on how you drive it (such as Spring or naked API programming), the configuration form will certainly vary, for detail please refer to XML Configuration, Annotation Configuration and API Configuration. In addition to the differences in peripheral drivers, Dubbo&amp;rsquo;s configuration reads generally follow the following principles:</description></item></channel></rss>