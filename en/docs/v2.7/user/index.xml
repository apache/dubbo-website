<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>User Documentation on Apache Dubbo</title><link>https://dubbo.apache.org/en/docs/v2.7/user/</link><description>Recent content in User Documentation on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://dubbo.apache.org/en/docs/v2.7/user/index.xml" rel="self" type="application/rss+xml"/><item><title>Quick start</title><link>https://dubbo.apache.org/en/docs/v2.7/user/quick-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/quick-start/</guid><description>The most common way to use Dubbo is to run it in Spring framework. The following content will guide you to develop a Dubbo application with Spring framework&amp;rsquo;s XML configuration.
If you don&amp;rsquo;t want to rely on Spring, you can try using API configuration.
First let&amp;rsquo;s create a root directory called dubbo-demo:
mkdir dubbo-demo cd dubbo-demo Next, we are going to create 3 sub-directories under root directory:
dubbo-demo-api: the common service api dubbo-demo-provider: the demo provider codes dubbo-demo-consumer: the demo consumer codes Service provider Defining service interfaces DemoService.</description></item><item><title>Dependencies</title><link>https://dubbo.apache.org/en/docs/v2.7/user/dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/dependencies/</guid><description>Necessary dependencies JDK 1.6+ 1
Default dependencies use mvn dependency:tree &amp;gt; dep.log command to analysis，Dubbo default depends on the following 3rd party libraries：
[INFO] +- com.alibaba:dubbo:jar:2.5.9-SNAPSHOT:compile [INFO] | +- org.springframework:spring-context:jar:4.3.10.RELEASE:compile [INFO] | +- org.javassist:javassist:jar:3.21.0-GA:compile [INFO] | \- org.jboss.netty:netty:jar:3.2.5.Final:compile All dependencies here are selected for the default configuration of the Dubbo, which are based on stability and performance considerations.
javassist.jar 2: if &amp;lt;dubbo:provider proxy=&amp;quot;jdk&amp;quot; /&amp;gt; or &amp;lt;dubbo:consumer proxy=&amp;quot;jdk&amp;quot; /&amp;gt;，or &amp;lt;dubbo:application compiler=&amp;quot;jdk&amp;quot; /&amp;gt;， is not required.</description></item><item><title>Maturity</title><link>https://dubbo.apache.org/en/docs/v2.7/user/maturity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/maturity/</guid><description>Function maturity Feature Maturity Strength Problem Advise User Concurrency control Tested concurrency control On trial Connection control Tested connection number control On trial Connecting certain provider straightly Tested Provider service for point-to-point connecting straightly, for test Can be used in the test environment Alibaba Grouping polymerization Tested Return value of grouping polymerization, service for menu aggregation and other services Used in special scenes Can be used in the production environment Parameters validator Tested parameters validator, JSR303 validation framework integration Have effect on Performance On trial LaiWang Result cache Tested result cache, for accelerating requests On trial Generic reference Stable Generic reference, remote call without a business interface class，for test platforms, open api proxy service, and so on Can be used in the production environment Alibaba Generic service Stable Generic service, no interface class is required to implement any interface, for mock platform Can be used in the production environment Alibaba Echo test Tested echo test On trial Attachment Stable Attachment Can be used in the production environment Asynchronous call Tested Unavailable asynchronous call On trial Local call Tested Local call On trial Callback parameter Tested Callback parameter Used in special scenes On trial Registry Events notify Tested Events notify, triggering before and after the remote call is executed On trial Local stub Stable Performing part of the logic on the client side Can be used in the production environment Alibaba Local mock Stable Forged return results, which can be executed when failed or directly executed, for service degradation Need support of registry Can be used in the production environment Alibaba Delay publish Stable Delay publish, used to wait for the application to load warmup data or wait for spring context to load completely Can be used in the production environment Alibaba Lazy connect Tested Delay setting up connections, when invocation is set up On trial Registry Stickness connections Tested Stickness connections, always make a request to the same provider service unless the service is down, and then switch to another On trial Registry Token authorization Tested Token authorization, is used for service authorization Need support of registry On trial Routing rule Tested Dynamically determining the call relationship Need support of registry On trial Configuration rule Tested Distribute the configuration dynamically, is the switch of business logic Need support of registry On trial Accesslog Tested Accesslog, used to record call information Local storage, impact performance, limited by disk size On trial Distributed transaction Research JTA/XA three phase submission transaction(TCC) Unstable Unavailable Strategy maturity Feature Maturity Strength Problem Advise User Zookeeper registry Stable Support the cluster, have various of related open source products, dubbo-2.</description></item><item><title>Best practice</title><link>https://dubbo.apache.org/en/docs/v2.7/user/best-practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/best-practice/</guid><description>Modularization It is recommended to put service interfaces, service models, service exceptions, and so on in the API package,Because the service model and exception are part of the API, it is also in conformity with the modularization principle:Reusing the publish equivalence principle (REP) and the Common Reuse Principle (CRP).
If you need, you can also consider placing a spring reference configuration in the API package, so that the user can only use the configuration in the spring loading process, and the configuration suggestion is placed in the package directory of the module, so as not to conflict, eg:com/alibaba/china/xxx/dubbo-reference.</description></item><item><title>Recommended usage</title><link>https://dubbo.apache.org/en/docs/v2.7/user/recommend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/recommend/</guid><description>Configuring the attributes of the consumer side as much as possible on the provider side the reason is：
Service providers are more aware of service performance parameters than service users，Such as the timeout time of the call, the reasonable retry times, and so on. If a attribute is configurated in provider side, not configurated in consumer side, consumer service will use the attribute in provider side. That is to say, the provider side&amp;rsquo;s attribute can be used as consumer&amp;rsquo;s default value 1.</description></item><item><title>Capacity plan</title><link>https://dubbo.apache.org/en/docs/v2.7/user/capacity-plan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/capacity-plan/</guid><description>The following data for reference：
Use member service project of Dubbo Receive 400,000,000 remote calls one day Use 12 standard servers to provide services (CPU:8 core, memory: 8G) The average load is less than 1 (For 8 core CPU, the load is very low) The average response time is 2.3 to 2.5 ms，Network cost about 1.5 to 1.6 ms(Related to the size of the packet ) Use product authorization service project of Dubbo Receive 300,000,000 remote calls one day Use 8 standard servers to provide services (CPU:8 core, memory: 8G) The average load is less than 1 (For 8 core CPU, the load is very low) The average response time is 1.</description></item><item><title>Performance</title><link>https://dubbo.apache.org/en/docs/v2.7/user/perf-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/perf-test/</guid><description>Test instructions In this performance test, the performance of all Dubbo 2.0 supported protocols in different sizes and data types is tested and compared with the Dubbo 1.0. The overall performance is increased by 1.0 compared with 10%, and the average increase is 10%. The performance improvement of 10%~50% can also be achieved by using the new Dubbo serialization of Dubbo 2.0 . In the stability test, because the underlying communication framework is changed from Mina to netty, the growth of objects in old area is greatly reduced, and the 50 hour operation increases less than 200m and no fullgc.</description></item><item><title>Test coverage report</title><link>https://dubbo.apache.org/en/docs/v2.7/user/coveragence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/coveragence/</guid><description> v2.0 Codecov report , Statistics since 2017-12-29 The test coverage is : , we can get the report in https://codecov.io/gh/apache/dubbo v1.0 Based on version 2.0.12，Statistics on 2012-02-03</description></item><item><title>Benchmark Suite</title><link>https://dubbo.apache.org/en/docs/v2.7/user/benchmark-tool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/benchmark-tool/</guid><description>download： git clone https://github.com/apache/dubbo.git compile benchmark: cd dubbo/dubbo-test/dubbo-test-benchmark; mvn clean install uncompress benchmark： dubbo/dubbo-test/dubbo-test-benchmark/target/dubbo-test-benchmark-2.6.2-SNAPSHOT.tar.gz Read ReadMe.txt (the contents are as follows, in the compressed package.)
Build a new benchmark project, such as demo.benchmark
Import the your own interface api jar and dubbo.benchmark.jar (Unzip dubbo.benchmark.tar.gz, under the lib directory )
Create a new class to implement AbstractClientRunnable
Implement the constructor of the parent class Implement the invoke method and create a local interface proxy by serviceFactory，and finish your own business logic, as follows: public Object invoke(ServiceFactory serviceFactory) { DemoService demoService = (DemoService) serviceFactory.</description></item><item><title>REST support</title><link>https://dubbo.apache.org/en/docs/v2.7/user/rest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/rest/</guid><description>Original author: Li Shen Document copyright: Apache 2.0license Signature - No interpretation
Working in progress &amp;hellip;
This article is lengthy since REST involves many aspects. Besides, it refers to the document style of Spring and so on. Not only limited to usage of the framework but also strives to present the design concept of the framework and the architectural idea of an excellent application. For people who only want to get a glimpse of Dubbo and REST, all they need is to browse through the Overview to Introduction to Standard Java REST API: JAX-RS.</description></item><item><title>Simple Monitor</title><link>https://dubbo.apache.org/en/docs/v2.7/user/simple-monitor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/simple-monitor/</guid><description>Warning Monitor service is a standard Dubbo service，can be exported to the registry，also can be connected straightly.
Install the simple registry
export a simple monitor service to the registry: (If you use the installer, you don&amp;rsquo;t need to write this configuration yourself. if you implement the monitor service yourself，need it)
&amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:dubbo=&amp;#34;http://dubbo.apache.org/schema/dubbo&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&amp;#34;&amp;gt; &amp;lt;!-- configuration of current application --&amp;gt; &amp;lt;dubbo:application name=&amp;#34;simple-monitor&amp;#34; /&amp;gt; &amp;lt;!-- connection address of the registry --&amp;gt; &amp;lt;dubbo:registry address=&amp;#34;127.</description></item></channel></rss>