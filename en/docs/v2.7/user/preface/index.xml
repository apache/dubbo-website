<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Preface on Apache Dubbo</title><link>https://dubbo.apache.org/en/docs/v2.7/user/preface/</link><description>Recent content in Preface on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://dubbo.apache.org/en/docs/v2.7/user/preface/index.xml" rel="self" type="application/rss+xml"/><item><title>Background</title><link>https://dubbo.apache.org/en/docs/v2.7/user/preface/background/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/preface/background/</guid><description>Background With the fast development of Internet, the scale of web applications expands unceasingly, and finally we find that the traditional vertical architecture(monolithic) can not handle this any more. Distributed service architecture and the flow computing architecture are imperative, and a governance system is urgently needed to ensure an orderly evolution of the architecture.
Monolithic architecture When the traffic is very low, there is only one application, all the features are deployed together to reduce the deployment node and cost.</description></item><item><title>Requirements</title><link>https://dubbo.apache.org/en/docs/v2.7/user/preface/requirements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/preface/requirements/</guid><description>Requirements Before the advent of large-scale services, an application might just exposes or references remote service by using RMI or Hessian, the call is done by configuring service URL, and load balance is done through hardwares, like F5.
When there are more and more services, it becomes very difficult to configure the service URL, the single point pressure of F5 hardware load balancer is also increasing. At this point, a service registry is needed to dynamically register and discover services to make the service&amp;rsquo;s location transparent.</description></item><item><title>Architecture</title><link>https://dubbo.apache.org/en/docs/v2.7/user/preface/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/preface/architecture/</guid><description>Specification of Node&amp;rsquo;s Role Node Role Spec Provider The provider exposes remote services Consumer The consumer calls the remote services Registry The registry is responsible for service discovery and configuration Monitor The monitor counts the number of service invocations and time-consuming Container The container manages the services&amp;rsquo;s lifetime Service relationship Container is responsible for launching, loading, and running the service Provider. Provider registers its services to Register at the time it starts.</description></item><item><title>Usage</title><link>https://dubbo.apache.org/en/docs/v2.7/user/preface/usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/preface/usage/</guid><description>Spring configuration of local service local.xml:
&amp;lt;bean id=“xxxService” class=“com.xxx.XxxServiceImpl” /&amp;gt; &amp;lt;bean id=“xxxAction” class=“com.xxx.XxxAction”&amp;gt; &amp;lt;property name=“xxxService” ref=“xxxService” /&amp;gt; &amp;lt;/bean&amp;gt; Spring configuration of remote service The remote configuration can be done by very little change based on the local configuration:
split the local.xml into two part, put the service define part into remote-privider.xml(exists in the provider node), meanwhile the refrence part into remote-consumer.xml(exists in the consumer node). add &amp;lt;dubbo:service&amp;gt; to the provider&amp;rsquo;s configuration, and &amp;lt;dubbo:reference&amp;gt; to the consumer&amp;rsquo;s configuration.</description></item></channel></rss>