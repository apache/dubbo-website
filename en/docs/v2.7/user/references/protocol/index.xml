<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Protocol References on Apache Dubbo</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/</link><description>Recent content in Protocol References on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/index.xml" rel="self" type="application/rss+xml"/><item><title>dubbo protocol</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/dubbo/</guid><description>Dubbo protocol which is the default protocol of Dubbo RPC Framework uses a single long connection and NIO asynchronous communication,it is suitable for small data but with high concurrency RPC call and the number of consumer machine is much greater than provider
On the other hand, the Dubbo protocol is not suitable for transmitting large amounts of data, such as file transmission, video transmission, etc., unless the request is very low.</description></item><item><title>rest protocol</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/rest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/rest/</guid><description>基于标准的Java REST API——JAX-RS 2.0（Java API for RESTful Web Services的简写）实现的REST调用支持
快速入门 在dubbo中开发一个REST风格的服务会比较简单，下面以一个注册用户的简单服务为例说明。
这个服务要实现的功能是提供如下URL（注：这个URL不是完全符合REST的风格，但是更简单实用）：
http://localhost:8080/users/register 而任何客户端都可以将包含用户信息的JSON字符串POST到以上URL来完成用户注册。
首先，开发服务的接口：
public class UserService { void registerUser(User user); } 然后，开发服务的实现：
@Path(&amp;#34;users&amp;#34;) public class UserServiceImpl implements UserService { @POST @Path(&amp;#34;register&amp;#34;) @Consumes({MediaType.APPLICATION_JSON}) public void registerUser(User user) { // save the user... } } 上面的实现非常简单，但是由于该 REST 服务是要发布到指定 URL 上，供任意语言的客户端甚至浏览器来访问，所以这里额外添加了几个 JAX-RS 的标准 annotation 来做相关的配置。
@Path(&amp;ldquo;users&amp;rdquo;)：指定访问UserService的URL相对路径是/users，即http://localhost:8080/users
@Path(&amp;ldquo;register&amp;rdquo;)：指定访问registerUser()方法的URL相对路径是/register，再结合上一个@Path为UserService指定的路径，则调用UserService.register()的完整路径为http://localhost:8080/users/register
@POST：指定访问registerUser()用HTTP POST方法
@Consumes({MediaType.APPLICATION_JSON})：指定registerUser()接收JSON格式的数据。REST框架会自动将JSON数据反序列化为User对象
最后，在spring配置文件中添加此服务，即完成所有服务开发工作：
&amp;lt;!-- 用rest协议在8080端口暴露服务 --&amp;gt; &amp;lt;dubbo:protocol name=&amp;#34;rest&amp;#34; port=&amp;#34;8080&amp;#34;/&amp;gt; &amp;lt;!-- 声明需要暴露的服务接口 --&amp;gt; &amp;lt;dubbo:service interface=&amp;#34;xxx.</description></item><item><title>http protocol</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/http/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/http/</guid><description>Dubbo http protocol is base on HTTP form and Spring&amp;rsquo;s HttpInvoker
Features Number of connections: multiple connections Connection: short connection Transmission protocol: HTTP Transmission: synchronous transmission Serialization: form serialization Scope of application: Available browser view, the form or URL can be passed parameters, Temporary files are not supported. Applicable scenarios: Services that need to be available to both application and browser Constraint Parameters and return values must be consistent with Bean specifications Configuration configure http protocol：</description></item><item><title>hessian protocol</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/hessian/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/hessian/</guid><description>Hessian protocol is used for integrate Hessian services, and it use http protocol to communicate and expose services by servlet.Dubbo use Jetty server as default servlet container.
Dubbo&amp;rsquo;s Hessian protocol interoperates with native Hessian services:
Providers use Dubbo&amp;rsquo;s Hessian protocol to expose services that consumers call directly using standard Hessian interfaces Alternatively, the provider exposes the service using standard Hessian and the consumer calls it using Dubbo&amp;rsquo;s Hessian protocol. Features Number of connections: multiple connections Connection: short connection Transmission protocol: HTTP Transmission: synchronous transmission Serialization: Hessian binary serialization Scope of application: Incoming and outgoing parameter packets are large, the number of providers is more than that of consumers and can transfer files.</description></item><item><title>redis protocol</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/redis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/redis/</guid><description>RPC protocol based on redis implementation.
Register redis service address RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension(); Registry registry = registryFactory.getRegistry(URL.valueOf(&amp;#34;zookeeper://10.20.153.10:2181&amp;#34;)); registry.register(URL.valueOf(&amp;#34;redis://10.20.153.11/com.foo.BarService?category=providers&amp;amp;dynamic=false&amp;amp;application=foo&amp;amp;group=member&amp;amp;loadbalance=consistenthash&amp;#34;)); Use in client get service reference:
&amp;lt;dubbo:reference id=&amp;#34;store&amp;#34; interface=&amp;#34;java.util.Map&amp;#34; group=&amp;#34;member&amp;#34; /&amp;gt; or direct access by IP:
&amp;lt;dubbo:reference id=&amp;#34;store&amp;#34; interface=&amp;#34;java.util.Map&amp;#34; url=&amp;#34;redis://10.20.153.10:6379&amp;#34; /&amp;gt; you can also use a custom interface：
&amp;lt;dubbo:reference id=&amp;#34;store&amp;#34; interface=&amp;#34;com.foo.StoreService&amp;#34; url=&amp;#34;redis://10.20.153.10:6379&amp;#34; /&amp;gt; The method name is the same as the standard method name of memcached, just like get(key), set(key, value), delete(key)。</description></item><item><title>thrift protocol</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/thrift/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/thrift/</guid><description>The current dubbo support thrift protocol is an extension of the thrift native protocol, adding some additional header information to the native protocol, such as service name, magic number, and so on.
The use of dubbo thrift protocol also need to use thrift idl compiler to generate the corresponding java code, follow-up version will do some enhancement in this aspect.
dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.thrift&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;libthrift&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.8.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Configuration &amp;lt;dubbo:protocol name=&amp;#34;thrift&amp;#34; port=&amp;#34;3030&amp;#34; /&amp;gt; Example you can check dubbo thrift example</description></item><item><title>memcached protocol</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/memcached/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/memcached/</guid><description>RPC protocol based on memcached implementation.
Register memcached service address RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension(); Registry registry = registryFactory.getRegistry(URL.valueOf(&amp;#34;zookeeper://10.20.153.10:2181&amp;#34;)); registry.register(URL.valueOf(&amp;#34;memcached://10.20.153.11/com.foo.BarService?category=providers&amp;amp;dynamic=false&amp;amp;application=foo&amp;amp;group=member&amp;amp;loadbalance=consistenthash&amp;#34;)); Use in client get service reference:
&amp;lt;dubbo:reference id=&amp;#34;cache&amp;#34; interface=&amp;#34;java.util.Map&amp;#34; group=&amp;#34;member&amp;#34; /&amp;gt; or direct access by IP:
&amp;lt;dubbo:reference id=&amp;#34;cache&amp;#34; interface=&amp;#34;java.util.Map&amp;#34; url=&amp;#34;memcached://10.20.153.10:11211&amp;#34; /&amp;gt; you can also use a custom interface：
&amp;lt;dubbo:reference id=&amp;#34;cache&amp;#34; interface=&amp;#34;com.foo.CacheService&amp;#34; url=&amp;#34;memcached://10.20.153.10:11211&amp;#34; /&amp;gt; The method name is the same as the standard method name of memcached, just like get(key), set(key, value), delete(key)。</description></item><item><title>rmi protocol</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/rmi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/rmi/</guid><description>The RMI protocol uses the JDK standard java.rmi.* Implementation, using a block short connection and JDK standard serialization.
Features Number of connections: multiple connections Connection: short connection Transmission protocol: HTTP Transmission: synchronous transmission Serialization: Java standard Object Serialization Scope of application:the number of providers is more than that of consumers and can transfer files. Applicable scenarios: Conventional remote service method calls, interoperating with native RMI services Constraint Parameters and return values must implement Serializable interface The timeout configuration for RMI is invalid, you need to use java startup parameter settings:-Dsun.</description></item><item><title>webservice protocol</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/webservice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/webservice/</guid><description>WebService-based remote calling protocol，base on Apache CXF frontend-simple and transports-http implements。
Interoperable with native WebService services：
Providers expose services using Dubbo&amp;rsquo;s WebService protocol, which consumers invoke directly using the standard WebService interface, Or the provider exposes the service using the standard WebService, which consumers invoke using the Dubbo WebService protocol. dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.cxf&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;cxf-rt-frontend-simple&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.6.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.cxf&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;cxf-rt-transports-http&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.6.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Features Number of connections: multiple connections Connection: short connection Transmission protocol: HTTP Transmission: synchronous transmission Serialization: SOAP text serialization Applicable scenarios: System integration, cross-language calls Constraint Parameters and return class should implement Serializable interface Parameters should try to use the basic types and POJO Configuration configure webservice protocol：</description></item></channel></rss>