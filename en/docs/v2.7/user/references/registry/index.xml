<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Registry Server References on Apache Dubbo</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/registry/</link><description>Recent content in Registry Server References on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://dubbo.apache.org/en/docs/v2.7/user/references/registry/index.xml" rel="self" type="application/rss+xml"/><item><title>Nacos Registry Center</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/registry/nacos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/registry/nacos/</guid><description>Nacos is a very important registry center for Dubbo ecosystem, dubbo-registry-nacos is the implementation of Nacos integration to Nacos.
Prepare Work When you integrate dubbo-registry-nacos into your Dubbo project, please Make sure the Nacos service is started in the background. If you are not familiar with the basic use of Nacos, you can refer to Nacos Quick Start. It is recommended to use the version equal or above Nacos 1.0.0.</description></item><item><title>Zookeeper Registry Server</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/registry/zookeeper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/registry/zookeeper/</guid><description>Zookeeper is the child project of apache hadoop. Since it offers tree-like directory service and supports change notification, it&amp;rsquo;s suitable to use it as dubbo&amp;rsquo;s registry server. It&amp;rsquo;s a field-proven product, therefore it&amp;rsquo;s recommended to use it in the production environment. 1
Description on registration procedure:
When service provider boots up: write service URL address under directory /dubbo/com.foo.BarService/providers When service consumer boots up: subscribe to /dubbo/com.foo.BarService/providers for provider&amp;rsquo;s URL addresses. At the same time, write consumer&amp;rsquo;s URL address under /dubbo/com.</description></item><item><title>Multicast Registry</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/registry/multicast/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/registry/multicast/</guid><description>Multicast registry doesn&amp;rsquo;t require to setup any central node. Just like IP address broadcast, dubbo service providers and consumers can discover each other through this mechanism.
Service provider broadcasts its address when it boots up. Service consumer broadcasts its subscription request when it boots up. Once service provider receives subscription request, it unicasts its own address to the corresponding consumer, if unicast=false is set, then broadcast will be used instead. When service consumer receives provider&amp;rsquo;s address, it can start RPC invocation on the received address.</description></item><item><title>Redis Registry Server</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/registry/redis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/registry/redis/</guid><description>Redis Registry Server It is a registry server implementation 1 based on redis 2.
Use key/map structure in redis to save the registration info:
Main key for service name and type Key in the map is URL address Value in the map is the expiration time. Monitor center uses it to track and remove dirty data 3 Publish/Subscribe events in redis is leveraged for data change notification:
Distinguish event type with event&amp;rsquo;s value: register, unregister, subscribe, unsubscribe.</description></item><item><title>Simple Registry Server</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/registry/simple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/registry/simple/</guid><description>Simple registry server itself is a regular dubbo service. In this way, third-party dependency is unnecessary, and communication keeps consistent at the same moment.
Configuration Register simple registry server as dubbo service:
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:dubbo=&amp;#34;http://dubbo.apache.org/schema/dubbo&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&amp;#34;&amp;gt; &amp;lt;!-- application info configuration --&amp;gt; &amp;lt;dubbo:application name=&amp;#34;simple-registry&amp;#34; /&amp;gt; &amp;lt;!-- service protocol configuration --&amp;gt; &amp;lt;dubbo:protocol port=&amp;#34;9090&amp;#34; /&amp;gt; &amp;lt;!-- service configuration --&amp;gt; &amp;lt;dubbo:service interface=&amp;#34;org.apache.dubbo.registry.RegistryService&amp;#34; ref=&amp;#34;registryService&amp;#34; registry=&amp;#34;N/A&amp;#34; ondisconnect=&amp;#34;disconnect&amp;#34; callbacks=&amp;#34;1000&amp;#34;&amp;gt; &amp;lt;dubbo:method name=&amp;#34;subscribe&amp;#34;&amp;gt;&amp;lt;dubbo:argument index=&amp;#34;1&amp;#34; callback=&amp;#34;true&amp;#34; /&amp;gt;&amp;lt;/dubbo:method&amp;gt; &amp;lt;dubbo:method name=&amp;#34;unsubscribe&amp;#34;&amp;gt;&amp;lt;dubbo:argument index=&amp;#34;1&amp;#34; callback=&amp;#34;false&amp;#34; /&amp;gt;&amp;lt;/dubbo:method&amp;gt; &amp;lt;/dubbo:service&amp;gt; &amp;lt;!</description></item></channel></rss>