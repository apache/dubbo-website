<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Concept on Apache Dubbo</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/concept/</link><description>Recent content in Concept on Apache Dubbo</description><generator>Hugo</generator><language>en</language><atom:link href="https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/concept/index.xml" rel="self" type="application/rss+xml"/><item><title>generalization call</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/concept/generic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/concept/generic/</guid><description>&lt;p>Generalized call is a special call method of Dubbo-Go, which allows intermediate nodes to pass call information without interface information, and is often used in test and gateway scenarios. Generalized calls support Dubbo and Triple protocols, but the current serialization scheme only supports Hessian.&lt;/p>
&lt;h2 id="background">background&lt;/h2>
&lt;p>For ease of understanding, this document uses gateway usage scenarios to introduce generalized calls. Let&amp;rsquo;s consider ordinary calls first (non-generic calls). The figure below contains two key roles of consumer and provider (endpoint is used to represent a consumer or a provider in the following), and each has a definition of the org.apache.dubbo.sample.User interface. Assume that the org.apache.dubbo.sample.User interface needs to be used in the calling behavior.&lt;/p></description></item><item><title>Multilingual RPC</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/concept/multi_language/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/concept/multi_language/</guid><description>&lt;p>&lt;img alt="img" src="https://dubbo.apache.org/imgs/docs3-v2/golang-sdk/concept/rpc/multi_language/dubbogo-3.0-invocation.png">&lt;/p>
&lt;h3 id="cross-language-call">Cross-language call&lt;/h3>
&lt;p>With the wide-scale application of microservice scenarios, multi-language scenarios are becoming more and more common, and developers are more willing to use more suitable languages to implement different modules of a complex system. For example, use C to write gateways, use Go to write K8S resource operators, and use Java to write business applications. Languages and scenarios are not bound. Enterprises can often choose the appropriate language by combining their own technology stack and the expertise of developers.&lt;/p></description></item><item><title>Network Protocol</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/concept/protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/concept/protocol/</guid><description>&lt;h2 id="1-rpc-service-framework-and-network-protocol">1. RPC service framework and network protocol&lt;/h2>
&lt;p>The network protocol is very important in the RPC scenario. In the microservice scenario, the communication between service processes depends on the network that can be connected, and the network protocol that is consistent between the client and the server. Network protocol is an abstract concept. From the perspective of Dubbo-go application development, we might as well divide the protocols we care about into three dimensions for discussion.&lt;/p></description></item><item><title>Service Registration Discovery</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/concept/registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/concept/registry/</guid><description>&lt;h2 id="1-dubbos-registration-center">1. Dubbo&amp;rsquo;s registration center&lt;/h2>
&lt;p>The registration center is responsible for saving the information of the server application in the RPC scenario.&lt;/p>
&lt;p>The server registers the interface information and sends its own address to the registration center, and the client reads and subscribes to the list of addresses that need to be called from the registration center. The entire structure is shown in the figure:&lt;/p>
&lt;p>&lt;img alt="img" src="https://dubbo.apache.org/imgs/architecture.png">&lt;/p>
&lt;p>For details about Dubbo service discovery, please refer to &lt;a href="https://dubbo.apache.org/zh-cn/docs/concepts/service-discovery/">Dubbo Official Website Concept Introduction&lt;/a>&lt;/p></description></item></channel></rss>