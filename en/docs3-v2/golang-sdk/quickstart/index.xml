<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Quick Start on Apache Dubbo</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/quickstart/</link><description>Recent content in Quick Start on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://dubbo.apache.org/en/docs3-v2/golang-sdk/quickstart/index.xml" rel="self" type="application/rss+xml"/><item><title>Install Dubbo-go development environment</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/quickstart/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/quickstart/install/</guid><description>1. Install the Go language environment It is recommended to use the latest version of go 1.17
go version &amp;gt;= go 1.15
[Go language official website download address]
Add $GOPATH/bin to environment variable
2. Install the serialization tool protoc [protoc download address]
3. Install dubbogo-cli and related plugins Execute the following command to install dubbogo-cli to $GOPATH/bin
$ export GOPROXY=&amp;#34;https://goproxy.cn&amp;#34; $ go install github.com/dubbogo/dubbogo-cli@latest $ dubbogo-cli hello Install dependent tool plugins</description></item><item><title>Complete an RPC call</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/quickstart/quickstart_triple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/quickstart/quickstart_triple/</guid><description>1. Generate Demo project Use the installed dubbogo-cli tool to create a demo project.
$ mkdir quickstart $ cd quickstart $ dubbogo-cli newDemo. $ tree . . ├── api │ ├── samples_api.pb.go │ ├── samples_api.proto │ └── samples_api_triple.pb.go ├── go-client │ ├── cmd │ │ └── client.go │ └── conf │ └── dubbogo.yaml ├── go-server │ ├── cmd │ │ └── server.go │ └── conf │ └── dubbogo.yaml └── go.mod You can see that the generated project contains a client project and a server project, as well as related configuration files.</description></item><item><title>Complete an RPC call (the version that defines the interface yourself)</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/quickstart/quickstart_triple_with_customize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/quickstart/quickstart_triple_with_customize/</guid><description>1 Overview In this chapter, we will implement a simple small requirement and implement a distributed ID generation service through which distributed IDs can be obtained (Assuming a distributed ID, we will not discuss the ID generation scheme and algorithm, here we directly use uuid instead, just to demonstrate the creation of custom services)
2. Server implementation First use dubbogo-cli to create IDC service
dubbogo-cli newApp IDC cd IDC tree. .</description></item></channel></rss>