<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reference on Apache Dubbo</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/refer/</link><description>Recent content in Reference on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://dubbo.apache.org/en/docs3-v2/golang-sdk/refer/index.xml" rel="self" type="application/rss+xml"/><item><title>configuration item reference</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/refer/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/refer/config/</guid><description>root configuration Client configuration Server configuration Registry configuration Using the Configuration API The client sets up the registry using the configuration API You can quickly set the registry for debugging by calling the config.NewRegistryConfigWithProtocolDefaultPort method, and support zookeeper(127.0.0.1:2181) and nacos(127.0.0.1:8848)
rc := config. NewRootConfigBuilder(). SetConsumer(config. NewConsumerConfigBuilder(). SetRegistryIDs(&amp;#34;zookeeperID&amp;#34;). // use defined registryID Build()). AddRegistry(&amp;#34;zookeeperID&amp;#34;, config. NewRegistryConfigWithProtocolDefaultPort(&amp;#34;zookeeper&amp;#34;)). build() All interfaces: can be configured by calling the rich interfaces provided by RegistryConfigBuilder.
rc := config.</description></item><item><title>Use dubbogo-cli tool</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/refer/use_dubbogo_cli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/refer/use_dubbogo_cli/</guid><description>1. Installation dubbogo-cli is a sub-project of the Apache/dubbo-go ecosystem, which provides developers with convenient functions such as application template creation, tool installation, and interface debugging to improve user R&amp;amp;D efficiency.
Execute the following command to install dubbogo-cli to $GOPATH/bin
go install github.com/dubbogo/dubbogo-cli@latest 2. Function overview dubbogo-cli supports the following capabilities
Application template creation
dubbogo-cli newApp. Create an application template in the current directory
Demo creation
dubbogo-cli newDemo. Create an RPC example in the current directory, including a client and a server</description></item><item><title>Dubbogo Ecological Components</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/refer/ecology/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/refer/ecology/</guid><description>Dubbo-go / Dubbo-go 3.0 github.com/apache/dubbo-go
Apache Dubbo is implemented in Go language, which bridges between Java and Golang.
Dubbo-go-pixiu github.com/apache/dubbo-go-pixiu
dubbo-go-pixiu gateway supports calling dubbo/dubbo-go clusters with dubbo protocol and http protocol
Dubbo-getty github.com/apache/dubbo-getty
dubbo-getty is an asynchronous network io library in Go language that supports tcp/udp/websocket protocols.
Dubbo-go-hessian2 github.com/apache/dubbo-go-hessian2
Dubbo-go-hessian2 is a Go language hessian2 serialization protocol library
Dubbogo-tools github.com/dubbogo/tools
Dubbogo-tools includes
dubbo-cli tool imports-formatter Go language imports block formatter protoc-gen-triple PB compilation plugin protoc-gen-dubbo3grpc PB compilation plugin Triple-go github.</description></item><item><title>Depends on the adaptation version number</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/refer/compatible_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/refer/compatible_version/</guid><description>When Dubbo-go releases a new version, update the version it currently depends on.
Dependency Dubbo-go Triple protoc-gen-go-triple v3.0.1 v1.1.8 v1.0.8 v3.0.0 v1.1.6 v1.0.5 v3.0.0-rc4-1 v1.1.3 v1.0.2 v3.0.0-rc3 v1.0.9 v1.0.0</description></item><item><title>Basic concepts of configuration</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/refer/basic_concept/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/refer/basic_concept/</guid><description>1. Framework configuration The Dubbo-go framework needs to rely on configuration to start. Configuration contains the various capabilities that a developer wishes to use with the framework.
Configuration format yaml
Configuration path Load framework configuration from ../conf/dubbogo.yaml by default
You can modify the configuration file path by specifying the environment variable: DUBBO_GO_CONFIG_PATH=$(your_config_path)/dubbogo.yaml.
Configure the root structure Located at dubbo.apache.org/dubbo-go/v3/config/root_config.go: RootConfig
When the framework is loaded, any form of configuration will be parsed into RootConfig and loaded in the RootConfig.</description></item></channel></rss>