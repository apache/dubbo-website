<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Advanced Features on Apache Dubbo</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/features/</link><description>Recent content in Advanced Features on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/features/index.xml" rel="self" type="application/rss+xml"/><item><title>Launching the Application Using the Configuration API</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/features/config_api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/features/config_api/</guid><description>1. Preparations dubbo-go cli tools and dependent tools have been installed Create a new demo application 2. Start the application using the configuration API Users do not need to use configuration files, and can directly write configurations in the code in the form of API calls
2.1 Modify the server code: func main() { config. SetProviderService(&amp;amp;GreeterProvider{}) protocolConfig := config. NewProtocolConfigBuilder(). SetPort(&amp;#34;20000&amp;#34;). SetName(&amp;#34;tri&amp;#34;). build() serviceConfig := config. NewServiceConfigBuilder(). SetInterface(&amp;#34;&amp;#34;). // read interface from pb build() providerConfig := config.</description></item><item><title>log</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/features/custom-logger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/features/custom-logger/</guid><description>Refer to samples dubbo-go-samples/logger
1. Log configuration dubbogo 3.0 uses the zap log library by default. If you do not add logger configuration in the configuration file, the log will be printed to the control. The default level is debug. You can also configure the log level in the configuration file. You can configure zap-config and lumberjack-config as follows to customize the log output.
dubbo: logger: zap-config: level: debug # log level development: false disableCaller: false disableStacktrace: false encoding: &amp;#34;console&amp;#34; # zap encoder configuration encoderConfig: messageKey: &amp;#34;message&amp;#34; levelKey: &amp;#34;level&amp;#34; timeKey: &amp;#34;time&amp;#34; nameKey: &amp;#34;logger&amp;#34; callerKey: &amp;#34;caller&amp;#34; stacktraceKey: &amp;#34;stacktrace&amp;#34; lineEnding: &amp;#34;&amp;#34; levelEncoder: &amp;#34;capitalColor&amp;#34; timeEncoder: &amp;#34;iso8601&amp;#34; durationEncoder: &amp;#34;seconds&amp;#34; callerEncoder: &amp;#34;short&amp;#34; nameEncoder: &amp;#34;&amp;#34; outputPaths: - &amp;#34;stderr&amp;#34; errorOutputPaths: - &amp;#34;stderr&amp;#34; lumberjack-config: # Write the log file name filename: &amp;#34;logs.</description></item><item><title>Use ctx to pass context information</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/features/context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/features/context/</guid><description>1. Preparations dubbo-go cli tools and dependent tools have been installed Create a new demo application 2. Use context to pass additional information Reference dubbo-go-samples/context</description></item><item><title>generalization call</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/features/generic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/features/generic/</guid><description>1. Dubbo-go generalization calls Java Server Use Triple protocol + hessian2 serialization scheme
1.1 Java-Server startup Transmission structure definition package org.apache.dubbo; import java.io.Serializable; import java.util.Date; public class User implements Serializable { private String id; private String name; private int age; private Date time = new Date(); } Interface definition package org.apache.dubbo; import java.util.ArrayList; import java.util.List; import java.util.Map; //import org.apache.dubbo.rpc.filter.GenericFilter; public interface UserProvider { User GetUser1(String userId); } 1.2 Go-Client generalization call Constructing a generalized interface reference in the form of an API is shown here</description></item><item><title>generalization call</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/features/generic-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/features/generic-2/</guid><description>1. Dubbogo generalization calls Java Server Use Triple protocol + hessian2 serialization scheme
Please refer to Dubbogo 3.0 Generalization Call Documentation
1.1 Java-Server startup Transmission structure definition package org.apache.dubbo; import java.io.Serializable; import java.util.Date; public class User implements Serializable { private String id; private String name; private int age; private Date time = new Date(); } Interface definition package org.apache.dubbo; import java.util.ArrayList; import java.util.List; import java.util.Map; //import org.apache.dubbo.rpc.filter.GenericFilter; public interface UserProvider { User GetUser1(String userId); } 1.</description></item></channel></rss>