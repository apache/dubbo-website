<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Registry on Apache Dubbo</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/</link><description>Recent content in Registry on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding the Registry</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/desc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/desc/</guid><description/></item><item><title>Application-Level Service Discovery</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/service-discovery/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/service-discovery/</guid><description>Reference article &amp;ldquo;Dubbo takes an important step towards cloud native application-level service discovery analysis&amp;rdquo;
Reference repository: dubbo-go-samples/registry/serivcediscovery
Configuration Consumer side dubbo: registries: demoZK: protocol: nacos address: 127.0.0.1:8848 registry-type: service # Specify the registry as application-level service discovery, if not filled, it defaults to interface level metadata-report: # Define metadata center protocol: nacos # The metadata center can choose nacos/zk address: 127.0.0.1:8848 consumer: references: GreeterClientImpl: protocol: tri interface: com.apache.dubbo.sample.basic.IGreeter Provider side dubbo: registries: demoZK: protocol: nacos address: 127.</description></item><item><title>Registry Configuration</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/registry/</guid><description>Refer to samples dubbo-go-samples/registry
Registry registration center configuration Nacos Registration Center dubbo: application: # Application information, after the service is started, the relevant information will be registered in the registration center, which can be identified by the client from the url name: myApp # application=myApp; name=myApp module: opensource # module=opensource organization: dubbo # organization=dubbo owner: laurence # owner=laurence version: myversion # app.version=myversion environment: pro # environment=pro registries: nacosWithCustomGroup: protocol: nacos # The registration center chooses nacos address: 127.</description></item><item><title>Use Nacos as a registry</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/nacos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/nacos/</guid><description>1. Preparations dubbo-go cli tools and dependent tools have been installed Create a new demo application 2. Use grpc_cli tool to debug Dubbo service 2.1 Start the server Example: user.go:
func (u *UserProvider) GetUser(ctx context.Context, userStruct *CallUserStruct) (*User, error) { fmt.Printf(&amp;#34;=========================\nreq:%#v\n&amp;#34;, userStruct) rsp := User{&amp;#34;A002&amp;#34;, &amp;#34;Alex Stocks&amp;#34;, 18, userStruct.SubInfo} fmt.Printf(&amp;#34;========================\nrsp:%#v\n&amp;#34;, rsp) return &amp;amp;rsp, nil } The server opens a service named GetUser, passes in a CallUserStruct parameter, and returns a User parameter</description></item><item><title>使用 Nacos 作为注册中心</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/nacos-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/nacos-2/</guid><description>1. 准备工作 dubbo-go cli 工具和依赖工具已安装 创建一个新的 demo 应用 启动一个 Nacos 实例，暴露 8848 端口 2. 配置注册中心 title: Use Nacos as a registry type: docs weight: 10 1. Preparations dubbo-go cli tools and dependent tools have been installed Create a new demo application Start a Nacos instance and expose port 8848 2. Configure the registration center Modify the server configuration go-server/conf/dubbogo.yaml
dubbo: registries: nacos: # configure Nacos registration center protocol: nacos address: 127.</description></item><item><title>Using Zookeeper as a Registry</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/zookeeper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/zookeeper/</guid><description>TBD</description></item><item><title>Using Polaris as a Registry</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/polaris/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/polaris/</guid><description>TBD</description></item><item><title>Multiple Registries</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/multi_registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/multi_registry/</guid><description>A registration center for multiple interface dimensions that can be configured by a Dubbo-go application.
1. Preparations dubbo-go cli tools and dependent tools have been installed Create a new demo application Start Nacos and Zookeeper locally 2. Using multiple registries Modify the server configuration go-server/conf/dubbogo.yaml, and register the service on two registration centers at the same time.
dubbo: registries: zookeeper: # Specify the zookeeper registration center protocol: zookeeper address: 127.0.0.1:2181 nacos: # Specify the nacos registration center protocol: nacos address: 127.</description></item></channel></rss>