<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Health Check on Apache Dubbo</title><link>https://cn.dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/health/</link><description>Recent content in Health Check on Apache Dubbo</description><generator>Hugo</generator><language>en</language><atom:link href="https://cn.dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/health/index.xml" rel="self" type="application/rss+xml"/><item><title>Grpc-based health check</title><link>https://cn.dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/health/triple-health-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/health/triple-health-check/</guid><description>&lt;h2 id="1-grpc-health-check">1. Grpc health check&lt;/h2>
&lt;p>The Grpc health check is implemented through an ordinary user rpc call. The Grpc health check defines the following protobuf, so that the intercommunication of all Grpc protocol health checks can be realized.&lt;/p>
&lt;blockquote>
&lt;p>Firstly, since it is a GRPC service itself, doing a health check is in the same format as a normal rpc. Secondly, it has rich semantics such as per-service health status. Thirdly, as a GRPC service, it is able to reuse All the existing billing, quota infrastructure, etc, and thus the server has full control over the access of the health checking service.&lt;/p></description></item><item><title>dubbogo 3.0 check at startup</title><link>https://cn.dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/health/start-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/health/start-check/</guid><description>&lt;h1 id="check-at-startup">check at startup&lt;/h1>
&lt;p>Check if dependent services are available at startup&lt;/p>
&lt;p>By default, Dubbo-go will check whether the dependent services are available at startup. When they are not available, an exception will be thrown to prevent the application from completing initialization, so that problems can be detected early when going online. The default check=&amp;ldquo;true&amp;rdquo; and wait for 3s.&lt;/p>
&lt;p>You can turn off the check with check=&amp;ldquo;false&amp;rdquo;. For example, when testing, some services don&amp;rsquo;t care, or there is a circular dependency, and one of them must be started first.&lt;/p></description></item><item><title>Kubernetes Probe</title><link>https://cn.dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/health/kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/health/kubernetes/</guid><description/></item></channel></rss>