<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Service Mesh on Apache Dubbo</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/</link><description>Recent content in Service Mesh on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploy the Istio environment</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/istio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/istio/</guid><description>1. Preparations The docker, helm, and kubectl environments have been installed. dubbo-go cli tools and dependent tools have been installed 2. Deploy the Istio environment Use helm to install istio base CRD and istiod components. You can also refer to Istio Documentation to install using istioctl. $ helm repo add istio https://istio-release.storage.googleapis.com/charts $ kubectl create namespace istio-system $ helm install istio-base istio/base -n istio-system $ helm install istiod istio/istiod --namespace istio-system Delete istio horizontal expansion resource</description></item><item><title>Deploy Dubbo-go application in Istio environment</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/deploy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/deploy/</guid><description>In this chapter, we will use the application template to quickly create a set of Dubbo-go Server and Client applications and deploy them in the Istio cluster; observe, debug and verify that service discovery and invocation are successful.
1. Preparations The dubbo-go cli tool and dependent tools have been installed, grpc_cli (for local debugging). The docker, helm, and kubectl environments have been installed. (arm machines need to support docker buildx) Task [istio environment deployment] completed 2.</description></item><item><title>traffic management</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/traffic_management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/traffic_management/</guid><description>In this section, we will continue the previous task [Deploy Dubbo-go application in Istio environment].
In the previous task, we deployed a set of Dubbo-go Server and Client applications in the cluster, and verified the success of service discovery and invocation. In this section, we will create a new version of the server-side application. By configuring VirtualService and DestinationRule, routing management and traffic transfer capabilities are realized
1. Preparations The dubbo-go cli tool and dependent tools have been installed, grpc_cli (for local debugging).</description></item><item><title>Proxyless Service Mesh</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/proxyless_service_mesh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/proxyless_service_mesh/</guid><description>1. What is Proxyless Service-Mesh (No Proxy Service Mesh) ? 1.1 Brief Analysis of Service Mesh Istio is the most popular open source service mesh today. It consists of a control plane and a data plane. Its architecture is as follows. The picture is taken from istio official website
The control plane located in the lower half of the figure is responsible for the delivery of resources such as configuration, service information, and certificates.</description></item></channel></rss>