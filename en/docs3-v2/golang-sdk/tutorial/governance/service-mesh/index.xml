<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Service Mesh on Apache Dubbo</title><link>https://cn.dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/</link><description>Recent content in Service Mesh on Apache Dubbo</description><generator>Hugo</generator><language>en</language><atom:link href="https://cn.dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploy the Istio environment</title><link>https://cn.dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/istio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/istio/</guid><description>&lt;h2 id="1-preparations">1. Preparations&lt;/h2>
&lt;ul>
&lt;li>The docker, helm, and kubectl environments have been installed.&lt;/li>
&lt;li>dubbo-go cli tools and dependent tools have been installed&lt;/li>
&lt;/ul>
&lt;h2 id="2-deploy-the-istio-environment">2. Deploy the Istio environment&lt;/h2>
&lt;ol>
&lt;li>Use helm to install istio base CRD and istiod components. You can also refer to &lt;a href="https://istio.io/">Istio Documentation&lt;/a> to install using istioctl.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ helm repo add istio https://istio-release.storage.googleapis.com/charts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kubectl create namespace istio-system
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ helm install istio-base istio/base -n istio-system
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ helm install istiod istio/istiod --namespace istio-system
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>
&lt;p>Delete istio horizontal expansion resource&lt;/p></description></item><item><title>Deploy Dubbo-go application in Istio environment</title><link>https://cn.dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/deploy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/deploy/</guid><description>&lt;p>In this chapter, we will use the application template to quickly create a set of Dubbo-go Server and Client applications and deploy them in the Istio cluster; observe, debug and verify that service discovery and invocation are successful.&lt;/p>
&lt;h2 id="1-preparations">1. Preparations&lt;/h2>
&lt;ul>
&lt;li>The dubbo-go cli tool and dependent tools have been installed, grpc_cli (for local debugging).&lt;/li>
&lt;li>The docker, helm, and kubectl environments have been installed. (arm machines need to support docker buildx)&lt;/li>
&lt;li>&lt;a href="../istio/">Task [istio environment deployment]&lt;/a> completed&lt;/li>
&lt;/ul>
&lt;h2 id="2-develop-server-side-dubbo-go-application">2. Develop server-side Dubbo-go application&lt;/h2>
&lt;h3 id="21-use-dubbogo-cli-to-create-a-project-template">2.1 Use dubbogo-cli to create a project template&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>$ mkdir mesh-app-server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cd mesh-app-server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ dubbogo-cli newApp .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ tree .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── Makefile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── api
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── api.proto
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├──build
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── Dockerfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── chart
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── app
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ ├── Chart.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ ├── templates
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ │ ├── _helpers.tpl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ │ ├── deployment.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ │ ├── service.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ │ └── serviceaccount.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ └── values.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── nacos_env
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── Chart.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── templates
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ ├── _helpers.tpl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ ├── deployment.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ └── service.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── values.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── cmd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── app.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── dubbogo.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── go.mod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── go.sum
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── pkg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── service.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The generated project includes several directories:&lt;/p></description></item><item><title>traffic management</title><link>https://cn.dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/traffic_management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/traffic_management/</guid><description>&lt;p>In this section, we will continue the previous task &lt;a href="../deploy/">[Deploy Dubbo-go application in Istio environment]&lt;/a>.&lt;/p>
&lt;p>In the previous task, we deployed a set of Dubbo-go Server and Client applications in the cluster, and verified the success of service discovery and invocation. In this section, we will create a new version of the server-side application. By configuring VirtualService and DestinationRule, routing management and traffic transfer capabilities are realized&lt;/p>
&lt;h2 id="1-preparations">1. Preparations&lt;/h2>
&lt;ul>
&lt;li>The dubbo-go cli tool and dependent tools have been installed, grpc_cli (for local debugging).&lt;/li>
&lt;li>The docker, helm, and kubectl environments have been installed. (arm machines need to support docker buildx)&lt;/li>
&lt;li>Task &lt;a href="../deploy/">[Deploy Dubbo-go application in Istio environment]&lt;/a> completed&lt;/li>
&lt;/ul>
&lt;h2 id="2-develop-multi-version-dubbo-go-applications">2. Develop multi-version Dubbo-go applications.&lt;/h2>
&lt;h3 id="21-use-dubbogo-cli-to-create-another-project-template">2.1 Use dubbogo-cli to create another project template&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ dubbogo-cli newApp .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="22-develop-and-deploy-client-dubbo-go-application-v2">2.2 Develop and deploy client Dubbo-go application v2:&lt;/h3>
&lt;h4 id="write-business-logic">Write business logic&lt;/h4>
&lt;ul>
&lt;li>Modify the implementation method of package/service/service.go, and return the version number as v2.0.0&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">func&lt;/span> (s &lt;span style="color:#719e07">*&lt;/span>GreeterServerImpl) &lt;span style="color:#268bd2">SayHello&lt;/span>(ctx context.Context, in &lt;span style="color:#719e07">*&lt;/span>api.HelloRequest) (&lt;span style="color:#719e07">*&lt;/span>api.User, &lt;span style="color:#dc322f">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#719e07">return&lt;/span> &lt;span style="color:#719e07">&amp;amp;&lt;/span>api.User{Name: &lt;span style="color:#2aa198">&amp;#34;Hello &amp;#34;&lt;/span> &lt;span style="color:#719e07">+&lt;/span> in.Name, Id: &lt;span style="color:#2aa198">&amp;#34;v2.0.0&amp;#34;&lt;/span>}, &lt;span style="color:#cb4b16">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>Modify the following configuration file, use the xds protocol as the registration center, and load the service structure named GreeterServerImpl.&lt;/p></description></item><item><title>Proxyless Service Mesh</title><link>https://cn.dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/proxyless_service_mesh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/proxyless_service_mesh/</guid><description>&lt;h2 id="1-what-is-proxyless-service-mesh-no-proxy-service-mesh-">1. What is Proxyless Service-Mesh (No Proxy Service Mesh) ?&lt;/h2>
&lt;h3 id="11-brief-analysis-of-service-mesh">1.1 Brief Analysis of Service Mesh&lt;/h3>
&lt;p>Istio is the most popular open source service mesh today. It consists of a control plane and a data plane. Its architecture is as follows. The picture is taken from &lt;a href="https://istio.io/">istio official website&lt;/a>&lt;/p>
&lt;p>&lt;img alt="After using Istio" src="https://cn.dubbo.apache.org/imgs/docs3-v2/golang-sdk/concept/mesh/proxyless_service_mesh/service-mesh.svg">&lt;/p>
&lt;p>The control plane located in the lower half of the figure is responsible for the delivery of resources such as configuration, service information, and certificates. The data plane located in the upper part pays attention to the communication traffic between services; the traditional service grid intercepts all business network traffic through proxy, and the proxy needs to perceive the configuration resources issued by the control plane, so as to control the direction of network traffic as required .&lt;/p></description></item></channel></rss>