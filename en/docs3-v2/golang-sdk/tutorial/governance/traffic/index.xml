<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Traffic Management on Apache Dubbo</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/traffic/</link><description>Recent content in Traffic Management on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/traffic/index.xml" rel="self" type="application/rss+xml"/><item><title>routing rules</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/traffic/mesh_router/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/traffic/mesh_router/</guid><description>Introduction to routing rules &amp;ldquo;Microservice Mesh Routing Scheme Draft V2&amp;rdquo;
Introduction Routing rules, in simple terms, are to send specific request traffic to specific service provider according to specific conditions. Thereby realizing the distribution of flow.
In the definition of Dubbo3 unified routing rules, two resources in yaml format need to be provided: virtual service and destination rule. Its format is very similar to the routing rules defined by service mesh.</description></item><item><title>Elegant online and offline</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/traffic/graceful_shutdown/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/traffic/graceful_shutdown/</guid><description>Gracefully log in and out Introduction In the process of stable production, container scheduling is completely controlled by k8s, and microservice governance is completely maintained and managed by service framework or operation and maintenance personnel. In the case of releasing a new version or expanding or shrinking the capacity, the old container instance will be terminated and replaced with a new container instance. For an online production environment carrying high traffic, if the connection of this replacement process is unreasonable, the A large number of wrong requests are caused in a short period of time, triggering alarms and even affecting normal business.</description></item></channel></rss>