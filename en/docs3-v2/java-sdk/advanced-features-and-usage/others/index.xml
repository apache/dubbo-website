<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Others on Apache Dubbo</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/</link><description>Recent content in Others on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/index.xml" rel="self" type="application/rss+xml"/><item><title>Custom Service Container</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/service-container/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/service-container/</guid><description>Feature description The service container of Dubbo 3 is a standalone startup program, because the background service does not need the functions of web containers such as Tomcat or JBoss. If you insist on using the web container to load the service provider, it will increase complexity and waste resources. Therefore, services usually do not require the features of web containers such as Tomcat/JBoss, and there is no need to use web containers to load services.</description></item><item><title>Graceful shutdown</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/graceful-shutdown/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/graceful-shutdown/</guid><description>Feature description Graceful shutdown means that the service instance can be stopped safely and smoothly without affecting the ongoing business. A Dubbo service may be both a service provider and a service consumer. When the service is stopped:
Consumers will no longer request stopped service instances The request being processed by the service instance can be processed normally scenes to be used Stop the service with kill PID Stop the service through /shutdown of SpringBoot Actuator Dubbo 3.</description></item><item><title>Host Address Custom Exposure</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/set-host/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/set-host/</guid><description>Feature description In Dubbo, Provider mainly does two things when it starts
One is to start the server The second is to register the service with the registration center. When starting the server, the socket needs to be bound, and when the service is registered with the registration center, the unique service address of the socket needs to be sent. What is the default host when host is not set in dubbo?</description></item><item><title>Log Framework Adaptation and Runtime Management</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/logger-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/logger-management/</guid><description>Feature description Adaptation of log frameworks. Since 2.2.1, dubbo has built-in adaptation of log4j, slf4j, jcl, and jdk log frameworks.
Log framework runtime management, starting from 3.0.10, dubbo-qos runtime management supports query log configuration and dynamically modify the used log framework and log level.
The log configuration modified by dubbo-qos is not stored persistently, and will become invalid after the application is restarted.
scenes to be used How to use Log framework adaptation The logging output policy can be explicitly configured in the following ways</description></item><item><title>Kubernetes Probe</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/dubbo-kubernetes-probe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/dubbo-kubernetes-probe/</guid><description>Feature description Pod lifecycle is closely related to service scheduling. Through the implementation of official Kubernetes probes, Dubbo3 and even the entire application can The life cycle of the Pod and the life cycle of the Pod. In the entire life cycle of the Pod, only the health check part of the Pod is affected. We can configure the liveness probe (survival probe) and readiness probe (readability probe) to Affects the life cycle of the container.</description></item><item><title>Dubbo deploy to Docker environment</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/docker/</guid><description>Some deployment scenarios need to dynamically specify the address of service registration. For example, docker bridge network mode need to specify a registered host IP for external network communication. Dubbo provides two pairs of system attributes in the startup phase, which are used to set the IP and port addresses of external communication.
DUBBO_IP_TO_REGISTRY &amp;mdash; Registering to the IP address of the registration center DUBBO_PORT_TO_REGISTRY &amp;mdash; Registering to the port of the registration center DUBBO_IP_TO_BIND &amp;mdash; Listening IP addresses DUBBO_PORT_TO_BIND &amp;mdash; Listening ports The above four configurations are optional.</description></item><item><title>Logging Framework Configuration and Usage</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/logger-howto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/logger-howto/</guid><description>Feature Description Prior to dubbo 3.3.0-beta.3, dubbo and dubbo-samples were using a mix of log4j and logback, leading to frequent conflicts and errors due to some modules lacking log configuration. Therefore, after 3.3.0-beta.3, the logging components have been upgraded to log4j2 for simplicity and reduced maintenance costs. This document explains how to configure and use the logging framework to avoid conflicts caused by indirectly introducing multiple logging frameworks.
How To Use Usage Conventions Please use log4j2 as the logging framework, and avoid using log4j and logback.</description></item></channel></rss>