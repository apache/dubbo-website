<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Others on Apache Dubbo</title><link>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/</link><description>Recent content in Others on Apache Dubbo</description><generator>Hugo</generator><language>en</language><atom:link href="https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/index.xml" rel="self" type="application/rss+xml"/><item><title>Custom Service Container</title><link>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/service-container/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/service-container/</guid><description>&lt;h2 id="feature-description">Feature description&lt;/h2>
&lt;p>The service container of Dubbo 3 is a standalone startup program, because the background service does not need the functions of web containers such as Tomcat or JBoss. If you insist on using the web container to load the service provider, it will increase complexity and waste resources. Therefore, services usually do not require the features of web containers such as Tomcat/JBoss, and there is no need to use web containers to load services.&lt;/p></description></item><item><title>Graceful shutdown</title><link>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/graceful-shutdown/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/graceful-shutdown/</guid><description>&lt;h2 id="feature-description">Feature description&lt;/h2>
&lt;p>Graceful shutdown means that the service instance can be stopped safely and smoothly without affecting the ongoing business.
A Dubbo service may be both a service provider and a service consumer. When the service is stopped:&lt;/p>
&lt;ol>
&lt;li>Consumers will no longer request stopped service instances&lt;/li>
&lt;li>The request being processed by the service instance can be processed normally&lt;/li>
&lt;/ol>
&lt;h2 id="scenes-to-be-used">scenes to be used&lt;/h2>
&lt;ol>
&lt;li>Stop the service with &lt;code>kill PID&lt;/code>&lt;/li>
&lt;li>Stop the service through &lt;code>/shutdown&lt;/code> of SpringBoot Actuator&lt;/li>
&lt;/ol>
&lt;p>Dubbo 3.0 and above supports different types of Java applications, including SpringBoot applications, Spring applications, and non-Spring applications.&lt;/p></description></item><item><title>Host Address Custom Exposure</title><link>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/set-host/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/set-host/</guid><description>&lt;h2 id="feature-description">Feature description&lt;/h2>
&lt;p>In Dubbo, Provider mainly does two things when it starts&lt;/p>
&lt;ul>
&lt;li>One is to start the server&lt;/li>
&lt;li>The second is to register the service with the registration center. When starting the server, the socket needs to be bound, and when the service is registered with the registration center, the unique service address of the socket needs to be sent.&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>What is the default &lt;code>host&lt;/code> when &lt;code>host&lt;/code> is not set in &lt;code>dubbo&lt;/code>?&lt;/li>
&lt;li>How to specify the &lt;code>host&lt;/code> of the service in &lt;code>dubbo&lt;/code>, can we use hostname or domain instead of IP address as &lt;code>host&lt;/code>?&lt;/li>
&lt;li>When using docker, sometimes it is necessary to set port mapping. At this time, the socket bound when starting the server and the socket registered with the registration center use different port numbers. How to set it at this time?&lt;/li>
&lt;/ol>
&lt;h2 id="scenes-to-be-used">scenes to be used&lt;/h2>
&lt;h2 id="how-to-use">How to use&lt;/h2>
&lt;h3 id="default-host-when-no-host-is-set">Default host when no host is set&lt;/h3>
&lt;p>The general dubbo protocol configuration is as follows:&lt;/p></description></item><item><title>Log Framework Adaptation and Runtime Management</title><link>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/logger-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/logger-management/</guid><description>&lt;h2 id="feature-description">Feature description&lt;/h2>
&lt;p>Adaptation of log frameworks. Since &lt;code>2.2.1&lt;/code>, dubbo has built-in adaptation of log4j, slf4j, jcl, and jdk log frameworks.&lt;/p>
&lt;p>Log framework runtime management, starting from &lt;code>3.0.10&lt;/code>, dubbo-qos runtime management supports query log configuration and dynamically modify the used log framework and log level.&lt;/p>
&lt;blockquote>
&lt;p>The log configuration modified by dubbo-qos is not stored persistently, and will become invalid after the application is restarted.&lt;/p>
&lt;/blockquote>
&lt;h2 id="scenes-to-be-used">scenes to be used&lt;/h2>
&lt;h2 id="how-to-use">How to use&lt;/h2>
&lt;h2 id="log-framework-adaptation">Log framework adaptation&lt;/h2>
&lt;p>The logging output policy can be explicitly configured in the following ways&lt;/p></description></item><item><title>Kubernetes Probe</title><link>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/dubbo-kubernetes-probe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/dubbo-kubernetes-probe/</guid><description>&lt;h2 id="feature-description">Feature description&lt;/h2>
&lt;p>&lt;a href="https://kubernetes.io/zh/docs/concepts/workloads/pods/pod-lifecycle/">Pod lifecycle&lt;/a> is closely related to service scheduling. Through the implementation of official Kubernetes probes, Dubbo3 and even the entire application can The life cycle of the Pod and the life cycle of the Pod. In the entire life cycle of the Pod, only the health check part of the Pod is affected. We can configure the liveness probe (survival probe) and readiness probe (readability probe) to Affects the life cycle of the container.&lt;/p></description></item><item><title>Dubbo deploy to Docker environment</title><link>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/docker/</guid><description>&lt;p>Some deployment scenarios need to dynamically specify the address of service registration. For example, docker bridge network mode need to specify a registered host IP for external network communication. Dubbo provides two pairs of system attributes in the startup phase, which are used to set the IP and port addresses of external communication.&lt;/p>
&lt;ul>
&lt;li>DUBBO_IP_TO_REGISTRY &amp;mdash; Registering to the IP address of the registration center&lt;/li>
&lt;li>DUBBO_PORT_TO_REGISTRY &amp;mdash; Registering to the port of the registration center&lt;/li>
&lt;li>DUBBO_IP_TO_BIND &amp;mdash; Listening IP addresses  &lt;/li>
&lt;li>DUBBO_PORT_TO_BIND &amp;mdash; Listening ports&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;ol>
&lt;li>The above four configurations are optional. Dubbo will automatically get IP and port if there is no configuration. Please choose them flexibly according to deployment scenarios.&lt;/li>
&lt;li>Dubbo supports multi-protocol. &lt;strong>If an application exposes multiple different protocol services simultaneously and need to specify IP or port separately for each service. Please add the protocol prefix before the above attributes separately.&lt;/strong> For example:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>HESSIAN_DUBBO_PORT_TO_BIND hessian protocol bound port&lt;/li>
&lt;li>DUBBO_DUBBO_PORT_TO_BIND   dubbo protocol bound port&lt;/li>
&lt;li>HESSIAN_DUBBO_IP_TO_REGISTRY hessian protocol registered IP&lt;/li>
&lt;li>DUBBO_DUBBO_IP_TO_REGISTRY     dubbo protocol registered IP&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>&lt;code>PORT_TO_REGISTRY&lt;/code> or &lt;code>IP_TO_REGISTRY&lt;/code>won’t be used as default &lt;code>PORT_TO_BIND&lt;/code> or &lt;code>IP_TO_BIND&lt;/code>，But the reverse is true.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>If set&lt;code>PORT_TO_REGISTRY=20881&lt;/code> &lt;code>IP_TO_REGISTRY=30.5.97.6&lt;/code>，then &lt;code>PORT_TO_BIND&lt;/code> &lt;code>IP_TO_BIND&lt;/code>won’t be affected.&lt;/li>
&lt;li>If set&lt;code>PORT_TO_BIND=20881&lt;/code> &lt;code>IP_TO_BIND=30.5.97.6&lt;/code>，then &lt;code>PORT_TO_REGISTRY=20881&lt;/code> &lt;code>IP_TO_REGISTRY=30.5.97.6&lt;/code> by default.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;a href="https://github.com/apache/dubbo-samples/tree/master/2-advanced/dubbo-samples-docker">dubbo-docker-sample&lt;/a> local operation process：&lt;/p></description></item><item><title>Logging Framework Configuration and Usage</title><link>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/logger-howto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/logger-howto/</guid><description>&lt;h2 id="feature-description">Feature Description&lt;/h2>
&lt;p>Prior to dubbo 3.3.0, dubbo and dubbo-samples were using a mix of log4j and logback, leading to frequent conflicts and errors due to some modules lacking log configuration. Therefore, after 3.3.0-beta.3, the logging components have been upgraded to log4j2 for simplicity and reduced maintenance costs. This document explains how to configure and use the logging framework to avoid conflicts caused by indirectly introducing multiple logging frameworks.&lt;/p>
&lt;h2 id="how-to-use">How To Use&lt;/h2>
&lt;h3 id="usage-conventions">Usage Conventions&lt;/h3>
&lt;ul>
&lt;li>Please use log4j2 as the logging framework, and avoid using log4j and logback. Except for some legacy scenarios, using a single logging framework can reduce usage cost and prevent conflicts.&lt;/li>
&lt;li>Avoid passing logging framework dependencies upstream, which can be resolved by setting scope to &lt;code>test&lt;/code> or &lt;code>provider&lt;/code> in maven, or by setting &lt;code>&amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;&lt;/code>. As a service framework, dubbo should ideally avoid passing non-essential dependencies and leave the choice of logging framework to the user.&lt;/li>
&lt;/ul>
&lt;h3 id="usage-scenarios">Usage Scenarios&lt;/h3>
&lt;h4 id="1-general-dubbo-module">1. General dubbo Module&lt;/h4>
&lt;p>Most modules are of this type, generally requiring logging frameworks for unit testing.&lt;/p></description></item></channel></rss>