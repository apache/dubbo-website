<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Diagnostics and Tuning on Apache Dubbo</title><link>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/</link><description>Recent content in Diagnostics and Tuning on Apache Dubbo</description><generator>Hugo</generator><language>en</language><atom:link href="https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/index.xml" rel="self" type="application/rss+xml"/><item><title>Request time-consuming sampling</title><link>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/profiler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/profiler/</guid><description>&lt;h2 id="function-description">Function Description&lt;/h2>
&lt;p>The performance sampling function can detect the time consumption of various parts of the Dubbo processing link. When a timeout occurs, &lt;code>( usageTime / timeout &amp;gt; profilerWarnPercent * 100 )&lt;/code> records the time consumption of calls through logs.&lt;/p>
&lt;p>This function is divided into &lt;code>simple profiler&lt;/code> and &lt;code>detail profiler&lt;/code> two modes, where &lt;code>simple profiler&lt;/code> mode is enabled by default, and &lt;code>detail profiler&lt;/code> mode is disabled by default.
Compared with the &lt;code>simple profiler&lt;/code> mode, the &lt;code>detail profiler&lt;/code> collects more time-consuming processing of each filter, specific time-consuming protocols, etc.
In the &lt;code>simple profiler&lt;/code> mode, if you find that there is a long time-consuming situation inside the Dubbo framework, you can enable the &lt;code>detail profiler&lt;/code> mode to better troubleshoot the problem.&lt;/p></description></item><item><title>Routing Status Collection</title><link>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/router-snapshot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/router-snapshot/</guid><description>&lt;h2 id="function-description">Function Description&lt;/h2>
&lt;h2 id="scenes-to-be-used">scenes to be used&lt;/h2>
&lt;p>Many of Dubbo&amp;rsquo;s traffic management capabilities are implemented based on Router. In a production environment, if traffic results do not meet expectations, you can use the routing status command to check the routing status to locate possible problems.&lt;/p>
&lt;h2 id="how-to-use">How to use&lt;/h2>
&lt;h3 id="view-route-cache-status">View route cache status&lt;/h3>
&lt;p>When Dubbo receives the address change, it will push the address information to all &lt;code>Routers&lt;/code>, and these &lt;code>Routers&lt;/code> can calculate the routing packets in advance at this stage and cache them to avoid the need to traverse all provider calculations when calling grouping parameters.
The &lt;code>StateRouter&lt;/code> introduced in Dubbo 3 provides the ability to obtain the status of each route in real time through the qos command tool.&lt;/p></description></item><item><title>Service Reference Configuration Object Cache</title><link>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/reference-config-cache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/reference-config-cache/</guid><description>&lt;h2 id="feature-description">Feature description&lt;/h2>
&lt;p>The &lt;code>ReferenceConfig&lt;/code> instance is heavy, encapsulates the connection to the registry and the connection to the provider, and needs to be cached. Otherwise repeatedly generating &lt;code>ReferenceConfig&lt;/code> may cause performance problems and have memory and connection leaks. It&amp;rsquo;s easy to overlook this problem when programming in the API way.&lt;/p>
&lt;p>Therefore, since &lt;code>2.4.0&lt;/code> version, dubbo provides a simple tool class &lt;code>ReferenceConfigCache&lt;/code> for caching &lt;code>ReferenceConfig&lt;/code> instances.&lt;/p>
&lt;h2 id="scenes-to-be-used">scenes to be used&lt;/h2>
&lt;p>There are scenarios such as gateways that dynamically create subscriptions. Because ReferenceConfig itself is very heavy, it will create a lot of intermediate objects, and proxy itself can be reused, so the properties of this part can be cached through ReferenceConfigCache.&lt;/p></description></item><item><title>Load Balancing</title><link>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/loadbalance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/loadbalance/</guid><description>&lt;p>When cluster load balancing, Dubbo provides a variety of balancing strategies, the default is &lt;code>random&lt;/code> random calls.&lt;/p>
&lt;p>In terms of specific implementation, Dubbo provides client load balancing, that is, the Consumer uses the load balancing algorithm to determine which Provider instance to submit the request to.&lt;/p>
&lt;p>You can expand the load balancing strategy by yourself, see: &lt;a href="https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/spi/description/load-balance">Load Balance Extension&lt;/a>&lt;/p>
&lt;h2 id="load-balancing-strategy">load balancing strategy&lt;/h2>
&lt;p>Currently Dubbo has the following built-in load balancing algorithms, which users can directly configure and use:&lt;/p></description></item><item><title>Registration Information Simplified</title><link>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/simplify-registry-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/simplify-registry-data/</guid><description>&lt;h2 id="feature-description">Feature description&lt;/h2>
&lt;p>There are nearly &lt;a href="https://cn.dubbo.apache.org/zh-cn/docs/references/xml/dubbo-parameter">30 configuration items&lt;/a> in the service configuration items in Dubbo provider. Excluding the need for registry service governance, a large part of configuration items are used by the provider itself and do not need to be transparently passed to consumers. This part of data does not need to enter the registry, but only needs to be stored persistently in the form of key-value.&lt;/p>
&lt;p>The configuration items in Dubbo consumer also have &lt;a href="https://cn.dubbo.apache.org/zh-cn/docs/references/xml/dubbo-consumer">20+ configuration items&lt;/a>. In the registration center, only a small amount of configuration such as application, version, group, ip, and dubbo version need to be concerned in the service consumer list, and other configurations can also be stored persistently in the form of key-value.
These data are registered into the registration center in the dimension of service, which leads to the expansion of the data volume, which in turn leads to an increase in the network overhead of the registration center (such as zookeeper) and a decrease in performance.&lt;/p></description></item><item><title>Call Result Cache</title><link>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/result-cache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/result-cache/</guid><description>&lt;h2 id="feature-description">Feature description&lt;/h2>
&lt;h4 id="cache-type">cache type&lt;/h4>
&lt;ul>
&lt;li>&lt;code>lru&lt;/code> deletes redundant caches based on the least recently used principle, keeping the hottest data cached.&lt;/li>
&lt;li>&lt;code>threadlocal&lt;/code> The current thread cache, such as a page rendering, uses many portals, and each portal needs to check user information. Through thread caching, this redundant access can be reduced.&lt;/li>
&lt;li>&lt;code>jcache&lt;/code> integrates with &lt;a href="http://jcp.org/en/jsr/detail?id=107%27">JSR107&lt;/a> to bridge various cache implementations.&lt;/li>
&lt;/ul>
&lt;p>Cache Type Extensible &lt;a href="https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/spi/description/cache">Cache Extensions&lt;/a>&lt;/p>
&lt;p>About &lt;a href="https://github.com/apache/dubbo-samples/tree/master/2-advanced/dubbo-samples-cache">sample code&lt;/a>&lt;/p>
&lt;h2 id="scenes-to-be-used">scenes to be used&lt;/h2>
&lt;p>The result cache is used to speed up access to popular data. Dubbo provides a declarative cache to reduce the workload of users adding cache.&lt;/p></description></item><item><title>Concurrency Control</title><link>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/concurrency-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/concurrency-control/</guid><description>&lt;h2 id="configuration-example">Configuration example&lt;/h2>
&lt;h3 id="example-1">Example 1&lt;/h3>
&lt;p>To limit each method of &lt;code>com.foo.BarService&lt;/code>, the concurrent execution on the server side (or the number of threads in the thread pool) cannot exceed 10:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;dubbo:service&lt;/span> interface=&lt;span style="color:#2aa198">&amp;#34;com.foo.BarService&amp;#34;&lt;/span> executes=&lt;span style="color:#2aa198">&amp;#34;10&amp;#34;&lt;/span> &lt;span style="color:#268bd2">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="example-2">Example 2&lt;/h3>
&lt;p>To limit the &lt;code>sayHello&lt;/code> method of &lt;code>com.foo.BarService&lt;/code>, the concurrent execution on the server side (or the number of threads in the thread pool) cannot exceed 10:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;dubbo:service&lt;/span> interface=&lt;span style="color:#2aa198">&amp;#34;com.foo.BarService&amp;#34;&lt;/span>&lt;span style="color:#268bd2">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">&amp;lt;dubbo:method&lt;/span> name=&lt;span style="color:#2aa198">&amp;#34;sayHello&amp;#34;&lt;/span> executes=&lt;span style="color:#2aa198">&amp;#34;10&amp;#34;&lt;/span> &lt;span style="color:#268bd2">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;/dubbo:service&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="example-3">Example 3&lt;/h3>
&lt;p>Limit each method of &lt;code>com.foo.BarService&lt;/code> to no more than 10 concurrent executions per client (or the number of requests occupying a connection):&lt;/p></description></item><item><title>Connection Control</title><link>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/config-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/config-connections/</guid><description>&lt;h2 id="feature-description">Feature description&lt;/h2>
&lt;h2 id="scenes-to-be-used">scenes to be used&lt;/h2>
&lt;h2 id="how-to-use">How to use&lt;/h2>
&lt;h3 id="server-connection-control">Server connection control&lt;/h3>
&lt;p>Limit the number of connections accepted by the server to no more than 10 &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;dubbo:provider&lt;/span> protocol=&lt;span style="color:#2aa198">&amp;#34;dubbo&amp;#34;&lt;/span> accepts=&lt;span style="color:#2aa198">&amp;#34;10&amp;#34;&lt;/span> &lt;span style="color:#268bd2">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>or&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;dubbo:protocol&lt;/span> name=&lt;span style="color:#2aa198">&amp;#34;dubbo&amp;#34;&lt;/span> accepts=&lt;span style="color:#2aa198">&amp;#34;10&amp;#34;&lt;/span> &lt;span style="color:#268bd2">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="client-connection-control">Client connection control&lt;/h3>
&lt;p>Limit the client service to use no more than 10 connections &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;dubbo:reference&lt;/span> interface=&lt;span style="color:#2aa198">&amp;#34;com.foo.BarService&amp;#34;&lt;/span> connections=&lt;span style="color:#2aa198">&amp;#34;10&amp;#34;&lt;/span> &lt;span style="color:#268bd2">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>or&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;dubbo:service&lt;/span> interface=&lt;span style="color:#2aa198">&amp;#34;com.foo.BarService&amp;#34;&lt;/span> connections=&lt;span style="color:#2aa198">&amp;#34;10&amp;#34;&lt;/span> &lt;span style="color:#268bd2">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If both &lt;code>&amp;lt;dubbo:service&amp;gt;&lt;/code> and &lt;code>&amp;lt;dubbo:reference&amp;gt;&lt;/code> are configured with connections, &lt;code>&amp;lt;dubbo:reference&amp;gt;&lt;/code> takes precedence, see: [Configuration override strategy](../../../reference- manual/config/principle/)&lt;/p></description></item><item><title>Delayed Connection</title><link>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/lazy-connect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/lazy-connect/</guid><description>&lt;h2 id="feature-description">Feature description&lt;/h2>
&lt;h2 id="scenes-to-be-used">scenes to be used&lt;/h2>
&lt;p>Delayed connections are used to reduce the number of long connections. When a call is initiated, create a persistent connection.&lt;/p>
&lt;h2 id="how-to-use">How to use&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;dubbo:protocol&lt;/span> name=&lt;span style="color:#2aa198">&amp;#34;dubbo&amp;#34;&lt;/span> lazy=&lt;span style="color:#2aa198">&amp;#34;true&amp;#34;&lt;/span> &lt;span style="color:#268bd2">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>This configuration is only valid for the dubbo protocol that uses long connections.&lt;/p>
&lt;/blockquote></description></item><item><title>Stick Connection</title><link>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/stickiness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/stickiness/</guid><description>&lt;h2 id="feature-description">Feature description&lt;/h2>
&lt;h2 id="scenes-to-be-used">scenes to be used&lt;/h2>
&lt;p>Sticky connections are used for stateful services, so that the client always initiates calls to the same provider as much as possible, unless the provider hangs up and connects to another one.&lt;/p>
&lt;p>Sticky connection will automatically enable &lt;a href="../lazy-connect">Delayed Connection&lt;/a> to reduce the number of long connections.&lt;/p>
&lt;h2 id="how-to-use">How to use&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">&amp;lt;dubbo:reference&lt;/span> id=&lt;span style="color:#2aa198">&amp;#34;xxxService&amp;#34;&lt;/span> interface=&lt;span style="color:#2aa198">&amp;#34;com.xxx.XxxService&amp;#34;&lt;/span> sticky=&lt;span style="color:#2aa198">&amp;#34;true&amp;#34;&lt;/span> &lt;span style="color:#268bd2">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Dubbo supports method-level sticky connections, if you want more fine-grained control, you can also configure it like this.&lt;/p></description></item><item><title>Support Graal VM</title><link>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/support-graalvm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/support-graalvm/</guid><description>&lt;p>dubbo3.0 supports native-image document&lt;/p>
&lt;h2 id="feature-description">Feature description&lt;/h2>
&lt;p>This document will introduce the process of connecting dubbo3.0 project to GraalVM and compiling native-image into binary.&lt;/p>
&lt;p>More information about GraalVm can be read &lt;a href="https://www.graalvm.org/docs/getting-started/container-images/">https://www.graalvm.org/docs/getting-started/container-images/&lt;/a> this document.&lt;/p>
&lt;h2 id="scenes-to-be-used">scenes to be used&lt;/h2>
&lt;h2 id="how-to-use">How to use&lt;/h2>
&lt;p>Before compiling our dubbo project, we need to make sure that we are based on the graalVm environment.&lt;/p>
&lt;h3 id="install-graalvm">Install GraalVM&lt;/h3>
&lt;p>Go to &lt;a href="https://www.graalvm.org/">https://www.graalvm.org/&lt;/a> official website and select the latest version to install according to your own system:&lt;/p></description></item><item><title>Export thread stack</title><link>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/dump/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/dump/</guid><description>&lt;h2 id="feature-description">Feature description&lt;/h2>
&lt;p>Dubbo automatically exports the thread stack through Jstack to keep the scene, which is convenient for troubleshooting.&lt;/p>
&lt;p>default policy&lt;/p>
&lt;ul>
&lt;li>Export path: the user&amp;rsquo;s home directory identified by user.home&lt;/li>
&lt;li>Export Interval: The shortest interval allows an export every 10 minutes&lt;/li>
&lt;li>Export switch: open by default&lt;/li>
&lt;/ul>
&lt;h2 id="scenes-to-be-used">scenes to be used&lt;/h2>
&lt;p>When the business thread pool is full, we need to know which resources and conditions the threads are waiting for in order to find the bottleneck or abnormal point of the system.&lt;/p></description></item><item><title>Kryo and FST Serialization</title><link>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/serialization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/serialization/</guid><description>&lt;h2 id="table-of-contents">Table of contents&lt;/h2>
&lt;ul>
&lt;li>Serialization talk&lt;/li>
&lt;li>Enable Kryo and FST&lt;/li>
&lt;li>Register the class to be serialized&lt;/li>
&lt;li>No parameter constructor and Serializable interface&lt;/li>
&lt;li>Serialization performance analysis and testing
&lt;ul>
&lt;li>test environment&lt;/li>
&lt;li>Test script&lt;/li>
&lt;li>Comparison of byte sizes generated by different serializations in Dubbo RPC&lt;/li>
&lt;li>Comparison of response time and throughput of different serializations in Dubbo RPC&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>future&lt;/li>
&lt;/ul>
&lt;h2 id="serialization-talk">Serialization talk&lt;/h2>
&lt;p>dubbo RPC is the core high-performance, high-throughput remote call method in the dubbo system. I like to call it a multiplexed TCP long connection call. Simply put:&lt;/p></description></item></channel></rss>