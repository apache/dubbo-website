<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Quick Start on Apache Dubbo</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/</link><description>Recent content in Quick Start on Apache Dubbo</description><generator>Hugo</generator><language>en</language><atom:link href="https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/index.xml" rel="self" type="application/rss+xml"/><item><title>1 - Rapidly deploy a microservice application</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/brief/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/brief/</guid><description>&lt;h2 id="background">Background&lt;/h2>
&lt;p>&lt;img alt="arch-service-discovery" src="https://dubbo.apache.org/imgs/architecture.png">&lt;/p>
&lt;p>As a microservice framework, Dubbo is most important to provide users with cross-process RPC remote call capabilities. As shown in the figure above, Dubbo&amp;rsquo;s service consumer (Consumer) sends requests to the service provider (Provider) through a series of tasks.&lt;/p>
&lt;p>In order to achieve such a goal, Dubbo introduces the Registry component. Through the Registry, service consumers can perceive the connection method of the service provider, so as to send the request to the correct service provider.&lt;/p></description></item><item><title>2 - Develop microservice applications based on Dubbo API</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/api/</guid><description>&lt;h2 id="target">Target&lt;/h2>
&lt;p>Develop Dubbo-based microservices from scratch&lt;/p>
&lt;h2 id="difficulty">Difficulty&lt;/h2>
&lt;p>Low&lt;/p>
&lt;h2 id="environmental-requirements">Environmental requirements&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>System: Windows, Linux, MacOS&lt;/p>
&lt;/li>
&lt;li>
&lt;p>JDK 8 and above (JDK17 is recommended)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Git&lt;/p>
&lt;/li>
&lt;li>
&lt;p>IntelliJ IDEA (optional)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Docker (optional)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="hands">Hands&lt;/h2>
&lt;p>This chapter will teach you how to develop a microservice application from scratch through step-by-step tutorials.&lt;/p>
&lt;h3 id="1-start-the-registration-center">1. Start the registration center&lt;/h3>
&lt;p>For a microservice application, the registry is an indispensable component. Only through the registration center, the consumer can successfully discover the address information of the server, and then make a call.&lt;/p></description></item><item><title>3 - Dubbo x Spring Boot to develop microservice applications</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/spring-boot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/spring-boot/</guid><description>&lt;h2 id="target">Target&lt;/h2>
&lt;p>Start from scratch to develop microservices based on Dubbo x Spring Boot, and understand the configuration method of Dubbo x Spring Boot.&lt;/p>
&lt;h2 id="difficulty">Difficulty&lt;/h2>
&lt;p>Low&lt;/p>
&lt;h2 id="environmental-requirements">Environmental requirements&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>System: Windows, Linux, MacOS&lt;/p>
&lt;/li>
&lt;li>
&lt;p>JDK 8 and above (JDK17 is recommended)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Git&lt;/p>
&lt;/li>
&lt;li>
&lt;p>IntelliJ IDEA (optional)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Docker (optional)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="project-introduction">Project Introduction&lt;/h2>
&lt;p>In this task, it will be divided into three sub-modules for independent development, simulating the deployment architecture in the production environment.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>.//apache/dubbo-samples/1-basic/dubbo-samples-spring-boot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── dubbo-samples-spring-boot-interface // shared API module
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── dubbo-samples-spring-boot-consumer // consumer module
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── dubbo-samples-spring-boot-provider // server module
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As shown above, there are 3 modules in total, among which the &lt;code>interface&lt;/code> module is jointly dependent by the &lt;code>consumer&lt;/code> and &lt;code>provider&lt;/code> modules, and stores the API interface used by RPC communication.&lt;/p></description></item><item><title>4 - Dubbo x Spring XML to develop microservice applications</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/spring-xml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/spring-xml/</guid><description>&lt;h2 id="target">Target&lt;/h2>
&lt;p>Develop Dubbo x Spring XML-based microservice development from scratch, and understand the Dubbo x Spring XML configuration method.&lt;/p>
&lt;h2 id="difficulty">Difficulty&lt;/h2>
&lt;p>Low&lt;/p>
&lt;h2 id="environmental-requirements">Environmental requirements&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>System: Windows, Linux, MacOS&lt;/p>
&lt;/li>
&lt;li>
&lt;p>JDK 8 and above (JDK17 is recommended)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Git&lt;/p>
&lt;/li>
&lt;li>
&lt;p>IntelliJ IDEA (optional)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Docker (optional)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="rapid-deployment-directly-started-based-on-samples">Rapid deployment (directly started based on Samples)&lt;/h2>
&lt;p>This chapter will teach you step by step how to deploy and run a Dubbo x Spring XML-based use case through a few simple commands.&lt;/p></description></item><item><title>IDL defines cross-language services</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/idl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/idl/</guid><description>&lt;p>Using IDL to define services has better cross-language friendliness. For new users of Dubbo3, we recommend this method.
However, the Triple protocol is not strongly bound to IDL. You can also use Java Interface + Pojo to define services and enable the Triple protocol. For details, see &lt;a href="https://github.com/apache/dubbo-samples/tree/master/3-extensions/protocol/dubbo-samples-triple/src/main/java/org/apache/dubbo/sample/tri/pojo">Example&lt;/a>.&lt;/p>
&lt;p>For more usage of Triple and IDL, please refer to &lt;a href="https://github.com/apache/dubbo-samples/tree/master/3-extensions/protocol/dubbo-samples-triple">official samples&lt;/a>&lt;/p>
&lt;h3 id="precondition">precondition&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://jdk.java.net/">JDK&lt;/a> version &amp;gt;= 8&lt;/li>
&lt;li>Installed &lt;a href="https://maven.apache.org/">Maven&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="create-project">Create project&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>First create an empty maven project&lt;/p></description></item></channel></rss>