<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Quick Start on Apache Dubbo</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/</link><description>Recent content in Quick Start on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/index.xml" rel="self" type="application/rss+xml"/><item><title>1 - Rapidly deploy a microservice application</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/brief/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/brief/</guid><description>Background As a microservice framework, Dubbo is most important to provide users with cross-process RPC remote call capabilities. As shown in the figure above, Dubbo&amp;rsquo;s service consumer (Consumer) sends requests to the service provider (Provider) through a series of tasks.
In order to achieve such a goal, Dubbo introduces the Registry component. Through the Registry, service consumers can perceive the connection method of the service provider, so as to send the request to the correct service provider.</description></item><item><title>2 - Develop microservice applications based on Dubbo API</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/api/</guid><description>Target Develop Dubbo-based microservices from scratch
Difficulty Low
Environmental requirements System: Windows, Linux, MacOS
JDK 8 and above (JDK17 is recommended)
Git
IntelliJ IDEA (optional)
Docker (optional)
Hands This chapter will teach you how to develop a microservice application from scratch through step-by-step tutorials.
1. Start the registration center For a microservice application, the registry is an indispensable component. Only through the registration center, the consumer can successfully discover the address information of the server, and then make a call.</description></item><item><title>3 - Dubbo x Spring Boot to develop microservice applications</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/spring-boot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/spring-boot/</guid><description>Target Start from scratch to develop microservices based on Dubbo x Spring Boot, and understand the configuration method of Dubbo x Spring Boot.
Difficulty Low
Environmental requirements System: Windows, Linux, MacOS
JDK 8 and above (JDK17 is recommended)
Git
IntelliJ IDEA (optional)
Docker (optional)
Project Introduction In this task, it will be divided into three sub-modules for independent development, simulating the deployment architecture in the production environment.
.//apache/dubbo-samples/1-basic/dubbo-samples-spring-boot ├── dubbo-samples-spring-boot-interface // shared API module ├── dubbo-samples-spring-boot-consumer // consumer module └── dubbo-samples-spring-boot-provider // server module As shown above, there are 3 modules in total, among which the interface module is jointly dependent by the consumer and provider modules, and stores the API interface used by RPC communication.</description></item><item><title>4 - Dubbo x Spring XML to develop microservice applications</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/spring-xml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/spring-xml/</guid><description>Target Develop Dubbo x Spring XML-based microservice development from scratch, and understand the Dubbo x Spring XML configuration method.
Difficulty Low
Environmental requirements System: Windows, Linux, MacOS
JDK 8 and above (JDK17 is recommended)
Git
IntelliJ IDEA (optional)
Docker (optional)
Rapid deployment (directly started based on Samples) This chapter will teach you step by step how to deploy and run a Dubbo x Spring XML-based use case through a few simple commands.</description></item><item><title>IDL defines cross-language services</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/idl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/idl/</guid><description>Using IDL to define services has better cross-language friendliness. For new users of Dubbo3, we recommend this method. However, the Triple protocol is not strongly bound to IDL. You can also use Java Interface + Pojo to define services and enable the Triple protocol. For details, see Example.
For more usage of Triple and IDL, please refer to official samples
precondition JDK version &amp;gt;= 8 Installed Maven Create project First create an empty maven project</description></item></channel></rss>