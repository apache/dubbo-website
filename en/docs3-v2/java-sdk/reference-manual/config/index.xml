<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Configuration Manual on Apache Dubbo</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config/</link><description>Recent content in Configuration Manual on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config/index.xml" rel="self" type="application/rss+xml"/><item><title>Configuration Overview</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config/overview/</guid><description>Quickly jump to the content you care about through the following links:
Use Spring Boot to quickly develop Dubbo applications Configuration item reference manual to know what configuration items are available How configuration loading and overriding works Configuration components In order to better manage various configurations, Dubbo abstracts a set of structured configuration components. Each component is generally divided by purpose and controls the behavior of different scopes.
Component Name Description Scope Required application Specify the application-level information such as the application name Only one application is allowed in an application Required service Declare a common interface or implementation class as a Dubbo service There can be 0 or more services in an application At least one service/reference reference Declare a common interface as a Dubbo service There can be 0 or more references in an application At least one service/reference protocol The RPC protocol to be exposed and related configurations such as port numbers, etc.</description></item><item><title>API Configuration</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config/api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config/api/</guid><description>Assemble configuration, start Dubbo, publish and subscribe services through API coding. This method can support dynamic creation of ReferenceConfig/ServiceConfig, combined with generalized calls to meet the needs of API Gateway or test platform.
Reference API Samples
service provider Expose the service interface through ServiceConfig, and publish the service interface to the registration center.
Note: In order to better support Dubbo3 application-level service discovery, it is recommended to use the new DubboBootstrap API.</description></item><item><title>Annotation configuration</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config/annotation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config/annotation/</guid><description>This article uses the Spring Boot + Annotation mode to describe Dubbo application development. Check out the Spring Annotation development mode without Spring Boot here [complete example](https://github.com/apache/dubbo-samples/tree/master/1-basic/ dubbo-samples-annotation)
In Dubbo Spring Boot development, you only need to add a few annotations and configure the application.properties or application.yml file to complete the Dubbo service definition:
Annotations include @DubboService, @DubboReference and EnableDubbo. Among them, @DubboService and @DubboReference are used to mark Dubbo services, and EnableDubbo starts Dubbo-related configuration and specifies the Spring Boot scanning package path.</description></item><item><title>XML Configuration</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config/xml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config/xml/</guid><description>Dubbo has custom configuration components based on Spring Schema extensions, and the configuration capabilities that can be achieved using XML are generally equivalent to Configuration Reference Manual.
For complete examples of the following content, please refer to dubbo-samples
service provider Define service interface DemoService.java:
package org.apache.dubbo.demo; public interface DemoService { String sayHello(String name); } Implement the interface on the service provider side DemoServiceImpl.java:
package org.apache.dubbo.demo.provider; import org.apache.dubbo.demo.DemoService; public class DemoServiceImpl implements DemoService { public String sayHello(String name) { return &amp;#34;Hello &amp;#34; + name; } } Expose services with Spring configuration declarations &amp;lt;?</description></item><item><title>How Configuration Works</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config/principle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config/principle/</guid><description>The following is an example of Dubbo property configuration dubbo-spring-boot-samples
## application.properties # Spring boot application spring.application.name=dubbo-externalized-configuration-provider-sample # Base packages to scan Dubbo Component: @com.alibaba.dubbo.config.annotation.Service dubbo.scan.base-packages=com.alibaba.boot.dubbo.demo.provider.service # Dubbo Application ## The default value of dubbo.application.name is ${spring.application.name} ## dubbo.application.name=${spring.application.name} #Dubbo Protocol dubbo.protocol.name=dubbo dubbo.protocol.port=12345 ## Dubbo Registry dubbo.registry.address=N/A ## service default version dubbo.provider.version=1.0.0 Next, around this example, we analyze the working principle of Dubbo configuration from three aspects: configuration format, configuration source, and loading process.</description></item><item><title>Configuration Item Reference Manual</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config/properties/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config/properties/</guid><description>Configuration Details application Each application must have one and only one application configuration, corresponding configuration class: org.apache.dubbo.config.ApplicationConfig
Attribute Corresponding URL parameter Type Required Default name application string Required Service Governance The name of the current application, which is used by the registry to calculate dependencies between applications. Note: the consumer and provider application names should not be the same, this parameter is not Matching conditions, you can fill in the name of your current project, which has nothing to do with the role of the provider and consumer.</description></item></channel></rss>