<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Performance Reference Manual on Apache Dubbo</title><link>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/performance/</link><description>Recent content in Performance Reference Manual on Apache Dubbo</description><generator>Hugo</generator><language>en</language><atom:link href="https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/performance/index.xml" rel="self" type="application/rss+xml"/><item><title>Application-Level Service Discovery Benchmark</title><link>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/performance/benchmarking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/performance/benchmarking/</guid><description>&lt;h2 id="1-benchmark-conclusion">1 Benchmark Conclusion&lt;/h2>
&lt;p>Compared with 2.x version, Dubbo3 version&lt;/p>
&lt;ul>
&lt;li>Significantly improved service discovery resource utilization.
&lt;ul>
&lt;li>Compared with interface-level services, it is found that the resident memory of a single machine is reduced by 50%, and the GC consumption during the address change period is reduced by an order of magnitude (hundred times -&amp;gt; ten times)&lt;/li>
&lt;li>Comparing application-level services, it is found that the resident memory of a single machine is reduced by 75%, and the number of GCs tends to zero&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>The following is the detailed pressure measurement process and data&lt;/p></description></item><item><title>RPC Protocol Triple&amp;Dubbo Benchmark</title><link>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/performance/rpc-benchmarking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/performance/rpc-benchmarking/</guid><description>&lt;ul>
&lt;li>The &lt;em>Dubbo protocol&lt;/em> implementation of Dubbo3 is basically the same as the Dubbo2 version in terms of performance.&lt;/li>
&lt;li>Since the Triple protocol itself is built based on HTTP/2, the RPC call on a single link is not improved compared with TCP-based Dubbo2, but has a certain decline in some call scenarios. But the greater advantage of the _Triple protocol _ lies in the gateway penetration, versatility, and overall throughput improvement brought about by the Stream communication model.&lt;/li>
&lt;li>Triple is expected to have better performance in the gateway proxy scenario. In view of the current stress testing environment, this round of benchmarks has not yet been provided.&lt;/li>
&lt;/ul>
&lt;h2 id="11-environment">1.1 Environment&lt;/h2>
&lt;p>| | Description |
| &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; |
| &lt;strong>Machine&lt;/strong> | 4C8G Linux JDK 1.8 (Provider) 4C8G Linux JDK 1.8 (Consumer) |
| &lt;strong>Pressure test case&lt;/strong> | RPC method types include: no parameters and no return value, normal pojo return value, pojo list return value&lt;br />&lt;br />2.7 version Dubbo protocol (Hessian2 serialization)&lt;br /> Version 3.0 Dubbo protocol (Hessian2 serialization)&lt;br />3.0 version Dubbo protocol (Protobuf serialization)&lt;br />3.0 version Triple protocol (Protobuf serialization)&lt;br />3.0 version Triple protocol (Protobuf sets Hessian2 serialization) |
| &lt;strong>Pressure test method&lt;/strong> | In a single-link scenario, the consumer starts 32 concurrent threads (the current machine configuration qps rt has a more balanced number of concurrency), and collects the pressure test data after continuous pressure&lt;br /> The pressure test data passes https: //github.com/apache/dubbo-benchmark Get |&lt;/p></description></item></channel></rss>