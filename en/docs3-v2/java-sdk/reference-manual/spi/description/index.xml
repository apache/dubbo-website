<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dubbo SPI extension implementation description on Apache Dubbo</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/</link><description>Recent content in Dubbo SPI extension implementation description on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/index.xml" rel="self" type="application/rss+xml"/><item><title>Protocol Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/protocol/</guid><description>Expansion Description RPC protocol extension, encapsulates remote call details.
contract:
When the user calls the invoke() method of the Invoker object returned by refer(), the protocol needs to execute the invoke() of the Invoker object passed in from the remote export() of the URL accordingly ` method. Among them, the Invoker returned by refer() is implemented by the protocol, and the protocol usually needs to send a remote request in this Invoker, and the Invoker passed in by export() is implemented and passed in by the framework, and the protocol does not need to care.</description></item><item><title>Call Intercept Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/filter/</guid><description>Expansion Description Service provider and service consumer call process interception. Most functions of Dubbo itself are implemented based on this extension point. Every time a remote method is executed, this interception will be executed. Please pay attention to the impact on performance.
agreement:
User-defined filters are by default after built-in filters. The special value default, indicating where the default extension point is inserted. For example: filter=&amp;quot;xxx,default,yyy&amp;quot;, means xxx is before the default filter, and yyy is after the default filter.</description></item><item><title>Reference Listener Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/invoker-listener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/invoker-listener/</guid><description>Expansion Description This event is triggered when there is a service reference.
Extension ports org.apache.dubbo.rpc.InvokerListener
Extended configuration &amp;lt;!-- Reference service listener --&amp;gt; &amp;lt;dubbo:reference listener=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- Reference service default listener --&amp;gt; &amp;lt;dubbo:consumer listener=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.rpc.listener.DeprecatedInvokerListener
Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxInvokerListener.java (implements the InvokerListener interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.InvokerListener (plain text file, content: xxx=com.xxx.XxxInvokerListener) XxxInvokerListener.java:
package com.xxx; import org.apache.dubbo.rpc.InvokerListener; import org.apache.dubbo.rpc.Invoker; import org.apache.dubbo.rpc.RpcException; public class XxxInvokerListener implements InvokerListener { public void referred(Invoker&amp;lt;?</description></item><item><title>Expose Listener Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/exporter-listener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/exporter-listener/</guid><description>Expansion Description This event is triggered when a service is exposed.
Extension ports org.apache.dubbo.rpc.ExporterListener
Extended configuration &amp;lt;!-- Expose service monitoring --&amp;gt; &amp;lt;dubbo:service listener=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- Expose service default listener --&amp;gt; &amp;lt;dubbo:provider listener=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.registry.directory.RegistryExporterListener
Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxExporterListener.java (implements ExporterListener interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.ExporterListener (plain text file, content: xxx=com.xxx.XxxExporterListener) XxxExporterListener.java:
package com.xxx; import org.apache.dubbo.rpc.ExporterListener; import org.apache.dubbo.rpc.Exporter; import org.apache.dubbo.rpc.RpcException; public class XxxExporterListener implements ExporterListener { public void exported(Exporter&amp;lt;?</description></item><item><title>Cluster Expansion</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/cluster/</guid><description>Expansion Description When there are multiple service providers, organize multiple service providers into a cluster and pretend to be one provider.
Extension ports org.apache.dubbo.rpc.cluster.Cluster
Extended configuration &amp;lt;dubbo:protocol cluster=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- Default value configuration, if &amp;lt;dubbo:protocol&amp;gt; is not configured with cluster, use this configuration --&amp;gt; &amp;lt;dubbo:provider cluster=&amp;#34;xxx&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterWrapper org.apache.dubbo.rpc.cluster.support.FailoverCluster org.apache.dubbo.rpc.cluster.support.FailfastCluster org.apache.dubbo.rpc.cluster.support.FailsafeCluster org.apache.dubbo.rpc.cluster.support.FailbackCluster org.apache.dubbo.rpc.cluster.support.ForkingCluster org.apache.dubbo.rpc.cluster.support.AvailableCluster org.apache.dubbo.rpc.cluster.support.MergeableCluster org.apache.dubbo.rpc.cluster.support.BroadcastCluster org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareCluster Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxCluster.java (implements the Cluster interface) |-resources |-META-INF |-dubbo |-org.</description></item><item><title>Route Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/router/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/router/</guid><description>Expansion Description Select one of multiple service providers to call.
Extension ports org.apache.dubbo.rpc.cluster.RouterFactory org.apache.dubbo.rpc.cluster.Router Known extensions org.apache.dubbo.rpc.cluster.router.ScriptRouterFactory org.apache.dubbo.rpc.cluster.router.FileRouterFactory org.apache.dubbo.rpc.cluster.router.condition.config.AppRouterFactory org.apache.dubbo.rpc.cluster.CacheableRouterFactory org.apache.dubbo.rpc.cluster.router.condition.ConditionRouterFactory org.apache.dubbo.rpc.cluster.router.mock.MockRouterFactory org.apache.dubbo.rpc.cluster.router.condition.config.ServiceRouterFactory org.apache.dubbo.rpc.cluster.router.tag.TagRouterFactory Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxRouterFactory.java (implements RouterFactory interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.cluster.RouterFactory (plain text file, content: xxx=com.xxx.XxxRouterFactory) XxxRouterFactory.java:
package com.xxx; import org.apache.dubbo.rpc.cluster.RouterFactory; import org.apache.dubbo.rpc.Invoker; import org.apache.dubbo.rpc.Invocation; import org.apache.dubbo.rpc.RpcException; public class XxxRouterFactory implements RouterFactory { public Router getRouter(URL url) { //... } } META-INF/dubbo/org.</description></item><item><title>Load Balancing Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/load-balance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/load-balance/</guid><description>Expansion Description Select one of multiple service providers to call
Extension ports org.apache.dubbo.rpc.cluster.LoadBalance
Extended configuration &amp;lt;dubbo:protocol loadbalance=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- Default value setting, when &amp;lt;dubbo:protocol&amp;gt; does not configure loadbalance, use this configuration --&amp;gt; &amp;lt;dubbo:provider loadbalance=&amp;#34;xxx&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.rpc.cluster.loadbalance.RandomLoadBalance org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance org.apache.dubbo.rpc.cluster.loadbalance.LeastActiveLoadBalance org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance org.apache.dubbo.rpc.cluster.loadbalance.ShortestResponseLoadBalance Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxLoadBalance.java (implements the LoadBalance interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.cluster.LoadBalance (plain text file, content: xxx=com.xxx.XxxLoadBalance) XxxLoadBalance.java:
package com.xxx; import org.</description></item><item><title>Merge result extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/merger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/merger/</guid><description>Expansion Description Merge returns results for grouping and aggregation.
Extension ports org.apache.dubbo.rpc.cluster.Merger
Extended configuration &amp;lt;dubbo:method merger=&amp;#34;xxx&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.rpc.cluster.merger.ArrayMerger org.apache.dubbo.rpc.cluster.merger.ListMerger org.apache.dubbo.rpc.cluster.merger.SetMerger org.apache.dubbo.rpc.cluster.merger.MapMerger org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger org.apache.dubbo.rpc.cluster.merger.CharArrayMerger org.apache.dubbo.rpc.cluster.merger.ShortArrayMerger org.apache.dubbo.rpc.cluster.merger.IntArrayMerger org.apache.dubbo.rpc.cluster.merger.LongArrayMerger org.apache.dubbo.rpc.cluster.merger.FloatArrayMerger org.apache.dubbo.rpc.cluster.merger.DoubleArrayMerger org.apache.dubbo.rpc.cluster.merger.BooleanArrayMerger Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxMerger.java (implement Merger interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.cluster.Merger (plain text file, content: xxx=com.xxx.XxxMerger) XxxMerger.java:
package com.xxx; import org.apache.dubbo.rpc.cluster.Merger; public class XxxMerger&amp;lt;T&amp;gt; implements Merger&amp;lt;T&amp;gt; { public T merge(T... results) { //.</description></item><item><title>Registry Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/registry/</guid><description>Expansion Description Responsible for service registration and discovery.
Extension ports org.apache.dubbo.registry.RegistryFactory org.apache.dubbo.registry.Registry Extended configuration &amp;lt;!-- Define the registration center --&amp;gt; &amp;lt;dubbo:registry id=&amp;#34;xxx1&amp;#34; address=&amp;#34;xxx://ip:port&amp;#34; /&amp;gt; &amp;lt;!-- Reference registry, if registry property is not configured, registry configuration will be automatically scanned in ApplicationContext --&amp;gt; &amp;lt;dubbo:service registry=&amp;#34;xxx1&amp;#34; /&amp;gt; &amp;lt;!-- Reference the default value of the registry, when &amp;lt;dubbo:service&amp;gt; does not configure the registry attribute, use this configuration --&amp;gt; &amp;lt;dubbo:provider registry=&amp;#34;xxx1&amp;#34; /&amp;gt; Extension contract RegistryFactory.</description></item><item><title>Monitoring Center Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/monitor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/monitor/</guid><description>Expansion Description Responsible for the monitoring of service call times and call time.
Extension ports org.apache.dubbo.monitor.MonitorFactory org.apache.dubbo.monitor.Monitor Extended configuration &amp;lt;!-- Define the monitoring center --&amp;gt; &amp;lt;dubbo:monitor address=&amp;#34;xxx://ip:port&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.monitor.support.dubbo.DubboMonitorFactory
Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxMonitorFactoryjava (implement the MonitorFactory interface) |-XxxMonitor.java (implement Monitor interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.monitor.MonitorFactory (plain text file, content: xxx=com.xxx.XxxMonitorFactory) XxxMonitorFactory.java:
package com.xxx; import org.apache.dubbo.monitor.MonitorFactory; import org.apache.dubbo.monitor.Monitor; import org.apache.dubbo.common.URL; public class XxxMonitorFactory implements MonitorFactory { public Monitor getMonitor(URL url) { return new XxxMonitor(url); } } XxxMonitor.</description></item><item><title>Extension Point Load Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/extension-factory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/extension-factory/</guid><description>Expansion Description The loading container of the extension point itself, which can load the extension point from different containers.
Extension ports org.apache.dubbo.common.extension.ExtensionFactory
Extended configuration &amp;lt;dubbo:application compiler=&amp;#34;jdk&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.common.extension.factory.SpiExtensionFactory org.apache.dubbo.config.spring.extension.SpringExtensionFactory Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxExtensionFactory.java (implements ExtensionFactory interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.extension.ExtensionFactory (plain text file, content: xxx=com.xxx.XxxExtensionFactory) XxxExtensionFactory.java:
package com.xxx; import org.apache.dubbo.common.extension.ExtensionFactory; public class XxxExtensionFactory implements ExtensionFactory { public Object getExtension(Class&amp;lt;?&amp;gt; type, String name) { //.</description></item><item><title>Dynamic Proxy Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/proxy-factory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/proxy-factory/</guid><description>Expansion Description Convert the Invoker interface into a business interface.
Extension ports org.apache.dubbo.rpc.ProxyFactory
Extended configuration &amp;lt;dubbo:protocol proxy=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- Default value configuration, when &amp;lt;dubbo:protocol&amp;gt; does not configure proxy attribute, use this configuration --&amp;gt; &amp;lt;dubbo:provider proxy=&amp;#34;xxx&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.rpc.proxy.JdkProxyFactory org.apache.dubbo.rpc.proxy.JavassistProxyFactory Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxProxyFactory.java (implement ProxyFactory interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.ProxyFactory (plain text file, content: xxx=com.xxx.XxxProxyFactory) XxxProxyFactory.java:
package com.xxx; import org.apache.dubbo.rpc.ProxyFactory; import org.apache.dubbo.rpc.Invoker; import org.</description></item><item><title>Readiness Probe</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/readiness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/readiness/</guid><description>Expansion Description Extend the detection points of application readiness.
Extension ports org.apache.dubbo.qos.probe.ReadinessProbe
Extended configuration Dubbo QOS ready command auto-discovery
Known extensions org.apache.dubbo.qos.probe.impl.BootstrapReadinessProbe org.apache.dubbo.qos.probe.impl.ProviderReadinessProbe Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxReadinessProbe.java (implements ReadinessProbe interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.qos.probe.ReadinessProbe (plain text file, content: xxx=com.xxx.XxxReadinessProbe) XxxReadinessProbe.java:
package com.xxx; public class XxxReadinessProbe implements ReadinessProbe { public boolean check() { //... } } META-INF/dubbo/org.apache.dubbo.qos.probe.ReadinessProbe:
xxx=com.xxx.XxxReadinessProbe</description></item><item><title>Startup Startup Probe</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/startup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/startup/</guid><description>Expansion Description Extend the detection point of application startup.
Extension ports org.apache.dubbo.qos.probe.StartupProbe
Extended configuration Dubbo QOS startup command auto-discovery
Known extensions org.apache.dubbo.qos.probe.impl.BootstrapLivenessProbe Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxStartupProbe.java (implement the StartupProbe interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.qos.probe.StartupProbe (plain text file, content: xxx=com.xxx.XxxStartupProbe) XxxStartupProbee.java:
package com.xxx; public class XxxStartupProbe implements StartupProbe { public boolean check() { //... } } META-INF/dubbo/org.apache.dubbo.qos.probe.StartupProbe:
xxx=com.xxx.XxxStartupProbe</description></item><item><title>Liveness Survival Probe</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/liveness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/liveness/</guid><description>Expansion Description Expand the detection point of application survival.
Extension ports org.apache.dubbo.qos.probe.LivenessProbe
Extended configuration Dubbo QOS live command automatic discovery
Known extensions No default implementation yet
Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxLivenessProbe.java (implement LivenessProbe interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.qos.probe.LivenessProbe (plain text file, content: xxx=com.xxx.XxxLivenessProbe) XxxLivenessProbe.java:
package com.xxx; public class XxxLivenessProbe implements LivenessProbe { public boolean check() { //... } } META-INF/dubbo/org.apache.dubbo.qos.probe.LivenessProbe:
xxx=com.xxx.XxxLivenessProbe</description></item><item><title>Compiler Extensions</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/compiler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/compiler/</guid><description>Expansion Description Java code compiler, used to dynamically generate bytecode to speed up calls.
Extension ports org.apache.dubbo.common.compiler.Compiler
Extended configuration autoload
Known extensions org.apache.dubbo.common.compiler.support.JdkCompiler org.apache.dubbo.common.compiler.support.JavassistCompiler Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxCompiler.java (implement Compiler interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.compiler.Compiler (plain text file, content: xxx=com.xxx.XxxCompiler) XxxCompiler.java:
package com.xxx; import org.apache.dubbo.common.compiler.Compiler; public class XxxCompiler implements Compiler { public Object getExtension(Class&amp;lt;?&amp;gt; type, String name) { //... } } META-INF/dubbo/org.apache.dubbo.common.compiler.Compiler:
xxx=com.xxx.XxxCompiler</description></item><item><title>Configuration Center Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/config-center/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/config-center/</guid><description>aim of design The core function of the configuration center is as Key-Value storage. The Dubbo framework informs the configuration center of the key it cares about, and the configuration center returns the value corresponding to the key.
According to the application scenarios, the configuration center mainly undertakes the following responsibilities in the Dubbo framework:
As an external configuration center, it stores the dubbo.properties configuration file. At this time, the key value is usually the file name such as dubbo.</description></item><item><title>Metadata Center Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/metadata-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/metadata-report/</guid><description>aim of design See the Metadata Center Manual
Extension ports org.apache.dubbo.metadata.store.MetadataReportFactory org.apache.dubbo.metadata.store.MetadataReport Known extensions Implementation principle SPI definition Reference: org.apache.dubbo.metadata.store.MetadataReportFactory, org.apache.dubbo.metadata.store.MetadataReport
@SPI(&amp;#34;redis&amp;#34;) public interface MetadataReportFactory { @Adaptive({&amp;#34;protocol&amp;#34;}) MetadataReport getMetadataReport(URL url); } Custom metadata storage The following uses Redis storage as an example for illustration.
To create a new project, you need to support the following modifications:
Extend AbstractMetadataReport public class RedisMetadataReport extends AbstractMetadataReport { private final static Logger logger = LoggerFactory.</description></item><item><title>Message Dispatch Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/dispatcher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/dispatcher/</guid><description>Expansion Description Channel information dispatcher, used to specify the thread pool model.
Extension ports org.apache.dubbo.remoting.Dispatcher
Extended configuration &amp;lt;dubbo:protocol dispatcher=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- The default value setting, when &amp;lt;dubbo:protocol&amp;gt; does not configure the dispatcher attribute, use this configuration --&amp;gt; &amp;lt;dubbo:provider dispatcher=&amp;#34;xxx&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.remoting.transport.dispatcher.all.AllDispatcher org.apache.dubbo.remoting.transport.dispatcher.direct.DirectDispatcher org.apache.dubbo.remoting.transport.dispatcher.message.MessageOnlyDispatcher org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedDispatcher Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxDispatcher.java (implements the Dispatcher interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.remoting.Dispatcher (plain text file, content: xxx=com.</description></item><item><title>Thread Pool Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/threadpool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/threadpool/</guid><description>Expansion Description The service provider&amp;rsquo;s thread pool implements the strategy. When the server receives a request, it needs to create a thread in the thread pool to execute the service provider&amp;rsquo;s business logic.
Extension ports org.apache.dubbo.common.threadpool.ThreadPool
Extended configuration &amp;lt;dubbo:protocol threadpool=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- Default value setting, when &amp;lt;dubbo:protocol&amp;gt; does not configure threadpool, use this configuration --&amp;gt; &amp;lt;dubbo:provider threadpool=&amp;#34;xxx&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.common.threadpool.FixedThreadPool org.apache.dubbo.common.threadpool.CachedThreadPool Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxThreadPool.</description></item><item><title>Serialization Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/serialize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/serialize/</guid><description>Expansion Description Convert the object into a byte stream for network transmission, and convert the byte stream into an object for restoring the byte stream data into an object.
Extension ports org.apache.dubbo.common.serialize.Serialization org.apache.dubbo.common.serialize.ObjectInput org.apache.dubbo.common.serialize.ObjectOutput Extended configuration &amp;lt;!-- Protocol serialization method --&amp;gt; &amp;lt;dubbo:protocol serialization=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- Default value setting, when &amp;lt;dubbo:protocol&amp;gt; does not configure serialization, use this configuration --&amp;gt; &amp;lt;dubbo:provider serialization=&amp;#34;xxx&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.common.serialize.dubbo.DubboSerialization org.apache.dubbo.common.serialize.hessian.Hessian2Serialization org.apache.dubbo.common.serialize.java.JavaSerialization org.apache.dubbo.common.serialize.java.CompactedJavaSerialization Extended example Maven project structure:</description></item><item><title>Network Transport Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/remoting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/remoting/</guid><description>Expansion Description Realization of remote communication server and client transmission.
Extension ports org.apache.dubbo.remoting.Transporter org.apache.dubbo.remoting.Server org.apache.dubbo.remoting.Client Extended configuration &amp;lt;!-- server and client use the same transport implementation --&amp;gt; &amp;lt;dubbo:protocol transporter=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- server and client use different transport implementations --&amp;gt; &amp;lt;dubbo:protocol server=&amp;#34;xxx&amp;#34; client=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- Default value setting, when &amp;lt;dubbo:protocol&amp;gt; is not configured with transporter/server/client attribute, use this configuration --&amp;gt; &amp;lt;dubbo:provider transporter=&amp;#34;xxx&amp;#34; server=&amp;#34;xxx&amp;#34; client=&amp;#34;xxx&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.remoting.transport.transporter.netty.NettyTransporter org.apache.dubbo.remoting.transport.transporter.mina.MinaTransporter org.apache.dubbo.remoting.transport.transporter.grizzly.GrizzlyTransporter Extended example Maven project structure:</description></item><item><title>Information Exchange Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/exchanger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/exchanger/</guid><description>Expansion Description Based on the transport layer, implement the Request-Response information exchange semantics.
Extension ports org.apache.dubbo.remoting.exchange.Exchanger org.apache.dubbo.remoting.exchange.ExchangeServer org.apache.dubbo.remoting.exchange.ExchangeClient Extended configuration &amp;lt;dubbo:protocol exchanger=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- The default value setting, when &amp;lt;dubbo:protocol&amp;gt; does not configure the exchanger attribute, use this configuration --&amp;gt; &amp;lt;dubbo:provider exchanger=&amp;#34;xxx&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.remoting.exchange.exchanger.HeaderExchanger
Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxExchanger.java (implements the Exchanger interface) |-XxxExchangeServer.java (implements ExchangeServer interface) |-XxxExchangeClient.java (implements ExchangeClient interface) |-resources |-META-INF |-dubbo |-org.</description></item><item><title>Network Expansion</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/networker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/networker/</guid><description>Expansion Description Peer-to-peer network node builder.
Extension ports org.apache.dubbo.remoting.p2p.Networker
Extended configuration &amp;lt;dubbo:protocol networker=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- The default value setting, when &amp;lt;dubbo:protocol&amp;gt; does not configure the networker attribute, use this configuration --&amp;gt; &amp;lt;dubbo:provider networker=&amp;#34;xxx&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.remoting.p2p.support.MulticastNetworker org.apache.dubbo.remoting.p2p.support.FileNetworker Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxNetworker.java (implement Networker interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.remoting.p2p.Networker (plain text file, content: xxx=com.xxx.XxxNetworker) XxxNetworker.java:
package com.xxx; import org.apache.dubbo.remoting.p2p.Networker; public class XxxNetworker implements Networker { public Group lookup(URL url) { //.</description></item><item><title>Peer-to-peer network node builder extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/page/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/page/</guid><description>page extension Expansion Description Peer-to-peer network node builder.
Extension ports org.apache.dubbo.container.page.PageHandler
Extended configuration &amp;lt;dubbo:protocol page=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- The default value setting, when &amp;lt;dubbo:protocol&amp;gt; does not configure the page attribute, use this configuration --&amp;gt; &amp;lt;dubbo:provider page=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.container.page.pages.HomePageHandler org.apache.dubbo.container.page.pages.StatusPageHandler org.apache.dubbo.container.page.pages.LogPageHandler org.apache.dubbo.container.page.pages.SystemPageHandler Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxPageHandler.java (implement PageHandler interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.container.page.PageHandler (plain text file, content: xxx=com.xxx.XxxPageHandler) XxxPageHandler.java:
package com.xxx; import org.apache.dubbo.container.page.PageHandler; public class XxxPageHandler implements PageHandler { public Group lookup(URL url) { //.</description></item><item><title>Telnet Command Extensions</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/telnet-handler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/telnet-handler/</guid><description>Expansion Description All servers support telnet access for manual intervention.
Extension ports org.apache.dubbo.remoting.telnet.TelnetHandler
Extended configuration &amp;lt;dubbo:protocol telnet=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- The default value setting, when &amp;lt;dubbo:protocol&amp;gt; does not configure the telnet attribute, use this configuration --&amp;gt; &amp;lt;dubbo:provider telnet=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.remoting.telnet.support.ClearTelnetHandler org.apache.dubbo.remoting.telnet.support.ExitTelnetHandler org.apache.dubbo.remoting.telnet.support.HelpTelnetHandler org.apache.dubbo.remoting.telnet.support.StatusTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.ListTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.ChangeTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.CurrentTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.InvokeTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.TraceTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.CountTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.PortTelnetHandler Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxTelnetHandler.java (implement TelnetHandler interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.remoting.telnet.TelnetHandler (plain text file, content: xxx=com.</description></item><item><title>Status Check Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/status-checker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/status-checker/</guid><description>Expansion Description Check the status of various resources that the service relies on. This status check can be used for both telnet&amp;rsquo;s status command and hosting&amp;rsquo;s status page.
Extension ports org.apache.dubbo.common.status.StatusChecker
Extended configuration &amp;lt;dubbo:protocol status=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- The default value setting, when &amp;lt;dubbo:protocol&amp;gt; does not configure the status attribute, use this configuration --&amp;gt; &amp;lt;dubbo:provider status=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.common.status.support.MemoryStatusChecker org.apache.dubbo.common.status.support.LoadStatusChecker org.apache.dubbo.rpc.dubbo.status.ServerStatusChecker org.apache.dubbo.rpc.dubbo.status.ThreadPoolStatusChecker org.apache.dubbo.registry.directory.RegistryStatusChecker org.apache.dubbo.rpc.config.spring.status.SpringStatusChecker org.apache.dubbo.rpc.config.spring.status.DataSourceStatusChecker Extended example Maven project structure:</description></item><item><title>Container Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/container/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/container/</guid><description>Expansion Description Service container extension for custom loading content.
Extension ports org.apache.dubbo.container.Container
Extended configuration java org.apache.dubbo.container.Main spring jetty log4j Known extensions org.apache.dubbo.container.spring.SpringContainer org.apache.dubbo.container.spring.JettyContainer org.apache.dubbo.container.spring.Log4jContainer Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxContainer.java (implements the Container interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.container.Container (plain text file, content: xxx=com.xxx.XxxContainer) XxxContainer.java:
package com.xxx; org.apache.dubbo.container.Container; public class XxxContainer implements Container { public Status start() { //... } public Status stop() { //... } } META-INF/dubbo/org.</description></item><item><title>Cache Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/cache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/cache/</guid><description>Expansion Description Use the request parameter as the key to cache the returned result.
Extension ports org.apache.dubbo.cache.CacheFactory
Extended configuration &amp;lt;dubbo:service cache=&amp;#34;lru&amp;#34; /&amp;gt; &amp;lt;!-- method level cache --&amp;gt; &amp;lt;dubbo:service&amp;gt;&amp;lt;dubbo:method cache=&amp;#34;lru&amp;#34; /&amp;gt;&amp;lt;/dubbo:service&amp;gt; &amp;lt;!-- The default value setting, when &amp;lt;dubbo:service&amp;gt; does not configure the cache attribute, use this configuration --&amp;gt; &amp;lt;dubbo:provider cache=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.cache.support.lru.LruCacheFactory org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory org.apache.dubbo.cache.support.jcache.JCacheFactory Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxCacheFactory.java (implements the CacheFactory interface) |-resources |-META-INF |-dubbo |-org.</description></item><item><title>Authentication Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/validation/</guid><description>Expansion Description Parameter validation extension point.
Extension ports org.apache.dubbo.validation.Validation
Extended configuration &amp;lt;dubbo:service validation=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- The default value setting, when &amp;lt;dubbo:service&amp;gt; does not configure the authentication attribute, use this configuration --&amp;gt; &amp;lt;dubbo:provider validation=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.validation.support.jvalidation.JValidation
Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxValidation.java (implement Validation interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.validation.Validation (plain text file, content: xxx=com.xxx.XxxValidation) XxxValidation.java:
package com.xxx; import org.apache.dubbo.validation.Validation; public class XxxValidation implements Validation { public Object getValidator(URL url) { //.</description></item><item><title>Log Adaptation Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/logger-adapter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/logger-adapter/</guid><description>Expansion Description Log output adaptation extension point.
Extension ports org.apache.dubbo.common.logger.LoggerAdapter
Extended configuration &amp;lt;dubbo:application logger=&amp;#34;xxx&amp;#34; /&amp;gt; or:
-Ddubbo:application.logger=xxx Known extensions org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter org.apache.dubbo.common.logger.jcl.JclLoggerAdapter org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter org.apache.dubbo.common.logger.jdk.JdkLoggerAdapter Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxLoggerAdapter.java (implement LoggerAdapter interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.logger.LoggerAdapter (plain text file, content: xxx=com.xxx.XxxLoggerAdapter) XxxLoggerAdapter.java:
package com.xxx; import org.apache.dubbo.common.logger.LoggerAdapter; public class XxxLoggerAdapter implements LoggerAdapter { public Logger getLogger(URL url) { //... } } XxxLogger.java:
package com.xxx; import org.</description></item><item><title>QoS Anonymous Access Verification Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/qos-permission/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/qos-permission/</guid><description>Expansion Description QoS anonymous access authentication extension point.
Extension ports org.apache.dubbo.qos.permission.PermissionChecker
Extended configuration Dubbo QoS dubbo.application.qos-anonymous-access-permission-level Anonymous access permission verification.
Default implementation org.apache.dubbo.qos.permission.DefaultAnonymousAccessPermissionChecker
Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxPermissionChecker.java (implements PermissionChecker interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.qos.permission.PermissionChecker` (plain text file, content: qosPermissionChecker=com.xxx.XxxPermissionChecker) XxxPermissionChecker.java:
package com.xxx.qos.permission; import org.apache.dubbo.qos.permission.PermissionChecker; public class XxxAnonymousAccessPermissionChecker implements PermissionChecker { @Override public boolean access(CommandContext commandContext, PermissionLevel defaultCmdRequiredPermissionLevel) { //... } } META-INF/dubbo/org.apache.dubbo.qos.permission.PermissionChecker:
qosPermissionChecker=com.xxx.XxxPermissionChecker</description></item><item><title>Extension Point Development Guide</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/dubbo-spi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/dubbo-spi/</guid><description>1 Introduction The full name of SPI is Service Provider Interface, which is a service discovery mechanism. The essence of SPI is to configure the fully qualified name of the interface implementation class in the file, and the service loader reads the configuration file and loads the implementation class. In this way, the implementation class can be dynamically replaced for the interface at runtime. Because of this feature, we can easily provide extended functions for our programs through the SPI mechanism.</description></item></channel></rss>