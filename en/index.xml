<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Apache Dubbo</title><link>https://dubbo.apache.org/en/</link><description>Recent content on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://dubbo.apache.org/en/index.xml" rel="self" type="application/rss+xml"/><item><title>0-1 - thread pool resource exhausted</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/1/</guid><description>The server&amp;rsquo;s thread resources are exhausted. By default, the number of business threads on the Dubbo server is 200. If the number of concurrent requests exceeds 200, new requests will be rejected and this error will be thrown.
Possible Reason The amount of concurrent requests from the Consumer is too large, causing the number of threads created on the Provider to exceed the limit. It is possible that when the Provider side executes the business, the thread is blocked because the business calls the external application interface, which makes the thread pool unable to recycle the thread.</description></item><item><title>1-1 - Address Illegal</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/1/</guid><description>This log can be ignored, service version or grouping mismatch. Appears only in the zookeeper registry, this check has been removed in version 3.1.7.
possible reason The service.group configured on the Provider side does not match the reference.group configured on the Consumer side (that is, the configuration of the service group). The service.version configured on the Provider side does not match the reference.version configured on the Consumer side (that is, the configuration of the service version).</description></item><item><title>2-1 - Routing execution failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/1/</guid><description>Routing address execution failed</description></item><item><title>2.x to 3.x Operation Guide</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/upgrades-and-compatibility/2.x-to-3.x-compatibility-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/upgrades-and-compatibility/2.x-to-3.x-compatibility-guide/</guid><description>Benefits of upgrading to Dubbo 3.X Dubbo3 still maintains the classic architecture of 2.x. Its main responsibility is to solve the communication between microservice processes, and to better manage and control microservice clusters through rich service governance (such as address discovery, traffic management, etc.); The upgrade of the framework is comprehensive, reflected in almost every aspect of the core Dubbo features, through the upgrade to achieve a comprehensive improvement in stability, performance, scalability, and ease of use.</description></item><item><title>3-1 - Failed to convert address to Invoker</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/3/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/3/1/</guid><description>Possible Reason The protocol configured on the client side does not match the protocol configured on the server side. (For example, the protocol configured by the client is the Dubbo protocol, but the server can only provide services of the Rest protocol.)
The registration center (or configuration center) is unreliable and pushes illegal data.
Troubleshooting and resolution steps Check the protocol configuration of both the provider and the consumer. Update the version of the registry.</description></item><item><title>4-1 - Unsupported protocol</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/1/</guid><description>Possible Reason This situation may occur in the scenario of custom Protocol. Dubbo&amp;rsquo;s SPI mechanism cannot find the Protocol specified in the URL.
Troubleshooting and resolution steps Make sure that the Consumer has dependencies on the Protocol used by the server. Make sure that the name of the SPI configuration file of the Protocol&amp;rsquo;s dependent package is correct. see also Dubbo SPI Overview
Protocol Extension Description</description></item><item><title>5-1 - Failed to connect to configuration center</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/1/</guid><description>Possible Reason The server where the configuration center is located is shut down or down. Wrong IP or port number. The firewall blocked the port of the configuration center by mistake. Troubleshooting and resolution steps Check configuration center IP and port configuration. Check whether the server is turned on and works normally. Check whether the port used by the configuration center is allowed by the firewall or not.</description></item><item><title>6-1 - Server Connection Failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/1/</guid><description>Network communication layer, failed to connect to the service provider service
Possible Reason The service provider&amp;rsquo;s network is abnormally disconnected or blocked by firewalls and third-party tools, and cannot provide external services.
Troubleshooting and resolution steps If it is a rest connection, check whether the requested server configuration is correct. Check whether the network communication is normal, you can use some simple cmd commands to detect, such as ping and so on.</description></item><item><title>7-1 - QOS OFF</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/7/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/7/1/</guid><description>Possible Reason QOS is off
Troubleshooting and resolution steps Please refer to QOS Operation Manual.</description></item><item><title>99-1 - Program Interrupted</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/99/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/99/1/</guid><description>Unknown error inside Dubbo.
Possible Reason The program receives an interrupt notification from the JVM level and is forced to stop blocking and waiting
Troubleshooting and resolution steps This exception usually occurs when the thread pool is closed or the application is closed. Please check whether the normal use of the business is affected. If there is no impact, it can be ignored. If there is an impact, please refer to the corresponding troubleshooting manual.</description></item><item><title>Access Ingress Traffic</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/pixiu/http_triple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/pixiu/http_triple/</guid><description>1. Preparations -kubectl
A k8s cluster with kubeconfig configured 2. Use the HTTP protocol to call the Triple application through the gateway The Dubbo-go-pixiu gateway supports calling GO/Java Dubbo clusters. In the Dubbo-go 3.0 scenario, we can use the Pixiu gateway to request the Pixiu gateway with the HTTP protocol outside the cluster, perform protocol conversion at the gateway layer, and further call the Dubbo-go service in the cluster.
The path for users to call Dubbo-go service is http://$(app_name)/$(service_name)/$(method).</description></item><item><title>Install Admin Console</title><link>https://dubbo.apache.org/en/docs/v2.7/admin/install/admin-console/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/admin/install/admin-console/</guid><description>The current version of dubbo admin is under development, including: route rule, dynamic configuration, access control, weight adjustment, load balance, etc.
Install:
git clone https://github.com/apache/dubbo-admin.git /var/tmp/dubbo-admin cd /var/tmp/dubbo-admin mvn clean package Configuration 1:
configuration file： dubbo-admin-server/src/main/resources/application.properties configurations： admin.registry.address=zookeeper://127.0.0.1:2181 admin.config-center=zookeeper://127.0.0.1:2181 admin.metadata-report.address=zookeeper://127.0.0.1:2181 Start:
mvn --projects dubbo-admin-backend spring-boot:run For more information, please visit:
https://github.com/apache/dubbo-admin Visit [^2]:
http://127.0.0.1:8080 There&amp;rsquo;s no login for current version, will be added later&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description></item><item><title>Advantage</title><link>https://dubbo.apache.org/en/latest/facade-docs/why/advantage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/latest/facade-docs/why/advantage/</guid><description/></item><item><title>Application-Level Service Discovery Benchmark</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/performance/benchmarking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/performance/benchmarking/</guid><description>1 Benchmark Conclusion Compared with 2.x version, Dubbo3 version
Significantly improved service discovery resource utilization. Compared with interface-level services, it is found that the resident memory of a single machine is reduced by 50%, and the GC consumption during the address change period is reduced by an order of magnitude (hundred times -&amp;gt; ten times) Comparing application-level services, it is found that the resident memory of a single machine is reduced by 75%, and the number of GCs tends to zero The following is the detailed pressure measurement process and data</description></item><item><title>Apply Template</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/template/</guid><description>1. Preparations dubbo-go cli tools and dependent tools have been installed 2. Use dubbogo-cli to create a project template Run dubbogo-cli newApp .
$ mkdir cli-create-server $ cd cli-create-server $ dubbogo-cli newApp . $ tree . . ├── Makefile ├── api │ └── api.proto ├──build │ └── Dockerfile ├── chart │ ├── app │ │ ├── Chart.yaml │ │ ├── templates │ │ │ ├── _helpers.tpl │ │ │ ├── deployment.</description></item><item><title>Background</title><link>https://dubbo.apache.org/en/docs/v2.7/user/preface/background/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/preface/background/</guid><description>Background With the fast development of Internet, the scale of web applications expands unceasingly, and finally we find that the traditional vertical architecture(monolithic) can not handle this any more. Distributed service architecture and the flow computing architecture are imperative, and a governance system is urgently needed to ensure an orderly evolution of the architecture.
Monolithic architecture When the traffic is very low, there is only one application, all the features are deployed together to reduce the deployment node and cost.</description></item><item><title>Source Code Build</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/build/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/build/</guid><description>Checkout checkout the lastest project source code with commands blow:
git clone https://github.com/apache/dubbo.git dubbo Branches We use master as the major branch for new feature development, and use other branches for maintenance. Tags for all versions can be checked via https://github.com/apache/dubbo/tags.
Building Dubbo relies on maven as the building tool.
Requirements:
Java above 1.8 version Maven version 2.2.1 or above The following MAVEN_OPTSshould be configured before building:
export MAVEN_OPTS=-Xmx1024m -XX:MaxPermSize=512m build with below command:</description></item><item><title>Check at startup</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/preflight-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/preflight-check/</guid><description>Feature description By default, Dubbo will check whether the dependent service is available at startup, and will throw an exception when it is unavailable, preventing Spring initialization from completing, so that problems can be detected early when going online. The default check=&amp;quot;true&amp;quot;.
Checking can be turned off by check=&amp;quot;false&amp;quot;. For example, when testing, some services do not care, or there is a circular dependency, and one of them must be started first.</description></item><item><title>Apache Committer Guide</title><link>https://dubbo.apache.org/en/docs/contribution-guidelines/committer/new-committer-guide_dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/contribution-guidelines/committer/new-committer-guide_dev/</guid><description>First: How to become a committer Initial committers at the project incubator stage At the project incubator stage, there will be an initial committers list in the proposal of the incubator project. Confirm that you are one of the initial committers. After the vote is passed in the Apache incubator community, these committers can start preparing their account. See incubator wiki for details.
The active contributor is elected as a committer At the late development stage, an active contributor can be elected as a committer.</description></item><item><title>Conditional Routing Rules</title><link>https://dubbo.apache.org/en/overview/core-features/traffic/condition-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/core-features/traffic/condition-rule/</guid><description>Conditional routing rules forward requests that meet specific conditions to a subset of destination instances. The rules match the request parameters of incoming traffic, and requests that meet the matching criteria are forwarded to a subset that contains a specific list of instance addresses.
Here is an example of a conditional routing rule.
Based on the following example rule, all invocations of the getComment method in the org.apache.dubbo.samples.CommentService service will be forwarded to a subset of addresses marked with region=Hangzhou.</description></item><item><title>configuration item reference</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/refer/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/refer/config/</guid><description>root configuration Client configuration Server configuration Registry configuration Using the Configuration API The client sets up the registry using the configuration API You can quickly set the registry for debugging by calling the config.NewRegistryConfigWithProtocolDefaultPort method, and support zookeeper(127.0.0.1:2181) and nacos(127.0.0.1:8848)
rc := config. NewRootConfigBuilder(). SetConsumer(config. NewConsumerConfigBuilder(). SetRegistryIDs(&amp;#34;zookeeperID&amp;#34;). // use defined registryID Build()). AddRegistry(&amp;#34;zookeeperID&amp;#34;, config. NewRegistryConfigWithProtocolDefaultPort(&amp;#34;zookeeper&amp;#34;)). build() All interfaces: can be configured by calling the rich interfaces provided by RegistryConfigBuilder.
rc := config.</description></item><item><title>Configuration Overview</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config/overview/</guid><description>Quickly jump to the content you care about through the following links:
Use Spring Boot to quickly develop Dubbo applications Configuration item reference manual to know what configuration items are available How configuration loading and overriding works Configuration components In order to better manage various configurations, Dubbo abstracts a set of structured configuration components. Each component is generally divided by purpose and controls the behavior of different scopes.
Component Name Description Scope Required application Specify the application-level information such as the application name Only one application is allowed in an application Required service Declare a common interface or implementation class as a Dubbo service There can be 0 or more services in an application At least one service/reference reference Declare a common interface as a Dubbo service There can be 0 or more references in an application At least one service/reference protocol The RPC protocol to be exposed and related configurations such as port numbers, etc.</description></item><item><title>Custom service call middleware</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/features/aop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/features/aop/</guid><description>Refer to samples dubbo-go-samples/filter
1. Preparations dubbo-go cli tools and dependent tools have been installed Read [Component Loading and Extensibility] Create a new demo application 2. Configure the specified Filter When specifying a filter, it can be separated by &amp;lsquo;,&amp;rsquo;
Consumer side
dubbo: consumer: filter: echo,token,tps,myCustomFilter # Custom filter can be specified Provider side
dubbo: provider: services: GreeterProvider: filter: myCustomFilter, echo, tps 3. Custom Filter Users can customize Filter in the code, register it on the framework, and choose to use it in the configuration.</description></item><item><title>Custom Service Container</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/service-container/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/service-container/</guid><description>Feature description The service container of Dubbo 3 is a standalone startup program, because the background service does not need the functions of web containers such as Tomcat or JBoss. If you insist on using the web container to load the service provider, it will increase complexity and waste resources. Therefore, services usually do not require the features of web containers such as Tomcat/JBoss, and there is no need to use web containers to load services.</description></item><item><title>Deploy the Istio environment</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/istio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/istio/</guid><description>1. Preparations The docker, helm, and kubectl environments have been installed. dubbo-go cli tools and dependent tools have been installed 2. Deploy the Istio environment Use helm to install istio base CRD and istiod components. You can also refer to Istio Documentation to install using istioctl. $ helm repo add istio https://istio-release.storage.googleapis.com/charts $ kubectl create namespace istio-system $ helm install istio-base istio/base -n istio-system $ helm install istiod istio/istiod --namespace istio-system Delete istio horizontal expansion resource</description></item><item><title>The Devil Is In The Details</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/principals/code-detail/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/principals/code-detail/</guid><description>Recently, I have been worried about the quality of the Dubbo distributed service framework. If there are more maintenance personnel or changes, there will be a decline in quality. I am thinking, is there any need for everyone to abide by it, according to a habit when writing code, I have summarized it. The code process, especially the framework code, should always keep in mind the details. Maybe the following will be said, everyone will feel very simple, very basic, but always keep in mind.</description></item><item><title>Distributed Transactions</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/transaction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/transaction/</guid><description>How to use First step First visit: https://seata.apache.org/unversioned/download/seata-server
Download the seata1.5.2 service we need to use
Second step Add the undo_log table to your database participating in global transactions (TCC, SAGA, XA can skip this step) -- for AT mode you must to init this sql for you business database. the seata server not need it. CREATE TABLE IF NOT EXISTS `undo_log` ( `branch_id` BIGINT(20) NOT NULL COMMENT &amp;#39;branch transaction id&amp;#39;, `xid` VARCHAR(100) NOT NULL COMMENT &amp;#39;global transaction id&amp;#39;, `context` VARCHAR(128) NOT NULL COMMENT &amp;#39;undo_log context, such as serialization&amp;#39;, `rollback_info` LONGBLOB NOT NULL COMMENT &amp;#39;rollback info&amp;#39;, `log_status` INT(11) NOT NULL COMMENT &amp;#39;0: normal status,1: defense status&amp;#39;, `log_created` DATETIME(6) NOT NULL COMMENT &amp;#39;create datetime&amp;#39;, `log_modified` DATETIME(6) NOT NULL COMMENT &amp;#39;modify datetime&amp;#39;, UNIQUE KEY `ux_undo_log` (`xid`, `branch_id`) ) ENGINE = InnoDB AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8 COMMENT = &amp;#39;AT transaction mode undo table&amp;#39;; Create a library named seata in your mysql database, and use the following sql -- -------------------------------- The script used when storeMode is &amp;#39;db&amp;#39; ------- ------------------------- -- the table to store GlobalSession data CREATE TABLE IF NOT EXISTS `global_table` ( `xid` VARCHAR(128) NOT NULL, `transaction_id` BIGINT, `status` TINYINT NOT NULL, `application_id` VARCHAR(32), `transaction_service_group` VARCHAR(32), `transaction_name` VARCHAR(128), `timeout` INT, `begin_time` BIGINT, `application_data` VARCHAR(2000), `gmt_create` DATETIME, `gmt_modified` DATETIME, PRIMARY KEY (`xid`), KEY `idx_gmt_modified_status` (`gmt_modified`, `status`), KEY `idx_transaction_id` (`transaction_id`) ) ENGINE = InnoDB DEFAULT CHARSET = utf8; -- the table to store BranchSession data CREATE TABLE IF NOT EXISTS `branch_table` ( `branch_id` BIGINT NOT NULL, `xid` VARCHAR(128) NOT NULL, `transaction_id` BIGINT, `resource_group_id` VARCHAR(32), `resource_id` VARCHAR(256), `branch_type` VARCHAR(8), `status` TINYINT, `client_id` VARCHAR(64), `application_data` VARCHAR(2000), `gmt_create` DATETIME(6), `gmt_modified` DATETIME(6), PRIMARY KEY (`branch_id`), KEY `idx_xid` (`xid`) ) ENGINE = InnoDB DEFAULT CHARSET = utf8; -- the table to store lock data CREATE TABLE IF NOT EXISTS `lock_table` ( `row_key` VARCHAR(128) NOT NULL, `xid` VARCHAR(96), `transaction_id` BIGINT, `branch_id` BIGINT NOT NULL, `resource_id` VARCHAR(256), `table_name` VARCHAR(32), `pk` VARCHAR(36), `gmt_create` DATETIME, `gmt_modified` DATETIME, PRIMARY KEY (`row_key`), KEY `idx_branch_id` (`branch_id`) ) ENGINE = InnoDB DEFAULT CHARSET = utf8; third step Introduce seata dependency into your project</description></item><item><title>Dubbo Class Inspection Mechanism</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/security/class-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/security/class-check/</guid><description>Supported versions Dubbo &amp;gt;= 3.1.6
Scope of application Currently, the serialization check supports Hessian2, Fastjson2 serialization and generalized calls. Other serialization methods are not currently supported.
configuration method 1. Check mode The inspection mode is divided into three levels: STRICT strict inspection, WARN warning, DISABLED disabled. STRICT Strict checks: disallow deserialization of all classes that are not in the allowed serialization list (whitelist). WARN warning: only prohibits serialization of all classes in the disallowed serialization list (blacklist), and alerts through logs when deserializing classes that are not in the allowed serialization list (whitelist).</description></item><item><title>Dubbo SPI Overview</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/overview/</guid><description>Extended Design Ideas Scalability is what any system pursues, and it is equally applicable to Dubbo.
What is scalability Scalability is a design concept that represents our vision for the future. We hope that based on the existing architecture or design, when some aspects change in the future, we can adapt to this with minimal changes. kind of change.
Advantages of Scalability The advantage of scalability is mainly manifested in the decoupling between modules, which conforms to the principle of opening and closing, which is open to expansion and closed to modification.</description></item><item><title>dubbo protocol</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/dubbo/</guid><description>Dubbo protocol which is the default protocol of Dubbo RPC Framework uses a single long connection and NIO asynchronous communication,it is suitable for small data but with high concurrency RPC call and the number of consumer machine is much greater than provider
On the other hand, the Dubbo protocol is not suitable for transmitting large amounts of data, such as file transmission, video transmission, etc., unless the request is very low.</description></item><item><title>dubbo:application</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/xml/dubbo-application/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/xml/dubbo-application/</guid><description>Application configuration. The corresponding class: org.apache.dubbo.config.ApplicationConfig
Property Corresponding URL parameter Type Requisite Default Effect Description Compatibility name application string Y service governance Application name is the unique identifier of an application. It is for registry combing the dependencies of applications. Note: Consumer and provider application name should not be the same, and this parameter is not a match condition. As a suggestion, you can name it as your project name. For example, kylin application invokes the service of morgan application, then you can name kylin application as &amp;ldquo;kylin&amp;rdquo;, and morgan application as &amp;ldquo;morgan&amp;rdquo;.</description></item><item><title>dubbo:argument</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/xml/dubbo-argument/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/xml/dubbo-argument/</guid><description>Method argument configuration. The corresponding class：org.apache.dubbo.config.ArgumentConfig. This tag is child of &amp;lt;dubbo:method&amp;gt;, which is for feature description of method argument, such as:
&amp;lt;dubbo:method name=&amp;#34;findXxx&amp;#34; timeout=&amp;#34;3000&amp;#34; retries=&amp;#34;2&amp;#34;&amp;gt; &amp;lt;dubbo:argument index=&amp;#34;0&amp;#34; callback=&amp;#34;true&amp;#34; /&amp;gt; &amp;lt;/dubbo:method&amp;gt; Property Corresponding URL parameter Type Requisite Default Effect Description Compatibility index int Y identification method name above 2.0.6 type String Index and type choose one identification Find index of argument by it above 2.0.6 callback &amp;lt;metodName&amp;gt;&amp;lt;index&amp;gt;.retries boolean N service governance Mark whether this argument is a callback service.</description></item><item><title>dubbo:config-center</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/xml/dubbo-config-center/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/xml/dubbo-config-center/</guid><description>Configuration center. Corresponding configuration class: org.apache.dubbo.config.ConfigCenterConfig
property Corresponding URL parameter type required default value description compatibility protocol config.protocol string optional zookeeper Which configuration center to use: apollo, zookeeper, nacos, etc.
take zookeeper for example
1. If protocol is specified, address can be simplified to 127.0.0.1:2181;
2. If protocol is not specified, address is set to zookeeper://127.0.0.1:2181 2.7.0+ address config.address string required Configuration center address.
See protocol description for values 2.7.0+ highest-priority config.</description></item><item><title>dubbo:consumer</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/xml/dubbo-consumer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/xml/dubbo-consumer/</guid><description>Consumer default configuration. The corresponding clas： org.apache.dubbo.config.ConsumerConfig. It is also default configuration of &amp;lt;dubbo:reference&amp;gt;.
Property Corresponding URL parameter Type Requisite Default Effect Description Compatibility timeout default.timeout int N 1000 performance optimization invoking timeout(ms) above 1.0.16 retries default.retries int N 2 performance optimization Invoking retry times, exclude the first invoking. Set 0 to disable it.Only valid if the cluster&amp;rsquo;s value is failback/failover above 1.0.16 loadbalance default.loadbalance string N random performance optimization Load balancing strategy.</description></item><item><title>dubbo:method</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/xml/dubbo-method/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/xml/dubbo-method/</guid><description>Method level configuration. The corresponding class: org.apache.dubbo.config.MethodConfig. This tag is a child tag of &amp;lt;dubbo:service&amp;gt; or &amp;lt;dubbo:reference&amp;gt;, for accuracy to method level.
Property Corresponding URL parameter Type Requisite Default Effect Description Compatibility name string Y identifier Method name above 1.0.8 timeout &amp;lt;metodName&amp;gt;.timeout int N &amp;lt;dubbo:reference&amp;gt; timeout performance optimization Method call timeout(ms) above 1.0.8 retries &amp;lt;metodName&amp;gt;.retries int N &amp;lt;dubbo:reference&amp;gt; retries performance optimization Invoking retry times, exclude the first invoking. Set 0 to disable it above 2.</description></item><item><title>dubbo:module</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/xml/dubbo-module/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/xml/dubbo-module/</guid><description>Module configuration. The corresponding class org.apache.dubbo.config.ModuleConfig
Property The corresponding class Type Requisite Default Effect Description Compatibility name module string Y service governance Module name is for registry combing the dependencies of modules. above 2.2.0 version module.version string N service governance module version above 2.2.0 owner owner string N service governance Module manager, Pls. fill in the mailbox prefix of the person in charge above 2.2.0 organization organization string N service governance Organization name is for registry distinguishing between the source of service.</description></item><item><title>dubbo:monitor</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/xml/dubbo-monitor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/xml/dubbo-monitor/</guid><description>Monitor center configuration. The corresponding class: org.apache.dubbo.config.MonitorConfig
Property The corresponding class Type Requisite Default Effect Description Compatibility protocol protocol string N dubbo service governance Monitor center protocol. &amp;ldquo;registry&amp;rdquo; means looking up monitor center from registry. Others mean communicating to monitor center directly above 2.0.9 address &amp;lt;url&amp;gt; string N N/A service governance Communicating to monitor center directly. address=&amp;ldquo;10.20.130.230:12080&amp;rdquo; above 1.0.16</description></item><item><title>dubbo:parameter</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/xml/dubbo-parameter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/xml/dubbo-parameter/</guid><description>Optional parameter configuration. The corresponding class is java.util.Map. This tag is used as a sub tag to configure custom parameters for extending &amp;lt;dubbo:protocol&amp;gt;, &amp;lt;dubbo:service&amp;gt;, &amp;lt;dubbo:provider&amp;gt;, &amp;lt;dubbo:reference&amp;gt; or &amp;lt;dubbo:consumer&amp;gt;.
Attribute Corresponding URL parameter Type Required Default Value Function Description Compatibility key key string True Service governance routing parameter key Above 2.0.0 value value string True Service governance routing parameter value Above 2.0.0 For example：
&amp;lt;dubbo:protocol name=&amp;#34;napoli&amp;#34;&amp;gt; &amp;lt;dubbo:parameter key=&amp;#34;http://10.20.160.198/wiki/display/dubbo/napoli.queue.name&amp;#34; value=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;/dubbo:protocol&amp;gt; you can also use it like this:</description></item><item><title>dubbo:protocol</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/xml/dubbo-protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/xml/dubbo-protocol/</guid><description>Service provider protocol configuration. The corresponding class is org.apache.dubbo.config.ProtocolConfig. If you need to support multiple protocols, you could declare multiple &amp;lt;dubbo:protocol&amp;gt; tags, and specify the protocol via protocol property.
Attribute Corresponding URL parameter Type Required Default Value Function Description Compatibility id string False dubbo Configuration association Bean Id of the protocol, can be referenced in &amp;lt;dubbo:service protocol=&amp;quot;&amp;quot;&amp;gt; The default value is equal to the value of name attribute while id is not filled.</description></item><item><title>dubbo:provider</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/xml/dubbo-provider/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/xml/dubbo-provider/</guid><description>The default configuration of service provider. The corresponding class is org.apache.dubbo.config.ProviderConfig. This tag provider default values for &amp;lt;dubbo:service&amp;gt; and &amp;lt;dubbo:protocol&amp;gt;.
Attribute Corresponding URL parameter Type Required Default Value Function Description Compatibility id string False dubbo Configuration association Bean Id of the protocol, can be referenced in &amp;lt;dubbo:service proivder=&amp;quot;&amp;quot;&amp;gt; Above 1.0.16 protocol &amp;lt;protocol&amp;gt; string False dubbo Performance optimize Protocol name Above 1.0.16 host &amp;lt;host&amp;gt; string False Find local IP automatically Service discovery The host name of services, to specify VIP and domain, or having multiple network cards.</description></item><item><title>dubbo:reference</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/xml/dubbo-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/xml/dubbo-reference/</guid><description>The configuration of service consumer. The corresponding class isorg.apache.dubbo.config.ReferenceConfig
Attribute Corresponding URL parameter Type Required Default Value Function Description Compatibility id string True Configuration association Bean Id of the service reference Above 1.0.0 interface class True Service discovery Interface name of the service Above 1.0.0 version version string False Service discovery Service version, must be equal to the provider&amp;rsquo;s version Above 1.0.0 group group string False Service discovery The group of the service reference, must be equal to the provider&amp;rsquo;s group.</description></item><item><title>dubbo:registry</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/xml/dubbo-registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/xml/dubbo-registry/</guid><description>The configuration of the registry center. The corresponding class is org.apache.dubbo.config.RegistryConfig. If you have multiple different registries, you can declare multiple &amp;lt;dubbo:registry&amp;gt; tags, and then reference specified registry with registry property in &amp;lt;dubbo:service&amp;gt; or &amp;lt;dubbo:reference&amp;gt; tag.
Attribute Corresponding URL parameter Type Required Default Value Function Description Compatibility id string False Configuration association Bean Id of the registry center, can be referenced in &amp;lt;dubbo:service registry=&amp;quot;&amp;quot;&amp;gt;or &amp;lt;dubbo:reference registry=&amp;quot;&amp;quot;&amp;gt; Above 1.0.16 address &amp;lt;host:port&amp;gt; string True Service discovery The address of the registry center.</description></item><item><title>dubbo:service</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/xml/dubbo-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/xml/dubbo-service/</guid><description>The configuration of the service provider. The corresponding class is org.apache.dubbo.config.ServiceConfig.
Attribute Corresponding URL parameter Type Required Default Value Function Description Compatibility interface class True Service discovery The service interface name Above 1.0.0 ref object True Service discovery The reference to the service implementation Above 1.0.0 version version string False 0.0.0 Service discovery Service version. It&amp;rsquo;s recommended to use 2 digitals such as 1.0. It&amp;rsquo;s necessary to upgrade version only when the service is not compatible.</description></item><item><title>Dubbo Admin Functions</title><link>https://dubbo.apache.org/en/docs/v2.7/admin/ops/functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/admin/ops/functions/</guid><description>Page search If you need to manage a Dubbo service, you need to search it first and open it&amp;rsquo;s management page
Service provider page Service consumer page Add route rule page Add dynamic configuration page</description></item><item><title>Group Aggregation</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/group-merger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/group-merger/</guid><description>Feature description Aggregate the results by grouping and return the aggregated results, such as menu service, use group to distinguish multiple implementations of the same interface, now the consumer needs to call once from each group and return the result, and return the result after merging, so You can implement aggregated menu items.
For relevant codes, please refer to Samples in the dubbo project
scenes to be used Service Grouping and Multiple Versions</description></item><item><title>How to become a Dubbo committer</title><link>https://dubbo.apache.org/en/docs/contribution-guidelines/contributor/become-a-committer_dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/contribution-guidelines/contributor/become-a-committer_dev/</guid><description>Anyone can be a contributor to an Apache project. Being a contributor simply means that you take an interest in the project and contribute in some way, ranging from asking sensible questions (which documents the project and provides feedback to developers) through to providing new features as patches.
If you become a valuable contributor to the project you may well be invited to become a committer. Committer is a term used at the ASF to signify someone who is committed to a particular project.</description></item><item><title>Install Dubbo-go development environment</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/quickstart/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/quickstart/install/</guid><description>1. Install the Go language environment It is recommended to use the latest version of go 1.17
go version &amp;gt;= go 1.15
[Go language official website download address]
Add $GOPATH/bin to environment variable
2. Install the serialization tool protoc [protoc download address]
3. Install dubbogo-cli and related plugins Execute the following command to install dubbogo-cli to $GOPATH/bin
$ export GOPROXY=&amp;#34;https://goproxy.cn&amp;#34; $ go install github.com/dubbogo/dubbogo-cli@latest $ dubbogo-cli hello Install dependent tool plugins</description></item><item><title>Introduction</title><link>https://dubbo.apache.org/en/latest/facade-docs/what/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/latest/facade-docs/what/overview/</guid><description/></item><item><title>Introduction to Dubbo</title><link>https://dubbo.apache.org/en/overview/what/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/what/overview/</guid><description>Apache Dubbo is an RPC service development framework, which is used to solve service governance and communication problems under the microservice architecture. It officially provides multi-language SDK implementations such as Java and Golang. Microservices developed using Dubbo are natively capable of remote address discovery and communication with each other. Using the rich service governance features provided by Dubbo, service governance demands such as service discovery, load balancing, and traffic scheduling can be realized.</description></item><item><title>Introduction to Configuration Center</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/config-center/desc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/config-center/desc/</guid><description/></item><item><title>Java SDK</title><link>https://dubbo.apache.org/en/overview/mannual/java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/mannual/java/</guid><description/></item><item><title>Meter</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/observability/meter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/observability/meter/</guid><description>overview 1. Indicator access instructions 2. Indicator system design Dubbo&amp;rsquo;s indicator system involves three parts in total, indicator collection, local aggregation, and indicator push Indicator collection: Push the indicators that need to be monitored inside Dubbo to a unified Collector for storage Local Aggregation: All indicators collected are basic indicators, and some quantile indicators need to be calculated through local aggregation Indicator push: The collected and aggregated indicators are pushed to third-party servers in a certain way, currently only involving Prometheus</description></item><item><title>Develop microservice with Dubbo</title><link>https://dubbo.apache.org/en/overview/core-features/service-definition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/core-features/service-definition/</guid><description>Dubbo addresses a series of challenges from development and deployment to governance and operations in enterprise microservices. Dubbo provides a full suite of services for developers, from project creation, development testing, to deployment, visual monitoring, traffic governance, and ecosystem integration.
Development Language Support: Dubbo supports various programming languages including Java, Go, Rust, Node.js, and defines a set of paradigms for microservice development. A corresponding scaffold is available for quickly creating a microservice project skeleton.</description></item><item><title>Nacos Registry Center</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/registry/nacos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/registry/nacos/</guid><description>Nacos is a very important registry center for Dubbo ecosystem, dubbo-registry-nacos is the implementation of Nacos integration to Nacos.
Prepare Work When you integrate dubbo-registry-nacos into your Dubbo project, please Make sure the Nacos service is started in the background. If you are not familiar with the basic use of Nacos, you can refer to Nacos Quick Start. It is recommended to use the version equal or above Nacos 1.0.0.</description></item><item><title>Network Protocol</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/sourcecode/protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/sourcecode/protocol/</guid><description>For the Dubbogo microservice framework, the network protocol is the module responsible for network communication in the remote procedure call, responsible for data serialization, packaging, request initiation, network port monitoring and other functions from the application layer to the network layer. Dubbogo abstracts a set of interfaces for the protocol as follows:
type Protocol interface { // Export service for remote invocation Export (invoker Invoker) Exporter // Refer a remote service Refer(url *common.</description></item><item><title>Overall Architecture</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/concepts-and-architecture/overall-architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/concepts-and-architecture/overall-architecture/</guid><description>Node role description Node Role Description Provider The service provider of the exposed service Consumer The service consumer who invokes the remote service Registry Registry for service registration and discovery Monitor A monitoring center that counts service calls and call times Container service running container Description of calling relationship The service container is responsible for starting, loading, and running the service provider. When the service provider starts, it registers the services it provides with the registration center.</description></item><item><title>Overview of Metadata Center</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/metadata-center/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/metadata-center/overview/</guid><description>The metadata center provides access to two types of metadata in Dubbo:
1 address discovery metadata 1.1 &amp;lsquo;Interface-Application&amp;rsquo; mapping relationship 1.2 Interface configuration data 2 Service operation and maintenance metadata 2.1 Interface definition description data 2.2 Consumers subscribe to relational data For how to configure and open the metadata center, please refer to the specific implementation document.
1 Address Discovery Metadata [Application-level service discovery mechanism](/en/docs3-v2/java-sdk/concepts-and-architecture/service-discovery/#Application-level service discovery introduction) is introduced in Dubbo3 to solve the problem of heterogeneous microservice system interoperability and For performance issues in large-scale cluster practice, application-level service discovery will fully replace interface-level service discovery in the 2.</description></item><item><title>Port Protocol Multiplexing</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/port-unification/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/port-unification/</guid><description>Feature description By configuring the protocol, dubbo3 can support port protocol multiplexing. For example, after using the Triple protocol to enable port multiplexing, you can add Dubbo protocol support, and Qos protocol support. These protocols are identified by a unified port multiplexing It can be used for service protocol migration, which is processed by the server, and can save ports and related resources and reduce the complexity of operation and maintenance.</description></item><item><title>Preflight Check</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/preflight-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/preflight-check/</guid><description>By default dubbo will check if the dependent service is available at startup . It will throw an exception to prevent Spring complete initialization when it is not available, so that you can find the problems early before publishing you application, the default setting: check=true.
You can turn off checking by check=false. For example, some services do not care it when you run testing, or you must have one started firstly because of circular dependency.</description></item><item><title>Protocol Extension</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/impls/protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/impls/protocol/</guid><description>Summary Extension to RPC protocol, hide details of remote call.
Contract:
When user calls invoke() method of Invoker object which&amp;rsquo;s returned from refer() call, the protocol needs to correspondingly execute invoke() method of Invoker object passed from remote export() method associated with the same URL. Moreover, it&amp;rsquo;s protocol&amp;rsquo;s responsibility to implement Invoker which&amp;rsquo;s returned from refer(). Generally speaking, protocol sends remote request in the Invoker implementation, but needs not to care about the Invoker passed into export() since the framework will implement the logic and pass in the instance.</description></item><item><title>Protocol Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/protocol/</guid><description>Expansion Description RPC protocol extension, encapsulates remote call details.
contract:
When the user calls the invoke() method of the Invoker object returned by refer(), the protocol needs to execute the invoke() of the Invoker object passed in from the remote export() of the URL accordingly ` method. Among them, the Invoker returned by refer() is implemented by the protocol, and the protocol usually needs to send a remote request in this Invoker, and the Invoker passed in by export() is implemented and passed in by the framework, and the protocol does not need to care.</description></item><item><title>Protocol Overview</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/overview/</guid><description>Dubbo3 provides Triple (Dubbo3) and Dubbo2 protocols, which are native protocols of the Dubbo framework. In addition, Dubbo3 also integrates many third-party protocols and incorporates them into Dubbo&amp;rsquo;s programming and service governance system. Including gRPC, Thrift, JsonRPC, Hessian2, REST, etc. The following focuses on the Triple and Dubbo2 protocols.
protocol description The Triple protocol is the main protocol launched by Dubbo3. Triple means the third generation. Through the evolution of the Dubbo1.</description></item><item><title>Protocol Overview</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/triple/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/triple/overview/</guid><description>Triple overview For the format and principle of the Triple protocol, please refer to RPC Communication Protocol
According to the goal of Triple design, the Triple protocol has the following advantages
Capable of cross-language interaction. Both the traditional multi-language and multi-SDK mode and the Mesh cross-language mode require a more general and scalable data transmission protocol. Provide a more complete request model. In addition to supporting the traditional Request/Response model (Unary one-way communication), it also supports Stream (streaming communication) and Bidirectional (two-way communication).</description></item><item><title>QOS Overview</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/qos/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/qos/overview/</guid><description>Description of related parameters QoS provides some startup parameters to configure startup, they mainly include:
Parameters Description Default qos-enable Whether to enable QoS true qos-port Enable QoS binding port 22222 qos-accept-foreign-ip Whether to allow remote access false qos-accept-foreign-ip-whitelist Supported remote host ip address (segment) (none) qos-anonymous-access-permission-level Permission level for anonymous access supported PUBLIC(1) Note, starting from 2.6.4/2.7.0, the default configuration of qos-accept-foreign-ip is changed to false. If qos-accept-foreign-ip is set to true, it may bring security risks, please evaluate carefully Open.</description></item><item><title>Quick start</title><link>https://dubbo.apache.org/en/docs/v3.0/languages/erlang/quick-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v3.0/languages/erlang/quick-start/</guid><description>It is recommended to use java to define the interface jar first, and use the erlanalysis tool to parse the java interface to Erlang lib
Import dependent libraries Use the Rebar compilation tool. Add dubblerl to rebar.config to your project
{deps, [ {dubboerl, {git, &amp;#34;https://github.com/apache/dubbo-erlang.git&amp;#34;, {branch, &amp;#34;master&amp;#34;}}} ]}. Use erlang.mk compilation tool in progress...
Import interface library Suppose the interface lib you exported is called dubbo_service.
If you didn&amp;rsquo;t upload your lib to your git repository, It is recommended that you copy the dubbo_service lib into the project&amp;rsquo;s apps directory.</description></item><item><title>Quick start</title><link>https://dubbo.apache.org/en/docs3-v2/rust-sdk/quick-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/rust-sdk/quick-start/</guid><description>See the full example here.
1 Prerequisite Install Rust development environment. Install protoc. 2 Use IDL to define Dubbo service The Greeter service is defined as follows, contains a Unary, Client stream, Server stream, Bidirectional stream model Dubbo service:
// ./proto/greeter.proto syntax = &amp;#34;proto3&amp;#34;; option java_multiple_files = true; package org.apache.dubbo.sample.tri; // The request message containing the user&amp;#39;s name. message GreeterRequest { string name = 1; } // The response message containing the greetings message GreeterReply { string message = 1; } service Greeter{ // unary rpc greet(GreeterRequest) returns (GreeterReply); // clientStream rpc greetClientStream(stream GreeterRequest) returns (GreeterReply); // serverStream rpc greetServerStream(GreeterRequest) returns (stream GreeterReply); // bi streaming rpc greetStream(stream GreeterRequest) returns (stream GreeterReply); } 3 Add Dubbo-rust and other dependencies # .</description></item><item><title>Quick Start</title><link>https://dubbo.apache.org/en/docs/v2.7/user/languages/erlang/quick-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/languages/erlang/quick-start/</guid><description>We recommend using java to define the Dubbo interface. And use erlanalysis tool parse java interface transfer to erlang lib.
Import Dependency Lib Using Rebar Build Tool Add dubblerl to rebar.config with your project
{deps, [ {dubboerl, {git, &amp;#34;https://github.com/apache/dubbo-erlang.git&amp;#34;, {branch, &amp;#34;master&amp;#34;}}} ]}. User erlang.mk Build Tool Waiting for improvement
Import interface lib Suppose the interface lib you exported is called dubbo_service.
If you didn&amp;rsquo;t upload your lib to your git repository, It is recommended that you copy the dubbo_service lib into the project&amp;rsquo;s apps directory.</description></item><item><title>1 - Rapidly deploy a microservice application</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/brief/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/brief/</guid><description>Background As a microservice framework, Dubbo is most important to provide users with cross-process RPC remote call capabilities. As shown in the figure above, Dubbo&amp;rsquo;s service consumer (Consumer) sends requests to the service provider (Provider) through a series of tasks.
In order to achieve such a goal, Dubbo introduces the Registry component. Through the Registry, service consumers can perceive the connection method of the service provider, so as to send the request to the correct service provider.</description></item><item><title>Reactive Programming</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/reactive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/reactive/</guid><description>Feature description This feature is implemented based on the Triple protocol and Project Reactor, and is supported in versions above 3.1.0. Users only need to write the IDL file and specify the corresponding Generator of the protobuf plug-in to generate and use the Stub code that supports the responsive API.
There are four call modes, namely OneToOne, OneToMany, ManyToOne, and ManyToMany, corresponding to Unary calls, server streams, client streams, and bidirectional streams.</description></item><item><title>Request time-consuming sampling</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/profiler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/profiler/</guid><description>Function Description The performance sampling function can detect the time consumption of various parts of the Dubbo processing link. When a timeout occurs, ( usageTime / timeout &amp;gt; profilerWarnPercent * 100 ) records the time consumption of calls through logs.
This function is divided into simple profiler and detail profiler two modes, where simple profiler mode is enabled by default, and detail profiler mode is disabled by default. Compared with the simple profiler mode, the detail profiler collects more time-consuming processing of each filter, specific time-consuming protocols, etc.</description></item><item><title>Requirements</title><link>https://dubbo.apache.org/en/docs/v2.7/user/preface/requirements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/preface/requirements/</guid><description>Requirements Before the advent of large-scale services, an application might just exposes or references remote service by using RMI or Hessian, the call is done by configuring service URL, and load balance is done through hardwares, like F5.
When there are more and more services, it becomes very difficult to configure the service URL, the single point pressure of F5 hardware load balancer is also increasing. At this point, a service registry is needed to dynamically register and discover services to make the service&amp;rsquo;s location transparent.</description></item><item><title>RPC Protocol Triple&amp;Dubbo Benchmark</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/performance/rpc-benchmarking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/performance/rpc-benchmarking/</guid><description>The Dubbo protocol implementation of Dubbo3 is basically the same as the Dubbo2 version in terms of performance. Since the Triple protocol itself is built based on HTTP/2, the RPC call on a single link is not improved compared with TCP-based Dubbo2, but has a certain decline in some call scenarios. But the greater advantage of the _Triple protocol _ lies in the gateway penetration, versatility, and overall throughput improvement brought about by the Stream communication model.</description></item><item><title>Serialization Security</title><link>https://dubbo.apache.org/en/overview/notices/serialization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/notices/serialization/</guid><description>Overview Dubbo supports the extension of serialization protocols. In theory, users can enable any serialization protocol based on this extension mechanism. This brings great flexibility, but at the same time, users must be aware of the hidden security risks. Data deserialization is the link most easily exploited by attackers, who use it to perform RCE attacks to steal or destroy server-side data. Before switching serialization protocols or implementations, users should fully investigate the security guarantees of the target serialization protocol and its framework implementation, and set up corresponding security measures in advance (such as setting up a black/white list).</description></item><item><title>Server Thread Model</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/threading-model/provider/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/threading-model/provider/</guid><description>The current threading models of the Dubbo protocol and the Triple protocol are not yet aligned. The threading models of the Triple protocol and the Dubbo protocol are introduced separately below.
Dubbo protocol - Provider-side threading model Before introducing the Provider-side threading model of the Dubbo protocol, it is introduced that Dubbo abstracts the operations on the channel into five behaviors:
Establish a connection: connected, the main responsibility is to record the time of read and write in the channel, and handle the callback logic after the connection is established.</description></item><item><title>Service Version</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/multi-versions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/multi-versions/</guid><description>Feature description Follow the steps below for version migration
During low-stress periods, first upgrade half of the providers to the new version Upgrade all consumers to the new version Then upgrade the remaining half of the providers to the new version Configuration Old and new versions of service providers New and old version service consumers scenes to be used When an interface is implemented and an incompatible upgrade occurs, the version number can be used for transition, and services with different version numbers do not refer to each other.</description></item><item><title>Dubbo proxy mesh using Envoy &amp; Istio</title><link>https://dubbo.apache.org/en/overview/tasks/mesh/dubbo-mesh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/mesh/dubbo-mesh/</guid><description>By following the steps below, you can easily learn how to develop a Dubbo service that conforms to the Service Mesh architecture, deploy it to Kubernetes, and access Istio&amp;rsquo;s traffic management system. Check here Complete sample source code
1 Overall Objective Deploy Dubbo application to Kubernetes Istio automatically injects Envoy and implements traffic interception Traffic governance based on Istio rules 2 Basic process and working principle This example demonstrates how to deploy an application developed by Dubbo under the Istio system to realize Envoy&amp;rsquo;s automatic proxying of Dubbo services.</description></item><item><title>timeout for configuration calls</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/features/timeout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/features/timeout/</guid><description>1. Preparations dubbo-go cli tools and dependent tools have been installed Create a new demo application 2. Modify RPC call-related parameters through configuration items 2.1 Modify the timeout of the call and verify dubbo: consumer: request-timeout: 15s # Configure client timeout The default RPC timeout of the Dubbo-go application is 3s. After the request times out, the client will return an error with the error context deadline exceeded. In this task, you need to first modify the server function of the demo application to take a long time, and then check the client&amp;rsquo;s timeout error; and then configure the client timeout so that the time-consuming function can be called normally.</description></item><item><title>TLS Support</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/security/tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/security/tls/</guid><description>Feature description Both the built-in Dubbo Netty Server and the newly introduced gRPC protocol provide a TLS-based secure link transmission mechanism.
There is a unified entry for TLS configuration.
scenes to be used Users who require encryption for the entire link can use TLS.
Reference use case https://github.com/apache/dubbo-samples/tree/master/dubbo-samples-ssl
How to use Provider side SslConfig sslConfig = new SslConfig(); sslConfig.setServerKeyCertChainPath(&amp;#34;path to cert&amp;#34;); sslConfig.setServerPrivateKeyPath(args[1]); // If two-way cert authentication is enabled if (mutualTls) { sslConfig.</description></item><item><title>Transaction Management</title><link>https://dubbo.apache.org/en/overview/tasks/ecosystem/transaction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/ecosystem/transaction/</guid><description>What is Seata Seata is an open source distributed transaction solution dedicated to providing high-performance and easy-to-use distributed transaction services. Seata will provide users with AT, TCC, SAGA and XA transaction modes to create a one-stop distributed solution for users.
1. Example architecture description The user purchases commodity business, and the whole business includes 3 microservices:
Inventory service: deduction of the inventory quantity of a given item. Order service: Generate orders based on purchase requests.</description></item><item><title>Understanding the Registry</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/desc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/desc/</guid><description/></item><item><title>Upgrade to Dubbo3</title><link>https://dubbo.apache.org/en/overview/tasks/migration/2to3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/migration/2to3/</guid><description>** Upgrade directly to Dubbo 3.0 without changing any code. **
At the beginning of the design and development of version 3.0, we set the goal of being compatible with older versions of Dubbo users (2.5, 2.6, 2.7). Therefore, the upgrade process to version 3.0 will be completely transparent, users do not need to do any business transformation, and the behavior of the framework after upgrading to version 3.x will remain completely consistent with version 2.</description></item><item><title>Use grpc_cli to debug Dubbo-go service</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/debugging/grpc_cli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/debugging/grpc_cli/</guid><description>The grpc_cli tool is a tool used by the gRPC ecosystem to debug services. It can be obtained under the premise that [reflection service] (https://github.com/grpc/grpc/blob/master/doc/server-reflection.md) is enabled on the server Go to the service&amp;rsquo;s proto file, service name, method name, parameter list, and initiate a gRPC call.
The Triple protocol is compatible with the gRPC ecosystem, and the gRPC reflection service is enabled by default, so you can directly use grpc_cli to debug the triple service.</description></item><item><title>Using IDL + Protobuf to define services across languages</title><link>https://dubbo.apache.org/en/overview/tasks/triple/idl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/triple/idl/</guid><description>Service is the core concept in Dubbo. A service represents a set of RPC methods. Service is the basic unit of user-oriented programming and service discovery mechanism. The basic process of Dubbo development is: user-defined RPC service, through agreed configuration Declare RPC as a Dubbo service, and then program based on the service API. For the service provider, it provides a specific implementation of the RPC service, while for the service consumer, it uses specific data to initiate a service call.</description></item><item><title>View monitoring information of RPC calls</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/monitor/rpc_metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/monitor/rpc_metrics/</guid><description>1. Preparations dubbo-go cli tools and dependent tools have been installed Create a new demo application 2. Modify the client logic and initiate calls repeatedly go-client/cmd/client.go
func main() { config. SetConsumerService(grpcGreeterImpl) if err := config.Load(); err != nil { panic(err) } logger.Info(&amp;#34;start to test dubbo&amp;#34;) req := &amp;amp;api.HelloRequest{ Name: &amp;#34;Laurence&amp;#34;, } for{ // repeat the call reply, err := grpcGreeterImpl.SayHello(context.Background(), req) if err != nil { logger. Error(err) } logger.Infof(&amp;#34;client response result: %v\n&amp;#34;, reply) } } 3.</description></item><item><title>What is Dubbo-go</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/what/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/what/</guid><description>Apache/Dubbo-go (github.com/apache/dubbo-go)
It is a distributed RPC framework; it is the Go language implementation of Apache/Dubbo. It aims to provide developers with a convenient microservice application development experience.
Dubbo-go builds a bridge between Java and Go languages, interconnects with the gRPC/Dubbo/SpringCloud ecology, and relies on the Go language ecology to explore the technical dividends of the cloud-native era.</description></item><item><title>XML Configuration</title><link>https://dubbo.apache.org/en/docs/v2.7/user/configuration/xml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/configuration/xml/</guid><description>About the XML configuration items, see：XML References. If you prefer use API directly instead of using Spring, see API Configuration. Want an example of how to use configuration, see Quick Start.
provider.xml demo &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:dubbo=&amp;#34;http://dubbo.apache.org/schema/dubbo&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&amp;#34;&amp;gt; &amp;lt;dubbo:application name=&amp;#34;hello-world-app&amp;#34; /&amp;gt; &amp;lt;dubbo:registry address=&amp;#34;multicast://224.5.6.7:1234&amp;#34; /&amp;gt; &amp;lt;dubbo:protocol name=&amp;#34;dubbo&amp;#34; port=&amp;#34;20880&amp;#34; /&amp;gt; &amp;lt;dubbo:service interface=&amp;#34;org.apache.dubbo.demo.DemoService&amp;#34; ref=&amp;#34;demoServiceLocal&amp;#34; /&amp;gt; &amp;lt;dubbo:reference id=&amp;#34;demoServiceRemote&amp;#34; interface=&amp;#34;org.apache.dubbo.demo.DemoService&amp;#34; /&amp;gt; &amp;lt;/beans&amp;gt; All tags support custom parameters, so we can meet the special config requirements at different extension points, such as:</description></item><item><title>Zookeeper Registry Server</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/registry/zookeeper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/registry/zookeeper/</guid><description>Zookeeper is the child project of apache hadoop. Since it offers tree-like directory service and supports change notification, it&amp;rsquo;s suitable to use it as dubbo&amp;rsquo;s registry server. It&amp;rsquo;s a field-proven product, therefore it&amp;rsquo;s recommended to use it in the production environment. 1
Description on registration procedure:
When service provider boots up: write service URL address under directory /dubbo/com.foo.BarService/providers When service consumer boots up: subscribe to /dubbo/com.foo.BarService/providers for provider&amp;rsquo;s URL addresses. At the same time, write consumer&amp;rsquo;s URL address under /dubbo/com.</description></item><item><title>如何成为 Dubbo Committer</title><link>https://dubbo.apache.org/en/latest/contribution-guidelines/contributor/become-a-committer_dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/latest/contribution-guidelines/contributor/become-a-committer_dev/</guid><description>每个人都可以成为 Apache 项目的贡献者。作为一个贡献者只是意味着你对项目感兴趣并以某种方式做出贡献，从提出合理的问题（这些问题记录了项目并向开发人员提供反馈）到提供新的特性作为补丁。
如果你成为对一个项目有价值的贡献者，你有可能被邀请成为一个 committer。committer 是 ASF（Apache软件基金会）中用来表示提交特定项目的人的术语。它给你带来对项目仓库和资源写的权限。
在 Dubbo 社区，如果一个 committer 获得大量的优秀成绩，就可以被邀请加入项目管理委员会（PMC）。
当您不熟悉ASF使用的开源的开发过程时，有时难以理解的一点，就是我们更重视社区而不是代码。一个强大而健康的社区将受到尊重，成为一个有趣和有益的地方。更重要的是，一个多元化和健康的社区可以长时间的持续支持代码，即使个别公司在这个领域来来往往，也是如此。
更多详细信息可以在这里找到。
我可以贡献什么？ 请参阅新的贡献者指南。</description></item><item><title>注册中心</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/sourcecode/registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/sourcecode/registry/</guid><description>Dubbogo 为注册中心抽象了一套接口如下：
// Registry Extension - Registry type Registry interface { common.Node // Register is used for service provider calling, register services // to registry. And it is also used for service consumer calling, register // services cared about, for dubbo&amp;#39;s admin monitoring. Register(url *common.URL) error // UnRegister is required to support the contract: // 1. If it is the persistent stored data of dynamic=false, the // registration data can not be found, then the IllegalStateException // is thrown, otherwise it is ignored.</description></item><item><title>Apache 提交者注册流程</title><link>https://dubbo.apache.org/en/latest/contribution-guidelines/committer/new-committer-guide_dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/latest/contribution-guidelines/committer/new-committer-guide_dev/</guid><description>一、Apache 提交者的产生 项目孵化初始化提交者 项目孵化阶段，在孵化项目提案中，会有初始化提交者列表这一选项。确认你是初始化提交者的一员。项目在 apache 孵化器社区投票通过后，提交者可以开始准备注册账户了。可以参看孵化器 wiki
活跃的贡献者被选举为提交者 在后期的开发过程中，活跃的贡献者可以被选举为提交者。见如何成为 committer
二、个人开发者提交 ICLA 1、选择 apache id 在 apache 提交者列表页查看已经注册过的 apache id，
2、个人提交者授权协议（ICLA）： 下载 ICLA 模板，查找可用的 id。将 icla.pdf 个人信息填写正确后打印,签名、扫描、并当做附件发送邮件给秘书 secretary@apache.org，秘书会帮忙创建 apache 用户 id。同时会创建一个 your_id@apache.org 的邮箱，可以在 apache 提交者列表页查看查找用户是否已经创建。
3、导师帮助提交用户id创建请求 导师将帮助提交 apache 账户创建请求给 root 邮件组，会有人帮助建立 id。一般需要2天时间账户会建立，请等待并在 apache 提交者列表页查看查找用户是否已经创建。
三、加入apache开发者组 登陆 Apache 账户工具，在登陆页面点击&amp;quot;忘记密码&amp;quot;设置始化密码，会有一封密码重置邮件发送到 forward 邮箱(在孵化项目提案中提交的开发者邮件) 关于 apache 邮箱：apache.org 邮箱并没有自己的邮件内容存储服务器。它需要借用其他邮件提供商的邮件内容存储、分发功能。在很多投票环节是建议使用 apache 邮箱的。 这里就有一个问题，怎么在其它邮箱里面配置 apache.org 邮箱转发功能： 收件箱：收取发送到 apache.org 的邮件。这个在第一步配置好 Apache 账户工具的 forward 邮箱就可以用 forward 邮箱收取邮件了 发件箱：将发出的邮件显示发件邮箱为 apache.org 邮箱。请参考：设置 apache 邮箱指南和 gmail 邮箱设置方式。 其他邮箱服务的设置方式不方便找到，gmail 的最方便，建议换成 gmail 邮箱(不是广告)。 修改编辑页面的 homepage url，apache 提交者列表页中你的账户能加主页链接。 修改编辑页面的 github 账户(username)，提交确认后两个小时内会有邮件邀请你加入 github.</description></item><item><title>0-2 - Illegal property value</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/2/</guid><description>Possible Reason This hint means that the value configured by the user does not match the data type required by the attribute itself. For example, the dubbo.comsumer.threads attribute can only accept numeric attributes, but the value entered by the user is mixed with letters.
Troubleshooting and resolution steps According to the Configuration Item Reference Manual, find the wrong configuration item, check the type specified by the item, and check whether there is a type inconsistency.</description></item><item><title>2-11 - Label Routing Rules Illegal</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/11/</guid><description>Possible Reason The label routing rule configured by the user is invalid. The label routing address configured by the user is invalid. Troubleshooting and resolution steps Refer to the community label routing configuration specification, and check the label routing configuration.</description></item><item><title>2-12 - Label route acquisition provider application name is empty</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/12/</guid><description>Possible Reason The label route obtains the provider application name from the push provider address list and is empty. Troubleshooting and resolution steps This exception is an exception of the Dubbo framework itself. Please file an issue in the community and provide the environment site information and reproduction steps.</description></item><item><title>2-13 - Failed to receive and load mesh routing rules</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/13/</guid><description>Possible Reason The rules of the mesh routing configuration are illegal, and the loading is abnormal. Troubleshooting and resolution steps Check the mesh routing rule configuration. &amp;ldquo;Mesh Example&amp;rdquo;.</description></item><item><title>2-15 - Routing rule parsing failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/15/</guid><description>Possible Reason The routing rule configured by the user is invalid. Troubleshooting and resolution steps Check the configured routing rules.</description></item><item><title>2-15 - Script route execution failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/14/</guid><description>Possible Reason Script routing rules are illegal, resulting in rule parsing failure. Dubbo framework failed to execute the script. Troubleshooting and resolution steps Check that the script is written according to the specification.</description></item><item><title>2-16 - Request retries failed multiple times</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/16/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/16/</guid><description>Possible Reason The provider is abnormal, causing the consumer to retry and fail many times. Troubleshooting and resolution steps Check the health status of the provider.</description></item><item><title>2-17 - mock request failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/17/</guid><description>Possible Reason Configured mandatory mock, suggestive log. Executing the mock request is abnormal. Troubleshooting and resolution steps Check whether mandatory mock is configured. Check whether the mock response is normal.</description></item><item><title>2-18 - Mesh routing rules are not monitored</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/18/</guid><description>Possible Reason Mesh delivered routing rules, but the rules were not monitored. Troubleshooting and resolution steps Check whether the mesh routing rule configuration complies with the specification.</description></item><item><title>2-19 - Asynchronous request failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/19/</guid><description>Possible Reason The provider is abnormal, causing the asynchronous request of the consumer to fail. The network is abnormal, causing the asynchronous request of the consumer to fail. Troubleshooting and resolution steps Check the health status of the provider. Check the network status.</description></item><item><title>2-2 - No Provider available (address not found)</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/2/</guid><description>Possible Reason There may be several situations at this time:
The Provider service is not started, or the registration center (such as ZooKeeper, Nacos, Consul) is down. There is an error in the service configuration of Dubbo, you must ensure that the service name, group (default is Dubbo), and version are all correct. The accessed environment is wrong: Usually we have multiple environments such as development environment, test environment, and online production environment.</description></item><item><title>3-2 - Publish or push service failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/3/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/3/2/</guid><description>Possible Reason The registration center cannot be connected. The registration center cannot provide external services. Troubleshooting and resolution steps Whether the service and registration center network is normal. Whether the registration center starts normally and can be connected through third-party tools. Whether there is a version compatibility problem between the version referenced by the service and the version of the registration center.</description></item><item><title>4-2 - Serialization optimizer initial error</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/2/</guid><description>Possible Reason The serialization configuration of Kryo and FST is currently used.
Troubleshooting and resolution steps Please refer to Kryo and FST serialization</description></item><item><title>5-2 - Failed to register/unregister shutdown hook method</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/2/</guid><description>Possible Reason There are exceptions in the custom hook method and business processing logic.
Troubleshooting and resolution steps Check the custom hook method and business processing logic for runtime exceptions.</description></item><item><title>6-2 - Client Timeout</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/2/</guid><description>Timeout occurs when the caller fails to obtain the corresponding response within the specified time after the request is sent.
Possible Reason The server is really slow in processing and cannot return the result within the specified time. The caller will automatically return a timeout exception response to end the call. If the server responds quickly, but when the client load is high and the load pressure is high, it will time out due to problems such as the client request not being sent out or the response stuck in the TCP Buffer.</description></item><item><title>7-2 - QOS is on</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/7/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/7/2/</guid><description>Possible Reason QOS is enabled, and it is enabled by default.
Troubleshooting and resolution steps Please refer to QOS Operation Manual.</description></item><item><title>Access Control</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/security/token-authorization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/security/token-authorization/</guid><description>Feature description Control authority in the registration center through token verification to decide whether to issue tokens to consumers, can prevent consumers from bypassing the registry to access the provider, In addition, the authorization method can be flexibly changed through the registration center without modifying or upgrading the provider.
scenes to be used To a certain extent, the trusted authentication of the client and the server is realized, preventing any client from being able to access, and reducing the risk of security problems.</description></item><item><title>API Configuration</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config/api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config/api/</guid><description>Assemble configuration, start Dubbo, publish and subscribe services through API coding. This method can support dynamic creation of ReferenceConfig/ServiceConfig, combined with generalized calls to meet the needs of API Gateway or test platform.
Reference API Samples
service provider Expose the service interface through ServiceConfig, and publish the service interface to the registration center.
Note: In order to better support Dubbo3 application-level service discovery, it is recommended to use the new DubboBootstrap API.</description></item><item><title>Application-Level Service Discovery</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/service-discovery/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/service-discovery/</guid><description>Reference article &amp;ldquo;Dubbo takes an important step towards cloud native application-level service discovery analysis&amp;rdquo;
Reference repository: dubbo-go-samples/registry/serivcediscovery
Configuration Consumer side dubbo: registries: demoZK: protocol: nacos address: 127.0.0.1:8848 registry-type: service # Specify the registry as application-level service discovery, if not filled, it defaults to interface level metadata-report: # Define metadata center protocol: nacos # The metadata center can choose nacos/zk address: 127.0.0.1:8848 consumer: references: GreeterClientImpl: protocol: tri interface: com.apache.dubbo.sample.basic.IGreeter Provider side dubbo: registries: demoZK: protocol: nacos address: 127.</description></item><item><title>Basic Command Manual</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/qos/command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/qos/command/</guid><description>help command // list all commands dubbo&amp;gt;help //List the specific usage of a single command dubbo&amp;gt;help online +--------------+---------------------------------- ------------------------------------------------+ | COMMAND NAME | online | +--------------+---------------------------------- ------------------------------------------------+ | EXAMPLE | online dubbo | | | online xx.xx.xxx.service | +--------------+---------------------------------- ------------------------------------------------+ dubbo&amp;gt; version command Display the version number of the currently running Dubbo
dubbo&amp;gt;version dubbo version &amp;#34;3.0.10-SNAPSHOT&amp;#34; dubbo&amp;gt; quit command exit command state
dubbo&amp;gt;quit BYE! Connection closed by foreign host.</description></item><item><title>Call Intercept Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/filter/</guid><description>Expansion Description Service provider and service consumer call process interception. Most functions of Dubbo itself are implemented based on this extension point. Every time a remote method is executed, this interception will be executed. Please pay attention to the impact on performance.
agreement:
User-defined filters are by default after built-in filters. The special value default, indicating where the default extension point is inserted. For example: filter=&amp;quot;xxx,default,yyy&amp;quot;, means xxx is before the default filter, and yyy is after the default filter.</description></item><item><title>CLA Signing Guide</title><link>https://dubbo.apache.org/en/docs/contribution-guidelines/contributor/cla-signing-guide_dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/contribution-guidelines/contributor/cla-signing-guide_dev/</guid><description>You are required to sign the Apache ICLA under the following condition:
You have made lots of contribution to Dubbo before Dubbo get donated to Apache, and you haven&amp;rsquo;t sign the Alibaba-CLA before. You have made lots of contribution to Dubbo, and you are invited to become committer of Dubbo, and you have not signed Alibaba-CLA or Apache ICLA before. Steps Download this pdf Fill in the necessary blanks Print it out Sign the printed file Scan it Send an email to secretary@apache.</description></item><item><title>CLA 签署向导</title><link>https://dubbo.apache.org/en/latest/contribution-guidelines/contributor/cla-signing-guide_dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/latest/contribution-guidelines/contributor/cla-signing-guide_dev/</guid><description>以下情况，需要您签署 Apache ICLA：
在 Dubbo 被捐赠给 Apache 之前，您已经为 Dubbo 作出了很多贡献，并且您以前没有签署过 Alibaba-CLA。 您已经为 Dubbo 作出了很多贡献，并且您被邀请成为 Dubbo 提交者，且之前没有签署过 Alibaba-CLA 或者 Apache ICLA。 步骤 下载这篇 pdf 文档 编辑该文档，在必要的空格处填上适当的内容 打印 在打印好的文件上签字 扫描 发送一封邮件到secretary@apache.org，并抄送给private@dubbo.apache.org： 邮件标题为“ICLA submission” 请在邮件正文附上您的github账号链接 请记得将您的ICLA文档放入邮件的附件里 空格填写必要说明 Mailing address：首选英文格式的公司地址 preferred apache id(s)：如果您被邀请成为一名提交者，那么需要您填写一个apache账号，否则，可以不填 notify project：Dubbo（意思就是Dubbo就是通知您签署ICLA的项目）</description></item><item><title>Cluster Fault Tolerance</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/fault-tolerent-strategy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/fault-tolerent-strategy/</guid><description>When the cluster call fails, Dubbo provides a variety of fault tolerance schemes, and the default is failover retry.
Each node relationship:
Here Invoker is an abstraction of Provider that can call Service, Invoker encapsulates Provider address and Service interface information Directory represents multiple Invoker, which can be regarded as List&amp;lt;Invoker&amp;gt;, but different from List, its value may change dynamically, such as the registration center pushing changes Cluster disguises multiple Invoker in Directory as an Invoker, which is transparent to the upper layer.</description></item><item><title>Code Architecture</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/concepts-and-architecture/code-architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/concepts-and-architecture/code-architecture/</guid><description>overall design illustration:
The light blue background on the left in the figure is the interface used by the service consumer, the light green background on the right is the interface used by the service provider, and the interface on the central axis is the interface used by both parties. The figure is divided into ten layers from bottom to top. Each layer is one-way dependent. The black arrow on the right represents the dependency relationship between layers.</description></item><item><title>Complete an RPC call</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/quickstart/quickstart_triple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/quickstart/quickstart_triple/</guid><description>1. Generate Demo project Use the installed dubbogo-cli tool to create a demo project.
$ mkdir quickstart $ cd quickstart $ dubbogo-cli newDemo. $ tree . . ├── api │ ├── samples_api.pb.go │ ├── samples_api.proto │ └── samples_api_triple.pb.go ├── go-client │ ├── cmd │ │ └── client.go │ └── conf │ └── dubbogo.yaml ├── go-server │ ├── cmd │ │ └── server.go │ └── conf │ └── dubbogo.yaml └── go.mod You can see that the generated project contains a client project and a server project, as well as related configuration files.</description></item><item><title>The Configuration Design</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/principals/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/principals/configuration/</guid><description>http://javatar.iteye.com/blog/949527
Dubbo design is now completely unobtrusive, namely the user only depends on the configuration of contract.After multiple versions of the development, in order to meet the demand of various scenarios, configuration is more and more.In order to maintain compatibility with only grow, lurking inside all sorts of styles, convention, rules.The new version will also be configured for a adjustment, remove the dubbo, properties, instead of all the spring configuration.</description></item><item><title>Consumer Configuration</title><link>https://dubbo.apache.org/en/docs/v2.7/user/languages/erlang/reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/languages/erlang/reference/</guid><description>Base Config Consumer config is under the dubboerl application with sys.config
{dubboerl,[ %% other config ... {consumer,[ {&amp;lt;&amp;lt;&amp;#34;interface fullname&amp;#34;&amp;gt;&amp;gt;,[Option]}, %% eg: {&amp;lt;&amp;lt;&amp;#34;org.apache.dubbo.erlang.sample.service.facade.UserOperator&amp;#34;&amp;gt;&amp;gt;,[]}, ]} ]} Option is to be added.</description></item><item><title>Consumer configuration</title><link>https://dubbo.apache.org/en/docs/v3.0/languages/erlang/reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v3.0/languages/erlang/reference/</guid><description>Basic configuration Consumers need to add configuration items to sys.config file dubboerl filed.
{dubboerl,[ %% other config ... {consumer,[ {&amp;lt;&amp;lt;&amp;#34;interface fullname&amp;#34;&amp;gt;&amp;gt;,[Option]}, %% eg: {&amp;lt;&amp;lt;&amp;#34;org.apache.dubbo.erlang.sample.service.facade.UserOperator&amp;#34;&amp;gt;&amp;gt;,[]}, ]} ]} Option is to be added.</description></item><item><title>Consumer Thread Model</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/threading-model/consumer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/threading-model/consumer/</guid><description>The 2.7.5 version has fully optimized the entire call link. According to the pressure test results, the overall QPS performance has been improved by nearly 30%, and the memory allocation overhead during the call process has also been reduced. One of the design points worth mentioning is that 2.7.5 introduces the concept of Servicerepository, which generates ServiceDescriptor and MethodDescriptor in advance in the service registration phase to reduce resource consumption caused by calculating the original information of the Service in the RPC call phase.</description></item><item><title>Core Concepts</title><link>https://dubbo.apache.org/en/latest/facade-docs/what/core-concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/latest/facade-docs/what/core-concepts/</guid><description/></item><item><title>Current Limit Downgrade</title><link>https://dubbo.apache.org/en/overview/tasks/ecosystem/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/ecosystem/rate-limit/</guid><description>What is Sentinel With the popularity of microservices, the stability between services and services has become more and more important. Sentinel is a traffic management component for distributed, multilingual and heterogeneous service architectures. It mainly uses traffic as the entry point, from traffic routing, traffic control, traffic shaping, fuse downgrade, system adaptive overload protection, hotspot traffic protection, etc. dimensions to help developers ensure the stability of microservices.
1. Example architecture description Interface definition:</description></item><item><title>Debug Reference Documentation</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/mesh/mesh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/mesh/mesh/</guid><description>Pre-environment preparation docker environment kubernetes environment (docker desktop is recommended, with a graphical interface, and a small Kubernetes environment is embedded, and the following demonstration is also based on docker desktop) istio environment dubbo-samples code, the master branch is fine dubbo version &amp;gt;= 3.1.0 Build a Kubernetes environment Currently Dubbo only supports Mesh deployment in the Kubernetes environment, so you need to set up the Kubernetes environment before running and starting this example.</description></item><item><title>Install Demo Provider</title><link>https://dubbo.apache.org/en/docs/v2.7/admin/install/provider-demo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/admin/install/provider-demo/</guid><description>install:
$ git clone https://github.com/apache/dubbo.git $ cd dubbo/dubbo-demo/dubbo-demo-xml # run org.apache.dubbo.demo.provider.Application under dubbo-demo-xml-provider module # add -Djava.net.preferIPv4Stack=true if your IDE is Intellij Idea configuration:
# resources/spring/dubbo-provider.xml # change dubbo:registry to a real registry server address, zookeeper is recommended, for example: # &amp;lt;dubbo:registry address=&amp;#34;zookeeper://127.0.0.1:2181&amp;#34;/&amp;gt;</description></item><item><title>Deploy Dubbo-go application in Istio environment</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/deploy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/deploy/</guid><description>In this chapter, we will use the application template to quickly create a set of Dubbo-go Server and Client applications and deploy them in the Istio cluster; observe, debug and verify that service discovery and invocation are successful.
1. Preparations The dubbo-go cli tool and dependent tools have been installed, grpc_cli (for local debugging). The docker, helm, and kubectl environments have been installed. (arm machines need to support docker buildx) Task [istio environment deployment] completed 2.</description></item><item><title>Framework Design</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/design/</guid><description>Overall design Image description:
Left area with light blue background shows service consumer interfaces, Right area with light green background shows service provider interfaces, center area shows both side interfaces. The image is divided into 10 layers from the bottom to the top, and the layers are one-way dependence. The black arrow on the right represents the dependency between layers, and each layer can be stripped from the upper layer to be reused, the Service and Config layers are API, and the other layers are SPI.</description></item><item><title>2 - Develop microservice applications based on Dubbo API</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/api/</guid><description>Target Develop Dubbo-based microservices from scratch
Difficulty Low
Environmental requirements System: Windows, Linux, MacOS
JDK 8 and above (JDK17 is recommended)
Git
IntelliJ IDEA (optional)
Docker (optional)
Hands This chapter will teach you how to develop a microservice application from scratch through step-by-step tutorials.
1. Start the registration center For a microservice application, the registry is an indispensable component. Only through the registration center, the consumer can successfully discover the address information of the server, and then make a call.</description></item><item><title>Dubbo 3 Quick Facts</title><link>https://dubbo.apache.org/en/overview/what/dubbo3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/what/dubbo3/</guid><description>This article will take you to quickly understand the design background, overall architecture and core features of Dubbo3, and its relationship with typical users such as Alibaba HSF2, etc. You can also learn more in the following sections:
New users, take a quick look at the core features of Dubbo3: Next Generation Communication Protocol - Triple Secrets of a million-instance cluster - application-level service discovery Dubbo Mesh Dubbo3 compatibility and migration cost?</description></item><item><title>Dubbo protocol</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/dubbo/</guid><description>Feature description Dubbo&amp;rsquo;s default protocol uses a single long connection and NIO asynchronous communication, which is suitable for small data volume and large concurrent service calls, and the situation where the number of service consumer machines is much larger than the number of service provider machines.
Conversely, Dubbo&amp;rsquo;s default protocol is not suitable for services that transmit large amounts of data, such as file transfers, video transfers, etc., unless the request volume is very low.</description></item><item><title>Dubbogo 3.0 configuration center and configuration monitoring</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/config-center/config-center-dynamic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/config-center/config-center-dynamic/</guid><description>1. Configuration center concept The configuration center means that in a distributed scenario, the latest framework configuration files and applications cannot be bound together. You can specify the information of the configuration center, such as the type and address of the configuration center, and pull it from the configuration center when the framework starts Start the corresponding configuration.
2. Configuration of the configuration center Reference repository: dubbo-go-samples/configcenter
dubbogo.yml
dubbo: config-center: protocol: nacos address: 127.</description></item><item><title>Fault Tolerance Strategy</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/fault-tolerent-strategy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/fault-tolerent-strategy/</guid><description>Dubbo offers a variety of fault-tolerant scenarios when a cluster call fails, with a default failover retry.
The relationship between nodes:
This Invoker is the callable Service&amp;rsquo;s abstract of the Provider, and the Invoker packaging the Provider&amp;rsquo;s address and Service&amp;rsquo;s interface. The Directory represent multiple Invoker,You can think of it as List&amp;lt;Invoker&amp;gt;,But unlike List,its value can be dynamically changing.such as registry push changes The Cluster disguises multiple Invoker in Directory as a Invoker,The upper transparent, masquerade process contains fault-tolerant logic, call failed, try another The Router is responsible for selecting subsets according to routing rules from multiple Invokers, such as read-write separation, application isolation, etc.</description></item><item><title>Filter Extension</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/impls/filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/impls/filter/</guid><description>Summary Extension for intercepting the invocation for both service provider and consumer, furthermore, most of functions in dubbo are implemented base on the same mechanism. Since every time when remote method is invoked, the filter extensions will be executed too, the corresponding penalty should be considered before more filters are added.
Contract:
User defined filters are executed after built-in filters by default. Special value default is introduced to represent the default extension location.</description></item><item><title>Golang SDK</title><link>https://dubbo.apache.org/en/overview/mannual/golang/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/mannual/golang/</guid><description/></item><item><title>Graceful shutdown</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/graceful-shutdown/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/graceful-shutdown/</guid><description>Feature description Graceful shutdown means that the service instance can be stopped safely and smoothly without affecting the ongoing business. A Dubbo service may be both a service provider and a service consumer. When the service is stopped:
Consumers will no longer request stopped service instances The request being processed by the service instance can be processed normally scenes to be used Stop the service with kill PID Stop the service through /shutdown of SpringBoot Actuator Dubbo 3.</description></item><item><title>Grpc-based health check</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/health/triple-health-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/health/triple-health-check/</guid><description>1. Grpc health check The Grpc health check is implemented through an ordinary user rpc call. The Grpc health check defines the following protobuf, so that the intercommunication of all Grpc protocol health checks can be realized.
Firstly, since it is a GRPC service itself, doing a health check is in the same format as a normal rpc. Secondly, it has rich semantics such as per-service health status. Thirdly, as a GRPC service, it is able to reuse All the existing billing, quota infrastructure, etc, and thus the server has full control over the access of the health checking service.</description></item><item><title>Guide to Migrating Dubbo Protocol to Triple Protocol</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/upgrades-and-compatibility/migration-triple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/upgrades-and-compatibility/migration-triple/</guid><description>Triple Introduction For the format and principle of the Triple protocol, please refer to RPC Communication Protocol
According to the goals of Triple design, the Triple protocol has the following advantages:
Capable of cross-language interaction. Both the traditional multi-language and multi-SDK mode and the Mesh cross-language mode require a more general and scalable data transmission protocol. Provide a more complete request model. In addition to supporting the traditional Request/Response model (Unary one-way communication), it also supports Stream (streaming communication) and Bidirectional (two-way communication).</description></item><item><title>Instructions for Use</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/triple/guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/triple/guide/</guid><description>The Triple protocol is the main protocol of Dubbo3, fully compatible with gRPC over HTTP/2, and has expanded load balancing and flow control related mechanisms at the protocol level. This document is intended to guide users to use the Triple protocol correctly.
Before starting, you need to decide the serialization method used by the service. If it is a new service, it is recommended to use protobuf as the default serialization, which will have better performance and cross-language effects.</description></item><item><title>Dubbo Admin Introductions</title><link>https://dubbo.apache.org/en/docs/v2.7/admin/ops/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/admin/ops/introduction/</guid><description>Now version 0.1 has been released, frontend uses Vue and Vuetify as javascript framework and UI framework, backend uses spring framework, you can deploy the whole project with maven or deploy frontend and backend separately.
Deploy the whole project through maven install git clone https://github.com/apache/dubbo-admin.git cd dubbo-admin mvn clean package cd dubbo-admin-distribution/target java -jar dubbo-admin-0.1.jar visit
http://localhost:8080 Deploy frontend and backend separately frontend deploy cd dubbo-admin-ui npm install npm run dev backend deploy cd dubbo-admin-server mvn clean package cd target java -jar dubbo-admin-server-0.</description></item><item><title>Launching the Application Using the Configuration API</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/features/config_api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/features/config_api/</guid><description>1. Preparations dubbo-go cli tools and dependent tools have been installed Create a new demo application 2. Start the application using the configuration API Users do not need to use configuration files, and can directly write configurations in the code in the form of API calls
2.1 Modify the server code: func main() { config. SetProviderService(&amp;amp;GreeterProvider{}) protocolConfig := config. NewProtocolConfigBuilder(). SetPort(&amp;#34;20000&amp;#34;). SetName(&amp;#34;tri&amp;#34;). build() serviceConfig := config. NewServiceConfigBuilder(). SetInterface(&amp;#34;&amp;#34;). // read interface from pb build() providerConfig := config.</description></item><item><title>Multicast Registry</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/registry/multicast/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/registry/multicast/</guid><description>Multicast registry doesn&amp;rsquo;t require to setup any central node. Just like IP address broadcast, dubbo service providers and consumers can discover each other through this mechanism.
Service provider broadcasts its address when it boots up. Service consumer broadcasts its subscription request when it boots up. Once service provider receives subscription request, it unicasts its own address to the corresponding consumer, if unicast=false is set, then broadcast will be used instead. When service consumer receives provider&amp;rsquo;s address, it can start RPC invocation on the received address.</description></item><item><title>Nacos</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/metadata-center/nacos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/metadata-center/nacos/</guid><description>1 Preparations Understand Dubbo basic development steps Refer to Nacos Quick Start to start the Nacos server When Dubbo uses 3.0.0 and above, it needs to use Nacos 2.0.0 and above
2 Instructions for use The operation steps for Dubbo to integrate Nacos into a metadata center are very simple, roughly divided into two steps: adding Maven dependencies and configuring the metadata center.
If the metadata address (dubbo.metadata-report.address) is not configured, the address of the registration center will be used as the metadata center.</description></item><item><title>Deploying to Kubernetes</title><link>https://dubbo.apache.org/en/overview/tasks/kubernetes/deploy-on-k8s/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/kubernetes/deploy-on-k8s/</guid><description>You can follow the steps below to easily deploy the Dubbo service to the Kubernetes cluster. Check out the [full code sample address](https://github.com/apache/dubbo-samples/tree/master/3-extensions/registry /dubbo-samples-kubernetes)
1 Overall Objective Deploy Dubbo application to Kubernetes Realize service discovery based on Kubernetes built-in Service Connect Dubbo application to Kubernetes life cycle 2 Basic process Create a Dubbo Application ( dubbo-samples-kubernetes ) Build the container image and push it to the mirror warehouse ( dubbo-demo example image ) Deploy Dubbo Provider and Dubbo Consumer to Kubernetes respectively Verify that service discovery and calling are normal 3 detailed steps 3.</description></item><item><title>New Contributor Guide</title><link>https://dubbo.apache.org/en/docs/contribution-guidelines/contributor/new-contributor-guide_dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/contribution-guidelines/contributor/new-contributor-guide_dev/</guid><description>This is a guide for new comers who wants to contribute to Dubbo.
Subscribe to the mailing list The mailing list is the recommended way for discussing almost anything that related to Dubbo. Please refer to this issue for detailed documentation on how to subscribe.
To subscribe to the following mailing list, please refer to Mailing list subscription guide
dev@dubbo.apache.org: the develop mailing list, you can ask question here if you have encountered any problem when using or developing Dubbo.</description></item><item><title>Parameter Validation</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/parameter-validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/parameter-validation/</guid><description>Feature description The parameter verification function is implemented based on JSR303, users only need to identify the verification annotation of the JSR303 standard, and realize the verification by declaring the filter.
Maven dependencies &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;javax.validation&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;validation-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.0.GA&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.hibernate&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hibernate-validator&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.2.0.Final&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; scenes to be used When the server provides interface services to the outside, it solves various interface parameter verification problems.
Reference use case https://github.com/apache/dubbo-samples/tree/master/dubbo-samples-validation
How to use Parameter annotation example import java.</description></item><item><title>Pojo Serialization Compatibility Mode</title><link>https://dubbo.apache.org/en/overview/tasks/triple/wrap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/triple/wrap/</guid><description>This tutorial will build a simple project from scratch to demonstrate how to use Dubbo Triple based on POJO, and upgrade to the Triple protocol while the application does not change the existing interface definition. **In this mode, Triple is used in the same way as Dubbo protocol. **
For specific use cases, please refer to: [dubbo-samples-triple/pojo](https://github.com/apache/dubbo-samples/tree/master/3-extensions/protocol/dubbo-samples-triple/src/main/java /org/apache/dubbo/sample/tri/pojo);
precondition JDK version &amp;gt;= 8 Installed Maven Installed and started Zookeeper Create project First create an empty maven project</description></item><item><title>POJO way to use Triple</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/triple/pojo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/triple/pojo/</guid><description>This tutorial will demonstrate how to use Dubbo Triple based on POJO by building a simple project from scratch, and upgrade to the Triple protocol while the application does not change the existing interface definition.
Implementation principle Through the upgrade process described above, we can easily complete the upgrade by modifying the protocol type. How does the framework help us do this?
Through the introduction of the Triple protocol, we know that the data type of Triple in Dubbo3 is a protobuf object, so why non-protobuf java objects can also be transmitted normally.</description></item><item><title>Properties Configuration</title><link>https://dubbo.apache.org/en/docs/v2.7/user/configuration/properties/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/configuration/properties/</guid><description>If your application is simple enough, say, you do not need multi-registries or multi-protocols, and you want to share configuration among Spring containers. You can use dubbo.properties as default configuration.
Dubbo will load dubbo.properties under the root of classpath automatically, you can also specify the path for loading this file by using JVM parameter: -Ddubbo.properties.file=xxx.properties.
Mapping Rules Combine the tag name and attribute name of the XML tag, use . to split.</description></item><item><title>Protocol</title><link>https://dubbo.apache.org/en/overview/tasks/extensibility/protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/extensibility/protocol/</guid><description>Dubbo has implemented a lot of built-in functionalities through protocol extensions and also supports many commonly used protocols. You can see all custom protocols in the org.apache.dubbo.rpc.Protocol file. For example, in Dubbo 3, we have:
# Built-in functionalities implemented by Dubbo through protocol extension filter=org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper qos=org.apache.dubbo.qos.protocol.QosProtocolWrapper registry=org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol service-discovery-registry=org.apache.dubbo.registry.integration.RegistryProtocol listener=org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper mock=org.apache.dubbo.rpc.support.MockProtocol serializationwrapper=org.apache.dubbo.rpc.protocol.ProtocolSerializationWrapper securitywrapper=org.apache.dubbo.rpc.protocol.ProtocolSecurityWrapper # Commonly used protocols supported by Dubbo dubbo=org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol injvm=org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol rest=org.apache.dubbo.rpc.protocol.rest.RestProtocol grpc=org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol tri=org.apache.dubbo.rpc.protocol.tri.TripleProtocol As you can see, Dubbo has implemented a series of functionalities like filtering, monitoring, service discovery, listeners, mock, serialization, and security through protocol extensions.</description></item><item><title>Istio + Proxyless</title><link>https://dubbo.apache.org/en/overview/tasks/mesh/proxyless/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/mesh/proxyless/</guid><description>Proxyless mode means that Dubbo communicates directly with Istiod, and implements service discovery and service governance capabilities through the xDS protocol. In this example, a simple example will be used to demonstrate how to use the Proxyless mode.
Sample Address
code structure This section mainly introduces the code structure of the example used in this article. By imitating the relevant configuration in this example and modifying the existing project code, the existing project can quickly run in Proxyless Mesh mode.</description></item><item><title>Quick start</title><link>https://dubbo.apache.org/en/docs/v2.7/user/quick-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/quick-start/</guid><description>The most common way to use Dubbo is to run it in Spring framework. The following content will guide you to develop a Dubbo application with Spring framework&amp;rsquo;s XML configuration.
If you don&amp;rsquo;t want to rely on Spring, you can try using API configuration.
First let&amp;rsquo;s create a root directory called dubbo-demo:
mkdir dubbo-demo cd dubbo-demo Next, we are going to create 3 sub-directories under root directory:
dubbo-demo-api: the common service api dubbo-demo-provider: the demo provider codes dubbo-demo-consumer: the demo consumer codes Service provider Defining service interfaces DemoService.</description></item><item><title>Quick Start With Golang</title><link>https://dubbo.apache.org/en/overview/quickstart/go/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/quickstart/go/</guid><description/></item><item><title>Quick Start With Rust</title><link>https://dubbo.apache.org/en/overview/quickstart/rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/quickstart/rust/</guid><description/></item><item><title>Release Guide</title><link>https://dubbo.apache.org/en/docs/contribution-guidelines/committer/release-guide_dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/contribution-guidelines/committer/release-guide_dev/</guid><description>Understanding the Apache Release Cycle In general, Source Release is the key and the required content of Apache. But Binary Release is optional, Dubbo can choose whether to release binary packages to the Apache repository or to the Maven central repository.
Please refer to the following links for more information on ASF&amp;rsquo;s release guide:
Apache Release Guide Apache Release Policy Maven Release Info Preparation of Local Building Environment Mainly including the related preparation of signature utilities and Maven repository certification</description></item><item><title>rest protocol</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/rest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/rest/</guid><description>基于标准的Java REST API——JAX-RS 2.0（Java API for RESTful Web Services的简写）实现的REST调用支持
快速入门 在dubbo中开发一个REST风格的服务会比较简单，下面以一个注册用户的简单服务为例说明。
这个服务要实现的功能是提供如下URL（注：这个URL不是完全符合REST的风格，但是更简单实用）：
http://localhost:8080/users/register 而任何客户端都可以将包含用户信息的JSON字符串POST到以上URL来完成用户注册。
首先，开发服务的接口：
public class UserService { void registerUser(User user); } 然后，开发服务的实现：
@Path(&amp;#34;users&amp;#34;) public class UserServiceImpl implements UserService { @POST @Path(&amp;#34;register&amp;#34;) @Consumes({MediaType.APPLICATION_JSON}) public void registerUser(User user) { // save the user... } } 上面的实现非常简单，但是由于该 REST 服务是要发布到指定 URL 上，供任意语言的客户端甚至浏览器来访问，所以这里额外添加了几个 JAX-RS 的标准 annotation 来做相关的配置。
@Path(&amp;ldquo;users&amp;rdquo;)：指定访问UserService的URL相对路径是/users，即http://localhost:8080/users
@Path(&amp;ldquo;register&amp;rdquo;)：指定访问registerUser()方法的URL相对路径是/register，再结合上一个@Path为UserService指定的路径，则调用UserService.register()的完整路径为http://localhost:8080/users/register
@POST：指定访问registerUser()用HTTP POST方法
@Consumes({MediaType.APPLICATION_JSON})：指定registerUser()接收JSON格式的数据。REST框架会自动将JSON数据反序列化为User对象
最后，在spring配置文件中添加此服务，即完成所有服务开发工作：
&amp;lt;!-- 用rest协议在8080端口暴露服务 --&amp;gt; &amp;lt;dubbo:protocol name=&amp;#34;rest&amp;#34; port=&amp;#34;8080&amp;#34;/&amp;gt; &amp;lt;!-- 声明需要暴露的服务接口 --&amp;gt; &amp;lt;dubbo:service interface=&amp;#34;xxx.</description></item><item><title>Routing Status Collection</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/router-snapshot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/router-snapshot/</guid><description>Function Description scenes to be used Many of Dubbo&amp;rsquo;s traffic management capabilities are implemented based on Router. In a production environment, if traffic results do not meet expectations, you can use the routing status command to check the routing status to locate possible problems.
How to use View route cache status When Dubbo receives the address change, it will push the address information to all Routers, and these Routers can calculate the routing packets in advance at this stage and cache them to avoid the need to traverse all provider calculations when calling grouping parameters.</description></item><item><title>RPC Protocol Security</title><link>https://dubbo.apache.org/en/overview/notices/protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/notices/protocol/</guid><description>Dubbo supports the extension of the RPC protocol. In theory, users can enable any RPC protocol based on this extension mechanism. This brings great flexibility, but at the same time, users must be aware of the hidden security risks.
The serialization protocols provided by the official version of Dubbo 2.7 are as follows:
Dubbo RMI Hessian Http/Rest Webservice Thrift gRPC … Starting from Dubbo 3.0, only the following serialization protocol support is provided by default:</description></item><item><title>Rust and Java interoperability</title><link>https://dubbo.apache.org/en/docs3-v2/rust-sdk/java-interoperability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/rust-sdk/java-interoperability/</guid><description>1 Prerequisite Install Rust development environment. Install protoc. Install Java development environment. 2 Run example of Java Dubbo provider Java version of Dubbo provider example https://github.com/apache/dubbo-samples/tree/master/3-extensions/protocol/dubbo-samples-triple.
Clone the source code, compile, and run provider:
$ # clone the source code $ git clone https://github.com/apache/dubbo-samples.git $ cd dubbo-samples/dubbo-samples-triple/ $ # compile and build $ mvn clean compile package -DskipTests $ # run provider $ java -Dprovider.port=8888 -jar ./target/dubbo-samples-triple-1.0-SNAPSHOT.jar # … some logs Dubbo triple stub server started, port=8888 The interface defination on Java side</description></item><item><title>Service Group</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/service-group/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/service-group/</guid><description>Feature description The same interface can use service grouping to distinguish different implementation methods for different business scenarios, different usage requirements, or different functional modules. At the same time, the services provided by these different implementations can coexist and support mutual calls.
scenes to be used When an interface has multiple implementations, it can be distinguished by group.
Reference use case https://github.com/apache/dubbo-samples/tree/master/dubbo-samples-group
How to use Annotation configuration Service provider (annotation configuration) Use @DubboService annotation, add group parameter</description></item><item><title>Service Reference Configuration Object Cache</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/reference-config-cache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/reference-config-cache/</guid><description>Feature description The ReferenceConfig instance is heavy, encapsulates the connection to the registry and the connection to the provider, and needs to be cached. Otherwise repeatedly generating ReferenceConfig may cause performance problems and have memory and connection leaks. It&amp;rsquo;s easy to overlook this problem when programming in the API way.
Therefore, since 2.4.0 version, dubbo provides a simple tool class ReferenceConfigCache for caching ReferenceConfig instances.
scenes to be used There are scenarios such as gateways that dynamically create subscriptions.</description></item><item><title>Tracing</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/observability/tracing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/observability/tracing/</guid><description>Overview Apache Dubbo has inbuilt tracing through Micrometer Observations and Micrometer Tracing.
1. Adding Micrometer Observation To Your Project In order to add Micrometer to the classpath and add metrics for Dubbo you need to add the dubbo-metrics-api dependency as shown below:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.dubbo&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;dubbo-metrics-api&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; Thanks to the usage of Micrometer Observations Dubbo got instrumented once, but depending on the setup will allow emission of metrics, tracer or other signals via custom ObservationHandlers.</description></item><item><title>Guide to Migrating Dubbo Protocol to Triple Protocol</title><link>https://dubbo.apache.org/en/overview/tasks/migration/migration-triple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/migration/migration-triple/</guid><description>Triple Introduction For the format and principle of the Triple protocol, please refer to RPC Communication Protocol
According to the goals of Triple design, the Triple protocol has the following advantages:
Capable of cross-language interaction. Both the traditional multi-language and multi-SDK mode and the Mesh cross-language mode require a more general and scalable data transmission protocol. Provide a more complete request model. In addition to supporting the traditional Request/Response model (Unary one-way communication), it also supports Stream (streaming communication) and Bidirectional (two-way communication).</description></item><item><title>Use dubbogo-cli tool</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/refer/use_dubbogo_cli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/refer/use_dubbogo_cli/</guid><description>1. Installation dubbogo-cli is a sub-project of the Apache/dubbo-go ecosystem, which provides developers with convenient functions such as application template creation, tool installation, and interface debugging to improve user R&amp;amp;D efficiency.
Execute the following command to install dubbogo-cli to $GOPATH/bin
go install github.com/dubbogo/dubbogo-cli@latest 2. Function overview dubbogo-cli supports the following capabilities
Application template creation
dubbogo-cli newApp. Create an application template in the current directory
Demo creation
dubbogo-cli newDemo. Create an RPC example in the current directory, including a client and a server</description></item><item><title>Using Triple in IDL</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/triple/idl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/triple/idl/</guid><description>This tutorial will demonstrate how to use Dubbo Triple based on IDL by building a simple project from scratch
precondition JDK version &amp;gt;= 8 Installed Maven Installed and started Zookeeper Create project 1. Create an empty maven project $ mvn archetype:generate \ -DgroupId=org.apache.dubbo\ -DartifactId=tri-stub-demo \ -DarchetypeArtifactId=maven-archetype-quickstart \ -DarchetypeVersion=1.4 \ -DarchetypeGroupId=org.apache.maven.archetypes \ -Dversion=1.0-SNAPSHOT 2. Switch to the project directory $ cd tri-stub-demo 3. Add Dubbo dependencies and plugins Set JDK version in pom.</description></item><item><title>Zookeeper</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config-center/zookeeper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config-center/zookeeper/</guid><description>1 precondition Understand Dubbo basic development steps Install and start Zookeeper 2 Instructions for use View full sample code here
2.1 Add Maven dependency If the project has enabled Zookeeper as the registry, no additional configuration is required.
If the Zookeeper registry is not used, please refer to Add Zookeeper-related dependencies for the registry.
2.2 Enable Zookeeper Configuration Center &amp;lt;dubbo:config-center address=&amp;#34;zookeeper://127.0.0.1:2181&amp;#34;/&amp;gt; or
dubbo config-center address: zookeeper://127.0.0.1:2181 or
dubbo.config-center.address=zookeeper://127.0.0.1:2181 or
ConfigCenterConfig configCenter = new ConfigCenterConfig(); configCenter.</description></item><item><title>如何准备 Apache Release</title><link>https://dubbo.apache.org/en/latest/contribution-guidelines/committer/release-guide_dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/latest/contribution-guidelines/committer/release-guide_dev/</guid><description>理解 Apache 发布的内容和流程 总的来说，Source Release 是 Apache 关注的重点，也是发布的必须内容；而 Binary Release 是可选项，Dubbo 可以选择是否发布二进制包到 Apache 仓库或者发布到 Maven 中央仓库。
请参考以下链接，找到更多关于 ASF 的发布指南:
Apache Release Guide Apache Release Policy Maven Release Info 本地构建环境准备 主要包括签名工具、Maven 仓库认证相关准备
安装GPG 详细文档请参见这里, Mac OS 下配置如下
$ brew install gpg $ gpg --version #检查版本，应该为2.x 用gpg生成key 根据提示，生成 key
$ gpg --full-gen-key gpg (GnuPG) 2.0.12; Copyright (C) 2009 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it.</description></item><item><title>新贡献者向导</title><link>https://dubbo.apache.org/en/latest/contribution-guidelines/contributor/new-contributor-guide_dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/latest/contribution-guidelines/contributor/new-contributor-guide_dev/</guid><description>这篇向导旨在给正在准备向 Dubbo 提交贡献的新手提供指导。
邮件列表描述 邮件列表是 Dubbo 官方推荐的讨论方式，所有与 Dubbo 相关的内容都可以在这里讨论，请点击 issue 了解更多关于邮件列表订阅的内容
如需订阅如下邮件列表，请参考 邮件列表订阅向导
dev@dubbo.apache.org：开发邮件列表，您在使用或者开发 Dubbo 的过程中遇到的任何问题，都可以在这里进行提问。 commits@dubbo.apache.org：所有的提交内容都会推送到这个邮件列表，如果您对 Dubbo 的进展感兴趣，可以订阅这个邮件列表。 issues@dubbo.apache.org：所有的 JIRA issues 和修改信息都会推送到这个邮件列表。Dubbo 社区已经决定使用 github issues 代替 JIRA issues，因此大部分 issues 将由 github issues 进行跟踪。JIRA issues 用于跟踪 ASF 相关问题。 报告问题 贡献代码 贡献流程 此贡献流程适用于所有的Apache Dubbo社区内容，包括但不限于dubbo(主干仓库)、dubbo admin、dubbo website。
以下以贡献dubbo(主干仓库)为例，详细说明贡献流程。
1. fork Apache/Dubbo 项目到您的github帐号下 2. 克隆您fork的Dubbo代码仓库到您本地 git clone ${your fork dubbo repo address，for example：https://github.com/${your github id}/dubbo.git} cd dubbo 3. 添加Apache/Dubbo仓库为upstream仓库 git remote add upstream https://github.</description></item><item><title>0-3 - Unable to access cache path</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/3/</guid><description>Other modules reuse the file-based caching mechanism of the Common layer (currently the metadata module), and the file caching mechanism of the Common layer cannot access the directory it specifies.
2022-08-29 00:35:00,189 ERROR [org.apache.dubbo.common.cache.FileCacheStoreFactory:?] - [DUBBO] Cache store path can&amp;#39;t be created: , dubbo version: , current host: 10.0.1.1 , error code: 0-3. This may be caused by inaccessible of cache path, go to https://dubbo.apache.org/faq/0/3 to find instructions. java.nio.file.FileAlreadyExistsException: [Path] at java.</description></item><item><title>1-3 - URL destruction failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/3/</guid><description>Possible Reason When FrameworkExecutorRepository is destroyed, calling CacheableFailbackRegistry.evictURLCache will cause the destruction to fail and generate an error code.
Troubleshooting and resolution steps See also the Configuration Items Reference Manual</description></item><item><title>2-3 - Routing shutdown failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/3/</guid><description>Possible Reason User-defined routes are not written according to the specification. Troubleshooting and resolution steps Refer to the community SPI extension manual to check user-defined routes, &amp;ldquo;SPI Extension User Manual&amp;rdquo;.</description></item><item><title>3-3 - Failed to generate bytecode via Javassist</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/3/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/3/3/</guid><description>Reminder The meaning of this error code has been adjusted. If you are looking for information of this error code in Dubbo versions prior than (or equal) 3.1.4 or 3.2.0-beta.3, head to 3-8.
(This error code is currently absent.)</description></item><item><title>3.1 upgrade to 3.2</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/upgrades-and-compatibility/3.1-to-3.2-compatibility-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/upgrades-and-compatibility/3.1-to-3.2-compatibility-guide/</guid><description>For the vast majority of users, upgrading to Dubbo 3.2.0 is completely smooth, and only needs to modify the version of the dependent package.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.dubbo&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;dubbo&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.2.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; or
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.dubbo&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;dubbo-spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.2.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Compatibility CheckList 1. Serialization check mode (important!!!) In Dubbo 3.2.0 version, Dubbo will enable the strong verification of the serialized whitelist by default to improve the security of Dubbo and avoid the problem of remote command execution.</description></item><item><title>4-3 - Interface reference call failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/3/</guid><description>Possible Reason No exposed service interface or method was found based on the specified protocol parameter.
Troubleshooting and resolution steps You can confirm whether the server exists according to the interface URL and method name.</description></item><item><title>5-3 - An unexpected error occurred while destroying a method call</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/3/</guid><description>Possible Reason There is an exception in the business processing of the custom destruction method.
Troubleshooting and resolution steps Check the custom destruction method and business processing logic for runtime exceptions.</description></item><item><title>6-3 - Failed to close network connection</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/3/</guid><description>Network connection close failed
Possible Reason Non-graceful shutdown of the service. At this time, the server may not complete the external output stream.
Troubleshooting and resolution steps Generally, it is a prompt warning message, which does not affect subsequent program execution.</description></item><item><title>7-3 - Set warning percentage value for timeout</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/7/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/7/3/</guid><description>Possible Reason The warning percentage value of QOS setting timeout time, the default is 0.75. After modification, the console prints this message.
Troubleshooting and resolution steps Please refer to QOS Operation Manual Performance Sampling Command.</description></item><item><title>Annotation configuration</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config/annotation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config/annotation/</guid><description>This article uses the Spring Boot + Annotation mode to describe Dubbo application development. Check out the Spring Annotation development mode without Spring Boot here [complete example](https://github.com/apache/dubbo-samples/tree/master/1-basic/ dubbo-samples-annotation)
In Dubbo Spring Boot development, you only need to add a few annotations and configure the application.properties or application.yml file to complete the Dubbo service definition:
Annotations include @DubboService, @DubboReference and EnableDubbo. Among them, @DubboService and @DubboReference are used to mark Dubbo services, and EnableDubbo starts Dubbo-related configuration and specifies the Spring Boot scanning package path.</description></item><item><title>API Configuration</title><link>https://dubbo.apache.org/en/docs/v2.7/user/configuration/api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/configuration/api/</guid><description>All API properties have counterparts in XML, see XML References for details. For example ApplicationConfig.setName(&amp;quot;xxx&amp;quot;) equals to &amp;lt;dubbo:application name=&amp;quot;xxx&amp;quot; /&amp;gt; 1
Provider Side import org.apache.dubbo.rpc.config.ApplicationConfig; import org.apache.dubbo.rpc.config.RegistryConfig; import org.apache.dubbo.rpc.config.ProviderConfig; import org.apache.dubbo.rpc.config.ServiceConfig; import com.xxx.XxxService; import com.xxx.XxxServiceImpl; // Implementation XxxService xxxService = new XxxServiceImpl(); // Application Info ApplicationConfig application = new ApplicationConfig(); application.setName(&amp;#34;xxx&amp;#34;); // Registry Info RegistryConfig registry = new RegistryConfig(); registry.setAddress(&amp;#34;10.20.130.230:9090&amp;#34;); registry.setUsername(&amp;#34;aaa&amp;#34;); registry.setPassword(&amp;#34;bbb&amp;#34;); // Protocol ProtocolConfig protocol = new ProtocolConfig(); protocol.</description></item><item><title>Architecture</title><link>https://dubbo.apache.org/en/docs/v2.7/user/preface/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/preface/architecture/</guid><description>Specification of Node&amp;rsquo;s Role Node Role Spec Provider The provider exposes remote services Consumer The consumer calls the remote services Registry The registry is responsible for service discovery and configuration Monitor The monitor counts the number of service invocations and time-consuming Container The container manages the services&amp;rsquo;s lifetime Service relationship Container is responsible for launching, loading, and running the service Provider. Provider registers its services to Register at the time it starts.</description></item><item><title>Architecture</title><link>https://dubbo.apache.org/en/overview/what/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/what/architecture/</guid><description>RPC communication Dubbo3&amp;rsquo;s Triple protocol is built on the HTTP/2 protocol, so it has better penetration and versatility. The Triple protocol is compatible with gRPC and provides communication models such as Request Response, Request Streaming, Response Streaming, and Bi-directional Streaming; from Triple Starting from the agreement, Dubbo also supports IDL-based service definition.
In addition, Dubbo also integrates most of the industry&amp;rsquo;s mainstream protocols, allowing users to use these communication protocols within the Dubbo framework, providing users with a unified programming model and service governance model, these protocols include rest, hessian2, jsonrpc, thrift, etc.</description></item><item><title>Asynchronous call</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/async-call/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/async-call/</guid><description>Feature description background Starting from 2.7.0, all asynchronous programming interfaces of Dubbo are based on CompletableFuture
Based on NIO&amp;rsquo;s non-blocking implementation of parallel calls, the client does not need to start multi-threads to complete parallel calls to multiple remote services, and the overhead of multi-threading is relatively small.
Reference use case https://github.com/apache/dubbo-samples/tree/master/dubbo-samples-async
scenes to be used Send the user request content to the target request. When the target request encounters high traffic or needs to be processed for a long time, the asynchronous call function will allow the response to be returned to the user immediately, while the target request continues to process the request in the background.</description></item><item><title>Complete an RPC call (the version that defines the interface yourself)</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/quickstart/quickstart_triple_with_customize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/quickstart/quickstart_triple_with_customize/</guid><description>1 Overview In this chapter, we will implement a simple small requirement and implement a distributed ID generation service through which distributed IDs can be obtained (Assuming a distributed ID, we will not discuss the ID generation scheme and algorithm, here we directly use uuid instead, just to demonstrate the creation of custom services)
2. Server implementation First use dubbogo-cli to create IDC service
dubbogo-cli newApp IDC cd IDC tree. .</description></item><item><title>Custom Filter component</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/features/custom-filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/features/custom-filter/</guid><description>Refer to samples dubbo-go-samples/filter
1. Filter concept // Filter interface defines the functions of a filter // Extension - Filter type Filter interface { // Invoke is the core function of a filter, it determines the process of the filter Invoke(context.Context, protocol.Invoker, protocol.Invocation) protocol.Result // OnResponse updates the results from Invoke and then returns the modified results. OnResponse(context.Context, protocol.Result, protocol.Invoker, protocol.Invocation) protocol.Result } Filter can be loaded on the Consumer side or the Provider side.</description></item><item><title>Install Demo Consumer</title><link>https://dubbo.apache.org/en/docs/v2.7/admin/install/consumer-demo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/admin/install/consumer-demo/</guid><description>Install:
$ git clone https://github.com/apache/dubbo.git $ cd dubbo/dubbo-demo/dubbo-demo-xml # run org.apache.dubbo.demo.consumer.Application under dubbo-demo-xml-consumer module # please start Provider first # add -Djava.net.preferIPv4Stack=true if your IDE is Intellij Idea Configuration:
# resources/spring/dubbo-consumer.xml # change dubbo:registry to the real registry center address, for example: # &amp;lt;dubbo:registry address=&amp;#34;zookeeper://127.0.0.1:2181&amp;#34;/&amp;gt;</description></item><item><title>Dependencies</title><link>https://dubbo.apache.org/en/docs/v2.7/user/dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/dependencies/</guid><description>Necessary dependencies JDK 1.6+ 1
Default dependencies use mvn dependency:tree &amp;gt; dep.log command to analysis，Dubbo default depends on the following 3rd party libraries：
[INFO] +- com.alibaba:dubbo:jar:2.5.9-SNAPSHOT:compile [INFO] | +- org.springframework:spring-context:jar:4.3.10.RELEASE:compile [INFO] | +- org.javassist:javassist:jar:3.21.0-GA:compile [INFO] | \- org.jboss.netty:netty:jar:3.2.5.Final:compile All dependencies here are selected for the default configuration of the Dubbo, which are based on stability and performance considerations.
javassist.jar 2: if &amp;lt;dubbo:provider proxy=&amp;quot;jdk&amp;quot; /&amp;gt; or &amp;lt;dubbo:consumer proxy=&amp;quot;jdk&amp;quot; /&amp;gt;，or &amp;lt;dubbo:application compiler=&amp;quot;jdk&amp;quot; /&amp;gt;， is not required.</description></item><item><title>Dubbo Ecosystem</title><link>https://dubbo.apache.org/en/latest/facade-docs/what/ecosystem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/latest/facade-docs/what/ecosystem/</guid><description/></item><item><title>3 - Dubbo x Spring Boot to develop microservice applications</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/spring-boot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/spring-boot/</guid><description>Target Start from scratch to develop microservices based on Dubbo x Spring Boot, and understand the configuration method of Dubbo x Spring Boot.
Difficulty Low
Environmental requirements System: Windows, Linux, MacOS
JDK 8 and above (JDK17 is recommended)
Git
IntelliJ IDEA (optional)
Docker (optional)
Project Introduction In this task, it will be divided into three sub-modules for independent development, simulating the deployment architecture in the production environment.
.//apache/dubbo-samples/1-basic/dubbo-samples-spring-boot ├── dubbo-samples-spring-boot-interface // shared API module ├── dubbo-samples-spring-boot-consumer // consumer module └── dubbo-samples-spring-boot-provider // server module As shown above, there are 3 modules in total, among which the interface module is jointly dependent by the consumer and provider modules, and stores the API interface used by RPC communication.</description></item><item><title>Dubbogo Ecological Components</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/refer/ecology/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/refer/ecology/</guid><description>Dubbo-go / Dubbo-go 3.0 github.com/apache/dubbo-go
Apache Dubbo is implemented in Go language, which bridges between Java and Golang.
Dubbo-go-pixiu github.com/apache/dubbo-go-pixiu
dubbo-go-pixiu gateway supports calling dubbo/dubbo-go clusters with dubbo protocol and http protocol
Dubbo-getty github.com/apache/dubbo-getty
dubbo-getty is an asynchronous network io library in Go language that supports tcp/udp/websocket protocols.
Dubbo-go-hessian2 github.com/apache/dubbo-go-hessian2
Dubbo-go-hessian2 is a Go language hessian2 serialization protocol library
Dubbogo-tools github.com/dubbogo/tools
Dubbogo-tools includes
dubbo-cli tool imports-formatter Go language imports block formatter protoc-gen-triple PB compilation plugin protoc-gen-dubbo3grpc PB compilation plugin Triple-go github.</description></item><item><title> "Fool-proof" Design</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/principals/dummy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/principals/dummy/</guid><description>http://javatar.iteye.com/blog/804187
Recently I was feeling stupid because I solved too many stupid problems. The service framework is becoming more widely used. Every day, I have to help the endpoint user to resolve problems. Gradually, it is found that most of the problems are configuration errors, or duplicated files or classes, or network failure. So I prepare to add some &amp;ldquo;fool-proof&amp;rdquo; design to the further version. It may be very simple, but it is still a little help for troubleshooting speed.</description></item><item><title>Host Address Custom Exposure</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/set-host/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/set-host/</guid><description>Feature description In Dubbo, Provider mainly does two things when it starts
One is to start the server The second is to register the service with the registration center. When starting the server, the socket needs to be bound, and when the service is registered with the registration center, the unique service address of the socket needs to be sent. What is the default host when host is not set in dubbo?</description></item><item><title>http protocol</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/http/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/http/</guid><description>Dubbo http protocol is base on HTTP form and Spring&amp;rsquo;s HttpInvoker
Features Number of connections: multiple connections Connection: short connection Transmission protocol: HTTP Transmission: synchronous transmission Serialization: form serialization Scope of application: Available browser view, the form or URL can be passed parameters, Temporary files are not supported. Applicable scenarios: Services that need to be available to both application and browser Constraint Parameters and return values must be consistent with Bean specifications Configuration configure http protocol：</description></item><item><title>InvokerListener Extension</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/impls/invoker-listener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/impls/invoker-listener/</guid><description>Summary Fire event when there&amp;rsquo;s any service referenced.
Extension Interface org.apache.dubbo.rpc.InvokerListener
Extension Configuration &amp;lt;!-- 引用服务监听 --&amp;gt; &amp;lt;!-- service reference listener --&amp;gt; &amp;lt;dubbo:reference listener=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- default service reference listener --&amp;gt; &amp;lt;dubbo:consumer listener=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; Existing Extension org.apache.dubbo.rpc.listener.DeprecatedInvokerListener
Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxInvokerListener.java (InvokerListener implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.InvokerListener (plain text file with the content: xxx=com.xxx.XxxInvokerListener) XxxInvokerListener.java：
package com.xxx; import org.apache.dubbo.rpc.InvokerListener; import org.apache.dubbo.rpc.Invoker; import org.apache.dubbo.rpc.RpcException; public class XxxInvokerListener implements InvokerListener { public void referred(Invoker&amp;lt;?</description></item><item><title>Label an Issue</title><link>https://dubbo.apache.org/en/docs/contribution-guidelines/committer/label-an-issue-guide_dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/contribution-guidelines/committer/label-an-issue-guide_dev/</guid><description>If you are handling an issue, remember to mark the issue cearly with one or more labels whenever you think it&amp;rsquo;s meaningful. With labels on, other developers can easily recognize problems, classify them or track progress.
For issues or pull requests that need coding and further version release to fix, you should always mark it with a milestone.
Some frequently used labels:
Help Wanted
help wanted good first issue Prority</description></item><item><title>Load Balance</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/loadbalance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/loadbalance/</guid><description>Dubbo offers a number of balancing strategies for cluster load balancing, which defaults to random.
You can extend the load balancing strategy by yourself, see: LoadBalance extension
LoadBalance strategy Random LoadBalance Ramdom, set random probabilities by weight. The probability of collisions on one section is high, but the larger the amount of calls, the more uniform the distribution. And when use weight based on probability the distribution turns out to be uniform, which also helps to dynamically adjust the provider weights.</description></item><item><title>Load Balancing</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/loadbalance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/loadbalance/</guid><description>When cluster load balancing, Dubbo provides a variety of balancing strategies, the default is random random calls.
In terms of specific implementation, Dubbo provides client load balancing, that is, the Consumer uses the load balancing algorithm to determine which Provider instance to submit the request to.
You can expand the load balancing strategy by yourself, see: Load Balance Extension
load balancing strategy Currently Dubbo has the following built-in load balancing algorithms, which users can directly configure and use:</description></item><item><title>Logging</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/observability/logging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/observability/logging/</guid><description/></item><item><title>Mailing List Subscription Guide</title><link>https://dubbo.apache.org/en/docs/contribution-guidelines/contributor/mailing-list-subscription-guide_dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/contribution-guidelines/contributor/mailing-list-subscription-guide_dev/</guid><description>The Dubbo developer mailing list (dev@dubbo.apache.org) for Apache Incubator has been established, please feel free to subscribe and refer to [^1] for more details.
You can also view the archive of the mailing list
Here is a brief guide specific to Dubbo:
Send an email to dev-subscribe@dubbo.apache.org, you can have empty subject and empty content. You will receive an email with the following content: from: dev-help@dubbo.apache.org reply-to: dev-sc.xxxxxxx.xxxxxxxx-hello=example.com@dubbo.apache.org to: hello@example.com date: Sat, Feb 24, 2018 at 3:12 PM subject: confirm subscribe to dev@dubbo.</description></item><item><title>Nacos</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config-center/nacos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config-center/nacos/</guid><description>1 precondition Understand Dubbo basic development steps Install and start Nacos When Dubbo uses 3.0.0 and above, it needs to use Nacos 2.0.0 and above.
2 Instructions for use 2.1 Add Maven dependency If the project has enabled Nacos as the registration center, no additional configuration is required.
If the Nacos registry is not enabled, please refer to [Adding Nacos dependencies to the registry](../../registry/nacos/#21-Add dependencies).
2.2 Enable Nacos Configuration Center &amp;lt;dubbo:config-center address=&amp;#34;nacos://127.</description></item><item><title>Network Protocol</title><link>https://dubbo.apache.org/en/docs3-v2/rust-sdk/protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/rust-sdk/protocol/</guid><description/></item><item><title>New Features of Dubbo-go 3.0</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/3.0_feature/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/3.0_feature/</guid><description>1. Triple protocol 1.1 Overview communication level
The Triple protocol, also known as the Dubbo3 protocol, is an extension protocol based on the HTTP2 + gRPC protocol, adding specific fields and logic, ensuring interoperability with the native gRPC protocol. On this basis, Triple&amp;rsquo;s new protocol will more natively support Dubbo service governance capabilities. And supports streaming RPC calls.
In simple terms, it can be understood as Triple = gRPC + Dubbo</description></item><item><title>Provider Configuration</title><link>https://dubbo.apache.org/en/docs/v2.7/user/languages/erlang/service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/languages/erlang/service/</guid><description>Base Config Provider config is under the dubboerl application with sys.config
{dubboerl,[ %% other config ... {provider,[ {module_implements,interface_module,interface_fullname,[Options]}, %% eg: {userOperator_impl,userOperator,&amp;lt;&amp;lt;&amp;#34;org.apache.dubbo.erlang.sample.service.facade.UserOperator&amp;#34;&amp;gt;&amp;gt;,[Option]} ]} ]} ConfigName Type DefaultValue Remarks module_implements atom() - The service implements module name interface_module atom() - Interface module name is transfer form java jar interface_fullname binary() - Interface full name is the java class name Option is to be added.</description></item><item><title>Provider configuration</title><link>https://dubbo.apache.org/en/docs/v3.0/languages/erlang/service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v3.0/languages/erlang/service/</guid><description>basic configuration Provider configuration items to add to the sys.config file dubboerl field
{dubboerl,[ %% other config ... {provider,[ {module_implements,interface_module,interface_fullname,[Options]}, %% eg: {userOperator_impl,userOperator,&amp;lt;&amp;lt;&amp;#34;org.apache.dubbo.erlang.sample.service.facade.UserOperator&amp;#34;&amp;gt;&amp;gt;,[Option]} ]} ]} ConfigName Type DefaultValue Remarks module_implements atom() - The service implements module name interface_module atom() - Interface module name is transfer form java jar interface_fullname binary() - Interface full name is the java class name Option is to be added.</description></item><item><title>Quick Start</title><link>https://dubbo.apache.org/en/latest/facade-docs/how/quick-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/latest/facade-docs/how/quick-start/</guid><description>Quick start Dubbo Java SDK
Quick start Dubbo Golang SDK</description></item><item><title>Redis Registry Server</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/registry/redis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/registry/redis/</guid><description>Redis Registry Server It is a registry server implementation 1 based on redis 2.
Use key/map structure in redis to save the registration info:
Main key for service name and type Key in the map is URL address Value in the map is the expiration time. Monitor center uses it to track and remove dirty data 3 Publish/Subscribe events in redis is leveraged for data change notification:
Distinguish event type with event&amp;rsquo;s value: register, unregister, subscribe, unsubscribe.</description></item><item><title>Reference Listener Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/invoker-listener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/invoker-listener/</guid><description>Expansion Description This event is triggered when there is a service reference.
Extension ports org.apache.dubbo.rpc.InvokerListener
Extended configuration &amp;lt;!-- Reference service listener --&amp;gt; &amp;lt;dubbo:reference listener=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- Reference service default listener --&amp;gt; &amp;lt;dubbo:consumer listener=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.rpc.listener.DeprecatedInvokerListener
Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxInvokerListener.java (implements the InvokerListener interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.InvokerListener (plain text file, content: xxx=com.xxx.XxxInvokerListener) XxxInvokerListener.java:
package com.xxx; import org.apache.dubbo.rpc.InvokerListener; import org.apache.dubbo.rpc.Invoker; import org.apache.dubbo.rpc.RpcException; public class XxxInvokerListener implements InvokerListener { public void referred(Invoker&amp;lt;?</description></item><item><title>Registration Center Security</title><link>https://dubbo.apache.org/en/overview/notices/registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/notices/registry/</guid><description>Dubbo supports the extension of the registration center. In theory, users can enable any registration center based on this extension mechanism. This brings great flexibility, but at the same time, users must be aware of the hidden security risks.
The official version of Dubbo 2.7 provides the following registration centers:
Zookeeper Redis Nacos Etcd Consul &amp;hellip; Starting from Dubbo 3.0, only the following registration centers are supported by default:
Zookeeper Nacos For the registration center, Dubbo can only fully trust the data pushed by it.</description></item><item><title>Registration Information Simplified</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/simplify-registry-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/simplify-registry-data/</guid><description>Feature description There are nearly 30 configuration items in the service configuration items in Dubbo provider. Excluding the need for registry service governance, a large part of configuration items are used by the provider itself and do not need to be transparently passed to consumers. This part of data does not need to enter the registry, but only needs to be stored persistently in the form of key-value.
The configuration items in Dubbo consumer also have 20+ configuration items.</description></item><item><title>Registry</title><link>https://dubbo.apache.org/en/overview/tasks/extensibility/registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/extensibility/registry/</guid><description/></item><item><title>Remote loading configuration start</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/config-center/remote_config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/config-center/remote_config/</guid><description>Remote loading configuration start 1. Preparations dubbo-go cli tools and dependent tools have been installed Create a new demo application Start a Nacos instance locally/remotely, and log in to the console 2. Create a configuration in the configuration center The Dubbogo service framework supports pre-putting the content of the configuration file &amp;lsquo;dubbogo.yaml&amp;rsquo; into the configuration center, and then configuring the address of the registration center. In the local dubbogo.yaml configuration file, you only need to write the information of the configuration center.</description></item><item><title>Rust SDK</title><link>https://dubbo.apache.org/en/overview/mannual/rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/mannual/rust/</guid><description/></item><item><title>Service Search And Service Detail</title><link>https://dubbo.apache.org/en/docs/v2.7/admin/ops/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/admin/ops/search/</guid><description>Service search is the basic function of Dubbo OPS, you can search by service name, application name and IP address, the service name and application name support wildcard and autocomplete:
the service detail page display providers, consumers, medata information is supported in Dubbo 2.7 or higher version:</description></item><item><title>Service Discovery</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/concepts-and-architecture/service-discovery/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/concepts-and-architecture/service-discovery/</guid><description>Service discovery, that is, the ability of the consumer to automatically discover the list of service addresses, is a key capability that the microservice framework needs to have. With the help of automated service discovery, microservices can be implemented without knowing the deployment location and IP address of the peer. communication.
Method to realize There are many ways to realize service discovery. Dubbo provides a Client-Based service discovery mechanism. Usually, additional third-party registry components need to be deployed to coordinate the service discovery process, such as commonly used Nacos, Consul, Zookeeper, etc.</description></item><item><title>Service Downgrade</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/service-downgrade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/service-downgrade/</guid><description>Feature description It is recommended to use relevant current limiting and downgrading components (such as Sentinel) to achieve the best experience. Reference example practice: Microservice Governance/Limit and Downgrade
Service degradation refers to the emergency treatment of service degradation under abnormal circumstances.
scenes to be used When the load of a certain service or interface exceeds the maximum carrying capacity range, downgrade emergency treatment is required to avoid system crash When a non-critical service or interface called is temporarily unavailable, simulated data or null is returned, and the business can continue to be available Downgrade non-core business services or interfaces, free up system resources, and try to ensure the normal operation of core business When an upstream basic service times out or is unavailable, execute a downgrade plan that can respond quickly to avoid the overall avalanche of services How to use Take xml configuration as an example: (configuration through annotations is similar)</description></item><item><title>Service Management Commands</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/qos/service-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/qos/service-management/</guid><description>ls command List consumers and providers
dubbo&amp;gt;ls As Provider side: +------------------------------------------------- -----------------------+---------------------+ | Provider Service Name | PUB | +------------------------------------------------- -----------------------+---------------------+ |DubboInternal - UserRead/org.apache.dubbo.metadata.MetadataService:1.0.0| | +------------------------------------------------- -----------------------+---------------------+ | com.dubbo.dubbointegration.UserReadService |nacos-A(Y)/nacos-I(Y)| +------------------------------------------------- -----------------------+---------------------+ As Consumer side: +-----------------------------------------+------- ----------+ | Consumer Service Name | NUM | +-----------------------------------------+------- ----------+ |com.dubbo.dubbointegration.BackendService|nacos-AF(I-2,A-2)| +-----------------------------------------+------- ----------+ List the services provided and consumed by dubbo, as well as the number of service addresses consumed.
Note:
Services prefixed with DubboInternal are built-in services of Dubbo, and are not registered with the registry by default.</description></item><item><title>Set current limit for the server</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/limit/tps_limiter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/limit/tps_limiter/</guid><description>1. Preparations dubbo-go cli tools and dependent tools have been installed Create a new demo application 2. Modify the current limiting logic and verify Dubbo-go provides users with built-in flow-limiting rejection logic, and supports users to define the required flow-limiting mechanism and rejection logic according to their own business scenarios.
Under normal circumstances, no flow limit is set. When the user configures the flow limit logic and parameters on the server side, it will</description></item><item><title>SPI Loading</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/spi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/spi/</guid><description>SPI Config Source: Dubbo SPI is inherited from standard JDK SPI(Service Provider Interface) and makes it more powerful.
Dubbo fixed below issues of the standard JDK SPI:
The standard JDK SPI will load and instantize all the implementations at once. It will be a waste of resources if one implementation is timecosted, but never be used. We can&amp;rsquo;t accquire the SPI name, if loading the SPI implementation is failed.For example: standard JDK ScriptEngine, get script type by invoking method getName().</description></item><item><title>Streaming communication mode</title><link>https://dubbo.apache.org/en/overview/tasks/triple/streaming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/triple/streaming/</guid><description>For specific use cases, please refer to: [dubbo-samples-triple/pojo](https://github.com/apache/dubbo-samples/tree/master/3-extensions/protocol/dubbo-samples-triple/src/main/java /org/apache/dubbo/sample/tri/pojo);
Open the new feature of Triple - Stream (stream) Stream is a new call type provided by Dubbo3. It is recommended to use stream in the following scenarios:
The interface needs to send a large amount of data. These data cannot be placed in an RPC request or response, and need to be sent in batches. However, if the application layer cannot solve the order and performance problems in the traditional multiple RPC method, if the order needs to be guaranteed , it can only be sent serially In streaming scenarios, data needs to be processed in the order they are sent, and the data itself has no definite boundary In push scenarios, multiple messages are sent and processed in the context of the same call Stream is divided into the following three types:</description></item><item><title>Service Test</title><link>https://dubbo.apache.org/en/docs/v2.7/admin/ops/test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/admin/ops/test/</guid><description>please refer to this blog</description></item><item><title>traffic management</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/traffic_management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/traffic_management/</guid><description>In this section, we will continue the previous task [Deploy Dubbo-go application in Istio environment].
In the previous task, we deployed a set of Dubbo-go Server and Client applications in the cluster, and verified the success of service discovery and invocation. In this section, we will create a new version of the server-side application. By configuring VirtualService and DestinationRule, routing management and traffic transfer capabilities are realized
1. Preparations The dubbo-go cli tool and dependent tools have been installed, grpc_cli (for local debugging).</description></item><item><title>Users</title><link>https://dubbo.apache.org/en/latest/java-sdk/v2.x/introduction/users/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/latest/java-sdk/v2.x/introduction/users/</guid><description/></item><item><title>Users</title><link>https://dubbo.apache.org/en/latest/java-sdk/v3.x/introduction/users/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/latest/java-sdk/v3.x/introduction/users/</guid><description/></item><item><title>Website Guide</title><link>https://dubbo.apache.org/en/docs/contribution-guidelines/committer/website-guide_dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/contribution-guidelines/committer/website-guide_dev/</guid><description> The website repository of Apache Dubbo is https://github.com/apache/dubbo-website After building the website, it&amp;rsquo;ll be published to dubbo.apache.org automatically, you can also trigger it manually via https://selfserve.apache.org (need to login with Apache account)</description></item><item><title>Zookeeper</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/metadata-center/zookeeper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/metadata-center/zookeeper/</guid><description>1 Preparations Understand Dubbo basic development steps Install and start Zookeeper 2 Instructions for use 2.1 Add Maven dependency If the project has enabled Zookeeper as the registry, no additional configuration is required.
If the Zookeeper registry is not used, please refer to Add Zookeeper-related dependencies for the registry.
2.2 Enable Zookeeper Configuration Center &amp;lt;dubbo:metadata-report address=&amp;#34;zookeeper://127.0.0.1:2181&amp;#34;/&amp;gt; or
dubbo metadata-report address: zookeeper://127.0.0.1:2181 or
dubbo.metadata-report.address=zookeeper://127.0.0.1:2181 or
MetadataReportConfig metadataConfig = new MetadataReportConfig(); metadataConfig.setAddress(&amp;#34;zookeeper://127.0.0.1:2181&amp;#34;); For address format, please refer to [zookeeper registry - enable configuration](.</description></item><item><title>快速开始</title><link>https://dubbo.apache.org/en/latest/java-sdk/v2.x/quick-start/quick-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/latest/java-sdk/v2.x/quick-start/quick-start/</guid><description>链接到各个生态的quick-start</description></item><item><title>用户列表</title><link>https://dubbo.apache.org/en/latest/java-sdk/v2.x/concepts-and-architecture/users/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/latest/java-sdk/v2.x/concepts-and-architecture/users/</guid><description/></item><item><title>用户列表</title><link>https://dubbo.apache.org/en/latest/java-sdk/v3.x/concepts-and-architecture/users/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/latest/java-sdk/v3.x/concepts-and-architecture/users/</guid><description/></item><item><title>网站向导</title><link>https://dubbo.apache.org/en/latest/contribution-guidelines/committer/website-guide_dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/latest/contribution-guidelines/committer/website-guide_dev/</guid><description> Apache Dubbo 的网站仓库是 https://github.com/apache/dubbo-website 网站构建完毕后，它会被自动发布到 dubbo.apache.org，您也可以通过 https://selfserve.apache.org 手动触发（需要使用 Apache 账号登陆）</description></item><item><title>邮件列表订阅向导</title><link>https://dubbo.apache.org/en/latest/contribution-guidelines/contributor/mailing-list-subscription-guide_dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/latest/contribution-guidelines/contributor/mailing-list-subscription-guide_dev/</guid><description>Apache incubator 的 Dubbo 开发者邮件列表（dev@dubbo.apache.org）已经建立，请随时订阅并参考[^1]获取更多细节。
你也可以直接查看历史邮件
下面是一个关于 Dubbo 邮件列表订阅的简短指南：
发一封邮件到 dev-subscribe@dubbo.apache.org，其内容和标题均可为空。随后，您会收到一封邮件，其内容如下： from: dev-help@dubbo.apache.org reply-to: dev-sc.xxxxxxx.xxxxxxxx-hello=example.com@dubbo.apache.org to: hello@example.com date: Sat, Feb 24, 2018 at 3:12 PM subject: confirm subscribe to dev@dubbo.apache.org mailed-by: apache.org Hi! This is the ezmlm program. I&amp;#39;m managing the dev@dubbo.apache.org mailing list. I&amp;#39;m working for my owner, who can be reached at dev-owner@dubbo.apache.org. To confirm that you would like hello@example.com added to the dev mailing list, please send a short reply to this address: dev-sc.</description></item><item><title>给问题打标签</title><link>https://dubbo.apache.org/en/latest/contribution-guidelines/committer/label-an-issue-guide_dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/latest/contribution-guidelines/committer/label-an-issue-guide_dev/</guid><description>如果您正在处理一个问题，请记得给这个问题标记一个或者多个您认为有意义的标签。有了标签，其他开发人员就会很轻松地识别出问题，以便对其进行分类并跟踪进度。
对于需要编码和发版修复的 issues 和 pull requests，需要您将其标记为 milestone。
一些常用的标签：
请求帮助 help wanted good first issue 优先级 priority/blocker priority/high priority/low priority/normal 状态 status/need-triage status/DO-NOT-MERGE status/READY-TO-MERGE status/invalid status/wontfix 类型 type/bug type/documentation type/enhancement type/feature</description></item><item><title>0-4 - cache entry exceeded</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/4/</guid><description>Other modules reuse the common layer&amp;rsquo;s file-based caching mechanism (currently the metadata module), and the common layer&amp;rsquo;s file caching mechanism &amp;ldquo;sees&amp;rdquo; that the entry limit is exceeded.
Possible Reason User improperly configured Java System Property (Java system property configured with -D) dubbo.mapping.cache.entrySize or dubbo.meta.cache.entrySize
Defaults
dubbo.mapping.cache.entrySize dubbo.meta.cache.entrySize 10000 100 Troubleshooting and resolution steps Try reconfiguring the above Java System Property (Java System Property configured with -D). If these System Property are not configured, please go to GitHub Issue Tracker to issue an Issue.</description></item><item><title>1-4 - Empty address</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/4/</guid><description>Possible Reason Errors 1-4 in registry.integration.RegistryDirectory are caused by the null invokerUrls in the refreshInvoker process, which can be ignored. The 1-4 errors in registry.support.CacheableFailbackRegistry may be caused by the mismatch between consumer and provider, and the &amp;ldquo;null protection&amp;rdquo; is turned off. Troubleshooting and resolution steps Make sure that the service group configurations on the Provider and Consumer side correspond. Make sure that the service version configurations on the Provider and Consumer side correspond.</description></item><item><title>2-4 - Merger interface failed to load</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/4/</guid><description>Possible Reason Dubbo provides an SPI extension Merger interface that aggregates the responses of all downstream providers. When Dubbo loads the user-defined extension Merger interface, the loading configuration fails. Troubleshooting and resolution steps Refer to the community SPI extension manual to check the implementation of the user-defined extension Merger interface, [&amp;ldquo;SPI Extension User Manual&amp;rdquo;](/zh-cn/overview/mannual/java-sdk/reference-manual /spi/).</description></item><item><title>3-4 - Client sending request timed out</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/3/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/3/4/</guid><description>Possible Reason The number of client connections is too high, the response is slow, and the request cannot be sent to the server in time. Some reasons for the network. Troubleshooting and resolution steps Whether the network is normal. You can use some third-party tools or jstack [PID] &amp;gt; jstack.log to analyze the stack information and locate it.</description></item><item><title>4-4 - Non-safe serialization method</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/4/</guid><description>Possible Reason Currently using an unsafe serializer, which is not recommended. The specific configuration is: serialization=&amp;quot;java&amp;quot;
Troubleshooting and resolution steps Modify the parameter value of the setting. Change the serialization parameter value in the protocol to other.</description></item><item><title>5-4 - Method not found in service interface</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/4/</guid><description>Possible Reason The interface name#method called by the consumer does not exist. The server does not expose the current interface correctly. Troubleshooting and resolution steps Check whether the interface name# method called by the consumer exists. Check whether it exists in the service list exposed by the server.</description></item><item><title>6-4 - Network communication layer unknown exception</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/4/</guid><description>Reminder The meaning of this error code has been adjusted. If you are looking for information of this error code in Dubbo versions prior than (or equal) 3.1.4 or 3.2.0-beta.3, head to 99-0.
(This error code is currently absent.)</description></item><item><title>7-4 - QOS service failed to start</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/7/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/7/4/</guid><description>Possible Reason The QOS parameter value is not set correctly. The main parameters are qos.host and qos.port
Troubleshooting and resolution steps Please refer to the QOS Operation Manual QOS Overview.</description></item><item><title>Annotation Configuration</title><link>https://dubbo.apache.org/en/docs/v2.7/user/configuration/annotation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/configuration/annotation/</guid><description>Requires2.6.3 or higher, click here to view the complete sample
Provider Side k
@DubboService annotation for exporting @DubboService public class AnnotationServiceImpl implements AnnotationService { @Override public String sayHello(String name) { return &amp;#34;annotation: hello, &amp;#34; + name; } } Add application sharing configuration # dubbo-provider.properties dubbo.application.name=annotation-provider dubbo.registry.address=zookeeper://127.0.0.1:2181 dubbo.protocol.name=dubbo dubbo.protocol.port=20880 Spring scan path @Configuration @EnableDubbo(scanBasePackages = &amp;#34;org.apache.dubbo.samples.simple.annotation.impl&amp;#34;) @PropertySource(&amp;#34;classpath:/spring/dubbo-provider.properties&amp;#34;) static public class ProviderConfiguration { } Consumer Side @Reference annotation for reference @Component(&amp;#34;annotationAction&amp;#34;) public class AnnotationAction { @Reference private AnnotationService annotationService; public String doSayHello(String name) { return annotationService.</description></item><item><title>API Docs&amp;Test</title><link>https://dubbo.apache.org/en/docs/v2.7/admin/ops/apidocs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/admin/ops/apidocs/</guid><description>dubbo api docs Dubbo api documents, test tools, generate documents according to annotations, and provide test functions
Adding some annotations can generate a swagger like document without turning a non web Dubbo project into a web project
How to use? Dubbo api docs annotation added to method parameters of Dubbo project Dubbo provider project introduces dubbo-api-docs-core If Dubbo&amp;rsquo;s interface and parameters are a separate jar package project, introduce dubbo-api-docs-annotations Add the annotation @EnableDubboApiDocs to the project startup class (marked with @SpringBootApplication) or configuration class (marked with @Configuration) of the provider project to enable the Dubbo API Docs In order to avoid increasing the resource consumption in the production environment, it is recommended to create a configuration class to enable Dubbo API Docs, and use it with the @Profile(&amp;ldquo;dev&amp;rdquo;) annotation Of course, Dubbo API Docs consumed a little CPU resources when the project starting and used a little memory for caching.</description></item><item><title>Apollo</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config-center/apollo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config-center/apollo/</guid><description>1 precondition Understand Dubbo basic development steps Install and start Apollo 2 Instructions for use Check here full sample code
2.1 Add Maven dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.dubbo&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;dubbo&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.9&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.ctrip.framework.apollo&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;apollo-openapi&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.0.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.ctrip.framework.apollo&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;apollo-client&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.0.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 2.2 Enable Apollo Configuration Center &amp;lt;dubbo:config-center address=&amp;#34;apollo://localhost:8080&amp;#34;/&amp;gt; or
dubbo config-center address: apollo://localhost:8080 or
dubbo.config-center.address=apollo://localhost:8080 or
ConfigCenterConfig configCenter = new ConfigCenterConfig(); configCenter.setAddress(&amp;#34;apollo://localhost:8080&amp;#34;); 3 Advanced configuration A core concept in Apollo is the namespace - namespace, which is different from the namespace concepts of Zookeeper and Nacos above, so the usage method is also special.</description></item><item><title>install Zookeeper Configuration Center</title><link>https://dubbo.apache.org/en/docs/v2.7/admin/install/zookeeper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/admin/install/zookeeper/</guid><description>zookeeper register center client version: dubbo-2.3.3 and above1
Dubbo changes nothing of Zookeeper&amp;rsquo;s server side, an original Zookeeper server is fine. All change happens while calling Zookeeper&amp;rsquo;s client side
install:
wget http://archive.apache.org/dist/zookeeper/zookeeper-3.3.3/zookeeper-3.3.3.tar.gz tar zxvf zookeeper-3.3.3.tar.gz cd zookeeper-3.3.3 cp conf/zoo_sample.cfg conf/zoo.cfg configuration:
vi conf/zoo.cfg If cluster is not needed, the content of zoo.cfg is as below 2:
tickTime=2000 initLimit=10 syncLimit=5 dataDir=/home/dubbo/zookeeper-3.3.3/data clientPort=2181 If cluster is needed, the content of zoo.cfg is as below 3:</description></item><item><title>Cross-language interoperability with Java applications</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/interflow/call_java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/interflow/call_java/</guid><description>Preparation environment JDK 8, Golang &amp;gt;= 1.15, Dubbo 3.0.2, zookeeper enabled,
Go-Java Interoperability Prerequisites The transfer structure defined by Go/Java is consistent
PB serialization proto for Go
// The response message containing the greetings message User { string name = 1; string id = 2; int32 age = 3; } proto for Java
// The response message containing the greetings message User { string name = 1; string id = 2; int32 age = 3; } Hessian serialization POJO for Go, please refer to Dubbogo Hessian serialization support document</description></item><item><title>Depends on the adaptation version number</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/refer/compatible_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/refer/compatible_version/</guid><description>When Dubbo-go releases a new version, update the version it currently depends on.
Dependency Dubbo-go Triple protoc-gen-go-triple v3.0.1 v1.1.8 v1.0.8 v3.0.0 v1.1.6 v1.0.5 v3.0.0-rc4-1 v1.1.3 v1.0.2 v3.0.0-rc3 v1.0.9 v1.0.0</description></item><item><title>Software Donation Guide</title><link>https://dubbo.apache.org/en/docs/contribution-guidelines/contributor/software-donation-guide_dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/contribution-guidelines/contributor/software-donation-guide_dev/</guid><description>Before you go through this guide, make sure you have confirmed with PMC that a SGA is actually needed.
If you are donating significant amount of code or documentation to Apache Dubbo , you will be required to sign a Software Grant before your code/doc could be merged.
Steps Download this pdf Print it out Fill in the blanks (see below as an example) Request your boss to sign it Scan it Send an email to secretary@apache.</description></item><item><title>Dubbo Admin Security</title><link>https://dubbo.apache.org/en/overview/notices/admin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/notices/admin/</guid><description>In order to facilitate the use of Dubbo, Dubbo officially provides the Dubbo Admin console to facilitate the management of Dubbo applications.
Risk Dubbo Admin has query and call permissions for the entire cluster by default, so it needs to be used with more caution in the online environment. In addition, in order to reduce the risk of arbitrary access to Dubbo Admin, Dubbo Admin also provides a simple authentication mechanism.</description></item><item><title>4 - Dubbo x Spring XML to develop microservice applications</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/spring-xml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/spring-xml/</guid><description>Target Develop Dubbo x Spring XML-based microservice development from scratch, and understand the Dubbo x Spring XML configuration method.
Difficulty Low
Environmental requirements System: Windows, Linux, MacOS
JDK 8 and above (JDK17 is recommended)
Git
IntelliJ IDEA (optional)
Docker (optional)
Rapid deployment (directly started based on Samples) This chapter will teach you step by step how to deploy and run a Dubbo x Spring XML-based use case through a few simple commands.</description></item><item><title>dubbogo 3.0 check at startup</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/health/start-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/health/start-check/</guid><description>check at startup Check if dependent services are available at startup
By default, Dubbo-go will check whether the dependent services are available at startup. When they are not available, an exception will be thrown to prevent the application from completing initialization, so that problems can be detected early when going online. The default check=&amp;ldquo;true&amp;rdquo; and wait for 3s.
You can turn off the check with check=&amp;ldquo;false&amp;rdquo;. For example, when testing, some services don&amp;rsquo;t care, or there is a circular dependency, and one of them must be started first.</description></item><item><title>ExporterListener Extension</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/impls/exporter-listener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/impls/exporter-listener/</guid><description>Summary Fire events when there&amp;rsquo;s any service exported.
Extension Interface org.apache.dubbo.rpc.ExporterListener
Extension Configuration &amp;lt;!-- service exporter listener --&amp;gt; &amp;lt;dubbo:service listener=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- default exporter listener for service provider --&amp;gt; &amp;lt;dubbo:provider listener=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; Existing Extension org.apache.dubbo.registry.directory.RegistryExporterListener
Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxExporterListener.java (ExporterListener implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.ExporterListener (plain text file with the content: xxx=com.xxx.XxxExporterListener) XxxExporterListener.java：
package com.xxx; import org.apache.dubbo.rpc.ExporterListener; import org.apache.dubbo.rpc.Exporter; import org.apache.dubbo.rpc.RpcException; public class XxxExporterListener implements ExporterListener { public void exported(Exporter&amp;lt;?</description></item><item><title>Expose Listener Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/exporter-listener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/exporter-listener/</guid><description>Expansion Description This event is triggered when a service is exposed.
Extension ports org.apache.dubbo.rpc.ExporterListener
Extended configuration &amp;lt;!-- Expose service monitoring --&amp;gt; &amp;lt;dubbo:service listener=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- Expose service default listener --&amp;gt; &amp;lt;dubbo:provider listener=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.registry.directory.RegistryExporterListener
Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxExporterListener.java (implements ExporterListener interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.ExporterListener (plain text file, content: xxx=com.xxx.XxxExporterListener) XxxExporterListener.java:
package com.xxx; import org.apache.dubbo.rpc.ExporterListener; import org.apache.dubbo.rpc.Exporter; import org.apache.dubbo.rpc.RpcException; public class XxxExporterListener implements ExporterListener { public void exported(Exporter&amp;lt;?</description></item><item><title>Talk About Expansion Of Extension And Incremental Extension</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/principals/expansibility/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/principals/expansibility/</guid><description>http://javatar.iteye.com/blog/690845
There are more and more products in our platform, the function of the product also more and more.Platform products in order to meet the requirement of each BU and department as well as product line, will surely will be a lot of irrelevant function together, the customer can use selective.In order to compatible with more demand for each product, each framework, are constantly expanding, and we often choose some extension of the extension, namely to old and new function expanded into a general implementation.</description></item><item><title>Extensibility</title><link>https://dubbo.apache.org/en/overview/what/extensibility/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/what/extensibility/</guid><description>Extended Design Ideas Scalability is what any system pursues, and it is equally applicable to Dubbo.
What is scalability Scalability is a design concept that represents our vision for the future. We hope that based on the existing architecture or design, when some aspects change in the future, we can adapt to this with minimal changes. kind of change.
Advantages of Scalability The advantage of scalability is mainly manifested in the decoupling between modules, which conforms to the principle of opening and closing, which is open to expansion and closed to modification.</description></item><item><title>Frame State Command</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/qos/probe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/qos/probe/</guid><description>Reference document: Kubernetes Lifecycle Probe
startup command Check if the current framework has been started
dubbo&amp;gt;startup true dubbo&amp;gt; ready command Detect whether the current framework can provide services normally (may be temporarily offline)
dubbo&amp;gt;ready true dubbo&amp;gt; live command Check if the current framework is running normally (possibly a permanent exception)
dubbo&amp;gt;live true dubbo&amp;gt;</description></item><item><title>Generalization call (client generalization)</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/generic-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/generic-reference/</guid><description>Feature description Generalized call refers to calling the server without the API (SDK) provided by the server, and the call result can be obtained normally.
scenes to be used The generalization call is mainly used to implement a general remote service mock framework, which can handle all service requests by implementing the GenericService interface. For example, the following scenario:
Gateway service: If you want to build a gateway service, then the service gateway should be the calling end of all RPC services.</description></item><item><title>Service Governance And Configuration Management</title><link>https://dubbo.apache.org/en/docs/v2.7/admin/ops/governance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/admin/ops/governance/</guid><description>Service governance the basic function of service governance is changing the runtime behaviour and routing logic, to do weight configuration and current limiting:
application level service governance In Dubbo 2.6 or earlier version, all service governance rule are in service scope, if you need to make application scope rule, you need to set the same rule for all services under an application, modify and delete need the same operation, this is very unfriendly.</description></item><item><title>Health Information</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/observability/health-information/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/observability/health-information/</guid><description/></item><item><title>hessian protocol</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/hessian/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/hessian/</guid><description>Hessian protocol is used for integrate Hessian services, and it use http protocol to communicate and expose services by servlet.Dubbo use Jetty server as default servlet container.
Dubbo&amp;rsquo;s Hessian protocol interoperates with native Hessian services:
Providers use Dubbo&amp;rsquo;s Hessian protocol to expose services that consumers call directly using standard Hessian interfaces Alternatively, the provider exposes the service using standard Hessian and the consumer calls it using Dubbo&amp;rsquo;s Hessian protocol. Features Number of connections: multiple connections Connection: short connection Transmission protocol: HTTP Transmission: synchronous transmission Serialization: Hessian binary serialization Scope of application: Incoming and outgoing parameter packets are large, the number of providers is more than that of consumers and can transfer files.</description></item><item><title>Implementation details</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/implementation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/implementation/</guid><description>Initialization details Service parsing Based on META-INF/spring.handlers config in dubbo.jar, Spring calls DubboNamespaceHandler when meeting dubbo namespace.
All Dubbo tags are parsed by DubboBeanDefinitionParser, based on one to one attribute mapping, the XML label is parsed as a Bean object.
Transfer Bean object to URL, and transfer all attributes of Bean to URL parameters when ServiceConfig.export() or ReferenceConfig.get() initialization.
Then pase URL to Protocol extension point, based on Extension point adaptive mechanism of extension point, processing service exposure or reference for different protocols according to URL protocol header.</description></item><item><title>Kubernetes Probe</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/health/kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/health/kubernetes/</guid><description/></item><item><title>Log Framework Adaptation and Runtime Management</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/logger-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/logger-management/</guid><description>Feature description Adaptation of log frameworks. Since 2.2.1, dubbo has built-in adaptation of log4j, slf4j, jcl, and jdk log frameworks.
Log framework runtime management, starting from 3.0.10, dubbo-qos runtime management supports query log configuration and dynamically modify the used log framework and log level.
The log configuration modified by dubbo-qos is not stored persistently, and will become invalid after the application is restarted.
scenes to be used How to use Log framework adaptation The logging output policy can be explicitly configured in the following ways</description></item><item><title>Maturity</title><link>https://dubbo.apache.org/en/docs/v2.7/user/maturity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/maturity/</guid><description>Function maturity Feature Maturity Strength Problem Advise User Concurrency control Tested concurrency control On trial Connection control Tested connection number control On trial Connecting certain provider straightly Tested Provider service for point-to-point connecting straightly, for test Can be used in the test environment Alibaba Grouping polymerization Tested Return value of grouping polymerization, service for menu aggregation and other services Used in special scenes Can be used in the production environment Parameters validator Tested parameters validator, JSR303 validation framework integration Have effect on Performance On trial LaiWang Result cache Tested result cache, for accelerating requests On trial Generic reference Stable Generic reference, remote call without a business interface class，for test platforms, open api proxy service, and so on Can be used in the production environment Alibaba Generic service Stable Generic service, no interface class is required to implement any interface, for mock platform Can be used in the production environment Alibaba Echo test Tested echo test On trial Attachment Stable Attachment Can be used in the production environment Asynchronous call Tested Unavailable asynchronous call On trial Local call Tested Local call On trial Callback parameter Tested Callback parameter Used in special scenes On trial Registry Events notify Tested Events notify, triggering before and after the remote call is executed On trial Local stub Stable Performing part of the logic on the client side Can be used in the production environment Alibaba Local mock Stable Forged return results, which can be executed when failed or directly executed, for service degradation Need support of registry Can be used in the production environment Alibaba Delay publish Stable Delay publish, used to wait for the application to load warmup data or wait for spring context to load completely Can be used in the production environment Alibaba Lazy connect Tested Delay setting up connections, when invocation is set up On trial Registry Stickness connections Tested Stickness connections, always make a request to the same provider service unless the service is down, and then switch to another On trial Registry Token authorization Tested Token authorization, is used for service authorization Need support of registry On trial Routing rule Tested Dynamically determining the call relationship Need support of registry On trial Configuration rule Tested Distribute the configuration dynamically, is the switch of business logic Need support of registry On trial Accesslog Tested Accesslog, used to record call information Local storage, impact performance, limited by disk size On trial Distributed transaction Research JTA/XA three phase submission transaction(TCC) Unstable Unavailable Strategy maturity Feature Maturity Strength Problem Advise User Zookeeper registry Stable Support the cluster, have various of related open source products, dubbo-2.</description></item><item><title>Protocol Configuration</title><link>https://dubbo.apache.org/en/docs/v2.7/user/languages/erlang/serialization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/languages/erlang/serialization/</guid><description>The library now only supports hessian and json serialization.
Configuration example Protocol config is under the dubboerl application with sys.config
{dubboerl,[ %% other config ... {protocol,hessian} ]} ConfigName Type DefaultValue Remarks protocol atom() hessian hessian,json</description></item><item><title>Redis</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/metadata-center/redis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/metadata-center/redis/</guid><description>Not yet supported</description></item><item><title>redis protocol</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/redis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/redis/</guid><description>RPC protocol based on redis implementation.
Register redis service address RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension(); Registry registry = registryFactory.getRegistry(URL.valueOf(&amp;#34;zookeeper://10.20.153.10:2181&amp;#34;)); registry.register(URL.valueOf(&amp;#34;redis://10.20.153.11/com.foo.BarService?category=providers&amp;amp;dynamic=false&amp;amp;application=foo&amp;amp;group=member&amp;amp;loadbalance=consistenthash&amp;#34;)); Use in client get service reference:
&amp;lt;dubbo:reference id=&amp;#34;store&amp;#34; interface=&amp;#34;java.util.Map&amp;#34; group=&amp;#34;member&amp;#34; /&amp;gt; or direct access by IP:
&amp;lt;dubbo:reference id=&amp;#34;store&amp;#34; interface=&amp;#34;java.util.Map&amp;#34; url=&amp;#34;redis://10.20.153.10:6379&amp;#34; /&amp;gt; you can also use a custom interface：
&amp;lt;dubbo:reference id=&amp;#34;store&amp;#34; interface=&amp;#34;com.foo.StoreService&amp;#34; url=&amp;#34;redis://10.20.153.10:6379&amp;#34; /&amp;gt; The method name is the same as the standard method name of memcached, just like get(key), set(key, value), delete(key)。</description></item><item><title>Install Redis Register Center</title><link>https://dubbo.apache.org/en/docs/v2.7/admin/install/redis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/admin/install/redis/</guid><description>Redis 1 introductions, please refer to: Redis application center manual.
you need an origin Redis server only, and change the value from dubbo.registry.address to redis://127.0.0.1:6379 in conf/dubbo.properties of quick start
Redis configuration center cluster 2 write multiple server in client side and read from a single server.
Install:
wget http://redis.googlecode.com/files/redis-2.4.8.tar.gz tar xzf redis-2.4.8.tar.gz cd redis-2.4.8 make Configuration:
vi redis.conf Start:
nohup ./src/redis-server redis.conf &amp;amp; Stop:
killall redis-server Command line 3: .</description></item><item><title>Registry Configuration</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/registry/</guid><description>Refer to samples dubbo-go-samples/registry
Registry registration center configuration Nacos Registration Center dubbo: application: # Application information, after the service is started, the relevant information will be registered in the registration center, which can be identified by the client from the url name: myApp # application=myApp; name=myApp module: opensource # module=opensource organization: dubbo # organization=dubbo owner: laurence # owner=laurence version: myversion # app.version=myversion environment: pro # environment=pro registries: nacosWithCustomGroup: protocol: nacos # The registration center chooses nacos address: 127.</description></item><item><title>Rest protocol</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/rest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/rest/</guid><description>Note Since Dubbo 3.3, the rest protocol has been moved to the extensions library, with the triple protocol now providing more comprehensive support for Rest. For details refer to Triple Rest User Manual.
If you wish to continue using the original rest protocol, please include the corresponding dubbo-spi-extensions dependency. Support for REST calls based on the standard Java REST API - JAX-RS 2.0 (short for Java API for RESTful Web Services)</description></item><item><title>Router</title><link>https://dubbo.apache.org/en/overview/tasks/extensibility/router/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/extensibility/router/</guid><description>By creating custom routers, you can implement specific routing methods based on the characteristics of your business scenario.
Prerequisites Choose one of the two deployment and running methods
Based on Kubernetes Install Kubernetes environment Modify the configuration file in Provider to enable the address of nacos deployed in Kubernetes # (The configuration remains the same as in the original documentation) Modify the configuration file in Consumer to enable the address of nacos deployed in Kubernetes # (The configuration remains the same as in the original documentation) Deploy Extensibility Router Task Using Local IDE Deploy Nacos version 2.</description></item><item><title>Reporting Security Issues</title><link>https://dubbo.apache.org/en/docs/contribution-guidelines/contributor/reporting-security-issues_dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/contribution-guidelines/contributor/reporting-security-issues_dev/</guid><description>The Apache Software Foundation takes a rigorous standpoint in annihilating the security issues in its software projects. Apache Dubbo is highly sensitive and forthcoming to issues pertaining to its features and functionality.
REPORTING VULNERABILITY If you have apprehensions regarding Dubbo&amp;rsquo;s security or you discover vulnerability or potential threat, don’t hesitate to get in touch with the Apache Dubbo Security Team by dropping a mail at security@dubbo.apache.org. In the mail, specify the description of the issue or potential threat.</description></item><item><title>Serialized configuration items</title><link>https://dubbo.apache.org/en/docs/v3.0/languages/erlang/serialization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v3.0/languages/erlang/serialization/</guid><description>The library currently only implements the dubbo:// communication protocol.
It supports hessian and json as serialization method.
Configuration example Provider configuration items to add to the sys.config file dubboerl field.
{dubboerl,[ %% other config ... {protocol,hessian} ]} ConfigName Type DefaultValue Remarks protocol atom() hessian hessian,json</description></item><item><title>Service Call Extension Point</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/concepts-and-architecture/service-invocation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/concepts-and-architecture/service-invocation/</guid><description>As shown in the figure above, from the perspective of service invocation, Dubbo provides a wealth of extension points in the link, covering load balancing methods, interceptors before and after site selection, and server-side processing interceptors. To put it simply, when Dubbo initiates a remote call, the main workflow can be divided into two parts: the consumer side and the server side.
The workflow on the consumer side is as follows:</description></item><item><title>Simple Registry Server</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/registry/simple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/registry/simple/</guid><description>Simple registry server itself is a regular dubbo service. In this way, third-party dependency is unnecessary, and communication keeps consistent at the same moment.
Configuration Register simple registry server as dubbo service:
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:dubbo=&amp;#34;http://dubbo.apache.org/schema/dubbo&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&amp;#34;&amp;gt; &amp;lt;!-- application info configuration --&amp;gt; &amp;lt;dubbo:application name=&amp;#34;simple-registry&amp;#34; /&amp;gt; &amp;lt;!-- service protocol configuration --&amp;gt; &amp;lt;dubbo:protocol port=&amp;#34;9090&amp;#34; /&amp;gt; &amp;lt;!-- service configuration --&amp;gt; &amp;lt;dubbo:service interface=&amp;#34;org.apache.dubbo.registry.RegistryService&amp;#34; ref=&amp;#34;registryService&amp;#34; registry=&amp;#34;N/A&amp;#34; ondisconnect=&amp;#34;disconnect&amp;#34; callbacks=&amp;#34;1000&amp;#34;&amp;gt; &amp;lt;dubbo:method name=&amp;#34;subscribe&amp;#34;&amp;gt;&amp;lt;dubbo:argument index=&amp;#34;1&amp;#34; callback=&amp;#34;true&amp;#34; /&amp;gt;&amp;lt;/dubbo:method&amp;gt; &amp;lt;dubbo:method name=&amp;#34;unsubscribe&amp;#34;&amp;gt;&amp;lt;dubbo:argument index=&amp;#34;1&amp;#34; callback=&amp;#34;false&amp;#34; /&amp;gt;&amp;lt;/dubbo:method&amp;gt; &amp;lt;/dubbo:service&amp;gt; &amp;lt;!</description></item><item><title>Stream Communication</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/streaming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/streaming/</guid><description>TBD</description></item><item><title>Thread Model</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/thread-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/thread-model/</guid><description>Thread Model If events handing can be executed quickly without sending new request like marking in memory. Events should be handled by I/O thread since it reduces thread dispatching. If event handling will be executed slowly or needs to send new I/O request like querying from database, events should be handled in thread pool. Otherwise, I/O thread will be blocked and then will be not able to receive requests. If events are handled by I/O thread, and send new I/O requests during the handling like sending a l login request during connect event, it will alert with “Potentially leading to deadlock”, but deadlock will not happen actually.</description></item><item><title>Thread Pool Isolation</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/isolation-executor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/isolation-executor/</guid><description>Feature description A new thread pool management method enables the thread pools of each service in the provider application to be isolated and independent from each other. The exhaustion of the thread pool resources of a certain service will not affect other normal services. Support thread pool configurable, manually specified by the user.
scenes to be used How to use Currently, it can be configured in the form of API, XML, and Annotation</description></item><item><title>thrift protocol</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/thrift/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/thrift/</guid><description>The current dubbo support thrift protocol is an extension of the thrift native protocol, adding some additional header information to the native protocol, such as service name, magic number, and so on.
The use of dubbo thrift protocol also need to use thrift idl compiler to generate the corresponding java code, follow-up version will do some enhancement in this aspect.
dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.thrift&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;libthrift&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.8.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Configuration &amp;lt;dubbo:protocol name=&amp;#34;thrift&amp;#34; port=&amp;#34;3030&amp;#34; /&amp;gt; Example you can check dubbo thrift example</description></item><item><title>Usage</title><link>https://dubbo.apache.org/en/docs/v2.7/user/preface/usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/preface/usage/</guid><description>Spring configuration of local service local.xml:
&amp;lt;bean id=“xxxService” class=“com.xxx.XxxServiceImpl” /&amp;gt; &amp;lt;bean id=“xxxAction” class=“com.xxx.XxxAction”&amp;gt; &amp;lt;property name=“xxxService” ref=“xxxService” /&amp;gt; &amp;lt;/bean&amp;gt; Spring configuration of remote service The remote configuration can be done by very little change based on the local configuration:
split the local.xml into two part, put the service define part into remote-privider.xml(exists in the provider node), meanwhile the refrence part into remote-consumer.xml(exists in the consumer node). add &amp;lt;dubbo:service&amp;gt; to the provider&amp;rsquo;s configuration, and &amp;lt;dubbo:reference&amp;gt; to the consumer&amp;rsquo;s configuration.</description></item><item><title>XML Configuration</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config/xml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config/xml/</guid><description>Dubbo has custom configuration components based on Spring Schema extensions, and the configuration capabilities that can be achieved using XML are generally equivalent to Configuration Reference Manual.
For complete examples of the following content, please refer to dubbo-samples
service provider Define service interface DemoService.java:
package org.apache.dubbo.demo; public interface DemoService { String sayHello(String name); } Implement the interface on the service provider side DemoServiceImpl.java:
package org.apache.dubbo.demo.provider; import org.apache.dubbo.demo.DemoService; public class DemoServiceImpl implements DemoService { public String sayHello(String name) { return &amp;#34;Hello &amp;#34; + name; } } Expose services with Spring configuration declarations &amp;lt;?</description></item><item><title>报告安全问题</title><link>https://dubbo.apache.org/en/latest/contribution-guidelines/contributor/reporting-security-issues_dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/latest/contribution-guidelines/contributor/reporting-security-issues_dev/</guid><description>Apache Software Foundation 在消除其软件项目中的安全性问题方面采取严格的立场。Apache Dubbo 对与其功能和特性有关的问题非常敏感并很快提出。
报告漏洞 如果您对 Dubbo 的安全性有担心，或者发现漏洞或潜在威胁，请发送电子邮件至 security@dubbo.apache.org 与 Apache Dubbo 安全团队联系。在邮件中，指定问题或潜在威胁的描述。还敦促您推荐重现和复制问题的方法。Dubbo 社区会在评估和分析调查结果之后与您联系。
请先注意在安全电子邮件中报告安全问题，然后再在公共领域公开该问题。
漏洞处理 漏洞处理过程的概述是：
报告者将漏洞秘密报告给 Apache。 相应项目的安全团队与报告者私下合作来解决漏洞。 制作了包含该修复程序的有关 Apache 产品的新版本。 该漏洞已公开宣布。 有关此过程的详细说明，请参见此处</description></item><item><title>软件捐献向导</title><link>https://dubbo.apache.org/en/latest/contribution-guidelines/contributor/software-donation-guide_dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/latest/contribution-guidelines/contributor/software-donation-guide_dev/</guid><description>在您阅读这篇指南之前，请确保您已经向PMC确认了实际需要的 SGA。
如果您向 Apache Dubbo 捐赠了大量的代码或文档，则需要在合并代码或者文档之前签署软件授权书。
操作步骤 下载这篇pdf文档 打印下载好的文档 按要求填充表格（请看下边示例） 请您的领导在上边签字 扫描 将扫描好的文档以邮件的方式发送给secretary@apache.org，并抄送给private@dubbo.apache.org 示例 下边是一个文本示例，原始文本可以在这里找到
License Agreement This License Agreement is entered into as of the _12th_ day of ___April____, __2018__ by ___ABC Software Co., Ltd.____ (&amp;#34;Licensor&amp;#34;), in favor of The Apache Software Foundation, a Delaware nonstock membership corporation (the &amp;#34;Foundation&amp;#34;). WHEREAS, Licensor owns or has sufficient rights to contribute the software source code and other related intellectual property as itemized on Exhibit A (&amp;#34;Software&amp;#34;) under the terms of this agreement to the Foundation for use within Foundation software development projects (&amp;#34;Projects&amp;#34;).</description></item><item><title>0-5 - Cache file size exceeded</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/5/</guid><description>Other modules reuse the file-based caching mechanism of the Common layer (currently the metadata module), and the file caching mechanism of the Common layer &amp;ldquo;discovers&amp;rdquo; that the file size exceeds the limit.
Possible Reason The user has unreasonably configured the Java System Property (the Java system property configured with -D) dubbo.mapping.cache.maxFileSize or dubbo.meta.cache.maxFileSize The cache file is corrupted due to file system or disk errors. dubbo.mapping.cache.maxFileSize and dubbo.meta.cache.maxFileSize do not show default values, The default value of the maximum file size found according to the logic of org.</description></item><item><title>1-5 - URL received without any parameters</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/5/</guid><description>Possible Reason When calling CacheableFailbackRegistry.toUrlsWithoutEmpty, if there is a provider in Collection&amp;lt;String&amp;gt;providers that does not have any parameters, the URL without any parameters will be received.
Troubleshooting and resolution steps This error is an internal error of Dubbo. If you encounter it, you can create an Issue on github and provide the error information and steps to reproduce it. We will help you solve the problem.
see also Dubbo Community</description></item><item><title>2-5 - Filter Provider Failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/5/</guid><description>Possible Reason Dubbo will finally select a provider from the provider list to initiate a call during load balancing. During the selection process, the provider list changes, and read-write conflicts occur, resulting in screening exceptions. When the Dubbo retry mechanism fails to call the provider, it will re-screen another provider to initiate the call, and an exception occurs during the re-screening process. Troubleshooting and resolution steps Check the registry provider list and the availability of the corresponding provider.</description></item><item><title>3-5 - An exception occurred in the asynchronous response</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/3/5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/3/5/</guid><description>Possible Reason The business logic does have a runtime exception. The connection is refused due to network reasons. Troubleshooting and resolution steps For the business code, please trace back and check according to the prompt line of the stack. Check whether the network of the service provider is normal.</description></item><item><title>4-5 - Stream closed exception</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/5/</guid><description>Possible Reason The prompt information does not affect the execution result of the program.
Troubleshooting and resolution steps You can use some third-party tools or jstack [PID] &amp;gt; jstack.log to analyze the stack information and locate it.</description></item><item><title>5-5 - Unable to get env variables</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/5/</guid><description>Possible Reason Environment variable could not be obtained.
Troubleshooting and resolution steps Check the prompted variable name, whether it is configured and can be read and loaded normally.</description></item><item><title>6-5 - Network disconnection failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/5/</guid><description>Timeout occurs when the caller fails to obtain the corresponding response within the specified time after the request is sent.
Possible Reason Client actively disconnects
Troubleshooting and resolution steps Generally, it is a prompt warning message, which does not affect subsequent program execution.</description></item><item><title>7-5 - QOS command not found</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/7/5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/7/5/</guid><description>Possible Reason The QOS command is misspelled. Troubleshooting and resolution steps QOS command does not exist. Please refer to QOS Operation Manual Basic Command Manual.</description></item><item><title>Adjust traffic distribution by weight</title><link>https://dubbo.apache.org/en/overview/tasks/traffic-management/weight/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/traffic-management/weight/</guid><description>Dubbo provides the service governance capability of adjusting traffic distribution by weight, and can dynamically adjust traffic distribution by weight without restarting the application.
Dubbo can adjust traffic distribution by weight through XML configuration, annotation configuration, and dynamic configuration. Here we mainly introduce the dynamic configuration method. For other configuration methods, please refer to the old document Configuration
before the start Please make sure to run Dubbo-Admin successfully
Background Information In the case of different machine performance, the load of different machines needs to be evaluated systematically, and some machines need to be downgraded.</description></item><item><title>Dubbo3 application-level service discovery</title><link>https://dubbo.apache.org/en/overview/tasks/migration/service-discovery-samples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/migration/service-discovery-samples/</guid><description>Application-level service discovery is a protocol for service discovery between applications. Therefore, to use application-level service discovery, both the consumer and the server must be upgraded to Dubbo 3.0 and new features enabled (enabled by default) to use application-level service discovery in the link. Take advantage of application-level service discovery.
Open method Server After the application is upgraded to Dubbo 3.0, the server will automatically enable the interface-level + application-level dual registration function, and the developer does not need to modify any configuration by default</description></item><item><title>Application-Level Service Discovery Migration Example</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/upgrades-and-compatibility/service-discovery/service-discovery-samples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/upgrades-and-compatibility/service-discovery/service-discovery-samples/</guid><description>Application-level service discovery is a protocol for service discovery between applications. Therefore, to use application-level service discovery, both the consumer and the server must be upgraded to Dubbo 3.0 and new features enabled (enabled by default) to use application-level service discovery in the link. Take advantage of application-level service discovery.
Open method Server After the application is upgraded to Dubbo 3.0, the server will automatically enable the interface-level + application-level dual registration function, and the developer does not need to modify any configuration by default</description></item><item><title>Call link to pass implicit parameters</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/attachment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/attachment/</guid><description>Feature description Parameters can be implicitly passed between the service consumer and the provider through setAttachment and getAttachment on RpcContext.
background Context information is a very important function of the RPC framework. Using RpcContext can specify different configurations for a single call. For example, in the distributed link tracking scenario, the implementation principle is to maintain a traceId in the context of the entire link. The Consumer and Provider connect an RPC call by passing the traceId.</description></item><item><title>Cluster Extension</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/impls/cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/impls/cluster/</guid><description>Summary Group service providers in a cluster, and treat them as one single provider.
Extension Interface org.apache.dubbo.rpc.cluster.Cluster
Extension Configuration &amp;lt;dubbo:protocol cluster=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- default configuration, will take affect if cluster attribute is not configured in &amp;lt;dubbo:protocol&amp;gt; --&amp;gt; &amp;lt;dubbo:provider cluster=&amp;#34;xxx&amp;#34; /&amp;gt; Existing Extensions org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterWrapper org.apache.dubbo.rpc.cluster.support.FailoverCluster org.apache.dubbo.rpc.cluster.support.FailfastCluster org.apache.dubbo.rpc.cluster.support.FailsafeCluster org.apache.dubbo.rpc.cluster.support.FailbackCluster org.apache.dubbo.rpc.cluster.support.ForkingCluster org.apache.dubbo.rpc.cluster.support.AvailableCluster org.apache.dubbo.rpc.cluster.support.MergeableCluster org.apache.dubbo.rpc.cluster.support.BroadcastCluster org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareCluster Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxCluster.java (Cluster implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.cluster.Cluster (plain text file with the content: xxx=com.</description></item><item><title>Cluster Expansion</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/cluster/</guid><description>Expansion Description When there are multiple service providers, organize multiple service providers into a cluster and pretend to be one provider.
Extension ports org.apache.dubbo.rpc.cluster.Cluster
Extended configuration &amp;lt;dubbo:protocol cluster=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- Default value configuration, if &amp;lt;dubbo:protocol&amp;gt; is not configured with cluster, use this configuration --&amp;gt; &amp;lt;dubbo:provider cluster=&amp;#34;xxx&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterWrapper org.apache.dubbo.rpc.cluster.support.FailoverCluster org.apache.dubbo.rpc.cluster.support.FailfastCluster org.apache.dubbo.rpc.cluster.support.FailsafeCluster org.apache.dubbo.rpc.cluster.support.FailbackCluster org.apache.dubbo.rpc.cluster.support.ForkingCluster org.apache.dubbo.rpc.cluster.support.AvailableCluster org.apache.dubbo.rpc.cluster.support.MergeableCluster org.apache.dubbo.rpc.cluster.support.BroadcastCluster org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareCluster Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxCluster.java (implements the Cluster interface) |-resources |-META-INF |-dubbo |-org.</description></item><item><title>Extension Guide</title><link>https://dubbo.apache.org/en/docs/contribution-guidelines/contributor/dubbo-extension-guide_dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/contribution-guidelines/contributor/dubbo-extension-guide_dev/</guid><description>Dubbo Use microkernel + plugin design pattern. Microkernel is only responsible for assembling plugins, the functions of Dubbo are implemented by extension points(plugins), which means that all functions of Dubbo can be replaced by user customized extension.
Dubbo Ecosystem We recommend you to put extension to Dubbo ecosystem. Using this pattern will keep the core repository cleaner and decrease the maintains work. With less code also speed up core repository build process.</description></item><item><title>Direct Connection Provider</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/explicit-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/explicit-target/</guid><description>This document is no longer maintained. You are currently viewing a snapshot version. If you want to view the latest version of the documentation, see Latest Version.
In the development and testing environment, it is often necessary to bypass the registration center and only test the specified service provider. At this time, point-to-point direct connection may be required. The point-to-point direct connection method will use the service interface as the unit and ignore the provider list of the registration center.</description></item><item><title>Dubbo Mesh</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/concepts-and-architecture/mesh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/concepts-and-architecture/mesh/</guid><description>From the design concept, Dubbo Mesh emphasizes the unified control, standardization and governance capabilities of the control plane, while giving more choices on the data plane, including deployment modes such as Sidecar Mesh and Proxyless Mesh. Multiple deployment models provide enterprises with more choices. Through the hybrid deployment model, while realizing the sharing of the service governance control plane, it can better respond to the deployment requirements of different scenarios (performance, deployment complexity, etc.</description></item><item><title>Dubbo-go Samples</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/samples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/samples/</guid><description>In order to facilitate the use of Dubbogo framework users, we provide the Samples repository for user reference:
[Dubbo-go-samples warehouse address]
1. Examples contained in the Samples repository config-api: use API for configuration initialization configcenter: Use different configuration centers, currently supports three types: zookeeper, apollo, and nacos context: how to use context to pass attachment direct: direct connection mode game: game service example generic: generalized call rpc: RPC call example, including Triple, Dubbo and other protocols and cross-language/gRPC interoperability examples helloworld: RPC call entry example logger: log example registry: Show the docking with different registry centers, including zk, nacos, etcd metrics: data reporting filter: Examples of using provided filters and custom filters registry/servicediscovery: application-level service discovery example router: routing example tracing: link tracing example 2.</description></item><item><title>Dynamic adjustment of service timeout</title><link>https://dubbo.apache.org/en/overview/tasks/traffic-management/timeout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/traffic-management/timeout/</guid><description>Dubbo provides the service governance capability of dynamically adjusting the timeout period, which can dynamically adjust the service timeout period without restarting the application.
Dubbo can dynamically adjust the timeout time through XML configuration, annotation configuration, and dynamic configuration. Here we mainly introduce the dynamic configuration method. For other configuration methods, please refer to the old document Configuration
before the start Please make sure to run Dubbo-Admin successfully
Background Information Various timeout configurations are encountered in daily work.</description></item><item><title>Dynamic IP call</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/specify-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/specify-ip/</guid><description>Feature description Use the extension of Dubbo to realize the specified IP call.
scenes to be used When initiating a request, you need to specify the server for this call, such as message callback, traffic isolation, etc.
How to use Plugin dependencies Adapt to Dubbo 3 version
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.dubbo.extensions&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;dubbo-cluster-specify-address-dubbo3&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Adapt to Dubbo 2 version
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.dubbo.extensions&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;dubbo-cluster-specify-address-dubbo2&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; call example ReferenceConfig&amp;lt;DemoService&amp;gt; referenceConfig = new ReferenceConfig&amp;lt;&amp;gt;(); // .</description></item><item><title>Ecosystem</title><link>https://dubbo.apache.org/en/overview/what/ecosystem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/what/ecosystem/</guid><description>Dashboard Dubbo-admin Supported Components and Deployment Architectures Dubbo implementations generally support the following products or deployment architectures, and specific multilingual SDK implementations may vary.
Registry Zookeeper Nacos Kubernetes Metadata center Zookeeper Nacos Redis Configuration center Zookeeper Nacos Redis Apollo Mesh Data plane Envoy Control plane Istio Protocols and Interoperability Interoperability with the gRPC system can be realized based on the Triple protocol Based on the REST protocol and application-level service discovery, the interoperability of the Spring Cloud system at the protocol and address discovery levels can be realized SPI Integration There are many Dubbo extension implementations here, including protocols, serialization, registration centers, etc.</description></item><item><title>Explicit Target</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/explicit-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/explicit-target/</guid><description>In the development and testing environment, it is often necessary to bypass the registry and test only designated service providers. In this case, point-to-point direct connection may be required, and the service provider will ignore the list of provider registration providers. The interface A configure Point-to-point, does not affect the B interface to obtain a list from the registry.
Configure with XML If it is online demand needs the point-to-point feature,You can configure the specified provider url at &amp;lt;dubbo:reference&amp;gt;.</description></item><item><title>Extension Points To Reconstruct</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/principals/extension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/principals/extension/</guid><description>http://javatar.iteye.com/blog/1041832
With the promotion of service, the website of Dubbo service framework requirements gradually increase, Dubbo existing developers can implement demand is limited, many requirements have been delay, and site classmates also want to participate, combined with field, so the platform will be open to internal part of the project, let everyone together to implement, Dubbo as one of the pilot project.
Now that want to open it, about to take some extension point Dubbo, let participants black box extend as far as possible, rather than a white box to modify the code, or branch, quality, merger, the conflict will be hard to manage.</description></item><item><title>gRPC Protocol</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/grpc/</guid><description>Feature description Dubbo has supported the gRPC protocol since version 2.7.5. For developers who plan to use HTTP/2 communication, or want to take advantage of the capabilities of Stream, backpressure, and Reactive programming brought by gRPC, You can consider enabling the gRPC protocol.
Benefits of supporting gRPC Bring service governance capabilities to users who expect to use the gRPC protocol, and facilitate access to the Dubbo system Users can use Dubbo-style, interface-based programming style to define and use remote services scenes to be used Synchronous backend microservice-to-microservice communication that requires an immediate response to continue processing.</description></item><item><title>How Configuration Works</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config/principle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config/principle/</guid><description>The following is an example of Dubbo property configuration dubbo-spring-boot-samples
## application.properties # Spring boot application spring.application.name=dubbo-externalized-configuration-provider-sample # Base packages to scan Dubbo Component: @com.alibaba.dubbo.config.annotation.Service dubbo.scan.base-packages=com.alibaba.boot.dubbo.demo.provider.service # Dubbo Application ## The default value of dubbo.application.name is ${spring.application.name} ## dubbo.application.name=${spring.application.name} #Dubbo Protocol dubbo.protocol.name=dubbo dubbo.protocol.port=12345 ## Dubbo Registry dubbo.registry.address=N/A ## service default version dubbo.provider.version=1.0.0 Next, around this example, we analyze the working principle of Dubbo configuration from three aspects: configuration format, configuration source, and loading process.</description></item><item><title>Interoperate with gRPC applications</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/interflow/call_grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/interflow/call_grpc/</guid><description>1. Preparations dubbo-go cli tools and dependent tools have been installed Create a new demo application 2. Interoperability between Dubbo-go application and gRPC application Reference dubbo-go-samples/rpc/triple/pb/dubbogo-grpc</description></item><item><title>Kubernetes Probe</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/dubbo-kubernetes-probe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/dubbo-kubernetes-probe/</guid><description>Feature description Pod lifecycle is closely related to service scheduling. Through the implementation of official Kubernetes probes, Dubbo3 and even the entire application can The life cycle of the Pod and the life cycle of the Pod. In the entire life cycle of the Pod, only the health check part of the Pod is affected. We can configure the liveness probe (survival probe) and readiness probe (readability probe) to Affects the life cycle of the container.</description></item><item><title>Kubernetes Probes</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/observability/kubernetes-probes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/observability/kubernetes-probes/</guid><description/></item><item><title>Configuration Loading Process</title><link>https://dubbo.apache.org/en/docs/v2.7/user/configuration/configuration-load-process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/configuration/configuration-load-process/</guid><description>This document focuses on how the Dubbo framework collects the required configuration (including application configuration, registry configuration, service configuration, etc.) during the application startup phase to complete the process of service exposure and reference.
Depending on how you drive it (such as Spring or naked API programming), the configuration form will certainly vary, for detail please refer to XML Configuration, Annotation Configuration and API Configuration. In addition to the differences in peripheral drivers, Dubbo&amp;rsquo;s configuration reads generally follow the following principles:</description></item><item><title>Logging framework runtime management</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/qos/logger-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/qos/logger-management/</guid><description>Logging framework runtime management Starting from 3.0.10, dubbo-qos runtime control supports querying log configuration and dynamically modifying the used log framework and log level.
Note: The log configuration modified by dubbo-qos is not stored persistently and will become invalid after the application is restarted.
1. Query log configuration Command: loggerInfo
Example:
&amp;gt; telnet 127.0.0.1 22222 &amp;gt; loggerInfo output:
Trying 127.0.0.1... Connected to localhost. Escape character is &amp;#39;^]&amp;#39;. ___ __ __ ___ ___ ____ / _ \ / / / // _ ) / _ ) / __ \ / // // /_/ // _ |/ _ |/ /_/ / /____/ \____//____//____/ \____/ dubbo&amp;gt;loggerInfo Available logger adapters: [jcl, jdk, log4j, slf4j].</description></item><item><title>memcached protocol</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/memcached/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/memcached/</guid><description>RPC protocol based on memcached implementation.
Register memcached service address RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension(); Registry registry = registryFactory.getRegistry(URL.valueOf(&amp;#34;zookeeper://10.20.153.10:2181&amp;#34;)); registry.register(URL.valueOf(&amp;#34;memcached://10.20.153.11/com.foo.BarService?category=providers&amp;amp;dynamic=false&amp;amp;application=foo&amp;amp;group=member&amp;amp;loadbalance=consistenthash&amp;#34;)); Use in client get service reference:
&amp;lt;dubbo:reference id=&amp;#34;cache&amp;#34; interface=&amp;#34;java.util.Map&amp;#34; group=&amp;#34;member&amp;#34; /&amp;gt; or direct access by IP:
&amp;lt;dubbo:reference id=&amp;#34;cache&amp;#34; interface=&amp;#34;java.util.Map&amp;#34; url=&amp;#34;memcached://10.20.153.10:11211&amp;#34; /&amp;gt; you can also use a custom interface：
&amp;lt;dubbo:reference id=&amp;#34;cache&amp;#34; interface=&amp;#34;com.foo.CacheService&amp;#34; url=&amp;#34;memcached://10.20.153.10:11211&amp;#34; /&amp;gt; The method name is the same as the standard method name of memcached, just like get(key), set(key, value), delete(key)。</description></item><item><title>Metadata Reference</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/metadata/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/metadata/</guid><description>Background There are close to 30 configurations in dubbo provider. Excluding registry center governance requirements, a large part of configurations are used by the provider itself and do not need to be delivered to the consumer. This part of the data does not need to be written to the registry, but only needs to be persisted as key-value. There are also 20+ configurations in dubbo consumer. In the registry center, only a few configurations such as application, version, group, ip, dubbo version are needed in the list of service consumers.</description></item><item><title>Install Simple monitor center</title><link>https://dubbo.apache.org/en/docs/v2.7/admin/install/monitor-center/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/admin/install/monitor-center/</guid><description>The function of monitor center will be merged to dubbo admin, based on metrics, coming soon</description></item><item><title>Apache Official Dubbo Page Maintenance</title><link>https://dubbo.apache.org/en/docs/contribution-guidelines/committer/apache-dubbo-page_dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/contribution-guidelines/committer/apache-dubbo-page_dev/</guid><description>Apache has an official website that maintains information about all incubation projects. Each incubation project has an information page under this website. Dubbo&amp;rsquo;s information page address is https://incubator.apache.org/projects/dubbo.html.
When the project has undergone major changes, such as the addition of a new committer, the election of a new PMC, or a new version of Release, etc, these updates need to be maintained on this page. The project address for this official website is https://svn.</description></item><item><title>Tracking with Pinpoint</title><link>https://dubbo.apache.org/en/docs/v2.7/admin/ops/pinpoint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/admin/ops/pinpoint/</guid><description>After using Dubbo to serve or integrate applications, assuming that a service backstage log shows an exception and that the service is invoked by multiple applications, it is often difficult to determine which application is called, and what is the cause of the problem, so we need a set of distributed tracking systems to quickly locate the problem. Pinpoint can help us quickly locate problems (of course, there are more than one solution).</description></item><item><title>Request Routing</title><link>https://dubbo.apache.org/en/overview/tasks/traffic-management/traffic-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/traffic-management/traffic-routing/</guid><description>Dubbo provides the service governance capability of dynamically creating conditional routing, which can route according to the request initiator and method without restarting the application.
Dubbo can implement dynamic routing according to request conditions through XML configuration, annotation configuration, and dynamic configuration. Here we mainly introduce the dynamic configuration method. For other configuration methods, please refer to the old document Configuration
before the start Please make sure to run Dubbo-Admin successfully</description></item><item><title>rmi protocol</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/rmi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/rmi/</guid><description>The RMI protocol uses the JDK standard java.rmi.* Implementation, using a block short connection and JDK standard serialization.
Features Number of connections: multiple connections Connection: short connection Transmission protocol: HTTP Transmission: synchronous transmission Serialization: Java standard Object Serialization Scope of application:the number of providers is more than that of consumers and can transfer files. Applicable scenarios: Conventional remote service method calls, interoperating with native RMI services Constraint Parameters and return values must implement Serializable interface The timeout configuration for RMI is invalid, you need to use java startup parameter settings:-Dsun.</description></item><item><title>Same computer room/area priority</title><link>https://dubbo.apache.org/en/overview/tasks/traffic-management/zone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/traffic-management/zone/</guid><description>Dubbo provides the service management capability of dynamically configuring the priority of the same computer room/region, and can dynamically configure the priority of the same computer room/region without restarting the application.
Dubbo can be configured through XML, annotation configuration, and dynamic configuration in the same computer room/area first. Here we mainly introduce the dynamic configuration method. For other configuration methods, please refer to the old document Configuration
before the start Please make sure to run Dubbo-Admin successfully</description></item><item><title>Tracing Dubbo service with Apache Skywalking</title><link>https://dubbo.apache.org/en/docs/v2.7/admin/ops/skywalking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/admin/ops/skywalking/</guid><description>Introduction to Apache Skywalking Apache Skywalking(Incubator) is the APM system that it designed for micro-services architectures and cloud native architecture systems and supports distribute tracking. Apache skywalking (incubator) collects and analyzes the trace data and generates the relationship between the application and the service metric, Apache skywalking supports multiple languages agent, for example Java,.net core,Node.js and Go.
Currently, Skywalking has supported analysis the operation of distributed systems from 6 visual dimensions.</description></item><item><title>Temporarily kick out the problem service instance</title><link>https://dubbo.apache.org/en/overview/tasks/traffic-management/isolation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/traffic-management/isolation/</guid><description>Dubbo provides the service management capability of temporarily removing problematic service instances, which can temporarily remove problematic service instances without restarting the application.
Dubbo can temporarily remove problem service instances through XML configuration, annotation configuration, and dynamic configuration. Here we mainly introduce the dynamic configuration method. For other configuration methods, please refer to the old document Configuration
before the start Please make sure to run Dubbo-Admin successfully
Background Information When the service is running online, it is inevitable that some nodes have problems.</description></item><item><title>Traffic Grayscale</title><link>https://dubbo.apache.org/en/overview/tasks/traffic-management/traffic-gray/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/traffic-management/traffic-gray/</guid><description>Dubbo provides traffic grayscale service management capabilities, and can configure label routing rules and conditional routing to achieve grayscale publishing without restarting the application.
Dubbo can achieve traffic grayscale through XML configuration, annotation configuration, and dynamic configuration. Here we mainly introduce the dynamic configuration method. For other configuration methods, please refer to the old document Configuration
before the start Please make sure to run Dubbo-Admin successfully
Background Information Scenarios of demand changes and version iterations will be encountered during product development.</description></item><item><title>Traffic Isolation</title><link>https://dubbo.apache.org/en/overview/tasks/traffic-management/traffic-condition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/traffic-management/traffic-condition/</guid><description>Dubbo provides the service management capability of dynamic traffic isolation, which can dynamically isolate traffic without restarting the application.
Dubbo can implement traffic isolation through XML configuration, annotation configuration, and dynamic configuration. Here we mainly introduce the dynamic configuration method. For other configuration methods, please refer to the old document Configuration
before the start Please make sure to run Dubbo-Admin successfully
Background Information If multiple versions of an application run simultaneously online and are deployed in different environments, such as daily environments and special environments, you can use label routing to isolate the traffic of different versions in different environments, and the order traffic of flash sales or orders from different channels Routing to special environments, routing normal traffic to everyday environments.</description></item><item><title>Triple exception return</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/protocol/exception_response/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/protocol/exception_response/</guid><description>Refer to samples dubbo-go-samples/error
User exception return introduction The user can generate user-defined exception information on the provider side, and can record the exception generation stack. The triple protocol can ensure that the user can get the exception message on the client side, and can view the error stack, which is convenient for locating the problem.
Note that when returning an error other than nil, the framework is not responsible for the delivery of other return values.</description></item><item><title>webservice protocol</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/webservice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/protocol/webservice/</guid><description>WebService-based remote calling protocol，base on Apache CXF frontend-simple and transports-http implements。
Interoperable with native WebService services：
Providers expose services using Dubbo&amp;rsquo;s WebService protocol, which consumers invoke directly using the standard WebService interface, Or the provider exposes the service using the standard WebService, which consumers invoke using the Dubbo WebService protocol. dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.cxf&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;cxf-rt-frontend-simple&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.6.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.cxf&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;cxf-rt-transports-http&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.6.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Features Number of connections: multiple connections Connection: short connection Transmission protocol: HTTP Transmission: synchronous transmission Serialization: SOAP text serialization Applicable scenarios: System integration, cross-language calls Constraint Parameters and return class should implement Serializable interface Parameters should try to use the basic types and POJO Configuration configure webservice protocol：</description></item><item><title>官方 Dubbo 主页的维护</title><link>https://dubbo.apache.org/en/latest/contribution-guidelines/committer/apache-dubbo-page_dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/latest/contribution-guidelines/committer/apache-dubbo-page_dev/</guid><description>Apache 有一个官方的网站，用来维护所有的孵化项目的信息。每一个孵化项目在这个网站下都有一个信息页。 Dubbo 的信息页地址是 https://incubator.apache.org/projects/dubbo.html。
当项目发生比较大的变化，比如新的 committer 的加入，新的 PMC 的当选，或是新版本的 Release 等，都需要将这些更新信息维护到这个页面。
这个官方网站的项目地址是https://svn.apache.org/repos/asf/incubator/public/trunk。
维护这个页面的方法如下：
1.安装 SVN。若是 Mac OS X 系统或是 Linux 系统，则自带了 SVN。若是 Windows 系统，则请首先自行安装 SVN。
2.用 SVN 将这个项目 checkout 下来 。
3.修改 content/projects/dubbo.xml 文件，并保存。
4.安装 ANT。执行 trunk 目录下的 build.sh 或者 build.bat 脚本构建项目。
5.构建完成后，可以用浏览器打开 target/site/projects/dubbo.html 文件，预览修改是否生效。
6.用 SVN 的 commit 命令将 dubbo.xml 文件提交到服务器，并且不要提交 dubbo.html 文件（因为服务器端会定时自动构建）。 此过程会要求输入Apache id和密码。
参考:
http://incubator.apache.org/guides/website.html https://svn.apache.org/repos/asf/incubator/public/trunk/README.txt</description></item><item><title>扩展 Dubbo 向导</title><link>https://dubbo.apache.org/en/latest/contribution-guidelines/contributor/dubbo-extension-guide_dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/latest/contribution-guidelines/contributor/dubbo-extension-guide_dev/</guid><description>Dubbo 使用微内核+插件的设计模式。内核只负责组装插件，Dubbo 的功能都是由扩展点（插件）实现，这就意味着 Dubbo 的所有功能都可以被用户定制的扩展所替代。
Dubbo 生态系统 我们建议您将扩展加入到 Dubbo 生态系统。使用这种模式，可以使 Dubbo 的核心仓库更干净，并且可以减少维护工作。更少的代码也可以提高核心仓库的构建速度。
依赖 要实现您自己的 Dubbo 扩展，通常只需依赖 API jar 就可以满足您的需求。例如：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.dubbo&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;dubbo-serialization-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${dubbo.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Src指导 通常，要实现特殊的扩展，只需要参考开发者指南，实现Dubbo必要的接口和合适的扩展即可。除此之外，还有一些其它的事项需要注意：
良好的测试，您需要编写单元测试和冒烟测试以消除潜在的 bug。 没有警告，如有不可避免的警告，请使用 @SuppressWarnings 阻止它，但是请不要乱用。 README。添加必要的自述以说明如何使用扩展，以及需要注意的事项。 许可证：请确保使用Apache License 2.0。 通知社区 提交您的代码到 github。 加入邮件列表（建议）。点击这里查看如何加入邮件列表。 发送一封邮件到 dev@incubator.dubbo.apache.org 通知社区。 通常，发送邮件之后，社区会对您的扩展进行讨论，dubbo 组的管理员会联系您转移您的项目到 dubbo 生态系统。 转移项目到dubbo生态系统 dubbo 组的管理员会请您将您的项目的所有者转让给 dubbo。 dubbo 组的管理员会在 dubbo 组下新建一个项目并邀请您加入到这个项目。 一旦您接受邀请，您可以将您的项目转移到 dubbo 组下的新项目里。 dubbo 组的成员会对您的项目进行代码审查。随后，您可以对这些代码进行改进。</description></item><item><title>0-6 - Thread interruption exception</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/6/</guid><description>Possible Reason When a running thread is in wait, sleep, join, it is explicitly called interrupt()
Troubleshooting and resolution steps After a normal running thread calls the interrupt() method, the interrupt status of the current thread will be set to true, but the execution of the thread will not be affected. You can operate according to the actual situation or check whether the business code is used incorrectly.</description></item><item><title>1-6 - Error clearing URL cache</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/6/</guid><description>Possible Reason An error while clearing the url cache in CacheableFailbackRegistry.RemovalTask will trigger an error in clearing the URL cache.
Troubleshooting and resolution steps This error is an internal error of Dubbo, if you encounter it, you can create issues on github and provide the error information and steps to reproduce, we will help you solve the problem.
see also Dubbo Community</description></item><item><title>2-6 - Conditional routing filter provider list is empty</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/6/</guid><description>Possible Reason Conditional routing provider filter condition is empty. Conditional routing filter provider list remains empty under forced downgrade. Troubleshooting and resolution steps Refer to the community request routing example to adjust the conditional routing configuration.</description></item><item><title>3-6 - An exception occurred in the proxy execution service</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/3/6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/3/6/</guid><description>Possible Reason The current service parameters have been displayed as deprecated. This reminder may appear for generic declaration classes. Troubleshooting and resolution steps Confirm whether there is a display parameter deprecated=true in the URL If this error occurs in the generic declaration class, it will try to create a proxy without the actual interface class.</description></item><item><title>4-6 - Deserialization failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/6/</guid><description>Possible Reason There is a logic error in the custom SPI org.apache.dubbo.common.serialize.Serialization serialization method.
Troubleshooting and resolution steps You can use some third-party tools or jstack [PID] &amp;gt; jstack.log to analyze the stack information and locate it.</description></item><item><title>5-6 - Attribute Conflict of Interface Type</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/6/</guid><description>Possible Reason The generalization definition is not configured correctly.
Troubleshooting and resolution steps Check that the generalization definition is correct.</description></item><item><title>6-6 - Unsupported message</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/6/</guid><description>Possible Reason The returned data is serialized incorrectly, or exceeds the serialization maximum
Troubleshooting and resolution steps You can use some third-party tools or jstack [PID] &amp;gt; jstack.log to analyze the stack information and locate it.
For the specific configuration items and meanings supported by each component, please refer to Configuration Item Manual</description></item><item><title>7-6 - Unknown exception occurred in QOS</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/7/6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/7/6/</guid><description>Possible Reason An unknown exception occurred in QOS Troubleshooting and resolution steps Check whether the currently requested service can be accessed normally. Perhaps for some reason, the CommandContext instance was not properly loaded or returned. You can troubleshoot and locate according to the error reminder information on the console.</description></item><item><title>Configuration Item Reference Manual</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config/properties/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/config/properties/</guid><description>Configuration Details application Each application must have one and only one application configuration, corresponding configuration class: org.apache.dubbo.config.ApplicationConfig
Attribute Corresponding URL parameter Type Required Default name application string Required Service Governance The name of the current application, which is used by the registry to calculate dependencies between applications. Note: the consumer and provider application names should not be the same, this parameter is not Matching conditions, you can fill in the name of your current project, which has nothing to do with the role of the provider and consumer.</description></item><item><title>Consistent Hash Site Selection</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/consistent-hash/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/consistent-hash/</guid><description>Feature description [Analysis of Dubbo Consistent Hash Load Balancing Implementation](/zh-cn/blog/2019/05/01/dubbo-%E4%B8%80%E8%87%B4%E6%80%A7hash%E8%B4%9F%E8 %BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E7%8E%B0%E5%89%96%E6%9E%90/)
scenes to be used When there are multiple servers, the server is selected according to the consistent hashing of the request parameters.
How to use There are many ways to configure consistent hashing, the most common are:
Annotation configuration @DubboReference(loadbalance = &amp;ldquo;consistenthash&amp;rdquo;)
API configuration referenceConfig.setLoadBalance(&amp;ldquo;consistenthash&amp;rdquo;);
Properties configuration dubbo.reference.loadbalance=consistenthash
XML configuration &amp;lt;dubbo:reference loadbalance=&amp;ldquo;consistenthash&amp;rdquo; /&amp;gt;
By default, the first parameter is used as the hash key.</description></item><item><title>Dubbo deploy to Docker environment</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/docker/</guid><description>Some deployment scenarios need to dynamically specify the address of service registration. For example, docker bridge network mode need to specify a registered host IP for external network communication. Dubbo provides two pairs of system attributes in the startup phase, which are used to set the IP and port addresses of external communication.
DUBBO_IP_TO_REGISTRY &amp;mdash; Registering to the IP address of the registration center DUBBO_PORT_TO_REGISTRY &amp;mdash; Registering to the port of the registration center DUBBO_IP_TO_BIND &amp;mdash; Listening IP addresses DUBBO_PORT_TO_BIND &amp;mdash; Listening ports The above four configurations are optional.</description></item><item><title>Document case</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/observability/doc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/observability/doc/</guid><description/></item><item><title>Some In The Design Of The Basic Common Sense</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/principals/general-knowledge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/principals/general-knowledge/</guid><description>http://javatar.iteye.com/blog/706098
Recently told the new team some design on the common sense, is likely to be new and some other help, the thought of a few temporarily, first write here.
The API and SPI separation Framework or component there are generally two types of customers, one is a consumer, is an extension.API (Application Programming Interface) is used to users, and SPI (Service dojo.provide Interface) is used to expand.At design time, try to put them off, and don&amp;rsquo;t mix.</description></item><item><title>HTTP protocol</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/http/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/http/</guid><description>Note Since Dubbo 3.3, the rest protocol has been moved to the extensions library, with the triple protocol now providing more comprehensive support for Rest. For details refer to Triple Rest User Manual.
If you wish to continue using the original rest protocol, please include the corresponding dubbo-spi-extensions dependency. Feature description HTTP form-based remote invocation protocol, implemented by Spring&amp;rsquo;s HttpInvoker, supported by versions above 2.3.0.
Number of connections: multiple connections Connection method: short connection Transmission protocol: HTTP Transmission method: synchronous transmission Serialization: form serialization Scope of application: The size of incoming and outgoing parameter data packets is mixed, the number of providers is more than that of consumers, it can be viewed with a browser, and parameters can be passed in by form or URL, and file transfer is not supported for now.</description></item><item><title>log</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/features/custom-logger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/features/custom-logger/</guid><description>Refer to samples dubbo-go-samples/logger
1. Log configuration dubbogo 3.0 uses the zap log library by default. If you do not add logger configuration in the configuration file, the log will be printed to the control. The default level is debug. You can also configure the log level in the configuration file. You can configure zap-config and lumberjack-config as follows to customize the log output.
dubbo: logger: zap-config: level: debug # log level development: false disableCaller: false disableStacktrace: false encoding: &amp;#34;console&amp;#34; # zap encoder configuration encoderConfig: messageKey: &amp;#34;message&amp;#34; levelKey: &amp;#34;level&amp;#34; timeKey: &amp;#34;time&amp;#34; nameKey: &amp;#34;logger&amp;#34; callerKey: &amp;#34;caller&amp;#34; stacktraceKey: &amp;#34;stacktrace&amp;#34; lineEnding: &amp;#34;&amp;#34; levelEncoder: &amp;#34;capitalColor&amp;#34; timeEncoder: &amp;#34;iso8601&amp;#34; durationEncoder: &amp;#34;seconds&amp;#34; callerEncoder: &amp;#34;short&amp;#34; nameEncoder: &amp;#34;&amp;#34; outputPaths: - &amp;#34;stderr&amp;#34; errorOutputPaths: - &amp;#34;stderr&amp;#34; lumberjack-config: # Write the log file name filename: &amp;#34;logs.</description></item><item><title>Public Agreement</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/contract/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/contract/</guid><description>This document is Dubbo public agreement, we expect all extension points comply with it.
URL All extension points must include URL parameter, design URL as a context information which throughouts the whole extension point design system. URL standard style: protocol://username:password@host:port/path?key=value&amp;amp;key=value Logging Print ERROR log for unrecoverable and NEED TO ALARM situation. Print WARN log for recoverable exception or transient state inconsistency. Print INFO log for normally status.</description></item><item><title>Router Extension</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/impls/router/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/impls/router/</guid><description>Summary Pick one from service providers and fire the invocation.
Extension Interface org.apache.dubbo.rpc.cluster.RouterFactory org.apache.dubbo.rpc.cluster.Router Existing Extension org.apache.dubbo.rpc.cluster.router.ScriptRouterFactory org.apache.dubbo.rpc.cluster.router.FileRouterFactory org.apache.dubbo.rpc.cluster.router.condition.config.AppRouterFactory org.apache.dubbo.rpc.cluster.CacheableRouterFactory org.apache.dubbo.rpc.cluster.router.condition.ConditionRouterFactory org.apache.dubbo.rpc.cluster.router.mock.MockRouterFactory org.apache.dubbo.rpc.cluster.router.condition.config.ServiceRouterFactory org.apache.dubbo.rpc.cluster.router.tag.TagRouterFactory Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxRouterFactory.java (RouterFactory implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.cluster.RouterFactory (plain text file with the content: xxx=com.xxx.XxxRouterFactory) XxxRouterFactory.java：
package com.xxx; import org.apache.dubbo.rpc.cluster.RouterFactory; import org.apache.dubbo.rpc.Invoker; import org.apache.dubbo.rpc.Invocation; import org.apache.dubbo.rpc.RpcException; public class XxxRouterFactory implements RouterFactory { public Router getRouter(URL url) { // .</description></item><item><title>Route Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/router/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/router/</guid><description>Expansion Description Select one of multiple service providers to call.
Extension ports org.apache.dubbo.rpc.cluster.RouterFactory org.apache.dubbo.rpc.cluster.Router Known extensions org.apache.dubbo.rpc.cluster.router.ScriptRouterFactory org.apache.dubbo.rpc.cluster.router.FileRouterFactory org.apache.dubbo.rpc.cluster.router.condition.config.AppRouterFactory org.apache.dubbo.rpc.cluster.CacheableRouterFactory org.apache.dubbo.rpc.cluster.router.condition.ConditionRouterFactory org.apache.dubbo.rpc.cluster.router.mock.MockRouterFactory org.apache.dubbo.rpc.cluster.router.condition.config.ServiceRouterFactory org.apache.dubbo.rpc.cluster.router.tag.TagRouterFactory Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxRouterFactory.java (implements RouterFactory interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.cluster.RouterFactory (plain text file, content: xxx=com.xxx.XxxRouterFactory) XxxRouterFactory.java:
package com.xxx; import org.apache.dubbo.rpc.cluster.RouterFactory; import org.apache.dubbo.rpc.Invoker; import org.apache.dubbo.rpc.Invocation; import org.apache.dubbo.rpc.RpcException; public class XxxRouterFactory implements RouterFactory { public Router getRouter(URL url) { //... } } META-INF/dubbo/org.</description></item><item><title>RPC call context</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/context/</guid><description>Feature description The context stores the environment information needed in the current calling process. All configuration information will be converted to URL parameters, see the corresponding URL parameters column in schema configuration reference manual.
RpcContext is a temporary state recorder for ThreadLocal. When RPC requests are received or RPC requests are initiated, the state of RpcContext will change. For example: A tunes B, B then tunes C, then on machine B, before B tunes C, RpcContext records the information of A&amp;rsquo;s tune to B, after B tunes C, RpcContext records the information of B&amp;rsquo;s tune to C.</description></item><item><title>Serialization Protocol Upgrade Guide</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/upgrades-and-compatibility/serialization-upgrade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/upgrades-and-compatibility/serialization-upgrade/</guid><description>In version 3.1.0, the serialization protocol supported by Dubbo by default adds support for Fastjson2. Some users may consider upgrading the serialization protocol in the existing system, but the difference between the server and client versions may cause the client to not support the serialization protocol of the server. In version 3.2.0, Dubbo&amp;rsquo;s server introduces a new configuration prefer-serialization, which can perfectly solve the possible risks in the server-side serialization upgrade process.</description></item><item><title>Subscribe Only</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/subscribe-only/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/subscribe-only/</guid><description>To facilitate the development of tests, it is common to have a registry of all services available in develop environment.And the registration of a service provider under development may affect consumers&amp;rsquo; inability to run.
You can let service provider developers only subscribe to services only (services developed may rely on other services) ,don&amp;rsquo;t register services under development and testing services under development with directly connection.
User configuration:
&amp;lt;dubbo:registry address=&amp;#34;10.20.153.10:9090&amp;#34; register=&amp;#34;false&amp;#34; /&amp;gt; or</description></item><item><title>Subscription Only</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/subscribe-only/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/subscribe-only/</guid><description>Feature description In order to facilitate development and testing, a registration center that is available for all services is often shared offline. At this time, if a service provider under development registers, it may affect the normal operation of consumers.
The service provider developer can only subscribe to the service (the developed service may depend on other services), without registering the service under development, and test the service under development through direct connection.</description></item><item><title>Triple Protocol</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/concepts-and-architecture/triple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/concepts-and-architecture/triple/</guid><description>Protocol Description Triple is an HTTP2-based open protocol proposed by Dubbo3, which aims to solve the interoperability problems brought about by Dubbo2&amp;rsquo;s private protocol. Compared with the original Dubbo2 protocol, Triple has the following advantages:
Interoperability between native and gRPC protocols. Open up the gRPC ecology and reduce the migration cost from gRPC to Dubbo. Enhance multilingual ecology. Avoid the problem of difficulty in business selection and adaptation due to insufficient capabilities of Dubbo SDK in CPP/C#/RUST and other languages.</description></item><item><title>Use ctx to pass context information</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/features/context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/features/context/</guid><description>1. Preparations dubbo-go cli tools and dependent tools have been installed Create a new demo application 2. Use context to pass additional information Reference dubbo-go-samples/context</description></item><item><title>0-7 - Reflection class not found</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/7/</guid><description>Possible Reason Generally, when Class.forName(className) executes this method, the current class of className cannot be found. The business code shows that the current className class is excluded, so it is not found when loading. Troubleshooting and resolution steps Check whether className exists in Class.forName(className). Check the business code to see whether some classes or packages have been excluded by using the configuration or scanning annotation exclude.</description></item><item><title>1-7 - Notification registration event failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/7/</guid><description>Possible Reason When applied to related platforms based on the xDS protocol, when metadata is updated, consumers need to be notified. If a consumer is offline, the notification will fail and the listener of the corresponding consumer will be removed. Troubleshooting and resolution steps see also Registration Center - Configuration Item Reference Manual</description></item><item><title>2-7 - Conditional routing execution exception</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/7/</guid><description>Possible Reason Conditional routing rules are not configured according to the specification, resulting in exceptions when executing conditional routing filtering. Troubleshooting and resolution steps Refer to the community request routing example to adjust the conditional routing configuration.</description></item><item><title>3-7 - Server response timed out</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/3/7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/3/7/</guid><description>The server did not get a response within the time set by the client.
Possible Reason The business processing logic of the server is complex and cannot respond within the effective time. The connection between the server and the client is disconnected, and the network packet is lost. The server load is too high. Troubleshooting and resolution steps Check whether there is indeed a performance bottleneck in the business processing capability of the server.</description></item><item><title>4-7 - An error occurred while closing the client</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/7/</guid><description>Possible Reason Troubleshooting and resolution steps You can use some third-party tools or jstack [PID] &amp;gt; jstack.log to analyze the stack information and locate it.</description></item><item><title>5-7 - An unexpected error occurred while canceling the export</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/7/</guid><description>Possible Reason The service of the configuration center cannot be connected. The configured protocol, IP, and port are incorrect. The client version of the configuration center conflicts with the server version, and a valid connection cannot be established. Troubleshooting and resolution steps Check whether the service status of the configuration center is normal. Check that the configured protocol, IP, and port are incorrect. Check whether the version of the configuration center client used is compatible with the version of the server.</description></item><item><title>6-7 - Thread Connection Exceeded Warning</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/7/</guid><description>Reminder message when the number of connections exceeds the limit
Possible Reason A warning reminder that the configuration or the number of connections exceeds the configured number.
Troubleshooting and resolution steps The default configuration item connect.queue.warning.size=1000 can be adjusted through configuration.</description></item><item><title>7-7 - QOS Unprivileged Access</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/7/7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/7/7/</guid><description>Possible Reason This QoS request does not have permission to access the corresponding resources, which usually occurs in a malicious attack scenario
Troubleshooting and resolution steps Check whether the request is expected, if not, please check whether there is a malicious attack source, If it is expected, please refer to QoS Security to configure the corresponding permission information .</description></item><item><title>API Reference</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/api/</guid><description>Generally speaking, dubbo keeps its functionality no intrusive as much as possible, but for some particular features, there&amp;rsquo;s no other way not only API can achieve. Warning Do not rely on APIs other than what&amp;rsquo;re mentioned here, otherwise your application may face the risk of incompatibility after upgrade dubbo. These APIs are summarized here below:
Configuration API org.apache.dubbo.config.ServiceConfig org.apache.dubbo.config.ReferenceConfig org.apache.dubbo.config.ProtocolConfig org.apache.dubbo.config.RegistryConfig org.apache.dubbo.config.MonitorConfig org.apache.dubbo.config.ApplicationConfig org.apache.dubbo.config.ModuleConfig org.apache.dubbo.config.ProviderConfig org.apache.dubbo.config.ConsumerConfig org.apache.dubbo.config.MethodConfig org.apache.dubbo.config.ArgumentConfig Pls. refer to API Configuration for further information.</description></item><item><title>Call Result Cache</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/result-cache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/result-cache/</guid><description>Feature description cache type lru deletes redundant caches based on the least recently used principle, keeping the hottest data cached. threadlocal The current thread cache, such as a page rendering, uses many portals, and each portal needs to check user information. Through thread caching, this redundant access can be reduced. jcache integrates with JSR107 to bridge various cache implementations. Cache Type Extensible Cache Extensions
About sample code
scenes to be used The result cache is used to speed up access to popular data.</description></item><item><title>Custom extension</title><link>https://dubbo.apache.org/en/overview/tasks/extensibility/filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/extensibility/filter/</guid><description/></item><item><title>generalization call</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/features/generic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/features/generic/</guid><description>1. Dubbo-go generalization calls Java Server Use Triple protocol + hessian2 serialization scheme
1.1 Java-Server startup Transmission structure definition package org.apache.dubbo; import java.io.Serializable; import java.util.Date; public class User implements Serializable { private String id; private String name; private int age; private Date time = new Date(); } Interface definition package org.apache.dubbo; import java.util.ArrayList; import java.util.List; import java.util.Map; //import org.apache.dubbo.rpc.filter.GenericFilter; public interface UserProvider { User GetUser1(String userId); } 1.2 Go-Client generalization call Constructing a generalized interface reference in the form of an API is shown here</description></item><item><title>Load Balancing Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/load-balance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/load-balance/</guid><description>Expansion Description Select one of multiple service providers to call
Extension ports org.apache.dubbo.rpc.cluster.LoadBalance
Extended configuration &amp;lt;dubbo:protocol loadbalance=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- Default value setting, when &amp;lt;dubbo:protocol&amp;gt; does not configure loadbalance, use this configuration --&amp;gt; &amp;lt;dubbo:provider loadbalance=&amp;#34;xxx&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.rpc.cluster.loadbalance.RandomLoadBalance org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance org.apache.dubbo.rpc.cluster.loadbalance.LeastActiveLoadBalance org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance org.apache.dubbo.rpc.cluster.loadbalance.ShortestResponseLoadBalance Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxLoadBalance.java (implements the LoadBalance interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.cluster.LoadBalance (plain text file, content: xxx=com.xxx.XxxLoadBalance) XxxLoadBalance.java:
package com.xxx; import org.</description></item><item><title>LoadBalance Extension</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/impls/load-balance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/impls/load-balance/</guid><description>Summary Pick one from service providers and fire the invocation.
Extension Interface org.apache.dubbo.rpc.cluster.LoadBalance
Extension Configuration &amp;lt;dubbo:protocol loadbalance=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- default configuration, will take effect when loadbalance is not configured in &amp;lt;dubbo:protocol&amp;gt; --&amp;gt; &amp;lt;dubbo:provider loadbalance=&amp;#34;xxx&amp;#34; /&amp;gt; Existing Extension org.apache.dubbo.rpc.cluster.loadbalance.RandomLoadBalance org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance org.apache.dubbo.rpc.cluster.loadbalance.LeastActiveLoadBalance org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance org.apache.dubbo.rpc.cluster.loadbalance.ShortestResponseLoadBalance Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxLoadBalance.java (LoadBalance implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.cluster.LoadBalance (plain text file with the content: xxx=com.xxx.XxxLoadBalance) XxxLoadBalance.java：
package com.xxx; import org.apache.dubbo.rpc.cluster.LoadBalance; import org.</description></item><item><title>Logging Framework Configuration and Usage</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/logger-howto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/others/logger-howto/</guid><description>Feature Description Prior to dubbo 3.3.0-beta.3, dubbo and dubbo-samples were using a mix of log4j and logback, leading to frequent conflicts and errors due to some modules lacking log configuration. Therefore, after 3.3.0-beta.3, the logging components have been upgraded to log4j2 for simplicity and reduced maintenance costs. This document explains how to configure and use the logging framework to avoid conflicts caused by indirectly introducing multiple logging frameworks.
How To Use Usage Conventions Please use log4j2 as the logging framework, and avoid using log4j and logback.</description></item><item><title>Metrics data reporting</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/monitor/metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/monitor/metrics/</guid><description>Reference Samples: dubbo-go-samples/metrics
1. Data reporting configuration When the metrics: field is not specified, the pull mode prometheus data reporting is enabled by default, the default port is 9090, and the monitoring path defaults to /metrics. You can customize it by referring to the server configuration example below.
dubbo: application: version: 3.0.0-rc3 # version number metrics: enable: true # default is true path: /custom-metrics-path # default is /metrics port: 9091 # default is 9090 namespace: dubbo # default is dubbo as the prefix for data reporting metrics registries: myzk: protocol: zookeeper address: localhost:2181 protocols: triple: name: tri port: 20000 provider: services: GreeterProvider: group: dubbo-go # belongs to the group, need to be consistent with the client interface: com.</description></item><item><title>Performance Sampling Command</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/qos/profiler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/qos/profiler/</guid><description>The performance sampling function can detect the time consumption of various parts of the Dubbo processing link. When a timeout occurs, ( usageTime / timeout &amp;gt; profilerWarnPercent * 100 ) records the time consumption of calls through logs.
This function is divided into simple profiler and detail profiler two modes, where simple profiler mode is enabled by default, and detail profiler mode is disabled by default. Compared with the simple profiler mode, the detail profiler collects more time-consuming processing of each filter, specific time-consuming protocols, etc.</description></item><item><title>The Robustness Of The Design Implementation</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/principals/robustness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/principals/robustness/</guid><description>Dubbo as a remote service exposure, calls and management solutions, through the meridians of the application is running, its itself to achieve robustness of importance is self-evident.
Here are some Dubbo principle and method of use.
The log Logging is one of the most commonly used way to find, discover problems. Log quality is often neglected, there is no log on using expressly agreed upon. Attaches great importance to the use of the Log, and improve the concentration of the Log information.</description></item><item><title>Simple Registry</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/registry/simple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/registry/simple/</guid><description>This function has been removed in Dubbo 2.7, please select other registry for migration.
The Simple registry itself is an ordinary Dubbo service, which can reduce third-party dependencies and make the overall communication method consistent.
configuration Expose the Simple registry as a Dubbo service:
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:dubbo=&amp;#34;http://dubbo.apache.org/schema/dubbo&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema /dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&amp;#34;&amp;gt; &amp;lt;!-- Current application information configuration --&amp;gt; &amp;lt;dubbo:application name=&amp;#34;simple-registry&amp;#34; /&amp;gt; &amp;lt;!-- Expose service protocol configuration --&amp;gt; &amp;lt;dubbo:protocol port=&amp;#34;9090&amp;#34; /&amp;gt; &amp;lt;!</description></item><item><title>Test Coverage Guide</title><link>https://dubbo.apache.org/en/docs/contribution-guidelines/contributor/test-coverage-guide_dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/contribution-guidelines/contributor/test-coverage-guide_dev/</guid><description>The benefits of unit testing Unit test code can help everyone to go into details and understand the function of the code. We can find bugs by test case, and then enhance the robustness of the code. Test case code is also the demo usage of the core code. Some design principle of unit test case Steps, fine-grained and combination conditions should be well designed. Attention to boundary condition test Test code should also be designed without writing useless code.</description></item><item><title>Thrift protocol</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/thrift/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/thrift/</guid><description>Feature description The thrift protocol currently supported by dubbo is an extension of the thrift native protocol, adding some additional header information on the basis of the native protocol, such as service name, magic number, etc. 2.3.0 and above are supported.
Thrift is an RPC framework donated by Facebook to Apache.
Using the dubbo thrift protocol also needs to use thrift&amp;rsquo;s idl compiler to compile and generate the corresponding java code, and some enhancements will be made in this regard in subsequent versions.</description></item><item><title>测试覆盖率向导</title><link>https://dubbo.apache.org/en/latest/contribution-guidelines/contributor/test-coverage-guide_dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/latest/contribution-guidelines/contributor/test-coverage-guide_dev/</guid><description>写单元测试的收益 单元测试能帮助每个人深入代码细节，了解代码的功能。 通过测试用例我们能发现bug，并提交代码的健壮性。 测试用例同时也是代码的demo用法。 单元测试用例的一些设计原则 应该精心设计好步骤，颗粒度和组合条件。 注意边界条件。 单元测试也应该好好设计，不要写无用的代码。 当你发现一个方法很难写单元测试时，如果可以确认这个方法是臭代码，那么就和开发者一起重构它。 Dubbo中用的mock框架是: mockito. 下面是一些开发向导:mockito tutorial,mockito refcard TDD（可选）：当你开始写一个新的功能时，你可以试着先写测试用例。 测试覆盖率设定值 在现阶段，Delta更改代码的测试覆盖设定值为：&amp;gt;＝60%，越高越好。 我们可以在这个页面中看到测试报告: https://codecov.io/gh/apache/dubbo</description></item><item><title>0-8 - reflection failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/8/</guid><description>Possible Reason When a method is called by reflection, the correct parameter type value is not set for the current method, that is, the parameter type does not match.
Troubleshooting and resolution steps Check for matching type values that are not set correctly.</description></item><item><title>1-8 - Unregister (unsubscribe) address failed on destroy</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/8/</guid><description>Possible Reason An error may occur when the consumer logs out or unsubscribes due to the downtime of the registration center. It may be that the corresponding provider has not been released successfully. Troubleshooting and resolution steps Check whether the registration center is running normally. Check whether the provider is released successfully. Check whether the provider’s registry-related parameters such as registry config-center metadata-report are configured correctly. see also Configuration item reference manual</description></item><item><title>2-8 - The provider returned an abnormal response</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/8/</guid><description>Possible Reason The provider&amp;rsquo;s own processing result throws an exception. Troubleshooting and resolution steps Check whether the provider program is normal.</description></item><item><title>3-8 - Proxy Failure</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/3/8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/3/8/</guid><description>Failed to generate dynamic proxy.
Possible Reason There is dynamic class loading Class format exception Troubleshooting and resolution steps If Fallback to use JDK proxy success is displayed in the log, It means that Dubbo has successfully created a dynamic proxy after automatically falling back to the JDK proxy. If the program is running normally, you can ignore it If the log shows Fallback to use JDK proxy is also failed, Please check whether the corresponding class loading is normal according to the exception stack information, you can use tools such as arthas to assist in troubleshooting</description></item><item><title>4-8 - An error occurred while closing the server</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/8/</guid><description>Possible Reason Troubleshooting and resolution steps You can use some third-party tools or jstack [PID] &amp;gt; jstack.log to analyze the stack information and locate it.</description></item><item><title>5-8 - The protocol will use a random available port</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/8/</guid><description>Possible Reason The port specified by the protocol is occupied, and the port is randomly selected for startup.
Troubleshooting and resolution steps Check whether the currently configured port is occupied by other applications.</description></item><item><title>6-8 - Return data decoding failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/8/</guid><description>Possible Reason Return data format error or decoding failed
Troubleshooting and resolution steps Through the debug/warn log mode, the specific service class name and the returned message and stack information can be output.</description></item><item><title>Call trigger event notification</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/events-notify/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/events-notify/</guid><description>Feature description Before calling, after calling, and when an exception occurs, three events oninvoke, onreturn, and onthrow will be triggered. You can configure which method of which class to notify when an event occurs.
Reference use case https://github.com/apache/dubbo-samples/tree/master/dubbo-samples-notify
scenes to be used Before calling the service method, we can record the start time, and after the call ends, we can count the entire call cost. When an exception occurs, we can warn or print error logs, or record request logs and response logs before and after calling the service.</description></item><item><title>exception information return</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/protocol/error/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/protocol/error/</guid><description>1. Preparations dubbo-go cli tools and dependent tools have been installed Create a new demo application 2. Pass exception information Refer to samples dubbo-go-samples/error
User exception return introduction The user can generate user-defined exception information on the provider side, and can record the exception generation stack. The triple protocol can ensure that the user can get the exception message on the client side, and can view the error stack, which is convenient for locating the problem.</description></item><item><title>generalization call</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/features/generic-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/features/generic-2/</guid><description>1. Dubbogo generalization calls Java Server Use Triple protocol + hessian2 serialization scheme
Please refer to Dubbogo 3.0 Generalization Call Documentation
1.1 Java-Server startup Transmission structure definition package org.apache.dubbo; import java.io.Serializable; import java.util.Date; public class User implements Serializable { private String id; private String name; private int age; private Date time = new Date(); } Interface definition package org.apache.dubbo; import java.util.ArrayList; import java.util.List; import java.util.Map; //import org.apache.dubbo.rpc.filter.GenericFilter; public interface UserProvider { User GetUser1(String userId); } 1.</description></item><item><title>Merge result extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/merger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/merger/</guid><description>Expansion Description Merge returns results for grouping and aggregation.
Extension ports org.apache.dubbo.rpc.cluster.Merger
Extended configuration &amp;lt;dubbo:method merger=&amp;#34;xxx&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.rpc.cluster.merger.ArrayMerger org.apache.dubbo.rpc.cluster.merger.ListMerger org.apache.dubbo.rpc.cluster.merger.SetMerger org.apache.dubbo.rpc.cluster.merger.MapMerger org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger org.apache.dubbo.rpc.cluster.merger.CharArrayMerger org.apache.dubbo.rpc.cluster.merger.ShortArrayMerger org.apache.dubbo.rpc.cluster.merger.IntArrayMerger org.apache.dubbo.rpc.cluster.merger.LongArrayMerger org.apache.dubbo.rpc.cluster.merger.FloatArrayMerger org.apache.dubbo.rpc.cluster.merger.DoubleArrayMerger org.apache.dubbo.rpc.cluster.merger.BooleanArrayMerger Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxMerger.java (implement Merger interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.cluster.Merger (plain text file, content: xxx=com.xxx.XxxMerger) XxxMerger.java:
package com.xxx; import org.apache.dubbo.rpc.cluster.Merger; public class XxxMerger&amp;lt;T&amp;gt; implements Merger&amp;lt;T&amp;gt; { public T merge(T... results) { //.</description></item><item><title>Merger Extension</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/impls/merger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/impls/merger/</guid><description>Summary Merge strategy for return result aggregation in group.
Extension Interface org.apache.dubbo.rpc.cluster.Merger
Extension Configuration &amp;lt;dubbo:method merger=&amp;#34;xxx&amp;#34; /&amp;gt; Existing Extension org.apache.dubbo.rpc.cluster.merger.ArrayMerger org.apache.dubbo.rpc.cluster.merger.ListMerger org.apache.dubbo.rpc.cluster.merger.SetMerger org.apache.dubbo.rpc.cluster.merger.MapMerger org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger org.apache.dubbo.rpc.cluster.merger.CharArrayMerger org.apache.dubbo.rpc.cluster.merger.ShortArrayMerger org.apache.dubbo.rpc.cluster.merger.IntArrayMerger org.apache.dubbo.rpc.cluster.merger.LongArrayMerger org.apache.dubbo.rpc.cluster.merger.FloatArrayMerger org.apache.dubbo.rpc.cluster.merger.DoubleArrayMerger org.apache.dubbo.rpc.cluster.merger.BooleanArrayMerger Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxMerger.java (Merger implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.cluster.Merger (plain text file with the content: xxx=com.xxx.XxxMerger) XxxMerger.java：
package com.xxx; import org.apache.dubbo.rpc.cluster.Merger; public class XxxMerger&amp;lt;T&amp;gt; implements Merger&amp;lt;T&amp;gt; { public T merge(T... results) { // .</description></item><item><title>Rmi agreement</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/rmi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/rmi/</guid><description>Feature description The RMI protocol is implemented using the JDK standard java.rmi.*, using blocking short connections and JDK standard serialization.
Number of connections: multiple connections Connection method: short connection Transport protocol: TCP Transmission method: synchronous transmission Serialization: Java standard binary serialization Scope of application: Incoming and outgoing parameter packets are mixed in size, the number of consumers and providers is similar, and files can be transferred. Applicable scenarios: regular remote service method calls, interoperability with native RMI services Constraints Parameters and return values need to implement Serializable interface The timeout in dubbo configuration is invalid for RMI, you need to use the java startup parameter setting: -Dsun.</description></item><item><title>Routing Status Command</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/qos/router-snapshot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/qos/router-snapshot/</guid><description>Many of Dubbo&amp;rsquo;s traffic management capabilities are implemented based on Router. In a production environment, if traffic results do not meet expectations, you can use the routing status command to check the routing status to locate possible problems.
Reference link: routing status collection
getRouterSnapshot command Get the current grouping status of each layer of routing. (Only supports StateRouter)
Command: getRouterSnapshot {serviceName}
serviceName is the name of the service to be collected, which supports matching</description></item><item><title>0-9 - Failed to notify event</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/9/</guid><description>Possible Reason A custom listener that generated a runtime exception during processing.
Troubleshooting and resolution steps Check the business class that implements the org.apache.dubbo.rpc.ExporterListener interface. There may be code logic errors in the implementation method.</description></item><item><title>1-9 - Failed to read and write registry service cache</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/9/</guid><description>Possible Reason Multiple Dubbo processes (or other Java processes) use the same cache file. Due to the file system permission problem of the directory where the cache file is located, reading and writing fails. The value of dubbo.registry.file is entered incorrectly. Accidentally specify two registries to use the same file store. Hint: If dubbo.registry.file is not specified, the registry service cache path defaults to the ~/.dubbo directory (where ~ is the user&amp;rsquo;s HOME directory)</description></item><item><title>2-9 - Increase timeout check task failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/9/</guid><description>Possible Reason The Dubbo framework will add a timeout check task to the request call, and the added timeout check task fails. Troubleshooting and resolution steps This exception is an exception of the Dubbo framework itself. Please file an issue in the community and provide the environment site information and reproduction steps.</description></item><item><title>4-9 - Parse failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/9/</guid><description>Possible Reason Generally, the parameter value does not conform to the rules, and an error occurs during forced conversion.
Troubleshooting and resolution steps Modify the configuration according to the key name prompted by the stack information.</description></item><item><title>5-9 - Service Configuration Export Failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/9/</guid><description>Possible Reason The service of the configuration center cannot be connected. The configured protocol, IP, and port are incorrect. The client version of the configuration center conflicts with the server version, and a valid connection cannot be established. Troubleshooting and resolution steps Check whether the service status of the configuration center is normal. Check that the configured protocol, IP, and port are incorrect. Check whether the version of the configuration center client used is compatible with the version of the server.</description></item><item><title>6-9 - There are duplicate serial number IDs</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/9/</guid><description>Possible Reason An empty object is returned. The custom serial number class, org.apache.dubbo.common.serialize.Serialization#getContentTypeId is duplicated with the built-in system, At this time, when loading, the first loaded SPI instance shall prevail. Other items will be skipped. Troubleshooting and resolution steps Check the return result. The built-in value can refer to the class org.apache.dubbo.common.serialize.Constants</description></item><item><title>Brief</title><link>https://dubbo.apache.org/en/docs/v3.0/references/lifecycle/brief/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v3.0/references/lifecycle/brief/</guid><description>Pod Lifecycle is closely related to micro-service scheduling. Through the implementation of official Kubernetes probes, the life cycle of Dubbo and even the entire application can be aligned with the Pod Lifecycle. Using Dubbo&amp;rsquo;s SPI mechanism, a variety of &amp;ldquo;probes&amp;rdquo; are implemented internally. Based on the HTTP service of the Dubbo QOS operation and maintenance module, the container probe can obtain the status of the corresponding probe in the application. In addition, the implementation mechanism of SPI is also conducive to users to expand their own internal &amp;ldquo;probes&amp;rdquo;, so that the entire application life cycle can be more effectively controlled.</description></item><item><title>Multi-protocol</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/multi-protocols/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/multi-protocols/</guid><description>Feature description Dubbo allows multi-protocol configuration, supports different protocols on different services or supports multiple protocols on the same service at the same time.
scenes to be used How to use Different protocols for different services Different services apply different protocols for transmission in terms of performance. For example, short connection protocols are used for large data, and long connection protocols are used for small data and large concurrency.
&amp;lt;?xml version=&amp;#34;1.</description></item><item><title>Multiple Protocols</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/multi-protocols/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/multi-protocols/</guid><description>Dubbo allows you to configure multiple protocols, support different protocols on different services, or support multiple protocols on the same service.
Every service export to one specific protocol separately Different protocol performance is not the same. Such as big data should use short connection protocol, small data and concurrent should use long connection protocol.
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:dubbo=&amp;#34;http://dubbo.apache.org/schema/dubbo&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&amp;#34;&amp;gt; &amp;lt;dubbo:application name=&amp;#34;world&amp;#34; /&amp;gt; &amp;lt;dubbo:registry id=&amp;#34;registry&amp;#34; address=&amp;#34;10.</description></item><item><title>Redis protocol</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/redis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/redis/</guid><description>Feature description RPC protocol implemented based on Redis. 2.3.0 and above are supported.
Redis is an efficient KV storage server.
scenes to be used Caching, current limiting, distributed locks, etc.
How to use Import dependencies Starting from Dubbo 3, the Redis protocol is no longer embedded in Dubbo, and an independent module needs to be introduced separately.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.dubbo.extensions&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;dubbo-rpc-redis&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Register the address of the redis service RegistryFactory registryFactory = ExtensionLoader.</description></item><item><title>Registry Extension</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/impls/registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/impls/registry/</guid><description>Summary Registry extension is used for service registration and discovery.
Extension Interface org.apache.dubbo.registry.RegistryFactory org.apache.dubbo.registry.Registry Extension Configuration &amp;lt;!-- config registry server --&amp;gt; &amp;lt;dubbo:registry id=&amp;#34;xxx1&amp;#34; address=&amp;#34;xxx://ip:port&amp;#34; /&amp;gt; &amp;lt;!-- reference registry server, if registry attribute is not specified, then ApplicationContext will be scanned to find if there&amp;#39;s any --&amp;gt; &amp;lt;dubbo:service registry=&amp;#34;xxx1&amp;#34; /&amp;gt; &amp;lt;!-- default configuration for referencing registry server, it will take effect if there&amp;#39;s no registry attribute specified in &amp;lt;dubbo:service&amp;gt; --&amp;gt; &amp;lt;dubbo:provider registry=&amp;#34;xxx1&amp;#34; /&amp;gt; Extension Contract RegistryFactory.</description></item><item><title>Registry Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/registry/</guid><description>Expansion Description Responsible for service registration and discovery.
Extension ports org.apache.dubbo.registry.RegistryFactory org.apache.dubbo.registry.Registry Extended configuration &amp;lt;!-- Define the registration center --&amp;gt; &amp;lt;dubbo:registry id=&amp;#34;xxx1&amp;#34; address=&amp;#34;xxx://ip:port&amp;#34; /&amp;gt; &amp;lt;!-- Reference registry, if registry property is not configured, registry configuration will be automatically scanned in ApplicationContext --&amp;gt; &amp;lt;dubbo:service registry=&amp;#34;xxx1&amp;#34; /&amp;gt; &amp;lt;!-- Reference the default value of the registry, when &amp;lt;dubbo:service&amp;gt; does not configure the registry attribute, use this configuration --&amp;gt; &amp;lt;dubbo:provider registry=&amp;#34;xxx1&amp;#34; /&amp;gt; Extension contract RegistryFactory.</description></item><item><title>Serialization Security Audit</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/qos/security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/qos/security/</guid><description>Dubbo supports real-time viewing of current configuration information and trusted/untrusted class lists through QoS commands. Currently supports two commands: serializeCheckStatus to view the current configuration information, serializeWarnedClasses to view the real-time alarm list.
serializeCheckStatus command Access directly through the console:
&amp;gt; telnet 127.0.0.1 22222 Trying 127.0.0.1... Connected to localhost. Escape character is &amp;#39;^]&amp;#39;. ___ __ __ ___ ___ ____ / _ \ / / / // _ ) / _ ) / __ \ / // // /_/ // _ |/ _ |/ /_/ / /____/ \____//____//____/ \____/ dubbo&amp;gt;serializeCheckStatus CheckStatus: WARN CheckSerializable: true AllowedPrefix: .</description></item><item><title>Service Mesh</title><link>https://dubbo.apache.org/en/overview/core-features/service-mesh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/core-features/service-mesh/</guid><description>Dubbo Mesh is Dubbo&amp;rsquo;s comprehensive microservices solution in a cloud-native context. It helps developers integrate Dubbo services with standard Kubernetes Native Service systems, enabling seamless connectivity with leading service mesh products like Istio.
Below is the deployment architecture diagram for Dubbo Mesh.
Control Plane: Istio serves as the unified control plane, providing cluster-wide capabilities like Kubernetes adaptation, service discovery, certificate management, observability, and traffic management. Data Plane: Dubbo application instances act as data plane components and support two deployment modes: Proxy Mode: Dubbo and Envoy are deployed in the same pod, and all traffic to and from Dubbo is intercepted and managed by Envoy.</description></item><item><title>The server makes a callback to the client</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/callback-parameter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/callback-parameter/</guid><description>Feature description The parameter callback method is the same as calling a local callback or listener, you only need to declare which parameter is the callback type in the Spring configuration file. Dubbo will generate a reverse proxy based on the persistent connection, so that the client logic can be invoked from the server. You can refer to sample code in the dubbo project.
scenes to be used The callback function notifies the client of the execution result, or sends a notification.</description></item><item><title>Use Pixiu to expose Dubbo-go service</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/pixiu/pixiu-nacos-triple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/pixiu/pixiu-nacos-triple/</guid><description>The Dubbo-go-pixiu gateway supports calling GO/Java Dubbo clusters. In the Dubbo-go 3.0 scenario, we can use the Pixiu gateway to request the Pixiu gateway with the HTTP protocol outside the cluster, perform protocol conversion at the gateway layer, and further call the Dubbo-go service in the cluster.
The path for the user to call the Dubbo-go service is http://$(app_name)/$(service_name)/$(method)
For example, a proto file has the following definition:
package org.apache.dubbo.quickstart.samples; service UserProvider { rpc SayHello (HelloRequest) returns (User) {} } message HelloRequest { string name = 1; } And configure the application name in dubbogo.</description></item><item><title>Versions</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/release/</guid><description>New feature development and stability improvement are equally important to product. But adding new features will affect stability, dubbo uses the following version development pattern to achieve a good balance.
Two versions evolving at the same time BugFix Version：low version，e.g. 2.4.x. This is called the GA version, which can be applied in production. We are supposed only to fix bugs in this version, and increase the third version number when release.</description></item><item><title>0-10 - The current call is no longer supported</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/10/</guid><description>Possible Reason The currently called method may have been deprecated or declared @Deprecated, which does not affect the execution result.
Troubleshooting and resolution steps Please use other alternative API methods.</description></item><item><title>1-10 - Failed to read and write registry service cache</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/10/</guid><description>Possible Reason Multiple Dubbo processes use the same cache file. In the case of multiple registries, multiple registries are specified to use the same file storage. Troubleshooting and resolution steps This error often occurs with errors 1-9. Check whether multiple Dubbo processes use the same cache file or specify multiple registries to use the same cache file.
see also Reference Manual for Registry Configuration Items</description></item><item><title>2-10 - Failed to call service provider</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/10/</guid><description>Possible Reason Dubbo failed to call the service provider and started retrying. Dubbo retries to call the service provider and continues to fail. Dubbo retries calling the service provider reaches the upper limit. Troubleshooting and resolution steps Check network resources such as time-consuming network connections between consumers and providers. Check whether the corresponding port of the provider can respond normally through telnet or other means. Check that the provider program is functioning properly.</description></item><item><title>4-10 - Triple serialization result failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/10/</guid><description>Possible Reason Usually an internal error.
Troubleshooting and resolution steps You can use some third-party tools or jstack [PID] &amp;gt; jstack.log to analyze the stack information and locate it. At the same time, please submit an issue in the community.</description></item><item><title>5-10 - Registration interface application mapping failed for service</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/10/</guid><description>Possible Reason The service metadata exposed by the service does not match the application, or has been tampered with.
Troubleshooting and resolution steps Check that the metadata content in the configuration center matches that in the application.</description></item><item><title>6-10 - Payload Limit Exceeded Exception</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/10/</guid><description>The default payload=8M, please check the configuration
Possible Reason Troubleshooting and resolution steps For the specific configuration items and meanings supported by each component, please refer to Configuration Item Manual</description></item><item><title>Dubbo2 Protocol Migration</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/triple/migration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/triple/migration/</guid><description>Dubbo2 protocol migration process Dubbo2 users use dubbo protocol + custom serialization, such as hessian2 to complete remote calls.
By default, Grpc only supports Protobuf serialization, and it cannot support multi-parameter and method overloading in the Java language.
At the beginning of Dubbo3, one goal was to be perfectly compatible with Dubbo2. Therefore, in order to ensure the smooth upgrade of Dubbo2, the Dubbo framework has done a lot of work to ensure that the upgrade is seamless.</description></item><item><title>Go language definition service</title><link>https://dubbo.apache.org/en/docs/v3.0/languages/golang/go-specific/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v3.0/languages/golang/go-specific/</guid><description/></item><item><title>Go quick start</title><link>https://dubbo.apache.org/en/docs/v3.0/languages/golang/quick-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v3.0/languages/golang/quick-start/</guid><description>It is recommended to use IDL to define cross-language services and coding formats.
The following shows the service definition and development methods of the Golang language version. If you have a legacy system or do not have multi-language development requirements, you can refer to the following usage methods.
Quick start use hello world example to show how to start with the Dubbo-go framework.
Protocol: Dubbo
Coding: Hessian2
Registration Center: Zookeeper</description></item><item><title>Guidelines for migrating interface-level service discovery to application-level service discovery</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/upgrades-and-compatibility/service-discovery/migration-service-discovery/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/upgrades-and-compatibility/service-discovery/migration-service-discovery/</guid><description>**In general, 3.x is fully compatible with 2.x in address registration and discovery, which means that users can choose to upgrade any number of applications or machines in the cluster to 3.x, and at the same time Interoperability with 2.x versions is maintained in the process. ** If you are concerned about the working principle behind migration, please refer to Migration Rule Details and Working Principle
1 Quick upgrade steps Simply modify the pom.</description></item><item><title>Hessian Agreement</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/hessian/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/hessian/</guid><description>Feature description The Hessian protocol is used to integrate Hessian&amp;rsquo;s services. The bottom layer of Hessian uses Http communication and Servlet to expose services. Dubbo&amp;rsquo;s default embedded Jetty is implemented as a server.
Hessian is an open source RPC framework of Caucho, whose communication efficiency is higher than the serialization that comes with WebService and Java.
Number of connections: multiple connections Connection method: short connection Transmission protocol: HTTP Transmission method: synchronous transmission Serialization: Hessian binary serialization Scope of application: The incoming and outgoing parameter data packets are large, the number of providers is larger than that of consumers, the pressure on providers is high, and files can be transferred.</description></item><item><title>Java</title><link>https://dubbo.apache.org/en/download/java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/download/java/</guid><description/></item><item><title>Local Masquerade</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/local-mock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/local-mock/</guid><description>Feature description There is a mechanism in Dubbo3 to achieve lightweight service degradation, which is local masquerade1.
scenes to be used Local masquerading is often used for service degradation. For example, for a verification service, when all the service providers hang up, if the service consumer initiates a remote call at this time, the call will fail and an RpcException will be thrown.
In order to avoid such a situation where an exception is thrown directly, the client can use local masquerade to provide Mock data and return authorization failure.</description></item><item><title>Monitor Extension</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/impls/monitor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/impls/monitor/</guid><description>Summary Extension to monitor service invocation times and time taken for each service invocation.
Extension Interface org.apache.dubbo.monitor.MonitorFactory org.apache.dubbo.monitor.Monitor Extension Configuration &amp;lt;!-- configure monitor center --&amp;gt; &amp;lt;dubbo:monitor address=&amp;#34;xxx://ip:port&amp;#34; /&amp;gt; Existing Extension org.apache.dubbo.monitor.support.dubbo.DubboMonitorFactory
Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxMonitorFactoryjava (MonitorFactory implementation) |-XxxMonitor.java (Monitor implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.monitor.MonitorFactory (plain text file with the format: xxx=com.xxx.XxxMonitorFactory) XxxMonitorFactory.java：
package com.xxx; import org.apache.dubbo.monitor.MonitorFactory; import org.apache.dubbo.monitor.Monitor; import org.apache.dubbo.common.URL; public class XxxMonitorFactory implements MonitorFactory { public Monitor getMonitor(URL url) { return new XxxMonitor(url); } } XxxMonitor.</description></item><item><title>Monitoring Center Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/monitor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/monitor/</guid><description>Expansion Description Responsible for the monitoring of service call times and call time.
Extension ports org.apache.dubbo.monitor.MonitorFactory org.apache.dubbo.monitor.Monitor Extended configuration &amp;lt;!-- Define the monitoring center --&amp;gt; &amp;lt;dubbo:monitor address=&amp;#34;xxx://ip:port&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.monitor.support.dubbo.DubboMonitorFactory
Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxMonitorFactoryjava (implement the MonitorFactory interface) |-XxxMonitor.java (implement Monitor interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.monitor.MonitorFactory (plain text file, content: xxx=com.xxx.XxxMonitorFactory) XxxMonitorFactory.java:
package com.xxx; import org.apache.dubbo.monitor.MonitorFactory; import org.apache.dubbo.monitor.Monitor; import org.apache.dubbo.common.URL; public class XxxMonitorFactory implements MonitorFactory { public Monitor getMonitor(URL url) { return new XxxMonitor(url); } } XxxMonitor.</description></item><item><title>Multiple Registries</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/multi-registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/multi-registry/</guid><description>Feature description Dubbo supports the simultaneous registration of the same service to multiple registries, or the registration of different services to different registries, or even references to services with the same name registered on different registries at the same time. In addition, the registry is 1 that supports custom extensions.
scenes to be used How to use Multi-registry registration For example: Some services of the Chinese website are too late to be deployed in Qingdao, and are only deployed in Hangzhou, while other applications in Qingdao need to reference this service, so the service can be registered to two registration centers at the same time.</description></item><item><title>Multiple Registries</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/multi-registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/multi-registry/</guid><description>Dubbo supports the same service to register multiple registries, or different services were registered to different registries, or even reference the same name service from different registries. In addition, the registry supports custom extensions 1。
One service register to multiple registries For example: Alibaba some services are not deployed in Qingdao, only deployed in Hangzhou. While other applications in Qingdao need to reference this service, you can register your services to both registries at the same time.</description></item><item><title>Service Discovery</title><link>https://dubbo.apache.org/en/overview/core-features/service-discovery/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/core-features/service-discovery/</guid><description>Dubbo provides a Client-Based service discovery mechanism, relying on third-party registry components to coordinate the service discovery process. It supports popular registries like Nacos, Consul, and Zookeeper.
Below is a basic workflow diagram for Dubbo&amp;rsquo;s service discovery mechanism:
Service discovery involves three roles: providers, consumers, and the registry. In this setup, Dubbo provider instances register their URL addresses with the registry, which aggregates this data. Dubbo consumers read the address list from the registry and subscribe to changes.</description></item><item><title>Streaming Communication</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/triple/streaming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/triple/streaming/</guid><description>Implementation principle of stream Stream mode for the Triple protocol
From the perspective of the protocol layer, Triple is built on the basis of HTTP2, so it directly has all the capabilities of HTTP2, so it has the ability to split stream and full-duplex.
In terms of the framework layer, StreamObserver is provided to users as a stream interface to provide stream processing for input and output parameters. The framework makes corresponding interface calls when sending and receiving stream data, so as to ensure the integrity of the life cycle of the stream.</description></item><item><title>Use Nacos as a registry</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/nacos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/nacos/</guid><description>1. Preparations dubbo-go cli tools and dependent tools have been installed Create a new demo application 2. Use grpc_cli tool to debug Dubbo service 2.1 Start the server Example: user.go:
func (u *UserProvider) GetUser(ctx context.Context, userStruct *CallUserStruct) (*User, error) { fmt.Printf(&amp;#34;=========================\nreq:%#v\n&amp;#34;, userStruct) rsp := User{&amp;#34;A002&amp;#34;, &amp;#34;Alex Stocks&amp;#34;, 18, userStruct.SubInfo} fmt.Printf(&amp;#34;========================\nrsp:%#v\n&amp;#34;, rsp) return &amp;amp;rsp, nil } The server opens a service named GetUser, passes in a CallUserStruct parameter, and returns a User parameter</description></item><item><title>使用 Nacos 作为注册中心</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/nacos-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/nacos-2/</guid><description>1. 准备工作 dubbo-go cli 工具和依赖工具已安装 创建一个新的 demo 应用 启动一个 Nacos 实例，暴露 8848 端口 2. 配置注册中心 title: Use Nacos as a registry type: docs weight: 10 1. Preparations dubbo-go cli tools and dependent tools have been installed Create a new demo application Start a Nacos instance and expose port 8848 2. Configure the registration center Modify the server configuration go-server/conf/dubbogo.yaml
dubbo: registries: nacos: # configure Nacos registration center protocol: nacos address: 127.</description></item><item><title>0-11 - Service stop failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/11/</guid><description>Possible Reason The connection is not closed in time or the memory is insufficient, causing some exceptions when the service stops.
Troubleshooting and resolution steps Close the connection after the response content is completed.</description></item><item><title>1-11 - Registration service instance creation failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/11/</guid><description>Possible Reason It may be caused by Registry&amp;rsquo;s SPI/IOC configuration error.
Troubleshooting and resolution steps This error is an internal error of Dubbo. If you encounter it, you can create an Issue on github and provide the error information and steps to reproduce it. We will help you solve the problem.
see also Dubbo Community</description></item><item><title>4-11 - Failed to initiate request</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/11/</guid><description>Possible Reason The server is closed. The IP of the caller is not in the whitelist of the server. The requested specific address service does not exist. Troubleshooting and resolution steps Check the startup and operation of the server. Check or use a third-party tool to test whether the network environment can be connected normally. According to the serviceName of the stack, check or simulate the call in the management platform to see if it is normal.</description></item><item><title>5-11 - Registration Instance Error</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/11/</guid><description>Possible Reason The service of the configuration center cannot be connected. The configured protocol, IP, and port are incorrect. The client version of the configuration center conflicts with the server version, and a valid connection cannot be established. Troubleshooting and resolution steps Check whether the service status of the configuration center is normal. Check that the configured protocol, IP, and port are incorrect. Check whether the version of the configuration center client used is compatible with the version of the server.</description></item><item><title>6-11 - Character set not supported</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/11/</guid><description>Default UTF-8 charset
Possible Reason Troubleshooting and resolution steps The result will end up being processed in the UTF-8 character set.</description></item><item><title>Checklist</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/checklist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/checklist/</guid><description>Checklist before release github milestones github change lists Travis CI test code find bugs Checklist for bigfix versions Create a github issue before coding Create unit test before bugfix Review Test your code (Normal process / Abnormal process) Record your design on github issue Complete javadoc and comment in code Manager for every version, responsible for scope and check</description></item><item><title>Extension Point Load Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/extension-factory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/extension-factory/</guid><description>Expansion Description The loading container of the extension point itself, which can load the extension point from different containers.
Extension ports org.apache.dubbo.common.extension.ExtensionFactory
Extended configuration &amp;lt;dubbo:application compiler=&amp;#34;jdk&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.common.extension.factory.SpiExtensionFactory org.apache.dubbo.config.spring.extension.SpringExtensionFactory Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxExtensionFactory.java (implements ExtensionFactory interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.extension.ExtensionFactory (plain text file, content: xxx=com.xxx.XxxExtensionFactory) XxxExtensionFactory.java:
package com.xxx; import org.apache.dubbo.common.extension.ExtensionFactory; public class XxxExtensionFactory implements ExtensionFactory { public Object getExtension(Class&amp;lt;?&amp;gt; type, String name) { //.</description></item><item><title>ExtensionFactory Extension</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/impls/extension-factory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/impls/extension-factory/</guid><description>Summary Factory to load dubbo extensions.
Extension Interface org.apache.dubbo.common.extension.ExtensionFactory
Extension Configuration &amp;lt;dubbo:application compiler=&amp;#34;jdk&amp;#34; /&amp;gt; Existing Extension org.apache.dubbo.common.extension.factory.SpiExtensionFactory org.apache.dubbo.config.spring.extension.SpringExtensionFactory Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxExtensionFactory.java (ExtensionFactory implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.extension.ExtensionFactory (plain text file with the content: xxx=com.xxx.XxxExtensionFactory) XxxExtensionFactory.java：
package com.xxx; import org.apache.dubbo.common.extension.ExtensionFactory; public class XxxExtensionFactory implements ExtensionFactory { public Object getExtension(Class&amp;lt;?&amp;gt; type, String name) { // ... } } META-INF/dubbo/org.apache.dubbo.common.extension.ExtensionFactory：
xxx=com.xxx.XxxExtensionFactory</description></item><item><title>IDL defines cross-language services</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/idl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/quick-start/idl/</guid><description>Using IDL to define services has better cross-language friendliness. For new users of Dubbo3, we recommend this method. However, the Triple protocol is not strongly bound to IDL. You can also use Java Interface + Pojo to define services and enable the Triple protocol. For details, see Example.
For more usage of Triple and IDL, please refer to official samples
precondition JDK version &amp;gt;= 8 Installed Maven Create project First create an empty maven project</description></item><item><title>Local Stub</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/local-stub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/local-stub/</guid><description>Feature description: After the remote service, the client usually only has the interface, and the implementation is all on the server side, but the provider sometimes wants to execute some logic on the client side.
scenes to be used Do ThreadLocal cache, verify parameters in advance, forge fault-tolerant data after call failure, etc. At this time, you need to bring a Stub in the API, and the client generates a Proxy instance, which will pass the Proxy to the Stub through the constructor 1, and then pass the The Stub is exposed to the user, and the Stub can decide whether to call the Proxy.</description></item><item><title>More Advanced Features</title><link>https://dubbo.apache.org/en/overview/core-features/more/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/core-features/more/</guid><description>As a microservice framework closely related to application development and aimed at providing enterprise-level service governance capabilities, Dubbo offers a variety of advanced features covering service call behavior control, service diagnostics and tuning, and service governance.
Different language SDKs may have slight variations in feature implementation and configuration methods. For a specific list of features and usage, refer to the following documents:
Java Golang Controlling Service Invocation Behavior Service Versions Service Groups Group Aggregation Asynchronous Invocation Asynchronous Execution Streaming Communication Reactive Programming Generic Invocation Generic Implementation Passing Implicit Parameters in Call Chain RPC Call Context Invocation Event Notifications Server Callbacks to Client Subscribe Only Register Only Runtime Dynamic IP Specification Direct Provider Connection Startup Checks Local Invocation Parameter Validation Local Mocking Local Stubs Echo Tests Invocation Information Logging Delayed Exposure Cluster Fault Tolerance Service Degradation Diagnostics and Tuning Port Protocol Multiplexing Thread Pool Isolation Multiple Protocols Multiple Registry Centers Request Latency Sampling Thread Models Service Reference Configuration Object Caching Route State Collection Load Balancing Simplified Registration Information Invocation Result Caching Concurrency Control Connection Control Delayed Connections Sticky Connections Graal VM Support Exporting Thread Stack Trace Kryo and FST Serialization Custom Service Container Graceful Shutdown Custom Host Address Exposure Consistent Hashing Logging Framework Adaptation and Runtime Management Kubernetes Lifecycle Probes These features are designed to provide more control and flexibility in a microservices environment.</description></item><item><title>Qos Command Usage</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/qos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/qos/</guid><description>In dubbo 2.5.8 a new QOS module is introduced, to provide new telnet command support.
Port the port of new version telnet is different from the port of dubbo protocol. The default port is 22222, which can be changed by modifying configuration file dubbo.properties
dubbo.application.qos.port=33333 or by modifying the JVM parameter
-Ddubbo.application.qos.port=33333 Safety By default, dubbo can receive any command sent from the host, which can be changed by modifying the configuration file dubbo.</description></item><item><title>Service Group</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/service-group/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/service-group/</guid><description>When you have multi-impls of a interface,you can distinguish them with the group.
Service &amp;lt;dubbo:service group=&amp;#34;feedback&amp;#34; interface=&amp;#34;com.xxx.IndexService&amp;#34; /&amp;gt; &amp;lt;dubbo:service group=&amp;#34;member&amp;#34; interface=&amp;#34;com.xxx.IndexService&amp;#34; /&amp;gt; Reference &amp;lt;dubbo:reference id=&amp;#34;feedbackIndexService&amp;#34; group=&amp;#34;feedback&amp;#34; interface=&amp;#34;com.xxx.IndexService&amp;#34; /&amp;gt; &amp;lt;dubbo:reference id=&amp;#34;memberIndexService&amp;#34; group=&amp;#34;member&amp;#34; interface=&amp;#34;com.xxx.IndewxService&amp;#34; /&amp;gt; Any group:
&amp;lt;dubbo:reference id=&amp;#34;barService&amp;#34; interface=&amp;#34;com.foo.BarService&amp;#34; group=&amp;#34;*&amp;#34; /&amp;gt; Warning group=&amp;quot;*&amp;quot; is supported after version 2.2.0, always select only one available group of implementations to invoke.</description></item><item><title>Static Service</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/static-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/static-service/</guid><description>Sometimes we want to manually manage the registration and deregistration for service provider, we need to set registry to non-dynamoic mode.
&amp;lt;dubbo:registry address=&amp;#34;10.20.141.150:9090&amp;#34; dynamic=&amp;#34;false&amp;#34; /&amp;gt; Or
&amp;lt;dubbo:registry address=&amp;#34;10.20.141.150:9090?dynamic=false&amp;#34; /&amp;gt; dynamic mode is disabled when service provider initially registers, then we need to enable it manually. When disconnects, the setting will not be deleted automatically, need to disable it manually.
For a third party service provider like “memcachd”, it can directly write the address information of service provider to registry, which can be used by consumer.</description></item><item><title>Telnet Command Reference</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/telnet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/telnet/</guid><description>Since 2.0.5 dubbo starts supporting to use telnet command to govern services.
How To Use telnet localhost 20880 Or:
echo status | nc -i 1 localhost 20880 Supported Commands The built-in telnet commands are listed below. Furthermore, it is possible to extend telnet commands, pls. refer to extend telnet command for more details.
ls ls: list services ls -l: list services in more details ls XxxService: list methods for the particular service ls -l XxxService: list methods for the particular service in more dtails ps ps: list service ports ps -l: list service addresses ps 20880: show connection info for the particular port ps -l 20880: show connection info for the particular port in more details cd cd XxxService: switch default service.</description></item><item><title>Using Zookeeper as a Registry</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/zookeeper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/zookeeper/</guid><description>TBD</description></item><item><title>Webservice protocol</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/webservice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/webservice/</guid><description>Feature description WebService-based remote invocation protocol, implemented based on frontend-simple and transports-http of Apache CXF. 2.3.0 and above are supported.
CXF is an open source RPC framework of Apache, which is merged from Xfire and Celtix.
Number of connections: multiple connections Connection method: short connection Transmission protocol: HTTP Transmission method: synchronous transmission Serialization: SOAP text serialization Applicable scenarios: system integration, cross-language call It can interoperate with native WebService services, namely:</description></item><item><title>0-12 - Unknown exception</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/12/</guid><description>Unknown exception, usually API usage or configuration exception
Possible Reason Such as: transcoding exception, unsupported encryption and decryption methods, etc.
Troubleshooting and resolution steps The business code line can be located according to the stack information.</description></item><item><title>1-12 - Instances of "Registry Service" have been destroyed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/12/</guid><description>Possible Reason During the graceful shutdown of Dubbo, unregister by calling destroyAll of AbstractRegistryFactory.
During the process of destroying the unexport of Registryprotocol, the getRegistry of AbstractRegistryFactory will be used to try to obtain the registry that has been destroyed, which leads to the destruction of all instances of the &amp;ldquo;registry service&amp;rdquo;.
Troubleshooting and resolution steps see also Configuration item reference manual</description></item><item><title>4-12 - Failed to create Triple stream</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/12/</guid><description>Possible Reason Usually an internal error.
Troubleshooting and resolution steps You can use some third-party tools or jstack [PID] &amp;gt; jstack.log to analyze the stack information and locate it. At the same time, please submit an issue in the community.</description></item><item><title>5-12 - Refresh instance and metadata errors</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/12/</guid><description>Possible Reason The service of the configuration center cannot be connected. The configured protocol, IP, and port are incorrect. The client version of the configuration center conflicts with the server version, and a valid connection cannot be established. Troubleshooting and resolution steps Check whether the service status of the configuration center is normal. Check that the configured protocol, IP, and port are incorrect. Check whether the version of the configuration center client used is compatible with the version of the server.</description></item><item><title>6-12 - An error occurred when the ZK client was destroyed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/12/</guid><description>Possible Reason The connection between the client and the server has been refused When the client is being destroyed, the server may be performing elections or other operations, resulting in an exception.
Troubleshooting and resolution steps The shutdown method can be used to query stack information. Generally do not deal with.</description></item><item><title>Bad Smell</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/code-smell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/code-smell/</guid><description>Ugly Dubbo design or implementation will be record here.
URL Convertion 1. Point to Point Service export and refer service directly export：
EXPORT(dubbo://provider-address/com.xxx.XxxService?version=1.0.0&amp;#34;) service directly refer：
REFER(dubbo://provider-address/com.xxx.XxxService?version=1.0.0) 2. Export servie by registry export service to registry：
EXPORT(registry://registry-address/org.apache.dubbo.registry.RegistrySerevice?registry=dubbo&amp;amp;export=ENCODE(dubbo://provider-address/com.xxx.XxxService?version=1.0.0)) accquire registry：
url.setProtocol(url.getParameter(&amp;#34;registry&amp;#34;, &amp;#34;dubbo&amp;#34;)) GETREGISTRY(dubbo://registry-address/org.apache.dubbo.registry.RegistrySerevice) registry service address：
url.getParameterAndDecoded(&amp;#34;export&amp;#34;)) REGISTER(dubbo://provider-address/com.xxx.XxxService?version=1.0.0) 3. Refer service from registry refer service from registry：
REFER(registry://registry-address/org.apache.dubbo.registry.RegistrySerevice?registry=dubbo&amp;amp;refer=ENCODE(version=1.0.0)) accquire registry：
url.setProtocol(url.getParameter(&amp;#34;registry&amp;#34;, &amp;#34;dubbo&amp;#34;)) GETREGISTRY(dubbo://registry-address/org.apache.dubbo.registry.RegistrySerevice) subscribe service address：
url.addParameters(url.getParameterAndDecoded(&amp;#34;refer&amp;#34;)) SUBSCRIBE(dubbo://registry-address/com.xxx.XxxService?version=1.0.0) notify service address：</description></item><item><title>Coding Convention</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/coding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/coding/</guid><description>Code style The source and JavaDoc of Dubbo follow below specifications:
Code Conventions for the Java Programming Language How to Write Doc Comments for the Javadoc Tool Exception and Logging Log more context information as possible, such as error reason, error server address, client address, registry center address, dubbo version and so on. Try to put the main cause at the front, and display all other context information with key-value paris after it.</description></item><item><title>Dynamic Proxy Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/proxy-factory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/proxy-factory/</guid><description>Expansion Description Convert the Invoker interface into a business interface.
Extension ports org.apache.dubbo.rpc.ProxyFactory
Extended configuration &amp;lt;dubbo:protocol proxy=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- Default value configuration, when &amp;lt;dubbo:protocol&amp;gt; does not configure proxy attribute, use this configuration --&amp;gt; &amp;lt;dubbo:provider proxy=&amp;#34;xxx&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.rpc.proxy.JdkProxyFactory org.apache.dubbo.rpc.proxy.JavassistProxyFactory Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxProxyFactory.java (implement ProxyFactory interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.ProxyFactory (plain text file, content: xxx=com.xxx.XxxProxyFactory) XxxProxyFactory.java:
package com.xxx; import org.apache.dubbo.rpc.ProxyFactory; import org.apache.dubbo.rpc.Invoker; import org.</description></item><item><title>Echo Test</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/echo-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/echo-service/</guid><description>Feature description The echo test is used to detect whether the service is available. The echo test is performed according to the normal request process. It can test whether the entire call is smooth and can be used for monitoring.
Reference use case https://github.com/apache/dubbo-samples/tree/master/dubbo-samples-echo
scenes to be used How to use All services automatically implement the EchoService interface, just cast any service reference to EchoService to use it.
Spring configuration &amp;lt;dubbo:reference id=&amp;#34;memberService&amp;#34; interface=&amp;#34;com.</description></item><item><title>Liveness Probe</title><link>https://dubbo.apache.org/en/docs/v3.0/references/lifecycle/liveness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v3.0/references/lifecycle/liveness/</guid><description>Summary Extend the detection point of application survival.
Extension Interface org.apache.dubbo.qos.probe.LivenessProbe
Extension Configuration Dubbo QOS live command will automaticly discovery.
Existing Extensions No default implementation
Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxLivenessProbe.java (LivenessProbe implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.qos.probe.LivenessProbe (plain text file with the content：xxx=com.xxx.XxxLivenessProbe) XxxLivenessProbe.java：
package com.xxx; public class XxxLivenessProbe implements LivenessProbe { public boolean check() { // ... } } META-INF/dubbo/org.apache.dubbo.qos.probe.LivenessProbe：
xxx=com.xxx.XxxLivenessProbe</description></item><item><title>Maven Plugin Reference</title><link>https://dubbo.apache.org/en/docs/v2.7/user/references/maven/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/references/maven/</guid><description>Start a simple registry server Start a simple registry server listening on port 9099:
Info Default port is 9090 if the port is not specified mvn dubbo:registry -Dport=9099 Generate a service provider demo application Generate a service provider with the specified interface and version:
mvn dubbo:create -Dapplication=xxx -Dpackage=com.alibaba.xxx -Dservice=XxxService,YyyService -Dversion=1.0.0</description></item><item><title>Memcached protocol</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/memcached/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/memcached/</guid><description>Feature description RPC protocol implemented based on memcached. 2.3.0 and above are supported.
Memcached is an efficient KV cache server.
scenes to be used Relieve database pressure, improve interaction speed, etc.
How to use Import dependencies Starting from Dubbo 3, the Memcached protocol is no longer embedded in Dubbo, and an independent module needs to be introduced separately.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.dubbo.extensions&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;dubbo-rpc-memcached&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Register the address of memcached service RegistryFactory registryFactory = ExtensionLoader.</description></item><item><title>Multiple Versions</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/multi-versions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/multi-versions/</guid><description>When an interface to achieve an incompatible upgrade, you can use the version number transition. Different versions of the services do not reference each other.
You can follow the steps below for version migration:
In the low pressure period, upgrade to half of the provider to the new version Then upgrade all consumers to the new version Then upgrade the remaining half providers to the new version Old version of the service provider configuration:</description></item><item><title>ProxyFactory Extension</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/impls/proxy-factory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/impls/proxy-factory/</guid><description>Summary Convert Invoker into business interface.
Extension Interface org.apache.dubbo.rpc.ProxyFactory
Extension Configuration &amp;lt;dubbo:protocol proxy=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- default configuration, it will take effect when proxy attribute is not configured in &amp;lt;dubbo:protocol&amp;gt; --&amp;gt; &amp;lt;dubbo:provider proxy=&amp;#34;xxx&amp;#34; /&amp;gt; Existing Extension org.apache.dubbo.rpc.proxy.JdkProxyFactory org.apache.dubbo.rpc.proxy.JavassistProxyFactory Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxProxyFactory.java (ProxyFactory implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.ProxyFactory (plain text file with the content: xxx=com.xxx.XxxProxyFactory) XxxProxyFactory.java：
package com.xxx; import org.apache.dubbo.rpc.ProxyFactory; import org.apache.dubbo.rpc.Invoker; import org.apache.dubbo.rpc.RpcException; public class XxxProxyFactory implements ProxyFactory { public &amp;lt;T&amp;gt; T getProxy(Invoker&amp;lt;T&amp;gt; invoker) throws RpcException { // .</description></item><item><title>Readiness Probe</title><link>https://dubbo.apache.org/en/docs/v3.0/references/lifecycle/readiness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v3.0/references/lifecycle/readiness/</guid><description>Summary Extend the detection point of application readiness.
Extension Interface org.apache.dubbo.qos.probe.ReadinessProbe
Extension Configuration Dubbo QOS ready command will automaticly discovery.
Existing Extensions org.apache.dubbo.qos.probe.impl.BootstrapReadinessProbe org.apache.dubbo.qos.probe.impl.ProviderReadinessProbe Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxReadinessProbe.java (ReadinessProbe implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.qos.probe.ReadinessProbe (plain text file with the content：xxx=com.xxx.XxxReadinessProbe) XxxReadinessProbe.java：
package com.xxx; public class XxxReadinessProbe implements ReadinessProbe { public boolean check() { // ... } } META-INF/dubbo/org.apache.dubbo.qos.probe.ReadinessProbe：
xxx=com.xxx.XxxReadinessProbe</description></item><item><title>Readiness Probe</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/readiness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/readiness/</guid><description>Expansion Description Extend the detection points of application readiness.
Extension ports org.apache.dubbo.qos.probe.ReadinessProbe
Extended configuration Dubbo QOS ready command auto-discovery
Known extensions org.apache.dubbo.qos.probe.impl.BootstrapReadinessProbe org.apache.dubbo.qos.probe.impl.ProviderReadinessProbe Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxReadinessProbe.java (implements ReadinessProbe interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.qos.probe.ReadinessProbe (plain text file, content: xxx=com.xxx.XxxReadinessProbe) XxxReadinessProbe.java:
package com.xxx; public class XxxReadinessProbe implements ReadinessProbe { public boolean check() { //... } } META-INF/dubbo/org.apache.dubbo.qos.probe.ReadinessProbe:
xxx=com.xxx.XxxReadinessProbe</description></item><item><title>routing rules</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/traffic/mesh_router/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/traffic/mesh_router/</guid><description>Introduction to routing rules &amp;ldquo;Microservice Mesh Routing Scheme Draft V2&amp;rdquo;
Introduction Routing rules, in simple terms, are to send specific request traffic to specific service provider according to specific conditions. Thereby realizing the distribution of flow.
In the definition of Dubbo3 unified routing rules, two resources in yaml format need to be provided: virtual service and destination rule. Its format is very similar to the routing rules defined by service mesh.</description></item><item><title>Startup Startup Probe</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/startup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/startup/</guid><description>Expansion Description Extend the detection point of application startup.
Extension ports org.apache.dubbo.qos.probe.StartupProbe
Extended configuration Dubbo QOS startup command auto-discovery
Known extensions org.apache.dubbo.qos.probe.impl.BootstrapLivenessProbe Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxStartupProbe.java (implement the StartupProbe interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.qos.probe.StartupProbe (plain text file, content: xxx=com.xxx.XxxStartupProbe) XxxStartupProbee.java:
package com.xxx; public class XxxStartupProbe implements StartupProbe { public boolean check() { //... } } META-INF/dubbo/org.apache.dubbo.qos.probe.StartupProbe:
xxx=com.xxx.XxxStartupProbe</description></item><item><title>Startup Probe</title><link>https://dubbo.apache.org/en/docs/v3.0/references/lifecycle/startup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v3.0/references/lifecycle/startup/</guid><description>Summary Extend the detection point of application startup.
Extension Interface org.apache.dubbo.qos.probe.StartupProbe
Extension Configuration Dubbo QOS startup command will automaticly discovery.
Existing Extensions org.apache.dubbo.qos.probe.impl.BootstrapStartupProbe Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxStartupProbe.java (StartupProbe implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.qos.probe.StartupProbe (plain text file with the content：xxx=com.xxx.XxxStartupProbe) XxxStartupProbe.java：
package com.xxx; public class XxxStartupProbe implements StartupProbe { public boolean check() { // ... } } META-INF/dubbo/org.apache.dubbo.qos.probe.StartupProbe：
xxx=com.xxx.XxxStartupProbe</description></item><item><title>Liveness Survival Probe</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/liveness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/liveness/</guid><description>Expansion Description Expand the detection point of application survival.
Extension ports org.apache.dubbo.qos.probe.LivenessProbe
Extended configuration Dubbo QOS live command automatic discovery
Known extensions No default implementation yet
Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxLivenessProbe.java (implement LivenessProbe interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.qos.probe.LivenessProbe (plain text file, content: xxx=com.xxx.XxxLivenessProbe) XxxLivenessProbe.java:
package com.xxx; public class XxxLivenessProbe implements LivenessProbe { public boolean check() { //... } } META-INF/dubbo/org.apache.dubbo.qos.probe.LivenessProbe:
xxx=com.xxx.XxxLivenessProbe</description></item><item><title>Using Polaris as a Registry</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/polaris/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/polaris/</guid><description>TBD</description></item><item><title>0-13 - An exception occurred in the metrics collector</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/13/</guid><description>Possible Reason An error occurred during the push process of the indicator data, the pushed server could not be connected or some configuration errors were made. Prometheus is currently supported.
Troubleshooting and resolution steps Please refer to the configuration item reference manualconfiguration item reference manual.</description></item><item><title>1-13 - Failed to execute task retry</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/13/</guid><description>Possible Reason The registry is offline. Troubleshooting and resolution steps Check if the registry is working properly. Check whether the server where the registration center is located and its network are working normally.</description></item><item><title>4-13 - Server Timeout</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/13/</guid><description>Possible Reason Server-side logic processing is relatively time-consuming. The server load request is too high to respond. The current timeout parameter setting threshold is quite different from the actual situation. Troubleshooting and resolution steps Check whether there is time-consuming processing based on the interface name. It can monitor the status of the server and the service calls invoked by the server. Try increasing the timeout parameter.</description></item><item><title>5-13 - Model cannot be destroyed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/13/</guid><description>Possible Reason There is an exception in the business processing of the custom destruction method.
Troubleshooting and resolution steps Check the custom destruction method and business processing logic for runtime exceptions.</description></item><item><title>6-13 - Stream closed exception</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/13/</guid><description>Possible Reason Stream is closed or the stream is closed while other threads are reading
Troubleshooting and resolution steps Generally, the order in which the code closes the streams is reversed.</description></item><item><title>Best practice</title><link>https://dubbo.apache.org/en/docs/v2.7/user/best-practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/best-practice/</guid><description>Modularization It is recommended to put service interfaces, service models, service exceptions, and so on in the API package,Because the service model and exception are part of the API, it is also in conformity with the modularization principle:Reusing the publish equivalence principle (REP) and the Common Reuse Principle (CRP).
If you need, you can also consider placing a spring reference configuration in the API package, so that the user can only use the configuration in the spring loading process, and the configuration suggestion is placed in the package directory of the module, so as not to conflict, eg:com/alibaba/china/xxx/dubbo-reference.</description></item><item><title>Call Information Record</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/accesslog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/accesslog/</guid><description>Feature description The log in dubbo3 is divided into log adaptation and access log. If you want to record each request information, you can enable the access log, which is similar to the apache access log.
scenes to be used Based on audit needs, etc. similar to nginx accesslog output, etc.
How to use log4j log Output access logs to the current application&amp;rsquo;s log4j log
&amp;lt;dubbo:protocol accesslog=&amp;#34;true&amp;#34; /&amp;gt; specify the file Output the access log to the specified file</description></item><item><title>Compiler Extension</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/impls/compiler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/impls/compiler/</guid><description>Summary Java compiler, used for byte code dynamic generation for RPC invocation.
Extension Interface org.apache.dubbo.common.compiler.Compiler
Extension Configuration No configuration required, the extension will be automatically discovered and loaded.
Existing Extensions org.apache.dubbo.common.compiler.support.JdkCompiler org.apache.dubbo.common.compiler.support.JavassistCompiler Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxCompiler.java (Compiler implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.compiler.Compiler (plain text file with the content: xxx=com.xxx.XxxCompiler) XxxCompiler.java：
package com.xxx; import org.apache.dubbo.common.compiler.Compiler; public class XxxCompiler implements Compiler { public Object getExtension(Class&amp;lt;?&amp;gt; type, String name) { // .</description></item><item><title>Compiler Extensions</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/compiler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/compiler/</guid><description>Expansion Description Java code compiler, used to dynamically generate bytecode to speed up calls.
Extension ports org.apache.dubbo.common.compiler.Compiler
Extended configuration autoload
Known extensions org.apache.dubbo.common.compiler.support.JdkCompiler org.apache.dubbo.common.compiler.support.JavassistCompiler Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxCompiler.java (implement Compiler interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.compiler.Compiler (plain text file, content: xxx=com.xxx.XxxCompiler) XxxCompiler.java:
package com.xxx; import org.apache.dubbo.common.compiler.Compiler; public class XxxCompiler implements Compiler { public Object getExtension(Class&amp;lt;?&amp;gt; type, String name) { //... } } META-INF/dubbo/org.apache.dubbo.common.compiler.Compiler:
xxx=com.xxx.XxxCompiler</description></item><item><title>Dubbo Configuration Center Extensions</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/impls/config-center/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/impls/config-center/</guid><description>Design Purpose The key function of CC(Configuration Center) is to act as a Key-Value store. Dubbo Framework tells CC the key it care about, CC return the corresponding value.
Divided by application scenarios, CC mainly undertake the following responsibilities in Dubbo Framework:
As a external configuration center, CC store configuration files like dubbo.properties, where the key is usually file name like dubbo.properties, and value is content of the file. Store single configuration items, like all kinds of switchs, contants, etc.</description></item><item><title>Configuration Center Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/config-center/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/config-center/</guid><description>aim of design The core function of the configuration center is as Key-Value storage. The Dubbo framework informs the configuration center of the key it cares about, and the configuration center returns the value corresponding to the key.
According to the application scenarios, the configuration center mainly undertakes the following responsibilities in the Dubbo framework:
As an external configuration center, it stores the dubbo.properties configuration file. At this time, the key value is usually the file name such as dubbo.</description></item><item><title>Group Merger</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/group-merger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/group-merger/</guid><description>According to the group to invoke server and return the merge result 1, such as the menu service, the same interface, but there are a variety of implementations, using group distinction, consumers call each group and get the results, the merger can merge the resules, so that you can achieve aggregation Menu Item.
Related code can refer to dubbo project example
Configuration Merge all groups
&amp;lt;dubbo:reference interface=&amp;#34;com.xxx.MenuService&amp;#34; group=&amp;#34;*&amp;#34; merger=&amp;#34;true&amp;#34; /&amp;gt; Merge the specified group</description></item><item><title>Metadata Center Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/metadata-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/metadata-report/</guid><description>aim of design See the Metadata Center Manual
Extension ports org.apache.dubbo.metadata.store.MetadataReportFactory org.apache.dubbo.metadata.store.MetadataReport Known extensions Implementation principle SPI definition Reference: org.apache.dubbo.metadata.store.MetadataReportFactory, org.apache.dubbo.metadata.store.MetadataReport
@SPI(&amp;#34;redis&amp;#34;) public interface MetadataReportFactory { @Adaptive({&amp;#34;protocol&amp;#34;}) MetadataReport getMetadataReport(URL url); } Custom metadata storage The following uses Redis storage as an example for illustration.
To create a new project, you need to support the following modifications:
Extend AbstractMetadataReport public class RedisMetadataReport extends AbstractMetadataReport { private final static Logger logger = LoggerFactory.</description></item><item><title>Compatibility Test</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/tck/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/tck/</guid><description>Dubbo&amp;rsquo;s protocol, communication, serialization, registry, load balancing and other SPI all offer alternative strategies for different application scenarios while our test cases are very scattered. Ours is always uncertain whether it can satisfy the complete contract of the extension point when users need to add a new implementation.
Thus we need to use TCK (Technology Compatibility Kit) for the core extension points. When users add a new implementaion, compatibility with the rest of the framework can be ensured with TCK.</description></item><item><title>Tripe 3.3 New Features</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/tripe-3.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/tripe-3.3/</guid><description>New REST Support Rest Features Since Dubbo 3.3, the Triple protocol reuses the existing HTTP stack to fully support RESTful service exports. Without the need for generic or gateway protocol conversion, users can directly access backend Triple protocol services via HTTP in a decentralized manner. Additionally, it offers extensive annotation and SPI extension support for advanced REST usage, such as path customization, output format customization, and exception handling. Key features include:</description></item><item><title>0-14 - Monitoring exception</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/14/</guid><description>It is used to count the number of RPC calls and the call time. The extension interface is MonitorFactory, and the corresponding implementation class is DubboMonitorFactroy.
Possible Reason Users can implement the MonitorFactory extension interface of this layer to implement custom monitoring statistics strategies. In the implementation class of the custom monitoring statistics strategy, an exception occurred during business runtime.
Troubleshooting and resolution steps Check the business class of org.apache.dubbo.monitor.MonitorFactory interface, there may be code logic errors in the implementation method.</description></item><item><title>1-14 - Dynamic configuration recognition failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/14/</guid><description>Possible Reason When using the service management function of dubbo admin for dynamic configuration, if the content or format of the configuration file is incorrect, the content of the dynamic configuration cannot be parsed, resulting in 1-14 errors.
Troubleshooting and resolution steps Please check whether the content or format of the dynamic configuration file is correct.
See also Configuration Reference Manual</description></item><item><title>4-14 - Response Result Failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/14/</guid><description>Possible Reason The server pipeline may be temporarily disconnected due to network reasons. The currently used version is lower or you can check the current parameter configuration to see if send.reconnect=true is enabled, and the higher version defaults to true. Troubleshooting and resolution steps Check whether the directly connected network is smooth and whether there is any packet loss. Check the above parameter values, or try to use a higher version.</description></item><item><title>5-14 - Model startup error</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/14/</guid><description>Possible Reason The connection is disconnected while the service is waiting to publish or subscribe. The network connection timed out. Troubleshooting and resolution steps Check whether the connection between the application server and the configuration center is normal. Check whether there is a timeout in the network connection, etc.</description></item><item><title>6-14 - Server response failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/14/</guid><description>Possible Reason When the server interacts with the client to generate data, the client closes abnormally.
Troubleshooting and resolution steps The client terminated abnormally or the server crashed.</description></item><item><title>Dispatcher Extension</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/impls/dispatcher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/impls/dispatcher/</guid><description>Summary Thread pool dispatch strategy.
Extension Interface org.apache.dubbo.remoting.Dispatcher
Extension Configuration &amp;lt;dubbo:protocol dispatcher=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- default configuration, will take effect if dispatcher attribute is not set in &amp;lt;dubbo:protocol&amp;gt; --&amp;gt; &amp;lt;dubbo:provider dispatcher=&amp;#34;xxx&amp;#34; /&amp;gt; Existing Extensions org.apache.dubbo.remoting.transport.dispatcher.all.AllDispatcher org.apache.dubbo.remoting.transport.dispatcher.direct.DirectDispatcher org.apache.dubbo.remoting.transport.dispatcher.message.MessageOnlyDispatcher org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedDispatcher Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxDispatcher.java (Dispatcher implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.remoting.Dispatcher (plain text file with the content: xxx=com.xxx.XxxDispatcher) XxxDispatcher.java：
package com.xxx; import org.apache.dubbo.remoting.Dispatcher; public class XxxDispatcher implements Dispatcher { public Group lookup(URL url) { // .</description></item><item><title>Message Dispatch Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/dispatcher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/dispatcher/</guid><description>Expansion Description Channel information dispatcher, used to specify the thread pool model.
Extension ports org.apache.dubbo.remoting.Dispatcher
Extended configuration &amp;lt;dubbo:protocol dispatcher=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- The default value setting, when &amp;lt;dubbo:protocol&amp;gt; does not configure the dispatcher attribute, use this configuration --&amp;gt; &amp;lt;dubbo:provider dispatcher=&amp;#34;xxx&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.remoting.transport.dispatcher.all.AllDispatcher org.apache.dubbo.remoting.transport.dispatcher.direct.DirectDispatcher org.apache.dubbo.remoting.transport.dispatcher.message.MessageOnlyDispatcher org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedDispatcher Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxDispatcher.java (implements the Dispatcher interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.remoting.Dispatcher (plain text file, content: xxx=com.</description></item><item><title>Parameter Validation</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/parameter-validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/parameter-validation/</guid><description>The parameter validation 1 is based on [JSR303] (https://jcp.org/en/jsr/detail?id=303). The user simply add the validation annotation of the JSR303 and declares the filter for validation 2.
Maven Dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;javax.validation&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;validation-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.0.GA&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.hibernate&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hibernate-validator&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.2.0.Final&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Sample Example of Parameter Annotation import java.io.Serializable; import java.util.Date; import javax.validation.constraints.Future; import javax.validation.constraints.Max; import javax.validation.constraints.Min; import javax.validation.constraints.NotNull; import javax.validation.constraints.Past; import javax.validation.constraints.Pattern; import javax.validation.constraints.Size; public class ValidationParameter implements Serializable { private static final long serialVersionUID = 7158911668568000392L; @NotNull // Required @Size(min = 1, max = 20) // range private String name; @NotNull(groups = ValidationService.</description></item><item><title>Recommended usage</title><link>https://dubbo.apache.org/en/docs/v2.7/user/recommend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/recommend/</guid><description>Configuring the attributes of the consumer side as much as possible on the provider side the reason is：
Service providers are more aware of service performance parameters than service users，Such as the timeout time of the call, the reasonable retry times, and so on. If a attribute is configurated in provider side, not configurated in consumer side, consumer service will use the attribute in provider side. That is to say, the provider side&amp;rsquo;s attribute can be used as consumer&amp;rsquo;s default value 1.</description></item><item><title>Triple Rest User Manual</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/tripe-rest-manual/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/protocol/tripe-rest-manual/</guid><description>Note Since Dubbo 3.3, the original Rest protocol has been moved to the Extensions library, and the Triple protocol now provides more comprehensive support for Rest. To continue using the original Rest protocol, you can add the corresponding dubbo-spi-extensions library dependency. Introduction Since Dubbo 3.3, the Triple protocol reuses the existing HTTP stack to fully support RESTful service exports. Without the need for generic or gateway protocol conversion, users can directly access backend Triple protocol services via HTTP in a decentralized manner.</description></item><item><title>0-15 - An exception occurred while loading the extension class</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/15/</guid><description>Possible Reason The clazz class does not implement the interface class of the current extension point. The extension may be an interface or not exist. Troubleshooting and resolution steps Check the extension class declaration, and there is no matching extension implementation class. The extension implementation class needs to implement the extension point interface class and method.</description></item><item><title>1-15 - Failed to destroy service</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/15/</guid><description>Possible Reason Throwing an exception while destroying all invokers in the RegistryDirectory may trigger errors 1-15.
Troubleshooting and resolution steps This error is an internal error of Dubbo. If you encounter it, you can create an Issue on github and provide the error information and steps to reproduce it. We will help you solve the problem.
See also Dubbo Community</description></item><item><title>4-15 - Client Stream Listener</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/15/</guid><description>Possible Reason After receiving the response from the server, the client stream listener will output this information for reminder.
Troubleshooting and resolution steps</description></item><item><title>5-15 - Model Reference Error</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/15/</guid><description>Possible Reason The method of Dubbo core processing class is misused or tampered with.
Troubleshooting and resolution steps Check for misuse or decompiled modifications on the application.</description></item><item><title>6-15 - Skip unread stream data</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/15/</guid><description>When decoding, if there is unread data in the stream, the unread stream will be skipped
Possible Reason Troubleshooting and resolution steps When decoding, all the data will be read at one time</description></item><item><title>Cache Result</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/result-cache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/result-cache/</guid><description>Cache result is used to speed up access to popular data. Dubbo provides declarative caching to reduce the user work of adding cache 1.
Cache Type lru Delete excess cache Based on the principle of least recently used. The hottest data is cached. threadlocal The current thread cache. For example, a page have a lot of portal and each portal need to check user information, you can reduce this redundant visit with this cache.</description></item><item><title>Capacity plan</title><link>https://dubbo.apache.org/en/docs/v2.7/user/capacity-plan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/capacity-plan/</guid><description>The following data for reference：
Use member service project of Dubbo Receive 400,000,000 remote calls one day Use 12 standard servers to provide services (CPU:8 core, memory: 8G) The average load is less than 1 (For 8 core CPU, the load is very low) The average response time is 2.3 to 2.5 ms，Network cost about 1.5 to 1.6 ms(Related to the size of the packet ) Use product authorization service project of Dubbo Receive 300,000,000 remote calls one day Use 8 standard servers to provide services (CPU:8 core, memory: 8G) The average load is less than 1 (For 8 core CPU, the load is very low) The average response time is 1.</description></item><item><title>Collect Broadcast Responses</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/broadcast-resp-collect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/broadcast-resp-collect/</guid><description>Applicable scenario: for any Dubbo consumer, broadcast calls multiple service providers. The consumer is able to collect responses from all of the providers.
Notice support on 2.7.12 or above. Demo consumer demo @Reference imports providers. Within the brackets, letting cluster = &amp;ldquo;broadcast2&amp;rdquo; represents doing one broadcast call that collects providers&amp;rsquo; responses.
Broadcast calls all service providers one by one. Is able to return all service providers’ execution outcomes (success or exceptions) completely and stores providers&amp;rsquo; responses in RpcContext.</description></item><item><title>Dynamic Routing</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/traffic/mesh-style/dynamic-rule-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/traffic/mesh-style/dynamic-rule-deployment/</guid><description>apiVersion: service.dubbo.apache.org/v1alpha1 kind: VirtualService metadata: name: demo/StandardRouter spec: hosts: - demo dubbo: - services: - exact: com.taobao.hsf.demoservice:1.0.0 route details: - name: sayHello-route match: -method: name_match: exact: &amp;#34;s-method&amp;#34; argc: 5 args: - index: 2 type: double num_value: oneof: - range: start: 100.1 - index: 1 type: string str_value: oneof: - regex: &amp;#34;*abc*&amp;#34; - exact: parameter-1 - index: 3 type: bool - index: 4 type: int num_value: oneof: - range: start: 1 end: 100 - sourceables: sigma.</description></item><item><title>json generic invoke</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/generic-invoke-with-json/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/generic-invoke-with-json/</guid><description>Notice support on 2.7.12 or above. A new method is provided for Dubbo generic invoke: directly passing on String to complete an invoke. In other words, users can directly pass on parameter object&amp;rsquo;s json String to complete a generic invoke.
Using generic invoke through API method For the following providers:
public User setUser(User user) { return user; } @Data public class User { String name; int age; } do one generic invoke:</description></item><item><title>msgpack serialization</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/msgpack-serialization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/msgpack-serialization/</guid><description>MessagePack is an efficient binary serialization format. It lets you exchange data among multiple languages like JSON. But it&amp;rsquo;s faster and smaller. Small integers are encoded into a single byte, and typical short strings require only one extra byte in addition to the strings themselves.
Notice support on 2.7.12 or above. msgpack demo provider and consumer import msgpack dependencies &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.msgpack&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;msgpack-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.8.22&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.msgpack&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jackson-dataformat-msgpack&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.8.22&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; provider demo Add the following protocol configurations into Dubbo configuration class:</description></item><item><title>provider timeout release</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/provider-timeout-release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/provider-timeout-release/</guid><description>Dubbo allows providers to shutdown operations based on how long the timeout lasts.
Applicable scenario: when a certain operation times out, providers can release that thread instead of simply printing out the timeout log message.
Notice support on 2.7.12 or above. Main Logic public class AllChannelHandler2 extends AllChannelHandler { public static final Timer TIME_OUT_TIMER = new HashedWheelTimer( new NamedThreadFactory(&amp;#34;dubbo-server-future-timeout&amp;#34;, true), 30, TimeUnit.MILLISECONDS); public AllChannelHandler2(ChannelHandler handler, URL url) { super(handler, url); } @Override public void received(Channel channel, Object message) throws RemotingException { ExecutorService executor = getPreferredExecutorService(message); try { Future&amp;lt;?</description></item><item><title>Invoke provider with specified IP port</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/invoke-with-specified-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/invoke-with-specified-ip/</guid><description>When multiple providers are registered at the register center, dynamically specifying one of the instances’ IP through RpcContext is enabled. Port does Dubbo invoke.
Notice support on 2.7.12 or above. Demo provider demo Assume two registered providers at the register center are provided, which are 10.220.47.253:20880;10.220.47.253:20881; respectively.
// 10.220.47.253:20880 @Service(interfaceClass = TestService.class) public class TestServiceImpl implements TestService { @Override public String sayHello(String name) { return &amp;#34;Hello &amp;#34;+name+&amp;#34; i am provider1&amp;#34;; } } // 10.</description></item><item><title>Thread Pool Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/threadpool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/threadpool/</guid><description>Expansion Description The service provider&amp;rsquo;s thread pool implements the strategy. When the server receives a request, it needs to create a thread in the thread pool to execute the service provider&amp;rsquo;s business logic.
Extension ports org.apache.dubbo.common.threadpool.ThreadPool
Extended configuration &amp;lt;dubbo:protocol threadpool=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- Default value setting, when &amp;lt;dubbo:protocol&amp;gt; does not configure threadpool, use this configuration --&amp;gt; &amp;lt;dubbo:provider threadpool=&amp;#34;xxx&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.common.threadpool.FixedThreadPool org.apache.dubbo.common.threadpool.CachedThreadPool Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxThreadPool.</description></item><item><title>ThreadPool Extension</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/impls/threadpool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/impls/threadpool/</guid><description>Summary Thread pool strategy extension for service provider. When server receives one request, it needs a thread from thread pool to execute business logic in service provider.
Extension Interface org.apache.dubbo.common.threadpool.ThreadPool
Extension Configuration &amp;lt;dubbo:protocol threadpool=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- default configuration, it will take effect when threadpool attribute is not specified in &amp;lt;dubbo:protocol&amp;gt; --&amp;gt; &amp;lt;dubbo:provider threadpool=&amp;#34;xxx&amp;#34; /&amp;gt; Existing Extension org.apache.dubbo.common.threadpool.FixedThreadPool org.apache.dubbo.common.threadpool.CachedThreadPool Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxThreadPool.java (ThreadPool implementation) |-resources |-META-INF |-dubbo |-org.</description></item><item><title>0-16 - No actuators available</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/16/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/16/</guid><description>Possible Reason The internal executor is not available and null is returned at this time.
Troubleshooting and resolution steps No need to intervene, dubbo will execute the createExecutorIfAbsent method internally to construct a new executor.</description></item><item><title>1-16 - There are unsupported categories</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/16/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/16/</guid><description>Possible Reason When the registration center changes, the corresponding listener will be notified. If the category is illegal during notify, 1-16 errors will be generated.
Troubleshooting and resolution steps This error is an internal error of Dubbo. If you encounter it, you can create an Issue on github and provide the error information and steps to reproduce it. We will help you solve the problem.
Dubbo Community github</description></item><item><title>4-16 - Service Closed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/16/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/16/</guid><description>Possible Reason Incorrect use of internal org.apache.dubbo.rpc.protocol.tri.service.TriHealthImpl#enterTerminalState
Troubleshooting and resolution steps Calling the above method multiple times will remind you. Generally only used for unit testing.</description></item><item><title>5-16 - Unable to find any valid agreements</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/16/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/16/</guid><description>Possible Reason The configured protocol is not supported.
Troubleshooting and resolution steps Currently supported protocols are dubbo, rmi, hessian, http, webservice, thrift, redis, etc.
see also Configuration item reference manual</description></item><item><title>6-16 - An exception occurred during reconnection</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/16/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/6/16/</guid><description>Prompt every time a reconnection occurs
Possible Reason Delayed reconnection caused by network instability.
Troubleshooting and resolution steps Check for network packet loss.</description></item><item><title>Generic Reference</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/generic-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/generic-reference/</guid><description>Generic invocation is mainly used when the client does not have API interface or model class, all POJOs in parameters and return values are represented by Map.Commonly used for framework integration such as: implementing a common service testing framework, all service implementations can be invoked via GenericService.
Use generic invocation via Spring Declared in the Spring configuration file generic =&amp;quot; true &amp;quot;：
&amp;lt;dubbo:reference id=&amp;#34;barService&amp;#34; interface=&amp;#34;com.foo.BarService&amp;#34; generic=&amp;#34;true&amp;#34; /&amp;gt; In Java code, get barService and start generic invocation:</description></item><item><title>Performance</title><link>https://dubbo.apache.org/en/docs/v2.7/user/perf-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/perf-test/</guid><description>Test instructions In this performance test, the performance of all Dubbo 2.0 supported protocols in different sizes and data types is tested and compared with the Dubbo 1.0. The overall performance is increased by 1.0 compared with 10%, and the average increase is 10%. The performance improvement of 10%~50% can also be achieved by using the new Dubbo serialization of Dubbo 2.0 . In the stability test, because the underlying communication framework is changed from Mina to netty, the growth of objects in old area is greatly reduced, and the 50 hour operation increases less than 200m and no fullgc.</description></item><item><title>Serialization Extension</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/impls/serialize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/impls/serialize/</guid><description>Summary Extension to serializing java object into byte code stream for transporting on the network, and vise versa.
Extension Interface org.apache.dubbo.common.serialize.Serialization org.apache.dubbo.common.serialize.ObjectInput org.apache.dubbo.common.serialize.ObjectOutput Extension Configuration &amp;lt;!-- protocol serialization style --&amp;gt; &amp;lt;dubbo:protocol serialization=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- default configuration, will take effect if serialization is not configured in &amp;lt;dubbo:protocol&amp;gt; --&amp;gt; &amp;lt;dubbo:provider serialization=&amp;#34;xxx&amp;#34; /&amp;gt; Existing Extension org.apache.dubbo.common.serialize.dubbo.DubboSerialization org.apache.dubbo.common.serialize.hessian.Hessian2Serialization org.apache.dubbo.common.serialize.java.JavaSerialization org.apache.dubbo.common.serialize.java.CompactedJavaSerialization Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxSerialization.java (Serialization implementation) |-XxxObjectInput.java (ObjectInput implementation) |-XxxObjectOutput.</description></item><item><title>Serialization Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/serialize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/serialize/</guid><description>Expansion Description Convert the object into a byte stream for network transmission, and convert the byte stream into an object for restoring the byte stream data into an object.
Extension ports org.apache.dubbo.common.serialize.Serialization org.apache.dubbo.common.serialize.ObjectInput org.apache.dubbo.common.serialize.ObjectOutput Extended configuration &amp;lt;!-- Protocol serialization method --&amp;gt; &amp;lt;dubbo:protocol serialization=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- Default value setting, when &amp;lt;dubbo:protocol&amp;gt; does not configure serialization, use this configuration --&amp;gt; &amp;lt;dubbo:provider serialization=&amp;#34;xxx&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.common.serialize.dubbo.DubboSerialization org.apache.dubbo.common.serialize.hessian.Hessian2Serialization org.apache.dubbo.common.serialize.java.JavaSerialization org.apache.dubbo.common.serialize.java.CompactedJavaSerialization Extended example Maven project structure:</description></item><item><title>Weight Routing</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/traffic/mesh-style/weight-rule-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/traffic/mesh-style/weight-rule-deployment/</guid><description>apiVersion: service.dubbo.apache.org/v1alpha1 kind: VirtualService metadata: name: reviews-route spec: hosts: - reviews.prod.svc.cluster.local dubbo: - name: weightRoute route details: - name: weight route: -destination: host: reviews.prod.svc.cluster.local subset: v1 weight: 60 -destination: host: reviews.prod.svc.cluster.local subset: v2 weight: 40 --- apiVersion: service.dubbo.apache.org/v1alpha1 kind: DestinationRule metadata: name: reviews-route spec: host: reviews.prod.svc.cluster.local subsets: - name: v1 labels: version: v1 - name: v2 labels: version: v2</description></item><item><title>0-17 - Actuator encountered an unknown exception while shutting down</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/17/</guid><description>Possible Reason A custom executor may be used, and an exception was generated when writing the destruction method.
Troubleshooting and resolution steps Check whether org.apache.dubbo.common.threadpool.manager.ExecutorRepository is custom implemented, and check the custom shutdown method.</description></item><item><title>1-17 - Metadata Server Failure</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/17/</guid><description>Possible Reason It may be that there is a problem with the parameter configuration of metadata, especially metadataServiceProtocol and metadataServicePort.
Troubleshooting and resolution steps Check whether it occurs at the same time as 1-18 error, if it occurs at the same time, first try to solve 1-18 Check whether the metadataServicePort port number conflicts. If the ports configured by Provider and Consumer are in conflict at the same time, a 1-17 error will be generated.</description></item><item><title>4-17 - Error closing all callers</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/17/</guid><description>Possible Reason Usually an internal error.
Troubleshooting and resolution steps You can use some third-party tools or jstack [PID] &amp;gt; jstack.log to analyze the stack information and locate it. At the same time, please submit an issue in the community.</description></item><item><title>5-17 - Parameter value format error</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/17/</guid><description>Possible Reason The attribute configuration value is too long, generally set within 200 characters. The format of the attribute configuration value is wrong, currently supports numbers, -, _, etc. Troubleshooting and resolution steps Check whether the content of the attribute configuration value is too long, and modify it according to the prompt information. Check whether the attribute configuration value contains special characters, such as @#$%^&amp;amp;, etc. For details, please refer to the prompt information to modify.</description></item><item><title>Achieving generalization (server-side generalization)</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/generic-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/generic-service/</guid><description>Feature description The universal interface implementation method is mainly used when there is no API interface and model classifier on the server side. All POJOs in the parameters and return values are represented by Map, which is usually used for framework integration. For example, to implement a general remote service Mock framework, you can All service requests are handled by implementing the GenericService interface.
scenes to be used How to use Implement the GenericService interface in Java code</description></item><item><title>Generic Service</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/generic-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/generic-service/</guid><description>The implementation of the generic interface is mainly used when there is no API interface and model class on the server side. All POJOs in the parameters and return values are represented by the Map and are usually used for framework integration. For example, to implement a universal remote service Mock framework, handle all service requests by implementing the GenericService interface.
In Java code, implement GenericService interface：
package com.foo; public class MyGenericService implements GenericService { public Object $invoke(String methodName, String[] parameterTypes, Object[] args) throws GenericException { if (&amp;#34;sayHello&amp;#34;.</description></item><item><title>Network Transport Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/remoting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/remoting/</guid><description>Expansion Description Realization of remote communication server and client transmission.
Extension ports org.apache.dubbo.remoting.Transporter org.apache.dubbo.remoting.Server org.apache.dubbo.remoting.Client Extended configuration &amp;lt;!-- server and client use the same transport implementation --&amp;gt; &amp;lt;dubbo:protocol transporter=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- server and client use different transport implementations --&amp;gt; &amp;lt;dubbo:protocol server=&amp;#34;xxx&amp;#34; client=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- Default value setting, when &amp;lt;dubbo:protocol&amp;gt; is not configured with transporter/server/client attribute, use this configuration --&amp;gt; &amp;lt;dubbo:provider transporter=&amp;#34;xxx&amp;#34; server=&amp;#34;xxx&amp;#34; client=&amp;#34;xxx&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.remoting.transport.transporter.netty.NettyTransporter org.apache.dubbo.remoting.transport.transporter.mina.MinaTransporter org.apache.dubbo.remoting.transport.transporter.grizzly.GrizzlyTransporter Extended example Maven project structure:</description></item><item><title>Test coverage report</title><link>https://dubbo.apache.org/en/docs/v2.7/user/coveragence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/coveragence/</guid><description> v2.0 Codecov report , Statistics since 2017-12-29 The test coverage is : , we can get the report in https://codecov.io/gh/apache/dubbo v1.0 Based on version 2.0.12，Statistics on 2012-02-03</description></item><item><title>Transporter Extension</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/impls/remoting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/impls/remoting/</guid><description>Summary Transportation extension for communication between server and client.
Extension Interface org.apache.dubbo.remoting.Transporter org.apache.dubbo.remoting.Server org.apache.dubbo.remoting.Client Extension Configuration &amp;lt;!-- server and client use the same transporter --&amp;gt; &amp;lt;dubbo:protocol transporter=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- server and client use the different transporter --&amp;gt; &amp;lt;dubbo:protocol server=&amp;#34;xxx&amp;#34; client=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- default configuration, will take effect when transport/server/client attribute is not set in &amp;lt;dubbo:protocol&amp;gt; --&amp;gt; &amp;lt;dubbo:provider transporter=&amp;#34;xxx&amp;#34; server=&amp;#34;xxx&amp;#34; client=&amp;#34;xxx&amp;#34; /&amp;gt; Existing Extension org.apache.dubbo.remoting.transport.transporter.netty.NettyTransporter org.apache.dubbo.remoting.transport.transporter.mina.MinaTransporter org.apache.dubbo.remoting.transport.transporter.grizzly.GrizzlyTransporter Extension Guide Directory layout:</description></item><item><title>0-18 - thread pool executor is misused</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/18/</guid><description>Possible Reason The number of threads is customized, and an unknown exception occurs inside the system.
Troubleshooting and resolution steps You can use some third-party tools or jstack [PID] &amp;gt; jstack.log to analyze the stack information and locate it.</description></item><item><title>1-18 - metadata service port not provided</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/18/</guid><description>Possible Reason It may be that metadataType is in local mode, and metadataServicePort is configured incorrectly.
Troubleshooting and resolution steps Check the metadataType attribute value on the Provider side. Check whether the configuration of metadataServicePort on the Provider side is correct, and pay special attention to whether there is any conflict with other application ports. see also Configuration item reference manual</description></item><item><title>4-18 - Unable to get service model from call</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/18/</guid><description>Possible Reason Currently only used in unit test scenarios, the service model will be initialized by default.
Troubleshooting and resolution steps</description></item><item><title>5-18 - Notification registration event failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/18/</guid><description>Possible Reason The notification has been sent, and an unexpected error occurred in the business processing logic. The configuration center cannot be connected, timeout error. Troubleshooting and resolution steps Check the custom business logic implementation, whether there is a runtime exception. Check whether the configuration center can be connected normally.</description></item><item><title>Benchmark Suite</title><link>https://dubbo.apache.org/en/docs/v2.7/user/benchmark-tool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/benchmark-tool/</guid><description>download： git clone https://github.com/apache/dubbo.git compile benchmark: cd dubbo/dubbo-test/dubbo-test-benchmark; mvn clean install uncompress benchmark： dubbo/dubbo-test/dubbo-test-benchmark/target/dubbo-test-benchmark-2.6.2-SNAPSHOT.tar.gz Read ReadMe.txt (the contents are as follows, in the compressed package.)
Build a new benchmark project, such as demo.benchmark
Import the your own interface api jar and dubbo.benchmark.jar (Unzip dubbo.benchmark.tar.gz, under the lib directory )
Create a new class to implement AbstractClientRunnable
Implement the constructor of the parent class Implement the invoke method and create a local interface proxy by serviceFactory，and finish your own business logic, as follows: public Object invoke(ServiceFactory serviceFactory) { DemoService demoService = (DemoService) serviceFactory.</description></item><item><title>Echo Testing Service</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/echo-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/echo-service/</guid><description>Echo testing is used for check the service is available,Echo testing is performed according to the normal request flow and is able to test whether the entire call is unobstructed and can be used for monitoring.
All the services will be automatically implemented EchoService interface,just cast any service reference to EchoService to use it.
Spring configuration:
&amp;lt;dubbo:reference id=&amp;#34;memberService&amp;#34; interface=&amp;#34;com.xxx.MemberService&amp;#34; /&amp;gt; The java code：
// reference the remote service MemberService memberService = ctx.</description></item><item><title>Exchanger Extension</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/impls/exchanger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/impls/exchanger/</guid><description>Summary Exchange message between request and response on network transport layer.
Extension Interface org.apache.dubbo.remoting.exchange.Exchanger org.apache.dubbo.remoting.exchange.ExchangeServer org.apache.dubbo.remoting.exchange.ExchangeClient Extension Configuration &amp;lt;dubbo:protocol exchanger=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- default configuration, will take effect if exchanger attribute is not set in &amp;lt;dubbo:protocol&amp;gt; --&amp;gt; &amp;lt;dubbo:provider exchanger=&amp;#34;xxx&amp;#34; /&amp;gt; Existing Extension org.apache.dubbo.remoting.exchange.exchanger.HeaderExchanger
Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxExchanger.java (Exchanger implementation) |-XxxExchangeServer.java (ExchangeServer implementation) |-XxxExchangeClient.java (ExchangeClient implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.remoting.exchange.Exchanger (plain text file with the content: xxx=com.</description></item><item><title>Information Exchange Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/exchanger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/exchanger/</guid><description>Expansion Description Based on the transport layer, implement the Request-Response information exchange semantics.
Extension ports org.apache.dubbo.remoting.exchange.Exchanger org.apache.dubbo.remoting.exchange.ExchangeServer org.apache.dubbo.remoting.exchange.ExchangeClient Extended configuration &amp;lt;dubbo:protocol exchanger=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- The default value setting, when &amp;lt;dubbo:protocol&amp;gt; does not configure the exchanger attribute, use this configuration --&amp;gt; &amp;lt;dubbo:provider exchanger=&amp;#34;xxx&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.remoting.exchange.exchanger.HeaderExchanger
Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxExchanger.java (implements the Exchanger interface) |-XxxExchangeServer.java (implements ExchangeServer interface) |-XxxExchangeClient.java (implements ExchangeClient interface) |-resources |-META-INF |-dubbo |-org.</description></item><item><title>Use Case</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/traffic/mesh-style/demo-rule-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/traffic/mesh-style/demo-rule-deployment/</guid><description>Application Services com.taobao.hsf.DemoService:1.0.0 service address 10.0.0.1:12200?_p=hessian2&amp;amp;APP=demo&amp;amp;st=na61&amp;amp;v=2.0&amp;amp;_TIMEOUT=3000&amp;amp;_ih2=y&amp;amp;mg=demohost&amp;amp;_CONNECTTIMEOUT=1000&amp;amp;_SERIALIZETYPE=hessian&amp;amp;ut=CENTER 10.0.0.2:12200?_p=hessian2&amp;amp;APP=demo&amp;amp;st=na62&amp;amp;v=2.0&amp;amp;_TIMEOUT=3000&amp;amp;_ih2=y&amp;amp;mg=demohost&amp;amp;_CONNECTTIMEOUT=1000&amp;amp;_SERIALIZETYPE=hessian&amp;amp;ut=CENTER 10.0.0.3:12200?_p=hessian2&amp;amp;APP=demo&amp;amp;st=na610&amp;amp;v=2.0&amp;amp;_TIMEOUT=3000&amp;amp;_ih2=y&amp;amp;mg=demohost&amp;amp;_CONNECTTIMEOUT=1000&amp;amp;_SERIALIZETYPE=hessian&amp;amp;ut=CENTER 10.0.0.4:12200?_p=hessian2&amp;amp;APP=demo&amp;amp;st=na620&amp;amp;v=2.0&amp;amp;_TIMEOUT=3000&amp;amp;_ih2=y&amp;amp;mg=demohost&amp;amp;_CONNECTTIMEOUT=1000&amp;amp;_SERIALIZETYPE=hessian&amp;amp;ut=CENTER 10.0.0.4:12200?_p=hessian2&amp;amp;APP=demo&amp;amp;st=et12&amp;amp;v=2.0&amp;amp;_TIMEOUT=3000&amp;amp;_ih2=y&amp;amp;mg=demohost&amp;amp;_CONNECTTIMEOUT=1000&amp;amp;_SERIALIZETYPE=hessian&amp;amp;ut=UNSH 10.0.0.5:12200?_p=hessian2&amp;amp;APP=demo&amp;amp;st=et12&amp;amp;v=2.0&amp;amp;_TIMEOUT=3000&amp;amp;_ih2=y&amp;amp;mg=demohost&amp;amp;_CONNECTTIMEOUT=1000&amp;amp;_SERIALIZETYPE=hessian&amp;amp;ut=UNSH 10.0.0.6:12200?_p=hessian2&amp;amp;APP=demo&amp;amp;st=SA128&amp;amp;v=2.0&amp;amp;_TIMEOUT=3000&amp;amp;_ih2=y&amp;amp;mg=demohost&amp;amp;_CONNECTTIMEOUT=1000&amp;amp;_SERIALIZETYPE=hessian&amp;amp;ut=UNSZ 10.0.0.7:12200?_p=hessian2&amp;amp;APP=demo&amp;amp;st=SA128&amp;amp;v=2.0&amp;amp;_TIMEOUT=3000&amp;amp;_ih2=y&amp;amp;mg=demohost&amp;amp;_CONNECTTIMEOUT=1000&amp;amp;_SERIALIZETYPE=hessian&amp;amp;ut=UNSZ 10.0.0.8:12200?_p=hessian2&amp;amp;APP=demo&amp;amp;st=na62&amp;amp;v=2.0&amp;amp;_TIMEOUT=3000&amp;amp;_ih2=y&amp;amp;mg=demohost&amp;amp;_CONNECTTIMEOUT=1000&amp;amp;_SERIALIZETYPE=hessian&amp;amp;ut=UNZBMIX 10.0.0.9:12200?_p=hessian2&amp;amp;APP=demo&amp;amp;st=na62&amp;amp;v=2.0&amp;amp;_TIMEOUT=3000&amp;amp;_ih2=y&amp;amp;mg=demohost&amp;amp;_CONNECTTIMEOUT=1000&amp;amp;_SERIALIZETYPE=hessian&amp;amp;ut=UNZBMIX 10.0.0.10:12200?_p=hessian2&amp;amp;APP=demo&amp;amp;st=na62&amp;amp;v=2.0&amp;amp;_TIMEOUT=3000&amp;amp;_ih2=y&amp;amp;mg=demohost&amp;amp;_CONNECTTIMEOUT=1000&amp;amp;_SERIALIZETYPE=hessian&amp;amp;ut=UNZBMIX Routing rules apiVersion: service.dubbo.apache.org/v1alpha1 kind: VirtualService metadata: name: demo/UnitRouter spec: hosts: - demo dubbo: - name: UnitServiceRoute services: - exact: com.taobao.hsf.DemoService:1.0.0 route details: - name: center-env match: - context: hsfcontext: user_unit: exact: CENTER route: -destination: host: demo subset: CENTER fallback: // There is no fallback in unitization, and an error is reported directly - name: unsh-env match: - context: hsfcontext: user_unit: exact: UNSH route: -destination: host: demo subset: UNSH - name: unsz-env match: - context: hsfcontext: user_unit: exact: UNSZ route: -destination: host: demo subset: UNSZ - name: zbmix-env match: - context: hsfcontext: user_unit: exact: ZBMIX route: -destination: host: demo subset: ZBMIX ---- apiVersion: service.</description></item><item><title>0-19 - An exception occurred while processing the task</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/19/</guid><description>Possible Reason The custom business class processing logic is improper.
Troubleshooting and resolution steps You can use some third-party tools or jstack [PID] &amp;gt; jstack.log to analyze the stack information and locate it.</description></item><item><title>1-19 - K8S monitoring exception</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/19/</guid><description>Possible Reason K8S custom resource type, the configuration has been modified or removed by the container. The K8S container is disconnected from the service. Troubleshooting and resolution steps Check whether the custom resource type is correctly configured. For syntax, please refer to the official documentation of K8S. Check whether the network is normal or the port mapping is correct.</description></item><item><title>4-19 - Parameter values may be wrong</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/19/</guid><description>Important Reminder The meaning of this error code has been adjusted. For Dubbo 3.1.4, 3.2.0-beta.3 and previous versions of this error code, please refer to Error Code 0-2.
Possible Reason This error code indicates that the parameter value may no longer be correct.
At present, it appears that the same protocol is listening to multiple ports at the same time. Due to design limitations, a single protocol can only listen on one port, otherwise the port configuration will be overwritten.</description></item><item><title>5-19 - Embedded ZooKeeper running abnormally</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/19/</guid><description>Possible Reason The ZooKeeper service is running abnormally or down. The Zookeeper client version is incompatible with the server startup version and cannot be connected. The connection between the application server and the ZooKeeper service is interrupted. Restricted firewall or third-party protection tools. Troubleshooting and resolution steps Check the ZooKeeper service and the health status of the server where it resides. Check whether there is a compatibility problem between the Zookeeper client version and the server startup version, and keep the versions consistent.</description></item><item><title>Context</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/context/</guid><description>All environment information of during the current call will put into the context,and all configuration information will convert the parameters of URL instance,Ref to the column of URL parameters at the schema configuration reference book
RpcContext is a temporary status recorder of ThreadLocal,when accept RPC request or send RPC request,The RpcContext will be changed.Such as: A call B and B call C. On B machine,before B call C,the RpcContext will record the information of A call B.</description></item><item><title>Network Expansion</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/networker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/networker/</guid><description>Expansion Description Peer-to-peer network node builder.
Extension ports org.apache.dubbo.remoting.p2p.Networker
Extended configuration &amp;lt;dubbo:protocol networker=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- The default value setting, when &amp;lt;dubbo:protocol&amp;gt; does not configure the networker attribute, use this configuration --&amp;gt; &amp;lt;dubbo:provider networker=&amp;#34;xxx&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.remoting.p2p.support.MulticastNetworker org.apache.dubbo.remoting.p2p.support.FileNetworker Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxNetworker.java (implement Networker interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.remoting.p2p.Networker (plain text file, content: xxx=com.xxx.XxxNetworker) XxxNetworker.java:
package com.xxx; import org.apache.dubbo.remoting.p2p.Networker; public class XxxNetworker implements Networker { public Group lookup(URL url) { //.</description></item><item><title>Networker Extension</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/impls/networker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/impls/networker/</guid><description>Summary Extension for peer to peer network grouping.
Extension Interface org.apache.dubbo.remoting.p2p.Networker
Extension Configuration &amp;lt;dubbo:protocol networker=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- default configuration, it takes effect if networker attribute is not set in &amp;lt;dubbo:protocol&amp;gt; --&amp;gt; &amp;lt;dubbo:provider networker=&amp;#34;xxx&amp;#34; /&amp;gt; Existing Extension org.apache.dubbo.remoting.p2p.support.MulticastNetworker org.apache.dubbo.remoting.p2p.support.FileNetworker Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxNetworker.java (Networker implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.remoting.p2p.Networker (plain text file with the content: xxx=com.xxx.XxxNetworker) XxxNetworker.java：
package com.xxx; import org.apache.dubbo.remoting.p2p.Networker; public class XxxNetworker implements Networker { public Group lookup(URL url) { // .</description></item><item><title>Peer-to-peer network node builder extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/page/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/page/</guid><description>page extension Expansion Description Peer-to-peer network node builder.
Extension ports org.apache.dubbo.container.page.PageHandler
Extended configuration &amp;lt;dubbo:protocol page=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- The default value setting, when &amp;lt;dubbo:protocol&amp;gt; does not configure the page attribute, use this configuration --&amp;gt; &amp;lt;dubbo:provider page=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.container.page.pages.HomePageHandler org.apache.dubbo.container.page.pages.StatusPageHandler org.apache.dubbo.container.page.pages.LogPageHandler org.apache.dubbo.container.page.pages.SystemPageHandler Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxPageHandler.java (implement PageHandler interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.container.page.PageHandler (plain text file, content: xxx=com.xxx.XxxPageHandler) XxxPageHandler.java:
package com.xxx; import org.apache.dubbo.container.page.PageHandler; public class XxxPageHandler implements PageHandler { public Group lookup(URL url) { //.</description></item><item><title>REST support</title><link>https://dubbo.apache.org/en/docs/v2.7/user/rest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/rest/</guid><description>Original author: Li Shen Document copyright: Apache 2.0license Signature - No interpretation
Working in progress &amp;hellip;
This article is lengthy since REST involves many aspects. Besides, it refers to the document style of Spring and so on. Not only limited to usage of the framework but also strives to present the design concept of the framework and the architectural idea of an excellent application. For people who only want to get a glimpse of Dubbo and REST, all they need is to browse through the Overview to Introduction to Standard Java REST API: JAX-RS.</description></item><item><title>0-20 - An exception occurred while storing stack information</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/20/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/20/</guid><description>Possible Reason The JVM has set the parameter -XX:+DisableAttachMechanism Set a stack dump path that does not exist in the system. If it does not exist, the system will try to create it. A SecurityException occurs during creation. May not have permission. Troubleshooting and resolution steps Check whether the JVM has set the above parameters. Check whether the account currently starting the service has permission to create folders.</description></item><item><title>1-20 - K8S Pod does not exist</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/20/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/20/</guid><description>Possible Reason Pods may not exist or have been removed by containers.
Troubleshooting and resolution steps You can use some third-party tools or jstack [PID] &amp;gt; jstack.log to analyze the stack information and locate it.</description></item><item><title>2-20 - Failed to get grouped results merged</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/20/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/2/20/</guid><description>Possible Reason Failed to get grouped results merged. Troubleshooting and resolution steps When the result is returned, there may be runtime exceptions in business logic, which can be traced according to the number of lines of code specified in the console.</description></item><item><title>4-20 - Data decoding failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/20/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/20/</guid><description>Possible Reason Version mismatch between server and caller.
Troubleshooting and resolution steps Check the currently used dubbo version, and try to keep a consistent or backward compatible high version.</description></item><item><title>5-20 - Error occurred while stopping dubbo module</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/20/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/20/</guid><description>Possible Reason Customize the implementation of the destruction method, and there may be exceptions when the business logic is running. The service has not been gracefully stopped, and there may be cases where the business logic has not been processed. Troubleshooting and resolution steps Check the custom implementation of the destruction method and business logic. Check whether there is time-consuming business processing logic when the service is stopped.</description></item><item><title>Implicit parameters</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/attachment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/attachment/</guid><description>You can implicitly pass parameters between service consumers and providers via setAttachment and getAttachment on RpcContext. Set the implicit parameters at service consumer side Via setAttachment on RpcContext set key/value pair for implicitly pass parameters.When finished once remote invoke,will be clear,so multi-invoke must set multi-times.
RpcContext.getContext().setAttachment(&amp;#34;index&amp;#34;, &amp;#34;1&amp;#34;); // implicitly pass parameters,behind the remote call will implicitly send these parameters to the server side, similar to the cookie, for the framework of integration, not recommended for regular business use xxxService.</description></item><item><title>Blue-Green Deployment</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/traffic/mesh-style/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/traffic/mesh-style/blue-green-deployment/</guid><description>Scene Description Describe the current IDC, service deployment, service information, desired effects, etc.
Operation process step 1
routing configuration authentication scheme step 2
routing configuration authentication scheme</description></item><item><title>Go</title><link>https://dubbo.apache.org/en/download/go/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/download/go/</guid><description/></item><item><title>Load Balancing</title><link>https://dubbo.apache.org/en/overview/core-features/load-balance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/core-features/load-balance/</guid><description>During cluster load balancing, Dubbo provides multiple balancing strategies, with the default being the weighted random strategy, which is a weight-based random load balancing strategy.
In terms of implementation, Dubbo provides client-side load balancing, meaning the Consumer determines which Provider instance to send the request to using a load balancing algorithm.
Load Balancing Strategies Currently, Dubbo has built-in the following load balancing algorithms, which can be enabled through configuration adjustments.</description></item><item><title>Simple Monitor</title><link>https://dubbo.apache.org/en/docs/v2.7/user/simple-monitor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/simple-monitor/</guid><description>Warning Monitor service is a standard Dubbo service，can be exported to the registry，also can be connected straightly.
Install the simple registry
export a simple monitor service to the registry: (If you use the installer, you don&amp;rsquo;t need to write this configuration yourself. if you implement the monitor service yourself，need it)
&amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:dubbo=&amp;#34;http://dubbo.apache.org/schema/dubbo&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&amp;#34;&amp;gt; &amp;lt;!-- configuration of current application --&amp;gt; &amp;lt;dubbo:application name=&amp;#34;simple-monitor&amp;#34; /&amp;gt; &amp;lt;!-- connection address of the registry --&amp;gt; &amp;lt;dubbo:registry address=&amp;#34;127.</description></item><item><title>Telnet Command Extensions</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/telnet-handler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/telnet-handler/</guid><description>Expansion Description All servers support telnet access for manual intervention.
Extension ports org.apache.dubbo.remoting.telnet.TelnetHandler
Extended configuration &amp;lt;dubbo:protocol telnet=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- The default value setting, when &amp;lt;dubbo:protocol&amp;gt; does not configure the telnet attribute, use this configuration --&amp;gt; &amp;lt;dubbo:provider telnet=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.remoting.telnet.support.ClearTelnetHandler org.apache.dubbo.remoting.telnet.support.ExitTelnetHandler org.apache.dubbo.remoting.telnet.support.HelpTelnetHandler org.apache.dubbo.remoting.telnet.support.StatusTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.ListTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.ChangeTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.CurrentTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.InvokeTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.TraceTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.CountTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.PortTelnetHandler Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxTelnetHandler.java (implement TelnetHandler interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.remoting.telnet.TelnetHandler (plain text file, content: xxx=com.</description></item><item><title>TelnetHandler Extension</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/impls/telnet-handler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/impls/telnet-handler/</guid><description>Summary Extension to telnet command. All server should support telnet access for operation convenience.
Extension Interface org.apache.dubbo.remoting.telnet.TelnetHandler
Extension Configuration &amp;lt;dubbo:protocol telnet=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- default configuration, will take effect if telnet attribute is not specified in &amp;lt;dubbo:protocol&amp;gt; --&amp;gt; &amp;lt;dubbo:provider telnet=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; Existing Extension org.apache.dubbo.remoting.telnet.support.ClearTelnetHandler org.apache.dubbo.remoting.telnet.support.ExitTelnetHandler org.apache.dubbo.remoting.telnet.support.HelpTelnetHandler org.apache.dubbo.remoting.telnet.support.StatusTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.ListTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.ChangeTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.CurrentTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.InvokeTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.TraceTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.CountTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.PortTelnetHandler Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxTelnetHandler.java (TelnetHandler implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.remoting.telnet.TelnetHandler (plain text file with the content: xxx=com.</description></item><item><title>标签路由规则</title><link>https://dubbo.apache.org/en/overview/core-features/traffic/tag-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/core-features/traffic/tag-rule/</guid><description/></item><item><title>0-21 - Too many instances built</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/21/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/21/</guid><description>Possible Reason Generally, it means that org.apache.dubbo.common.timer.HashedWheelTimer creates too many instances.
Troubleshooting and resolution steps It does not affect the construction of the instance, and there may be a risk of memory leaks.</description></item><item><title>1-21 - K8S No Service Available</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/21/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/21/</guid><description>Possible Reason The current service is not loaded correctly. The configured Pod does not exist in the current instance service. Troubleshooting and resolution steps You can use some third-party tools or jstack [PID] &amp;gt; jstack.log to analyze the stack information and locate it.</description></item><item><title>4-21 - Insecure serialized data detected</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/21/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/4/21/</guid><description>possible reason The current server may be under attack or Dubbo&amp;rsquo;s built-in class checking logic has not scanned the class you defined.
Troubleshooting and resolution steps If the source of the request is an attack source, please perform security hardening in time. If the request source is expected, please declare the class name you are using in the security/serialize.allowlist resource file, and Dubbo will automatically load it into the security list.</description></item><item><title>5-21 - An exception occurred when the service was destroyed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/21/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/21/</guid><description>Possible Reason The service discovery instance has been destroyed
Attachment: The current method has been discontinued in version 3.1
Troubleshooting and resolution steps</description></item><item><title>Asynchronous Call</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/async-call/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/async-call/</guid><description>As dubbo is based on a non-blocking NIO network layer, the client can start parallel call to multiple remote services without explicitly starting mulithreads, which costs relatively fewer resources.
You can config at consumer.xml for setup asynchronous call some remote service.
&amp;lt;dubbo:reference id=&amp;#34;fooService&amp;#34; interface=&amp;#34;com.alibaba.foo.FooService&amp;#34;&amp;gt; &amp;lt;dubbo:method name=&amp;#34;findFoo&amp;#34; async=&amp;#34;true&amp;#34; /&amp;gt; &amp;lt;/dubbo:reference&amp;gt; &amp;lt;dubbo:reference id=&amp;#34;barService&amp;#34; interface=&amp;#34;com.alibaba.bar.BarService&amp;#34;&amp;gt; &amp;lt;dubbo:method name=&amp;#34;findBar&amp;#34; async=&amp;#34;true&amp;#34; /&amp;gt; &amp;lt;/dubbo:reference&amp;gt; Configure the above configuration information,you can invoke the remote service in your code.</description></item><item><title>Asynchronous Execution</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/async-execute-on-provider/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/async-execute-on-provider/</guid><description>The asynchronous execute on provider switches the blocked service from the internal thread pool of Dubbo to the service custom thread to avoid over-occupation of the Dubbo thread pool, which helps to avoid mutual influence between different services.Asynchronous-Execution is not conducive to saving resources or improving RPC responsiveness, because if business execution needs to be blocked, there is always a thread to be responsible for execution.
Notice Note: Asynchronous execute on provider and asynchronous execute on consumer are independent of each other.</description></item><item><title>Asynchronous execution</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/async-execute-on-provider/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/async-execute-on-provider/</guid><description>This document is no longer maintained. You are currently viewing a snapshot version. If you want to see the latest version of the documentation, see Latest Version.
The asynchronous execution of the provider side switches the blocked business from Dubbo&amp;rsquo;s internal thread pool to the business-defined thread, avoiding excessive occupation of the Dubbo thread pool, and helping to avoid the mutual influence between different services. Asynchronous execution is tantamount to saving resources or improving RPC response performance, because if business execution needs to be blocked, there is always a thread to be responsible for execution.</description></item><item><title>Status Check Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/status-checker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/status-checker/</guid><description>Expansion Description Check the status of various resources that the service relies on. This status check can be used for both telnet&amp;rsquo;s status command and hosting&amp;rsquo;s status page.
Extension ports org.apache.dubbo.common.status.StatusChecker
Extended configuration &amp;lt;dubbo:protocol status=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- The default value setting, when &amp;lt;dubbo:protocol&amp;gt; does not configure the status attribute, use this configuration --&amp;gt; &amp;lt;dubbo:provider status=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.common.status.support.MemoryStatusChecker org.apache.dubbo.common.status.support.LoadStatusChecker org.apache.dubbo.rpc.dubbo.status.ServerStatusChecker org.apache.dubbo.rpc.dubbo.status.ThreadPoolStatusChecker org.apache.dubbo.registry.directory.RegistryStatusChecker org.apache.dubbo.rpc.config.spring.status.SpringStatusChecker org.apache.dubbo.rpc.config.spring.status.DataSourceStatusChecker Extended example Maven project structure:</description></item><item><title>StatusChecker Extension</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/impls/status-checker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/impls/status-checker/</guid><description>Summary Extension to check status of resources service depends on. This status checker can be used in both telnet status command and status page.
Extension Interface org.apache.dubbo.common.status.StatusChecker
Extension Configuration &amp;lt;dubbo:protocol status=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- default configuration, will take effect if no status attribute is configured in &amp;lt;dubbo:protocol&amp;gt; --&amp;gt; &amp;lt;dubbo:provider status=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; Existing Extension org.apache.dubbo.common.status.support.MemoryStatusChecker org.apache.dubbo.common.status.support.LoadStatusChecker org.apache.dubbo.rpc.dubbo.status.ServerStatusChecker org.apache.dubbo.rpc.dubbo.status.ThreadPoolStatusChecker org.apache.dubbo.registry.directory.RegistryStatusChecker org.apache.dubbo.rpc.config.spring.status.SpringStatusChecker org.apache.dubbo.rpc.config.spring.status.DataSourceStatusChecker Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxStatusChecker.java (StatusChecker implementation) |-resources |-META-INF |-dubbo |-org.</description></item><item><title>0-22 - I/O stream exception</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/22/</guid><description>Possible Reason Read a local file that is no longer available. Attempt to read/write the file but do not have permission. An attempt was made to write a file but disk space is no longer available. Troubleshooting and resolution steps Check if the local file exists. Check the file permissions. Check the disk space. You can use some third-party tools or jstack [PID] &amp;gt; jstack.log to analyze the stack information and locate it.</description></item><item><title>1-22 - K8S configuration address error</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/22/</guid><description>Possible Reason The K8S url is configured incorrectly and cannot be accessed normally.
Troubleshooting and resolution steps Check the K8S url configuration information to ensure that the port mapping can also be accessed normally.</description></item><item><title>5-22 - An error occurred while initializing the registry</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/22/</guid><description>Possible Reason The address configuration of the registration center is wrong. The configured address information cannot be connected through the network normally. The version of the configuration center client does not match the version of the actual server, and there is a compatibility exception. Troubleshooting and resolution steps Check whether the configured address is correct. Check whether the network is smooth and can be connected through a third-party client. Check whether there is a compatibility matching problem, you can refer to the third-party website for version adaptation.</description></item><item><title>Container Extension</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/impls/container/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/impls/container/</guid><description>Summary Service container extension, useful for loading custom contents.
Extension Interface org.apache.dubbo.container.Container
Extension Configuration java org.apache.dubbo.container.Main spring jetty log4j Existing Extensions org.apache.dubbo.container.spring.SpringContainer org.apache.dubbo.container.spring.JettyContainer org.apache.dubbo.container.spring.Log4jContainer Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxContainer.java (Container implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.container.Container (plain text file with the content: xxx=com.xxx.XxxContainer) XxxContainer.java：
package com.xxx; org.apache.dubbo.container.Container; public class XxxContainer implements Container { public Status start() { // ... } public Status stop() { // ... } } META-INF/dubbo/org.</description></item><item><title>Container Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/container/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/container/</guid><description>Expansion Description Service container extension for custom loading content.
Extension ports org.apache.dubbo.container.Container
Extended configuration java org.apache.dubbo.container.Main spring jetty log4j Known extensions org.apache.dubbo.container.spring.SpringContainer org.apache.dubbo.container.spring.JettyContainer org.apache.dubbo.container.spring.Log4jContainer Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxContainer.java (implements the Container interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.container.Container (plain text file, content: xxx=com.xxx.XxxContainer) XxxContainer.java:
package com.xxx; org.apache.dubbo.container.Container; public class XxxContainer implements Container { public Status start() { //... } public Status stop() { //... } } META-INF/dubbo/org.</description></item><item><title>Local call</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/local-call/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/local-call/</guid><description>Feature description The local call uses the injvm protocol, which is a pseudo-protocol. It does not open ports, does not initiate remote calls, and is only directly associated in the JVM, but executes Dubbo&amp;rsquo;s Filter chain.
scenes to be used When we need to call a remote service, the remote service has not been developed yet, and similar services are implemented locally using the injvm protocol. When calling this service, we can call our local implementation service.</description></item><item><title>Local Call</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/local-call/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/local-call/</guid><description>The local call uses the injvm protocol, a pseudo-protocol that does not turn on the port, does not initiate remote calls, is directly associated within the JVM, but executes the Dubbo Filter chain.
Configuration Configure injvm protocol
&amp;lt;dubbo:protocol name=&amp;#34;injvm&amp;#34; /&amp;gt; Configure default provider
&amp;lt;dubbo:provider protocol=&amp;#34;injvm&amp;#34; /&amp;gt; Configure default service
&amp;lt;dubbo:service protocol=&amp;#34;injvm&amp;#34; /&amp;gt; Use injvm first
&amp;lt;dubbo:consumer injvm=&amp;#34;true&amp;#34; .../&amp;gt; &amp;lt;dubbo:provider injvm=&amp;#34;true&amp;#34; .../&amp;gt; or
&amp;lt;dubbo:reference injvm=&amp;#34;true&amp;#34; .../&amp;gt; &amp;lt;dubbo:service injvm=&amp;#34;true&amp;#34; .../&amp;gt; Note: Dubbo services are exposed locally from 2.</description></item><item><title>0-23 - Serialized data conversion exception</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/23/</guid><description>Possible Reason There is a circular reference in the data to be serialized, resulting in a stack overflow. The version of the referenced jar package is low or there is a compatibility problem. Troubleshooting and resolution steps If using FastJson, remove SerializerFeature.DisableCircularReferenceDetect Check or upgrade the version to try. You can use some third-party tools or jstack [PID] &amp;gt; jstack.log to analyze the stack information and locate it.</description></item><item><title>1-23 - Unable to download files via url</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/23/</guid><description>Possible Reason The url mapping file does not exist. The URL cannot be connected. Troubleshooting and resolution steps Check whether the url mapping file exists. Whether it can be accessed normally through a browser or other tools.</description></item><item><title>5-23 - Waiting for export/reference service exception</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/23/</guid><description>Possible Reason When exporting/referencing services, the registration center stops abnormally or fails to provide normal services externally.
Troubleshooting and resolution steps Check whether the registration center can be connected normally, and check whether the current client version is compatible with the server.
Attachment: The exception is handled in the export/quote method, and theoretically this exception will not be thrown.</description></item><item><title>Callback parameter</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/callback-parameter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/callback-parameter/</guid><description>The parameter callback is the same as calling a local callback or listener, just declare which parameter is a callback type in Spring&amp;rsquo;s configuration file, and Dubbo will generate a reverse proxy based on the long connection so that client logic can be called from the server.Can ref to Sample code in the dubbo project.
Example of service interface CallbackService.java package com.callback; public interface CallbackService { void addListener(String key, CallbackListener listener); } CallbackListener.</description></item><item><title>PageHandler Extension</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/impls/page/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/impls/page/</guid><description>Summary Extension for page handler
Extension Interface org.apache.dubbo.container.page.PageHandler
Extension Configuration &amp;lt;dubbo:protocol page=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- default configuration, will take effect if page attribute is not set in &amp;lt;dubbo:protocol&amp;gt; --&amp;gt; &amp;lt;dubbo:provider page=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; Existing Extension org.apache.dubbo.container.page.pages.HomePageHandler org.apache.dubbo.container.page.pages.StatusPageHandler org.apache.dubbo.container.page.pages.LogPageHandler org.apache.dubbo.container.page.pages.SystemPageHandler Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxPageHandler.java (PageHandler implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.container.page.PageHandler (plain text file with the content: xxx=com.xxx.XxxPageHandler) XxxPageHandler.java：
package com.xxx; import org.apache.dubbo.container.page.PageHandler; public class XxxPageHandler implements PageHandler { public Group lookup(URL url) { // .</description></item><item><title>Service Authentication</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/security/auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/security/auth/</guid><description>Feature description Security-sensitive businesses like payments may have a need to limit anonymous calls. In terms of security enhancement, 2.7.5 introduces the authentication and authentication mechanism based on the AK/SK mechanism, and introduces the authentication service center. The main principle is that when the consumer requests a service that requires authentication, it will pass SK, request Data, timestamps, parameters and other information to generate the corresponding request signature, which is carried to the peer end through Dubbo&amp;rsquo;s Attahcment mechanism for signature verification, and business logic processing is performed only after the signature verification is passed.</description></item><item><title>0-24 - Override field value exception</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/24/</guid><description>Possible Reason The entity class does not have a setter/getter method. There may be nested attributes. Troubleshooting and resolution steps Check the entity class and set the setter/getter method. According to the stack information, check whether nested annotations are used.</description></item><item><title>1-24 - ZK startup exception</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/24/</guid><description>Possible Reason There is an incompatibility between the zk server version and the client version, and the connection cannot be made. The zk service is not started normally or the firewall cannot provide external services. Troubleshooting and resolution steps Confirm that the client version is consistent with the server version. zk can start normally or provide normal external services. You can use some third-party tools or jstack [PID] &amp;gt; jstack.log to analyze the stack information and locate it.</description></item><item><title>5-24 - An exception occurred while asynchronously waiting for the reference service</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/24/</guid><description>Possible Reason The registration center stops abnormally or cannot provide normal services to the outside world.
Troubleshooting and resolution steps Check whether the registration center can be connected normally, and check whether the current client version is compatible with the server.</description></item><item><title>Cache Extension</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/impls/cache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/impls/cache/</guid><description>Summary Cache the return value, use request parameter as the key.
Extension Interface org.apache.dubbo.cache.CacheFactory
Extension Configuration &amp;lt;dubbo:service cache=&amp;#34;lru&amp;#34; /&amp;gt; &amp;lt;!-- method level cache --&amp;gt; &amp;lt;dubbo:service&amp;gt;&amp;lt;dubbo:method cache=&amp;#34;lru&amp;#34; /&amp;gt;&amp;lt;/dubbo:service&amp;gt; &amp;lt;!-- 缺省值设置，当&amp;lt;dubbo:service&amp;gt;没有配置cache属性时，使用此配置 --&amp;gt; &amp;lt;!-- default configuration, will take affect if cache attribute isn&amp;#39;t configured in &amp;lt;dubbo:service&amp;gt; --&amp;gt; &amp;lt;dubbo:provider cache=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; Existing Extensions org.apache.dubbo.cache.support.lru.LruCacheFactory org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory org.apache.dubbo.cache.support.jcache.JCacheFactory Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxCacheFactory.java (CacheFactory implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.cache.CacheFactory (plain text file with contents: xxx=com.</description></item><item><title>Cache Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/cache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/cache/</guid><description>Expansion Description Use the request parameter as the key to cache the returned result.
Extension ports org.apache.dubbo.cache.CacheFactory
Extended configuration &amp;lt;dubbo:service cache=&amp;#34;lru&amp;#34; /&amp;gt; &amp;lt;!-- method level cache --&amp;gt; &amp;lt;dubbo:service&amp;gt;&amp;lt;dubbo:method cache=&amp;#34;lru&amp;#34; /&amp;gt;&amp;lt;/dubbo:service&amp;gt; &amp;lt;!-- The default value setting, when &amp;lt;dubbo:service&amp;gt; does not configure the cache attribute, use this configuration --&amp;gt; &amp;lt;dubbo:provider cache=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.cache.support.lru.LruCacheFactory org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory org.apache.dubbo.cache.support.jcache.JCacheFactory Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxCacheFactory.java (implements the CacheFactory interface) |-resources |-META-INF |-dubbo |-org.</description></item><item><title>Event Notification</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/events-notify/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/events-notify/</guid><description>Before calling, after calling, when an exception occurs,will trigger oninvoke, onreturn, onthrow events.You can configure which method to notify when an event occurs.
Service Interface interface IDemoService { public Person get(int id); } Service provider implement the service. class NormalDemoService implements IDemoService { public Person get(int id) { return new Person(id, &amp;#34;charles`son&amp;#34;, 4); } } Service provider configure the service which it provided. &amp;lt;dubbo:application name=&amp;#34;rpc-callback-demo&amp;#34; /&amp;gt; &amp;lt;dubbo:registry address=&amp;#34;zookeeper://127.0.0.1:2181&amp;#34;/&amp;gt; &amp;lt;bean id=&amp;#34;demoService&amp;#34; class=&amp;#34;org.</description></item><item><title>0-25 - Error loading map</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/25/</guid><description>Possible Reason Insufficient file access rights
Troubleshooting and resolution steps Check file permissions. You can use some third-party tools or jstack [PID] &amp;gt; jstack.log to analyze the stack information and locate it.</description></item><item><title>1-25 - ZK destruction exception</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/25/</guid><description>Possible Reason The current instance has been destroyed. The network may be disconnected.
Troubleshooting and resolution steps You can use some third-party tools or jstack [PID] &amp;gt; jstack.log to analyze the stack information and locate it.</description></item><item><title>5-25 - Undefined exception from custom implementation</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/25/</guid><description>Possible Reason The custom implemented org.apache.dubbo.rpc.Protocol protocol has a business logic exception when the method calls destroy.
Troubleshooting and resolution steps Check the destory method of the custom implementation class code.</description></item><item><title>Authentication Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/validation/</guid><description>Expansion Description Parameter validation extension point.
Extension ports org.apache.dubbo.validation.Validation
Extended configuration &amp;lt;dubbo:service validation=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- The default value setting, when &amp;lt;dubbo:service&amp;gt; does not configure the authentication attribute, use this configuration --&amp;gt; &amp;lt;dubbo:provider validation=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; Known extensions org.apache.dubbo.validation.support.jvalidation.JValidation
Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxValidation.java (implement Validation interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.validation.Validation (plain text file, content: xxx=com.xxx.XxxValidation) XxxValidation.java:
package com.xxx; import org.apache.dubbo.validation.Validation; public class XxxValidation implements Validation { public Object getValidator(URL url) { //.</description></item><item><title>Local Stub</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/local-stub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/local-stub/</guid><description>When using rpc, the client usually only the interface, but sometimes the client also want to perform part of the logic in the client. For example: do ThreadLocal cache, verify parameters, return mock data when call fails., etc.
To solve this problem, you can configure the stub in the API, so that when the client generates the proxy instance, it passes the proxy to the Stub via the constructor 1, and then you can implement your logic in the stub implementation code.</description></item><item><title>Validation Extension</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/impls/validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/impls/validation/</guid><description>Summary Extension for parameter validation.
Extension Interface org.apache.dubbo.validation.Validation
Extension Configuration &amp;lt;dubbo:service validation=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- default configuration, it will take effect when there&amp;#39;s no validation attribute specified in &amp;lt;dubbo:service&amp;gt; --&amp;gt; &amp;lt;dubbo:provider validation=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; Existing Extension org.apache.dubbo.validation.support.jvalidation.JValidation
Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxValidation.java (Validation implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.validation.Validation (plain text file with the content: xxx=com.xxx.XxxValidation) XxxValidation.java：
package com.xxx; import org.apache.dubbo.validation.Validation; public class XxxValidation implements Validation { public Object getValidator(URL url) { // .</description></item><item><title>0-26 - Warning message when metadata is published to the service</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/26/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/26/</guid><description>Possible Reason When the metadata stores the mapping relationship between the interface and the application, the reminder message displayed.
Troubleshooting and resolution steps Generally, it can be analyzed according to the stack information, or it can not be processed.</description></item><item><title>1-26 - xDS certificate generation failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/26/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/26/</guid><description>Possible Reason The system may not support algorithms secp256r1 and RSA to generate certificates.
Troubleshooting and resolution steps Check if the operating system supports secp256r1 and RSA algorithms. Need to download the dll file or lib for</description></item><item><title>5-26 - Metadata Exported</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/26/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/26/</guid><description>Possible Reason Metadata has been exported in the current JVM.
Troubleshooting and resolution steps</description></item><item><title>Local Mock</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/local-mock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/local-mock/</guid><description>Local mock 1 is usually used for service downgrade, such as a verification service, the client does not throw an exception when the service provider hangs up all the time, but returns the authorization failed through the Mock data.
Configured in the spring configuration file as follows:
&amp;lt;dubbo:reference interface=&amp;#34;com.foo.BarService&amp;#34; mock=&amp;#34;true&amp;#34; /&amp;gt; or
&amp;lt;dubbo:reference interface=&amp;#34;com.foo.BarService&amp;#34; mock=&amp;#34;com.foo.BarServiceMock&amp;#34; /&amp;gt; Mock implementation in the project 2：
package com.foo; public class BarServiceMock implements BarService { public String sayHello(String name) { // You can return mock data, this method is only executed when an RpcException is thrown.</description></item><item><title>Log Adaptation Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/logger-adapter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/logger-adapter/</guid><description>Expansion Description Log output adaptation extension point.
Extension ports org.apache.dubbo.common.logger.LoggerAdapter
Extended configuration &amp;lt;dubbo:application logger=&amp;#34;xxx&amp;#34; /&amp;gt; or:
-Ddubbo:application.logger=xxx Known extensions org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter org.apache.dubbo.common.logger.jcl.JclLoggerAdapter org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter org.apache.dubbo.common.logger.jdk.JdkLoggerAdapter Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxLoggerAdapter.java (implement LoggerAdapter interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.logger.LoggerAdapter (plain text file, content: xxx=com.xxx.XxxLoggerAdapter) XxxLoggerAdapter.java:
package com.xxx; import org.apache.dubbo.common.logger.LoggerAdapter; public class XxxLoggerAdapter implements LoggerAdapter { public Logger getLogger(URL url) { //... } } XxxLogger.java:
package com.xxx; import org.</description></item><item><title>LoggerAdapter Extension</title><link>https://dubbo.apache.org/en/docs/v2.7/dev/impls/logger-adapter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/dev/impls/logger-adapter/</guid><description>Summary Extension for adapting logger output
Extension Interface org.apache.dubbo.common.logger.LoggerAdapter
Extension Configuration &amp;lt;dubbo:application logger=&amp;#34;xxx&amp;#34; /&amp;gt; Or:
-Ddubbo:application.logger=xxx Existing Extension org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter org.apache.dubbo.common.logger.jcl.JclLoggerAdapter org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter org.apache.dubbo.common.logger.jdk.JdkLoggerAdapter Extension Guide Directory layout:
src |-main |-java |-com |-xxx |-XxxLoggerAdapter.java (LoggerAdapter implementation) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.logger.LoggerAdapter (plain text file with the content: xxx=com.xxx.XxxLoggerAdapter) XxxLoggerAdapter.java：
package com.xxx; import org.apache.dubbo.common.logger.LoggerAdapter; public class XxxLoggerAdapter implements LoggerAdapter { public Logger getLogger(URL url) { // ... } } XxxLogger.java：
package com.xxx; import org.</description></item><item><title>0-27 - Thread pool isolation configuration exception</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/27/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/0/27/</guid><description>Possible Reason The thread pool isolation capability of the application is not enabled, but the isolated thread pool information is configured in ServiceConfig.
Troubleshooting and resolution steps Configure and enable the thread pool isolation capability of the application: dubbo.application.executor-management-mode=isolation</description></item><item><title>1-27 - K8S monitoring exception</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/27/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/27/</guid><description>Possible Reason The system may not support algorithms secp256r1 and RSA to generate certificates.
Troubleshooting and resolution steps Check if the operating system supports secp256r1 and RSA algorithms. Need to download the dll file or lib for</description></item><item><title>5-27 - Inner class API is misused</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/27/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/27/</guid><description>Possible Reason org.apache.dubbo.config.ReferenceConfig and org.apache.dubbo.common.config.ReferenceCache may be defined as non-singleton mode.
Troubleshooting and resolution steps Check custom annotations or configurations, define the core application class as a non-singleton mode, check scope configuration.</description></item><item><title>Delay Publish</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/delay-publish/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/delay-publish/</guid><description>If your services need time to warm up, such as: initialization cache or another reference resources has to be ready. You can use the delay feature to delay publishing services. We fine-tuned the service delay exposure logic in Dubbo 2.6.5, delaying the countdown of services that require delayed exposure until Spring initialization is complete. You won&amp;rsquo;t be aware of this change while using Dubbo, so please be assured that use.</description></item><item><title>Delayed Exposure</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/delay-publish/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/delay-publish/</guid><description>If your service needs warm-up time, such as initializing the cache, waiting for related resources to be in place, etc., you can use delay for delayed exposure. In Dubbo version 2.6.5, we made minor adjustments to the service delay exposure logic, and postponed the countdown action for services that require delay exposure (delay &amp;gt; 0) until Spring initialization is complete. You will not feel this change while using Dubbo, so please feel free to use it.</description></item><item><title>QoS Anonymous Access Verification Extension</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/qos-permission/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/qos-permission/</guid><description>Expansion Description QoS anonymous access authentication extension point.
Extension ports org.apache.dubbo.qos.permission.PermissionChecker
Extended configuration Dubbo QoS dubbo.application.qos-anonymous-access-permission-level Anonymous access permission verification.
Default implementation org.apache.dubbo.qos.permission.DefaultAnonymousAccessPermissionChecker
Extended example Maven project structure:
src |-main |-java |-com |-xxx |-XxxPermissionChecker.java (implements PermissionChecker interface) |-resources |-META-INF |-dubbo |-org.apache.dubbo.qos.permission.PermissionChecker` (plain text file, content: qosPermissionChecker=com.xxx.XxxPermissionChecker) XxxPermissionChecker.java:
package com.xxx.qos.permission; import org.apache.dubbo.qos.permission.PermissionChecker; public class XxxAnonymousAccessPermissionChecker implements PermissionChecker { @Override public boolean access(CommandContext commandContext, PermissionLevel defaultCmdRequiredPermissionLevel) { //... } } META-INF/dubbo/org.apache.dubbo.qos.permission.PermissionChecker:
qosPermissionChecker=com.xxx.XxxPermissionChecker</description></item><item><title>1-28 - xDS Stub Error</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/28/</guid><description>Possible Reason The current pod may be down.
Troubleshooting and resolution steps You can use some third-party tools or jstack [PID] &amp;gt; jstack.log to analyze the stack information and locate it.</description></item><item><title>5-28 - No available annotation found</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/28/</guid><description>Possible Reason No reliable annotations were found under the scan package configuration. Mainly @DubboService or @Service
Troubleshooting and resolution steps Check the current version, @Service annotation will be scanned before 2.7.7, and @DubboService after that</description></item><item><title>Concurrency Control</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/concurrency-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/concurrency-control/</guid><description>Example of configuration Example 1: Control the concurrency of all method for a specified service interface at server-side Limit each method of com.foo.BarService to no more than 10 concurrent server-side executions (or take up thread pool threads):
&amp;lt;dubbo:service interface=&amp;#34;com.foo.BarService&amp;#34; executes=&amp;#34;10&amp;#34; /&amp;gt; Example 2: Control the concurrency of specified method for a specified service interface at server-side Limit the sayHello method of com.foo.BarService to no more than 10 concurrent server-side executions(or take up thread pool threads):</description></item><item><title>Concurrency Control</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/concurrency-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/concurrency-control/</guid><description>Configuration example Example 1 To limit each method of com.foo.BarService, the concurrent execution on the server side (or the number of threads in the thread pool) cannot exceed 10:
&amp;lt;dubbo:service interface=&amp;#34;com.foo.BarService&amp;#34; executes=&amp;#34;10&amp;#34; /&amp;gt; Example 2 To limit the sayHello method of com.foo.BarService, the concurrent execution on the server side (or the number of threads in the thread pool) cannot exceed 10:
&amp;lt;dubbo:service interface=&amp;#34;com.foo.BarService&amp;#34;&amp;gt; &amp;lt;dubbo:method name=&amp;#34;sayHello&amp;#34; executes=&amp;#34;10&amp;#34; /&amp;gt; &amp;lt;/dubbo:service&amp;gt; Example 3 Limit each method of com.</description></item><item><title>1-29 - xDS failed to read file</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/29/</guid><description>Possible Reason The network is disconnected or the target file is corrupted at this time.
Troubleshooting and resolution steps Whether the network is normal. You can use some third-party tools or jstack [PID] &amp;gt; jstack.log to analyze the stack information and locate it.</description></item><item><title>5-29 - Scan package not configured</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/29/</guid><description>Possible Reason @EnableDubbo.scanBasePackages annotation parameter value is not configured
Troubleshooting and resolution steps @EnableDubbo.scanBasePackages can be configured.</description></item><item><title>Config connections</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/config-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/config-connections/</guid><description>Control connections at server-side Limit server-side accept to no more than 10 connections
&amp;lt;dubbo:provider protocol=&amp;#34;dubbo&amp;#34; accepts=&amp;#34;10&amp;#34; /&amp;gt; OR
&amp;lt;dubbo:protocol name=&amp;#34;dubbo&amp;#34; accepts=&amp;#34;10&amp;#34; /&amp;gt; Control connections at client-side Limit client-side creating connection to no more than 10 connections for interface com.foo.BarService.
&amp;lt;dubbo:reference interface=&amp;#34;com.foo.BarService&amp;#34; connections=&amp;#34;10&amp;#34; /&amp;gt; OR
&amp;lt;dubbo:service interface=&amp;#34;com.foo.BarService&amp;#34; connections=&amp;#34;10&amp;#34; /&amp;gt; Warning If used default protocol(dubbo protocol), and the value of connections attribute is great than 0,then each service reference will has itself connection,else all service which belong to same remote server will share only one connection.</description></item><item><title>Connection Control</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/config-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/config-connections/</guid><description>Feature description scenes to be used How to use Server connection control Limit the number of connections accepted by the server to no more than 10 1:
&amp;lt;dubbo:provider protocol=&amp;#34;dubbo&amp;#34; accepts=&amp;#34;10&amp;#34; /&amp;gt; or
&amp;lt;dubbo:protocol name=&amp;#34;dubbo&amp;#34; accepts=&amp;#34;10&amp;#34; /&amp;gt; Client connection control Limit the client service to use no more than 10 connections 2:
&amp;lt;dubbo:reference interface=&amp;#34;com.foo.BarService&amp;#34; connections=&amp;#34;10&amp;#34; /&amp;gt; or
&amp;lt;dubbo:service interface=&amp;#34;com.foo.BarService&amp;#34; connections=&amp;#34;10&amp;#34; /&amp;gt; If both &amp;lt;dubbo:service&amp;gt; and &amp;lt;dubbo:reference&amp;gt; are configured with connections, &amp;lt;dubbo:reference&amp;gt; takes precedence, see: [Configuration override strategy](.</description></item><item><title>1-30 - xDS request failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/30/</guid><description>Possible Reason Versions may be inconsistent or incompatible. Timeout while reading data. There is a problem with parameter configuration. Troubleshooting and resolution steps It can be adapted according to the introduction of the third-party official website. Check whether the timeout setting is too short or there is a problem on the server. Check whether the port mapping relationship is correct.</description></item><item><title>5-30 - Duplicate bean definition</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/30/</guid><description>Possible Reason Duplicate object id or name declared.
Troubleshooting and resolution steps According to the fully qualified class name output by the console, the name can only be modified to be unique.</description></item><item><title>Ab Test</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/traffic/mesh-style/ab-testing-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/traffic/mesh-style/ab-testing-deployment/</guid><description>Scene Description Describe the current IDC, service deployment, service information, desired effects, etc.
Operation process step 1
routing configuration authentication scheme step 2
routing configuration authentication scheme</description></item><item><title>Delayed Connection</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/lazy-connect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/lazy-connect/</guid><description>Feature description scenes to be used Delayed connections are used to reduce the number of long connections. When a call is initiated, create a persistent connection.
How to use &amp;lt;dubbo:protocol name=&amp;#34;dubbo&amp;#34; lazy=&amp;#34;true&amp;#34; /&amp;gt; This configuration is only valid for the dubbo protocol that uses long connections.</description></item><item><title>Lazy Connect</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/lazy-connect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/lazy-connect/</guid><description>Lazy connect can reduce the number of keep-alive connections. When a call is initiated, create a keep-alive connection.1
&amp;lt;dubbo:protocol name=&amp;#34;dubbo&amp;#34; lazy=&amp;#34;true&amp;#34; /&amp;gt; Note: This configuration takes effect only for dubbo protocols that use keep-alive connections.&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description></item><item><title>Rust</title><link>https://dubbo.apache.org/en/download/rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/download/rust/</guid><description/></item><item><title>VirtualService</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/traffic/mesh-style/virtualservice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/traffic/mesh-style/virtualservice/</guid><description>VirtualService VirtualService is a rule used to process inbound traffic, that is to say, it is used to describe which inbound traffic applies to this routing rule.
Example of use apiVersion: service.dubbo.apache.org/v1alpha1 kind: VirtualService metadata: name: demo/StandardRouter spec: hosts: dubbo: property description Field Type Description Required name string should be named in the form of application name/router type. The name attribute is determined once the Router type is defined YES hosts string[] generally refers to the application name NO dubbo DubboRoute[] dubbo routing rules, executed sequentially, return immediately when conditions are met NO Router types are as follows: name Description StandardRouter A Router that fully uses the standard VirtualService description to be added to be added DubboRoute DubboRoute is an attribute in VirtualService, which is used to describe the boundary of the routing strategy.</description></item><item><title>脚本路由规则</title><link>https://dubbo.apache.org/en/overview/core-features/traffic/script-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/core-features/traffic/script-rule/</guid><description/></item><item><title>1-31 - xDS Response Failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/31/</guid><description>Possible Reason The client service has disconnected from the server. The server is unavailable or offline. Troubleshooting and resolution steps Check whether the server is offline or the network of the client is disconnected. Check whether the service on the server side is normal, and the interface request can be made through the network.</description></item><item><title>5-31 - Status Check Error</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/31/</guid><description>Possible Reason Currently running server status, system CPU usage is too high or memory and other indicators are too low
Troubleshooting and resolution steps Check the memory usage status of the current server, and other indicators such as CPU usage, there may be a danger of downtime.</description></item><item><title>Stick Connection</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/stickiness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/stickiness/</guid><description>Feature description scenes to be used Sticky connections are used for stateful services, so that the client always initiates calls to the same provider as much as possible, unless the provider hangs up and connects to another one.
Sticky connection will automatically enable Delayed Connection to reduce the number of long connections.
How to use &amp;lt;dubbo:reference id=&amp;#34;xxxService&amp;#34; interface=&amp;#34;com.xxx.XxxService&amp;#34; sticky=&amp;#34;true&amp;#34; /&amp;gt; Dubbo supports method-level sticky connections, if you want more fine-grained control, you can also configure it like this.</description></item><item><title>Stickiness Connection</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/stickiness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/stickiness/</guid><description>Sticky connections are used for stateful services, as much as possible so that clients always make calls to the same provider, unless the provider hangs up and connects to the other one.
Sticky connections will automatically open Lazy Connection to reduce the number of long connections.
&amp;lt;dubbo:reference id=&amp;#34;xxxService&amp;#34; interface=&amp;#34;com.xxx.XxxService&amp;#34; sticky=&amp;#34;true&amp;#34; /&amp;gt; Dubbo supports method-level sticky connection, and if you want more granular control, you can also configure as follows.
&amp;lt;dubbo:reference id=&amp;#34;xxxService&amp;#34; interface=&amp;#34;com.</description></item><item><title>1-32 - xDS Channel initialization failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/32/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/32/</guid><description>Possible Reason Versions may be inconsistent or incompatible. Timeout while reading data. There is a problem with parameter configuration. Troubleshooting and resolution steps It can be adapted according to the introduction of the third-party official website. Check whether the timeout setting is too short or there is a problem on the server. Check whether the port mapping relationship is correct.</description></item><item><title>5-32 - Apollo disconnected with an error</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/32/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/32/</guid><description>Possible Reason The Apollo Config Center may be down or disconnected from the network.
Troubleshooting and resolution steps Check the service status of the Apollo server and whether the network can communicate normally.</description></item><item><title>Token Authorization</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/token-authorization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/token-authorization/</guid><description>Through the token authorization control center at the registry to decide whether to issue tokens to consumers, you can prevent consumers from bypassing the registry access provider, another through the registry can flexibly change the authorization without modification or upgrade provider
You can turn on token authentication globally:
&amp;lt;!--Random token , generated using a UUID--&amp;gt; &amp;lt;dubbo:provider token=&amp;#34;true&amp;#34; /&amp;gt; or
&amp;lt;!--Fixed token, equivalent to the password--&amp;gt; &amp;lt;dubbo:provider token=&amp;#34;123456&amp;#34; /&amp;gt; Of course can turn on token authentication at service level:</description></item><item><title>1-33 - xDS service discovery initialization failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/33/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/33/</guid><description>Possible Reason The address configuration of the registration center in xDS mode is wrong. The firewall and third-party protection software make it impossible to provide external connections. Troubleshooting and resolution steps Check whether the xDS configuration is correct and whether the Istio status is normal. Check the firewall configuration or use the ping command of cmd for basic detection.</description></item><item><title>5-33 - An exception occurred in the Apollo configuration update event</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/33/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/33/</guid><description>Possible Reason The Apollo configuration API is used incorrectly.
Troubleshooting and resolution steps Please refer to the description about Apollo in the Dynamic Configuration Center Documentation.</description></item><item><title>Routing Rule</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/routing-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/routing-rule/</guid><description>The routing rules 1 determine the target server of one service call. It has two kinds of routing rules: conditional routing rules and script routing rules. It also support extension2.
Write Routing Rules Writing routing rules to the registry is usually done by the monitoring center or the console page.
RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension(); Registry registry = registryFactory.getRegistry(URL.valueOf(&amp;#34;zookeeper://10.20.153.10:2181&amp;#34;)); registry.register(URL.valueOf(&amp;#34;route://0.0.0.0/com.foo.BarService?category=routers&amp;amp;dynamic=false&amp;amp;rule=&amp;#34; + URL.encode(&amp;#34;host = 10.20.153.10 =&amp;gt; host = 10.20.153.11&amp;#34;))); 其中：
route:// It indicates the type of routing rules, supports routing rules and script routing rules, and can be extended.</description></item><item><title>Routing Rules</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/traffic/routing-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/traffic/routing-rule/</guid><description>Routing rules play a role in filtering the address of the target server before initiating an RPC call, and the filtered address list will be used as an alternative address for the consumer to finally initiate an RPC call.
Conditional routing. Supports configuring routing rules at the granularity of services or consumer applications. Label routing. Configure routing rules at the granularity of Provider applications. In the future, we plan to continue to enhance the script routing function based on the 2.</description></item><item><title>1-34 - Error parsing xDS</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/34/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/34/</guid><description>Possible Reason There is an error in the xDS protocol content.
Troubleshooting and resolution steps The cause can be located according to the Endpoints List printed by the stack.</description></item><item><title>5-34 - NACOS Error</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/34/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/34/</guid><description>Possible Reason NACOS configuration API usage error.
Troubleshooting and resolution steps Please refer to the description about NACOS in the Dynamic Configuration Center Documentation.</description></item><item><title>Configuration Rules</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/traffic/config-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/traffic/config-rule/</guid><description>override rules Overriding rules is a capability designed by Dubbo to dynamically adjust the behavior of RPC calls without restarting the application. Starting from version 2.7.0, dynamic configuration adjustments are supported at two granularities of service and application.
Overview Please view or modify override rules in the service governance console.
Application Granularity
# Change the weight of all services (scope:application) provided by the application demo (key:demo) on port 20880 (side:provider) to 1000 (weight:1000).</description></item><item><title>Configure rule</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/config-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/config-rule/</guid><description>Write then dynamic configuration to the registry center,This feature is usually done by the monitoring center or the center&amp;rsquo;s page.
RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension(); Registry registry = registryFactory.getRegistry(URL.valueOf(&amp;#34;zookeeper://10.20.153.10:2181&amp;#34;)); registry.register(URL.valueOf(&amp;#34;override://0.0.0.0/com.foo.BarService?category=configurators&amp;amp;dynamic=false&amp;amp;application=foo&amp;amp;timeout=1000&amp;#34;)); In the config override url：
override:// Indicates that the data is overwritten,support override and absent，can extends，Required. 0.0.0.0 Indicates that the configurations is valid for all IP addresses，If only want to overwritten specified ip data,you can replace that specified ip address.Required. com.foo.BarService Indicates that is valid for specified service,Required.</description></item><item><title>1-35 - ZK Anomaly</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/35/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/35/</guid><description>Possible Reason ZK cannot connect or the connection times out. The ZNode already exists at the time of creation. Troubleshooting and resolution steps Check whether ZK configuration IP and port number are correct. Connection testing can be done using the third-party tool ZooInspector According to the stack reminder ZNode information, judge whether the current node can be cleaned up.</description></item><item><title>5-35 - Container initialization failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/35/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/35/</guid><description>Possible Reason The org.apache.dubbo.container.Container SPI implementation of the undefined interface.
P.S. It is currently tested and used in org.apache.dubbo.container.Main class.
Troubleshooting and resolution steps</description></item><item><title>Service Downgrade</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/service-downgrade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/service-downgrade/</guid><description>You can temporarily shield a non-critical service through the service downgrade and define the return policy for it.
Publish dynamic configuration rule to the registry:
RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension(); Registry registry = registryFactory.getRegistry(URL.valueOf(&amp;#34;zookeeper://10.20.153.10:2181&amp;#34;)); registry.register(URL.valueOf(&amp;#34;override://0.0.0.0/com.foo.BarService?category=configurators&amp;amp;dynamic=false&amp;amp;application=foo&amp;amp;mock=force:return+null&amp;#34;)); The configuration mock=force:return+null means that all calls of this service will return null value directly,without making remote calls.Usually used to reduce the effect of some slow non-critical services.
Also you can change that configuration to mock=fail:return+null.Then you will get null value after a failed call.</description></item><item><title>1-36 - Unknown exception</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/36/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/36/</guid><description>Possible Reason Troubleshooting and resolution steps You can use some third-party tools or jstack [PID] &amp;gt; jstack.log to analyze the stack information and locate it.</description></item><item><title>5-36 - An error occurred during filter validation</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/36/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/36/</guid><description>Possible Reason The invoke method rewritten in the custom filter extension class has a business code exception.
Troubleshooting and resolution steps You can use some third-party tools or jstack [PID] &amp;gt; jstack.log to analyze the stack information and locate it.</description></item><item><title>Graceful Shutdown</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/graceful-shutdown/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/graceful-shutdown/</guid><description>Dubbo is graceful shutdown through the ShutdownHook of the JDK, so graceful shutdowns are not performed if you force shutdown the command, such as kill -9 PID, and will only be executed if kill PID is passed.
Howto Service provider When stop, first marked as not receiving new requests, the new request directly return the error, so that the client retries other machines. Then check thread pool thread is running, if any, waiting for all threads to complete execution, unless overtime, then forced to close.</description></item><item><title>1-37 - Nacos Anomaly</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/37/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/37/</guid><description>Possible Reason Nacos configuration information is not configured correctly.
Troubleshooting and resolution steps Check whether the ip and port number configured for Nacos are correct. If the security authentication of Nacos is enabled, check whether the user name and password are configured correctly.</description></item><item><title>5-37 - An error occurred in the processing of dynamic configuration monitoring</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/37/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/37/</guid><description>When the file changes, the listening event processing fails
Possible Reason File permissions changed or directory permissions changed.
Troubleshooting and resolution steps The code can be located according to the stack information of the console.</description></item><item><title>Hostname Binding</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/hostname-binding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/hostname-binding/</guid><description>Lookup order Default host IP lookup order：
Get local address via LocalHost.getLocalHost(). If it is 127. * loopback address, then scan the network for host IP Host configuration Registered address if it is not correct, such as the need to register public address, you can do this:
edit /etc/hosts : add machinename and public ip, such as:
test1 205.182.23.201 in dubbo.xml add host address configuration:
&amp;lt;dubbo:protocol host=&amp;#34;205.182.23.201&amp;#34;&amp;gt; or config that in dubbo.</description></item><item><title>1-38 - Socket connection exception</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/38/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/38/</guid><description>Possible Reason Connection refused. The connection has been closed. Troubleshooting and resolution steps You can use some third-party tools or jstack [PID] &amp;gt; jstack.log to analyze the stack information and locate it.</description></item><item><title>5-38 - Configuration parameter undefined</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/38/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/38/</guid><description>Possible Reason configuration parameter is undefined
Troubleshooting and resolution steps It is mostly used in test cases, and parameters can be set according to the prompt details.</description></item><item><title>Logger Strategy</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/logger-strategy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/logger-strategy/</guid><description>2.2.1 or later, dubbo support log4j、slf4j、jcl、jdk adapters 1, you can also explicitly configure the log output policy in the following ways:
Command
java -Ddubbo.application.logger=log4j Configure in dubbo.properties
dubbo.application.logger=log4j Configure in dubbo.xml
&amp;lt;dubbo:application logger=&amp;#34;log4j&amp;#34; /&amp;gt; Custom Extensions: logger-adapter&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description></item><item><title>1-39 - Failed to fetch metadata</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/39/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/39/</guid><description>Possible Reason Metadata Center has been disconnected from App Service. The data in the metadata center may have been modified. Troubleshooting and resolution steps Check whether the network communication is normal, you can use some simple cmd commands to detect, such as ping and so on. Connect and view content through third-party tools.</description></item><item><title>5-39 - An error occurred in the Dubbo configuration bean initializer</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/39/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/39/</guid><description>Possible Reason source code or modified
Troubleshooting and resolution steps Check that the business code does not modify the source code or load sequence of the core class. Such as: org.apache.dubbo.config.spring.context.DubboConfigBeanInitializer</description></item><item><title>Access Log</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/accesslog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/accesslog/</guid><description>If you want to log the access information for each provide service,you can turn on the accesslog switch,which like the access log of Apache.
Warning The size of the access log maybe too much,please check the disk capacity. Now I will show you how to config the access log. Logging by logging framework &amp;lt;dubbo:protocol accesslog=&amp;#34;true&amp;#34; .../&amp;gt; The above configuration will turn on accesslog switch for all provide services,and logging the access log with logging framework(log4j/logback/slf4j&amp;hellip;).</description></item><item><title>1-40 - Route waiting too long</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/40/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/40/</guid><description>Possible Reason The route calculation time is too long, so the address notification cannot wait for an appropriate time to update the address.
Troubleshooting and resolution steps Check the application QPS, if the QPS is very high, this is the expected log Check the implementation of custom routes, and check whether there are abnormal implementations, such as deadlocks, infinite loops, etc. You can use some third-party tools or jstack [PID] &amp;gt; jstack.</description></item><item><title>5-40 - Dubbo configuration bean not found</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/40/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/40/</guid><description>Possible Reason source code or modified
Troubleshooting and resolution steps Check that the business code does not modify the source code or load sequence of the core class. Such as: org.apache.dubbo.config.spring.context.DubboConfigBeanInitializer</description></item><item><title>Canary</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/traffic/mesh-style/canary-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/traffic/mesh-style/canary-deployment/</guid><description>Scene Description Describe the current IDC, service deployment, service information, desired effects, etc.
Operation process step 1
routing configuration authentication scheme step 2
routing configuration authentication scheme</description></item><item><title>DestinationRule</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/traffic/mesh-style/destination-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/traffic/mesh-style/destination-rule/</guid><description>DestinationRule DestinationRule is used to process the rules of the target address, and ServiceEntry, WorkloadEntry and other definitions related to DestinationRule are consistent with open source
Example of use apiVersion: service.dubbo.apache.org/v1alpha1 kind: DestinationRule metadata: name: demo-route spec: host: demo subsets: trafficPolicy: property description Field Type Description Required name string The name of the rule, easy to identify the purpose of the rule YES host string The corresponding key value in the registry, now it is the interface name YES trafficPolicy TrafficPolicy traffic policy NO subsets Subset[] naming of single or multiple versions of the service YES Subset The name of the Subset application service, which can be single or multiple versions</description></item><item><title>Node.js</title><link>https://dubbo.apache.org/en/download/nodejs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/download/nodejs/</guid><description/></item><item><title>Protocols</title><link>https://dubbo.apache.org/en/overview/core-features/protocols/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/core-features/protocols/</guid><description>The Dubbo framework offers custom, high-performance RPC communication protocols: the HTTP/2-based Triple protocol and the TCP-based Dubbo2 protocol. Additionally, Dubbo supports any third-party communication protocols, such as officially supported ones like gRPC, Thrift, REST, JsonRPC, Hessian2, and more. Further protocols can be implemented through custom extensions. This is particularly useful for handling multi-protocol communication scenarios, which are common in microservices practices.
The Dubbo framework is not tied to any specific communication protocol.</description></item><item><title>Service Container</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/service-container/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/service-container/</guid><description>The service container is a standalone launcher because the backend service does not require the functionality of a Web container ,such as Tomcat or JBoss. If you insist on using web containers to load service providers, that increase complexity and is waste of resources.
The service container is just a simple Main method and loads a simple Spring container to expose the service.
The content of Service container can be extended, built-in spring, jetty, log4j etc.</description></item><item><title>Support Graal VM</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/support-graalvm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/support-graalvm/</guid><description>dubbo3.0 supports native-image document
Feature description This document will introduce the process of connecting dubbo3.0 project to GraalVM and compiling native-image into binary.
More information about GraalVm can be read https://www.graalvm.org/docs/getting-started/container-images/ this document.
scenes to be used How to use Before compiling our dubbo project, we need to make sure that we are based on the graalVm environment.
Install GraalVM Go to https://www.graalvm.org/ official website and select the latest version to install according to your own system:</description></item><item><title>动态配置规则</title><link>https://dubbo.apache.org/en/overview/core-features/traffic/configuration-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/core-features/traffic/configuration-rule/</guid><description/></item><item><title>1-41 - Istio exceptions</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/41/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/41/</guid><description>Possible Reason Failed to fetch configuration file for istio
Troubleshooting and resolution steps Check whether the application is deployed in the Kubernetes Pod environment, currently does not support VM deployment</description></item><item><title>5-41 - Failed to read SSL certificate</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/41/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/41/</guid><description>possible reason SSL certificate configuration exception
Troubleshooting and resolution steps Check the configuration of the SSL certificate to see if the corresponding file exists</description></item><item><title>ReferenceConfig Cache</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/reference-config-cache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/reference-config-cache/</guid><description>The instance of ReferenceConfig is heavy. It encapsulates the connection to the registry and the connection to the provider, so it need to be cached. Otherwise, repeatedly generating ReferenceConfig may cause performance problems , memory and connection leaks. This problem is easy to ignored when programming in API mode.
Therefore, since 2.4.0, dubbo provides a simple utility ReferenceConfigCache for caching instances of ReferenceConfig.
Use as follows：
ReferenceConfig&amp;lt;XxxService&amp;gt; reference = new ReferenceConfig&amp;lt;XxxService&amp;gt;(); reference.</description></item><item><title>Register Only</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/registry-only/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/registry-only/</guid><description>You have two mirroring environments, two registries. You have deployed one service at only one of the registries, another registries have not had time to deploy, and other applications at both registries need to rely on the service. At this time, the service provider registers service to another registrar, but the service consumers do not consume the service from another registrar.
Disable subscription configuration
&amp;lt;dubbo:registry id=&amp;#34;hzRegistry&amp;#34; address=&amp;#34;10.20.153.10:9090&amp;#34; /&amp;gt; &amp;lt;dubbo:registry id=&amp;#34;qdRegistry&amp;#34; address=&amp;#34;10.</description></item><item><title>Sign Up Only</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/registry-only/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/registry-only/</guid><description>Feature description If there are two mirroring environments and two registries, one service is only deployed in one of the registries, and the other registry has not yet been deployed, and other applications in the two registries need to rely on this service. At this time, the service provider can only register the service to another registration center, but not subscribe to the service from another registration center.
scenes to be used How to use Disable subscription configuration &amp;lt;dubbo:registry id=&amp;#34;hzRegistry&amp;#34; address=&amp;#34;10.</description></item><item><title>1-42 - Nacos has a low version service</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/42/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/1/42/</guid><description>possible reason The Nacos registry has subscribed to an old version of the service, usually because the Dubbo version on the server side is lower than 2.7.3.
Troubleshooting and resolution steps Upgrade the server to the latest stable version.</description></item><item><title>5-42 - Dubbo certificate issuance failed</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/42/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/42/</guid><description>possible reason Dubbo failed to request the remote CA to issue a certificate
Troubleshooting and resolution steps Check CA connection configuration Check CA health status Check CA logs</description></item><item><title>Application-level Service Discovery Address Migration Rules Description</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/upgrades-and-compatibility/service-discovery/service-discovery-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/upgrades-and-compatibility/service-discovery/service-discovery-rule/</guid><description>State Model Before Dubbo 3, the address registration model was registered to the registry at the interface-level granularity, while the new application-level registration model of Dubbo 3 is registered to the registry at the application-level granularity. The implementation of the registry is almost different, which leads to the inability to merge the invokers obtained from the interface-level registration model with the invokers obtained from the application-level registration model. In order to help users migrate from the interface level to the application level, Dubbo 3 has designed the Migration mechanism, which realizes the switching of the address model in the actual call based on the switching of the three states.</description></item><item><title>Distributed transaction support</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/distributed-transaction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/service/distributed-transaction/</guid><description>Distributed transactions are implemented based on the JTA/XA specification.
two-phase commit
In Dubbo, you can use [seata](/zh-cn/blog/2019/01/17/How to use seata to ensure the consistency between dubbo microservices/) to complete the support for distributed transactions.</description></item><item><title>Distributed transaction</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/distributed-transaction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/distributed-transaction/</guid><description>Distributed transactions are based on the JTA / XA specification(this feature has not yet been implemented)
Two-phase commit:
In Dubbo, Seate can be used to support distributed transactions.</description></item><item><title>5-43 - Dubbo certificate signing connection is not secure</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/43/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/5/43/</guid><description>possible reason Dubbo&amp;rsquo;s connection to remote CA is not secure
Troubleshooting and resolution steps Check whether the Dubbo process has correctly configured the CA certificate information and the Token acquisition method of OIDC (OpenID Connect)</description></item><item><title>Export thread stack</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/dump/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/dump/</guid><description>Feature description Dubbo automatically exports the thread stack through Jstack to keep the scene, which is convenient for troubleshooting.
default policy
Export path: the user&amp;rsquo;s home directory identified by user.home Export Interval: The shortest interval allows an export every 10 minutes Export switch: open by default scenes to be used When the business thread pool is full, we need to know which resources and conditions the threads are waiting for in order to find the bottleneck or abnormal point of the system.</description></item><item><title>Thread Dump</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/dump/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/dump/</guid><description>When the business thread pool is full, we need to know what resources/conditions are waiting for the thread , to find the bottleneck point of the system or abnormal point. dubbo automatically export thread stack through Jstack to keep the scene for easy to troubleshoot the problem.
Default policy:
Export file path，user.home directory Export interval，The shortest interval allows you to export every 10 minutes Specified export file path:
# dubbo.properties dubbo.</description></item><item><title>Netty4</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/netty4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/netty4/</guid><description>Add support for netty4 communication module in 2.5.6 version of dubbo, enabled as follows:
provider：
&amp;lt;dubbo:protocol server=&amp;#34;netty4&amp;#34; /&amp;gt; or
&amp;lt;dubbo:provider server=&amp;#34;netty4&amp;#34; /&amp;gt; consumer：
&amp;lt;dubbo:consumer client=&amp;#34;netty4&amp;#34; /&amp;gt; Warning If provider need to use different communication layer framework for different protocols , please configure multiple protocols separately.
consumer configuration as follow：
&amp;lt;dubbo:consumer client=&amp;#34;netty&amp;#34;&amp;gt; &amp;lt;dubbo:reference /&amp;gt; &amp;lt;/dubbo:consumer&amp;gt; &amp;lt;dubbo:consumer client=&amp;#34;netty4&amp;#34;&amp;gt; &amp;lt;dubbo:reference /&amp;gt; &amp;lt;/dubbo:consumer&amp;gt; Next we will continue to do something：We will provide a reference data on the performance test indicators and performance test comparison with the version of netty 3.</description></item><item><title>Serialization</title><link>https://dubbo.apache.org/en/docs/v2.7/user/examples/serialization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v2.7/user/examples/serialization/</guid><description>Using Kryo and FST is very simple, just add an attribute to the dubbo RPC XML configurition:
&amp;lt;dubbo:protocol name=&amp;#34;dubbo&amp;#34; serialization=&amp;#34;kryo&amp;#34;/&amp;gt; &amp;lt;dubbo:protocol name=&amp;#34;dubbo&amp;#34; serialization=&amp;#34;fst&amp;#34;/&amp;gt; Register serialized class For releasing the high ability of Kryo and FST, it&amp;rsquo;s best to register the classes that need serializing into the dubbo system. For example, we can implement the following callback interface:
public class SerializationOptimizerImpl implements SerializationOptimizer { public Collection&amp;lt;Class&amp;gt; getSerializableClasses() { List&amp;lt;Class&amp;gt; classes = new LinkedList&amp;lt;Class&amp;gt;(); classes.</description></item><item><title>Kryo and FST Serialization</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/serialization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/advanced-features-and-usage/performance/serialization/</guid><description>Table of contents Serialization talk Enable Kryo and FST Register the class to be serialized No parameter constructor and Serializable interface Serialization performance analysis and testing test environment Test script Comparison of byte sizes generated by different serializations in Dubbo RPC Comparison of response time and throughput of different serializations in Dubbo RPC future Serialization talk dubbo RPC is the core high-performance, high-throughput remote call method in the dubbo system. I like to call it a multiplexed TCP long connection call.</description></item><item><title>Admin</title><link>https://dubbo.apache.org/en/download/admin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/download/admin/</guid><description/></item><item><title>Extensibility Adaptation</title><link>https://dubbo.apache.org/en/overview/core-features/extensibility/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/core-features/extensibility/</guid><description>From its design, Dubbo is highly extendable. Through these extension points, you can:
Intercept traffic and control its behavior. Fine-tune some of Dubbo&amp;rsquo;s default strategies and implementations. Adapt Dubbo services to internal microservices clusters or other mainstream open-source components. Everything is Extendable Dubbo&amp;rsquo;s extensibility allows the project to be conveniently divided into various sub-modules, enabling hot plugging. Users can replace Dubbo&amp;rsquo;s native implementation based on their needs to meet specific business requirements.</description></item><item><title>基于服务网格的路由规则</title><link>https://dubbo.apache.org/en/overview/core-features/traffic/mesh-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/core-features/traffic/mesh-rule/</guid><description/></item><item><title>Observability</title><link>https://dubbo.apache.org/en/overview/core-features/observability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/core-features/observability/</guid><description>Dubbo maintains observability metrics across multiple dimensions and supports various methods of visual monitoring. Observability metrics can be broadly categorized into three measurement dimensions:
Admin. The Admin console provides a visual representation of applications, services, instances, and dependency relationships within the cluster. It supports the issuance of traffic governance rules. Additionally, it offers tools such as service testing, mocking, and document management to enhance the efficiency of development and testing processes.</description></item><item><title>SPI Extensions</title><link>https://dubbo.apache.org/en/download/spi-extensions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/download/spi-extensions/</guid><description>Verify You can follow the steps here, and use the KEYS file to verify the download.
GitHub: https://github.com/apache/dubbo-spi-extensions
Release notes: https://github.com/apache/dubbo-spi-extensions/releases
Dubbo SPI Extensions 1.0.3 (2022-11-28) Source Release source | asc | sha512 Maven Release &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.dubbo.extensions&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;${component_name}&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${component_version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Included Components dubbo-cluster-extensions dubbo-cluster-broadcast-1:1.0.1 dubbo-cluster-loadbalance-peakewma:1.0.1 dubbo-cluster-specify-address-dubbo3:1.0.1 dubbo-cluster-specify-address-dubbo2:1.0.1 dubbo-filter-extensions dubbo-filter-seata:1.0.1 dubbo-configcenter-extensions dubbo-configcenter-consul:1.0.1 dubbo-configcenter-etcd:1.0.1 dubbo-metadata-report-extensions dubbo-metadata-report-consul:1.0.1 dubbo-remoting-extensions dubbo-remoting-etcd3:1.0.1 dubbo-metadata-report-etcd:1.0.1 dubbo-remoting-quic:1.0.1 dubbo-remoting-grizzly:1.0.1 dubbo-remoting-mina:1.0.1 dubbo-remoting-p2p:1.0.1 dubbo-registry-extensions dubbo-registry-dns:1.0.1 dubbo-registry-consul:1.0.1 dubbo-registry-etcd3:1.0.1 dubbo-remoting-redis:1.0.1 dubbo-registry-redis:1.0.1 dubbo-registry-sofa:1.0.1 dubbo-registry-nameservice:1.0.0 dubbo-rpc-extensions dubbo-rpc-native-thrift:1.</description></item><item><title>Authentication</title><link>https://dubbo.apache.org/en/overview/core-features/security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/core-features/security/</guid><description>Dubbo provides comprehensive mechanisms to build a secure microservices communication system, also known as a Zero Trust system. This includes:
Preventing man-in-the-middle attacks by offering identity authentication (Authentication) and TLS-based encrypted communication. Controlling inter-service access authorization (Authorization) with mechanisms like mTLS and permission checks. This document will guide you through leveraging Dubbo&amp;rsquo;s security features to build a Zero Trust system for your microservices, focusing on authentication, transparent encryption, authorization, and auditing.</description></item><item><title>Pixiu</title><link>https://dubbo.apache.org/en/download/pixiu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/download/pixiu/</guid><description/></item><item><title>Log4j vulnerability impact</title><link>https://dubbo.apache.org/en/overview/notices/log4j/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/notices/log4j/</guid><description>Recently, the mainstream logging component log4j2 broke out security vulnerability CVE-2021-44228.
The following is a summary of the impact of vulnerability CVE-2021-44228 on the Apache Dubbo framework and user response guidelines.
Dubbo scope of influence **This vulnerability has no impact on the security of Dubbo framework. **
Dubbo itself does not rely heavily on the log4j2 framework, nor does it bring log4j2 to business projects through dependency transfer. Therefore, users who are using Dubbo 2.</description></item><item><title>Microservices Ecosystem</title><link>https://dubbo.apache.org/en/overview/core-features/ecosystem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/core-features/ecosystem/</guid><description>The Dubbo community, along with numerous outstanding open-source projects, has established a rich microservices ecosystem support around Dubbo. This allows developers to opt for Dubbo as their development framework without worrying about subsequent service governance needs. From day one, Dubbo offers production-level solutions for every common issue.
The table below shows the support for ecosystem components based on the latest Dubbo Java 3.2.x version, which will be continuously updated based on development progress.</description></item><item><title>安全漏洞</title><link>https://dubbo.apache.org/en/latest/notices/security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/latest/notices/security/</guid><description>1. Log4j CVE-2021-44228 漏洞 最近，主流日志组件 log4j2 爆出安全漏洞 CVE-2021-44228。
以下是漏洞 CVE-2021-44228 对 Apache Dubbo 框架的影响总结及用户应对指南。
Dubbo 影响范围 该漏洞对 Dubbo 框架使用安全并无影响。
Dubbo 本身不强依赖 log4j2 框架，也不会通过依赖传递将 log4j2 带到业务工程中去，因此，正在使用 Dubbo 2.7.x、3.0.x 等版本的用户均无需强制升级 Dubbo 版本。
以下是 Dubbo 各组件对 log4j2 的依赖分析，涉及 dubbo-common、dubbo-spring-boot-starter、dubbo-spring-boot-actuator：
dubbo-common 包含对 log4j-core 的可选依赖，请检查项目自身是否启用了 log4j 依赖，如启用则对应升级即可。 [INFO] --- maven-dependency-plugin:3.1.2:tree (default-cli) @ dubbo-common --- [INFO] org.apache.dubbo:dubbo-common:jar:2.7.14-SNAPSHOT [INFO] +- org.apache.logging.log4j:log4j-api:jar:2.11.1:provided [INFO] \- org.apache.logging.log4j:log4j-core:jar:2.11.1:provided dubbo-spring-boot-starter 通过 spring-boot 组件传递了 log4j-api 依赖，log4j-api 本身并无安全问题，升级 log4j-core 组件时注意与 log4j-api 的兼容性 [INFO] --- maven-dependency-plugin:3.</description></item><item><title>Multiple Registries</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/multi_registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/registry/multi_registry/</guid><description>A registration center for multiple interface dimensions that can be configured by a Dubbo-go application.
1. Preparations dubbo-go cli tools and dependent tools have been installed Create a new demo application Start Nacos and Zookeeper locally 2. Using multiple registries Modify the server configuration go-server/conf/dubbogo.yaml, and register the service on two registration centers at the same time.
dubbo: registries: zookeeper: # Specify the zookeeper registration center protocol: zookeeper address: 127.0.0.1:2181 nacos: # Specify the nacos registration center protocol: nacos address: 127.</description></item><item><title>Comparison of Protobuf and Interface</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/upgrades-and-compatibility/protobufinterface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/upgrades-and-compatibility/protobufinterface/</guid><description>1. Data type 1.1. Basic types ptoto type java type double double float float int32 int int64 long uint32 int[Note] uint64 long[Note] sint32 int sint64 long fixed32 int[Note] fixed64 long[Note] sfixed32 int sfixed64 long bool boolean string String bytes ByteString [Note] In Java, unsigned 32-bit and 64-bit integers are represented using their signed logarithms, with the top bit only stored in the sign bit.
2. Composite types 2.1. Enumeration Original pb code enum TrafficLightColor { TRAFFIC_LIGHT_COLOR_INVALID = 0; TRAFFIC_LIGHT_COLOR_UNSET = 1; TRAFFIC_LIGHT_COLOR_GREEN = 2; TRAFFIC_LIGHT_COLOR_YELLOW = 3; TRAFFIC_LIGHT_COLOR_RED = 4; } Generated java code Enumerations are constants, so use uppercase</description></item><item><title>3.0 to 3.1 Operation Guide</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/upgrades-and-compatibility/3.0-to-3.1-compatibility-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/upgrades-and-compatibility/3.0-to-3.1-compatibility-guide/</guid><description>Function modification points 1. Nacos Group alignment (application-level service discovery) In Dubbo 2.7.x, the group value configured on the Nacos Registry URL is aligned with the group group in the Nacos Registry. (group can be regarded as a soft isolation similar to namespace)
In Dubbo 3.0.x, the group configured on the Nacos Registry URL is not used by default, and all use DEFAULT_GROUP. (group no longer provides isolation)
In Dubbo 3.</description></item><item><title>Tracing Dubbo With OpenTelemetry</title><link>https://dubbo.apache.org/en/blog/2024/01/31/tracing-dubbo-with-opentelemetry/</link><pubDate>Wed, 31 Jan 2024 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2024/01/31/tracing-dubbo-with-opentelemetry/</guid><description>Overview This case shows using OpenTelemetry(otlp) as the Tracer in the Dubbo project to report the Trace information to the Otlp Collector, which then forwards it to Zipkin and Jagger. Code address
It consists of three parts：
dubbo-samples-spring-boot-tracing-otel-oltp-interface dubbo-samples-spring-boot-tracing-otel-oltp-provider dubbo-samples-spring-boot-tracing-otel-oltp-consumer Architecture Quick Start Install &amp;amp; start Otlp Collector Follow OpenTelemetry Collector Quick Start to start the otlp collector.
Start Provider Run org.apache.dubbo.springboot.demo.provider.ProviderApplication directly from IDE.
Start Consumer Start org.apache.dubbo.springboot.demo.consumer.ConsumerApplication directly from IDE.</description></item><item><title>Introduction to Apache Dubbo plugin for IntelliJ IDEA</title><link>https://dubbo.apache.org/en/blog/2023/10/23/introduction-to-apache-dubbo-plugin-for-intellij-idea/</link><pubDate>Mon, 23 Oct 2023 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2023/10/23/introduction-to-apache-dubbo-plugin-for-intellij-idea/</guid><description>The most popular Java IDE, IntelliJ IDEA, has collaborated with the open-source microservice framework Apache Dubbo community, bringing good news to microservice developers. Along with IntelliJ IDEA version 2023.2, Jetbras has officially released the new Apache Dubbo in Spring Framework plugin version.
This plugin can help developers with Dubbo project initialization and facilitate the identification of Dubbo services and their dependencies during the project development process. Developing microservices based on Apache Dubbo will become very simple.</description></item><item><title>Advanced cloud native - Dubbo 3.2 officially released</title><link>https://dubbo.apache.org/en/blog/2023/04/15/advanced-cloud-native-dubbo-3.2-officially-released/</link><pubDate>Sat, 15 Apr 2023 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2023/04/15/advanced-cloud-native-dubbo-3.2-officially-released/</guid><description>Background introduction Apache Dubbo is an RPC service development framework, which is used to solve service governance and communication problems under the microservice architecture. It officially provides multi-language SDK implementations such as Java and Golang. The microservices developed using Dubbo are natively capable of remote address discovery and communication with each other. Using the rich service governance features provided by Dubbo, service governance demands such as service discovery, load balancing, and traffic scheduling can be realized.</description></item><item><title>How to proxy Dubbo service in Apache ShenYu Gateway</title><link>https://dubbo.apache.org/en/blog/2022/05/04/how-to-proxy-dubbo-service-in-apache-shenyu-gateway/</link><pubDate>Wed, 04 May 2022 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2022/05/04/how-to-proxy-dubbo-service-in-apache-shenyu-gateway/</guid><description>1. Introduction Apache ShenYu Apache ShenYu(Incubating) is an asynchronous, high-performance, cross-language, responsive API gateway. Compatible with a variety of mainstream framework systems, support for hot-plugging, users can customize the development to meet the current and future needs of users in a variety of scenarios, experienced large-scale scenarios hammered.
In May 2021, ShenYu was donated to the Apache Software Foundation, and the Apache Foundation voted unanimously to enter the incubator.</description></item><item><title>Makes it More Convenient for You to Proxy Dubbo Services in Apache APISIX</title><link>https://dubbo.apache.org/en/blog/2022/01/18/makes-it-more-convenient-for-you-to-proxy-dubbo-services-in-apache-apisix/</link><pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2022/01/18/makes-it-more-convenient-for-you-to-proxy-dubbo-services-in-apache-apisix/</guid><description>Background Apache Dubbo is a MicroService development framework open sourced by Alibaba and donated to Apache, which provides two key capabilities of RPC communication and microservice governance. It has not only been validated by Ali&amp;rsquo;s massive traffic in e-commerce scenario, but also been widely implemented in domestic technology companies.
In practical application scenarios, Apache Dubbo is generally used as the implementation framework for RPC calls between back-end systems, and when HTTP interfaces need to be provided to the front-end, the Dubbo Service is packaged as an HTTP interface through a &amp;ldquo;glue layer&amp;rdquo; and then delivered to the front-end system.</description></item><item><title>2.7.14 Release Note</title><link>https://dubbo.apache.org/en/blog/2021/09/20/2.7.14-release-note/</link><pubDate>Mon, 20 Sep 2021 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2021/09/20/2.7.14-release-note/</guid><description>Change Lists add Dynamic Configuration Override Support For ServiceDiscovery. (#8389) fix mock parameters doesn&amp;rsquo;t work when it contain &amp;lsquo;:&amp;rsquo; or &amp;lsquo;=&amp;rsquo;. (#8379) fix the issue of taking the zone parameter value in ZoneAwareClusterInvoker. (#8521) add the switch for check class is in serialize white list , default is true. (#8537) fix NPE on serialization checking when request timed out. (#8587) fix NetUtils.ignoreNetworkInterface can&amp;rsquo;t process network card name contains &amp;lsquo;(&amp;rsquo; symbol. (#8629) unify the way of getting local address.</description></item><item><title>3.0.2.1 Release Note</title><link>https://dubbo.apache.org/en/blog/2021/08/23/3.0.2.1-release-note/</link><pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2021/08/23/3.0.2.1-release-note/</guid><description>This is a bugfix version of 3.0.2. Exactly the same as version 3.0.2, except for the following changes.
Bugfix Fix nacos group inviable in consumer side (#8533) Fix NPE on serialization checking when request timed out (#8547) Compact with dubbo-all without farbic-io (#8546)</description></item><item><title>3.0.2 Release Note</title><link>https://dubbo.apache.org/en/blog/2021/08/18/3.0.2-release-note/</link><pubDate>Wed, 18 Aug 2021 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2021/08/18/3.0.2-release-note/</guid><description>Features improve generic service with @DubboService annotation. metadata report config support xml to config protocol and port. compatible for curator5. p2p invoke support wildcard url match. add Dynamic Configuration Override Support For ServiceDiscovery. add provider configuration override disable option. support native image. support disable shutdown hook. add Kubernetes Mesh Rule support. support SSL at netty transport. BugFixs fix re-start override dynamic config. fix delete configurators does not take effect. fix triple protocol will throw exception when the service is exposed.</description></item><item><title>3.0.1 Release Note</title><link>https://dubbo.apache.org/en/blog/2021/07/02/3.0.1-release-note/</link><pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2021/07/02/3.0.1-release-note/</guid><description>Optimization Refactor NameMapping to Metadata, Support application field in MigrationRule Add cache for scan result Improve config overrides of method and argument Support servlet takeover mode Add ServiceListener for ServiceConfig Improve method callback BugFixs Add force check Fix multi-registry will destroy unavailable clusters Remove needless toString convert &amp;amp; Enable checking by default Ignore invalid MetadataReportConfig Fix NPE when consumer start Fix some compatiable issues Optimize Service related issues Opt Migration &amp;amp; Fix reSubscribe for ServiceDiscovery Fix NPE in MetadataInfo Fix customizer not changed Code Improvement Thanks for these contribution to improve stability of Apache Dubbo.</description></item><item><title>Past Releases</title><link>https://dubbo.apache.org/en/blog/2020/05/18/past-releases/</link><pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2020/05/18/past-releases/</guid><description>This document is no longer maintained. You are currently viewing a snapshot version. If you want to see the latest version of the documentation, see Latest Version.
Verification you can follow these procedures and the KEYS file to verify the download files
Apache Dubbo GitHub: https://github.com/apache/dubbo Release Notes: https://github.com/apache/dubbo/releases
3.2.0-beta.3 (2022-12-22) source | asc | sha512 3.1.3 (2022-12-22) source | asc | sha512 2.7.19 (2022-12-13) source | asc | sha512 3.</description></item><item><title>Dubbo Admin service test</title><link>https://dubbo.apache.org/en/blog/2019/08/26/service-test/</link><pubDate>Mon, 26 Aug 2019 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2019/08/26/service-test/</guid><description>Based on the metadata of Dubbo2.7, Dubbo Admin implements the service test function, which can call the real service provider on the console through generalized call.
Usage Deploy the provider: You can download the demo here. This project is based on Spring Boot, which is convenient to start in the IDE or command line. For service testing, you only need to start dubbo-basic-provider.
Service-seeking: After completing the server deployment, you can query the corresponding service on the Dubbo Admin&amp;rsquo;s service test page: the information here is similar to the metadata, including the method name, parameter type and return value.</description></item><item><title>Tracing Dubbo service with Apache Skywalking</title><link>https://dubbo.apache.org/en/blog/2019/08/11/tracing-dubbo-service-with-apache-skywalking/</link><pubDate>Sun, 11 Aug 2019 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2019/08/11/tracing-dubbo-service-with-apache-skywalking/</guid><description>Introduction to Apache Skywalking Apache Skywalking is the APM system that it designed for micro-services architectures and cloud native architecture systems and supports distribute tracking. Apache skywalking (incubator) collects and analyzes the trace data and generates the relationship between the application and the service metric, Apache skywalking supports multiple languages agent, for example Java,.net core,Node.js and Go.
Currently, Skywalking has supported analysis the operation of distributed systems from 6 visual dimensions.</description></item><item><title>Dubbo extensible mechanism source code analysis - part 2</title><link>https://dubbo.apache.org/en/blog/2019/05/02/dubbo-extensible-mechanism-source-code-analysis-part-2/</link><pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2019/05/02/dubbo-extensible-mechanism-source-code-analysis-part-2/</guid><description>In the actual implementation of the Dubbo extensibility mechanism, we learned some concepts of the Dubbo extension mechanism, explored the implementation of LoadBalance in Dubbo, and implemented a LoadBalance on our own. Do you think Dubbo&amp;rsquo;s extension mechanism is great? Next, we will go deep into the source code of Dubbo and see what it is.
ExtensionLoader ExtensionLoader is the core class, which is responsible for the loading and lifecycle management of extension points.</description></item><item><title>Dubbo extensible mechanism source code analysis - part 1</title><link>https://dubbo.apache.org/en/blog/2019/04/25/dubbo-extensible-mechanism-source-code-analysis-part-1/</link><pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2019/04/25/dubbo-extensible-mechanism-source-code-analysis-part-1/</guid><description>1. Extension Mechanism of Dubbo Dubbo is claimed as a high-performance RPC framework on its official website. Today, I want to talk about another great specialty of Dubbo &amp;mdash; its scalability. As quote: Rome wasn’t built in a day. Any successful system always starts as a prototype. It is impossible to design a perfect system at the beginning. Instead, we should focus on true demand and keep improving the system. On the coding side, it requires us to pay attention on abstraction layers and high-level isolation.</description></item><item><title>Implementation background and practice of Dubbo client asynchronous interface</title><link>https://dubbo.apache.org/en/blog/2019/02/20/implementation-background-and-practice-of-dubbo-client-asynchronous-interface/</link><pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2019/02/20/implementation-background-and-practice-of-dubbo-client-asynchronous-interface/</guid><description>Preface Let&amp;rsquo;s start with a brief introduction about the stages of a complete Dubbo invocation.
Biz~ represents business thread, that is, the thread where the business logic is located. Biz~ thread pool may be created and maintained by business itself, most of which may be managed by system framework itself (for example, a web system runs under Tomcat container, Biz~ thread is maintained by Tomcat); IO~ stands for network data processing thread, which is created and maintained by IO framework (such as Netty, Grizzly).</description></item><item><title>Implementation background and practice of Dubbo server asynchronous interface</title><link>https://dubbo.apache.org/en/blog/2019/02/20/implementation-background-and-practice-of-dubbo-server-asynchronous-interface/</link><pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2019/02/20/implementation-background-and-practice-of-dubbo-server-asynchronous-interface/</guid><description>Preface It is suggested to make an understanding of the thread phase involved in the process of Dubbo first, please refer to Implementation background and practice of Dubbo client asynchronous interface for details.
Implementation background It is necessary to introduce the server-side thread strategy in more detail to deepen the user&amp;rsquo;s judgment basis for selecting server-side asynchrony. It is also necessary to introduce coroutines, the &amp;ldquo;secret weapon&amp;rdquo; often used in server-side asynchrony.</description></item><item><title>How to use Seata to ensure consistency between Dubbo Microservices</title><link>https://dubbo.apache.org/en/blog/2019/01/17/how-to-use-seata-to-ensure-consistency-between-dubbo-microservices/</link><pubDate>Thu, 17 Jan 2019 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2019/01/17/how-to-use-seata-to-ensure-consistency-between-dubbo-microservices/</guid><description>Use case A business logic for user purchasing commodities. The whole business logic is powered by 3 microservices:
Storage service: deduct storage count on given commodity. Order service: create order according to purchase request. Account service: debit the balance of user&amp;rsquo;s account. Architecture StorageService public interface StorageService { /** * deduct storage count */ void deduct(String commodityCode, int count); } OrderService public interface OrderService { /** * create order */ Order create(String userId, String commodityCode, int orderCount); } AccountService public interface AccountService { /** * debit balance of user&amp;#39;s account */ void debit(String userId, int money); } Main business logic public class BusinessServiceImpl implements BusinessService { private StorageService storageService; private OrderService orderService; /** * purchase */ public void purchase(String userId, String commodityCode, int orderCount) { storageService.</description></item><item><title>The fifth Dubbo meetup has been held in Hangzhou</title><link>https://dubbo.apache.org/en/blog/2018/12/10/the-fifth-dubbo-meetup-has-been-held-in-hangzhou/</link><pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2018/12/10/the-fifth-dubbo-meetup-has-been-held-in-hangzhou/</guid><description>The fifth Dubbo meetup has been held in Hangzhou,
Please enjoy the slides of the topics:
Ding Li: How to involve in dubbo community slides Shenli Cao: Dubbo 2.7 introduction slides Tao Yang: Dubbo practice in netease koala slides Mercy Ma: Nacos support in Dubbo slides Yihao Zhao: Sentinel: Sentinel support for Dubbo slides Zhixuan Chen: Troubleshooting Dubbo with Arthas slides</description></item><item><title>Dubbo Integrates with Nacos to Become a Registry</title><link>https://dubbo.apache.org/en/blog/2018/11/07/dubbo-integrates-with-nacos-to-become-a-registry/</link><pubDate>Wed, 07 Nov 2018 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2018/11/07/dubbo-integrates-with-nacos-to-become-a-registry/</guid><description>Nacos is an important registry in Dubbo ecosystem, and dubbo-registry-nacos is the implementation of Dubbo-integrated Nacos registry.
Preparation Works Before you integrate dubbo-registry-nacos into your Dubbo project, make sure the Nacos service is started in the background. If you are not familiar with the basic use of Nacos, you can refer to the Quick Start for Nacos: https://nacos.io/en-us/docs/quick-start.html. Nacos versions above 0.6.1 are recommended.
Get Started Quickly The operation steps for Dubbo to integrate Nacos into a registry are simple, the general steps can be divided into &amp;ldquo;add Maven dependency&amp;rdquo; and &amp;ldquo;configure the registry.</description></item><item><title>Introduction to the Dubbo protocol</title><link>https://dubbo.apache.org/en/blog/2018/10/05/introduction-to-the-dubbo-protocol/</link><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2018/10/05/introduction-to-the-dubbo-protocol/</guid><description>The concept of the protocol The protocol is the foundation of communication between two network entities, and data is transmitted from one entity to another in the form of a byte stream over the network. In the world of byte streams, this one-dimensional byte stream cannot be reshaped into two-dimensional or multi-dimensional data structures and domain objects without a protocol.
What is the protocol The protocol is the semantics determined by both parties for the communication.</description></item><item><title>Integrate Dubbo with Kubernetes</title><link>https://dubbo.apache.org/en/blog/2018/09/30/integrate-dubbo-with-kubernetes/</link><pubDate>Sun, 30 Sep 2018 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2018/09/30/integrate-dubbo-with-kubernetes/</guid><description>General goal Dubbo&amp;rsquo;s provider don&amp;rsquo;t care about service registration.Open its Dubbo service port,the declaration and publishment of the service will be executed by Kubernetes. Dubbo&amp;rsquo;s consumer directly discovers the corresponding service endpoints of Kubernetes during service discovery procedure, thereby reusing Dubbo&amp;rsquo;s existing microservice channel capabilities.The benefit is that there is no need to rely on any third-party soft-loaded registry and it can be seamlessly integrated into the multi-tenant security system of Kubernetes.</description></item><item><title>How to prepare an Apache Release</title><link>https://dubbo.apache.org/en/blog/2018/09/02/how-to-prepare-an-apache-release/</link><pubDate>Sun, 02 Sep 2018 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2018/09/02/how-to-prepare-an-apache-release/</guid><description>Understanding the Apache Release Cycle In general, Source Release is the key and the required content of Apache. But Binary Release is optional, Dubbo can choose whether to release binary packages to the Apache repository or to the Maven central repository.
Please refer to the following links for more information on ASF&amp;rsquo;s release guide:
Apache Release Guide Apache Release Policy Maven Release Info Preparation of Local Building Environment Mainly including the related preparation of signature utilities and Maven repository certification</description></item><item><title>How to implement a fully asynchronous calls chain based on Dubbo</title><link>https://dubbo.apache.org/en/blog/2018/09/02/how-to-implement-a-fully-asynchronous-calls-chain-based-on-dubbo/</link><pubDate>Sun, 02 Sep 2018 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2018/09/02/how-to-implement-a-fully-asynchronous-calls-chain-based-on-dubbo/</guid><description>Implementing the full asynchronous programming based on Dubbo, which is a new feature introduced in version 2.7.0 after the enhancement of the existing asynchronous mode.This article first reviews the supported functions and existing problems of asynchronization in 2.6.x and earlier versions, and introduces the targeted enhancements based on CompletableFuture in version 2.7.0. Then, the use of enhanced asynchronous programming is elaborated through several examples. Finally, it summarizes the new problems brought by the introduction of asynchronous mode and corresponding solutions from Dubbo.</description></item><item><title>The fourth Dubbo meetup has been held in Chengdu</title><link>https://dubbo.apache.org/en/blog/2018/08/26/the-fourth-dubbo-meetup-has-been-held-in-chengdu/</link><pubDate>Sun, 26 Aug 2018 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2018/08/26/the-fourth-dubbo-meetup-has-been-held-in-chengdu/</guid><description>The fourth Dubbo meetup has been held in Chengdu The depth of the user communication On August 26, 10:00 am - 12:00am, invited the arrival of the car to help, cloud gold, former BBD, flying fish star four companies open source enthusiasts and heavy users participate in face-to-face communication;According to the participants&amp;rsquo; feedback, answer to Dubbo many doubt, especially how to participate in the contribution to the community, as well as code contribution value point.</description></item><item><title> Dubbo Basic Usage - Dubbo Consumer Configuration</title><link>https://dubbo.apache.org/en/blog/2018/08/14/dubbo-basic-usage-dubbo-consumer-configuration/</link><pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2018/08/14/dubbo-basic-usage-dubbo-consumer-configuration/</guid><description>Dubbo Consumer Configuration Consumer Configuration Detailed There are 3 ways to configure the Dubbo Consumer: XML configuration, API call mode configuration, and annotation mode configuration.
XML Configuration Example of the simplest configuration: &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; Xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; Xmlns:dubbo=&amp;#34;http://dubbo.apache.org/schema/dubbo&amp;#34; Xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema /dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&amp;#34;&amp;gt; &amp;lt;dubbo:application name=&amp;#34;hello-world-app&amp;#34; /&amp;gt; &amp;lt;dubbo:registry address=&amp;#34;multicast://224.5.6.7:1234&amp;#34; /&amp;gt; &amp;lt;dubbo:protocol name=&amp;#34;dubbo&amp;#34; port=&amp;#34;20880&amp;#34; /&amp;gt; &amp;lt;dubbo:reference id=&amp;#34;demoServiceRemote&amp;#34; interface=&amp;#34;com.alibaba.dubbo.demo.DemoService&amp;#34; /&amp;gt; &amp;lt;/beans&amp;gt; For the supported configuration tags and corresponding configuration items, refer to the usage in the provider.</description></item><item><title>Dubbo: Several ways about synchronous/asynchronous invoke</title><link>https://dubbo.apache.org/en/blog/2018/08/14/dubbo-several-ways-about-synchronous/asynchronous-invoke/</link><pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2018/08/14/dubbo-several-ways-about-synchronous/asynchronous-invoke/</guid><description>As we all know，Dubbo adopts a single large join protocol by default and takes the NIO asynchronous communication mechanism of Netty as the low-level implementation. Based on this mechanism, Dubbo implements several invocation modes as follows:
synchronous invoke asynchronous invoke parameters callback event notification Synchronous invoke Synchronous invoke is a kind of blocking invocation mode, that is the Consumer keeps blocking and waiting, until the Provider returns.
Generally, a typical synchronous invocation process is as follows:</description></item><item><title>Dubbo Basic Usage -- Dubbo Provider Configuration</title><link>https://dubbo.apache.org/en/blog/2018/08/14/dubbo-basic-usage--dubbo-provider-configuration/</link><pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2018/08/14/dubbo-basic-usage--dubbo-provider-configuration/</guid><description>This chapter mainly talking about how to configure dubbo. According to the configuration mode, it can be divided into the following mode: XML Configuration, Properties Configuration, Annotation Configuration, API Invocation Mode Configuration. And according to the function, we can divide them into Dubbo Provider and Dubbo Consumer. In the following sections, we would explain Dubbo Provider and Dubbo Consumer respectively.
Dubbo Provider Configuration Provider Configuration in Detail The configuration mode of Dubbo Provider has 4 different ways: XML Configuration, Properties Configuration, API Invocation Mode Configuration and Annotation Configuration.</description></item><item><title>Manipulating Services Dynamically via QoS</title><link>https://dubbo.apache.org/en/blog/2018/08/14/manipulating-services-dynamically-via-qos/</link><pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2018/08/14/manipulating-services-dynamically-via-qos/</guid><description>Manipulating Services Dynamically via QoS QoS (short form of Quality of Service), is a common terminology talking about network devices. For example, by adjusting and manipulating the weights of ports of a router dynamically via QoS, engineers could give priority to services running on these ports and make sure these services&amp;rsquo; quality and reliability.
In Dubbo, QoS is used to query and manipulate services dynamically, like getting a list of active provider and consumer services, and launching or withdrawing services (i.</description></item><item><title>Source code analysis of spring-boot+Dubbo App start and stop</title><link>https://dubbo.apache.org/en/blog/2018/08/14/source-code-analysis-of-spring-boot-dubbo-app-start-and-stop/</link><pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2018/08/14/source-code-analysis-of-spring-boot-dubbo-app-start-and-stop/</guid><description>Introduction Dubbo Spring Boot project is dedicated to simplifying the development of the Dubbo RPC framework in the Spring Boot application. It also integrates the feature of Spring Boot:
Autoconfigure (ex: Annotation driver, Autoconfigure, etc.) Production-Ready (ex: Security, Healthy check, Externalize configuration, etc.) The analysis of DubboConsumer startup Have you ever thought about this : since the DubboConsumerDemo application in dubbo-spring-boot-project has only one line of code, why not just exit directly when the main method is executed?</description></item><item><title>Implementation of cross-language calls by Dubbo2.js</title><link>https://dubbo.apache.org/en/blog/2018/08/14/implementation-of-cross-language-calls-by-dubbo2.js/</link><pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2018/08/14/implementation-of-cross-language-calls-by-dubbo2.js/</guid><description>dubbo2.js is a Dubbo client for node.js developped by Qianmiwang. It supports Dubbo&amp;rsquo;s native protocol, which makes the RPC calls between javascript and java efficient and agile. This tool has been contributed to Dubbo&amp;rsquo;s community.
Cross-language calls for micro service Nowadays, Internet architecture tends to be micro-service way. The discussions about micro-service architecture becomes the most mentioned topic in different technical conferences. In China, most of the companies, such as Qianmiwang, choose Dubbo as their micro-servie architecture solution.</description></item><item><title>Generic invoke of Dubbo</title><link>https://dubbo.apache.org/en/blog/2018/08/14/generic-invoke-of-dubbo/</link><pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2018/08/14/generic-invoke-of-dubbo/</guid><description>Generic invoke of Dubbo The generic invoke could be considered to be used in the following cases:
Service test platform API service gateway The generic invoke is mainly used when the consumer does not have an API interface; instead of depending the interface jar package, the service call is initiated directly through the GenericService interface, and all POJOs in the parameters and return values are represented by a Map. Generic invoke does not require attention on the server and can be exposed as normal services.</description></item><item><title>Native Image using GraalVM</title><link>https://dubbo.apache.org/en/blog/2018/08/14/native-image-using-graalvm/</link><pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2018/08/14/native-image-using-graalvm/</guid><description>Overview This document will show you how to access GraalVM with a dubbo project and how to compile the project to a binary executable using native-image. The document also introduces the efforts we made in achieving this.
GraalVM&amp;rsquo;s essential is the Graal compiler, an excellent just-in-time (JIT) compiler. It can be used as both a JIT compiler and a static compiler for ahead-of-time compilation. Graal compiler completes the primary compilation work.</description></item><item><title>Dubbo's Load Balance</title><link>https://dubbo.apache.org/en/blog/2018/08/10/dubbos-load-balance/</link><pubDate>Fri, 10 Aug 2018 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2018/08/10/dubbos-load-balance/</guid><description>Background Dubbo is a distributed service framework that avoids single point of failure and horizontal expansion of support services. A service typically deploys multiple instances. How to select a call from a cluster of multiple service providers involves a load balancing strategy.
Concepts Before discussing load balancing, I will explain these three concepts first.
Load Balancing Fault-tolerant Cluster Service Route These three concepts are confusing. They all describe how to choose from multiple Providers to make calls.</description></item><item><title>Use Annotations In Dubbo</title><link>https://dubbo.apache.org/en/blog/2018/08/07/use-annotations-in-dubbo/</link><pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2018/08/07/use-annotations-in-dubbo/</guid><description>With the widely promotion and implementation of Microservices Architecture, the Microservices Architecture represented by Spring Boot and Spring Cloud, in Java ecosystem, introduced some brand new programming model, like:
Annotation-Driven External Configuration Auto-Configure New programming model have some advantages, for example, it does not require XML configuration, it can simplify deployment process, beyond that，it can promote development efficiency. In order to implement the microservice architecture better，Dubbo has provided more perfect support for the above three scenarios since version 2.</description></item><item><title>Using Zookeeper in Dubbo</title><link>https://dubbo.apache.org/en/blog/2018/08/07/using-zookeeper-in-dubbo/</link><pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2018/08/07/using-zookeeper-in-dubbo/</guid><description>Introduction of Zookeeper The basic concept In the mordern distrbuted applications, there are multiple coordination problems between nodes and nodes, including: leader election, group service, locking, configuration management, naming and synchronization. Apache Zookeeper, as its name implied, is a distributed, open-source coordination service framwork to address these demand.
In order to ensure the high performance, highly available and strictly ordered access, the performance aspects of ZooKeeper means it can be used in large, distributed systems and can also be deployed in cluster mode, which called &amp;lsquo;ZooKeeper ensemble&amp;rsquo;.</description></item><item><title>Your First Dubbo Demo</title><link>https://dubbo.apache.org/en/blog/2018/08/07/dubbo-101/</link><pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2018/08/07/dubbo-101/</guid><description>Java RMI Introduction Java RMI (Remote Method Invocation) is a mechanism that allows users to access or invocate an object and a method running on another JVM (Java Virtual Machine). RMI is an implementation of RPC (Remote Procedure Call) in java with support of OOP (Object Oriented Paradigms). Instead of bothering IDL (Interface Define Language), users can build distributed applications by depending on interfaces in an easy and natural way.</description></item><item><title>The third Dubbo meetup has been held in Shenzhen</title><link>https://dubbo.apache.org/en/blog/2018/07/30/the-third-dubbo-meetup-has-been-held-in-shenzhen/</link><pubDate>Mon, 30 Jul 2018 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2018/07/30/the-third-dubbo-meetup-has-been-held-in-shenzhen/</guid><description>The third Dubbo meetup has successfully been held in Shenzhen, over 2000 people submitted registration, and over 700 were present, more than 17,000 watched the live online.
Please enjoy the slides of the topics:
Zhixuan Chen: Dubbo-present-and-2.7-update (Chinese) slides Bin Kang: Microservice-in-lexinfintech (Chinese) slides Jialiang lin: sentinel (Chinese) slides</description></item><item><title>Sentinel: The flow sentinel of Dubbo services</title><link>https://dubbo.apache.org/en/blog/2018/07/27/sentinel-the-flow-sentinel-of-dubbo-services/</link><pubDate>Fri, 27 Jul 2018 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2018/07/27/sentinel-the-flow-sentinel-of-dubbo-services/</guid><description>In large clusters there may be thousands of Dubbo service instances in production, with continuous traffic coming in. However, in distributed systems, some services may be unavailable due to various of failure such as traffic surge, high system load, and network latency. If no control actions are performed, this may cause cascading failure, affecting the availability of the service. So we need a powerful library - Sentinel, which can guarantee the stability of the service, to protect the Dubbo service.</description></item><item><title>Tracking with Pinpoint</title><link>https://dubbo.apache.org/en/blog/2018/07/12/tracking-with-pinpoint/</link><pubDate>Thu, 12 Jul 2018 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2018/07/12/tracking-with-pinpoint/</guid><description>After using Dubbo to serve or integrate applications, assuming that a service backstage log shows an exception and that the service is invoked by multiple applications, it is often difficult to determine which application is called, and what is the cause of the problem, so we need a set of distributed tracking systems to quickly locate the problem. Pinpoint can help us quickly locate problems (of course, there are more than one solution).</description></item><item><title>Your First Dubbo Filter</title><link>https://dubbo.apache.org/en/blog/2018/07/01/your-first-dubbo-filter/</link><pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2018/07/01/your-first-dubbo-filter/</guid><description>Overview In overall design of Dubbo, Filter is a very important concept, most of Dubbo&amp;rsquo;s functions are based on this extension point, and the Filter interception will be executed during each call.
Extension Mechanism of Dubbo Filter There are already about 20 Filters implemented in Dubbo. Their entry is ProtocolFilterWrapper, ProtocolFilterWrapper makes a Wrapper on Protocol and will be loaded when the extension is loaded. Then, let&amp;rsquo;s see how the Filter chain is constructed.</description></item><item><title>The second Dubbo Shanghai meetup has been held successfully</title><link>https://dubbo.apache.org/en/blog/2018/06/23/the-second-dubbo-shanghai-meetup-has-been-held-successfully/</link><pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2018/06/23/the-second-dubbo-shanghai-meetup-has-been-held-successfully/</guid><description>The sencond Dubbo meetup has successfully been held in Shanghai, over 700 people submitted registration, and over 300 were present, more than 10,000 watched the live online.
Please enjoy the slides of the topics:
Jerrick Zhu: Dubbo Status and Roadmap (Chinese) slides Mercy Ma: Dubbo Cloud Native Practices and Thoughts (Chinese) slides Ping Guo: Nacos Open Source Initiative (Chinese) slides Zhiwei Pan: Dubbo Practices on Internet Finance Industries (Chinese) slides</description></item><item><title>The first Dubbo meetup has been held in Beijing</title><link>https://dubbo.apache.org/en/blog/2018/05/12/the-first-dubbo-meetup-has-been-held-in-beijing/</link><pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2018/05/12/the-first-dubbo-meetup-has-been-held-in-beijing/</guid><description>The first Dubbo meetup has successfully been held in Beijing, over 400+ people were present. What a great event!
Please enjoy the slides of the topics:
Ian Luo: Dubbo&amp;rsquo;s present and future (Chinese) slides Jun Liu: Introduction to the 4th Aliware Performance Challenge (Chinese) slides Zhixuan Chen: Quickly building Microservice with Dubbo and Spring-boot (Chinese) slides Xin Wang: Dubbo and Weidian&amp;rsquo;s Practice on Microservice Architecture (Chinese) slides</description></item><item><title>The ApacheCon NA schedule has been announced</title><link>https://dubbo.apache.org/en/blog/2018/05/02/the-apachecon-na-schedule-has-been-announced/</link><pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2018/05/02/the-apachecon-na-schedule-has-been-announced/</guid><description>Ian Luo(PMC) and Jun Liu(PMC) will talk about &amp;ldquo;Introducing Apache Dubbo(Incubating): What is Dubbo and How it Works&amp;rdquo; at ApacheCon NA this year in Montréal! Please check out the schedule here and register here.</description></item><item><title>The GSoC(Google Summer of Code) 2018</title><link>https://dubbo.apache.org/en/blog/2018/04/25/the-gsocgoogle-summer-of-code-2018/</link><pubDate>Wed, 25 Apr 2018 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2018/04/25/the-gsocgoogle-summer-of-code-2018/</guid><description>The GSoC(Google Summer of Code) 2018 projects has been announced, Raghu Reddy&amp;rsquo;s project &amp;ldquo;Extending Serialization protocols support for Apache Dubbo&amp;rdquo; has been accepted! Congratulations!</description></item><item><title>Dubbo roadmap is announced in QCon Beijing 2018</title><link>https://dubbo.apache.org/en/blog/2018/04/22/dubbo-roadmap-is-announced-in-qcon-beijing-2018/</link><pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2018/04/22/dubbo-roadmap-is-announced-in-qcon-beijing-2018/</guid><description>Ian Luo has delivered a great talk at QCon Beijing 2018, where the roadmap of Dubbo has also be announced. Please enjoy the slides!</description></item><item><title/><link>https://dubbo.apache.org/en/docs/v3.0/references/graalvm/support-graalvm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs/v3.0/references/graalvm/support-graalvm/</guid><description>Overview This document will show you how to access GraalVM with a dubbo project and how to compile the project to a binary executable using native-image.
For more information about GraalVM, read https://www.graalvm.org/docs/getting-started/container-images/.
Demo Before compiling the dubbo project, make sure that we are programming based on the GraalVM environment.
Install GraalVM
Visite the official website (https://www.graalvm.org/ ) and install the latest version based on your system:
After installation, configure the path of JAVA_HOME.</description></item><item><title>99-0 - Internal Unknown Error</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/99/0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/99/0/</guid><description>A unknown error happened inside Dubbo.
Possible Reason Unknown error.
Troubleshooting and resolution steps Protect the site. Save the log file, and record as much as possible the situation at the time of the failure. If there are other error code log records before this error code, please check the record of that error code first. Check whether the configuration file is correct. If the error was introduced by modifying the code, try to roll back to the previous version.</description></item><item><title>AOP and Extensibility Mechanisms</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/design/aop_and_extension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/design/aop_and_extension/</guid><description>1. extension module and init method 1.1 Interface and implementation An interface in golang is often accompanied by multiple implementation classes, dubbo-go provides a pluggable and extensible mechanism for interface implementation classes. Reduce the coupling between modules, making it easier for developers to introduce and customize components.
1.2 init method in golang The init method is a special method in golang. After the user introduces a group of modules, the init method in these modules will be executed first when the program starts to perform loading logic.</description></item><item><title>Application-Level Service Discovery</title><link>https://dubbo.apache.org/en/blog/1/01/01/application-level-service-discovery/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/1/01/01/application-level-service-discovery/</guid><description/></item><item><title>Architecture</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/design/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/design/architecture/</guid><description>Node description Registry : The registry responsible for service registration and discovery in dubbo-go Consumer : The service consumer who invokes the remote service Provider : The service provider of the exposed service Process description 0.register : When the service provider starts, it will automatically register its own service to the registration center 1. subscribe : The service consumer will subscribe to the registration center for the services it needs when it starts 2.</description></item><item><title>Basic concepts of configuration</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/refer/basic_concept/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/refer/basic_concept/</guid><description>1. Framework configuration The Dubbo-go framework needs to rely on configuration to start. Configuration contains the various capabilities that a developer wishes to use with the framework.
Configuration format yaml
Configuration path Load framework configuration from ../conf/dubbogo.yaml by default
You can modify the configuration file path by specifying the environment variable: DUBBO_GO_CONFIG_PATH=$(your_config_path)/dubbogo.yaml.
Configure the root structure Located at dubbo.apache.org/dubbo-go/v3/config/root_config.go: RootConfig
When the framework is loaded, any form of configuration will be parsed into RootConfig and loaded in the RootConfig.</description></item><item><title>Dubbo's application and interface</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/design/app_and_interface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/design/app_and_interface/</guid><description>Dubbogo service level Dubbogo has two service levels: App Level and Interface Level, which are closely related to the framework configuration structure.
As shown in the figure below, you can see that the components at the application level are marked in light red, and the components at the interface level are marked in light blue:
1. Application level components Features of application-level components: shared by all interface-level components of the current application.</description></item><item><title>dubbogo 3.0 flexible service</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/limit/adaptive-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/limit/adaptive-service/</guid><description>Flexible load balancing (flexible service) Flexible service is a decentralized intelligent load balancing component, and it is also one of the major new features in Dubbo-go version 3.0. Flexible services are still in the early experimental stage, and this feature will continue to be optimized in subsequent versions, and we will work with the Dubbo community to explore a set of best practices suitable for microservice scenarios.
The traditional load balancing algorithm is implemented by algorithms such as random nodes and RoundRobin.</description></item><item><title>Elegant online and offline</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/traffic/graceful_shutdown/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/traffic/graceful_shutdown/</guid><description>Gracefully log in and out Introduction In the process of stable production, container scheduling is completely controlled by k8s, and microservice governance is completely maintained and managed by service framework or operation and maintenance personnel. In the case of releasing a new version or expanding or shrinking the capacity, the old container instance will be terminated and replaced with a new container instance. For an online production environment carrying high traffic, if the connection of this replacement process is unreasonable, the A large number of wrong requests are caused in a short period of time, triggering alarms and even affecting normal business.</description></item><item><title>Enhanced HTTP Standard Capabilities of Triple Protocol</title><link>https://dubbo.apache.org/en/blog/1/01/01/enhanced-http-standard-capabilities-of-triple-protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/1/01/01/enhanced-http-standard-capabilities-of-triple-protocol/</guid><description>Enhanced HTTP Standard Capabilities of Triple Protocol - Support for Multiple Content-Type This article focuses on how Triple supports more of the HTTP standard Content-Type and how the service receives these requests.
Overview Triple currently supports two serialization methods: Json and protobuf, corresponding to the ContentTypes:
application/json application/grpc+proto This poses no issue when both the consumer and provider are backend services. However, for browser clients, they may send a wider variety of ContentTypes, which requires server-side support for decoding, such as:</description></item><item><title>Extension Point Development Guide</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/dubbo-spi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/reference-manual/spi/description/dubbo-spi/</guid><description>1 Introduction The full name of SPI is Service Provider Interface, which is a service discovery mechanism. The essence of SPI is to configure the fully qualified name of the interface implementation class in the file, and the service loader reads the configuration file and loads the implementation class. In this way, the implementation class can be dynamically replaced for the interface at runtime. Because of this feature, we can easily provide extended functions for our programs through the SPI mechanism.</description></item><item><title>generalization call</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/concept/generic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/concept/generic/</guid><description>Generalized call is a special call method of Dubbo-Go, which allows intermediate nodes to pass call information without interface information, and is often used in test and gateway scenarios. Generalized calls support Dubbo and Triple protocols, but the current serialization scheme only supports Hessian.
background For ease of understanding, this document uses gateway usage scenarios to introduce generalized calls. Let&amp;rsquo;s consider ordinary calls first (non-generic calls). The figure below contains two key roles of consumer and provider (endpoint is used to represent a consumer or a provider in the following), and each has a definition of the org.</description></item><item><title>Introduction to Error Code Mechanism</title><link>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/java-sdk/faq/intro/</guid><description>background The Logger abstraction layer that Dubbo relies on internally provides log output capabilities, but most of the exception logs do not come with troubleshooting instructions, resulting in users being unable to handle the exception after seeing it.
In order to solve this problem, since Dubbo version 3.1, an error code mechanism has been introduced. It connects the error code FAQ in the official documentation with the logging framework. When the abstract output of the log is abnormal, a link to the official website document corresponding to the output is attached to guide the user to conduct independent investigation.</description></item><item><title>Multilingual RPC</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/concept/multi_language/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/concept/multi_language/</guid><description>Cross-language call With the wide-scale application of microservice scenarios, multi-language scenarios are becoming more and more common, and developers are more willing to use more suitable languages to implement different modules of a complex system. For example, use C to write gateways, use Go to write K8S resource operators, and use Java to write business applications. Languages and scenarios are not bound. Enterprises can often choose the appropriate language by combining their own technology stack and the expertise of developers.</description></item><item><title>Network Protocol</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/concept/protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/concept/protocol/</guid><description>1. RPC service framework and network protocol The network protocol is very important in the RPC scenario. In the microservice scenario, the communication between service processes depends on the network that can be connected, and the network protocol that is consistent between the client and the server. Network protocol is an abstract concept. From the perspective of Dubbo-go application development, we might as well divide the protocols we care about into three dimensions for discussion.</description></item><item><title>Proxyless Service Mesh</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/proxyless_service_mesh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/governance/service-mesh/proxyless_service_mesh/</guid><description>1. What is Proxyless Service-Mesh (No Proxy Service Mesh) ? 1.1 Brief Analysis of Service Mesh Istio is the most popular open source service mesh today. It consists of a control plane and a data plane. Its architecture is as follows. The picture is taken from istio official website
The control plane located in the lower half of the figure is responsible for the delivery of resources such as configuration, service information, and certificates.</description></item><item><title>Select the network protocol to use</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/protocol/choose_protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/tutorial/develop/protocol/choose_protocol/</guid><description>Modify the protocol used 1. Preparations dubbo-go cli tools and dependent tools have been installed Create a new demo application 2. How to configure the network protocol As you can see in the Quick Start section, the generated Demo sets the Protocol to tri, indicating that the Triple protocol is used for service exposure and service invocation. The configuration API used in the quick start chapter writes the configuration, which has the advantage of not needing to use configuration files.</description></item><item><title>Service Registration Discovery</title><link>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/concept/registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/docs3-v2/golang-sdk/preface/concept/registry/</guid><description>1. Dubbo&amp;rsquo;s registration center The registration center is responsible for saving the information of the server application in the RPC scenario.
The server registers the interface information and sends its own address to the registration center, and the client reads and subscribes to the list of addresses that need to be called from the registration center. The entire structure is shown in the figure:
For details about Dubbo service discovery, please refer to Dubbo Official Website Concept Introduction</description></item></channel></rss>