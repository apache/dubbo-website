<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Core Features on Apache Dubbo</title><link>https://cn.dubbo.apache.org/en/overview/core-features/</link><description>Recent content in Core Features on Apache Dubbo</description><generator>Hugo</generator><language>en</language><atom:link href="https://cn.dubbo.apache.org/en/overview/core-features/index.xml" rel="self" type="application/rss+xml"/><item><title>Develop microservice with Dubbo</title><link>https://cn.dubbo.apache.org/en/overview/core-features/service-definition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/overview/core-features/service-definition/</guid><description>&lt;p>Dubbo addresses a series of challenges from development and deployment to governance and operations in enterprise microservices. Dubbo provides a full suite of services for developers, from project creation, development testing, to deployment, visual monitoring, traffic governance, and ecosystem integration.&lt;/p>
&lt;h3 id="development">Development&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Language Support&lt;/strong>: Dubbo supports various programming languages including Java, Go, Rust, Node.js, and defines a set of paradigms for microservice development. A corresponding scaffold is available for quickly creating a microservice project skeleton.&lt;/li>
&lt;li>&lt;strong>Deployment&lt;/strong>: Dubbo applications can be deployed in different environments including virtual machines, Docker containers, Kubernetes, and service mesh architectures.&lt;/li>
&lt;li>&lt;strong>Service Governance&lt;/strong>: Dubbo provides capabilities like address discovery, load balancing, and traffic control. It also offers an Admin dashboard for visual control and a rich microservice ecosystem.&lt;/li>
&lt;/ul>
&lt;h4 id="creating-a-project">Creating a Project&lt;/h4>
&lt;p>The &lt;a href="https://start.dubbo.apache.org/bootstrap.html">Dubbo Microservices Project Scaffold&lt;/a> can be used to quickly create a microservices project. The scaffold can generate a microservice project with necessary dependencies based on the features or components you want.&lt;/p></description></item><item><title>Service Mesh</title><link>https://cn.dubbo.apache.org/en/overview/core-features/service-mesh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/overview/core-features/service-mesh/</guid><description>&lt;p>Dubbo Mesh is Dubbo&amp;rsquo;s comprehensive microservices solution in a cloud-native context. It helps developers integrate Dubbo services with standard Kubernetes Native Service systems, enabling seamless connectivity with leading service mesh products like Istio.&lt;/p>
&lt;p>Below is the deployment architecture diagram for Dubbo Mesh.&lt;/p>
&lt;p>&lt;img alt="Dubbo-Mesh" src="https://cn.dubbo.apache.org/imgs/v3/mesh/mix-mesh.png">&lt;/p>
&lt;ul>
&lt;li>Control Plane: Istio serves as the unified control plane, providing cluster-wide capabilities like Kubernetes adaptation, service discovery, certificate management, observability, and traffic management.&lt;/li>
&lt;li>Data Plane: Dubbo application instances act as data plane components and support two deployment modes:
&lt;ul>
&lt;li>Proxy Mode: Dubbo and Envoy are deployed in the same pod, and all traffic to and from Dubbo is intercepted and managed by Envoy.&lt;/li>
&lt;li>Proxyless Mode: Dubbo instances are deployed independently, communicating directly with each other and interacting directly with the control plane via the xDS protocol.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>For general content on service mesh architecture and why you might want to integrate with the Istio control plane, please refer to the &lt;a href="https://istio.io/">Istio official website&lt;/a>. This document will focus on the Dubbo Mesh solution itself.&lt;/p></description></item><item><title>Service Discovery</title><link>https://cn.dubbo.apache.org/en/overview/core-features/service-discovery/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/overview/core-features/service-discovery/</guid><description>&lt;p>Dubbo provides a Client-Based service discovery mechanism, relying on third-party registry components to coordinate the service discovery process. It supports popular registries like Nacos, Consul, and Zookeeper.&lt;/p>
&lt;p>Below is a basic workflow diagram for Dubbo&amp;rsquo;s service discovery mechanism:&lt;/p>
&lt;p>&lt;img alt="service-discovery" src="https://cn.dubbo.apache.org/imgs/v3/feature/service-discovery/arc.png">&lt;/p>
&lt;p>Service discovery involves three roles: providers, consumers, and the registry. In this setup, Dubbo provider instances register their URL addresses with the registry, which aggregates this data. Dubbo consumers read the address list from the registry and subscribe to changes. Whenever the address list changes, the registry notifies all subscribed consumer instances.&lt;/p></description></item><item><title>More Advanced Features</title><link>https://cn.dubbo.apache.org/en/overview/core-features/more/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/overview/core-features/more/</guid><description>&lt;p>As a microservice framework closely related to application development and aimed at providing enterprise-level service governance capabilities, Dubbo offers a variety of advanced features covering service call behavior control, service diagnostics and tuning, and service governance.&lt;/p>
&lt;p>Different language SDKs may have slight variations in feature implementation and configuration methods. For a specific list of features and usage, refer to the following documents:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/advanced-features-and-usage/">Java&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cn.dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/">Golang&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="controlling-service-invocation-behavior">Controlling Service Invocation Behavior&lt;/h2>
&lt;ul>
&lt;li>Service Versions&lt;/li>
&lt;li>Service Groups&lt;/li>
&lt;li>Group Aggregation&lt;/li>
&lt;li>Asynchronous Invocation&lt;/li>
&lt;li>Asynchronous Execution&lt;/li>
&lt;li>Streaming Communication&lt;/li>
&lt;li>Reactive Programming&lt;/li>
&lt;li>Generic Invocation&lt;/li>
&lt;li>Generic Implementation&lt;/li>
&lt;li>Passing Implicit Parameters in Call Chain&lt;/li>
&lt;li>RPC Call Context&lt;/li>
&lt;li>Invocation Event Notifications&lt;/li>
&lt;li>Server Callbacks to Client&lt;/li>
&lt;li>Subscribe Only&lt;/li>
&lt;li>Register Only&lt;/li>
&lt;li>Runtime Dynamic IP Specification&lt;/li>
&lt;li>Direct Provider Connection&lt;/li>
&lt;li>Startup Checks&lt;/li>
&lt;li>Local Invocation&lt;/li>
&lt;li>Parameter Validation&lt;/li>
&lt;li>Local Mocking&lt;/li>
&lt;li>Local Stubs&lt;/li>
&lt;li>Echo Tests&lt;/li>
&lt;li>Invocation Information Logging&lt;/li>
&lt;li>Delayed Exposure&lt;/li>
&lt;li>Cluster Fault Tolerance&lt;/li>
&lt;li>Service Degradation&lt;/li>
&lt;/ul>
&lt;h2 id="diagnostics-and-tuning">Diagnostics and Tuning&lt;/h2>
&lt;ul>
&lt;li>Port Protocol Multiplexing&lt;/li>
&lt;li>Thread Pool Isolation&lt;/li>
&lt;li>Multiple Protocols&lt;/li>
&lt;li>Multiple Registry Centers&lt;/li>
&lt;li>Request Latency Sampling&lt;/li>
&lt;li>Thread Models&lt;/li>
&lt;li>Service Reference Configuration Object Caching&lt;/li>
&lt;li>Route State Collection&lt;/li>
&lt;li>Load Balancing&lt;/li>
&lt;li>Simplified Registration Information&lt;/li>
&lt;li>Invocation Result Caching&lt;/li>
&lt;li>Concurrency Control&lt;/li>
&lt;li>Connection Control&lt;/li>
&lt;li>Delayed Connections&lt;/li>
&lt;li>Sticky Connections&lt;/li>
&lt;li>Graal VM Support&lt;/li>
&lt;li>Exporting Thread Stack Trace&lt;/li>
&lt;li>Kryo and FST Serialization&lt;/li>
&lt;li>Custom Service Container&lt;/li>
&lt;li>Graceful Shutdown&lt;/li>
&lt;li>Custom Host Address Exposure&lt;/li>
&lt;li>Consistent Hashing&lt;/li>
&lt;li>Logging Framework Adaptation and Runtime Management&lt;/li>
&lt;li>Kubernetes Lifecycle Probes&lt;/li>
&lt;/ul>
&lt;p>These features are designed to provide more control and flexibility in a microservices environment. They can help improve system reliability, enhance performance, and ease the process of deploying, managing, and scaling applications.&lt;/p></description></item><item><title>Load Balancing</title><link>https://cn.dubbo.apache.org/en/overview/core-features/load-balance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/overview/core-features/load-balance/</guid><description>&lt;p>During cluster load balancing, Dubbo provides multiple balancing strategies, with the default being the &lt;code>weighted random&lt;/code> strategy, which is a weight-based random load balancing strategy.&lt;/p>
&lt;p>In terms of implementation, Dubbo provides client-side load balancing, meaning the Consumer determines which Provider instance to send the request to using a load balancing algorithm.&lt;/p>
&lt;h2 id="load-balancing-strategies">Load Balancing Strategies&lt;/h2>
&lt;p>Currently, Dubbo has built-in the following load balancing algorithms, which can be enabled through configuration adjustments.&lt;/p></description></item><item><title>Protocols</title><link>https://cn.dubbo.apache.org/en/overview/core-features/protocols/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/overview/core-features/protocols/</guid><description>&lt;p>The Dubbo framework offers custom, high-performance RPC communication protocols: the HTTP/2-based Triple protocol and the TCP-based Dubbo2 protocol. Additionally, Dubbo supports any third-party communication protocols, such as officially supported ones like gRPC, Thrift, REST, JsonRPC, Hessian2, and more. Further protocols can be implemented through custom extensions. This is particularly useful for handling multi-protocol communication scenarios, which are common in microservices practices.&lt;/p>
&lt;p>&lt;strong>The Dubbo framework is not tied to any specific communication protocol. In its implementation, Dubbo&amp;rsquo;s support for multiple protocols is highly flexible. It allows you to publish services that use different protocols within a single application. Furthermore, it supports exposing all protocols externally through the same port.&lt;/strong>&lt;/p></description></item><item><title>Extensibility Adaptation</title><link>https://cn.dubbo.apache.org/en/overview/core-features/extensibility/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/overview/core-features/extensibility/</guid><description>&lt;p>From its design, Dubbo is highly extendable. Through these extension points, you can:&lt;/p>
&lt;ul>
&lt;li>Intercept traffic and control its behavior.&lt;/li>
&lt;li>Fine-tune some of Dubbo&amp;rsquo;s default strategies and implementations.&lt;/li>
&lt;li>Adapt Dubbo services to internal microservices clusters or other mainstream open-source components.&lt;/li>
&lt;/ul>
&lt;h2 id="everything-is-extendable">Everything is Extendable&lt;/h2>
&lt;p>Dubbo&amp;rsquo;s extensibility allows the project to be conveniently divided into various sub-modules, enabling hot plugging. Users can replace Dubbo&amp;rsquo;s native implementation based on their needs to meet specific business requirements.&lt;/p></description></item><item><title>Observability</title><link>https://cn.dubbo.apache.org/en/overview/core-features/observability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/overview/core-features/observability/</guid><description>&lt;p>Dubbo maintains observability metrics across multiple dimensions and supports various methods of visual monitoring. Observability metrics can be broadly categorized into three measurement dimensions:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Admin.&lt;/strong> The Admin console provides a visual representation of applications, services, instances, and dependency relationships within the cluster. It supports the issuance of traffic governance rules. Additionally, it offers tools such as service testing, mocking, and document management to enhance the efficiency of development and testing processes.&lt;/p></description></item><item><title>Authentication</title><link>https://cn.dubbo.apache.org/en/overview/core-features/security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/overview/core-features/security/</guid><description>&lt;p>Dubbo provides comprehensive mechanisms to build a secure microservices communication system, also known as a Zero Trust system. This includes:&lt;/p>
&lt;ul>
&lt;li>Preventing man-in-the-middle attacks by offering identity authentication (Authentication) and TLS-based encrypted communication.&lt;/li>
&lt;li>Controlling inter-service access authorization (Authorization) with mechanisms like mTLS and permission checks.&lt;/li>
&lt;/ul>
&lt;p>This document will guide you through leveraging Dubbo&amp;rsquo;s security features to build a Zero Trust system for your microservices, focusing on authentication, transparent encryption, authorization, and auditing. Since Zero Trust is a comprehensive approach, you may need another infrastructure, such as certificate management and security policy control.&lt;/p></description></item><item><title>Microservices Ecosystem</title><link>https://cn.dubbo.apache.org/en/overview/core-features/ecosystem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/overview/core-features/ecosystem/</guid><description>&lt;p>The Dubbo community, along with numerous outstanding open-source projects, has established a rich microservices ecosystem support around Dubbo. This allows developers to opt for Dubbo as their development framework without worrying about subsequent service governance needs. From day one, Dubbo offers production-level solutions for every common issue.&lt;/p>
&lt;p>The table below shows the support for ecosystem components based on the latest Dubbo Java 3.2.x version, which will be continuously updated based on development progress. The completeness of components supported in each language may vary. For specifics, please refer to the detailed explanations in each &lt;a href="../../mannual/">language reference manual&lt;/a>.&lt;/p></description></item></channel></rss>