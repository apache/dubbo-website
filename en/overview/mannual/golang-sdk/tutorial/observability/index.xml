<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visual Observation on Apache Dubbo</title><link>https://cn.dubbo.apache.org/en/overview/mannual/golang-sdk/tutorial/observability/</link><description>Recent content in Visual Observation on Apache Dubbo</description><generator>Hugo</generator><language>en</language><atom:link href="https://cn.dubbo.apache.org/en/overview/mannual/golang-sdk/tutorial/observability/index.xml" rel="self" type="application/rss+xml"/><item><title>Configure and Manage Framework Logs</title><link>https://cn.dubbo.apache.org/en/overview/mannual/golang-sdk/tutorial/observability/logger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/overview/mannual/golang-sdk/tutorial/observability/logger/</guid><description>&lt;p>This example demonstrates how to configure the dubbo-go framework log component to save the framework&amp;rsquo;s runtime logs to a specified location. You can view the &lt;a href="https://github.com/apache/dubbo-go-samples/tree/main/logger/level" target="_blank">complete example source code here&lt;/a>.&lt;/p>


&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>

 The configuration here only affects the log component behavior of the dubbo-go framework itself, which is the internal logging used by the framework and does not affect the use of business logging frameworks!

&lt;/div>

&lt;h2 id="1-log-configuration">1. Log Configuration&lt;/h2>
&lt;p>As shown below, you can set the dubbo framework log behavior using &lt;code>log.WithZap()&lt;/code> and &lt;code>log.WithLevel(&amp;quot;warn&amp;quot;)&lt;/code>:&lt;/p></description></item><item><title>Metrics Monitoring</title><link>https://cn.dubbo.apache.org/en/overview/mannual/golang-sdk/tutorial/observability/rpc_metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/overview/mannual/golang-sdk/tutorial/observability/rpc_metrics/</guid><description>&lt;p>Dubbo supports the collection of runtime Metrics indicators and their integration with Prometheus and Grafana systems to achieve visual monitoring of microservice clusters. Below is a specific usage example. You can view the &lt;a href="https://github.com/apache/dubbo-go-samples/tree/main/metrics">complete source code of the example&lt;/a>.&lt;/p>
&lt;h2 id="contents">Contents&lt;/h2>
&lt;ul>
&lt;li>server/main.go - is the main definition of the service, handler and rpc server&lt;/li>
&lt;li>client/main.go - is the rpc client&lt;/li>
&lt;li>proto - contains the protobuf definition of the API&lt;/li>
&lt;/ul>
&lt;h2 id="how-to-run">How to run&lt;/h2>
&lt;h3 id="run-server">Run server&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>go run ./go-server/cmd/main.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>test server work as expected:&lt;/p></description></item><item><title>Link Tracing</title><link>https://cn.dubbo.apache.org/en/overview/mannual/golang-sdk/tutorial/observability/tracing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/overview/mannual/golang-sdk/tutorial/observability/tracing/</guid><description>&lt;p>Dubbo-go supports end-to-end tracing based on the &lt;a href="https://opentelemetry.io/">OpenTelemetry&lt;/a> standard, while also supporting export to different tracing backend systems through the following exporters.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="./stdout">Stdout exporter&lt;/a>&lt;/li>
&lt;li>&lt;a href="./jaeger">Jaeger exporter&lt;/a>&lt;/li>
&lt;li>&lt;a href="./zipkin">Zipkin exporter&lt;/a>&lt;/li>
&lt;li>&lt;a href="./otlp-http">OTLP-HTTP exporter&lt;/a>&lt;/li>
&lt;li>&lt;a href="./otlp-grpc">OTLP-gRPC exporter&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="usage">Usage&lt;/h2>
&lt;p>Please note that tracing functionality is only enabled when creating the Dubbo application via &lt;code>dubbo.NewInstance&lt;/code>, which is the &lt;a href="https://cn.dubbo.apache.org/en/">microservice application mode&lt;/a> mentioned in our quick start. The &lt;a href="https://cn.dubbo.apache.org/en/">lightweight RPC API&lt;/a> does not currently support enabling tracing.&lt;/p>
&lt;h2 id="example-explanation">Example Explanation&lt;/h2>
&lt;p>You can view the &lt;a href="https://github.com/apache/dubbo-go-samples/tree/main/otel" target="_blank">full example source code here&lt;/a>.&lt;/p></description></item></channel></rss>