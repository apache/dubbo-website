<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HTTP Traffic Access on Apache Dubbo</title><link>https://cn.dubbo.apache.org/en/overview/mannual/java-sdk/tasks/gateway/</link><description>Recent content in HTTP Traffic Access on Apache Dubbo</description><generator>Hugo</generator><language>en</language><atom:link href="https://cn.dubbo.apache.org/en/overview/mannual/java-sdk/tasks/gateway/index.xml" rel="self" type="application/rss+xml"/><item><title>The Infrastructure of Front-end HTTP Traffic Access to Dubbo Back-end Microservice System</title><link>https://cn.dubbo.apache.org/en/overview/mannual/java-sdk/tasks/gateway/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/overview/mannual/java-sdk/tasks/gateway/architecture/</guid><description>&lt;p>Regardless of the type of product you are developing (e-commerce, management systems, mobile apps, etc.), the vast majority of traffic entry points will be HTTP, as users may access the product through browsers, mobile devices, or desktop software. In this case, connecting the Dubbo microservice cluster developed by the back-end to the front-end access devices becomes a problem to solve, which is essentially the problem of conversion and connection between HTTP and RPC.&lt;/p></description></item><item><title>Accessing Dubbo Backend Services via Gateway for HTTP Traffic</title><link>https://cn.dubbo.apache.org/en/overview/mannual/java-sdk/tasks/gateway/dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/overview/mannual/java-sdk/tasks/gateway/dubbo/</guid><description>&lt;p>Since the dubbo protocol is a TCP-based binary private protocol, it is more suitable as an efficient RPC communication protocol between backend microservices, which makes the dubbo protocol less friendly for frontend traffic access. In the Dubbo framework, there are two ways to help developers address this issue:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Multi-protocol publishing [Recommended]&lt;/strong>, which exposes a REST-style HTTP access method for the dubbo protocol services. This architecture simplifies the structure, and common gateway products can support it.&lt;/li>
&lt;li>&lt;strong>Implementing &lt;code>http-&amp;gt;dubbo&lt;/code> protocol conversion via gateway&lt;/strong>, which requires converting the HTTP protocol into the dubbo protocol recognized by backend services, demanding the gateway to support the dubbo protocol.&lt;/li>
&lt;/ul>
&lt;h2 id="simultaneous-publishing-of-http-and-dubbo-protocols">Simultaneous Publishing of HTTP and Dubbo Protocols&lt;/h2>
&lt;p>&lt;strong>If we can make a service publish both dubbo and HTTP protocols simultaneously, backend calls can be based on the efficient dubbo binary protocol while browsers and other frontend facilities can access the same service via HTTP.&lt;/strong> The good news is that the Dubbo framework supports publishing multiple protocols for the same service and allows clients to access the service through the same port using different protocols, as shown below:&lt;/p></description></item><item><title>Access Dubbo Backend Services via Gateway for HTTP Traffic</title><link>https://cn.dubbo.apache.org/en/overview/mannual/java-sdk/tasks/gateway/triple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/overview/mannual/java-sdk/tasks/gateway/triple/</guid><description>&lt;p>In the &lt;a href="https://cn.dubbo.apache.org/en/overview/reference/protocols/triple-spec/">triple protocol specification&lt;/a>, we detailed the friendly design of the triple protocol for browsers and gateways, one very important aspect being that triple supports running on both HTTP/1 and HTTP/2:&lt;/p>
&lt;ul>
&lt;li>Use the efficient triple binary protocol between backend services.&lt;/li>
&lt;li>For the frontend access layer, it supports all standard HTTP tools like cURL to request backend services in standard &lt;code>application/json&lt;/code>, &lt;code>application/yaml&lt;/code>, etc.&lt;/li>
&lt;/ul>
&lt;p>Next, letâ€™s see how to quickly access the backend triple microservice system through some common gateway products for frontend HTTP traffic.&lt;/p></description></item></channel></rss>