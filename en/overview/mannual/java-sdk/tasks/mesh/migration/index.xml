<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>How Traditional Dubbo Microservice Clusters Smoothly Migrate to the Istio Service Mesh System on Apache Dubbo</title><link>https://dubbo.apache.org/en/overview/mannual/java-sdk/tasks/mesh/migration/</link><description>Recent content in How Traditional Dubbo Microservice Clusters Smoothly Migrate to the Istio Service Mesh System on Apache Dubbo</description><generator>Hugo</generator><language>en</language><atom:link href="https://dubbo.apache.org/en/overview/mannual/java-sdk/tasks/mesh/migration/index.xml" rel="self" type="application/rss+xml"/><item><title>Address Synchronization</title><link>https://dubbo.apache.org/en/overview/mannual/java-sdk/tasks/mesh/migration/dubbo-mesh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/mannual/java-sdk/tasks/mesh/migration/dubbo-mesh/</guid><description>&lt;p>By following these steps, you can easily master how to develop Dubbo services that comply with the Service Mesh architecture and deploy them to Kubernetes while integrating with Istio&amp;rsquo;s traffic management system. Here you can view the &lt;a href="https://github.com/apache/dubbo-samples/tree/master/3-extensions/registry/dubbo-samples-mesh-k8s">complete example source code&lt;/a>.&lt;/p>
&lt;h2 id="1-overall-goal">1 Overall Goal&lt;/h2>
&lt;ul>
&lt;li>Deploy Dubbo applications to Kubernetes&lt;/li>
&lt;li>Istio automatically injects Envoy and implements traffic interception&lt;/li>
&lt;li>Implement traffic governance based on Istio rules&lt;/li>
&lt;/ul>
&lt;h2 id="2-basic-process-and-working-principle">2 Basic Process and Working Principle&lt;/h2>
&lt;p>This example demonstrates how to deploy applications developed with Dubbo under the Istio framework to achieve automatic proxying of Dubbo services by Envoy. The overall architecture of the example is shown in the figure below.&lt;/p></description></item><item><title>Protocol Recognition</title><link>https://dubbo.apache.org/en/overview/mannual/java-sdk/tasks/mesh/migration/deploy-on-k8s/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/mannual/java-sdk/tasks/mesh/migration/deploy-on-k8s/</guid><description>&lt;p>You can easily deploy Dubbo services to a Kubernetes cluster by following the steps below, with the &lt;a href="https://github.com/apache/dubbo-samples/tree/master/3-extensions/registry/dubbo-samples-kubernetes">full code example available here&lt;/a>.&lt;/p>
&lt;h2 id="1-overall-goals">1 Overall Goals&lt;/h2>
&lt;ul>
&lt;li>Deploy Dubbo applications to Kubernetes&lt;/li>
&lt;li>Implement service discovery based on Kubernetes built-in Service&lt;/li>
&lt;li>Integrate Dubbo applications with Kubernetes lifecycle&lt;/li>
&lt;/ul>
&lt;h2 id="2-basic-workflow">2 Basic Workflow&lt;/h2>
&lt;ol>
&lt;li>Create a Dubbo application (&lt;a href="https://github.com/apache/dubbo-samples/tree/master/3-extensions/registry/dubbo-samples-kubernetes">dubbo-samples-kubernetes&lt;/a>)&lt;/li>
&lt;li>Build container images and push to the image repository (&lt;a href="https://hub.docker.com/r/apache/dubbo-demo">dubbo-demo example image&lt;/a>)&lt;/li>
&lt;li>Deploy Dubbo Provider and Dubbo Consumer to Kubernetes&lt;/li>
&lt;li>Verify service discovery and calls are normal&lt;/li>
&lt;/ol>
&lt;h2 id="3-detailed-steps">3 Detailed Steps&lt;/h2>
&lt;h3 id="31-environment-requirements">3.1 Environment Requirements&lt;/h3>
&lt;p>Ensure that the following environment is installed locally to provide container runtime, Kubernetes cluster, and access tools.&lt;/p></description></item><item><title>Other Issues?</title><link>https://dubbo.apache.org/en/overview/mannual/java-sdk/tasks/mesh/migration/proxyless/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/mannual/java-sdk/tasks/mesh/migration/proxyless/</guid><description>&lt;p>Proxyless mode refers to Dubbo communicating directly with Istiod, utilizing the xDS protocol to achieve capabilities such as service discovery and service governance. This example will demonstrate how to use Proxyless mode through a simple demonstration.&lt;/p>
&lt;p>&lt;a href="https://github.com/apache/dubbo-samples/tree/master/3-extensions/registry/dubbo-samples-xds">Example Address&lt;/a>&lt;/p>
&lt;h2 id="code-architecture">Code Architecture&lt;/h2>
&lt;p>This section primarily introduces the code architecture of the example used in this article. By mimicking the relevant configurations in this example, existing project code can be quickly adapted to run in Proxyless Mesh mode.&lt;/p></description></item></channel></rss>