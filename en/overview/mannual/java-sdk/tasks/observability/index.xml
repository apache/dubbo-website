<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Observability Service on Apache Dubbo</title><link>https://cn.dubbo.apache.org/en/overview/mannual/java-sdk/tasks/observability/</link><description>Recent content in Observability Service on Apache Dubbo</description><generator>Hugo</generator><language>en</language><atom:link href="https://cn.dubbo.apache.org/en/overview/mannual/java-sdk/tasks/observability/index.xml" rel="self" type="application/rss+xml"/><item><title>Observability</title><link>https://cn.dubbo.apache.org/en/overview/mannual/java-sdk/tasks/observability/console/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/overview/mannual/java-sdk/tasks/observability/console/</guid><description>&lt;p>The most direct way to manage Dubbo is through the visual interface provided by the Dubbo control plane (dubbo-control-plane). In the previous article on &lt;a href="https://cn.dubbo.apache.org/en/">Quick Start - Deploying Dubbo Applications&lt;/a> we also used it to check the status after the service was started.&lt;/p>
&lt;p>&lt;strong>&lt;code>dubbo-control-plane&lt;/code> supports visual displays, monitoring cluster status, and real-time delivery of traffic control rules.&lt;/strong>&lt;/p>
&lt;h2 id="installing-the-console">Installing the Console&lt;/h2>
&lt;p>To experience the effects, we first need to install dubbo-control-plane. Here are the specific steps to install dubbo-control-plane in a Linux environment:&lt;/p></description></item><item><title>Querying Metrics Monitoring Indicators from Prometheus</title><link>https://cn.dubbo.apache.org/en/overview/mannual/java-sdk/tasks/observability/prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/overview/mannual/java-sdk/tasks/observability/prometheus/</guid><description>&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>This article demonstrates how to deploy Prometheus in a Kubernetes environment and achieve monitoring data statistics and querying for the Dubbo cluster. You need to complete or possess the following:&lt;/p>
&lt;ul>
&lt;li>A local or remote Kubernetes cluster&lt;/li>
&lt;li>Ensure that &lt;a href="https://cn.dubbo.apache.org/en/overview/reference/integrations/prometheus/#installation">Prometheus is correctly installed&lt;/a>&lt;/li>
&lt;li>Deploy the &lt;a href="https://github.com/apache/dubbo-samples/tree/master/4-governance/dubbo-samples-metrics-spring-boot">sample application&lt;/a> and enable metrics collection&lt;/li>
&lt;li>Use the Prometheus dashboard to query data metrics&lt;/li>
&lt;/ul>
&lt;h2 id="ensure-prometheus-is-running-correctly">Ensure Prometheus is Running Correctly&lt;/h2>
&lt;p>Verify that Prometheus has been correctly deployed&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>kubectl -n dubbo-system get svc prometheus-server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prometheus-server ClusterIP 10.109.160.254 &amp;lt;none&amp;gt; 9090/TCP 4m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="deploy-sample">Deploy Sample&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>kubectl apply -f https://raw.githubusercontent.com/apache/dubbo-samples/master/4-governance/dubbo-samples-metrics-spring-boot/Deployment.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wait for the sample application to run normally, and confirm the application status using the following command:&lt;/p></description></item><item><title>Visualizing Cluster Metrics with Grafana</title><link>https://cn.dubbo.apache.org/en/overview/mannual/java-sdk/tasks/observability/grafana/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/overview/mannual/java-sdk/tasks/observability/grafana/</guid><description>&lt;p>The recommended way to visualize metrics is to use Grafana to configure the observability monitoring dashboard for Dubbo.&lt;/p>
&lt;h2 id="before-you-begin">Before You Begin&lt;/h2>
&lt;ul>
&lt;li>An accessible Kubernetes cluster&lt;/li>
&lt;li>Properly installed and configured &lt;a href="https://cn.dubbo.apache.org/en/overview/reference/integrations/prometheus/#installation">Prometheus service&lt;/a>&lt;/li>
&lt;li>Installed &lt;a href="https://cn.dubbo.apache.org/en/overview/reference/integrations/grafana/">Grafana&lt;/a>&lt;/li>
&lt;li>Deployed &lt;a href="https://github.com/apache/dubbo-samples/tree/master/4-governance/dubbo-samples-metrics-spring-boot">Sample Application&lt;/a> and enabled metrics collection&lt;/li>
&lt;/ul>
&lt;h2 id="confirm-component-status">Confirm Component Status&lt;/h2>
&lt;h3 id="kubernetes">Kubernetes&lt;/h3>
&lt;p>Ensure Prometheus is running&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl -n dubbo-system get svc prometheus
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME TYPE CLUSTER-IP EXTERNAL-IP PORT&lt;span style="color:#719e07">(&lt;/span>S&lt;span style="color:#719e07">)&lt;/span> AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prometheus ClusterIP 10.0.250.230 &amp;lt;none&amp;gt; 9090/TCP 180s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ensure Grafana is running&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ kubectl -n dubbo-system get svc grafana
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME TYPE CLUSTER-IP EXTERNAL-IP PORT&lt;span style="color:#719e07">(&lt;/span>S&lt;span style="color:#719e07">)&lt;/span> AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>grafana ClusterIP 10.0.244.130 &amp;lt;none&amp;gt; 3000/TCP 180s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="deploy-sample">Deploy Sample&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>kubectl apply -f https://raw.githubusercontent.com/apache/dubbo-samples/master/4-governance/dubbo-samples-metrics-spring-boot/Deployment.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wait for the sample application to run, and confirm the application status with the following command:&lt;/p></description></item><item><title>Log Management</title><link>https://cn.dubbo.apache.org/en/overview/mannual/java-sdk/tasks/observability/logging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/overview/mannual/java-sdk/tasks/observability/logging/</guid><description>&lt;h2 id="supported-log-frameworks">Supported Log Frameworks&lt;/h2>
&lt;p>Dubbo supports the following logging frameworks, and users can configure based on the logging framework actually used in their business applications.&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">Third-party Log Framework&lt;/th>
 &lt;th style="text-align: left">Priority&lt;/th>
 &lt;th style="text-align: left">Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">Log4j&lt;/td>
 &lt;td style="text-align: left">Highest (used by default)&lt;/td>
 &lt;td style="text-align: left">Direct adaptation of Log4j, requires adding log4j-core, log4j-api dependencies and log4j.properties&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">SLF4J&lt;/td>
 &lt;td style="text-align: left">Second highest (currently recommended)&lt;/td>
 &lt;td style="text-align: left">Supports log4j, log4j2, logback, etc. For logback, add slf4j-api, logback-classic, logback-core dependencies and logback.xml&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Log4j2&lt;/td>
 &lt;td style="text-align: left">Second lowest&lt;/td>
 &lt;td style="text-align: left">Direct adaptation of Log4j2, requires adding log4j2-core dependency and log4j2.xml configuration&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Common Logging (jcl is common logging)&lt;/td>
 &lt;td style="text-align: left">Second lowest (used if neither Log4j nor SLF4J is in the project)&lt;/td>
 &lt;td style="text-align: left">Rarely used in projects&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">JDK log&lt;/td>
 &lt;td style="text-align: left">Lowest (last resort)&lt;/td>
 &lt;td style="text-align: left">Rarely used in projects&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>


&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>

 Regardless of the logging framework used, in addition to configuring on the Dubbo side, ensure the application includes the correct logging framework dependencies and configuration files.

&lt;/div>

&lt;h3 id="using-slf4j">Using slf4j&lt;/h3>
&lt;p>For Spring Boot users, enable slf4j logging by adding the following configuration to &lt;code>application.yaml&lt;/code> or &lt;code>application.properties&lt;/code>:&lt;/p></description></item></channel></rss>