<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Custom Extensions on Apache Dubbo</title><link>https://dubbo.apache.org/en/overview/tasks/extensibility/</link><description>Recent content in Custom Extensions on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://dubbo.apache.org/en/overview/tasks/extensibility/index.xml" rel="self" type="application/rss+xml"/><item><title>Protocol</title><link>https://dubbo.apache.org/en/overview/tasks/extensibility/protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/extensibility/protocol/</guid><description>Dubbo has implemented a lot of built-in functionalities through protocol extensions and also supports many commonly used protocols. You can see all custom protocols in the org.apache.dubbo.rpc.Protocol file. For example, in Dubbo 3, we have:
# Built-in functionalities implemented by Dubbo through protocol extension filter=org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper qos=org.apache.dubbo.qos.protocol.QosProtocolWrapper registry=org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol service-discovery-registry=org.apache.dubbo.registry.integration.RegistryProtocol listener=org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper mock=org.apache.dubbo.rpc.support.MockProtocol serializationwrapper=org.apache.dubbo.rpc.protocol.ProtocolSerializationWrapper securitywrapper=org.apache.dubbo.rpc.protocol.ProtocolSecurityWrapper # Commonly used protocols supported by Dubbo dubbo=org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol injvm=org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol rest=org.apache.dubbo.rpc.protocol.rest.RestProtocol grpc=org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol tri=org.apache.dubbo.rpc.protocol.tri.TripleProtocol As you can see, Dubbo has implemented a series of functionalities like filtering, monitoring, service discovery, listeners, mock, serialization, and security through protocol extensions.</description></item><item><title>Registry</title><link>https://dubbo.apache.org/en/overview/tasks/extensibility/registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/extensibility/registry/</guid><description/></item><item><title>Router</title><link>https://dubbo.apache.org/en/overview/tasks/extensibility/router/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/extensibility/router/</guid><description>By creating custom routers, you can implement specific routing methods based on the characteristics of your business scenario.
Prerequisites Choose one of the two deployment and running methods
Based on Kubernetes Install Kubernetes environment Modify the configuration file in Provider to enable the address of nacos deployed in Kubernetes # (The configuration remains the same as in the original documentation) Modify the configuration file in Consumer to enable the address of nacos deployed in Kubernetes # (The configuration remains the same as in the original documentation) Deploy Extensibility Router Task Using Local IDE Deploy Nacos version 2.</description></item><item><title>Custom extension</title><link>https://dubbo.apache.org/en/overview/tasks/extensibility/filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/extensibility/filter/</guid><description/></item></channel></rss>