<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Triple Usage Example on Apache Dubbo</title><link>https://dubbo.apache.org/en/overview/tasks/triple/</link><description>Recent content in Triple Usage Example on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://dubbo.apache.org/en/overview/tasks/triple/index.xml" rel="self" type="application/rss+xml"/><item><title>Using IDL + Protobuf to define services across languages</title><link>https://dubbo.apache.org/en/overview/tasks/triple/idl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/triple/idl/</guid><description>Service is the core concept in Dubbo. A service represents a set of RPC methods. Service is the basic unit of user-oriented programming and service discovery mechanism. The basic process of Dubbo development is: user-defined RPC service, through agreed configuration Declare RPC as a Dubbo service, and then program based on the service API. For the service provider, it provides a specific implementation of the RPC service, while for the service consumer, it uses specific data to initiate a service call.</description></item><item><title>Pojo Serialization Compatibility Mode</title><link>https://dubbo.apache.org/en/overview/tasks/triple/wrap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/triple/wrap/</guid><description>This tutorial will build a simple project from scratch to demonstrate how to use Dubbo Triple based on POJO, and upgrade to the Triple protocol while the application does not change the existing interface definition. **In this mode, Triple is used in the same way as Dubbo protocol. **
For specific use cases, please refer to: [dubbo-samples-triple/pojo](https://github.com/apache/dubbo-samples/tree/master/3-extensions/protocol/dubbo-samples-triple/src/main/java /org/apache/dubbo/sample/tri/pojo);
precondition JDK version &amp;gt;= 8 Installed Maven Installed and started Zookeeper Create project First create an empty maven project</description></item><item><title>Streaming communication mode</title><link>https://dubbo.apache.org/en/overview/tasks/triple/streaming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/overview/tasks/triple/streaming/</guid><description>For specific use cases, please refer to: [dubbo-samples-triple/pojo](https://github.com/apache/dubbo-samples/tree/master/3-extensions/protocol/dubbo-samples-triple/src/main/java /org/apache/dubbo/sample/tri/pojo);
Open the new feature of Triple - Stream (stream) Stream is a new call type provided by Dubbo3. It is recommended to use stream in the following scenarios:
The interface needs to send a large amount of data. These data cannot be placed in an RPC request or response, and need to be sent in batches. However, if the application layer cannot solve the order and performance problems in the traditional multiple RPC method, if the order needs to be guaranteed , it can only be sent serially In streaming scenarios, data needs to be processed in the order they are sent, and the data itself has no definite boundary In push scenarios, multiple messages are sent and processed in the context of the same call Stream is divided into the following three types:</description></item></channel></rss>