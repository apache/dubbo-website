<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Native Image on Apache Dubbo</title><link>https://cn.dubbo.apache.org/en/tags/native-image/</link><description>Recent content in Native Image on Apache Dubbo</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 30 Sep 2024 17:53:33 +0800</lastBuildDate><atom:link href="https://cn.dubbo.apache.org/en/tags/native-image/index.xml" rel="self" type="application/rss+xml"/><item><title>Towards Native: Spring &amp; Dubbo AOT Technical Examples and Principles Explanation</title><link>https://cn.dubbo.apache.org/en/blog/2023/06/28/towards-native-spring-dubbo-aot-technical-examples-and-principles-explanation/</link><pubDate>Wed, 28 Jun 2023 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/blog/2023/06/28/towards-native-spring-dubbo-aot-technical-examples-and-principles-explanation/</guid><description>&lt;p>Java applications face issues such as slow “cold start”, high memory usage, and long warm-up times in the cloud computing era, making it difficult to adapt to cloud deployment models like Serverless. GraalVM addresses these issues significantly through static compilation and packaging techniques, and mainstream frameworks such as Spring and Dubbo provide corresponding AOT solutions to some of the limitations of GraalVM.&lt;/p>
&lt;p>In this article, we will analyze the challenges faced by Java applications in the cloud era, how GraalVM Native Image addresses these issues, the basic concepts and working principles of GraalVM, and finally demonstrate how to statically package a typical microservice application with an example using Spring6 and Dubbo3.&lt;/p></description></item></channel></rss>