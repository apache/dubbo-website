<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Proposals on Apache Dubbo</title><link>https://cn.dubbo.apache.org/en/tags/proposals/</link><description>Recent content in Proposals on Apache Dubbo</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 30 Sep 2024 17:53:33 +0800</lastBuildDate><atom:link href="https://cn.dubbo.apache.org/en/tags/proposals/index.xml" rel="self" type="application/rss+xml"/><item><title>Dubbo3 Application-Level Service Discovery Design</title><link>https://cn.dubbo.apache.org/en/blog/2023/01/30/dubbo3-application-level-service-discovery-design/</link><pubDate>Mon, 30 Jan 2023 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/en/blog/2023/01/30/dubbo3-application-level-service-discovery-design/</guid><description>&lt;h2 id="objective">Objective&lt;/h2>
&lt;ul>
&lt;li>Significantly reduce resource consumption during the service discovery process, including increasing the registration center&amp;rsquo;s capacity limit and reducing resource usage for consumer address resolution, allowing the Dubbo3 framework to support larger-scale cluster service governance and achieve unlimited horizontal scalability.&lt;/li>
&lt;li>Adapt to underlying infrastructure service discovery models such as Kubernetes, Service Mesh, etc.&lt;/li>
&lt;/ul>
&lt;h2 id="background">Background&lt;/h2>
&lt;p>&lt;img alt="interface-arc" src="https://cn.dubbo.apache.org/imgs/blog/proposals/discovery/arc.png">&lt;/p>
&lt;p>We start with the classic working principle diagram of Dubbo; from its design inception, Dubbo has built-in capabilities for service address discovery. Providers register their addresses with the registration center, and consumers subscribe to receive real-time updates about address changes from the registration center. Upon receiving the address list, consumers initiate RPC calls to providers based on specific load balancing strategies.&lt;/p></description></item></channel></rss>