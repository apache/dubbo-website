<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tracing on Apache Dubbo</title><link>https://dubbo.apache.org/en/tags/tracing/</link><description>Recent content in tracing on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 31 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://dubbo.apache.org/en/tags/tracing/index.xml" rel="self" type="application/rss+xml"/><item><title>Tracing Dubbo With OpenTelemetry</title><link>https://dubbo.apache.org/en/blog/2024/01/31/tracing-dubbo-with-opentelemetry/</link><pubDate>Wed, 31 Jan 2024 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/en/blog/2024/01/31/tracing-dubbo-with-opentelemetry/</guid><description>Overview This case shows using OpenTelemetry(otlp) as the Tracer in the Dubbo project to report the Trace information to the Otlp Collector, which then forwards it to Zipkin and Jagger. Code address
It consists of three partsï¼š
dubbo-samples-spring-boot-tracing-otel-oltp-interface dubbo-samples-spring-boot-tracing-otel-oltp-provider dubbo-samples-spring-boot-tracing-otel-oltp-consumer Architecture Quick Start Install &amp;amp; start Otlp Collector Follow OpenTelemetry Collector Quick Start to start the otlp collector.
Start Provider Run org.apache.dubbo.springboot.demo.provider.ProviderApplication directly from IDE.
Start Consumer Start org.apache.dubbo.springboot.demo.consumer.ConsumerApplication directly from IDE.</description></item></channel></rss>