{
  "filename": "dubbo-annotation-driven.md",
  "__html": "<h1>Dubbo 注解驱动（Annotation-Driven）</h1>\n<h2>注解驱动（Annotation-Driven）</h2>\n<h3><code>@DubboComponentScan</code></h3>\n<h4>起始版本： <code>2.5.7</code></h4>\n<h4><code>&lt;dubbo:annotation&gt;</code>历史遗留问题</h4>\n<h5>1. 注解支持不充分</h5>\n<p>在 Dubbo  <code>2.5.7</code>之前的版本 ，Dubbo 提供了两个核心注解 <code>@Service</code> 以及 <code>@Reference</code>，分别用于Dubbo 服务提供和 Dubbo 服务引用。</p>\n<p>其中，<code>@Service</code> 作为 XML 元素 <code>&lt;dubbo:service&gt;</code>的替代注解，与 Spring Framework <code>@org.springframework.stereotype.Service</code> 类似，用于服务提供方 Dubbo 服务暴露。与之相对应的<code>@Reference</code>，则是替代<code>&lt;dubbo:reference</code> 元素，类似于 Spring 中的 <code>@Autowired</code>。</p>\n<p><code>2.5.7</code> 之前的Dubbo，与早期的 Spring Framework 2.5 存在类似的不足，即注解支持不够充分。注解需要和 XML 配置文件配合使用，如下所示：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n       <span class=\"hljs-attr\">xmlns:dubbo</span>=<span class=\"hljs-string\">\"http://code.alibabatech.com/schema/dubbo\"</span>\n       <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\n\thttp://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd\"</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:application</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"annotation-provider\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"127.0.0.1:4548\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:annotation</span> <span class=\"hljs-attr\">package</span>=<span class=\"hljs-string\">\"com.alibaba.dubbo.config.spring.annotation.provider\"</span>/&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<h5>2.  <code>@Service</code> Bean 不支持 Spring AOP</h5>\n<p>同时，使用 <code>&lt;dubbo:annotation&gt;</code> 方式扫描后的Dubbo <code>@Service</code> ，在 Spring 代理方面存在问题，如 GitHub 上的 issue <a href=\"https://github.com/alibaba/dubbo/issues/794%EF%BC%9A\">https://github.com/alibaba/dubbo/issues/794：</a></p>\n<blockquote>\n<p>关于dubbo @Service注解生成ServiceBean时, interface获取成spring 的代理对象的bug</p>\n<blockquote>\n<p>在项目里， 我使用了</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Service</span>\n<span class=\"hljs-meta\">@Transactional</span>\n<span class=\"hljs-meta\">@com</span>.alibaba.dubbo.config.annotation.Service\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SUserJpushServiceImp</span>\n</span></code></pre>\n<p>的形式， 来暴露服务。但是在发布服务的时候， interface class 是通过\n<code>serviceConfig.setInterface(bean.getClass().getInterfaces()[0]);</code>\n的形式获取， 刚好， 我的service都使用了@Transactional注解， 对象被代理了。所以获取到的interface是Spring的代理接口...</p>\n</blockquote>\n</blockquote>\n<p>不少热心的小伙伴不仅发现这个历史遗留问题，而且提出了一些修复方案。同时，为了更好地适配 Spring 生命周期以及将 Dubbo 完全向注解驱动编程模型过渡，因此，引入了全新 Dubbo 组件扫描注解 - <code>@DubboComponentScan</code>。</p>\n<blockquote>\n<p>注： <code>&lt;dubbo:annotation&gt;</code>  Spring AOP 问题将在 <code>2.5.9</code> 中修复：<a href=\"https://github.com/alibaba/dubbo/issues/1125\">https://github.com/alibaba/dubbo/issues/1125</a></p>\n</blockquote>\n<h5>3. @Reference 不支持字段继承性</h5>\n<p>假设有一个 Spring Bean <code>AnnotationAction</code> 直接通过字段<code>annotationService</code> 标记 <code>@Reference</code> 引用 <code>AnnotationService</code> ：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.alibaba.dubbo.examples.annotation.action;\n\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.config.annotation.Reference;\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.examples.annotation.api.AnnotationService;\n<span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;\n\n\n<span class=\"hljs-meta\">@Component</span>(<span class=\"hljs-string\">\"annotationAction\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AnnotationAction</span> </span>{\n\n    <span class=\"hljs-meta\">@Reference</span>\n    <span class=\"hljs-keyword\">private</span> AnnotationService annotationService;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">doSayHello</span><span class=\"hljs-params\">(String name)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> annotationService.sayHello(name);\n    }\n\n}\n</code></pre>\n<p>当<code>AnnotationAction</code>  被 XML 元素 <code>&lt;dubbo:annotation&gt;</code> 扫描后：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:annotation</span> <span class=\"hljs-attr\">package</span>=<span class=\"hljs-string\">\"com.alibaba.dubbo.examples.annotation.action\"</span>/&gt;</span>\n</code></pre>\n<p>字段 <code>annotationService</code> 能够引用到 <code>AnnotationService</code>，执行 <code>doSayHello</code> 方法能够正常返回。</p>\n<p>如果将字段<code>annotationService</code>  抽取到<code>AnnotationAction</code> 的父类<code>BaseAction</code> 后，<code>AnnotationService</code> 无法再被引用，改造如下所示：</p>\n<p><code>AnnotationAction.java</code></p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Component</span>(<span class=\"hljs-string\">\"annotationAction\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AnnotationAction</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">BaseAction</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">doSayHello</span><span class=\"hljs-params\">(String name)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> getAnnotationService().sayHello(name);\n    }\n\n}\n</code></pre>\n<p><code>BaseAction.java</code></p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BaseAction</span> </span>{\n\n    <span class=\"hljs-meta\">@Reference</span>\n    <span class=\"hljs-keyword\">private</span> AnnotationService annotationService;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> AnnotationService <span class=\"hljs-title\">getAnnotationService</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> annotationService;\n    }\n}\n</code></pre>\n<p>改造后，再次执行 <code>doSayHello</code> 方法，<code>NullPointerException</code> 将会被抛出。说明<code>&lt;dubbo:annotation&gt;</code> 并不支持<code>@Reference</code> 字段继承性。</p>\n<p>了解了历史问题，集合整体愿景，下面介绍<code>@DubboComponentScan</code> 的设计原则。</p>\n<h4>设计原则</h4>\n<p>Spring Framework 3.1 引入了新 Annotation - <code>@ComponentScan</code> ， 完全替代了 XML 元素 <code>&lt;context:component-scan&gt;</code> 。同样， <code>@DubboComponentScan</code>  作为 Dubbo <code>2.5.7</code> 新增的 Annotation，也是XML 元素  <code>&lt;dubbo:annotation&gt;</code> 的替代方案。</p>\n<p>在命名上（类名以及属性方法），为了简化使用和关联记忆，Dubbo 组件扫描 Annotation <code>@DubboComponentScan</code>，借鉴了 Spring Boot 1.3 引入的 <code>@ServletComponentScan</code>。定义如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> DubboComponentScan {\n\n    <span class=\"hljs-comment\">/**\n     * Alias for the {<span class=\"hljs-doctag\">@link</span> #basePackages()} attribute. Allows for more concise annotation\n     * declarations e.g.: {<span class=\"hljs-doctag\">@code</span> <span class=\"hljs-doctag\">@DubboComponentScan</span>(\"org.my.pkg\")} instead of\n     * {<span class=\"hljs-doctag\">@code</span> <span class=\"hljs-doctag\">@DubboComponentScan</span>(basePackages=\"org.my.pkg\")}.\n     *\n     * <span class=\"hljs-doctag\">@return</span> the base packages to scan\n     */</span>\n    String[] value() <span class=\"hljs-keyword\">default</span> {};\n\n    <span class=\"hljs-comment\">/**\n     * Base packages to scan for annotated <span class=\"hljs-doctag\">@Service</span> classes. {<span class=\"hljs-doctag\">@link</span> #value()} is an\n     * alias for (and mutually exclusive with) this attribute.\n     * &lt;p&gt;\n     * Use {<span class=\"hljs-doctag\">@link</span> #basePackageClasses()} for a type-safe alternative to String-based\n     * package names.\n     *\n     * <span class=\"hljs-doctag\">@return</span> the base packages to scan\n     */</span>\n    String[] basePackages() <span class=\"hljs-keyword\">default</span> {};\n\n    <span class=\"hljs-comment\">/**\n     * Type-safe alternative to {<span class=\"hljs-doctag\">@link</span> #basePackages()} for specifying the packages to\n     * scan for annotated <span class=\"hljs-doctag\">@Service</span> classes. The package of each class specified will be\n     * scanned.\n     *\n     * <span class=\"hljs-doctag\">@return</span> classes from the base packages to scan\n     */</span>\n    Class&lt;?&gt;[] basePackageClasses() <span class=\"hljs-keyword\">default</span> {};\n\n}\n</code></pre>\n<blockquote>\n<p>注意：<code>basePackages()</code> 和 <code>value()</code> 均能支持占位符（placeholder）指定的包名</p>\n</blockquote>\n<p>在职责上，<code>@DubboComponentScan</code> 相对于 Spring Boot <code>@ServletComponentScan</code> 更为繁重，原因在于处理 Dubbo  <code>@Service</code> 类暴露 Dubbo 服务外，还有帮助 Spring  Bean <code>@Reference</code>字段或者方法注入 Dubbo 服务代理。</p>\n<p>在场景上，Spring Framework <code>@ComponentScan</code> 组件扫描逻辑更为复杂。而在 <code>@DubboComponentScan</code>  只需关注 <code>@Service</code> 和 <code>@Reference</code> 处理。</p>\n<p>在功能上， <code>@DubboComponentScan</code>  不但需要提供完整 Spring AOP 支持的能力，而且还得具备<code>@Reference</code> 字段可继承性的能力。</p>\n<p>了解基本设计原则后，下面通过完整的示例，简介<code>@DubboComponentScan</code> 使用方法以及注意事项。</p>\n<h4>使用方法</h4>\n<p>后续通过服务提供方（<code>@Serivce</code>）以及服务消费方（<code>@Reference</code>）两部分来介绍<code>@DubboComponentScan</code> 使用方法。</p>\n<p>假设，服务提供方和服务消费分均依赖服务接口<code>DemoService</code>:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.alibaba.dubbo.demo;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">DemoService</span> </span>{\n\n    <span class=\"hljs-function\">String <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(String name)</span></span>;\n\n}\n</code></pre>\n<h5>服务提供方（<code>@Serivce</code>）</h5>\n<h6>实现 <code>DemoService</code></h6>\n<p>服务提供方实现<code>DemoService</code>  - <code>AnnotationDemoService</code> ，同时标注 Dubbo <code>@Service</code> ：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.alibaba.dubbo.demo.provider;\n\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.config.annotation.Service;\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.demo.DemoService;\n\n<span class=\"hljs-comment\">/**\n * Annotation {<span class=\"hljs-doctag\">@link</span> DemoService} 实现\n *\n * <span class=\"hljs-doctag\">@author</span> &lt;a href=\"mailto:mercyblitz@gmail.com\"&gt;Mercy&lt;/a&gt;\n */</span>\n<span class=\"hljs-meta\">@Service</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AnnotationDemoService</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">DemoService</span> </span>{\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(String name)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hello , \"</span> + name;\n    }\n\n}\n</code></pre>\n<h6>服务提供方 Annotation 配置</h6>\n<p>将 <code>AnnotationDemoService</code> 暴露成Dubbo 服务，需要依赖 Spring Bean：<code>AplicationConfig</code>、<code>ProtocolConfig</code> 以及 <code>RegistryConfig</code>  。这三个 Spring Bean 过去可通过 XML 文件方式组装 Spring Bean：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n       <span class=\"hljs-attr\">xmlns:dubbo</span>=<span class=\"hljs-string\">\"http://code.alibabatech.com/schema/dubbo\"</span>\n       <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\n    http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd\n    \"</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 当前应用信息配置 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:application</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo-annotation-provider\"</span>/&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 连接注册中心配置 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"my-registry\"</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"N/A\"</span>/&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:protocol</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo\"</span> <span class=\"hljs-attr\">port</span>=<span class=\"hljs-string\">\"12345\"</span>/&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<p>以上装配方式不予推荐，推荐使用 Annotation 配置，因此可以换成 Spring <code>@Configuration</code> Bean 的形式：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.alibaba.dubbo.demo.config;\n\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.config.ApplicationConfig;\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.config.ProtocolConfig;\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.config.RegistryConfig;\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.config.spring.context.annotation.DubboComponentScan;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n\n<span class=\"hljs-comment\">/**\n * 服务提供方配置\n *\n * <span class=\"hljs-doctag\">@author</span> &lt;a href=\"mailto:mercyblitz@gmail.com\"&gt;Mercy&lt;/a&gt;\n */</span>\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-meta\">@DubboComponentScan</span>(<span class=\"hljs-string\">\"com.alibaba.dubbo.demo.provider\"</span>) <span class=\"hljs-comment\">// 扫描 Dubbo 组件</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ProviderConfiguration</span> </span>{\n\n    <span class=\"hljs-comment\">/**\n     * 当前应用配置\n     */</span>\n    <span class=\"hljs-meta\">@Bean</span>(<span class=\"hljs-string\">\"dubbo-annotation-provider\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ApplicationConfig <span class=\"hljs-title\">applicationConfig</span><span class=\"hljs-params\">()</span> </span>{\n        ApplicationConfig applicationConfig = <span class=\"hljs-keyword\">new</span> ApplicationConfig();\n        applicationConfig.setName(<span class=\"hljs-string\">\"dubbo-annotation-provider\"</span>);\n        <span class=\"hljs-keyword\">return</span> applicationConfig;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 当前连接注册中心配置\n     */</span>\n    <span class=\"hljs-meta\">@Bean</span>(<span class=\"hljs-string\">\"my-registry\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> RegistryConfig <span class=\"hljs-title\">registryConfig</span><span class=\"hljs-params\">()</span> </span>{\n        RegistryConfig registryConfig = <span class=\"hljs-keyword\">new</span> RegistryConfig();\n        registryConfig.setAddress(<span class=\"hljs-string\">\"N/A\"</span>);\n        <span class=\"hljs-keyword\">return</span> registryConfig;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 当前连接注册中心配置\n     */</span>\n    <span class=\"hljs-meta\">@Bean</span>(<span class=\"hljs-string\">\"dubbo\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ProtocolConfig <span class=\"hljs-title\">protocolConfig</span><span class=\"hljs-params\">()</span> </span>{\n        ProtocolConfig protocolConfig = <span class=\"hljs-keyword\">new</span> ProtocolConfig();\n        protocolConfig.setName(<span class=\"hljs-string\">\"dubbo\"</span>);\n        protocolConfig.setPort(<span class=\"hljs-number\">12345</span>);\n        <span class=\"hljs-keyword\">return</span> protocolConfig;\n    }\n}\n</code></pre>\n<h6>服务提供方引导类</h6>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.alibaba.dubbo.demo.bootstrap;\n\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.demo.DemoService;\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.demo.config.ProviderConfiguration;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n<span class=\"hljs-comment\">/**\n * 服务提供方引导类\n *\n * <span class=\"hljs-doctag\">@author</span> &lt;a href=\"mailto:mercyblitz@gmail.com\"&gt;Mercy&lt;/a&gt;\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ProviderBootstrap</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        <span class=\"hljs-comment\">// 创建 Annotation 配置上下文</span>\n        AnnotationConfigApplicationContext context = <span class=\"hljs-keyword\">new</span> AnnotationConfigApplicationContext();\n        <span class=\"hljs-comment\">// 注册配置 Bean</span>\n        context.register(ProviderConfiguration.class);\n        <span class=\"hljs-comment\">// 启动上下文</span>\n        context.refresh();\n        <span class=\"hljs-comment\">// 获取 DemoService Bean</span>\n        DemoService demoService = context.getBean(DemoService.class);\n        <span class=\"hljs-comment\">// 执行 sayHello 方法</span>\n        String message = demoService.sayHello(<span class=\"hljs-string\">\"World\"</span>);\n        <span class=\"hljs-comment\">// 控制台输出信息</span>\n        System.out.println(message);\n    }\n    \n}\n</code></pre>\n<p><code>ProviderBootstrap</code> 启动并执行后，控制输出与预期一致：</p>\n<pre><code>Hello , World\n</code></pre>\n<p>以上直接结果说明 <code>@DubboComponentScan(&quot;com.alibaba.dubbo.demo.provider&quot;)</code> 扫描后，标注 Dubbo <code>@Service</code> 的 <code>AnnotationDemoService</code> 被注册成 Spring Bean，可从 Spring ApplicationContext 自由获取。</p>\n<h5>服务消费方（<code>@Reference</code>）</h5>\n<h6>服务 <code>DemoService</code></h6>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.alibaba.dubbo.demo.consumer;\n\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.config.annotation.Reference;\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.demo.DemoService;\n\n<span class=\"hljs-comment\">/**\n * Annotation 驱动 {<span class=\"hljs-doctag\">@link</span> DemoService} 消费方\n *\n * <span class=\"hljs-doctag\">@author</span> &lt;a href=\"mailto:mercyblitz@gmail.com\"&gt;Mercy&lt;/a&gt;\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AnnotationDemoServiceConsumer</span> </span>{\n\n    <span class=\"hljs-meta\">@Reference</span>(url = <span class=\"hljs-string\">\"dubbo://127.0.0.1:12345\"</span>)\n    <span class=\"hljs-keyword\">private</span> DemoService demoService;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">doSayHell</span><span class=\"hljs-params\">(String name)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> demoService.sayHello(name);\n    }\n}\n</code></pre>\n<h6>服务消费方 Annotation 配置</h6>\n<p>与服务提供方配置类似，服务消费方也许 Dubbo 相关配置 Bean - <code>ConsumerConfiguration</code></p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.alibaba.dubbo.demo.config;\n\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.config.ApplicationConfig;\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.config.RegistryConfig;\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.config.spring.context.annotation.DubboComponentScan;\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.demo.consumer.AnnotationDemoServiceConsumer;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n\n<span class=\"hljs-comment\">/**\n * 服务消费方配置\n *\n * <span class=\"hljs-doctag\">@author</span> &lt;a href=\"mailto:mercyblitz@gmail.com\"&gt;Mercy&lt;/a&gt;\n */</span>\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-meta\">@DubboComponentScan</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ConsumerConfiguration</span> </span>{\n\n    <span class=\"hljs-comment\">/**\n     * 当前应用配置\n     */</span>\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ApplicationConfig <span class=\"hljs-title\">applicationConfig</span><span class=\"hljs-params\">()</span> </span>{\n        ApplicationConfig applicationConfig = <span class=\"hljs-keyword\">new</span> ApplicationConfig();\n        applicationConfig.setName(<span class=\"hljs-string\">\"dubbo-annotation-consumer\"</span>);\n        <span class=\"hljs-keyword\">return</span> applicationConfig;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 当前连接注册中心配置\n     */</span>\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> RegistryConfig <span class=\"hljs-title\">registryConfig</span><span class=\"hljs-params\">()</span> </span>{\n        RegistryConfig registryConfig = <span class=\"hljs-keyword\">new</span> RegistryConfig();\n        registryConfig.setAddress(<span class=\"hljs-string\">\"N/A\"</span>);\n        <span class=\"hljs-keyword\">return</span> registryConfig;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 注册 AnnotationDemoServiceConsumer，<span class=\"hljs-doctag\">@DubboComponentScan</span> 将处理其中 <span class=\"hljs-doctag\">@Reference</span> 字段。\n     * 如果 AnnotationDemoServiceConsumer 非 Spring Bean 的话，\n     * 即使 <span class=\"hljs-doctag\">@DubboComponentScan</span> 指定 package 也不会进行处理，与 Spring <span class=\"hljs-doctag\">@Autowired</span> 同理\n     */</span>\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> AnnotationDemoServiceConsumer <span class=\"hljs-title\">annotationDemoServiceConsumer</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> AnnotationDemoServiceConsumer();\n    }\n\n}\n</code></pre>\n<h6>服务消费方引导类</h6>\n<p>服务消费方需要先引导服务提供方，下面的实例将会启动两个 Spring 应用上下文，首先引导服务提供方 Spring 应用上下文，同时，需要复用前面Annotation 配置 <code>ProviderConfiguration</code>：</p>\n<pre><code class=\"language-java\">    <span class=\"hljs-comment\">/**\n     * 启动服务提供方上下文\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">startProviderContext</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-comment\">// 创建 Annotation 配置上下文</span>\n        AnnotationConfigApplicationContext providerContext = <span class=\"hljs-keyword\">new</span> AnnotationConfigApplicationContext();\n        <span class=\"hljs-comment\">// 注册配置 Bean</span>\n        providerContext.register(ProviderConfiguration.class);\n        <span class=\"hljs-comment\">// 启动服务提供方上下文</span>\n        providerContext.refresh();\n    }\n</code></pre>\n<p>然后引导服务消费方Spring 应用上下文：</p>\n<pre><code class=\"language-java\">    <span class=\"hljs-comment\">/**\n     * 启动并且返回服务消费方上下文\n     *\n     * <span class=\"hljs-doctag\">@return</span> AnnotationConfigApplicationContext\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> ApplicationContext <span class=\"hljs-title\">startConsumerContext</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-comment\">// 创建服务消费方 Annotation 配置上下文</span>\n        AnnotationConfigApplicationContext consumerContext = <span class=\"hljs-keyword\">new</span> AnnotationConfigApplicationContext();\n        <span class=\"hljs-comment\">// 注册服务消费方配置 Bean</span>\n        consumerContext.register(ConsumerConfiguration.class);\n        <span class=\"hljs-comment\">// 启动服务消费方上下文</span>\n        consumerContext.refresh();\n        <span class=\"hljs-comment\">// 返回服务消费方 Annotation 配置上下文</span>\n        <span class=\"hljs-keyword\">return</span> consumerContext;\n    }\n</code></pre>\n<p>完整的引导类实现：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.alibaba.dubbo.demo.bootstrap;\n\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.demo.config.ConsumerConfiguration;\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.demo.config.ProviderConfiguration;\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.demo.consumer.AnnotationDemoServiceConsumer;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContext;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n<span class=\"hljs-comment\">/**\n * 服务消费端引导类\n *\n * <span class=\"hljs-doctag\">@author</span> &lt;a href=\"mailto:mercyblitz@gmail.com\"&gt;Mercy&lt;/a&gt;\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ConsumerBootstrap</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        <span class=\"hljs-comment\">// 启动服务提供方上下文</span>\n        startProviderContext();\n        <span class=\"hljs-comment\">// 启动并且返回服务消费方上下文</span>\n        ApplicationContext consumerContext = startConsumerContext();\n        <span class=\"hljs-comment\">// 获取 AnnotationDemoServiceConsumer Bean</span>\n        AnnotationDemoServiceConsumer consumer = consumerContext.getBean(AnnotationDemoServiceConsumer.class);\n        <span class=\"hljs-comment\">// 执行 doSayHello 方法</span>\n        String message = consumer.doSayHello(<span class=\"hljs-string\">\"World\"</span>);\n        <span class=\"hljs-comment\">// 输出执行结果</span>\n        System.out.println(message);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 启动并且返回服务消费方上下文\n     *\n     * <span class=\"hljs-doctag\">@return</span> AnnotationConfigApplicationContext\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> ApplicationContext <span class=\"hljs-title\">startConsumerContext</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-comment\">// 创建服务消费方 Annotation 配置上下文</span>\n        AnnotationConfigApplicationContext consumerContext = <span class=\"hljs-keyword\">new</span> AnnotationConfigApplicationContext();\n        <span class=\"hljs-comment\">// 注册服务消费方配置 Bean</span>\n        consumerContext.register(ConsumerConfiguration.class);\n        <span class=\"hljs-comment\">// 启动服务消费方上下文</span>\n        consumerContext.refresh();\n        <span class=\"hljs-comment\">// 返回服务消费方 Annotation 配置上下文</span>\n        <span class=\"hljs-keyword\">return</span> consumerContext;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 启动服务提供方上下文\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">startProviderContext</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-comment\">// 创建 Annotation 配置上下文</span>\n        AnnotationConfigApplicationContext providerContext = <span class=\"hljs-keyword\">new</span> AnnotationConfigApplicationContext();\n        <span class=\"hljs-comment\">// 注册配置 Bean</span>\n        providerContext.register(ProviderConfiguration.class);\n        <span class=\"hljs-comment\">// 启动服务提供方上下文</span>\n        providerContext.refresh();\n    }\n\n}\n</code></pre>\n<p>运行<code>ConsumerBootstrap</code>结果，仍然符合期望，<code>AnnotationDemoServiceConsumer</code> 输出：</p>\n<pre><code>Hello , World\n</code></pre>\n<h4>Spring AOP 支持</h4>\n<p>前面提到 <code>&lt;dubbo:annotation&gt;</code>  注册 Dubbo <code>@Service</code> 组件后，在 Spring AOP 支持方面存在问题。事务作为 Spring AOP 的功能扩展，自然也会在 <code>&lt;dubbo:annotation&gt;</code>中不支持。</p>\n<p><code>@DubboComponentScan</code> 针对以上问题，实现了对 Spring AOP 是完全兼容。将上述服务提供方 Annotation 配置做出一定的调整，标注<code>@EnableTransactionManagement</code> 以及自定义实现<code>PlatformTransactionManager</code> :</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-meta\">@DubboComponentScan</span>(<span class=\"hljs-string\">\"com.alibaba.dubbo.demo.provider\"</span>) <span class=\"hljs-comment\">// 扫描 Dubbo 组件</span>\n<span class=\"hljs-meta\">@EnableTransactionManagement</span> <span class=\"hljs-comment\">// 激活事务管理</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ProviderConfiguration</span> </span>{\n  <span class=\"hljs-comment\">// 省略其他配置 Bean 定义</span>\n  \n    <span class=\"hljs-comment\">/**\n     * 自定义事务管理器\n     */</span>\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-meta\">@Primary</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> PlatformTransactionManager <span class=\"hljs-title\">transactionManager</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> PlatformTransactionManager() {\n\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> TransactionStatus <span class=\"hljs-title\">getTransaction</span><span class=\"hljs-params\">(TransactionDefinition definition)</span> <span class=\"hljs-keyword\">throws</span> TransactionException </span>{\n                System.out.println(<span class=\"hljs-string\">\"get transaction ...\"</span>);\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> SimpleTransactionStatus();\n            }\n\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">commit</span><span class=\"hljs-params\">(TransactionStatus status)</span> <span class=\"hljs-keyword\">throws</span> TransactionException </span>{\n                System.out.println(<span class=\"hljs-string\">\"commit transaction ...\"</span>);\n            }\n\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">rollback</span><span class=\"hljs-params\">(TransactionStatus status)</span> <span class=\"hljs-keyword\">throws</span> TransactionException </span>{\n                System.out.println(<span class=\"hljs-string\">\"rollback transaction ...\"</span>);\n            }\n        };\n    }\n}\n</code></pre>\n<p>同时调整 <code>AnnotationDemoService</code>  - 增加<code>@Transactional</code> 注解：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Service</span>\n<span class=\"hljs-meta\">@Transactional</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AnnotationDemoService</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">DemoService</span> </span>{\n\t<span class=\"hljs-comment\">// 省略实现，保持不变</span>\n}\n</code></pre>\n<p>再次运行<code>ConsumerBootstrap</code> , 观察控制台输出内容：</p>\n<pre><code>get transaction ...\ncommit transaction ...\nHello , World\n</code></pre>\n<p>输入内容中多处了两行，说明自定义 <code>PlatformTransactionManager</code> <code>getTransaction(TransactionDefinition)</code> 以及 <code>commit(TransactionStatus)</code> 方法被执行，进而说明 <code>AnnotationDemoService</code> 的<code>sayHello(String)</code> 方法执行时，事务也伴随执行。</p>\n<h4>注意事项</h4>\n<p><code>ConsumerConfiguration</code> 上的  <code>@DubboComponentScan</code> 并没有指定 <code>basePackages</code> 扫描，这种情况会将<code>ConsumerConfiguration</code>  当做 <code>basePackageClasses</code> ，即扫描<code>ConsumerConfiguration</code> 所属的 package  <code>com.alibaba.dubbo.demo.config</code> 以及子 package。由于当前示例中，不存在标注 Dubbo <code>@Service</code>的类，因此在运行时日志（如果开启的话）会输出警告信息：</p>\n<pre><code>WARN :  [DUBBO] No Spring Bean annotating Dubbo's @Service was found in Spring BeanFactory, dubbo version: 2.0.0, current host: 127.0.0.1\n</code></pre>\n<p>以上信息大可不必担忧，因为 <code>@DubboComponentScan</code>  除了扫描 Dubbo <code>@Service</code> 组件以外，还将处理 <code>@Reference</code>字段注入。然而读者特别关注<code>@Reference</code>字段注入的规则。</p>\n<p>以上实现为例，<code>AnnotationDemoServiceConsumer</code> 必须申明为 Spring  <code>@Bean</code> 或者 <code>@Component</code>（或者其派生注解），否则 <code>@DubboComponentScan</code> 不会主动将标注 <code>@Reference</code>字段所在的声明类提成为 Spring Bean，换句话说，如果 <code>@Reference</code>字段所在的声明类不是 Spring Bean 的话， <code>@DubboComponentScan</code> 不会处理<code>@Reference</code>注入，其原理与 Spring <code>@Autowired</code> 一致。</p>\n<p>以上使用不当可能会导致相关问题，如 GitHub 上曾有小伙伴提问：<a href=\"https://github.com/alibaba/dubbo/issues/825\">https://github.com/alibaba/dubbo/issues/825</a></p>\n<blockquote>\n<p><strong>li362692680</strong> 提问：</p>\n<blockquote>\n<p>@DubboComponentScan注解在消费端扫描包时扫描的是 @Service注解？？不是@Reference注解？？\n启动时报\nDubboComponentScanRegistrar-85]-[main]-[INFO] 0 annotated @Service Components { [] }</p>\n</blockquote>\n<p>笔者(<strong>mercyblitz</strong>)回复：</p>\n<blockquote>\n<p><code>@Reference</code> 类似于 <code>@Autowired</code> 一样，首先其申明的类必须被 Spring 上下文当做一个Bean，因此，Dubbo 并没有直接将 <code>@Reference</code>  字段所在的类提升成 Bean。</p>\n<p>综上所述，这并不是一个问题，而是用法不当！</p>\n</blockquote>\n</blockquote>\n<h4>已知问题</h4>\n<p>最新发布的 Dubbo <code>2.5.8</code> 中，<code>@DubboComponentScan</code>  在以下特殊场景下存在 Spring <code>@Service</code> 不兼容情况：</p>\n<blockquote>\n<p>假设有两个服务实现类 <code>A</code> 和 <code>B</code>，同时存放在<code>com.acme</code> 包下：</p>\n<ul>\n<li><code>A</code> 标注  Dubbo <code>@Service</code></li>\n<li><code>B</code> 标注  Dubbo <code>@Service</code> 和 Spring <code>@Service</code></li>\n</ul>\n<p>当 Spring <code>@ComponentScan</code> 先扫描<code>com.acme</code> 包时，<code>B</code> 被当做 Spring Bean 的候选类。随后，<code>@DubboComponentScan</code> 也扫描相同的包。当应用启动时，<code>A</code> 和 <code>B</code>  虽然都是  Spring Bean，可仅 <code>A</code> 能够暴露 Dubbo 服务，<code>B</code> 则丢失。</p>\n</blockquote>\n<p>问题版本：<code>2.5.7</code>、<code>2.5.8</code></p>\n<p>问题详情：<a href=\"https://github.com/alibaba/dubbo/issues/1120\">https://github.com/alibaba/dubbo/issues/1120</a></p>\n<p>修复版本：<code>2.5.9</code>（下个版本）</p>\n",
  "link": "/zh-cn/blog/dubbo-annotation-driven.html",
  "meta": {}
}