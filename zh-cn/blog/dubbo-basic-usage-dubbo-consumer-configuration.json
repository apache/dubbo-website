{
  "filename": "dubbo-basic-usage-dubbo-consumer-configuration.md",
  "__html": "<h1>Dubbo基本用法-Dubbo Consumer配置</h1>\n<h2>Dubbo Consumer配置</h2>\n<h3>Consumer配置详解</h3>\n<p>配置Dubbo Consumer有3种方式：XML配置，API调用方式配置，注解方式配置。</p>\n<h4>XML配置</h4>\n<h6>最简单的配置的样例：</h6>\n<pre><code>\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n    xmlns:dubbo=&quot;http://dubbo.apache.org/schema/dubbo&quot;\n    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;&gt;  \n    &lt;dubbo:application name=&quot;hello-world-app&quot; /&gt;  \n    &lt;dubbo:registry address=&quot;multicast://224.5.6.7:1234&quot; /&gt;  \n    &lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot; /&gt;  \n    &lt;dubbo:reference id=&quot;demoServiceRemote&quot; interface=&quot;com.alibaba.dubbo.demo.DemoService&quot; /&gt;  \n&lt;/beans&gt;\n</code></pre>\n<blockquote>\n<p>支持的配置标签及对应的配置项详解，参考provider中的用法。</p>\n</blockquote>\n<blockquote>\n<p>接下来重点讲解下&lt;dubbo:reference/&gt;的配置。</p>\n</blockquote>\n<ul>\n<li>&lt;dubbo:reference/&gt;支持的主要属性列表：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>服务引用id，作为java bean id，需要唯一</td>\n</tr>\n<tr>\n<td>interface</td>\n<td>接口名，用于查找服务</td>\n</tr>\n<tr>\n<td>version</td>\n<td>版本号，与服务提供者的版本一致</td>\n</tr>\n<tr>\n<td>timeout</td>\n<td>服务方法调用超时时间(毫秒)</td>\n</tr>\n<tr>\n<td>retries</td>\n<td>远程服务调用重试次数，不包括第一次调用，不需要重试请设为0</td>\n</tr>\n<tr>\n<td>connections</td>\n<td>对每个提供者的最大连接数，rmi、http、hessian等短连接协议表示限制连接数，dubbo等长连接协表示建立的长连接个数</td>\n</tr>\n<tr>\n<td>loadbalance</td>\n<td>负载均衡策略，可选值：random,roundrobin,leastactive，分别表示：随机，轮询，最少活跃调用</td>\n</tr>\n<tr>\n<td>async</td>\n<td>是否异步执行，不可靠异步，只是忽略返回值，不阻塞执行线程</td>\n</tr>\n<tr>\n<td>generic</td>\n<td>泛化调用，可以绕过</td>\n</tr>\n<tr>\n<td>check</td>\n<td>启动时检查提供者是否存在，true报错，false忽略</td>\n</tr>\n<tr>\n<td>actives</td>\n<td>每服务消费者每服务每方法最大并发调用数</td>\n</tr>\n</tbody>\n</table>\n<p>其他配置属性请参考xsd：<a href=\"http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">http://dubbo.apache.org/schema/dubbo/dubbo.xsd</a></p>\n<ul>\n<li>&lt;dubbo:method/&gt;作为&lt;dubbo:reference/&gt;的子元素，它可以针对方法进行配置。比较常用的属性有：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>executes</td>\n<td>服务执行的请求上限</td>\n</tr>\n<tr>\n<td>retries</td>\n<td>超时重试次数</td>\n</tr>\n<tr>\n<td>timeout</td>\n<td>调用超时时间</td>\n</tr>\n<tr>\n<td>loadbalance</td>\n<td>负载均衡策略，可选值：random,roundrobin,leastactive，分别表示：随机，轮询，最少活跃调用</td>\n</tr>\n<tr>\n<td>async</td>\n<td>是否异步执行，不可靠异步，只是忽略返回值，不阻塞执行线程</td>\n</tr>\n<tr>\n<td>actives</td>\n<td>每服务消费者最大并发调用限制</td>\n</tr>\n</tbody>\n</table>\n<p>其他属性，可以参考上面的xsd。</p>\n<h6>配置的覆盖关系</h6>\n<p><img src=\"https://cdn.nlark.com/lark/0/2018/png/15841/1536496436861-1b63bc4e-3e59-4aa3-800e-a32cfe64950d.png\" alt=\"undefined\"></p>\n<center>配置的覆盖关系图</center> \n<p>其中包含了consumer端和provider的配置，注意区分。</p>\n<h4>annotation</h4>\n<h6>Reference注解远程服务</h6>\n<pre><code>\npublic class AnnotationConsumeService { \n\n    @com.alibaba.dubbo.config.annotation.Reference \n    public AnnotateService annotateService; \n\n    // ...\n\n}\n\n</code></pre>\n<p>这种方式的配置和前面用xml配置的方式是一样的效果。</p>\n<blockquote>\n<p>指定dubbo扫描路径的方式，可以参考前一章节中provider的实现。</p>\n</blockquote>\n<h4>api直接触发</h4>\n<pre><code>import com.alibaba.dubbo.rpc.config.ApplicationConfig;\nimport com.alibaba.dubbo.rpc.config.RegistryConfig;\nimport com.alibaba.dubbo.rpc.config.ConsumerConfig;\nimport com.alibaba.dubbo.rpc.config.ReferenceConfig;\nimport com.xxx.XxxService;\n// 当前应用配置\n\nApplicationConfig application = new ApplicationConfig();\napplication.setName(&quot;yyy&quot;);\n// 连接注册中心配置\nRegistryConfig registry = new RegistryConfig();\nregistry.setAddress(&quot;10.20.130.230:9090&quot;);\nregistry.setUsername(&quot;aaa&quot;);\nregistry.setPassword(&quot;bbb&quot;);\n \n// 注意：ReferenceConfig为重对象，内部封装了与注册中心的连接，以及与服务提供方的连接\n// 引用远程服务\nReferenceConfig&lt;XxxService&gt; reference = new ReferenceConfig&lt;XxxService&gt;(); // 此实例很重，封装了与注册中心的连接以及与提供者的连接，请自行缓存，否则可能造成内存和连接泄漏\n\nreference.setApplication(application);\nreference.setRegistry(registry); // 多个注册中心可以用setRegistries()\nreference.setInterface(XxxService.class);\nreference.setVersion(&quot;1.0.0&quot;);\n\n// 和本地bean一样使用xxxService\nXxxService xxxService = reference.get(); \n</code></pre>\n<h6>method特殊设置</h6>\n<pre><code>\n// 方法级配置\nList&lt;MethodConfig&gt; methods = new ArrayList&lt;MethodConfig&gt;();\nMethodConfig method = new MethodConfig();\nmethod.setName(&quot;createXxx&quot;);\nmethod.setTimeout(10000);\nmethod.setRetries(0);\nmethods.add(method); \n// 引用远程服务\nReferenceConfig&lt;XxxService&gt; reference = new ReferenceConfig&lt;XxxService&gt;(); // 此实例很重，封装了与注册中心的连接以及与提供者的连接，请自行缓存，否则可能造成内存和连接泄漏\n...\nreference.setMethods(methods); // 设置方法级配置\n</code></pre>\n<h3>Consumer 调用远程服务</h3>\n<p>上面章节更多从配置角度出发，接下来通过一个完整的例子，来讲解下dubbo consumer的完整使用。</p>\n<p>这个例子中只有一个服务UserReadService，有一个方法 getUserById。 需要将通过Dubbo调用远程的服务。具体的步骤如下：</p>\n<p>1.创建一个工程\n如果本来已经有工程，可以忽略。创建一个spring boot工程，可以通过 <a href=\"https://start.spring.io/\">https://start.spring.io/</a> 创建。<br>\n服务的提供方，已经在provider章节中进行了定义。\n2.调用服务</p>\n<pre><code>@RestController\npublic class UserTestController{\n    @Autowired \n    private UserReadService userReadService;\n    @RequestMapping(&quot;/user/getById&quot;)\n    public String getUserById(Long id){\n        // just test\n        return userReadService.getUserById(id).toString();\n    }\n}\n</code></pre>\n<p>3.Dubbo配置</p>\n<pre><code>\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n    xmlns:dubbo=&quot;http://dubbo.apache.org/schema/dubbo&quot;\n    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;&gt;  \n    &lt;dubbo:application name=&quot;hello-world-app&quot; /&gt;  \n    &lt;dubbo:registry address=&quot;multicast://224.5.6.7:1234&quot; /&gt;  \n    &lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot; /&gt;  \n    &lt;dubbo:reference id=&quot;userReadService&quot; interface=&quot;com.package.UserReadService&quot;check=&quot;false&quot; /&gt;  \n&lt;/beans&gt;\n</code></pre>\n<p>Dubbo配置的其他方式可以参考上一章节的相关配置，或者使用集成dubbo spring boot starter方式。</p>\n",
  "link": "/zh-cn/blog/dubbo-basic-usage-dubbo-consumer-configuration.html",
  "meta": {}
}