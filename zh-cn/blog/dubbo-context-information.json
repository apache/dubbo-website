{
  "filename": "dubbo-context-information.md",
  "__html": "<h1>Dubbo 上下文信息</h1>\n<h2>简介</h2>\n<p>上下文信息是一次 RPC 调用过程中附带的环境信息，如方法名、参数类型、真实参数、本端/对端地址等。这些数据仅属于一次调用，作用于 Consumer 到 Provider 调用的整个流程。</p>\n<p>提供上下文信息是 RPC 框架很重要的一个功能，使用上下文不仅可以为单次调用指定不同配置，还能在此基础上提供强大的上层功能，如分布式链路追踪。其实现原理就是在上下文中维护一个<code>span_id</code>，Consumer 和 Provider 通过传递<code>span_id</code>来连接一次RPC调用，分别上报日志后可以在追踪系统中串联并展示完整的调用流程。这样可以更方便地发现异常，定位问题。</p>\n<h2>使用说明</h2>\n<p>Dubbo中代表上下文的类是<code>org.apache.dubbo.rpc.RpcContext</code>，可通过下述代码来获取上下文信息。</p>\n<pre><code>RpcContext.getContext()\n</code></pre>\n<h2>使用场景</h2>\n<h3>获取调用信息</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法名</th>\n<th>用途</th>\n<th>作用范围</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">getRequest</td>\n<td>获取 RPC 请求对象</td>\n<td>Consumer</td>\n<td>获取底层 RPC 请求对象，例如 HttpServletRequest，其他情况为 null</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">getResponse</td>\n<td>获取 RPC 请求响应</td>\n<td>Consumer</td>\n<td>获取底层 RPC 响应对象，例如HttpServletResponse，其他情况为 null</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">isProviderSide</td>\n<td>当前是否属于 Provider 上下文</td>\n<td>Both</td>\n<td>服务被调用时为 true，调用其他服务时为false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">isConsumerSide</td>\n<td>当前是否属于 Consumer 上下文</td>\n<td>Both</td>\n<td>服务被调用时为 false，调用其他服务时为 true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">getUrls</td>\n<td>获取当前能调用的 Url 列表</td>\n<td>Both</td>\n<td>Consumer 端会根据不同的 Failover 策略实时变化</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">getRemotePort</td>\n<td>获取远端端口</td>\n<td>Both</td>\n<td>Consumer 端为最后一次调用的 Provider 端口，Provider 为当前请求的 Consumer 端口</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">getRemoteHost</td>\n<td>获取远端主机地址</td>\n<td>Both</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">getRemoteHostName</td>\n<td>获取远端主机名</td>\n<td>Both</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">getRemoteAddressString</td>\n<td>获取远端地址</td>\n<td>Both</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">getRemoteAddress</td>\n<td>获取远端地址</td>\n<td>Both</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">getLocalPort</td>\n<td>获取本端端口</td>\n<td>Both</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">getLocalHost</td>\n<td>获取本端主机地址</td>\n<td>Both</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">getLocalHostName</td>\n<td>获取本端主机名</td>\n<td>Both</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">getLocalAddressString</td>\n<td>获取本端地址</td>\n<td>Both</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">getLocalAddress</td>\n<td>获取本端地址</td>\n<td>Both</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>传递用户参数</h3>\n<h4>本端传递</h4>\n<p>调用<code>get</code>和<code>set</code>方法即可完成参数传递。主要用于本端 Filter 之间的数据共享。</p>\n<h4>对端传递</h4>\n<p>调用<code>setAttachment</code>和<code>getAttachment</code>即可完成对端数据传递，这些数据会经过 RPC 传递到对端。例如 Consumer 向 Provider 传递<code>span_id</code>。</p>\n<ul>\n<li>Dubbo已经支持从 Provider 端向 Consumer 端传递参数，读写方式和 Consumer 端调用时的方式一样。</li>\n</ul>\n<h3>异步调用</h3>\n<p>在异步调用时，可通过<code>getCompletableFuture</code>或<code>getFuture</code>获取相关的 Future，异步调用相关文档请参阅：<a href=\"http://Dubbo.apache.org/zh-cn/docs/user/demos/async-call.html\">异步调用</a></p>\n<h2>注意事项</h2>\n<p>Dubbo 内部使用 ThreadLocal 的方式存储每次调用的上下文信息，当接收到请求或发起请求时，当前线程会更新 RpcContext。例如，服务 A 调用服务 B，服务 B 调用服务 C，在 B 调 C 之前，RpcContext 记录的是 A 调 B 的信息，在 B 调 C 之后，RpcContext 记录的是 B 调 C 的信息。</p>\n",
  "link": "/zh-cn/blog/dubbo-context-information.html",
  "meta": {
    "title": "Dubbo 上下文信息",
    "keywords": "Dubbo,RPC Context, Attachment",
    "description": "介绍Dubbo上下文信息的作用、应用场景、使用方式以及注意事项"
  }
}