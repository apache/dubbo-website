{
  "filename": "dubbo-echo-test.md",
  "__html": "<h1>回声测试</h1>\n<p>回声测试用于检测服务是否可用。客户端通过 EchoService 来使用回声测试。EchoService 申明如下：</p>\n<pre><code class=\"language-Java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">EchoService</span> </span>{\n\n    <span class=\"hljs-comment\">/**\n     * echo test.\n     *\n     * <span class=\"hljs-doctag\">@param</span> message message.\n     * <span class=\"hljs-doctag\">@return</span> message.\n     */</span>\n    Object $echo(Object message);\n\n}\n</code></pre>\n<p>用户通过 $echo 方法发起的请求，会按照正常请求的流程执行，能够测试整个调用是否通畅，监控系统可以使用回声测试来检测服务可用性。</p>\n<h2>使用范例</h2>\n<p>所有服务引用自动实现 EchoService 接口，用户只需将服务引用强制转型为 EchoService，即可使用。配置和代码范例如下所示。\nSpring 配置：</p>\n<pre><code>&lt;dubbo:reference id=&quot;demoService&quot; interface=&quot;org.apache.dubbo.samples.echo.DemoService&quot; /&gt;\n</code></pre>\n<p>代码：</p>\n<pre><code class=\"language-Java\"><span class=\"hljs-comment\">// 远程服务引用</span>\nDemoService demoService= ctx.getBean(<span class=\"hljs-string\">\"demoService\"</span>);\n<span class=\"hljs-comment\">// 强制转型为EchoService</span>\nEchoService echoService = (EchoService) demoService;\n<span class=\"hljs-comment\">// 回声测试可用性</span>\nString status = echoService.$echo(<span class=\"hljs-string\">\"OK\"</span>);\n<span class=\"hljs-keyword\">assert</span>(status.equals(<span class=\"hljs-string\">\"OK\"</span>));\n</code></pre>\n<h2>实现原理</h2>\n<p>我们在配置服务引用时，并没有配置 EchoService 这个接口，为什么可以直接把服务引用转型为 EchoService 呢？\n用户拿到的服务引用其实是一个 Proxy，Dubbo 在生成 Proxy 的时候，已经默认将 EchoService 这个接口加入到 Proxy 的接口列表中，所以用户拿到的 Proxy 都已经实现了 EchoService。生成代理相关代码如下：</p>\n<pre><code class=\"language-Java\"> <span class=\"hljs-keyword\">public</span> &lt;T&gt; <span class=\"hljs-function\">T <span class=\"hljs-title\">getProxy</span><span class=\"hljs-params\">(Invoker&lt;T&gt; invoker, <span class=\"hljs-keyword\">boolean</span> generic)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n        Class&lt;?&gt;[] interfaces = <span class=\"hljs-keyword\">null</span>;\n        String config = invoker.getUrl().getParameter(Constants.INTERFACES);\n        <span class=\"hljs-keyword\">if</span> (config != <span class=\"hljs-keyword\">null</span> &amp;&amp; config.length() &gt; <span class=\"hljs-number\">0</span>) {\n            String[] types = Constants.COMMA_SPLIT_PATTERN.split(config);\n            <span class=\"hljs-keyword\">if</span> (types != <span class=\"hljs-keyword\">null</span> &amp;&amp; types.length &gt; <span class=\"hljs-number\">0</span>) {\n                interfaces = <span class=\"hljs-keyword\">new</span> Class&lt;?&gt;[types.length + <span class=\"hljs-number\">2</span>];\n                interfaces[<span class=\"hljs-number\">0</span>] = invoker.getInterface();\n                interfaces[<span class=\"hljs-number\">1</span>] = EchoService.class;\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; types.length; i++) {\n                    <span class=\"hljs-comment\">// TODO can we load successfully for a different classloader?.</span>\n                    interfaces[i + <span class=\"hljs-number\">2</span>] = ReflectUtils.forName(types[i]);\n                }\n            }\n        }\n        <span class=\"hljs-keyword\">if</span> (interfaces == <span class=\"hljs-keyword\">null</span>) {\n            interfaces = <span class=\"hljs-keyword\">new</span> Class&lt;?&gt;[]{invoker.getInterface(), EchoService.class};\n        }\n\n        <span class=\"hljs-keyword\">if</span> (!GenericService.class.isAssignableFrom(invoker.getInterface()) &amp;&amp; generic) {\n            <span class=\"hljs-keyword\">int</span> len = interfaces.length;\n            Class&lt;?&gt;[] temp = interfaces;\n            interfaces = <span class=\"hljs-keyword\">new</span> Class&lt;?&gt;[len + <span class=\"hljs-number\">1</span>];\n            System.arraycopy(temp, <span class=\"hljs-number\">0</span>, interfaces, <span class=\"hljs-number\">0</span>, len);\n            interfaces[len] = com.alibaba.dubbo.rpc.service.GenericService.class;\n        }\n\n        <span class=\"hljs-keyword\">return</span> getProxy(invoker, interfaces);\n    }\n</code></pre>\n<p>通过这种方式，任何服务引用都可以被转型成 EchoService 来使用。\n上面解释了客户端的实现，另外一边，用户在服务端也并没有实现 EchoService，那么客户端 EchoService 发出的调用在服务端是如何处理的呢？框架使用 Filter 机制来处理 EchoService 请求。Filter 实现代码如下：</p>\n<pre><code class=\"language-Java\"><span class=\"hljs-meta\">@Activate</span>(group = Constants.PROVIDER, order = -<span class=\"hljs-number\">110000</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">EchoFilter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Filter</span> </span>{\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Result <span class=\"hljs-title\">invoke</span><span class=\"hljs-params\">(Invoker&lt;?&gt; invoker, Invocation inv)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n        <span class=\"hljs-keyword\">if</span> (inv.getMethodName().equals(Constants.$ECHO) &amp;&amp; inv.getArguments() != <span class=\"hljs-keyword\">null</span> &amp;&amp; inv.getArguments().length == <span class=\"hljs-number\">1</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> RpcResult(inv.getArguments()[<span class=\"hljs-number\">0</span>]);\n        }\n        <span class=\"hljs-keyword\">return</span> invoker.invoke(inv);\n    }\n\n}\n</code></pre>\n<p>请求经过 EchoFilter.invoke 方法时，如果判定为 $echo 调用，则直接返回请求参数，否则继续执行 Filter 链。EchoFilter 默认加入到每一个服务提供者的 Filter 链里 EchoFilter.invoke 方法时，如果判定为 $echo 调用，则直接返回请求参数，否则继续执行 Filter 链。EchoFilter 默认加入到每一个服务提供者的 Filter 链里。这样每一个服务提供者自动具备了响应 EchoService 的能力。</p>\n<p>通过上述分析，我们了解了框架是如何通过动态代理和 Filter 机制，使得用户可以透明地使用 EchoService 功能。</p>\n",
  "link": "/zh-cn/blog/dubbo-echo-test.html",
  "meta": {}
}