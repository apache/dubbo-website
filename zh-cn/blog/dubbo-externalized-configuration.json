{
  "filename": "dubbo-externalized-configuration.md",
  "__html": "<h1>Dubbo 外部化配置（Externalized Configuration）</h1>\n<h2>外部化配置（External Configuration）</h2>\n<p>在<a href=\"Dubbo-Annotation-Driven.md\">Dubbo 注解驱动</a>例子中，无论是服务提供方，还是服务消费方，均需要转配相关配置Bean：</p>\n<pre><code class=\"language-java\">    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ApplicationConfig <span class=\"hljs-title\">applicationConfig</span><span class=\"hljs-params\">()</span> </span>{\n        ApplicationConfig applicationConfig = <span class=\"hljs-keyword\">new</span> ApplicationConfig();\n        applicationConfig.setName(<span class=\"hljs-string\">\"dubbo-annotation-consumer\"</span>);\n        <span class=\"hljs-keyword\">return</span> applicationConfig;\n    }\n</code></pre>\n<p>虽然实现类似于<code>ProviderConfiguration</code> 和 <code>ConsumerConfiguration</code> 这样的 Spring  <code>@Configuration</code> Bean 成本并不高，不过通过 Java Code 的方式定义配置 Bean，或多或少是一种 Hard Code（硬编码）的行为，缺少弹性。</p>\n<p>尽管在 Spring 应用中，可以通过 <code>@Value</code> 或者 <code>Environment</code> 的方式获取外部配置，其代码简洁性以及类型转换灵活性存在明显的不足。因此，Spring Boot  提出了外部化配置（External Configuration）的感念，即通过程序以外的配置源，动态地绑定指定类型。</p>\n<p>随着 Spring Boot / Spring Cloud 应用的流行，开发人员逐渐地接受并且使用 Spring Boot 外部化配置（External Configuration），即通过 <code>application.properties</code> 或者 <code>bootstrap.properties</code> 装配配置 Bean。</p>\n<p>下列表格记录了 Dubbo 内置配置类：</p>\n<table>\n<thead>\n<tr>\n<th>配置类</th>\n<th>标签</th>\n<th>用途</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ProtocolConfig</code></td>\n<td><code>&lt;dubbo:protocol/&gt;</code></td>\n<td>协议配置</td>\n<td>用于配置提供服务的协议信息，协议由提供方指定，消费方被动接受</td>\n</tr>\n<tr>\n<td><code>ApplicationConfig</code></td>\n<td><code>&lt;dubbo:application/&gt;</code></td>\n<td>应用配置</td>\n<td>用于配置当前应用信息，不管该应用是提供者还是消费者</td>\n</tr>\n<tr>\n<td><code>ModuleConfig</code></td>\n<td><code>&lt;dubbo:module/&gt;</code></td>\n<td>模块配置</td>\n<td>用于配置当前模块信息，可选</td>\n</tr>\n<tr>\n<td><code>RegistryConfig</code></td>\n<td><code>&lt;dubbo:registry/&gt;</code></td>\n<td>注册中心配置</td>\n<td>用于配置连接注册中心相关信息</td>\n</tr>\n<tr>\n<td><code>MonitorConfig</code></td>\n<td><code>&lt;dubbo:monitor/&gt;</code></td>\n<td>监控中心配置</td>\n<td>用于配置连接监控中心相关信息，可选</td>\n</tr>\n<tr>\n<td><code>ProviderConfig</code></td>\n<td><code>&lt;dubbo:provider/&gt;</code></td>\n<td>提供方配置</td>\n<td>当 ProtocolConfig 和 ServiceConfig 某属性没有配置时，采用此缺省值，可选</td>\n</tr>\n<tr>\n<td><code>ConsumerConfig</code></td>\n<td><code>&lt;dubbo:consumer/&gt;</code></td>\n<td>消费方配置</td>\n<td>当 ReferenceConfig 某属性没有配置时，采用此缺省值，可选</td>\n</tr>\n<tr>\n<td><code>MethodConfig</code></td>\n<td><code>&lt;dubbo:method/&gt;</code></td>\n<td>方法配置</td>\n<td>用于 ServiceConfig 和 ReferenceConfig 指定方法级的配置信息</td>\n</tr>\n<tr>\n<td><code>ArgumentConfig</code></td>\n<td><code>&lt;dubbo:argument/&gt;</code></td>\n<td>参数配置</td>\n<td>用于指定方法参数配置</td>\n</tr>\n</tbody>\n</table>\n<p>通过申明对应的 Spring 扩展标签，在 Spring 应用上下文中将自动生成相应的配置 Bean。</p>\n<p>在 Dubbo 官方用户手册的<a href=\"/docs/zh-cn/user/configuration/configuration-load-process.md\">“属性配置”</a>章节中，<code>dubbo.properties</code> 配置属性能够映射到  <code>ApplicationConfig</code> 、<code>ProtocolConfig</code> 以及 <code>RegistryConfig</code> 的字段。从某种意义上来说，<code>dubbo.properties</code>  也是 Dubbo 的外部化配置。</p>\n<p>其中，引用“映射规则”的内容：</p>\n<blockquote>\n<h2>映射规则</h2>\n<p>将 XML 配置的标签名，加属性名，用点分隔，多个属性拆成多行</p>\n<ul>\n<li>比如：<code>dubbo.application.name=foo</code>等价于<code>&lt;dubbo:application name=&quot;foo&quot; /&gt;</code></li>\n<li>比如：<code>dubbo.registry.address=10.20.153.10:9090</code>等价于<code>&lt;dubbo:registryaddress=&quot;10.20.153.10:9090&quot; /&gt;</code></li>\n</ul>\n<p>如果 XML 有多行同名标签配置，可用 id 号区分，如果没有 id 号将对所有同名标签生效</p>\n<ul>\n<li>比如：<code>dubbo.protocol.rmi.port=1234</code>等价于<code>&lt;dubbo:protocol id=&quot;rmi&quot; name=&quot;rmi&quot; port=&quot;1099&quot; /&gt;</code></li>\n<li>比如：<code>dubbo.registry.china.address=10.20.153.10:9090</code>等价于<code>&lt;dubbo:registry id=&quot;china&quot;address=&quot;10.20.153.10:9090&quot; /&gt;</code></li>\n</ul>\n<p>下面是 dubbo.properties 的一个典型配置：</p>\n<pre><code>dubbo.application.name=foo\ndubbo.application.owner=bar\ndubbo.registry.address=10.20.153.10:9090\n</code></pre>\n</blockquote>\n<p>根据“映射规则”，Dubbo 即支持单配置 Bean 映射，也支持多 Bean 映射。综合以上需求，既要兼容 Dubbo 已有的一个或多个 Bean 字段映射绑定，也支持外部化配置。</p>\n<blockquote>\n<p>特别提醒：外部化配置（External Configuration）并非 Spring Boot 特有，即使在 Spring Framework 场景下亦能支持。也就是说 Dubbo 外部化配置即可在 Spring Framework 中工作，也能在 Spring Boot 中运行。</p>\n</blockquote>\n<p>Dubbo 外部化配置（External Configuration） 支持起始版本为：<code>2.5.8</code></p>\n<h3><code>@EnableDubboConfig</code></h3>\n<h4>起始版本：<code>2.5.8</code></h4>\n<h4>使用说明</h4>\n<h5><code>@EnableDubboConfig</code> 定义</h5>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> EnableDubboConfig {\n\n    <span class=\"hljs-comment\">/**\n     * It indicates whether binding to multiple Spring Beans.\n     *\n     * <span class=\"hljs-doctag\">@return</span> the default value is &lt;code&gt;false&lt;/code&gt;\n     * <span class=\"hljs-doctag\">@revised</span> 2.5.9\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">multiple</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">false</span></span>;\n\n}\n</code></pre>\n<ul>\n<li><code>multiple</code> : 表示是否支持多Dubbo 配置 Bean 绑定。默认值为 <code>false</code> ，即单 Dubbo 配置 Bean 绑定</li>\n</ul>\n<h5>单 Dubbo 配置 Bean 绑定</h5>\n<p>为了更好地向下兼容，<code>@EnableDubboConfig</code> 提供外部化配置属性与 Dubbo 配置类之间的绑定，其中映射关系如下：</p>\n<table>\n<thead>\n<tr>\n<th>配置类</th>\n<th>外部化配置属性前缀</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ProtocolConfig</code></td>\n<td><code>dubbo.protocol</code></td>\n<td>协议配置</td>\n</tr>\n<tr>\n<td><code>ApplicationConfig</code></td>\n<td><code>dubbo.application</code></td>\n<td>应用配置</td>\n</tr>\n<tr>\n<td><code>ModuleConfig</code></td>\n<td><code>dubbo.module</code></td>\n<td>模块配置</td>\n</tr>\n<tr>\n<td><code>RegistryConfig</code></td>\n<td><code>dubbo.registry</code></td>\n<td>注册中心配置</td>\n</tr>\n<tr>\n<td><code>MonitorConfig</code></td>\n<td><code>dubbo.monitor</code></td>\n<td>监控中心配置</td>\n</tr>\n<tr>\n<td><code>ProviderConfig</code></td>\n<td><code>dubbo.provider</code></td>\n<td>提供方配置</td>\n</tr>\n<tr>\n<td><code>ConsumerConfig</code></td>\n<td><code>dubbo.consumer</code></td>\n<td>消费方配置</td>\n</tr>\n</tbody>\n</table>\n<p>当标注 <code>@EnableDubboConfig</code> 的类被扫描注册后，同时  Spring（Spring Boot）应用配置（<code>PropertySources</code>）中存在<code>dubbo.application.*</code> 时，<code>ApplicationConfig</code>  Bean 将被注册到在 Spring 上下文。否则，不会被注册。如果出现<code>dubbo.registry.*</code>的配置，那么，<code>RegistryConfig</code> Bean 将会创建，以此类推。即按需装配 Dubbo 配置 Bean。</p>\n<p>如果需要指定配置 Bean的 id，可通过<code>**.id</code> 属性设置，以<code>dubbo.application</code> 为例：</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\">## application</span>\n<span class=\"hljs-meta\">dubbo.application.id</span> = <span class=\"hljs-string\">applicationBean</span>\n<span class=\"hljs-meta\">dubbo.application.name</span> = <span class=\"hljs-string\">dubbo-demo-application</span>\n</code></pre>\n<p>以上配置等同于以下 Java Config Bean：</p>\n<pre><code class=\"language-java\">    <span class=\"hljs-meta\">@Bean</span>(<span class=\"hljs-string\">\"applicationBean\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ApplicationConfig <span class=\"hljs-title\">applicationBean</span><span class=\"hljs-params\">()</span> </span>{\n        ApplicationConfig applicationConfig = <span class=\"hljs-keyword\">new</span> ApplicationConfig();\n        applicationConfig.setName(<span class=\"hljs-string\">\"dubbo-demo-application\"</span>);\n        <span class=\"hljs-keyword\">return</span> applicationConfig;\n    }\n</code></pre>\n<p>大致上配置属性与配置类绑定模式 - <code>dubbo.application.*</code> 映射到 <code>ApplicationConfig</code> 中的字段。</p>\n<blockquote>\n<p>注：当配置属性名称无法在配置类中找到字段时，将会忽略绑定</p>\n</blockquote>\n<h5>多 Dubbo 配置 Bean 绑定</h5>\n<p>Dubbo <code>@Service</code> 和 <code>@Reference</code> 允许 Dubbo 应用关联<code>ApplicationConfig</code> Bean 或者指定多个<code>RegistryConfig</code> Bean 等能力。换句话说，Dubbo 应用上下文中可能存在多个<code>ApplicationConfig</code> 等 Bean定义。</p>\n<p>为了适应以上需要，因此从Dubbo <code>2.5.9</code> 开始，<code>@EnableDubboConfig</code> 支持多 Dubbo 配置 Bean 绑定，同时按照业界规约标准，与单 Dubbo 配置 Bean 绑定约定不同，配置属性前缀均为英文复数形式：</p>\n<blockquote>\n<p>详情请参考 ：<a href=\"https://github.com/alibaba/dubbo/issues/1141\">https://github.com/alibaba/dubbo/issues/1141</a></p>\n</blockquote>\n<ul>\n<li><code>dubbo.applications</code></li>\n<li><code>dubbo.modules</code></li>\n<li><code>dubbo.registries</code></li>\n<li><code>dubbo.protocols</code></li>\n<li><code>dubbo.monitors</code></li>\n<li><code>dubbo.providers</code></li>\n<li><code>dubbo.consumers</code></li>\n</ul>\n<p>以<code>dubbo.applications</code> 为例，基本的模式如下：</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-meta\">dubbo.applications.${bean-name}.property-name</span> = <span class=\"hljs-string\">${property-value}</span>\n</code></pre>\n<p>请读者注意，在单 Dubbo 配置 Bean 绑定时，可以通过指定<code>id</code> 属性的方式，定义<code>ApplicationConfig</code> Bean 的ID，即<code>dubbo.application.id</code>。</p>\n<p>而在多 Dubbo 配置 Bean 绑定时，Bean ID 则由<code>dubbo.applications.</code>与属性字段名称（<code>.property-name</code>)之间的字符来表达。</p>\n<p>如下配置：</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\"># multiple Bean definition</span>\n<span class=\"hljs-meta\">dubbo.applications.applicationBean.name</span> = <span class=\"hljs-string\">dubbo-demo-application</span>\n<span class=\"hljs-meta\">dubbo.applications.applicationBean2.name</span> = <span class=\"hljs-string\">dubbo-demo-application2</span>\n<span class=\"hljs-meta\">dubbo.applications.applicationBean3.name</span> = <span class=\"hljs-string\">dubbo-demo-application3</span>\n</code></pre>\n<p>该配置内容中，绑定了三个<code>ApplicationConfig</code> Bean，分别是<code>applicationBean</code>、<code>applicationBean2</code>以及<code>applicationBean3</code></p>\n<h4>示例说明</h4>\n<p><code>@EnableDubboConfig</code> 的使用方法很简答， 再次强调一点，当规约的外部配置存在时，相应的 Dubbo 配置类 才会提升为 Spring Bean。简言之，按需装配。</p>\n<h5>单 Dubbo 配置 Bean 绑定</h5>\n<h6>外部化配置文件</h6>\n<p>将以下内容的外部化配置文件物理路径为：<code>classpath:/META-INF/config.properties</code>:</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\"># 单 Dubbo 配置 Bean 绑定</span>\n<span class=\"hljs-comment\">## application</span>\n<span class=\"hljs-meta\">dubbo.application.id</span> = <span class=\"hljs-string\">applicationBean</span>\n<span class=\"hljs-meta\">dubbo.application.name</span> = <span class=\"hljs-string\">dubbo-demo-application</span>\n<span class=\"hljs-comment\">\n## module</span>\n<span class=\"hljs-meta\">dubbo.module.id</span> = <span class=\"hljs-string\">moduleBean</span>\n<span class=\"hljs-meta\">dubbo.module.name</span> = <span class=\"hljs-string\">dubbo-demo-module</span>\n<span class=\"hljs-comment\">\n## registry</span>\n<span class=\"hljs-meta\">dubbo.registry.address</span> = <span class=\"hljs-string\">zookeeper://192.168.99.100:32770</span>\n<span class=\"hljs-comment\">\n## protocol</span>\n<span class=\"hljs-meta\">dubbo.protocol.name</span> = <span class=\"hljs-string\">dubbo</span>\n<span class=\"hljs-meta\">dubbo.protocol.port</span> = <span class=\"hljs-string\">20880</span>\n<span class=\"hljs-comment\">\n## monitor</span>\n<span class=\"hljs-meta\">dubbo.monitor.address</span> = <span class=\"hljs-string\">zookeeper://127.0.0.1:32770</span>\n<span class=\"hljs-comment\">\n## provider</span>\n<span class=\"hljs-meta\">dubbo.provider.host</span> = <span class=\"hljs-string\">127.0.0.1</span>\n<span class=\"hljs-comment\">\n## consumer</span>\n<span class=\"hljs-meta\">dubbo.consumer.client</span> = <span class=\"hljs-string\">netty</span>\n</code></pre>\n<h6><code>@EnableDubboConfig</code> 配置 Bean</h6>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n * Dubbo 配置 Bean\n *\n * <span class=\"hljs-doctag\">@author</span> &lt;a href=\"mailto:mercyblitz@gmail.com\"&gt;Mercy&lt;/a&gt;\n */</span>\n<span class=\"hljs-meta\">@EnableDubboConfig</span>\n<span class=\"hljs-meta\">@PropertySource</span>(<span class=\"hljs-string\">\"META-INF/config.properties\"</span>)\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DubboConfiguration</span> </span>{\n\n}\n</code></pre>\n<h6>实现引导类</h6>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n * Dubbo 配置引导类\n *\n * <span class=\"hljs-doctag\">@author</span> &lt;a href=\"mailto:mercyblitz@gmail.com\"&gt;Mercy&lt;/a&gt;\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DubboConfigurationBootstrap</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        <span class=\"hljs-comment\">// 创建配置上下文</span>\n        AnnotationConfigApplicationContext context = <span class=\"hljs-keyword\">new</span> AnnotationConfigApplicationContext();\n        <span class=\"hljs-comment\">// 注册当前配置 Bean</span>\n        context.register(DubboConfiguration.class);\n        context.refresh();\n \t    <span class=\"hljs-comment\">// application</span>\n        ApplicationConfig applicationConfig = context.getBean(<span class=\"hljs-string\">\"applicationBean\"</span>, ApplicationConfig.class);\n        System.out.printf(<span class=\"hljs-string\">\"applicationBean.name = %s \\n\"</span>, applicationConfig.getName());\n\n        <span class=\"hljs-comment\">// module</span>\n        ModuleConfig moduleConfig = context.getBean(<span class=\"hljs-string\">\"moduleBean\"</span>, ModuleConfig.class);\n        System.out.printf(<span class=\"hljs-string\">\"moduleBean.name = %s \\n\"</span>, moduleConfig.getName());\n\n        <span class=\"hljs-comment\">// registry</span>\n        RegistryConfig registryConfig = context.getBean(RegistryConfig.class);\n        System.out.printf(<span class=\"hljs-string\">\"registryConfig.name = %s \\n\"</span>, registryConfig.getAddress());\n\n        <span class=\"hljs-comment\">// protocol</span>\n        ProtocolConfig protocolConfig = context.getBean(ProtocolConfig.class);\n        System.out.printf(<span class=\"hljs-string\">\"protocolConfig.name = %s \\n\"</span>, protocolConfig.getName());\n        System.out.printf(<span class=\"hljs-string\">\"protocolConfig.port = %s \\n\"</span>, protocolConfig.getPort());\n\n        <span class=\"hljs-comment\">// monitor</span>\n        MonitorConfig monitorConfig = context.getBean(MonitorConfig.class);\n        System.out.printf(<span class=\"hljs-string\">\"monitorConfig.name = %s \\n\"</span>, monitorConfig.getAddress());\n\n        <span class=\"hljs-comment\">// provider</span>\n        ProviderConfig providerConfig = context.getBean(ProviderConfig.class);\n        System.out.printf(<span class=\"hljs-string\">\"providerConfig.name = %s \\n\"</span>, providerConfig.getHost());\n\n        <span class=\"hljs-comment\">// consumer</span>\n        ConsumerConfig consumerConfig = context.getBean(ConsumerConfig.class);\n        System.out.printf(<span class=\"hljs-string\">\"consumerConfig.name = %s \\n\"</span>, consumerConfig.getClient());\n    }\n}\n</code></pre>\n<h6>执行结果</h6>\n<pre><code>applicationBean.name = dubbo-demo-application \nmoduleBean.name = dubbo-demo-module \nregistryConfig.name = zookeeper://192.168.99.100:32770 \nprotocolConfig.name = dubbo \nprotocolConfig.port = 20880 \nmonitorConfig.name = zookeeper://127.0.0.1:32770 \nproviderConfig.name = 127.0.0.1 \nconsumerConfig.name = netty \n</code></pre>\n<p>不难发现，<code>@EnableDubboConfig</code> 配置 Bean 配合外部化文件 <code>classpath:/META-INF/config.properties</code>，与执行输出内容相同。</p>\n<h5>多 Dubbo 配置 Bean 绑定</h5>\n<h6>外部化配置文件</h6>\n<p>将以下内容的外部化配置文件物理路径为：<code>classpath:/META-INF/multiple-config.properties</code>:</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\"># 多 Dubbo 配置 Bean 绑定</span>\n<span class=\"hljs-comment\">## dubbo.applications</span>\n<span class=\"hljs-meta\">dubbo.applications.applicationBean.name</span> = <span class=\"hljs-string\">dubbo-demo-application</span>\n<span class=\"hljs-meta\">dubbo.applications.applicationBean2.name</span> = <span class=\"hljs-string\">dubbo-demo-application2</span>\n<span class=\"hljs-meta\">dubbo.applications.applicationBean3.name</span> = <span class=\"hljs-string\">dubbo-demo-application3</span>\n</code></pre>\n<h6><code>@EnableDubboConfig</code>  配置 Bean（多）</h6>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@EnableDubboConfig</span>(multiple = <span class=\"hljs-keyword\">true</span>)\n<span class=\"hljs-meta\">@PropertySource</span>(<span class=\"hljs-string\">\"META-INF/multiple-config.properties\"</span>)\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DubboMultipleConfiguration</span> </span>{\n\n}\t\n</code></pre>\n<h6>实现引导类</h6>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n * Dubbo 配置引导类\n *\n * <span class=\"hljs-doctag\">@author</span> &lt;a href=\"mailto:mercyblitz@gmail.com\"&gt;Mercy&lt;/a&gt;\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DubboConfigurationBootstrap</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        <span class=\"hljs-comment\">// 创建配置上下文</span>\n        AnnotationConfigApplicationContext context = <span class=\"hljs-keyword\">new</span> AnnotationConfigApplicationContext();\n        <span class=\"hljs-comment\">// 注册当前配置 Bean</span>\n        context.register(DubboMultipleConfiguration.class);\n        context.refresh();\n\n        <span class=\"hljs-comment\">// 获取 ApplicationConfig Bean：\"applicationBean\"、\"applicationBean2\" 和 \"applicationBean3\"</span>\n        ApplicationConfig applicationBean = context.getBean(<span class=\"hljs-string\">\"applicationBean\"</span>, ApplicationConfig.class);\n        ApplicationConfig applicationBean2 = context.getBean(<span class=\"hljs-string\">\"applicationBean2\"</span>, ApplicationConfig.class);\n        ApplicationConfig applicationBean3 = context.getBean(<span class=\"hljs-string\">\"applicationBean3\"</span>, ApplicationConfig.class);\n\n        System.out.printf(<span class=\"hljs-string\">\"applicationBean.name = %s \\n\"</span>, applicationBean.getName());\n        System.out.printf(<span class=\"hljs-string\">\"applicationBean2.name = %s \\n\"</span>, applicationBean2.getName());\n        System.out.printf(<span class=\"hljs-string\">\"applicationBean3.name = %s \\n\"</span>, applicationBean3.getName());\n    }\n}\n</code></pre>\n<h6>执行结果</h6>\n<pre><code>applicationBean.name = dubbo-demo-application \napplicationBean2.name = dubbo-demo-application2 \napplicationBean3.name = dubbo-demo-application3 \n</code></pre>\n<p><code>@EnableDubboConfig(multiple = true)</code> 执行后，运行结果说明<code>ApplicationConfig</code> Bean 以及 ID 的定义方式。</p>\n<h3><code>@EnableDubboConfigBinding</code> &amp; <code>@EnableDubboConfigBindings</code></h3>\n<p><code>@EnableDubboConfig</code>适合绝大多数外部化配置场景，然而无论是单 Bean 绑定，还是多 Bean 绑定，其<strong>外部化配置属性前缀</strong>是固化的，如<code>dubbo.application</code> 以及 <code>dubbo.applications</code> 。</p>\n<p>当应用需要自定义<strong>外部化配置属性前缀</strong>，<code>@EnableDubboConfigBinding</code>能提供更大的弹性，支持单个外部化配置属性前缀（<code>prefix</code>) 与 Dubbo 配置 Bean 类型（<code>AbstractConfig</code> 子类）绑定，如果需要多次绑定时，可使用<code>@EnableDubboConfigBindings</code>。</p>\n<blockquote>\n<p>尽管 Dubbo 推荐使用 Java 8 ，然而实际的情况，运行时的 JDK 的版本可能从 6到8 均有。因此，<code>@EnableDubboConfigBinding</code> 没有实现<code>java.lang.annotation.Repeatable</code>，即允许实现类不支持重复标注<code>@EnableDubboConfigBinding</code>。</p>\n</blockquote>\n<p><code>@EnableDubboConfigBinding</code>  在支持外部化配置属性与 Dubbo 配置类绑定时，与 Dubbo 过去的映射行为不同，被绑定的 Dubbo 配置类将会提升为 Spring Bean，无需提前装配 Dubbo 配置类。同时，支持多 Dubbo 配置Bean 装配。其 Bean 的绑定规则与<code>@EnableDubboConfig</code>一致。</p>\n<h4>起始版本： <code>2.5.8</code></h4>\n<h4>使用说明</h4>\n<h5><code>@EnableDubboConfigBinding</code> 定义</h5>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> EnableDubboConfigBinding {\n\n    <span class=\"hljs-comment\">/**\n     * The name prefix of the properties that are valid to bind to {<span class=\"hljs-doctag\">@link</span> AbstractConfig Dubbo Config}.\n     *\n     * <span class=\"hljs-doctag\">@return</span> the name prefix of the properties to bind\n     */</span>\n    <span class=\"hljs-function\">String <span class=\"hljs-title\">prefix</span><span class=\"hljs-params\">()</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@return</span> The binding type of {<span class=\"hljs-doctag\">@link</span> AbstractConfig Dubbo Config}.\n     * <span class=\"hljs-doctag\">@see</span> AbstractConfig\n     * <span class=\"hljs-doctag\">@see</span> ApplicationConfig\n     * <span class=\"hljs-doctag\">@see</span> ModuleConfig\n     * <span class=\"hljs-doctag\">@see</span> RegistryConfig\n     */</span>\n    Class&lt;? extends AbstractConfig&gt; type();\n\n    <span class=\"hljs-comment\">/**\n     * It indicates whether {<span class=\"hljs-doctag\">@link</span> #prefix()} binding to multiple Spring Beans.\n     *\n     * <span class=\"hljs-doctag\">@return</span> the default value is &lt;code&gt;false&lt;/code&gt;\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">multiple</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">false</span></span>;\n\n}\n</code></pre>\n<ul>\n<li><code>prefix()</code> : 指定待绑定 Dubbo 配置类的外部化配置属性的前缀，比如<code>dubbo.application</code>  为 <code>ApplicationConfig</code> 的外部化配置属性的前缀。<code>prefix()</code> 支持占位符（Placeholder）, 并且其关联前缀值是否以&quot;.&quot; 作为结尾字符是可选的，即<code>prefix() = &quot;dubbo.application&quot;</code> 与 <code>prefix() = &quot;dubbo.application.&quot;</code> 效果相同</li>\n<li><code>type()</code> : 指定 Dubbo 配置类，所有 <code>AbstractConfig</code> 的实现子类即可，如<code>ApplicationConfig</code> 、<code>RegistryConfig</code> 以及 <code>ProtocolConfig</code> 等</li>\n<li><code>multiple()</code> : 表明是否需要将<code>prefix()</code>   作为多个 <code>type()</code>   类型的 Spring Bean 外部化配置属性。默认值为<code>false</code>，即默认支持单个类型的 Spring 配置 Bean</li>\n</ul>\n<p>假设标注 <code>@EnableDubboConfigBinding</code> 的实现类被 Spring 应用上下文扫描并且注册后，其中<code>prefix()</code> =  <code>dubbo.app</code> 、 <code>type()</code> = <code>ApplicationConfig.class</code> ，且外部配置内容为：</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-meta\">dubbo.app.id</span> = <span class=\"hljs-string\">applicationBean</span>\n<span class=\"hljs-meta\">dubbo.app.name</span> = <span class=\"hljs-string\">dubbo-demo-application</span>\n</code></pre>\n<p>Spring 应用上下文启动后，一个 ID 为 &quot;applicationBean&quot;   的 <code>ApplicationConfig</code>  Bean 被初始化，其 <code>name</code> 字段被设置为 &quot;dubbo-demo-application&quot;。</p>\n<h5><code>EnableDubboConfigBindings</code> 定义</h5>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> EnableDubboConfigBindings {\n\n    <span class=\"hljs-comment\">/**\n     * The value of {<span class=\"hljs-doctag\">@link</span> EnableDubboConfigBindings}\n     *\n     * <span class=\"hljs-doctag\">@return</span> non-null\n     */</span>\n    EnableDubboConfigBinding[] value();\n\n}\n</code></pre>\n<ul>\n<li><code>value</code> : 指定多个<code>EnableDubboConfigBinding</code>，用于实现外部化配置属性前缀（<code>prefix</code>) 与 Dubbo 配置 Bean 类型（<code>AbstractConfig</code> 子类）绑定。</li>\n</ul>\n<h4>示例说明</h4>\n<h5>外部化配置文件</h5>\n<p>将以下内容的外部化配置文件物理路径为：<code>classpath:/META-INF/bindings.properties</code></p>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\"># classpath:/META-INF/bindings.properties</span>\n<span class=\"hljs-comment\">## 占位符值 : ApplicationConfig 外部配置属性前缀</span>\n<span class=\"hljs-meta\">applications.prefix</span> = <span class=\"hljs-string\">dubbo.apps.</span>\n<span class=\"hljs-comment\">\n## 多 ApplicationConfig Bean 绑定</span>\n<span class=\"hljs-meta\">dubbo.apps.applicationBean.name</span> = <span class=\"hljs-string\">dubbo-demo-application</span>\n<span class=\"hljs-meta\">dubbo.apps.applicationBean2.name</span> = <span class=\"hljs-string\">dubbo-demo-application2</span>\n<span class=\"hljs-meta\">dubbo.apps.applicationBean3.name</span> = <span class=\"hljs-string\">dubbo-demo-application3</span>\n<span class=\"hljs-comment\">\n## 单 ModuleConfig Bean 绑定</span>\n<span class=\"hljs-meta\">dubbo.module.id</span> = <span class=\"hljs-string\">moduleBean</span>\n<span class=\"hljs-meta\">dubbo.module.name</span> = <span class=\"hljs-string\">dubbo-demo-module</span>\n<span class=\"hljs-comment\">\n## 单 RegistryConfig Bean 绑定</span>\n<span class=\"hljs-meta\">dubbo.registry.address</span> = <span class=\"hljs-string\">zookeeper://192.168.99.100:32770</span>\n</code></pre>\n<h5><code>EnableDubboConfigBindings</code> 配置 Bean</h5>\n<p><code>DubboConfiguration</code> 作为 Dubbo 配置 Bean，除通过 <code>@EnableDubboConfigBinding</code> 绑定之外，还需要 <code>@PropertySource</code> 指定外部化配置文件（<code>classpath:/META-INF/bindings.properties</code>）:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n * Dubbo 配置 Bean\n *\n * <span class=\"hljs-doctag\">@author</span> &lt;a href=\"mailto:mercyblitz@gmail.com\"&gt;Mercy&lt;/a&gt;\n */</span>\n<span class=\"hljs-meta\">@EnableDubboConfigBindings</span>({\n        <span class=\"hljs-meta\">@EnableDubboConfigBinding</span>(prefix = <span class=\"hljs-string\">\"${applications.prefix}\"</span>,\n                type = ApplicationConfig.class, multiple = <span class=\"hljs-keyword\">true</span>), <span class=\"hljs-comment\">// 多 ApplicationConfig Bean 绑定</span>\n        <span class=\"hljs-meta\">@EnableDubboConfigBinding</span>(prefix = <span class=\"hljs-string\">\"dubbo.module\"</span>, <span class=\"hljs-comment\">// 不带 \".\" 后缀</span>\n                type = ModuleConfig.class), <span class=\"hljs-comment\">// 单 ModuleConfig Bean 绑定</span>\n        <span class=\"hljs-meta\">@EnableDubboConfigBinding</span>(prefix = <span class=\"hljs-string\">\"dubbo.registry.\"</span>, <span class=\"hljs-comment\">// 带 \".\" 后缀</span>\n                type = RegistryConfig.class) <span class=\"hljs-comment\">// 单 RegistryConfig Bean 绑定</span>\n})\n<span class=\"hljs-meta\">@PropertySource</span>(<span class=\"hljs-string\">\"META-INF/bindings.properties\"</span>)\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DubboConfiguration</span> </span>{\n  \n}\n</code></pre>\n<h5>实现引导类</h5>\n<p>通过之前的使用说明，当 <code>EnableDubboConfigBinding</code> 将外部配置化文件<code>classpath:/META-INF/dubbo.properties</code> 绑定到 <code>ApplicationConfig</code>后，其中 Spring Bean &quot;applicationBean&quot; 的 name 字段被设置成 &quot;dubbo-demo-application&quot;。同时， <code>EnableDubboConfigBinding</code>  所标注的 <code>DubboConfiguration</code> 需要被 Sring 应用上下文注册：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n * Dubbo 配置引导类\n *\n * <span class=\"hljs-doctag\">@author</span> &lt;a href=\"mailto:mercyblitz@gmail.com\"&gt;Mercy&lt;/a&gt;\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DubboConfigurationBootstrap</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        <span class=\"hljs-comment\">// 创建配置上下文</span>\n        AnnotationConfigApplicationContext context = <span class=\"hljs-keyword\">new</span> AnnotationConfigApplicationContext();\n        <span class=\"hljs-comment\">// 注册当前配置 Bean</span>\n        context.register(DubboConfiguration.class);\n        context.refresh();\n \t\t<span class=\"hljs-comment\">// 获取 ApplicationConfig Bean：\"applicationBean\"、\"applicationBean2\" 和 \"applicationBean3\"</span>\n        ApplicationConfig applicationBean = context.getBean(<span class=\"hljs-string\">\"applicationBean\"</span>, ApplicationConfig.class);\n        ApplicationConfig applicationBean2 = context.getBean(<span class=\"hljs-string\">\"applicationBean2\"</span>, ApplicationConfig.class);\n        ApplicationConfig applicationBean3 = context.getBean(<span class=\"hljs-string\">\"applicationBean3\"</span>, ApplicationConfig.class);\n\n        System.out.printf(<span class=\"hljs-string\">\"applicationBean.name = %s \\n\"</span>, applicationBean.getName());\n        System.out.printf(<span class=\"hljs-string\">\"applicationBean2.name = %s \\n\"</span>, applicationBean2.getName());\n        System.out.printf(<span class=\"hljs-string\">\"applicationBean3.name = %s \\n\"</span>, applicationBean3.getName());\n\n        <span class=\"hljs-comment\">// 获取 ModuleConfig Bean：\"moduleBean\"</span>\n        ModuleConfig moduleBean = context.getBean(<span class=\"hljs-string\">\"moduleBean\"</span>, ModuleConfig.class);\n\n        System.out.printf(<span class=\"hljs-string\">\"moduleBean.name = %s \\n\"</span>, moduleBean.getName());\n\n        <span class=\"hljs-comment\">// 获取 RegistryConfig Bean</span>\n        RegistryConfig registry = context.getBean(RegistryConfig.class);\n\n        System.out.printf(<span class=\"hljs-string\">\"registry.address = %s \\n\"</span>, registry.getAddress());\n    }\n}\n</code></pre>\n<h5>运行结果</h5>\n<p><code>DubboConfigurationBootstrap</code> 运行后控制台输出：</p>\n<pre><code>applicationBean.name = dubbo-demo-application \napplicationBean2.name = dubbo-demo-application2 \napplicationBean3.name = dubbo-demo-application3 \nmoduleBean.name = dubbo-demo-module \nregistry.address = zookeeper://192.168.99.100:32770 \n</code></pre>\n<p>输出的内容与<code>classpath:/META-INF/bindings.properties</code> 绑定的内容一致，符合期望。</p>\n",
  "link": "/zh-cn/blog/dubbo-externalized-configuration.html",
  "meta": {}
}