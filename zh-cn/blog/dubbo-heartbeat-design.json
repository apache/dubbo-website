{
  "filename": "dubbo-heartbeat-design.md",
  "__html": "<h1>Dubbo 现有心跳方案总结以及改进建议</h1>\n<h3>1 前言</h3>\n<p>设计一个好的心跳机制并不是一件容易的事，就我所熟知的几个 RPC 框架，它们的心跳机制可以说大相径庭，这篇文章我将探讨一下<strong>如何设计一个优雅的心跳机制，主要从 Dubbo 的现有方案以及一个改进方案来做分析</strong>。</p>\n<h3>2 预备知识</h3>\n<p>因为后续我们将从源码层面来进行介绍，所以一些服务治理框架的细节还需要提前交代一下，方便大家理解。</p>\n<h4>2.1 客户端如何得知请求失败了？</h4>\n<p>高性能的 RPC 框架几乎都会选择使用 Netty 来作为通信层的组件，非阻塞式通信的高效不需要我做过多的介绍。但也由于非阻塞的特性，导致其发送数据和接收数据是一个异步的过程，所以当存在服务端异常、网络问题时，客户端是接收不到响应的，那么我们如何判断一次 RPC 调用是失败的呢？</p>\n<p>误区一：Dubbo 调用不是默认同步的吗？</p>\n<p>Dubbo 在通信层是异步的，呈现给使用者同步的错觉是因为内部做了阻塞等待，实现了异步转同步。</p>\n<p>误区二： <code>Channel.writeAndFlush</code> 会返回一个 <code>channelFuture</code>，我只需要判断 <code>channelFuture.isSuccess</code> 就可以判断请求是否成功了。</p>\n<p>注意，writeAndFlush 成功并不代表对端接受到了请求，返回值为 true 只能保证写入网络缓冲区成功，并不代表发送成功。</p>\n<p>避开上述两个误区，我们再来回到本小节的标题：客户端如何得知请求失败？<strong>正确的逻辑应当是以客户端接收到失败响应为判断依据</strong>。等等，前面不还在说在失败的场景中，服务端是不会返回响应的吗？没错，既然服务端不会返回，那就只能客户端自己造了。</p>\n<p>一个常见的设计是：客户端发起一个 RPC 请求，会设置一个超时时间 <code>client_timeout</code>，发起调用的同时，客户端会开启一个延迟 <code>client_timeout</code> 的定时器</p>\n<ul>\n<li>接收到正常响应时，移除该定时器。</li>\n<li>定时器倒计时完毕，还没有被移除，则认为请求超时，构造一个失败的响应传递给客户端。</li>\n</ul>\n<p>Dubbo 中的超时判定逻辑：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> DefaultFuture <span class=\"hljs-title\">newFuture</span><span class=\"hljs-params\">(Channel channel, Request request, <span class=\"hljs-keyword\">int</span> timeout)</span> </span>{\n    <span class=\"hljs-keyword\">final</span> DefaultFuture future = <span class=\"hljs-keyword\">new</span> DefaultFuture(channel, request, timeout);\n    <span class=\"hljs-comment\">// timeout check</span>\n    timeoutCheck(future);\n    <span class=\"hljs-keyword\">return</span> future;\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">timeoutCheck</span><span class=\"hljs-params\">(DefaultFuture future)</span> </span>{\n    TimeoutCheckTask task = <span class=\"hljs-keyword\">new</span> TimeoutCheckTask(future);\n    TIME_OUT_TIMER.newTimeout(task, future.getTimeout(), TimeUnit.MILLISECONDS);\n}\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TimeoutCheckTask</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">TimerTask</span> </span>{\n    <span class=\"hljs-keyword\">private</span> DefaultFuture future;\n    TimeoutCheckTask(DefaultFuture future) {\n        <span class=\"hljs-keyword\">this</span>.future = future;\n    }\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(Timeout timeout)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (future == <span class=\"hljs-keyword\">null</span> || future.isDone()) {\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        <span class=\"hljs-comment\">// create exception response.</span>\n        Response timeoutResponse = <span class=\"hljs-keyword\">new</span> Response(future.getId());\n        <span class=\"hljs-comment\">// set timeout status.</span>\n        timeoutResponse.setStatus(future.isSent() ? Response.SERVER_TIMEOUT : Response.CLIENT_TIMEOUT);\n        timeoutResponse.setErrorMessage(future.getTimeoutMessage(<span class=\"hljs-keyword\">true</span>));\n        <span class=\"hljs-comment\">// handle response.</span>\n        DefaultFuture.received(future.getChannel(), timeoutResponse);\n    }\n}\n\n</code></pre>\n<p>主要逻辑涉及的类：<code>DubboInvoker</code>，<code>HeaderExchangeChannel</code>，<code>DefaultFuture</code> ，通过上述代码，我们可以得知一个细节，无论是何种调用，都会经过这个定时器的检测，<strong>超时即调用失败，一次 RPC 调用的失败，必须以客户端收到失败响应为准</strong>。</p>\n<h4>2.2 心跳检测需要容错</h4>\n<p>网络通信永远要考虑到最坏的情况，一次心跳失败，不能认定为连接不通，多次心跳失败，才能采取相应的措施。</p>\n<h4>2.3 心跳检测不需要忙检测</h4>\n<p>忙检测的对立面是空闲检测，我们做心跳的初衷，是为了保证连接的可用性，以保证及时采取断连，重连等措施。如果一条通道上有频繁的 RPC 调用正在进行，我们不应该为通道增加负担去发送心跳包。<strong>心跳扮演的角色应当是晴天收伞，雨天送伞。</strong></p>\n<h3>3 Dubbo 现有方案</h3>\n<blockquote>\n<p>本文的源码对应 Dubbo  2.7.x 版本，在 apache 孵化的该版本中，心跳机制得到了增强。</p>\n</blockquote>\n<p>介绍完了一些基础的概念，我们再来看看 Dubbo 是如何设计应用层心跳的。Dubbo 的心跳是双向心跳，客户端会给服务端发送心跳，反之，服务端也会向客户端发送心跳。</p>\n<h4>3.1 连接建立时创建定时器</h4>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HeaderExchangeClient</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">ExchangeClient</span> </span>{\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> heartbeat;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> heartbeatTimeout;\n    <span class=\"hljs-keyword\">private</span> HashedWheelTimer heartbeatTimer;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">HeaderExchangeClient</span><span class=\"hljs-params\">(Client client, <span class=\"hljs-keyword\">boolean</span> needHeartbeat)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.client = client;\n        <span class=\"hljs-keyword\">this</span>.channel = <span class=\"hljs-keyword\">new</span> HeaderExchangeChannel(client);\n        <span class=\"hljs-keyword\">this</span>.heartbeat = client.getUrl().getParameter(Constants.HEARTBEAT_KEY, dubbo != <span class=\"hljs-keyword\">null</span> &amp;&amp; dubbo.startsWith(<span class=\"hljs-string\">\"1.0.\"</span>) ? Constants.DEFAULT_HEARTBEAT : <span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-keyword\">this</span>.heartbeatTimeout = client.getUrl().getParameter(Constants.HEARTBEAT_TIMEOUT_KEY, heartbeat * <span class=\"hljs-number\">3</span>);\n        <span class=\"hljs-keyword\">if</span> (needHeartbeat) { &lt;<span class=\"hljs-number\">1</span>&gt;\n            <span class=\"hljs-keyword\">long</span> tickDuration = calculateLeastDuration(heartbeat);\n            heartbeatTimer = <span class=\"hljs-keyword\">new</span> HashedWheelTimer(<span class=\"hljs-keyword\">new</span> NamedThreadFactory(<span class=\"hljs-string\">\"dubbo-client-heartbeat\"</span>, <span class=\"hljs-keyword\">true</span>), tickDuration,\n                    TimeUnit.MILLISECONDS, Constants.TICKS_PER_WHEEL); &lt;<span class=\"hljs-number\">2</span>&gt;\n            startHeartbeatTimer();\n        }\n    }\n }\n</code></pre>\n<p>&lt;1&gt; <strong>默认开启心跳检测的定时器</strong></p>\n<p>&lt;2&gt; <strong>创建了一个 <code>HashedWheelTimer</code> 开启心跳检测</strong>，这是 Netty 所提供的一个经典的时间轮定时器实现，至于它和 jdk 的实现有何不同，不了解的同学也可以关注下，我就不拓展了。</p>\n<p>不仅 <code>HeaderExchangeClient</code> 客户端开起了定时器，<code>HeaderExchangeServer</code> 服务端同样开起了定时器，由于服务端的逻辑和客户端几乎一致，所以后续我并不会重复粘贴服务端的代码。</p>\n<blockquote>\n<p>Dubbo 在早期版本版本中使用的是 schedule 方案，在 2.7.x 中替换成了 HashedWheelTimer。</p>\n</blockquote>\n<h4>3.2 开启两个定时任务</h4>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">startHeartbeatTimer</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">long</span> heartbeatTick = calculateLeastDuration(heartbeat);\n    <span class=\"hljs-keyword\">long</span> heartbeatTimeoutTick = calculateLeastDuration(heartbeatTimeout);\n    HeartbeatTimerTask heartBeatTimerTask = <span class=\"hljs-keyword\">new</span> HeartbeatTimerTask(cp, heartbeatTick, heartbeat); &lt;<span class=\"hljs-number\">1</span>&gt;\n    ReconnectTimerTask reconnectTimerTask = <span class=\"hljs-keyword\">new</span> ReconnectTimerTask(cp, heartbeatTimeoutTick, heartbeatTimeout); &lt;<span class=\"hljs-number\">2</span>&gt;\n\n    heartbeatTimer.newTimeout(heartBeatTimerTask, heartbeatTick, TimeUnit.MILLISECONDS);\n    heartbeatTimer.newTimeout(reconnectTimerTask, heartbeatTimeoutTick, TimeUnit.MILLISECONDS);\n}\n</code></pre>\n<p>Dubbo 在 <code>startHeartbeatTimer</code> 方法中主要开启了两个定时器： <code>HeartbeatTimerTask</code>，<code>ReconnectTimerTask</code></p>\n<p>&lt;1&gt; <code>HeartbeatTimerTask</code> 主要用于定时发送心跳请求</p>\n<p>&lt;2&gt; <code>ReconnectTimerTask</code>  主要用于心跳失败之后处理重连，断连的逻辑</p>\n<p>至于方法中的其他代码，其实也是本文的重要分析内容，先容我卖个关子，后面再来看追溯。</p>\n<h4>3.3 定时任务一：发送心跳请求</h4>\n<p>详细解析下心跳检测定时任务的逻辑 <code>HeartbeatTimerTask#doTask</code>：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doTask</span><span class=\"hljs-params\">(Channel channel)</span> </span>{\n    Long lastRead = lastRead(channel);\n    Long lastWrite = lastWrite(channel);\n    <span class=\"hljs-keyword\">if</span> ((lastRead != <span class=\"hljs-keyword\">null</span> &amp;&amp; now() - lastRead &gt; heartbeat)\n        || (lastWrite != <span class=\"hljs-keyword\">null</span> &amp;&amp; now() - lastWrite &gt; heartbeat)) {\n            Request req = <span class=\"hljs-keyword\">new</span> Request();\n            req.setVersion(Version.getProtocolVersion());\n            req.setTwoWay(<span class=\"hljs-keyword\">true</span>);\n            req.setEvent(Request.HEARTBEAT_EVENT);\n            channel.send(req);\n        }\n    }\n}\n</code></pre>\n<p>前面已经介绍过，<strong>Dubbo 采取的是双向心跳设计</strong>，即服务端会向客户端发送心跳，客户端也会向服务端发送心跳，接收的一方更新 lastRead 字段，发送的一方更新 lastWrite 字段，超过心跳间隙的时间，便发送心跳请求给对端。这里的 lastRead/lastWrite 同样会被同一个通道上的普通调用更新，通过更新这两个字段，实现了只在连接空闲时才会真正发送空闲报文的机制，符合我们一开始科普的做法。</p>\n<blockquote>\n<p>注意：不仅仅心跳请求会更新 lastRead 和 lastWrite，普通请求也会。这对应了我们预备知识中的空闲检测机制。</p>\n</blockquote>\n<h4>3.4 定时任务二：处理重连和断连</h4>\n<p>继续研究下重连和断连定时器都实现了什么 <code>ReconnectTimerTask#doTask</code>。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doTask</span><span class=\"hljs-params\">(Channel channel)</span> </span>{\n    Long lastRead = lastRead(channel);\n    Long now = now();\n    <span class=\"hljs-keyword\">if</span> (lastRead != <span class=\"hljs-keyword\">null</span> &amp;&amp; now - lastRead &gt; heartbeatTimeout) {\n        <span class=\"hljs-keyword\">if</span> (channel <span class=\"hljs-keyword\">instanceof</span> Client) {\n            ((Client) channel).reconnect();\n        } <span class=\"hljs-keyword\">else</span> {\n            channel.close();\n        }\n    }\n}\n</code></pre>\n<p>第二个定时器则负责根据客户端、服务端类型来对连接做不同的处理，当超过设置的心跳总时间之后，客户端选择的是重新连接，服务端则是选择直接断开连接。这样的考虑是合理的，客户端调用是强依赖可用连接的，而服务端可以等待客户端重新建立连接。</p>\n<blockquote>\n<p>细心的朋友会发现，这个类被命名为 ReconnectTimerTask 是不太准确的，因为它处理的是重连和断连两个逻辑。</p>\n</blockquote>\n<h4>3.5 定时不精确的问题</h4>\n<p>在 Dubbo 的 issue 中曾经有人反馈过定时不精确的问题，我们来看看是怎么一回事。</p>\n<p>Dubbo 中默认的心跳周期是 60s，设想如下的时序：</p>\n<ul>\n<li>第 0 秒，心跳检测发现连接活跃</li>\n<li>第 1 秒，连接实际断开</li>\n<li>第 60 秒，心跳检测发现连接不活跃</li>\n</ul>\n<p>由于<strong>时间窗口的问题，死链不能够被及时检测出来，最坏情况为一个心跳周期</strong>。</p>\n<p>为了解决上述问题，我们再倒回去看一下上面的 <code>startHeartbeatTimer()</code> 方法</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">long</span> heartbeatTick = calculateLeastDuration(heartbeat); \n<span class=\"hljs-keyword\">long</span> heartbeatTimeoutTick = calculateLeastDuration(heartbeatTimeout);\n</code></pre>\n<p>其中 <code>calculateLeastDuration</code> 根据心跳时间和超时时间分别计算出了一个 tick 时间，实际上就是将两个变量除以了 3，使得他们的值缩小，并传入了 <code>HashedWheelTimer</code> 的第二个参数之中</p>\n<pre><code class=\"language-java\">heartbeatTimer.newTimeout(heartBeatTimerTask, heartbeatTick, TimeUnit.MILLISECONDS);\nheartbeatTimer.newTimeout(reconnectTimerTask, heartbeatTimeoutTick, TimeUnit.MILLISECONDS);\n</code></pre>\n<p>tick 的含义便是定时任务执行的频率。这样，通过减少检测间隔时间，增大了及时发现死链的概率，原先的最坏情况是 60s，如今变成了 20s。这个频率依旧可以加快，但需要考虑资源消耗的问题。</p>\n<blockquote>\n<p>定时不准确的问题出现在 Dubbo 的两个定时任务之中，所以都做了 tick 操作。事实上，所有的定时检测的逻辑都存在类似的问题。</p>\n</blockquote>\n<h4>3.6 Dubbo 心跳总结</h4>\n<p>Dubbo 对于建立的每一个连接，同时在客户端和服务端开启了 2 个定时器，一个用于定时发送心跳，一个用于定时重连、断连，执行的频率均为各自检测周期的 1/3。定时发送心跳的任务负责在连接空闲时，向对端发送心跳包。定时重连、断连的任务负责检测 lastRead 是否在超时周期内仍未被更新，如果判定为超时，客户端处理的逻辑是重连，服务端则采取断连的措施。</p>\n<p>先不急着判断这个方案好不好，再来看看改进方案是怎么设计的。</p>\n<h3>4 Dubbo 改进方案</h3>\n<p>实际上我们可以更优雅地实现心跳机制，本小节开始，我将介绍一个新的心跳机制。</p>\n<h4>4.1 IdleStateHandler 介绍</h4>\n<p>Netty 对空闲连接的检测提供了天然的支持，使用 <code>IdleStateHandler</code> 可以很方便的实现空闲检测逻辑。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">IdleStateHandler</span><span class=\"hljs-params\">(\n            <span class=\"hljs-keyword\">long</span> readerIdleTime, <span class=\"hljs-keyword\">long</span> writerIdleTime, <span class=\"hljs-keyword\">long</span> allIdleTime,\n            TimeUnit unit)</span> </span>{}\n</code></pre>\n<ul>\n<li>readerIdleTime：读超时时间</li>\n<li>writerIdleTime：写超时时间</li>\n<li>allIdleTime：所有类型的超时时间</li>\n</ul>\n<p><code>IdleStateHandler</code> 这个类会根据设置的超时参数，循环检测 channelRead 和 write 方法多久没有被调用。当在 pipeline 中加入 <code>IdleSateHandler</code> 之后，可以在此 pipeline 的任意 Handler 的 <code>userEventTriggered</code> 方法之中检测 <code>IdleStateEvent</code> 事件，</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">userEventTriggered</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object evt)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n    <span class=\"hljs-keyword\">if</span> (evt <span class=\"hljs-keyword\">instanceof</span> IdleStateEvent) {\n        <span class=\"hljs-comment\">//do something</span>\n    }\n    ctx.fireUserEventTriggered(evt);\n}\n</code></pre>\n<p>为什么需要介绍 <code>IdleStateHandler</code> 呢？其实提到它的空闲检测 + 定时的时候，大家应该能够想到了，这不天然是给心跳机制服务的吗？很多服务治理框架都选择了借助 <code>IdleStateHandler</code> 来实现心跳。</p>\n<blockquote>\n<p>IdleStateHandler 内部使用了 eventLoop.schedule(task) 的方式来实现定时任务，使用 eventLoop 线程的好处是还同时保证了<strong>线程安全</strong>，这里是一个小细节。</p>\n</blockquote>\n<h4>4.2 客户端和服务端配置</h4>\n<p>首先是将 <code>IdleStateHandler</code> 加入 pipeline 中。</p>\n<p><strong>客户端：</strong></p>\n<pre><code class=\"language-java\">bootstrap.handler(<span class=\"hljs-keyword\">new</span> ChannelInitializer&lt;NioSocketChannel&gt;() {\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">initChannel</span><span class=\"hljs-params\">(NioSocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        ch.pipeline().addLast(<span class=\"hljs-string\">\"clientIdleHandler\"</span>, <span class=\"hljs-keyword\">new</span> IdleStateHandler(<span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>));\n    }\n});\n</code></pre>\n<p><strong>服务端：</strong></p>\n<pre><code class=\"language-java\">serverBootstrap.childHandler(<span class=\"hljs-keyword\">new</span> ChannelInitializer&lt;NioSocketChannel&gt;() {\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">initChannel</span><span class=\"hljs-params\">(NioSocketChannel ch)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        ch.pipeline().addLast(<span class=\"hljs-string\">\"serverIdleHandler\"</span>,<span class=\"hljs-keyword\">new</span> IdleStateHandler(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">200</span>));\n    }\n}\n</code></pre>\n<p>客户端配置了 read 超时为 60s，服务端配置了 write/read 超时为 200s，先在此埋下两个伏笔：</p>\n<ol>\n<li>为什么客户端和服务端配置的超时时间不一致？</li>\n<li>为什么客户端检测的是读超时，而服务端检测的是读写超时？</li>\n</ol>\n<h4>4.3 空闲超时逻辑 — 客户端</h4>\n<p>对于空闲超时的处理逻辑，客户端和服务端是不同的。首先来看客户端</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">userEventTriggered</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object evt)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n    <span class=\"hljs-keyword\">if</span> (evt <span class=\"hljs-keyword\">instanceof</span> IdleStateEvent) {\n        <span class=\"hljs-comment\">// send heartbeat</span>\n        sendHeartBeat();\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">super</span>.userEventTriggered(ctx, evt);\n    }\n}\n</code></pre>\n<p>检测到空闲超时之后，采取的行为是向服务端发送心跳包，具体是如何发送，以及处理响应的呢？伪代码如下</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sendHeartBeat</span><span class=\"hljs-params\">()</span> </span>{\n    Invocation invocation = <span class=\"hljs-keyword\">new</span> Invocation();\n    invocation.setInvocationType(InvocationType.HEART_BEAT);\n    channel.writeAndFlush(invocation).addListener(<span class=\"hljs-keyword\">new</span> CallbackFuture() {\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">callback</span><span class=\"hljs-params\">(Future future)</span> </span>{\n            RPCResult result = future.get();\n            <span class=\"hljs-comment\">//超时 或者 写失败</span>\n            <span class=\"hljs-keyword\">if</span> (result.isError()) {\n                channel.addFailedHeartBeatTimes();\n                <span class=\"hljs-keyword\">if</span> (channel.getFailedHeartBeatTimes() &gt;= channel.getMaxHeartBeatFailedTimes()) {\n                    channel.reconnect();\n                }\n            } <span class=\"hljs-keyword\">else</span> {\n                channel.clearHeartBeatFailedTimes();\n            }\n        }\n    });\n}\n</code></pre>\n<p>行为并不复杂，构造一个心跳包发送到服务端，接受响应结果</p>\n<ul>\n<li>响应成功，清空请求失败标记</li>\n<li>响应失败，心跳失败标记+1，如果超过配置的失败次数，则重新连接</li>\n</ul>\n<blockquote>\n<p>不仅仅是心跳，普通请求返回成功响应时也会清空标记</p>\n</blockquote>\n<h4>4.4 空闲超时逻辑 — 服务端</h4>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">userEventTriggered</span><span class=\"hljs-params\">(ChannelHandlerContext ctx, Object evt)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n    <span class=\"hljs-keyword\">if</span> (evt <span class=\"hljs-keyword\">instanceof</span> IdleStateEvent) {\n        channel.close();\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">super</span>.userEventTriggered(ctx, evt);\n    }\n}\n</code></pre>\n<p>服务端处理空闲连接的方式非常简单粗暴，直接关闭连接。</p>\n<h4>4.5 改进方案心跳总结</h4>\n<ol>\n<li>\n<p>为什么客户端和服务端配置的超时时间不一致？</p>\n<p>因为客户端有重试逻辑，不断发送心跳失败 n 次之后，才认为是连接断开；而服务端是直接断开，留给服务端时间得长一点。60 * 3 &lt; 200 还说明了一个问题，双方都拥有断开连接的能力，但连接的创建是由客户端主动发起的，那么客户端也更有权利去主动断开连接。</p>\n</li>\n<li>\n<p>为什么客户端检测的是读超时，而服务端检测的是读写超时？</p>\n<p>这其实是一个心跳的共识了，仔细思考一下，定时逻辑是由客户端发起的，所以整个链路中不通的情况只有可能是：服务端接收，服务端发送，客户端接收。也就是说，只有客户端的 pong，服务端的 ping，pong 的检测是有意义的。</p>\n</li>\n</ol>\n<blockquote>\n<p>主动追求别人的是你，主动说分手的也是你。</p>\n</blockquote>\n<p>利用 <code>IdleStateHandler</code> 实现心跳机制可以说是十分优雅的，借助 Netty 提供的空闲检测机制，利用客户端维护单向心跳，在收到 3 次心跳失败响应之后，客户端断开连接，交由异步线程重连，本质还是表现为客户端重连。服务端在连接空闲较长时间后，主动断开连接，以避免无谓的资源浪费。</p>\n<h3>5 心跳设计方案对比</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">Dubbo 现有方案</th>\n<th style=\"text-align:center\">Dubbo 改进方案</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>主体设计</strong></td>\n<td style=\"text-align:center\">开启两个定时器</td>\n<td style=\"text-align:center\">借助 IdleStateHandler，底层使用 schedule</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>心跳方向</strong></td>\n<td style=\"text-align:center\">双向</td>\n<td style=\"text-align:center\">单向（客户端 -&gt; 服务端）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>心跳失败判定方式</strong></td>\n<td style=\"text-align:center\">心跳成功更新标记，借助定时器定时扫描标记，如果超过心跳超时周期未更新标记，认为心跳失败。</td>\n<td style=\"text-align:center\">通过判断心跳响应是否失败，超过失败次数，认为心跳失败</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>扩展性</strong></td>\n<td style=\"text-align:center\">Dubbo 存在 mina，grizzy 等其他通信层实现，自定义定时器很容易适配多种扩展</td>\n<td style=\"text-align:center\">多通信层各自实现心跳，不做心跳的抽象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>设计性</strong></td>\n<td style=\"text-align:center\">编码复杂度高，代码量大，方案复杂，不易维护</td>\n<td style=\"text-align:center\">编码量小，可维护性强</td>\n</tr>\n</tbody>\n</table>\n<p>私下请教过<strong>美团点评的长连接负责人：俞超（闪电侠）</strong>，美点使用的心跳方案和 Dubbo 改进方案几乎一致，可以说该方案是标准实现了。</p>\n<h3>6 Dubbo 实际改动点建议</h3>\n<p>鉴于 Dubbo 存在一些其他通信层的实现，所以可以保留现有的定时发送心跳的逻辑。</p>\n<ul>\n<li><strong>建议改动点一：</strong></li>\n</ul>\n<p>双向心跳的设计是不必要的，兼容现有的逻辑，可以让客户端在连接空闲时发送单向心跳，服务端定时检测连接可用性。定时时间尽量保证：客户端超时时间 * 3 ≈ 服务端超时时间</p>\n<ul>\n<li><strong>建议改动点二：</strong></li>\n</ul>\n<p>去除处理重连和断连的定时任务，Dubbo 可以判断心跳请求是否响应失败，可以借鉴改进方案的设计，在连接级别维护一个心跳失败次数的标记，任意响应成功，清除标记；连续心跳失败 n 次，客户端发起重连。这样可以减少一个不必要的定时器，任何轮询的方式，都是不优雅的。</p>\n<p>最后再聊聊可扩展性这个话题。其实我是建议把定时器交给更加底层的 Netty 去做，也就是完全使用 <code>IdleStateHandler</code> ，其他通信层组件各自实现自己的空闲检测逻辑，但是 Dubbo 中 mina，grizzy 的兼容问题囿住了我的拳脚，但试问一下，如今的 2019 年，又有多少人在使用 mina 和 grizzy？因为一些不太可能用的特性，而限制了主流用法的优化，这肯定不是什么好事。抽象，功能，可扩展性并不是越多越好，开源产品的人力资源是有限的，框架使用者的理解能力也是有限的，能解决大多数人问题的设计，才是好的设计。哎，谁让我不会 mina，grizzy，还懒得去学呢[摊手]。</p>\n",
  "link": "/zh-cn/blog/dubbo-heartbeat-design.html",
  "meta": {
    "title": "Dubbo 现有心跳方案总结以及改进建议",
    "keywords": "Dubbo, 心跳",
    "description": "一种心跳，两种设计"
  }
}