{
  "filename": "dubbo-integrate-with-hystrix.md",
  "__html": "<h1>Spring应用快速集成Dubbo + Hystrix</h1>\n<h2>背景</h2>\n<p>Hystrix 旨在通过控制那些访问远程系统、服务和第三方库的节点，从而对延迟和故障提供更强大的容错能力。Hystrix具备拥有回退机制和断路器功能的线程和信号隔离，请求缓存和请求打包，以及监控和配置等功能。</p>\n<p>Dubbo是Alibaba开源的，目前国内最流行的java rpc框架。</p>\n<p>本文介绍在spring应用里，怎么把Dubbo和Hystrix结合起来使用。</p>\n<ul>\n<li><a href=\"https://github.com/Netflix/Hystrix\">https://github.com/Netflix/Hystrix</a></li>\n<li><a href=\"https://github.com/apache/dubbo\">https://github.com/apache/dubbo</a></li>\n</ul>\n<h2>Spring Boot应用</h2>\n<p>Demo地址： <a href=\"https://github.com/dubbo/dubbo-samples/tree/master/dubbo-samples-spring-boot-hystrix\">https://github.com/dubbo/dubbo-samples/tree/master/dubbo-samples-spring-boot-hystrix</a></p>\n<h3>生成dubbo集成spring boot的应用</h3>\n<p>对于不熟悉dubbo 集成spring boot应用的同学，可以在这里直接生成dubbo + spring boot的工程： <a href=\"http://start.dubbo.io/\">http://start.dubbo.io/</a></p>\n<h3>配置spring-cloud-starter-netflix-hystrix</h3>\n<p>spring boot官方提供了对hystrix的集成，直接在pom.xml里加入依赖：</p>\n<pre><code>        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;\n            &lt;version&gt;1.4.4.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n</code></pre>\n<p>然后在Application类上增加<code>@EnableHystrix</code>来启用hystrix starter：</p>\n<pre><code>@SpringBootApplication\n@EnableHystrix\npublic class ProviderApplication {\n</code></pre>\n<h3>配置Provider端</h3>\n<p>在Dubbo的Provider上增加<code>@HystrixCommand</code>配置，这样子调用就会经过Hystrix代理。</p>\n<pre><code>@Service(version = &quot;1.0.0&quot;)\npublic class HelloServiceImpl implements HelloService {\n    @HystrixCommand(commandProperties = {\n                    @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;, value = &quot;10&quot;),\n                    @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;2000&quot;) })\n    @Override\n    public String sayHello(String name) {\n        // System.out.println(&quot;async provider received: &quot; + name);\n        // return &quot;annotation: hello, &quot; + name;\n        throw new RuntimeException(&quot;Exception to show hystrix enabled.&quot;);\n    }\n}\n</code></pre>\n<h3>配置Consumer端</h3>\n<p>对于Consumer端，则可以增加一层method调用，并在method上配置<code>@HystrixCommand</code>。当调用出错时，会走到<code>fallbackMethod = &quot;reliable&quot;</code>的调用里。</p>\n<pre><code>    @Reference(version = &quot;1.0.0&quot;)\n    private HelloService demoService;\n\n    @HystrixCommand(fallbackMethod = &quot;reliable&quot;)\n    public String doSayHello(String name) {\n        return demoService.sayHello(name);\n    }\n    public String reliable(String name) {\n        return &quot;hystrix fallback value&quot;;\n    }\n</code></pre>\n<p>通过上面的配置，很简单地就完成了Spring Boot里Dubbo + Hystrix的集成。</p>\n<h2>传统Spring Annotation应用</h2>\n<p>Demo地址： <a href=\"https://github.com/dubbo/dubbo-samples/tree/master/dubbo-samples-spring-hystrix\">https://github.com/dubbo/dubbo-samples/tree/master/dubbo-samples-spring-hystrix</a></p>\n<p>传统spring annotation应用的配置其实也很简单，和spring boot应用不同的是：</p>\n<ol>\n<li>显式配置Spring AOP支持：<code>@EnableAspectJAutoProxy</code></li>\n<li>显式通过<code>@Configuration</code>配置<code>HystrixCommandAspect</code> Bean。</li>\n</ol>\n<pre><code>    @Configuration\n    @EnableDubbo(scanBasePackages = &quot;com.alibaba.dubbo.samples.annotation.action&quot;)\n    @PropertySource(&quot;classpath:/spring/dubbo-consumer.properties&quot;)\n    @ComponentScan(value = {&quot;com.alibaba.dubbo.samples.annotation.action&quot;})\n    @EnableAspectJAutoProxy\n    static public class ConsumerConfiguration {\n\n        @Bean\n        public HystrixCommandAspect hystrixCommandAspect() {\n            return new HystrixCommandAspect();\n        }\n    }\n</code></pre>\n<h2>Hystrix集成Spring AOP原理</h2>\n<p>在上面的例子里可以看到，Hystrix对Spring的集成是通过Spring AOP来实现的。下面简单分析下实现。</p>\n<pre><code>@Aspect\npublic class HystrixCommandAspect {\n    @Pointcut(&quot;@annotation(com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand)&quot;)\n    public void hystrixCommandAnnotationPointcut() {\n    }\n    @Pointcut(&quot;@annotation(com.netflix.hystrix.contrib.javanica.annotation.HystrixCollapser)&quot;)\n    public void hystrixCollapserAnnotationPointcut() {\n    }\n\n    @Around(&quot;hystrixCommandAnnotationPointcut() || hystrixCollapserAnnotationPointcut()&quot;)\n    public Object methodsAnnotatedWithHystrixCommand(final ProceedingJoinPoint joinPoint) throws Throwable {\n        Method method = getMethodFromTarget(joinPoint);\n        Validate.notNull(method, &quot;failed to get method from joinPoint: %s&quot;, joinPoint);\n        if (method.isAnnotationPresent(HystrixCommand.class) &amp;&amp; method.isAnnotationPresent(HystrixCollapser.class)) {\n            throw new IllegalStateException(&quot;method cannot be annotated with HystrixCommand and HystrixCollapser &quot; +\n                    &quot;annotations at the same time&quot;);\n        }\n        MetaHolderFactory metaHolderFactory = META_HOLDER_FACTORY_MAP.get(HystrixPointcutType.of(method));\n        MetaHolder metaHolder = metaHolderFactory.create(joinPoint);\n        HystrixInvokable invokable = HystrixCommandFactory.getInstance().create(metaHolder);\n        ExecutionType executionType = metaHolder.isCollapserAnnotationPresent() ?\n                metaHolder.getCollapserExecutionType() : metaHolder.getExecutionType();\n\n        Object result;\n        try {\n            if (!metaHolder.isObservable()) {\n                result = CommandExecutor.execute(invokable, executionType, metaHolder);\n            } else {\n                result = executeObservable(invokable, executionType, metaHolder);\n            }\n        } catch (HystrixBadRequestException e) {\n            throw e.getCause() != null ? e.getCause() : e;\n        } catch (HystrixRuntimeException e) {\n            throw hystrixRuntimeExceptionToThrowable(metaHolder, e);\n        }\n        return result;\n    }\n</code></pre>\n<ol>\n<li><code>HystrixCommandAspect</code>里定义了两个注解的AspectJ Pointcut：<code>@HystrixCommand</code>, <code>@HystrixCollapser</code>。所有带这两个注解的spring bean都会经过AOP处理</li>\n<li>在<code>@Around</code> AOP处理函数里，可以看到Hystrix会创建出<code>HystrixInvokable</code>，再通过<code>CommandExecutor</code>来执行</li>\n</ol>\n<h2>spring-cloud-starter-netflix-hystrix的代码分析</h2>\n<ol>\n<li>\n<p><code>@EnableHystrix</code> 引入了<code>@EnableCircuitBreaker</code>，<code>@EnableCircuitBreaker</code>引入了<code>EnableCircuitBreakerImportSelector</code></p>\n<pre><code>@EnableCircuitBreaker\npublic @interface EnableHystrix {\n}\n\n@Import(EnableCircuitBreakerImportSelector.class)\npublic @interface EnableCircuitBreaker {\n}\n</code></pre>\n</li>\n<li>\n<p><code>EnableCircuitBreakerImportSelector</code>继承了<code>SpringFactoryImportSelector&lt;EnableCircuitBreaker&gt;</code>，使spring加载<code>META-INF/spring.factories</code>里的<code>EnableCircuitBreaker</code>声明的配置</p>\n<p>在<code>META-INF/spring.factories</code>里可以找到下面的配置，也就是引入了<code>HystrixCircuitBreakerConfiguration</code>。</p>\n<pre><code>org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker=\\\norg.springframework.cloud.netflix.hystrix.HystrixCircuitBreakerConfiguration\n</code></pre>\n</li>\n<li>\n<p>在<code>HystrixCircuitBreakerConfiguration</code>里可以发现创建了<code>HystrixCommandAspect</code></p>\n<pre><code>@Configuration\npublic class HystrixCircuitBreakerConfiguration {\n\n    @Bean\n    public HystrixCommandAspect hystrixCommandAspect() {\n        return new HystrixCommandAspect();\n    }\n</code></pre>\n</li>\n</ol>\n<p>可见<code>spring-cloud-starter-netflix-hystrix</code>实际上也是创建了<code>HystrixCommandAspect</code>来集成Hystrix。</p>\n<p>另外<code>spring-cloud-starter-netflix-hystrix</code>里还有metrics, health, dashboard等集成。</p>\n<h2>总结</h2>\n<ul>\n<li>对于dubbo provider的<code>@Service</code>是一个spring bean，直接在上面配置<code>@HystrixCommand</code>即可</li>\n<li>对于dubbo consumer的<code>@Reference</code>，可以通过加一层简单的spring method包装，配置<code>@HystrixCommand</code>即可</li>\n<li>Hystrix本身提供<code>HystrixCommandAspect</code>来集成Spring AOP，配置了<code>@HystrixCommand</code>和<code>@HystrixCollapser</code>的spring method都会被Hystrix处理</li>\n</ul>\n<h2>链接</h2>\n<ul>\n<li><a href=\"https://github.com/Netflix/Hystrix\">https://github.com/Netflix/Hystrix</a></li>\n<li><a href=\"https://github.com/apache/dubbo\">https://github.com/apache/dubbo</a></li>\n<li><a href=\"http://start.dubbo.io/\">http://start.dubbo.io/</a></li>\n<li><a href=\"https://cloud.spring.io/spring-cloud-netflix/single/spring-cloud-netflix.html#_circuit_breaker_hystrix_clients\">https://cloud.spring.io/spring-cloud-netflix/single/spring-cloud-netflix.html#_circuit_breaker_hystrix_clients</a></li>\n</ul>\n",
  "link": "/zh-cn/blog/dubbo-integrate-with-hystrix.html",
  "meta": {
    "title": "Spring应用快速集成Dubbo + Hystrix",
    "keywords": "Dubbo, Spring, Hystrix",
    "description": "本文介绍在spring应用里，怎么把Dubbo和Hystrix结合起来使用。"
  }
}