{
  "filename": "dubbo-meet-arthas.md",
  "__html": "<h1>当Dubbo遇上Arthas：排查问题的实践</h1>\n<p>Apache Dubbo是Alibaba开源的高性能RPC框架，在国内有非常多的用户。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/apache/dubbo\">https://github.com/apache/dubbo</a></li>\n<li>文档：<a href=\"http://dubbo.apache.org/zh-cn/\">http://dubbo.apache.org/zh-cn/</a></li>\n</ul>\n<p>Arthas是Alibaba开源的应用诊断利器，9月份开源以来，Github Star数三个月超过6000。</p>\n<ul>\n<li>Github: <a href=\"https://github.com/alibaba/arthas\">https://github.com/alibaba/arthas</a></li>\n<li>文档：<a href=\"https://alibaba.github.io/arthas/\">https://alibaba.github.io/arthas/</a></li>\n<li>Arthas开源交流QQ群: 916328269</li>\n<li>Arthas开源交流钉钉群: 21965291</li>\n</ul>\n<p>当Dubbo遇上Arthas，会碰撞出什么样的火花呢？下面来分享Arthas排查Dubbo问题的一些经验。</p>\n<h3>dubbo-arthas-demo</h3>\n<p>下面的排查分享基于这个<code>dubbo-arthas-demo</code>，非常简单的一个应用，浏览器请求从Spring MVC到Dubbo Client，再发送到Dubbo Server。</p>\n<p>Demo里有两个spring boot应用，可以先启动<code>server-demo</code>，再启动<code>client-demo</code>。</p>\n<ul>\n<li><a href=\"https://github.com/hengyunabc/dubbo-arthas-demo\">https://github.com/hengyunabc/dubbo-arthas-demo</a></li>\n</ul>\n<pre><code>  /user/{id}    -&gt;   UserService    -&gt;   UserServiceImpl \n   Browser           Dubbo Client          Dubbo Server\n</code></pre>\n<p>Client端：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@RestController</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserController</span> </span>{\n\n\t<span class=\"hljs-meta\">@Reference</span>(version = <span class=\"hljs-string\">\"1.0.0\"</span>)\n\t<span class=\"hljs-keyword\">private</span> UserService userService;\n\n\t<span class=\"hljs-meta\">@GetMapping</span>(<span class=\"hljs-string\">\"/user/{id}\"</span>)\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title\">findUserById</span><span class=\"hljs-params\">(@PathVariable Integer id)</span> </span>{\n\t\t<span class=\"hljs-keyword\">return</span> userService.findUser(id);\n\t}\n</code></pre>\n<p>Server端：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Service</span>(version = <span class=\"hljs-string\">\"1.0.0\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">UserService</span> </span>{\n\t<span class=\"hljs-meta\">@Override</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title\">findUser</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> id)</span> </span>{\n\t\t<span class=\"hljs-keyword\">if</span> (id &lt; <span class=\"hljs-number\">1</span>) {\n\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"user id &lt; 1, id: \"</span> + id);\n\t\t}\n\t\t<span class=\"hljs-keyword\">for</span> (User user : users) {\n\t\t\t<span class=\"hljs-keyword\">if</span> (user.getId() == id) {\n\t\t\t\t<span class=\"hljs-keyword\">return</span> user;\n\t\t\t}\n\t\t}\n\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RuntimeException(<span class=\"hljs-string\">\"Can not find user, id: \"</span> + id);\n\t}\n</code></pre>\n<h3>Arthas快速开始</h3>\n<ul>\n<li><a href=\"https://alibaba.github.io/arthas/install-detail.html\">https://alibaba.github.io/arthas/install-detail.html</a></li>\n</ul>\n<pre><code class=\"language-bash\">$ wget https://alibaba.github.io/arthas/arthas-boot.jar\n$ java -jar arthas-boot.jar\n</code></pre>\n<p>启动后，会列出所有的java进程，选择1，然后回车，就会连接上<code>ServerDemoApplication</code></p>\n<pre><code class=\"language-bash\">$ java -jar arthas-boot.jar\n* [1]: 43523 ServerDemoApplication\n  [2]: 22342\n  [3]: 44108 ClientDemoApplication\n1\n[INFO] arthas home: /Users/hengyunabc/.arthas/lib/3.0.5/arthas\n[INFO] Try to attach process 43523\n[INFO] Attach process 43523 success.\n[INFO] arthas-client connect 127.0.0.1 3658\n  ,---.  ,------. ,--------.,--.  ,--.  ,---.   ,---.\n /  O  \\ |  .--. <span class=\"hljs-string\">''</span>--.  .--<span class=\"hljs-string\">'|  '</span>--<span class=\"hljs-string\">'  | /  O  \\ '</span>   .-<span class=\"hljs-string\">'\n|  .-.  ||  '</span>--<span class=\"hljs-string\">'.'</span>   |  |   |  .--.  ||  .-.  |`.  `-.\n|  | |  ||  |\\  \\    |  |   |  |  |  ||  | |  |.-<span class=\"hljs-string\">'    |\n`--'</span> `--<span class=\"hljs-string\">'`--'</span> <span class=\"hljs-string\">'--'</span>   `--<span class=\"hljs-string\">'   `--'</span>  `--<span class=\"hljs-string\">'`--'</span> `--<span class=\"hljs-string\">'`-----'</span>\n\nwiki: https://alibaba.github.io/arthas\nversion: 3.0.5\npid: 43523\ntime: 2018-12-05 16:23:52\n\n$\n</code></pre>\n<h3>Dubbo线上服务抛出异常，怎么获取调用参数？</h3>\n<ul>\n<li><a href=\"https://alibaba.github.io/arthas/watch.html\">https://alibaba.github.io/arthas/watch.html</a></li>\n</ul>\n<p>当线上服务抛出异常时，最着急的是什么参数导致了抛异常？</p>\n<p>在demo里，访问 <a href=\"http://localhost:8080/user/0\">http://localhost:8080/user/0</a> ，<code>UserServiceImpl</code>就会抛出一个异常，因为user id不合法。</p>\n<p>在Arthas里执行 <code>watch com.example.UserService * -e -x 2 '{params,throwExp}'</code> ，然后再次访问，就可以看到watch命令把参数和异常都打印出来了。</p>\n<pre><code>$ watch com.example.UserService * -e -x 2 '{params,throwExp}'\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:4) cost in 230 ms.\nts=2018-12-05 16:26:44; [cost=3.905523ms] result=@ArrayList[\n    @Object[][\n        @Integer[0],\n    ],\n    java.lang.IllegalArgumentException: user id &lt; 1, id: 0\n\tat com.example.UserServiceImpl.findUser(UserServiceImpl.java:24)\n\tat com.alibaba.dubbo.common.bytecode.Wrapper1.invokeMethod(Wrapper1.java)\n\tat com.alibaba.dubbo.rpc.proxy.javassist.JavassistProxyFactory$1.doInvoke(JavassistProxyFactory.java:45)\n\tat com.alibaba.dubbo.rpc.proxy.AbstractProxyInvoker.invoke(AbstractProxyInvoker.java:71)\n\tat com.alibaba.dubbo.config.invoker.DelegateProviderMetaDataInvoker.invoke(DelegateProviderMetaDataInvoker.java:48)\n\tat com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:52)\n\tat com.alibaba.dubbo.rpc.filter.ExceptionFilter.invoke(ExceptionFilter.java:61)\n</code></pre>\n<h3>怎样线上调试Dubbo服务代码?</h3>\n<ul>\n<li><a href=\"https://alibaba.github.io/arthas/redefine.html\">https://alibaba.github.io/arthas/redefine.html</a></li>\n</ul>\n<p>在本地开发时，可能会用到热部署工具，直接改代码，不需要重启应用。但是在线上环境，有没有办法直接动态调试代码？比如增加日志。</p>\n<p>在Arthas里，可以通过<code>redefine</code>命令来达到线上不重启，动态更新代码的效果。</p>\n<p>比如我们修改下<code>UserServiceImpl</code>，用<code>System.out</code>打印出具体的<code>User</code>对象来：</p>\n<pre><code class=\"language-java\">\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title\">findUser</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> id)</span> </span>{\n\t\t<span class=\"hljs-keyword\">if</span> (id &lt; <span class=\"hljs-number\">1</span>) {\n\t\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"user id &lt; 1, id: \"</span> + id);\n\t\t}\n\t\t<span class=\"hljs-keyword\">for</span> (User user : users) {\n\t\t\t<span class=\"hljs-keyword\">if</span> (user.getId() == id) {\n\t\t\t\tSystem.out.println(user);\n\t\t\t\t<span class=\"hljs-keyword\">return</span> user;\n\t\t\t}\n\t\t}\n\t\t<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RuntimeException(<span class=\"hljs-string\">\"Can not find user, id: \"</span> + id);\n\t}\n</code></pre>\n<p>本地编绎后，把<code>server-demo/target/classes/com/example/UserServiceImpl.class</code>传到线上服务器，然后用<code>redefine</code>命令来更新代码：</p>\n<pre><code>$ redefine -p /tmp/UserServiceImpl.class\nredefine success, size: 1\n</code></pre>\n<p>这样子更新成功之后，访问 <a href=\"http://localhost:8080/user/1\">http://localhost:8080/user/1</a> ，在<code>ServerDemoApplication</code>的控制台里就可以看到打印出了user信息。</p>\n<h3>怎样动态修改Dubbo的logger级别?</h3>\n<ul>\n<li><a href=\"https://alibaba.github.io/arthas/ognl.html\">https://alibaba.github.io/arthas/ognl.html</a></li>\n<li><a href=\"https://alibaba.github.io/arthas/sc.html\">https://alibaba.github.io/arthas/sc.html</a></li>\n<li><a href=\"https://commons.apache.org/proper/commons-ognl/language-guide.html\">https://commons.apache.org/proper/commons-ognl/language-guide.html</a></li>\n</ul>\n<p>在排查问题时，需要查看到更多的信息，如果可以把logger级别修改为<code>DEBUG</code>，就非常有帮助。</p>\n<p><code>ognl</code>是apache开源的一个轻量级表达式引擎。下面通过Arthas里的<code>ognl</code>命令来动态修改logger级别。</p>\n<p>首先获取Dubbo里<code>TraceFilter</code>的一个logger对象，看下它的实现类，可以发现是log4j。</p>\n<pre><code class=\"language-bash\">$ ognl <span class=\"hljs-string\">'@com.alibaba.dubbo.rpc.protocol.dubbo.filter.TraceFilter@logger.logger'</span>\n@Log4jLogger[\n    FQCN=@String[com.alibaba.dubbo.common.logger.support.FailsafeLogger],\n    logger=@Logger[org.apache.log4j.Logger@2f19bdcf],\n]\n</code></pre>\n<p>再用<code>sc</code>命令来查看具体从哪个jar包里加载的：</p>\n<pre><code class=\"language-bash\">$ sc -d org.apache.log4j.Logger\n class-info        org.apache.log4j.Logger\n code-source       /Users/hengyunabc/.m2/repository/org/slf4j/log4j-over-slf4j/1.7.25/log4j-over-slf4j-1.7.25.jar\n name              org.apache.log4j.Logger\n isInterface       <span class=\"hljs-literal\">false</span>\n isAnnotation      <span class=\"hljs-literal\">false</span>\n isEnum            <span class=\"hljs-literal\">false</span>\n isAnonymousClass  <span class=\"hljs-literal\">false</span>\n isArray           <span class=\"hljs-literal\">false</span>\n isLocalClass      <span class=\"hljs-literal\">false</span>\n isMemberClass     <span class=\"hljs-literal\">false</span>\n isPrimitive       <span class=\"hljs-literal\">false</span>\n isSynthetic       <span class=\"hljs-literal\">false</span>\n simple-name       Logger\n modifier          public\n annotation\n interfaces\n super-class       +-org.apache.log4j.Category\n                     +-java.lang.Object\n class-loader      +-sun.misc.Launcher<span class=\"hljs-variable\">$AppClassLoader</span>@5c647e05\n                     +-sun.misc.Launcher<span class=\"hljs-variable\">$ExtClassLoader</span>@59878d35\n classLoaderHash   5c647e05\n\nAffect(row-cnt:1) cost <span class=\"hljs-keyword\">in</span> 126 ms.\n</code></pre>\n<p><strong>可以看到log4j是通过slf4j代理的。</strong></p>\n<p>那么通过<code>org.slf4j.LoggerFactory</code>获取<code>root</code> logger，再修改它的level：</p>\n<pre><code>$ ognl '@org.slf4j.LoggerFactory@getLogger(&quot;root&quot;).setLevel(@ch.qos.logback.classic.Level@DEBUG)'\nnull\n$ ognl '@org.slf4j.LoggerFactory@getLogger(&quot;root&quot;).getLevel().toString()'\n@String[DEBUG]\n</code></pre>\n<p>可以看到修改之后，<code>root</code> logger的level变为<code>DEBUG</code>。</p>\n<h3>怎样减少测试小姐姐重复发请求的麻烦?</h3>\n<ul>\n<li><a href=\"https://alibaba.github.io/arthas/tt.html\">https://alibaba.github.io/arthas/tt.html</a></li>\n</ul>\n<p>在平时开发时，可能需要测试小姐姐发请求过来联调，但是我们在debug时，可能不小心直接跳过去了。这样子就尴尬了，需要测试小姐姐再发请求过来。</p>\n<p>Arthas里提供了<code>tt</code>命令，可以减少这种麻烦，可以直接重放请求。</p>\n<pre><code class=\"language-bash\">$ tt -t com.example.UserServiceImpl findUser\nPress Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost <span class=\"hljs-keyword\">in</span> 145 ms.\n INDEX      TIMESTAMP              COST(ms)      IS-RET     IS-EXP    OBJECT       CLASS              METHOD\n----------------------------------------------------------------------------------------------------------------\n 1000       2018-12-05 17:47:52    1.56523       <span class=\"hljs-literal\">true</span>       <span class=\"hljs-literal\">false</span>     0x3233483    UserServiceImpl    findUser\n 1001       2018-12-05 17:48:03    0.286176      <span class=\"hljs-literal\">false</span>      <span class=\"hljs-literal\">true</span>      0x3233483    UserServiceImpl    findUser\n 1002       2018-12-05 17:48:11    90.324335     <span class=\"hljs-literal\">true</span>       <span class=\"hljs-literal\">false</span>     0x3233483    UserServiceImpl    findUser\n</code></pre>\n<p>上面的<code>tt -t</code>命令捕获到了3个请求。然后通过<code>tt --play</code>可以重放请求：</p>\n<pre><code class=\"language-bash\">$ tt --play -i 1000\n RE-INDEX       1000\n GMT-REPLAY     2018-12-05 17:55:50\n OBJECT         0x3233483\n CLASS          com.example.UserServiceImpl\n METHOD         findUser\n PARAMETERS[0]  @Integer[1]\n IS-RETURN      <span class=\"hljs-literal\">true</span>\n IS-EXCEPTION   <span class=\"hljs-literal\">false</span>\n RETURN-OBJ     @User[\n                    id=@Integer[1],\n                    name=@String[Deanna Borer],\n                ]\nTime fragment[1000] successfully replayed.\nAffect(row-cnt:1) cost <span class=\"hljs-keyword\">in</span> 4 ms.\n</code></pre>\n<h3>Dubbo运行时有哪些Filter? 耗时是多少?</h3>\n<ul>\n<li><a href=\"https://alibaba.github.io/arthas/trace.html\">https://alibaba.github.io/arthas/trace.html</a></li>\n</ul>\n<p>Dubbo运行时会加载很多的Filter，那么一个请求会经过哪些Filter处理，Filter里的耗时又是多少呢？</p>\n<p>通过Arthas的<code>trace</code>命令，可以很方便地知道Filter的信息，可以看到详细的调用栈和耗时。</p>\n<pre><code class=\"language-bash\">$ trace com.alibaba.dubbo.rpc.Filter *\nPress Ctrl+C to abort.\nAffect(class-cnt:19 , method-cnt:59) cost <span class=\"hljs-keyword\">in</span> 1441 ms.\n`---ts=2018-12-05 19:07:26;thread_name=DubboServerHandler-30.5.125.152:20880-thread-10;id=3e;is_daemon=<span class=\"hljs-literal\">true</span>;priority=5;TCCL=sun.misc.Launcher<span class=\"hljs-variable\">$AppClassLoader</span>@5c647e05\n    `---[8.435844ms] com.alibaba.dubbo.rpc.filter.EchoFilter:invoke()\n        +---[0.124572ms] com.alibaba.dubbo.rpc.Invocation:getMethodName()\n        +---[0.065123ms] java.lang.String:equals()\n        `---[7.762928ms] com.alibaba.dubbo.rpc.Invoker:invoke()\n            `---[7.494124ms] com.alibaba.dubbo.rpc.filter.ClassLoaderFilter:invoke()\n                +---[min=0.00355ms,max=0.049922ms,total=0.057637ms,count=3] java.lang.Thread:currentThread()\n                +---[0.0126ms] java.lang.Thread:getContextClassLoader()\n                +---[0.02188ms] com.alibaba.dubbo.rpc.Invoker:getInterface()\n                +---[0.004115ms] java.lang.Class:getClassLoader()\n                +---[min=0.003906ms,max=0.014058ms,total=0.017964ms,count=2] java.lang.Thread:setContextClassLoader()\n                `---[7.033486ms] com.alibaba.dubbo.rpc.Invoker:invoke()\n                    `---[6.869488ms] com.alibaba.dubbo.rpc.filter.GenericFilter:invoke()\n                        +---[0.01481ms] com.alibaba.dubbo.rpc.Invocation:getMethodName()\n</code></pre>\n<h3>Dubbo动态代理是怎样实现的?</h3>\n<ul>\n<li><a href=\"https://alibaba.github.io/arthas/jad.html\">https://alibaba.github.io/arthas/jad.html</a></li>\n<li>com.alibaba.dubbo.common.bytecode.Wrapper</li>\n</ul>\n<p>通过Arthas的<code>jad</code>命令，可以看到Dubbo通过javaassist动态生成的Wrappr类的代码：</p>\n<pre><code class=\"language-java\">$ jad com.alibaba.dubbo.common.bytecode.Wrapper1\n\nClassLoader:\n+-sun.misc.Launcher$AppClassLoader@<span class=\"hljs-number\">5</span>c647e05\n  +-sun.misc.Launcher$ExtClassLoader@<span class=\"hljs-number\">59878</span>d35\n\nLocation:\n/Users/hengyunabc/.m2/repository/com/alibaba/dubbo/<span class=\"hljs-number\">2.5</span>.10/dubbo-<span class=\"hljs-number\">2.5</span>.10.jar\n\n<span class=\"hljs-keyword\">package</span> com.alibaba.dubbo.common.bytecode;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Wrapper1</span>\n<span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Wrapper</span>\n<span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">ClassGenerator</span>.<span class=\"hljs-title\">DC</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">invokeMethod</span><span class=\"hljs-params\">(Object object, String string, Class[] arrclass, Object[] arrobject)</span> <span class=\"hljs-keyword\">throws</span> InvocationTargetException </span>{\n        UserServiceImpl userServiceImpl;\n        <span class=\"hljs-keyword\">try</span> {\n            userServiceImpl = (UserServiceImpl)object;\n        }\n        <span class=\"hljs-keyword\">catch</span> (Throwable throwable) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(throwable);\n        }\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">\"findUser\"</span>.equals(string) &amp;&amp; arrclass.length == <span class=\"hljs-number\">1</span>) {\n                <span class=\"hljs-keyword\">return</span> userServiceImpl.findUser(((Number)arrobject[<span class=\"hljs-number\">0</span>]).intValue());\n            }\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">\"listUsers\"</span>.equals(string) &amp;&amp; arrclass.length == <span class=\"hljs-number\">0</span>) {\n                <span class=\"hljs-keyword\">return</span> userServiceImpl.listUsers();\n            }\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">\"findUserByName\"</span>.equals(string) &amp;&amp; arrclass.length == <span class=\"hljs-number\">1</span>) {\n                <span class=\"hljs-keyword\">return</span> userServiceImpl.findUserByName((String)arrobject[<span class=\"hljs-number\">0</span>]);\n            }\n        }\n</code></pre>\n<h3>获取Spring context</h3>\n<p>除了上面介绍的一些排查技巧，下面分享一个获取Spring Context，然后“为所欲为”的例子。</p>\n<p>在Dubbo里有一个扩展<code>com.alibaba.dubbo.config.spring.extension.SpringExtensionFactory</code>，把Spring Context保存到了里面。\n因此，我们可以通过<code>ognl</code>命令获取到。</p>\n<pre><code class=\"language-bash\">$ ognl <span class=\"hljs-string\">'#context=@com.alibaba.dubbo.config.spring.extension.SpringExtensionFactory@contexts.iterator.next, #context.getBean(\"userServiceImpl\").findUser(1)'</span>\n@User[\n    id=@Integer[1],\n    name=@String[Deanna Borer],\n]\n</code></pre>\n<ul>\n<li><code>SpringExtensionFactory@contexts.iterator.next</code> 获取到<code>SpringExtensionFactory</code>里保存的spring context对象</li>\n<li><code>#context.getBean(&quot;userServiceImpl&quot;).findUser(1)</code> 获取到<code>userServiceImpl</code>再执行一次调用</li>\n</ul>\n<p>只要充分发挥想像力，组合Arthas里的各种命令，可以发挥出神奇的效果。</p>\n<h2>总结</h2>\n<p>本篇文章来自杭州Dubbo Meetup的分享《当DUBBO遇上Arthas - 排查问题的实践》，希望对大家线上排查Dubbo问题有帮助。</p>\n<p>分享的PDF可以在 <a href=\"https://github.com/alibaba/arthas/issues/327\">https://github.com/alibaba/arthas/issues/327</a> 里下载。</p>\n",
  "link": "/zh-cn/blog/dubbo-meet-arthas.html",
  "meta": {
    "title": "当Dubbo遇上Arthas：排查问题的实践",
    "keywords": "Dubbo, Arthas",
    "description": "使用Alibaba开源的应用诊断利器Arthas来排查Dubbo应用的问题。"
  }
}
