{
  "filename": "dubbo-new-async.md",
  "__html": "<h1>如何基于Dubbo实现全异步调用链</h1>\n<p>基于Dubbo实现全异步编程，是在2.7.0版本中对现有异步方式增强后新引入的功能。本文先是回顾2.6.x及之前版本对异步的支持情况及存在的问题，引出了2.7.0版本基于CompletableFuture做了哪些针对性的增强，通过几个示例详细阐述了增强后的异步编程的使用方式，最后总结了引入异步模式带来的新问题及Dubbo的解决方法。通过阅读这篇文章，可以很容易的基于Dubbo2.7.0+版本实现一个全异步的远程服务调用链路。</p>\n<p>从3.0.0版本开始，Dubbo框架提供了对Reactive编程范式的支持，除了编程接口之外，在跨进程的RPC通信中引入了Reactive的语义。如果你所在的环境需要使用Reactive编程范式，或者你的RPC调用需要支持流式传输，Reactive应该会给你带来帮助，具体请参考发布在阿里巴巴中间件公众号上的<a href=\"\">响应式编程支持</a>相关文章。</p>\n<blockquote>\n<p>注意，你可能并不是总需要Reactive的语义，尤其是在RPC的场景，CompletableFuture本身也能带给你Reactive模式的编程模型，在选择Reactive（RxJava、Reactor之类）而不是理解及使用成本更低的CompletableFuture前，请尝试关注以下问题：</p>\n<ol>\n<li>你是请求/响应是一次性传输的还是流式传输的，一个明显特征是你定义的数据类型是 <code>List&lt;String&gt;</code> 还是 <code>Stream&lt;String&gt;</code></li>\n<li>你的RPC请求有没有要求是Cold，即在subscribe后触发，因为CompletableFuture总是hot的</li>\n<li>你依赖的编程上下文中是否已经在大量使用Reactive的编程接口</li>\n<li>你是否需要Rx框架提供的更丰富的Operator，而这点和1又是密切相关的</li>\n</ol>\n</blockquote>\n<h2>2.6.x版本之前的异步方式</h2>\n<p>在2.6.x及之前的版本提供了一定的异步编程能力，包括Consumer端<a href=\"http://dubbo.apache.org/zh-cn/docs/user/demos/async-call.html\">异步调用</a>、<a href=\"http://dubbo.apache.org/zh-cn/docs/user/demos/callback-parameter.html\">参数回调</a>、<a href=\"http://dubbo.apache.org/zh-cn/docs/user/demos/events-notify.html\">事件通知</a>等，在上面的文档链接中有关于使用方式的简单介绍和Demo。</p>\n<p>关于参数回调，其本质上是一种服务端的数据推送能力，这是终端应用很常见的一种需求，关于这部分的重构计划，不在本文讨论范围。</p>\n<p>但当前的异步方式存在以下问题：</p>\n<ul>\n<li>Future获取方式不够直接</li>\n<li>Future接口无法实现自动回调，而自定义ResponseFuture虽支持回调但支持的异步场景有限，如不支持Future间的相互协调或组合等</li>\n<li>不支持Provider端异步</li>\n</ul>\n<p>以Consumer端异步使用方式为例：</p>\n<ol>\n<li>定义一个普通的同步接口并声明支持异步调用</li>\n</ol>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">FooService</span> </span>{\n    <span class=\"hljs-function\">String <span class=\"hljs-title\">findFoo</span><span class=\"hljs-params\">(String name)</span></span>;\n}\n</code></pre>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:reference</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"fooService\"</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"com.alibaba.foo.FooService\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:method</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"findFoo\"</span> <span class=\"hljs-attr\">async</span>=<span class=\"hljs-string\">\"true\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dubbo:reference</span>&gt;</span>\n</code></pre>\n<ol start=\"2\">\n<li>通过RpcContext获取Future</li>\n</ol>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 此调用会立即返回null</span>\nfooService.findFoo(fooId);\n<span class=\"hljs-comment\">// 拿到调用的Future引用，当结果返回后，会被通知和设置到此Future</span>\nFuture&lt;Foo&gt; fooFuture = RpcContext.getContext().getFuture();\nfooFuture.get();\n</code></pre>\n<p>或</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 此调用会立即返回null</span>\nfooService.findFoo(fooId);\n<span class=\"hljs-comment\">// 拿到Dubbo内置的ResponseFuture并设置回调</span>\nResponseFuture future = ((FutureAdapter)RpcContext.getContext().getFuture()).getFuture();\nfuture.setCallback(<span class=\"hljs-keyword\">new</span> ResponseCallback() {\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">done</span><span class=\"hljs-params\">(Object response)</span> </span>{\n        System.out.print(response);\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">caught</span><span class=\"hljs-params\">(Throwable exception)</span> </span>{\n        exception.printStackTrace();\n    }\n});\n</code></pre>\n<p>从这个简单的示例我们可以体会到一些使用中的不便之处：</p>\n<ol>\n<li>findFoo的同步接口，不能直接返回代表异步结果的Future，通过RpcContext进一步获取。</li>\n<li>Future只支持阻塞式的get()接口获取结果。</li>\n<li>通过获取内置的ResponseFuture接口，可以设置回调。但获取ResponseFuture的API使用不便，且仅支持设置回调其他异步场景均不支持，如多个Future协同工作的场景等。</li>\n</ol>\n<h2>2.7.0基于CompletableFuture的增强</h2>\n<p>了解Java中Future演进历史的同学应该知道，Dubbo 2.6.x及之前版本中使用的Future是在java 5中引入的，所以存在以上一些功能设计上的问题，而在java 8中引入的CompletableFuture进一步丰富了Future接口，很好的解决了这些问题。</p>\n<p>Dubbo在2.7.0版本已经升级了对Java 8的支持，同时基于CompletableFuture对当前的异步功能进行了增强。</p>\n<ol>\n<li>\n<p>支持直接定义返回CompletableFuture的服务接口。通过这种类型的接口，我们可以更自然的实现Consumer、Provider端的异步编程。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">AsyncService</span> </span>{\n    <span class=\"hljs-function\">CompletableFuture&lt;String&gt; <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(String name)</span></span>;\n}\n</code></pre>\n</li>\n<li>\n<p>如果你不想将接口的返回值定义为Future类型，或者存在定义好的同步类型接口，则可以选择重载原始方法并为新方法定义CompletableFuture类型返回值。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">GreetingsService</span> </span>{\n    <span class=\"hljs-function\">String <span class=\"hljs-title\">sayHi</span><span class=\"hljs-params\">(String name)</span></span>;\n}\n</code></pre>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">GreetingsService</span> </span>{\n    <span class=\"hljs-function\">String <span class=\"hljs-title\">sayHi</span><span class=\"hljs-params\">(String name)</span></span>;\n    <span class=\"hljs-comment\">// 为了保证方法级服务治理规则依然有效，建议保持方法名不变: sayHi</span>\n    <span class=\"hljs-comment\">// 使用default实现，避免给服务端提供者带来额外实现成本</span>\n    <span class=\"hljs-comment\">// boolean placeHoler只是为了实现重载而增加，只要Java语法规则允许，你可以使用任何方法重载手段</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> CompletableFuture&lt;String&gt; <span class=\"hljs-title\">sayHi</span><span class=\"hljs-params\">(String name, <span class=\"hljs-keyword\">boolean</span> placeHolder)</span> </span>{\n      <span class=\"hljs-keyword\">return</span> CompletableFuture.completedFuture(sayHello(name));\n    }\n}\n</code></pre>\n<p>这样，Provider依然可以只实现sayHi方法；而Consumer通过直接调用新增的sayHi重载方法可以拿到一个Future实例。</p>\n</li>\n<li>\n<p>如果你的原始接口定义是同步的，这时要实现Provider端异步，则可以使用AsyncContext（类似Servlet 3.0里的AsyncContext的编程接口）。</p>\n</li>\n</ol>\n<blockquote>\n<p>注意：在已有CompletabeFuture返回类型的接口上，不建议再使用AsyncContext，请直接利用CompletableFuture带来的异步能力。</p>\n</blockquote>\n<pre><code>public interface AsyncService {\n    String sayHello(String name);\n}\n</code></pre>\n<pre><code>public class AsyncServiceImpl implements AsyncService {\n    public String sayHello(String name) {\n        final AsyncContext asyncContext = RpcContext.startAsync();\n        new Thread(() -&gt; {\n            asyncContext.write(&quot;Hello &quot; + name + &quot;, response from provider.&quot;);\n        }).start();\n        return null;\n    }\n}\n</code></pre>\n<p>在方法体的开始<code>RpcContext.startAsync()</code>启动异步，并开启新线程异步的执行业务逻辑，在耗时操作完成后通过<code>asyncContext.write</code>将结果写回。</p>\n<ol start=\"4\">\n<li>\n<p>RpcContext直接返回CompletableFuture</p>\n<pre><code>CompletableFuture&lt;String&gt; f = RpcContext.getContext().getCompletableFuture();\n</code></pre>\n</li>\n</ol>\n<p>以上所有的增强，是在兼容已有异步编程的基础上进行的，因此基于2.6.x版本编写的异步程序不用做任何改造即可顺利编译通过。</p>\n<p>接下来，我们通过几个示例看一下如何实现一个全异步的Dubbo服务调用链。</p>\n<h2>示例1：CompletableFuture类型接口</h2>\n<p>CompletableFuture类型的接口既可以用作同步调用，也可以实现Consumer或Provider的异步调用。本示例实现了Consumer和Provider端异步调用，代码参见<a href=\"https://github.com/apache/dubbo-samples/tree/3.x/dubbo-samples-async/dubbo-samples-async-original-future\">dubbo-samples-async-original-future</a>。</p>\n<ol>\n<li>\n<p>定义接口</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">AsyncService</span> </span>{\n    <span class=\"hljs-function\">CompletableFuture&lt;String&gt; <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(String name)</span></span>;\n}\n</code></pre>\n<p>注意接口的返回类型是<code>CompletableFuture&lt;String&gt;</code>。</p>\n</li>\n<li>\n<p>Provider端</p>\n<ul>\n<li>\n<p>实现</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AsyncServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">AsyncService</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> CompletableFuture&lt;String&gt; <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(String name)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> CompletableFuture.supplyAsync(() -&gt; {\n            <span class=\"hljs-keyword\">try</span> {\n                Thread.sleep(<span class=\"hljs-number\">5000</span>);\n            } <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\n                e.printStackTrace();\n            }\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"async response from provider.\"</span>;\n        });\n    }\n}\n</code></pre>\n<p>可以看到这里通过supplyAsync将业务代码切换到了新的线程执行，因此实现了Provider端异步。</p>\n</li>\n<li>\n<p>配置</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"asyncService\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.alibaba.dubbo.samples.async.impl.AsyncServiceImpl\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"com.alibaba.dubbo.samples.async.api.AsyncService\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"asyncService\"</span>/&gt;</span>\n</code></pre>\n<p>配置方式和普通接口是一样的。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Consumer端</p>\n<ul>\n<li>配置</li>\n</ul>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:reference</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"asyncService\"</span> <span class=\"hljs-attr\">timeout</span>=<span class=\"hljs-string\">\"10000\"</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"com.alibaba.dubbo.samples.async.api.AsyncService\"</span>/&gt;</span>\n</code></pre>\n<p>​\t配置方式和普通接口是一样的。</p>\n<ul>\n<li>调用远程服务</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        ClassPathXmlApplicationContext context = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-keyword\">new</span> String[]{<span class=\"hljs-string\">\"META-INF/spring/async-consumer.xml\"</span>});\n        context.start();\n        <span class=\"hljs-keyword\">final</span> AsyncService asyncService = (AsyncService) context.getBean(<span class=\"hljs-string\">\"asyncService\"</span>);\n    \n        CompletableFuture&lt;String&gt; future = asyncService.sayHello(<span class=\"hljs-string\">\"async call request\"</span>);\n        future.whenComplete((v, t) -&gt; {\n            <span class=\"hljs-keyword\">if</span> (t != <span class=\"hljs-keyword\">null</span>) {\n                t.printStackTrace();\n            } <span class=\"hljs-keyword\">else</span> {\n                System.out.println(<span class=\"hljs-string\">\"Response: \"</span> + v);\n            }\n        });\n        System.out.println(<span class=\"hljs-string\">\"Executed before response return.\"</span>);\n        System.in.read();\n    }\n</code></pre>\n<p><code>CompletableFuture&lt;String&gt; future = asyncService.sayHello(&quot;async call request&quot;);</code>很自然的返回了Future示例，这样就实现了Consumer端的异步服务调用。</p>\n</li>\n</ol>\n<h2>示例2：重载同步接口</h2>\n<p>这个示例演示了如何在同步接口的基础上，通过增加重载方法实现消费端的异步调用，具体代码参见地址<a href=\"https://github.com/apache/dubbo-samples/tree/3.x/dubbo-samples-async/dubbo-samples-async-generated-future\">dubbo-samples-async-generated-future</a></p>\n<ol>\n<li>\n<p>定义接口</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@DubboAsync</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">GreetingsService</span> </span>{\n    <span class=\"hljs-function\">String <span class=\"hljs-title\">sayHi</span><span class=\"hljs-params\">(String name)</span></span>;\n}\n</code></pre>\n<p>修改接口，增加重载方法</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">GreetingsService</span> </span>{\n    <span class=\"hljs-function\">String <span class=\"hljs-title\">sayHi</span><span class=\"hljs-params\">(String name)</span></span>;\n  \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> CompletableFuture&lt;String&gt; <span class=\"hljs-title\">sayHi</span><span class=\"hljs-params\">(String name, <span class=\"hljs-keyword\">boolean</span> isAsync)</span> </span>{\n      <span class=\"hljs-keyword\">return</span> CompletableFuture.completedFuture(sayHello(name));\n    }\n}\n</code></pre>\n</li>\n<li>\n<p>Provider端</p>\n<ul>\n<li>配置</li>\n</ul>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"greetingsService\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.alibaba.dubbo.samples.async.impl.GreetingsServiceImpl\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"com.alibaba.dubbo.samples.api.GreetingsService\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"greetingsService\"</span>/&gt;</span>\n</code></pre>\n<ul>\n<li>服务实现</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GreetingsServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">GreetingsService</span> </span>{\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">sayHi</span><span class=\"hljs-params\">(String name)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"hi, \"</span> + name;\n    }\n}\n</code></pre>\n</li>\n<li>\n<p>Consumer端</p>\n<ul>\n<li>配置</li>\n</ul>\n<pre><code class=\"language-xml\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:reference</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"greetingsService\"</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"com.alibaba.dubbo.samples.api.GreetingsService\"</span>/&gt;</span>\n</code></pre>\n<ul>\n<li>调用服务</li>\n</ul>\n<pre><code class=\"language-java\"> <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        ClassPathXmlApplicationContext context = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-keyword\">new</span> String[]{<span class=\"hljs-string\">\"META-INF/spring/async-consumer.xml\"</span>});\n        context.start();\n\n        GreetingsService greetingsService = (GreetingsService) context.getBean(<span class=\"hljs-string\">\"greetingsService\"</span>);\n        CompletableFuture&lt;String&gt; future = greetingsService.sayHi(<span class=\"hljs-string\">\"async call reqeust\"</span>, <span class=\"hljs-keyword\">true</span>);\n        System.out.println(<span class=\"hljs-string\">\"async call ret :\"</span> + future.get());\n     \n        System.in.read();\n    }\n</code></pre>\n<p>这样，我们就可以直接使用<code>CompletableFuture&lt;String&gt; future = greetingsService.sayHi(&quot;async call reqeust&quot;, true);</code>，直接返回CompletableFuture。</p>\n</li>\n</ol>\n<h2>示例3：使用AsyncContext</h2>\n<p>本示例演示了如何在同步接口的基础上，通过AsyncContext实现Provider端异步执行，示例代码参见<a href=\"https://github.com/apache/dubbo-samples/tree/3.x/dubbo-samples-async/dubbo-samples-async-provider\">dubbo-samples-async-provider</a>。</p>\n<blockquote>\n<p>之前已经提到过，已经是CompletableFuture签名的接口，要实现Provider端异步没必要再用AsyncContext。</p>\n</blockquote>\n<ol>\n<li>\n<p>定义接口</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">AsyncService</span> </span>{\n    <span class=\"hljs-function\">String <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(String name)</span></span>;\n}\n</code></pre>\n</li>\n<li>\n<p>Provider端，和普通provider端配置完全一致</p>\n<ul>\n<li>配置</li>\n</ul>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"asyncService\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.alibaba.dubbo.samples.async.impl.AsyncServiceImpl\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">async</span>=<span class=\"hljs-string\">\"true\"</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"com.alibaba.dubbo.samples.async.api.AsyncService\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"asyncService\"</span>/&gt;</span>\n</code></pre>\n<ul>\n<li>异步执行实现</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AsyncServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">AsyncService</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(String name)</span> </span>{\n        <span class=\"hljs-keyword\">final</span> AsyncContext asyncContext = RpcContext.startAsync();\n        <span class=\"hljs-keyword\">new</span> Thread(() -&gt; {\n            asyncContext.signalContextSwitch();\n            <span class=\"hljs-keyword\">try</span> {\n                Thread.sleep(<span class=\"hljs-number\">500</span>);\n            } <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\n                e.printStackTrace();\n            }\n            asyncContext.write(<span class=\"hljs-string\">\"Hello \"</span> + name + <span class=\"hljs-string\">\", response from provider.\"</span>);\n        }).start();\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n    }\n}\n</code></pre>\n</li>\n<li>\n<p>Consumer端</p>\n<ul>\n<li>配置</li>\n</ul>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:reference</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"asyncService\"</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"com.alibaba.dubbo.samples.async.api.AsyncService\"</span>/&gt;</span>\n</code></pre>\n<ul>\n<li>服务调用</li>\n</ul>\n<pre><code class=\"language-java\"> <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        ClassPathXmlApplicationContext context = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-keyword\">new</span> String[]{<span class=\"hljs-string\">\"META-INF/spring/async-consumer.xml\"</span>});\n        context.start();\n\n        AsyncService asyncService = (AsyncService) context.getBean(<span class=\"hljs-string\">\"asyncService\"</span>);\n        System.out.println(asyncService.sayHello(<span class=\"hljs-string\">\"async call request\"</span>));\n     \n        System.in.read();\n    }\n</code></pre>\n</li>\n</ol>\n<h2>异步引入的新问题</h2>\n<h3>Filter链</h3>\n<p>以下是一次普通Dubbo调用的完整Filter链(Filter链路图待补充)。</p>\n<p>而采用异步调用后，由于异步结果在异步线程中单独执行，所以流经后半段Filter链的Result是空值，当真正的结果返回时已无法被Filter链处理。</p>\n<p>为了解决这个问题，2.7.0中为Filter增加了回调接口onResponse。</p>\n<p>以下是一个扩展Filter并支持异步Filter链的例子</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Activate</span>(group = {Constants.PROVIDER, Constants.CONSUMER})\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AsyncPostprocessFilter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Filter</span> </span>{\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Result <span class=\"hljs-title\">invoke</span><span class=\"hljs-params\">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n        <span class=\"hljs-keyword\">return</span> invoker.invoke(invoker, invocation);\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Result <span class=\"hljs-title\">onResponse</span><span class=\"hljs-params\">(Result result, Invoker&lt;?&gt; invoker, Invocation invocation)</span> </span>{\n        System.out.println(<span class=\"hljs-string\">\"Filter get the return value: \"</span> + result.getValue());\n        <span class=\"hljs-keyword\">return</span> result;\n    }\n}\n</code></pre>\n<h3>上下文传递</h3>\n<p>这里的上下文问题主要是指在提供端异步的场景。</p>\n<p>当前我们考虑的上下文主要是指保存在RpcContext中的数据，大多数场景是需要用户在切换业务线程前自己完成Context的传递。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AsyncServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">AsyncService</span> </span>{\n    <span class=\"hljs-comment\">// 保存当前线程的上下文</span>\n    RpcContext context = RpcContext.getContext();\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> CompletableFuture&lt;String&gt; <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(String name)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> CompletableFuture.supplyAsync(() -&gt; {\n            <span class=\"hljs-comment\">// 设置到新线程中</span>\n            RpcContext.setContext(context);\n            <span class=\"hljs-keyword\">try</span> {\n                Thread.sleep(<span class=\"hljs-number\">5000</span>);\n            } <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\n                e.printStackTrace();\n            }\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"async response from provider.\"</span>;\n        });\n    }\n}\n</code></pre>\n<p>不过AsyncContext也提供了signalContextSwitch()的方法来实现方便的Context切换。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AsyncServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">AsyncService</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(String name)</span> </span>{\n        <span class=\"hljs-keyword\">final</span> AsyncContext asyncContext = RpcContext.startAsync();\n        <span class=\"hljs-keyword\">new</span> Thread(() -&gt; {\n            asyncContext.signalContextSwitch();\n            <span class=\"hljs-keyword\">try</span> {\n                Thread.sleep(<span class=\"hljs-number\">500</span>);\n            } <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\n                e.printStackTrace();\n            }\n            asyncContext.write(<span class=\"hljs-string\">\"Hello \"</span> + name + <span class=\"hljs-string\">\", response from provider.\"</span>);\n        }).start();\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n    }\n}\n</code></pre>\n",
  "link": "/zh-cn/blog/dubbo-new-async.html",
  "meta": {
    "title": "如何基于Dubbo实现全异步调用链",
    "keywords": "Dubbo, 异步, async chain",
    "description": "本文回顾了 2.6.x 版本的异步实现，然后引出了 2.7.0 版本基于 CompletableFuture 的异步编程方式。"
  }
}
