{
  "filename": "dubbo-registry-nacos-integration.md",
  "__html": "<h1>Dubbo 融合 Nacos 成为注册中心</h1>\n<p>Nacos 作为 Dubbo 生态系统中重要的注册中心实现，其中 <a href=\"https://github.com/apache/dubbo/tree/master/dubbo-registry/dubbo-registry-nacos\"><code>dubbo-registry-nacos</code></a> 则是 Dubbo 融合 Nacos 注册中心的实现。</p>\n<h2>预备工作</h2>\n<p>当您将 <a href=\"https://github.com/apache/dubbo/tree/master/dubbo-registry/dubbo-registry-nacos\"><code>dubbo-registry-nacos</code></a> 整合到您的 Dubbo 工程之前，请确保后台已经启动 Nacos 服务。如果您尚且不熟悉 Nacos 的基本使用的话，可先行参考 <a href=\"https://nacos.io/en-us/docs/quick-start.html\">Nacos 快速入门</a>：<a href=\"https://nacos.io/en-us/docs/quick-start.html%E3%80%82%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8\">https://nacos.io/en-us/docs/quick-start.html。建议使用</a> Nacos <code>0.6.1</code> 以上的版本。</p>\n<h2>快速上手</h2>\n<p>Dubbo 融合 Nacos 成为注册中心的操作步骤非常简单，大致步骤可分为“增加 Maven 依赖”以及“配置注册中心“。</p>\n<h3>增加 Maven 依赖</h3>\n<p>首先，您需要 <code>dubbo-registry-nacos</code> 的 Maven 依赖添加到您的项目中 <code>pom.xml</code> 文件中，并且强烈地推荐您使用 Dubbo <code>2.6.5</code>：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n\n    ...\n        \n    <span class=\"hljs-comment\">&lt;!-- Dubbo Nacos registry dependency --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>dubbo-registry-nacos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>0.0.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>   \n    \n    <span class=\"hljs-comment\">&lt;!-- Keep latest Nacos client version --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.nacos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>nacos-client<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>[0.6.1,)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n    \n    <span class=\"hljs-comment\">&lt;!-- Dubbo dependency --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>dubbo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.6.5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n    \n    <span class=\"hljs-comment\">&lt;!-- Alibaba Spring Context extension --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.spring<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-context-support<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\n    ...\n    \n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span>\n</code></pre>\n<p>当项目中添加  <code>dubbo-registry-nacos</code> 后，您无需显示地编程实现服务发现和注册逻辑，实际实现由该三方包提供，接下来配置 Naocs 注册中心。</p>\n<h3>配置注册中心</h3>\n<p>假设您 Dubbo 应用使用 Spring Framework 装配，将有两种配置方法可选，分别为：<a href=\"https://mercyblitz.github.io/2018/01/18/Dubbo-%E5%A4%96%E9%83%A8%E5%8C%96%E9%85%8D%E7%BD%AE/\">Dubbo Spring 外部化配置</a>以及 Spring XML 配置文件以及 ，笔者强烈推荐前者。</p>\n<h3><a href=\"https://mercyblitz.github.io/2018/01/18/Dubbo-%E5%A4%96%E9%83%A8%E5%8C%96%E9%85%8D%E7%BD%AE/\">Dubbo Spring 外部化配置</a></h3>\n<p>Dubbo Spring 外部化配置是由 Dubbo <code>2.5.8</code> 引入的新特性，可通过 Spring <code>Environment</code> 属性自动地生成并绑定 Dubbo 配置 Bean，实现配置简化，并且降低微服务开发门槛。</p>\n<p>假设您 Dubbo 应用的使用 Zookeeper 作为注册中心，并且其服务器 IP 地址为：<code>10.20.153.10</code>，同时，该注册地址作为 Dubbo 外部化配置属性存储在 <code>dubbo-config.properties</code> 文件，如下所示：</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\">## application</span>\n<span class=\"hljs-meta\">dubbo.application.name</span> = <span class=\"hljs-string\">your-dubbo-application</span>\n<span class=\"hljs-comment\">\n## Zookeeper registry address</span>\n<span class=\"hljs-meta\">dubbo.registry.address</span> = <span class=\"hljs-string\">zookeeper://10.20.153.10:2181</span>\n<span class=\"hljs-attr\">...</span>\n</code></pre>\n<p>假设您的 Nacos Server 同样运行在服务器 <code>10.20.153.10</code> 上，并使用默认 Nacos 服务端口 <code>8848</code>，您只需将 <code>dubbo.registry.address</code> 属性调整如下：</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\">## 其他属性保持不变</span>\n<span class=\"hljs-comment\">\n## Nacos registry address</span>\n<span class=\"hljs-meta\">dubbo.registry.address</span> = <span class=\"hljs-string\">nacos://10.20.153.10:8848</span>\n<span class=\"hljs-attr\">...</span>\n</code></pre>\n<p>随后，重启您的 Dubbo 应用，Dubbo 的服务提供和消费信息在 Nacos 控制台中可以显示：</p>\n<p><img src=\"../../img/blog/dubbo-registry-nacos-1.png\" alt=\"image-20181213103845976\"></p>\n<p>如图所示，服务名前缀为 <code>providers:</code> 的信息为服务提供者的元信息，<code>consumers:</code> 则代表服务消费者的元信息。点击“<strong>详情</strong>”可查看服务状态详情：</p>\n<p><img src=\"../../img/blog/dubbo-registry-nacos-2.png\" alt=\"image-20181213104145998\"></p>\n<p>如果您正在使用 Spring XML 配置文件装配 Dubbo 注册中心的话，请参考下一节。</p>\n<h3>Spring XML 配置文件</h3>\n<p>同样，假设您 Dubbo 应用的使用 Zookeeper 作为注册中心，并且其服务器 IP 地址为：<code>10.20.153.10</code>，并且装配 Spring Bean 在 XML 文件中，如下所示：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n    <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n    <span class=\"hljs-attr\">xmlns:dubbo</span>=<span class=\"hljs-string\">\"http://dubbo.apache.org/schema/dubbo\"</span>\n    <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd\"</span>&gt;</span>\n \n    <span class=\"hljs-comment\">&lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:application</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo-provider-xml-demo\"</span>  /&gt;</span>\n \n    <span class=\"hljs-comment\">&lt;!-- 使用 Zookeeper 注册中心 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"zookeeper://10.20.153.10:2181\"</span> /&gt;</span>\n \t...\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<p>与 <a href=\"https://mercyblitz.github.io/2018/01/18/Dubbo-%E5%A4%96%E9%83%A8%E5%8C%96%E9%85%8D%E7%BD%AE/\">Dubbo Spring 外部化配置</a> 配置类似，只需要调整 <code>address</code> 属性配置即可：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n    <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n    <span class=\"hljs-attr\">xmlns:dubbo</span>=<span class=\"hljs-string\">\"http://dubbo.apache.org/schema/dubbo\"</span>\n    <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd\"</span>&gt;</span>\n \n    <span class=\"hljs-comment\">&lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:application</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo-provider-xml-demo\"</span>  /&gt;</span>\n \n    <span class=\"hljs-comment\">&lt;!-- 使用 Nacos 注册中心 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"nacos://10.20.153.10:8848\"</span> /&gt;</span>\n \t...\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<p>重启 Dubbo 应用后，您同样也能发现服务提供方和消费方的注册元信息呈现在 Nacos 控制台中：</p>\n<p><img src=\"../../img/blog/dubbo-registry-nacos-3.png\" alt=\"image-20181213113049185\"></p>\n<p>您是否绝对配置或切换 Nacos 注册中心超级 Easy 呢？如果您仍旧意犹未尽或者不甚明白的话，可参考以下完整的示例。</p>\n<h2>完整示例</h2>\n<p>以上图片中的元数据源于 Dubbo Spring 注解驱动示例以及 Dubbo Spring XML 配置驱动示例，下面将分别介绍两者，您可以选择自己偏好的编程模型。在正式讨论之前，先来介绍两者的预备工作，因为它们皆依赖 Java 服务接口和实现。同时，<strong>请确保本地（<code>127.0.0.1</code>）环境已启动 Nacos 服务</strong>。</p>\n<h3>示例接口与实现</h3>\n<p>首先定义示例接口，如下所示：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.alibaba.dubbo.demo.service;\n\n<span class=\"hljs-comment\">/**\n * DemoService\n *\n * <span class=\"hljs-doctag\">@since</span> 2.6.5\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">DemoService</span> </span>{\n\n    <span class=\"hljs-function\">String <span class=\"hljs-title\">sayName</span><span class=\"hljs-params\">(String name)</span></span>;\n\n}\n</code></pre>\n<p>提供以上接口的实现类：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.alibaba.dubbo.demo.service;\n\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.config.annotation.Service;\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.rpc.RpcContext;\n\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Value;\n\n<span class=\"hljs-comment\">/**\n * Default {<span class=\"hljs-doctag\">@link</span> DemoService}\n *\n * <span class=\"hljs-doctag\">@since</span> 2.6.5\n */</span>\n<span class=\"hljs-meta\">@Service</span>(version = <span class=\"hljs-string\">\"${demo.service.version}\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DefaultService</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">DemoService</span> </span>{\n\n    <span class=\"hljs-meta\">@Value</span>(<span class=\"hljs-string\">\"${demo.service.name}\"</span>)\n    <span class=\"hljs-keyword\">private</span> String serviceName;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">sayName</span><span class=\"hljs-params\">(String name)</span> </span>{\n        RpcContext rpcContext = RpcContext.getContext();\n        <span class=\"hljs-keyword\">return</span> String.format(<span class=\"hljs-string\">\"Service [name :%s , port : %d] %s(\\\"%s\\\") : Hello,%s\"</span>,\n                serviceName,\n                rpcContext.getLocalPort(),\n                rpcContext.getMethodName(),\n                name,\n                name);\n    }\n}\n</code></pre>\n<p>接口与实现准备妥当后，下面将采用注解驱动和 XML 配置驱动各自实现。</p>\n<h3>Spring 注解驱动示例</h3>\n<p>Dubbo <code>2.5.7</code> 重构了 Spring 注解驱动的编程模型。</p>\n<h4>服务提供方注解驱动实现</h4>\n<ul>\n<li>定义 Dubbo 提供方外部化配置属性源 -  <code>provider-config.properties</code></li>\n</ul>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\">## application</span>\n<span class=\"hljs-meta\">dubbo.application.name</span> = <span class=\"hljs-string\">dubbo-provider-demo</span>\n<span class=\"hljs-comment\">\n## Nacos registry address</span>\n<span class=\"hljs-meta\">dubbo.registry.address</span> = <span class=\"hljs-string\">nacos://127.0.0.1:8848</span>\n<span class=\"hljs-comment\">\n## Dubbo Protocol</span>\n<span class=\"hljs-meta\">dubbo.protocol.name</span> = <span class=\"hljs-string\">dubbo</span>\n<span class=\"hljs-meta\">dubbo.protocol.port</span> = <span class=\"hljs-string\">-1</span>\n<span class=\"hljs-comment\">\n# Provider @Service version</span>\n<span class=\"hljs-meta\">demo.service.version</span>=<span class=\"hljs-string\">1.0.0</span>\n<span class=\"hljs-meta\">demo.service.name</span> = <span class=\"hljs-string\">demoService</span>\n</code></pre>\n<ul>\n<li>实现服务提供方引导类 - <code>DemoServiceProviderBootstrap</code></li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.alibaba.dubbo.demo.provider;\n\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.config.spring.context.annotation.EnableDubbo;\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.demo.service.DemoService;\n\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.PropertySource;\n\n<span class=\"hljs-keyword\">import</span> java.io.IOException;\n\n<span class=\"hljs-comment\">/**\n * {<span class=\"hljs-doctag\">@link</span> DemoService} provider demo\n */</span>\n<span class=\"hljs-meta\">@EnableDubbo</span>(scanBasePackages = <span class=\"hljs-string\">\"com.alibaba.dubbo.demo.service\"</span>)\n<span class=\"hljs-meta\">@PropertySource</span>(value = <span class=\"hljs-string\">\"classpath:/provider-config.properties\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DemoServiceProviderBootstrap</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>{\n        AnnotationConfigApplicationContext context = <span class=\"hljs-keyword\">new</span> AnnotationConfigApplicationContext();\n        context.register(DemoServiceProviderBootstrap.class);\n        context.refresh();\n        System.out.println(<span class=\"hljs-string\">\"DemoService provider is starting...\"</span>);\n        System.in.read();\n    }\n}\n\n</code></pre>\n<p>其中注解 <code>@EnableDubbo</code> 激活 Dubbo 注解驱动以及外部化配置，其 <code>scanBasePackages</code> 属性扫描指定 Java 包，将所有标注 <code>@Service</code> 的服务接口实现类暴露为 Spring Bean，随即被导出 Dubbo 服务。</p>\n<p><code>@PropertySource</code> 是 Spring Framework 3.1 引入的标准导入属性配置资源注解，它将为 Dubbo 提供外部化配置。</p>\n<h4>服务消费方注解驱动实现</h4>\n<ul>\n<li>定义 Dubbo 消费方外部化配置属性源 -  <code>consumer-config.properties</code></li>\n</ul>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\">## Dubbo Application info</span>\n<span class=\"hljs-meta\">dubbo.application.name</span> = <span class=\"hljs-string\">dubbo-consumer-demo</span>\n<span class=\"hljs-comment\">\n## Nacos registry address</span>\n<span class=\"hljs-meta\">dubbo.registry.address</span> = <span class=\"hljs-string\">nacos://127.0.0.1:8848</span>\n<span class=\"hljs-comment\">\n# @Reference version</span>\n<span class=\"hljs-meta\">demo.service.version</span>= <span class=\"hljs-string\">1.0.0</span>\n</code></pre>\n<p>同样地，<code>dubbo.registry.address</code> 属性指向 Nacos 注册中心，其他 Dubbo 服务相关的元信息通过 Nacos 注册中心获取。</p>\n<ul>\n<li>实现服务消费方引导类 - <code>DemoServiceConsumerBootstrap</code></li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.alibaba.dubbo.demo.consumer;\n\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.config.annotation.Reference;\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.config.spring.context.annotation.EnableDubbo;\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.demo.service.DemoService;\n\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.PropertySource;\n\n<span class=\"hljs-keyword\">import</span> javax.annotation.PostConstruct;\n<span class=\"hljs-keyword\">import</span> java.io.IOException;\n\n<span class=\"hljs-comment\">/**\n * {<span class=\"hljs-doctag\">@link</span> DemoService} consumer demo\n */</span>\n<span class=\"hljs-meta\">@EnableDubbo</span>\n<span class=\"hljs-meta\">@PropertySource</span>(value = <span class=\"hljs-string\">\"classpath:/consumer-config.properties\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DemoServiceConsumerBootstrap</span> </span>{\n\n    <span class=\"hljs-meta\">@Reference</span>(version = <span class=\"hljs-string\">\"${demo.service.version}\"</span>)\n    <span class=\"hljs-keyword\">private</span> DemoService demoService;\n\n    <span class=\"hljs-meta\">@PostConstruct</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) {\n            System.out.println(demoService.sayName(<span class=\"hljs-string\">\"小马哥（mercyblitz）\"</span>));\n        }\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>{\n        AnnotationConfigApplicationContext context = <span class=\"hljs-keyword\">new</span> AnnotationConfigApplicationContext();\n        context.register(DemoServiceConsumerBootstrap.class);\n        context.refresh();\n        context.close();\n    }\n}\n\n</code></pre>\n<p>同样地，<code>@EnableDubbo</code>  注解激活 Dubbo 注解驱动和外部化配置，不过当前属于服务消费者，无需指定 Java 包名扫描标注 <code>@Service</code> 的服务实现。</p>\n<p><code>@Reference</code> 是 Dubbo 远程服务的依赖注入注解，需要服务提供方和消费端约定接口（interface）、版本（version）以及分组（group）信息。在当前服务消费示例中，<code>DemoService</code> 的服务版本来源于属性配置文件 <code>consumer-config.properties</code>。</p>\n<p><code>@PostConstruct</code> 部分代码则说明当 <code>DemoServiceConsumerBootstrap</code> Bean 初始化时，执行十次 Dubbo 远程方法调用。</p>\n<h4>运行注解驱动示例</h4>\n<p>在本地启动两次 <code>DemoServiceProviderBootstrap</code>，注册中心将出现两个健康服务：</p>\n<p><img src=\"../../img/blog/dubbo-registry-nacos-4.png\" alt=\"image-20181213123909636\"></p>\n<p>再运行 <code>DemoServiceConsumerBootstrap</code>，运行结果如下：</p>\n<pre><code>Service [name :demoService , port : 20880] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :demoService , port : 20881] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :demoService , port : 20880] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :demoService , port : 20880] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :demoService , port : 20881] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :demoService , port : 20881] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :demoService , port : 20880] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :demoService , port : 20880] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :demoService , port : 20881] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :demoService , port : 20881] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\n</code></pre>\n<p>运行无误，并且服务消费方使用了负载均衡策略，将十次 RPC 调用平均分摊到两个 Dubbo 服务提供方实例中。</p>\n<h3>Spring XML 配置驱动示例</h3>\n<p>Spring XML 配置驱动是传统 Spring 装配组件的编程模型。</p>\n<h4>服务提供方  XML 配置驱动</h4>\n<ul>\n<li>定义服务提供方 XML 上下文配置文件 - <code>/META-INF/spring/dubbo-provider-context.xml</code></li>\n</ul>\n<pre><code class=\"language-xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n       <span class=\"hljs-attr\">xmlns:dubbo</span>=<span class=\"hljs-string\">\"http://dubbo.apache.org/schema/dubbo\"</span>\n       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd\"</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:application</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo-provider-xml-demo\"</span>/&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 使用 Nacos 注册中心 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"nacos://127.0.0.1:8848\"</span>/&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 用dubbo协议在随机端口暴露服务 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:protocol</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo\"</span> <span class=\"hljs-attr\">port</span>=<span class=\"hljs-string\">\"-1\"</span>/&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 声明需要暴露的服务接口 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"com.alibaba.dubbo.demo.service.DemoService\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"demoService\"</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">\"2.0.0\"</span>/&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 和本地bean一样实现服务 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"demoService\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.alibaba.dubbo.demo.service.DefaultService\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<ul>\n<li>实现服务提供方引导类 - <code>DemoServiceProviderXmlBootstrap</code></li>\n</ul>\n<pre><code class=\"language-xml\">package com.alibaba.dubbo.demo.provider;\n\nimport com.alibaba.dubbo.demo.service.DemoService;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport java.io.IOException;\n\n/**\n * {@link DemoService} provider demo XML bootstrap\n */\npublic class DemoServiceProviderXmlBootstrap {\n\n    public static void main(String[] args) throws IOException {\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext();\n        context.setConfigLocation(\"/META-INF/spring/dubbo-provider-context.xml\");\n        context.refresh();\n        System.out.println(\"DemoService provider (XML) is starting...\");\n        System.in.read();\n    }\n}\n</code></pre>\n<h4>服务消费方 XML 配置驱动</h4>\n<ul>\n<li>定义服务消费方 XML 上下文配置文件 - <code>/META-INF/spring/dubbo-consumer-context.xml</code></li>\n</ul>\n<pre><code class=\"language-xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n       <span class=\"hljs-attr\">xmlns:dubbo</span>=<span class=\"hljs-string\">\"http://dubbo.apache.org/schema/dubbo\"</span>\n       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd\"</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:application</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo-consumer-xml-demo\"</span>/&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 使用 Nacos 注册中心 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"nacos://127.0.0.1:8848\"</span>/&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 引用服务接口 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:reference</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"demoService\"</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"com.alibaba.dubbo.demo.service.DemoService\"</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">\"2.0.0\"</span>/&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<ul>\n<li>实现服务消费方引导类 - <code>DemoServiceConsumerXmlBootstrap</code></li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.alibaba.dubbo.demo.consumer;\n\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.demo.service.DemoService;\n\n<span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;\n\n<span class=\"hljs-keyword\">import</span> java.io.IOException;\n\n<span class=\"hljs-comment\">/**\n * {<span class=\"hljs-doctag\">@link</span> DemoService} consumer demo XML bootstrap\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DemoServiceConsumerXmlBootstrap</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>{\n        ClassPathXmlApplicationContext context = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext();\n        context.setConfigLocation(<span class=\"hljs-string\">\"/META-INF/spring/dubbo-consumer-context.xml\"</span>);\n        context.refresh();\n        System.out.println(<span class=\"hljs-string\">\"DemoService consumer (XML) is starting...\"</span>);\n        DemoService demoService = context.getBean(<span class=\"hljs-string\">\"demoService\"</span>, DemoService.class);\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) {\n            System.out.println(demoService.sayName(<span class=\"hljs-string\">\"小马哥（mercyblitz）\"</span>));\n        }\n        context.close();\n    }\n}\n</code></pre>\n<h4>运行 XML 配置驱动示例</h4>\n<p>同样地，先启动两个 <code>DemoServiceProviderXmlBootstrap</code> 引导类，观察 Nacos 注册中心服务提供者变化：</p>\n<p><img src=\"../../img/blog/dubbo-registry-nacos-5.png\" alt=\"image-20181213125527201\"></p>\n<p>XML 配置驱动的服务版本为 <code>2.0.0</code>，因此注册服务无误。</p>\n<p>再运行服务消费者引导类 <code>DemoServiceConsumerXmlBootstrap</code>，观察控制台输出内容：</p>\n<pre><code>Service [name :null , port : 20882] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :null , port : 20882] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :null , port : 20883] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :null , port : 20882] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :null , port : 20882] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :null , port : 20883] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :null , port : 20882] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :null , port : 20883] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :null , port : 20883] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\nService [name :null , port : 20883] sayName(&quot;小马哥（mercyblitz）&quot;) : Hello,小马哥（mercyblitz）\n</code></pre>\n<p>结果同样运行和负载均衡正常，不过由于当前示例尚未添加属性 <code>demo.service.name</code> 的缘故，因此，“name”部分信息输出为 <code>null</code>。更多内容请参考：<a href=\"https://github.com/apache/dubbo/tree/master/dubbo-registry/dubbo-registry-nacos%E3%80%82\">https://github.com/apache/dubbo/tree/master/dubbo-registry/dubbo-registry-nacos。</a></p>\n<p>如果您关注或喜爱 Dubbo 以及 Nacos 等开源工程，不妨为它们点 “star”，加油打气链接：</p>\n<ul>\n<li>Apache Dubbo：<a href=\"https://github.com/apache/dubbo\">https://github.com/apache/dubbo</a></li>\n<li>Dubbo Nacos Registry：<a href=\"https://github.com/apache/dubbo/tree/master/dubbo-registry/dubbo-registry-nacos\">https://github.com/apache/dubbo/tree/master/dubbo-registry/dubbo-registry-nacos</a></li>\n<li>Alibaba Nacos：<a href=\"https://github.com/alibaba/nacos\">https://github.com/alibaba/nacos</a></li>\n</ul>\n",
  "link": "/zh-cn/blog/dubbo-registry-nacos-integration.html",
  "meta": {}
}
