{
  "filename": "dubbo-zk.md",
  "__html": "<h1>在 Dubbo 应用中使用 Zookeeper</h1>\n<h2>Zookeeper 介绍</h2>\n<h3>基本概念</h3>\n<p>在现代的分布式应用中，往往会出现节点和节点之间的协调问题，其中就包括了：选主、集群管理、分布式锁、分布式配置管理、统一命名服务、状态同步等诉求。<a href=\"https://zookeeper.apache.org\">Apache Zookeeper</a>，正如它的名字所暗示的那样，<em>动物园管理员</em>，就是为了解决这些诉求的一个分布式协调服务框架。</p>\n<p>为了保证高可用，ZooKeeper 本身也可以部署成集群模式，称之为 <em>ZooKeeper ensemble</em>。ZooKeeper 集群中始终确保其中的一台为 leader 的角色，并通过 <em>ZAB (Zookeeper Atomic Broadcast Protocol) <sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></em> 协议确保所有节点上的信息的一致。客户端可以访问集群中的任何一台进行读写操作，而不用担心数据出现不一致的现象。</p>\n<p><img src=\"../../img/blog/zk-emsemble.png\" alt=\"Diagram shows client-server architecture of ZooKeeper\">\n<em>Image Credit : ebook -Zookeeper-Distributed Process Coordination from O'Reilly</em></p>\n<p>Zookeeper 中的数据存储方式与传统的 UNIX 文件系统相似，节点按照树状结构来组织，其中，节点被称之为 <em>znodes (ZooKeeper data nodes)</em></p>\n<p><img src=\"../../img/blog/zk-tree.png\" alt=\"zk-tree\">\n<em>Image Credit : ebook -Zookeeper-Distributed Process Coordination from O'Reilly</em></p>\n<h3>基本用法</h3>\n<p>可以通过直接下载的方式 <sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup>安装并运行 Zookeeper ，在 Mac 上也可以通过 Homebrew <sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup>  <code>brew install zookeeper</code>  来安装，考虑到通用性，本文采用 docker 的方式来运行 Zookeeper。如果没有安装 docker，请先准备好 docker 环境 <sup class=\"footnote-ref\"><a href=\"#fn4\" id=\"fnref4\">[4]</a></sup>。</p>\n<h4>1. 启动 Zookeeper</h4>\n<p>执行命令将 Zookeeper 运行在 docker 容器中</p>\n<pre><code class=\"language-shell\">docker run --rm --name zookeeper -p 2181:2181 zookeeper\n</code></pre>\n<h4>2. 进入 Zookeeper 容器</h4>\n<pre><code class=\"language-shell\">docker exec -it zookeeper bash\n</code></pre>\n<p>在 <code>bin</code> 目录下有启动 Zookeeper 的命令 <code>zkServer</code> 以及管理控制台 <code>zkCli</code></p>\n<pre><code class=\"language-shell\">bash-4.4# ls -l bin\ntotal 36\n-rwxr-xr-x    1 zookeepe zookeepe       232 Mar 27 04:32 README.txt\n-rwxr-xr-x    1 zookeepe zookeepe      1937 Mar 27 04:32 zkCleanup.sh\n-rwxr-xr-x    1 zookeepe zookeepe      1056 Mar 27 04:32 zkCli.cmd\n-rwxr-xr-x    1 zookeepe zookeepe      1534 Mar 27 04:32 zkCli.sh\n-rwxr-xr-x    1 zookeepe zookeepe      1759 Mar 27 04:32 zkEnv.cmd\n-rwxr-xr-x    1 zookeepe zookeepe      2696 Mar 27 04:32 zkEnv.sh\n-rwxr-xr-x    1 zookeepe zookeepe      1089 Mar 27 04:32 zkServer.cmd\n-rwxr-xr-x    1 zookeepe zookeepe      6773 Mar 27 04:32 zkServer.sh\n</code></pre>\n<h4>3. 通过 zkCli 进入 Zookeeper 管理界面</h4>\n<p>由于是通过 Docker 启动，Zookeeper 进程已经启动，并通过 2181 端口对外提供服务。</p>\n<pre><code class=\"language-shell\">bash-4.4# ps\nPID   USER     TIME  COMMAND\n    1 zookeepe  0:02 /usr/lib/jvm/java-1.8-openjdk/jre/bin/java -Dzookeeper.log.dir=. -Dzookeeper.root\n   32 root      0:00 bash\n   42 root      0:00 ps\n</code></pre>\n<p>因此可以直接通过 <code>zkCli</code> 来访问 Zookeeper 的控制台来进行管理。</p>\n<pre><code class=\"language-shell\">bash-4.4# bin/zkCli.sh -server 127.0.0.1:2181\nConnecting to 127.0.0.1:2181\n...\nWATCHER::\n\nWatchedEvent state:SyncConnected type:None path:null\n\n[zk: 127.0.0.1:2181(CONNECTED) 0] help\nZooKeeper -server host:port cmd args\n\tstat path [watch]\n\tset path data [version]\n\tls path [watch]\n\tdelquota [-n|-b] path\n\tls2 path [watch]\n\tsetAcl path acl\n\tsetquota -n|-b val path\n\thistory\n\tredo cmdno\n\tprintwatches on|off\n\tdelete path [version]\n\tsync path\n\tlistquota path\n\trmr path\n\tget path [watch]\n\tcreate [-s] [-e] path data acl\n\taddauth scheme auth\n\tquit\n\tgetAcl path\n\tclose\n\tconnect host:port\n</code></pre>\n<h4>4. zkCli 上的一些基本操作</h4>\n<p>创建 <code>/hello-zone</code> 节点：</p>\n<pre><code class=\"language-shell\">[zk: 127.0.0.1:2181(CONNECTED) 19] create /hello-zone 'world'\nCreated /hello-zone\n</code></pre>\n<p>列出 <code>/</code> 下的子节点，确认 <code>hello-zone</code> 被创建：</p>\n<pre><code class=\"language-shell\">[zk: 127.0.0.1:2181(CONNECTED) 20] ls /\n[zookeeper, hello-zone]\n</code></pre>\n<p>列出 <code>/hello-zone</code> 的子节点，确认为空：</p>\n<pre><code class=\"language-shell\">[zk: 127.0.0.1:2181(CONNECTED) 21] ls /hello-zone\n[]\n</code></pre>\n<p>获取存储在 <code>/hello-zone</code> 节点上的数据：</p>\n<pre><code class=\"language-shell\">[zk: 127.0.0.1:2181(CONNECTED) 22] get /hello-zone\nworld\n</code></pre>\n<h2>在 Dubbo 中使用 Zookeeper</h2>\n<p>Dubbo 使用 Zookeeper 用于服务的注册发现和配置管理，在 Zookeeper 中数据的组织由下图所示：</p>\n<p><img src=\"../../img/blog/dubbo-in-zk.jpg\" alt=\"dubbo-in-zk\"></p>\n<p>首先，所有 Dubbo 相关的数据都组织在 <code>/duboo</code> 的根节点下。</p>\n<p>二级目录是服务名，如 <code>com.foo.BarService</code>。</p>\n<p>三级目录有两个子节点，分别是 <code>providers</code> 和 <code>consumers</code>，表示该服务的提供者和消费者。</p>\n<p>四级目录记录了与该服务相关的每一个应用实例的 URL 信息，在 <code>providers</code> 下的表示该服务的所有提供者，而在 <code>consumers</code> 下的表示该服务的所有消费者。举例说明，<code>com.foo.BarService</code> 的服务提供者在启动时将自己的 URL 信息注册到 <code>/dubbo/com.foo.BarService/providers</code> 下；同样的，服务消费者将自己的信息注册到相应的 <code>consumers</code> 下，同时，服务消费者会订阅其所对应的 <code>providers</code> 节点，以便能够感知到服务提供方地址列表的变化。</p>\n<h3>准备示例代码</h3>\n<p>本文的代码可以在 <a href=\"https://github.com/dubbo/dubbo-samples/tree/master/dubbo-samples-zookeeper\">https://github.com/dubbo/dubbo-samples/tree/master/dubbo-samples-zookeeper</a> 中找到。</p>\n<h4>1. 接口定义</h4>\n<p>定义一个简单的 <code>GreetingService</code> 接口，里面只有一个简单的方法 <code>sayHello</code> 向调用者问好。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">GreetingService</span> </span>{\n    <span class=\"hljs-function\">String <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(String name)</span></span>;\n}\n</code></pre>\n<h4>2. 服务端：服务实现</h4>\n<p>实现 <code>GreetingService</code> 接口，并通过 <code>@Service</code> 来标注其为 Dubbo 的一个服务。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Service</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AnnotatedGreetingService</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">GreetingService</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(String name)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"hello, \"</span> + name;\n    }\n}\n</code></pre>\n<h4>3. 服务端：组装</h4>\n<p>定义 ProviderConfiguration 来组装 Dubbo 服务。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-meta\">@EnableDubbo</span>(scanBasePackages = <span class=\"hljs-string\">\"com.alibaba.dubbo.samples.impl\"</span>)\n<span class=\"hljs-meta\">@PropertySource</span>(<span class=\"hljs-string\">\"classpath:/spring/dubbo-provider.properties\"</span>)\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ProviderConfiguration</span> </span>{}\n</code></pre>\n<p>dubbo-provider.properties 是在 Spring 应用中外置配置的方式，内容如下：</p>\n<pre><code class=\"language-properties\">dubbo.application.name=demo-provider\ndubbo.registry.address=zookeeper://$DOCKER_HOST:2181\ndubbo.protocol.name=dubbo\ndubbo.protocol.port=20880\n</code></pre>\n<p>由于 Zookeeper 运行在 Docker 容器中，需要注意的是：</p>\n<ul>\n<li>本文假定 Dubbo 应用运行在宿主机上，也就是 Docker 容器外，需要将 Zookeeper 的地址替换成环境变量 <em>${DOCKER_HOST}</em> 所指定的 IP 地址，相关信息请查阅 Docker 官方文档</li>\n<li>如果 Dubbo 应用也是 Docker 化的应用，只需要用 Zookeeper 的容器名，在本文中容器名是 <strong>zookeeper</strong></li>\n<li>当然，如果不用容器方式启动 Zookeeper，只需要简单的将这里的 <em>$DOCKER_HOST</em> 换成 <strong>localhost</strong> 即可</li>\n</ul>\n<h4>4. 服务端：启动服务</h4>\n<p>在 <code>main</code> 方法中通过启动一个 Spring Context 来对外提供 Dubbo 服务。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ProviderBootstrap</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        AnnotationConfigApplicationContext context = <span class=\"hljs-keyword\">new</span> AnnotationConfigApplicationContext(ProviderConfiguration.class);\n        context.start();\n        System.in.read();\n    }\n}\n</code></pre>\n<p>启动服务端的 <code>main</code> 方法，将会看到下面的输出，代表服务端启动成功，并在注册中心（ZookeeperRegistry）上注册了 <code>GreetingService</code> 这个服务：</p>\n<pre><code class=\"language-sh\">[03/08/18 10:50:33:033 CST] main  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Register: dubbo://192.168.99.1:20880/com.alibaba.dubbo.samples.api.GreetingService?anyhost=<span class=\"hljs-literal\">true</span>&amp;application=demo-provider&amp;dubbo=2.6.2&amp;generic=<span class=\"hljs-literal\">false</span>&amp;interface=com.alibaba.dubbo.samples.api.GreetingService&amp;methods=sayHello&amp;pid=12938&amp;side=provider&amp;timestamp=1533264631849, dubbo version: 2.6.2, current host: 192.168.99.1\n</code></pre>\n<p>通过 Zookeeper 管理终端观察服务提供方的注册信息：</p>\n<pre><code class=\"language-sh\">$ docker <span class=\"hljs-built_in\">exec</span> -it zookeeper bash\nbash-4.4<span class=\"hljs-comment\"># bin/zkCli.sh -server localhost:218</span>\nConnecting to localhost:2181\n...\nWelcome to ZooKeeper!\nJLine support is enabled\n...\n[zk: localhost:2181(CONNECTED) 0] ls /dubbo/com.alibaba.dubbo.samples.api.GreetingService/providers\n[dubbo%3A%2F%2F192.168.99.1%3A20880%2Fcom.alibaba.dubbo.samples.api.GreetingService%3Fanyhost%3Dtrue%26application%3Ddemo-provider%26dubbo%3D2.6.2%26generic%3Dfalse%26interface%3Dcom.alibaba.dubbo.samples.api.GreetingService%26methods%3DsayHello%26pid%3D12938%26side%3Dprovider%26timestamp%3D1533264631849]\n</code></pre>\n<p>可以看到刚刚启动的 Dubbo 的服务在 <code>providers</code> 节点下注册了自己的 URL 地址：<em>dubbo://192.168.99.1:20880/com.alibaba.dubbo.samples.api.GreetingService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.6.2&amp;generic=false&amp;interface=com.alibaba.dubbo.samples.api.GreetingService&amp;methods=sayHello&amp;pid=12938&amp;side=provider&amp;timestamp=1533264631849</em></p>\n<h4>5. 客户端：引用服务</h4>\n<p>通过 <code>@Reference</code> 来在客户端声明服务的引用，运行时将会通过该引用发起全程调用，而服务的目标地址将会从 Zookeeper 的 <code>provider</code> 节点下查询。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Component</span>(<span class=\"hljs-string\">\"annotatedConsumer\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GreetingServiceConsumer</span> </span>{\n    <span class=\"hljs-meta\">@Reference</span>\n    <span class=\"hljs-keyword\">private</span> GreetingService greetingService;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">doSayHello</span><span class=\"hljs-params\">(String name)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> greetingService.sayHello(name);\n    }\n}\n</code></pre>\n<h4>6. 客户端：组装</h4>\n<p>定义 ConsumerConfiguration 来组装 Dubbo 服务。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-meta\">@EnableDubbo</span>(scanBasePackages = <span class=\"hljs-string\">\"com.alibaba.dubbo.samples.action\"</span>)\n<span class=\"hljs-meta\">@PropertySource</span>(<span class=\"hljs-string\">\"classpath:/spring/dubbo-consumer.properties\"</span>)\n<span class=\"hljs-meta\">@ComponentScan</span>(value = {<span class=\"hljs-string\">\"com.alibaba.dubbo.samples.action\"</span>})\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ConsumerConfiguration</span> </span>{}\n</code></pre>\n<p>dubbo-consumer.properties 是在 Spring 应用中外置配置的方式，内容如下：</p>\n<pre><code class=\"language-properties\">dubbo.application.name=demo-consumer\ndubbo.registry.address=zookeeper://$DOCKER_HOST:2181\ndubbo.consumer.timeout=3000\n</code></pre>\n<p>与 <strong>3. 服务端：组装</strong> 相同，需要根据自己的运行环境来修改 <em>dubbo.registry.address</em> 中定义的 <em>$DOCKER_HOST</em>。请参阅步骤 3 的说明部分。</p>\n<h4>7. 客户端：发起远程调用</h4>\n<p>运行 <code>main</code> 向已经启动的服务提供方发起一次远程调用。Dubbo 会先向 Zookeeper 订阅服务地址，然后从返回的地址列表中选取一个，向对端发起调用：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ConsumerBootstrap</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ConsumerBootstrap</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>{\n        AnnotationConfigApplicationContext context = <span class=\"hljs-keyword\">new</span> AnnotationConfigApplicationContext(ConsumerConfiguration.class);\n        context.start();\n        GreetingServiceConsumer greetingServiceConsumer = context.getBean(GreetingServiceConsumer.class);\n        String hello = greetingServiceConsumer.doSayHello(<span class=\"hljs-string\">\"zookeeper\"</span>);\n        System.out.println(<span class=\"hljs-string\">\"result: \"</span> + hello);\n        System.in.read();\n    }\n}\n</code></pre>\n<p>运行结果如下：</p>\n<pre><code class=\"language-shell\">[03/08/18 01:42:31:031 CST] main  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Register: consumer://192.168.99.1/com.alibaba.dubbo.samples.api.GreetingService?application=demo-consumer&amp;category=consumers&amp;check=false&amp;default.timeout=3000&amp;dubbo=2.6.2&amp;interface=com.alibaba.dubbo.samples.api.GreetingService&amp;methods=sayHello&amp;pid=82406&amp;side=consumer&amp;timestamp=1533274951195, dubbo version: 2.6.2, current host: 192.168.99.1 #1\n[03/08/18 01:42:31:031 CST] main  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Subscribe: consumer://192.168.99.1/com.alibaba.dubbo.samples.api.GreetingService?application=demo-consumer&amp;category=providers,configurators,routers&amp;default.timeout=3000&amp;dubbo=2.6.2&amp;interface=com.alibaba.dubbo.samples.api.GreetingService&amp;methods=sayHello&amp;pid=82406&amp;side=consumer&amp;timestamp=1533274951195, dubbo version: 2.6.2, current host: 192.168.99.1 #2\n...\nresult: hello, zookeeper\n</code></pre>\n<p>说明：</p>\n<ol>\n<li><strong>Register</strong>: consumer://192.168.99.1/...&amp;<strong>category=consumers</strong>&amp;：消费者向 Zookeeper 注册自己的信息，并放在 <code>consumers</code> 节点下</li>\n<li><strong>Subscribe</strong>: consumer://192.168.99.1/...&amp;<strong>category=providers,configurators,routers</strong>&amp;：消费者同时向 Zookeeper 订阅了 <code>providers</code>、<code>configurators</code>、<code>routers</code> 节点，其中 <code>configurations</code> 与 Dubbo 配置相关，<code>routers</code> 与路由规则相关，值得注意的是 <code>providers</code> 节点的订阅，当有新的服务提供方加入后，由于订阅的关系，新的地址列表会推送给订阅方，服务的消费者也因此动态感知到了地址列表的变化。</li>\n</ol>\n<p>通过 Zookeeper 管理终端观察服务提供方的注册信息：</p>\n<pre><code class=\"language-sh\">$ docker <span class=\"hljs-built_in\">exec</span> -it zookeeper bash\nbash-4.4<span class=\"hljs-comment\"># bin/zkCli.sh -server localhost:218</span>\nConnecting to localhost:2181\n...\nWelcome to ZooKeeper!\nJLine support is enabled\n...\n[zk: localhost:2181(CONNECTED) 4] ls /dubbo/com.alibaba.dubbo.samples.api.GreetingService/consumers\n[consumer%3A%2F%2F192.168.99.1%2Fcom.alibaba.dubbo.samples.api.GreetingService%3Fapplication%3Ddemo-consumer%26category%3Dconsumers%26check%3Dfalse%26default.timeout%3D3000%26dubbo%3D2.6.2%26interface%3Dcom.alibaba.dubbo.samples.api.GreetingService%26methods%3DsayHello%26pid%3D82406%26side%3Dconsumer%26timestamp%3D1533274951195]\n</code></pre>\n<p>可以看到 Dubbo 的服务消费者在 <code>consumers</code> 节点下注册了自己的 URL 地址：<em>consumer://192.168.99.1/com.alibaba.dubbo.samples.api.GreetingService?application=demo-consumer&amp;category=providers,configurators,routers&amp;default.timeout=3000&amp;dubbo=2.6.2&amp;interface=com.alibaba.dubbo.samples.api.GreetingService&amp;methods=sayHello&amp;pid=82406&amp;side=consumer&amp;timestamp=1533274951195</em></p>\n<h2>总结</h2>\n<p>本文侧重介绍了如何在 Dubbo 应用中使用 Zookeeper 做为注册中心，当然，本文也提到了 Zookeeper 在 Dubbo 的应用场景下还承担了配置中心和服务治理的职责。本文中的 Zookeeper 是单节点、Standalone 的模式，在生产环境中为了高可用的诉求，往往会组件 Zookeeper 集群，也就是 <em>Zookeeper ensemble</em> 模式。</p>\n<p>通过本文的学习，读者可以掌握到：</p>\n<ul>\n<li>Zookeeper 的基本概念和基本用法</li>\n<li>Zookeeper 在 Dubbo 应用中的作用</li>\n<li>通过实战了解 Zookeeper 与 Dubbo 的交互</li>\n<li>Dubbo 在 Zookeeper 中服务注册、消费信息的存储方式</li>\n</ul>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><a href=\"https://www.ixiacom.com/company/blog/apache-zab%E2%80%94zookeeper-atomic-broadcast-protocol\">https://www.ixiacom.com/company/blog/apache-zab—zookeeper-atomic-broadcast-protocol</a> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p><a href=\"https://www.apache.org/dyn/closer.cgi/zookeeper/\">https://www.apache.org/dyn/closer.cgi/zookeeper/</a> <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p><a href=\"https://brew.sh\">https://brew.sh</a> <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn4\" class=\"footnote-item\"><p><a href=\"https://www.docker.com/community-edition\">https://www.docker.com/community-edition</a> <a href=\"#fnref4\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
  "title": "在 Dubbo 应用中使用 Zookeeper",
  "keywords": "Dubbo, 注册中心, Zookeeper, ZK",
  "description": "本文介绍了 Zookeeper 的基本概念、用法，以及如何在 Dubbo 应用中使用 Zookeeper 作为注册中心。"
}