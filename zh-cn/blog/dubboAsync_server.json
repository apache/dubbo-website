{
  "filename": "dubboAsync_server.md",
  "__html": "<h1>Dubbo服务端异步接口的实现背景和实践</h1>\n<h2>铺垫</h2>\n<p>建议先对Dubbo的处理过程中涉及的线程阶段先做个了解，具体可参考<a href=\"http://dubbo.apache.org/zh-cn/blog/dubboAsync_client.html\">Dubbo客户端异步接口的实现背景和使用场景</a>。</p>\n<h2>实现背景</h2>\n<p>有必要比较详细点的介绍下服务端的线程策略来加深用户在选择服务端异步的判断依据，同时有必要引出协程这一在服务端异步中常常会用到的“秘密武器”。</p>\n<h3>服务端的线程策略</h3>\n<p>Dubbo是支持多种NIO框架来做Remoting的协议实现，无论是Netty，Mina或者Grizzly，实现都大同小异，都是基于事件驱动的方式来做网络通道建立，数据流读取的，其中Grizzly对于线程策略介绍的为例，通常支持以下四种。Dubbo作为一个RPC框架，默认选择的是第一种策略，原因在于业务服务是CPU密集型还是IO阻塞性，是无法断定的，第一种策略是最保险的策略。当然，对于这几种策略有了了解后，再结合业务场景做针对性的选择是最完美的。</p>\n<ol>\n<li><strong>Worker-thread\n策略</strong></li>\n</ol>\n<p>最常用最普适的策略，其中IO线程将NIO事件处理委托给工作线程。</p>\n<p><img src=\"../../img/blog/dubboasyn_server/1.png\" alt=\"workerthread-strategy.png | center | 371x244\"></p>\n<p>此策略具有很高的伸缩性。我们可以根据需要更改IO和worker线程池的大小，并且不存在在特定NIO事件处理期间可能发生的某些问题将影响在同一IO线程上注册的其他通道的风险。\n缺点是有线程上下文切换的代价。</p>\n<ol start=\"2\">\n<li><strong>Same-thread策略</strong></li>\n</ol>\n<p>可能是最有效的策略。与第一种不同，同一线程处理当前线程中的NIO事件，避免了昂贵的线程上下文切换。</p>\n<p><img src=\"../../img/blog/dubboasyn_server/2.png\" alt=\"samethread-strategy.png | center | 389x264\"></p>\n<p>考虑到这个策略可以调整IO线程池大小，是具备可伸缩性；缺点也很明显，它要求业务处理中一定不要有阻塞处理，因为它可能会阻止在同一个IO线程上发生的其他NIO事件的处理。</p>\n<ol start=\"3\">\n<li>dynamic__策略__</li>\n</ol>\n<p>如前所述，前两种策略具有明显的优点和缺点。但是，如果策略可以尝试在运行时根据当前条件（负载，收集的统计信息等）巧妙地交换它们，何如？</p>\n<p><img src=\"../../img/blog/dubboasyn_server/3.png\" alt=\"dynamic-strategy.png | center | 361x387\"></p>\n<p>这种策略可能会带来很多好处，能更好地控制资源，前提是不要使条件评估逻辑过载，防止评估判断的复杂性会使这种策略效率低下。\n多说一句，希望大家对这个策略多留意一下，它可能是Dubbo服务端异步方式的最佳搭配。我也多扯个淡，这几天关注了些adaptive XX或者predictive XX，这里看到dynamic真是亲切，Dubbo作为产品级生产级的微服务解决方案，是必须既要adaptive，又要predictive，还要dynamic，哈哈。</p>\n<ol start=\"4\">\n<li>__Leader-follower __\n策略</li>\n</ol>\n<p><img src=\"../../img/blog/dubboasyn_server/4.png\" alt=\"leaderfollower-strategy.png | center | 443x286\"></p>\n<p>此策略类似于第一种，但它不是将NIO事件处理传递给worker线程，而是通过将控制传递给Selector给工作线程，并将实际NIO事件处理当前IO线程中。这种策略其实是把worker和IO线程阶段做了混淆，个人不建议。</p>\n<h3>协程与线程</h3>\n<p>在CPU资源的管理上，OS和JVM的最小调度单位都是线程，业务应用通过扩展实现的协程包是可以具备独立的运行单位，事实上也是基于线程来做的，核心应该是遇到IO阻塞，或者锁等待时，保存上下文，然后切换到另一个协程。至于说的协程开销低，能更高效的使用CPU，这些考虑到协程库的用户态实现和上下文设计是支持的，但也建议大家结合实际业务场景做性能测试。</p>\n<p><strong>在默认的Dubbo线程策略中，是有worker线程池来执行业务逻辑，但也常常会发生ThreadPool Full的问题，为了尽快释放worker线程，在业务服务的实现中会另起线程。代价是再次增加线程上下文切换，同时需要考虑链路级别的数据传送(比如tracing信息)和流控的出口控制等等。当然，如果Dubbo能够切换到Same-thread策略，再配合协程库的支持，服务端异步是一种值得推荐的使用方式。</strong></p>\n<h2>示例</h2>\n<p>通过示例来体验下Dubbo服务端异步接口。Demo代码请访问github之<a href=\"https://github.com/dubbo/dubbo-samples/tree/master/dubbo-samples-notify\">https://github.com/dubbo/dubbo-samples/tree/master/dubbo-samples-notify</a>。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AsyncServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">AsyncService</span> </span>{\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(String name)</span> </span>{\n        System.out.println(<span class=\"hljs-string\">\"Main sayHello() method start.\"</span>);\n        <span class=\"hljs-keyword\">final</span> AsyncContext asyncContext = RpcContext.startAsync();\n        <span class=\"hljs-keyword\">new</span> Thread(() -&gt; {\n            asyncContext.signalContextSwitch();\n            System.out.println(<span class=\"hljs-string\">\"Attachment from consumer: \"</span> + RpcContext.getContext().getAttachment(<span class=\"hljs-string\">\"consumer-key1\"</span>));\n            System.out.println(<span class=\"hljs-string\">\"    -- Async start.\"</span>);\n            <span class=\"hljs-keyword\">try</span> {\n                Thread.sleep(<span class=\"hljs-number\">500</span>);\n            } <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\n                e.printStackTrace();\n            }\n            asyncContext.write(<span class=\"hljs-string\">\"Hello \"</span> + name + <span class=\"hljs-string\">\", response from provider.\"</span>);\n            System.out.println(<span class=\"hljs-string\">\"    -- Async end.\"</span>);\n        }).start();\n        System.out.println(<span class=\"hljs-string\">\"Main sayHello() method end.\"</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"hello, \"</span> + name;\n    }\n\n</code></pre>\n<h2>实践建议</h2>\n<ul>\n<li>不用迷信服务端异步</li>\n<li>不要迷信服务端异步</li>\n<li>服务端异步在Event-Driven或者Reactive面前基本是伪命题.<span data-type=\"color\" style=\"color:rgb(36, 41, 46)\"><span data-type=\"background\" style=\"background-color:rgb(255, 255, 255)\">补充下原因：服务端异步初衷是说Dubbo的服务端业务线程数（默认是200个）不够，但其实在event-driven模式下， 200个肯定不需要那么多，只需要cpu核数那样就可以，只要业务实现是非阻塞的纯异步方式的非阻塞的业务逻辑处理，用再多的线程数就是浪费资源。</span></span></li>\n<li>要用服务端异步，建议服务端的线程策略采用same thread模式+协程包</li>\n</ul>\n<h2>小结</h2>\n<p>Dubbo在支持业务应用时，会碰到千奇百怪的需求场景，服务端异步为用户提供了一种解决ThreadPool Full的方案。当发生ThreadPool Full的情况下，如果当前系统瓶颈是CPU，不建议用这种方案；如果系统Load不高，调高worker的线程数目，或者采用服务端异步，都是可以考虑的。</p>\n",
  "link": "/zh-cn/blog/dubboAsync_server.html",
  "meta": {
    "title": "Dubbo客户端异步接口的实现背景和实践",
    "keywords": "Dubbo, 异步, Reactive",
    "description": "Dubbo服务端异步接口的实现背景和实践"
  }
}