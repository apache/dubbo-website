{
  "filename": "introduction-to-dubbo-qos.md",
  "__html": "<h1>通过QoS对服务进行动态控制</h1>\n<p>QoS，全称为<code>Quality of Service</code>, 是常见于网络设备中的一个术语 ，例如在路由器中，可以通过Qos动态的调整和控制某些端口的权重，从而优先的保障运行在这些端口上的服务质量。</p>\n<p>在Dubbo中，QoS这个概念被用于动态的对服务进行查询和控制。例如对获取当前提供和消费的所有服务，以及对服务进行动态的上下线，即从注册中心上进行注册和反注册操作。</p>\n<h3>QoS工作机制</h3>\n<p>从Dubbo 2.5.8开始，默认引入了Qos功能，默认处于启动状态。所有的QoS功能被抽象成一个个的命令，通过执行这些命令，Qos会返回响应的结果。</p>\n<blockquote>\n<p>Qos功能基于Netty4实现，在Dubbo 2.6.x之前的版本中，默认依赖的是Netty3，因此需要显示的添加Netty4的依赖，才能确保Netty4正常工作。如果使用http://start.dubbo.io自动生成的Dubbo应用，则无需添加额外的配置，因为已经默认加上了Netty4的依赖。</p>\n</blockquote>\n<p>Qos的工作机制如下图所示：</p>\n<p><img src=\"../../img/blog/qos-architecture.png\" alt=\"undefined\"></p>\n<ol>\n<li>启动并监听一个端口，默认端口是22222</li>\n<li>识别目标请求的协议是Http或者是Telnet，根据协议不同动态添加对应的处理器</li>\n<li>针对不同的协议进行解码，解析出需要执行的命令</li>\n<li>执行命令并返回结果</li>\n</ol>\n<h3>QoS命令</h3>\n<p>QoS目前支持的命令包括：</p>\n<ul>\n<li>help: 帮助命令，列出</li>\n<li>ls: 列出当前所有的正在提供的服务，以及消费的服务</li>\n<li>online: 动态将某个或全部服务向注册中心进行注册</li>\n<li>offline: 动态将某个或全部服务从注册中心摘除（反注册）</li>\n<li>quit: 退出当前telnet会话</li>\n</ul>\n<p>下面，我们具体来操作一下如何通过用QoS对服务进行动态控制。</p>\n<h4>通过Telnet方式访问QoS</h4>\n<p>假设我们的Dubbo服务端已经启动，我们通过Telnet方式进行连接：</p>\n<pre><code>$ telnet localhost 22222\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n  ?????????  ???    ??  ???????????  ???????????   ????????\n  ???   ???? ???    ???   ???    ???   ???    ??? ???    ???\n  ???    ??? ???    ???   ???    ???   ???    ??? ???    ???\n  ???    ??? ???    ???  ??????????   ??????????  ???    ???\n  ???    ??? ???    ??? ???????????  ???????????  ???    ???\n  ???    ??? ???    ???   ???    ???   ???    ??? ???    ???\n  ???   ???? ???    ???   ???    ???   ???    ??? ???    ???\n  ?????????  ?????????  ???????????  ???????????   ????????\n\n\ndubbo&gt;\n</code></pre>\n<p>连接成功后，会出现<code>dubbo&gt;</code>提示符，此时输入<code>help</code>命令</p>\n<pre><code>dubbo&gt;help\n+---------+----------------------------------------------------------------------------------+\n|    help | help command                                                                     |\n+---------+----------------------------------------------------------------------------------+\n|      ls | ls service                                                                       |\n+---------+----------------------------------------------------------------------------------+\n| offline | offline dubbo                                                                    |\n+---------+----------------------------------------------------------------------------------+\n|  online | online dubbo                                                                     |\n+---------+----------------------------------------------------------------------------------+\n|    quit | quit telnet console                                                              |\n+---------+----------------------------------------------------------------------------------+\n\ndubbo&gt;\n</code></pre>\n<p>会列出当前所有可用的命令，及相应的说明。</p>\n<p>也可以对单个命令进行help操作，可以看到该命令对应的示例</p>\n<pre><code>dubbo&gt;help online\n+--------------+----------------------------------------------------------------------------------+\n| COMMAND NAME | online                                                                           |\n+--------------+----------------------------------------------------------------------------------+\n|      EXAMPLE | online dubbo                                                                     |\n|              | online xx.xx.xxx.service                                                         |\n+--------------+----------------------------------------------------------------------------------+\n</code></pre>\n<p>通过<code>ls</code> 查看当前的服务状态</p>\n<pre><code>dubbo&gt;ls\nAs Provider side:\n+------------------------------------------+---+\n|           Provider Service Name          |PUB|\n+------------------------------------------+---+\n|org.apache.dubbo.demo.provider.DemoService| Y |\n+------------------------------------------+---+\nAs Consumer side:\n+---------------------+---+\n|Consumer Service Name|NUM|\n+---------------------+---+\n</code></pre>\n<p>可以看到，在服务端可以看到一个服务<code>org.apache.dubbo.demo.provider.DemoService</code>，第二列里面的<code>PUB=Y</code>代表改服务已经发布到注册中心，可供消费端进行调用。</p>\n<p>假设我们需要动态的对该服务进行下线操作，可以通过<code>offline</code>命令来完成</p>\n<pre><code>dubbo&gt;offline org.apache.dubbo.demo.provider.DemoService\nOK\n</code></pre>\n<p>可以看到命令返回了OK，我们再通过ls看下当前的状态：</p>\n<pre><code>dubbo&gt;ls\nAs Provider side:\n+------------------------------------------+---+\n|           Provider Service Name          |PUB|\n+------------------------------------------+---+\n|org.apache.dubbo.demo.provider.DemoService| N |\n+------------------------------------------+---+\nAs Consumer side:\n+---------------------+---+\n|Consumer Service Name|NUM|\n+---------------------+---+\n</code></pre>\n<p>可以看到<code>org.apache.dubbo.demo.provider.DemoService</code>的<code>PUB</code>已经被设置成了<code>N</code>。</p>\n<p>通过<code>quit</code>命令退出当前的telnet会话：</p>\n<pre><code>dubbo&gt;quit\nBYE!\nConnection closed by foreign host.\n</code></pre>\n<h4>通过HTTP方式访问QOS</h4>\n<p>在上面的例子中，我们已经对<code>org.apache.dubbo.demo.provider.DemoService</code>进行了下线操作，下面，我们通过对Http方式对上面的服务进行注册操作：</p>\n<pre><code>$ curl -i http://localhost:22222/online?service=org.apache.dubbo.demo.provider.DemoService\nHTTP/1.1 200 OK\nContent-Type: text/plain\nContent-Length: 2\n\nOK%\n</code></pre>\n<blockquote>\n<p>注意online操作对应的参数，需要以<code>key=value</code>的形式提供，但实际上key会被忽略</p>\n</blockquote>\n<p>看到操作返回了OK，下面通过ls命令查看下当前的状态</p>\n<pre><code>$ curl -i http://localhost:22222/ls\nHTTP/1.1 200 OK\nContent-Type: text/plain\nContent-Length: 365\n\nAs Provider side:\n+------------------------------------------+---+\n|           Provider Service Name          |PUB|\n+------------------------------------------+---+\n|org.apache.dubbo.demo.provider.DemoService| Y |\n+------------------------------------------+---+\nAs Consumer side:\n+---------------------+---+\n|Consumer Service Name|NUM|\n+---------------------+---+\n</code></pre>\n<p>可以看到服务的<code>PUB</code>状态已经变成了<code>Y</code>。</p>\n<h3>QoS相关参数说明</h3>\n<p>QoS提供了一些启动参数，来对启动进行配置，他们主要包括：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>qosEnable</td>\n<td>是否启动QoS</td>\n<td>true</td>\n</tr>\n<tr>\n<td>qosPort</td>\n<td>启动QoS绑定的端口</td>\n<td>22222</td>\n</tr>\n<tr>\n<td>qosAcceptForeignIp</td>\n<td>是否允许远程访问</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注意，从2.6.4/2.7.0开始，qosAcceptForeignIp默认配置改为false，如果qosAcceptForeignIp设置为true，有可能带来安全风险，请仔细评估后再打开。</p>\n</blockquote>\n<p>QoS参数可以通过如下方式进行配置</p>\n<ul>\n<li>系统属性</li>\n<li>dubbo.properties</li>\n<li>XML方式</li>\n<li>Spring-boot自动装配方式</li>\n</ul>\n<p>其中，上述方式的优先顺序为系统属性 &gt; dubbo.properties &gt; XML/Spring-boot自动装配方式。</p>\n<h4>使用系统属性方式进行配置</h4>\n<pre><code>-Ddubbo.application.qos.enable=true\n-Ddubbo.application.qos.port=33333\n-Ddubbo.application.qos.accept.foreign.ip=false\n</code></pre>\n<h4>使用dubbo.properties文件进行配置</h4>\n<p>在项目的<code>src/main/resources</code>目录下添加dubbo.properties文件，内容如下:</p>\n<pre><code>dubbo.application.qos.enable=true\ndubbo.application.qos.port=33333\ndubbo.application.qos.accept.foreign.ip=false\n</code></pre>\n<h4>使用XML方法进行配置</h4>\n<p>如果要通过XML配置响应的QoS相关的参数，可以进行如下配置：</p>\n<pre><code class=\"language-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?</span>xml version=<span class=\"hljs-string\">\"1.0\"</span> encoding=<span class=\"hljs-string\">\"UTF-8\"</span><span class=\"hljs-meta\">?&gt;</span></span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n       <span class=\"hljs-attr\">xmlns:dubbo</span>=<span class=\"hljs-string\">\"http://dubbo.apache.org/schema/dubbo\"</span>\n       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:application</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"demo-provider\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:parameter</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">\"qos.enable\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:parameter</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">\"qos.accept.foreign.ip\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"false\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:parameter</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">\"qos.port\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"33333\"</span>/&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dubbo:application</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"multicast://224.5.6.7:1234\"</span>/&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:protocol</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo\"</span> <span class=\"hljs-attr\">port</span>=<span class=\"hljs-string\">\"20880\"</span>/&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"org.apache.dubbo.demo.provider.DemoService\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"demoService\"</span>/&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"demoService\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.apache.dubbo.demo.provider.DemoServiceImpl\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<h4>使用spring-boot自动装配方式配置</h4>\n<p>如果是spring-boot的应用，可以在<code>application.properties</code>或者<code>application.yml</code>上配置:</p>\n<pre><code>dubbo.application.qosEnable=true\ndubbo.application.qosPort=33333\ndubbo.application.qosAcceptForeignIp=false\n</code></pre>\n"
}