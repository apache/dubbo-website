{
  "filename": "introduction-to-dubbo-url.md",
  "__html": "<h1>Dubbo 中的 URL 统一模型</h1>\n<h3>定义</h3>\n<p>在不谈及 dubbo 时，我们大多数人对 URL 这个概念并不会感到陌生。统一资源定位器 (<a href=\"https://www.ietf.org/rfc/rfc1738.txt\">RFC1738</a>――Uniform Resource Locators (URL)）应该是最广为人知的一个 RFC 规范，它的定义也非常简单</p>\n<blockquote>\n<p>因特网上的可用资源可以用简单字符串来表示，该文档就是描述了这种字符串的语法和语\n义。而这些字符串则被称为：“统一资源定位器”（URL）</p>\n</blockquote>\n<p><strong>一个标准的 URL 格式</strong>至多可以包含如下的几个部分</p>\n<pre><code>protocol://username:password@host:port/path?key=value&amp;key=value\n</code></pre>\n<p><strong>一些典型 URL</strong></p>\n<pre><code>http://www.facebook.com/friends?param1=value1&amp;amp;param2=value2\nhttps://username:password@10.20.130.230:8080/list?version=1.0.0\nftp://username:password@192.168.1.7:21/1/read.txt\n</code></pre>\n<p>当然，也有一些<strong>不太符合常规的 URL</strong>，也被归类到了 URL 之中</p>\n<pre><code>192.168.1.3:20880\nurl protocol = null, url host = 192.168.1.3, port = 20880, url path = null\n\nfile:///home/user1/router.js?type=script\nurl protocol = file, url host = null, url path = home/user1/router.js\n\nfile://home/user1/router.js?type=script&lt;br&gt;\nurl protocol = file, url host = home, url path = user1/router.js\n\nfile:///D:/1/router.js?type=script\nurl protocol = file, url host = null, url path = D:/1/router.js\n\nfile:/D:/1/router.js?type=script\n同上 file:///D:/1/router.js?type=script\n\n/home/user1/router.js?type=script\nurl protocol = null, url host = null, url path = home/user1/router.js\n\nhome/user1/router.js?type=script\nurl protocol = null, url host = home, url path = user1/router.js\n</code></pre>\n<h3>Dubbo 中的 URL</h3>\n<p>在 dubbo 中，也使用了类似的 URL，主要用于在各个扩展点之间传递数据，组成此 URL 对象的具体参数如下:</p>\n<ul>\n<li>protocol：一般是 dubbo 中的各种协议 如：dubbo thrift http zk</li>\n<li>username/password：用户名/密码</li>\n<li>host/port：主机/端口</li>\n<li>path：接口名称</li>\n<li>parameters：参数键值对</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">URL</span><span class=\"hljs-params\">(String protocol, String username, String password, String host, <span class=\"hljs-keyword\">int</span> port, String path, Map&lt;String, String&gt; parameters)</span> </span>{\n   <span class=\"hljs-keyword\">if</span> ((username == <span class=\"hljs-keyword\">null</span> || username.length() == <span class=\"hljs-number\">0</span>) \n         &amp;&amp; password != <span class=\"hljs-keyword\">null</span> &amp;&amp; password.length() &gt; <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"Invalid url, password without username!\"</span>);\n   }\n   <span class=\"hljs-keyword\">this</span>.protocol = protocol;\n   <span class=\"hljs-keyword\">this</span>.username = username;\n   <span class=\"hljs-keyword\">this</span>.password = password;\n   <span class=\"hljs-keyword\">this</span>.host = host;\n   <span class=\"hljs-keyword\">this</span>.port = (port &lt; <span class=\"hljs-number\">0</span> ? <span class=\"hljs-number\">0</span> : port);\n   <span class=\"hljs-keyword\">this</span>.path = path;\n   <span class=\"hljs-comment\">// trim the beginning \"/\"</span>\n   <span class=\"hljs-keyword\">while</span>(path != <span class=\"hljs-keyword\">null</span> &amp;&amp; path.startsWith(<span class=\"hljs-string\">\"/\"</span>)) {\n       path = path.substring(<span class=\"hljs-number\">1</span>);\n   }\n   <span class=\"hljs-keyword\">if</span> (parameters == <span class=\"hljs-keyword\">null</span>) {\n       parameters = <span class=\"hljs-keyword\">new</span> HashMap&lt;String, String&gt;();\n   } <span class=\"hljs-keyword\">else</span> {\n       parameters = <span class=\"hljs-keyword\">new</span> HashMap&lt;String, String&gt;(parameters);\n   }\n   <span class=\"hljs-keyword\">this</span>.parameters = Collections.unmodifiableMap(parameters);\n}\n</code></pre>\n<p>可以看出，dubbo 认为 protocol，username，passwored，host，port，path 是主要的 URL 参数，其他键值对存放在 parameters 之中。</p>\n<p><strong>一些典型的 Dubbo URL</strong></p>\n<pre><code>dubbo://192.168.1.6:20880/moe.cnkirito.sample.HelloService?timeout=3000\n描述一个 dubbo 协议的服务\n\nzookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=demo-consumer&amp;dubbo=2.0.2&amp;interface=org.apache.dubbo.registry.RegistryService&amp;pid=1214&amp;qos.port=33333&amp;timestamp=1545721981946\n描述一个 zookeeper 注册中心\n\nconsumer://30.5.120.217/org.apache.dubbo.demo.DemoService?application=demo-consumer&amp;category=consumers&amp;check=false&amp;dubbo=2.0.2&amp;interface=org.apache.dubbo.demo.DemoService&amp;methods=sayHello&amp;pid=1209&amp;qos.port=33333&amp;side=consumer&amp;timestamp=1545721827784\n描述一个消费者\n</code></pre>\n<p>可以说，任意的一个领域中的一个实现都可以认为是一类 URL，dubbo 使用 URL 来统一描述了元数据，配置信息，贯穿在整个框架之中。</p>\n<h3>URL 相关的生命周期</h3>\n<h4>解析服务</h4>\n<p>基于 dubbo.jar 内的 <code>META-INF/spring.handlers</code> 配置，Spring 在遇到 dubbo 名称空间时，会回调 <code>DubboNamespaceHandler</code>。</p>\n<p>所有 dubbo 的标签，都统一用 <code>DubboBeanDefinitionParser</code> 进行解析，基于一对一属性映射，将 XML 标签解析为 Bean 对象。</p>\n<p>在 <code>ServiceConfig.export()</code> 或 <code>ReferenceConfig.get()</code> 初始化时，将 Bean 对象转换 URL 格式，所有 Bean 属性转成 URL 的参数。</p>\n<p>然后将 URL 传给协议扩展点，基于扩展点自适应机制，根据 URL 的协议头，进行不同协议的服务暴露或引用。</p>\n<h4>暴露服务</h4>\n<p><strong>1. 只暴露服务端口：</strong></p>\n<p>在没有注册中心，直接暴露提供者的情况下，<code>ServiceConfig</code> 解析出的 URL 的格式为：<code>dubbo://service-host/com.foo.FooService?version=1.0.0</code>。</p>\n<p>基于扩展点自适应机制，通过 URL 的 <code>dubbo://</code> 协议头识别，直接调用 <code>DubboProtocol</code>的 <code>export()</code> 方法，打开服务端口。</p>\n<p><strong>2. 向注册中心暴露服务：</strong></p>\n<p>在有注册中心，需要注册提供者地址的情况下，<code>ServiceConfig</code> 解析出的 URL 的格式为: <code>registry://registry-host/org.apache.dubbo.registry.RegistryService?export=URL.encode(&quot;dubbo://service-host/com.foo.FooService?version=1.0.0&quot;)</code>，</p>\n<p>基于扩展点自适应机制，通过 URL 的 <code>registry://</code> 协议头识别，就会调用 <code>RegistryProtocol</code> 的 <code>export()</code> 方法，将 <code>export</code> 参数中的提供者 URL，先注册到注册中心。</p>\n<p>再重新传给 <code>Protocol</code> 扩展点进行暴露： <code>dubbo://service-host/com.foo.FooService?version=1.0.0</code>，然后基于扩展点自适应机制，通过提供者 URL 的 <code>dubbo://</code> 协议头识别，就会调用 <code>DubboProtocol</code> 的 <code>export()</code> 方法，打开服务端口。</p>\n<h4>引用服务</h4>\n<p><strong>1. 直连引用服务：</strong></p>\n<p>在没有注册中心，直连提供者的情况下，<code>ReferenceConfig</code> 解析出的 URL 的格式为：<code>dubbo://service-host/com.foo.FooService?version=1.0.0</code>。</p>\n<p>基于扩展点自适应机制，通过 URL 的 <code>dubbo://</code> 协议头识别，直接调用 <code>DubboProtocol</code> 的 <code>refer()</code> 方法，返回提供者引用。</p>\n<p><strong>2. 从注册中心发现引用服务：</strong></p>\n<p>在有注册中心，通过注册中心发现提供者地址的情况下，<code>ReferenceConfig</code> 解析出的 URL 的格式为：<code>registry://registry-host/org.apache.dubbo.registry.RegistryService?refer=URL.encode(&quot;consumer://consumer-host/com.foo.FooService?version=1.0.0&quot;)</code>。</p>\n<p>基于扩展点自适应机制，通过 URL 的 <code>registry://</code> 协议头识别，就会调用 <code>RegistryProtocol</code> 的 <code>refer()</code> 方法，基于 <code>refer</code> 参数中的条件，查询提供者 URL，如： <code>dubbo://service-host/com.foo.FooService?version=1.0.0</code>。</p>\n<p>基于扩展点自适应机制，通过提供者 URL 的 <code>dubbo://</code> 协议头识别，就会调用 <code>DubboProtocol</code> 的 <code>refer()</code> 方法，得到提供者引用。</p>\n<p>然后 <code>RegistryProtocol</code> 将多个提供者引用，通过 <code>Cluster</code> 扩展点，伪装成单个提供者引用返回。</p>\n<h3>URL 统一模型的意义</h3>\n<p>对于 dubbo 中的 URL，有人理解为配置总线，有人理解为统一配置模型，说法虽然不同，但都是在表达一个意思，这样的 URL 在 dubbo 中被当做是<a href=\"http://dubbo.apache.org/zh-cn/docs/dev/contract.html\">公共契约</a>，所有扩展点参数都包含 URL 参数，URL 作为上下文信息贯穿整个扩展点设计体系。</p>\n<p>在没有 URL 之前，只能以字符串传递参数，不停的解析和拼装，导致相同类型的接口，参数时而 Map, 时而 Parameters 类包装：</p>\n<pre><code class=\"language-java\">export(String url) \ncreateExporter(String host, <span class=\"hljs-keyword\">int</span> port, Parameters params)\n</code></pre>\n<p>使用 URL 一致性模型：</p>\n<pre><code class=\"language-java\">export(URL url) \ncreateExporter(URL url)\n</code></pre>\n<p>在最新的 dubbo 代码中，我们可以看到大量使用 URL 来进行上下文之间信息的传递，这样的好处是显而易见的：</p>\n<ol>\n<li>使得代码编写者和阅读者能够将一系列的参数联系起来，进而形成规范，使得代码易写，易读。</li>\n<li>可扩展性强，URL 相当于参数的集合(相当于一个 Map)，他所表达的含义比单个参数更丰富，当我们在扩展代码时，可以将新的参数追加到 URL 之中，而不需要改变入参，返参的结构。</li>\n<li>统一模型，它位于 org.apache.dubbo.common 包中，各个扩展模块都可以使用它作为参数的表达形式，简化了概念，降低了代码的理解成本。</li>\n</ol>\n<p>如果你能够理解 final 契约和 restful 契约，那我相信你会很好地理解 URL 契约。契约的好处我还是啰嗦一句：大家都这么做，就形成了默契，沟通是一件很麻烦的事，统一 URL 模型可以省去很多沟通成本，这边是 URL 统一模型存在的意义。</p>\n",
  "link": "/zh-cn/blog/introduction-to-dubbo-url.html",
  "meta": {
    "title": "Dubbo 中的 URL 统一模型",
    "keywords": "Dubbo, URL",
    "description": "URL 是 Dubbo 种一个重要的领域模型，了解它可以更加轻松的理解 Dubbo 的设计理念。"
  }
}
