<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dubbo-metrics 指标模块源码浅析 on Apache Dubbo</title><link>https://dubbo.apache.org/zh-cn/blog/java/codeanalysis/metrics/</link><description>Recent content in dubbo-metrics 指标模块源码浅析 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/blog/java/codeanalysis/metrics/index.xml" rel="self" type="application/rss+xml"/><item><title>引言</title><link>https://dubbo.apache.org/zh-cn/blog/2023/04/28/%E5%BC%95%E8%A8%80/</link><pubDate>Fri, 28 Apr 2023 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/blog/2023/04/28/%E5%BC%95%E8%A8%80/</guid><description>引言 服务指标统计体系是 Dubbo 可观测能力的重要组成部分。 dubbo-metrics 指标模块旨在将 dubbo 内部零散的 Metrics 相关类综合到一个单独的模块中，提供一套更加完善、全面、可拓展、解耦合的指标采样-统计-导出解决方案。
dubbo-metrics 模块包括：
dubbo-metrics-api 公用接口包 dubbo-metrics-prometheus 普罗米修斯适配包 dubbo-metrics-metadata 元数据中心指标监控包 dubbo-metrics-registry 注册中心指标监控包 dubbo-metrics-config-center 配置中心指标监控包 dubbo-metrics-default 接口默认实现包，提供dubbo内部核心指标的监控功能 在设计上，dubbo-metrics 深入应用事件驱动编程思想，总体体现出下图的事件处理链路：
在拓展上，dubbo-metrics 抽象了一套指标导出接口与抽象实现，可实现兼容多种指标统计监控中心，默认提供了普罗米修斯实现。</description></item><item><title>1-指标样本的收集与存储</title><link>https://dubbo.apache.org/zh-cn/blog/2023/04/28/1-%E6%8C%87%E6%A0%87%E6%A0%B7%E6%9C%AC%E7%9A%84%E6%94%B6%E9%9B%86%E4%B8%8E%E5%AD%98%E5%82%A8/</link><pubDate>Fri, 28 Apr 2023 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/blog/2023/04/28/1-%E6%8C%87%E6%A0%87%E6%A0%B7%E6%9C%AC%E7%9A%84%E6%94%B6%E9%9B%86%E4%B8%8E%E5%AD%98%E5%82%A8/</guid><description>一、指标样本的收集与存储 指标样本收集 指标收集器（Collector）是指标对外导出的入口。最终导出到指标统计中心的指标采样实际均直接来源于各个指标采样器。因此，我们将从各个收集器实现开始，分析 dubbo-metrics 模块是如何工作的。
指标收集操作定义在 MetricsCollector （指标采集器，SPI）接口中，可以通过它的实现收集某一类的指标样本（MetricSample）。它主要有以下实现，对应着不同类型的指标：
ConfigCenterMetricsCollector 配置中心操作相关指标收集器 ，收集配置信息的变化次数 MetadataMetricsCollector 元数据中心操作相关指标收集器，收集提供者、消费者对元数据中心操作（推送数据、拉取数据）情况的计数、耗时统计。 RegistryMetricsCollector 注册中心相关操作指标收集器，收集应用级、接口级服务注册成功、失败、耗时的相关计数。 DefaultMetricsCollector 默认指标收集器，内置多种采样器来完成不同类型的内部指标采样。 HistogramMetricsCollector 直方图指标收集器，利用 micrometer API 处理直方图类型的指标，它的实现较为特殊。 配置中心 、元数据、服务注册及默认指标收集器均实现自混合指标收集器（CombMetricsCollector）。混合指标收集器实现了 ApplicationMetricsCollector 、ServiceMetricsCollector 、MethodMetricsCollector 三个接口（定义按应用名收集、按应用名-服务名收集和按应用-方法名收集指标的操作），因此它们可以进行应用、服务和方法三个层面的指标收集工作。
默认指标收集器的特点是通过内部的指标采样器（MetricsSampler）完成指标事件的处理操作，而不是其它收集器的指标监听器（MetricsListener）
直方图指标收集器则负责收集直方图类型的指标。它利用直方图度量寄存器（HistogramMetricRegister）借助 micrometer API 完成直方图样本的采集。直方图类型包括百分位数、服务水平目标、最小预期值、最大预期值、统计数据分布有效期等。
Collector的继承关系：
可以看出，每个指标收集器都具有来自 MetricsListener 的监听指标事件的能力。为什么指标收集器本身需要监听指标事件？ 在后文中，我们将讨论指标收集器是如何利用内置的子转发器（SubDispatcher）转发指标事件，并完成计数处理的。
指标样本存储 前文中，我们了解了指标收集的入口是指标收集器（Collector）。那么各个收集器从哪里收集指标样本？
对于配置中心、元数据中心、 注册中心的指标收集器：
它们分别负责采集三大中心模块的指标，均继承于混合数据收集器（CombMetricsCollector），而混合数据收集器中实现了 export 方法 。
混合数据收集器内部有一个基本数据聚合器（BaseStatComposite），它实现了 MetricsExport 接口，该接口定义了指标导出操作，混合数据收集器则利用它的 export 方法导出指标。
基本数据聚合器是一个抽象类，内有三个属性：ApplicationStatComposite 、ServiceStatComposite 和 RtStatComposite 。它们的作用：
ApplicationStatComposite 应用数据聚合器，应用程序级别相关事件的计数 ，根据指标Key（ MetricsKey ）和应用名统计指标，提供计数递增操作 ServiceStatComposite 服务数据聚合器，服务级别相关事件的计数，根据指标Key、应用名和服务名统计指标，提供计数递增操作 MethodStatComposite 方法数据聚合器，方法级别相关事件的计数，存储各方法RPC调用相关计数。 RtStatComposite，Rt（Response Time，响应时间）数据聚合器，包括应用级别和服务级别。根据应用名、服务名、注册的指标名及相应相应时间统计指标，提供添加操作。 对于以上四个聚合器，他们的职责就是存储某一类型的采样样本。
基本数据聚合器 （BaseStatComposite） 对这三个子聚合器的操作进行了简单整合，统一提供给外界。而混合指标收集器（CombMetricsCollector） 也基本保留了内部基本数据聚合器的所有操作，将其封装为 increment、setNum、addRt 三个方法（及它们的重载，分别收集应用级数据和服务级数据）向上提供。外部组件可以直接调用这些收集器完成指标更新操作。</description></item><item><title>2-指标收集器的指标采集流程</title><link>https://dubbo.apache.org/zh-cn/blog/2023/04/28/2-%E6%8C%87%E6%A0%87%E6%94%B6%E9%9B%86%E5%99%A8%E7%9A%84%E6%8C%87%E6%A0%87%E9%87%87%E9%9B%86%E6%B5%81%E7%A8%8B/</link><pubDate>Fri, 28 Apr 2023 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/blog/2023/04/28/2-%E6%8C%87%E6%A0%87%E6%94%B6%E9%9B%86%E5%99%A8%E7%9A%84%E6%8C%87%E6%A0%87%E9%87%87%E9%9B%86%E6%B5%81%E7%A8%8B/</guid><description>二、指标收集器的指标采集流程 在前文中，我们了解了指标收集器（Collector）最终收集的数据只有三个来源：
实现自混合指标收集器（CombMetricsCollector） 的元数据指标收集器（MetadataMetricsCollector）和注册中心指标收集器（RegistryMetricsCollector），它们的样本均存储在内置的基本数据聚合器中。具体来说，是基本数据聚合器下的四个子数据聚合器中：
DefaultMetricsCollector 默认指标收集器，它的样本不仅来自于指标事件，还来自其下采样器（Sampler） 中，用于Dubbo核心模块的采样。
HistogramMetricsCollector 直方图指标收集器，由于采样数据的特殊性，它的样本直接以 Map 存储在内部。
接下来，我们需要明确它们存储的指标是如何添加进去的。
1，服务治理模块的指标采集流程 通过之前的分析，我们知道服务治理模块的指标采集器均实现自混合指标收集器（CombMetricsCollector）。它对基本数据聚合器（BaseStatComposite） 的大部分方法做了封装。基本数据聚合器又封装了四个负责存储不同类型指标采样的子聚合器。
这四个子聚合器包括：
ApplicationStatComposite ServiceStatComposite MethodStatComposite RtStatComposite 实际上，元数据、注册中心指标收集器更新、添加指标的操作都是通过混合指标收集器暴露的方法进行。而具体的，是通过 setNum、increment、addRt 这三个方法（及它们的重载）进行操作。
//CombMetricsCollector ... private final BaseStatComposite stats; ... @Override public void setNum(MetricsKey metricsKey, String applicationName, String serviceKey, int num) { this.stats.setServiceKey(metricsKey, applicationName, serviceKey, num); } @Override public void increment(String applicationName, MetricsKey metricsKey) { this.stats.incrementApp(metricsKey, applicationName, SELF_INCREMENT_SIZE); } public void increment(String applicationName, String serviceKey, MetricsKey metricsKey, int size) { this.</description></item><item><title>3-指标监听注册梳理</title><link>https://dubbo.apache.org/zh-cn/blog/2023/04/28/3-%E6%8C%87%E6%A0%87%E7%9B%91%E5%90%AC%E6%B3%A8%E5%86%8C%E6%A2%B3%E7%90%86/</link><pubDate>Fri, 28 Apr 2023 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/blog/2023/04/28/3-%E6%8C%87%E6%A0%87%E7%9B%91%E5%90%AC%E6%B3%A8%E5%86%8C%E6%A2%B3%E7%90%86/</guid><description>三、指标监听注册梳理 在前一章中，我们了解了不同收集器中的指标样本是如何被监听器添加进去的。接下来，我们将归纳指标监听器 的创建位置，及它们对应统计的指标。
通过之前的分析，我们已经知道指标 注册事件多播器（RegistryMetricsEventMulticaster）中定义了并绑定了服务注册相关的指标。这种绑定操作同样存在于其它几个简单指标事件多播器（SimpleMetricsEventMulticaster）的几个实现中。
转发器注册 RegistrySubDispatcher （服务注册指标转发器）注册了服务注册相关指标：
应用级实例注册成功/失败/总数计数 （APPLICATION_REGISTER_&amp;hellip;) 应用级服务接口订阅成功/失败/总数计数 （APPLICATION_SUBSCRIBE_&amp;hellip;) 服务级注册成功/失败/总数计数 （SERVICE_REGISTER_&amp;hellip;） 特殊的 APPLICATION_NOTIFY_FINISH 和 APPLICATION_DIRECTORY_POST （应用服务目录变化次数） MetadataSubDispatcher（元数据指标转发器）注册应用元数据相关指标
应用推送元数据相关计数 （APPLICATION_PUSH_&amp;hellip;)
应用订阅元数据相关计数 （APPLICAITON_SUBSCRIBE_&amp;hellip;）
服务订阅元数据相关计数 （SERVICE_SUBSCRIBE_&amp;hellip;）
ConfigCenterSubDispatcher (配置中心指标转发器) 注册配置中心配置更新次数指标
配置中心推送新配置次数 （CONFIGCENTER_METRIC_TOTAL） DefaultSubDispatcher (默认转发器) 注册核心RPC调用次数指标
请求次数 （METRIC_REQUESTS） 请求成功次数（METRIC_REQUESTS_SUCCEED） 请求失败次数（METRIC_REQUEST_BUSINESS_FAILED） MetricsDispatcher
MetricsDispatcher 较为特殊，它负责 ApplicationModel 下所有 MetricsCollector（前文中提到的指标收集器） 的初始化注册工作，并将它们添加到自己的监听器列表中。
public class MetricsDispatcher extends SimpleMetricsEventMulticaster { @SuppressWarnings({&amp;#34;rawtypes&amp;#34;}) public MetricsDispatcher(ApplicationModel applicationModel) { ScopeBeanFactory beanFactory = applicationModel.getBeanFactory(); ExtensionLoader&amp;lt;MetricsCollector&amp;gt; extensionLoader = applicationModel.getExtensionLoader(MetricsCollector.class); if (extensionLoader != null) { List&amp;lt;MetricsCollector&amp;gt; customizeCollectors = extensionLoader .</description></item><item><title>4-指标转换与导出</title><link>https://dubbo.apache.org/zh-cn/blog/2023/04/28/4-%E6%8C%87%E6%A0%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%AF%BC%E5%87%BA/</link><pubDate>Fri, 28 Apr 2023 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/blog/2023/04/28/4-%E6%8C%87%E6%A0%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%AF%BC%E5%87%BA/</guid><description>四、指标转换与导出 本章主要梳理指标收集完成后，向外部收集器导出的流程。
通过之前的分析，我们知道不同类型指标的收集分别由各个 Collector 实现进行。它们底层的 MetricsCollector 接口定义了指标导出的操作。
@SPI public interface MetricsCollector&amp;lt;E extends TimeCounterEvent&amp;gt; extends MetricsLifeListener&amp;lt;E&amp;gt; { default boolean isCollectEnabled() { return false; } /** * Collect metrics as {@link MetricSample} * * @return List of MetricSample */ List&amp;lt;MetricSample&amp;gt; collect(); } 而指标报告器 (MetricsReporter) 的实现会定时调用Collector 的 collect 方法，更新并导出指标数据。
public interface MetricsReporter { //初始化 void init(); //刷新统计数据，定时调用collect() void refreshData(); //获取指标数据 String getResponse(); //获取带指标名的指标样本（单个指标） default String getResponseWithName(String metricsName) { return null; } } 指标报告器有两个实现：DefaultMetricsReporter 和 PrometheusMetricsReporter，它们都实现自 AbstractMetricsRepoter，并使用它的指标刷新逻辑 (refreshData方法)。</description></item></channel></rss>