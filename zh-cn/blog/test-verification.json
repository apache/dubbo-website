{
  "filename": "test-verification.md",
  "__html": "<h1>Dubbo测试验证</h1>\n<p>除了线上常规的使用场景以外，我们在日常使用中还需要一些特定的使用方式，比如对正在开发的功能进行验证测试，比如单独调用某台机器的服务，这篇文章就来介绍一下这些场景下的使用方式。</p>\n<h3>只订阅</h3>\n<p>为方便开发测试，经常会在线下共用一个所有服务可用的注册中心，这时，如果一个正在开发中的服务提供者注册，可能会影响消费者不能正常运行。</p>\n<p>可以让服务提供者开发方，只订阅服务(开发的服务可能依赖其它服务)，而不注册正在开发的服务，通过直连测试正在开发的服务。<br>\n<img src=\"https://cdn.nlark.com/lark/0/2018/jpeg/6752/1535447102196-eabbff47-287d-4f85-8fea-05b4f4921d75.jpeg\" alt=\"subscribe-only.jpg\">\n禁用注册配置</p>\n<pre><code>&lt;dubbo:registry address=&quot;10.20.153.10:9090&quot; register=&quot;false&quot; /&gt;\n</code></pre>\n<p>或者</p>\n<pre><code>&lt;dubbo:registry address=&quot;10.20.153.10:9090?register=false&quot; /&gt;\n</code></pre>\n<h3>指定IP调用</h3>\n<p>在开发及测试环境下，经常需要绕过注册中心，只测试指定服务提供者，这时候可能需要点对点直连，点对点直联方式，将以服务接口为单位，忽略注册中心的提供者列表，A 接口配置点对点，不影响 B 接口从注册中心获取列表<br>\n<img src=\"https://cdn.nlark.com/lark/0/2018/jpeg/6752/1535447028864-8b952768-6fce-4c3c-b7a4-2003f3291d8e.jpeg\" alt=\"dubbo-directly.jpg\"></p>\n<p>可以通过以下几种配置来指定IP调用</p>\n<ul>\n<li>XML 配置： 如果是线上需求需要点对点，可在 <a href=\"dubbo:reference\">dubbo:reference</a> 中配置 url 指向提供者，将绕过注册中心，多个地址用分号隔开，配置如下：\n<code>&lt;dubbo:reference id=&quot;xxxService&quot; interface=&quot;com.alibaba.xxx.XxxService&quot; url=&quot;dubbo://localhost:20890&quot; /&gt;</code></li>\n<li>通过-D参数指定： 在 JVM 启动参数中加入-D参数映射服务地址，如：<code>java -Dcom.alibaba.xxx.XxxService=dubbo://localhost:20890</code></li>\n<li>通过文件映射: 如果服务比较多，也可以用文件映射，用 -Ddubbo.resolve.file 指定映射文件路径，此配置优先级高于 <a href=\"dubbo:reference\">dubbo:reference</a> 中的配置，如：\n<code>java -Ddubbo.resolve.file=xxx.properties</code><br>\n然后在映射文件 xxx.properties 中加入配置，其中 key 为服务名，value 为服务提供者 URL：<code>com.alibaba.xxx.XxxService=dubbo://localhost:20890</code></li>\n</ul>\n<h3>回声测试</h3>\n<h4>使用方式</h4>\n<p>回声测试用于检测服务是否可用，回声测试按照正常请求流程执行，能够测试整个调用是否通畅，可用于监控。</p>\n<p>所有服务自动实现 EchoService 接口，只需将任意服务引用强制转型为 EchoService，即可使用。</p>\n<p>Spring 配置：</p>\n<pre><code>&lt;dubbo:reference id=&quot;memberService&quot; interface=&quot;com.xxx.MemberService&quot; /&gt;\n</code></pre>\n<p>代码：</p>\n<pre><code>// 远程服务引用\nMemberService memberService = ctx.getBean(&quot;memberService&quot;); \n \nEchoService echoService = (EchoService) memberService; // 强制转型为EchoService\n\n// 回声测试可用性\nString status = echoService.$echo(&quot;OK&quot;); \n \nassert(status.equals(&quot;OK&quot;));\n</code></pre>\n<h4>实现原理</h4>\n<p>我们在实现，注册服务的时候，并没有配置EchoService这个接口，为什么可以直接使用呢？原来是Dubbo在生成proxy的时候，已经实现了<code>EchoService这个接口</code></p>\n<pre><code class=\"language-java\">  <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> &lt;T&gt; <span class=\"hljs-function\">T <span class=\"hljs-title\">getProxy</span><span class=\"hljs-params\">(Invoker&lt;T&gt; invoker)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n        Class&lt;?&gt;[] interfaces = <span class=\"hljs-keyword\">null</span>;\n        String config = invoker.getUrl().getParameter(<span class=\"hljs-string\">\"interfaces\"</span>);\n        <span class=\"hljs-keyword\">if</span> (config != <span class=\"hljs-keyword\">null</span> &amp;&amp; config.length() &gt; <span class=\"hljs-number\">0</span>) {\n            String[] types = Constants.COMMA_SPLIT_PATTERN.split(config);\n            <span class=\"hljs-keyword\">if</span> (types != <span class=\"hljs-keyword\">null</span> &amp;&amp; types.length &gt; <span class=\"hljs-number\">0</span>) {\n                interfaces = <span class=\"hljs-keyword\">new</span> Class&lt;?&gt;[types.length + <span class=\"hljs-number\">2</span>];\n                interfaces[<span class=\"hljs-number\">0</span>] = invoker.getInterface();\n                interfaces[<span class=\"hljs-number\">1</span>] = EchoService.class;\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; types.length; i++) {\n                    interfaces[i + <span class=\"hljs-number\">1</span>] = ReflectUtils.forName(types[i]);\n                }\n            }\n        }\n        <span class=\"hljs-keyword\">if</span> (interfaces == <span class=\"hljs-keyword\">null</span>) {\n            interfaces = <span class=\"hljs-keyword\">new</span> Class&lt;?&gt;[]{invoker.getInterface(), EchoService.class};\n        }\n        <span class=\"hljs-keyword\">return</span> getProxy(invoker, interfaces);\n    }\n</code></pre>\n<p>通过这种方式，任何bean都可以被转换成EchoService的实例，但是并没有实现<code>$echo</code>这个方法，这里，Dubbo使用filter机制做了处理：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">EchoFilter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Filter</span> </span>{\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Result <span class=\"hljs-title\">invoke</span><span class=\"hljs-params\">(Invoker&lt;?&gt; invoker, Invocation inv)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n        <span class=\"hljs-keyword\">if</span> (inv.getMethodName().equals(Constants.$ECHO) &amp;&amp; inv.getArguments() != <span class=\"hljs-keyword\">null</span> &amp;&amp; inv.getArguments().length == <span class=\"hljs-number\">1</span>)\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> RpcResult(inv.getArguments()[<span class=\"hljs-number\">0</span>]);\n        <span class=\"hljs-keyword\">return</span> invoker.invoke(inv);\n    }\n\n}\n</code></pre>\n<p>在经过EchoFilter.invoke方法时，如果调用的是<code>$echo</code>，会中断当前的调用过程，直接返回<code>$echo</code>的入参，否则会继续执行Filter链。<br>\n通过动态代理和EchoFilter机制，使得回声测试的整个过程对用户透明，不需要做任何额外的配置，直接调用即可。</p>\n",
  "link": "/zh-cn/blog/test-verification.html",
  "meta": {}
}