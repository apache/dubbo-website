{
  "filename": "tracing-with-skywalking.md",
  "__html": "<h1>使用Apache Skywalking (Incubator) 做分布式跟踪</h1>\n<h2>Apache Skywalking(Incubator)简介</h2>\n<p><a href=\"https://github.com/apache/incubator-skywalking\">Apache Skywalking(Incubator)</a> 专门为微服务架构和云原生架构系统而设计并且支持分布式链路追踪的APM系统。<a href=\"https://github.com/apache/incubator-skywalking\">Apache Skywalking(Incubator)</a>通过加载探针的方式收集应用调用链路信息，并对采集的调用链路信息进行分析，生成应用间关系和服务间关系以及服务指标。<a href=\"https://github.com/apache/incubator-skywalking\">Apache Skywalking (Incubating)</a>目前支持多种语言，其中包括<a href=\"https://github.com/apache/incubator-skywalking\">Java</a>，<a href=\"https://github.com/OpenSkywalking/skywalking-netcore\">.Net Core</a>，<a href=\"https://github.com/OpenSkywalking/skywalking-nodejs\">Node.js</a>和<a href=\"https://github.com/OpenSkywalking/skywalking-go\">Go</a>语言。</p>\n<p>目前Skywalking已经支持从6个可视化维度剖析分布式系统的运行情况。总览视图是应用和组件的全局视图，其中包括组件和应用数量，应用的告警波动，慢服务列表以及应用吞吐量；拓扑图从应用依赖关系出发，展现整个应用的拓扑关系；应用视图则是从单个应用的角度，展现应用的上下游关系，TopN的服务和服务器，JVM的相关信息以及对应的主机信息。服务视图关注单个服务入口的运行情况以及此服务的上下游依赖关系，依赖度，帮助用户针对单个服务的优化和监控；调用链展现了调用的单次请求经过的所有埋点以及每个埋点的执行时长；告警视图根据配置阈值针对应用、服务器、服务进行实时告警。</p>\n<h2>Dubbo与Apache Skywalking(Incubator)</h2>\n<h3>编写Dubbo示例程序</h3>\n<p>Dubbo实例程序已上传到<a href=\"https://github.com/SkywalkingTest/dubbo-trace-example\">Github仓库</a>中。方便大家下载使用。</p>\n<h4>API工程</h4>\n<p>服务接口：</p>\n<pre><code>package org.apache.skywalking.demo.interfaces;\n\npublic interface HelloService {\n\tString sayHello(String name);\n}\n</code></pre>\n<h4>Dubbo服务提供工程</h4>\n<pre><code>package org.apache.skywalking.demo.provider;\n\n@Service(version = &quot;${demo.service.version}&quot;,\n\tapplication = &quot;${dubbo.application.id}&quot;,\n\tprotocol = &quot;${dubbo.protocol.id}&quot;,\n\tregistry = &quot;${dubbo.registry.id}&quot;, timeout = 60000)\npublic class HelloServiceImpl implements HelloService {\n\n\tpublic String sayHello(String name) {\n\t\tLockSupport.parkNanos(TimeUnit.SECONDS.toNanos(1));\n\t\treturn &quot;Hello, &quot; + name;\n\t}\n\n}\n</code></pre>\n<h4>Consumer工程</h4>\n<pre><code>package org.apache.skywalking.demo.consumer;\n\n@RestController\npublic class ConsumerController {\n\n\tprivate static int COUNT = 0;\n\n\t@Reference(version = &quot;${demo.service.version}&quot;,\n\t\tapplication = &quot;${dubbo.application.id}&quot;,\n\t\turl = &quot;dubbo://localhost:20880&quot;, timeout = 60000)\n\tprivate HelloService helloService;\n\n\t@GetMapping(&quot;/sayHello/{name}&quot;)\n\tpublic String sayHello(@PathVariable(name = &quot;name&quot;) String name) {\n\t\tif ((COUNT++) % 3 == 0){\n\t\t\tthrow new RuntimeException();\n\t\t}\n\t\tLockSupport.parkNanos(TimeUnit.SECONDS.toNanos(2));\n\t\treturn helloService.sayHello(name);\n\t}\n}\n</code></pre>\n<h3>部署Apache Skywalking(Incubator)</h3>\n<p>Apache Skywalking(Incubator）共提供两种部署模式：单节点模式和集群模式，以下为单节点模式部署步骤，集群模式部署详情参考<a href=\"https://github.com/apache/incubator-skywalking/blob/master/docs/cn/Deploy-backend-in-cluster-mode-CN.md\">文档</a>。</p>\n<h4>依赖第三方组件</h4>\n<ol>\n<li>JDK8+</li>\n<li>Elasticsearch 5.x</li>\n</ol>\n<h4>部署步骤</h4>\n<ol>\n<li>下载<a href=\"http://skywalking.apache.org/downloads/\"> Apache Skywalking Collector</a></li>\n<li>部署ElasticSearch\n<ul>\n<li>修改elasticsearch.yml文件，并设置<code>cluster.name</code>设置成<code>CollectorDBCluster</code>。此名称需要和collector配置文件一致。</li>\n<li>修改ES配置<code>network.host</code>值，将<code>network.host</code>的值修改成<code>0.0.0.0</code>。</li>\n<li>启动Elasticsearch</li>\n</ul>\n</li>\n<li>解压并启动Skywalking Collector。运行<code>bin/startup.sh</code>命令即可启动Skywalking Collector</li>\n</ol>\n<h4>启动示例程序</h4>\n<p>在启动示例程序之前，执行编译打包的命令:</p>\n<pre><code>./mvnw clean package\n</code></pre>\n<h4>启动服务提供端</h4>\n<pre><code>java -jar -javaagent:$AGENT_PATH/skywalking-agent.jar -Dskywalking.agent.application_code=dubbo-provider -Dskywalking.collector.servers=localhost:10800 dubbo-provider/target/dubbo-provider.jar\n</code></pre>\n<h4>启动服务消费端</h4>\n<pre><code>java -jar -javaagent:$AGENT_PATH/skywalking-agent.jar -Dskywalking.agent.application_code=dubbo-consumer -Dskywalking.collector.servers=localhost:10800 dubbo-consumer/target/dubbo-consumer.jar \n</code></pre>\n<h4>访问消费端提供的服务</h4>\n<pre><code>curl http://localhost:8080/sayHello/test\n</code></pre>\n<h2>Skywalking监控截图：</h2>\n<h3>首页</h3>\n<p><img src=\"../../img/blog/skywalking-dashboard.png\" alt=\"/admin-guide/images/skywalking-dashboard.png\"></p>\n<h3>拓扑图</h3>\n<p><img src=\"../../img/blog/skywalking-topology.png\" alt=\"/admin-guide/images/skywalking-topology.png\"></p>\n<h3>应用视图</h3>\n<p><img src=\"../../img/blog/skywalking-application.png\" alt=\"/admin-guide/images/skywalking-application.png\"></p>\n<p>JVM信息\n<img src=\"../../img/blog/skywalking-application_instance.png\" alt=\"/admin-guide/images/skywalking-application_instance.png\"></p>\n<h3>服务视图</h3>\n<p>服务消费端：\n<img src=\"../../img/blog/skywalking-service-consumer.png\" alt=\"/admin-guide/images/skywalking-service-consumer.png\"></p>\n<p>服务提供端：\n<img src=\"../../img/blog/skywalking-service-provider.png\" alt=\"/admin-guide/images/skywalking-service-provider.png\"></p>\n<h3>Trace视图</h3>\n<p><img src=\"../../img/blog/skywalking-trace.png\" alt=\"/admin-guide/images/skywalking-trace.png\"></p>\n<p>Span信息：\n<img src=\"../../img/blog/skywalking-span-Info.png\" alt=\"/admin-guide/images/skywalking-span-Info.png\"></p>\n<h3>告警视图</h3>\n<p><img src=\"../../img/blog/skywalking-alarm.png\" alt=\"/admin-guide/images/skywalking-alarm.png\"></p>\n",
  "link": "/zh-cn/blog/tracing-with-skywalking.html",
  "meta": {
    "title": "使用Apache Skywalking (Incubator) 做分布式跟踪",
    "keywords": "Dubbo, Skywalking, tracing, 分布式跟踪",
    "description": "本文介绍如何使用 Apache Skywalking 对 Dubbo 应用做分布式链路追踪。"
  }
}