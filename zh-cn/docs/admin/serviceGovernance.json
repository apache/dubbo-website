{
  "filename": "serviceGovernance.md",
  "__html": "<h1>服务治理和配置管理</h1>\n<h2>服务治理</h2>\n<p>服务治理主要作用是改变运行时服务的行为和选址逻辑，达到限流，权重配置等目的，主要有以下几个功能：</p>\n<h3>应用级别的服务治理</h3>\n<p>在Dubbo2.6及更早版本中，所有的服务治理规则都只针对服务粒度，如果要把某条规则作用到应用粒度上，需要为应用下的所有服务配合相同的规则，变更，删除的时候也需要对应的操作，这样的操作很不友好，因此Dubbo2.7版本中增加了应用粒度的服务治理操作，对于条件路由(包括黑白名单)，动态配置(包括权重，负载均衡)都可以做应用级别的配置：<br>\n<img src=\"../../../img/blog/admin/conditionRoute.jpg\" alt=\"condition\"><br>\n上图是条件路由的配置，可以按照应用名，服务名两个维度来填写，也可以按照这两个维度来查询。</p>\n<h3>标签路由</h3>\n<p>标签路由是Dubbo2.7引入的新功能，配置以应用作为维度，给不同的服务器打上不同名字的标签，配置如下图所示：\n<img src=\"../../../img/blog/admin/route.jpg\" alt=\"tag\">\n调用的时候，客户端可以通过<code>setAttachment</code>的方式，来设置不同的标签名称，比如本例中，<code>setAttachment(tag1)</code>，客户端的选址范围就在如图所示的三台机器中，可以通过这种方式来实现流量隔离，灰度发布等功能。</p>\n<h3>条件路由</h3>\n<p>条件路由是Dubbo一直以来就有的功能，目前可以配置服务和应用两个维度，条件路由为<code>yaml</code>格式，具体的规则体以及各种适用场景，请参考<a href=\"../user/demos/routing-rule.md\">这里</a></p>\n<h3>黑白名单</h3>\n<p>黑白名单是条件路由的一部分，规则存储和条件路由放在一起，为了方便配置所以单独拿出来，同样可以通过服务和应用两个维度，指定黑名单和白名单:<br>\n<img src=\"sources/images/blackList.jpg\" alt=\"blackList\"></p>\n<h3>动态配置</h3>\n<p>动态配置是和路由规则平行的另一类服务治理治理功能，主要作用是在不重启服务的情况下，动态改变调用行为，从Dubbo2.7版本开始，支持服务和应用两个维度的配置，采用<code>yaml</code>格式，界面如下：<br>\n<img src=\"sources/images/config.jpg\" alt=\"config\">\n具体的规则体说明请参考<a href=\"../user/demos/config-rule.md\">这里</a></p>\n<h3>权重调节</h3>\n<p>权重调节是动态配置的子功能，主要作用是改变服务端的权重，更大的权重会有更大的几率被客户端选中作为服务提供者，从而达到流量分配的目的：<br>\n<img src=\"sources/images/weight.jpg\" alt=\"weight\"></p>\n<h3>负载均衡</h3>\n<p>负载均衡也是动态配置的子功能，主要作用是调整客户端的选址逻辑，目前可选的负载均衡策略有随机，轮训和最小活跃，关于各个策略的解释请参考<a href=\"../user/demos/loadbalance.md\">这里</a></p>\n<h2>配置管理</h2>\n<p>配置管理也是配合Dubbo2.7新增的功能，在Dubbo2.7中，增加了全局和应用维度的配置，分别在全局和应用范围内生效，其中应用配置也可以指定该应用中的服务级别的配置，可以在控制台中查看，修改配置规则，默认展示全局维度的配置。</p>\n<ul>\n<li>全局配置：\n<img src=\"../../../img/blog/admin/config.jpg\" alt=\"config\"><br>\n全局配置里可以指定注册中心，元数据中心的地址，服务端和客户端的超时时间等，这些配置在全局内生效。除了配置写入，也可以用来查看。如果使用zookeeper作为注册中心和元数据中心，还可以看到配置文件所在位置的目录结构。</li>\n<li>应用， 服务配置<br>\n<img src=\"../../../img/blog/admin/appConfig.jpg\" alt=\"appConfig\"><br>\n应用级别的配置可以为应用或者应用内的服务指定配置，在服务维度上，需要区分提供者和消费者。<code>dubbo.reference.{serviceName}</code>表示作为该服务消费者的配置，<code>dubbo.provider.{servcieName}</code>表示作为该服务提供者的配置。其中注册中心和元数据中心的地址，只能在全局配置中指定，这也是Dubbo2.7中推荐的使用方式。</li>\n<li>优先级： 服务配置 &gt; 应用配置 &gt; 全局配置</li>\n</ul>\n",
  "link": "/zh-cn/docs/admin/serviceGovernance.html",
  "meta": {}
}