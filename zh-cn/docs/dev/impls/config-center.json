{
  "filename": "config-center.md",
  "__html": "<h1>Dubbo配置中心</h1>\n<h2>设计目的</h2>\n<p>配置中心的核心功能是作为Key-Value存储，Dubbo框架告知配置中心其关心的key，配置中心返回该key对应的value值。</p>\n<p>按照应用场景划分，配置中心在Dubbo框架中主要承担以下职责：</p>\n<ul>\n<li>作为外部化配置中心，即存储dubbo.properties配置文件，此时，key值通常为文件名如dubbo.properties，value则为配置文件内容。</li>\n<li>存储单个配置项，如各种开关项、常量值等。</li>\n<li>存储服务治理规则，此时key通常按照&quot;服务名+规则类型&quot;的格式来组织，而value则为具体的治理规则。</li>\n</ul>\n<p>为了进一步实现对key-value的分组管理，Dubbo的配置中心还加入了namespace、group的概念，这些概念在很多专业的第三方配置中心中都有体现，通常情况下，namespace用来隔离不同的租户，group用来对统一租户的key集合做分组。</p>\n<p>当前，Dubbo配置中心实现了对Zookeeper、Nacos、Etcd、Consul、Apollo的对接，接下来我们具体看一下Dubbo抽象的配置中心是怎么映射到具体的第三方实现中的。</p>\n<h2>扩展接口</h2>\n<ul>\n<li><code>org.apache.dubbo.configcenter.DynamicConfigurationFactory</code></li>\n<li><code>org.apache.dubbo.configcenter.DynamicConfiguration</code></li>\n</ul>\n<h2>已知扩展</h2>\n<ul>\n<li><code>org.apache.dubbo.configcenter.support.zookeeper.ZookeeperDynamicConfigurationFactory</code></li>\n<li><code>org.apache.dubbo.configcenter.support.zookeeper.NacosDynamicConfigurationFactory</code></li>\n<li><code>org.apache.dubbo.configcenter.support.zookeeper.EtcdDynamicConfigurationFactory</code></li>\n<li><code>org.apache.dubbo.configcenter.support.zookeeper.ConsulDynamicConfigurationFactory</code></li>\n<li><code>org.apache.dubbo.configcenter.support.zookeeper.ApolloDynamicConfigurationFactory</code></li>\n</ul>\n<h2>实现原理</h2>\n<h3>Zookeeper</h3>\n<p>zookeeper提供了一个树状的存储模型，其实现原理如下：</p>\n<p><img src=\"/img/configcenter_zk_model.jpg\" alt=\"image-20190127225608553\"></p>\n<p>namespace, group, key等分别对应不同层级的ZNode节点，而value则作为根ZNode节点的值存储。</p>\n<ol>\n<li>\n<p>外部化配置中心 dubbo.properties</p>\n<p><img src=\"/img/configcenter_zk_properties.jpg\" alt=\"image-20190127225608553\"></p>\n<p>上图展示了两个不同作用域的dubbo.properties文件在zookeeper中的存储结构：</p>\n<ul>\n<li>命名空间namespace都为：dubbo</li>\n<li>分组group：全局级别为dubbo，所有应用共享；应用级别为应用名demo-provider，只对改应用生效</li>\n<li>key：dubbo.properties</li>\n</ul>\n</li>\n<li>\n<p>单个配置项</p>\n<p><img src=\"/img/configcenter_zk_singleitem.jpg\" alt=\"image-20190127225608553\"></p>\n<p>设置优雅停机事件为15000：</p>\n<ul>\n<li>命名空间namespace：dubbo</li>\n<li>分组group：dubbo</li>\n<li>key：dubbo.service.shutdown.wait=15000</li>\n</ul>\n</li>\n<li>\n<p>服务治理规则</p>\n<p><img src=\"/img/configcenter_zk_rule.jpg\" alt=\"image-20190127225608553\"></p>\n<p>上图展示了一条应用级别的条件路由规则：</p>\n<ul>\n<li>命名空间namespace：dubbo</li>\n<li>分组group：dubbo</li>\n<li>key：governance-conditionrouter-consumer.condition-router，其中governance-conditionrouter-consumer为应用名，condition-router代表条件路由</li>\n</ul>\n<blockquote>\n<p>注意:</p>\n<p>Dubbo同时支持应用、服务两种粒度的服务治理规则，对于这两种粒度，其key取值规则如下：</p>\n<ul>\n<li>应用粒度 {应用名 + 规则后缀}。如: <code>demo-application.configurators</code>、<code>demo-application.tag-router</code>等</li>\n<li>服务粒度 {服务接口名:[服务版本]:[服务分组] + 规则后缀}，其中服务版本、服务分组是可选的，如果它们有配置则在key中体现，没被配置则用&quot;:&quot;占位。如\n<code>org.apache.dubbo.demo.DemoService::.configurators</code>、<code>org.apache.dubbo.demo.DemoService:1.0.0:group1.configurators</code></li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h3>Etcd &amp; Consul</h3>\n<p>Etcd和Consul本质上也是一种类似zookeeper的树状存储结构，实现请参考zookeeper。</p>\n<h3>Nacos</h3>\n<p>Nacos作为一个专业的第三方配置中心，拥有专门为配置中心设计的存储结构，包括内置的namespace、group、dataid等概念。并且这几个概念基本上与Dubbo框架抽象的配置中心是一一对应的。</p>\n<p>与Zookeeper实现的对应关系如下：</p>\n<p><img src=\"/img/configcenter_nacos_model.jpg\" alt=\"image-20190127225608553\"></p>\n<p>参考上文关于zookeeper实现中描述的示例，这里的dataid可能为：</p>\n<ul>\n<li>外部化配置中心：dubbo.properties</li>\n<li>单个配置项：dubbo.service.shutdown.wait</li>\n<li>服务治理规则：org.apache.dubbo.demo.DemoService:1.0.0:group1.configurators</li>\n</ul>\n<h3>Apollo</h3>\n<p>Apollo与Nacos类似，请参考动态配置中心使用文档中关于Apollo部分的描述。</p>\n",
  "link": "/zh-cn/docs/dev/impls/config-center.html",
  "meta": {}
}