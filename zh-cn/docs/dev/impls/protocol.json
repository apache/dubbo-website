{
  "filename": "protocol.md",
  "__html": "<h1>协议扩展</h1>\n<h2>扩展说明</h2>\n<p>RPC 协议扩展，封装远程调用细节。</p>\n<p>契约：</p>\n<ul>\n<li>当用户调用 <code>refer()</code> 所返回的 <code>Invoker</code> 对象的 <code>invoke()</code> 方法时，协议需相应执行同 URL 远端 <code>export()</code> 传入的 <code>Invoker</code> 对象的 <code>invoke()</code> 方法。</li>\n<li>其中，<code>refer()</code> 返回的 <code>Invoker</code> 由协议实现，协议通常需要在此 <code>Invoker</code> 中发送远程请求，<code>export()</code> 传入的 <code>Invoker</code> 由框架实现并传入，协议不需要关心。</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>协议不关心业务接口的透明代理，以 <code>Invoker</code> 为中心，由外层将 <code>Invoker</code> 转换为业务接口。</li>\n<li>协议不一定要是 TCP 网络通讯，比如通过共享文件，IPC 进程间通讯等。</li>\n</ul>\n<h2>扩展接口</h2>\n<ul>\n<li><code>com.alibaba.dubbo.rpc.Protocol</code></li>\n<li><code>com.alibaba.dubbo.rpc.Exporter</code></li>\n<li><code>com.alibaba.dubbo.rpc.Invoker</code></li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Protocol</span> </span>{\n    <span class=\"hljs-comment\">/**\n     * 暴露远程服务：&lt;br&gt;\n     * 1. 协议在接收请求时，应记录请求来源方地址信息：RpcContext.getContext().setRemoteAddress();&lt;br&gt;\n     * 2. export()必须是幂等的，也就是暴露同一个URL的Invoker两次，和暴露一次没有区别。&lt;br&gt;\n     * 3. export()传入的Invoker由框架实现并传入，协议不需要关心。&lt;br&gt;\n     * \n     * <span class=\"hljs-doctag\">@param</span> &lt;T&gt; 服务的类型\n     * <span class=\"hljs-doctag\">@param</span> invoker 服务的执行体\n     * <span class=\"hljs-doctag\">@return</span> exporter 暴露服务的引用，用于取消暴露\n     * <span class=\"hljs-doctag\">@throws</span> RpcException 当暴露服务出错时抛出，比如端口已占用\n     */</span>\n    &lt;T&gt; <span class=\"hljs-function\">Exporter&lt;T&gt; <span class=\"hljs-title\">export</span><span class=\"hljs-params\">(Invoker&lt;T&gt; invoker)</span> <span class=\"hljs-keyword\">throws</span> RpcException</span>;\n \n    <span class=\"hljs-comment\">/**\n     * 引用远程服务：&lt;br&gt;\n     * 1. 当用户调用refer()所返回的Invoker对象的invoke()方法时，协议需相应执行同URL远端export()传入的Invoker对象的invoke()方法。&lt;br&gt;\n     * 2. refer()返回的Invoker由协议实现，协议通常需要在此Invoker中发送远程请求。&lt;br&gt;\n     * 3. 当url中有设置check=false时，连接失败不能抛出异常，需内部自动恢复。&lt;br&gt;\n     * \n     * <span class=\"hljs-doctag\">@param</span> &lt;T&gt; 服务的类型\n     * <span class=\"hljs-doctag\">@param</span> type 服务的类型\n     * <span class=\"hljs-doctag\">@param</span> url 远程服务的URL地址\n     * <span class=\"hljs-doctag\">@return</span> invoker 服务的本地代理\n     * <span class=\"hljs-doctag\">@throws</span> RpcException 当连接服务提供方失败时抛出\n     */</span>\n    &lt;T&gt; <span class=\"hljs-function\">Invoker&lt;T&gt; <span class=\"hljs-title\">refer</span><span class=\"hljs-params\">(Class&lt;T&gt; type, URL url)</span> <span class=\"hljs-keyword\">throws</span> RpcException</span>;\n \n}\n</code></pre>\n<h2>扩展配置</h2>\n<pre><code class=\"language-xml\"><span class=\"hljs-comment\">&lt;!-- 声明协议，如果没有配置id，将以name为id --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:protocol</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"xxx1\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"xxx\"</span> /&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- 引用协议，如果没有配置protocol属性，将在ApplicationContext中自动扫描protocol配置 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">protocol</span>=<span class=\"hljs-string\">\"xxx1\"</span> /&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- 引用协议缺省值，当&lt;dubbo:service&gt;没有配置prototol属性时，使用此配置 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:provider</span> <span class=\"hljs-attr\">protocol</span>=<span class=\"hljs-string\">\"xxx1\"</span> /&gt;</span>\n</code></pre>\n<h2>已知扩展</h2>\n<ul>\n<li><code>com.alibaba.dubbo.rpc.injvm.InjvmProtocol</code></li>\n<li><code>com.alibaba.dubbo.rpc.dubbo.DubboProtocol</code></li>\n<li><code>com.alibaba.dubbo.rpc.rmi.RmiProtocol</code></li>\n<li><code>com.alibaba.dubbo.rpc.http.HttpProtocol</code></li>\n<li><code>com.alibaba.dubbo.rpc.http.hessian.HessianProtocol</code></li>\n</ul>\n<h2>扩展示例</h2>\n<p>Maven项目结构：</p>\n<pre><code>\nsrc\n |-main\n    |-java\n        |-com\n            |-xxx\n                |-XxxProtocol.java (实现Protocol接口)\n                |-XxxExporter.java (实现Exporter接口)\n                |-XxxInvoker.java (实现Invoker接口)\n    |-resources\n        |-META-INF\n            |-dubbo\n                |-com.alibaba.dubbo.rpc.Protocol (纯文本文件，内容为：xxx=com.xxx.XxxProtocol)\n</code></pre>\n<p>XxxProtocol.java：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.xxx;\n \n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.rpc.Protocol;\n \n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">XxxProtocol</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Protocol</span> </span>{\n    <span class=\"hljs-keyword\">public</span> &lt;T&gt; <span class=\"hljs-function\">Exporter&lt;T&gt; <span class=\"hljs-title\">export</span><span class=\"hljs-params\">(Invoker&lt;T&gt; invoker)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> XxxExporter(invoker);\n    }\n    <span class=\"hljs-keyword\">public</span> &lt;T&gt; <span class=\"hljs-function\">Invoker&lt;T&gt; <span class=\"hljs-title\">refer</span><span class=\"hljs-params\">(Class&lt;T&gt; type, URL url)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> XxxInvoker(type, url);\n    }\n}\n</code></pre>\n<p>XxxExporter.java：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.xxx;\n \n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.rpc.support.AbstractExporter;\n \n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">XxxExporter</span>&lt;<span class=\"hljs-title\">T</span>&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractExporter</span>&lt;<span class=\"hljs-title\">T</span>&gt; </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">XxxExporter</span><span class=\"hljs-params\">(Invoker&lt;T&gt; invoker)</span> <span class=\"hljs-keyword\">throws</span> RemotingException</span>{\n        <span class=\"hljs-keyword\">super</span>(invoker);\n        <span class=\"hljs-comment\">// ...</span>\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">unexport</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">super</span>.unexport();\n        <span class=\"hljs-comment\">// ...</span>\n    }\n}\n</code></pre>\n<p>XxxInvoker.java：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.xxx;\n \n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.rpc.support.AbstractInvoker;\n \n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">XxxInvoker</span>&lt;<span class=\"hljs-title\">T</span>&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractInvoker</span>&lt;<span class=\"hljs-title\">T</span>&gt; </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">XxxInvoker</span><span class=\"hljs-params\">(Class&lt;T&gt; type, URL url)</span> <span class=\"hljs-keyword\">throws</span> RemotingException</span>{\n        <span class=\"hljs-keyword\">super</span>(type, url);\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">abstract</span> Object <span class=\"hljs-title\">doInvoke</span><span class=\"hljs-params\">(Invocation invocation)</span> <span class=\"hljs-keyword\">throws</span> Throwable </span>{\n        <span class=\"hljs-comment\">// ...</span>\n    }\n}\n</code></pre>\n<p>META-INF/dubbo/com.alibaba.dubbo.rpc.Protocol：</p>\n<pre><code class=\"language-properties\">xxx=com.xxx.XxxProtocol\n</code></pre>\n"
}