{
  "filename": "dummy.md",
  "__html": "<h1>防痴呆设计</h1>\n<blockquote>\n<p><a href=\"http://javatar.iteye.com/blog/804187\">http://javatar.iteye.com/blog/804187</a></p>\n</blockquote>\n<p>最近有点痴呆，因为解决了太多的痴呆问题。服务框架实施面超来超广，已有 50 多个项目在使用，每天都要去帮应用查问题，来来回回，发现大部分都是配置错误，或者重复的文件或类，或者网络不通等，所以准备在新版本中加入防痴呆设计。估且这么叫吧，可能很简单，但对排错速度还是有点帮助，希望能抛砖引玉，也希望大家多给力，想出更多的防范措施共享出来。</p>\n<h2>检查重复的jar包</h2>\n<p>最痴呆的问题，就是有多个版本的相同jar包，会出现新版本的 A 类，调用了旧版本的 B 类，而且和JVM加载顺序有关，问题带有偶然性，误导性，遇到这种莫名其妙的问题，最头疼，所以，第一条，先把它防住，在每个 jar 包中挑一个一定会加载的类，加上重复类检查，给个示例：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">static</span> {  \n    Duplicate.checkDuplicate(Xxx.class);  \n}  \n</code></pre>\n<p>检查重复工具类：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Duplicate</span> </span>{  \n  \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-title\">Duplicate</span><span class=\"hljs-params\">()</span> </span>{}  \n  \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">checkDuplicate</span><span class=\"hljs-params\">(Class cls)</span> </span>{  \n        checkDuplicate(cls.getName().replace(<span class=\"hljs-string\">'.'</span>, <span class=\"hljs-string\">'/'</span>) + <span class=\"hljs-string\">\".class\"</span>);  \n    }  \n  \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">checkDuplicate</span><span class=\"hljs-params\">(String path)</span> </span>{  \n        <span class=\"hljs-keyword\">try</span> {  \n            <span class=\"hljs-comment\">// 在ClassPath搜文件  </span>\n            Enumeration urls = Thread.currentThread().getContextClassLoader().getResources(path);  \n            Set files = <span class=\"hljs-keyword\">new</span> HashSet();  \n            <span class=\"hljs-keyword\">while</span> (urls.hasMoreElements()) {  \n                URL url = urls.nextElement();  \n                <span class=\"hljs-keyword\">if</span> (url != <span class=\"hljs-keyword\">null</span>) {  \n                    String file = url.getFile();  \n                    <span class=\"hljs-keyword\">if</span> (file != <span class=\"hljs-keyword\">null</span> &amp;amp;&amp;amp; file.length() &amp;gt; <span class=\"hljs-number\">0</span>) {  \n                        files.add(file);  \n                    }  \n                }  \n            }  \n            <span class=\"hljs-comment\">// 如果有多个，就表示重复  </span>\n            <span class=\"hljs-keyword\">if</span> (files.size() &amp;gt; <span class=\"hljs-number\">1</span>) {  \n                logger.error(<span class=\"hljs-string\">\"Duplicate class \"</span> + path + <span class=\"hljs-string\">\" in \"</span> + files.size() + <span class=\"hljs-string\">\" jar \"</span> + files);  \n            }  \n        } <span class=\"hljs-keyword\">catch</span> (Throwable e) { <span class=\"hljs-comment\">// 防御性容错  </span>\n            logger.error(e.getMessage(), e);  \n        }  \n    }  \n  \n}  \n</code></pre>\n<h2>检查重复的配置文件</h2>\n<p>配置文件加载错，也是经常碰到的问题。用户通常会和你说：“我配置的很正确啊，不信我发给你看下，但就是报错”。然后查一圈下来，原来他发过来的配置根本没加载，平台很多产品都会在 classpath 下放一个约定的配置，如果项目中有多个，通常会取JVM加载的第一个，为了不被这么低级的问题折腾，和上面的重复jar包一样，在配置加载的地方，加上：</p>\n<pre><code class=\"language-java\">Duplicate.checkDuplicate(<span class=\"hljs-string\">\"xxx.properties\"</span>); \n</code></pre>\n<h2>检查所有可选配置</h2>\n<p>必填配置估计大家都会检查，因为没有的话，根本没法运行。但对一些可选参数，也应该做一些检查，比如：服务框架允许通过注册中心关联服务消费者和服务提供者，也允许直接配置服务提供者地址点对点直连，这时候，注册中心地址是可选的，但如果没有配点对点直连配置，注册中心地址就一定要配，这时候也要做相应检查。</p>\n<h2>异常信息给出解决方案</h2>\n<p>在给应用排错时，最怕的就是那种只有简单的一句错误描述，啥信息都没有的异常信息。比如上次碰到一个 Failed to get session 异常，就这几个单词，啥都没有，哪个 session 出错? 什么原因 Failed? 看了都快疯掉，因是线上环境不好调试，而且有些场景不是每次都能重现。异常最基本要带有上下文信息，包括操作者，操作目标，原因等，最好的异常信息，应给出解决方案，比如上面可以给出：&quot;从 10.20.16.3 到 10.20.130.20:20880 之间的网络不通，请在 10.20.16.3 使用 telnet 10.20.130.20 20880 测试一下网络，如果是跨机房调用，可能是防火墙阻挡，请联系 SA 开通访问权限&quot; 等等，上面甚至可以根据 IP 段判断是不是跨机房。另外一个例子，是 spring-web 的 context 加载，如果在 getBean 时 spring 没有被启动，spring 会报一个错，错误信息写着：请在 web.xml 中加入: <code>&lt;listener&gt;...&lt;init-param&gt;...</code>，多好的同学，看到错误的人复制一下就完事了，我们该学学。可以把常见的错误故意犯一遍，看看错误信息能否自我搞定问题，\n或者把平时支持应用时遇到的问题及解决办法都写到异常信息里。</p>\n<h2>日志信息包含环境信息</h2>\n<p>每次应用一出错，应用的开发或测试就会把出错信息发过来，询问原因，这时候我都会问一大堆套话，用的哪个版本呀？是生产环境还是开发测试环境？哪个注册中心呀？哪个项目中的？哪台机器呀？哪个服务? 累啊，最主要的是，有些开发或测试人员根本分不清，没办法，只好提供上门服务，浪费的时间可不是浮云，所以，日志中最好把需要的环境信息一并打进去，最好给日志输出做个包装，统一处理掉，免得忘了。包装Logger接口如：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">error</span><span class=\"hljs-params\">(String msg, Throwable e)</span> </span>{  \n    delegate.error(msg + <span class=\"hljs-string\">\" on server \"</span> + InetAddress.getLocalHost() + <span class=\"hljs-string\">\" using version \"</span> + Version.getVersion(), e);  \n}  \n</code></pre>\n<p>获取版本号工具类：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Version</span> </span>{  \n  \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-title\">Version</span><span class=\"hljs-params\">()</span> </span>{}  \n  \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Logger logger = LoggerFactory.getLogger(Version.class);  \n  \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Pattern VERSION_PATTERN = Pattern.compile(<span class=\"hljs-string\">\"([0-9][0-9\\\\.\\\\-]*)\\\\.jar\"</span>);  \n  \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String VERSION = getVersion(Version.class, <span class=\"hljs-string\">\"2.0.0\"</span>);  \n  \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title\">getVersion</span><span class=\"hljs-params\">()</span></span>{  \n        <span class=\"hljs-keyword\">return</span> VERSION;  \n    }  \n  \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title\">getVersion</span><span class=\"hljs-params\">(Class cls, String defaultVersion)</span> </span>{  \n        <span class=\"hljs-keyword\">try</span> {  \n            <span class=\"hljs-comment\">// 首先查找MANIFEST.MF规范中的版本号  </span>\n            String version = cls.getPackage().getImplementationVersion();  \n            <span class=\"hljs-keyword\">if</span> (version == <span class=\"hljs-keyword\">null</span> || version.length() == <span class=\"hljs-number\">0</span>) {  \n                version = cls.getPackage().getSpecificationVersion();  \n            }  \n            <span class=\"hljs-keyword\">if</span> (version == <span class=\"hljs-keyword\">null</span> || version.length() == <span class=\"hljs-number\">0</span>) {  \n                <span class=\"hljs-comment\">// 如果MANIFEST.MF规范中没有版本号，基于jar包名获取版本号  </span>\n                String file = cls.getProtectionDomain().getCodeSource().getLocation().getFile();  \n                <span class=\"hljs-keyword\">if</span> (file != <span class=\"hljs-keyword\">null</span> &amp;&amp; file.length() &gt; <span class=\"hljs-number\">0</span> &amp;&amp; file.endsWith(<span class=\"hljs-string\">\".jar\"</span>)) {  \n                    Matcher matcher = VERSION_PATTERN.matcher(file);  \n                    <span class=\"hljs-keyword\">while</span> (matcher.find() &amp;&amp; matcher.groupCount() &gt; <span class=\"hljs-number\">0</span>) {  \n                        version = matcher.group(<span class=\"hljs-number\">1</span>);  \n                    }  \n                }  \n            }  \n            <span class=\"hljs-comment\">// 返回版本号，如果为空返回缺省版本号  </span>\n            <span class=\"hljs-keyword\">return</span> version == <span class=\"hljs-keyword\">null</span> || version.length() == <span class=\"hljs-number\">0</span> ? defaultVersion : version;  \n        } <span class=\"hljs-keyword\">catch</span> (Throwable e) { <span class=\"hljs-comment\">// 防御性容错  </span>\n            <span class=\"hljs-comment\">// 忽略异常，返回缺省版本号  </span>\n            logger.error(e.getMessage(), e);  \n            <span class=\"hljs-keyword\">return</span> defaultVersion;  \n        }  \n    }  \n  \n}\n</code></pre>\n<h2>kill 之前先 dump</h2>\n<p>每次线上环境一出问题，大家就慌了，通常最直接的办法回滚重启，以减少故障时间，这样现场就被破坏了，要想事后查问题就麻烦了，有些问题必须在线上的大压力下才会发生，线下测试环境很难重现，不太可能让开发或 Appops 在重启前，先手工将出错现场所有数据备份一下，所以最好在 kill 脚本之前调用 dump，进行自动备份，这样就不会有人为疏忽。dump脚本示例：</p>\n<pre><code class=\"language-sh\">JAVA_HOME=/usr/java  \nOUTPUT_HOME=~/output  \nDEPLOY_HOME=`dirname <span class=\"hljs-variable\">$0</span>`  \nHOST_NAME=`hostname`  \n  \nDUMP_PIDS=`ps  --no-heading -C java -f --width 1000 | grep <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$DEPLOY_HOME</span>\"</span> |awk <span class=\"hljs-string\">'{print $2}'</span>`  \n<span class=\"hljs-keyword\">if</span> [ -z <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$DUMP_PIDS</span>\"</span> ]; <span class=\"hljs-keyword\">then</span>  \n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"The server <span class=\"hljs-variable\">$HOST_NAME</span> is not started!\"</span>  \n    <span class=\"hljs-built_in\">exit</span> 1;  \n<span class=\"hljs-keyword\">fi</span>  \n  \nDUMP_ROOT=<span class=\"hljs-variable\">$OUTPUT_HOME</span>/dump  \n<span class=\"hljs-keyword\">if</span> [ ! -d <span class=\"hljs-variable\">$DUMP_ROOT</span> ]; <span class=\"hljs-keyword\">then</span>  \n    mkdir <span class=\"hljs-variable\">$DUMP_ROOT</span>  \n<span class=\"hljs-keyword\">fi</span>  \n  \nDUMP_DATE=`date +%Y%m%d%H%M%S`  \nDUMP_DIR=<span class=\"hljs-variable\">$DUMP_ROOT</span>/dump-<span class=\"hljs-variable\">$DUMP_DATE</span>  \n<span class=\"hljs-keyword\">if</span> [ ! -d <span class=\"hljs-variable\">$DUMP_DIR</span> ]; <span class=\"hljs-keyword\">then</span>  \n    mkdir <span class=\"hljs-variable\">$DUMP_DIR</span>  \n<span class=\"hljs-keyword\">fi</span>  \n  \n<span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\"Dumping the server <span class=\"hljs-variable\">$HOST_NAME</span> ...\\c\"</span>  \n<span class=\"hljs-keyword\">for</span> PID <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable\">$DUMP_PIDS</span> ; <span class=\"hljs-keyword\">do</span>  \n    <span class=\"hljs-variable\">$JAVA_HOME</span>/bin/jstack <span class=\"hljs-variable\">$PID</span> &gt; <span class=\"hljs-variable\">$DUMP_DIR</span>/jstack-<span class=\"hljs-variable\">$PID</span>.dump 2&gt;&amp;1  \n    <span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\".\\c\"</span>  \n    <span class=\"hljs-variable\">$JAVA_HOME</span>/bin/jinfo <span class=\"hljs-variable\">$PID</span> &gt; <span class=\"hljs-variable\">$DUMP_DIR</span>/jinfo-<span class=\"hljs-variable\">$PID</span>.dump 2&gt;&amp;1  \n    <span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\".\\c\"</span>  \n    <span class=\"hljs-variable\">$JAVA_HOME</span>/bin/jstat -gcutil <span class=\"hljs-variable\">$PID</span> &gt; <span class=\"hljs-variable\">$DUMP_DIR</span>/jstat-gcutil-<span class=\"hljs-variable\">$PID</span>.dump 2&gt;&amp;1  \n    <span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\".\\c\"</span>  \n    <span class=\"hljs-variable\">$JAVA_HOME</span>/bin/jstat -gccapacity <span class=\"hljs-variable\">$PID</span> &gt; <span class=\"hljs-variable\">$DUMP_DIR</span>/jstat-gccapacity-<span class=\"hljs-variable\">$PID</span>.dump 2&gt;&amp;1  \n    <span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\".\\c\"</span>  \n    <span class=\"hljs-variable\">$JAVA_HOME</span>/bin/jmap <span class=\"hljs-variable\">$PID</span> &gt; <span class=\"hljs-variable\">$DUMP_DIR</span>/jmap-<span class=\"hljs-variable\">$PID</span>.dump 2&gt;&amp;1  \n    <span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\".\\c\"</span>  \n    <span class=\"hljs-variable\">$JAVA_HOME</span>/bin/jmap -heap <span class=\"hljs-variable\">$PID</span> &gt; <span class=\"hljs-variable\">$DUMP_DIR</span>/jmap-heap-<span class=\"hljs-variable\">$PID</span>.dump 2&gt;&amp;1  \n    <span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\".\\c\"</span>  \n    <span class=\"hljs-variable\">$JAVA_HOME</span>/bin/jmap -histo <span class=\"hljs-variable\">$PID</span> &gt; <span class=\"hljs-variable\">$DUMP_DIR</span>/jmap-histo-<span class=\"hljs-variable\">$PID</span>.dump 2&gt;&amp;1  \n    <span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\".\\c\"</span>  \n    <span class=\"hljs-keyword\">if</span> [ -r /usr/sbin/lsof ]; <span class=\"hljs-keyword\">then</span>  \n    /usr/sbin/lsof -p <span class=\"hljs-variable\">$PID</span> &gt; <span class=\"hljs-variable\">$DUMP_DIR</span>/lsof-<span class=\"hljs-variable\">$PID</span>.dump  \n    <span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\".\\c\"</span>  \n    <span class=\"hljs-keyword\">fi</span>  \n<span class=\"hljs-keyword\">done</span>  \n<span class=\"hljs-keyword\">if</span> [ -r /usr/bin/sar ]; <span class=\"hljs-keyword\">then</span>  \n/usr/bin/sar &gt; <span class=\"hljs-variable\">$DUMP_DIR</span>/sar.dump  \n<span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\".\\c\"</span>  \n<span class=\"hljs-keyword\">fi</span>  \n<span class=\"hljs-keyword\">if</span> [ -r /usr/bin/uptime ]; <span class=\"hljs-keyword\">then</span>  \n/usr/bin/uptime &gt; <span class=\"hljs-variable\">$DUMP_DIR</span>/uptime.dump  \n<span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\".\\c\"</span>  \n<span class=\"hljs-keyword\">fi</span>  \n<span class=\"hljs-keyword\">if</span> [ -r /usr/bin/free ]; <span class=\"hljs-keyword\">then</span>  \n/usr/bin/free -t &gt; <span class=\"hljs-variable\">$DUMP_DIR</span>/free.dump  \n<span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\".\\c\"</span>  \n<span class=\"hljs-keyword\">fi</span>  \n<span class=\"hljs-keyword\">if</span> [ -r /usr/bin/vmstat ]; <span class=\"hljs-keyword\">then</span>  \n/usr/bin/vmstat &gt; <span class=\"hljs-variable\">$DUMP_DIR</span>/vmstat.dump  \n<span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\".\\c\"</span>  \n<span class=\"hljs-keyword\">fi</span>  \n<span class=\"hljs-keyword\">if</span> [ -r /usr/bin/mpstat ]; <span class=\"hljs-keyword\">then</span>  \n/usr/bin/mpstat &gt; <span class=\"hljs-variable\">$DUMP_DIR</span>/mpstat.dump  \n<span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\".\\c\"</span>  \n<span class=\"hljs-keyword\">fi</span>  \n<span class=\"hljs-keyword\">if</span> [ -r /usr/bin/iostat ]; <span class=\"hljs-keyword\">then</span>  \n/usr/bin/iostat &gt; <span class=\"hljs-variable\">$DUMP_DIR</span>/iostat.dump  \n<span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\".\\c\"</span>  \n<span class=\"hljs-keyword\">fi</span>  \n<span class=\"hljs-keyword\">if</span> [ -r /bin/netstat ]; <span class=\"hljs-keyword\">then</span>  \n/bin/netstat &gt; <span class=\"hljs-variable\">$DUMP_DIR</span>/netstat.dump  \n<span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\".\\c\"</span>  \n<span class=\"hljs-keyword\">fi</span>  \n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"OK!\"</span>\n</code></pre>\n",
  "link": "/zh-cn/docs/dev/principals/dummy.html",
  "meta": {}
}