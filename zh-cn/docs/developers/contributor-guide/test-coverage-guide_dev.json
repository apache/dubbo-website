{
  "filename": "test-coverage-guide_dev.md",
  "__html": "<h1>测试覆盖率向导</h1>\n<h3>1.写单元测试的收益</h3>\n<ul>\n<li>单元测试能帮助每个人深入代码细节，了解代码的功能。</li>\n<li>通过测试用例我们能发现bug，并提交代码的健壮性。</li>\n<li>测试用例同时也是代码的demo用法。</li>\n</ul>\n<h3>2.单元测试用例的一些设计原则</h3>\n<ul>\n<li>应该精心设计好步骤，颗粒度和组合条件。</li>\n<li>注意边界条件。</li>\n<li>单元测试也应该好好设计，不要写无用的代码。</li>\n<li>当你发现一个<code>方法</code>很难写单元测试时，如果可以确认这个<code>方法</code>是<code>臭代码</code>，那么就和开发者一起重构它。</li>\n<li>Dubbo中用的mock框架是: <a href=\"http://site.mockito.org/\">mockito</a>. 下面是一些开发向导:<a href=\"http://www.baeldung.com/bdd-mockito\">mockito tutorial</a>,<a href=\"https://dzone.com/refcardz/mockito\">mockito refcard</a></li>\n<li>TDD（可选）：当你开始写一个新的功能时，你可以试着先写测试用例。</li>\n</ul>\n<h3>3.测试覆盖率设定值</h3>\n<ul>\n<li>在现阶段，Delta更改代码的测试覆盖设定值为：&gt;＝60%，越高越好。</li>\n<li>我们可以在这个页面中看到测试报告: <a href=\"https://codecov.io/gh/apache/dubbo\">https://codecov.io/gh/apache/dubbo</a></li>\n</ul>\n",
  "link": "/zh-cn/docs/developers/contributor-guide/test-coverage-guide_dev.html",
  "meta": {}
}
