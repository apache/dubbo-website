<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>基本概念 on Apache Dubbo</title><link>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/concept/</link><description>Recent content in 基本概念 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/concept/index.xml" rel="self" type="application/rss+xml"/><item><title>Dubbo-go 的应用和接口</title><link>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/concept/app_and_interface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/concept/app_and_interface/</guid><description>此文档已经不再维护。您当前查看的是快照版本。如果想要查看最新版本的文档，请参阅最新版本。
Dubbo-go 服务层级 Dubbo-go 服务层级为两个级别：分别是应用级别(App Level)和接口级别(Interface Level)，该服务分层与框架配置结构息息相关。
如下图所示，可以看到，应用级别的组件以浅红色标注，接建立如下文件目录口级别的组件以浅蓝色标注：
1. 应用级别组件 应用级别组件的特点：被当前应用的所有接口级别组件共用。
应用级别的主要组件如下：
应用信息模块
包含应用维度相关信息，包括应用名、版本号、数据上报方式等
Consumer 模块
Consumer 模块负责客户端相关信息，包括一个或多个引用（Reference）结构，以及超时、客户端过滤器（consumer filter）等相关信息。
Provider 模块
Provider 模块负责服务端相关信息，包括一个或多个服务（Service）结构、服务端过滤器（provider filter）等相关信息。
注册中心（Registry）模块
注册中心模块负责定义好所要使用的一系列注册中心，例如框架支持的ZK、Nacos、ETCD等中间件。应用级别的注册模块只负责声明，由接口级别的组件进行引用，引用时以用户自定义的注册中心ID（registryID) 作为索引。
协议（Protocol）模块
协议模块只存在于服务端。
协议模块关心服务的暴露信息，例如协议名、服务监听IP、端口号等信息。协议模块属于应用级别，只负责声明，由接口级别的组件进行引用，引用时以用户自定义的协议ID（protocolID) 作为索引。
元数据中心模块
元数据中心类似于注册中心模块，负责声明框架需要使用的元数据中心，从而将元数据成功上报。
配置中心模块
路由模块
日志模块
监控模块
2. 接口级别组件 服务（Service）模块
服务模块被使用于任何暴露的服务，声明接口暴露所需的信息，包括例如接口名、协议、序列化方式等，负责单个服务接口的暴露。
引用（Reference）模块
饮用模块被使用于需要调用的远程服务的客户端，其声明了需要请求接口所需的信息，包括例如接口名、协议、序列化方式等、负责特定协议的抽象，参与客户端的生成。
3. 说明 暴露的服务是接口级别的，一个用户定义的 Provider Struct/一个用户定义的Consumer Struct，对应一个Service/Reference 模块，一个应用可以同时存在Consumer 模块和 Provider 模块，因此可以同时存在多个Service/Reference 模块。</description></item><item><title>Dubbo-go的配置</title><link>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/concept/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/concept/configuration/</guid><description>此文档已经不再维护。您当前查看的是快照版本。如果想要查看最新版本的文档，请参阅最新版本。
Dubbo-go 配置项 1. 配置结构 1.1 框架配置结构 根配置 ProviderConfig ConsumerConfig 1.2 配置例子 dubbo: application: # 应用配置 name: dubbo-go module: local version: 1.0.0 owner: zhaoyunxing organization: dubbo-go metadata-type: local # 元数据上报方式，默认为本地 metadata-report: # 元数据上报配置, 不包含此字段则不开启元数据上报，应用级服务发现依赖此字段，参考例子：https://github.com/apache/dubbo-go-samples/tree/45a0d843b54e4922c240900e63516176cc7da4f6/registry/servicediscovery protocol: nacos # 元数据上报方式，支持nacos/zookeeper address: 127.0.0.1:8848 username: &amp;#34;&amp;#34; password: &amp;#34;&amp;#34; timeout: &amp;#34;3s&amp;#34; group: &amp;#34;dubbo&amp;#34; protocols: tripleProtocol: # triple协议定义，参考例子https://github.com/apache/dubbo-go-samples/tree/f7febed9d686cb940ea55d34b5baa567d7574a44/rpc/tri name: tri # 网络协议，支持tri/dubbo/jsonrpc/grpc port: 20001 dubboProtocol: # dubbo协议定义，参考例子https://github.com/apache/dubbo-go-samples/tree/f7febed9d686cb940ea55d34b5baa567d7574a44/rpc/dubbo name: dubbo port: 20000 params: # dubbo 传输层配置，此字段不配置则使用协议默认值 reconnect-interval: 0 connection-number: 1 heartbeat-period: 5s session-timeout: 180s pool-size: 64 pool-ttl: 600 getty-session-param: compress-encoding: false tcp-no-delay: true tcp-keep-alive: true keep-alive-period: 120s tcp-r-buf-size: 262144 tcp-w-buf-size: 65536 pkg-rq-size: 1024 pkg-wq-size: 512 tcp-read-timeout: 1s tcp-write-timeout: 5s wait-timeout: 1s max-msg-len: 1024000 session-name: client config-center: # 配置中心，参考例子：https://github.</description></item><item><title>Dubbo-go 的网络协议</title><link>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/concept/protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/concept/protocol/</guid><description>此文档已经不再维护。您当前查看的是快照版本。如果想要查看最新版本的文档，请参阅最新版本。
网络协议 1. 网络协议是什么 对于 Dubbo-go 微服务框架，网络协议为远程过程调用中负责网络通信的模块，负责应用层到网络层的数据序列化、打包、请求发起、网络端口监听等功能。Dubbo-go 为协议抽象了一套接口如下：
type Protocol interface { // Export service for remote invocation Export(invoker Invoker) Exporter // Refer a remote service Refer(url *common.URL) Invoker // Destroy will destroy all invoker and exporter, so it only is called once. Destroy() } 该接口包含三个方法。其中 Export 方法负责服务的暴露过程。入参 invoker 为dubbo 的概念，其封装了一个可以被调用的实例。在具体网络协议（例如Triple）实现的 Export 方法中，会针对特定的协议，将封装有一定逻辑的可调用实例 Invoker 以网络端口监听的形式暴露给外部服务，来自外部针对该网络端口的请求将会被 Export 方法开启的监听协程获取，进而根据网络协议进行拆解包和反序列化，得到解析后的请求数据。
Refer 方法负责服务的引用过程，其入参 url 为 dubbo 框架通用的结构，可以描述一个希望引用的服务，url 参数中包含了多个希望引用服务的参数，例如对应服务的接口名(interface)，版本号(version)，使用协议(protocol) 等等。在具体网络协议（例如Triple）实现的 Refer 方法中，会将特定的网络协议封装到 Invoker 可调用实例的方法中，用户层发起的 RPC 调用即可直接通过返回的 Invoker 对象，发起特定协议的网络请求。</description></item><item><title>Dubbo-go 的注册中心</title><link>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/concept/registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/concept/registry/</guid><description>此文档已经不再维护。您当前查看的是快照版本。如果想要查看最新版本的文档，请参阅最新版本。
注册中心 1. Dubbo 的注册中心是什么 对于 Dubbo-go 微服务框架，注册中心在 RPC 场景下复杂保存 Provider 应用的服务信息。Provider 注册地址到注册中心，Consumer 从注册中心读取和订阅 Provider 地址列表。如图所示：
关于 Dubbo 服务发现细节，详情可参考 Dubbo 官网的概念介绍
Dubbo-go 为注册中心抽象了一套接口如下：
// Registry Extension - Registry type Registry interface { common.Node // Register is used for service provider calling, register services // to registry. And it is also used for service consumer calling, register // services cared about, for dubbo&amp;#39;s admin monitoring. Register(url *common.URL) error // UnRegister is required to support the contract: // 1.</description></item></channel></rss>