<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>高级使用 on Apache Dubbo</title><link>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/</link><description>Recent content in 高级使用 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/index.xml" rel="self" type="application/rss+xml"/><item><title>Dubbo-go 3.0 自定义filter</title><link>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/custom-filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/custom-filter/</guid><description>此文档已经不再维护。您当前查看的是快照版本。如果想要查看最新版本的文档，请参阅最新版本。
Dubbo-go 3.0 自定义Filter组件 参考samples dubbo-go-samples/filter
1. Filter 概念 // Filter interface defines the functions of a filter // Extension - Filter type Filter interface { // Invoke is the core function of a filter, it determines the process of the filter Invoke(context.Context, protocol.Invoker, protocol.Invocation) protocol.Result // OnResponse updates the results from Invoke and then returns the modified results. OnResponse(context.Context, protocol.Result, protocol.Invoker, protocol.Invocation) protocol.Result } Filter 可以加载在 Consumer 端或者 Provider端。当加载在 Consumer 端，其Invoke函数调用的下游为网络层，OnResponse 为请求结束从网络层获取到返回结果后被调用。当加载在 Provider 端，其 Invoke 函数调用的下游为用户代码，OnResponse 为用户代码执行结束后向下传递至网络层前被调用。</description></item><item><title>go-java 3.0 互通示例</title><link>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/go_java_interactive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/go_java_interactive/</guid><description>此文档已经不再维护。您当前查看的是快照版本。如果想要查看最新版本的文档，请参阅最新版本。
Go-Java 互通示例 准备工作 环境 JDK 8，Golang &amp;gt;= 1.15，Dubbo 3.0.2，zookeeper 启动，
Go- Java 互通前提 Go/Java 定义的传输结构一致
PB 序列化 proto for Go
// The response message containing the greetings message User { string name = 1; string id = 2; int32 age = 3; } proto for Java
// The response message containing the greetings message User { string name = 1; string id = 2; int32 age = 3; } Hessian 序列化 POJO for Go，需参考 Dubbo-go Hessian 序列化支持文档</description></item><item><title>Dubbo-go 数据上报</title><link>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/metrics/</guid><description>此文档已经不再维护。您当前查看的是快照版本。如果想要查看最新版本的文档，请参阅最新版本。
Dubbo-go 3.0 数据上报 参考Samples： dubbo-go-samples/metrics
1. 数据上报配置 在不指定 metrics: 字段的时候，默认开启拉模式 prometheus 数据上报，端口默认为9090，监听path默认为/metrics。可参考如下服务端配置例子来定制化。
dubbo: application: version: 3.0.0-rc3 # 版本号 metrics: enable: true # default is true path: /custom-metrics-path # default is /metrics port: 9091 # default is 9090 namespace: dubbo # default is dubbo 作为数据上报 metrics 的前缀 registries: myzk: protocol: zookeeper address: localhost:2181 protocols: triple: name: tri port: 20000 provider: services: GreeterProvider: group: dubbo-go # 所属 group，需要与客户端一致 interface: com.apache.dubbo.HelloService # 接口名 2.</description></item><item><title>dubbo-go 3.0 示例仓库</title><link>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/samples_repo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/samples_repo/</guid><description>此文档已经不再维护。您当前查看的是快照版本。如果想要查看最新版本的文档，请参阅最新版本。
为了方便 Dubbo-go 框架用户的使用，我们提供了 Samples 仓库以供用户参考：
【Dubbo-go-samples 仓库地址】
1. Samples 仓库包含的例子 config-api: 使用 API 进行配置初始化 configcenter: 使用不同的配置中心，目前支持三种：zookeeper、apollo、和 nacos context: 如何使用上下文传递 attachment direct: 直连模式 game: 游戏服务例子 generic: 泛化调用 rpc: RPC 调用例子, 包含 Triple、Dubbo等协议以及跨语言/gRPC互通示例 helloworld: RPC调用入门例子 logger: 日志例子 registry: 展示与不同注册中心的对接，包含了 zk、nacos、etcd metrics: 数据上报 filter: 使用提供filter和自定义filter的例子 registry/servicediscovery：应用级服务发现例子 router: 路由例子 tracing: 链路追踪例子 2. 如何运行 目前有三种方式来运行 dubbo-go 的示例:
通过 bash 命令快速开始: 通过简单的命令行启动样例以及进行单元测试 在 IDE 中快速开始，这也是推荐的方式: 在工程 &amp;ldquo;.run&amp;rdquo; 子目录下，提供了所有示例的 GoLand 运行配置文件，因此用户可以简单在 IDE 中单击运行所有的示例。 在 IDE 中手工配置并运行: 为了完整性的目的，也为了万一您不使用 GoLand 而使用其他的 IDE，这里也提供了如何一步一步的配置的指南，帮助用户理解如何在 IDE 中配置，运行或者调试 dubbo-go 的示例。 2.</description></item><item><title>Dubbo-go 3.0 异常回传</title><link>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/exception_response/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/exception_response/</guid><description>此文档已经不再维护。您当前查看的是快照版本。如果想要查看最新版本的文档，请参阅最新版本。
Triple 协议异常回传 参考samples dubbo-go-samples/error
用户异常回传介绍 用户可以在 provider 端生成用户定义的异常信息，可以记录异常产生堆栈，triple 协议可保证将用户在客户端获取到异常 message ，并可以查看报错堆栈，便于定位问题。
注意返回 error 非 nil 时，框架不负责其他返回值的传递。
在Triple provider 端返回异常，以 pb 序列化为例： package main import ( &amp;#34;context&amp;#34; ) import ( &amp;#34;dubbo.apache.org/dubbo-go/v3/common/logger&amp;#34; // 使用可以记录对战信息的异常库，此处以 &amp;#34;github.com/pkg/errors&amp;#34; 为例 &amp;#34;github.com/pkg/errors&amp;#34; ) import ( triplepb &amp;#34;github.com/apache/dubbo-go-samples/api&amp;#34; ) // 一个实现了 pb 接口的服务提供结构 type ErrorResponseProvider struct { triplepb.UnimplementedGreeterServer } // 回传错误的接口 func (s *ErrorResponseProvider) SayHello(ctx context.Context, in *triplepb.HelloRequest) (*triplepb.User, error) { logger.Infof(&amp;#34;Dubbo3 GreeterProvider get user name = %s\n&amp;#34; + in.</description></item><item><title>Dubbo-go 泛化调用</title><link>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/generic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/generic/</guid><description>此文档已经不再维护。您当前查看的是快照版本。如果想要查看最新版本的文档，请参阅最新版本。
Dubbo-go 泛化调用 1. Dubbo-go 泛化调用 Java Server 使用 Triple 协议 + hessian2 序列化方案
可参考Dubbo-go 3.0 泛化调用文档
1.1 Java-Server启动 传输结构定义 package org.apache.dubbo; import java.io.Serializable; import java.util.Date; public class User implements Serializable { private String id; private String name; private int age; private Date time = new Date(); } 接口定义 package org.apache.dubbo; import java.util.ArrayList; import java.util.List; import java.util.Map; //import org.apache.dubbo.rpc.filter.GenericFilter; public interface UserProvider { User GetUser1(String userId); } 1.2 Go-Client 泛化调用 此处展示以 API 的形式构造泛化接口引用</description></item><item><title>Dubbo-go v3 统一路由规则</title><link>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/mesh_router/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/mesh_router/</guid><description>此文档已经不再维护。您当前查看的是快照版本。如果想要查看最新版本的文档，请参阅最新版本。
Dubbo-go v3 Mesh路由规则 路由规则介绍 《微服务Mesh路由方案草案V2》
简介 路由规则，简单来说就是根据特定的条件，将特定的请求流量发送到特定的服务提供者。从而实现流量的分配。
在 Dubbo3 统一路由规则的定义中，需要提供两个yaml格式的资源：virtual service 和 destination rule。其格式和 service mesh 定义的路由规则非常相似。
virtual service 定义host，用于和destination rule建立联系。
定义 service 匹配规则
定义 match 匹配规则
匹配到特定请求后，进行目标集群的查找和验证，对于为空情况，使用 fallback 机制。
destination rule 定义特定集群子集，以及子集所适配的标签，标签从 provider 端暴露的 url 中获取，并尝试匹配。
提供能力 基于配置中心的路由配置 sample示例参见Mesh Router
1. 路由规则文件注解 路由规则只针对客户端，对于服务端，只需要在服务提供时打好特定的参数标签即可。
1.1 virtual-service apiVersion: service.dubbo.apache.org/v1alpha1 kind: VirtualService metadata: {name: demo-route} spec: dubbo: # 使用正则表达式匹配service名，只有个满足该service名的请求才能路由。 # 就此例子来说，不满足service名的请求会直接找不到provider # - services: # - { regex: org.apache.dubbo.UserProvider* } - routedetail: - match: # 匹配规则，如果（sourceLabel）客户端url满足存在参数 `trafficLabel: xxx` 的才能匹配成功 - sourceLabels: {trafficLabel: xxx} name: xxx-project route: # 一旦匹配上述match规则，将选择 dest_rule 里定义的名为 isolation 的子集 - destination: {host: demo, subset: isolation} - match: - sourceLabels: {trafficLabel: testing-trunk} name: testing-trunk route: # 一旦匹配上述match规则，将选择 dest_rule 里定义的名为 testing-trunk 的子集 - destination: {host: demo, subset: testing-trunk} - name: testing # 没有match，兜底逻辑，上述不满足后一定会被匹配到。 route: - destination: {host: demo, subset: testing} services: - {exact: com.</description></item><item><title>Dubbo-go 3.0 动态配置</title><link>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/config-center-dynamic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/config-center-dynamic/</guid><description>此文档已经不再维护。您当前查看的是快照版本。如果想要查看最新版本的文档，请参阅最新版本。
Dubbogo 3.0 配置中心和配置监听 1. 配置中心概念 配置中心即为在分布式场景下，无法将最新的框架配置文件和应用程序绑定在一起，可以指定好配置中心的信息，例如配置中心类型和地址，并在框架启动时从配置中心拉取相应配置进行启动。
2. 配置中心的配置 参考仓库：dubbo-go-samples/configcenter
dubbogo.yml
dubbo: config-center: protocol: nacos address: 127.0.0.1:8848 data-id: dubbo-go-samples-configcenter-nacos-server namespace: myNamespaceID # 可选配置 nacos namespace ID, 默认是 public group: mygroup # 可选配置 nacos group, 默认是 DEFAULT_GROUP 配置中心 nacos 内
group 默认为 dubbo
dataID 为指定的id：dubbo-go-samples-configcenter-nacos-server
写入框架配置例如下面，即可正常启动。
dubbo: registries: demoZK: protocol: zookeeper timeout: 3s address: 127.0.0.1:2181 protocols: triple: name: tri port: 20000 provider: services: GreeterProvider: interface: com.apache.dubbo.sample.basic.IGreeter 3. Dubbogo 动态配置 API Config API 为 dubbogo 3.</description></item><item><title>Dubbo-go 3.0 启动时检查</title><link>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/start-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/start-check/</guid><description> 此文档已经不再维护。您当前查看的是快照版本。如果想要查看最新版本的文档，请参阅最新版本。
启动时检查 在启动时检查依赖的服务是否可用
Dubbo-go 缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止应用初始化完成，以便上线时，能及早发现问题，默认 check=&amp;ldquo;true&amp;rdquo;，并等待3s。
可以通过 check=&amp;ldquo;false&amp;rdquo; 关闭检查，比如，测试时，有些服务不关心，或者出现了循环依赖，必须有一方先启动。
关闭 check 后，请注意 provider数量比较多时， consumer 订阅 provider 生成服务字典可能会有一定延迟，如果 consumer 一启动就对外提供服务， 可能会造成&amp;quot;冷启动&amp;quot;。所以在这个时候，请对服务进行预热。
示例：
dubbo: consumer: check : false reference: myserivce: check: true</description></item><item><title>Dubbo-go 3.0 自定义日志</title><link>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/custom-logger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/custom-logger/</guid><description>此文档已经不再维护。您当前查看的是快照版本。如果想要查看最新版本的文档，请参阅最新版本。
Dubbo-go 3.0 自定义日志组件 参考samples dubbo-go-samples/logger
1. 日志配置 Dubbo-go 3.0 默认采用 zap 日志库，在配置文件中不添加 logger 配置，日志将会打印到控制默认级别为debug。您也可在配置文件中配置日志级别、, 可参照如下方式来配置zap-config和lumberjack-config，从而定制化日志输出。
dubbo: logger: zap-config: level: debug # 日志级别 development: false disableCaller: false disableStacktrace: false encoding: &amp;#34;console&amp;#34; # zap encoder 配置 encoderConfig: messageKey: &amp;#34;message&amp;#34; levelKey: &amp;#34;level&amp;#34; timeKey: &amp;#34;time&amp;#34; nameKey: &amp;#34;logger&amp;#34; callerKey: &amp;#34;caller&amp;#34; stacktraceKey: &amp;#34;stacktrace&amp;#34; lineEnding: &amp;#34;&amp;#34; levelEncoder: &amp;#34;capitalColor&amp;#34; timeEncoder: &amp;#34;iso8601&amp;#34; durationEncoder: &amp;#34;seconds&amp;#34; callerEncoder: &amp;#34;short&amp;#34; nameEncoder: &amp;#34;&amp;#34; outputPaths: - &amp;#34;stderr&amp;#34; errorOutputPaths: - &amp;#34;stderr&amp;#34; lumberjack-config: # 写日志的文件名称 filename: &amp;#34;logs.</description></item><item><title>Dubbo-go 3.0 应用级服务发现</title><link>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/service-discovery/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/service-discovery/</guid><description>此文档已经不再维护。您当前查看的是快照版本。如果想要查看最新版本的文档，请参阅最新版本。
Dubbo-go 3.0 应用级服务发现 参考文章《Dubbo 迈出云原生重要一步 应用级服务发现解析》
参考仓库：dubbo-go-samples/registry/serivcediscovery
配置方案 Consumer 端 dubbo: registries: demoZK: protocol: nacos address: 127.0.0.1:8848 registry-type: service # 指定该注册中心为应用级服务发现，不填默认为接口级 metadata-report: # 定义元数据中心 protocol: nacos # 元数据中心可选nacos/zk address: 127.0.0.1:8848 consumer: references: GreeterClientImpl: protocol: tri interface: com.apache.dubbo.sample.basic.IGreeter Provider 端 dubbo: registries: demoZK: protocol: nacos address: 127.0.0.1:8848 registry-type: service # 指定该注册中心为应用级服务发现，不填默认为接口级 metadata-report: # 定义元数据中心 protocol: nacos # 元数据中心可选nacos/zk address: 127.0.0.1:8848 protocols: triple: name: tri port: 20000 provider: services: GreeterProvider: interface: com.</description></item><item><title>Dubbo-go 3.0 注册中心</title><link>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/registry/</guid><description>此文档已经不再维护。您当前查看的是快照版本。如果想要查看最新版本的文档，请参阅最新版本。
Dubbo-go 3.0 注册中心配置 参考samples dubbo-go-samples/registry
Registry 注册中心配置 Nacos 注册中心 dubbo: application: # 应用信息，服务启动后会将相关信息注册到注册中心，可被客户端从 url 中识别 name: myApp # application=myApp; name=myApp module: opensource # module=opensource organization: dubbo # organization=dubbo owner: laurence # owner=laurence version: myversion # app.version=myversion environment: pro # environment=pro registries: nacosWithCustomGroup: protocol: nacos # 注册中心选择 nacos address: 127.0.0.1:8848 # nacos ip group: myGroup # nacos group, 默认 DEFAULT_GROUP namespace: 9fb00abb-278d-42fc-96bf-e0151601e4a1 # nacos namespaceID, should be created before. 默认public username: abc password: abc protocols: dubbo: name: dubbo port: 20000 provider: services: UserProviderWithCustomGroupAndVersion: # 接口三元组：接口名、版本号、分组。client 和 server 需要保持一致。 interface: org.</description></item></channel></rss>