<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on Apache Dubbo</title><link>https://dubbo.apache.org/zh-cn/docs/languages/golang/</link><description>Recent content in golang on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/docs/languages/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Go 快速开始</title><link>https://dubbo.apache.org/zh-cn/docs/languages/golang/quick-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docs/languages/golang/quick-start/</guid><description>此文档已经不再维护。您当前查看的是快照版本。如果想要查看最新版本的文档，请参阅最新版本。
推荐使用 IDL 定义跨语言的服务与编码格式，以下展示的是 Golang 语言版本的服务定义与开发方式，如果你有遗留系统或无多语言开发需求，可参考以下使用方式。
快速开始 通过一个 hellowworld 例子带领大家快速上手Dubbo-go框架。
协议：Dubbo 编码：Hessian2
注册中心：Zookeeper
环境 Go编程环境 启动zookeeper服务，也可以使用远程实例 从服务端开始 第一步：编写 Provider 结构体和提供服务的方法 https://github.com/dubbogo/dubbo-samples/blob/master/golang/helloworld/dubbo/go-server/app/user.go
编写需要被编码的结构体，由于使用 Hessian2 作为编码协议，User 需要实现 JavaClassName 方法，它的返回值在dubbo中对应User类的类名。 type User struct { Id string Name string Age int32 Time time.Time } func (u User) JavaClassName() string { return &amp;#34;com.ikurento.user.User&amp;#34; } 编写业务逻辑，UserProvider 相当于dubbo中的一个服务实现。需要实现 Reference 方法，返回值是这个服务的唯一标识，对应dubbo的 beans 和 path 字段。 type UserProvider struct { } func (u *UserProvider) GetUser(ctx context.Context, req []interface{}) (*User, error) { println(&amp;#34;req:%#v&amp;#34;, req) rsp := User{&amp;#34;A001&amp;#34;, &amp;#34;hellowworld&amp;#34;, 18, time.</description></item><item><title>Go 语言定义服务</title><link>https://dubbo.apache.org/zh-cn/docs/languages/golang/go-specific/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docs/languages/golang/go-specific/</guid><description>此文档已经不再维护。您当前查看的是快照版本。如果想要查看最新版本的文档，请参阅最新版本。</description></item></channel></rss>