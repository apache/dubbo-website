<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kubernetes 生命周期对齐探针 on Apache Dubbo</title><link>https://dubbo.apache.org/zh-cn/docs/references/lifecycle/</link><description>Recent content in Kubernetes 生命周期对齐探针 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/docs/references/lifecycle/index.xml" rel="self" type="application/rss+xml"/><item><title>使用方法</title><link>https://dubbo.apache.org/zh-cn/docs/references/lifecycle/brief/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docs/references/lifecycle/brief/</guid><description>此文档已经不再维护。您当前查看的是快照版本。如果想要查看最新版本的文档，请参阅最新版本。
Pod 的生命周期 与服务调度息息相关，通过对 Kubernetes 官方探针的实现，能够使 Dubbo 乃至整个应用的生命周期与 Pod 的生命周期对齐。
通过 Dubbo 的 SPI 机制，在内部实现多种“探针”，基于 Dubbo QOS 运维模块的 HTTP 服务，使容器探针能够获取到应用内对应探针的状态。另外，SPI 的实现机制也利于用户自行拓展内部“探针”，使整个应用的生命周期更有效的进行管控。
使用方法 参考配置（具体可以参考 dubbo-samples 中 Kubernetes 注册中心的配置文件）
livenessProbe: httpGet: path: /live port: 22222 initialDelaySeconds: 5 periodSeconds: 5 readinessProbe: httpGet: path: /ready port: 22222 initialDelaySeconds: 5 periodSeconds: 5 startupProbe: httpGet: path: /startup port: 22222 failureThreshold: 30 periodSeconds: 10 目前三种探针均有对应的接口，路径为 QOS 中的命令，端口信息请根据 QOS 配置进行对应修改（默认端口为 22222）。其他参数请参考官方文档说明。
注：为了使 Kubernetes 集群能够正常访问到探针，需要开启 QOS 允许远程访问，此操作有可能带来安全风险，请仔细评估后再打开。
实现细节 三种探针对应的 SPI 接口如下：</description></item><item><title>Liveness 存活探针</title><link>https://dubbo.apache.org/zh-cn/docs/references/lifecycle/liveness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docs/references/lifecycle/liveness/</guid><description> 此文档已经不再维护。您当前查看的是快照版本。如果想要查看最新版本的文档，请参阅最新版本。
扩展说明 拓展应用存活的检测点。
扩展接口 org.apache.dubbo.qos.probe.LivenessProbe
扩展配置 Dubbo QOS live 命令自动发现
已知扩展 暂无默认实现
扩展示例 Maven 项目结构：
src |-main |-java |-com |-xxx |-XxxLivenessProbe.java (实现LivenessProbe接口) |-resources |-META-INF |-dubbo |-org.apache.dubbo.qos.probe.LivenessProbe (纯文本文件，内容为：xxx=com.xxx.XxxLivenessProbe) XxxLivenessProbe.java：
package com.xxx; public class XxxLivenessProbe implements LivenessProbe { public boolean check() { // ... } } META-INF/dubbo/org.apache.dubbo.qos.probe.LivenessProbe：
xxx=com.xxx.XxxLivenessProbe</description></item><item><title>Readiness 就绪探针</title><link>https://dubbo.apache.org/zh-cn/docs/references/lifecycle/readiness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docs/references/lifecycle/readiness/</guid><description> 此文档已经不再维护。您当前查看的是快照版本。如果想要查看最新版本的文档，请参阅最新版本。
扩展说明 拓展应用就绪的检测点。
扩展接口 org.apache.dubbo.qos.probe.ReadinessProbe
扩展配置 Dubbo QOS ready 命令自动发现
已知扩展 org.apache.dubbo.qos.probe.impl.BootstrapReadinessProbe org.apache.dubbo.qos.probe.impl.ProviderReadinessProbe 扩展示例 Maven 项目结构：
src |-main |-java |-com |-xxx |-XxxReadinessProbe.java (实现ReadinessProbe接口) |-resources |-META-INF |-dubbo |-org.apache.dubbo.qos.probe.ReadinessProbe (纯文本文件，内容为：xxx=com.xxx.XxxReadinessProbe) XxxReadinessProbe.java：
package com.xxx; public class XxxReadinessProbe implements ReadinessProbe { public boolean check() { // ... } } META-INF/dubbo/org.apache.dubbo.qos.probe.ReadinessProbe：
xxx=com.xxx.XxxReadinessProbe</description></item><item><title>Startup 启动探针</title><link>https://dubbo.apache.org/zh-cn/docs/references/lifecycle/startup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docs/references/lifecycle/startup/</guid><description> 此文档已经不再维护。您当前查看的是快照版本。如果想要查看最新版本的文档，请参阅最新版本。
扩展说明 拓展应用启动的检测点。
扩展接口 org.apache.dubbo.qos.probe.StartupProbe
扩展配置 Dubbo QOS startup 命令自动发现
已知扩展 org.apache.dubbo.qos.probe.impl.BootstrapLivenessProbe 扩展示例 Maven 项目结构：
src |-main |-java |-com |-xxx |-XxxStartupProbe.java (实现StartupProbe接口) |-resources |-META-INF |-dubbo |-org.apache.dubbo.qos.probe.StartupProbe (纯文本文件，内容为：xxx=com.xxx.XxxStartupProbe) XxxStartupProbee.java：
package com.xxx; public class XxxStartupProbe implements StartupProbe { public boolean check() { // ... } } META-INF/dubbo/org.apache.dubbo.qos.probe.StartupProbe：
xxx=com.xxx.XxxStartupProbe</description></item><item><title>开发 REST 应用</title><link>https://dubbo.apache.org/zh-cn/docs/references/lifecycle/rest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docs/references/lifecycle/rest/</guid><description>此文档已经不再维护。您当前查看的是快照版本。如果想要查看最新版本的文档，请参阅最新版本。
作者：沈理
文档版权：Apache 2.0许可证 署名-禁止演绎
本文篇幅较长，因为REST本身涉及面较多。另外，本文参照 Spring 等的文档风格，不仅仅局限于框架用法的阐述，同时也努力呈现框架的设计理念和优良应用的架构思想。 对于想粗略了解 dubbo 和 REST 的人，只需浏览 概述 至 标准Java REST API：JAX-RS简介 几节即可。
目录 概述 REST的优点 应用场景 快速入门 标准Java REST API：JAX-RS简介 REST服务提供端详解 HTTP POST/GET的实现 Annotation放在接口类还是实现类 JSON、XML等多数据格式的支持 中文字符支持 XML数据格式的额外要求 定制序列化 配置REST Server的实现 获取上下文（Context）信息 配置端口号和Context Path 配置线程数和IO线程数 配置长连接 配置最大的HTTP连接数 配置每个消费端的超时时间和HTTP连接数 GZIP数据压缩 用Annotation取代部分Spring XML配置 添加自定义的Filter、Interceptor等 添加自定义的Exception处理 配置HTTP日志输出 输入参数的校验 是否应该透明发布REST服务 Dubbo的REST提供端在被调用时使用header REST服务消费端详解 场景1：非dubbo的消费端调用dubbo的REST服务 场景2：dubbo消费端调用dubbo的REST服务 场景3：dubbo的消费端调用非dubbo的REST服务 Dubbo的消费端在调用REST服务时配置自定义header Dubbo中JAX-RS的限制 REST常见问题解答（REST FAQ） Dubbo REST的服务能和Dubbo注册中心、监控中心集成吗？ Dubbo REST中如何实现负载均衡和容错（failover）？ JAX-RS中重载的方法能够映射到同一URL地址吗？ JAX-RS中作POST的方法能够接收多个参数吗？ Dubbo当前体系可能的不足之处（与REST相关的） RpcContext的侵入性 Protocol配置的局限性 XML命名不符合spring规范 REST最佳实践 性能基准测试 测试环境 测试脚本 测试结果 扩展讨论 REST与Thrift、Protobuf等的对比 REST与传统WebServices的对比 JAX-RS与Spring MVC的对比 未来 概述 dubbo支持多种远程调用方式，例如dubbo RPC（二进制序列化 + tcp协议）、http invoker（二进制序列化 + http协议，至少在开源版本没发现对文本序列化的支持）、hessian（二进制序列化 + http协议）、WebServices （文本序列化 + http协议）等等，但缺乏对当今特别流行的REST风格远程调用（文本序列化 + http协议）的支持。</description></item></channel></rss>