{
  "filename": "cluster.md",
  "__html": "<h2>1.简介</h2>\n<p>为了避免单点故障，现在的应用通常至少会部署在两台服务器上。对于一些负载比较高的服务，会部署更多的服务器。这样，在同一环境下的服务提供者数量会大于1。对于服务消费者来说，同一环境下出现了多个服务提供者。这时会出现一个问题，服务消费者需要决定选择哪个服务提供者进行调用。另外服务调用失败时的处理措施也是需要考虑的，是重试呢，还是抛出异常，亦或是只打印异常等。为了处理这些问题，Dubbo 定义了集群接口 Cluster 以及 Cluster Invoker。集群 Cluster 用途是将多个服务提供者合并为一个 Cluster Invoker，并将这个 Invoker 暴露给服务消费者。这样一来，服务消费者只需通过这个 Invoker 进行远程调用即可，至于具体调用哪个服务提供者，以及调用失败后如何处理等问题，现在都交给集群模块去处理。集群模块是服务提供者和服务消费者的中间层，为服务消费者屏蔽了服务提供者的情况，这样服务消费者就可以专心处理远程调用相关事宜。比如发请求，接受服务提供者返回的数据等。这就是集群的作用。</p>\n<p>Dubbo 提供了多种集群实现，包含但不限于 Failover Cluster、Failfast Cluster 和 Failsafe Cluster 等。每种集群实现类的用途不同，接下来会一一进行分析。</p>\n<h2>2. 集群容错</h2>\n<p>在对集群相关代码进行分析之前，这里有必要先来介绍一下集群容错的所有组件。包含 Cluster、Cluster Invoker、Directory、Router 和 LoadBalance 等。</p>\n<p><img src=\"./sources/images/cluster.jpg\" alt=\"\"></p>\n<p>集群工作过程可分为两个阶段，第一个阶段是在服务消费者初始化期间，集群 Cluster 实现类为服务消费者创建 Cluster Invoker 实例，即上图中的 merge 操作。第二个阶段是在服务消费者进行远程调用时。以 FailoverClusterInvoker 为例，该类型 Cluster Invoker 首先会调用 Directory 的 list 方法列举 Invoker 列表（可将 Invoker 简单理解为服务提供者）。Directory 的用途是保存 Invoker，可简单类比为 List&lt;Invoker&gt;。其实现类 RegistryDirectory 是一个动态服务目录，可感知注册中心配置的变化，它所持有的 Invoker 列表会随着注册中心内容的变化而变化。每次变化后，RegistryDirectory 会动态增删 Invoker，并调用 Router 的 route 方法进行路由，过滤掉不符合路由规则的 Invoker。当 FailoverClusterInvoker 拿到 Directory 返回的 Invoker 列表后，它会通过 LoadBalance 从 Invoker 列表中选择一个 Invoker。最后 FailoverClusterInvoker 会将参数传给 LoadBalance 选择出的 Invoker 实例的 invoker 方法，进行真正的远程调用。</p>\n<p>以上就是集群工作的整个流程，这里并没介绍集群是如何容错的。Dubbo 主要提供了这样几种容错方式：</p>\n<ul>\n<li>Failover Cluster - 失败自动切换</li>\n<li>Failfast Cluster - 快速失败</li>\n<li>Failsafe Cluster - 失败安全</li>\n<li>Failback Cluster - 失败自动恢复</li>\n<li>Forking Cluster - 并行调用多个服务提供者</li>\n</ul>\n<p>下面开始分析源码。</p>\n<h2>3.源码分析</h2>\n<h3>3.1 Cluster 实现类分析</h3>\n<p>我们在上一章看到了两个概念，分别是集群接口 Cluster 和 Cluster Invoker，这两者是不同的。Cluster 是接口，而 Cluster Invoker 是一种 Invoker。服务提供者的选择逻辑，以及远程调用失败后的的处理逻辑均是封装在 Cluster Invoker  中。那么 Cluster 接口和相关实现类有什么用呢？用途比较简单，仅用于生成 Cluster Invoker。下面我们来看一下源码。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FailoverCluster</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Cluster</span> </span>{\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> String NAME = <span class=\"hljs-string\">\"failover\"</span>;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> &lt;T&gt; <span class=\"hljs-function\">Invoker&lt;T&gt; <span class=\"hljs-title\">join</span><span class=\"hljs-params\">(Directory&lt;T&gt; directory)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n        <span class=\"hljs-comment\">// 创建并返回 FailoverClusterInvoker 对象</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> FailoverClusterInvoker&lt;T&gt;(directory);\n    }\n}\n</code></pre>\n<p>如上，FailoverCluster 总共就包含这几行代码，用于创建 FailoverClusterInvoker 对象，很简单。下面再看一个。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FailbackCluster</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Cluster</span> </span>{\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> String NAME = <span class=\"hljs-string\">\"failback\"</span>;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> &lt;T&gt; <span class=\"hljs-function\">Invoker&lt;T&gt; <span class=\"hljs-title\">join</span><span class=\"hljs-params\">(Directory&lt;T&gt; directory)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n        <span class=\"hljs-comment\">// 创建并返回 FailbackClusterInvoker 对象</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> FailbackClusterInvoker&lt;T&gt;(directory);\n    }\n\n}\n</code></pre>\n<p>如上，FailbackCluster 的逻辑也是很简单，无需解释了。所以接下来，我们把重点放在各种 Cluster Invoker 上</p>\n<h3>3.2 Cluster Invoker 分析</h3>\n<p>我们首先从各种 Cluster Invoker 的父类 AbstractClusterInvoker 源码开始说起。前面说过，集群工作过程可分为两个阶段，第一个阶段是在服务消费者初始化期间，这个在<a href=\"\">服务引用</a>那篇文章中分析过，就不赘述。第二个阶段是在服务消费者进行远程调用时，此时 AbstractClusterInvoker 的 invoke 方法会被调用。列举 Invoker，负载均衡等操作均会在此阶段被执行。因此下面先来看一下 invoke 方法的逻辑。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Result <span class=\"hljs-title\">invoke</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Invocation invocation)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n    checkWhetherDestroyed();\n    LoadBalance loadbalance = <span class=\"hljs-keyword\">null</span>;\n\n    <span class=\"hljs-comment\">// 绑定 attachments 到 invocation 中.</span>\n    Map&lt;String, String&gt; contextAttachments = RpcContext.getContext().getAttachments();\n    <span class=\"hljs-keyword\">if</span> (contextAttachments != <span class=\"hljs-keyword\">null</span> &amp;&amp; contextAttachments.size() != <span class=\"hljs-number\">0</span>) {\n        ((RpcInvocation) invocation).addAttachments(contextAttachments);\n    }\n\n    <span class=\"hljs-comment\">// 列举 Invoker</span>\n    List&lt;Invoker&lt;T&gt;&gt; invokers = list(invocation);\n    <span class=\"hljs-keyword\">if</span> (invokers != <span class=\"hljs-keyword\">null</span> &amp;&amp; !invokers.isEmpty()) {\n        <span class=\"hljs-comment\">// 加载 LoadBalance</span>\n        loadbalance = ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension(invokers.get(<span class=\"hljs-number\">0</span>).getUrl()\n                .getMethodParameter(RpcUtils.getMethodName(invocation), Constants.LOADBALANCE_KEY, Constants.DEFAULT_LOADBALANCE));\n    }\n    RpcUtils.attachInvocationIdIfAsync(getUrl(), invocation);\n    \n    <span class=\"hljs-comment\">// 调用 doInvoke 进行后续操作</span>\n    <span class=\"hljs-keyword\">return</span> doInvoke(invocation, invokers, loadbalance);\n}\n\n<span class=\"hljs-comment\">// 抽象方法，由子类实现</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">abstract</span> Result <span class=\"hljs-title\">doInvoke</span><span class=\"hljs-params\">(Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers,\n                                       LoadBalance loadbalance)</span> <span class=\"hljs-keyword\">throws</span> RpcException</span>;\n</code></pre>\n<p>AbstractClusterInvoker 的 invoke 方法主要用于列举 Invoker，以及加载 LoadBalance。最后再调用模板方法 doInvoke 进行后续操作。下面我们来看一下 Invoker 列举方法 list(Invocation) 的逻辑，如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">protected</span> List&lt;Invoker&lt;T&gt;&gt; list(Invocation invocation) <span class=\"hljs-keyword\">throws</span> RpcException {\n    <span class=\"hljs-comment\">// 调用 Directory 的 list 方法列举 Invoker</span>\n    List&lt;Invoker&lt;T&gt;&gt; invokers = directory.list(invocation);\n    <span class=\"hljs-keyword\">return</span> invokers;\n}\n</code></pre>\n<p>如上，AbstractClusterInvoker 中的 list 方法做的事情很简单，只是简单的调用了 Directory 的 list 方法，没有其他更多的逻辑了。Directory 即相关实现类在前文已经分析过，这里就不多说了。接下来，我们把目光转移到 AbstractClusterInvoker 的各种实现类上，来看一下这些实现类是如何实现 doInvoke 方法逻辑的。</p>\n<h4>3.2.1 FailoverClusterInvoker</h4>\n<p>FailoverClusterInvoker 在调用失败时，会自动切换 Invoker 进行重试。默认确配置下，Dubbo 会使用这个类作为缺省 Cluster Invoker。下面来看一下该类的逻辑。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FailoverClusterInvoker</span>&lt;<span class=\"hljs-title\">T</span>&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractClusterInvoker</span>&lt;<span class=\"hljs-title\">T</span>&gt; </span>{\n\n    <span class=\"hljs-comment\">// 省略部分代码</span>\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Result <span class=\"hljs-title\">doInvoke</span><span class=\"hljs-params\">(Invocation invocation, <span class=\"hljs-keyword\">final</span> List&lt;Invoker&lt;T&gt;&gt; invokers, LoadBalance loadbalance)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n        List&lt;Invoker&lt;T&gt;&gt; copyinvokers = invokers;\n        checkInvokers(copyinvokers, invocation);\n        <span class=\"hljs-comment\">// 获取重试次数</span>\n        <span class=\"hljs-keyword\">int</span> len = getUrl().getMethodParameter(invocation.getMethodName(), Constants.RETRIES_KEY, Constants.DEFAULT_RETRIES) + <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">if</span> (len &lt;= <span class=\"hljs-number\">0</span>) {\n            len = <span class=\"hljs-number\">1</span>;\n        }\n        RpcException le = <span class=\"hljs-keyword\">null</span>;\n        List&lt;Invoker&lt;T&gt;&gt; invoked = <span class=\"hljs-keyword\">new</span> ArrayList&lt;Invoker&lt;T&gt;&gt;(copyinvokers.size());\n        Set&lt;String&gt; providers = <span class=\"hljs-keyword\">new</span> HashSet&lt;String&gt;(len);\n        <span class=\"hljs-comment\">// 循环调用，失败重试</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; len; i++) {\n            <span class=\"hljs-keyword\">if</span> (i &gt; <span class=\"hljs-number\">0</span>) {\n                checkWhetherDestroyed();\n                <span class=\"hljs-comment\">// 在进行重试前重新列举 Invoker，这样做的好处是，如果某个服务挂了，</span>\n                <span class=\"hljs-comment\">// 通过调用 list 可得到最新可用的 Invoker 列表</span>\n                copyinvokers = list(invocation);\n                <span class=\"hljs-comment\">// 对 copyinvokers 进行判空检查</span>\n                checkInvokers(copyinvokers, invocation);\n            }\n\n            <span class=\"hljs-comment\">// 通过负载均衡选择 Invoker</span>\n            Invoker&lt;T&gt; invoker = select(loadbalance, invocation, copyinvokers, invoked);\n            <span class=\"hljs-comment\">// 添加到 invoker 到 invoked 列表中</span>\n            invoked.add(invoker);\n            <span class=\"hljs-comment\">// 设置 invoked 到 RPC 上下文中</span>\n            RpcContext.getContext().setInvokers((List) invoked);\n            <span class=\"hljs-keyword\">try</span> {\n                <span class=\"hljs-comment\">// 调用目标 Invoker 的 invoke 方法</span>\n                Result result = invoker.invoke(invocation);\n                <span class=\"hljs-keyword\">return</span> result;\n            } <span class=\"hljs-keyword\">catch</span> (RpcException e) {\n                <span class=\"hljs-keyword\">if</span> (e.isBiz()) {\n                    <span class=\"hljs-keyword\">throw</span> e;\n                }\n                le = e;\n            } <span class=\"hljs-keyword\">catch</span> (Throwable e) {\n                le = <span class=\"hljs-keyword\">new</span> RpcException(e.getMessage(), e);\n            } <span class=\"hljs-keyword\">finally</span> {\n                providers.add(invoker.getUrl().getAddress());\n            }\n        }\n        \n        <span class=\"hljs-comment\">// 若重试失败，则抛出异常</span>\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RpcException(..., <span class=\"hljs-string\">\"Failed to invoke the method ...\"</span>);\n    }\n}\n</code></pre>\n<p>如上，FailoverClusterInvoker 的 doInvoke 方法首先是获取重试次数，然后根据重试次数进行循环调用，失败后进行重试。在 for 循环内，首先是通过负载均衡组件选择一个 Invoker，然后再通过这个 Invoker 的 invoke 方法进行远程调用。如果失败了，记录下异常，并进行重试。重试时会再次调用父类的 list 方法列举 Invoker。整个流程大致如此，不是很难理解。下面我们看一下 select 方法的逻辑。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> Invoker&lt;T&gt; <span class=\"hljs-title\">select</span><span class=\"hljs-params\">(LoadBalance loadbalance, Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, List&lt;Invoker&lt;T&gt;&gt; selected)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n    <span class=\"hljs-keyword\">if</span> (invokers == <span class=\"hljs-keyword\">null</span> || invokers.isEmpty())\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n    <span class=\"hljs-comment\">// 获取调用方法名</span>\n    String methodName = invocation == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-string\">\"\"</span> : invocation.getMethodName();\n\n    <span class=\"hljs-comment\">// 获取 sticky 配置，sticky 表示粘滞连接。所谓粘滞连接是指让服务消费者尽可能的</span>\n    <span class=\"hljs-comment\">// 调用同一个服务提供者，除非该提供者挂了再进行切换</span>\n    <span class=\"hljs-keyword\">boolean</span> sticky = invokers.get(<span class=\"hljs-number\">0</span>).getUrl().getMethodParameter(methodName, Constants.CLUSTER_STICKY_KEY, Constants.DEFAULT_CLUSTER_STICKY);\n    {\n        <span class=\"hljs-comment\">// 检测 invokers 列表是否包含 stickyInvoker，如果不包含，</span>\n        <span class=\"hljs-comment\">// 说明 stickyInvoker 代表的服务提供者挂了，此时需要将其置空</span>\n        <span class=\"hljs-keyword\">if</span> (stickyInvoker != <span class=\"hljs-keyword\">null</span> &amp;&amp; !invokers.contains(stickyInvoker)) {\n            stickyInvoker = <span class=\"hljs-keyword\">null</span>;\n        }\n        \n        <span class=\"hljs-comment\">// 在 sticky 为 true，且 stickyInvoker != null 的情况下。如果 selected 包含 </span>\n        <span class=\"hljs-comment\">// stickyInvoker，表明 stickyInvoker 对应的服务提供者可能因网络原因未能成功提供服务。</span>\n        <span class=\"hljs-comment\">// 但是该提供者并没挂，此时 invokers 列表中仍存在该服务提供者对应的 Invoker。</span>\n        <span class=\"hljs-keyword\">if</span> (sticky &amp;&amp; stickyInvoker != <span class=\"hljs-keyword\">null</span> &amp;&amp; (selected == <span class=\"hljs-keyword\">null</span> || !selected.contains(stickyInvoker))) {\n            <span class=\"hljs-comment\">// availablecheck 表示是否开启了可用性检查，如果开启了，则调用 stickyInvoker 的 </span>\n            <span class=\"hljs-comment\">// isAvailable 方法进行检查，如果检查通过，则直接返回 stickyInvoker。</span>\n            <span class=\"hljs-keyword\">if</span> (availablecheck &amp;&amp; stickyInvoker.isAvailable()) {\n                <span class=\"hljs-keyword\">return</span> stickyInvoker;\n            }\n        }\n    }\n    \n    <span class=\"hljs-comment\">// 如果线程走到当前代码处，说明前面的 stickyInvoker 为空，或者不可用。</span>\n    <span class=\"hljs-comment\">// 此时继续调用 doSelect 选择 Invoker</span>\n    Invoker&lt;T&gt; invoker = doSelect(loadbalance, invocation, invokers, selected);\n\n    <span class=\"hljs-comment\">// 如果 sticky 为 true，则将负载均衡组件选出的 Invoker 赋值给 stickyInvoker</span>\n    <span class=\"hljs-keyword\">if</span> (sticky) {\n        stickyInvoker = invoker;\n    }\n    <span class=\"hljs-keyword\">return</span> invoker;\n}\n</code></pre>\n<p>如上，select 方法的主要逻辑集中在了对粘滞连接特性的支持上。首先是获取 sticky 配置，然后再检测 invokers 列表中是否包含 stickyInvoker，如果不包含，则认为该 stickyInvoker 不可用，此时将其置空。这里的 invokers 列表可以看做是<strong>存活着的服务提供者</strong>列表，如果这个列表不包含 stickyInvoker，那自然而然的认为 stickyInvoker 挂了，所以置空。如果 stickyInvoker 存在于 invokers 列表中，此时要进行下一项检测 — 检测 selected 中是否包含 stickyInvoker。如果包含的话，说明 stickyInvoker 在此之前没有成功提供服务（但其仍然处于存活状态）。此时我们认为这个服务不可靠，不应该在重试期间内再次被调用，因此这个时候不会返回该 stickyInvoker。如果 selected 不包含 stickyInvoker，此时还需要进行可用性检测，比如检测服务提供者网络连通性等。当可用性检测通过，才可返回 stickyInvoker，否则调用 doSelect 方法选择 Invoker。如果 sticky 为 true，此时会将 doSelect 方法选出的 Invoker 赋值给 stickyInvoker。</p>\n<p>以上就是 select 方法的逻辑，这段逻辑看起来不是很复杂，但是信息量比较大。不搞懂 invokers 和 selected 两个入参的含义，以及粘滞连接特性，这段代码是不容易看懂的。所以大家在阅读这段代码时，不要忽略了对背景知识的理解。关于 select 方法先分析这么多，继续向下分析。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> Invoker&lt;T&gt; <span class=\"hljs-title\">doSelect</span><span class=\"hljs-params\">(LoadBalance loadbalance, Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, List&lt;Invoker&lt;T&gt;&gt; selected)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n    <span class=\"hljs-keyword\">if</span> (invokers == <span class=\"hljs-keyword\">null</span> || invokers.isEmpty())\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n    <span class=\"hljs-keyword\">if</span> (invokers.size() == <span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">return</span> invokers.get(<span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">if</span> (loadbalance == <span class=\"hljs-keyword\">null</span>) {\n        <span class=\"hljs-comment\">// 如果 loadbalance 为空，这里通过 SPI 加载 Loadbalance，默认为 RandomLoadBalance</span>\n        loadbalance = ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension(Constants.DEFAULT_LOADBALANCE);\n    }\n    \n    <span class=\"hljs-comment\">// 通过负载均衡组件选择 Invoker</span>\n    Invoker&lt;T&gt; invoker = loadbalance.select(invokers, getUrl(), invocation);\n\n\t<span class=\"hljs-comment\">// 如果 selected 包含负载均衡选择出的 Invoker，或者该 Invoker 无法经过可用性检查，此时进行重选</span>\n    <span class=\"hljs-keyword\">if</span> ((selected != <span class=\"hljs-keyword\">null</span> &amp;&amp; selected.contains(invoker))\n            || (!invoker.isAvailable() &amp;&amp; getUrl() != <span class=\"hljs-keyword\">null</span> &amp;&amp; availablecheck)) {\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-comment\">// 进行重选</span>\n            Invoker&lt;T&gt; rinvoker = reselect(loadbalance, invocation, invokers, selected, availablecheck);\n            <span class=\"hljs-keyword\">if</span> (rinvoker != <span class=\"hljs-keyword\">null</span>) {\n                <span class=\"hljs-comment\">// 如果 rinvoker 不为空，则将其赋值给 invoker</span>\n                invoker = rinvoker;\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-comment\">// rinvoker 为空，定位 invoker 在 invokers 中的位置</span>\n                <span class=\"hljs-keyword\">int</span> index = invokers.indexOf(invoker);\n                <span class=\"hljs-keyword\">try</span> {\n                    <span class=\"hljs-comment\">// 获取 index + 1 位置处的 Invoker，以下代码等价于：</span>\n                    <span class=\"hljs-comment\">//     invoker = invokers.get((index + 1) % invokers.size());</span>\n                    invoker = index &lt; invokers.size() - <span class=\"hljs-number\">1</span> ? invokers.get(index + <span class=\"hljs-number\">1</span>) : invokers.get(<span class=\"hljs-number\">0</span>);\n                } <span class=\"hljs-keyword\">catch</span> (Exception e) {\n                    logger.warn(<span class=\"hljs-string\">\"... may because invokers list dynamic change, ignore.\"</span>);\n                }\n            }\n        } <span class=\"hljs-keyword\">catch</span> (Throwable t) {\n            logger.error(<span class=\"hljs-string\">\"cluster reselect fail reason is : ...\"</span>);\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> invoker;\n}\n</code></pre>\n<p>doSelect 主要做了两件事，第一是通过负载均衡组件选择 Invoker。第二是，如果选出来的 Invoker 不稳定，或不可用，此时需要调用 reselect 方法进行重选。若 reselect 选出来的 Invoker 为空，此时定位 invoker 在 invokers 列表中的位置 index，然后获取 index + 1 处的 invoker，这也可以看做是重选逻辑的一部分。下面我们来看一下 reselect 方法的逻辑。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> Invoker&lt;T&gt; <span class=\"hljs-title\">reselect</span><span class=\"hljs-params\">(LoadBalance loadbalance, Invocation invocation,\n    List&lt;Invoker&lt;T&gt;&gt; invokers, List&lt;Invoker&lt;T&gt;&gt; selected, <span class=\"hljs-keyword\">boolean</span> availablecheck)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n\n    List&lt;Invoker&lt;T&gt;&gt; reselectInvokers = <span class=\"hljs-keyword\">new</span> ArrayList&lt;Invoker&lt;T&gt;&gt;(invokers.size() &gt; <span class=\"hljs-number\">1</span> ? (invokers.size() - <span class=\"hljs-number\">1</span>) : invokers.size());\n\n    <span class=\"hljs-comment\">// 下面的 if-else 分支逻辑有些冗余，pull request #2826 对这段代码进行了简化，可以参考一下</span>\n    <span class=\"hljs-comment\">// 根据 availablecheck 进行不同的处理</span>\n    <span class=\"hljs-keyword\">if</span> (availablecheck) {\n        <span class=\"hljs-comment\">// 遍历 invokers 列表</span>\n        <span class=\"hljs-keyword\">for</span> (Invoker&lt;T&gt; invoker : invokers) {\n            <span class=\"hljs-comment\">// 检测可用性</span>\n            <span class=\"hljs-keyword\">if</span> (invoker.isAvailable()) {\n                <span class=\"hljs-comment\">// 如果 selected 列表不包含当前 invoker，则将其添加到 reselectInvokers 中</span>\n                <span class=\"hljs-keyword\">if</span> (selected == <span class=\"hljs-keyword\">null</span> || !selected.contains(invoker)) {\n                    reselectInvokers.add(invoker);\n                }\n            }\n        }\n        \n        <span class=\"hljs-comment\">// reselectInvokers 不为空，此时通过负载均衡组件进行选择</span>\n        <span class=\"hljs-keyword\">if</span> (!reselectInvokers.isEmpty()) {\n            <span class=\"hljs-keyword\">return</span> loadbalance.select(reselectInvokers, getUrl(), invocation);\n        }\n\n    <span class=\"hljs-comment\">// 不检查 Invoker 可用性</span>\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">for</span> (Invoker&lt;T&gt; invoker : invokers) {\n            <span class=\"hljs-comment\">// 如果 selected 列表不包含当前 invoker，则将其添加到 reselectInvokers 中</span>\n            <span class=\"hljs-keyword\">if</span> (selected == <span class=\"hljs-keyword\">null</span> || !selected.contains(invoker)) {\n                reselectInvokers.add(invoker);\n            }\n        }\n        <span class=\"hljs-keyword\">if</span> (!reselectInvokers.isEmpty()) {\n            <span class=\"hljs-comment\">// 通过负载均衡组件进行选择</span>\n            <span class=\"hljs-keyword\">return</span> loadbalance.select(reselectInvokers, getUrl(), invocation);\n        }\n    }\n\n    {\n        <span class=\"hljs-comment\">// 若线程走到此处，说明 reselectInvokers 集合为空，此时不会调用负载均衡组件进行筛选。</span>\n        <span class=\"hljs-comment\">// 这里从 selected 列表中查找可用的 Invoker，并将其添加到 reselectInvokers 集合中</span>\n        <span class=\"hljs-keyword\">if</span> (selected != <span class=\"hljs-keyword\">null</span>) {\n            <span class=\"hljs-keyword\">for</span> (Invoker&lt;T&gt; invoker : selected) {\n                <span class=\"hljs-keyword\">if</span> ((invoker.isAvailable())\n                        &amp;&amp; !reselectInvokers.contains(invoker)) {\n                    reselectInvokers.add(invoker);\n                }\n            }\n        }\n        <span class=\"hljs-keyword\">if</span> (!reselectInvokers.isEmpty()) {\n            <span class=\"hljs-comment\">// 再次进行选择，并返回选择结果</span>\n            <span class=\"hljs-keyword\">return</span> loadbalance.select(reselectInvokers, getUrl(), invocation);\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n}\n</code></pre>\n<p>reselect 方法总结下来其实只做了两件事情，第一是查找可用的 Invoker，并将其添加到 reselectInvokers 集合中。第二，如果 reselectInvokers 不为空，则通过负载均衡组件再次进行选择。其中第一件事情又可进行细分，一开始，reselect 从 invokers 列表中查找有效可用的 Invoker，若未能找到，此时再到 selected 列表中继续查找。关于 reselect 方法就先分析到这，继续分析其他的 Cluster Invoker。</p>\n<h4>3.2.2 FailbackClusterInvoker</h4>\n<p>FailbackClusterInvoker 会在调用失败后，返回一个空结果给服务提供者。并通过定时任务对失败的调用进行重传，适合执行消息通知等操作。下面来看一下它的实现逻辑。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FailbackClusterInvoker</span>&lt;<span class=\"hljs-title\">T</span>&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractClusterInvoker</span>&lt;<span class=\"hljs-title\">T</span>&gt; </span>{\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> RETRY_FAILED_PERIOD = <span class=\"hljs-number\">5</span> * <span class=\"hljs-number\">1000</span>;\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(<span class=\"hljs-number\">2</span>,\n            <span class=\"hljs-keyword\">new</span> NamedInternalThreadFactory(<span class=\"hljs-string\">\"failback-cluster-timer\"</span>, <span class=\"hljs-keyword\">true</span>));\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> ConcurrentMap&lt;Invocation, AbstractClusterInvoker&lt;?&gt;&gt; failed = <span class=\"hljs-keyword\">new</span> ConcurrentHashMap&lt;Invocation, AbstractClusterInvoker&lt;?&gt;&gt;();\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">volatile</span> ScheduledFuture&lt;?&gt; retryFuture;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> Result <span class=\"hljs-title\">doInvoke</span><span class=\"hljs-params\">(Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, LoadBalance loadbalance)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n        <span class=\"hljs-keyword\">try</span> {\n            checkInvokers(invokers, invocation);\n            <span class=\"hljs-comment\">// 选择 Invoker</span>\n            Invoker&lt;T&gt; invoker = select(loadbalance, invocation, invokers, <span class=\"hljs-keyword\">null</span>);\n            <span class=\"hljs-comment\">// 进行调用</span>\n            <span class=\"hljs-keyword\">return</span> invoker.invoke(invocation);\n        } <span class=\"hljs-keyword\">catch</span> (Throwable e) {\n            <span class=\"hljs-comment\">// 如果调用过程中发生异常，此时仅打印错误日志，不抛出异常</span>\n            logger.error(<span class=\"hljs-string\">\"Failback to invoke method ...\"</span>);\n            \n            <span class=\"hljs-comment\">// 记录调用信息</span>\n            addFailed(invocation, <span class=\"hljs-keyword\">this</span>);\n            <span class=\"hljs-comment\">// 返回一个空结果给服务消费者</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> RpcResult();\n        }\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addFailed</span><span class=\"hljs-params\">(Invocation invocation, AbstractClusterInvoker&lt;?&gt; router)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (retryFuture == <span class=\"hljs-keyword\">null</span>) {\n            <span class=\"hljs-keyword\">synchronized</span> (<span class=\"hljs-keyword\">this</span>) {\n                <span class=\"hljs-keyword\">if</span> (retryFuture == <span class=\"hljs-keyword\">null</span>) {\n                    <span class=\"hljs-comment\">// 创建定时任务，每隔5秒执行一次</span>\n                    retryFuture = scheduledExecutorService.scheduleWithFixedDelay(<span class=\"hljs-keyword\">new</span> Runnable() {\n\n                        <span class=\"hljs-meta\">@Override</span>\n                        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>{\n                            <span class=\"hljs-keyword\">try</span> {\n                                <span class=\"hljs-comment\">// 对失败的调用进行重试</span>\n                                retryFailed();\n                            } <span class=\"hljs-keyword\">catch</span> (Throwable t) {\n                                <span class=\"hljs-comment\">// 如果发生异常，仅打印异常日志，不抛出</span>\n                                logger.error(<span class=\"hljs-string\">\"Unexpected error occur at collect statistic\"</span>, t);\n                            }\n                        }\n                    }, RETRY_FAILED_PERIOD, RETRY_FAILED_PERIOD, TimeUnit.MILLISECONDS);\n                }\n            }\n        }\n        \n        <span class=\"hljs-comment\">// 添加 invocation 和 invoker 到 failed 中</span>\n        failed.put(invocation, router);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">retryFailed</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (failed.size() == <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        \n        <span class=\"hljs-comment\">// 遍历 failed，对失败的调用进行重试</span>\n        <span class=\"hljs-keyword\">for</span> (Map.Entry&lt;Invocation, AbstractClusterInvoker&lt;?&gt;&gt; entry : <span class=\"hljs-keyword\">new</span> HashMap&lt;Invocation, AbstractClusterInvoker&lt;?&gt;&gt;(failed).entrySet()) {\n            Invocation invocation = entry.getKey();\n            Invoker&lt;?&gt; invoker = entry.getValue();\n            <span class=\"hljs-keyword\">try</span> {\n                <span class=\"hljs-comment\">// 再次进行调用</span>\n                invoker.invoke(invocation);\n                <span class=\"hljs-comment\">// 调用成功后，从 failed 中移除 invoker</span>\n                failed.remove(invocation);\n            } <span class=\"hljs-keyword\">catch</span> (Throwable e) {\n                <span class=\"hljs-comment\">// 仅打印异常，不抛出</span>\n                logger.error(<span class=\"hljs-string\">\"Failed retry to invoke method ...\"</span>);\n            }\n        }\n    }\n}\n</code></pre>\n<p>这个类主要由3个方法组成，首先是 doInvoker，该方法负责初次的远程调用。若远程调用失败，则通过 addFailed 方法将调用信息存入到 failed 中，等待定时重试。addFailed 在开始阶段会根据 retryFuture 为空与否，来决定是否开启定时任务。retryFailed 方法则是包含了失败重试的逻辑，该方法会对 failed 进行遍历，然后依次对 Invoker 进行调用。调用成功则将 Invoker 从 failed 中移除，调用失败则忽略失败原因。</p>\n<p>以上就是 FailbackClusterInvoker 的执行逻辑，不是很复杂，继续往下看。</p>\n<h4>3.2.3 FailfastClusterInvoker</h4>\n<p>FailfastClusterInvoker 只会进行一次调用，失败后立即抛出异常。适用于幂等操作，比如新增记录。源码如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FailfastClusterInvoker</span>&lt;<span class=\"hljs-title\">T</span>&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractClusterInvoker</span>&lt;<span class=\"hljs-title\">T</span>&gt; </span>{\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Result <span class=\"hljs-title\">doInvoke</span><span class=\"hljs-params\">(Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, LoadBalance loadbalance)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n        checkInvokers(invokers, invocation);\n        <span class=\"hljs-comment\">// 选择 Invoker</span>\n        Invoker&lt;T&gt; invoker = select(loadbalance, invocation, invokers, <span class=\"hljs-keyword\">null</span>);\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-comment\">// 调用 Invoker</span>\n            <span class=\"hljs-keyword\">return</span> invoker.invoke(invocation);\n        } <span class=\"hljs-keyword\">catch</span> (Throwable e) {\n            <span class=\"hljs-keyword\">if</span> (e <span class=\"hljs-keyword\">instanceof</span> RpcException &amp;&amp; ((RpcException) e).isBiz()) {\n                <span class=\"hljs-comment\">// 抛出异常</span>\n                <span class=\"hljs-keyword\">throw</span> (RpcException) e;\n            }\n            <span class=\"hljs-comment\">// 抛出异常</span>\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RpcException(..., <span class=\"hljs-string\">\"Failfast invoke providers ...\"</span>);\n        }\n    }\n}\n</code></pre>\n<p>如上，首先是通过 select 方法选择 Invoker，然后进行远程调用。如果调用失败，则立即抛出异常。FailfastClusterInvoker 就先分析到这，下面分析 FailsafeClusterInvoker。</p>\n<h4>3.2.4 FailsafeClusterInvoker</h4>\n<p>FailsafeClusterInvoker 是一种失败安全的 Cluster Invoker。所谓的失败安全是指，当调用过程中出现异常时，FailsafeClusterInvoker 仅会打印异常，而不会抛出异常。适用于写入审计日志等操作。下面分析源码。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FailsafeClusterInvoker</span>&lt;<span class=\"hljs-title\">T</span>&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractClusterInvoker</span>&lt;<span class=\"hljs-title\">T</span>&gt; </span>{\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Result <span class=\"hljs-title\">doInvoke</span><span class=\"hljs-params\">(Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, LoadBalance loadbalance)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n        <span class=\"hljs-keyword\">try</span> {\n            checkInvokers(invokers, invocation);\n            <span class=\"hljs-comment\">// 选择 Invoker</span>\n            Invoker&lt;T&gt; invoker = select(loadbalance, invocation, invokers, <span class=\"hljs-keyword\">null</span>);\n            <span class=\"hljs-comment\">// 进行远程调用</span>\n            <span class=\"hljs-keyword\">return</span> invoker.invoke(invocation);\n        } <span class=\"hljs-keyword\">catch</span> (Throwable e) {\n\t\t\t<span class=\"hljs-comment\">// 打印错误日志，但不抛出</span>\n            logger.error(<span class=\"hljs-string\">\"Failsafe ignore exception: \"</span> + e.getMessage(), e);\n            <span class=\"hljs-comment\">// 返回空结果忽略错误</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> RpcResult();\n        }\n    }\n}\n</code></pre>\n<p>FailsafeClusterInvoker 的逻辑和 FailfastClusterInvoker 的逻辑一样简单，无需过多说明。继续向下分析。</p>\n<h4>3.2.5 ForkingClusterInvoker</h4>\n<p>ForkingClusterInvoker 会在运行时通过线程池创建多个线程，并发调用多个服务提供者。只要有一个服务提供者成功返回了结果，doInvoke 方法就会立即结束运行。ForkingClusterInvoker 的应用场景是在一些对实时性要求比较高<strong>读操作</strong>（注意是读操作，并行写操作可能不安全）下使用，但这将会耗费更多的资源。下面来看该类的实现。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ForkingClusterInvoker</span>&lt;<span class=\"hljs-title\">T</span>&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractClusterInvoker</span>&lt;<span class=\"hljs-title\">T</span>&gt; </span>{\n    \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> ExecutorService executor = Executors.newCachedThreadPool(\n            <span class=\"hljs-keyword\">new</span> NamedInternalThreadFactory(<span class=\"hljs-string\">\"forking-cluster-timer\"</span>, <span class=\"hljs-keyword\">true</span>));\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Result <span class=\"hljs-title\">doInvoke</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, LoadBalance loadbalance)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n        <span class=\"hljs-keyword\">try</span> {\n            checkInvokers(invokers, invocation);\n            <span class=\"hljs-keyword\">final</span> List&lt;Invoker&lt;T&gt;&gt; selected;\n            <span class=\"hljs-comment\">// 获取 forks 配置</span>\n            <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> forks = getUrl().getParameter(Constants.FORKS_KEY, Constants.DEFAULT_FORKS);\n            <span class=\"hljs-comment\">// 获取超时配置</span>\n            <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> timeout = getUrl().getParameter(Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT);\n            <span class=\"hljs-comment\">// 如果 forks 配置不合理，则直接将 invokers 赋值给 selected</span>\n            <span class=\"hljs-keyword\">if</span> (forks &lt;= <span class=\"hljs-number\">0</span> || forks &gt;= invokers.size()) {\n                selected = invokers;\n            } <span class=\"hljs-keyword\">else</span> {\n                selected = <span class=\"hljs-keyword\">new</span> ArrayList&lt;Invoker&lt;T&gt;&gt;();\n                <span class=\"hljs-comment\">// 循环选出 forks 个 Invoker，并添加到 selected 中</span>\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; forks; i++) {\n                    <span class=\"hljs-comment\">// 选择 Invoker</span>\n                    Invoker&lt;T&gt; invoker = select(loadbalance, invocation, invokers, selected);\n                    <span class=\"hljs-keyword\">if</span> (!selected.contains(invoker)) {\n                        selected.add(invoker);\n                    }\n                }\n            }\n            \n            <span class=\"hljs-comment\">// ----------------------✨ 分割线1 ✨---------------------- //</span>\n            \n            RpcContext.getContext().setInvokers((List) selected);\n            <span class=\"hljs-keyword\">final</span> AtomicInteger count = <span class=\"hljs-keyword\">new</span> AtomicInteger();\n            <span class=\"hljs-keyword\">final</span> BlockingQueue&lt;Object&gt; ref = <span class=\"hljs-keyword\">new</span> LinkedBlockingQueue&lt;Object&gt;();\n            <span class=\"hljs-comment\">// 遍历 selected 列表</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">final</span> Invoker&lt;T&gt; invoker : selected) {\n                <span class=\"hljs-comment\">// 为每个 Invoker 创建一个执行线程</span>\n                executor.execute(<span class=\"hljs-keyword\">new</span> Runnable() {\n                    <span class=\"hljs-meta\">@Override</span>\n                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>{\n                        <span class=\"hljs-keyword\">try</span> {\n                            <span class=\"hljs-comment\">// 进行远程调用</span>\n                            Result result = invoker.invoke(invocation);\n                            <span class=\"hljs-comment\">// 将结果存到阻塞队列中</span>\n                            ref.offer(result);\n                        } <span class=\"hljs-keyword\">catch</span> (Throwable e) {\n                            <span class=\"hljs-keyword\">int</span> value = count.incrementAndGet();\n                            <span class=\"hljs-comment\">// 仅在 value 大于等于 selected.size() 时，才将异常对象</span>\n                            <span class=\"hljs-comment\">// 放入阻塞队列中，请大家思考一下为什么要这样做。</span>\n                            <span class=\"hljs-keyword\">if</span> (value &gt;= selected.size()) {\n                                <span class=\"hljs-comment\">// 将异常对象存入到阻塞队列中</span>\n                                ref.offer(e);\n                            }\n                        }\n                    }\n                });\n            }\n            \n            <span class=\"hljs-comment\">// ----------------------✨ 分割线2 ✨---------------------- //</span>\n            \n            <span class=\"hljs-keyword\">try</span> {\n                <span class=\"hljs-comment\">// 从阻塞队列中取出远程调用结果</span>\n                Object ret = ref.poll(timeout, TimeUnit.MILLISECONDS);\n                \n                <span class=\"hljs-comment\">// 如果结果类型为 Throwable，则抛出异常</span>\n                <span class=\"hljs-keyword\">if</span> (ret <span class=\"hljs-keyword\">instanceof</span> Throwable) {\n                    Throwable e = (Throwable) ret;\n                    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RpcException(..., <span class=\"hljs-string\">\"Failed to forking invoke provider ...\"</span>);\n                }\n                \n                <span class=\"hljs-comment\">// 返回结果</span>\n                <span class=\"hljs-keyword\">return</span> (Result) ret;\n            } <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RpcException(<span class=\"hljs-string\">\"Failed to forking invoke provider ...\"</span>);\n            }\n        } <span class=\"hljs-keyword\">finally</span> {\n            RpcContext.getContext().clearAttachments();\n        }\n    }\n}\n</code></pre>\n<p>ForkingClusterInvoker 的 doInvoker 方法比较长，这里通过两个分割线将整个方法划分为三个逻辑块。从方法开始到分割线1之间的代码主要是用于选出 forks 个 Invoker，为接下来的并发调用提供输入。分割线1和分割线2之间的逻辑通过线程池并发调用多个 Invoker，并将结果存储在阻塞队列中。分割线2到方法结尾之间的逻辑主要用于从阻塞队列中获取返回结果，并对返回结果类型进行判断。如果为异常类型，则直接抛出，否则返回。</p>\n<p>以上就是ForkingClusterInvoker 的 doInvoker 方法大致过程。我们在分割线1和分割线2之间的代码上留了一个问题，问题是这样的：为什么要在<code>value &gt;= selected.size()</code>的情况下，才将异常对象添加到阻塞队列中？这里来解答一下。原因是这样的，在并行调用多个服务提供者的情况下，只要有一个服务提供者能够成功返回结果，而其他全部失败。此时 ForkingClusterInvoker 仍应该返回成功的结果，而非抛出异常。在<code>value &gt;= selected.size()</code>时将异常对象放入阻塞队列中，可以保证异常对象不会出现在正常结果的前面，这样可从阻塞队列中优先取出正常的结果。</p>\n<p>关于 ForkingClusterInvoker 就先分析到这，接下来分析最后一个 Cluster Invoker。</p>\n<h4>3.2.6 BroadcastClusterInvoker</h4>\n<p>本章的最后，我们再来看一下 BroadcastClusterInvoker。BroadcastClusterInvoker 会逐个调用每个服务提供者，如果其中一台报错，在循环调用结束后，BroadcastClusterInvoker 会抛出异常。该类通常用于通知所有提供者更新缓存或日志等本地资源信息。源码如下。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BroadcastClusterInvoker</span>&lt;<span class=\"hljs-title\">T</span>&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractClusterInvoker</span>&lt;<span class=\"hljs-title\">T</span>&gt; </span>{\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Result <span class=\"hljs-title\">doInvoke</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, LoadBalance loadbalance)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n        checkInvokers(invokers, invocation);\n        RpcContext.getContext().setInvokers((List) invokers);\n        RpcException exception = <span class=\"hljs-keyword\">null</span>;\n        Result result = <span class=\"hljs-keyword\">null</span>;\n        <span class=\"hljs-comment\">// 遍历 Invoker 列表，逐个调用</span>\n        <span class=\"hljs-keyword\">for</span> (Invoker&lt;T&gt; invoker : invokers) {\n            <span class=\"hljs-keyword\">try</span> {\n                <span class=\"hljs-comment\">// 进行远程调用</span>\n                result = invoker.invoke(invocation);\n            } <span class=\"hljs-keyword\">catch</span> (RpcException e) {\n                exception = e;\n                logger.warn(e.getMessage(), e);\n            } <span class=\"hljs-keyword\">catch</span> (Throwable e) {\n                exception = <span class=\"hljs-keyword\">new</span> RpcException(e.getMessage(), e);\n                logger.warn(e.getMessage(), e);\n            }\n        }\n        \n        <span class=\"hljs-comment\">// exception 不为空，则抛出异常</span>\n        <span class=\"hljs-keyword\">if</span> (exception != <span class=\"hljs-keyword\">null</span>) {\n            <span class=\"hljs-keyword\">throw</span> exception;\n        }\n        <span class=\"hljs-keyword\">return</span> result;\n    }\n}\n</code></pre>\n<p>以上就是 BroadcastClusterInvoker 的代码，比较简单，就不多说了。</p>\n<h2>4.总结</h2>\n<p>本篇文章详细分析了集群容错的几种实现方式。集群容错对于 Dubbo 框架来说，是很重要的逻辑。集群模块处于服务提供者和消费者之间，对于服务消费者来说，集群可向其屏蔽服务提供者集群的情况，使其能够专心进行远程调用。除此之外，通过集群模块，我们还可以对服务之间的调用链路进行编排优化，治理服务。总的来说，对于 Dubbo 而言，集群容错相关逻辑是非常重要的。想要对 Dubbo 有比较深的理解，集群容错是必须要掌握的。</p>\n<p>关于集群模块就先分析到这，感谢阅读。</p>\n",
  "link": "/zh-cn/docs/source_code_guide/cluster.html",
  "meta": {
    "title": "集群",
    "keywords": "Dubbo, Cluster",
    "description": "本文介绍了集群的原理和实现细节"
  }
}