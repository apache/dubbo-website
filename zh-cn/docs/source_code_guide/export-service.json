{
  "filename": "export-service.md",
  "__html": "<h2>1.简介</h2>\n<p>本篇文章，我们来研究一下 Dubbo 导出服务的过程。Dubbo 服务导出过程始于 Spring 容器发布刷新事件，Dubbo 在接收到事件后，会立即执行服务导出逻辑。整个逻辑大致可分为三个部分，第一部分是前置工作，主要用于检查参数，组装 URL。第二部分是导出服务，包含导出服务到本地 (JVM)，和导出服务到远程两个过程。第三部分是向注册中心注册服务，用于服务发现。本篇文章将会对这三个部分代码进行详细的分析。</p>\n<h2>2.源码分析</h2>\n<p>服务导出的入口方法是 ServiceBean 的 onApplicationEvent。onApplicationEvent 是一个事件响应方法，该方法会在收到 Spring 上下文刷新事件后执行服务导出操作。方法代码如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onApplicationEvent</span><span class=\"hljs-params\">(ContextRefreshedEvent event)</span> </span>{\n    <span class=\"hljs-comment\">// 是否有延迟导出 &amp;&amp; 是否已导出 &amp;&amp; 是不是已被取消导出</span>\n    <span class=\"hljs-keyword\">if</span> (isDelay() &amp;&amp; !isExported() &amp;&amp; !isUnexported()) {\n        <span class=\"hljs-comment\">// 导出服务</span>\n        export();\n    }\n}\n</code></pre>\n<p>这个方法首先会根据条件决定是否导出服务，比如有些服务设置了延时导出，那么此时就不应该在此处导出。还有一些服务已经被导出了，或者当前服务被取消导出了，此时也不能再次导出相关服务。注意这里的 isDelay 方法，这个方法字面意思是“是否延迟导出服务”，返回 true 表示延迟导出，false 表示不延迟导出。但是该方法真实意思却并非如此，当方法返回 true 时，表示无需延迟导出。返回 false 时，表示需要延迟导出。与字面意思恰恰相反，这个需要大家注意一下。下面我们来看一下这个方法的逻辑。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// -☆- ServiceBean</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isDelay</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// 获取 delay</span>\n    Integer delay = getDelay();\n    ProviderConfig provider = getProvider();\n    <span class=\"hljs-keyword\">if</span> (delay == <span class=\"hljs-keyword\">null</span> &amp;&amp; provider != <span class=\"hljs-keyword\">null</span>) {\n        <span class=\"hljs-comment\">// 如果前面获取的 delay 为空，这里继续获取</span>\n        delay = provider.getDelay();\n    }\n    <span class=\"hljs-comment\">// 判断 delay 是否为空，或者等于 -1</span>\n    <span class=\"hljs-keyword\">return</span> supportedApplicationListener &amp;&amp; (delay == <span class=\"hljs-keyword\">null</span> || delay == -<span class=\"hljs-number\">1</span>);\n}\n</code></pre>\n<p>暂时忽略 supportedApplicationListener 这个条件，当 delay 为空，或者等于-1时，该方法返回 true，而不是 false。这个方法的返回值让人有点困惑。该方法目前已被重构，详细请参考 <a href=\"https://github.com/apache/dubbo/pull/2686\">dubbo #2686</a>。</p>\n<p>现在解释一下 supportedApplicationListener 变量含义，该变量用于表示当前的 Spring 容器是否支持 ApplicationListener，这个值初始为 false。在 Spring 容器将自己设置到 ServiceBean 中时，ServiceBean 的 setApplicationContext 方法会检测 Spring 容器是否支持 ApplicationListener。若支持，则将 supportedApplicationListener 置为 true。ServiceBean 是 Dubbo 与 Spring 框架进行整合的关键，可以看做是两个框架之间的桥梁。具有同样作用的类还有 ReferenceBean。</p>\n<p>现在我们知道了 Dubbo 服务导出过程的起点，接下来对服务导出的前置逻辑进行分析。</p>\n<h3>2.1 前置工作</h3>\n<p>前置工作主要包含两个部分，分别是配置检查，以及 URL 装配。在导出服务之前，Dubbo 需要检查用户的配置是否合理，或者为用户补充缺省配置。配置检查完成后，接下来需要根据这些配置组装 URL。在 Dubbo 中，URL 的作用十分重要。Dubbo 使用 URL 作为配置载体，所有的拓展点都是通过 URL 获取配置。这一点，官方文档中有所说明。</p>\n<blockquote>\n<p>采用 URL 作为配置信息的统一格式，所有扩展点都通过传递 URL 携带配置信息。</p>\n</blockquote>\n<p>接下来，我们先来分析配置检查部分的源码，随后再来分析 URL 组装部分的源码。</p>\n<h4>2.1.1 检查配置</h4>\n<p>本节我们接着前面的源码向下分析，前面说过 onApplicationEvent 方法在经过一些判断后，会决定是否调用 export 方法导出服务。那么下面我们从 export 方法开始进行分析，如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">synchronized</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">export</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (provider != <span class=\"hljs-keyword\">null</span>) {\n        <span class=\"hljs-comment\">// 获取 export 和 delay 配置</span>\n        <span class=\"hljs-keyword\">if</span> (export == <span class=\"hljs-keyword\">null</span>) {\n            export = provider.getExport();\n        }\n        <span class=\"hljs-keyword\">if</span> (delay == <span class=\"hljs-keyword\">null</span>) {\n            delay = provider.getDelay();\n        }\n    }\n    <span class=\"hljs-comment\">// 如果 export 为 false，则不导出服务</span>\n    <span class=\"hljs-keyword\">if</span> (export != <span class=\"hljs-keyword\">null</span> &amp;&amp; !export) {\n        <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-comment\">// delay &gt; 0，延时导出服务</span>\n    <span class=\"hljs-keyword\">if</span> (delay != <span class=\"hljs-keyword\">null</span> &amp;&amp; delay &gt; <span class=\"hljs-number\">0</span>) {\n        delayExportExecutor.schedule(<span class=\"hljs-keyword\">new</span> Runnable() {\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>{\n                doExport();\n            }\n        }, delay, TimeUnit.MILLISECONDS);\n        \n    <span class=\"hljs-comment\">// 立即导出服务</span>\n    } <span class=\"hljs-keyword\">else</span> {\n        doExport();\n    }\n}\n</code></pre>\n<p>export 方法对两项配置进行了检查，并根据配置执行相应的动作。首先是 export 配置，这个配置决定了是否导出服务。有时候我们只是想本地启动服务进行一些调试工作，我们并不希望把本地启动的服务暴露出去给别人调用。此时，我们可通过配置 export 禁止服务导出，比如：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:provider</span> <span class=\"hljs-attr\">export</span>=<span class=\"hljs-string\">\"false\"</span> /&gt;</span>\n</code></pre>\n<p>delay 配置顾名思义，用于延迟导出服务，这个就不分析了。下面，我们继续分析源码，这次要分析的是 doExport 方法。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">synchronized</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doExport</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (unexported) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalStateException(<span class=\"hljs-string\">\"Already unexported!\"</span>);\n    }\n    <span class=\"hljs-keyword\">if</span> (exported) {\n        <span class=\"hljs-keyword\">return</span>;\n    }\n    exported = <span class=\"hljs-keyword\">true</span>;\n    <span class=\"hljs-comment\">// 检测 interfaceName 是否合法</span>\n    <span class=\"hljs-keyword\">if</span> (interfaceName == <span class=\"hljs-keyword\">null</span> || interfaceName.length() == <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalStateException(<span class=\"hljs-string\">\"interface not allow null!\"</span>);\n    }\n    <span class=\"hljs-comment\">// 检测 provider 是否为空，为空则新建一个，并通过系统变量为其初始化</span>\n    checkDefault();\n\n    <span class=\"hljs-comment\">// 下面几个 if 语句用于检测 provider、application 等核心配置类对象是否为空，</span>\n    <span class=\"hljs-comment\">// 若为空，则尝试从其他配置类对象中获取相应的实例。</span>\n    <span class=\"hljs-keyword\">if</span> (provider != <span class=\"hljs-keyword\">null</span>) {\n        <span class=\"hljs-keyword\">if</span> (application == <span class=\"hljs-keyword\">null</span>) {\n            application = provider.getApplication();\n        }\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">module</span> == <span class=\"hljs-keyword\">null</span>) {\n            <span class=\"hljs-keyword\">module</span> = provider.getModule();\n        }\n        <span class=\"hljs-keyword\">if</span> (registries == <span class=\"hljs-keyword\">null</span>) {...}\n        <span class=\"hljs-keyword\">if</span> (monitor == <span class=\"hljs-keyword\">null</span>) {...}\n        <span class=\"hljs-keyword\">if</span> (protocols == <span class=\"hljs-keyword\">null</span>) {...}\n    }\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">module</span> != <span class=\"hljs-keyword\">null</span>) {\n        <span class=\"hljs-keyword\">if</span> (registries == <span class=\"hljs-keyword\">null</span>) {\n            registries = <span class=\"hljs-keyword\">module</span>.getRegistries();\n        }\n        <span class=\"hljs-keyword\">if</span> (monitor == <span class=\"hljs-keyword\">null</span>) {...}\n    }\n    <span class=\"hljs-keyword\">if</span> (application != <span class=\"hljs-keyword\">null</span>) {\n        <span class=\"hljs-keyword\">if</span> (registries == <span class=\"hljs-keyword\">null</span>) {\n            registries = application.getRegistries();\n        }\n        <span class=\"hljs-keyword\">if</span> (monitor == <span class=\"hljs-keyword\">null</span>) {...}\n    }\n\n    <span class=\"hljs-comment\">// 检测 ref 是否为泛化服务类型</span>\n    <span class=\"hljs-keyword\">if</span> (ref <span class=\"hljs-keyword\">instanceof</span> GenericService) {\n        <span class=\"hljs-comment\">// 设置 interfaceClass 为 GenericService.class</span>\n        interfaceClass = GenericService.class;\n        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(generic)) {\n            <span class=\"hljs-comment\">// 设置 generic = \"true\"</span>\n            generic = Boolean.TRUE.toString();\n        }\n        \n    <span class=\"hljs-comment\">// ref 非 GenericService 类型</span>\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">try</span> {\n            interfaceClass = Class.forName(interfaceName, <span class=\"hljs-keyword\">true</span>, Thread.currentThread()\n                    .getContextClassLoader());\n        } <span class=\"hljs-keyword\">catch</span> (ClassNotFoundException e) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalStateException(e.getMessage(), e);\n        }\n        <span class=\"hljs-comment\">// 对 interfaceClass，以及 &lt;dubbo:method&gt; 标签中的必要字段进行检查</span>\n        checkInterfaceAndMethods(interfaceClass, methods);\n        <span class=\"hljs-comment\">// 对 ref 合法性进行检测</span>\n        checkRef();\n        <span class=\"hljs-comment\">// 设置 generic = \"false\"</span>\n        generic = Boolean.FALSE.toString();\n    }\n\n    <span class=\"hljs-comment\">// local 和 stub 在功能应该是一致的，用于配置本地存根</span>\n    <span class=\"hljs-keyword\">if</span> (local != <span class=\"hljs-keyword\">null</span>) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">\"true\"</span>.equals(local)) {\n            local = interfaceName + <span class=\"hljs-string\">\"Local\"</span>;\n        }\n        Class&lt;?&gt; localClass;\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-comment\">// 获取本地存根类</span>\n            localClass = ClassHelper.forNameWithThreadContextClassLoader(local);\n        } <span class=\"hljs-keyword\">catch</span> (ClassNotFoundException e) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalStateException(e.getMessage(), e);\n        }\n        <span class=\"hljs-comment\">// 检测本地存根类是否可赋值给接口类，若不可赋值则会抛出异常，提醒使用者本地存根类类型不合法</span>\n        <span class=\"hljs-keyword\">if</span> (!interfaceClass.isAssignableFrom(localClass)) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalStateException(<span class=\"hljs-string\">\"The local implementation class \"</span> + localClass.getName() + <span class=\"hljs-string\">\" not implement interface \"</span> + interfaceName);\n        }\n    }\n\n    <span class=\"hljs-keyword\">if</span> (stub != <span class=\"hljs-keyword\">null</span>) {\n        <span class=\"hljs-comment\">// 此处的代码和上一个 if 分支的代码基本一致，这里省略</span>\n    }\n\n    <span class=\"hljs-comment\">// 检测各种对象是否为空，为空则新建，或者抛出异常</span>\n    checkApplication();\n    checkRegistry();\n    checkProtocol();\n    appendProperties(<span class=\"hljs-keyword\">this</span>);\n    checkStubAndMock(interfaceClass);\n    <span class=\"hljs-keyword\">if</span> (path == <span class=\"hljs-keyword\">null</span> || path.length() == <span class=\"hljs-number\">0</span>) {\n        path = interfaceName;\n    }\n\n    <span class=\"hljs-comment\">// 导出服务</span>\n    doExportUrls();\n\n    <span class=\"hljs-comment\">// ProviderModel 表示服务提供者模型，此对象中存储了与服务提供者相关的信息。</span>\n    <span class=\"hljs-comment\">// 比如服务的配置信息，服务实例等。每个被导出的服务对应一个 ProviderModel。</span>\n    <span class=\"hljs-comment\">// ApplicationModel 持有所有的 ProviderModel。</span>\n    ProviderModel providerModel = <span class=\"hljs-keyword\">new</span> ProviderModel(getUniqueServiceName(), <span class=\"hljs-keyword\">this</span>, ref);\n    ApplicationModel.initProviderModel(getUniqueServiceName(), providerModel);\n}\n</code></pre>\n<p>以上就是配置检查的相关分析，代码比较多，需要大家耐心看一下。下面对配置检查的逻辑进行简单的总结，如下：</p>\n<ol>\n<li>检测 &lt;dubbo:service&gt; 标签的 interface 属性合法性，不合法则抛出异常</li>\n<li>检测 ProviderConfig、ApplicationConfig 等核心配置类对象是否为空，若为空，则尝试从其他配置类对象中获取相应的实例。</li>\n<li>检测并处理泛化服务和普通服务类</li>\n<li>检测本地存根配置，并进行相应的处理</li>\n<li>对 ApplicationConfig、RegistryConfig 等配置类进行检测，为空则尝试创建，若无法创建则抛出异常</li>\n</ol>\n<p>配置检查并非本文重点，因此这里不打算对 doExport 方法所调用的方法进行分析（doExportUrls 方法除外）。在这些方法中，除了 appendProperties 方法稍微复杂一些，其他方法逻辑不是很复杂。因此，大家可自行分析。</p>\n<h4>2.1.2 多协议多注册中心导出服务</h4>\n<p>Dubbo 允许我们使用不同的协议导出服务，也允许我们向多个注册中心注册服务。Dubbo 在 doExportUrls 方法中对多协议，多注册中心进行了支持。相关代码如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doExportUrls</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// 加载注册中心链接</span>\n    List&lt;URL&gt; registryURLs = loadRegistries(<span class=\"hljs-keyword\">true</span>);\n    <span class=\"hljs-comment\">// 遍历 protocols，并在每个协议下导出服务</span>\n    <span class=\"hljs-keyword\">for</span> (ProtocolConfig protocolConfig : protocols) {\n        doExportUrlsFor1Protocol(protocolConfig, registryURLs);\n    }\n}\n</code></pre>\n<p>上面代码首先是通过 loadRegistries 加载注册中心链接，然后再遍历 ProtocolConfig 集合导出每个服务。并在导出服务的过程中，将服务注册到注册中心。下面，我们先来看一下 loadRegistries 方法的逻辑。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> List&lt;URL&gt; <span class=\"hljs-title\">loadRegistries</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">boolean</span> provider)</span> </span>{\n    <span class=\"hljs-comment\">// 检测是否存在注册中心配置类，不存在则抛出异常</span>\n    checkRegistry();\n    List&lt;URL&gt; registryList = <span class=\"hljs-keyword\">new</span> ArrayList&lt;URL&gt;();\n    <span class=\"hljs-keyword\">if</span> (registries != <span class=\"hljs-keyword\">null</span> &amp;&amp; !registries.isEmpty()) {\n        <span class=\"hljs-keyword\">for</span> (RegistryConfig config : registries) {\n            String address = config.getAddress();\n            <span class=\"hljs-keyword\">if</span> (address == <span class=\"hljs-keyword\">null</span> || address.length() == <span class=\"hljs-number\">0</span>) {\n                <span class=\"hljs-comment\">// 若 address 为空，则将其设为 0.0.0.0</span>\n                address = Constants.ANYHOST_VALUE;\n            }\n\n            <span class=\"hljs-comment\">// 从系统属性中加载注册中心地址</span>\n            String sysaddress = System.getProperty(<span class=\"hljs-string\">\"dubbo.registry.address\"</span>);\n            <span class=\"hljs-keyword\">if</span> (sysaddress != <span class=\"hljs-keyword\">null</span> &amp;&amp; sysaddress.length() &gt; <span class=\"hljs-number\">0</span>) {\n                address = sysaddress;\n            }\n            <span class=\"hljs-comment\">// 检测 address 是否合法</span>\n            <span class=\"hljs-keyword\">if</span> (address.length() &gt; <span class=\"hljs-number\">0</span> &amp;&amp; !RegistryConfig.NO_AVAILABLE.equalsIgnoreCase(address)) {\n                Map&lt;String, String&gt; map = <span class=\"hljs-keyword\">new</span> HashMap&lt;String, String&gt;();\n                <span class=\"hljs-comment\">// 添加 ApplicationConfig 中的字段信息到 map 中</span>\n                appendParameters(map, application);\n                <span class=\"hljs-comment\">// 添加 RegistryConfig 字段信息到 map 中</span>\n                appendParameters(map, config);\n                \n                <span class=\"hljs-comment\">// 添加 path、pid，protocol 等信息到 map 中</span>\n                map.put(<span class=\"hljs-string\">\"path\"</span>, RegistryService.class.getName());\n                map.put(<span class=\"hljs-string\">\"dubbo\"</span>, Version.getProtocolVersion());\n                map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis()));\n                <span class=\"hljs-keyword\">if</span> (ConfigUtils.getPid() &gt; <span class=\"hljs-number\">0</span>) {\n                    map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid()));\n                }\n                <span class=\"hljs-keyword\">if</span> (!map.containsKey(<span class=\"hljs-string\">\"protocol\"</span>)) {\n                    <span class=\"hljs-keyword\">if</span> (ExtensionLoader.getExtensionLoader(RegistryFactory.class).hasExtension(<span class=\"hljs-string\">\"remote\"</span>)) {\n                        map.put(<span class=\"hljs-string\">\"protocol\"</span>, <span class=\"hljs-string\">\"remote\"</span>);\n                    } <span class=\"hljs-keyword\">else</span> {\n                        map.put(<span class=\"hljs-string\">\"protocol\"</span>, <span class=\"hljs-string\">\"dubbo\"</span>);\n                    }\n                }\n\n                <span class=\"hljs-comment\">// 解析得到 URL 列表，address 可能包含多个注册中心 ip，</span>\n                <span class=\"hljs-comment\">// 因此解析得到的是一个 URL 列表</span>\n                List&lt;URL&gt; urls = UrlUtils.parseURLs(address, map);\n                <span class=\"hljs-keyword\">for</span> (URL url : urls) {\n                    url = url.addParameter(Constants.REGISTRY_KEY, url.getProtocol());\n                    <span class=\"hljs-comment\">// 将 URL 协议头设置为 registry</span>\n                    url = url.setProtocol(Constants.REGISTRY_PROTOCOL);\n                    <span class=\"hljs-comment\">// 通过判断条件，决定是否添加 url 到 registryList 中，条件如下：</span>\n                    <span class=\"hljs-comment\">// (服务提供者 &amp;&amp; register = true 或 null) </span>\n                    <span class=\"hljs-comment\">//    || (非服务提供者 &amp;&amp; subscribe = true 或 null)</span>\n                    <span class=\"hljs-keyword\">if</span> ((provider &amp;&amp; url.getParameter(Constants.REGISTER_KEY, <span class=\"hljs-keyword\">true</span>))\n                            || (!provider &amp;&amp; url.getParameter(Constants.SUBSCRIBE_KEY, <span class=\"hljs-keyword\">true</span>))) {\n                        registryList.add(url);\n                    }\n                }\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> registryList;\n}\n</code></pre>\n<p>loadRegistries 方法主要包含如下的逻辑：</p>\n<ol>\n<li>检测是否存在注册中心配置类，不存在则抛出异常</li>\n<li>构建参数映射集合，也就是 map</li>\n<li>构建注册中心链接列表</li>\n<li>遍历链接列表，并根据条件决定是否将其添加到 registryList 中</li>\n</ol>\n<p>关于多协议多注册中心导出服务就先分析到这，代码不是很多，接下来分析 URL 组装过程。</p>\n<h4>2.1.3 组装 URL</h4>\n<p>配置检查完毕后，紧接着要做的事情是根据配置，以及其他一些信息组装 URL。前面说过，URL 是 Dubbo 配置的载体，通过  URL 可让 Dubbo 的各种配置在各个模块之间传递。URL 之于 Dubbo，犹如水之于鱼，非常重要。大家在阅读 Dubbo 服务导出相关源码的过程中，要注意 URL 内容的变化。既然 URL 如此重要，那么下面我们来了解一下 URL 组装的过程。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doExportUrlsFor1Protocol</span><span class=\"hljs-params\">(ProtocolConfig protocolConfig, List&lt;URL&gt; registryURLs)</span> </span>{\n    String name = protocolConfig.getName();\n    <span class=\"hljs-comment\">// 如果协议名为空，或空串，则将协议名变量设置为 dubbo</span>\n    <span class=\"hljs-keyword\">if</span> (name == <span class=\"hljs-keyword\">null</span> || name.length() == <span class=\"hljs-number\">0</span>) {\n        name = <span class=\"hljs-string\">\"dubbo\"</span>;\n    }\n\n    Map&lt;String, String&gt; map = <span class=\"hljs-keyword\">new</span> HashMap&lt;String, String&gt;();\n    <span class=\"hljs-comment\">// 添加 side、版本、时间戳以及进程号等信息到 map 中</span>\n    map.put(Constants.SIDE_KEY, Constants.PROVIDER_SIDE);\n    map.put(Constants.DUBBO_VERSION_KEY, Version.getProtocolVersion());\n    map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis()));\n    <span class=\"hljs-keyword\">if</span> (ConfigUtils.getPid() &gt; <span class=\"hljs-number\">0</span>) {\n        map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid()));\n    }\n\n    <span class=\"hljs-comment\">// 通过反射将对象的字段信息添加到 map 中</span>\n    appendParameters(map, application);\n    appendParameters(map, <span class=\"hljs-keyword\">module</span>);\n    appendParameters(map, provider, Constants.DEFAULT_KEY);\n    appendParameters(map, protocolConfig);\n    appendParameters(map, <span class=\"hljs-keyword\">this</span>);\n\n    <span class=\"hljs-comment\">// methods 为 MethodConfig 集合，MethodConfig 中存储了 &lt;dubbo:method&gt; 标签的配置信息</span>\n    <span class=\"hljs-keyword\">if</span> (methods != <span class=\"hljs-keyword\">null</span> &amp;&amp; !methods.isEmpty()) {\n        <span class=\"hljs-comment\">// 这段代码用于添加 Callback 配置到 map 中，代码太长，待会单独分析</span>\n    }\n\n    <span class=\"hljs-comment\">// 检测 generic 是否为 \"true\"，并根据检测结果向 map 中添加不同的信息</span>\n    <span class=\"hljs-keyword\">if</span> (ProtocolUtils.isGeneric(generic)) {\n        map.put(Constants.GENERIC_KEY, generic);\n        map.put(Constants.METHODS_KEY, Constants.ANY_VALUE);\n    } <span class=\"hljs-keyword\">else</span> {\n        String revision = Version.getVersion(interfaceClass, version);\n        <span class=\"hljs-keyword\">if</span> (revision != <span class=\"hljs-keyword\">null</span> &amp;&amp; revision.length() &gt; <span class=\"hljs-number\">0</span>) {\n            map.put(<span class=\"hljs-string\">\"revision\"</span>, revision);\n        }\n\n        <span class=\"hljs-comment\">// 为接口生成包裹类 Wrapper，Wrapper 中包含了接口的详细信息，比如接口方法名数组，字段信息等</span>\n        String[] methods = Wrapper.getWrapper(interfaceClass).getMethodNames();\n        <span class=\"hljs-comment\">// 添加方法名到 map 中，如果包含多个方法名，则用逗号隔开，比如 method = init,destroy</span>\n        <span class=\"hljs-keyword\">if</span> (methods.length == <span class=\"hljs-number\">0</span>) {\n            logger.warn(<span class=\"hljs-string\">\"NO method found in service interface ...\"</span>);\n            map.put(Constants.METHODS_KEY, Constants.ANY_VALUE);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-comment\">// 将逗号作为分隔符连接方法名，并将连接后的字符串放入 map 中</span>\n            map.put(Constants.METHODS_KEY, StringUtils.join(<span class=\"hljs-keyword\">new</span> HashSet&lt;String&gt;(Arrays.asList(methods)), <span class=\"hljs-string\">\",\"</span>));\n        }\n    }\n\n    <span class=\"hljs-comment\">// 添加 token 到 map 中</span>\n    <span class=\"hljs-keyword\">if</span> (!ConfigUtils.isEmpty(token)) {\n        <span class=\"hljs-keyword\">if</span> (ConfigUtils.isDefault(token)) {\n            <span class=\"hljs-comment\">// 随机生成 token</span>\n            map.put(Constants.TOKEN_KEY, UUID.randomUUID().toString());\n        } <span class=\"hljs-keyword\">else</span> {\n            map.put(Constants.TOKEN_KEY, token);\n        }\n    }\n    <span class=\"hljs-comment\">// 判断协议名是否为 injvm</span>\n    <span class=\"hljs-keyword\">if</span> (Constants.LOCAL_PROTOCOL.equals(protocolConfig.getName())) {\n        protocolConfig.setRegister(<span class=\"hljs-keyword\">false</span>);\n        map.put(<span class=\"hljs-string\">\"notify\"</span>, <span class=\"hljs-string\">\"false\"</span>);\n    }\n\n    <span class=\"hljs-comment\">// 获取上下文路径</span>\n    String contextPath = protocolConfig.getContextpath();\n    <span class=\"hljs-keyword\">if</span> ((contextPath == <span class=\"hljs-keyword\">null</span> || contextPath.length() == <span class=\"hljs-number\">0</span>) &amp;&amp; provider != <span class=\"hljs-keyword\">null</span>) {\n        contextPath = provider.getContextpath();\n    }\n\n    <span class=\"hljs-comment\">// 获取 host 和 port</span>\n    String host = <span class=\"hljs-keyword\">this</span>.findConfigedHosts(protocolConfig, registryURLs, map);\n    Integer port = <span class=\"hljs-keyword\">this</span>.findConfigedPorts(protocolConfig, name, map);\n    <span class=\"hljs-comment\">// 组装 URL</span>\n    URL url = <span class=\"hljs-keyword\">new</span> URL(name, host, port, (contextPath == <span class=\"hljs-keyword\">null</span> || contextPath.length() == <span class=\"hljs-number\">0</span> ? <span class=\"hljs-string\">\"\"</span> : contextPath + <span class=\"hljs-string\">\"/\"</span>) + path, map);\n    \n    <span class=\"hljs-comment\">// 省略无关代码</span>\n}\n</code></pre>\n<p>上面的代码首先是将一些信息，比如版本、时间戳、方法名以及各种配置对象的字段信息放入到 map 中，map 中的内容将作为 URL 的查询字符串。构建好 map 后，紧接着是获取上下文路径、主机名以及端口号等信息。最后将 map 和主机名等数据传给 URL 构造方法创建 URL 对象。需要注意的是，这里出现的 URL 并非 java.net.URL，而是 com.alibaba.dubbo.common.URL。</p>\n<p>上面省略了一段代码，这里简单分析一下。这段代码用于检测 &lt;dubbo:method&gt; 标签中的配置信息，并将相关配置添加到 map 中。代码如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doExportUrlsFor1Protocol</span><span class=\"hljs-params\">(ProtocolConfig protocolConfig, List&lt;URL&gt; registryURLs)</span> </span>{\n    <span class=\"hljs-comment\">// ...</span>\n\n    <span class=\"hljs-comment\">// methods 为 MethodConfig 集合，MethodConfig 中存储了 &lt;dubbo:method&gt; 标签的配置信息</span>\n    <span class=\"hljs-keyword\">if</span> (methods != <span class=\"hljs-keyword\">null</span> &amp;&amp; !methods.isEmpty()) {\n        <span class=\"hljs-keyword\">for</span> (MethodConfig method : methods) {\n            <span class=\"hljs-comment\">// 添加 MethodConfig 对象的字段信息到 map 中，键 = 方法名.属性名。</span>\n            <span class=\"hljs-comment\">// 比如存储 &lt;dubbo:method name=\"sayHello\" retries=\"2\"&gt; 对应的 MethodConfig，</span>\n            <span class=\"hljs-comment\">// 键 = sayHello.retries，map = {\"sayHello.retries\": 2, \"xxx\": \"yyy\"}</span>\n            appendParameters(map, method, method.getName());\n\n            String retryKey = method.getName() + <span class=\"hljs-string\">\".retry\"</span>;\n            <span class=\"hljs-keyword\">if</span> (map.containsKey(retryKey)) {\n                String retryValue = map.remove(retryKey);\n                <span class=\"hljs-comment\">// 检测 MethodConfig retry 是否为 false，若是，则设置重试次数为0</span>\n                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">\"false\"</span>.equals(retryValue)) {\n                    map.put(method.getName() + <span class=\"hljs-string\">\".retries\"</span>, <span class=\"hljs-string\">\"0\"</span>);\n                }\n            }\n            \n            <span class=\"hljs-comment\">// 获取 ArgumentConfig 列表</span>\n            List&lt;ArgumentConfig&gt; arguments = method.getArguments();\n            <span class=\"hljs-keyword\">if</span> (arguments != <span class=\"hljs-keyword\">null</span> &amp;&amp; !arguments.isEmpty()) {\n                <span class=\"hljs-keyword\">for</span> (ArgumentConfig argument : arguments) {\n                    <span class=\"hljs-comment\">// 检测 type 属性是否为空，或者空串（分支1 ⭐️）</span>\n                    <span class=\"hljs-keyword\">if</span> (argument.getType() != <span class=\"hljs-keyword\">null</span> &amp;&amp; argument.getType().length() &gt; <span class=\"hljs-number\">0</span>) {\n                        Method[] methods = interfaceClass.getMethods();\n                        <span class=\"hljs-keyword\">if</span> (methods != <span class=\"hljs-keyword\">null</span> &amp;&amp; methods.length &gt; <span class=\"hljs-number\">0</span>) {\n                            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; methods.length; i++) {\n                                String methodName = methods[i].getName();\n                                <span class=\"hljs-comment\">// 比对方法名，查找目标方法</span>\n                                <span class=\"hljs-keyword\">if</span> (methodName.equals(method.getName())) {\n                                    Class&lt;?&gt;[] argtypes = methods[i].getParameterTypes();\n                                    <span class=\"hljs-keyword\">if</span> (argument.getIndex() != -<span class=\"hljs-number\">1</span>) {\n                                        <span class=\"hljs-comment\">// 检测 ArgumentConfig 中的 type 属性与方法参数列表</span>\n                                        <span class=\"hljs-comment\">// 中的参数名称是否一致，不一致则抛出异常(分支2 ⭐️)</span>\n                                        <span class=\"hljs-keyword\">if</span> (argtypes[argument.getIndex()].getName().equals(argument.getType())) {\n                                            <span class=\"hljs-comment\">// 添加 ArgumentConfig 字段信息到 map 中，</span>\n                                            <span class=\"hljs-comment\">// 键前缀 = 方法名.index，比如:</span>\n                                            <span class=\"hljs-comment\">// map = {\"sayHello.3\": true}</span>\n                                            appendParameters(map, argument, method.getName() + <span class=\"hljs-string\">\".\"</span> + argument.getIndex());\n                                        } <span class=\"hljs-keyword\">else</span> {\n                                            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"argument config error: ...\"</span>);\n                                        }\n                                    } <span class=\"hljs-keyword\">else</span> {    <span class=\"hljs-comment\">// 分支3 ⭐️</span>\n                                        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; argtypes.length; j++) {\n                                            Class&lt;?&gt; argclazz = argtypes[j];\n                                            <span class=\"hljs-comment\">// 从参数类型列表中查找类型名称为 argument.type 的参数</span>\n                                            <span class=\"hljs-keyword\">if</span> (argclazz.getName().equals(argument.getType())) {\n                                                appendParameters(map, argument, method.getName() + <span class=\"hljs-string\">\".\"</span> + j);\n                                                <span class=\"hljs-keyword\">if</span> (argument.getIndex() != -<span class=\"hljs-number\">1</span> &amp;&amp; argument.getIndex() != j) {\n                                                    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"argument config error: ...\"</span>);\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n\n                    <span class=\"hljs-comment\">// 用户未配置 type 属性，但配置了 index 属性，且 index != -1</span>\n                    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (argument.getIndex() != -<span class=\"hljs-number\">1</span>) {    <span class=\"hljs-comment\">// 分支4 ⭐️</span>\n                        <span class=\"hljs-comment\">// 添加 ArgumentConfig 字段信息到 map 中</span>\n                        appendParameters(map, argument, method.getName() + <span class=\"hljs-string\">\".\"</span> + argument.getIndex());\n                    } <span class=\"hljs-keyword\">else</span> {\n                        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"argument config must set index or type\"</span>);\n                    }\n                }\n            }\n        }\n    }\n\n    <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<p>上面这段代码 for 循环和 if else 分支嵌套太多，导致层次太深，不利于阅读，需要耐心看一下。大家在看这段代码时，注意把几个重要的条件分支找出来。只要理解了这几个分支的意图，就可以弄懂这段代码。请注意上面代码中⭐️符号，这几个符号标识出了4个重要的分支，下面用伪代码解释一下这几个分支的含义。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 获取 ArgumentConfig 列表</span>\n<span class=\"hljs-keyword\">for</span> (遍历 ArgumentConfig 列表) {\n    <span class=\"hljs-keyword\">if</span> (type 不为 <span class=\"hljs-keyword\">null</span>，也不为空串) {    <span class=\"hljs-comment\">// 分支1</span>\n        <span class=\"hljs-number\">1</span>. 通过反射获取 interfaceClass 的方法列表\n        <span class=\"hljs-keyword\">for</span> (遍历方法列表) {\n            <span class=\"hljs-number\">1</span>. 比对方法名，查找目标方法\n        \t<span class=\"hljs-number\">2</span>. 通过反射获取目标方法的参数类型数组 <span class=\"hljs-function\">argtypes\n            <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(index != <span class=\"hljs-number\">-1</span>)</span> </span>{    <span class=\"hljs-comment\">// 分支2</span>\n                <span class=\"hljs-number\">1</span>. 从 argtypes 数组中获取下标 index 处的元素 argType\n                <span class=\"hljs-number\">2</span>. 检测 argType 的名称与 ArgumentConfig 中的 type 属性是否一致\n                <span class=\"hljs-number\">3</span>. 添加 ArgumentConfig 字段信息到 map 中，或抛出异常\n            } <span class=\"hljs-keyword\">else</span> {    <span class=\"hljs-comment\">// 分支3</span>\n                <span class=\"hljs-number\">1</span>. 遍历参数类型数组 argtypes，查找 argument.type 类型的参数\n                <span class=\"hljs-number\">2</span>. 添加 ArgumentConfig 字段信息到 map 中\n            }\n        }\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (index != -<span class=\"hljs-number\">1</span>) {    <span class=\"hljs-comment\">// 分支4</span>\n\t\t<span class=\"hljs-number\">1</span>. 添加 ArgumentConfig 字段信息到 map 中\n    }\n}\n</code></pre>\n<p>在本节分析的源码中，appendParameters 这个方法出现的次数比较多，该方法用于将对象字段信息添加到 map 中。实现上则是通过反射获取目标对象的 getter 方法，并调用该方法获取属性值。然后再通过 getter 方法名解析出属性名，比如从方法名 getName 中可解析出属性 name。如果用户传入了属性名前缀，此时需要将属性名加入前缀内容。最后将 &lt;属性名，属性值&gt; 键值对存入到 map 中就行了。限于篇幅原因，这里就不分析 appendParameters 方法的源码了，大家请自行分析。</p>\n<h3>2.2 导出 Dubbo 服务</h3>\n<p>前置工作做完，接下来就可以进行服务导出了。服务导出分为导出到本地 (JVM)，和导出到远程。在深入分析服务导出的源码前，我们先来从宏观层面上看一下服务导出逻辑。如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doExportUrlsFor1Protocol</span><span class=\"hljs-params\">(ProtocolConfig protocolConfig, List&lt;URL&gt; registryURLs)</span> </span>{\n    \n    <span class=\"hljs-comment\">// 省略无关代码</span>\n    \n    <span class=\"hljs-keyword\">if</span> (ExtensionLoader.getExtensionLoader(ConfiguratorFactory.class)\n            .hasExtension(url.getProtocol())) {\n        <span class=\"hljs-comment\">// 加载 ConfiguratorFactory，并生成 Configurator 实例，然后通过实例配置 url</span>\n        url = ExtensionLoader.getExtensionLoader(ConfiguratorFactory.class)\n                .getExtension(url.getProtocol()).getConfigurator(url).configure(url);\n    }\n\n    String scope = url.getParameter(Constants.SCOPE_KEY);\n    <span class=\"hljs-comment\">// 如果 scope = none，则什么都不做</span>\n    <span class=\"hljs-keyword\">if</span> (!Constants.SCOPE_NONE.toString().equalsIgnoreCase(scope)) {\n        <span class=\"hljs-comment\">// scope != remote，导出到本地</span>\n        <span class=\"hljs-keyword\">if</span> (!Constants.SCOPE_REMOTE.toString().equalsIgnoreCase(scope)) {\n            exportLocal(url);\n        }\n\n        <span class=\"hljs-comment\">// scope != local，导出到远程</span>\n        <span class=\"hljs-keyword\">if</span> (!Constants.SCOPE_LOCAL.toString().equalsIgnoreCase(scope)) {\n            <span class=\"hljs-keyword\">if</span> (registryURLs != <span class=\"hljs-keyword\">null</span> &amp;&amp; !registryURLs.isEmpty()) {\n                <span class=\"hljs-keyword\">for</span> (URL registryURL : registryURLs) {\n                    url = url.addParameterIfAbsent(Constants.DYNAMIC_KEY, registryURL.getParameter(Constants.DYNAMIC_KEY));\n                    <span class=\"hljs-comment\">// 加载监视器链接</span>\n                    URL monitorUrl = loadMonitor(registryURL);\n                    <span class=\"hljs-keyword\">if</span> (monitorUrl != <span class=\"hljs-keyword\">null</span>) {\n                        <span class=\"hljs-comment\">// 将监视器链接作为参数添加到 url 中</span>\n                        url = url.addParameterAndEncoded(Constants.MONITOR_KEY, monitorUrl.toFullString());\n                    }\n\n                    String proxy = url.getParameter(Constants.PROXY_KEY);\n                    <span class=\"hljs-keyword\">if</span> (StringUtils.isNotEmpty(proxy)) {\n                        registryURL = registryURL.addParameter(Constants.PROXY_KEY, proxy);\n                    }\n\n                    <span class=\"hljs-comment\">// 为服务提供类(ref)生成 Invoker</span>\n                    Invoker&lt;?&gt; invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, registryURL.addParameterAndEncoded(Constants.EXPORT_KEY, url.toFullString()));\n                    <span class=\"hljs-comment\">// DelegateProviderMetaDataInvoker 用于持有 Invoker 和 ServiceConfig</span>\n                    DelegateProviderMetaDataInvoker wrapperInvoker = <span class=\"hljs-keyword\">new</span> DelegateProviderMetaDataInvoker(invoker, <span class=\"hljs-keyword\">this</span>);\n\n                    <span class=\"hljs-comment\">// 导出服务，并生成 Exporter</span>\n                    Exporter&lt;?&gt; exporter = protocol.export(wrapperInvoker);\n                    exporters.add(exporter);\n                }\n                \n            <span class=\"hljs-comment\">// 不存在注册中心，仅导出服务</span>\n            } <span class=\"hljs-keyword\">else</span> {\n                Invoker&lt;?&gt; invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, url);\n                DelegateProviderMetaDataInvoker wrapperInvoker = <span class=\"hljs-keyword\">new</span> DelegateProviderMetaDataInvoker(invoker, <span class=\"hljs-keyword\">this</span>);\n\n                Exporter&lt;?&gt; exporter = protocol.export(wrapperInvoker);\n                exporters.add(exporter);\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">this</span>.urls.add(url);\n}\n</code></pre>\n<p>上面代码根据 url 中的 scope 参数决定服务导出方式，分别如下：</p>\n<ul>\n<li>scope = none，不导出服务</li>\n<li>scope != remote，导出到本地</li>\n<li>scope != local，导出到远程</li>\n</ul>\n<p>不管是导出到本地，还是远程。进行服务导出之前，均需要先创建 Invoker，这是一个很重要的步骤。因此下面先来分析 Invoker 的创建过程。</p>\n<h3>2.2.1 Invoker 创建过程</h3>\n<p>在 Dubbo 中，Invoker 是一个非常重要的模型。在服务提供端，以及服务引用端均会出现 Invoker。Dubbo 官方文档中对 Invoker 进行了说明，这里引用一下。</p>\n<blockquote>\n<p>Invoker 是实体域，它是 Dubbo 的核心模型，其它模型都向它靠扰，或转换成它，它代表一个可执行体，可向它发起 invoke 调用，它有可能是一个本地的实现，也可能是一个远程的实现，也可能一个集群实现。</p>\n</blockquote>\n<p>既然 Invoker 如此重要，那么我们很有必要搞清楚 Invoker 的用途。Invoker 是由 ProxyFactory 创建而来，Dubbo 默认的 ProxyFactory 实现类是 JavassistProxyFactory。下面我们到 JavassistProxyFactory 代码中，探索 Invoker 的创建过程。如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> &lt;T&gt; <span class=\"hljs-function\">Invoker&lt;T&gt; <span class=\"hljs-title\">getInvoker</span><span class=\"hljs-params\">(T proxy, Class&lt;T&gt; type, URL url)</span> </span>{\n\t<span class=\"hljs-comment\">// 为目标类创建 Wrapper</span>\n    <span class=\"hljs-keyword\">final</span> Wrapper wrapper = Wrapper.getWrapper(proxy.getClass().getName().indexOf(<span class=\"hljs-string\">'$'</span>) &lt; <span class=\"hljs-number\">0</span> ? proxy.getClass() : type);\n    <span class=\"hljs-comment\">// 创建匿名 Invoker 类对象，并实现 doInvoke 方法。</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> AbstractProxyInvoker&lt;T&gt;(proxy, type, url) {\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> Object <span class=\"hljs-title\">doInvoke</span><span class=\"hljs-params\">(T proxy, String methodName,\n                                  Class&lt;?&gt;[] parameterTypes,\n                                  Object[] arguments)</span> <span class=\"hljs-keyword\">throws</span> Throwable </span>{\n\t\t\t<span class=\"hljs-comment\">// 调用 Wrapper 的 invokeMethod 方法，invokeMethod 最终会调用目标方法</span>\n            <span class=\"hljs-keyword\">return</span> wrapper.invokeMethod(proxy, methodName, parameterTypes, arguments);\n        }\n    };\n}\n</code></pre>\n<p>如上，JavassistProxyFactory 创建了一个继承自 AbstractProxyInvoker 类的匿名对象，并覆写了抽象方法 doInvoke。覆写后的 doInvoke 逻辑比较简单，仅是将调用请求转发给了 Wrapper 类的 invokeMethod 方法。Wrapper 用于“包裹”目标类，Wrapper 是一个抽象类，仅可通过 getWrapper(Class) 方法创建子类。在创建 Wrapper 子类的过程中，子类代码生成逻辑会对 getWrapper 方法传入的 Class 对象进行解析，拿到诸如类方法，类成员变量等信息。以及生成 invokeMethod 方法代码和其他一些方法代码。代码生成完毕后，通过 Javassist 生成 Class 对象，最后再通过反射创建 Wrapper 实例。相关的代码如下：</p>\n<pre><code class=\"language-java\"> <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Wrapper <span class=\"hljs-title\">getWrapper</span><span class=\"hljs-params\">(Class&lt;?&gt; c)</span> </span>{\t\n    <span class=\"hljs-keyword\">while</span> (ClassGenerator.isDynamicClass(c))\n        c = c.getSuperclass();\n\n    <span class=\"hljs-keyword\">if</span> (c == Object.class)\n        <span class=\"hljs-keyword\">return</span> OBJECT_WRAPPER;\n\n    <span class=\"hljs-comment\">// 从缓存中获取 Wrapper 实例</span>\n    Wrapper ret = WRAPPER_MAP.get(c);\n    <span class=\"hljs-keyword\">if</span> (ret == <span class=\"hljs-keyword\">null</span>) {\n        <span class=\"hljs-comment\">// 缓存未命中，创建 Wrapper</span>\n        ret = makeWrapper(c);\n        <span class=\"hljs-comment\">// 写入缓存</span>\n        WRAPPER_MAP.put(c, ret);\n    }\n    <span class=\"hljs-keyword\">return</span> ret;\n}\n</code></pre>\n<p>getWrapper 方法仅包含一些缓存操作逻辑，不难理解。下面我们看一下 makeWrapper 方法。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Wrapper <span class=\"hljs-title\">makeWrapper</span><span class=\"hljs-params\">(Class&lt;?&gt; c)</span> </span>{\n    <span class=\"hljs-comment\">// 检测 c 是否为基本类型，若是则抛出异常</span>\n    <span class=\"hljs-keyword\">if</span> (c.isPrimitive())\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"Can not create wrapper for primitive type: \"</span> + c);\n\n    String name = c.getName();\n    ClassLoader cl = ClassHelper.getClassLoader(c);\n\n    <span class=\"hljs-comment\">// c1 用于存储 setPropertyValue 方法代码</span>\n    StringBuilder c1 = <span class=\"hljs-keyword\">new</span> StringBuilder(<span class=\"hljs-string\">\"public void setPropertyValue(Object o, String n, Object v){ \"</span>);\n    <span class=\"hljs-comment\">// c2 用于存储 getPropertyValue 方法代码</span>\n    StringBuilder c2 = <span class=\"hljs-keyword\">new</span> StringBuilder(<span class=\"hljs-string\">\"public Object getPropertyValue(Object o, String n){ \"</span>);\n    <span class=\"hljs-comment\">// c3 用于存储 invokeMethod 方法代码</span>\n    StringBuilder c3 = <span class=\"hljs-keyword\">new</span> StringBuilder(<span class=\"hljs-string\">\"public Object invokeMethod(Object o, String n, Class[] p, Object[] v) throws \"</span> + InvocationTargetException.class.getName() + <span class=\"hljs-string\">\"{ \"</span>);\n\n    <span class=\"hljs-comment\">// 生成类型转换代码及异常捕捉代码，比如：</span>\n    <span class=\"hljs-comment\">//   DemoService w; try { w = ((DemoServcie) $1); }}catch(Throwable e){ throw new IllegalArgumentException(e); }</span>\n    c1.append(name).append(<span class=\"hljs-string\">\" w; try{ w = ((\"</span>).append(name).append(<span class=\"hljs-string\">\")$1); }catch(Throwable e){ throw new IllegalArgumentException(e); }\"</span>);\n    c2.append(name).append(<span class=\"hljs-string\">\" w; try{ w = ((\"</span>).append(name).append(<span class=\"hljs-string\">\")$1); }catch(Throwable e){ throw new IllegalArgumentException(e); }\"</span>);\n    c3.append(name).append(<span class=\"hljs-string\">\" w; try{ w = ((\"</span>).append(name).append(<span class=\"hljs-string\">\")$1); }catch(Throwable e){ throw new IllegalArgumentException(e); }\"</span>);\n\n    <span class=\"hljs-comment\">// pts 用于存储成员变量名和类型</span>\n    Map&lt;String, Class&lt;?&gt;&gt; pts = <span class=\"hljs-keyword\">new</span> HashMap&lt;String, Class&lt;?&gt;&gt;();\n    <span class=\"hljs-comment\">// ms 用于存储方法描述信息（可理解为方法签名）及 Method 实例</span>\n    Map&lt;String, Method&gt; ms = <span class=\"hljs-keyword\">new</span> LinkedHashMap&lt;String, Method&gt;();\n    <span class=\"hljs-comment\">// mns 为方法名列表</span>\n    List&lt;String&gt; mns = <span class=\"hljs-keyword\">new</span> ArrayList&lt;String&gt;();\n    <span class=\"hljs-comment\">// dmns 用于存储“定义在当前类中的方法”的名称</span>\n    List&lt;String&gt; dmns = <span class=\"hljs-keyword\">new</span> ArrayList&lt;String&gt;();\n\n    <span class=\"hljs-comment\">// --------------------------------✨ 分割线1 ✨-------------------------------------</span>\n\n    <span class=\"hljs-comment\">// 获取 public 访问级别的字段，并为所有字段生成条件判断语句</span>\n    <span class=\"hljs-keyword\">for</span> (Field f : c.getFields()) {\n        String fn = f.getName();\n        Class&lt;?&gt; ft = f.getType();\n        <span class=\"hljs-keyword\">if</span> (Modifier.isStatic(f.getModifiers()) || Modifier.isTransient(f.getModifiers()))\n            <span class=\"hljs-comment\">// 忽略关键字 static 或 transient 修饰的变量</span>\n            <span class=\"hljs-keyword\">continue</span>;\n\n        <span class=\"hljs-comment\">// 生成条件判断及赋值语句，比如：</span>\n        <span class=\"hljs-comment\">// if( $2.equals(\"name\") ) { w.name = (java.lang.String) $3; return;}</span>\n        <span class=\"hljs-comment\">// if( $2.equals(\"age\") ) { w.age = ((Number) $3).intValue(); return;}</span>\n        c1.append(<span class=\"hljs-string\">\" if( $2.equals(\\\"\"</span>).append(fn).append(<span class=\"hljs-string\">\"\\\") ){ w.\"</span>).append(fn).append(<span class=\"hljs-string\">\"=\"</span>).append(arg(ft, <span class=\"hljs-string\">\"$3\"</span>)).append(<span class=\"hljs-string\">\"; return; }\"</span>);\n\n        <span class=\"hljs-comment\">// 生成条件判断及返回语句，比如：</span>\n        <span class=\"hljs-comment\">// if( $2.equals(\"name\") ) { return ($w)w.name; }</span>\n        c2.append(<span class=\"hljs-string\">\" if( $2.equals(\\\"\"</span>).append(fn).append(<span class=\"hljs-string\">\"\\\") ){ return ($w)w.\"</span>).append(fn).append(<span class=\"hljs-string\">\"; }\"</span>);\n\n        <span class=\"hljs-comment\">// 存储 &lt;字段名, 字段类型&gt; 键值对到 pts 中</span>\n        pts.put(fn, ft);\n    }\n\n    <span class=\"hljs-comment\">// --------------------------------✨ 分割线2 ✨-------------------------------------</span>\n\n    Method[] methods = c.getMethods();\n    <span class=\"hljs-comment\">// 检测 c 中是否包含在当前类中声明的方法</span>\n    <span class=\"hljs-keyword\">boolean</span> hasMethod = hasMethods(methods);\n    <span class=\"hljs-keyword\">if</span> (hasMethod) {\n        c3.append(<span class=\"hljs-string\">\" try{\"</span>);\n    }\n    <span class=\"hljs-keyword\">for</span> (Method m : methods) {\n        <span class=\"hljs-keyword\">if</span> (m.getDeclaringClass() == Object.class)\n            <span class=\"hljs-comment\">// 忽略 Object 中定义的方法</span>\n            <span class=\"hljs-keyword\">continue</span>;\n\n        String mn = m.getName();\n        <span class=\"hljs-comment\">// 生成方法名判断语句，比如：</span>\n        <span class=\"hljs-comment\">// if ( \"sayHello\".equals( $2 )</span>\n        c3.append(<span class=\"hljs-string\">\" if( \\\"\"</span>).append(mn).append(<span class=\"hljs-string\">\"\\\".equals( $2 ) \"</span>);\n        <span class=\"hljs-keyword\">int</span> len = m.getParameterTypes().length;\n        <span class=\"hljs-comment\">// 生成“运行时传入的参数数量与方法参数列表长度”判断语句，比如：</span>\n        <span class=\"hljs-comment\">// &amp;&amp; $3.length == 2</span>\n        c3.append(<span class=\"hljs-string\">\" &amp;&amp; \"</span>).append(<span class=\"hljs-string\">\" $3.length == \"</span>).append(len);\n\n        <span class=\"hljs-keyword\">boolean</span> override = <span class=\"hljs-keyword\">false</span>;\n        <span class=\"hljs-keyword\">for</span> (Method m2 : methods) {\n            <span class=\"hljs-comment\">// 检测方法是否存在重载情况，条件为：方法对象不同 &amp;&amp; 方法名相同</span>\n            <span class=\"hljs-keyword\">if</span> (m != m2 &amp;&amp; m.getName().equals(m2.getName())) {\n                override = <span class=\"hljs-keyword\">true</span>;\n                <span class=\"hljs-keyword\">break</span>;\n            }\n        }\n        <span class=\"hljs-comment\">// 对重载方法进行处理，考虑下面的方法：</span>\n        <span class=\"hljs-comment\">//    1. void sayHello(Integer, String)</span>\n        <span class=\"hljs-comment\">//    2. void sayHello(Integer, Integer)</span>\n        <span class=\"hljs-comment\">// 方法名相同，参数列表长度也相同，因此不能仅通过这两项判断两个方法是否相等。</span>\n        <span class=\"hljs-comment\">// 需要进一步判断方法的参数类型</span>\n        <span class=\"hljs-keyword\">if</span> (override) {\n            <span class=\"hljs-keyword\">if</span> (len &gt; <span class=\"hljs-number\">0</span>) {\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">0</span>; l &lt; len; l++) {\n                    <span class=\"hljs-comment\">// 生成参数类型进行检测代码，比如：</span>\n                    <span class=\"hljs-comment\">// &amp;&amp; $3[0].getName().equals(\"java.lang.Integer\") </span>\n                    <span class=\"hljs-comment\">//    &amp;&amp; $3[1].getName().equals(\"java.lang.String\")</span>\n                    c3.append(<span class=\"hljs-string\">\" &amp;&amp; \"</span>).append(<span class=\"hljs-string\">\" $3[\"</span>).append(l).append(<span class=\"hljs-string\">\"].getName().equals(\\\"\"</span>)\n                            .append(m.getParameterTypes()[l].getName()).append(<span class=\"hljs-string\">\"\\\")\"</span>);\n                }\n            }\n        }\n\n        <span class=\"hljs-comment\">// 添加 ) {，完成方法判断语句，此时生成的代码可能如下（已格式化）：</span>\n        <span class=\"hljs-comment\">// if (\"sayHello\".equals($2) </span>\n        <span class=\"hljs-comment\">//     &amp;&amp; $3.length == 2</span>\n        <span class=\"hljs-comment\">//     &amp;&amp; $3[0].getName().equals(\"java.lang.Integer\") </span>\n        <span class=\"hljs-comment\">//     &amp;&amp; $3[1].getName().equals(\"java.lang.String\")) {</span>\n        c3.append(<span class=\"hljs-string\">\" ) { \"</span>);\n\n        <span class=\"hljs-comment\">// 根据返回值类型生成目标方法调用语句</span>\n        <span class=\"hljs-keyword\">if</span> (m.getReturnType() == Void.TYPE)\n            <span class=\"hljs-comment\">// w.sayHello((java.lang.Integer)$4[0], (java.lang.String)$4[1]); return null;</span>\n            c3.append(<span class=\"hljs-string\">\" w.\"</span>).append(mn).append(<span class=\"hljs-string\">'('</span>).append(args(m.getParameterTypes(), <span class=\"hljs-string\">\"$4\"</span>)).append(<span class=\"hljs-string\">\");\"</span>).append(<span class=\"hljs-string\">\" return null;\"</span>);\n        <span class=\"hljs-keyword\">else</span>\n            <span class=\"hljs-comment\">// return w.sayHello((java.lang.Integer)$4[0], (java.lang.String)$4[1]);</span>\n            c3.append(<span class=\"hljs-string\">\" return ($w)w.\"</span>).append(mn).append(<span class=\"hljs-string\">'('</span>).append(args(m.getParameterTypes(), <span class=\"hljs-string\">\"$4\"</span>)).append(<span class=\"hljs-string\">\");\"</span>);\n\n        <span class=\"hljs-comment\">// 添加 }, 生成的代码形如（已格式化）：</span>\n        <span class=\"hljs-comment\">// if (\"sayHello\".equals($2) </span>\n        <span class=\"hljs-comment\">//     &amp;&amp; $3.length == 2</span>\n        <span class=\"hljs-comment\">//     &amp;&amp; $3[0].getName().equals(\"java.lang.Integer\") </span>\n        <span class=\"hljs-comment\">//     &amp;&amp; $3[1].getName().equals(\"java.lang.String\")) {</span>\n        <span class=\"hljs-comment\">//</span>\n        <span class=\"hljs-comment\">//     w.sayHello((java.lang.Integer)$4[0], (java.lang.String)$4[1]); </span>\n        <span class=\"hljs-comment\">//     return null;</span>\n        <span class=\"hljs-comment\">// }</span>\n        c3.append(<span class=\"hljs-string\">\" }\"</span>);\n\n        <span class=\"hljs-comment\">// 添加方法名到 mns 集合中</span>\n        mns.add(mn);\n        <span class=\"hljs-comment\">// 检测当前方法是否在 c 中被声明的</span>\n        <span class=\"hljs-keyword\">if</span> (m.getDeclaringClass() == c)\n            <span class=\"hljs-comment\">// 若是，则将当前方法名添加到 dmns 中</span>\n            dmns.add(mn);\n        ms.put(ReflectUtils.getDesc(m), m);\n    }\n    <span class=\"hljs-keyword\">if</span> (hasMethod) {\n        <span class=\"hljs-comment\">// 添加异常捕捉语句</span>\n        c3.append(<span class=\"hljs-string\">\" } catch(Throwable e) { \"</span>);\n        c3.append(<span class=\"hljs-string\">\"     throw new java.lang.reflect.InvocationTargetException(e); \"</span>);\n        c3.append(<span class=\"hljs-string\">\" }\"</span>);\n    }\n\n    <span class=\"hljs-comment\">// 添加 NoSuchMethodException 异常抛出代码</span>\n    c3.append(<span class=\"hljs-string\">\" throw new \"</span> + NoSuchMethodException.class.getName() + <span class=\"hljs-string\">\"(\\\"Not found method \\\\\\\"\\\"+$2+\\\"\\\\\\\" in class \"</span> + c.getName() + <span class=\"hljs-string\">\".\\\"); }\"</span>);\n\n    <span class=\"hljs-comment\">// --------------------------------✨ 分割线3 ✨-------------------------------------</span>\n\n    Matcher matcher;\n    <span class=\"hljs-comment\">// 处理 get/set 方法</span>\n    <span class=\"hljs-keyword\">for</span> (Map.Entry&lt;String, Method&gt; entry : ms.entrySet()) {\n        String md = entry.getKey();\n        Method method = (Method) entry.getValue();\n        <span class=\"hljs-comment\">// 匹配以 get 开头的方法</span>\n        <span class=\"hljs-keyword\">if</span> ((matcher = ReflectUtils.GETTER_METHOD_DESC_PATTERN.matcher(md)).matches()) {\n            <span class=\"hljs-comment\">// 获取属性名</span>\n            String pn = propertyName(matcher.group(<span class=\"hljs-number\">1</span>));\n            <span class=\"hljs-comment\">// 生成属性判断以及返回语句，示例如下：</span>\n            <span class=\"hljs-comment\">// if( $2.equals(\"name\") ) { return ($w).w.getName(); }</span>\n            c2.append(<span class=\"hljs-string\">\" if( $2.equals(\\\"\"</span>).append(pn).append(<span class=\"hljs-string\">\"\\\") ){ return ($w)w.\"</span>).append(method.getName()).append(<span class=\"hljs-string\">\"(); }\"</span>);\n            pts.put(pn, method.getReturnType());\n\n        <span class=\"hljs-comment\">// 匹配以 is/has/can 开头的方法</span>\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ((matcher = ReflectUtils.IS_HAS_CAN_METHOD_DESC_PATTERN.matcher(md)).matches()) {\n            String pn = propertyName(matcher.group(<span class=\"hljs-number\">1</span>));\n            <span class=\"hljs-comment\">// 生成属性判断以及返回语句，示例如下：</span>\n            <span class=\"hljs-comment\">// if( $2.equals(\"dream\") ) { return ($w).w.hasDream(); }</span>\n            c2.append(<span class=\"hljs-string\">\" if( $2.equals(\\\"\"</span>).append(pn).append(<span class=\"hljs-string\">\"\\\") ){ return ($w)w.\"</span>).append(method.getName()).append(<span class=\"hljs-string\">\"(); }\"</span>);\n            pts.put(pn, method.getReturnType());\n\n        <span class=\"hljs-comment\">// 匹配以 set 开头的方法</span>\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ((matcher = ReflectUtils.SETTER_METHOD_DESC_PATTERN.matcher(md)).matches()) {\n            Class&lt;?&gt; pt = method.getParameterTypes()[<span class=\"hljs-number\">0</span>];\n            String pn = propertyName(matcher.group(<span class=\"hljs-number\">1</span>));\n            <span class=\"hljs-comment\">// 生成属性判断以及 setter 调用语句，示例如下：</span>\n            <span class=\"hljs-comment\">// if( $2.equals(\"name\") ) { w.setName((java.lang.String)$3); return; }</span>\n            c1.append(<span class=\"hljs-string\">\" if( $2.equals(\\\"\"</span>).append(pn).append(<span class=\"hljs-string\">\"\\\") ){ w.\"</span>).append(method.getName()).append(<span class=\"hljs-string\">\"(\"</span>).append(arg(pt, <span class=\"hljs-string\">\"$3\"</span>)).append(<span class=\"hljs-string\">\"); return; }\"</span>);\n            pts.put(pn, pt);\n        }\n    }\n\n    <span class=\"hljs-comment\">// 添加 NoSuchPropertyException 异常抛出代码</span>\n    c1.append(<span class=\"hljs-string\">\" throw new \"</span> + NoSuchPropertyException.class.getName() + <span class=\"hljs-string\">\"(\\\"Not found property \\\\\\\"\\\"+$2+\\\"\\\\\\\" filed or setter method in class \"</span> + c.getName() + <span class=\"hljs-string\">\".\\\"); }\"</span>);\n    c2.append(<span class=\"hljs-string\">\" throw new \"</span> + NoSuchPropertyException.class.getName() + <span class=\"hljs-string\">\"(\\\"Not found property \\\\\\\"\\\"+$2+\\\"\\\\\\\" filed or setter method in class \"</span> + c.getName() + <span class=\"hljs-string\">\".\\\"); }\"</span>);\n\n    <span class=\"hljs-comment\">// --------------------------------✨ 分割线4 ✨-------------------------------------</span>\n\n    <span class=\"hljs-keyword\">long</span> id = WRAPPER_CLASS_COUNTER.getAndIncrement();\n    <span class=\"hljs-comment\">// 创建类生成器</span>\n    ClassGenerator cc = ClassGenerator.newInstance(cl);\n    <span class=\"hljs-comment\">// 设置类名及超类</span>\n    cc.setClassName((Modifier.isPublic(c.getModifiers()) ? Wrapper.class.getName() : c.getName() + <span class=\"hljs-string\">\"$sw\"</span>) + id);\n    cc.setSuperClass(Wrapper.class);\n\n    <span class=\"hljs-comment\">// 添加默认构造方法</span>\n    cc.addDefaultConstructor();\n\n    <span class=\"hljs-comment\">// 添加字段</span>\n    cc.addField(<span class=\"hljs-string\">\"public static String[] pns;\"</span>);\n    cc.addField(<span class=\"hljs-string\">\"public static \"</span> + Map.class.getName() + <span class=\"hljs-string\">\" pts;\"</span>);\n    cc.addField(<span class=\"hljs-string\">\"public static String[] mns;\"</span>);\n    cc.addField(<span class=\"hljs-string\">\"public static String[] dmns;\"</span>);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>, len = ms.size(); i &lt; len; i++)\n        cc.addField(<span class=\"hljs-string\">\"public static Class[] mts\"</span> + i + <span class=\"hljs-string\">\";\"</span>);\n\n    <span class=\"hljs-comment\">// 添加方法代码</span>\n    cc.addMethod(<span class=\"hljs-string\">\"public String[] getPropertyNames(){ return pns; }\"</span>);\n    cc.addMethod(<span class=\"hljs-string\">\"public boolean hasProperty(String n){ return pts.containsKey($1); }\"</span>);\n    cc.addMethod(<span class=\"hljs-string\">\"public Class getPropertyType(String n){ return (Class)pts.get($1); }\"</span>);\n    cc.addMethod(<span class=\"hljs-string\">\"public String[] getMethodNames(){ return mns; }\"</span>);\n    cc.addMethod(<span class=\"hljs-string\">\"public String[] getDeclaredMethodNames(){ return dmns; }\"</span>);\n    cc.addMethod(c1.toString());\n    cc.addMethod(c2.toString());\n    cc.addMethod(c3.toString());\n\n    <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-comment\">// 生成类</span>\n        Class&lt;?&gt; wc = cc.toClass();\n        \n        <span class=\"hljs-comment\">// 设置字段值</span>\n        wc.getField(<span class=\"hljs-string\">\"pts\"</span>).set(<span class=\"hljs-keyword\">null</span>, pts);\n        wc.getField(<span class=\"hljs-string\">\"pns\"</span>).set(<span class=\"hljs-keyword\">null</span>, pts.keySet().toArray(<span class=\"hljs-keyword\">new</span> String[<span class=\"hljs-number\">0</span>]));\n        wc.getField(<span class=\"hljs-string\">\"mns\"</span>).set(<span class=\"hljs-keyword\">null</span>, mns.toArray(<span class=\"hljs-keyword\">new</span> String[<span class=\"hljs-number\">0</span>]));\n        wc.getField(<span class=\"hljs-string\">\"dmns\"</span>).set(<span class=\"hljs-keyword\">null</span>, dmns.toArray(<span class=\"hljs-keyword\">new</span> String[<span class=\"hljs-number\">0</span>]));\n        <span class=\"hljs-keyword\">int</span> ix = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (Method m : ms.values())\n            wc.getField(<span class=\"hljs-string\">\"mts\"</span> + ix++).set(<span class=\"hljs-keyword\">null</span>, m.getParameterTypes());\n\n        <span class=\"hljs-comment\">// 创建 Wrapper 实例</span>\n        <span class=\"hljs-keyword\">return</span> (Wrapper) wc.newInstance();\n    } <span class=\"hljs-keyword\">catch</span> (RuntimeException e) {\n        <span class=\"hljs-keyword\">throw</span> e;\n    } <span class=\"hljs-keyword\">catch</span> (Throwable e) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RuntimeException(e.getMessage(), e);\n    } <span class=\"hljs-keyword\">finally</span> {\n        cc.release();\n        ms.clear();\n        mns.clear();\n        dmns.clear();\n    }\n}\n</code></pre>\n<p>上面代码很长，大家耐心看一下。我们在上面代码中做了大量的注释，并按功能对代码进行了分块，以帮助大家理解代码逻辑。下面对这段代码进行讲解。首先我们把目光移到分割线1之上的代码，这段代码主要用于进行一些初始化操作。比如创建 c1、c2、c3 以及 pts、ms、mns 等变量，以及向  c1、c2、c3 中添加方法定义和类型转换代码。接下来是分割线1到分割线2之间的代码，这段代码用于为 public 级别的字段生成条件判断取值与赋值代码。这段代码不是很难看懂，就不多说了。继续向下看，分割线2和分隔线3之间的代码用于为定义在当前类中的方法生成判断语句，和方法调用语句。因为需要对方法重载进行校验，因此到这这段代码看起来有点复杂。不过耐心看一下，也不是很难理解。接下来是分割线3和分隔线4之间的代码，这段代码用于处理 getter、setter 以及以 is/has/can 开头的方法。处理方式是通过正则表达式获取方法类型（get/set/is/...），以及属性名。之后为属性名生成判断语句，然后为方法生成调用语句。最后我们再来看一下分隔线4以下的代码，这段代码通过 ClassGenerator 为刚刚生成的代码构建 Class 类，并通过反射创建对象。ClassGenerator 是 Dubbo 自己封装的，该类的核心是 toClass() 的重载方法 toClass(ClassLoader, ProtectionDomain)，该方法通过 javassist 构建 Class。这里就不分析 toClass 方法了，大家请自行分析。</p>\n<p>阅读 Wrapper 类代码需要对 javassist 框架有所了解。关于 javassist，大家如果不熟悉，请自行查阅资料，本节不打算介绍 javassist 相关内容。</p>\n<p>好了，关于 Wrapper 类生成过程就分析到这。如果大家看的不是很明白，可以单独为 Wrapper 创建单元测试，然后单步调试。并将生成的代码拷贝出来，格式化后再进行观察和理解。</p>\n<h3>2.2.2 导出服务到本地</h3>\n<p>本节我们来看一下服务导出相关的代码，按照代码执行顺序，本节先来分析导出服务到本地的过程。相关代码如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">exportLocal</span><span class=\"hljs-params\">(URL url)</span> </span>{\n    <span class=\"hljs-comment\">// 如果 URL 的协议头等于 injvm，说明已经导出到本地了，无需再次导出</span>\n    <span class=\"hljs-keyword\">if</span> (!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(url.getProtocol())) {\n        URL local = URL.valueOf(url.toFullString())\n            .setProtocol(Constants.LOCAL_PROTOCOL)    <span class=\"hljs-comment\">// 设置协议头为 injvm</span>\n            .setHost(LOCALHOST)\n            .setPort(<span class=\"hljs-number\">0</span>);\n        ServiceClassHolder.getInstance().pushServiceClass(getServiceClass(ref));\n        <span class=\"hljs-comment\">// 创建 Invoker，并导出服务，这里的 protocol 会在运行时调用 InjvmProtocol 的 export 方法</span>\n        Exporter&lt;?&gt; exporter = protocol.export(\n            proxyFactory.getInvoker(ref, (Class) interfaceClass, local));\n        exporters.add(exporter);\n    }\n}\n</code></pre>\n<p>exportLocal 方法比较简单，首先根据 URL 协议头决定是否导出服务。若需导出，则创建一个新的 URL 并将协议头、主机名以及端口设置成新的值。然后创建 Invoker，并调用 InjvmProtocol 的 export 方法导出服务。下面我们来看一下 InjvmProtocol 的 export 方法都做了哪些事情。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> &lt;T&gt; <span class=\"hljs-function\">Exporter&lt;T&gt; <span class=\"hljs-title\">export</span><span class=\"hljs-params\">(Invoker&lt;T&gt; invoker)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n    <span class=\"hljs-comment\">// 创建 InjvmExporter</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> InjvmExporter&lt;T&gt;(invoker, invoker.getUrl().getServiceKey(), exporterMap);\n}\n</code></pre>\n<p>如上，InjvmProtocol 的 export 方法仅创建了一个 InjvmExporter，无其他逻辑。到此导出服务到本地就分析完了，接下来，我们继续分析导出服务到远程的过程。</p>\n<h3>2.2.3 导出服务到远程</h3>\n<p>与导出服务到本地相比，导出服务到远程的过程要复杂不少，其包含了服务导出与服务注册两个过程。这两个过程涉及到了大量的调用，比较复杂。按照代码执行顺序，本节先来分析服务导出逻辑，服务注册逻辑将在下一节进行分析。下面开始分析，我们把目光移动到 RegistryProtocol 的 export 方法上。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> &lt;T&gt; <span class=\"hljs-function\">Exporter&lt;T&gt; <span class=\"hljs-title\">export</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Invoker&lt;T&gt; originInvoker)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n    <span class=\"hljs-comment\">// 导出服务</span>\n    <span class=\"hljs-keyword\">final</span> ExporterChangeableWrapper&lt;T&gt; exporter = doLocalExport(originInvoker);\n\n    <span class=\"hljs-comment\">// 获取注册中心 URL，以 zookeeper 注册中心为例，得到的示例 URL 如下：</span>\n    <span class=\"hljs-comment\">// zookeeper://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-provider&amp;dubbo=2.0.2&amp;export=dubbo%3A%2F%2F172.17.48.52%3A20880%2Fcom.alibaba.dubbo.demo.DemoService%3Fanyhost%3Dtrue%26application%3Ddemo-provider</span>\n    URL registryUrl = getRegistryUrl(originInvoker);\n\n    <span class=\"hljs-comment\">// 根据 URL 加载 Registry 实现类，比如 ZookeeperRegistry</span>\n    <span class=\"hljs-keyword\">final</span> Registry registry = getRegistry(originInvoker);\n    \n    <span class=\"hljs-comment\">// 获取已注册的服务提供者 URL，比如：</span>\n    <span class=\"hljs-comment\">// dubbo://172.17.48.52:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.0.2&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello</span>\n    <span class=\"hljs-keyword\">final</span> URL registeredProviderUrl = getRegisteredProviderUrl(originInvoker);\n\n    <span class=\"hljs-comment\">// 获取 register 参数</span>\n    <span class=\"hljs-keyword\">boolean</span> register = registeredProviderUrl.getParameter(<span class=\"hljs-string\">\"register\"</span>, <span class=\"hljs-keyword\">true</span>);\n\n    <span class=\"hljs-comment\">// 向服务提供者与消费者注册表中注册服务提供者</span>\n    ProviderConsumerRegTable.registerProvider(originInvoker, registryUrl, registeredProviderUrl);\n\n    <span class=\"hljs-comment\">// 根据 register 的值决定是否注册服务</span>\n    <span class=\"hljs-keyword\">if</span> (register) {\n        <span class=\"hljs-comment\">// 向注册中心注册服务</span>\n        register(registryUrl, registeredProviderUrl);\n        ProviderConsumerRegTable.getProviderWrapper(originInvoker).setReg(<span class=\"hljs-keyword\">true</span>);\n    }\n\n    <span class=\"hljs-comment\">// 获取订阅 URL，比如：</span>\n    <span class=\"hljs-comment\">// provider://172.17.48.52:20880/com.alibaba.dubbo.demo.DemoService?category=configurators&amp;check=false&amp;anyhost=true&amp;application=demo-provider&amp;dubbo=2.0.2&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello</span>\n    <span class=\"hljs-keyword\">final</span> URL overrideSubscribeUrl = getSubscribedOverrideUrl(registeredProviderUrl);\n    <span class=\"hljs-comment\">// 创建监听器</span>\n    <span class=\"hljs-keyword\">final</span> OverrideListener overrideSubscribeListener = <span class=\"hljs-keyword\">new</span> OverrideListener(overrideSubscribeUrl, originInvoker);\n    overrideListeners.put(overrideSubscribeUrl, overrideSubscribeListener);\n    <span class=\"hljs-comment\">// 向注册中心进行订阅 override 数据</span>\n    registry.subscribe(overrideSubscribeUrl, overrideSubscribeListener);\n    <span class=\"hljs-comment\">// 创建并返回 DestroyableExporter</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> DestroyableExporter&lt;T&gt;(exporter, originInvoker, overrideSubscribeUrl, registeredProviderUrl);\n}\n</code></pre>\n<p>上面代码看起来比较复杂，主要做如下一些操作：</p>\n<ol>\n<li>调用 doLocalExport 导出服务</li>\n<li>向注册中心注册服务</li>\n<li>向注册中心进行订阅 override 数据</li>\n<li>创建并返回 DestroyableExporter</li>\n</ol>\n<p>在以上操作中，除了创建并返回 DestroyableExporter 没什么难度外，其他几步操作都不是很简单。这其中，导出服务和注册服务是本章要重点分析的逻辑。 订阅 override 数据并非本文重点内容，后面会简单介绍一下。下面先来分析 doLocalExport 方法的逻辑，如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">private</span> &lt;T&gt; <span class=\"hljs-function\">ExporterChangeableWrapper&lt;T&gt; <span class=\"hljs-title\">doLocalExport</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Invoker&lt;T&gt; originInvoker)</span> </span>{\n    String key = getCacheKey(originInvoker);\n    <span class=\"hljs-comment\">// 访问缓存</span>\n    ExporterChangeableWrapper&lt;T&gt; exporter = (ExporterChangeableWrapper&lt;T&gt;) bounds.get(key);\n    <span class=\"hljs-keyword\">if</span> (exporter == <span class=\"hljs-keyword\">null</span>) {\n        <span class=\"hljs-keyword\">synchronized</span> (bounds) {\n            exporter = (ExporterChangeableWrapper&lt;T&gt;) bounds.get(key);\n            <span class=\"hljs-keyword\">if</span> (exporter == <span class=\"hljs-keyword\">null</span>) {\n                <span class=\"hljs-comment\">// 创建 Invoker 为委托类对象</span>\n                <span class=\"hljs-keyword\">final</span> Invoker&lt;?&gt; invokerDelegete = <span class=\"hljs-keyword\">new</span> InvokerDelegete&lt;T&gt;(originInvoker, getProviderUrl(originInvoker));\n                <span class=\"hljs-comment\">// 调用 protocol 的 export 方法导出服务</span>\n                exporter = <span class=\"hljs-keyword\">new</span> ExporterChangeableWrapper&lt;T&gt;((Exporter&lt;T&gt;) protocol.export(invokerDelegete), originInvoker);\n                \n                <span class=\"hljs-comment\">// 写缓存</span>\n                bounds.put(key, exporter);\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> exporter;\n}\n</code></pre>\n<p>上面的代码是典型的双重检查锁，大家在阅读 Dubbo 的源码中，会多次见到。接下来，我们把重点放在 Protocol 的 export 方法上。假设运行时协议为 dubbo，此处的 protocol 变量会在运行时加载 DubboProtocol，并调用 DubboProtocol 的 export 方法。所以，接下来我们目光转移到 DubboProtocol 的 export 方法上，相关分析如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> &lt;T&gt; <span class=\"hljs-function\">Exporter&lt;T&gt; <span class=\"hljs-title\">export</span><span class=\"hljs-params\">(Invoker&lt;T&gt; invoker)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n    URL url = invoker.getUrl();\n\n    <span class=\"hljs-comment\">// 获取服务标识，理解成服务坐标也行。由服务组名，服务名，服务版本号以及端口组成。比如：</span>\n    <span class=\"hljs-comment\">// demoGroup/com.alibaba.dubbo.demo.DemoService:1.0.1:20880</span>\n    String key = serviceKey(url);\n    <span class=\"hljs-comment\">// 创建 DubboExporter</span>\n    DubboExporter&lt;T&gt; exporter = <span class=\"hljs-keyword\">new</span> DubboExporter&lt;T&gt;(invoker, key, exporterMap);\n    <span class=\"hljs-comment\">// 将 &lt;key, exporter&gt; 键值对放入缓存中</span>\n    exporterMap.put(key, exporter);\n\n    <span class=\"hljs-comment\">// 本地存根相关代码</span>\n    Boolean isStubSupportEvent = url.getParameter(Constants.STUB_EVENT_KEY, Constants.DEFAULT_STUB_EVENT);\n    Boolean isCallbackservice = url.getParameter(Constants.IS_CALLBACK_SERVICE, <span class=\"hljs-keyword\">false</span>);\n    <span class=\"hljs-keyword\">if</span> (isStubSupportEvent &amp;&amp; !isCallbackservice) {\n        String stubServiceMethods = url.getParameter(Constants.STUB_EVENT_METHODS_KEY);\n        <span class=\"hljs-keyword\">if</span> (stubServiceMethods == <span class=\"hljs-keyword\">null</span> || stubServiceMethods.length() == <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-comment\">// 省略日志打印代码</span>\n        } <span class=\"hljs-keyword\">else</span> {\n            stubServiceMethodsMap.put(url.getServiceKey(), stubServiceMethods);\n        }\n    }\n\n    <span class=\"hljs-comment\">// 启动服务器</span>\n    openServer(url);\n    <span class=\"hljs-comment\">// 优化序列化</span>\n    optimizeSerialization(url);\n    <span class=\"hljs-keyword\">return</span> exporter;\n}\n</code></pre>\n<p>如上，我们重点关注 DubboExporter 的创建以及 openServer 方法，其他逻辑看不懂也没关系，不影响理解服务导出过程。另外，DubboExporter 的代码比较简单，就不分析了。下面分析 openServer 方法。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">openServer</span><span class=\"hljs-params\">(URL url)</span> </span>{\n    <span class=\"hljs-comment\">// 获取 host:port，并将其作为服务器实例的 key，用于标识当前的服务器实例</span>\n    String key = url.getAddress();\n    <span class=\"hljs-keyword\">boolean</span> isServer = url.getParameter(Constants.IS_SERVER_KEY, <span class=\"hljs-keyword\">true</span>);\n    <span class=\"hljs-keyword\">if</span> (isServer) {\n        <span class=\"hljs-comment\">// 访问缓存</span>\n        ExchangeServer server = serverMap.get(key);\n        <span class=\"hljs-keyword\">if</span> (server == <span class=\"hljs-keyword\">null</span>) {\n            <span class=\"hljs-comment\">// 创建服务器实例</span>\n            serverMap.put(key, createServer(url));\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-comment\">// 服务器已创建，则根据 url 中的配置重置服务器</span>\n            server.reset(url);\n        }\n    }\n}\n</code></pre>\n<p>如上，在同一台机器上（单网卡），同一个端口上仅允许启动一个服务器实例。若某个端口上已有服务器实例，此时则调用 reset 方法重置服务器的一些配置。考虑到篇幅问题，关于服务器实例重置的代码就不分析了。接下来分析服务器实例的创建过程。如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> ExchangeServer <span class=\"hljs-title\">createServer</span><span class=\"hljs-params\">(URL url)</span> </span>{\n    url = url.addParameterIfAbsent(Constants.CHANNEL_READONLYEVENT_SENT_KEY,\n    <span class=\"hljs-comment\">// 添加心跳检测配置到 url 中</span>\n    url = url.addParameterIfAbsent(Constants.HEARTBEAT_KEY, String.valueOf(Constants.DEFAULT_HEARTBEAT));\n\t<span class=\"hljs-comment\">// 获取 server 参数，默认为 netty</span>\n    String str = url.getParameter(Constants.SERVER_KEY, Constants.DEFAULT_REMOTING_SERVER);\n\n\t<span class=\"hljs-comment\">// 通过 SPI 检测是否存在 server 参数所代表的 Transporter 拓展，不存在则抛出异常</span>\n    <span class=\"hljs-keyword\">if</span> (str != <span class=\"hljs-keyword\">null</span> &amp;&amp; str.length() &gt; <span class=\"hljs-number\">0</span> &amp;&amp; !ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str))\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RpcException(<span class=\"hljs-string\">\"Unsupported server type: \"</span> + str + <span class=\"hljs-string\">\", url: \"</span> + url);\n\n    <span class=\"hljs-comment\">// 添加编码解码器参数</span>\n    url = url.addParameter(Constants.CODEC_KEY, DubboCodec.NAME);\n    ExchangeServer server;\n    <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-comment\">// 创建 ExchangeServer</span>\n        server = Exchangers.bind(url, requestHandler);\n    } <span class=\"hljs-keyword\">catch</span> (RemotingException e) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RpcException(<span class=\"hljs-string\">\"Fail to start server...\"</span>);\n    }\n                                   \n\t<span class=\"hljs-comment\">// 获取 client 参数，可指定 netty，mina</span>\n    str = url.getParameter(Constants.CLIENT_KEY);\n    <span class=\"hljs-keyword\">if</span> (str != <span class=\"hljs-keyword\">null</span> &amp;&amp; str.length() &gt; <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-comment\">// 获取所有的 Transporter 实现类名称集合，比如 supportedTypes = [netty, mina]</span>\n        Set&lt;String&gt; supportedTypes = ExtensionLoader.getExtensionLoader(Transporter.class).getSupportedExtensions();\n        <span class=\"hljs-comment\">// 检测当前 Dubbo 所支持的 Transporter 实现类名称列表中，</span>\n        <span class=\"hljs-comment\">// 是否包含 client 所表示的 Transporter，若不包含，则抛出异常</span>\n        <span class=\"hljs-keyword\">if</span> (!supportedTypes.contains(str)) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RpcException(<span class=\"hljs-string\">\"Unsupported client type...\"</span>);\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> server;\n}\n</code></pre>\n<p>如上，createServer 包含三个核心的逻辑。第一是检测是否存在 server 参数所代表的 Transporter 拓展，不存在则抛出异常。第二是创建服务器实例。第三是检测是否支持 client 参数所表示的 Transporter 拓展，不存在也是抛出异常。两次检测操作所对应的代码比较直白了，无需多说。但创建服务器的操作目前还不是很清晰，我们继续往下看。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> ExchangeServer <span class=\"hljs-title\">bind</span><span class=\"hljs-params\">(URL url, ExchangeHandler handler)</span> <span class=\"hljs-keyword\">throws</span> RemotingException </span>{\n    <span class=\"hljs-keyword\">if</span> (url == <span class=\"hljs-keyword\">null</span>) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"url == null\"</span>);\n    }\n    <span class=\"hljs-keyword\">if</span> (handler == <span class=\"hljs-keyword\">null</span>) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"handler == null\"</span>);\n    }\n    url = url.addParameterIfAbsent(Constants.CODEC_KEY, <span class=\"hljs-string\">\"exchange\"</span>);\n    <span class=\"hljs-comment\">// 获取 Exchanger，默认为 HeaderExchanger。</span>\n    <span class=\"hljs-comment\">// 紧接着调用 HeaderExchanger 的 bind 方法创建 ExchangeServer 实例</span>\n    <span class=\"hljs-keyword\">return</span> getExchanger(url).bind(url, handler);\n}\n</code></pre>\n<p>上面代码比较简单，就不多说了。下面看一下 HeaderExchanger 的 bind 方法。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ExchangeServer <span class=\"hljs-title\">bind</span><span class=\"hljs-params\">(URL url, ExchangeHandler handler)</span> <span class=\"hljs-keyword\">throws</span> RemotingException </span>{\n\t<span class=\"hljs-comment\">// 创建 HeaderExchangeServer 实例，该方法包含了多个逻辑，分别如下：</span>\n\t<span class=\"hljs-comment\">//   1. new HeaderExchangeHandler(handler)</span>\n\t<span class=\"hljs-comment\">//\t 2. new DecodeHandler(new HeaderExchangeHandler(handler))</span>\n\t<span class=\"hljs-comment\">//   3. Transporters.bind(url, new DecodeHandler(new HeaderExchangeHandler(handler)))</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> HeaderExchangeServer(Transporters.bind(url, <span class=\"hljs-keyword\">new</span> DecodeHandler(<span class=\"hljs-keyword\">new</span> HeaderExchangeHandler(handler))));\n}\n</code></pre>\n<p>HeaderExchanger 的 bind 方法包含的逻辑比较多，但目前我们仅需关心 Transporters 的 bind 方法逻辑即可。该方法的代码如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Server <span class=\"hljs-title\">bind</span><span class=\"hljs-params\">(URL url, ChannelHandler... handlers)</span> <span class=\"hljs-keyword\">throws</span> RemotingException </span>{\n    <span class=\"hljs-keyword\">if</span> (url == <span class=\"hljs-keyword\">null</span>) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"url == null\"</span>);\n    }\n    <span class=\"hljs-keyword\">if</span> (handlers == <span class=\"hljs-keyword\">null</span> || handlers.length == <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"handlers == null\"</span>);\n    }\n    ChannelHandler handler;\n    <span class=\"hljs-keyword\">if</span> (handlers.length == <span class=\"hljs-number\">1</span>) {\n        handler = handlers[<span class=\"hljs-number\">0</span>];\n    } <span class=\"hljs-keyword\">else</span> {\n    \t<span class=\"hljs-comment\">// 如果 handlers 元素数量大于1，则创建 ChannelHandler 分发器</span>\n        handler = <span class=\"hljs-keyword\">new</span> ChannelHandlerDispatcher(handlers);\n    }\n    <span class=\"hljs-comment\">// 获取自适应 Transporter 实例，并调用实例方法</span>\n    <span class=\"hljs-keyword\">return</span> getTransporter().bind(url, handler);\n}\n</code></pre>\n<p>如上，getTransporter() 方法获取的 Transporter 是在运行时动态创建的，类名为 TransporterAdaptive，也就是自适应拓展类。TransporterAdaptive 会在运行时根据传入的 URL 参数决定加载什么类型的 Transporter，默认为 NettyTransporter。下面我们继续跟下去，这次分析的是 NettyTransporter 的 bind 方法。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Server <span class=\"hljs-title\">bind</span><span class=\"hljs-params\">(URL url, ChannelHandler listener)</span> <span class=\"hljs-keyword\">throws</span> RemotingException </span>{\n\t<span class=\"hljs-comment\">// 创建 NettyServer</span>\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> NettyServer(url, listener);\n}\n</code></pre>\n<p>这里仅有一句创建 NettyServer 的代码，无需多说，我们继续向下看。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NettyServer</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractServer</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Server</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">NettyServer</span><span class=\"hljs-params\">(URL url, ChannelHandler handler)</span> <span class=\"hljs-keyword\">throws</span> RemotingException </span>{\n        <span class=\"hljs-comment\">// 调用父类构造方法</span>\n        <span class=\"hljs-keyword\">super</span>(url, ChannelHandlers.wrap(handler, ExecutorUtil.setThreadName(url, SERVER_THREAD_POOL_NAME)));\n    }\n}\n\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AbstractServer</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractEndpoint</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Server</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">AbstractServer</span><span class=\"hljs-params\">(URL url, ChannelHandler handler)</span> <span class=\"hljs-keyword\">throws</span> RemotingException </span>{\n        <span class=\"hljs-comment\">// 调用父类构造方法，这里就不用跟进去了，没什么复杂逻辑</span>\n        <span class=\"hljs-keyword\">super</span>(url, handler);\n        localAddress = getUrl().toInetSocketAddress();\n\n        <span class=\"hljs-comment\">// 获取 ip 和端口</span>\n        String bindIp = getUrl().getParameter(Constants.BIND_IP_KEY, getUrl().getHost());\n        <span class=\"hljs-keyword\">int</span> bindPort = getUrl().getParameter(Constants.BIND_PORT_KEY, getUrl().getPort());\n        <span class=\"hljs-keyword\">if</span> (url.getParameter(Constants.ANYHOST_KEY, <span class=\"hljs-keyword\">false</span>) || NetUtils.isInvalidLocalHost(bindIp)) {\n            <span class=\"hljs-comment\">// 设置 ip 为 0.0.0.0</span>\n            bindIp = NetUtils.ANYHOST;\n        }\n        bindAddress = <span class=\"hljs-keyword\">new</span> InetSocketAddress(bindIp, bindPort);\n        <span class=\"hljs-comment\">// 获取最大可接受连接数</span>\n        <span class=\"hljs-keyword\">this</span>.accepts = url.getParameter(Constants.ACCEPTS_KEY, Constants.DEFAULT_ACCEPTS);\n        <span class=\"hljs-keyword\">this</span>.idleTimeout = url.getParameter(Constants.IDLE_TIMEOUT_KEY, Constants.DEFAULT_IDLE_TIMEOUT);\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-comment\">// 调用模板方法 doOpen 启动服务器</span>\n            doOpen();\n        } <span class=\"hljs-keyword\">catch</span> (Throwable t) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RemotingException(<span class=\"hljs-string\">\"Failed to bind \"</span>);\n        }\n\n        DataStore dataStore = ExtensionLoader.getExtensionLoader(DataStore.class).getDefaultExtension();\n        executor = (ExecutorService) dataStore.get(Constants.EXECUTOR_SERVICE_COMPONENT_KEY, Integer.toString(url.getPort()));\n    }\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doOpen</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Throwable</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doClose</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Throwable</span>;\n}\n</code></pre>\n<p>上面代码多为赋值代码，不需要多讲。我们重点关注 doOpen 抽象方法，该方法需要子类实现。下面回到 NettyServer 中。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doOpen</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Throwable </span>{\n    NettyHelper.setNettyLoggerFactory();\n    <span class=\"hljs-comment\">// 创建 boss 和 worker 线程池</span>\n    ExecutorService boss = Executors.newCachedThreadPool(<span class=\"hljs-keyword\">new</span> NamedThreadFactory(<span class=\"hljs-string\">\"NettyServerBoss\"</span>, <span class=\"hljs-keyword\">true</span>));\n    ExecutorService worker = Executors.newCachedThreadPool(<span class=\"hljs-keyword\">new</span> NamedThreadFactory(<span class=\"hljs-string\">\"NettyServerWorker\"</span>, <span class=\"hljs-keyword\">true</span>));\n    ChannelFactory channelFactory = <span class=\"hljs-keyword\">new</span> NioServerSocketChannelFactory(boss, worker, getUrl().getPositiveParameter(Constants.IO_THREADS_KEY, Constants.DEFAULT_IO_THREADS));\n    \n    <span class=\"hljs-comment\">// 创建 ServerBootstrap</span>\n    bootstrap = <span class=\"hljs-keyword\">new</span> ServerBootstrap(channelFactory);\n\n    <span class=\"hljs-keyword\">final</span> NettyHandler nettyHandler = <span class=\"hljs-keyword\">new</span> NettyHandler(getUrl(), <span class=\"hljs-keyword\">this</span>);\n    channels = nettyHandler.getChannels();\n    bootstrap.setOption(<span class=\"hljs-string\">\"child.tcpNoDelay\"</span>, <span class=\"hljs-keyword\">true</span>);\n    <span class=\"hljs-comment\">// 设置 PipelineFactory</span>\n    bootstrap.setPipelineFactory(<span class=\"hljs-keyword\">new</span> ChannelPipelineFactory() {\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ChannelPipeline <span class=\"hljs-title\">getPipeline</span><span class=\"hljs-params\">()</span> </span>{\n            NettyCodecAdapter adapter = <span class=\"hljs-keyword\">new</span> NettyCodecAdapter(getCodec(), getUrl(), NettyServer.<span class=\"hljs-keyword\">this</span>);\n            ChannelPipeline pipeline = Channels.pipeline();\n            pipeline.addLast(<span class=\"hljs-string\">\"decoder\"</span>, adapter.getDecoder());\n            pipeline.addLast(<span class=\"hljs-string\">\"encoder\"</span>, adapter.getEncoder());\n            pipeline.addLast(<span class=\"hljs-string\">\"handler\"</span>, nettyHandler);\n            <span class=\"hljs-keyword\">return</span> pipeline;\n        }\n    });\n    <span class=\"hljs-comment\">// 绑定到指定的 ip 和端口上</span>\n    channel = bootstrap.bind(getBindAddress());\n}\n</code></pre>\n<p>以上就是 NettyServer 创建的过程，dubbo 默认使用的 NettyServer 是基于 netty 3.x 版本实现的，比较老了。因此 Dubbo 另外提供了 netty 4.x 版本的 NettyServer，大家可在使用 Dubbo 的过程中按需进行配置。</p>\n<p>到此，关于服务导出的过程就分析完了。整个过程比较复杂，大家在分析的过程中耐心一些。并且多写 Demo 进行调试，以便能够更好的理解代码逻辑。</p>\n<p>本节内容先到这里，接下来分析服务导出的另一块逻辑 — 服务注册。</p>\n<h3>2.2.4 服务注册</h3>\n<p>本节我们来分析服务注册过程，服务注册操作对于 Dubbo 来说不是必需的，通过服务直连的方式就可以绕过注册中心。但通常我们不会这么做，直连方式不利于服务治理，仅推荐在测试服务时使用。对于 Dubbo 来说，注册中心虽不是必需，但却是必要的。因此，关于注册中心以及服务注册相关逻辑，我们也需要搞懂。</p>\n<p>本节内容以 Zookeeper 注册中心作为分析目标，其他类型注册中心大家可自行分析。下面从服务注册的入口方法开始分析，我们把目光再次移到 RegistryProtocol 的 export 方法上。如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> &lt;T&gt; <span class=\"hljs-function\">Exporter&lt;T&gt; <span class=\"hljs-title\">export</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Invoker&lt;T&gt; originInvoker)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n    \n    <span class=\"hljs-comment\">// ${导出服务}</span>\n    \n    <span class=\"hljs-comment\">// 省略其他代码</span>\n    \n    <span class=\"hljs-keyword\">boolean</span> register = registeredProviderUrl.getParameter(<span class=\"hljs-string\">\"register\"</span>, <span class=\"hljs-keyword\">true</span>);\n    <span class=\"hljs-keyword\">if</span> (register) {\n        <span class=\"hljs-comment\">// 注册服务</span>\n        register(registryUrl, registeredProviderUrl);\n        ProviderConsumerRegTable.getProviderWrapper(originInvoker).setReg(<span class=\"hljs-keyword\">true</span>);\n    }\n    \n    <span class=\"hljs-keyword\">final</span> URL overrideSubscribeUrl = getSubscribedOverrideUrl(registeredProviderUrl);\n    <span class=\"hljs-keyword\">final</span> OverrideListener overrideSubscribeListener = <span class=\"hljs-keyword\">new</span> OverrideListener(overrideSubscribeUrl, originInvoker);\n    overrideListeners.put(overrideSubscribeUrl, overrideSubscribeListener);\n    <span class=\"hljs-comment\">// 订阅 override 数据</span>\n    registry.subscribe(overrideSubscribeUrl, overrideSubscribeListener);\n\n    <span class=\"hljs-comment\">// 省略部分代码</span>\n}\n</code></pre>\n<p>RegistryProtocol 的 export 方法包含了服务导出，注册，以及数据订阅等逻辑。其中服务导出逻辑上一节已经分析过了，本节将分析服务注册逻辑，相关代码如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">register</span><span class=\"hljs-params\">(URL registryUrl, URL registedProviderUrl)</span> </span>{\n    <span class=\"hljs-comment\">// 获取 Registry</span>\n    Registry registry = registryFactory.getRegistry(registryUrl);\n    <span class=\"hljs-comment\">// 注册服务</span>\n    registry.register(registedProviderUrl);\n}\n</code></pre>\n<p>register 方法包含两步操作，第一步是获取注册中心实例，第二步是向注册中心注册服务。接下来分两节内容对这两步操作进行分析。</p>\n<h4>2.2.4.1 创建注册中心</h4>\n<p>本节内容以 Zookeeper 注册中心为例进行分析。下面先来看一下 getRegistry 方法的源码，这个方法由 AbstractRegistryFactory 实现。如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Registry <span class=\"hljs-title\">getRegistry</span><span class=\"hljs-params\">(URL url)</span> </span>{\n    url = url.setPath(RegistryService.class.getName())\n            .addParameter(Constants.INTERFACE_KEY, RegistryService.class.getName())\n            .removeParameters(Constants.EXPORT_KEY, Constants.REFER_KEY);\n    String key = url.toServiceString();\n    LOCK.lock();\n    <span class=\"hljs-keyword\">try</span> {\n    \t<span class=\"hljs-comment\">// 访问缓存</span>\n        Registry registry = REGISTRIES.get(key);\n        <span class=\"hljs-keyword\">if</span> (registry != <span class=\"hljs-keyword\">null</span>) {\n            <span class=\"hljs-keyword\">return</span> registry;\n        }\n        \n        <span class=\"hljs-comment\">// 缓存未命中，创建 Registry 实例</span>\n        registry = createRegistry(url);\n        <span class=\"hljs-keyword\">if</span> (registry == <span class=\"hljs-keyword\">null</span>) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalStateException(<span class=\"hljs-string\">\"Can not create registry...\"</span>);\n        }\n        \n        <span class=\"hljs-comment\">// 写入缓存</span>\n        REGISTRIES.put(key, registry);\n        <span class=\"hljs-keyword\">return</span> registry;\n    } <span class=\"hljs-keyword\">finally</span> {\n        LOCK.unlock();\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">abstract</span> Registry <span class=\"hljs-title\">createRegistry</span><span class=\"hljs-params\">(URL url)</span></span>;\n</code></pre>\n<p>如上，getRegistry 方法先访问缓存，缓存未命中则调用 createRegistry 创建 Registry，然后写入缓存。这里的 createRegistry 是一个模板方法，由具体的子类实现。因此，下面我们到 ZookeeperRegistryFactory 中探究一番。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ZookeeperRegistryFactory</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractRegistryFactory</span> </span>{\n\n    <span class=\"hljs-comment\">// zookeeperTransporter 由 SPI 在运行时注入，类型为 ZookeeperTransporter$Adaptive</span>\n    <span class=\"hljs-keyword\">private</span> ZookeeperTransporter zookeeperTransporter;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setZookeeperTransporter</span><span class=\"hljs-params\">(ZookeeperTransporter zookeeperTransporter)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.zookeeperTransporter = zookeeperTransporter;\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Registry <span class=\"hljs-title\">createRegistry</span><span class=\"hljs-params\">(URL url)</span> </span>{\n        <span class=\"hljs-comment\">// 创建 ZookeeperRegistry</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> ZookeeperRegistry(url, zookeeperTransporter);\n    }\n}\n</code></pre>\n<p>ZookeeperRegistryFactory 的 createRegistry 方法仅包含一句代码，无需解释，继续跟下去。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ZookeeperRegistry</span><span class=\"hljs-params\">(URL url, ZookeeperTransporter zookeeperTransporter)</span> </span>{\n    <span class=\"hljs-keyword\">super</span>(url);\n    <span class=\"hljs-keyword\">if</span> (url.isAnyHost()) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalStateException(<span class=\"hljs-string\">\"registry address == null\"</span>);\n    }\n    \n    <span class=\"hljs-comment\">// 获取组名，默认为 dubbo</span>\n    String group = url.getParameter(Constants.GROUP_KEY, DEFAULT_ROOT);\n    <span class=\"hljs-keyword\">if</span> (!group.startsWith(Constants.PATH_SEPARATOR)) {\n        <span class=\"hljs-comment\">// group = \"/\" + group</span>\n        group = Constants.PATH_SEPARATOR + group;\n    }\n    <span class=\"hljs-keyword\">this</span>.root = group;\n    <span class=\"hljs-comment\">// 创建 Zookeeper 客户端，默认为 CuratorZookeeperTransporter</span>\n    zkClient = zookeeperTransporter.connect(url);\n    <span class=\"hljs-comment\">// 添加状态监听器</span>\n    zkClient.addStateListener(<span class=\"hljs-keyword\">new</span> StateListener() {\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">stateChanged</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> state)</span> </span>{\n            <span class=\"hljs-keyword\">if</span> (state == RECONNECTED) {\n                <span class=\"hljs-keyword\">try</span> {\n                    recover();\n                } <span class=\"hljs-keyword\">catch</span> (Exception e) {\n                    logger.error(e.getMessage(), e);\n                }\n            }\n        }\n    });\n}\n</code></pre>\n<p>在上面的代码代码中，我们重点关注 ZookeeperTransporter 的 connect 方法调用，这个方法用于创建 Zookeeper 客户端。创建好 Zookeeper 客户端，意味着注册中心的创建过程就结束了。接下来，再来分析一下 Zookeeper 客户端的创建过程。</p>\n<p>前面说过，这里的 zookeeperTransporter 类型为自适应拓展类，因此 connect 方法会在被调用时决定加载什么类型的 ZookeeperTransporter 拓展，默认为 CuratorZookeeperTransporter。下面我们到 CuratorZookeeperTransporter 中看一看。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ZookeeperClient <span class=\"hljs-title\">connect</span><span class=\"hljs-params\">(URL url)</span> </span>{\n    <span class=\"hljs-comment\">// 创建 CuratorZookeeperClient</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> CuratorZookeeperClient(url);\n}\n</code></pre>\n<p>继续向下看。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CuratorZookeeperClient</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractZookeeperClient</span>&lt;<span class=\"hljs-title\">CuratorWatcher</span>&gt; </span>{\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> CuratorFramework client;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">CuratorZookeeperClient</span><span class=\"hljs-params\">(URL url)</span> </span>{\n        <span class=\"hljs-keyword\">super</span>(url);\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-comment\">// 创建 CuratorFramework 构造器</span>\n            CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder()\n                    .connectString(url.getBackupAddress())\n                    .retryPolicy(<span class=\"hljs-keyword\">new</span> RetryNTimes(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1000</span>))\n                    .connectionTimeoutMs(<span class=\"hljs-number\">5000</span>);\n            String authority = url.getAuthority();\n            <span class=\"hljs-keyword\">if</span> (authority != <span class=\"hljs-keyword\">null</span> &amp;&amp; authority.length() &gt; <span class=\"hljs-number\">0</span>) {\n                builder = builder.authorization(<span class=\"hljs-string\">\"digest\"</span>, authority.getBytes());\n            }\n            <span class=\"hljs-comment\">// 构建 CuratorFramework 实例</span>\n            client = builder.build();\n            <span class=\"hljs-comment\">// 添加监听器</span>\n            client.getConnectionStateListenable().addListener(<span class=\"hljs-keyword\">new</span> ConnectionStateListener() {\n                <span class=\"hljs-meta\">@Override</span>\n                <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">stateChanged</span><span class=\"hljs-params\">(CuratorFramework client, ConnectionState state)</span> </span>{\n                    <span class=\"hljs-keyword\">if</span> (state == ConnectionState.LOST) {\n                        CuratorZookeeperClient.<span class=\"hljs-keyword\">this</span>.stateChanged(StateListener.DISCONNECTED);\n                    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (state == ConnectionState.CONNECTED) {\n                        CuratorZookeeperClient.<span class=\"hljs-keyword\">this</span>.stateChanged(StateListener.CONNECTED);\n                    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (state == ConnectionState.RECONNECTED) {\n                        CuratorZookeeperClient.<span class=\"hljs-keyword\">this</span>.stateChanged(StateListener.RECONNECTED);\n                    }\n                }\n            });\n            \n            <span class=\"hljs-comment\">// 启动客户端</span>\n            client.start();\n        } <span class=\"hljs-keyword\">catch</span> (Exception e) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalStateException(e.getMessage(), e);\n        }\n    }\n}\n</code></pre>\n<p>CuratorZookeeperClient 构造方法主要用于创建和启动 CuratorFramework 实例。以上基本上都是 Curator 框架的代码，大家如果对 Curator 框架不是很了解，可以参考 Curator 官方文档。</p>\n<p>本节分析了 ZookeeperRegistry 实例的创建过程，整个过程并不是很复杂。大家在看完分析后，可以自行调试，以加深理解。现在注册中心实例创建好了，接下来要做的事情是向注册中心注册服务，我们继续往下看。</p>\n<h4>2.2.4.2 节点创建</h4>\n<p>以 Zookeeper 为例，所谓的服务注册，本质上是将服务配置数据写入到 Zookeeper 的某个路径的节点下。为了让大家有一个直观的了解，下面我们将 Dubbo 的 demo 跑起来，然后通过 Zookeeper 可视化客户端 <a href=\"https://github.com/apache/zookeeper/tree/b79af153d0f98a4f3f3516910ed47234d7b3d74e/src/contrib/zooinspector\">ZooInspector</a> 查看节点数据。如下：</p>\n<p><img src=\"./sources/images/service-registry.png\" alt=\"\"></p>\n<p>从上图中可以看到 com.alibaba.dubbo.demo.DemoService 这个服务对应的配置信息（存储在 URL 中）最终被注册到了 /dubbo/com.alibaba.dubbo.demo.DemoService/providers/ 节点下。搞懂了服务注册的本质，那么接下来我们就可以去阅读服务注册的代码了。服务注册的接口为 register(URL)，这个方法定义在 FailbackRegistry 抽象类中。代码如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">register</span><span class=\"hljs-params\">(URL url)</span> </span>{\n    <span class=\"hljs-keyword\">super</span>.register(url);\n    failedRegistered.remove(url);\n    failedUnregistered.remove(url);\n    <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-comment\">// 模板方法，由子类实现</span>\n        doRegister(url);\n    } <span class=\"hljs-keyword\">catch</span> (Exception e) {\n        Throwable t = e;\n\n        <span class=\"hljs-comment\">// 获取 check 参数，若 check = true 将会直接抛出异常</span>\n        <span class=\"hljs-keyword\">boolean</span> check = getUrl().getParameter(Constants.CHECK_KEY, <span class=\"hljs-keyword\">true</span>)\n                &amp;&amp; url.getParameter(Constants.CHECK_KEY, <span class=\"hljs-keyword\">true</span>)\n                &amp;&amp; !Constants.CONSUMER_PROTOCOL.equals(url.getProtocol());\n        <span class=\"hljs-keyword\">boolean</span> skipFailback = t <span class=\"hljs-keyword\">instanceof</span> SkipFailbackWrapperException;\n        <span class=\"hljs-keyword\">if</span> (check || skipFailback) {\n            <span class=\"hljs-keyword\">if</span> (skipFailback) {\n                t = t.getCause();\n            }\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalStateException(<span class=\"hljs-string\">\"Failed to register\"</span>);\n        } <span class=\"hljs-keyword\">else</span> {\n            logger.error(<span class=\"hljs-string\">\"Failed to register\"</span>);\n        }\n\n        <span class=\"hljs-comment\">// 记录注册失败的链接</span>\n        failedRegistered.add(url);\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doRegister</span><span class=\"hljs-params\">(URL url)</span></span>;\n</code></pre>\n<p>如上，我们重点关注 doRegister 方法调用即可，其他的代码先忽略。doRegister 方法是一个模板方法，因此我们到 FailbackRegistry 子类 ZookeeperRegistry 中进行分析。如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doRegister</span><span class=\"hljs-params\">(URL url)</span> </span>{\n    <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-comment\">// 通过 Zookeeper 客户端创建节点，节点路径由 toUrlPath 方法生成，路径格式如下:</span>\n        <span class=\"hljs-comment\">//   /${group}/${serviceInterface}/providers/${url}</span>\n        <span class=\"hljs-comment\">// 比如</span>\n        <span class=\"hljs-comment\">//   /dubbo/org.apache.dubbo.DemoService/providers/dubbo%3A%2F%2F127.0.0.1......</span>\n        zkClient.create(toUrlPath(url), url.getParameter(Constants.DYNAMIC_KEY, <span class=\"hljs-keyword\">true</span>));\n    } <span class=\"hljs-keyword\">catch</span> (Throwable e) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RpcException(<span class=\"hljs-string\">\"Failed to register...\"</span>);\n    }\n}\n</code></pre>\n<p>如上，ZookeeperRegistry 在 doRegister 中调用了 Zookeeper 客户端创建服务节点。节点路径由 toUrlPath 方法生成，该方法逻辑不难理解，就不分析了。接下来分析 create 方法，如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">create</span><span class=\"hljs-params\">(String path, <span class=\"hljs-keyword\">boolean</span> ephemeral)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (!ephemeral) {\n        <span class=\"hljs-comment\">// 如果要创建的节点类型非临时节点，那么这里要检测节点是否存在</span>\n        <span class=\"hljs-keyword\">if</span> (checkExists(path)) {\n            <span class=\"hljs-keyword\">return</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">int</span> i = path.lastIndexOf(<span class=\"hljs-string\">'/'</span>);\n    <span class=\"hljs-keyword\">if</span> (i &gt; <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-comment\">// 递归创建上一级路径</span>\n        create(path.substring(<span class=\"hljs-number\">0</span>, i), <span class=\"hljs-keyword\">false</span>);\n    }\n    \n    <span class=\"hljs-comment\">// 根据 ephemeral 的值创建临时或持久节点</span>\n    <span class=\"hljs-keyword\">if</span> (ephemeral) {\n        createEphemeral(path);\n    } <span class=\"hljs-keyword\">else</span> {\n        createPersistent(path);\n    }\n}\n</code></pre>\n<p>上面方法先是通过递归创建当前节点的上一级路径，然后再根据 ephemeral 的值决定创建临时还是持久节点。createEphemeral 和 createPersistent 这两个方法都比较简单，这里简单分析其中的一个。如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">createEphemeral</span><span class=\"hljs-params\">(String path)</span> </span>{\n    <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-comment\">// 通过 Curator 框架创建节点</span>\n        client.create().withMode(CreateMode.EPHEMERAL).forPath(path);\n    } <span class=\"hljs-keyword\">catch</span> (NodeExistsException e) {\n    } <span class=\"hljs-keyword\">catch</span> (Exception e) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalStateException(e.getMessage(), e);\n    }\n}\n</code></pre>\n<p>好了，到此关于服务注册的过程就分析完了。整个过程可简单总结为：先创建注册中心实例，之后再通过注册中心实例注册服务。本节先到这，接下来分析数据订阅过程。</p>\n<h3>2.2.5 订阅 override 数据</h3>\n<p>// 待补充</p>\n<h2>3.总结</h2>\n<p>本篇文章详细分析了 Dubbo 服务导出过程，包括配置检测，URL 组装，Invoker 创建过程、导出服务以及注册服务等等。篇幅比较大，需要大家耐心阅读。本篇文章先就到这，如果文章有不妥错误之处，希望大家能够进行反馈或修正。</p>\n",
  "link": "/zh-cn/docs/source_code_guide/export-service.html",
  "meta": {
    "title": "服务导出",
    "keywords": "Dubbo, service, export",
    "description": "本文介绍了 Dubbo 服务导出的过程和实现细节"
  }
}