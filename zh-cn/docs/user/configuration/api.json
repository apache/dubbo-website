{
  "filename": "api.md",
  "__html": "<h1>API 配置</h1>\n<p>API 属性与配置项一对一，各属性含义，请参见：<a href=\"../references/xml/introduction.md\">配置参考手册</a>，比如：<code>ApplicationConfig.setName(&quot;xxx&quot;)</code> 对应  <code>&lt;dubbo:application name=&quot;xxx&quot; /&gt;</code> <sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></p>\n<h2>服务提供者</h2>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.rpc.config.ApplicationConfig;\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.rpc.config.RegistryConfig;\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.rpc.config.ProviderConfig;\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.rpc.config.ServiceConfig;\n<span class=\"hljs-keyword\">import</span> com.xxx.XxxService;\n<span class=\"hljs-keyword\">import</span> com.xxx.XxxServiceImpl;\n \n<span class=\"hljs-comment\">// 服务实现</span>\nXxxService xxxService = <span class=\"hljs-keyword\">new</span> XxxServiceImpl();\n \n<span class=\"hljs-comment\">// 当前应用配置</span>\nApplicationConfig application = <span class=\"hljs-keyword\">new</span> ApplicationConfig();\napplication.setName(<span class=\"hljs-string\">\"xxx\"</span>);\n \n<span class=\"hljs-comment\">// 连接注册中心配置</span>\nRegistryConfig registry = <span class=\"hljs-keyword\">new</span> RegistryConfig();\nregistry.setAddress(<span class=\"hljs-string\">\"10.20.130.230:9090\"</span>);\nregistry.setUsername(<span class=\"hljs-string\">\"aaa\"</span>);\nregistry.setPassword(<span class=\"hljs-string\">\"bbb\"</span>);\n \n<span class=\"hljs-comment\">// 服务提供者协议配置</span>\nProtocolConfig protocol = <span class=\"hljs-keyword\">new</span> ProtocolConfig();\nprotocol.setName(<span class=\"hljs-string\">\"dubbo\"</span>);\nprotocol.setPort(<span class=\"hljs-number\">12345</span>);\nprotocol.setThreads(<span class=\"hljs-number\">200</span>);\n \n<span class=\"hljs-comment\">// 注意：ServiceConfig为重对象，内部封装了与注册中心的连接，以及开启服务端口</span>\n \n<span class=\"hljs-comment\">// 服务提供者暴露服务配置</span>\nServiceConfig&lt;XxxService&gt; service = <span class=\"hljs-keyword\">new</span> ServiceConfig&lt;XxxService&gt;(); <span class=\"hljs-comment\">// 此实例很重，封装了与注册中心的连接，请自行缓存，否则可能造成内存和连接泄漏</span>\nservice.setApplication(application);\nservice.setRegistry(registry); <span class=\"hljs-comment\">// 多个注册中心可以用setRegistries()</span>\nservice.setProtocol(protocol); <span class=\"hljs-comment\">// 多个协议可以用setProtocols()</span>\nservice.setInterface(XxxService.class);\nservice.setRef(xxxService);\nservice.setVersion(<span class=\"hljs-string\">\"1.0.0\"</span>);\n \n<span class=\"hljs-comment\">// 暴露及注册服务</span>\nservice.export();\n</code></pre>\n<h2>服务消费者</h2>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.rpc.config.ApplicationConfig;\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.rpc.config.RegistryConfig;\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.rpc.config.ConsumerConfig;\n<span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.rpc.config.ReferenceConfig;\n<span class=\"hljs-keyword\">import</span> com.xxx.XxxService;\n \n<span class=\"hljs-comment\">// 当前应用配置</span>\nApplicationConfig application = <span class=\"hljs-keyword\">new</span> ApplicationConfig();\napplication.setName(<span class=\"hljs-string\">\"yyy\"</span>);\n \n<span class=\"hljs-comment\">// 连接注册中心配置</span>\nRegistryConfig registry = <span class=\"hljs-keyword\">new</span> RegistryConfig();\nregistry.setAddress(<span class=\"hljs-string\">\"10.20.130.230:9090\"</span>);\nregistry.setUsername(<span class=\"hljs-string\">\"aaa\"</span>);\nregistry.setPassword(<span class=\"hljs-string\">\"bbb\"</span>);\n \n<span class=\"hljs-comment\">// 注意：ReferenceConfig为重对象，内部封装了与注册中心的连接，以及与服务提供方的连接</span>\n \n<span class=\"hljs-comment\">// 引用远程服务</span>\nReferenceConfig&lt;XxxService&gt; reference = <span class=\"hljs-keyword\">new</span> ReferenceConfig&lt;XxxService&gt;(); <span class=\"hljs-comment\">// 此实例很重，封装了与注册中心的连接以及与提供者的连接，请自行缓存，否则可能造成内存和连接泄漏</span>\nreference.setApplication(application);\nreference.setRegistry(registry); <span class=\"hljs-comment\">// 多个注册中心可以用setRegistries()</span>\nreference.setInterface(XxxService.class);\nreference.setVersion(<span class=\"hljs-string\">\"1.0.0\"</span>);\n \n<span class=\"hljs-comment\">// 和本地bean一样使用xxxService</span>\nXxxService xxxService = reference.get(); <span class=\"hljs-comment\">// 注意：此代理对象内部封装了所有通讯细节，对象较重，请缓存复用</span>\n</code></pre>\n<h2>特殊场景</h2>\n<p>下面只列出不同的地方，其它参见上面的写法</p>\n<h3>方法级设置</h3>\n<pre><code class=\"language-java\">...\n \n<span class=\"hljs-comment\">// 方法级配置</span>\nList&lt;MethodConfig&gt; methods = <span class=\"hljs-keyword\">new</span> ArrayList&lt;MethodConfig&gt;();\nMethodConfig method = <span class=\"hljs-keyword\">new</span> MethodConfig();\nmethod.setName(<span class=\"hljs-string\">\"createXxx\"</span>);\nmethod.setTimeout(<span class=\"hljs-number\">10000</span>);\nmethod.setRetries(<span class=\"hljs-number\">0</span>);\nmethods.add(method);\n \n<span class=\"hljs-comment\">// 引用远程服务</span>\nReferenceConfig&lt;XxxService&gt; reference = <span class=\"hljs-keyword\">new</span> ReferenceConfig&lt;XxxService&gt;(); <span class=\"hljs-comment\">// 此实例很重，封装了与注册中心的连接以及与提供者的连接，请自行缓存，否则可能造成内存和连接泄漏</span>\n...\nreference.setMethods(methods); <span class=\"hljs-comment\">// 设置方法级配置</span>\n \n...\n</code></pre>\n<h3>点对点直连</h3>\n<pre><code class=\"language-java\">\n...\n \nReferenceConfig&lt;XxxService&gt; reference = <span class=\"hljs-keyword\">new</span> ReferenceConfig&lt;XxxService&gt;(); <span class=\"hljs-comment\">// 此实例很重，封装了与注册中心的连接以及与提供者的连接，请自行缓存，否则可能造成内存和连接泄漏</span>\n<span class=\"hljs-comment\">// 如果点对点直连，可以用reference.setUrl()指定目标地址，设置url后将绕过注册中心，</span>\n<span class=\"hljs-comment\">// 其中，协议对应provider.setProtocol()的值，端口对应provider.setPort()的值，</span>\n<span class=\"hljs-comment\">// 路径对应service.setPath()的值，如果未设置path，缺省path为接口名</span>\nreference.setUrl(<span class=\"hljs-string\">\"dubbo://10.20.130.230:20880/com.xxx.XxxService\"</span>); \n \n...\n</code></pre>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>API使用范围说明：API 仅用于 OpenAPI, ESB, Test, Mock 等系统集成，普通服务提供方或消费方，请采用<a href=\"../configuration/xml.md\">XML 配置</a>方式使用 Dubbo <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
  "link": "/zh-cn/docs/user/configuration/api.html",
  "meta": {}
}