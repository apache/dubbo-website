{
  "filename": "config-center.md",
  "__html": "<h1>动态配置中心</h1>\n<p>配置中心（v2.7.0）在Dubbo中承担两个职责：</p>\n<ol>\n<li>外部化配置。启动配置的集中式存储 （简单理解为dubbo.properties的外部化存储）。</li>\n<li>服务治理。服务治理规则的存储与通知。</li>\n</ol>\n<p>启用动态配置（以Zookeeper为例，可查看<a href=\"../references/xml/dubbo-config-center.md\">动态配置配置项详解</a>）：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:config-center</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"zookeeper://127.0.0.1:2181\"</span>/&gt;</span>\n</code></pre>\n<p>或者</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-meta\">dubbo.configCenter.address</span>=<span class=\"hljs-string\">zookeeper://127.0.0.1:2181</span>\n</code></pre>\n<p>或者</p>\n<pre><code class=\"language-java\">ConfigCenterConfig configCenter = <span class=\"hljs-keyword\">new</span> ConfigCenterConfig();\nconfigCenter.setAddress(<span class=\"hljs-string\">\"zookeeper://127.0.0.1:2181\"</span>);\n</code></pre>\n<blockquote>\n<p>为了兼容2.6.x版本配置，在使用Zookeeper作为注册中心，且没有显示配置配置中心的情况下，Dubbo框架会默认将此Zookeeper用作配置中心，但将只作服务治理用途。</p>\n</blockquote>\n<h2>外部化配置</h2>\n<p>外部化配置目的之一是实现配置的集中式管理，这部分业界已经有很多成熟的专业配置系统如Apollo, Nacos等，Dubbo所做的主要是保证能配合这些系统正常工作。</p>\n<p>外部化配置和其他本地配置在内容和格式上并无区别，可以简单理解为<code>dubbo.properties</code>的外部化存储，配置中心更适合将一些公共配置如注册中心、元数据中心配置等抽取以便做集中管理。</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\"># 将注册中心地址、元数据中心地址等配置集中管理，可以做到统一环境、减少开发侧感知。</span>\n<span class=\"hljs-meta\">dubbo.registry.address</span>=<span class=\"hljs-string\">zookeeper://127.0.0.1:2181</span>\n<span class=\"hljs-meta\">dubbo.registry.simplified</span>=<span class=\"hljs-string\">true</span>\n\n<span class=\"hljs-meta\">dubbo.metadataReport.address</span>=<span class=\"hljs-string\">zookeeper://127.0.0.1:2181</span>\n\n<span class=\"hljs-meta\">dubbo.protocol.name</span>=<span class=\"hljs-string\">dubbo</span>\n<span class=\"hljs-meta\">dubbo.protocol.port</span>=<span class=\"hljs-string\">20880</span>\n\n<span class=\"hljs-meta\">dubbo.application.qos.port</span>=<span class=\"hljs-string\">33333</span>\n</code></pre>\n<ul>\n<li>优先级</li>\n</ul>\n<p>外部化配置默认较本地配置有更高的优先级，因此这里配置的内容会覆盖本地配置值，关于<a href=\"./configuration-load-process.md\">各配置形式间的覆盖关系</a>有单独一章说明，你也可通过以下选项调整配置中心的优先级：</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-meta\">-Ddubbo.configCenter.highestPriority</span>=<span class=\"hljs-string\">false</span>\n</code></pre>\n<ul>\n<li>作用域</li>\n</ul>\n<p>外部化配置有全局和应用两个级别，全局配置是所有应用共享的，应用级配置是由每个应用自己维护且只对自身可见的。</p>\n<p>当前已支持的扩展实现有Zookeeper、Apollo。</p>\n<h4>Zookeeper</h4>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:config-center</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"zookeeper://127.0.0.1:2181\"</span>/&gt;</span>\n</code></pre>\n<p>默认所有的配置都存储在<code>/dubbo/config</code>节点，具体节点结构图如下：</p>\n<p><img src=\"/img/zk-configcenter.jpg\" alt=\"image-20190127225608553\"></p>\n<ul>\n<li>namespace，用于不同配置的环境隔离。</li>\n<li>config，Dubbo约定的固定节点，不可更改，所有配置和服务治理规则都存储在此节点下。</li>\n<li>dubbo/application，分别用来隔离全局配置、应用级别配置：dubbo是默认group值，application对应应用名</li>\n<li>dubbo.properties，此节点的node value存储具体配置内容</li>\n</ul>\n<h4>Apollo</h4>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:config-center</span> <span class=\"hljs-attr\">protocol</span>=<span class=\"hljs-string\">\"apollo\"</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"127.0.0.1:2181\"</span>/&gt;</span>\n</code></pre>\n<p>Apollo中的一个核心概念是命名空间 - namespace（和上面zookeeper的namespace概念不同），在这里全局和应用级别配置就是通过命名空间来区分的。</p>\n<p>默认情况下，Dubbo会从名叫<code>dubbo</code>的命名空间中读取全局配置（<code>&lt;dubbo:config-center namespace=&quot;your namespace&quot;&gt;</code>）</p>\n<p><img src=\"/img/apollo-configcenter-dubbo.jpg\" alt=\"image-20190128095444169\"></p>\n<p>而应用自有的配置，会从<code>application</code>命名空间读取</p>\n<p><img src=\"/img/apollo-configcenter-application.jpg\" alt=\"image-20190128095659517\"></p>\n<blockquote>\n<p>注意：当前dubbo.properties是作为一个key存储在Apollo namespace中，为更好的适应Apollo的设计理念，在接下来的版本中可能会调整为</p>\n<p><img src=\"/img/apollo-configcenter-enhance.jpg\" alt=\"image-20190128100058755\"></p>\n</blockquote>\n<h4>自己加载外部化配置</h4>\n<p>所谓Dubbo对配置中心的支持，本质上就是把<code>.properties</code>从远程拉取到本地，然后和本地的配置做一次融合。理论上只要Dubbo框架能拿到需要的配置就可以正常的启动，它并不关心这些配置是自己加载到的还是应用直接塞给它的，所以Dubbo还提供了以下API，让用户将自己组织好的配置塞给Dubbo框架（配置加载的过程是用户要完成的），这样Dubbo框架就不再直接和Apollo或Zookeeper做读取配置交互。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 应用自行加载配置</span>\nMap&lt;String, String&gt; dubboConfigurations = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();\ndubboConfigurations.put(<span class=\"hljs-string\">\"dubbo.registry.address\"</span>, <span class=\"hljs-string\">\"zookeeper://127.0.0.1:2181\"</span>);\ndubboConfigurations.put(<span class=\"hljs-string\">\"dubbo.registry.simplified\"</span>, <span class=\"hljs-string\">\"true\"</span>);\n\n<span class=\"hljs-comment\">//将组织好的配置塞给Dubbo框架</span>\nConfigCenterConfig configCenter = <span class=\"hljs-keyword\">new</span> ConfigCenterConfig();\nconfigCenter.setExternalConfig(dubboConfigurations);\n</code></pre>\n<h2>服务治理</h2>\n<h4>Zookeeper</h4>\n<p>默认节点结构：</p>\n<p><img src=\"/img/zk-configcenter-governance.jpg\" alt=\"image-20190128101129591\"></p>\n<ul>\n<li>namespace，用于不同配置的环境隔离。</li>\n<li>config，Dubbo约定的固定节点，不可更改，所有配置和服务治理规则都存储在此节点下。</li>\n<li>dubbo，所有服务治理规则都是全局性的，dubbo为默认节点</li>\n<li>configurators/tag-router/condition-router，不同的服务治理规则类型，node value存储具体规则内容</li>\n</ul>\n<h4>Apollo</h4>\n<p>所有的服务治理规则都是全局性的，默认从公共命名空间<code>dubbo</code>读取和订阅：</p>\n<p><img src=\"/img/apollo-configcenter-governance.jpg\" alt=\"image-20190128100600055\"></p>\n<p>不同的规则以不同的key后缀区分：</p>\n<ul>\n<li>configurators，<a href=\"../demos/config-rule.md\">覆盖规则</a></li>\n<li>tag-router，<a href=\"../demos/routing-rule.md\">标签路由</a></li>\n<li>condition-router，<a href=\"../demos/routing-rule.md\">条件路由</a></li>\n</ul>\n",
  "link": "/zh-cn/docs/user/configuration/config-center.html",
  "meta": {}
}