{
  "filename": "configuration-load-process.md",
  "__html": "<h1>配置加载流程</h1>\n<p>此篇文档主要讲在<strong>应用启动阶段，Dubbo框架如何将所需要的配置采集起来</strong>（包括应用配置、注册中心配置、服务配置等），以完成服务的暴露和引用流程。</p>\n<p>根据驱动方式的不同（比如Spring或裸API编程）配置形式上肯定会有所差异，具体请参考<a href=\"./xml.md\">XML配置</a>、<a href=\"./annotation.md\">Annotation配置</a>、<a href=\"./api.md\">API配置</a>三篇文档。除了外围驱动方式上的差异，Dubbo的配置读取总体上遵循了以下几个原则：</p>\n<ol>\n<li>Dubbo支持了多层级的配置，并按预定优先级自动实现配置间的覆盖，最终所有配置汇总到数据总线URL后驱动后续的服务暴露、引用等流程。</li>\n<li>ApplicationConfig、ServiceConfig、ReferenceConfig可以被理解成配置来源的一种，是直接面向用户编程的配置采集方式。</li>\n<li>配置格式以Properties为主，在配置内容上遵循约定的<code>path-based</code>的命名<a href=\"#%E9%85%8D%E7%BD%AE%E6%A0%BC%E5%BC%8F\">规范</a></li>\n</ol>\n<h2>配置来源</h2>\n<p>首先，从Dubbo支持的配置来源说起，默认有四种配置来源：</p>\n<ul>\n<li>JVM System Properties，-D参数</li>\n<li>Externalized Configuration，外部化配置</li>\n<li>ServiceConfig、ReferenceConfig等编程接口采集的配置</li>\n<li>本地配置文件dubbo.properties</li>\n</ul>\n<h3>覆盖关系</h3>\n<p>下图展示了配置覆盖关系的优先级，从上到下优先级依次降低：</p>\n<p><img src=\"/img/blog/configuration.jpg\" alt=\"覆盖关系\"></p>\n<p>点此查看<a href=\"./config-center.md\">外部化配置详情</a></p>\n<h2>配置格式</h2>\n<p>目前Dubbo支持的所有配置都是<code>.properties</code>格式的，包括<code>-D</code>、<code>Externalized Configuration</code>等，<code>.properties</code>中的所有配置项遵循一种<code>path-based</code>的配置格式：</p>\n<pre><code class=\"language-properties\"># 应用级别\ndubbo.{config-type}[.{config-id}].{config-item}={config-item-value}\n# 服务级别\ndubbo.service.{interface-name}[.{method-name}].{config-item}={config-item-value}\ndubbo.reference.{interface-name}[.{method-name}].{config-item}={config-item-value}\n# 多配置项\ndubbo.{config-type}s.{config-id}.{config-item}={config-item-value}\n</code></pre>\n<ul>\n<li>应用级别</li>\n</ul>\n<pre><code class=\"language-properties\">dubbo.application.name=demo-provider\ndubbo.registry.address=zookeeper://127.0.0.1:2181\ndubbo.protocol.port=-1\n</code></pre>\n<ul>\n<li>服务级别</li>\n</ul>\n<pre><code class=\"language-properties\">dubbo.service.org.apache.dubbo.samples.api.DemoService.timeout=5000\ndubbo.reference.org.apache.dubbo.samples.api.DemoService.timeout=6000\ndubbo.reference.org.apache.dubbo.samples.api.DemoService.sayHello.timeout=7000\n</code></pre>\n<ul>\n<li>多配置项</li>\n</ul>\n<pre><code class=\"language-properties\">dubbo.registries.unit1.address=zookeeper://127.0.0.1:2181\ndubbo.registries.unit2.address=zookeeper://127.0.0.1:2182\n\ndubbo.protocols.dubbo.name=dubbo\ndubbo.protocols.dubbo.port=20880\ndubbo.protocols.hessian.name=hessian\ndubbo.protocols.hessian.port=8089\n</code></pre>\n<ul>\n<li>扩展配置</li>\n</ul>\n<pre><code class=\"language-properties\">dubbo.application.parameters.item1=value1\ndubbo.application.parameters.item2=value2\ndubbo.registry.parameters.item3=value3\ndubbo.reference.org.apache.dubbo.samples.api.DemoService.parameters.item4=value4\n</code></pre>\n<h2>几种编程配置方式</h2>\n<p>接下来，我们看一下选择不同的开发方式时，对应到<code>ServiceConfig、ReferenceConfig等编程接口采集的配置</code>的变化。</p>\n<h3>Spring</h3>\n<ul>\n<li>XML</li>\n</ul>\n<p>参见<a href=\"https://github.com/apache/dubbo-samples/tree/master/dubbo-samples-basic\">示例</a></p>\n<pre><code class=\"language-xml\">  <span class=\"hljs-comment\">&lt;!-- dubbo-provier.xml --&gt;</span>\n  \n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:application</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"demo-provider\"</span>/&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:config-center</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"zookeeper://127.0.0.1:2181\"</span>/&gt;</span>\n  \n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"zookeeper://127.0.0.1:2181\"</span> <span class=\"hljs-attr\">simplified</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:metadata-report</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"redis://127.0.0.1:6379\"</span>/&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:protocol</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo\"</span> <span class=\"hljs-attr\">port</span>=<span class=\"hljs-string\">\"20880\"</span>/&gt;</span>\n  \n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"demoService\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.apache.dubbo.samples.basic.impl.DemoServiceImpl\"</span>/&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"org.apache.dubbo.samples.basic.api.DemoService\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"demoService\"</span>/&gt;</span>\n</code></pre>\n<ul>\n<li>Annotation</li>\n</ul>\n<p>参见<a href=\"https://github.com/apache/dubbo-samples/tree/master/dubbo-samples-annotation\">示例</a></p>\n<pre><code class=\"language-java\">  <span class=\"hljs-comment\">// AnnotationService服务实现</span>\n  \n  <span class=\"hljs-meta\">@Service</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AnnotationServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">AnnotationService</span> </span>{\n      <span class=\"hljs-meta\">@Override</span>\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(String name)</span> </span>{\n          System.out.println(<span class=\"hljs-string\">\"async provider received: \"</span> + name);\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"annotation: hello, \"</span> + name;\n      }\n  }\n</code></pre>\n<pre><code class=\"language-properties\">  ## dubbo.properties\n  \n  dubbo.application.name=annotation-provider\n  dubbo.registry.address=zookeeper://127.0.0.1:2181\n  dubbo.protocol.name=dubbo\n  dubbo.protocol.port=20880\n</code></pre>\n<ul>\n<li>Spring Boot</li>\n</ul>\n<p>参见<a href=\"https://github.com/apache/dubbo-spring-boot-project/tree/master/dubbo-spring-boot-samples\">示例</a></p>\n<pre><code class=\"language-properties\">  ## application.properties\n  \n  # Spring boot application\n  spring.application.name=dubbo-externalized-configuration-provider-sample\n  \n  # Base packages to scan Dubbo Component: @com.alibaba.dubbo.config.annotation.Service\n  dubbo.scan.base-packages=com.alibaba.boot.dubbo.demo.provider.service\n  \n  # Dubbo Application\n  ## The default value of dubbo.application.name is ${spring.application.name}\n  ## dubbo.application.name=${spring.application.name}\n  \n  # Dubbo Protocol\n  dubbo.protocol.name=dubbo\n  dubbo.protocol.port=12345\n  \n  ## Dubbo Registry\n  dubbo.registry.address=N/A\n  \n  ## DemoService version\n  demo.service.version=1.0.0\n</code></pre>\n<h3>API</h3>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>{\n    ServiceConfig&lt;GreetingsService&gt; service = <span class=\"hljs-keyword\">new</span> ServiceConfig&lt;&gt;();\n    service.setApplication(<span class=\"hljs-keyword\">new</span> ApplicationConfig(<span class=\"hljs-string\">\"first-dubbo-provider\"</span>));\n    service.setRegistry(<span class=\"hljs-keyword\">new</span> RegistryConfig(<span class=\"hljs-string\">\"multicast://224.5.6.7:1234\"</span>));\n    service.setInterface(GreetingsService.class);\n    service.setRef(<span class=\"hljs-keyword\">new</span> GreetingsServiceImpl());\n    service.export();\n    System.out.println(<span class=\"hljs-string\">\"first-dubbo-provider is running.\"</span>);\n    System.in.read();\n}\n</code></pre>\n<p>参考<a href=\"https://github.com/apache/dubbo-samples/tree/master/dubbo-samples-api\">示例</a></p>\n",
  "link": "/zh-cn/docs/user/configuration/configuration-load-process.html",
  "meta": {}
}