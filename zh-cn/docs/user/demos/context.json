{
  "filename": "context.md",
  "__html": "<h1>上下文信息</h1>\n<p>上下文中存放的是当前调用过程中所需的环境信息。所有配置信息都将转换为 URL 的参数，参见 <a href=\"../references/xml/introduction.md\">schema 配置参考手册</a> 中的<strong>对应URL参数</strong>一列。</p>\n<p>RpcContext 是一个 ThreadLocal 的临时状态记录器，当接收到 RPC 请求，或发起 RPC 请求时，RpcContext 的状态都会变化。比如：A 调 B，B 再调 C，则 B 机器上，在 B 调 C 之前，RpcContext 记录的是 A 调 B 的信息，在 B 调 C 之后，RpcContext 记录的是 B 调 C 的信息。</p>\n<h2>服务消费方</h2>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 远程调用</span>\nxxxService.xxx();\n<span class=\"hljs-comment\">// 本端是否为消费端，这里会返回true</span>\n<span class=\"hljs-keyword\">boolean</span> isConsumerSide = RpcContext.getContext().isConsumerSide();\n<span class=\"hljs-comment\">// 获取最后一次调用的提供方IP地址</span>\nString serverIP = RpcContext.getContext().getRemoteHost();\n<span class=\"hljs-comment\">// 获取当前服务配置信息，所有配置信息都将转换为URL的参数</span>\nString application = RpcContext.getContext().getUrl().getParameter(<span class=\"hljs-string\">\"application\"</span>);\n<span class=\"hljs-comment\">// 注意：每发起RPC调用，上下文状态会变化</span>\nyyyService.yyy();\n</code></pre>\n<h2>服务提供方</h2>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">XxxServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">XxxService</span> </span>{\n \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">xxx</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-comment\">// 本端是否为提供端，这里会返回true</span>\n        <span class=\"hljs-keyword\">boolean</span> isProviderSide = RpcContext.getContext().isProviderSide();\n        <span class=\"hljs-comment\">// 获取调用方IP地址</span>\n        String clientIP = RpcContext.getContext().getRemoteHost();\n        <span class=\"hljs-comment\">// 获取当前服务配置信息，所有配置信息都将转换为URL的参数</span>\n        String application = RpcContext.getContext().getUrl().getParameter(<span class=\"hljs-string\">\"application\"</span>);\n        <span class=\"hljs-comment\">// 注意：每发起RPC调用，上下文状态会变化</span>\n        yyyService.yyy();\n        <span class=\"hljs-comment\">// 此时本端变成消费端，这里会返回false</span>\n        <span class=\"hljs-keyword\">boolean</span> isProviderSide = RpcContext.getContext().isProviderSide();\n    } \n}\n</code></pre>\n"
}