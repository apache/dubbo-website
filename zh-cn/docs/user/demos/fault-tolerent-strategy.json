{
  "filename": "fault-tolerent-strategy.md",
  "__html": "<h1>集群容错</h1>\n<p>在集群调用失败时，Dubbo 提供了多种容错方案，缺省为 failover 重试。</p>\n<p><img src=\"../sources/images/cluster.jpg\" alt=\"cluster\"></p>\n<p>各节点关系：</p>\n<ul>\n<li>这里的 <code>Invoker</code> 是 <code>Provider</code> 的一个可调用 <code>Service</code> 的抽象，<code>Invoker</code> 封装了 <code>Provider</code> 地址及 <code>Service</code> 接口信息</li>\n<li><code>Directory</code> 代表多个 <code>Invoker</code>，可以把它看成 <code>List&lt;Invoker&gt;</code> ，但与 <code>List</code> 不同的是，它的值可能是动态变化的，比如注册中心推送变更</li>\n<li><code>Cluster</code> 将 <code>Directory</code> 中的多个 <code>Invoker</code> 伪装成一个 <code>Invoker</code>，对上层透明，伪装过程包含了容错逻辑，调用失败后，重试另一个</li>\n<li><code>Router</code> 负责从多个 <code>Invoker</code> 中按路由规则选出子集，比如读写分离，应用隔离等</li>\n<li><code>LoadBalance</code> 负责从多个 <code>Invoker</code> 中选出具体的一个用于本次调用，选的过程包含了负载均衡算法，调用失败后，需要重选</li>\n</ul>\n<h2>集群容错模式</h2>\n<p>可以自行扩展集群容错策略，参见：<a href=\"../../dev/impls/load-balance.md\">集群扩展</a></p>\n<h3>Failover Cluster</h3>\n<p>失败自动切换，当出现失败，重试其它服务器 <sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>。通常用于读操作，但重试会带来更长延迟。可通过 <code>retries=&quot;2&quot;</code> 来设置重试次数(不含第一次)。</p>\n<p>重试次数配置如下：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">retries</span>=<span class=\"hljs-string\">\"2\"</span> /&gt;</span>\n</code></pre>\n<p>或</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:reference</span> <span class=\"hljs-attr\">retries</span>=<span class=\"hljs-string\">\"2\"</span> /&gt;</span>\n</code></pre>\n<p>或</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:reference</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:method</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"findFoo\"</span> <span class=\"hljs-attr\">retries</span>=<span class=\"hljs-string\">\"2\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dubbo:reference</span>&gt;</span>\n</code></pre>\n<h3>Failfast Cluster</h3>\n<p>快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。</p>\n<h3>Failsafe Cluster</h3>\n<p>失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。</p>\n<h3>Failback Cluster</h3>\n<p>失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</p>\n<h3>Forking Cluster</h3>\n<p>并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过 <code>forks=&quot;2&quot;</code> 来设置最大并行数。</p>\n<h3>Broadcast Cluster</h3>\n<p>广播调用所有提供者，逐个调用，任意一台报错则报错 <sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup>。通常用于通知所有提供者更新缓存或日志等本地资源信息。</p>\n<h2>集群模式配置</h2>\n<p>按照以下示例在服务提供方和消费方配置集群模式</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">cluster</span>=<span class=\"hljs-string\">\"failsafe\"</span> /&gt;</span>\n</code></pre>\n<p>或</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:reference</span> <span class=\"hljs-attr\">cluster</span>=<span class=\"hljs-string\">\"failsafe\"</span> /&gt;</span>\n</code></pre>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>该配置为缺省配置 <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p><code>2.1.0</code> 开始支持 <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n"
}