{
  "filename": "generic-reference.md",
  "__html": "<h1>使用泛化调用</h1>\n<p>泛化接口调用方式主要用于客户端没有 API 接口及模型类元的情况，参数及返回值中的所有 POJO 均用 <code>Map</code> 表示，通常用于框架集成，比如：实现一个通用的服务测试框架，可通过 <code>GenericService</code> 调用所有服务实现。</p>\n<h2>通过 Spring 使用泛化调用</h2>\n<p>在 Spring 配置申明 <code>generic=&quot;true&quot;</code>：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:reference</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"barService\"</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"com.foo.BarService\"</span> <span class=\"hljs-attr\">generic</span>=<span class=\"hljs-string\">\"true\"</span> /&gt;</span>\n</code></pre>\n<p>在 Java 代码获取 barService 并开始泛化调用：</p>\n<pre><code class=\"language-java\">GenericService barService = (GenericService) applicationContext.getBean(<span class=\"hljs-string\">\"barService\"</span>);\nObject result = barService.$invoke(<span class=\"hljs-string\">\"sayHello\"</span>, <span class=\"hljs-keyword\">new</span> String[] { <span class=\"hljs-string\">\"java.lang.String\"</span> }, <span class=\"hljs-keyword\">new</span> Object[] { <span class=\"hljs-string\">\"World\"</span> });\n</code></pre>\n<h2>通过 API 方式使用泛化调用</h2>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">import</span> com.alibaba.dubbo.rpc.service.GenericService; \n... \n \n<span class=\"hljs-comment\">// 引用远程服务 </span>\n<span class=\"hljs-comment\">// 该实例很重量，里面封装了所有与注册中心及服务提供方连接，请缓存</span>\nReferenceConfig&lt;GenericService&gt; reference = <span class=\"hljs-keyword\">new</span> ReferenceConfig&lt;GenericService&gt;(); \n<span class=\"hljs-comment\">// 弱类型接口名</span>\nreference.setInterface(<span class=\"hljs-string\">\"com.xxx.XxxService\"</span>);  \nreference.setVersion(<span class=\"hljs-string\">\"1.0.0\"</span>);\n<span class=\"hljs-comment\">// 声明为泛化接口 </span>\nreference.setGeneric(<span class=\"hljs-keyword\">true</span>);  \n\n<span class=\"hljs-comment\">// 用com.alibaba.dubbo.rpc.service.GenericService可以替代所有接口引用  </span>\nGenericService genericService = reference.get(); \n \n<span class=\"hljs-comment\">// 基本类型以及Date,List,Map等不需要转换，直接调用 </span>\nObject result = genericService.$invoke(<span class=\"hljs-string\">\"sayHello\"</span>, <span class=\"hljs-keyword\">new</span> String[] {<span class=\"hljs-string\">\"java.lang.String\"</span>}, <span class=\"hljs-keyword\">new</span> Object[] {<span class=\"hljs-string\">\"world\"</span>}); \n \n<span class=\"hljs-comment\">// 用Map表示POJO参数，如果返回值为POJO也将自动转成Map </span>\nMap&lt;String, Object&gt; person = <span class=\"hljs-keyword\">new</span> HashMap&lt;String, Object&gt;(); \nperson.put(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-string\">\"xxx\"</span>); \nperson.put(<span class=\"hljs-string\">\"password\"</span>, <span class=\"hljs-string\">\"yyy\"</span>); \n<span class=\"hljs-comment\">// 如果返回POJO将自动转成Map </span>\nObject result = genericService.$invoke(<span class=\"hljs-string\">\"findPerson\"</span>, <span class=\"hljs-keyword\">new</span> String[]\n{<span class=\"hljs-string\">\"com.xxx.Person\"</span>}, <span class=\"hljs-keyword\">new</span> Object[]{person}); \n \n...\n</code></pre>\n<h2>有关泛化类型的进一步解释</h2>\n<p>假设存在 POJO 如：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.xxx;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PersonImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Person</span> </span>{\n    <span class=\"hljs-keyword\">private</span> String name;\n    <span class=\"hljs-keyword\">private</span> String password;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> name;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setName</span><span class=\"hljs-params\">(String name)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.name = name;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getPassword</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> password;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setPassword</span><span class=\"hljs-params\">(String password)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.password = password;\n    }\n}\n</code></pre>\n<p>则 POJO 数据：</p>\n<pre><code class=\"language-java\">Person person = <span class=\"hljs-keyword\">new</span> PersonImpl(); \nperson.setName(<span class=\"hljs-string\">\"xxx\"</span>); \nperson.setPassword(<span class=\"hljs-string\">\"yyy\"</span>);\n</code></pre>\n<p>可用下面 Map 表示：</p>\n<pre><code class=\"language-java\">Map&lt;String, Object&gt; map = <span class=\"hljs-keyword\">new</span> HashMap&lt;String, Object&gt;(); \n<span class=\"hljs-comment\">// 注意：如果参数类型是接口，或者List等丢失泛型，可通过class属性指定类型。</span>\nmap.put(<span class=\"hljs-string\">\"class\"</span>, <span class=\"hljs-string\">\"com.xxx.PersonImpl\"</span>); \nmap.put(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-string\">\"xxx\"</span>); \nmap.put(<span class=\"hljs-string\">\"password\"</span>, <span class=\"hljs-string\">\"yyy\"</span>);\n</code></pre>\n",
  "link": "/zh-cn/docs/user/demos/generic-reference.html",
  "meta": {}
}