{
  "filename": "generic-service.md",
  "__html": "<h1>实现泛化调用</h1>\n<p>泛接口实现方式主要用于服务器端没有API接口及模型类元的情况，参数及返回值中的所有POJO均用Map表示，通常用于框架集成，比如：实现一个通用的远程服务Mock框架，可通过实现GenericService接口处理所有服务请求。</p>\n<p>在 Java 代码中实现 <code>GenericService</code> 接口：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.foo;\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyGenericService</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">GenericService</span> </span>{\n \n    <span class=\"hljs-keyword\">public</span> Object $invoke(String methodName, String[] parameterTypes, Object[] args) <span class=\"hljs-keyword\">throws</span> GenericException {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">\"sayHello\"</span>.equals(methodName)) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Welcome \"</span> + args[<span class=\"hljs-number\">0</span>];\n        }\n    }\n}\n</code></pre>\n<h2>通过 Spring 暴露泛化实现</h2>\n<p>在 Spring 配置申明服务的实现：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"genericService\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.foo.MyGenericService\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"com.foo.BarService\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"genericService\"</span> /&gt;</span>\n</code></pre>\n<h2>通过 API 方式暴露泛化实现</h2>\n<pre><code class=\"language-java\">... \n<span class=\"hljs-comment\">// 用com.alibaba.dubbo.rpc.service.GenericService可以替代所有接口实现 </span>\nGenericService xxxService = <span class=\"hljs-keyword\">new</span> XxxGenericService(); \n\n<span class=\"hljs-comment\">// 该实例很重量，里面封装了所有与注册中心及服务提供方连接，请缓存 </span>\nServiceConfig&lt;GenericService&gt; service = <span class=\"hljs-keyword\">new</span> ServiceConfig&lt;GenericService&gt;();\n<span class=\"hljs-comment\">// 弱类型接口名 </span>\nservice.setInterface(<span class=\"hljs-string\">\"com.xxx.XxxService\"</span>);  \nservice.setVersion(<span class=\"hljs-string\">\"1.0.0\"</span>); \n<span class=\"hljs-comment\">// 指向一个通用服务实现 </span>\nservice.setRef(xxxService); \n \n<span class=\"hljs-comment\">// 暴露及注册服务 </span>\nservice.export();\n</code></pre>\n"
}