{
  "filename": "serialization.md",
  "__html": "<h1>在Dubbo中使用高效的Java序列化（Kryo和FST）</h1>\n<h2>启用Kryo和FST</h2>\n<p>使用Kryo和FST非常简单，只需要在dubbo RPC的XML配置中添加一个属性即可：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:protocol</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo\"</span> <span class=\"hljs-attr\">serialization</span>=<span class=\"hljs-string\">\"kryo\"</span>/&gt;</span>\n</code></pre>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:protocol</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo\"</span> <span class=\"hljs-attr\">serialization</span>=<span class=\"hljs-string\">\"fst\"</span>/&gt;</span>\n</code></pre>\n<h2>注册被序列化类</h2>\n<p>要让Kryo和FST完全发挥出高性能，最好将那些需要被序列化的类注册到dubbo系统中，例如，我们可以实现如下回调接口：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SerializationOptimizerImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">SerializationOptimizer</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Collection&lt;Class&gt; <span class=\"hljs-title\">getSerializableClasses</span><span class=\"hljs-params\">()</span> </span>{\n        List&lt;Class&gt; classes = <span class=\"hljs-keyword\">new</span> LinkedList&lt;Class&gt;();\n        classes.add(BidRequest.class);\n        classes.add(BidResponse.class);\n        classes.add(Device.class);\n        classes.add(Geo.class);\n        classes.add(Impression.class);\n        classes.add(SeatBid.class);\n        <span class=\"hljs-keyword\">return</span> classes;\n    }\n}\n</code></pre>\n<p>然后在XML配置中添加：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:protocol</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo\"</span> <span class=\"hljs-attr\">serialization</span>=<span class=\"hljs-string\">\"kryo\"</span> <span class=\"hljs-attr\">optimizer</span>=<span class=\"hljs-string\">\"com.alibaba.dubbo.demo.SerializationOptimizerImpl\"</span>/&gt;</span>\n</code></pre>\n<p>在注册这些类后，序列化的性能可能被大大提升，特别针对小数量的嵌套对象的时候。</p>\n<p>当然，在对一个类做序列化的时候，可能还级联引用到很多类，比如Java集合类。针对这种情况，我们已经自动将JDK中的常用类进行了注册，所以你不需要重复注册它们（当然你重复注册了也没有任何影响），包括：</p>\n<pre><code>GregorianCalendar\nInvocationHandler\nBigDecimal\nBigInteger\nPattern\nBitSet\nURI\nUUID\nHashMap\nArrayList\nLinkedList\nHashSet\nTreeSet\nHashtable\nDate\nCalendar\nConcurrentHashMap\nSimpleDateFormat\nVector\nBitSet\nStringBuffer\nStringBuilder\nObject\nObject[]\nString[]\nbyte[]\nchar[]\nint[]\nfloat[]\ndouble[]\n</code></pre>\n<p>由于注册被序列化的类仅仅是出于性能优化的目的，所以即使你忘记注册某些类也没有关系。事实上，即使不注册任何类，Kryo和FST的性能依然普遍优于hessian和dubbo序列化。</p>\n"
}