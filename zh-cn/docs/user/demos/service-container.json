{
  "filename": "service-container.md",
  "__html": "<h1>服务容器</h1>\n<p>服务容器是一个 standalone 的启动程序，因为后台服务不需要 Tomcat 或 JBoss 等 Web 容器的功能，如果硬要用 Web 容器去加载服务提供方，增加复杂性，也浪费资源。</p>\n<p>服务容器只是一个简单的 Main 方法，并加载一个简单的 Spring 容器，用于暴露服务。</p>\n<p>服务容器的加载内容可以扩展，内置了 spring, jetty, log4j 等加载，可通过<a href=\"http://dubbo.apache.org/books/dubbo-dev-book/impls/container.html\">容器扩展点</a>进行扩展。配置配在 java 命令的 -D 参数或者 <code>dubbo.properties</code> 中。</p>\n<h2>容器类型</h2>\n<h3>Spring Container</h3>\n<ul>\n<li>\n<p>自动加载 <code>META-INF/spring</code> 目录下的所有 Spring 配置。</p>\n</li>\n<li>\n<p>配置 spring 配置加载位置：</p>\n<pre><code class=\"language-properties\"></code></pre>\n</li>\n</ul>\n<p>dubbo.spring.config=classpath*:META-INF/spring/*.xml</p>\n<pre><code>\n### Jetty Container\n\n* 启动一个内嵌 Jetty，用于汇报状态。\n* 配置：\n    * `dubbo.jetty.port=8080`：配置 jetty 启动端口\n    * `dubbo.jetty.directory=/foo/bar`：配置可通过 jetty 直接访问的目录，用于存放静态文件\n    * `dubbo.jetty.page=log,status,system`：配置显示的页面，缺省加载所有页面\n\n\n### Log4j Container\n\n* 自动配置 log4j 的配置，在多进程启动时，自动给日志文件按进程分目录。\n* 配置：\n    * `dubbo.log4j.file=/foo/bar.log`：配置日志文件路径\n    * `dubbo.log4j.level=WARN`：配置日志级别\n    * `dubbo.log4j.subdirectory=20880`：配置日志子目录，用于多进程启动，避免冲突\n\n## 容器启动\n\n缺省只加载 spring\n\n```sh\njava com.alibaba.dubbo.container.Main\n</code></pre>\n<p>通过 main 函数参数传入要加载的容器</p>\n<pre><code class=\"language-sh\">java com.alibaba.dubbo.container.Main spring jetty log4j\n</code></pre>\n<p>通过 JVM 启动参数传入要加载的容器</p>\n<pre><code class=\"language-sh\">java com.alibaba.dubbo.container.Main -Ddubbo.container=spring,jetty,log4j\n</code></pre>\n<p>通过 classpath 下的 <code>dubbo.properties</code> 配置传入要加载的容器</p>\n<pre><code>dubbo.container=spring,jetty,log4j\n</code></pre>\n"
}