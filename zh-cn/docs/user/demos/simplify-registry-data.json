{
  "filename": "simplify-registry-data.md",
  "__html": "<h1>背景</h1>\n<p>dubbo provider中的服务配置项有接近<a href=\"http://dubbo.apache.org/en-us/docs/user/references/xml/dubbo-service.html\">30个配置项</a>。 排除注册中心服务治理需要之外，很大一部分配置项是provider自己使用，不需要透传给消费者。这部分数据不需要进入注册中心，而只需要以key-value形式持久化存储。</p>\n<p>dubbo consumer中的配置项也有<a href=\"http://dubbo.apache.org/en-us/docs/user/references/xml/dubbo-reference.html\">20+个配置项</a>。在注册中心之中，服务消费者列表中只需要关注application，version，group，ip，dubbo版本等少量配置，其他配置也可以以key-value形式持久化存储。</p>\n<p>这些数据是以服务为维度注册进入注册中心，导致了数据量的膨胀，进而引发注册中心(如zookeeper)的网络开销增大，性能降低。</p>\n<h3>现有功能sample</h3>\n<p>当前现状一个简单展示。通过这个展示，分析下为什么需要做简化配置。</p>\n<p>参考sample子工程： dubbo-samples-simplified-registry/dubbo-samples-simplified-registry-nosimple （跑sample前，先跑下ZKClean进行配置项清理）</p>\n<h6>dubbo-provider.xml配置</h6>\n<pre><code>&lt;dubbo:application name=&quot;simplified-registry-nosimple-provider&quot;/&gt;\n&lt;dubbo:registry address=&quot;zookeeper://127.0.0.1:2181&quot;/&gt;\n&lt;bean id=&quot;demoService&quot; class=&quot;org.apache.dubbo.samples.simplified.registry.nosimple.impl.DemoServiceImpl&quot;/&gt;\n&lt;dubbo:service async=&quot;true&quot; interface=&quot;org.apache.dubbo.samples.simplified.registry.nosimple.api.DemoService&quot; \n               version=&quot;1.2.3&quot; group=&quot;dubbo-simple&quot; ref=&quot;demoService&quot; \n               executes=&quot;4500&quot; retries=&quot;7&quot; owner=&quot;vict&quot; timeout=&quot;5300&quot;/&gt;\n</code></pre>\n<p>启动provider的main方法之后，查看zookeeper的叶子节点（路径为：/dubbo/org.apache.dubbo.samples.simplified.registry.nosimple.api.DemoService/providers目录下）的内容如下：</p>\n<p>dubbo%3A%2F%2F30.5.124.158%3A20880%2Forg.apache.dubbo.samples.simplified.registry.nosimple.api.DemoService%3Fanyhost%3Dtrue%26application%3Dsimplified-registry-xml-provider%26async%3Dtrue%26dubbo%3D2.0.2%26<strong>executes</strong>%3D4500%26generic%3Dfalse%26group%3Ddubbo-simple%26interface%3Dorg.apache.dubbo.samples.simplified.registry.nosimple.api.DemoService%26methods%3DsayHello%26<strong>owner</strong>%3Dvict%26pid%3D2767%26<strong>retries</strong>%3D7%26revision%3D1.2.3%26side%3Dprovider%26<strong>timeout</strong>%3D5300%26timestamp%3D1542361152795%26valid%3Dtrue%26version%3D1.2.3</p>\n<p>从加粗字体中能看到有：executes, retries, owner, timeout. 但是这些字段不是每个都需要传递给dubbo ops或者dubbo consumer。\n同样的，consumer也有这个问题，可以在例子中启动Consumer的main方法进行查看。</p>\n<h1>设计目标和宗旨</h1>\n<p>期望简化进入注册中心的provider和consumer配置数量。\n期望将部分配置项以其他形式存储。这些配置项需要满足：不在服务调用链路上，同时这些配置项不在注册中心的核心链路上(服务查询，服务列表)。</p>\n<h1>配置</h1>\n<p>简化注册中心的配置，只在2.7之后的版本中进行支持。\n开启provider或者consumer简化配置之后，默认保留的配置项如下：</p>\n<p>provider：</p>\n<table>\n<thead>\n<tr>\n<th>Constant Key</th>\n<th>Key</th>\n<th>remark</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>APPLICATION_KEY</td>\n<td>application</td>\n<td></td>\n</tr>\n<tr>\n<td>CODEC_KEY</td>\n<td>codec</td>\n<td></td>\n</tr>\n<tr>\n<td>EXCHANGER_KEY</td>\n<td>exchanger</td>\n<td></td>\n</tr>\n<tr>\n<td>SERIALIZATION_KEY</td>\n<td>serialization</td>\n<td></td>\n</tr>\n<tr>\n<td>CLUSTER_KEY</td>\n<td>cluster</td>\n<td></td>\n</tr>\n<tr>\n<td>CONNECTIONS_KEY</td>\n<td>connections</td>\n<td></td>\n</tr>\n<tr>\n<td>DEPRECATED_KEY</td>\n<td>deprecated</td>\n<td></td>\n</tr>\n<tr>\n<td>GROUP_KEY</td>\n<td>group</td>\n<td></td>\n</tr>\n<tr>\n<td>LOADBALANCE_KEY</td>\n<td>loadbalance</td>\n<td></td>\n</tr>\n<tr>\n<td>MOCK_KEY</td>\n<td>mock</td>\n<td></td>\n</tr>\n<tr>\n<td>PATH_KEY</td>\n<td>path</td>\n<td></td>\n</tr>\n<tr>\n<td>TIMEOUT_KEY</td>\n<td>timeout</td>\n<td></td>\n</tr>\n<tr>\n<td>TOKEN_KEY</td>\n<td>token</td>\n<td></td>\n</tr>\n<tr>\n<td>VERSION_KEY</td>\n<td>version</td>\n<td></td>\n</tr>\n<tr>\n<td>WARMUP_KEY</td>\n<td>warmup</td>\n<td></td>\n</tr>\n<tr>\n<td>WEIGHT_KEY</td>\n<td>weight</td>\n<td></td>\n</tr>\n<tr>\n<td>TIMESTAMP_KEY</td>\n<td>timestamp</td>\n<td></td>\n</tr>\n<tr>\n<td>DUBBO_VERSION_KEY</td>\n<td>dubbo</td>\n<td></td>\n</tr>\n<tr>\n<td>SPECIFICATION_VERSION_KEY</td>\n<td><strong>specVersion</strong></td>\n<td>新增，用于表述dubbo版本，如2.7.0</td>\n</tr>\n</tbody>\n</table>\n<p>consumer：</p>\n<table>\n<thead>\n<tr>\n<th>Constant Key</th>\n<th>Key</th>\n<th>remark</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>APPLICATION_KEY</td>\n<td>application</td>\n<td></td>\n</tr>\n<tr>\n<td>VERSION_KEY</td>\n<td>version</td>\n<td></td>\n</tr>\n<tr>\n<td>GROUP_KEY</td>\n<td>group</td>\n<td></td>\n</tr>\n<tr>\n<td>DUBBO_VERSION_KEY</td>\n<td>dubbo</td>\n<td></td>\n</tr>\n<tr>\n<td>SPECIFICATION_VERSION_KEY</td>\n<td><strong>specVersion</strong></td>\n<td>新增，用于表述dubbo版本，如2.7.0</td>\n</tr>\n</tbody>\n</table>\n<p>Constant Key表示来自于类org.apache.dubbo.common.Constants的字段。</p>\n<p>下面介绍几种常用的使用方式。所有的sample，都可以查看<a href=\"https://github.com/dubbo/dubbo-samples/tree/master\">sample-2.7</a></p>\n<h3>方式1. 配置dubbo.properties</h3>\n<p>sample在dubbo-samples-simplified-registry/dubbo-samples-simplified-registry-xml 工程下 （跑sample前，先跑下ZKClean进行配置项清理）</p>\n<p>dubbo.properties</p>\n<pre><code class=\"language-properties\">\n<span class=\"hljs-meta\">dubbo.registry.simplified</span>=<span class=\"hljs-string\">true</span>\n<span class=\"hljs-meta\">dubbo.registry.extra-keys</span>=<span class=\"hljs-string\">retries,owner</span>\n</code></pre>\n<p>怎么去验证呢？</p>\n<h5>provider端验证</h5>\n<p>provider端配置</p>\n<pre><code class=\"language-xml\">\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n       <span class=\"hljs-attr\">xmlns:dubbo</span>=<span class=\"hljs-string\">\"http://dubbo.apache.org/schema/dubbo\"</span>\n       <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd\n       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\"</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- optional --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:application</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"simplified-registry-xml-provider\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"zookeeper://127.0.0.1:2181\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"demoService\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.apache.dubbo.samples.simplified.registry.nosimple.impl.DemoServiceImpl\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">async</span>=<span class=\"hljs-string\">\"true\"</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"org.apache.dubbo.samples.simplified.registry.nosimple.api.DemoService\"</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">\"1.2.3\"</span> <span class=\"hljs-attr\">group</span>=<span class=\"hljs-string\">\"dubbo-simple\"</span>\n                   <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"demoService\"</span> <span class=\"hljs-attr\">executes</span>=<span class=\"hljs-string\">\"4500\"</span> <span class=\"hljs-attr\">retries</span>=<span class=\"hljs-string\">\"7\"</span> <span class=\"hljs-attr\">owner</span>=<span class=\"hljs-string\">\"vict\"</span> <span class=\"hljs-attr\">timeout</span>=<span class=\"hljs-string\">\"5300\"</span>/&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<p>得到的zookeeper的叶子节点的值如下：</p>\n<p>dubbo%3A%2F%2F30.5.124.149%3A20880%2Forg.apache.dubbo.samples.simplified.registry.nosimple.api.DemoService%3Fapplication%3Dsimplified-registry-xml-provider%26dubbo%3D2.0.2%26group%3Ddubbo-simple%26<strong>owner</strong>%3Dvict%26<strong>retries</strong>%3D7%26<strong>timeout</strong>%3D5300%26timestamp%3D1542594503305%26version%3D1.2.3</p>\n<p>和上面的<code>现有功能sample</code> 进行对比，上面的sample中，executes, retries, owner, timeout四个配置项都进入了注册中心。但是本实例不是：</p>\n<ul>\n<li>配置了：dubbo.registry.simplified=true， 默认情况下，timeout在默认的配置项列表，所以还是会进入注册中心；</li>\n<li>配置了：dubbo.registry.extra-keys=retries,owner ， 所以retries，owner也会进入注册中心。</li>\n</ul>\n<p>总结：timeout，retries,owner进入了注册中心，而executes没有进入。</p>\n<p>consumer端配置</p>\n<pre><code class=\"language-xml\">\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n       <span class=\"hljs-attr\">xmlns:dubbo</span>=<span class=\"hljs-string\">\"http://dubbo.apache.org/schema/dubbo\"</span>\n       <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\n       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd\n       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\"</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- optional --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:application</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"simplified-registry-xml-consumer\"</span>/&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"zookeeper://127.0.0.1:2181\"</span> <span class=\"hljs-attr\">username</span>=<span class=\"hljs-string\">\"xxx\"</span> <span class=\"hljs-attr\">password</span>=<span class=\"hljs-string\">\"yyy\"</span> <span class=\"hljs-attr\">check</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:reference</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"demoService\"</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"org.apache.dubbo.samples.simplified.registry.nosimple.api.DemoService\"</span>\n                     <span class=\"hljs-attr\">owner</span>=<span class=\"hljs-string\">\"vvv\"</span> <span class=\"hljs-attr\">retries</span>=<span class=\"hljs-string\">\"4\"</span> <span class=\"hljs-attr\">actives</span>=<span class=\"hljs-string\">\"6\"</span> <span class=\"hljs-attr\">timeout</span>=<span class=\"hljs-string\">\"4500\"</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">\"1.2.3\"</span> <span class=\"hljs-attr\">group</span>=<span class=\"hljs-string\">\"dubbo-simple\"</span>/&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span>\n</code></pre>\n<p>得到的zookeeper的叶子节点的值如下：</p>\n<p>consumer%3A%2F%2F30.5.124.149%2Forg.apache.dubbo.samples.simplified.registry.nosimple.api.DemoService%3Factives%3D6%26application%3Dsimplified-registry-xml-consumer%26category%3Dconsumers%26check%3Dfalse%26dubbo%3D2.0.2%26group%3Ddubbo-simple%26owner%3Dvvv%26version%3D1.2.3</p>\n<ul>\n<li>配置了：dubbo.registry.simplified=true ， 默认情况下，application,version,group,dubbo在默认的配置项列表，所以还是会进入注册中心；</li>\n</ul>\n<h3>方式2. 声明spring bean</h3>\n<p>sample在dubbo-samples-simplified-registry/dubbo-samples-simplified-registry-annotation 工程下 （跑sample前，先跑下ZKClean进行配置项清理）</p>\n<h5>Provider配置</h5>\n<p>privide端bean配置：</p>\n<pre><code>// 等同于dubbo.properties配置，用@Bean形式进行配置\n        @Bean\n        public RegistryConfig registryConfig() {\n            RegistryConfig registryConfig = new RegistryConfig();\n            registryConfig.setAddress(&quot;zookeeper://127.0.0.1:2181&quot;);\n            registryConfig.setSimplified(true);\n            registryConfig.setExtraKeys(&quot;retries,owner&quot;);\n            return registryConfig;\n        }\n</code></pre>\n<pre><code>// 暴露服务\n@Service(version = &quot;1.1.8&quot;, group = &quot;d-test&quot;, executes = 4500, retries = 7, owner = &quot;victanno&quot;, timeout = 5300)\npublic class AnnotationServiceImpl implements AnnotationService {\n    @Override\n    public String sayHello(String name) {\n        System.out.println(&quot;async provider received: &quot; + name);\n        return &quot;annotation: hello, &quot; + name;\n    }\n}\n</code></pre>\n<p>和上面sample中的dubbo.properties的效果是一致的。结果如下：</p>\n<ul>\n<li>默认情况下，timeout在默认的配置项列表，所以还是会进入注册中心；</li>\n<li>配置了retries,owner 作为额外的key进入注册中心 ， 所以retries，owner也会进入注册中心。</li>\n</ul>\n<p>总结：timeout，retries,owner进入了注册中心，而executes没有进入。</p>\n<h5>Consumer配置</h5>\n<p>consumer端bean配置：</p>\n<pre><code>  @Bean\n  public RegistryConfig registryConfig() {\n      RegistryConfig registryConfig = new RegistryConfig();\n      registryConfig.setAddress(&quot;zookeeper://127.0.0.1:2181&quot;);\n      registryConfig.setSimplified(true);\n      return registryConfig;\n  }\n</code></pre>\n<p>消费服务：</p>\n<pre><code>@Component(&quot;annotationAction&quot;)\npublic class AnnotationAction {\n\n    @Reference(version = &quot;1.1.8&quot;, group = &quot;d-test&quot;, owner = &quot;vvvanno&quot;, retries = 4, actives = 6, timeout = 4500)\n    private AnnotationService annotationService;\n    public String doSayHello(String name) {\n        return annotationService.sayHello(name);\n    }\n}\n</code></pre>\n<p>和上面sample中consumer端的配置是一样的。结果如下：</p>\n<ul>\n<li>默认情况下，application,version,group,dubbo在默认的配置项列表，所以还是会进入注册中心.</li>\n</ul>\n<h6>注意：</h6>\n<p>如果一个应用中既有provider又有consumer，那么配置需要合并成：</p>\n<pre><code>    @Bean\n    public RegistryConfig registryConfig() {\n        RegistryConfig registryConfig = new RegistryConfig();\n        registryConfig.setAddress(&quot;zookeeper://127.0.0.1:2181&quot;);\n        registryConfig.setSimplified(true);\n        //只对provider生效\n        registryConfig.setExtraKeys(&quot;retries,owner&quot;);\n        return registryConfig;\n    }\n</code></pre>\n<h1>后续规划</h1>\n<p>本版本还保留了大量的配置项，接下来的版本中，会逐渐删除所有的配置项。</p>\n",
  "link": "/zh-cn/docs/user/demos/simplify-registry-data.html",
  "meta": {}
}