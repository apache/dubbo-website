{
  "filename": "perf-test.md",
  "__html": "<h1>性能测试报告</h1>\n<h2>测试说明</h2>\n<ol>\n<li>本次性能测试，测试了 dubbo 2.0 所有支持的协议在不同大小和数据类型下的表现，并与 dubbo 1.0 进行了对比。</li>\n<li>整体性能相比 1.0 有了提升，平均提升 10%，使用 dubbo 2.0 新增的 dubbo 序列化还能获得 10%~50% 的性能提升，详见下面的性能数据。</li>\n<li>稳定性测试中由于将底层通信框架从 mina 换成 netty，old 区对象的增长大大减少，50 小时运行，增长不到 200m，无 fullgc。</li>\n<li>存在的问题：在 50k 数据的时候 2.0 性能不如 1.0，怀疑可能是缓冲区设置的问题，下版本会进一步确认。</li>\n</ol>\n<h2>测试环境</h2>\n<h3>硬件部署与参数调整</h3>\n<table>\n<thead>\n<tr>\n<th>机型</th>\n<th>CPU</th>\n<th>内存</th>\n<th>网络</th>\n<th>磁盘</th>\n<th>内核</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Tecal BH620</td>\n<td>model name : Intel(R) Xeon(R) CPU           E5520  @ 2.27GHz cache size : 8192 KB processor_count : 16</td>\n<td>Total System Memory: 6G Hardware Memory Info:  Size: 4096MB</td>\n<td>eth0: Link is up at 1000 Mbps, full duplex. peth0: Link is up at 1000 Mbps, full duplex.</td>\n<td>/dev/sda: 597.9 GB</td>\n<td>2.6.18-128.el5xen x86_64</td>\n</tr>\n</tbody>\n</table>\n<h3>软件架构</h3>\n<table>\n<thead>\n<tr>\n<th>软件名称及版本</th>\n<th>关键参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>java version &quot;1.6.0_18&quot; Java(TM) SE Runtime Environment (build 1.6.0_18-b07) Java HotSpot(TM) 64-Bit Server VM (build 16.0-b13, mixed mode)</td>\n<td>-server -Xmx2g -Xms2g -Xmn256m -XX:PermSize=128m -Xss256k -XX:+DisableExplicitGC -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled -XX:+UseCMSCompactAtFullCollection -XX:LargePageSizeInBytes=128m -XX:+UseFastAccessorMethods -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70</td>\n</tr>\n<tr>\n<td><a href=\"http://jboss-4.0.5.GA\">jboss-4.0.5.GA</a></td>\n<td></td>\n</tr>\n<tr>\n<td>httpd-2.0.61</td>\n<td>KeepAlive On MaxKeepAliveRequests 100000 KeepAliveTimeout 180 MaxRequestsPerChild 1000000 <IfModule worker.c>         StartServers 5         MaxClients 1024         MinSpareThreads 25         MaxSpareThreads 75         ThreadsPerChild 64         ThreadLimit 128         ServerLimit 16 </IfModule></td>\n</tr>\n</tbody>\n</table>\n<h2>测试目的</h2>\n<h3>期望性能指标(量化)</h3>\n<table>\n<thead>\n<tr>\n<th>场景名称</th>\n<th>对应指标名称</th>\n<th>期望值范围</th>\n<th>实际值</th>\n<th>是否满足期望(是/否)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1k数据</td>\n<td>响应时间</td>\n<td>0.9ms</td>\n<td>0.79ms</td>\n<td>是</td>\n</tr>\n<tr>\n<td>1k数据</td>\n<td>TPS</td>\n<td>10000</td>\n<td>11994</td>\n<td>是</td>\n</tr>\n</tbody>\n</table>\n<h3>期望运行状况(非量化，可选)</h3>\n<ul>\n<li>2.0 性能不低于 1.0, 2.0 和 1.0 互调用的性能无明显下降。 除了 50k string 其余皆通过</li>\n<li>JVM 内存运行稳定，无 OOM，堆内存中无不合理的大对象的占用。通过</li>\n<li>CPU、内存、网络、磁盘、文件句柄占用平稳。通过</li>\n<li>无频繁线程锁，线程数平稳。通过</li>\n<li>业务线程负载均衡。通过</li>\n</ul>\n<h2>测试脚本</h2>\n<ol start=\"0\">\n<li>\n<p>性能测试场景（10 并发）</p>\n<ul>\n<li>传入 1k String，不做任何处理，原样返回</li>\n<li>传入 50k String，不做任何处理，原样返回</li>\n<li>传入 200k String，不做任何处理，原样返回</li>\n<li>传入 1k POJO（嵌套的复杂 person 对象），不做任何处理，原样返回</li>\n</ul>\n<p>上述场景在 dubbo 1.0, dubbo 2.0(hessian2序列化), dubbo 2.0(dubbo序列化), rmi, hessian 3.2.0, http(json序列化) 进行 10 分钟的性能测试。主要考察序列化和网络 IO 的性能，因此服务端无任何业务逻辑。取 10 并发是考虑到 http 协议在高并发下对 CPU 的使用率较高可能会先打到瓶颈。</p>\n</li>\n<li>\n<p>并发场景（20 并发）\n传入 1k String，在服务器段循环 1w 次，每次重新生成一个随机数然后进行拼装。考察业务线程是否能够分配到每个 CPU 上。</p>\n</li>\n<li>\n<p>稳定性场景（20 并发）\n同时调用 1 个参数为 String（5k）方法，1 个参数为 person 对象的方法，1 个参数为 map（值为 3 个 person）的方法，持续运行 50 小时。</p>\n</li>\n<li>\n<p>高压力场景（20 并发）\n在稳定性场景的基础上，将提供者和消费者布置成均为 2 台（一台机器 2 个实例），且 String 的参数从 20byte 到 200k，每隔 10 分钟随机变换。</p>\n</li>\n</ol>\n<h2>测试结果</h2>\n<h3>场景名称：POJO 场景</h3>\n<table>\n<thead>\n<tr>\n<th>TPS成功平均值</th>\n<th>响应时间成功平均值(ms)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dubbo1 (hessian2序列化+mina)</td>\n<td>10813.5</td>\n</tr>\n<tr>\n<td>dubbo2 (hessian2序列化+netty)</td>\n<td>11994</td>\n</tr>\n<tr>\n<td>dubbo2 (dubbo序列化+netty)</td>\n<td>13620</td>\n</tr>\n<tr>\n<td>rmi</td>\n<td>2461.79</td>\n</tr>\n<tr>\n<td>hessian</td>\n<td>2417.7</td>\n</tr>\n<tr>\n<td>http（json序列化）</td>\n<td>8179.08</td>\n</tr>\n<tr>\n<td>2.0和1.0默认对比百分比</td>\n<td>10.92</td>\n</tr>\n<tr>\n<td>dubbo序列化相比hessian2序列化百分比</td>\n<td>13.56</td>\n</tr>\n</tbody>\n</table>\n<p>POJO TPS</p>\n<p><img src=\"./sources/images/pojotps.png\" alt=\"pojotps.png\"></p>\n<p>POJO Response</p>\n<p><img src=\"./sources/images/pojores.png\" alt=\"pojores.png\"></p>\n<h3>场景名称：1k string 场景</h3>\n<table>\n<thead>\n<tr>\n<th>TPS成功平均值</th>\n<th>响应时间成功平均值(ms)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dubbo1（hessian2序列化+mina）</td>\n<td>11940</td>\n</tr>\n<tr>\n<td>dubbo2 (hessian2序列化+netty)</td>\n<td>14402</td>\n</tr>\n<tr>\n<td>dubbo2 (dubbo序列化+netty)</td>\n<td>15096</td>\n</tr>\n<tr>\n<td>rmi</td>\n<td>11136.02</td>\n</tr>\n<tr>\n<td>hessian</td>\n<td>11426.83</td>\n</tr>\n<tr>\n<td>http（json序列化）</td>\n<td>8919.27</td>\n</tr>\n<tr>\n<td>2.0和1.0默认对比百分比</td>\n<td>20.62</td>\n</tr>\n<tr>\n<td>dubbo序列化相比hessian2序列化百分比</td>\n<td>4.82</td>\n</tr>\n</tbody>\n</table>\n<p>1k TPS</p>\n<p><img src=\"./sources/images/1ktps.png\" alt=\"1ktps.png\"></p>\n<p>1k Response</p>\n<p><img src=\"./sources/images/1kres.png\" alt=\"1kres.png\"></p>\n<h3>场景名称：50k string 场景</h3>\n<table>\n<thead>\n<tr>\n<th>TPS成功平均值</th>\n<th>响应时间成功平均值(ms)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dubbo1（hessian2序列化+mina</td>\n<td>1962.7</td>\n</tr>\n<tr>\n<td>dubbo2 (hessian2序列化+netty)</td>\n<td>1293</td>\n</tr>\n<tr>\n<td>dubbo2 (dubbo序列化+netty)</td>\n<td>1966</td>\n</tr>\n<tr>\n<td>rmi</td>\n<td>3349.88</td>\n</tr>\n<tr>\n<td>hessian</td>\n<td>1925.33</td>\n</tr>\n<tr>\n<td>http（json序列化）</td>\n<td>3247.1</td>\n</tr>\n<tr>\n<td>2.0和1.0默认对比百分比</td>\n<td>-34.12</td>\n</tr>\n<tr>\n<td>dubbo序列化相比hessian2序列化百分比</td>\n<td>52.05</td>\n</tr>\n</tbody>\n</table>\n<p>50K TPS</p>\n<p><img src=\"./sources/images/50ktps.png\" alt=\"50ktps.png\"></p>\n<p>50K Response</p>\n<p><img src=\"./sources/images/50kres.png\" alt=\"50kres.png\"></p>\n<h3>场景名称：200k string 场景</h3>\n<table>\n<thead>\n<tr>\n<th>TPS成功平均值</th>\n<th>响应时间成功平均值(ms)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dubbo1（hessian2序列化+mina）</td>\n<td>324.2</td>\n</tr>\n<tr>\n<td>dubbo2 (hessian2序列化+netty)</td>\n<td>362.92</td>\n</tr>\n<tr>\n<td>dubbo2 (dubbo序列化+netty)</td>\n<td>569.5</td>\n</tr>\n<tr>\n<td>rmi</td>\n<td>1031.28</td>\n</tr>\n<tr>\n<td>hessian</td>\n<td>628.06</td>\n</tr>\n<tr>\n<td>http（json序列化）</td>\n<td>1011.97</td>\n</tr>\n<tr>\n<td>2.0和1.0默认对比百分比</td>\n<td>11.94</td>\n</tr>\n<tr>\n<td>dubbo序列化相比hessian2序列化百分比</td>\n<td>56.92</td>\n</tr>\n</tbody>\n</table>\n<p>200K TPS</p>\n<p><img src=\"./sources/images/200ktps.png\" alt=\"200ktps.png\"></p>\n<p><strong>200K Response</strong></p>\n<p><img src=\"./sources/images/200kres.png\" alt=\"200kres.png\"></p>\n<h2>测试分析</h2>\n<h3>性能分析评估</h3>\n<p>Dubbo 2.0 的性能测试结论为通过，从性能、内存占用和稳定性上都有了提高和改进。由其是内存管理由于将 mina 换成netty，大大减少了 1.0 版本在高并发大数据下的内存大锯齿。</p>\n<h3>性能对比分析(新旧环境、不同数据量级等)</h3>\n<p>Dubbo 2.0 相比较Dubbo 1.0（默认使用的都是 hessian2 序列化）性能均有提升（除了50k String），详见第五章的性能数据。</p>\n<p>出于兼容性考虑默认的序列化方式和 1.0 保持一致使用 hessian2，如对性能有更高要求可以使用 dubbo 序列化，由其是在处理复杂对象时，在大数据量下能获得 50% 的提升（但此时已不建议使用 Dubbo 协议）。</p>\n<p>Dubbo 的设计目的是为了满足高并发小数据量的 rpc 调用，在大数据量下的性能表现并不好，建议使用 rmi 或 http 协议。</p>\n<h3>测试局限性分析（可选）</h3>\n<p>本次性能测试考察的是 dubbo 本身的性能，实际使用过程中的性能有待应用来验证。</p>\n<p>由于 dubbo 本身的性能占用都在毫秒级，占的基数很小，性能提升可能对应用整体的性能变化不大。</p>\n<p>由于邮件篇幅所限没有列出所有的监控图，如需获得可在大力神平台上查询。</p>\n",
  "link": "/zh-cn/docs/user/perf-test.html",
  "meta": {
    "title": "性能测试报告",
    "keywords": "性能测试",
    "description": "Dubbo 2.0 性能测试报告"
  }
}