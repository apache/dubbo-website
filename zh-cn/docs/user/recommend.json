{
  "filename": "recommend.md",
  "__html": "<h1>推荐用法</h1>\n<h2>在 Provider 端尽量多配置 Consumer 端属性</h2>\n<p>原因如下：</p>\n<ul>\n<li>作服务的提供方，比服务消费方更清楚服务的性能参数，如调用的超时时间、合理的重试次数等</li>\n<li>在 Provider 端配置后，Consumer 端不配置则会使用 Provider 端的配置，即 Provider 端的配置可以作为 Consumer 的缺省值 <sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>。否则，Consumer 会使用 Consumer 端的全局设置，这对于 Provider 是不可控的，并且往往是不合理的</li>\n</ul>\n<p>Provider 端尽量多配置 Consumer 端的属性，让 Provider 的实现者一开始就思考 Provider 端的服务特点和服务质量等问题。</p>\n<p>示例：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"com.alibaba.hello.api.HelloService\"</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">\"1.0.0\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"helloService\"</span>\n    <span class=\"hljs-attr\">timeout</span>=<span class=\"hljs-string\">\"300\"</span> <span class=\"hljs-attr\">retry</span>=<span class=\"hljs-string\">\"2\"</span> <span class=\"hljs-attr\">loadbalance</span>=<span class=\"hljs-string\">\"random\"</span> <span class=\"hljs-attr\">actives</span>=<span class=\"hljs-string\">\"0\"</span> /&gt;</span>\n \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"com.alibaba.hello.api.WorldService\"</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">\"1.0.0\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"helloService\"</span>\n    <span class=\"hljs-attr\">timeout</span>=<span class=\"hljs-string\">\"300\"</span> <span class=\"hljs-attr\">retry</span>=<span class=\"hljs-string\">\"2\"</span> <span class=\"hljs-attr\">loadbalance</span>=<span class=\"hljs-string\">\"random\"</span> <span class=\"hljs-attr\">actives</span>=<span class=\"hljs-string\">\"0\"</span> &gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:method</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"findAllPerson\"</span> <span class=\"hljs-attr\">timeout</span>=<span class=\"hljs-string\">\"10000\"</span> <span class=\"hljs-attr\">retries</span>=<span class=\"hljs-string\">\"9\"</span> <span class=\"hljs-attr\">loadbalance</span>=<span class=\"hljs-string\">\"leastactive\"</span> <span class=\"hljs-attr\">actives</span>=<span class=\"hljs-string\">\"5\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span>/&gt;</span>\n</code></pre>\n<p>建议在 Provider 端配置的 Consumer 端属性有：</p>\n<ol>\n<li><code>timeout</code>：方法调用的超时时间</li>\n<li><code>retries</code>：失败重试次数，缺省是 2 <sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup></li>\n<li><code>loadbalance</code>：负载均衡算法 <sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup>，缺省是随机 <code>random</code>。还可以配置轮询 <code>roundrobin</code>、最不活跃优先 <sup class=\"footnote-ref\"><a href=\"#fn4\" id=\"fnref4\">[4]</a></sup> <code>leastactive</code> 和一致性哈希 <code>consistenthash</code> 等</li>\n<li><code>actives</code>：消费者端的最大并发调用限制，即当 Consumer 对一个服务的并发调用到上限后，新调用会阻塞直到超时，在方法上配置 <code>dubbo:method</code> 则针对该方法进行并发限制，在接口上配置 <code>dubbo:service</code>，则针对该服务进行并发限制</li>\n</ol>\n<p>详细配置说明请参考：<a href=\"./references/xml/introduction.md\">Dubbo配置参考手册</a></p>\n<h2>在 Provider 端配置合理的 Provider 端属性</h2>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:protocol</span> <span class=\"hljs-attr\">threads</span>=<span class=\"hljs-string\">\"200\"</span> /&gt;</span> \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"com.alibaba.hello.api.HelloService\"</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">\"1.0.0\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"helloService\"</span>\n    <span class=\"hljs-attr\">executes</span>=<span class=\"hljs-string\">\"200\"</span> &gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:method</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"findAllPerson\"</span> <span class=\"hljs-attr\">executes</span>=<span class=\"hljs-string\">\"50\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dubbo:service</span>&gt;</span>\n</code></pre>\n<p>建议在 Provider 端配置的 Provider 端属性有：</p>\n<ol>\n<li><code>threads</code>：服务线程池大小</li>\n<li><code>executes</code>：一个服务提供者并行执行请求上限，即当 Provider 对一个服务的并发调用达到上限后，新调用会阻塞，此时 Consumer 可能会超时。在方法上配置 <code>dubbo:method</code> 则针对该方法进行并发限制，在接口上配置 <code>dubbo:service</code>，则针对该服务进行并发限制</li>\n</ol>\n<h2>配置管理信息</h2>\n<p>目前有负责人信息和组织信息用于区分站点。以便于在发现问题时找到服务对应负责人，建议至少配置两个人以便备份。负责人和组织信息可以在运维平台 (Dubbo Ops) 上看到。</p>\n<p>在应用层面配置负责人、组织信息：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:application</span> <span class=\"hljs-attr\">owner</span>=<span class=\"hljs-string\">”ding.lid,william.liangf”</span> <span class=\"hljs-attr\">organization</span>=<span class=\"hljs-string\">”intl”</span> /&gt;</span>\n</code></pre>\n<p>在服务层面（服务端）配置负责人：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">owner</span>=<span class=\"hljs-string\">”ding.lid,william.liangf”</span> /&gt;</span>\n</code></pre>\n<p>在服务层面（消费端）配置负责人：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:reference</span> <span class=\"hljs-attr\">owner</span>=<span class=\"hljs-string\">”ding.lid,william.liangf”</span> /&gt;</span>\n</code></pre>\n<p>若没有配置服务层面的负责人，则默认使用 <code>dubbo:application</code> 设置的负责人。</p>\n<h2>配置 Dubbo 缓存文件</h2>\n<p>提供者列表缓存文件：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">file</span>=<span class=\"hljs-string\">”${user.home}/output/dubbo.cache”</span> /&gt;</span>\n</code></pre>\n<p>注意：</p>\n<ol>\n<li>可以根据需要调整缓存文件的路径，保证这个文件不会在发布过程中被清除；</li>\n<li>如果有多个应用进程，请注意不要使用同一个文件，避免内容被覆盖；</li>\n</ol>\n<p>该文件会缓存注册中心列表和服务提供者列表。配置缓存文件后，应用重启过程中，若注册中心不可用，应用会从该缓存文件读取服务提供者列表，进一步保证应用可靠性。</p>\n<h2>监控配置</h2>\n<ol>\n<li>\n<p>使用固定端口暴露服务，而不要使用随机端口</p>\n<p>这样在注册中心推送有延迟的情况下，消费者通过缓存列表也能调用到原地址，保证调用成功。</p>\n</li>\n<li>\n<p>使用 Dubbo Ops 监控注册中心上的服务提供方</p>\n<p>使用 <a href=\"https://github.com/apache/incubator-dubbo-ops\">Dubbo Ops</a> 监控服务在注册中心上的状态，确保注册中心上有该服务的存在。</p>\n</li>\n<li>\n<p>服务提供方可使用 Dubbo Qos 的 telnet 或 shell 监控项</p>\n<p>监控服务提供者端口状态：<code>echo status | nc -i 1 20880 | grep OK | wc -l</code>，其中的 20880 为服务端口</p>\n</li>\n<li>\n<p>服务消费方可通过将服务强制转型为 EchoService，并调用 <code>$echo()</code> 测试该服务的提供者是可用</p>\n<p>如 <code>assertEqauls(“OK”, ((EchoService)memberService).$echo(“OK”));</code></p>\n</li>\n</ol>\n<h2>不要使用 dubbo.properties 文件配置，推荐使用对应 XML 配置</h2>\n<p>Dubbo 中所有的配置项都可以配置在 Spring 配置文件中，并且可以针对单个服务配置。</p>\n<p>如完全不配置则使用 Dubbo 缺省值，详情请参考 <a href=\"./references/xml/introduction.md\">Dubbo配置参考手册</a> 中的说明。</p>\n<h3>dubbo.properties 中属性名与 XML 的对应关系</h3>\n<ol>\n<li>\n<p>应用名 <code>dubbo.application.name</code></p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:application</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"myalibaba\"</span> &gt;</span>\n</code></pre>\n</li>\n<li>\n<p>注册中心地址 <code>dubbo.registry.address</code></p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"11.22.33.44:9090\"</span> &gt;</span>\n</code></pre>\n</li>\n<li>\n<p>调用超时 <code>dubbo.service.*.timeout</code></p>\n<p>可以在多个配置项设置超时 <code>timeout</code>，由上至下覆盖（即上面的优先）<sup class=\"footnote-ref\"><a href=\"#fn5\" id=\"fnref5\">[5]</a></sup>，其它的参数（<code>retries</code>、<code>loadbalance</code>、<code>actives</code>等）的覆盖策略与 <code>timeout</code> 相同。示例如下：</p>\n<p>提供者端特定方法的配置</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"com.alibaba.xxx.XxxService\"</span> &gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:method</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"findPerson\"</span> <span class=\"hljs-attr\">timeout</span>=<span class=\"hljs-string\">\"1000\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dubbo:service</span>&gt;</span>\n</code></pre>\n<p>提供者端特定接口的配置</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"com.alibaba.xxx.XxxService\"</span> <span class=\"hljs-attr\">timeout</span>=<span class=\"hljs-string\">\"200\"</span> /&gt;</span>\n</code></pre>\n</li>\n<li>\n<p>服务提供者协议 <code>dubbo.service.protocol</code>、服务的监听端口 <code>dubbo.service.server.port</code></p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:protocol</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo\"</span> <span class=\"hljs-attr\">port</span>=<span class=\"hljs-string\">\"20880\"</span> /&gt;</span>\n</code></pre>\n</li>\n<li>\n<p>服务线程池大小 <code>dubbo.service.max.thread.threads.size</code></p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:protocol</span> <span class=\"hljs-attr\">threads</span>=<span class=\"hljs-string\">\"100\"</span> /&gt;</span>\n</code></pre>\n</li>\n<li>\n<p>消费者启动时，没有提供者是否抛异常 <code>alibaba.intl.commons.dubbo.service.allow.no.provider</code></p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:reference</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"com.alibaba.xxx.XxxService\"</span> <span class=\"hljs-attr\">check</span>=<span class=\"hljs-string\">\"false\"</span> /&gt;</span>\n</code></pre>\n</li>\n</ol>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>配置的覆盖规则：1) 方法级别配置优于接口级别，即小 Scope 优先 2) Consumer 端配置优于 Provider 端配置，优于全局配置，最后是 Dubbo 硬编码的配置值（<a href=\"./configuration/properties.md#%E8%A6%86%E7%9B%96%E7%AD%96%E7%95%A5\">Dubbo 配置参考手册</a>） <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p>表示加上第一次调用，会调用 3 次 <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p>有多个 Provider 时，如何挑选 Provider 调用 <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn4\" class=\"footnote-item\"><p>指从 Consumer 端并发调用最好的 Provider，可以减少对响应慢的 Provider 的调用，因为响应慢更容易累积并发调用 <a href=\"#fnref4\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn5\" class=\"footnote-item\"><p><code>timeout</code> 可以在多处设置，配置项及覆盖规则请参考： <a href=\"./references/xml/introduction.md\">Dubbo 配置参考手册</a> <a href=\"#fnref5\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
  "link": "/zh-cn/docs/user/recommend.html",
  "meta": {
    "title": "推荐用法",
    "keywords": "Provider 配置, 管理信息, 缓存, 监控",
    "description": "Dubbo 推荐用法举例"
  }
}