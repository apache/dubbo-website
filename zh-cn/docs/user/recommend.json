{
  "filename": "recommend.md",
  "__html": "<h1>推荐用法</h1>\n<h2>在 Provider 上尽量多配置 Consumer 端属性</h2>\n<p>原因如下：</p>\n<ul>\n<li>作服务的提供者，比服务使用方更清楚服务性能参数，如调用的超时时间，合理的重试次数，等等</li>\n<li>在 Provider 配置后，Consumer 不配置则会使用 Provider 的配置值，即 Provider 配置可以作为 Consumer 的缺省值 [^1]。否则，Consumer 会使用 Consumer 端的全局设置，这对于 Provider 不可控的，并且往往是不合理的</li>\n</ul>\n<p>Provider 上尽量多配置 Consumer 端的属性，让 Provider 实现者一开始就思考 Provider 服务特点、服务质量的问题。</p>\n<p>示例：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"com.alibaba.hello.api.HelloService\"</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">\"1.0.0\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"helloService\"</span>\n    <span class=\"hljs-attr\">timeout</span>=<span class=\"hljs-string\">\"300\"</span> <span class=\"hljs-attr\">retry</span>=<span class=\"hljs-string\">\"2\"</span> <span class=\"hljs-attr\">loadbalance</span>=<span class=\"hljs-string\">\"random\"</span> <span class=\"hljs-attr\">actives</span>=<span class=\"hljs-string\">\"0\"</span>\n/&gt;</span>\n \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"com.alibaba.hello.api.WorldService\"</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">\"1.0.0\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"helloService\"</span>\n    <span class=\"hljs-attr\">timeout</span>=<span class=\"hljs-string\">\"300\"</span> <span class=\"hljs-attr\">retry</span>=<span class=\"hljs-string\">\"2\"</span> <span class=\"hljs-attr\">loadbalance</span>=<span class=\"hljs-string\">\"random\"</span> <span class=\"hljs-attr\">actives</span>=<span class=\"hljs-string\">\"0\"</span> &gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:method</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"findAllPerson\"</span> <span class=\"hljs-attr\">timeout</span>=<span class=\"hljs-string\">\"10000\"</span> <span class=\"hljs-attr\">retries</span>=<span class=\"hljs-string\">\"9\"</span> <span class=\"hljs-attr\">loadbalance</span>=<span class=\"hljs-string\">\"leastactive\"</span> <span class=\"hljs-attr\">actives</span>=<span class=\"hljs-string\">\"5\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span>/&gt;</span>\n</code></pre>\n<p>在 Provider 上可以配置的 Consumer 端属性有：</p>\n<ol start=\"0\">\n<li><code>timeout</code> 方法调用超时</li>\n<li><code>retries</code> 失败重试次数，缺省是 2 [^2]</li>\n<li><code>loadbalance</code> 负载均衡算法 [^3]，缺省是随机 <code>random</code>。还可以有轮询 <code>roundrobin</code>、最不活跃优先 [^4] <code>leastactive</code></li>\n<li><code>actives</code> 消费者端，最大并发调用限制，即当 Consumer 对一个服务的并发调用到上限后，新调用会 Wait 直到超时\n在方法上配置 <code>dubbo:method</code> 则并发限制针对方法，在接口上配置 <code>dubbo:service</code>，则并发限制针对服务</li>\n</ol>\n<p>详细配置说明参见：<a href=\"./references/xml/introduction.md\">Dubbo配置参考手册</a></p>\n<h2>Provider 上配置合理的 Provider 端属性</h2>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:protocol</span> <span class=\"hljs-attr\">threads</span>=<span class=\"hljs-string\">\"200\"</span> /&gt;</span> \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"com.alibaba.hello.api.HelloService\"</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">\"1.0.0\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"helloService\"</span>\n    <span class=\"hljs-attr\">executes</span>=<span class=\"hljs-string\">\"200\"</span> &gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:method</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"findAllPerson\"</span> <span class=\"hljs-attr\">executes</span>=<span class=\"hljs-string\">\"50\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dubbo:service</span>&gt;</span>\n</code></pre>\n<p>Provider 上可以配置的 Provider 端属性有：</p>\n<ol start=\"0\">\n<li><code>threads</code> 服务线程池大小</li>\n<li><code>executes</code> 一个服务提供者并行执行请求上限，即当 Provider 对一个服务的并发调用到上限后，新调用会 Wait，这个时候 Consumer可能会超时。在方法上配置 <code>dubbo:method</code> 则并发限制针对方法，在接口上配置 <code>dubbo:service</code>，则并发限制针对服务</li>\n</ol>\n<h2>配置管理信息</h2>\n<p>目前有负责人信息和组织信息用于区分站点。有问题时便于的找到服务的负责人，至少写两个人以便备份。负责人和组织的信息可以在注册中心的上看到。</p>\n<p>应用配置负责人、组织：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:application</span> <span class=\"hljs-attr\">owner</span>=<span class=\"hljs-string\">”ding.lid,william.liangf”</span> <span class=\"hljs-attr\">organization</span>=<span class=\"hljs-string\">”intl”</span> /&gt;</span>\n</code></pre>\n<p>service 配置负责人：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">owner</span>=<span class=\"hljs-string\">”ding.lid,william.liangf”</span> /&gt;</span>\n</code></pre>\n<p>reference 配置负责人：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:reference</span> <span class=\"hljs-attr\">owner</span>=<span class=\"hljs-string\">”ding.lid,william.liangf”</span> /&gt;</span>\n</code></pre>\n<p><code>dubbo:service</code>、<code>dubbo:reference</code> 没有配置负责人，则使用 <code>dubbo:application</code> 设置的负责人。</p>\n<h2>配置 Dubbo 缓存文件</h2>\n<p>提供者列表缓存文件：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">file</span>=<span class=\"hljs-string\">”${user.home}/output/dubbo.cache”</span> /&gt;</span>\n</code></pre>\n<p>注意：</p>\n<ol start=\"0\">\n<li>文件的路径，应用可以根据需要调整，保证这个文件不会在发布过程中被清除。</li>\n<li>如果有多个应用进程注意不要使用同一个文件，避免内容被覆盖。</li>\n</ol>\n<p>这个文件会缓存注册中心的列表和服务提供者列表。有了这项配置后，当应用重启过程中，Dubbo 注册中心不可用时则应用会从这个缓存文件读取服务提供者列表的信息，进一步保证应用可靠性。</p>\n<h2>监控配置</h2>\n<ol start=\"0\">\n<li>\n<p>使用固定端口暴露服务，而不要使用随机端口</p>\n<p>这样在注册中心推送有延迟的情况下，消费者通过缓存列表也能调用到原地址，保证调用成功。</p>\n</li>\n<li>\n<p>使用 Dragoon 的 http 监控项监控注册中心上服务提供方</p>\n<p>Dragoon 监控服务在注册中心上的状态：<a href=\"http://dubbo-reg1.hst.xyi.cn.alidc.net:8080/status/com.alibaba.morgan.member.MemberService:1.0.5\">http://dubbo-reg1.hst.xyi.cn.alidc.net:8080/status/com.alibaba.morgan.member.MemberService:1.0.5</a> 确保注册中心上有该服务的存在。</p>\n</li>\n<li>\n<p>服务提供方，使用 Dragoon 的 telnet 或 shell 监控项</p>\n<p>监控服务提供者端口状态：<code>echo status | nc -i 1 20880 | grep OK | wc -l</code>，其中的 20880 为服务端口</p>\n</li>\n<li>\n<p>服务消费方，通过将服务强制转型为 EchoService，并调用 <code>$echo()</code> 测试该服务的提供者是可用</p>\n<p>如 <code>assertEqauls(“OK”, ((EchoService)memberService).$echo(“OK”));</code></p>\n</li>\n</ol>\n<h2>不要使用 dubbo.properties 文件配置，推荐使用对应 XML 配置</h2>\n<p>Dubbo 中所有的配置项都可以配置在 Spring 配置文件中，并且可以针对单个服务配置。</p>\n<p>如完全不配置则使用 Dubbo 缺省值，参见 <a href=\"./references/xml/introduction.md\">Dubbo配置参考手册</a> 中的说明。</p>\n<h3>dubbo.properties 中属性名与 XML 的对应关系</h3>\n<ol start=\"0\">\n<li>\n<p>应用名 <code>dubbo.application.name</code></p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:application</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"myalibaba\"</span> &gt;</span>\n</code></pre>\n</li>\n<li>\n<p>注册中心地址 <code>dubbo.registry.address</code></p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"11.22.33.44:9090\"</span> &gt;</span>\n</code></pre>\n</li>\n<li>\n<p>调用超时 <code>dubbo.service.*.timeout</code></p>\n<p>可以在多个配置项设置超时 <code>timeout</code>，由上至下覆盖（即上面的优先）[^5]，其它的参数（<code>retries</code>、<code>loadbalance</code>、<code>actives</code>等）的覆盖策略也一样示例如下：</p>\n<p>提供者端特定方法的配置</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"com.alibaba.xxx.XxxService\"</span> &gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:method</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"findPerson\"</span> <span class=\"hljs-attr\">timeout</span>=<span class=\"hljs-string\">\"1000\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dubbo:service</span>&gt;</span>\n</code></pre>\n<p>提供者端特定接口的配置</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"com.alibaba.xxx.XxxService\"</span> <span class=\"hljs-attr\">timeout</span>=<span class=\"hljs-string\">\"200\"</span> /&gt;</span>\n</code></pre>\n</li>\n<li>\n<p>服务提供者协议 <code>dubbo.service.protocol</code>、服务的监听端口 <code>dubbo.service.server.port</code></p>\n<pre><code class=\"language-xml\"></code></pre>\n</li>\n</ol>\n<p>&lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot; /&gt;</p>\n<pre><code>    \n5. 服务线程池大小 `dubbo.service.max.thread.threads.size`\n\n    ```xml\n    &lt;dubbo:protocol threads=&quot;100&quot; /&gt;\n    ```\n    \n6. 消费者启动时，没有提供者是否抛异常 Fast-Fail `alibaba.intl.commons.dubbo.service.allow.no.provider`\n\n    ```xml\n    &lt;dubbo:reference interface=&quot;com.alibaba.xxx.XxxService&quot; check=&quot;false&quot; /&gt;\n    ```\n    \n[^1]: 配置的覆盖规则：1) 方法级别配置优于接口级别，即小 Scope 优先 2) Consumer 端配置优于 Provider 配置，优于全局配置，最后是Dubbo 硬编码的配置值（[Dubbo 配置参考手册](./configuration/properties.md#覆盖策略)）\n[^2]: 表示加上第一次调用，会调用 3 次\n[^3]: 有多个 Provider 时，如何挑选 Provider 调用\n[^4]: 指从 Consume r端并发调用最好的 Provider，可以减少的反应慢的 Provider 的调用，因为反应更容易累积并发的调用\n[^5]: `timeout` 可以在多处设置，配置项及覆盖规则详见： [Dubbo 配置参考手册](./references/xml/introduction.md)\n</code></pre>\n"
}