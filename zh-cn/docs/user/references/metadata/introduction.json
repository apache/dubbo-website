{
  "filename": "introduction.md",
  "__html": "<h1>背景</h1>\n<p>dubbo provider中的服务配置项有接近<a href=\"http://dubbo.apache.org/en-us/docs/user/references/xml/dubbo-service.html\">30个配置项</a>。 排除注册中心服务治理需要之外，很大一部分配置项是provider自己使用，不需要透传给消费者。这部分数据不需要进入注册中心，而只需要以key-value形式持久化存储。\ndubbo consumer中的配置项也有<a href=\"http://dubbo.apache.org/en-us/docs/user/references/xml/dubbo-reference.html\">20+个配置项</a>。在注册中心之中，服务消费者列表中只需要关注application，version，group，ip，dubbo版本等少量配置，其他配置也可以以key-value形式持久化存储。\n这些数据是以服务为维度注册进入注册中心，导致了数据量的膨胀，进而引发注册中心(如zookeeper)的网络开销增大，性能降低。<br>\n除了上述配置项的存储之外，dubbo服务元数据信息也需要被存储下来。元数据信息包括服务接口，及接口的方法信息。这些信息将被用于服务mock，服务测试。</p>\n<h1>目标</h1>\n<p>需要将注册中心原来的数据信息和元数据信息保存到独立的key-value的存储中，这个key-value可以是DB，redis或者其他持久化存储。核心代码中支持了zookeeper，redis(推荐)的默认支持。</p>\n<p>provider存储内容的格式，参见：org.apache.dubbo.metadata.definition.model.FullServiceDefinition。是该类型gson化之后的存储。\nConsumer存储内容，为Map格式。从Consumer端注册到注册中心的URL中的获取参数信息。即通过URL.getParameterMap()获取到的Map，进行gson话之后进行存储。</p>\n<p>详细的内容，可以参考下面的sample输出。</p>\n<h1>配置</h1>\n<p>默认的元数据存储，额外支持以下几个特性：</p>\n<ul>\n<li>失败重试</li>\n<li>每天定时重刷</li>\n</ul>\n<h4>失败重试</h4>\n<p>失败重试可以通过retrytimes （重试次数,默认100），retryperiod（重试周期，默认3000ms）进行设置。</p>\n<h4>定时刷新</h4>\n<p>默认开启，可以通过设置cycleReport=false进行关闭。</p>\n<h4>完整的配置项：</h4>\n<pre><code>dubbo.metadata-report.address=zookeeper://127.0.0.1:2181\ndubbo.metadata-report.username=xxx        ##非必须\ndubbo.metadata-report.password=xxx        ##非必须\ndubbo.metadata-report.retry-times=30       ##非必须,default值100\ndubbo.metadata-report.retry-period=5000    ##非必须,default值3000\ndubbo.metadata-report.cycle-report=false   ##非必须,default值true\n</code></pre>\n<blockquote>\n<p>如果元数据地址(dubbo.metadata-report.address)也不进行配置，整个元数据的写入不会生效，但是不影响程序运行。</p>\n</blockquote>\n<p>接下来看几个sample的配置。无论哪种配置方式，都需要引入maven依赖：</p>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;\n    &lt;artifactId&gt;dubbo-metadata-report-zookeeper&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>\n<p>如果需要使用redis，可以引入对应的redis的依赖：</p>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;\n    &lt;artifactId&gt;dubbo-metadata-report-redis&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>\n<blockquote>\n<p><strong>完整的sample，查看<a href=\"https://github.com/dubbo/dubbo-samples/tree/master\">sample-2.7</a></strong></p>\n</blockquote>\n<h2>方式一：配置中心配置</h2>\n<p>参考sample：dubbo-samples-metadata-report/dubbo-samples-metadata-report-configcenter 工程。</p>\n<h5>在配置中心配置</h5>\n<p>配置中心的配置，可以参考configcenter的文档。配置的内容如下：</p>\n<pre><code class=\"language-.properties\">dubbo.registry.address=zookeeper://127.0.0.1:2181\n### 注意驼峰式风格\ndubbo.metadata-report.address=zookeeper://127.0.0.1:2181 ###元数据存储的地址\n</code></pre>\n<p>在sample中，使用了Zookeeper作为配置中心。启动本地zookeeper服务之后，直接运行：org.apache.dubbo.samples.metadatareport.configcenter.ZKTools 就可以完成写入。\n如果配置中心使用了nacos，apollo，这些产品本身支持ops配置。</p>\n<h5>应用中配置</h5>\n<pre><code>###dubbo.properties\ndubbo.configCenter.address=zookeeper://127.0.0.1:2181\n... \n</code></pre>\n<p>完成上述两部之后，注册中心地址、元数据地址将从配置中心进行获取。现在可以依次运行Provider类和Consumer类，会在console中得到对应的输出或者直接通过zookeeper的cli查看。</p>\n<h5>provider</h5>\n<p>provider端存储的元数据内容如下：</p>\n<pre><code class=\"language-json\">{\n <span class=\"hljs-attr\">\"parameters\"</span>: {\n  <span class=\"hljs-attr\">\"side\"</span>: <span class=\"hljs-string\">\"provider\"</span>,\n  <span class=\"hljs-attr\">\"methods\"</span>: <span class=\"hljs-string\">\"sayHello\"</span>,\n  <span class=\"hljs-attr\">\"dubbo\"</span>: <span class=\"hljs-string\">\"2.0.2\"</span>,\n  <span class=\"hljs-attr\">\"threads\"</span>: <span class=\"hljs-string\">\"100\"</span>,\n  <span class=\"hljs-attr\">\"interface\"</span>: <span class=\"hljs-string\">\"org.apache.dubbo.samples.metadatareport.configcenter.api.AnnotationService\"</span>,\n  <span class=\"hljs-attr\">\"threadpool\"</span>: <span class=\"hljs-string\">\"fixed\"</span>,\n  <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"1.1.1\"</span>,\n  <span class=\"hljs-attr\">\"generic\"</span>: <span class=\"hljs-string\">\"false\"</span>,\n  <span class=\"hljs-attr\">\"revision\"</span>: <span class=\"hljs-string\">\"1.1.1\"</span>,\n  <span class=\"hljs-attr\">\"valid\"</span>: <span class=\"hljs-string\">\"true\"</span>,\n  <span class=\"hljs-attr\">\"application\"</span>: <span class=\"hljs-string\">\"metadatareport-configcenter-provider\"</span>,\n  <span class=\"hljs-attr\">\"default.timeout\"</span>: <span class=\"hljs-string\">\"5000\"</span>,\n  <span class=\"hljs-attr\">\"group\"</span>: <span class=\"hljs-string\">\"d-test\"</span>,\n  <span class=\"hljs-attr\">\"anyhost\"</span>: <span class=\"hljs-string\">\"true\"</span>\n },\n <span class=\"hljs-attr\">\"canonicalName\"</span>: <span class=\"hljs-string\">\"org.apache.dubbo.samples.metadatareport.configcenter.api.AnnotationService\"</span>,\n <span class=\"hljs-attr\">\"codeSource\"</span>: <span class=\"hljs-string\">\"file:/Users/cvictory/workspace/work-mw/dubbo-samples/dubbo-samples-metadata-report/dubbo-samples-metadata-report-configcenter/target/classes/\"</span>,\n <span class=\"hljs-attr\">\"methods\"</span>: [{\n  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"sayHello\"</span>,\n  <span class=\"hljs-attr\">\"parameterTypes\"</span>: [<span class=\"hljs-string\">\"java.lang.String\"</span>],\n  <span class=\"hljs-attr\">\"returnType\"</span>: <span class=\"hljs-string\">\"java.lang.String\"</span>\n }],\n <span class=\"hljs-attr\">\"types\"</span>: [{\n  <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"java.lang.String\"</span>,\n  <span class=\"hljs-attr\">\"properties\"</span>: {\n   <span class=\"hljs-attr\">\"value\"</span>: {\n    <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"char[]\"</span>\n   },\n   <span class=\"hljs-attr\">\"hash\"</span>: {\n    <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"int\"</span>\n   }\n  }\n }, {\n  <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"int\"</span>\n }, {\n  <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"char\"</span>\n }]\n}\n\n</code></pre>\n<p>provider存储的内容包括了provider服务往注册中心填写的全部参数，以及服务的方法信息（方法名，入参出参的格式）。</p>\n<h5>consumer端存储的内容：</h5>\n<pre><code>{\n &quot;valid&quot;: &quot;true&quot;,\n &quot;side&quot;: &quot;consumer&quot;,\n &quot;application&quot;: &quot;metadatareport-configcenter-consumer&quot;,\n &quot;methods&quot;: &quot;sayHello&quot;,\n &quot;default.timeout&quot;: &quot;6666&quot;,\n &quot;dubbo&quot;: &quot;2.0.2&quot;,\n &quot;interface&quot;: &quot;org.apache.dubbo.samples.metadatareport.configcenter.api.AnnotationService&quot;,\n &quot;version&quot;: &quot;1.1.1&quot;,\n &quot;revision&quot;: &quot;1.1.1&quot;,\n &quot;group&quot;: &quot;d-test&quot;\n}\n</code></pre>\n<p>consumer端存储了consumer往注册中心填写的全部参数。</p>\n<p>上面的例子中，主要是将元数据地址放在配置中心。在元数据存储下来的provider服务信息和consumer端服务信息的展示。\n接下来的两个例子，主要讲解在工程中配置：xml方式，annotation方式。</p>\n<h2>方式二：配置在项目中-properties方式引入配置</h2>\n<p>参考sample：dubbo-samples-metadata-report/dubbo-samples-metadata-report-local-xml工程。</p>\n<h5>dubbo.properties</h5>\n<pre><code>dubbo.metadata-report.address=zookeeper://127.0.0.1:2181\n</code></pre>\n<p>配置完成这个之后，其余的不用特别关注。也可以直接查看对应的provider和consumer端的服务信息。</p>\n<h5>provider存储的某个服务的内容：</h5>\n<pre><code>{\n &quot;parameters&quot;: {\n  &quot;valid&quot;: &quot;true&quot;,\n  &quot;async&quot;: &quot;true&quot;,\n  &quot;side&quot;: &quot;provider&quot;,\n  &quot;application&quot;: &quot;metadatareport-local-xml-provider&quot;,\n  &quot;methods&quot;: &quot;sayHello&quot;,\n  &quot;dubbo&quot;: &quot;2.0.2&quot;,\n  &quot;interface&quot;: &quot;org.apache.dubbo.samples.metadatareport.local.xml.api.DemoService&quot;,\n  &quot;generic&quot;: &quot;false&quot;,\n  &quot;anyhost&quot;: &quot;true&quot;\n },\n &quot;canonicalName&quot;: &quot;org.apache.dubbo.samples.metadatareport.local.xml.api.DemoService&quot;,\n &quot;codeSource&quot;: &quot;file:/Users/cvictory/workspace/work-mw/dubbo-samples/dubbo-samples-metadata-report/dubbo-samples-metadata-report-local-xml/target/classes/&quot;,\n &quot;methods&quot;: [{\n  &quot;name&quot;: &quot;sayHello&quot;,\n  &quot;parameterTypes&quot;: [&quot;java.lang.String&quot;],\n  &quot;returnType&quot;: &quot;java.lang.String&quot;\n }],\n &quot;types&quot;: [{\n  &quot;type&quot;: &quot;int&quot;\n }, {\n  &quot;type&quot;: &quot;char&quot;\n }, {\n  &quot;type&quot;: &quot;java.lang.String&quot;,\n  &quot;properties&quot;: {\n   &quot;value&quot;: {\n    &quot;type&quot;: &quot;char[]&quot;\n   },\n   &quot;hash&quot;: {\n    &quot;type&quot;: &quot;int&quot;\n   }\n  }\n }]\n}\n\n</code></pre>\n<h5>consumer端存储的内容：</h5>\n<pre><code>{\n &quot;valid&quot;: &quot;true&quot;,\n &quot;side&quot;: &quot;consumer&quot;,\n &quot;application&quot;: &quot;metadatareport-local-xml-consumer&quot;,\n &quot;methods&quot;: &quot;sayHello&quot;,\n &quot;dubbo&quot;: &quot;2.0.2&quot;,\n &quot;interface&quot;: &quot;org.apache.dubbo.samples.metadatareport.local.xml.api.DemoService&quot;\n}\n\n</code></pre>\n<h2>方式三：配置在项目中-annotation方式引入配置</h2>\n<p>参考sample：dubbo-samples-metadata-report/dubbo-samples-metadata-report-local-annotaion工程。</p>\n<h5>@Bean 引入bean</h5>\n<pre><code>@Bean\npublic MetadataReportConfig metadataReportConfig() {\n    MetadataReportConfig metadataReportConfig = new MetadataReportConfig();\n    metadataReportConfig.setAddress(&quot;zookeeper://127.0.0.1:2181&quot;);\n    return metadataReportConfig;\n}\n\n</code></pre>\n<p>引入Bean之后，其余的地方也不需要特别配置。直接查看对应的服务信息：</p>\n<h5>provider存储的某个服务的内容：</h5>\n<pre><code>{\n &quot;parameters&quot;: {\n  &quot;side&quot;: &quot;provider&quot;,\n  &quot;methods&quot;: &quot;sayHello&quot;,\n  &quot;dubbo&quot;: &quot;2.0.2&quot;,\n  &quot;interface&quot;: &quot;org.apache.dubbo.samples.metadatareport.local.annotation.api.AnnotationService&quot;,\n  &quot;version&quot;: &quot;1.1.8&quot;,\n  &quot;generic&quot;: &quot;false&quot;,\n  &quot;revision&quot;: &quot;1.1.8&quot;,\n  &quot;valid&quot;: &quot;true&quot;,\n  &quot;application&quot;: &quot;metadatareport-local-annotaion-provider&quot;,\n  &quot;default.timeout&quot;: &quot;1000&quot;,\n  &quot;group&quot;: &quot;d-test&quot;,\n  &quot;anyhost&quot;: &quot;true&quot;\n },\n &quot;canonicalName&quot;: &quot;org.apache.dubbo.samples.metadatareport.local.annotation.api.AnnotationService&quot;,\n &quot;codeSource&quot;: &quot;file:/Users/cvictory/workspace/work-mw/dubbo-samples/dubbo-samples-metadata-report/dubbo-samples-metadata-report-local-annotaion/target/classes/&quot;,\n &quot;methods&quot;: [{\n  &quot;name&quot;: &quot;sayHello&quot;,\n  &quot;parameterTypes&quot;: [&quot;java.lang.String&quot;],\n  &quot;returnType&quot;: &quot;java.lang.String&quot;\n }],\n &quot;types&quot;: [{\n  &quot;type&quot;: &quot;int&quot;\n }, {\n  &quot;type&quot;: &quot;java.lang.String&quot;,\n  &quot;properties&quot;: {\n   &quot;value&quot;: {\n    &quot;type&quot;: &quot;char[]&quot;\n   },\n   &quot;hash&quot;: {\n    &quot;type&quot;: &quot;int&quot;\n   }\n  }\n }, {\n  &quot;type&quot;: &quot;char&quot;\n }]\n}\n</code></pre>\n<h5>consumer端存储的内容：</h5>\n<pre><code>{\n &quot;valid&quot;: &quot;true&quot;,\n &quot;side&quot;: &quot;consumer&quot;,\n &quot;application&quot;: &quot;metadatareport-local-annotaion-consumer&quot;,\n &quot;methods&quot;: &quot;sayHello&quot;,\n &quot;dubbo&quot;: &quot;2.0.2&quot;,\n &quot;interface&quot;: &quot;org.apache.dubbo.samples.metadatareport.local.annotation.api.AnnotationService&quot;,\n &quot;version&quot;: &quot;1.1.8&quot;,\n &quot;revision&quot;: &quot;1.1.8&quot;,\n &quot;group&quot;: &quot;d-test&quot;\n}\n</code></pre>\n<h1>扩展</h1>\n<h2>SPI定义</h2>\n<p>参考：org.apache.dubbo.metadata.store.MetadataReportFactory ， org.apache.dubbo.metadata.store.MetadataReport</p>\n<pre><code>@SPI(&quot;redis&quot;)\npublic interface MetadataReportFactory {\n    @Adaptive({&quot;protocol&quot;})\n    MetadataReport getMetadataReport(URL url);\n}\n</code></pre>\n<h2>自定义元数据的存储</h2>\n<p>下面以Redis存储为例进行说明。</p>\n<p>新建一个project，需要支持以下修改：</p>\n<h4>扩展AbstractMetadataReport</h4>\n<pre><code>public class RedisMetadataReport extends AbstractMetadataReport {\n    private final static Logger logger = LoggerFactory.getLogger(RedisMetadataReport.class);\n    final JedisPool pool;\n\t\n    public RedisMetadataReport(URL url) {\n        super(url);\n        pool = new JedisPool(new JedisPoolConfig(), url.getHost(), url.getPort());\n    }\n    @Override\n    protected void doStoreProviderMetadata(ProviderMetadataIdentifier providerMetadataIdentifier, String serviceDefinitions) {\n        this.storeMetadata(providerMetadataIdentifier, serviceDefinitions);\n    }\n    @Override\n    protected void doStoreConsumerMetadata(ConsumerMetadataIdentifier consumerMetadataIdentifier, String value) {\n        this.storeMetadata(consumerMetadataIdentifier, value);\n    }\n    private void storeMetadata(MetadataIdentifier metadataIdentifier, String v) {\n        try (Jedis jedis = pool.getResource()) {\n            jedis.set(metadataIdentifier.getIdentifierKey() + META_DATA_SOTRE_TAG, v);\n        } catch (Throwable e) {\n            logger.error(&quot;Failed to put &quot; + metadataIdentifier + &quot; to redis &quot; + v + &quot;, cause: &quot; + e.getMessage(), e);\n            throw new RpcException(&quot;Failed to put &quot; + metadataIdentifier + &quot; to redis &quot; + v + &quot;, cause: &quot; + e.getMessage(), e);\n        }\n    }\n}\n</code></pre>\n<h4>扩展AbstractMetadataReportFactory</h4>\n<pre><code>public class RedisMetadataReportFactory extends AbstractMetadataReportFactory {\n    @Override\n    public MetadataReport createMetadataReport(URL url) {\n        return new RedisMetadataReport(url);\n    }\n}\n</code></pre>\n<h4>增加META-INF/dubbo/internal/org.apache.dubbo.metadata.store.MetadataReportFactory</h4>\n<pre><code>redis=org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory\n</code></pre>\n<p>只要将上面的修改和project打包成jar包，然后配置元数据中心的url：redis://10.20.153.10:6379。</p>\n<p>至此，一个自定义的元数据存储就可以运行了。\n<a href=\"http://ookeeper.md\">ookeeper.md</a>)</p>\n",
  "link": "/zh-cn/docs/user/references/metadata/introduction.html",
  "meta": {}
}