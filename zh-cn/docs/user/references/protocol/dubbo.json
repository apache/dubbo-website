{
  "filename": "dubbo.md",
  "__html": "<h1>dubbo://</h1>\n<p>Dubbo 缺省协议采用单一长连接和 NIO 异步通讯，适合于小数据量大并发的服务调用，以及服务消费者机器数远大于服务提供者机器数的情况。</p>\n<p>反之，Dubbo 缺省协议不适合传送大数据量的服务，比如传文件，传视频等，除非请求量很低。</p>\n<p><img src=\"../../sources/images/dubbo-protocol.jpg\" alt=\"dubbo-protocol.jpg\"></p>\n<ul>\n<li>Transporter: mina, netty, grizzy</li>\n<li>Serialization: dubbo, hessian2, java, json</li>\n<li>Dispatcher: all, direct, message, execution, connection</li>\n<li>ThreadPool: fixed, cached</li>\n</ul>\n<h2>特性</h2>\n<p>缺省协议，使用基于 mina <code>1.1.7</code> 和 hessian <code>3.2.1</code> 的 tbremoting 交互。</p>\n<ul>\n<li>连接个数：单连接</li>\n<li>连接方式：长连接</li>\n<li>传输协议：TCP</li>\n<li>传输方式：NIO 异步传输</li>\n<li>序列化：Hessian 二进制序列化</li>\n<li>适用范围：传入传出参数数据包较小（建议小于100K），消费者比提供者个数多，单一消费者无法压满提供者，尽量不要用 dubbo 协议传输大文件或超大字符串。</li>\n<li>适用场景：常规远程服务方法调用</li>\n</ul>\n<h2>约束</h2>\n<ul>\n<li>参数及返回值需实现 <code>Serializable</code> 接口</li>\n<li>参数及返回值不能自定义实现 <code>List</code>, <code>Map</code>, <code>Number</code>, <code>Date</code>, <code>Calendar</code> 等接口，只能用 JDK 自带的实现，因为 hessian 会做特殊处理，自定义实现类中的属性值都会丢失。</li>\n<li>Hessian 序列化，只传成员属性值和值的类型，不传方法或静态变量，兼容情况 <sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup><sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup>：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>数据通讯</th>\n<th>情况</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A-&gt;B</td>\n<td>类A多一种 属性（或者说类B少一种 属性）</td>\n<td>不抛异常，A多的那 个属性的值，B没有， 其他正常</td>\n</tr>\n<tr>\n<td>A-&gt;B</td>\n<td>枚举A多一种 枚举（或者说B少一种 枚举），A使用多 出来的枚举进行传输</td>\n<td>抛异常</td>\n</tr>\n<tr>\n<td>A-&gt;B</td>\n<td>枚举A多一种 枚举（或者说B少一种 枚举），A不使用 多出来的枚举进行传输</td>\n<td>不抛异常，B正常接 收数据</td>\n</tr>\n<tr>\n<td>A-&gt;B</td>\n<td>A和B的属性 名相同，但类型不相同</td>\n<td>抛异常</td>\n</tr>\n<tr>\n<td>A-&gt;B</td>\n<td>serialId 不相同</td>\n<td>正常传输</td>\n</tr>\n</tbody>\n</table>\n<p>接口增加方法，对客户端无影响，如果该方法不是客户端需要的，客户端不需要重新部署。输入参数和结果集中增加属性，对客户端无影响，如果客户端并不需要新属性，不用重新部署。</p>\n<p>输入参数和结果集属性名变化，对客户端序列化无影响，但是如果客户端不重新部署，不管输入还是输出，属性名变化的属性值是获取不到的。</p>\n<p>总结：服务器端和客户端对领域对象并不需要完全一致，而是按照最大匹配原则。</p>\n<h2>配置</h2>\n<p>配置协议：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:protocol</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo\"</span> <span class=\"hljs-attr\">port</span>=<span class=\"hljs-string\">\"20880\"</span> /&gt;</span>\n</code></pre>\n<p>设置默认协议：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:provider</span> <span class=\"hljs-attr\">protocol</span>=<span class=\"hljs-string\">\"dubbo\"</span> /&gt;</span>\n</code></pre>\n<p>设置服务协议：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">protocol</span>=<span class=\"hljs-string\">\"dubbo\"</span> /&gt;</span>\n</code></pre>\n<p>多端口：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:protocol</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"dubbo1\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo\"</span> <span class=\"hljs-attr\">port</span>=<span class=\"hljs-string\">\"20880\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:protocol</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"dubbo2\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo\"</span> <span class=\"hljs-attr\">port</span>=<span class=\"hljs-string\">\"20881\"</span> /&gt;</span>\n</code></pre>\n<p>配置协议选项：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:protocol</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">“dubbo”</span> <span class=\"hljs-attr\">port</span>=<span class=\"hljs-string\">“9090”</span> <span class=\"hljs-attr\">server</span>=<span class=\"hljs-string\">“netty”</span> <span class=\"hljs-attr\">client</span>=<span class=\"hljs-string\">“netty”</span> <span class=\"hljs-attr\">codec</span>=<span class=\"hljs-string\">“dubbo”</span> <span class=\"hljs-attr\">serialization</span>=<span class=\"hljs-string\">“hessian2”</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">“UTF-8”</span> <span class=\"hljs-attr\">threadpool</span>=<span class=\"hljs-string\">“fixed”</span> <span class=\"hljs-attr\">threads</span>=<span class=\"hljs-string\">“100”</span> <span class=\"hljs-attr\">queues</span>=<span class=\"hljs-string\">“0”</span> <span class=\"hljs-attr\">iothreads</span>=<span class=\"hljs-string\">“9”</span> <span class=\"hljs-attr\">buffer</span>=<span class=\"hljs-string\">“8192”</span> <span class=\"hljs-attr\">accepts</span>=<span class=\"hljs-string\">“1000”</span> <span class=\"hljs-attr\">payload</span>=<span class=\"hljs-string\">“8388608”</span> /&gt;</span>\n</code></pre>\n<p>多连接配置：</p>\n<p>Dubbo 协议缺省每服务每提供者每消费者使用单一长连接，如果数据量较大，可以使用多个连接。</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">connections</span>=<span class=\"hljs-string\">\"1\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:reference</span> <span class=\"hljs-attr\">connections</span>=<span class=\"hljs-string\">\"1\"</span>/&gt;</span>\n</code></pre>\n<ul>\n<li><code>&lt;dubbo:service connections=&quot;0&quot;&gt;</code> 或 <code>&lt;dubbo:reference connections=&quot;0&quot;&gt;</code> 表示该服务使用 JVM 共享长连接。<strong>缺省</strong></li>\n<li><code>&lt;dubbo:service connections=&quot;1&quot;&gt;</code> 或 <code>&lt;dubbo:reference connections=&quot;1&quot;&gt;</code> 表示该服务使用独立长连接。</li>\n<li><code>&lt;dubbo:service connections=&quot;2&quot;&gt;</code> 或<code>&lt;dubbo:reference connections=&quot;2&quot;&gt;</code> 表示该服务使用独立两条长连接。</li>\n</ul>\n<p>为防止被大量连接撑挂，可在服务提供方限制大接收连接数，以实现服务提供方自我保护。</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:protocol</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo\"</span> <span class=\"hljs-attr\">accepts</span>=<span class=\"hljs-string\">\"1000\"</span> /&gt;</span>\n</code></pre>\n<p><code>dubbo.properties</code> 配置：</p>\n<pre><code class=\"language-sh\">dubbo.service.protocol=dubbo\n</code></pre>\n<h2>常见问题</h2>\n<h4>为什么要消费者比提供者个数多?</h4>\n<p>因 dubbo 协议采用单一长连接，假设网络为千兆网卡 <sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup>，根据测试经验数据每条连接最多只能压满 7MByte(不同的环境可能不一样，供参考)，理论上 1 个服务提供者需要 20 个服务消费者才能压满网卡。</p>\n<h4>为什么不能传大包?</h4>\n<p>因 dubbo 协议采用单一长连接，如果每次请求的数据包大小为 500KByte，假设网络为千兆网卡 <sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3:1\">[3:1]</a></sup>，每条连接最大 7MByte(不同的环境可能不一样，供参考)，单个服务提供者的 TPS(每秒处理事务数)最大为：128MByte / 500KByte = 262。单个消费者调用单个服务提供者的 TPS(每秒处理事务数)最大为：7MByte / 500KByte = 14。如果能接受，可以考虑使用，否则网络将成为瓶颈。</p>\n<h4>为什么采用异步单一长连接?</h4>\n<p>因为服务的现状大都是服务提供者少，通常只有几台机器，而服务的消费者多，可能整个网站都在访问该服务，比如 Morgan 的提供者只有 6 台提供者，却有上百台消费者，每天有 1.5 亿次调用，如果采用常规的 hessian 服务，服务提供者很容易就被压跨，通过单一连接，保证单一消费者不会压死提供者，长连接，减少连接握手验证等，并使用异步 IO，复用线程池，防止 C10K 问题。</p>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>由吴亚军提供 <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p>总结：会抛异常的情况：枚举值一边多一种，一边少一种，正好使用了差别的那种，或者属性名相同，类型不同 <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p>1024Mbit=128MByte <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a> <a href=\"#fnref3:1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n"
}