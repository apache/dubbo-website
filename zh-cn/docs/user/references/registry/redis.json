{
  "filename": "redis.md",
  "__html": "<h1>Redis 注册中心</h1>\n<p>基于 Redis <sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup> 实现的注册中心 <sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup>。</p>\n<p><img src=\"../../sources/images/dubbo-redis-registry.jpg\" alt=\"/user-guide/images/dubbo-redis-registry.jpg\"></p>\n<p>使用 Redis 的 Key/Map 结构存储数据结构：</p>\n<ul>\n<li>主 Key 为服务名和类型</li>\n<li>Map 中的 Key 为 URL 地址</li>\n<li>Map 中的 Value 为过期时间，用于判断脏数据，脏数据由监控中心删除 <sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup></li>\n</ul>\n<p>使用 Redis 的 Publish/Subscribe 事件通知数据变更：</p>\n<ul>\n<li>通过事件的值区分事件类型：<code>register</code>, <code>unregister</code>, <code>subscribe</code>, <code>unsubscribe</code></li>\n<li>普通消费者直接订阅指定服务提供者的 Key，只会收到指定服务的 <code>register</code>, <code>unregister</code> 事件</li>\n<li>监控中心通过 <code>psubscribe</code> 功能订阅 <code>/dubbo/*</code>，会收到所有服务的所有变更事件</li>\n</ul>\n<p>调用过程：</p>\n<ol start=\"0\">\n<li>服务提供方启动时，向 <code>Key:/dubbo/com.foo.BarService/providers</code> 下，添加当前提供者的地址</li>\n<li>并向 <code>Channel:/dubbo/com.foo.BarService/providers</code> 发送 <code>register</code> 事件</li>\n<li>服务消费方启动时，从 <code>Channel:/dubbo/com.foo.BarService/providers</code> 订阅 <code>register</code> 和 <code>unregister</code> 事件</li>\n<li>并向 <code>Key:/dubbo/com.foo.BarService/consumers</code> 下，添加当前消费者的地址</li>\n<li>服务消费方收到 <code>register</code> 和 <code>unregister</code> 事件后，从 <code>Key:/dubbo/com.foo.BarService/providers</code> 下获取提供者地址列表</li>\n<li>服务监控中心启动时，从 <code>Channel:/dubbo/*</code> 订阅 <code>register</code> 和 <code>unregister</code>，以及 <code>subscribe</code> 和<code>unsubsribe</code>事件</li>\n<li>服务监控中心收到 <code>register</code> 和 <code>unregister</code> 事件后，从 <code>Key:/dubbo/com.foo.BarService/providers</code> 下获取提供者地址列表</li>\n<li>服务监控中心收到 <code>subscribe</code> 和 <code>unsubsribe</code> 事件后，从 <code>Key:/dubbo/com.foo.BarService/consumers</code> 下获取消费者地址列表</li>\n</ol>\n<h2>配置</h2>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"redis://10.20.153.10:6379\"</span> /&gt;</span>\n</code></pre>\n<p>或</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"redis://10.20.153.10:6379?backup=10.20.153.11:6379,10.20.153.12:6379\"</span> /&gt;</span>\n</code></pre>\n<p>或</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">protocol</span>=<span class=\"hljs-string\">\"redis\"</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"10.20.153.10:6379\"</span> /&gt;</span>\n</code></pre>\n<p>或</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">protocol</span>=<span class=\"hljs-string\">\"redis\"</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"10.20.153.10:6379,10.20.153.11:6379,10.20.153.12:6379\"</span> /&gt;</span>\n</code></pre>\n<h2>选项</h2>\n<ul>\n<li>可通过 <code>&lt;dubbo:registry group=&quot;dubbo&quot; /&gt;</code> 设置 redis 中 key 的前缀，缺省为 <code>dubbo</code>。</li>\n<li>可通过 <code>&lt;dubbo:registry cluster=&quot;replicate&quot; /&gt;</code> 设置 redis 集群策略，缺省为 <code>failover</code>：\n<ul>\n<li><code>failover</code>: 只写入和读取任意一台，失败时重试另一台，需要服务器端自行配置数据同步</li>\n<li><code>replicate</code>: 在客户端同时写入所有服务器，只读取单台，服务器端不需要同步，注册中心集群增大，性能压力也会更大</li>\n</ul>\n</li>\n</ul>\n<h2>可靠性声明</h2>\n<p>阿里内部并没有采用 Redis 做为注册中心，而是使用自己实现的基于数据库的注册中心，即：Redis 注册中心并没有在阿里内部长时间运行的可靠性保障，此 Redis 桥接实现只为开源版本提供，其可靠性依赖于 Redis 本身的可靠性。</p>\n<h2>安装</h2>\n<p>安装方式参见: <a href=\"../../../admin/install/redis.md\">Redis安装手册</a>，只需搭一个原生的 Redis 服务器，并将 <a href=\"../../preface/usage.md\">Quick Start</a> 中 Provider 和 Consumer 里的 <code>conf/dubbo.properties</code> 中的 <code>dubbo.registry.addrss</code> 的值改为 <code>redis://127.0.0.1:6379</code> 即可使用。</p>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><a href=\"http://redis.io\">Redis</a> 是一个高效的 KV 存储服务器 <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p>从 <code>2.1.0</code> 版本开始支持 <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p>Redis 过期数据通过心跳的方式检测脏数据，服务器时间必须同步，并且对服务器有一定压力，否则过期检测会不准确 <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
  "link": "/zh-cn/docs/user/references/registry/redis.html",
  "meta": {}
}