{
  "filename": "serialization.md",
  "__html": "<h1>在Dubbo中使用高效的Java序列化（Kryo和FST）</h1>\n<p><strong>作者：沈理</strong></p>\n<p><strong>文档版权：<a href=\"http://www.apache.org/licenses/LICENSE-2.0\">Apache 2.0许可证 署名-禁止演绎</a></strong></p>\n<p>完善中……</p>\n<p>TODO 生成可点击的目录</p>\n<h2>目录</h2>\n<ul>\n<li>序列化漫谈</li>\n<li>启用Kryo和FST</li>\n<li>注册被序列化类</li>\n<li>无参构造函数和Serializable接口</li>\n<li>序列化性能分析与测试\n<ul>\n<li>测试环境</li>\n<li>测试脚本</li>\n<li>Dubbo RPC中不同序列化生成字节大小比较</li>\n<li>Dubbo RPC中不同序列化响应时间和吞吐量对比</li>\n</ul>\n</li>\n<li>未来</li>\n</ul>\n<h2>序列化漫谈</h2>\n<p>dubbo RPC是dubbo体系中最核心的一种高性能、高吞吐量的远程调用方式，我喜欢称之为多路复用的TCP长连接调用，简单的说：</p>\n<ul>\n<li>长连接：避免了每次调用新建TCP连接，提高了调用的响应速度</li>\n<li>多路复用：单个TCP连接可交替传输多个请求和响应的消息，降低了连接的等待闲置时间，从而减少了同样并发数下的网络连接数，提高了系统吞吐量。</li>\n</ul>\n<p>dubbo RPC主要用于两个dubbo系统之间作远程调用，特别适合高并发、小数据的互联网场景。</p>\n<p>而序列化对于远程调用的响应速度、吞吐量、网络带宽消耗等同样也起着至关重要的作用，是我们提升分布式系统性能的最关键因素之一。</p>\n<p>在dubbo RPC中，同时支持多种序列化方式，例如：</p>\n<ol>\n<li>dubbo序列化：阿里尚未开发成熟的高效java序列化实现，阿里不建议在生产环境使用它</li>\n<li>hessian2序列化：hessian是一种跨语言的高效二进制序列化方式。但这里实际不是原生的hessian2序列化，而是阿里修改过的hessian lite，它是dubbo RPC默认启用的序列化方式</li>\n<li>json序列化：目前有两种实现，一种是采用的阿里的fastjson库，另一种是采用dubbo中自己实现的简单json库，但其实现都不是特别成熟，而且json这种文本序列化性能一般不如上面两种二进制序列化。</li>\n<li>java序列化：主要是采用JDK自带的Java序列化实现，性能很不理想。</li>\n</ol>\n<p>在通常情况下，这四种主要序列化方式的性能从上到下依次递减。对于dubbo RPC这种追求高性能的远程调用方式来说，实际上只有1、2两种高效序列化方式比较般配，而第1个dubbo序列化由于还不成熟，所以实际只剩下2可用，所以dubbo RPC默认采用hessian2序列化。</p>\n<p>但hessian是一个比较老的序列化实现了，而且它是跨语言的，所以不是单独针对java进行优化的。而dubbo RPC实际上完全是一种Java to Java的远程调用，其实没有必要采用跨语言的序列化方式（当然肯定也不排斥跨语言的序列化）。</p>\n<p>最近几年，各种新的高效序列化方式层出不穷，不断刷新序列化性能的上限，最典型的包括：</p>\n<ul>\n<li>专门针对Java语言的：Kryo，FST等等</li>\n<li>跨语言的：Protostuff，ProtoBuf，Thrift，Avro，MsgPack等等</li>\n</ul>\n<p>这些序列化方式的性能多数都显著优于hessian2（甚至包括尚未成熟的dubbo序列化）。</p>\n<p>有鉴于此，我们为dubbo引入Kryo和FST这两种高效Java序列化实现，来逐步取代hessian2。</p>\n<p>其中，Kryo是一种非常成熟的序列化实现，已经在Twitter、Groupon、Yahoo以及多个著名开源项目（如Hive、Storm）中广泛的使用。而FST是一种较新的序列化实现，目前还缺乏足够多的成熟使用案例，但我认为它还是非常有前途的。</p>\n<p>在面向生产环境的应用中，我建议目前更优先选择Kryo。</p>\n<h2>启用Kryo和FST</h2>\n<p>使用Kryo和FST非常简单，只需要在dubbo RPC的XML配置中添加一个属性即可：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:protocol</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo\"</span> <span class=\"hljs-attr\">serialization</span>=<span class=\"hljs-string\">\"kryo\"</span>/&gt;</span>\n</code></pre>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:protocol</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo\"</span> <span class=\"hljs-attr\">serialization</span>=<span class=\"hljs-string\">\"fst\"</span>/&gt;</span>\n</code></pre>\n<h2>注册被序列化类</h2>\n<p>要让Kryo和FST完全发挥出高性能，最好将那些需要被序列化的类注册到dubbo系统中，例如，我们可以实现如下回调接口：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SerializationOptimizerImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">SerializationOptimizer</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Collection&lt;Class&gt; <span class=\"hljs-title\">getSerializableClasses</span><span class=\"hljs-params\">()</span> </span>{\n        List&lt;Class&gt; classes = <span class=\"hljs-keyword\">new</span> LinkedList&lt;Class&gt;();\n        classes.add(BidRequest.class);\n        classes.add(BidResponse.class);\n        classes.add(Device.class);\n        classes.add(Geo.class);\n        classes.add(Impression.class);\n        classes.add(SeatBid.class);\n        <span class=\"hljs-keyword\">return</span> classes;\n    }\n}\n</code></pre>\n<p>然后在XML配置中添加：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:protocol</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo\"</span> <span class=\"hljs-attr\">serialization</span>=<span class=\"hljs-string\">\"kryo\"</span> <span class=\"hljs-attr\">optimizer</span>=<span class=\"hljs-string\">\"org.apache.dubbo.demo.SerializationOptimizerImpl\"</span>/&gt;</span>\n</code></pre>\n<p>在注册这些类后，序列化的性能可能被大大提升，特别针对小数量的嵌套对象的时候。</p>\n<p>当然，在对一个类做序列化的时候，可能还级联引用到很多类，比如Java集合类。针对这种情况，我们已经自动将JDK中的常用类进行了注册，所以你不需要重复注册它们（当然你重复注册了也没有任何影响），包括：</p>\n<pre><code>GregorianCalendar\nInvocationHandler\nBigDecimal\nBigInteger\nPattern\nBitSet\nURI\nUUID\nHashMap\nArrayList\nLinkedList\nHashSet\nTreeSet\nHashtable\nDate\nCalendar\nConcurrentHashMap\nSimpleDateFormat\nVector\nBitSet\nStringBuffer\nStringBuilder\nObject\nObject[]\nString[]\nbyte[]\nchar[]\nint[]\nfloat[]\ndouble[]\n</code></pre>\n<p>由于注册被序列化的类仅仅是出于性能优化的目的，所以即使你忘记注册某些类也没有关系。事实上，即使不注册任何类，Kryo和FST的性能依然普遍优于hessian和dubbo序列化。</p>\n<blockquote>\n<p>当然，有人可能会问为什么不用配置文件来注册这些类？这是因为要注册的类往往数量较多，导致配置文件冗长；而且在没有好的IDE支持的情况下，配置文件的编写和重构都比java类麻烦得多；最后，这些注册的类一般是不需要在项目编译打包后还需要做动态修改的。</p>\n</blockquote>\n<blockquote>\n<p>另外，有人也会觉得手工注册被序列化的类是一种相对繁琐的工作，是不是可以用annotation来标注，然后系统来自动发现并注册。但这里annotation的局限是，它只能用来标注你可以修改的类，而很多序列化中引用的类很可能是你没法做修改的（比如第三方库或者JDK系统类或者其他项目的类）。另外，添加annotation毕竟稍微的“污染”了一下代码，使应用代码对框架增加了一点点的依赖性。</p>\n</blockquote>\n<blockquote>\n<p>除了annotation，我们还可以考虑用其它方式来自动注册被序列化的类，例如扫描类路径，自动发现实现Serializable接口（甚至包括Externalizable）的类并将它们注册。当然，我们知道类路径上能找到Serializable类可能是非常多的，所以也可以考虑用package前缀之类来一定程度限定扫描范围。</p>\n</blockquote>\n<blockquote>\n<p>当然，在自动注册机制中，特别需要考虑如何保证服务提供端和消费端都以同样的顺序（或者ID）来注册类，避免错位，毕竟两端可被发现然后注册的类的数量可能都是不一样的。</p>\n</blockquote>\n<h2>无参构造函数和Serializable接口</h2>\n<p>如果被序列化的类中不包含无参的构造函数，则在Kryo的序列化中，性能将会大打折扣，因为此时我们在底层将用Java的序列化来透明的取代Kryo序列化。所以，尽可能为每一个被序列化的类添加无参构造函数是一种最佳实践（当然一个java类如果不自定义构造函数，默认就有无参构造函数）。</p>\n<p>另外，Kryo和FST本来都不需要被序列化都类实现Serializable接口，但我们还是建议每个被序列化类都去实现它，因为这样可以保持和Java序列化以及dubbo序列化的兼容性，另外也使我们未来采用上述某些自动注册机制带来可能。</p>\n<h2>序列化性能分析与测试</h2>\n<p>本文我们主要讨论的是序列化，但在做性能分析和测试的时候我们并不单独处理每种序列化方式，而是把它们放到dubbo RPC中加以对比，因为这样更有现实意义。</p>\n<h3>测试环境</h3>\n<p>粗略如下：</p>\n<ul>\n<li>两台独立服务器</li>\n<li>4核Intel(R) Xeon(R) CPU E5-2603 0 @ 1.80GHz</li>\n<li>8G内存</li>\n<li>虚拟机之间网络通过百兆交换机</li>\n<li>CentOS 5</li>\n<li>JDK 7</li>\n<li>Tomcat 7</li>\n<li>JVM参数-server -Xms1g -Xmx1g -XX:PermSize=64M -XX:+UseConcMarkSweepGC</li>\n</ul>\n<p>当然这个测试环境较有局限，故当前测试结果未必有非常权威的代表性。</p>\n<h3>测试脚本</h3>\n<p>和dubbo自身的基准测试保持接近：</p>\n<p>10个并发客户端持续不断发出请求：</p>\n<ul>\n<li>传入嵌套复杂对象（但单个数据量很小），不做任何处理，原样返回</li>\n<li>传入50K字符串，不做任何处理，原样返回（TODO：结果尚未列出）</li>\n</ul>\n<p>进行5分钟性能测试。（引用dubbo自身测试的考虑：“主要考察序列化和网络IO的性能，因此服务端无任何业务逻辑。取10并发是考虑到http协议在高并发下对CPU的使用率较高可能会先打到瓶颈。”）</p>\n<h3>Dubbo RPC中不同序列化生成字节大小比较</h3>\n<p>序列化生成字节码的大小是一个比较有确定性的指标，它决定了远程调用的网络传输时间和带宽占用。</p>\n<p>针对复杂对象的结果如下（数值越小越好）：</p>\n<table>\n<thead>\n<tr>\n<th>序列化实现</th>\n<th>请求字节数</th>\n<th>响应字节数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Kryo</td>\n<td>272</td>\n<td>90</td>\n</tr>\n<tr>\n<td>FST</td>\n<td>288</td>\n<td>96</td>\n</tr>\n<tr>\n<td>Dubbo Serialization</td>\n<td>430</td>\n<td>186</td>\n</tr>\n<tr>\n<td>Hessian</td>\n<td>546</td>\n<td>329</td>\n</tr>\n<tr>\n<td>FastJson</td>\n<td>461</td>\n<td>218</td>\n</tr>\n<tr>\n<td>Json</td>\n<td>657</td>\n<td>409</td>\n</tr>\n<tr>\n<td>Java Serialization</td>\n<td>963</td>\n<td>630</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"images/bytes.png\" alt=\"no image found\"></p>\n<h3>Dubbo RPC中不同序列化响应时间和吞吐量对比</h3>\n<table>\n<thead>\n<tr>\n<th>远程调用方式</th>\n<th>平均响应时间</th>\n<th>平均TPS（每秒事务数）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>REST: Jetty + JSON</td>\n<td>7.806</td>\n<td>1280</td>\n</tr>\n<tr>\n<td>REST: Jetty + JSON + GZIP</td>\n<td>TODO</td>\n<td>TODO</td>\n</tr>\n<tr>\n<td>REST: Jetty + XML</td>\n<td>TODO</td>\n<td>TODO</td>\n</tr>\n<tr>\n<td>REST: Jetty + XML + GZIP</td>\n<td>TODO</td>\n<td>TODO</td>\n</tr>\n<tr>\n<td>REST: Tomcat + JSON</td>\n<td>2.082</td>\n<td>4796</td>\n</tr>\n<tr>\n<td>REST: Netty + JSON</td>\n<td>2.182</td>\n<td>4576</td>\n</tr>\n<tr>\n<td>Dubbo: FST</td>\n<td>1.211</td>\n<td>8244</td>\n</tr>\n<tr>\n<td>Dubbo: kyro</td>\n<td>1.182</td>\n<td>8444</td>\n</tr>\n<tr>\n<td>Dubbo: dubbo serialization</td>\n<td>1.43</td>\n<td>6982</td>\n</tr>\n<tr>\n<td>Dubbo: hessian2</td>\n<td>1.49</td>\n<td>6701</td>\n</tr>\n<tr>\n<td>Dubbo: fastjson</td>\n<td>1.572</td>\n<td>6352</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"images/rt.png\" alt=\"no image found\"></p>\n<p><img src=\"images/tps.png\" alt=\"no image found\"></p>\n<h3>测试总结</h3>\n<p>就目前结果而言，我们可以看到不管从生成字节的大小，还是平均响应时间和平均TPS，Kryo和FST相比Dubbo RPC中原有的序列化方式都有非常显著的改进。</p>\n<h2>未来</h2>\n<p>未来，当Kryo或者FST在dubbo中当应用足够成熟之后，我们很可能会将dubbo RPC的默认序列化从hessian2改为它们中间的某一个。</p>\n",
  "link": "/zh-cn/docs/user/serialization.html",
  "meta": {}
}