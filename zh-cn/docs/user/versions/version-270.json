{
  "filename": "version-270.md",
  "__html": "<h1>升级与可能的兼容性问题总结</h1>\n<p>环境要求：需要<strong>Java 8</strong>及以上版本。</p>\n<p>2.7.0版本在改造的过程中遵循了一个原则，即<strong>保持与低版本的兼容性，因此从功能层面来说它是与2.6.x及更低版本完全兼容的</strong>，而接下来将要提到的兼容性问题主要是<a href=\"#%E5%8C%85%E5%90%8D%E6%94%B9%E9%80%A0\">包重命名</a>带来的。另外，虽然功能用法保持向后兼容，但参考本文能帮助您尽快用到2.7.0版本的新特性。</p>\n<h2>升级步骤</h2>\n<ol>\n<li>升级pom到2.7.0（以all-in-one依赖为例）。</li>\n</ol>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">properties</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo.version</span>&gt;</span>2.7.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dubbo.version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">properties</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencyManagement</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.dubbo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>dubbo-dependencies-bom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${dubbo.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">type</span>&gt;</span>pom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">type</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>import<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencyManagement</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.dubbo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>dubbo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>${dubbo.version}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>io.netty<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>netty-all<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span>\n</code></pre>\n<p>如果升级依赖后出现API或SPI扩展相关的编译错误，请参考<a href=\"#%E5%8C%85%E5%90%8D%E6%94%B9%E9%80%A0\">包兼容性问题</a></p>\n<p>此时重新部署应用，所有默认行为和2.6.x保持一致，如果要用到2.7的新特性，则需要继续做以下配置（可选）：</p>\n<ul>\n<li>简化的URL</li>\n<li>配置元数据中心</li>\n<li>使用外部化配置</li>\n<li>服务治理规则</li>\n<li>使用异步API</li>\n</ul>\n<p>下面我们就对这几部分的配置分别做详细说明。</p>\n<h4>简化的URL</h4>\n<pre><code class=\"language-xml\"><span class=\"hljs-comment\">&lt;!-- simplified=\"true\"表示注册简化版的URL到Registry --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"zookeeper://127.0.0.1:2181\"</span> <span class=\"hljs-attr\">simplified</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n</code></pre>\n<pre><code class=\"language-properties\"><span class=\"hljs-meta\">dubbo.registry.simplified</span>=<span class=\"hljs-string\">true</span>\n</code></pre>\n<p>建议将此配置集中管理，参考<a href=\"#%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8%E5%8C%96%E9%85%8D%E7%BD%AE\">外部化配置</a>。</p>\n<blockquote>\n<p>URL简化只是剔除了一些纯粹的查询用的参数，并没有做大刀阔斧的服务发现模型改造，因此精简后的URL完全可以被2.6及以下版本的消费端实现服务发现与调用，同样2.7版本也可以发现和调用低版本的提供者。</p>\n</blockquote>\n<h4>配置元数据中心</h4>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:metadata-report</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"redis://127.0.0.1:6379\"</span>/&gt;</span>\n</code></pre>\n<pre><code class=\"language-properties\"><span class=\"hljs-meta\">dubbo.metadataReport.address</span>=<span class=\"hljs-string\">redis://127.0.0.1:6379</span>\n</code></pre>\n<p>建议将此配置集中管理，参考<a href=\"#%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8%E5%8C%96%E9%85%8D%E7%BD%AE\">外部化配置</a>。\n在此了解更多<a href=\"\">元数据中心</a>设计目的与用途。</p>\n<h4>使用外部化配置</h4>\n<p>需要在项目启动前，使用<a href=\"https://github.com/apache/dubbo-ops\">最新版本Dubbo-OPS</a>完成外部化配置迁移，理论上配置中心支持所有本地dubbo.properties所支持的配置项。</p>\n<p>以XML开发形式为例，假设我们本地有如下配置：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:application</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"demo-provider\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:config-center</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"zookeeper://127.0.0.1:2181\"</span>/&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:registry</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"zookeeper://127.0.0.1:2181\"</span> <span class=\"hljs-attr\">simplified</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:metadata-report</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"redis://127.0.0.1:6379\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:protocol</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dubbo\"</span> <span class=\"hljs-attr\">port</span>=<span class=\"hljs-string\">\"20880\"</span>/&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"demoService\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.apache.dubbo.samples.basic.impl.DemoServiceImpl\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"org.apache.dubbo.samples.basic.api.DemoService\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"demoService\"</span>/&gt;</span>\n</code></pre>\n<p>通过<a href=\"http://47.91.207.147/#/management?key=global\">OPS控制台</a>将以下全局配置迁移到配置中心，成为所有应用共享的配置。</p>\n<pre><code class=\"language-properties\"><span class=\"hljs-meta\">dubbo.registry.address</span>=<span class=\"hljs-string\">zookeeper://127.0.0.1:2181</span>\n<span class=\"hljs-meta\">dubbo.registry.simplified</span>=<span class=\"hljs-string\">true</span>\n\n<span class=\"hljs-meta\">dubbo.metadataReport.address</span>=<span class=\"hljs-string\">redis://127.0.0.1:6379</span>\n\n<span class=\"hljs-meta\">dubbo.protocol.name</span>=<span class=\"hljs-string\">dubbo</span>\n<span class=\"hljs-meta\">dubbo.protocol.port</span>=<span class=\"hljs-string\">20880</span>\n</code></pre>\n<p>这样应用开发者只需要关心配置中心的配置。</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:application</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"demo-provider\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:config-center</span> <span class=\"hljs-attr\">address</span>=<span class=\"hljs-string\">\"zookeeper://127.0.0.1:2181\"</span>/&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"demoService\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.apache.dubbo.samples.basic.impl.DemoServiceImpl\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"org.apache.dubbo.samples.basic.api.DemoService\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"demoService\"</span>/&gt;</span>\n</code></pre>\n<p>这里增加了一篇<a href=\"\">Dubbo配置方式</a>的说明文档，详细描述了Dubbo当前支持的配置类型、不同配置之间的覆盖关系等。</p>\n<h4>服务治理规则迁移</h4>\n<p>2.7版本可以读取到老的治理规则，因此不用担心升级2.7的应用后老规则会失效，可以选择先升级上线，再慢慢的做增量式规则迁移。</p>\n<p>请参考<a href=\"http://47.91.207.147/#/governance/routingRule\">OPS -&gt; 服务治理</a>了解规则配置方式，这里我们重点关注的是规则格式，以下提供几个简单示例：</p>\n<ul>\n<li>\n<p>条件路由</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">scope:</span> <span class=\"hljs-string\">application</span>\n<span class=\"hljs-attr\">force:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">runtime:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">governance-conditionrouter-consumer</span>\n<span class=\"hljs-attr\">conditions:</span>\n<span class=\"hljs-bullet\">  -</span> <span class=\"hljs-string\">application=app1</span> <span class=\"hljs-string\">=&gt;</span> <span class=\"hljs-string\">address=*:20880</span>\n<span class=\"hljs-bullet\">  -</span> <span class=\"hljs-string\">application=app2</span> <span class=\"hljs-string\">=&gt;</span> <span class=\"hljs-string\">address=*:20881</span>\n<span class=\"hljs-string\">...</span>\n</code></pre>\n</li>\n<li>\n<p>标签路由</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">force:</span> <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-attr\">runtime:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">governance-tagrouter-provider</span>\n<span class=\"hljs-attr\">tags:</span>\n<span class=\"hljs-attr\">  - name:</span> <span class=\"hljs-string\">tag1</span>\n<span class=\"hljs-attr\">    addresses:</span> <span class=\"hljs-string\">[\"127.0.0.1:20880\"]</span>\n<span class=\"hljs-attr\">  - name:</span> <span class=\"hljs-string\">tag2</span>\n<span class=\"hljs-attr\">    addresses:</span> <span class=\"hljs-string\">[\"127.0.0.1:20881\"]</span>\n<span class=\"hljs-string\">...</span>\n</code></pre>\n</li>\n<li>\n<p>动态配置（覆盖规则）</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">scope:</span> <span class=\"hljs-string\">service</span>\n<span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">org.apache.dubbo.samples.governance.api.DemoService</span>\n<span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">configs:</span>\n<span class=\"hljs-attr\">- addresses:</span> <span class=\"hljs-string\">[0.0.0.0]</span>\n<span class=\"hljs-attr\">  side:</span> <span class=\"hljs-string\">consumer</span>\n<span class=\"hljs-attr\">  parameters:</span>\n<span class=\"hljs-attr\">    timeout:</span> <span class=\"hljs-number\">6000</span>\n<span class=\"hljs-string\">...</span>\n</code></pre>\n</li>\n</ul>\n<p>关于治理规则更多详细说明，请参考<a href=\"/docs/zh-cn/user/demos/routing-rule.md\">路由规则</a>和<a href=\"/docs/zh-cn/user/demos/config-rule.md\">覆盖规则</a>用户文档。</p>\n<p>也可继续了解<a href=\"https://github.com/apache/dubbo-samples/tree/master/dubbo-samples-governance\">使用示例</a>。</p>\n<h4>使用异步API</h4>\n<p>这部分的接口和低版本同样是完全兼容的，你仅须在打算使用CompletableFuture<T>提供的回调或者异步组装能力时，再考虑升级这部分内容即可。</p>\n<ul>\n<li>\n<p>定义CompletableFuture<T>类型接口</p>\n</li>\n<li>\n<p>同步签名接口实现Provider端异步执行</p>\n</li>\n<li>\n<p>感知异步返回值的Filter链路</p>\n</li>\n</ul>\n<p>点击链接，了解关于异步API如何使用的更多<a href=\"\">使用示例</a>。</p>\n<h2>包名改造</h2>\n<ol>\n<li>Maven坐标</li>\n</ol>\n<p><strong>groupId 由 <code>com.alibaba</code> 改为 <code>org.apache.dubbo</code></strong></p>\n<ol start=\"2\">\n<li>package</li>\n</ol>\n<p><strong>package 由 <code>com.alibaba.dubbo</code> 改为 <code>org.apache.dubbo</code></strong></p>\n<p>Maven坐标升级比较直观，只需要修改相应的pom文件就可以了；而package变更则可能会带来编译问题，升级过程需要用户修改代码。因此为了减少用户升级成本，让用户可以做到渐进式升级，2.7.0版本继续保留了一些常用基础API和SPI<code>com.alibaba.dubbo</code>的支持。</p>\n<h4>API编程接口</h4>\n<ul>\n<li>注解</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@Reference</td>\n<td>消费端服务引用注解</td>\n</tr>\n<tr>\n<td>@Service</td>\n<td>提供端服务暴露注解</td>\n</tr>\n<tr>\n<td>@EnableDubbo</td>\n<td></td>\n</tr>\n<tr>\n<td>其他常用Spring注解API</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>编程API</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>API</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ReferenceConfig</td>\n<td>Service配置采集和引用编程接口</td>\n</tr>\n<tr>\n<td>ServiceConfig</td>\n<td>Service配置采集和暴露编程接口</td>\n</tr>\n<tr>\n<td>ApplicationConfig</td>\n<td>Application配置采集API</td>\n</tr>\n<tr>\n<td>RegistryConfig</td>\n<td>注册中心配置采集API</td>\n</tr>\n<tr>\n<td>ConsumerConfig</td>\n<td>提供端默认配置采集API</td>\n</tr>\n<tr>\n<td>ProviderConfig</td>\n<td>消费端默认配置采集API</td>\n</tr>\n<tr>\n<td>ProtocolConfig</td>\n<td>RPC协议配置采集API</td>\n</tr>\n<tr>\n<td>ArcumentConfig</td>\n<td>服务参数级配置采集API</td>\n</tr>\n<tr>\n<td>MethodConfig</td>\n<td>服务方法级配置采集API</td>\n</tr>\n<tr>\n<td>ModuleConfig</td>\n<td>服务治理Module配置采集API</td>\n</tr>\n<tr>\n<td>MonitorConfig</td>\n<td>监控配置采集API</td>\n</tr>\n<tr>\n<td>RpcContext</td>\n<td>编程上下文API</td>\n</tr>\n</tbody>\n</table>\n<h4>SPI扩展</h4>\n<blockquote>\n<p>如果公司内部有维护的自定义SPI扩展库，在业务工程升级到2.7.0之前，请务必先确保扩展库与2.7.0的兼容性。如果发现有兼容性问题，请通过修改包名引用的方式完成升级，并重新打包。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>SPI扩展点</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Registry</td>\n<td>包括<code>RegistryFactory</code>, <code>Registry</code> ,<code>RegistryService</code>等扩展点</td>\n</tr>\n<tr>\n<td>Protocol</td>\n<td>RPC协议扩展</td>\n</tr>\n<tr>\n<td>Serialization</td>\n<td>序列化协议扩展</td>\n</tr>\n<tr>\n<td>Cluster</td>\n<td>集群容错策略扩展，如Failover, Failfast等</td>\n</tr>\n<tr>\n<td>Loadbalance</td>\n<td>负载均衡策略扩展</td>\n</tr>\n<tr>\n<td>Transporter</td>\n<td>传输框架扩展，如Netty等</td>\n</tr>\n<tr>\n<td>Monitor</td>\n<td>监控中心扩展，包括MonitorFactory, Monitor, MonitorService等</td>\n</tr>\n<tr>\n<td>Router</td>\n<td>路由规则扩展</td>\n</tr>\n<tr>\n<td>Filter</td>\n<td>拦截器扩展</td>\n</tr>\n</tbody>\n</table>\n<h2>FAQ</h2>\n<ol>\n<li>升级后启动出现curator依赖报错</li>\n</ol>\n",
  "link": "/zh-cn/docs/user/versions/version-270.html",
  "meta": {}
}