<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SPI 扩展实现 on Apache Dubbo</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/</link><description>Recent content in SPI 扩展实现 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/index.xml" rel="self" type="application/rss+xml"/><item><title>协议扩展</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/protocol/</guid><description>扩展说明 RPC 协议扩展，封装远程调用细节。
契约：
当用户调用 refer() 所返回的 Invoker 对象的 invoke() 方法时，协议需相应执行同 URL 远端 export() 传入的 Invoker 对象的 invoke() 方法。 其中，refer() 返回的 Invoker 由协议实现，协议通常需要在此 Invoker 中发送远程请求，export() 传入的 Invoker 由框架实现并传入，协议不需要关心。 注意：
协议不关心业务接口的透明代理，以 Invoker 为中心，由外层将 Invoker 转换为业务接口。 协议不一定要是 TCP 网络通讯，比如通过共享文件，IPC 进程间通讯等。 扩展接口 org.apache.dubbo.rpc.Protocol org.apache.dubbo.rpc.Exporter org.apache.dubbo.rpc.Invoker public interface Protocol { /** * 暴露远程服务：&amp;lt;br&amp;gt; * 1. 协议在接收请求时，应记录请求来源方地址信息：RpcContext.getContext().setRemoteAddress();&amp;lt;br&amp;gt; * 2. export()必须是幂等的，也就是暴露同一个URL的Invoker两次，和暴露一次没有区别。&amp;lt;br&amp;gt; * 3. export()传入的Invoker由框架实现并传入，协议不需要关心。&amp;lt;br&amp;gt; * * @param &amp;lt;T&amp;gt; 服务的类型 * @param invoker 服务的执行体 * @return exporter 暴露服务的引用，用于取消暴露 * @throws RpcException 当暴露服务出错时抛出，比如端口已占用 */ &amp;lt;T&amp;gt; Exporter&amp;lt;T&amp;gt; export(Invoker&amp;lt;T&amp;gt; invoker) throws RpcException; /** * 引用远程服务：&amp;lt;br&amp;gt; * 1.</description></item><item><title>调用拦截扩展</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/filter/</guid><description>扩展说明 服务提供方和服务消费方调用过程拦截，Dubbo 本身的大多功能均基于此扩展点实现，每次远程方法执行，该拦截都会被执行，请注意对性能的影响。
约定：
用户自定义 filter 默认在内置 filter 之后。 特殊值 default，表示缺省扩展点插入的位置。比如：filter=&amp;quot;xxx,default,yyy&amp;quot;，表示 xxx 在缺省 filter 之前，yyy 在缺省 filter 之后。 特殊符号 -，表示剔除。比如：filter=&amp;quot;-foo1&amp;quot;，剔除添加缺省扩展点 foo1。比如：filter=&amp;quot;-default&amp;quot;，剔除添加所有缺省扩展点。 provider 和 service 同时配置的 filter 时，累加所有 filter，而不是覆盖。比如：&amp;lt;dubbo:provider filter=&amp;quot;xxx,yyy&amp;quot;/&amp;gt; 和 &amp;lt;dubbo:service filter=&amp;quot;aaa,bbb&amp;quot; /&amp;gt;，则 xxx,yyy,aaa,bbb 均会生效。如果要覆盖，需配置：&amp;lt;dubbo:service filter=&amp;quot;-xxx,-yyy,aaa,bbb&amp;quot; /&amp;gt; 扩展接口 org.apache.dubbo.rpc.Filter
扩展配置 &amp;lt;!-- 消费方调用过程拦截 --&amp;gt; &amp;lt;dubbo:reference filter=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- 消费方调用过程缺省拦截器，将拦截所有reference --&amp;gt; &amp;lt;dubbo:consumer filter=&amp;#34;xxx,yyy&amp;#34;/&amp;gt; &amp;lt;!-- 提供方调用过程拦截 --&amp;gt; &amp;lt;dubbo:service filter=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- 提供方调用过程缺省拦截器，将拦截所有service --&amp;gt; &amp;lt;dubbo:provider filter=&amp;#34;xxx,yyy&amp;#34;/&amp;gt; 已知扩展 org.apache.dubbo.rpc.filter.EchoFilter org.apache.dubbo.rpc.filter.GenericFilter org.apache.dubbo.rpc.filter.GenericImplFilter org.apache.dubbo.rpc.filter.TokenFilter org.apache.dubbo.rpc.filter.AccessLogFilter org.apache.dubbo.rpc.filter.CountFilter org.apache.dubbo.rpc.filter.ActiveLimitFilter org.</description></item><item><title>引用监听扩展</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/invoker-listener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/invoker-listener/</guid><description>扩展说明 当有服务引用时，触发该事件。
扩展接口 org.apache.dubbo.rpc.InvokerListener
扩展配置 &amp;lt;!-- 引用服务监听 --&amp;gt; &amp;lt;dubbo:reference listener=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- 引用服务缺省监听器 --&amp;gt; &amp;lt;dubbo:consumer listener=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; 已知扩展 org.apache.dubbo.rpc.listener.DeprecatedInvokerListener
扩展示例 Maven 项目结构：
src |-main |-java |-com |-xxx |-XxxInvokerListener.java (实现InvokerListener接口) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.InvokerListener (纯文本文件，内容为：xxx=com.xxx.XxxInvokerListener) XxxInvokerListener.java：
package com.xxx; import org.apache.dubbo.rpc.InvokerListener; import org.apache.dubbo.rpc.Invoker; import org.apache.dubbo.rpc.RpcException; public class XxxInvokerListener implements InvokerListener { public void referred(Invoker&amp;lt;?&amp;gt; invoker) throws RpcException { // ... } public void destroyed(Invoker&amp;lt;?&amp;gt; invoker) throws RpcException { // ... } } META-INF/dubbo/org.</description></item><item><title>暴露监听扩展</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/exporter-listener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/exporter-listener/</guid><description>扩展说明 当有服务暴露时，触发该事件。
扩展接口 org.apache.dubbo.rpc.ExporterListener
扩展配置 &amp;lt;!-- 暴露服务监听 --&amp;gt; &amp;lt;dubbo:service listener=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- 暴露服务缺省监听器 --&amp;gt; &amp;lt;dubbo:provider listener=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; 已知扩展 org.apache.dubbo.registry.directory.RegistryExporterListener
扩展示例 Maven 项目结构：
src |-main |-java |-com |-xxx |-XxxExporterListener.java (实现ExporterListener接口) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.ExporterListener (纯文本文件，内容为：xxx=com.xxx.XxxExporterListener) XxxExporterListener.java：
package com.xxx; import org.apache.dubbo.rpc.ExporterListener; import org.apache.dubbo.rpc.Exporter; import org.apache.dubbo.rpc.RpcException; public class XxxExporterListener implements ExporterListener { public void exported(Exporter&amp;lt;?&amp;gt; exporter) throws RpcException { // ... } public void unexported(Exporter&amp;lt;?&amp;gt; exporter) throws RpcException { // ... } } META-INF/dubbo/org.</description></item><item><title>集群扩展</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/cluster/</guid><description>扩展说明 当有多个服务提供方时，将多个服务提供方组织成一个集群，并伪装成一个提供方。
扩展接口 org.apache.dubbo.rpc.cluster.Cluster
扩展配置 &amp;lt;dubbo:protocol cluster=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- 缺省值配置，如果&amp;lt;dubbo:protocol&amp;gt;没有配置cluster时，使用此配置 --&amp;gt; &amp;lt;dubbo:provider cluster=&amp;#34;xxx&amp;#34; /&amp;gt; 已知扩展 org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterWrapper org.apache.dubbo.rpc.cluster.support.FailoverCluster org.apache.dubbo.rpc.cluster.support.FailfastCluster org.apache.dubbo.rpc.cluster.support.FailsafeCluster org.apache.dubbo.rpc.cluster.support.FailbackCluster org.apache.dubbo.rpc.cluster.support.ForkingCluster org.apache.dubbo.rpc.cluster.support.AvailableCluster org.apache.dubbo.rpc.cluster.support.MergeableCluster org.apache.dubbo.rpc.cluster.support.BroadcastCluster org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareCluster 扩展示例 Maven 项目结构：
src |-main |-java |-com |-xxx |-XxxCluster.java (实现Cluster接口) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.cluster.Cluster (纯文本文件，内容为：xxx=com.xxx.XxxCluster) XxxCluster.java：
package com.xxx; import org.apache.dubbo.rpc.cluster.Cluster; import org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker; import org.apache.dubbo.rpc.cluster.Directory; import org.apache.dubbo.rpc.cluster.LoadBalance; import org.apache.dubbo.rpc.Invoker; import org.apache.dubbo.rpc.Invocation; import org.apache.dubbo.rpc.Result; import org.apache.dubbo.rpc.RpcException; public class XxxCluster implements Cluster { public &amp;lt;T&amp;gt; Invoker&amp;lt;T&amp;gt; merge(Directory&amp;lt;T&amp;gt; directory) throws RpcException { return new AbstractClusterInvoker&amp;lt;T&amp;gt;(directory) { public Result doInvoke(Invocation invocation, List&amp;lt;Invoker&amp;lt;T&amp;gt;&amp;gt; invokers, LoadBalance loadbalance) throws RpcException { // .</description></item><item><title>路由扩展</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/router/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/router/</guid><description>扩展说明 从多个服务提供方中选择一个进行调用。
扩展接口 org.apache.dubbo.rpc.cluster.RouterFactory org.apache.dubbo.rpc.cluster.Router 已知扩展 org.apache.dubbo.rpc.cluster.router.ScriptRouterFactory org.apache.dubbo.rpc.cluster.router.FileRouterFactory org.apache.dubbo.rpc.cluster.router.condition.config.AppRouterFactory org.apache.dubbo.rpc.cluster.CacheableRouterFactory org.apache.dubbo.rpc.cluster.router.condition.ConditionRouterFactory org.apache.dubbo.rpc.cluster.router.mock.MockRouterFactory org.apache.dubbo.rpc.cluster.router.condition.config.ServiceRouterFactory org.apache.dubbo.rpc.cluster.router.tag.TagRouterFactory 扩展示例 Maven 项目结构：
src |-main |-java |-com |-xxx |-XxxRouterFactory.java (实现RouterFactory接口) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.cluster.RouterFactory (纯文本文件，内容为：xxx=com.xxx.XxxRouterFactory) XxxRouterFactory.java：
package com.xxx; import org.apache.dubbo.rpc.cluster.RouterFactory; import org.apache.dubbo.rpc.Invoker; import org.apache.dubbo.rpc.Invocation; import org.apache.dubbo.rpc.RpcException; public class XxxRouterFactory implements RouterFactory { public Router getRouter(URL url) { // ... } } META-INF/dubbo/org.apache.dubbo.rpc.cluster.RouterFactory：
xxx=com.xxx.XxxRouterFactory</description></item><item><title>负载均衡扩展</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/load-balance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/load-balance/</guid><description>扩展说明 从多个服务提供方中选择一个进行调用
扩展接口 org.apache.dubbo.rpc.cluster.LoadBalance
扩展配置 &amp;lt;dubbo:protocol loadbalance=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- 缺省值设置，当&amp;lt;dubbo:protocol&amp;gt;没有配置loadbalance时，使用此配置 --&amp;gt; &amp;lt;dubbo:provider loadbalance=&amp;#34;xxx&amp;#34; /&amp;gt; 已知扩展 org.apache.dubbo.rpc.cluster.loadbalance.RandomLoadBalance org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance org.apache.dubbo.rpc.cluster.loadbalance.LeastActiveLoadBalance org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance org.apache.dubbo.rpc.cluster.loadbalance.ShortestResponseLoadBalance 扩展示例 Maven 项目结构：
src |-main |-java |-com |-xxx |-XxxLoadBalance.java (实现LoadBalance接口) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.cluster.LoadBalance (纯文本文件，内容为：xxx=com.xxx.XxxLoadBalance) XxxLoadBalance.java：
package com.xxx; import org.apache.dubbo.rpc.cluster.LoadBalance; import org.apache.dubbo.rpc.Invoker; import org.apache.dubbo.rpc.Invocation; import org.apache.dubbo.rpc.RpcException; public class XxxLoadBalance implements LoadBalance { public &amp;lt;T&amp;gt; Invoker&amp;lt;T&amp;gt; select(List&amp;lt;Invoker&amp;lt;T&amp;gt;&amp;gt; invokers, Invocation invocation) throws RpcException { // ... } } META-INF/dubbo/org.apache.dubbo.rpc.cluster.LoadBalance：
xxx=com.xxx.XxxLoadBalance</description></item><item><title>合并结果扩展</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/merger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/merger/</guid><description>扩展说明 合并返回结果，用于分组聚合。
扩展接口 org.apache.dubbo.rpc.cluster.Merger
扩展配置 &amp;lt;dubbo:method merger=&amp;#34;xxx&amp;#34; /&amp;gt; 已知扩展 org.apache.dubbo.rpc.cluster.merger.ArrayMerger org.apache.dubbo.rpc.cluster.merger.ListMerger org.apache.dubbo.rpc.cluster.merger.SetMerger org.apache.dubbo.rpc.cluster.merger.MapMerger org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger org.apache.dubbo.rpc.cluster.merger.CharArrayMerger org.apache.dubbo.rpc.cluster.merger.ShortArrayMerger org.apache.dubbo.rpc.cluster.merger.IntArrayMerger org.apache.dubbo.rpc.cluster.merger.LongArrayMerger org.apache.dubbo.rpc.cluster.merger.FloatArrayMerger org.apache.dubbo.rpc.cluster.merger.DoubleArrayMerger org.apache.dubbo.rpc.cluster.merger.BooleanArrayMerger 扩展示例 Maven 项目结构：
src |-main |-java |-com |-xxx |-XxxMerger.java (实现Merger接口) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.cluster.Merger (纯文本文件，内容为：xxx=com.xxx.XxxMerger) XxxMerger.java：
package com.xxx; import org.apache.dubbo.rpc.cluster.Merger; public class XxxMerger&amp;lt;T&amp;gt; implements Merger&amp;lt;T&amp;gt; { public T merge(T... results) { // ... } } META-INF/dubbo/org.apache.dubbo.rpc.cluster.Merger：
xxx=com.xxx.XxxMerger</description></item><item><title>注册中心扩展</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/registry/</guid><description>扩展说明 负责服务的注册与发现。
扩展接口 org.apache.dubbo.registry.RegistryFactory org.apache.dubbo.registry.Registry 扩展配置 &amp;lt;!-- 定义注册中心 --&amp;gt; &amp;lt;dubbo:registry id=&amp;#34;xxx1&amp;#34; address=&amp;#34;xxx://ip:port&amp;#34; /&amp;gt; &amp;lt;!-- 引用注册中心，如果没有配置registry属性，将在ApplicationContext中自动扫描registry配置 --&amp;gt; &amp;lt;dubbo:service registry=&amp;#34;xxx1&amp;#34; /&amp;gt; &amp;lt;!-- 引用注册中心缺省值，当&amp;lt;dubbo:service&amp;gt;没有配置registry属性时，使用此配置 --&amp;gt; &amp;lt;dubbo:provider registry=&amp;#34;xxx1&amp;#34; /&amp;gt; 扩展契约 RegistryFactory.java：
public interface RegistryFactory { /** * 连接注册中心. * * 连接注册中心需处理契约：&amp;lt;br&amp;gt; * 1. 当设置check=false时表示不检查连接，否则在连接不上时抛出异常。&amp;lt;br&amp;gt; * 2. 支持URL上的username:password权限认证。&amp;lt;br&amp;gt; * 3. 支持backup=10.20.153.10备选注册中心集群地址。&amp;lt;br&amp;gt; * 4. 支持file=registry.cache本地磁盘文件缓存。&amp;lt;br&amp;gt; * 5. 支持timeout=1000请求超时设置。&amp;lt;br&amp;gt; * 6. 支持session=60000会话超时或过期设置。&amp;lt;br&amp;gt; * * @param url 注册中心地址，不允许为空 * @return 注册中心引用，总不返回空 */ Registry getRegistry(URL url); } RegistryService.java：
public interface RegistryService { // Registry extends RegistryService /** * 注册服务.</description></item><item><title>监控中心扩展</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/monitor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/monitor/</guid><description>扩展说明 负责服务调用次和调用时间的监控。
扩展接口 org.apache.dubbo.monitor.MonitorFactory org.apache.dubbo.monitor.Monitor 扩展配置 &amp;lt;!-- 定义监控中心 --&amp;gt; &amp;lt;dubbo:monitor address=&amp;#34;xxx://ip:port&amp;#34; /&amp;gt; 已知扩展 org.apache.dubbo.monitor.support.dubbo.DubboMonitorFactory
扩展示例 Maven 项目结构：
src |-main |-java |-com |-xxx |-XxxMonitorFactoryjava (实现MonitorFactory接口) |-XxxMonitor.java (实现Monitor接口) |-resources |-META-INF |-dubbo |-org.apache.dubbo.monitor.MonitorFactory (纯文本文件，内容为：xxx=com.xxx.XxxMonitorFactory) XxxMonitorFactory.java：
package com.xxx; import org.apache.dubbo.monitor.MonitorFactory; import org.apache.dubbo.monitor.Monitor; import org.apache.dubbo.common.URL; public class XxxMonitorFactory implements MonitorFactory { public Monitor getMonitor(URL url) { return new XxxMonitor(url); } } XxxMonitor.java：
package com.xxx; import org.apache.dubbo.monitor.Monitor; public class XxxMonitor implements Monitor { public void count(URL statistics) { // .</description></item><item><title>扩展点加载扩展</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/extension-factory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/extension-factory/</guid><description>扩展说明 扩展点本身的加载容器，可从不同容器加载扩展点。
扩展接口 org.apache.dubbo.common.extension.ExtensionFactory
扩展配置 &amp;lt;dubbo:application compiler=&amp;#34;jdk&amp;#34; /&amp;gt; 已知扩展 org.apache.dubbo.common.extension.factory.SpiExtensionFactory org.apache.dubbo.config.spring.extension.SpringExtensionFactory 扩展示例 Maven 项目结构：
src |-main |-java |-com |-xxx |-XxxExtensionFactory.java (实现ExtensionFactory接口) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.extension.ExtensionFactory (纯文本文件，内容为：xxx=com.xxx.XxxExtensionFactory) XxxExtensionFactory.java：
package com.xxx; import org.apache.dubbo.common.extension.ExtensionFactory; public class XxxExtensionFactory implements ExtensionFactory { public Object getExtension(Class&amp;lt;?&amp;gt; type, String name) { // ... } } META-INF/dubbo/org.apache.dubbo.common.extension.ExtensionFactory：
xxx=com.xxx.XxxExtensionFactory</description></item><item><title>动态代理扩展</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/proxy-factory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/proxy-factory/</guid><description>扩展说明 将 Invoker 接口转换成业务接口。
扩展接口 org.apache.dubbo.rpc.ProxyFactory
扩展配置 &amp;lt;dubbo:protocol proxy=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- 缺省值配置，当&amp;lt;dubbo:protocol&amp;gt;没有配置proxy属性时，使用此配置 --&amp;gt; &amp;lt;dubbo:provider proxy=&amp;#34;xxx&amp;#34; /&amp;gt; 已知扩展 org.apache.dubbo.rpc.proxy.JdkProxyFactory org.apache.dubbo.rpc.proxy.JavassistProxyFactory 扩展示例 Maven 项目结构：
src |-main |-java |-com |-xxx |-XxxProxyFactory.java (实现ProxyFactory接口) |-resources |-META-INF |-dubbo |-org.apache.dubbo.rpc.ProxyFactory (纯文本文件，内容为：xxx=com.xxx.XxxProxyFactory) XxxProxyFactory.java：
package com.xxx; import org.apache.dubbo.rpc.ProxyFactory; import org.apache.dubbo.rpc.Invoker; import org.apache.dubbo.rpc.RpcException; public class XxxProxyFactory implements ProxyFactory { public &amp;lt;T&amp;gt; T getProxy(Invoker&amp;lt;T&amp;gt; invoker) throws RpcException { // ... } public &amp;lt;T&amp;gt; Invoker&amp;lt;T&amp;gt; getInvoker(T proxy, Class&amp;lt;T&amp;gt; type, URL url) throws RpcException { // .</description></item><item><title>编译器扩展</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/compiler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/compiler/</guid><description>扩展说明 Java 代码编译器，用于动态生成字节码，加速调用。
扩展接口 org.apache.dubbo.common.compiler.Compiler
扩展配置 自动加载
已知扩展 org.apache.dubbo.common.compiler.support.JdkCompiler org.apache.dubbo.common.compiler.support.JavassistCompiler 扩展示例 Maven 项目结构：
src |-main |-java |-com |-xxx |-XxxCompiler.java (实现Compiler接口) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.compiler.Compiler (纯文本文件，内容为：xxx=com.xxx.XxxCompiler) XxxCompiler.java：
package com.xxx; import org.apache.dubbo.common.compiler.Compiler; public class XxxCompiler implements Compiler { public Object getExtension(Class&amp;lt;?&amp;gt; type, String name) { // ... } } META-INF/dubbo/org.apache.dubbo.common.compiler.Compiler：
xxx=com.xxx.XxxCompiler</description></item><item><title>配置中心扩展</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/config-center/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/config-center/</guid><description>设计目的 配置中心的核心功能是作为 Key-Value 存储，Dubbo 框架告知配置中心其关心的 key，配置中心返回该key对应的 value 值。
按照应用场景划分，配置中心在 Dubbo 框架中主要承担以下职责：
作为外部化配置中心，即存储 dubbo.properties 配置文件，此时，key 值通常为文件名如 dubbo.properties，value 则为配置文件内容。 存储单个配置项，如各种开关项、常量值等。 存储服务治理规则，此时key通常按照 &amp;ldquo;服务名+规则类型&amp;rdquo; 的格式来组织，而 value 则为具体的治理规则。 为了进一步实现对 key-value 的分组管理，Dubbo 的配置中心还加入了 namespace、group 的概念，这些概念在很多专业的第三方配置中心中都有体现，通常情况下，namespace 用来隔离不同的租户，group 用来对同一租户的key集合做分组。
当前，Dubbo 配置中心实现了对 Zookeeper、Nacos、Etcd、Consul、Apollo 的对接，接下来我们具体看一下 Dubbo 抽象的配置中心是怎么映射到具体的第三方实现中的。
扩展接口 org.apache.dubbo.configcenter.DynamicConfigurationFactory org.apache.dubbo.configcenter.DynamicConfiguration 已知扩展 org.apache.dubbo.configcenter.support.zookeeper.ZookeeperDynamicConfigurationFactory org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfigurationFactory org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfigurationFactory org.apache.dubbo.configcenter.consul.ConsulDynamicConfigurationFactory org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfigurationFactory 实现原理 Zookeeper zookeeper提供了一个树状的存储模型，其实现原理如下：
namespace, group, key 等分别对应不同层级的 ZNode 节点，而 value 则作为根 ZNode 节点的值存储。
外部化配置中心 dubbo.properties
上图展示了两个不同作用域的 dubbo.properties 文件在 zookeeper 中的存储结构：
命名空间namespace都为：dubbo 分组 group：全局级别为 dubbo，所有应用共享；应用级别为应用名 demo-provider，只对该应用生效 key：dubbo.</description></item><item><title>消息派发扩展</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/dispatcher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/dispatcher/</guid><description>扩展说明 通道信息派发器，用于指定线程池模型。
扩展接口 org.apache.dubbo.remoting.Dispatcher
扩展配置 &amp;lt;dubbo:protocol dispatcher=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- 缺省值设置，当&amp;lt;dubbo:protocol&amp;gt;没有配置dispatcher属性时，使用此配置 --&amp;gt; &amp;lt;dubbo:provider dispatcher=&amp;#34;xxx&amp;#34; /&amp;gt; 已知扩展 org.apache.dubbo.remoting.transport.dispatcher.all.AllDispatcher org.apache.dubbo.remoting.transport.dispatcher.direct.DirectDispatcher org.apache.dubbo.remoting.transport.dispatcher.message.MessageOnlyDispatcher org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedDispatcher 扩展示例 Maven 项目结构：
src |-main |-java |-com |-xxx |-XxxDispatcher.java (实现Dispatcher接口) |-resources |-META-INF |-dubbo |-org.apache.dubbo.remoting.Dispatcher (纯文本文件，内容为：xxx=com.xxx.XxxDispatcher) XxxDispatcher.java：
package com.xxx; import org.apache.dubbo.remoting.Dispatcher; public class XxxDispatcher implements Dispatcher { public Group lookup(URL url) { // ... } } META-INF/dubbo/org.apache.dubbo.remoting.Dispatcher：
xxx=com.xxx.XxxDispatcher</description></item><item><title>线程池扩展</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/threadpool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/threadpool/</guid><description>扩展说明 服务提供方线程池实现策略，当服务器收到一个请求时，需要在线程池中创建一个线程去执行服务提供方业务逻辑。
扩展接口 org.apache.dubbo.common.threadpool.ThreadPool
扩展配置 &amp;lt;dubbo:protocol threadpool=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- 缺省值设置，当&amp;lt;dubbo:protocol&amp;gt;没有配置threadpool时，使用此配置 --&amp;gt; &amp;lt;dubbo:provider threadpool=&amp;#34;xxx&amp;#34; /&amp;gt; 已知扩展 org.apache.dubbo.common.threadpool.FixedThreadPool org.apache.dubbo.common.threadpool.CachedThreadPool 扩展示例 Maven 项目结构：
src |-main |-java |-com |-xxx |-XxxThreadPool.java (实现ThreadPool接口) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.threadpool.ThreadPool (纯文本文件，内容为：xxx=com.xxx.XxxThreadPool) XxxThreadPool.java：
package com.xxx; import org.apache.dubbo.common.threadpool.ThreadPool; import java.util.concurrent.Executor; public class XxxThreadPool implements ThreadPool { public Executor getExecutor() { // ... } } META-INF/dubbo/org.apache.dubbo.common.threadpool.ThreadPool：
xxx=com.xxx.XxxThreadPool</description></item><item><title>序列化扩展</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/serialize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/serialize/</guid><description>扩展说明 将对象转成字节流，用于网络传输，以及将字节流转为对象，用于在收到字节流数据后还原成对象。
扩展接口 org.apache.dubbo.common.serialize.Serialization org.apache.dubbo.common.serialize.ObjectInput org.apache.dubbo.common.serialize.ObjectOutput 扩展配置 &amp;lt;!-- 协议的序列化方式 --&amp;gt; &amp;lt;dubbo:protocol serialization=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- 缺省值设置，当&amp;lt;dubbo:protocol&amp;gt;没有配置serialization时，使用此配置 --&amp;gt; &amp;lt;dubbo:provider serialization=&amp;#34;xxx&amp;#34; /&amp;gt; 已知扩展 org.apache.dubbo.common.serialize.dubbo.DubboSerialization org.apache.dubbo.common.serialize.hessian.Hessian2Serialization org.apache.dubbo.common.serialize.java.JavaSerialization org.apache.dubbo.common.serialize.java.CompactedJavaSerialization 扩展示例 Maven 项目结构：
src |-main |-java |-com |-xxx |-XxxSerialization.java (实现Serialization接口) |-XxxObjectInput.java (实现ObjectInput接口) |-XxxObjectOutput.java (实现ObjectOutput接口) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.serialize.Serialization (纯文本文件，内容为：xxx=com.xxx.XxxSerialization) XxxSerialization.java：
package com.xxx; import org.apache.dubbo.common.serialize.Serialization; import org.apache.dubbo.common.serialize.ObjectInput; import org.apache.dubbo.common.serialize.ObjectOutput; public class XxxSerialization implements Serialization { public ObjectOutput serialize(Parameters parameters, OutputStream output) throws IOException { return new XxxObjectOutput(output); } public ObjectInput deserialize(Parameters parameters, InputStream input) throws IOException { return new XxxObjectInput(input); } } META-INF/dubbo/org.</description></item><item><title>网络传输扩展</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/remoting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/remoting/</guid><description>扩展说明 远程通讯的服务器及客户端传输实现。
扩展接口 org.apache.dubbo.remoting.Transporter org.apache.dubbo.remoting.Server org.apache.dubbo.remoting.Client 扩展配置 &amp;lt;!-- 服务器和客户端使用相同的传输实现 --&amp;gt; &amp;lt;dubbo:protocol transporter=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- 服务器和客户端使用不同的传输实现 --&amp;gt; &amp;lt;dubbo:protocol server=&amp;#34;xxx&amp;#34; client=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- 缺省值设置，当&amp;lt;dubbo:protocol&amp;gt;没有配置transporter/server/client属性时，使用此配置 --&amp;gt; &amp;lt;dubbo:provider transporter=&amp;#34;xxx&amp;#34; server=&amp;#34;xxx&amp;#34; client=&amp;#34;xxx&amp;#34; /&amp;gt; 已知扩展 org.apache.dubbo.remoting.transport.transporter.netty.NettyTransporter org.apache.dubbo.remoting.transport.transporter.mina.MinaTransporter org.apache.dubbo.remoting.transport.transporter.grizzly.GrizzlyTransporter 扩展示例 Maven 项目结构：
src |-main |-java |-com |-xxx |-XxxTransporter.java (实现Transporter接口) |-XxxServer.java (实现Server接口) |-XxxClient.java (实现Client接口) |-resources |-META-INF |-dubbo |-org.apache.dubbo.remoting.Transporter (纯文本文件，内容为：xxx=com.xxx.XxxTransporter) XxxTransporter.java：
package com.xxx; import org.apache.dubbo.remoting.Transporter; public class XxxTransporter implements Transporter { public Server bind(URL url, ChannelHandler handler) throws RemotingException { return new XxxServer(url, handler); } public Client connect(URL url, ChannelHandler handler) throws RemotingException { return new XxxClient(url, handler); } } XxxServer.</description></item><item><title>信息交换扩展</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/exchanger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/exchanger/</guid><description>扩展说明 基于传输层之上，实现 Request-Response 信息交换语义。
扩展接口 org.apache.dubbo.remoting.exchange.Exchanger org.apache.dubbo.remoting.exchange.ExchangeServer org.apache.dubbo.remoting.exchange.ExchangeClient 扩展配置 &amp;lt;dubbo:protocol exchanger=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- 缺省值设置，当&amp;lt;dubbo:protocol&amp;gt;没有配置exchanger属性时，使用此配置 --&amp;gt; &amp;lt;dubbo:provider exchanger=&amp;#34;xxx&amp;#34; /&amp;gt; 已知扩展 org.apache.dubbo.remoting.exchange.exchanger.HeaderExchanger
扩展示例 Maven 项目结构：
src |-main |-java |-com |-xxx |-XxxExchanger.java (实现Exchanger接口) |-XxxExchangeServer.java (实现ExchangeServer接口) |-XxxExchangeClient.java (实现ExchangeClient接口) |-resources |-META-INF |-dubbo |-org.apache.dubbo.remoting.exchange.Exchanger (纯文本文件，内容为：xxx=com.xxx.XxxExchanger) XxxExchanger.java：
package com.xxx; import org.apache.dubbo.remoting.exchange.Exchanger; public class XxxExchanger implements Exchanger { public ExchangeServer bind(URL url, ExchangeHandler handler) throws RemotingException { return new XxxExchangeServer(url, handler); } public ExchangeClient connect(URL url, ExchangeHandler handler) throws RemotingException { return new XxxExchangeClient(url, handler); } } XxxExchangeServer.</description></item><item><title>组网扩展</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/networker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/networker/</guid><description>扩展说明 对等网络节点组网器。
扩展接口 org.apache.dubbo.remoting.p2p.Networker
扩展配置 &amp;lt;dubbo:protocol networker=&amp;#34;xxx&amp;#34; /&amp;gt; &amp;lt;!-- 缺省值设置，当&amp;lt;dubbo:protocol&amp;gt;没有配置networker属性时，使用此配置 --&amp;gt; &amp;lt;dubbo:provider networker=&amp;#34;xxx&amp;#34; /&amp;gt; 已知扩展 org.apache.dubbo.remoting.p2p.support.MulticastNetworker org.apache.dubbo.remoting.p2p.support.FileNetworker 扩展示例 Maven 项目结构：
src |-main |-java |-com |-xxx |-XxxNetworker.java (实现Networker接口) |-resources |-META-INF |-dubbo |-org.apache.dubbo.remoting.p2p.Networker (纯文本文件，内容为：xxx=com.xxx.XxxNetworker) XxxNetworker.java：
package com.xxx; import org.apache.dubbo.remoting.p2p.Networker; public class XxxNetworker implements Networker { public Group lookup(URL url) { // ... } } META-INF/dubbo/org.apache.dubbo.remoting.p2p.Networker：
xxx=com.xxx.XxxNetworker</description></item><item><title>Telnet 命令扩展</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/telnet-handler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/telnet-handler/</guid><description>扩展说明 所有服务器均支持 telnet 访问，用于人工干预。
扩展接口 org.apache.dubbo.remoting.telnet.TelnetHandler
扩展配置 &amp;lt;dubbo:protocol telnet=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- 缺省值设置，当&amp;lt;dubbo:protocol&amp;gt;没有配置telnet属性时，使用此配置 --&amp;gt; &amp;lt;dubbo:provider telnet=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; 已知扩展 org.apache.dubbo.remoting.telnet.support.ClearTelnetHandler org.apache.dubbo.remoting.telnet.support.ExitTelnetHandler org.apache.dubbo.remoting.telnet.support.HelpTelnetHandler org.apache.dubbo.remoting.telnet.support.StatusTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.ListTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.ChangeTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.CurrentTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.InvokeTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.TraceTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.CountTelnetHandler org.apache.dubbo.rpc.dubbo.telnet.PortTelnetHandler 扩展示例 Maven 项目结构：
src |-main |-java |-com |-xxx |-XxxTelnetHandler.java (实现TelnetHandler接口) |-resources |-META-INF |-dubbo |-org.apache.dubbo.remoting.telnet.TelnetHandler (纯文本文件，内容为：xxx=com.xxx.XxxTelnetHandler) XxxTelnetHandler.java：
package com.xxx; import org.apache.dubbo.remoting.telnet.TelnetHandler; @Help(parameter=&amp;#34;...&amp;#34;, summary=&amp;#34;...&amp;#34;, detail=&amp;#34;...&amp;#34;) public class XxxTelnetHandler implements TelnetHandler { public String telnet(Channel channel, String message) throws RemotingException { // ... } } META-INF/dubbo/org.</description></item><item><title>状态检查扩展</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/status-checker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/status-checker/</guid><description>扩展说明 检查服务依赖各种资源的状态，此状态检查可同时用于 telnet 的 status 命令和 hosting 的 status 页面。
扩展接口 org.apache.dubbo.common.status.StatusChecker
扩展配置 &amp;lt;dubbo:protocol status=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- 缺省值设置，当&amp;lt;dubbo:protocol&amp;gt;没有配置status属性时，使用此配置 --&amp;gt; &amp;lt;dubbo:provider status=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; 已知扩展 org.apache.dubbo.common.status.support.MemoryStatusChecker org.apache.dubbo.common.status.support.LoadStatusChecker org.apache.dubbo.rpc.dubbo.status.ServerStatusChecker org.apache.dubbo.rpc.dubbo.status.ThreadPoolStatusChecker org.apache.dubbo.registry.directory.RegistryStatusChecker org.apache.dubbo.rpc.config.spring.status.SpringStatusChecker org.apache.dubbo.rpc.config.spring.status.DataSourceStatusChecker 扩展示例 Maven 项目结构：
src |-main |-java |-com |-xxx |-XxxStatusChecker.java (实现StatusChecker接口) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.status.StatusChecker (纯文本文件，内容为：xxx=com.xxx.XxxStatusChecker) XxxStatusChecker.java：
package com.xxx; import org.apache.dubbo.common.status.StatusChecker; public class XxxStatusChecker implements StatusChecker { public Status check() { // ... } } META-INF/dubbo/org.apache.dubbo.common.status.StatusChecker：
xxx=com.xxx.XxxStatusChecker</description></item><item><title>容器扩展</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/container/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/container/</guid><description>扩展说明 服务容器扩展，用于自定义加载内容。
扩展接口 org.apache.dubbo.container.Container
扩展配置 java org.apache.dubbo.container.Main spring jetty log4j 已知扩展 org.apache.dubbo.container.spring.SpringContainer org.apache.dubbo.container.spring.JettyContainer org.apache.dubbo.container.spring.Log4jContainer 扩展示例 Maven 项目结构：
src |-main |-java |-com |-xxx |-XxxContainer.java (实现Container接口) |-resources |-META-INF |-dubbo |-org.apache.dubbo.container.Container (纯文本文件，内容为：xxx=com.xxx.XxxContainer) XxxContainer.java：
package com.xxx; org.apache.dubbo.container.Container; public class XxxContainer implements Container { public Status start() { // ... } public Status stop() { // ... } } META-INF/dubbo/org.apache.dubbo.container.Container：
xxx=com.xxx.XxxContainer</description></item><item><title>缓存扩展</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/cache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/cache/</guid><description>扩展说明 用请求参数作为 key，缓存返回结果。
扩展接口 org.apache.dubbo.cache.CacheFactory
扩展配置 &amp;lt;dubbo:service cache=&amp;#34;lru&amp;#34; /&amp;gt; &amp;lt;!-- 方法级缓存 --&amp;gt; &amp;lt;dubbo:service&amp;gt;&amp;lt;dubbo:method cache=&amp;#34;lru&amp;#34; /&amp;gt;&amp;lt;/dubbo:service&amp;gt; &amp;lt;!-- 缺省值设置，当&amp;lt;dubbo:service&amp;gt;没有配置cache属性时，使用此配置 --&amp;gt; &amp;lt;dubbo:provider cache=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; 已知扩展 org.apache.dubbo.cache.support.lru.LruCacheFactory org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory org.apache.dubbo.cache.support.jcache.JCacheFactory 扩展示例 Maven 项目结构：
src |-main |-java |-com |-xxx |-XxxCacheFactory.java (实现CacheFactory接口) |-resources |-META-INF |-dubbo |-org.apache.dubbo.cache.CacheFactory (纯文本文件，内容为：xxx=com.xxx.XxxCacheFactory) XxxCacheFactory.java：
package com.xxx; import org.apache.dubbo.cache.CacheFactory; public class XxxCacheFactory implements CacheFactory { public Cache getCache(URL url, String name) { return new XxxCache(url, name); } } XxxCache.java：
package com.xxx; import org.apache.dubbo.cache.Cache; public class XxxCache implements Cache { public Cache(URL url, String name) { // .</description></item><item><title>验证扩展</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/validation/</guid><description>扩展说明 参数验证扩展点。
扩展接口 org.apache.dubbo.validation.Validation
扩展配置 &amp;lt;dubbo:service validation=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- 缺省值设置，当&amp;lt;dubbo:service&amp;gt;没有配置validation属性时，使用此配置 --&amp;gt; &amp;lt;dubbo:provider validation=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; 已知扩展 org.apache.dubbo.validation.support.jvalidation.JValidation
扩展示例 Maven 项目结构：
src |-main |-java |-com |-xxx |-XxxValidation.java (实现Validation接口) |-resources |-META-INF |-dubbo |-org.apache.dubbo.validation.Validation (纯文本文件，内容为：xxx=com.xxx.XxxValidation) XxxValidation.java：
package com.xxx; import org.apache.dubbo.validation.Validation; public class XxxValidation implements Validation { public Object getValidator(URL url) { // ... } } XxxValidator.java：
package com.xxx; import org.apache.dubbo.validation.Validator; public class XxxValidator implements Validator { public XxxValidator(URL url) { // ... } public void validate(Invocation invocation) throws Exception { // .</description></item><item><title>日志适配扩展</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/logger-adapter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/logger-adapter/</guid><description>扩展说明 日志输出适配扩展点。
扩展接口 org.apache.dubbo.common.logger.LoggerAdapter
扩展配置 &amp;lt;dubbo:application logger=&amp;#34;xxx&amp;#34; /&amp;gt; 或者：
-Ddubbo:application.logger=xxx 已知扩展 org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter org.apache.dubbo.common.logger.jcl.JclLoggerAdapter org.apache.dubbo.common.logger.log4j.Log4jLoggerAdapter org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter org.apache.dubbo.common.logger.jdk.JdkLoggerAdapter 扩展示例 Maven 项目结构：
src |-main |-java |-com |-xxx |-XxxLoggerAdapter.java (实现LoggerAdapter接口) |-resources |-META-INF |-dubbo |-org.apache.dubbo.common.logger.LoggerAdapter (纯文本文件，内容为：xxx=com.xxx.XxxLoggerAdapter) XxxLoggerAdapter.java：
package com.xxx; import org.apache.dubbo.common.logger.LoggerAdapter; public class XxxLoggerAdapter implements LoggerAdapter { public Logger getLogger(URL url) { // ... } } XxxLogger.java：
package com.xxx; import org.apache.dubbo.common.logger.Logger; public class XxxLogger implements Logger { public XxxLogger(URL url) { // ... } public void info(String msg) { // .</description></item><item><title/><link>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/page/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/dev/impls/page/</guid><description>页面扩展 扩展说明 对等网络节点组网器。
扩展接口 org.apache.dubbo.container.page.PageHandler
扩展配置 &amp;lt;dubbo:protocol page=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; &amp;lt;!-- 缺省值设置，当&amp;lt;dubbo:protocol&amp;gt;没有配置page属性时，使用此配置 --&amp;gt; &amp;lt;dubbo:provider page=&amp;#34;xxx,yyy&amp;#34; /&amp;gt; 已知扩展 org.apache.dubbo.container.page.pages.HomePageHandler org.apache.dubbo.container.page.pages.StatusPageHandler org.apache.dubbo.container.page.pages.LogPageHandler org.apache.dubbo.container.page.pages.SystemPageHandler 扩展示例 Maven 项目结构：
src |-main |-java |-com |-xxx |-XxxPageHandler.java (实现PageHandler接口) |-resources |-META-INF |-dubbo |-org.apache.dubbo.container.page.PageHandler (纯文本文件，内容为：xxx=com.xxx.XxxPageHandler) XxxPageHandler.java：
package com.xxx; import org.apache.dubbo.container.page.PageHandler; public class XxxPageHandler implements PageHandler { public Group lookup(URL url) { // ... } } META-INF/dubbo/org.apache.dubbo.container.page.PageHandler：
xxx=com.xxx.XxxPageHandler</description></item></channel></rss>