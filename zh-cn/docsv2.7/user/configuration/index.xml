<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>配置手册 on Apache Dubbo</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/user/configuration/</link><description>Recent content in 配置手册 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/docsv2.7/user/configuration/index.xml" rel="self" type="application/rss+xml"/><item><title>XML 配置</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/user/configuration/xml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/user/configuration/xml/</guid><description>有关 XML 的详细配置项，请参见：配置参考手册。如果不想使用 Spring 配置，而希望通过 API 的方式进行调用，请参见：API配置。想知道如何使用配置，请参见：快速启动。
请在此查看文档描述的完整示例
provider.xml 示例 &amp;lt;beans xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:dubbo=&amp;#34;http://dubbo.apache.org/schema/dubbo&amp;#34; xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&amp;#34;&amp;gt; &amp;lt;dubbo:application name=&amp;#34;demo-provider&amp;#34;/&amp;gt; &amp;lt;dubbo:registry address=&amp;#34;zookeeper://127.0.0.1:2181&amp;#34;/&amp;gt; &amp;lt;dubbo:protocol name=&amp;#34;dubbo&amp;#34; port=&amp;#34;20890&amp;#34;/&amp;gt; &amp;lt;bean id=&amp;#34;demoService&amp;#34; class=&amp;#34;org.apache.dubbo.samples.basic.impl.DemoServiceImpl&amp;#34;/&amp;gt; &amp;lt;dubbo:service interface=&amp;#34;org.apache.dubbo.samples.basic.api.DemoService&amp;#34; ref=&amp;#34;demoService&amp;#34;/&amp;gt; &amp;lt;/beans&amp;gt; consumer.xml示例 &amp;lt;beans xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:dubbo=&amp;#34;http://dubbo.apache.org/schema/dubbo&amp;#34; xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&amp;#34;&amp;gt; &amp;lt;dubbo:application name=&amp;#34;demo-consumer&amp;#34;/&amp;gt; &amp;lt;dubbo:registry group=&amp;#34;aaa&amp;#34; address=&amp;#34;zookeeper://127.0.0.1:2181&amp;#34;/&amp;gt; &amp;lt;dubbo:reference id=&amp;#34;demoService&amp;#34; check=&amp;#34;false&amp;#34; interface=&amp;#34;org.apache.dubbo.samples.basic.api.DemoService&amp;#34;/&amp;gt; &amp;lt;/beans&amp;gt; 所有标签都支持自定义参数，用于不同扩展点实现的特殊配置，如：
&amp;lt;dubbo:protocol name=&amp;#34;jms&amp;#34;&amp;gt; &amp;lt;dubbo:parameter key=&amp;#34;queue&amp;#34; value=&amp;#34;your_queue&amp;#34; /&amp;gt; &amp;lt;/dubbo:protocol&amp;gt; 或： 1
&amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:dubbo=&amp;#34;http://dubbo.apache.org/schema/dubbo&amp;#34; xmlns:p=&amp;#34;http://www.springframework.org/schema/p&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&amp;#34;&amp;gt; &amp;lt;dubbo:protocol name=&amp;#34;jms&amp;#34; p:queue=&amp;#34;your_queue&amp;#34; /&amp;gt; &amp;lt;/beans&amp;gt; 配置之间的关系 标签 用途 解释 &amp;lt;dubbo:service/&amp;gt; 服务配置 用于暴露一个服务，定义服务的元信息，一个服务可以用多个协议暴露，一个服务也可以注册到多个注册中心 &amp;lt;dubbo:reference/&amp;gt; 2 引用配置 用于创建一个远程服务代理，一个引用可以指向多个注册中心 &amp;lt;dubbo:protocol/&amp;gt; 协议配置 用于配置提供服务的协议信息，协议由提供方指定，消费方被动接受 &amp;lt;dubbo:application/&amp;gt; 应用配置 用于配置当前应用信息，不管该应用是提供者还是消费者 &amp;lt;dubbo:module/&amp;gt; 模块配置 用于配置当前模块信息，可选 &amp;lt;dubbo:registry/&amp;gt; 注册中心配置 用于配置连接注册中心相关信息 &amp;lt;dubbo:monitor/&amp;gt; 监控中心配置 用于配置连接监控中心相关信息，可选 &amp;lt;dubbo:provider/&amp;gt; 提供方配置 当 ProtocolConfig 和 ServiceConfig 某属性没有配置时，采用此缺省值，可选 &amp;lt;dubbo:consumer/&amp;gt; 消费方配置 当 ReferenceConfig 某属性没有配置时，采用此缺省值，可选 &amp;lt;dubbo:method/&amp;gt; 方法配置 用于 ServiceConfig 和 ReferenceConfig 指定方法级的配置信息 &amp;lt;dubbo:argument/&amp;gt; 参数配置 用于指定方法参数配置 不同粒度配置的覆盖关系 以 timeout 为例，下图显示了配置的查找顺序，其它 retries, loadbalance, actives 等类似：</description></item><item><title>动态配置中心</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/user/configuration/config-center/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/user/configuration/config-center/</guid><description>配置中心（v2.7.0）在 Dubbo 中承担两个职责：
外部化配置。启动配置的集中式存储 （简单理解为 dubbo.properties 的外部化存储）。 服务治理。服务治理规则的存储与通知。 启用动态配置，以 Zookeeper 为例，可查看 动态配置配置项详解
&amp;lt;dubbo:config-center address=&amp;#34;zookeeper://127.0.0.1:2181&amp;#34;/&amp;gt; 或者
dubbo.config-center.address=zookeeper://127.0.0.1:2181 或者
ConfigCenterConfig configCenter = new ConfigCenterConfig(); configCenter.setAddress(&amp;#34;zookeeper://127.0.0.1:2181&amp;#34;); 为了兼容 2.6.x 版本配置，在使用 Zookeeper 作为注册中心，且没有显示配置配置中心的情况下，Dubbo 框架会默认将此 Zookeeper 用作配置中心，但将只作服务治理用途。
外部化配置 外部化配置目的之一是实现配置的集中式管理，这部分业界已经有很多成熟的专业配置系统如 Apollo, Nacos 等，Dubbo 所做的主要是保证能配合这些系统正常工作。
外部化配置和其他本地配置在内容和格式上并无区别，可以简单理解为 dubbo.properties 的外部化存储，配置中心更适合将一些公共配置如注册中心、元数据中心配置等抽取以便做集中管理。
# 将注册中心地址、元数据中心地址等配置集中管理，可以做到统一环境、减少开发侧感知。 dubbo.registry.address=zookeeper://127.0.0.1:2181 dubbo.registry.simplified=true dubbo.metadata-report.address=zookeeper://127.0.0.1:2181 dubbo.protocol.name=dubbo dubbo.protocol.port=20880 dubbo.application.qos.port=33333 优先级
外部化配置默认较本地配置有更高的优先级，因此这里配置的内容会覆盖本地配置值，关于 各配置形式间的覆盖关系 有单独一章说明，你也可通过以下选项调整配置中心的优先级：
-Ddubbo.config-center.highest-priority=false 作用域
外部化配置有全局和应用两个级别，全局配置是所有应用共享的，应用级配置是由每个应用自己维护且只对自身可见的。当前已支持的扩展实现有Zookeeper、Apollo。
Zookeeper &amp;lt;dubbo:config-center address=&amp;#34;zookeeper://127.0.0.1:2181&amp;#34;/&amp;gt; 默认所有的配置都存储在 /dubbo/config 节点，具体节点结构图如下：
namespace，用于不同配置的环境隔离。 config，Dubbo约定的固定节点，不可更改，所有配置和服务治理规则都存储在此节点下。 dubbo/application，分别用来隔离全局配置、应用级别配置：dubbo是默认group值，application对应应用名 dubbo.properties，此节点的node value存储具体配置内容 Apollo &amp;lt;dubbo:config-center protocol=&amp;#34;apollo&amp;#34; address=&amp;#34;127.0.0.1:2181&amp;#34;/&amp;gt; Apollo中的一个核心概念是命名空间 - namespace（和上面zookeeper的namespace概念不同），在这里全局和应用级别配置就是通过命名空间来区分的。</description></item><item><title>属性配置</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/user/configuration/properties/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/user/configuration/properties/</guid><description>如果你的应用足够简单，例如，不需要多注册中心或多协议，并且需要在spring容器中共享配置，那么，我们可以直接使用 dubbo.properties 作为默认配置。
Dubbo 可以自动加载 classpath 根目录下的 dubbo.properties，但是你同样可以使用 JVM 参数来指定路径：-Ddubbo.properties.file=xxx.properties。
映射规则 可以将 xml 的 tag 名和属性名组合起来，用 ‘.’ 分隔。每行一个属性。
dubbo.application.name=foo 相当于 &amp;lt;dubbo:application name=&amp;quot;foo&amp;quot; /&amp;gt; dubbo.registry.address=10.20.153.10:9090 相当于 &amp;lt;dubbo:registry address=&amp;quot;10.20.153.10:9090&amp;quot; /&amp;gt; 如果在 xml 配置中有超过一个的 tag，那么你可以使用 ‘id’ 进行区分。如果你不指定 id，它将作用于所有 tag。
dubbo.protocol.rmi.port=1099 相当于 &amp;lt;dubbo:protocol id=&amp;quot;rmi&amp;quot; name=&amp;quot;rmi&amp;quot; port=&amp;quot;1099&amp;quot; /&amp;gt; dubbo.registry.china.address=10.20.153.10:9090 相当于 &amp;lt;dubbo:registry id=&amp;quot;china&amp;quot; address=&amp;quot;10.20.153.10:9090&amp;quot; /&amp;gt; 如下，是一个典型的 dubbo.properties 配置样例。
dubbo.application.name=foo dubbo.application.owner=bar dubbo.registry.address=10.20.153.10:9090 重写与优先级 优先级从高到低：
JVM -D 参数：当你部署或者启动应用时，它可以轻易地重写配置，比如，改变 dubbo 协议端口； XML：XML 中的当前配置会重写 dubbo.properties 中的； Properties：默认配置，仅仅作用于以上两者没有配置时。 如果在 classpath 下有超过一个 dubbo.</description></item><item><title>自动加载环境变量</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/user/configuration/environment-variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/user/configuration/environment-variables/</guid><description>从 2.7.3 版本开始，Dubbo 会自动从约定 key 中读取配置，并将配置以 Key-Value 的形式写入到URL中。
支持的 key 有以下两个：
dubbo.labels，指定一些列配置到 URL 中的键值对，通常通过 JVM -D 或系统环境变量指定。
增加以下配置：
# JVM -Ddubbo.labels = &amp;#34;tag1=value1; tag2=value2&amp;#34; # 环境变量 DUBBO_LABELS = &amp;#34;tag1=value1; tag2=value2&amp;#34; 最终生成的 URL 会包含 tag1、tag2 两个 key: dubbo://xxx?tag1=value1&amp;amp;tag2=value2
dubbo.env.keys，指定环境变量 key 值，Dubbo 会尝试从环境变量加载每个 key
# JVM -Ddubbo.env.keys = &amp;#34;DUBBO_TAG1, DUBBO_TAG2&amp;#34; # 环境变量 DUBBO_ENV_KEYS = &amp;#34;DUBBO_TAG1, DUBBO_TAG2&amp;#34; 最终生成的 URL 会包含 DUBBO_TAG1、DUBBO_TAG2 两个 key: dubbo://xxx?DUBBO_TAG1=value1&amp;amp;DUBBO_TAG2=value2</description></item><item><title>API 配置</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/user/configuration/api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/user/configuration/api/</guid><description>API 属性与配置项一对一，各属性含义，请参见：配置参考手册，比如：ApplicationConfig.setName(&amp;quot;xxx&amp;quot;) 对应 &amp;lt;dubbo:application name=&amp;quot;xxx&amp;quot; /&amp;gt; 1
服务提供者 import org.apache.dubbo.rpc.config.ApplicationConfig; import org.apache.dubbo.rpc.config.RegistryConfig; import org.apache.dubbo.rpc.config.ProviderConfig; import org.apache.dubbo.rpc.config.ServiceConfig; import com.xxx.XxxService; import com.xxx.XxxServiceImpl; // 服务实现 XxxService xxxService = new XxxServiceImpl(); // 当前应用配置 ApplicationConfig application = new ApplicationConfig(); application.setName(&amp;#34;xxx&amp;#34;); // 连接注册中心配置 RegistryConfig registry = new RegistryConfig(); registry.setAddress(&amp;#34;10.20.130.230:9090&amp;#34;); registry.setUsername(&amp;#34;aaa&amp;#34;); registry.setPassword(&amp;#34;bbb&amp;#34;); // 服务提供者协议配置 ProtocolConfig protocol = new ProtocolConfig(); protocol.setName(&amp;#34;dubbo&amp;#34;); protocol.setPort(12345); protocol.setThreads(200); // 注意：ServiceConfig为重对象，内部封装了与注册中心的连接，以及开启服务端口 // 服务提供者暴露服务配置 ServiceConfig&amp;lt;XxxService&amp;gt; service = new ServiceConfig&amp;lt;XxxService&amp;gt;(); // 此实例很重，封装了与注册中心的连接，请自行缓存，否则可能造成内存和连接泄漏 service.setApplication(application); service.setRegistry(registry); // 多个注册中心可以用setRegistries() service.</description></item><item><title>注解配置</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/user/configuration/annotation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/user/configuration/annotation/</guid><description>提示 需要 2.6.3 及以上版本支持。 点此查看 完整示例 服务提供方 Service注解暴露服务 @Service public class AnnotationServiceImpl implements AnnotationService { @Override public String sayHello(String name) { return &amp;#34;annotation: hello, &amp;#34; + name; } } 增加应用共享配置 # dubbo-provider.properties dubbo.application.name=annotation-provider dubbo.registry.address=zookeeper://127.0.0.1:2181 dubbo.protocol.name=dubbo dubbo.protocol.port=20880 指定Spring扫描路径 @Configuration @EnableDubbo(scanBasePackages = &amp;#34;org.apache.dubbo.samples.simple.annotation.impl&amp;#34;) @PropertySource(&amp;#34;classpath:/spring/dubbo-provider.properties&amp;#34;) static public class ProviderConfiguration { } 服务消费方 Reference注解引用服务 @Component(&amp;#34;annotationAction&amp;#34;) public class AnnotationAction { @Reference private AnnotationService annotationService; public String doSayHello(String name) { return annotationService.sayHello(name); } } 增加应用共享配置 # dubbo-consumer.</description></item><item><title>配置加载流程</title><link>https://dubbo.apache.org/zh-cn/docsv2.7/user/configuration/configuration-load-process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/docsv2.7/user/configuration/configuration-load-process/</guid><description>此篇文档主要讲在应用启动阶段，Dubbo框架如何将所需要的配置采集起来（包括应用配置、注册中心配置、服务配置等），以完成服务的暴露和引用流程。
根据驱动方式的不同（比如Spring或裸API编程）配置形式上肯定会有所差异，具体请参考XML配置、Annotation配置、API配置三篇文档。除了外围驱动方式上的差异，Dubbo的配置读取总体上遵循了以下几个原则：
Dubbo 支持了多层级的配置，并按预定优先级自动实现配置间的覆盖，最终所有配置汇总到数据总线URL后驱动后续的服务暴露、引用等流程。 ApplicationConfig、ServiceConfig、ReferenceConfig 可以被理解成配置来源的一种，是直接面向用户编程的配置采集方式。 配置格式以 Properties 为主，在配置内容上遵循约定的 path-based 的命名规范 配置来源 首先，从Dubbo支持的配置来源说起，默认有四种配置来源：
JVM System Properties，-D 参数 Externalized Configuration，外部化配置 ServiceConfig、ReferenceConfig 等编程接口采集的配置 本地配置文件 dubbo.properties 覆盖关系 下图展示了配置覆盖关系的优先级，从上到下优先级依次降低：
点此查看外部化配置详情
配置格式 目前Dubbo支持的所有配置都是.properties格式的，包括-D、Externalized Configuration等，.properties中的所有配置项遵循一种path-based的配置格式：
# 应用级别 dubbo.{config-type}[.{config-id}].{config-item}={config-item-value} # 服务级别 dubbo.service.{interface-name}[.{method-name}].{config-item}={config-item-value} dubbo.reference.{interface-name}[.{method-name}].{config-item}={config-item-value} # 多配置项 dubbo.{config-type}s.{config-id}.{config-item}={config-item-value} 应用级别
dubbo.application.name=demo-provider dubbo.registry.address=zookeeper://127.0.0.1:2181 dubbo.protocol.port=-1 服务级别
dubbo.service.org.apache.dubbo.samples.api.DemoService.timeout=5000 dubbo.reference.org.apache.dubbo.samples.api.DemoService.timeout=6000 dubbo.reference.org.apache.dubbo.samples.api.DemoService.sayHello.timeout=7000 多配置项
dubbo.registries.unit1.address=zookeeper://127.0.0.1:2181 dubbo.registries.unit2.address=zookeeper://127.0.0.1:2182 dubbo.protocols.dubbo.name=dubbo dubbo.protocols.dubbo.port=20880 dubbo.protocols.hessian.name=hessian dubbo.protocols.hessian.port=8089 扩展配置
dubbo.application.parameters=[{item1:value1},{item2:value2}] dubbo.reference.org.apache.dubbo.samples.api.DemoService.parameters=[{item3:value3}] 几种编程配置方式 接下来，我们看一下选择不同的开发方式时，对应到 ServiceConfig、ReferenceConfig 等编程接口采集的配置的变化。
Spring XML 参见示例
&amp;lt;!-- dubbo-provier.xml --&amp;gt; &amp;lt;dubbo:application name=&amp;#34;demo-provider&amp;#34;/&amp;gt; &amp;lt;dubbo:config-center address=&amp;#34;zookeeper://127.</description></item></channel></rss>