<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>源码解读 on Apache Dubbo</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/refer/sourcecode/</link><description>Recent content in 源码解读 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/refer/sourcecode/index.xml" rel="self" type="application/rss+xml"/><item><title>网络协议</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/refer/sourcecode/protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/refer/sourcecode/protocol/</guid><description>对于 Dubbogo 微服务框架，网络协议为远程过程调用中负责网络通信的模块，负责应用层到网络层的数据序列化、打包、请求发起、网络端口监听等功能。Dubbogo 为协议抽象了一套接口如下：
type Protocol interface { // Export service for remote invocation Export(invoker Invoker) Exporter // Refer a remote service Refer(url *common.URL) Invoker // Destroy will destroy all invoker and exporter, so it only is called once. Destroy() } 该接口包含三个方法。其中 Export 方法负责服务的暴露过程。入参 invoker 为dubbo 的概念，其封装了一个可以被调用的实例。在具体网络协议（例如Triple）实现的 Export 方法中，会针对特定的协议，将封装有一定逻辑的可调用实例 Invoker 以网络端口监听的形式暴露给外部服务，来自外部针对该网络端口的请求将会被 Export 方法开启的监听协程获取，进而根据网络协议进行拆解包和反序列化，得到解析后的请求数据。
Refer 方法负责服务的引用过程，其入参 url 为 dubbo 框架通用的结构，可以描述一个希望引用的服务，url 参数中包含了多个希望引用服务的参数，例如对应服务的接口名(interface)，版本号(version)，使用协议(protocol) 等等。在具体网络协议（例如Triple）实现的 Refer 方法中，会将特定的网络协议封装到 Invoker 可调用实例的方法中，用户层发起的 RPC 调用即可直接通过返回的 Invoker 对象，发起特定协议的网络请求。
Destroy 方法作用为销毁当前暴露的服务，用于服务下线场景。Dubbogo 框架有优雅下线机制，可以在服务进程终止前以监听信号的形式，下线所有已启动的服务。</description></item><item><title>注册中心</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/refer/sourcecode/registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/refer/sourcecode/registry/</guid><description>Dubbogo 为注册中心抽象了一套接口如下：
// Registry Extension - Registry type Registry interface { common.Node // Register is used for service provider calling, register services // to registry. And it is also used for service consumer calling, register // services cared about, for dubbo&amp;#39;s admin monitoring. Register(url *common.URL) error // UnRegister is required to support the contract: // 1. If it is the persistent stored data of dynamic=false, the // registration data can not be found, then the IllegalStateException // is thrown, otherwise it is ignored.</description></item><item><title>新特性</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/refer/sourcecode/3.0_feature/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/refer/sourcecode/3.0_feature/</guid><description>1. Triple 协议 1.1 概述 通信层面
Triple 协议，也称为Dubbo3协议，是基于HTTP2 + gRPC协议，增加特定字段和逻辑的扩展协议，保证了和原生gRPC协议互通。在此基础之上，Triple 新协议将更原生地支持 Dubbo 服务治理能力。并支持流式RPC调用。
简单来说，可以理解为 Triple = gRPC + Dubbo
序列化
Triple 协议使用高效的PB序列化方式，并在此基础之上增加序列化协议的可扩展支持。
用户开发习惯：
Triple 服务在开发前需要预定义.proto文件，对于习惯在编码前先定义IDL的Go语言开发者带来便捷。不同于符合java编程习惯的，定义JavaClassName用于描述接口的 Dubbo-go 1.x版本。
跨语言互通性：
可与 Dubbo-Java 实现跨语言互通。
2. 应用级服务发现 2.1 简介 在服务注册阶段，服务端实例将应用级别的注册信息，主要包含从应用名到实例IP的映射注册到注册中心。在服务发现阶段，客户端实例，通过注册中心获取到需要请求的服务实例IP。进入服务自省阶段，服务自省过程为通过应用信息获取接口信息的过程。如上图，包含两种模式：
remote模式：通过元数据中心（例如 zk ）获取应用到接口元数据的映射 local模式：直接通过服务端获取应用到接口元数据的映射（通过 Dubbo 协议针对 Metadata Service 发起 RPC 调用） 经过服务自省后，客户端正式向对应实例发起调用。这样做最明显的好处是减少了注册中心的数据量，即注册中心只保存了应用级别的数据。
用户在使用 Dubbo-go 3.0的应用级服务发现能力时，可以仿照示例，直接在配置文件中配置服务自省模式和元数据中心信息，引入依赖，开启应用级别服务发现。
2.2 应用级服务发现介绍文章 应用级服务发现解析
3. Mesh 路由规则 用户可定义路由文件：
virtual_service.yaml
以及 dist_rule.yml
框架可根据路由文件针对特定的请求进行流量转发。
4. 相关文章 阿里云官方介绍文章：《Dubbo 3.0 - 开启下一代云原生微服务》</description></item><item><title>泛化调用</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/refer/sourcecode/generic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/refer/sourcecode/generic/</guid><description>1. Dubbo-go 泛化调用 Java Server 使用 Triple 协议 + hessian2 序列化方案
1.1 Java-Server启动 传输结构定义 package org.apache.dubbo; import java.io.Serializable; import java.util.Date; public class User implements Serializable { private String id; private String name; private int age; private Date time = new Date(); } 接口定义 package org.apache.dubbo; import java.util.ArrayList; import java.util.List; import java.util.Map; //import org.apache.dubbo.rpc.filter.GenericFilter; public interface UserProvider { User GetUser1(String userId); } 1.2 Go-Client 泛化调用 此处展示以 API 的形式构造泛化接口引用
// 初始化 Reference 配置 refConf := config.</description></item><item><title>泛化调用</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/refer/sourcecode/generic-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/refer/sourcecode/generic-2/</guid><description>1. Dubbogo 泛化调用 Java Server 使用 Triple 协议 + hessian2 序列化方案
可参考Dubbogo 3.0 泛化调用文档
1.1 Java-Server启动 传输结构定义 package org.apache.dubbo; import java.io.Serializable; import java.util.Date; public class User implements Serializable { private String id; private String name; private int age; private Date time = new Date(); } 接口定义 package org.apache.dubbo; import java.util.ArrayList; import java.util.List; import java.util.Map; //import org.apache.dubbo.rpc.filter.GenericFilter; public interface UserProvider { User GetUser1(String userId); } 1.2 Go-Client 泛化调用 此处展示以 API 的形式构造泛化接口引用</description></item><item><title>AOP 与可扩展机制</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/refer/sourcecode/aop_and_extension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/refer/sourcecode/aop_and_extension/</guid><description>1. extension 模块与 init 方法 1.1 接口与实现 golang 中的一个接口往往伴随多个实现类，dubbo-go 提供了针对接口实现类的可插拔可扩展机制。降低模块之间的耦合性，方便开发者引入、自定义组件。
1.2 golang 中的 init 方法 init 方法作为 golang 中特殊的方法，用户引入一组模块后，会在程序启动时率先执行这些模块内的init 方法，进行加载逻辑，该方法是dubbogo注册扩展组件的重要方式。
1.3 extension 模块 在框架源码中，有一个特殊的模块: common/extension ，这一模块负责缓存所有可扩展组件的实现。
以负载均衡模块为例：common/extension/loadbalance.go
package extension import ( &amp;#34;dubbo.apache.org/dubbo-go/v3/cluster/loadbalance&amp;#34; ) var loadbalances = make(map[string]func() loadbalance.LoadBalance) // SetLoadbalance sets the loadbalance extension with @name // For example: random/round_robin/consistent_hash/least_active/... func SetLoadbalance(name string, fcn func() loadbalance.LoadBalance) { loadbalances[name] = fcn } // GetLoadbalance finds the loadbalance extension with @name func GetLoadbalance(name string) loadbalance.</description></item><item><title>Dubbo的应用和接口</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/refer/sourcecode/app_and_interface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/refer/sourcecode/app_and_interface/</guid><description>Dubbogo 服务层级 Dubbogo 服务层级为两个级别：分别是应用级别(App Level)和接口级别(Interface Level)，该服务分层与框架配置结构息息相关。
如下图所示，可以看到，应用级别的组件以浅红色标注，接口级别的组件以浅蓝色标注：
1. 应用级别组件 应用级别组件的特点：被当前应用的所有接口级别组件共用。
应用级别的主要组件如下：
应用信息模块
包含应用维度相关信息，包括应用名、版本号、数据上报方式等
Consumer 模块
Consumer 模块负责客户端相关信息，包括一个或多个引用（Reference）结构，以及超时、客户端过滤器（consumer filter）等相关信息。
Provider 模块
Provider 模块负责服务端相关信息，包括一个或多个服务（Service）结构、服务端过滤器（provider filter）等相关信息。
注册中心（Registry）模块
注册中心模块负责定义好所要使用的一系列注册中心，例如框架支持的ZK、Nacos、ETCD等中间件。应用级别的注册模块只负责声明，由接口级别的组件进行引用，引用时以用户自定义的注册中心ID（registryID) 作为索引。
协议（Protocol）模块
协议模块只存在于服务端。
协议模块关心服务的暴露信息，例如协议名、服务监听IP、端口号等信息。协议模块属于应用级别，只负责声明，由接口级别的组件进行引用，引用时以用户自定义的协议ID（protocolID) 作为索引。
元数据中心模块
元数据中心类似于注册中心模块，负责声明框架需要使用的元数据中心，从而将元数据成功上报。
配置中心模块
路由模块
日志模块
监控模块
2. 接口级别组件 服务（Service）模块
服务模块被使用于任何暴露的服务，声明接口暴露所需的信息，包括例如接口名、协议、序列化方式等，负责单个服务接口的暴露。
引用（Reference）模块
引用模块被使用于需要调用的远程服务的客户端，其声明了需要请求接口所需的信息，包括例如接口名、协议、序列化方式等、负责特定协议的抽象，参与客户端的生成。
3. 说明 暴露的服务是接口级别的，一个用户定义的 Provider Struct/一个用户定义的Consumer Struct，对应一个Service/Reference 模块，一个应用可以同时存在Consumer 模块和 Provider 模块，因此可以同时存在多个Service/Reference 模块。</description></item><item><title>架构</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/refer/sourcecode/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/refer/sourcecode/architecture/</guid><description>架构说明 节点说明 Registry : dubbo-go中负责服务注册与发现的注册中心 Consumer : 调用远程服务的服务消费方 Provider : 暴露服务的服务提供方 过程说明 0. register : 当服务提供方在启动的时候，会自动将自己的服务注册到注册中心 1. subscribe : 服务消费方会在启动的时候，向注册中心订阅自己所需要的服务 2. notify : 注册中心返回服务注册的信息给到服务消费方，当订阅的服务发生变更，会推送变更的数据给到消费方 3. invoke : 服务消费者根据从注册中心获得的服务地址，经过负载均衡算法选出一个合适的服务地址发起请求</description></item></channel></rss>