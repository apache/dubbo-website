<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>配置文件 on Apache Dubbo</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/configuration/</link><description>Recent content in 配置文件 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/configuration/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 dubbogo.yml 配置文件开发应用</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/configuration/file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/configuration/file/</guid><description>1.介绍 本文档演示如何在框架中使用 yaml 配置文件进行微服务开发，是相比于 API 的另一种微服务开发模式。你可以完全使用 yml 配置文件进行开发，也可以将部分全局配置放到配置文件，而只在 API 中完成服务定义。
这种模式下，一定要通过 DUBBO_GO_CONFIG_PATH 指定配置文件路径：
export DUBBO_GO_CONFIG_PATH=&amp;#34;../conf/dubbogo.yml&amp;#34; 2. 使用说明 可在此查看 完整示例源码。
2.1 运行示例 . ├── go-client │ ├── cmd │ │ └── main.go │ └── conf │ └── dubbogo.yml ├── go-server │ ├── cmd │ │ └── main.go │ └── conf │ └── dubbogo.yml └─── proto ├── greet.pb.go ├── greet.proto └── greet.triple.go 通过 IDL./proto/greet.proto 定义服务 使用triple协议
build Proto cd path_to_dubbogo-sample/config_yaml/proto protoc --go_out=. --go-triple_out=.</description></item><item><title>远程配置文件</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/configuration/remote/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/configuration/remote/</guid><description>Dubbo 框架支持将配置文件 &amp;lsquo;dubbogo.yaml&amp;rsquo; 的内容预先放入配置中心，再通过远程加载的方式与本地配置合并，以此实现一些配置的动态和集中式管理。
注意 凡是正确配置了config-center 地址的应用，都会优先从配置中心加载整个配置文件。 可在此查看 完整示例源码地址，本文使用 zookeeper 演示，nacos 使用方法类似，并且在以上地址中有具体源码示例。
启用配置中心 在 dubbo-go 应用通过 dubbo.WithConfigCenter() 启用配置中心：
ins, err := dubbo.NewInstance( dubbo.WithConfigCenter( config_center.WithZookeeper(), config_center.WithDataID(&amp;#34;dubbo-go-samples-configcenter-zookeeper-server&amp;#34;), config_center.WithAddress(&amp;#34;127.0.0.1:2181&amp;#34;), config_center.WithGroup(&amp;#34;dubbogo&amp;#34;), ), ) if err != nil { panic(err) } 在运行应用之前，提前将以下配置写入 zookeeper 集群，写入路径为 /dubbo/config/dubbogo/dubbo-go-samples-configcenter-zookeeper-server：
dubbo: registries: demoZK: protocol: zookeeper timeout: 3s address: &amp;#39;127.0.0.1:2181&amp;#39; protocols: triple: name: tri port: 20000 启动服务端并注册服务 srv, err := ins.NewServer() if err != nil { panic(err) } if err := greet.</description></item></channel></rss>