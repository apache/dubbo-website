<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>与dubbo-java互通 on Apache Dubbo</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/interop-dubbo/</link><description>Recent content in 与dubbo-java互通 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/interop-dubbo/index.xml" rel="self" type="application/rss+xml"/><item><title>基于 protobuf 实现 triple 协议互通（适用于两边都用 protobuf 开发的场景）</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/interop-dubbo/call_java_protocol_triple_protobuf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/interop-dubbo/call_java_protocol_triple_protobuf/</guid><description>我们这里提供一个示例，演示如何使用 triple 协议实现 dubbo-java 和 dubbo-go 互通，可在此查看 示例完整源码。
示例主要内容如下：
go，go 语言实现的 rpc server 与 client java，java 语言实现的 rpc server 与 client 共享 protobuf 服务定义 共享服务定义如下，请注意以下 package、go_package 、java_package 的具体定义：
//protoc --go_out=. --go_opt=paths=source_relative --go-triple_out=. greet.proto syntax = &amp;#34;proto3&amp;#34;; package org.apache.dubbo.sample; option go_package = &amp;#34;github.com/apache/dubbo-go-samples/java_interop/protobuf-triple/go/proto;proto&amp;#34;; //package of go option java_package = &amp;#39;org.apache.dubbo.sample&amp;#39;; option java_multiple_files = true; option java_outer_classname = &amp;#34;HelloWorldProto&amp;#34;; option objc_class_prefix = &amp;#34;WH&amp;#34;; // The greeting service definition. service Greeter { // Sends a greeting rpc SayHello(HelloRequest) returns (HelloReply); // Sends a greeting via stream // rpc SayHelloStream (stream HelloRequest) returns (stream HelloReply) {} } // The request message containing the user&amp;#39;s name.</description></item><item><title>非protoubf模式协议互通（适用于老版本 dubbo java 应用）</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/interop-dubbo/call_java_protocol_dubbo_non_protobuf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/interop-dubbo/call_java_protocol_dubbo_non_protobuf/</guid><description>注意 在阅读本文档之前，请记住我们推荐使用 protobuf+triple 的模式编写 java 和 go 语言互通的服务。本文仅当您已经有老版本 dubbo java 应用的情况下适用，否则的话请参考上一篇文档，使用 protobuf+triple 开发服务。 可在此查看本文档 完整示例源码。
go-client 调用 java-server 但如果您是 dubbo java 的老用户，可能您的 dubbo java 应用并没有使用 protobuf（直接使用 java interface 定义服务），这个时候您需要使用以下方式开发 dubbo go-client，来调用老版本的 dubbo 服务。
以下方案同时支持 triple(non-protobuf) 和 dubbo 协议，你只需要调整协议配置 client.WithClientProtocolTriple() 即可。
假设我们当前的 java 服务定义如下：
package org.apache.dubbo.samples.api; public interface GreetingsService { String sayHi(String name); } 我们需要这么编写 go-client，以实现服务调用：
// 生成共享 client，指定 cliDubbo, _ := client.NewClient( client.WithClientProtocolDubbo(), client.WithClientSerialization(constant.Hessian2Serialization), ) // 生成服务代理，这里指定 java 服务全路径名 connDubbo, _ := cliDubbo.</description></item><item><title>基于应用级服务发现实现地址互通</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/interop-dubbo/service-discovery/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/interop-dubbo/service-discovery/</guid><description>前面两篇示例我们演示了 dubbo java 和 dubbo go 在协议层面的互通能力，涵盖 triple 和 dubbo 两种协议，
非 protoubf 模式协议互通（triple 和 dubbo 协议） protobuf+triple 协议互通（triple 协议） 在本篇文档中，我们将演示 dubbo java 和 dubbo go 的服务发现互通能力，这样结合协议兼容性，我们就能实现完整的打通 dubbo java 和 dubbo go 微服务体系。
本文档使用 Nacos 注册中心作为演示，可在此查看本文档 示例完整源码。
before run the code , you should Follow this instruction to install and start Nacos server.
应用级别服务发现 cd service start java server
cd java-server sh run.sh start go client
cd go-client go run client.</description></item></channel></rss>