<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>与grpc互通 on Apache Dubbo</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/interop-grpc/</link><description>Recent content in 与grpc互通 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/interop-grpc/index.xml" rel="self" type="application/rss+xml"/><item><title>与 gRPC 应用互通</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/interop-grpc/call_grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/interop-grpc/call_grpc/</guid><description>1.介绍 triple 协议 100% 兼容 gRPC，本示例演示使用 dubbo-go 开发与 grpc 互调的应用，可在此查看 完整示例源码地址
2.如何互通 Dubbo-go的Triple协议能够兼容grpc协议 在创建服务端时，可以设置protocol.WithTriple()使用Triple协议
srv, err := server.NewServer( server.WithServerProtocol( protocol.WithPort(20000), protocol.WithTriple(), ), ) 3.案例 3.1服务端介绍 服务端proto文件 源文件路径：dubbo-go-sample/rpc/grpc/proto/greet.proto
syntax = &amp;#34;proto3&amp;#34;; package greet; option go_package = &amp;#34;github.com/apache/dubbo-go-samples/rpc/grpc/proto;greet&amp;#34;; message GreetRequest { string name = 1; } message GreetResponse { string greeting = 1; } service GreetService { rpc Greet(GreetRequest) returns (GreetResponse) {} } dubbo-go服务端 源文件路径：dubbo-go-sample/rpc/grpc/go-server/cmd/main.go
type GreetTripleServer struct { } func (srv *GreetTripleServer) Greet(ctx context.</description></item></channel></rss>