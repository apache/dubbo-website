<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>负载均衡 on Apache Dubbo</title><link>https://cn.dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/load-balance/</link><description>Recent content in 负载均衡 on Apache Dubbo</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://cn.dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/load-balance/index.xml" rel="self" type="application/rss+xml"/><item><title>负载均衡策略与配置细节</title><link>https://cn.dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/load-balance/loadbalance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cn.dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/load-balance/loadbalance/</guid><description>&lt;p>Dubbo-go 内置了 client-based 负载均衡机制，如下是当前支持的负载均衡算法，结合上文提到的自动服务发现机制，消费端会自动使用 &lt;code>Weighted Random LoadBalance 加权随机负载均衡策略&lt;/code> 选址调用。&lt;/p>
&lt;p>如果要调整负载均衡算法，以下是 Dubbo 框架内置的负载均衡策略：&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">算法&lt;/th>
 &lt;th style="text-align: left">特性&lt;/th>
 &lt;th style="text-align: left">备注&lt;/th>
 &lt;th style="text-align: left">配置值&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">Weighted Random LoadBalance&lt;/td>
 &lt;td style="text-align: left">加权随机&lt;/td>
 &lt;td style="text-align: left">默认算法，默认权重相同&lt;/td>
 &lt;td style="text-align: left">random (默认)&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">RoundRobin LoadBalance&lt;/td>
 &lt;td style="text-align: left">加权轮询&lt;/td>
 &lt;td style="text-align: left">借鉴于 Nginx 的平滑加权轮询算法，默认权重相同&lt;/td>
 &lt;td style="text-align: left">roundrobin&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">LeastActive LoadBalance&lt;/td>
 &lt;td style="text-align: left">最少活跃优先 + 加权随机&lt;/td>
 &lt;td style="text-align: left">背后是能者多劳的思想&lt;/td>
 &lt;td style="text-align: left">leastactive&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Consistent Hash LoadBalance&lt;/td>
 &lt;td style="text-align: left">一致性哈希&lt;/td>
 &lt;td style="text-align: left">确定的入参，确定的提供者，适用于有状态请求&lt;/td>
 &lt;td style="text-align: left">consistenthashing&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">P2C LoadBalance&lt;/td>
 &lt;td style="text-align: left">Power of Two Choice&lt;/td>
 &lt;td style="text-align: left">随机选择两个节点后，继续选择“连接数”较小的那个节点。&lt;/td>
 &lt;td style="text-align: left">p2c&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Interleaved Weighted Round Robin&lt;/td>
 &lt;td style="text-align: left">一种加权轮训算法&lt;/td>
 &lt;td style="text-align: left">&lt;a href="https://en.wikipedia.org/wiki/Weighted_round_robin#Interleaved_WRR">https://en.wikipedia.org/wiki/Weighted_round_robin#Interleaved_WRR&lt;/a>&lt;/td>
 &lt;td style="text-align: left">interleavedweightedroundrobin&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">Alias Method Round Robin&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;a href="https://en.wikipedia.org/wiki/Alias_method">https://en.wikipedia.org/wiki/Alias_method&lt;/a>&lt;/td>
 &lt;td style="text-align: left">aliasmethod&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="全局配置">全局配置&lt;/h2>
&lt;p>Dubbo 框架的默认策略是 &lt;code>random&lt;/code> 加权随机负载均衡。如果要调整策略，只需要设置 &lt;code>loadbalance&lt;/code> 相应取值即可，每种负载均衡策略取值请参见文档最上方表格。&lt;/p></description></item></channel></rss>