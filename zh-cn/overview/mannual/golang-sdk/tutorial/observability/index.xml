<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>可视化观测 on Apache Dubbo</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/observability/</link><description>Recent content in 可视化观测 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/observability/index.xml" rel="self" type="application/rss+xml"/><item><title>配置和管理框架日志</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/observability/logger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/observability/logger/</guid><description>本示例演示如何配置 dubbo-go 框架日志组件，将框架运行态日志保存到指定的位置。可在此查看 完整示例源码地址。
注意 这里配置的只是 dubbo-go 框架自身的日志组件行为，即框架内部使用的日志，不影响业务日志框架的使用！ 1. 日志配置 如下所示，可以通过 log.WithZap()、log.WithLevel(&amp;quot;warn&amp;quot;) 设置 dubbo 框架日志行为：
ins, err := dubbo.NewInstance( dubbo.WithLogger( log.WithLevel(&amp;#34;warn&amp;#34;), log.WithZap(), ), ) 2. 应用共享日志组件 注意，这里配置的只是 dubbo-go 框架自身的日志组件行为（即框架内部使用的日志），不影响业务日志框架的使用！
通过以下方式，业务应用也可以选择复用这个日志组件：
import app_logger &amp;#34;github.com/dubbogo/gost/log/logger&amp;#34; app_logger.Info(&amp;#34;hello&amp;#34;) 日志 Interface
type Logger interface { Info(args ...interface{}) Warn(args ...interface{}) Error(args ...interface{}) Debug(args ...interface{}) Fatal(args ...interface{}) Infof(fmt string, args ...interface{}) Warnf(fmt string, args ...interface{}) Errorf(fmt string, args ...interface{}) Debugf(fmt string, args ...interface{}) Fatalf(fmt string, args ...interface{}) } 注意 日志API不可以在Init 阶段使用，否则可能会发生意料之外的问题。 2.</description></item><item><title>metrics监控</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/observability/rpc_metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/observability/rpc_metrics/</guid><description>Dubbo 支持采集运行态 Metrics 指标并接入 Prometheus、Grafana 系统，实现对微服务集群的可视化监控，以下是一个具体的使用示例，可查看 示例完整源码。
Contents server/main.go - is the main definition of the service, handler and rpc server client/main.go - is the rpc client proto - contains the protobuf definition of the API How to run Run server go run ./go-server/cmd/main.go test server work as expected:
curl \ --header &amp;#34;Content-Type: application/json&amp;#34; \ --data &amp;#39;{&amp;#34;name&amp;#34;: &amp;#34;Dubbo&amp;#34;}&amp;#39; \ http://localhost:20000/greet.GreetService/Greet Run client go run ./go-client/cmd/main.go deploy to local install prometheus and open prometheus config file prometheus.</description></item><item><title>链路追踪</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/observability/tracing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/observability/tracing/</guid><description>Dubbo-go 支持基于 OpenTelemetry 标准的全链路追踪埋点，同时支持通过以下 exporter 导出到不同的 tracing 后端系统。
Stdout exporter Jaeger exporter Zipkin exporter OTLP-HTTP exporter OTLP-gRPC exporter 使用方式 请注意，仅支持通过 dubbo.NewInstance 方式创建 dubbo 应用时开启 tracing 功能，也就是我们快速开始中提到的 微服务应用模式，对于 轻量 RPC API 暂时不支持开启 tracing。
示例详解 可在此查看 完整示例源码地址。
使用 dubbo.WithTracing() 开启 tracing，可以通过多个参数控制 tracing 行为：
package main import ( &amp;#34;dubbo.apache.org/dubbo-go/v3&amp;#34; _ &amp;#34;dubbo.apache.org/dubbo-go/v3/imports&amp;#34; &amp;#34;dubbo.apache.org/dubbo-go/v3/otel/trace&amp;#34; ) func main() { instance, err := dubbo.NewInstance( dubbo.WithTracing( // add tracing options here trace.WithEnabled(), // enable tracing feature trace.WithStdoutExporter(), trace.WithW3cPropagator(), trace.</description></item></channel></rss>