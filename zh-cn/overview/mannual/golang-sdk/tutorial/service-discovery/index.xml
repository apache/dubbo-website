<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>地址发现 on Apache Dubbo</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/service-discovery/</link><description>Recent content in 地址发现 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/service-discovery/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 Nacos 作为注册中心</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/service-discovery/nacos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/service-discovery/nacos/</guid><description>This example shows dubbo-go&amp;rsquo;s service discovery feature with Nacos as registry.
使用方式 通过以下方式指定注册中心地址：
ins, _ := dubbo.NewInstance( dubbo.WithName(&amp;#34;dubbo_registry_nacos_server&amp;#34;), dubbo.WithRegistry( registry.WithNacos(), registry.WithAddress(&amp;#34;127.0.0.1:8848&amp;#34;), ), dubbo.WithProtocol( protocol.WithTriple(), protocol.WithPort(20000), ), ) srv, err := ins.NewServer() How to run Start Nacos server Follow this instruction to install and start Nacos server.
Run server $ go run ./go-server/cmd/server.go test rpc server work as expected:
$ curl \ --header &amp;#34;Content-Type: application/json&amp;#34; \ --data &amp;#39;{&amp;#34;name&amp;#34;: &amp;#34;Dubbo&amp;#34;}&amp;#39; \ http://localhost:20000/greet.GreetService/Greet Open https://localhost:8848/nacos/ with browser, check url address successfully registered into Nacos.</description></item><item><title>使用 Zookeeper 作为注册中心</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/service-discovery/zookeeper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/service-discovery/zookeeper/</guid><description>This example shows dubbo-go&amp;rsquo;s service discovery feature with Zookeeper as registry.
使用方式 通过以下方式指定注册中心地址：
ins, _ := dubbo.NewInstance( dubbo.WithName(&amp;#34;dubbo_registry_nacos_server&amp;#34;), dubbo.WithRegistry( registry.WithZookeeper(), registry.WithAddress(&amp;#34;127.0.0.1:2181&amp;#34;), ), dubbo.WithProtocol( protocol.WithTriple(), protocol.WithPort(20000), ), ) srv, err := ins.NewServer() How to run Start Zookeeper server This example relies on zookeeper as registry, follow the steps below to start a zookeeper server first.
Start zookeeper with docker, run docker run --rm -p 2181:2181 zookeeper or make -f $DUBBO_GO_SAMPLES_ROOT_PATH/build/Makefile docker-up. Download and start zookeeper locally on your machine.</description></item><item><title>多注册中心</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/service-discovery/multi_registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/golang-sdk/tutorial/service-discovery/multi_registry/</guid><description>一个 Dubbo 应用可以配置的多个接口维度的注册中心，多注册中心可用于集群隔离、迁移等多种场景，关于这部分更详细的说明可参考 Dubbo Java 多注册中心说明。
API配置方式 ins, _ := dubbo.NewInstance( dubbo.WithRegistry( registryWithID(&amp;#34;nacos&amp;#34;), registry.WithNacos(), registry.WithAddress(&amp;#34;127.0.0.1:8848&amp;#34;), ), dubbo.WithRegistry( registryWithID(&amp;#34;zookeeper&amp;#34;), registry.WithZookeeper(), registry.WithAddress(&amp;#34;127.0.0.1:2181&amp;#34;), ), ) 指定某个 server 下的服务注册到哪个注册中心：
// 指定 server 下的服务注册到 zookeeper 注册中心 srv, _ := ins.NewServer(server.WithServerRegistryIDs([]string{&amp;#34;zookeeper&amp;#34;})) // 指定 server 下的服务注册到 nacos 注册中心 srv2, _ := ins.NewServer(server.WithServerRegistryIDs([]string{&amp;#34;nacos&amp;#34;})) 指定某个特定服务注册到哪个注册中心：
srv, _ := ins.NewServer() greet.RegisterGreetServiceHandler(srv, &amp;amp;GreetTripleServer{}, server.WithRegistryIDs([]string{&amp;#34;zookeeper&amp;#34;})) 以上使用方式对 client 侧类似。
YAML配置方式 修改服务端配置 go-server/conf/dubbogo.yaml， 同时将服务注册在两个注册中心上。
dubbo: registries: zookeeper: # 指定 zookeeper 注册中心 protocol: zookeeper address: 127.</description></item></channel></rss>