<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>快速入门 on Apache Dubbo</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/quick-start/</link><description>Recent content in 快速入门 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/quick-start/index.xml" rel="self" type="application/rss+xml"/><item><title>创建基于Spring Boot的微服务应用</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/quick-start/starter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/quick-start/starter/</guid><description>以下文档将引导您从头创建一个基于 Spring Boot 的 Dubbo 应用，并为应用配置 Triple 通信协议、服务发现等微服务基础能力。
快速创建应用 通过访问 start.dubbo.apache.org 在线服务创建 Dubbo 微服务应用。如下图所示依次添加组件，您可以在几十秒之内快速创建一个 Dubbo 应用。下载生成的示例应用并解压源码即可。
直接使用官方准备好的示例 您还可以直接下载官方预先准备好的示例项目：
$ git clone -b main --depth 1 https://github.com/apache/dubbo-samples $ cd dubbo-samples/11-quickstart 本地启动应用 接下来，让我们尝试在本地启动应用。运行以下命令启动应用：
./mvnw 注意 由于配置文件中启用了注册中心，为了能够成功启动应用，您需要首先在本地启动 Nacos 或 Zookeeper 注册中心 server。 在应用启动成功后，本地进程使用 Triple 协议在指定端口发布了服务，可直接使用 cURL 测试服务是否已经正常运行：
curl \ --header &amp;#34;Content-Type: application/json&amp;#34; \ --data &amp;#39;[&amp;#34;Dubbo&amp;#34;]&amp;#39; \ http://localhost:50051/com.example.demo.dubbo.api.DemoService/sayHello/ 除了使用命令行之外，我们还可以在 IDE 中启动项目，调整示例或进行本地 debug。
源码解析 将以上准备好的示例项目导入最喜欢的 IDE 开发工具（以 IntelliJ IDEA 为例），项目结构如下：
Maven 依赖 打开 pom.xml，可以看到示例项目中 Dubbo 相关核心依赖如下：</description></item><item><title>快速部署Dubbo应用</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/quick-start/deploy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/quick-start/deploy/</guid><description>在上一篇文章中，我们从头创建了一个 Dubbo 应用并详细介绍了它的代码结构，接下来，我们将学习部署这个 Dubbo 应用。
本文将以 Kubernetes 集群作为基础环境来讲解 Dubbo 应用的部署，部署架构如下图所示。 注意 在实际使用中，部署环境可能变化多样，包括 Kubernetes Service、服务网格(Service Mesh)、虚拟机等多种部署模式，请参考 部署文档 了解更多详细内容。 前置条件 Dubbo 社区提供了工具和解决方案来简化整个 Kubernetes 环境的打包与部署过程，所以开始前我们需要先安装相关工具。
安装 dubboctl（如尚未安装） curl -L https://raw.githubusercontent.com/apache/dubbo-kubernetes/master/release/downloadDubbo.sh | sh - cd dubbo-$version export PATH=$PWD/bin:$PATH 部署应用 初始化微服务集群 dubboctl 安装完成之后，接下来通过以下命令初始化微服务部署环境
dubboctl manifest install --profile=demo 作为演示目的，以上命令会一键安装 Zookeeper、Dubbo Control Plane、Prometheus、Grafana、Zipkin、Ingress 等组件，关于 --profile=demo 更多解释及配置请参见文档说明。
检查环境准备就绪
kubectl get services -n dubbo-system 最后，为目标 kubernetes namespace 开启自动注入模式，以便应用部署后能够自动连接到刚刚安装的 Zookeeper 注册中心等组件。
kubectl label namespace dubbo-demo dubbo-injection=enabled --overwrite 部署 Dubbo 应用 接下来我们为之前创建的应用打包镜像（请确保本地安装有 Docker 环境并且已经启动 Docker 进程），在应用根目录分别运行以下命令：</description></item></channel></rss>