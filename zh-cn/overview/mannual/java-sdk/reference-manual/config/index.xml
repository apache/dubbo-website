<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>配置手册 on Apache Dubbo</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/config/</link><description>Recent content in 配置手册 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/config/index.xml" rel="self" type="application/rss+xml"/><item><title>Dubbo Maven Plugin 的配置方式</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/config/maven-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/config/maven-plugin/</guid><description>本文主要讲解 Dubbo Maven Plugin 的配置方式。
当前 Dubbo Maven Plugin 支持以下功能：
Dubbo Maven Plugin For Protobuf：生成 Dubbo 服务接口的 Stub 代码 Dubbo Maven Plugin For Native Image：基于 AOT 机制，生成 Native Image 必要的 Metadata 信息 Dubbo Maven Plugin For Protobuf 如何使用 Dubbo Maven Plugin 生成 Protobuf Stub 代码 1. 编写 .proto 文件 greeter.proto
syntax = &amp;#34;proto3&amp;#34;; option java_multiple_files = true; option java_package = &amp;#34;org.apache.dubbo.demo&amp;#34;; option java_outer_classname = &amp;#34;DemoServiceProto&amp;#34;; option objc_class_prefix = &amp;#34;DEMOSRV&amp;#34;; package demoservice; // The demo service definition.</description></item><item><title>配置工作原理</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/config/principle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/config/principle/</guid><description>本文主要讲解 Dubbo 配置相关的 API 与工作原理，学习 Dubbo 的多种配置源、每种配置源的具体配置方式、不同配置源之间的优先级与覆盖关系。
实现原理 为了更好地管理各种配置，Dubbo 抽象了一套结构化的配置组件，各组件总体以用途划分，分别控制不同作用域的行为。
组件名称 描述 范围 是否必须配置 application 指定应用名等应用级别相关信息 一个应用内只允许出现一个 必选 service 声明普通接口或实现类为 Dubbo 服务 一个应用内可以有 0 到多个 service service/reference 至少一种 reference 声明普通接口为 Dubbo 服务 一个应用内可以有 0 到多个 reference service/reference 至少一种 protocol 要暴露的 RPC 协议及相关配置如端口号等 一个应用可配置多个，一个 protocol 可作用于一组 service&amp;amp;reference 可选，默认 dubbo registry 注册中心类型、地址及相关配置 一个应用内可配置多个，一个 registry 可作用于一组 service&amp;amp;reference 必选 config-center 配置中心类型、地址及相关配置 一个应用内可配置多个，所有服务共享 可选 metadata-report 元数据中心类型、地址及相关配置 一个应用内可配置多个，所有服务共享 可选 consumer reference 间共享的默认配置 一个应用内可配置多个，一个 consumer 可作用于一组 reference 可选 provider service 间共享的默认配置 一个应用内可配置多个，一个 provider 可作用于一组 service 可选 monitor 监控系统类型及地址 一个应用内只允许配置一个 可选 metrics 数据采集模块相关配置 一个应用内只允许配置一个 可选 ssl ssl/tls 安全链接相关的证书等配置 一个应用内只允许配置一个 可选 method 指定方法级的配置 service 和 reference 的子配置 可选 argument 某个方法的参数配置 method的子配置 可选 从实现原理层面，最终 Dubbo 所有的配置项都会被组装到 URL 中，以 URL 为载体在后续的启动、RPC 调用过程中传递，进而控制框架行为。如想了解更多，请参照 Dubbo 源码解析系列文档或 Blog。</description></item><item><title>配置项参考手册</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/config/properties/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/config/properties/</guid><description>JVM(-D) 参数 JVM 参数 示例值 说明 dubbo.{config-name}.{property} -Ddubbo.application.name=&amp;ldquo;dubbo-demo&amp;rdquo;-Ddubbo.registry.address=&amp;ldquo;nacos://host:port&amp;rdquo;-Ddubbo.protocol.port=&amp;ldquo;20880&amp;rdquo;&amp;hellip;&amp;hellip; Dubbo支持 所有的配置项 以JVM参数格式指定。其中config 是指如 application、registry、protocol 等配置项，而property则是指每个配置项中的具体属性。 dubbo.resolve.file -Ddubbo.resolve.file=/home/ken/&amp;hellip;/dubbo-resolve.properties 在文件中指定每个接口的直连地址url，如：org.apache.dubbo.demo.DemoService=tri://127.0.0.1:50051/org.apache.dubbo.demo.DemoService?xxx=xxx org.graalvm.nativeimage.imagecode https://github.com/oracle/graal/blob/master/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/ImageInfo.java dubbo.properties.file -Ddubbo.properties.file=foo.properties 指定 properties 配置文件地址，可以是绝对路径或者classpath相对路径。默认值为 dubbo.properties dubbo.jstack-dump.max-line -Ddubbo.jstack-dump.max-line=20 Dubbo 支持自动打印调用堆栈，这个参数可以控制堆栈行数，如示例中只会打印前20行堆栈 dubbo.json-framework.prefer -Ddubbo.json-framework.prefer=gson 设置框架中 json 序列化的具体实现，目前可选实现有 fastjson2、fastjson、gson、jackson。默认情况，框架会自动查找可用实现，以上按顺序优先级依次降低 dubbo.network.interface.ignored -Ddubbo.network.interface.ignored=eth1,eth2 在多网卡环境下，当需要手动控制注册到注册中心的网卡地址时使用。用于排除某些网卡 dubbo.network.interface.preferred -Ddubbo.network.interface.ignored=eth0 在多网卡环境下，当需要手动控制注册到注册中心的网卡地址时使用。用于指定一个特定网卡 sun.rmi.transport.tcp.responseTimeout -Dsun.rmi.transport.tcp.responseTimeout=5000 用于设置 RMI 协议下的超时时间，单位ms env Apollo 配置中心特有参数 app.id Apollo 配置中心特有参数 apollo.cluster Apollo 配置中心特有参数 apollo.meta Apollo 配置中心特有参数 dubbo.mapping.cache.filePath -Ddubbo.mapping.cache.filePath=~/.dubbo/mapping/ 用于设置接口-应用映射关系缓存文件，通常用于服务发现。文件绝对路径地址 dubbo.mapping.cache.fileName -Ddubbo.mapping.cache.fileName=dubbo-mapping 用于设置接口-应用映射关系缓存文件，通常用于服务发现。文件名，如此示例最终会读取和存储在文件 dubbo-mapping.dubbo.cache dubbo.mapping.cache.entrySize -Ddubbo.mapping.cache.maxFileSize=300 用于设置接口-应用映射关系缓存文件，通常用于服务发现。文件名中内容最大条目数限制 dubbo.mapping.cache.maxFileSize -Ddubbo.mapping.cache.maxFileSize=104857600 用于设置接口-应用映射关系缓存文件，通常用于服务发现。文件最大占用空间限制，单位byte dubbo.</description></item></channel></rss>