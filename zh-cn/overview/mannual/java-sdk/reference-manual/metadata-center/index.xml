<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>元数据中心 on Apache Dubbo</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/</link><description>Recent content in 元数据中心 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/index.xml" rel="self" type="application/rss+xml"/><item><title>元数据中心概述</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/overview/</guid><description>元数据中心为 Dubbo 中的两类元数据提供了存取能力
1 地址发现元数据，用于应用级服务发现 2 服务运维元数据，用于外围运维系统如可视化控制台进行服务查询、测试等。 1 地址发现元数据 Dubbo3 中引入了 应用级服务发现机制 用来解决异构微服务体系互通与大规模集群实践的性能问题，应用级服务发现将全面取代 2.x 时代的接口级服务发现。 同时为了保持 Dubbo 面向服务/接口的易用性、服务治理的灵活性，Dubbo 围绕应用级服务发现构建了一套元数据机制，即 接口 - 应用映射关系 与 接口配置元数据。
1.1 接口 - 应用映射关系 Dubbo 一直以来都能做到精确的地址发现，即只订阅 Consumer 声明要关心的服务及相关的地址列表，相比于拉取/订阅全量地址列表，这样做有很好的性能优势。 在应用级服务发现模型中，想做到精确地址订阅并不容易，因为 Dubbo Consumer 只声明了要消费的接口列表，Consumer 需要能够将接口转换为 Provider 应用名才能进行精准服务订阅，
为此，Dubbo 需要在元数据中心维护这一份 接口名-&amp;gt;应用名 的对应关系，Dubbo3 中通过 provider 启动的时候主动向元数据中心上报实现。 接口 (service name) - 应用 (Provider application name) 的映射关系可以是一对多的，即一个 service name 可能会对应多个不同的 application name。
以 zookeeper 为例，映射关系保存在以下位置:
$ ./zkCli.sh $ get /dubbo/mapping/org.apache.dubbo.demo.DemoService $ demo-provider,two-demo-provider,dubbo-demo-annotation-provider ① 节点路径是 /dubbo/mapping/{interface name}</description></item><item><title>Nacos</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/nacos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/nacos/</guid><description>1 预备工作 了解 Dubbo 基本开发步骤 参考 Nacos 启动 Nacos server 当Dubbo使用3.0.0及以上版本时，需要使用Nacos 2.0.0及以上版本
2 使用说明 Dubbo 融合 Nacos 成为元数据中心的操作步骤非常简单，大致分为 增加 Maven 依赖 以及 配置元数据中心 两步。
如果元数据地址(dubbo.metadata-report.address)也不进行配置，会使用注册中心的地址来用作元数据中心。
2.1 增加 Maven 依赖 如果项目已经启用 Nacos 作为注册中心，则无需增加任何额外配置。
如果未启用 Nacos 注册中心，则请参考 为注册中心增加 Nacos 依赖。
2.2 启用 Nacos 配置中心 &amp;lt;dubbo:metadata-report address=&amp;#34;nacos://127.0.0.1:8848&amp;#34;/&amp;gt; 或者
dubbo metadata-report address: nacos://127.0.0.1:8848 或者
dubbo.metadata-report.address=nacos://127.0.0.1:8848 或者
MetadataReportConfig metadataConfig = new MetadataReportConfig(); metadataConfig.setAddress(&amp;#34;nacos://127.0.0.1:8848&amp;#34;); address 格式请参考 Nacos 注册中心 - 启用配置
3 高级配置 完整配置参数请参考 metadata-report-config。
4 工作原理 4.</description></item><item><title>Zookeeper</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/zookeeper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/zookeeper/</guid><description>1 预备工作 了解 Dubbo 基本开发步骤 安装并启动 Zookeeper 2 使用说明 2.1 增加 Maven 依赖 如果项目已经启用 Zookeeper 作为注册中心，则无需增加任何额外配置。
如果未使用 Zookeeper 注册中心，则请参考 为注册中心增加 Zookeeper 相关依赖。
2.2 启用 Zookeeper 配置中心 &amp;lt;dubbo:metadata-report address=&amp;#34;zookeeper://127.0.0.1:2181&amp;#34;/&amp;gt; 或者
dubbo metadata-report address: zookeeper://127.0.0.1:2181 或者
dubbo.metadata-report.address=zookeeper://127.0.0.1:2181 或者
MetadataReportConfig metadataConfig = new MetadataReportConfig(); metadataConfig.setAddress(&amp;#34;zookeeper://127.0.0.1:2181&amp;#34;); address 格式请参考 zookeeper 注册中心 - 启用配置
3 高级配置 完整配置参数请参考 metadata-report-config。
4 工作原理 4.1 服务运维元数据 Zookeeper 基于树形结构进行数据存储，它的元数据信息位于以下节点:
Provider: /dubbo/metadata/{interface name}/{version}/{group}/provider/{application name} Consumer: /dubbo/metadata/{interface name}/{version}/{group}/consumer/{application name} 当 version 或者 group 不存在时，version 路径和 group 路径会取消，路径如下:</description></item><item><title>更多元数据中心扩展实现</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/others/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/others/</guid><description>Dubbo 框架还默认提供了 redis、etcd、consul 等元数据中心适配实现
Redis Redis 实现由主干库提供内置实现，但需要增加以下依赖：
&amp;lt;dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;redis.clients&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jedis&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.10.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependency&amp;gt; dubbo metadata-report address: redis://127.0.0.1:1111 或者
dubbo.metadata-report.address=redis://127.0.0.1:1111 Etcd Etcd 元数据中心由社区生态库维护，具体可参见 。
增加依赖：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.dubbo.extensions&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;dubbo-metadata-report-etcd&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.3.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 调整配置：
dubbo metadata-report address: etcd://127.0.0.1:1111 Consul Consul 元数据中心由社区生态库维护，具体可参见 。
增加依赖：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.dubbo.extensions&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;dubbo-metadata-report-consul&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.3.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 调整配置：
dubbo metadata-report address: consul://127.0.0.1:1111</description></item></channel></rss>