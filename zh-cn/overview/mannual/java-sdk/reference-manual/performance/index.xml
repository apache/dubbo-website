<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>性能参考手册 on Apache Dubbo</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/performance/</link><description>Recent content in 性能参考手册 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/performance/index.xml" rel="self" type="application/rss+xml"/><item><title>RPC 协议 Triple&amp;Dubbo 基准测试</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/performance/rpc-benchmarking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/performance/rpc-benchmarking/</guid><description>Dubbo3 的 _Dubbo协议 _实现与 Dubbo2 版本在性能上基本持平。 由于 Triple协议 本身是基于 HTTP/2 构建，因此在单条链路上的 RPC 调用并未比基于 TCP 的 Dubbo2 有提升，反而在某些调用场景出现一定下降。但 _Triple协议 _更大的优势在于网关穿透性、通用性，以及 Stream 通信模型带来的总体吞吐量提升。 Triple 预期在网关代理场景下一定会有更好的性能表现，鉴于当前压测环境，本轮 benchmark 暂未提供。 1.1 环境 描述 机器 4C8G Linux JDK 1.8（Provider）4C8G Linux JDK 1.8 （Consumer） 压测用例 RPC 方法类型包括：无参无返回值、普通pojo返回值、pojo列表返回值
2.7 版本 Dubbo 协议（Hessian2 序列化）
3.0 版本 Dubbo 协议（Hessian2 序列化）
3.0 版本 Dubbo 协议（Protobuf 序列化）
3.0 版本 Triple 协议（Protobuf 序列化）
3.0 版本 Triple 协议（Protobuf 套 Hessian2 序列化） 压测方法 单链接场景下，消费端起 32 并发线程（当前机器配置 qps rt 较均衡的并发数），持续压后采集压测数据</description></item><item><title>RPC 基准测试 控制台</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/performance/page-benchmarking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/performance/page-benchmarking/</guid><description> dubbo-benchmark We're sorry but dubbo-benchmark doesn't work properly without JavaScript enabled. Please enable it to continue.</description></item><item><title>应用级服务发现基准测试</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/performance/benchmarking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/performance/benchmarking/</guid><description>1 Benchmark 结论 对比 2.x 版本，Dubbo3 版本
服务发现资源利用率显著提升。 对比接口级服务发现，单机常驻内存下降 50%，地址变更期 GC 消耗下降一个数量级 (百次 -&amp;gt; 十次) 对比应用级服务发现，单机常驻内存下降 75%，GC 次数趋零 以下是详细压测过程与数据
2 应用级服务发现（地址推送链路） 此部分压测数据是由工商银行 Dubbo 团队基于内部生产数据给出，压测过程模拟了“生产环境地址+zookeeper”的服务发现架构。
2.1 环境 描述 压测数据 提供者500运行实例✖️8interface✖️5protocol，即每个提供者向注册中心注册40个URL，总计20000个URL，每个URL字符长度约1k。注册中心2个独立zookeeper注册中心，服务提供者消费者采用并行配置。消费者配置1c2g，xmx=768，开启GC，从2个注册中心订阅，每5秒调用一次服务。运行20小时。 压测环境 Java version &amp;ldquo;1.8.0&amp;rdquo;Java(TM) SE Runtime Enviroment (build pxa6480sr3fp12-20160919_01(SR3 FP12))IBM J9 VM (Build 2.8, JRE 1.8.0 Linux amd64-64 Compressed References 20160915_318796, JIT enabled, AOT enabled) 2.2 数据分析 图一 服务发现模型内存占用变化
Dubbo3 接口级服务发现模型，常驻内存较 2.x 版本下降约 50% Dubbo3 应用级服务发现模型，常驻内存较 2.x 版本下降约 75% 图二 服务发现模型 GC 变化</description></item></channel></rss>