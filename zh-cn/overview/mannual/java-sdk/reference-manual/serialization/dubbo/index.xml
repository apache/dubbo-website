<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dubbo 协议支持的序列化 on Apache Dubbo</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/</link><description>Recent content in dubbo 协议支持的序列化 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/index.xml" rel="self" type="application/rss+xml"/><item><title>Hessian</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/hessian/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/hessian/</guid><description>1 介绍 Hessian序列化是一种支持动态类型、跨语言、基于对象传输的网络协议，Java对象序列化的二进制流可以被其他语言（如，c++，python）。特性如下：
自描述序列化类型。不依赖外部描述文件或者接口定义，用一个字节表示常用的基础类型，极大缩短二进制流。 语言无关，支持脚本语言 协议简单，比Java原生序列化高效 相比hessian1，hessian2中增加了压缩编码，其序列化二进制流大小是Java序列化的50%，序列化耗时是Java序列化的30%，反序列化耗时是Java序列化的20%。 2 使用方式 在 Dubbo 框架中，当使用 dubbo 通信协议时，默认使用 Hessian2 作为序列化。
2.1 配置启用 # application.yml (Spring Boot) dubbo: protocol: serialization: hessian2 或
# dubbo.properties dubbo.protocol.serialization=hessian2 # or dubbo.consumer.serialization=hessian2 # or dubbo.reference.com.demo.DemoService.serialization=hessian2 或
&amp;lt;dubbo:protocol serialization=&amp;#34;hessian2&amp;#34; /&amp;gt; &amp;lt;!-- or --&amp;gt; &amp;lt;dubbo:consumer serialization=&amp;#34;hessian2&amp;#34; /&amp;gt; &amp;lt;!-- or --&amp;gt; &amp;lt;dubbo:reference interface=&amp;#34;xxx&amp;#34; serialization=&amp;#34;hessian2&amp;#34; /&amp;gt;</description></item><item><title>Fastjson2</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/fastjson2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/fastjson2/</guid><description>1 介绍 FASTJSON v2是FASTJSON项目的重要升级，目标是为下一个十年提供一个高性能的JSON库。通过同一套API，
支持JSON/JSONB两种协议，JSONPath 是一等公民。 支持全量解析和部分解析。 支持Java服务端、客户端Android、大数据场景。 支持Kotlin https://alibaba.github.io/fastjson2/kotlin_cn 支持JSON Schema https://alibaba.github.io/fastjson2/json_schema_cn 支持Android 8+ 支持Graal Native-Image 支持 JSON Schema https://alibaba.github.io/fastjson2/json_schema_cn 2 使用方式 2.1 添加依赖 &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba.fastjson2&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;fastjson2&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.0.23&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; 注：Fastjson2 序列化仅 Dubbo &amp;gt; 3.1.0 版本支持。在 Dubbo &amp;gt; 3.2.0 中将替代 Hessian 作为默认序列化方式。
2.2 配置启用 # application.yml (Spring Boot) dubbo: protocol: serialization: fastjson2 或
# dubbo.properties dubbo.protocol.serialization=fastjson2 # or dubbo.consumer.serialization=fastjson2 # or dubbo.reference.com.demo.DemoService.serialization=fastjson2 或
&amp;lt;dubbo:protocol serialization=&amp;#34;fastjson2&amp;#34; /&amp;gt; &amp;lt;!-- or --&amp;gt; &amp;lt;dubbo:consumer serialization=&amp;#34;fastjson2&amp;#34; /&amp;gt; &amp;lt;!</description></item><item><title>Fastjson</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/fastjson/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/fastjson/</guid><description>1 介绍 Fastjson 是一个 Java 库，可用于将 Java 对象转换为其 JSON 表示形式。它还可用于将 JSON 字符串转换为等效的 Java 对象。 Fastjson 可以处理任意 Java 对象，包括您没有源代码的预先存在的对象。
2 使用方式 2.1 添加依赖 &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.dubbo.extensions&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;dubbo-serialization-fastjson&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.3.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;fastjson&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.2.83&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; 2.2 配置启用 # application.yml (Spring Boot) dubbo: protocol: serialization: fastjson 或
# dubbo.properties dubbo.protocol.serialization=fastjson # or dubbo.consumer.serialization=fastjson # or dubbo.reference.com.demo.DemoService.serialization=fastjson 或
&amp;lt;dubbo:protocol serialization=&amp;#34;fastjson&amp;#34; /&amp;gt; &amp;lt;!-- or --&amp;gt; &amp;lt;dubbo:consumer serialization=&amp;#34;fastjson&amp;#34; /&amp;gt; &amp;lt;!-- or --&amp;gt; &amp;lt;dubbo:reference interface=&amp;#34;xxx&amp;#34; serialization=&amp;#34;fastjson&amp;#34; /&amp;gt; 3 支持的rpc协议</description></item><item><title>Avro</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/avro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/avro/</guid><description>1 介绍 Avro是一种远程过程调用和数据序列化框架，是在Apache的Hadoop项目之内开发的。它使用JSON来定义数据类型和通讯协议，使用压缩二进制格式来序列化数据。它主要用于Hadoop，它可以为持久化数据提供一种序列化格式，并为Hadoop节点间及从客户端程序到Hadoop服务的通讯提供一种电报格式。
2 使用方式 2.1 添加依赖 &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.dubbo.extensions&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;dubbo-serialization-avro&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.3.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.avro&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;avro&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.11.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; 2.2 配置启用 # application.yml (Spring Boot) dubbo: protocol: serialization: avro 或
# dubbo.properties dubbo.protocol.serialization=avro # or dubbo.consumer.serialization=avro # or dubbo.reference.com.demo.DemoService.serialization=avro 或
&amp;lt;dubbo:protocol serialization=&amp;#34;avro&amp;#34; /&amp;gt; &amp;lt;!-- or --&amp;gt; &amp;lt;dubbo:consumer serialization=&amp;#34;avro&amp;#34; /&amp;gt; &amp;lt;!-- or --&amp;gt; &amp;lt;dubbo:reference interface=&amp;#34;xxx&amp;#34; serialization=&amp;#34;avro&amp;#34; /&amp;gt;</description></item><item><title>FST</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/fst/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/fst/</guid><description>1 介绍 FST序列化全称是Fast Serialization，它是对Java序列化的替换实现。既然前文中提到Java序列化的两点严重不足，在FST中得到了较大的改善，FST的特征如下：
比JDK提供的序列化提升了10倍，体积也减少 3-4 倍多 支持堆外Maps，和堆外Maps的持久化 支持序列化为JSON 2 使用方式 2.1 添加依赖 &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.dubbo.extensions&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;dubbo-serialization-fst&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.3.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;de.ruedigermoeller&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;fst&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; 2.2 配置启用 # application.yml (Spring Boot) dubbo: protocol: serialization: fst 或
# dubbo.properties dubbo.protocol.serialization=fst # or dubbo.consumer.serialization=fst # or dubbo.reference.com.demo.DemoService.serialization=fst 或
&amp;lt;dubbo:protocol serialization=&amp;#34;fst&amp;#34; /&amp;gt; &amp;lt;!-- or --&amp;gt; &amp;lt;dubbo:consumer serialization=&amp;#34;fst&amp;#34; /&amp;gt; &amp;lt;!-- or --&amp;gt; &amp;lt;dubbo:reference interface=&amp;#34;xxx&amp;#34; serialization=&amp;#34;fst&amp;#34; /&amp;gt; 3 注册被序列化类 要让Kryo和FST完全发挥出高性能，最好将那些需要被序列化的类注册到dubbo系统中，实现如下
回调接口
public class SerializationOptimizerImpl implements SerializationOptimizer { public Collection&amp;lt;Class&amp;gt; getSerializableClasses() { List&amp;lt;Class&amp;gt; classes = new LinkedList&amp;lt;Class&amp;gt;(); classes.</description></item><item><title>Gson</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/gson/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/gson/</guid><description>1 介绍 Gson是Google公司发布的一个开放源代码的Java库，主要用途为序列化Java对象为JSON字符串，或反序列化JSON字符串成Java对象。
2 使用方式 2.1 添加依赖 &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.dubbo.extensions&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;dubbo-serialization-gson&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.3.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.google.code.gson&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;gson&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.10.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; 2.2 配置启用 # application.yml (Spring Boot) dubbo: protocol: serialization: gson 或
# dubbo.properties dubbo.protocol.serialization=gson # or dubbo.consumer.serialization=gson # or dubbo.reference.com.demo.DemoService.serialization=gson 或
&amp;lt;dubbo:protocol serialization=&amp;#34;gson&amp;#34; /&amp;gt; &amp;lt;!-- or --&amp;gt; &amp;lt;dubbo:consumer serialization=&amp;#34;gson&amp;#34; /&amp;gt; &amp;lt;!-- or --&amp;gt; &amp;lt;dubbo:reference interface=&amp;#34;xxx&amp;#34; serialization=&amp;#34;gson&amp;#34; /&amp;gt;</description></item><item><title>Kryo</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/kryo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/kryo/</guid><description>1 介绍 Kryo是一种非常成熟的序列化实现，已经在Twitter、Groupon、Yahoo以及多个著名开源项目（如Hive、Storm）中广泛的使用。
2 使用方式 2.1 添加依赖 &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.dubbo.extensions&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;dubbo-serialization-kryo&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.esotericsoftware&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;kryo&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.4.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;de.javakaffee&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;kryo-serializers&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.45&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; 2.2 配置启用 # application.yml (Spring Boot) dubbo: protocol: serialization: kryo 或
# dubbo.properties dubbo.protocol.serialization=kryo # or dubbo.consumer.serialization=kryo # or dubbo.reference.com.demo.DemoService.serialization=kryo 或
&amp;lt;dubbo:protocol serialization=&amp;#34;kryo&amp;#34; /&amp;gt; &amp;lt;!-- or --&amp;gt; &amp;lt;dubbo:consumer serialization=&amp;#34;kryo&amp;#34; /&amp;gt; &amp;lt;!-- or --&amp;gt; &amp;lt;dubbo:reference interface=&amp;#34;xxx&amp;#34; serialization=&amp;#34;kryo&amp;#34; /&amp;gt; 3 注册被序列化类 要让Kryo和FST完全发挥出高性能，最好将那些需要被序列化的类注册到dubbo系统中，实现如下
回调接口
public class SerializationOptimizerImpl implements SerializationOptimizer { public Collection&amp;lt;Class&amp;gt; getSerializableClasses() { List&amp;lt;Class&amp;gt; classes = new LinkedList&amp;lt;Class&amp;gt;(); classes.</description></item><item><title>MessagePack</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/msgpack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/msgpack/</guid><description>1 介绍 MessagePack是一种计算机数据交换格式。它是一种二进制形式，用于表示简单的数据结构，如数组和关联数组。MessagePack 旨在尽可能紧凑和简单。
2 使用方式 2.1 添加依赖 &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.dubbo.extensions&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;dubbo-serialization-msgpack&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.3.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.msgpack&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;msgpack-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.9.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.msgpack&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jackson-dataformat-msgpack&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.9.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; 2.2 配置启用 # application.yml (Spring Boot) dubbo: protocol: serialization: msgpack 或
# dubbo.properties dubbo.protocol.serialization=msgpack # or dubbo.consumer.serialization=msgpack # or dubbo.reference.com.demo.DemoService.serialization=msgpack 或
&amp;lt;dubbo:protocol serialization=&amp;#34;msgpack&amp;#34; /&amp;gt; &amp;lt;!-- or --&amp;gt; &amp;lt;dubbo:consumer serialization=&amp;#34;msgpack&amp;#34; /&amp;gt; &amp;lt;!-- or --&amp;gt; &amp;lt;dubbo:reference interface=&amp;#34;xxx&amp;#34; serialization=&amp;#34;msgpack&amp;#34; /&amp;gt;</description></item></channel></rss>