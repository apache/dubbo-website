<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SPI 插件扩展点使用手册 on Apache Dubbo</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/spi/</link><description>Recent content in SPI 插件扩展点使用手册 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/spi/index.xml" rel="self" type="application/rss+xml"/><item><title>Dubbo SPI 概述</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/spi/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/spi/overview/</guid><description>使用 IoC 容器帮助管理组件的生命周期、依赖关系注入等是很多开发框架的常用设计，Dubbo 中内置了一个轻量版本的 IoC 容器，用来管理框架内部的插件，实现包括插件实例化、生命周期、依赖关系自动注入等能力。
感兴趣的读者可以了解：
Dubbo SPI 扩展体系的工作原理 Dubbo SPI 扩展使用示例 Dubbo 插件体系与 IoC 容器具有以下特点：
核心组件均被定义为插件，用户或二次开发者扩展非常简单。 在无需改造框架内核的情况下，用户可以基于自身需求扩展如负载均衡、注册中心、通信协议、路由等策略。 平等对待第三方扩展实现。 Dubbo 中所有内部实现和第三方实现都是平等的，用户可以基于自身业务需求替换 Dubbo 提供的原生实现。 插件依赖支持自动注入（IoC）。 如果插件实现依赖其他插件属性，则 Dubbo 框架会完成该依赖对象的自动注入，支持属性、构造函数等方式。 插件扩展实现支持 AOP 能力。 框架可以自动发现扩展类的包装类，通过包装器模式对插件进行 AOP 增强。 支持插件自动激活。 通过为插件实现指定激活条件（通过注解参数等），框架可在运行时自动根据当前上下文决策是否激活该插件实现。 支持插件扩展排序。</description></item><item><title>Dubbo SPI 插件及详情</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/spi/spi-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/spi/spi-list/</guid><description>Dubbo 在框架中定义了非常多的扩展点，因此，当你发现官方库没法满足业务需求，想为 Dubbo 框架提供定制能力时，请优先查阅以下扩展点定义，看是否能通过提供扩展实现的方式无侵入的定制 Dubbo 框架。
具体可参见本文下方的 Dubbo SPI 扩展定义汇总。
扩展点汇总 生命周期与事件回调 SPI 扩展定义 功能说明 示例实现 激活条件 org.apache.dubbo.common.lang.ShutdownHookCallback 优雅下线回调逻辑扩展点，Dubbo 进程销毁前会调用所有 ShutdownHookCallback 实现 无 无需配置，自动激活 org.apache.dubbo.common.threadpool.event.ThreadPoolExhaustedListener 当 dubbo 业务线程池满时，会调用这个扩展点发出事件通知 org.apache.dubbo.metrics.collector.sample.MetricThreadPoolExhaustedListener 通过 dubbo.protocol.thread-pool-exhausted-listeners=spi-name1,spi-name2 设置激活哪些实现 org.apache.dubbo.rpc.ExporterListener 每个 Exporter 成功 export/unexport 发布后，都会回调这个扩展点 org.apache.dubbo.rpc.listener.InjvmExporterListener 扩展实现必须增加 @Activate 注解激活，可按需配置激活条件。支持通过在 URL 中配置 exporter.listener=spi-name1,spi-name2 控制具体激活哪个实现 org.apache.dubbo.rpc.InvokerListener 每个服务 Invoker 成功 refer/destroy 发布后，都会回调这个扩展点 org.apache.dubbo.rpc.protocol.CountInvokerListener 扩展实现必须增加 @Activate 注解激活，可按需配置激活条件。支持通过在 URL 中配置 invoker.listener=spi-name1,spi-name2 控制具体激活哪个实现 org.apache.dubbo.common.status.StatusChecker 对外透出内部组件状态的扩展点，每个需要透出状态的组件均可实现此扩展点。 org.apache.dubbo.rpc.protocol.dubbo.status.ThreadPoolStatusChecker 通过设置 dubbo.protocol.status=spi-name1,spi-name2 激活 org.apache.dubbo.config.ServiceListener ServciceConfig 回调扩展点，每个 ServiceConfig 成功 export/unexport 后都会被回调。拦截点与 ExporterListener 略有不同 无 无需配置，自动激活 org.</description></item></channel></rss>