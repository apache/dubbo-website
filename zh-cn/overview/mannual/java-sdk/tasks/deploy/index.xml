<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>打包并部署应用 on Apache Dubbo</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/deploy/</link><description>Recent content in 打包并部署应用 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/deploy/index.xml" rel="self" type="application/rss+xml"/><item><title>传统基于 Zookeeper、Nacos 的注册中心部署架构，部署 Dubbo 应用到虚拟机环境</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/deploy/deploy-on-vm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/deploy/deploy-on-vm/</guid><description>下图是使用 Nacos、Zookeeper 作为注册中心的典型 Dubbo 微服务部署架构。
安装 Nacos 请参考以下文档了解如何在本地 安装 Nacos。
部署应用 我们仍然以 快速开始 中的项目为例，演示应用打包部署的具体步骤。
克隆示例项目到本地：
$ git clone -b main --depth 1 https://github.com/apache/dubbo-samples 切换到示例目录：
$ cd dubbo-samples/11-quickstart 以下是两种打包部署模式：
方式一：本地进程 本地打包进程：
$ mvn clean package 启动 Dubbo 进程：
$ java -jar ./quickstart-service/target/quickstart-service-0.0.1-SNAPSHOT.jar 提示 为了程序正常运行，请确保 application.yml 文件中的注册中心地址已经正确指向你想要的注册中心。 方式二：docker容器 $ docker build -f ./Dockerfile -t quickstart $ docker run quickstart -p port1:port2 # 对于一些端口或连接注册中心的细节要写清楚 提示 Docker 容器环境下，不同容器间用于网络通信的地址需要特别关注，因此你可能需要设置 Dubbo 进程监听或者注册到注册中心的地址，请参考以下链接了解更多内容。
见 dubbo 通过环境变量设置 host</description></item><item><title>部署 Dubbo 应用到 Kubernetes 环境</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/deploy/deploy-on-kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/deploy/deploy-on-kubernetes/</guid><description>这种模式与传统的非 Kubernetes 部署并无太大差异，如下图所示，仍然使用 Nacos 或者 Zookeeper 等作为注册中心，只不过将 Kubernetes 作为应用生命周期调度的底层平台。
安装 Nacos 在 Kubernetes 模式下，我们推荐使用 dubboctl 快速安装 Nacos、dubbo-control-plane、prometheus 等组件：
$ dubboctl install --profile=demo 提示 请查看 dubboctl 了解更多细节 您也可以在此了解 Nacos 官方提供的 Kubernetes 集群安装方案 部署应用 我们仍然以 快速开始 中的项目为例，演示应用打包部署的具体步骤。
首先，克隆示例项目到本地：
$ git clone -b main --depth 1 https://github.com/apache/dubbo-samples 切换到示例目录：
$ cd dubbo-samples/11-quickstart 打包镜像 $ dubboctl build # 具体写一下推送到 docker 仓库 部署 $ dubboctl deploy 以下是生成的完整 Kubernetes manifests：
执行以下命令，将应用部署到 Kubernetes 集群：
$ kubectl apply -f xxx.</description></item><item><title>部署 Dubbo 应用到虚拟机环境</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/deploy/deploy-on-kubernetes-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/deploy/deploy-on-kubernetes-service/</guid><description>这种模式将 Dubbo Service 与 Kubernetes Service 概念映射起来，不再需要 Nacos 等传统注册中心，而是由 Kubernetes APISERVER 承担注册中心指责。
安装 Control Plane 在这个模式下，我们需要安装 dubbo-control-plane
这里是要用 istio 配合一起工作（提供xds推送能力），还是dubbo-control-plane自己实现xds server？
dubboctl manifests install --profile=control-plane 部署应用 打包镜像 定义 YAML 请查看 dubbo-samples 了解示例
kind: service kind: deployment 优雅上下线 配置 probe 配置 pre-stop
观测服务状态 与 Service Mesh 的区别 特性说明 Pod 的生命周期 与服务调度息息相关，通过对 Kubernetes 官方探针的实现，能够使 Dubbo3 乃至整个应用的生命周期与 Pod 的生命周期，在 Pod 的整个生命周期中，影响到 Pod 的就只有健康检查这一部分, 我们可以通过配置 liveness probe（存活探针）和 readiness probe（可读性探针）来影响容器的生命周期。
通过 Dubbo3 的 SPI 机制，在内部实现多种“探针”，基于 Dubbo3 QOS 运维模块的 HTTP 服务，使容器探针能够获取到应用内对应探针的状态。另外，SPI 的实现机制也利于用户自行拓展内部“探针”，使整个应用的生命周期更有效的进行管控。</description></item></channel></rss>