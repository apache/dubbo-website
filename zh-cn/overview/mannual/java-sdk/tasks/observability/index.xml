<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>观测服务 on Apache Dubbo</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/observability/</link><description>Recent content in 观测服务 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/observability/index.xml" rel="self" type="application/rss+xml"/><item><title>可观测性</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/observability/console/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/observability/console/</guid><description>管理 Dubbo 最直接的方式就是通过 Dubbo 控制面（即 dubbo-control-plane）提供的可视化界面，之前我们在【快速开始 - 部署 Dubbo 应用】一文的最后，也有用到它查看服务启动后的状态。
dubbo-control-plane 支持可视化的展示、监控集群状态，还支持实时下发流量管控规则。
安装控制台 为了体验效果，我们首先需要安装 dubbo-control-plane，以下是在 Linux 环境下安装 dubbo-control-plane 的具体步骤：
下载 &amp;amp; 解压 curl -L https://dubbo.apache.org/releases/downloadDubbo.sh | sh - cd dubbo-$version export PATH=$PWD/bin:$PATH 安装 dubbo-cp run --mode universal --config conf/dubbo.yml 注意，conf/dubbo.yml 配置需要按需调整，指向你要连接的注册中心等后台服务，具体请查看 dubbo-control-plane 架构中依赖的后台服务。 访问 http://xxx 即可打开控制台页面。 注意 请查看文档了解 dubbo-control-plane 详细安装步骤，包括多个平台的安装方法与配置指导。 对于 Kubernetes 环境下的 Dubbo 服务开发（包括 dubbo-control-plane 安装），我们有专门的章节说明，对于 Kubernetes 环境下的开发者可以去参考。 功能介绍 Admin 控制台提供了从开发、测试到流量治理等不同层面的丰富功能，功能总体上可分为以下几类：
服务状态与依赖关系查询 服务在线测试与文档管理 集群状态监控 实例诊断 流量管控 服务状态与依赖关系查询 服务状态查询以接口为维度展示 dubbo 集群信息，包含服务提供者、消费者信息和服务的元数据等。元数据包含了服务定义、方法名和参数列表等信息。Admin 支持最新版本 dubbo3 所提供的应用级发现模型，以统一的页面交互展示了应用级&amp;amp;接口级地址信息，并以特殊的标记对记录进行区分。</description></item><item><title>从 Prometheus 查询 Metrics 监控指标</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/observability/prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/observability/prometheus/</guid><description>准备条件 本文演示如何在 Kubernetes 环境下部署 Prometheus 并实现对 Dubbo 集群的监控数据统计与查询，你需要完成或具备以下内容：
本地或远端 Kubernetes 集群 确保 Prometheus 正确安装 部署 示例应用 并开启指标采集 使用 Prometheus dashboard 查询数据指标 确保 Prometheus 正确运行 验证 Prometheus 已经正确部署
kubectl -n dubbo-system get svc prometheus-server NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE prometheus-server ClusterIP 10.109.160.254 &amp;lt;none&amp;gt; 9090/TCP 4m 部署示例 kubectl apply -f https://raw.githubusercontent.com/apache/dubbo-samples/master/4-governance/dubbo-samples-metrics-spring-boot/Deployment.yml 等待示例应用正常运行，通过以下命令确认应用状态：
kubectl -n dubbo-demo get deployments 查询 Prometheus 获得 Prometheus 访问地址 kubectl port-forward service/prometheus-server 9090:9090， 打开浏览器，访问 localhost:9090/graph 即可打开 Prometheus 控制台。</description></item><item><title>使用 Grafana 可视化查看集群 Metrics 指标</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/observability/grafana/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/observability/grafana/</guid><description>指标可视化页面目前推荐的方式是使用 Grafana 来配置 Dubbo 的可观测性监控大盘。
在您开始之前 一个可以访问的 Kubernetes 集群 正确安装并配置 普罗米修斯服务 安装 Grafana 部署 示例应用 并开启指标采集 确认组件正常运行 Kubernetes 确保 Prometheus 正常运行
$ kubectl -n dubbo-system get svc prometheus NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE prometheus ClusterIP 10.0.250.230 &amp;lt;none&amp;gt; 9090/TCP 180s 确保 Grafana 正常运行
$ kubectl -n dubbo-system get svc grafana NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE grafana ClusterIP 10.0.244.130 &amp;lt;none&amp;gt; 3000/TCP 180s 部署示例 kubectl apply -f https://raw.githubusercontent.com/apache/dubbo-samples/master/4-governance/dubbo-samples-metrics-spring-boot/Deployment.yml 等待示例应用正常运行，通过以下命令确认应用状态：
kubectl -n dubbo-demo get deployments 查看 Grafana 可视化面板 示例程序启动后会自动模拟服务调用，只需等待一会能在 Grafana 中可视化的看到 Metrics 指标。</description></item><item><title>日志管理</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/observability/logging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/observability/logging/</guid><description>支持的日志框架 Dubbo 支持以下日志框架，用户可根据业务应用实际使用的日志框架进行配置。
第三方日志框架 优先级 说明 Log4j 最高（默认就用这个） log4j 的直接适配，需要增加 log4j-core、log4j-api 依赖与 log4j.properties SLF4J 次高（当前推荐） 可支持 log4j、log4j2、logback 等实现。如 logback 可添加slf4j-api、logback-classic、logback-core 依赖与 logback.xml Log4j2 次低 log4j2 的直接适配，需要增加 log4j2-core 依赖与 log4j2.xml 配置 Common Logging(jcl就是common logging) 次低（Log4j和SLF4J在项目中均没有就用这个） 较少项目使用 JDK log 最低（最后的选择） 较少项目使用 注意 无论使用哪种日志框架，除了 Dubbo 侧配置外，还需要确保应用中加入正确的日志框架依赖和配置文件。 使用 slf4j 对于 spring boot 用户，通过在 application.yaml 或 application.properties 增加以下配置，开启 slf4j 日志：
dubbo: application: logger: slf4j dubbo.application.logger=slf4j 除此之外，还可以使用使用 JVM 参数进行设置：
java -Ddubbo.application.logger=slf4j 使用 slf4j-log4j2 提供日志输出 增加依赖：
&amp;lt;!-- SLF4J API --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item></channel></rss>