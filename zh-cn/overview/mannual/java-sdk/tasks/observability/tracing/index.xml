<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>全链路追踪 on Apache Dubbo</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/observability/tracing/</link><description>Recent content in 全链路追踪 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/observability/tracing/index.xml" rel="self" type="application/rss+xml"/><item><title>全链路追踪使用与实现说明</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/observability/tracing/tracing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/observability/tracing/tracing/</guid><description>Dubbo 内置了全链路追踪能力，你可以通过引入 spring-boot-starter 或者相关依赖开启链路跟踪能力，通过将跟踪数据导出到一些主流实现如 Zipkin、Skywalking、Jaeger 等后端系统，可以实现全链路跟踪数据的分析与可视化展示。
Dubbo 目前借助 Micrometer Observation 完成 Tracing 的所有埋点工作，依赖 Micrometer 提供的各种 Bridge 适配，我们可以实现将 Tracing 导入各种后端系统，具体工作原理如下。
使用方式 以 Dubbo Spring Boot 应用为例，通过加入如下依赖即可开启链路追踪，并使用 zipkin exporter bridge 将链路追踪数据导入 Zipkin 后端系统。
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.dubbo&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;dubbo-spring-boot-tracing-otel-zipkin-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.2.1-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 更多完整示例请参见：
使用 Zipkin 实现 Dubbo 全链路追踪 使用 Skywalking 实现 Dubbo 全链路追踪 关联日志 Dubbo Tracing 还实现了与日志系统的自动关联，即将 tracing-id、span-id 等信息自动置入日志 MDC 上下文，你只需要设置日志输出格式中包含类似 %X{traceId:-},%X{spanId:-}]，即可实现业务日志与 tracing 系统的自动关联，具体可参见 Tracing 日志上下文配置示例。
工作原理 Tracing相关概念 Span：基本工作单元。例如，发送 RPC 是一个新的 span，发送对 RPC 的响应也是如此。Span还有其他数据，例如description、带时间戳的事件、键值注释（标签）、导致它们的跨度的 ID 和进程 ID（通常是 IP 地址）。跨度可以启动和停止，并且它们会跟踪它们的时间信息。创建跨度后，您必须在将来的某个时间点停止它。</description></item><item><title>OTlp</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/observability/tracing/otlp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/observability/tracing/otlp/</guid><description>概述 这个案例展示了在 Dubbo 项目中以 OpenTelemetry 作为 Tracer，将 Trace 信息上报到 Otlp Collector，再由 collector 转发至 Zipkin、Jagger。代码地址
有三部分组成：
dubbo-samples-spring-boot-tracing-otel-oltp-interface dubbo-samples-spring-boot-tracing-otel-oltp-provider dubbo-samples-spring-boot-tracing-otel-oltp-consumer 案例架构图 快速开始 安装 &amp;amp; 启动 Otlp Collector 按照 OpenTelemetry Collector Quick Start 去启动 otlp collector.
启动 Provider 直接运行org.apache.dubbo.springboot.demo.provider.ProviderApplication directly from IDE.
启动 Consumer Start org.apache.dubbo.springboot.demo.consumer.ConsumerApplication directly from IDE.
查看 Trace 信息 在浏览器中打开zipkin看板 http://localhost:9411/zipkin/ :
在浏览器中打开Jaeger看板 http://localhost:16686/search :
如何在SpringBoot项目中使用 1. 在你的项目中添加依赖 对于 SpringBoot 项目，你可以使用dubbo-spring-boot-tracing-otel-otlp-starter ：
&amp;lt;!-- OpenTelemetry as Tracer, Otlp as exporter --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item><item><title>Zipkin</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/observability/tracing/zipkin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/observability/tracing/zipkin/</guid><description>这个示例演示了 Dubbo 集成 Zipkin 全链路追踪的基础示例，完整代码请参考 dubbo-samples-tracing-zipkin，此示例共包含三部分内容：
dubbo-samples-spring-boot3-tracing-provider dubbo-samples-spring-boot3-tracing-consumer dubbo-samples-spring-boot3-tracing-interface 快速开始 安装 &amp;amp; 启动 Zipkin 参考 Zipkin&amp;rsquo;s quick start 安装 Zipkin。
这里我们使用 Docker 来演示如何快速的启动 Zipkin 服务。
docker run -d -p 9411:9411 --name zipkin openzipkin/zipkin 紧接着，你可以通过如下链接确认 Zipkin 正常工作 [http://localhost:9411](http://localhost:9411)
安装 &amp;amp; 启动 Nacos 跟随 Nacos&amp;rsquo;s quick start 快速安装并启动 Nacos。
启动示例 Provider 在 IDE 中直接运行 org.apache.dubbo.springboot.demo.provider.ProviderApplication。
启动示例 Consumer 在 IDE 中直接运行 org.apache.dubbo.springboot.demo.consumer.ConsumerApplication。
检查监控效果 在浏览器中打开 http://localhost:9411/zipkin/ 查看效果。
如何在SpringBoot项目中使用 Dubbo Tracing 1. 添加 Dubbo Tracing 相关的 Starter 依赖 从下面两个 starter 中选择一个加入到你的项目中，区别在于 Tracer 的选型不一样，一个是 Opentelemetry，一个是 Brave：</description></item><item><title>Skywalking</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/observability/tracing/skywalking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/observability/tracing/skywalking/</guid><description>本文演示如何将 Dubbo 接入 Skywalking 全链路监控体系，完整示例请参考 dubbo-samples-tracing-skywalking。依赖的 Skywalking Agent 版本为 skywalking micrometer-1.10 api.
1. 添加 Micrometer Observation 依赖到你的项目 为了能够将 Micrometer 及相关 Metrics 依赖添加到 classpath，需要增加 dubbo-metrics-api 依赖，如下所示：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.dubbo&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;dubbo-metrics-api&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 2. 添加 Skywalking Micrometer-1.10 Api 到项目 为了将 Dubbo Micrometer tracing 数据集成到 Skywalking，需要添加以下依赖。
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.skywalking&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;apm-toolkit-micrometer-1.10&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 3. 配置 ObservationRegistry @Configuration public class ObservationConfiguration { @Bean ApplicationModel applicationModel(ObservationRegistry observationRegistry) { ApplicationModel applicationModel = ApplicationModel.defaultModel(); observationRegistry.observationConfig() .observationHandler(new ObservationHandler.FirstMatchingCompositeObservationHandler( new SkywalkingSenderTracingHandler(), new SkywalkingReceiverTracingHandler(), new SkywalkingDefaultTracingHandler() )); applicationModel.</description></item></channel></rss>