<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>通信协议 on Apache Dubbo</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/protocols/</link><description>Recent content in 通信协议 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/protocols/index.xml" rel="self" type="application/rss+xml"/><item><title>Dubbo 支持的 RPC 通信协议</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/protocols/protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/protocols/protocol/</guid><description>Dubbo 作为一款 RPC 框架内置了高效的 RPC 通信协议，帮助解决服务间的编码与通信问题，目前支持的协议包括：
triple，基于 HTTP/1、HTTP/2 的高性能通信协议，100% 兼容 gRPC，支持 Unary、Streming 等通信模式；支持发布 REST 风格的 HTTP 服务。 dubbo，基于 TCP 的高性能私有通信协议，缺点是通用性较差，更适合在 Dubbo SDK 间使用； 任意协议扩展，通过扩展 protocol 可以之前任意 RPC 协议，官方生态库提供 JsonRPC、thrift 等支持。 协议概览 使用哪个协议？ 开发者该如何确定使用哪一种协议那？ 以下是我们从使用场景、性能、编程易用性、多语言互通等方面对多个主流协议的对比分析：
协议 性能 网关友好 流式通信 多语言支持 编程API 说明 triple 高 高 支持，客户端流、服务端流、双向流 支持（Java、Go、Node.js、JavaScript、Rust） Java Interface、Protobuf(IDL) 在多语言兼容、性能、网关、Streaming、gRPC 等方面最均衡的协议实现，官方推荐。 dubbo 高 低 不支持 支持（Java、Go） Java Interface 性能最高的私有协议，但前端流量接入、多语言支持等成本较高 rest 低 高 不支持 支持 Java Interface rest 协议在前端接入、互通等方面具备最高的灵活性，但对比 rpc 存在性能、弱类型等缺点。注意，rest 在 dubbo3 中仅是 triple 协议的一种发布形式 注意 自 3.</description></item><item><title>基于 TCP 的 RPC 通信协议 - dubbo</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/protocols/dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/protocols/dubbo/</guid><description>本示例演示了如何开发基于 dubbo 协议通信的服务，可在此查看 本示例的完整代码：
注意 为了保证老版本兼容性，Dubbo 3.3.0 及之前版本的默认协议都是 dubbo。但如果您是新用户，正在考虑使用 Dubbo 构建一套全新的微服务系统，我们推荐您在应用中明确配置使用 triple 协议。 运行示例 你可以跟随以下步骤，尝试运行本文档对应的示例源码。
首先，可通过以下命令下载示例源码
git clone --depth=1 https://github.com/apache/dubbo-samples.git 进入示例源码目录：
cd dubbo-samples/2-advanced/dubbo-samples-dubbo 使用 maven 打包示例：
mvn clean install -DskipTests 启动提供者 运行以下命令启动提供者：
java -jar ./dubbo-samples-dubbo-provider/target/dubbo-samples-dubbo-provider-1.0-SNAPSHOT.jar 启动消费者 运行以下命令：
java -jar ./dubbo-samples-dubbo-consumer/target/dubbo-samples-dubbo-consumer-1.0-SNAPSHOT.jar 源码讲解 定义服务 首先是服务定义，使用 dubbo 协议时，我们首选需要通过 Java Interface 定义 Dubbo 服务。
public interface DemoService { String sayHello(String name); } 服务提供者 其次，对于提供者一侧而言，需要提供服务的具体实现。
@DubboService public class DemoServiceImpl implements DemoService { @Override public String sayHello(String name) { return &amp;#34;Hello &amp;#34; + name; } } 配置使用 dubbo 协议：</description></item><item><title>发布 REST 风格的服务</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/protocols/rest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/protocols/rest/</guid><description>本文要讲的 &amp;ldquo;rest 协议&amp;rdquo; 实际上并不是一个真正的协议实现，而是关于如何使得 triple 协议支持以 rest 风格的 http 请求直接访问。 我们将演示如何使用 rest 请求访问标准 triple 协议的 Dubbo 服务。 注意 从 Dubbo 3.3 版本开始，rest 协议已移至 extensions 库，由 triple 协议来对 Rest 提供更全面的支持，新版本的内置协议实现只剩下 triple 和 dubbo。 因此，当我们提到 rest 时，都是指 triple 协议的 rest 访问支持能力，具体参见 Triple Rest用户手册 在讲解 triple 协议示例 时，我们曾提到 triple 协议支持以 application/json 格式直接访问：
curl \ --header &amp;#34;Content-Type: application/json&amp;#34; \ --data &amp;#39;[&amp;#34;Dubbo&amp;#34;]&amp;#39; \ http://localhost:50052/org.apache.dubbo.samples.api.GreetingsService/sayHi/ 如果你认为以上 http://localhost:50052/org.apache.dubbo.samples.api.GreetingsService/sayHi 格式的 path 请求不够友好，还可以通过注解自定义 http 请求的路径和方法等参数， 目前已支持 内置，Spring Web和JAX-RS 三种注解格式。以下示例的完整代码请参见 dubbo-samples-triple-rest。</description></item></channel></rss>