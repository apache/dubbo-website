<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>基于 HTTP1/2 的 RPC 通信协议 - triple on Apache Dubbo</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/protocols/triple/</link><description>Recent content in 基于 HTTP1/2 的 RPC 通信协议 - triple on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/protocols/triple/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 Java 接口方式开发 triple 通信服务</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/protocols/triple/interface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/protocols/triple/interface/</guid><description>不同于谷歌官方 gRPC 实现，Dubbo 实现的 triple 协议易用性更好（不绑定 Protobuf），你可以继续使用 Java 接口 直接定义服务。对于期望平滑升级、没有多语言业务或者不熟悉 Protobuf 的用户而言，Java 接口方式是最简单的使用 triple 的方式。
以下是一个使用Java 接口开发 Dubbo 服务的基本示例，示例使用 triple 协议通信，可在此查看 本示例的完整代码。
注意 本文使用的示例是基于原生 API 编码的，这里还有一个 Spring Boot 版本的示例 供参考，同样是 Java接口+triple 的模式，此示例还额外加入了服务发现配置。 运行示例 首先，可通过以下命令下载示例源码
git clone --depth=1 https://github.com/apache/dubbo-samples.git 进入示例源码目录：
cd dubbo-samples/1-basic/dubbo-samples-api 启动Server 运行以下命令启动 server
mvn -Dexec.mainClass=org.apache.dubbo.samples.provider.Application exec:java 启动Client 有两种方式可以调用 server 发布的服务
使用标准的 http 工具，如 cURL 使用 Dubbo SDK 开发一个 client cURL curl \ --header &amp;#34;Content-Type: application/json&amp;#34; \ --data &amp;#39;[&amp;#34;Dubbo&amp;#34;]&amp;#39; \ http://localhost:50052/org.</description></item><item><title>使用 Protobuf(IDL) 开发 triple 通信服务</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/protocols/triple/idl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/protocols/triple/idl/</guid><description>本示例演示如何使用 Protocol Buffers 定义服务，并将其发布为对外可调用的 triple 协议服务。如果你有多语言业务互调、gRPC互通，或者熟悉并喜欢 Protobuf 的开发方式，则可以使用这种模式，否则可以考虑上一篇基于Java接口的 triple 开发模式。
可在此查看 本示例的完整代码。
注意 本文使用的示例是基于原生 API 编码的，这里还有一个 Spring Boot 版本的示例 供参考，同样是 protobuf+triple 的模式，但额外加入了服务发现配置。 运行示例 首先，可通过以下命令下载示例源码：
git clone --depth=1 https://github.com/apache/dubbo-samples.git 进入示例源码目录：
cd dubbo-samples/1-basic/dubbo-samples-api-idl 编译项目，由 IDL 生成代码，这会调用 dubbo 提供的 protoc 插件生成对应的服务定义代码：
mvn clean compile 生成代码如下
├── build │ └── generated │ └── source │ └── proto │ └── main │ └── java │ └── org │ └── apache │ └── dubbo │ └── samples │ └── tri │ └── unary │ ├── DubboGreeterTriple.</description></item><item><title>Streaming 通信</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/protocols/triple/streaming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/protocols/triple/streaming/</guid><description>在 选择 RPC 通信协议 一节提到，Streaming 是 Dubbo3 新提供的一种 RPC 数据传输模式，适用于以下场景:
接口需要发送大量数据，这些数据无法被放在一个 RPC 的请求或响应中，需要分批发送，但应用层如果按照传统的多次 RPC 方式无法解决顺序和性能的问题，如果需要保证有序，则只能串行发送 流式场景，数据需要按照发送顺序处理, 数据本身是没有确定边界的 推送类场景，多个消息在同一个调用的上下文中被发送和处理 Streaming 分为以下三种:
SERVER_STREAM(服务端流) CLIENT_STREAM(客户端流) BIDIRECTIONAL_STREAM(双向流) 以下示例演示 triple streaming 流式通信的基本使用方法，涵盖了客户端流、服务端流、双向流等三种模式，示例使用 Protocol Buffers 的服务开发模式，对于 Java 接口模式的开发者可以在本文最后查看相应说明。可在此查看 本示例完整代码。
运行示例 首先，可通过以下命令下载示例源码：
git clone --depth=1 https://github.com/apache/dubbo-samples.git 进入示例源码目录：
cd dubbo-samples/2-advanced/dubbo-samples-triple-streaming 编译项目，由 IDL 生成代码，这会调用 dubbo 提供的 protoc 插件生成对应的服务定义代码：
mvn clean compile 启动server 运行以下命令，启动 server：
$ mvn compile exec:java -Dexec.mainClass=&amp;#34;org.apache.dubbo.samples.tri.streaming.TriStreamServer&amp;#34; 启动client 运行以下命令，启动 client：
$ mvn compile exec:java -Dexec.mainClass=&amp;#34;org.apache.dubbo.samples.tri.streaming.TriStreamClient&amp;#34; 源码解读 与 使用 Protobuf(IDL) 开发 triple 协议服务 一节中提到的一样，这个示例使用 protobuf 定义服务，因此示例需要的依赖、配置等基本是一致的，请参考那一节了解完整详情。接下来，我们将重点讲解流式通信部分的内容。</description></item><item><title>使用 Dubbo 开发 gRPC 服务</title><link>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/protocols/triple/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/tasks/protocols/triple/grpc/</guid><description>这个示例演示了如何使用 triple 协议实现 Dubbo 服务与标准 gRPC 服务的互相调用，可在此查看 示例完整源码
就像在 Triple协议规范 中所描述的，triple 协议与 gRPC 协议保持 100% 兼容，同时在易用性方面有了非常大的提升（比如支持 cURL、浏览器直接访问等），可以说 triple 是一个更好用的 gRPC 设计与实现。
运行示例 首先，可通过以下命令下载示例源码
git clone --depth=1 https://github.com/apache/dubbo-samples.git 进入示例源码目录：
cd dubbo-samples/2-advanced/dubbo-samples-triple-grpc 接下来，我们分别从 dubbo 调用 grpc、grpc 调用 dubbo 两个不同的方向，看一下如何基于 triple 协议实现互调。
作为标准的 gRPC Server 在这一部分，我们会发布一个 Dubbo Triple Server，然后启动一个标准的 gRPC 消费端（示例采用谷歌官方发布的 grpc-java 编码）来调用 Triple 服务。
启动 Dubbo server 确保你在 dubbo-samples-triple-grpc 目录，运行以下命令：
$ mvn compile exec:java -Dexec.mainClass=&amp;#34;org.apache.dubbo.samples.tri.grpc.interop.server.TriOpServer&amp;#34; 使用标准 gRPC client 调用 Triple 服务 打开一个新的终端，在 dubbo-samples-triple-grpc 目录运行以下命令：</description></item></channel></rss>