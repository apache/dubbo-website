<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Apache Dubbo – Dubbo 介绍</title><link>https://dubbo.apache.org/zh-cn/overview/what/</link><description>Recent content in Dubbo 介绍 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/overview/what/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview: 了解 Dubbo 核心概念和架构</title><link>https://dubbo.apache.org/zh-cn/overview/what/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/what/overview/</guid><description>
&lt;p>&lt;img src="https://dubbo.apache.org/imgs/v3/concepts/architecture-2.png" alt="architecture">&lt;/p>
&lt;p>以上是 Dubbo 的工作原理图，从抽象架构上分为两层：&lt;strong>服务治理抽象控制面&lt;/strong> 和 &lt;strong>Dubbo 数据面&lt;/strong> 。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>服务治理控制面&lt;/strong>。服务治理控制面不是特指如注册中心类的单个具体组件，而是对 Dubbo 治理体系的抽象表达。控制面包含协调服务发现的注册中心、流量管控策略、Dubbo Admin 控制台等，如果采用了 Service Mesh 架构则还包含 Istio 等服务网格控制面。&lt;/li>
&lt;li>&lt;strong>Dubbo 数据面&lt;/strong>。数据面代表集群部署的所有 Dubbo 进程，进程之间通过 RPC 协议实现数据交换，Dubbo 定义了微服务应用开发与调用规范并负责完成数据传输的编解码工作。
&lt;ul>
&lt;li>服务消费者 (Dubbo Consumer)，发起业务调用或 RPC 通信的 Dubbo 进程&lt;/li>
&lt;li>服务提供者 (Dubbo Provider)，接收业务调用或 RPC 通信的 Dubbo 进程&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="dubbo-数据面">Dubbo 数据面&lt;/h2>
&lt;p>从数据面视角，Dubbo 帮助解决了微服务实践中的以下问题：&lt;/p>
&lt;ul>
&lt;li>Dubbo 作为 &lt;strong>服务开发框架&lt;/strong> 约束了微服务定义、开发与调用的规范，定义了服务治理流程及适配模式&lt;/li>
&lt;li>Dubbo 作为 &lt;strong>RPC 通信协议实现&lt;/strong> 解决服务间数据传输的编解码问题&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://dubbo.apache.org/imgs/v3/what/framework1.png" alt="framework">&lt;/p>
&lt;h3 id="服务开发框架">服务开发框架&lt;/h3>
&lt;p>微服务的目标是构建足够小的、自包含的、独立演进的、可以随时部署运行的分布式应用程序，几乎每个语言都有类似的应用开发框架来帮助开发者快速构建此类微服务应用，比如 Java 微服务体系的 Spring Boot，它帮 Java 微服务开发者以最少的配置、最轻量的方式快速开发、打包、部署与运行应用。&lt;/p>
&lt;p>微服务的分布式特性，使得应用间的依赖、网络交互、数据传输变得更频繁，因此不同的&lt;strong>应用需要定义、暴露或调用 RPC 服务，那么这些 RPC 服务如何定义、如何与应用开发框架结合、服务调用行为如何控制？这就是 Dubbo 服务开发框架的含义，Dubbo 在微服务应用开发框架之上抽象了一套 RPC 服务定义、暴露、调用与治理的编程范式&lt;/strong>，比如 Dubbo Java 作为服务开发框架，当运行在 Spring 体系时就是构建在 Spring Boot 应用开发框架之上的微服务开发框架，并在此之上抽象了一套 RPC 服务定义、暴露、调用与治理的编程范式。&lt;/p>
&lt;p>&lt;img src="https://dubbo.apache.org/imgs/v3/what/framework2.png" alt="framework">&lt;/p>
&lt;p>Dubbo 作为服务开发框架包含的具体内容如下：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>RPC 服务定义、开发范式&lt;/strong>。比如 Dubbo 支持通过 IDL 定义服务，也支持编程语言特有的服务开发定义方式，如通过 Java Interface 定义服务。&lt;/li>
&lt;li>&lt;strong>RPC 服务发布与调用 API&lt;/strong>。Dubbo 支持同步、异步、Reactive Streaming 等服务调用编程模式，还支持请求上下文 API、设置超时时间等。&lt;/li>
&lt;li>&lt;strong>服务治理策略、流程与适配方式等&lt;/strong>。作为服务框架数据面，Dubbo 定义了服务地址发现、负载均衡策略、基于规则的流量路由、Metrics 指标采集等服务治理抽象，并适配到特定的产品实现。&lt;/li>
&lt;/ul>
&lt;p>想了解如何使用 Dubbo 微服务框架进行业务编码？从以下 SDK 开始微服务项目开发之旅吧：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://dubbo.apache.org/zh-cn/overview/quickstart/java/">Java&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dubbo.apache.org/zh-cn/overview/quickstart/go/">Golang&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dubbo.apache.org/zh-cn/overview/quickstart/rust/">Rust&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/apache/dubbo-js">Node&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="通信协议">通信协议&lt;/h3>
&lt;p>&lt;strong>Dubbo 从设计上不绑定任何一款特定通信协议，HTTP/2、REST、gRPC、JsonRPC、Thrift、Hessian2 等几乎所有主流的通信协议，Dubbo 框架都可以提供支持。&lt;/strong> 这样的 Protocol 设计模式给构建微服务带来了最大的灵活性，开发者可以根据需要如性能、通用型等选择不同的通信协议，不再需要任何的代理来实现协议转换，甚至你还可以通过 Dubbo 实现不同协议间的迁移。&lt;/p>
&lt;p>&lt;img src="https://dubbo.apache.org/imgs/v3/what/protocol.png" alt="protocols">&lt;/p>
&lt;p>Dubbo Protocol 被设计支持扩展，您可以将内部私有协议适配到 Dubbo 框架上，进而将私有协议接入 Dubbo 体系，以享用 Dubbo 的开发体验与服务治理能力。比如 Dubbo3 的典型用户阿里巴巴，就是通过扩展支持 HSF 协议实现了内部 HSF 框架到 Dubbo3 框架的整体迁移。&lt;/p>
&lt;p>Dubbo 还支持多协议暴露，您可以在单个端口上暴露多个协议，Dubbo Server 能够自动识别并确保请求被正确处理，也可以将同一个 RPC 服务发布在不同的端口（协议），为不同技术栈的调用方服务。&lt;/p>
&lt;p>Dubbo 提供了两款内置高性能 Dubbo2、Triple (兼容 gRPC) 协议实现，以满足部分微服务用户对高性能通信的诉求，两者最开始都设计和诞生于阿里巴巴内部的高性能通信业务场景。&lt;/p>
&lt;ul>
&lt;li>Dubbo2 协议是在 TCP 传输层协议之上设计的二进制通信协议&lt;/li>
&lt;li>Triple 则是基于 HTTP/2 之上构建的支持流式模式的通信协议，并且 Triple 完全兼容 gRPC 但实现上做了更多的符合 Dubbo 框架特点的优化。&lt;/li>
&lt;/ul>
&lt;p>总的来说，Dubbo 对通信协议的支持具有以下特点：&lt;/p>
&lt;ul>
&lt;li>不绑定通信协议&lt;/li>
&lt;li>提供高性能通信协议实现&lt;/li>
&lt;li>支持流式通信模型&lt;/li>
&lt;li>不绑定序列化协议&lt;/li>
&lt;li>支持单个服务的多协议暴露&lt;/li>
&lt;li>支持单端口多协议发布&lt;/li>
&lt;li>支持一个应用内多个服务使用不同通信协议&lt;/li>
&lt;/ul>
&lt;h2 id="dubbo-服务治理">Dubbo 服务治理&lt;/h2>
&lt;p>服务开发框架解决了开发与通信的问题，但在微服务集群环境下，我们仍需要解决无状态服务节点动态变化、外部化配置、日志跟踪、可观测性、流量管理、高可用性、数据一致性等一系列问题，我们将这些问题统称为服务治理。&lt;/p>
&lt;p>Dubbo 抽象了一套微服务治理模式并发布了对应的官方实现，服务治理可帮助简化微服务开发与运维，让开发者更专注在微服务业务本身。&lt;/p>
&lt;h3 id="服务治理抽象">服务治理抽象&lt;/h3>
&lt;p>以下展示了 Dubbo 核心的服务治理功能定义&lt;/p>
&lt;p>&lt;img src="https://dubbo.apache.org/imgs/v3/what/governance.png" alt="governance">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>地址发现&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Dubbo 服务发现具备高性能、支持大规模集群、服务级元数据配置等优势，默认提供 Nacos、Zookeeper、Consul 等多种注册中心适配，与 Spring Cloud、Kubernetes Service 模型打通，支持自定义扩展。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>负载均衡&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Dubbo 默认提供加权随机、加权轮询、最少活跃请求数优先、最短响应时间优先、一致性哈希和自适应负载等策略&lt;/p>
&lt;ul>
&lt;li>&lt;strong>流量路由&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Dubbo 支持通过一系列流量规则控制服务调用的流量分布与行为，基于这些规则可以实现基于权重的比例流量分发、灰度验证、金丝雀发布、按请求参数的路由、同区域优先、超时配置、重试、限流降级等能力。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>链路追踪&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Dubbo 官方通过适配 OpenTelemetry 提供了对 Tracing 全链路追踪支持，用户可以接入支持 OpenTelemetry 标准的产品如 Skywalking、Zipkin 等。另外，很多社区如 Skywalking、Zipkin 等在官方也提供了对 Dubbo 的适配。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>可观测性&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Dubbo 实例通过 Prometheus 等上报 QPS、RT、请求次数、成功率、异常次数等多维度的可观测指标帮助了解服务运行状态，通过接入 Grafana、Admin 控制台帮助实现数据指标可视化展示。&lt;/p>
&lt;p>Dubbo 服务治理生态还提供了对 &lt;strong>API 网关&lt;/strong>、&lt;strong>限流降级&lt;/strong>、&lt;strong>数据一致性&lt;/strong>、&lt;strong>认证鉴权&lt;/strong>等场景的适配支持。&lt;/p>
&lt;h3 id="dubbo-admin">Dubbo Admin&lt;/h3>
&lt;p>Admin 控制台提供了 Dubbo 集群的可视化视图，通过 Admin 你可以完成集群的几乎所有管控工作。&lt;/p>
&lt;ul>
&lt;li>查询服务、应用或机器状态&lt;/li>
&lt;li>创建项目、服务测试、文档管理等&lt;/li>
&lt;li>查看集群实时流量、定位异常问题等&lt;/li>
&lt;li>流量比例分发、参数路由等流量管控规则下发&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://dubbo.apache.org/imgs/v3/what/admin.png" alt="Admin">&lt;/p>
&lt;h3 id="服务网格">服务网格&lt;/h3>
&lt;p>将 Dubbo 接入 Istio 等服务网格治理体系。&lt;/p>
&lt;p>&lt;img src="https://dubbo.apache.org/imgs/v3/mesh/mix-mesh.png" alt="Dubbo-Mesh">&lt;/p></description></item><item><title>Overview: 与 gRPC、Spring Cloud、Istio 的关系</title><link>https://dubbo.apache.org/zh-cn/overview/what/xyz-difference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/what/xyz-difference/</guid><description>
&lt;p>很多开发者经常会问到 Apache Dubbo 与 Spring Cloud、gRPC 以及一些 Service Mesh 项目如 Istio 的关系，要解释清楚它们的关系并不困难，你只需要跟随这篇文章和 Dubbo 文档做一些更深入的了解，但总的来说，它们之间有些能力是重合的，但在一些场景你可以把它们放在一起使用。&lt;/p>
&lt;p>虽然这是一篇 Dubbo 维护者写的文档，我们仍会尽力将 Dubbo 与其他组件之间的联系与差异客观、透明的展现出来，但考虑到每个人对不同产品的熟悉程度不一，这里的个别表述可能并不完全准确，希望能给开发者带来帮助。&lt;/p>
&lt;h2 id="dubbo-与-spring-cloud">Dubbo 与 Spring Cloud&lt;/h2>
&lt;p>&lt;img src="https://dubbo.apache.org/imgs/v3/difference/dubbo-springcloud.png" alt="dubbo-springcloud">&lt;/p>
&lt;p>从上图我们可以看出，Dubbo 和 Spring Cloud 有很多相似之处，它们都在整个架构图的相同位置并提供一些相似的功能。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Dubbo 和 Spring Cloud 都侧重在对分布式系统中常见问题模式的抽象（如服务发现、负载均衡、动态配置等）&lt;/strong>，同时对每一个问题都提供了配套组件实现，形成了一套微服务整体解决方案，让使用 Dubbo 及 Spring Cloud 的用户在开发微服务应用时可以专注在业务逻辑开发上。&lt;/li>
&lt;li>&lt;strong>Dubbo 和 Spring Cloud 都完全兼容 Spring 体系的应用开发模式&lt;/strong>，Dubbo 对 Spring 应用开发框架、Spring Boot 微服务框架都做了很好的适配，由于 Spring Cloud 出自 Spring 体系，在这一点上自然更不必多说。&lt;/li>
&lt;/ul>
&lt;p>虽然两者有很多相似之处，但由于它们在诞生背景与架构设计上的巨大差异，&lt;strong>两者在性能、适用的微服务集群规模、生产稳定性保障、服务治理等方面都有很大差异&lt;/strong>。&lt;/p>
&lt;p>Spring Cloud 的优势在于：&lt;/p>
&lt;ul>
&lt;li>同样都支持 Spring 开发体系的情况下，Spring Cloud 得到更多的原生支持&lt;/li>
&lt;li>对一些常用的微服务模式做了抽象如服务发现、动态配置、异步消息等，同时包括一些批处理任务、定时任务、持久化数据访问等领域也有涉猎。&lt;/li>
&lt;li>基于 HTTP 的通信模式，加上相对比较完善的入门文档和演示 demo 和 starters，让开发者在第一感觉上更易于上手&lt;/li>
&lt;/ul>
&lt;p>Spring Cloud 的问题有：&lt;/p>
&lt;ul>
&lt;li>只提供抽象模式的定义不提供官方稳定实现，开发者只能寻求类似 Netflix、Alibaba、Azure 等不同厂商的实现套件，而每个厂商支持的完善度、稳定性、活跃度各异&lt;/li>
&lt;li>有微服务全家桶却不是能拿来就用的全家桶，demo 上手容易，但落地推广与长期使用的成本非常高&lt;/li>
&lt;li>欠缺服务治理能力，尤其是流量管控方面如负载均衡、流量路由方面能力都比较弱&lt;/li>
&lt;li>编程模型与通信协议绑定 HTTP，在性能、与其他 RPC 体系互通上存在障碍&lt;/li>
&lt;li>总体架构与实现只适用于小规模微服务集群实践，当集群规模增长后就会遇到地址推送效率、内存占用等各种瓶颈的问题，但此时迁移到其他体系却很难实现&lt;/li>
&lt;li>很多微服务实践场景的问题需要用户独自解决，比如优雅停机、启动预热、服务测试，再比如双注册、双订阅、延迟注册、服务按分组隔离、集群容错等&lt;/li>
&lt;/ul>
&lt;p>而以上这些点，都是 &lt;strong>Dubbo 的优势&lt;/strong>所在：&lt;/p>
&lt;ul>
&lt;li>完全支持 Spring &amp;amp; Spring Boot 开发模式，同时在服务发现、动态配置等基础模式上提供与 Spring Cloud 对等的能力。&lt;/li>
&lt;li>是企业级微服务实践方案的整体输出，Dubbo 考虑到了企业微服务实践中会遇到的各种问题如优雅上下线、多注册中心、流量管理等，因此其在生产环境的长期维护成本更低&lt;/li>
&lt;li>在通信协议和编码上选择更灵活，包括 rpc 通信层协议如 HTTP、HTTP/2(Triple、gRPC)、TCP 二进制协议、rest等，序列化编码协议Protobuf、JSON、Hessian2 等，支持单端口多协议。&lt;/li>
&lt;li>Dubbo 从设计上突出服务服务治理能力，如权重动态调整、标签路由、条件路由等，支持 Proxyless 等多种模式接入 Service Mesh 体系&lt;/li>
&lt;li>高性能的 RPC 协议编码与实现，&lt;/li>
&lt;li>Dubbo 是在超大规模微服务集群实践场景下开发的框架，可以做到百万实例规模的集群水平扩容，应对集群增长带来的各种问题&lt;/li>
&lt;li>Dubbo 提供 Java 外的多语言实现，使得构建多语言异构的微服务体系成为可能&lt;/li>
&lt;/ul>
&lt;p>如果您的目标是构建企业级应用，并期待在未来的持久维护中能够更省心、更稳定，我们建议你能更深入的了解 Dubbo 的使用和其提供的能力。&lt;/p>
&lt;blockquote>
&lt;p>Dubbo 在入门资料上的欠缺是对比 Spring Cloud 的一个劣势，这体现在依赖配置管理、文档、demo 示例完善度上，当前整个社区在重点投入这一部分的建设，期望能降低用户在第一天体验和学习 Dubbo 时的门槛，不让开发者因为缺乏文档而错失 Dubbo 这样一款优秀的产品。&lt;/p>
&lt;/blockquote>
&lt;h2 id="dubbo-与-grpc">Dubbo 与 gRPC&lt;/h2>
&lt;p>Dubbo 与 gRPC 最大的差异在于两者的定位上：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>gRPC 定位为一款 RPC 框架&lt;/strong>，Google 推出它的核心目标是定义云原生时代的 rpc 通信规范与标准实现；&lt;/li>
&lt;li>&lt;strong>Dubbo 定位是一款微服务开发框架&lt;/strong>，它侧重解决微服务实践从服务定义、开发、通信到治理的问题，因此 Dubbo 同时提供了 RPC 通信、与应用开发框架的适配、服务治理等能力。&lt;/li>
&lt;/ul>
&lt;p>Dubbo 不绑定特定的通信协议，即 Dubbo 服务间可通过多种 RPC 协议通信并支持灵活切换。因此，你可以在 Dubbo 开发的微服务中选用 gRPC 通信，&lt;strong>Dubbo 完全兼容 gRPC，并将 gRPC 设计为内置原生支持的协议之一&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://dubbo.apache.org/imgs/v3/difference/dubbo-grpc.png" alt="dubbo-grpc">&lt;/p>
&lt;p>如果您看中基于 HTTP/2 的通信协议、基于 Protobuf 的服务定义，并基于此决定选型 gRPC 作为微服务开发框架，那很有可能您会在未来的微服务业务开发中遇到障碍，这主要源于 gRPC 没有为开发者提供以下能力：&lt;/p>
&lt;ul>
&lt;li>缺乏与业务应用框架集成的开发模式，用户需要基于 gRPC 底层的 RPC API 定义、发布或调用微服务，中间可能还有与业务应用开发框架整合的问题&lt;/li>
&lt;li>缺乏微服务周边生态扩展与适配，如服务发现、限流降级、链路追踪等没有多少可供选择的官方实现，且扩展起来非常困难&lt;/li>
&lt;li>缺乏服务治理能力，作为一款 rpc 框架，缺乏对服务治理能力的抽象&lt;/li>
&lt;/ul>
&lt;p>因此，gRPC 更适合作为底层的通信协议规范或编解码包，而 Dubbo 则可用作微服务整体解决方案。&lt;strong>对于 gRPC 协议，我们推荐的使用模式 Dubbo + gRPC 的组合&lt;/strong>，这个时候，gRPC 只是隐藏在底层的一个通信协议，不被微服务开发者感知，开发者基于 Dubbo 提供的 API 和配置开发服务，并基于 dubbo 的服务治理能力治理服务，在未来，开发者还能使用 Dubbo 生态和开源的 IDL 配套工具管理服务定义与发布。&lt;/p>
&lt;p>如果我们忽略 gRPC 在应用开发框架侧的空白，只考虑如何给 gRPC 带来服务治理能力，则另一种可以采用的模式就是在 Service Mesh 架构下使用 gRPC，这就引出了我们下一小节要讨论的内容：Dubbo 与 Service Mesh 架构的关系。&lt;/p>
&lt;h2 id="dubbo-与-istio">Dubbo 与 Istio&lt;/h2>
&lt;p>Service Mesh 是近年来在云原生背景下诞生的一种微服务架构，在 Kubernetes 体系下，让微服务开发中的更多能力如流量拦截、服务治理等下沉并成为基础设施，让微服务开发、升级更轻量。Istio 是 Service Mesh 的开源代表实现，它从部署架构上分为数据面与控制面，从这一点上与 &lt;a href="../overview">Dubbo 总体架构&lt;/a> 是基本一致的，Istio 带来的主要变化在于：&lt;/p>
&lt;ul>
&lt;li>数据面，Istio 通过引入 Sidecar 实现了对服务流量的透明拦截，Sidecar 通常是与 Dubbo 等开发的传统微服务组件部署在一起&lt;/li>
&lt;li>控制面，将之前抽象的服务治理中心聚合为一个具有统一实现的具体组件，并实现了与底层基础设施如 Kubernetes 无缝适配&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Dubbo 已经实现了对 Istio 体系的全面接入，可以用 Istio 控制面治理 Dubbo 服务，而在数据面部署架构上，针对 Sidecar 引入的复杂性与性能问题，Dubbo 还支持无代理的 Proxyless 模式。&lt;/strong> 除此之外，Dubbo Mesh 体系还解决了 Istio 架构落地过程中的很多问题，包括提供更灵活的数据面部署架构、更低的迁移成本等。&lt;/p>
&lt;p>&lt;img src="https://dubbo.apache.org/imgs/v3/mesh/mix-mesh.png" alt="Dubbo-Mesh">&lt;/p>
&lt;p>从&lt;strong>数据面&lt;/strong>的视角，Dubbo 支持如下两种开发和部署模式，可以通过 Istio、Consul、Linkerd 等控制面组件实现对数据面服务的治理。&lt;/p>
&lt;ul>
&lt;li>Proxy 模式，Dubbo 与 Envoy 一起部署，Dubbo 作为编程框架 &amp;amp; 协议通信组件存在，流量管控由 Envoy 与 Istio 控制面交互实现。&lt;/li>
&lt;li>Proxyless 模式，Dubbo 进程保持独立部署，Dubbo 通过标准 xDS 协议直接接入 Istio 等控制面组件。&lt;/li>
&lt;/ul>
&lt;p>从&lt;strong>控制面&lt;/strong>视角，Dubbo 可接入原生 Istio 标准控制面和规则体系，而对于一些 Dubbo 老版本用户，Dubbo Mesh 提供了平滑迁移方案，具体请查看 &lt;a href="../../tasks/mesh/">Dubbo Mesh 服务网格&lt;/a>。&lt;/p></description></item><item><title>Overview: 核心优势</title><link>https://dubbo.apache.org/zh-cn/overview/what/advantages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/overview/what/advantages/</guid><description/></item></channel></rss>