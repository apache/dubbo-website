<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>协议 on Apache Dubbo</title><link>https://dubbo.apache.org/zh-cn/tags/%E5%8D%8F%E8%AE%AE/</link><description>Recent content in 协议 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://dubbo.apache.org/zh-cn/tags/%E5%8D%8F%E8%AE%AE/index.xml" rel="self" type="application/rss+xml"/><item><title>发布使用不同协议的多个服务，通过单端口监听</title><link>https://dubbo.apache.org/zh-cn/blog/1/01/01/%E5%8F%91%E5%B8%83%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%A4%9A%E4%B8%AA%E6%9C%8D%E5%8A%A1%E9%80%9A%E8%BF%87%E5%8D%95%E7%AB%AF%E5%8F%A3%E7%9B%91%E5%90%AC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh-cn/blog/1/01/01/%E5%8F%91%E5%B8%83%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%A4%9A%E4%B8%AA%E6%9C%8D%E5%8A%A1%E9%80%9A%E8%BF%87%E5%8D%95%E7%AB%AF%E5%8F%A3%E7%9B%91%E5%90%AC/</guid><description>通过对protocol进行配置，dubbo3可以支持端口的协议复用。 比如使用Triple协议启动端口复用后，可以在相同的端口上为服务增加 Dubbo协议支持，以及Qos协议支持。这些协议的识别都是由一个统一的端口复用 服务器进行处理的，可以用于服务的协议迁移，并且可以节约端口以及相关的资源，减少运维的复杂性。
在服务的创建阶段，通过从Config层获取到服务导出的协议配置从而创建不同的Protocol对象进行导出。在导出的过程 中，如果不是第一次创建端口复用的Server，那么Exchanger会将Protcol层传递的数据保存到Server，用于后续处理该协议类型的消息。
当客户端的消息传递过来后，首先会通过Server传递给ProtocolDetector，如果完成了识别，那么就会标记该客户端为对应的协议。并通过WireProtocol配置对应的处理逻辑，最后交给ChannelOperator完成底层的IO框架和对应的Dubbo框架的处理逻辑的绑定。
以上的协议识别完成之后，Channel已经确定了如何处理远程的客户端消息，通过对应的ServerPipeline进行处理即可（在处理的过程中也会根据配置信息决定消息的处理线程）。
使用方式 在同一主机上部署多个服务或需要通过负载均衡器访问多个服务。
参考用例 https://github.com/apache/dubbo-samples/tree/master/dubbo-samples-port-unification
配置方式 关于Dubbo支持的配置方式，可以参考配置说明
服务多协议导出 ext-protocol参数支持配置多个不同的协议，协议之间通过&amp;quot;,&amp;ldquo;进行分隔。
xml 配置 &amp;lt;dubbo:protocol name=&amp;#34;dubbo&amp;#34; port=&amp;#34;-1&amp;#34; ext-protocol=&amp;#34;tri,&amp;#34;/&amp;gt; &amp;lt;bean id=&amp;#34;greetingService&amp;#34; class=&amp;#34;org.apache.dubbo.demo.provider.GreetingServiceImpl&amp;#34;/&amp;gt; &amp;lt;dubbo:service delay=&amp;#34;5000&amp;#34; version=&amp;#34;1.0.0&amp;#34; group=&amp;#34;greeting&amp;#34; timeout=&amp;#34;5000&amp;#34; interface=&amp;#34;org.apache.dubbo.demo.GreetingService&amp;#34; ref=&amp;#34;greetingService&amp;#34; protocol=&amp;#34;dubbo&amp;#34;/&amp;gt; API 配置 ProtocolConfig config = new ProtocolConfig(CommonConstants.TRIPLE, -1); config.setExtProtocol(CommonConstants.DUBBO+&amp;#34;,&amp;#34;); yaml 配置 dubbo: application: name: dubbo-springboot-demo-provider protocol: name: tri port: -1 ext-protocol: dubbo, properties 配置 dubbo.protocol.name=tri dubbo.protocol.ext-protocol=dubbo, dubbo.protocol.port=20880 Qos接入 Qos模块导入 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.dubbo&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;dubbo-qos&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 完成Qos模块的导入之后，相关的配置项可参考Qos操作手册进行配置。
默认情况下，基于端口复用的Qos服务在模块导入后是启动的。
使用方式 Qos使用 将Qos协议接入到端口复用的场景下，需要在建立连接之后，客户端先向服务端发送消息，对比将Qos协议通过单个端口提供服务，端口复用版的Qos协议在处理telnet连接的情况下需要用户执行一些操作，完成协议识别（二选一）。</description></item></channel></rss>